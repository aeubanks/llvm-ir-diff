; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Applications/JM/lencod/context_ini.c'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Applications/JM/lencod/context_ini.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.RD_DATA = type { double, [16 x [16 x i16]], [16 x [16 x i16]], [16 x [16 x i16]], ptr, ptr, i32, i16, [4 x i32], [4 x i32], ptr, [16 x i8], [16 x i8], i32, i64, i32, ptr, ptr, [2 x [4 x [4 x i8]]], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ImageParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [9 x [16 x [16 x i16]]], [5 x [16 x [16 x i16]]], [9 x [8 x [8 x i16]]], [2 x [4 x [16 x [16 x i16]]]], [16 x [16 x i16]], [16 x [16 x i32]], ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, [4 x [4 x i32]], i32, i32, i32, i32, i32, double, i32, i32, i32, i32, ptr, ptr, ptr, ptr, [15 x i16], i32, i32, i32, i32, i32, i32, i32, i32, [6 x [32 x i32]], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1 x i32], i32, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x [2 x i32]], [2 x i32], i32, i32, i16, i32, i32, i32, i32, i32 }
%struct.InputParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i32]], [8 x [2 x i32]], [4 x [4 x i32]], i32, i32, i32, i32, [256 x i8], [256 x i8], [256 x i8], [256 x i8], [256 x i8], i32, i32, i32, i32, i32, i32, [500 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i8], [256 x i8], [256 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1024 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i8], [256 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i8], i32, i32, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, [5 x double], i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x double], [6 x double], [256 x i8], i32, i32, i32, i32, [2 x [5 x i32]], [2 x [5 x i32]], i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32 }
%struct.Slice = type { i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, i32, ptr, ptr, ptr, i32, ptr, ptr, ptr, ptr, [3 x [2 x i32]] }
%struct.BiContextType = type { i16, i8, i64 }
%struct.MotionInfoContexts = type { [3 x [11 x %struct.BiContextType]], [2 x [9 x %struct.BiContextType]], [2 x [10 x %struct.BiContextType]], [2 x [6 x %struct.BiContextType]], [4 x %struct.BiContextType], [4 x %struct.BiContextType], [3 x %struct.BiContextType] }
%struct.TextureInfoContexts = type { [2 x %struct.BiContextType], [4 x %struct.BiContextType], [3 x [4 x %struct.BiContextType]], [10 x [4 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [5 x %struct.BiContextType]], [10 x [5 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]] }

@probability = dso_local local_unnamed_addr global [128 x double] [double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 5.000000e-01, double 4.746090e-01, double 4.505070e-01, double 4.276290e-01, double 4.059120e-01, double 3.852990e-01, double 3.657320e-01, double 3.471590e-01, double 3.295300e-01, double 3.127950e-01, double 2.969110e-01, double 2.818330e-01, double 2.675200e-01, double 2.539350e-01, double 2.410390e-01, double 2.287990e-01, double 2.171800e-01, double 2.061510e-01, double 1.956820e-01, double 1.857440e-01, double 1.763120e-01, double 1.673580e-01, double 1.588590e-01, double 1.507920e-01, double 1.431340e-01, double 1.358660e-01, double 1.289660e-01, double 1.224170e-01, double 1.162000e-01, double 1.102990e-01, double 1.046980e-01, double 0x3FB9710880D801B4, double 9.433400e-02, double 0x3FB6EC4A4095F245, double 8.499600e-02, double 8.068000e-02, double 0x3FB39AF1886DF82B, double 0x3FB29C12F09D8C6D, double 0x3FB1AA1D755BCCAF, double 6.549800e-02, double 6.217200e-02, double 5.901400e-02, double 5.601800e-02, double 5.317300e-02, double 5.047300e-02, double 4.790900e-02, double 4.547600e-02, double 4.316700e-02, double 4.097500e-02, double 3.889400e-02, double 3.691900e-02, double 3.504400e-02, double 3.326400e-02, double 3.157500e-02, double 2.997200e-02, double 2.845000e-02, double 2.700500e-02, double 2.563300e-02, double 2.433200e-02, double 2.309600e-02, double 2.192300e-02, double 2.081000e-02, double 1.975300e-02, double 1.875000e-02], align 16
@img = external local_unnamed_addr global ptr, align 8
@input = external local_unnamed_addr global ptr, align 8
@num_mb_per_slice = common dso_local local_unnamed_addr global i32 0, align 4
@number_of_slices = common dso_local local_unnamed_addr global i32 0, align 4
@initialized = common dso_local local_unnamed_addr global ptr null, align 8
@.str = private unnamed_addr constant [35 x i8] c"create_context_memory: initialized\00", align 1
@model_number = common dso_local local_unnamed_addr global ptr null, align 8
@.str.1 = private unnamed_addr constant [36 x i8] c"create_context_memory: model_number\00", align 1
@entropy = common dso_local local_unnamed_addr global [128 x double] zeroinitializer, align 16
@INIT_MB_TYPE_I = internal constant [1 x [3 x [11 x [2 x i32]]]] [[3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -28, i32 127], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 -1, i32 54], [2 x i32] [i32 7, i32 51], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 -28, i32 127], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 -1, i32 54], [2 x i32] [i32 7, i32 51]], [11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MB_TYPE_P = internal constant [3 x [3 x [11 x [2 x i32]]]] [[3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 23, i32 33], [2 x i32] [i32 23, i32 2], [2 x i32] [i32 21, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 9], [2 x i32] [i32 0, i32 49], [2 x i32] [i32 -37, i32 118], [2 x i32] [i32 5, i32 57], [2 x i32] [i32 -13, i32 78], [2 x i32] [i32 -11, i32 65], [2 x i32] [i32 1, i32 62]], [11 x [2 x i32]] [[2 x i32] [i32 26, i32 67], [2 x i32] [i32 16, i32 90], [2 x i32] [i32 9, i32 104], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -46, i32 127], [2 x i32] [i32 -20, i32 104], [2 x i32] [i32 1, i32 67], [2 x i32] [i32 18, i32 64], [2 x i32] [i32 9, i32 43], [2 x i32] [i32 29, i32 0], [2 x i32] [i32 0, i32 64]]], [3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 22, i32 25], [2 x i32] [i32 34, i32 0], [2 x i32] [i32 16, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -2, i32 9], [2 x i32] [i32 4, i32 41], [2 x i32] [i32 -29, i32 118], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 -6, i32 71], [2 x i32] [i32 -13, i32 79], [2 x i32] [i32 5, i32 52]], [11 x [2 x i32]] [[2 x i32] [i32 57, i32 2], [2 x i32] [i32 41, i32 36], [2 x i32] [i32 26, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -45, i32 127], [2 x i32] [i32 -15, i32 101], [2 x i32] [i32 -4, i32 76], [2 x i32] [i32 26, i32 34], [2 x i32] [i32 19, i32 22], [2 x i32] [i32 40, i32 0], [2 x i32] [i32 0, i32 64]]], [3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 29, i32 16], [2 x i32] [i32 25, i32 0], [2 x i32] [i32 14, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -10, i32 51], [2 x i32] [i32 -3, i32 62], [2 x i32] [i32 -27, i32 99], [2 x i32] [i32 26, i32 16], [2 x i32] [i32 -4, i32 85], [2 x i32] [i32 -24, i32 102], [2 x i32] [i32 5, i32 57]], [11 x [2 x i32]] [[2 x i32] [i32 54, i32 0], [2 x i32] [i32 37, i32 42], [2 x i32] [i32 12, i32 97], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -32, i32 127], [2 x i32] [i32 -22, i32 117], [2 x i32] [i32 -2, i32 74], [2 x i32] [i32 20, i32 40], [2 x i32] [i32 20, i32 10], [2 x i32] [i32 29, i32 0], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_B8_TYPE_I = internal constant [1 x [2 x [9 x [2 x i32]]]] [[2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_B8_TYPE_P = internal constant [3 x [2 x [9 x [2 x i32]]]] [[2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 12, i32 49], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 73], [2 x i32] [i32 17, i32 50], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 -6, i32 86], [2 x i32] [i32 -17, i32 95], [2 x i32] [i32 -6, i32 61], [2 x i32] [i32 9, i32 45], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 9, i32 50], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 10, i32 54], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 6, i32 69], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 0, i32 52], [2 x i32] [i32 8, i32 43], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 6, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -17, i32 73], [2 x i32] [i32 14, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 -6, i32 93], [2 x i32] [i32 -14, i32 88], [2 x i32] [i32 -6, i32 44], [2 x i32] [i32 4, i32 55], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MV_RES_I = internal constant [1 x [2 x [10 x [2 x i32]]]] [[2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MV_RES_P = internal constant [3 x [2 x [10 x [2 x i32]]]] [[2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -3, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -11, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -10, i32 94], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 6, i32 55], [2 x i32] [i32 7, i32 67], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 2, i32 88], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 54], [2 x i32] [i32 4, i32 69], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 0, i32 88], [2 x i32] [i32 0, i32 64]]], [2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -2, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -10, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 56], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -6, i32 85], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 2, i32 59], [2 x i32] [i32 2, i32 75], [2 x i32] [i32 -3, i32 87], [2 x i32] [i32 -3, i32 100], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -7, i32 86], [2 x i32] [i32 -5, i32 95], [2 x i32] [i32 0, i32 64]]], [2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -11, i32 89], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -15, i32 103], [2 x i32] [i32 -21, i32 116], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -13, i32 106], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 19, i32 57], [2 x i32] [i32 20, i32 58], [2 x i32] [i32 4, i32 84], [2 x i32] [i32 6, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 63], [2 x i32] [i32 6, i32 75], [2 x i32] [i32 -3, i32 90], [2 x i32] [i32 -1, i32 101], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_REF_NO_I = internal constant [1 x [2 x [6 x [2 x i32]]]] [[2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_REF_NO_P = internal constant [3 x [2 x [6 x [2 x i32]]]] [[2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 -7, i32 67], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -5, i32 80], [2 x i32] [i32 -7, i32 72], [2 x i32] [i32 1, i32 58]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 -1, i32 66], [2 x i32] [i32 -1, i32 77], [2 x i32] [i32 1, i32 70], [2 x i32] [i32 -2, i32 86], [2 x i32] [i32 -5, i32 72], [2 x i32] [i32 0, i32 61]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 3, i32 55], [2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -2, i32 75], [2 x i32] [i32 -12, i32 97], [2 x i32] [i32 -7, i32 50], [2 x i32] [i32 1, i32 60]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_DELTA_QP_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]]], align 16
@INIT_DELTA_QP_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]]], align 16
@INIT_MB_AFF_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 11], [2 x i32] [i32 1, i32 55], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MB_AFF_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 45], [2 x i32] [i32 -4, i32 78], [2 x i32] [i32 -3, i32 96], [2 x i32] [i32 0, i32 64]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 13, i32 15], [2 x i32] [i32 7, i32 51], [2 x i32] [i32 2, i32 80], [2 x i32] [i32 0, i32 64]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 7, i32 34], [2 x i32] [i32 -9, i32 88], [2 x i32] [i32 -20, i32 127], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_TRANSFORM_SIZE_I = internal constant [1 x [1 x [3 x [2 x i32]]]] [[1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 31, i32 21], [2 x i32] [i32 31, i32 31], [2 x i32] [i32 25, i32 50]]]], align 16
@INIT_TRANSFORM_SIZE_P = internal constant [3 x [1 x [3 x [2 x i32]]]] [[1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 12, i32 40], [2 x i32] [i32 11, i32 51], [2 x i32] [i32 14, i32 59]]], [1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 25, i32 32], [2 x i32] [i32 21, i32 49], [2 x i32] [i32 21, i32 54]]], [1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 21, i32 33], [2 x i32] [i32 19, i32 50], [2 x i32] [i32 17, i32 61]]]], align 16
@INIT_IPR_I = internal constant [1 x [1 x [2 x [2 x i32]]]] [[1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]]], align 16
@INIT_IPR_P = internal constant [3 x [1 x [2 x [2 x i32]]]] [[1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]], [1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]], [1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]]], align 16
@INIT_CIPR_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]]], align 16
@INIT_CIPR_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]]], align 16
@INIT_CBP_I = internal constant [1 x [3 x [4 x [2 x i32]]]] [[3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -17, i32 127], [2 x i32] [i32 -13, i32 102], [2 x i32] [i32 0, i32 82], [2 x i32] [i32 -7, i32 74]], [4 x [2 x i32]] [[2 x i32] [i32 -21, i32 107], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -31, i32 127], [2 x i32] [i32 -24, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -18, i32 95], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -21, i32 114], [2 x i32] [i32 -30, i32 127]]]], align 16
@INIT_CBP_P = internal constant [3 x [3 x [4 x [2 x i32]]]] [[3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -27, i32 126], [2 x i32] [i32 -28, i32 98], [2 x i32] [i32 -25, i32 101], [2 x i32] [i32 -23, i32 67]], [4 x [2 x i32]] [[2 x i32] [i32 -28, i32 82], [2 x i32] [i32 -20, i32 94], [2 x i32] [i32 -16, i32 83], [2 x i32] [i32 -22, i32 110]], [4 x [2 x i32]] [[2 x i32] [i32 -21, i32 91], [2 x i32] [i32 -18, i32 102], [2 x i32] [i32 -13, i32 93], [2 x i32] [i32 -29, i32 127]]], [3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -39, i32 127], [2 x i32] [i32 -18, i32 91], [2 x i32] [i32 -17, i32 96], [2 x i32] [i32 -26, i32 81]], [4 x [2 x i32]] [[2 x i32] [i32 -35, i32 98], [2 x i32] [i32 -24, i32 102], [2 x i32] [i32 -23, i32 97], [2 x i32] [i32 -27, i32 119]], [4 x [2 x i32]] [[2 x i32] [i32 -24, i32 99], [2 x i32] [i32 -21, i32 110], [2 x i32] [i32 -18, i32 102], [2 x i32] [i32 -36, i32 127]]], [3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -36, i32 127], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -14, i32 95], [2 x i32] [i32 -25, i32 84]], [4 x [2 x i32]] [[2 x i32] [i32 -25, i32 86], [2 x i32] [i32 -12, i32 89], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -31, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -14, i32 76], [2 x i32] [i32 -18, i32 103], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 -37, i32 127]]]], align 16
@INIT_BCBP_I = internal constant [1 x [8 x [4 x [2 x i32]]]] [[8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -17, i32 123], [2 x i32] [i32 -12, i32 115], [2 x i32] [i32 -16, i32 122], [2 x i32] [i32 -11, i32 115]], [4 x [2 x i32]] [[2 x i32] [i32 -12, i32 63], [2 x i32] [i32 -2, i32 68], [2 x i32] [i32 -15, i32 84], [2 x i32] [i32 -13, i32 104]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -8, i32 93], [2 x i32] [i32 -10, i32 90], [2 x i32] [i32 -30, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 74], [2 x i32] [i32 -6, i32 97], [2 x i32] [i32 -7, i32 91], [2 x i32] [i32 -20, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -4, i32 56], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -7, i32 76], [2 x i32] [i32 -22, i32 125]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_BCBP_P = internal constant [3 x [8 x [4 x [2 x i32]]]] [[8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -7, i32 92], [2 x i32] [i32 -5, i32 89], [2 x i32] [i32 -7, i32 96], [2 x i32] [i32 -13, i32 108]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 46], [2 x i32] [i32 -1, i32 65], [2 x i32] [i32 -1, i32 57], [2 x i32] [i32 -9, i32 93]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -9, i32 92], [2 x i32] [i32 -8, i32 87], [2 x i32] [i32 -23, i32 126]], [4 x [2 x i32]] [[2 x i32] [i32 5, i32 54], [2 x i32] [i32 6, i32 60], [2 x i32] [i32 6, i32 59], [2 x i32] [i32 6, i32 69]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 48], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -4, i32 69], [2 x i32] [i32 -8, i32 88]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 80], [2 x i32] [i32 -5, i32 89], [2 x i32] [i32 -7, i32 94], [2 x i32] [i32 -4, i32 92]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 39], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 -15, i32 84], [2 x i32] [i32 -35, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -2, i32 73], [2 x i32] [i32 -12, i32 104], [2 x i32] [i32 -9, i32 91], [2 x i32] [i32 -31, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 3, i32 55], [2 x i32] [i32 7, i32 56], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 8, i32 61]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 53], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -7, i32 74], [2 x i32] [i32 -9, i32 88]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 11, i32 80], [2 x i32] [i32 5, i32 76], [2 x i32] [i32 2, i32 84], [2 x i32] [i32 5, i32 78]], [4 x [2 x i32]] [[2 x i32] [i32 -6, i32 55], [2 x i32] [i32 4, i32 61], [2 x i32] [i32 -14, i32 83], [2 x i32] [i32 -37, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -5, i32 79], [2 x i32] [i32 -11, i32 104], [2 x i32] [i32 -11, i32 91], [2 x i32] [i32 -30, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 65], [2 x i32] [i32 -2, i32 79], [2 x i32] [i32 0, i32 72], [2 x i32] [i32 -4, i32 92]], [4 x [2 x i32]] [[2 x i32] [i32 -6, i32 56], [2 x i32] [i32 3, i32 68], [2 x i32] [i32 -8, i32 71], [2 x i32] [i32 -13, i32 98]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MAP_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -7, i32 93], [2 x i32] [i32 -11, i32 87], [2 x i32] [i32 -3, i32 77], [2 x i32] [i32 -5, i32 71], [2 x i32] [i32 -4, i32 63], [2 x i32] [i32 -4, i32 68], [2 x i32] [i32 -12, i32 84], [2 x i32] [i32 -7, i32 62], [2 x i32] [i32 -7, i32 65], [2 x i32] [i32 8, i32 61], [2 x i32] [i32 5, i32 56], [2 x i32] [i32 -2, i32 66], [2 x i32] [i32 1, i32 64], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 -2, i32 78]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 50], [2 x i32] [i32 7, i32 52], [2 x i32] [i32 10, i32 35], [2 x i32] [i32 0, i32 44], [2 x i32] [i32 11, i32 38], [2 x i32] [i32 1, i32 45], [2 x i32] [i32 0, i32 46], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 31, i32 17], [2 x i32] [i32 1, i32 51], [2 x i32] [i32 7, i32 50], [2 x i32] [i32 28, i32 19], [2 x i32] [i32 16, i32 33], [2 x i32] [i32 14, i32 62]], [15 x [2 x i32]] [[2 x i32] [i32 -17, i32 120], [2 x i32] [i32 -20, i32 112], [2 x i32] [i32 -18, i32 114], [2 x i32] [i32 -11, i32 85], [2 x i32] [i32 -15, i32 92], [2 x i32] [i32 -14, i32 89], [2 x i32] [i32 -26, i32 71], [2 x i32] [i32 -15, i32 81], [2 x i32] [i32 -14, i32 80], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -14, i32 70], [2 x i32] [i32 -24, i32 56], [2 x i32] [i32 -23, i32 68], [2 x i32] [i32 -24, i32 50], [2 x i32] [i32 -11, i32 74]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -13, i32 108], [2 x i32] [i32 -15, i32 100], [2 x i32] [i32 -13, i32 101], [2 x i32] [i32 -13, i32 91], [2 x i32] [i32 -12, i32 94], [2 x i32] [i32 -10, i32 88], [2 x i32] [i32 -16, i32 84], [2 x i32] [i32 -10, i32 86], [2 x i32] [i32 -7, i32 83], [2 x i32] [i32 -13, i32 87], [2 x i32] [i32 -19, i32 94], [2 x i32] [i32 1, i32 70], [2 x i32] [i32 0, i32 72], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 18, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 -8, i32 102], [2 x i32] [i32 -15, i32 100], [2 x i32] [i32 0, i32 95], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 75], [2 x i32] [i32 2, i32 72], [2 x i32] [i32 -11, i32 75], [2 x i32] [i32 -3, i32 71], [2 x i32] [i32 15, i32 46], [2 x i32] [i32 -13, i32 69], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 21, i32 37], [2 x i32] [i32 -15, i32 72], [2 x i32] [i32 9, i32 57], [2 x i32] [i32 16, i32 54], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 12, i32 72]]]], align 16
@INIT_MAP_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -2, i32 85], [2 x i32] [i32 -6, i32 78], [2 x i32] [i32 -1, i32 75], [2 x i32] [i32 -7, i32 77], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 5, i32 50], [2 x i32] [i32 -3, i32 68], [2 x i32] [i32 1, i32 50], [2 x i32] [i32 6, i32 42], [2 x i32] [i32 -4, i32 81], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 -4, i32 70], [2 x i32] [i32 0, i32 67], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 -2, i32 76]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 11, i32 35], [2 x i32] [i32 4, i32 64], [2 x i32] [i32 1, i32 61], [2 x i32] [i32 11, i32 35], [2 x i32] [i32 18, i32 25], [2 x i32] [i32 12, i32 24], [2 x i32] [i32 13, i32 29], [2 x i32] [i32 13, i32 36], [2 x i32] [i32 -10, i32 93], [2 x i32] [i32 -7, i32 73], [2 x i32] [i32 -2, i32 73], [2 x i32] [i32 13, i32 46], [2 x i32] [i32 9, i32 49], [2 x i32] [i32 -7, i32 100]], [15 x [2 x i32]] [[2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -7, i32 71], [2 x i32] [i32 -5, i32 69], [2 x i32] [i32 -9, i32 70], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -10, i32 68], [2 x i32] [i32 -19, i32 73], [2 x i32] [i32 -12, i32 69], [2 x i32] [i32 -16, i32 70], [2 x i32] [i32 -15, i32 67], [2 x i32] [i32 -20, i32 62], [2 x i32] [i32 -19, i32 70], [2 x i32] [i32 -16, i32 66], [2 x i32] [i32 -22, i32 65], [2 x i32] [i32 -20, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 53], [2 x i32] [i32 2, i32 53], [2 x i32] [i32 5, i32 53], [2 x i32] [i32 -2, i32 61], [2 x i32] [i32 0, i32 56], [2 x i32] [i32 0, i32 56], [2 x i32] [i32 -13, i32 63], [2 x i32] [i32 -5, i32 60], [2 x i32] [i32 -1, i32 62], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 -6, i32 69], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 14, i32 39], [2 x i32] [i32 4, i32 51], [2 x i32] [i32 13, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 3, i32 64], [2 x i32] [i32 1, i32 61], [2 x i32] [i32 9, i32 63], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 7, i32 50], [2 x i32] [i32 16, i32 39], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 4, i32 52], [2 x i32] [i32 11, i32 48], [2 x i32] [i32 -5, i32 60], [2 x i32] [i32 -1, i32 59], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 22, i32 33], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 14, i32 43], [2 x i32] [i32 -1, i32 78], [2 x i32] [i32 0, i32 60], [2 x i32] [i32 9, i32 69]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -13, i32 103], [2 x i32] [i32 -13, i32 91], [2 x i32] [i32 -9, i32 89], [2 x i32] [i32 -14, i32 92], [2 x i32] [i32 -8, i32 76], [2 x i32] [i32 -12, i32 87], [2 x i32] [i32 -23, i32 110], [2 x i32] [i32 -24, i32 105], [2 x i32] [i32 -10, i32 78], [2 x i32] [i32 -20, i32 112], [2 x i32] [i32 -17, i32 99], [2 x i32] [i32 -78, i32 127], [2 x i32] [i32 -70, i32 127], [2 x i32] [i32 -50, i32 127], [2 x i32] [i32 -46, i32 127]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 66], [2 x i32] [i32 -5, i32 78], [2 x i32] [i32 -4, i32 71], [2 x i32] [i32 -8, i32 72], [2 x i32] [i32 2, i32 59], [2 x i32] [i32 -1, i32 55], [2 x i32] [i32 -7, i32 70], [2 x i32] [i32 -6, i32 75], [2 x i32] [i32 -8, i32 89], [2 x i32] [i32 -34, i32 119], [2 x i32] [i32 -3, i32 75], [2 x i32] [i32 32, i32 20], [2 x i32] [i32 30, i32 22], [2 x i32] [i32 -44, i32 127]], [15 x [2 x i32]] [[2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -10, i32 77], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 -17, i32 80], [2 x i32] [i32 -18, i32 73], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -10, i32 83], [2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -14, i32 66], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 54], [2 x i32] [i32 -5, i32 61], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 -1, i32 60], [2 x i32] [i32 -3, i32 61], [2 x i32] [i32 -8, i32 67], [2 x i32] [i32 -25, i32 84], [2 x i32] [i32 -14, i32 74], [2 x i32] [i32 -5, i32 65], [2 x i32] [i32 5, i32 52], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 -9, i32 69], [2 x i32] [i32 -11, i32 70], [2 x i32] [i32 18, i32 55]], [15 x [2 x i32]] [[2 x i32] [i32 -4, i32 71], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 7, i32 61], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 9, i32 41], [2 x i32] [i32 18, i32 25], [2 x i32] [i32 9, i32 32], [2 x i32] [i32 5, i32 43], [2 x i32] [i32 9, i32 47], [2 x i32] [i32 0, i32 44], [2 x i32] [i32 0, i32 51], [2 x i32] [i32 2, i32 46], [2 x i32] [i32 19, i32 38], [2 x i32] [i32 -4, i32 66], [2 x i32] [i32 15, i32 38], [2 x i32] [i32 12, i32 42], [2 x i32] [i32 9, i32 34], [2 x i32] [i32 0, i32 89]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -4, i32 86], [2 x i32] [i32 -12, i32 88], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -3, i32 72], [2 x i32] [i32 -4, i32 67], [2 x i32] [i32 -8, i32 72], [2 x i32] [i32 -16, i32 89], [2 x i32] [i32 -9, i32 69], [2 x i32] [i32 -1, i32 59], [2 x i32] [i32 5, i32 66], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 -4, i32 71], [2 x i32] [i32 -2, i32 71], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 -1, i32 74]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 44], [2 x i32] [i32 -1, i32 69], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 -7, i32 51], [2 x i32] [i32 -4, i32 47], [2 x i32] [i32 -6, i32 42], [2 x i32] [i32 -3, i32 41], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 8, i32 76], [2 x i32] [i32 -9, i32 78], [2 x i32] [i32 -11, i32 83], [2 x i32] [i32 9, i32 52], [2 x i32] [i32 0, i32 67], [2 x i32] [i32 -5, i32 90]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 78], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 -10, i32 72], [2 x i32] [i32 -18, i32 75], [2 x i32] [i32 -12, i32 71], [2 x i32] [i32 -11, i32 63], [2 x i32] [i32 -5, i32 70], [2 x i32] [i32 -17, i32 75], [2 x i32] [i32 -14, i32 72], [2 x i32] [i32 -16, i32 67], [2 x i32] [i32 -8, i32 53], [2 x i32] [i32 -14, i32 59], [2 x i32] [i32 -9, i32 52], [2 x i32] [i32 -11, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 -15, i32 72], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -8, i32 80], [2 x i32] [i32 -21, i32 83], [2 x i32] [i32 -21, i32 64], [2 x i32] [i32 -13, i32 31], [2 x i32] [i32 -25, i32 64], [2 x i32] [i32 -29, i32 94], [2 x i32] [i32 9, i32 75], [2 x i32] [i32 17, i32 63], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -5, i32 35], [2 x i32] [i32 -2, i32 27], [2 x i32] [i32 13, i32 91]], [15 x [2 x i32]] [[2 x i32] [i32 3, i32 65], [2 x i32] [i32 -7, i32 69], [2 x i32] [i32 8, i32 77], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -10, i32 66], [2 x i32] [i32 3, i32 62], [2 x i32] [i32 -3, i32 68], [2 x i32] [i32 -20, i32 81], [2 x i32] [i32 0, i32 30], [2 x i32] [i32 1, i32 7], [2 x i32] [i32 -3, i32 23], [2 x i32] [i32 -21, i32 74], [2 x i32] [i32 16, i32 66], [2 x i32] [i32 -23, i32 124], [2 x i32] [i32 17, i32 37], [2 x i32] [i32 44, i32 -18], [2 x i32] [i32 50, i32 -34], [2 x i32] [i32 -22, i32 127]]]], align 16
@INIT_LAST_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 24, i32 0], [2 x i32] [i32 15, i32 9], [2 x i32] [i32 8, i32 25], [2 x i32] [i32 13, i32 18], [2 x i32] [i32 15, i32 9], [2 x i32] [i32 13, i32 19], [2 x i32] [i32 10, i32 37], [2 x i32] [i32 12, i32 18], [2 x i32] [i32 6, i32 29], [2 x i32] [i32 20, i32 33], [2 x i32] [i32 15, i32 30], [2 x i32] [i32 4, i32 45], [2 x i32] [i32 1, i32 58], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 7, i32 61]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 12, i32 38], [2 x i32] [i32 11, i32 45], [2 x i32] [i32 15, i32 39], [2 x i32] [i32 11, i32 42], [2 x i32] [i32 13, i32 44], [2 x i32] [i32 16, i32 45], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 10, i32 49], [2 x i32] [i32 30, i32 34], [2 x i32] [i32 18, i32 42], [2 x i32] [i32 10, i32 55], [2 x i32] [i32 17, i32 51], [2 x i32] [i32 17, i32 46], [2 x i32] [i32 0, i32 89]], [15 x [2 x i32]] [[2 x i32] [i32 23, i32 -13], [2 x i32] [i32 26, i32 -13], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 49, i32 -14], [2 x i32] [i32 44, i32 3], [2 x i32] [i32 45, i32 6], [2 x i32] [i32 44, i32 34], [2 x i32] [i32 33, i32 54], [2 x i32] [i32 19, i32 82], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 26, i32 -19], [2 x i32] [i32 22, i32 -17], [2 x i32] [i32 26, i32 -17], [2 x i32] [i32 30, i32 -25], [2 x i32] [i32 28, i32 -20], [2 x i32] [i32 33, i32 -23], [2 x i32] [i32 37, i32 -27], [2 x i32] [i32 33, i32 -23], [2 x i32] [i32 40, i32 -28], [2 x i32] [i32 38, i32 -17], [2 x i32] [i32 33, i32 -11], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 41, i32 -6], [2 x i32] [i32 38, i32 1], [2 x i32] [i32 41, i32 17]], [15 x [2 x i32]] [[2 x i32] [i32 30, i32 -6], [2 x i32] [i32 27, i32 3], [2 x i32] [i32 26, i32 22], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 37, i32 -16], [2 x i32] [i32 35, i32 -4], [2 x i32] [i32 38, i32 -8], [2 x i32] [i32 38, i32 -3], [2 x i32] [i32 37, i32 3], [2 x i32] [i32 38, i32 5], [2 x i32] [i32 42, i32 0], [2 x i32] [i32 35, i32 16], [2 x i32] [i32 39, i32 22], [2 x i32] [i32 14, i32 48], [2 x i32] [i32 27, i32 37], [2 x i32] [i32 21, i32 60], [2 x i32] [i32 12, i32 68], [2 x i32] [i32 2, i32 97]]]], align 16
@INIT_LAST_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 11, i32 28], [2 x i32] [i32 2, i32 40], [2 x i32] [i32 3, i32 44], [2 x i32] [i32 0, i32 49], [2 x i32] [i32 0, i32 46], [2 x i32] [i32 2, i32 44], [2 x i32] [i32 2, i32 51], [2 x i32] [i32 0, i32 47], [2 x i32] [i32 4, i32 39], [2 x i32] [i32 2, i32 62], [2 x i32] [i32 6, i32 46], [2 x i32] [i32 0, i32 54], [2 x i32] [i32 3, i32 54], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 4, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 6, i32 51], [2 x i32] [i32 6, i32 57], [2 x i32] [i32 7, i32 53], [2 x i32] [i32 6, i32 52], [2 x i32] [i32 6, i32 55], [2 x i32] [i32 11, i32 45], [2 x i32] [i32 14, i32 36], [2 x i32] [i32 8, i32 53], [2 x i32] [i32 -1, i32 82], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 -3, i32 78], [2 x i32] [i32 15, i32 46], [2 x i32] [i32 22, i32 31], [2 x i32] [i32 -1, i32 84]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 26, i32 -9], [2 x i32] [i32 33, i32 -9], [2 x i32] [i32 39, i32 -7], [2 x i32] [i32 41, i32 -2], [2 x i32] [i32 45, i32 3], [2 x i32] [i32 49, i32 9], [2 x i32] [i32 45, i32 27], [2 x i32] [i32 36, i32 59], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 25, i32 7], [2 x i32] [i32 30, i32 -7], [2 x i32] [i32 28, i32 3], [2 x i32] [i32 28, i32 4], [2 x i32] [i32 32, i32 0], [2 x i32] [i32 34, i32 -1], [2 x i32] [i32 30, i32 6], [2 x i32] [i32 30, i32 6], [2 x i32] [i32 32, i32 9], [2 x i32] [i32 31, i32 19], [2 x i32] [i32 26, i32 27], [2 x i32] [i32 26, i32 30], [2 x i32] [i32 37, i32 20], [2 x i32] [i32 28, i32 34], [2 x i32] [i32 17, i32 70]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 5, i32 59], [2 x i32] [i32 9, i32 67], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 16, i32 30], [2 x i32] [i32 18, i32 32], [2 x i32] [i32 18, i32 35], [2 x i32] [i32 22, i32 29], [2 x i32] [i32 24, i32 31], [2 x i32] [i32 23, i32 38], [2 x i32] [i32 18, i32 43], [2 x i32] [i32 20, i32 41], [2 x i32] [i32 11, i32 63], [2 x i32] [i32 9, i32 59], [2 x i32] [i32 9, i32 64], [2 x i32] [i32 -1, i32 94], [2 x i32] [i32 -2, i32 89], [2 x i32] [i32 -9, i32 108]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 4, i32 45], [2 x i32] [i32 10, i32 28], [2 x i32] [i32 10, i32 31], [2 x i32] [i32 33, i32 -11], [2 x i32] [i32 52, i32 -43], [2 x i32] [i32 18, i32 15], [2 x i32] [i32 28, i32 0], [2 x i32] [i32 35, i32 -22], [2 x i32] [i32 38, i32 -25], [2 x i32] [i32 34, i32 0], [2 x i32] [i32 39, i32 -18], [2 x i32] [i32 32, i32 -12], [2 x i32] [i32 102, i32 -94], [2 x i32] zeroinitializer, [2 x i32] [i32 56, i32 -15]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 33, i32 -4], [2 x i32] [i32 29, i32 10], [2 x i32] [i32 37, i32 -5], [2 x i32] [i32 51, i32 -29], [2 x i32] [i32 39, i32 -9], [2 x i32] [i32 52, i32 -34], [2 x i32] [i32 69, i32 -58], [2 x i32] [i32 67, i32 -63], [2 x i32] [i32 44, i32 -5], [2 x i32] [i32 32, i32 7], [2 x i32] [i32 55, i32 -29], [2 x i32] [i32 32, i32 1], [2 x i32] zeroinitializer, [2 x i32] [i32 27, i32 36]], [15 x [2 x i32]] [[2 x i32] [i32 17, i32 -10], [2 x i32] [i32 32, i32 -13], [2 x i32] [i32 42, i32 -9], [2 x i32] [i32 49, i32 -5], [2 x i32] [i32 53, i32 0], [2 x i32] [i32 64, i32 3], [2 x i32] [i32 68, i32 10], [2 x i32] [i32 66, i32 27], [2 x i32] [i32 47, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 33, i32 -25], [2 x i32] [i32 34, i32 -30], [2 x i32] [i32 36, i32 -28], [2 x i32] [i32 38, i32 -28], [2 x i32] [i32 38, i32 -27], [2 x i32] [i32 34, i32 -18], [2 x i32] [i32 35, i32 -16], [2 x i32] [i32 34, i32 -14], [2 x i32] [i32 32, i32 -8], [2 x i32] [i32 37, i32 -6], [2 x i32] [i32 35, i32 0], [2 x i32] [i32 30, i32 10], [2 x i32] [i32 28, i32 18], [2 x i32] [i32 26, i32 25], [2 x i32] [i32 29, i32 41]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 75], [2 x i32] [i32 2, i32 72], [2 x i32] [i32 8, i32 77], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 14, i32 35], [2 x i32] [i32 18, i32 31], [2 x i32] [i32 17, i32 35], [2 x i32] [i32 21, i32 30], [2 x i32] [i32 17, i32 45], [2 x i32] [i32 20, i32 42], [2 x i32] [i32 18, i32 45], [2 x i32] [i32 27, i32 26], [2 x i32] [i32 16, i32 54], [2 x i32] [i32 7, i32 66], [2 x i32] [i32 16, i32 56], [2 x i32] [i32 11, i32 73], [2 x i32] [i32 10, i32 67], [2 x i32] [i32 -10, i32 116]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 4, i32 39], [2 x i32] [i32 0, i32 42], [2 x i32] [i32 7, i32 34], [2 x i32] [i32 11, i32 29], [2 x i32] [i32 8, i32 31], [2 x i32] [i32 6, i32 37], [2 x i32] [i32 7, i32 42], [2 x i32] [i32 3, i32 40], [2 x i32] [i32 8, i32 33], [2 x i32] [i32 13, i32 43], [2 x i32] [i32 13, i32 36], [2 x i32] [i32 4, i32 47], [2 x i32] [i32 3, i32 55], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 6, i32 60]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 8, i32 44], [2 x i32] [i32 11, i32 44], [2 x i32] [i32 14, i32 42], [2 x i32] [i32 7, i32 48], [2 x i32] [i32 4, i32 56], [2 x i32] [i32 4, i32 52], [2 x i32] [i32 13, i32 37], [2 x i32] [i32 9, i32 49], [2 x i32] [i32 19, i32 58], [2 x i32] [i32 10, i32 48], [2 x i32] [i32 12, i32 45], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 20, i32 33], [2 x i32] [i32 8, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 30, i32 -10], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 33, i32 -1], [2 x i32] [i32 33, i32 7], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 37, i32 23], [2 x i32] [i32 31, i32 38], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 35, i32 -18], [2 x i32] [i32 33, i32 -25], [2 x i32] [i32 28, i32 -3], [2 x i32] [i32 24, i32 10], [2 x i32] [i32 27, i32 0], [2 x i32] [i32 34, i32 -14], [2 x i32] [i32 52, i32 -44], [2 x i32] [i32 39, i32 -24], [2 x i32] [i32 19, i32 17], [2 x i32] [i32 31, i32 25], [2 x i32] [i32 36, i32 29], [2 x i32] [i32 24, i32 33], [2 x i32] [i32 34, i32 15], [2 x i32] [i32 30, i32 20], [2 x i32] [i32 22, i32 73]], [15 x [2 x i32]] [[2 x i32] [i32 20, i32 34], [2 x i32] [i32 19, i32 31], [2 x i32] [i32 27, i32 44], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 19, i32 16], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 21, i32 28], [2 x i32] [i32 25, i32 21], [2 x i32] [i32 30, i32 20], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 27, i32 16], [2 x i32] [i32 24, i32 42], [2 x i32] [i32 0, i32 93], [2 x i32] [i32 14, i32 56], [2 x i32] [i32 15, i32 57], [2 x i32] [i32 26, i32 38], [2 x i32] [i32 -24, i32 127]]]], align 16
@INIT_ONE_I = internal constant [1 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -3, i32 71], [2 x i32] [i32 -6, i32 42], [2 x i32] [i32 -5, i32 50], [2 x i32] [i32 -3, i32 54], [2 x i32] [i32 -2, i32 62]], [5 x [2 x i32]] [[2 x i32] [i32 -5, i32 67], [2 x i32] [i32 -5, i32 27], [2 x i32] [i32 -3, i32 39], [2 x i32] [i32 -2, i32 44], [2 x i32] [i32 0, i32 46]], [5 x [2 x i32]] [[2 x i32] [i32 -3, i32 75], [2 x i32] [i32 -1, i32 23], [2 x i32] [i32 1, i32 34], [2 x i32] [i32 1, i32 43], [2 x i32] [i32 0, i32 54]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 92], [2 x i32] [i32 -15, i32 55], [2 x i32] [i32 -10, i32 60], [2 x i32] [i32 -6, i32 62], [2 x i32] [i32 -4, i32 65]], [5 x [2 x i32]] [[2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -20, i32 84], [2 x i32] [i32 -11, i32 79], [2 x i32] [i32 -6, i32 73], [2 x i32] [i32 -4, i32 74]], [5 x [2 x i32]] [[2 x i32] [i32 -8, i32 78], [2 x i32] [i32 -5, i32 33], [2 x i32] [i32 -4, i32 48], [2 x i32] [i32 -2, i32 53], [2 x i32] [i32 -3, i32 62]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_ONE_P = internal constant [3 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -2, i32 44], [2 x i32] [i32 0, i32 45], [2 x i32] [i32 0, i32 52], [2 x i32] [i32 -3, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 77], [2 x i32] [i32 3, i32 24], [2 x i32] [i32 0, i32 42], [2 x i32] [i32 0, i32 48], [2 x i32] [i32 0, i32 55]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 66], [2 x i32] [i32 -7, i32 35], [2 x i32] [i32 -7, i32 42], [2 x i32] [i32 -8, i32 45], [2 x i32] [i32 -5, i32 48]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 1, i32 58], [2 x i32] [i32 -3, i32 29], [2 x i32] [i32 -1, i32 36], [2 x i32] [i32 1, i32 38], [2 x i32] [i32 2, i32 43]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 70], [2 x i32] [i32 -4, i32 29], [2 x i32] [i32 5, i32 31], [2 x i32] [i32 7, i32 42], [2 x i32] [i32 1, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 58], [2 x i32] [i32 8, i32 5], [2 x i32] [i32 10, i32 14], [2 x i32] [i32 14, i32 18], [2 x i32] [i32 13, i32 27]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -23, i32 112], [2 x i32] [i32 -15, i32 71], [2 x i32] [i32 -7, i32 61], [2 x i32] [i32 0, i32 53], [2 x i32] [i32 -5, i32 66]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 101], [2 x i32] [i32 -3, i32 39], [2 x i32] [i32 -5, i32 53], [2 x i32] [i32 -7, i32 61], [2 x i32] [i32 -11, i32 75]], [5 x [2 x i32]] [[2 x i32] [i32 -5, i32 71], [2 x i32] [i32 0, i32 24], [2 x i32] [i32 -1, i32 36], [2 x i32] [i32 -2, i32 42], [2 x i32] [i32 -2, i32 52]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -11, i32 76], [2 x i32] [i32 -10, i32 44], [2 x i32] [i32 -10, i32 52], [2 x i32] [i32 -10, i32 57], [2 x i32] [i32 -9, i32 58]], [5 x [2 x i32]] [[2 x i32] [i32 2, i32 66], [2 x i32] [i32 -9, i32 34], [2 x i32] [i32 1, i32 32], [2 x i32] [i32 11, i32 31], [2 x i32] [i32 5, i32 52]], [5 x [2 x i32]] [[2 x i32] [i32 3, i32 52], [2 x i32] [i32 7, i32 4], [2 x i32] [i32 10, i32 8], [2 x i32] [i32 17, i32 8], [2 x i32] [i32 16, i32 19]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -24, i32 115], [2 x i32] [i32 -22, i32 82], [2 x i32] [i32 -9, i32 62], [2 x i32] [i32 0, i32 53], [2 x i32] [i32 0, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 100], [2 x i32] [i32 -14, i32 57], [2 x i32] [i32 -12, i32 67], [2 x i32] [i32 -11, i32 71], [2 x i32] [i32 -10, i32 77]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -7, i32 37], [2 x i32] [i32 -8, i32 44], [2 x i32] [i32 -11, i32 49], [2 x i32] [i32 -10, i32 56]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -10, i32 82], [2 x i32] [i32 -8, i32 48], [2 x i32] [i32 -8, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -7, i32 70]], [5 x [2 x i32]] [[2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -22, i32 69], [2 x i32] [i32 -16, i32 75], [2 x i32] [i32 -2, i32 58], [2 x i32] [i32 1, i32 58]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 81], [2 x i32] [i32 -6, i32 38], [2 x i32] [i32 -13, i32 62], [2 x i32] [i32 -6, i32 58], [2 x i32] [i32 -2, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_ABS_I = internal constant [1 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 0, i32 58], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 -2, i32 72], [2 x i32] [i32 -1, i32 74], [2 x i32] [i32 -9, i32 91]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 64], [2 x i32] [i32 -8, i32 68], [2 x i32] [i32 -10, i32 78], [2 x i32] [i32 -6, i32 77], [2 x i32] [i32 -10, i32 86]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 55], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 1, i32 64], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -9, i32 92]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 73], [2 x i32] [i32 -8, i32 76], [2 x i32] [i32 -7, i32 80], [2 x i32] [i32 -9, i32 88], [2 x i32] [i32 -17, i32 110]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 86], [2 x i32] [i32 -13, i32 96], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -19, i32 117], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 71], [2 x i32] [i32 -10, i32 79], [2 x i32] [i32 -12, i32 86], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 -14, i32 97]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_ABS_P = internal constant [3 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -2, i32 59], [2 x i32] [i32 -4, i32 70], [2 x i32] [i32 -4, i32 75], [2 x i32] [i32 -8, i32 82], [2 x i32] [i32 -17, i32 102]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 59], [2 x i32] [i32 -7, i32 71], [2 x i32] [i32 -12, i32 83], [2 x i32] [i32 -11, i32 87], [2 x i32] [i32 -30, i32 119]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 56], [2 x i32] [i32 -6, i32 60], [2 x i32] [i32 -5, i32 62], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -8, i32 76]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 55], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -10, i32 90]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 58], [2 x i32] [i32 -3, i32 72], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 2, i32 40], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -6, i32 79], [2 x i32] [i32 -8, i32 85]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -11, i32 77], [2 x i32] [i32 -9, i32 80], [2 x i32] [i32 -9, i32 84], [2 x i32] [i32 -10, i32 87], [2 x i32] [i32 -34, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -15, i32 77], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -25, i32 107], [2 x i32] [i32 -25, i32 111], [2 x i32] [i32 -28, i32 122]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 57], [2 x i32] [i32 -6, i32 63], [2 x i32] [i32 -4, i32 65], [2 x i32] [i32 -4, i32 67], [2 x i32] [i32 -7, i32 82]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 72], [2 x i32] [i32 -7, i32 69], [2 x i32] [i32 -4, i32 69], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 -9, i32 86]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 55], [2 x i32] [i32 -2, i32 67], [2 x i32] [i32 0, i32 73], [2 x i32] [i32 -8, i32 89], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 3, i32 37], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -5, i32 73], [2 x i32] [i32 -1, i32 70], [2 x i32] [i32 -4, i32 78]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -14, i32 85], [2 x i32] [i32 -13, i32 89], [2 x i32] [i32 -13, i32 94], [2 x i32] [i32 -11, i32 92], [2 x i32] [i32 -29, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 85], [2 x i32] [i32 -16, i32 88], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -15, i32 98], [2 x i32] [i32 -37, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 59], [2 x i32] [i32 -8, i32 63], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -6, i32 68], [2 x i32] [i32 -10, i32 79]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -14, i32 75], [2 x i32] [i32 -10, i32 79], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -12, i32 92], [2 x i32] [i32 -18, i32 108]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 78], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -4, i32 81], [2 x i32] [i32 -13, i32 99], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 73], [2 x i32] [i32 -10, i32 76], [2 x i32] [i32 -13, i32 86], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -10, i32 87]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_FLD_MAP_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -6, i32 93], [2 x i32] [i32 -6, i32 84], [2 x i32] [i32 -8, i32 79], [2 x i32] [i32 0, i32 66], [2 x i32] [i32 -1, i32 71], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 -2, i32 60], [2 x i32] [i32 -2, i32 59], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -3, i32 62], [2 x i32] [i32 -4, i32 58], [2 x i32] [i32 -9, i32 66], [2 x i32] [i32 -1, i32 79], [2 x i32] [i32 0, i32 71], [2 x i32] [i32 3, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 -7, i32 62], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 14, i32 40], [2 x i32] [i32 16, i32 27], [2 x i32] [i32 12, i32 29], [2 x i32] [i32 1, i32 44], [2 x i32] [i32 20, i32 36], [2 x i32] [i32 18, i32 32], [2 x i32] [i32 5, i32 42], [2 x i32] [i32 1, i32 48], [2 x i32] [i32 10, i32 62], [2 x i32] [i32 17, i32 46], [2 x i32] [i32 9, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -14, i32 106], [2 x i32] [i32 -13, i32 97], [2 x i32] [i32 -15, i32 90], [2 x i32] [i32 -12, i32 90], [2 x i32] [i32 -18, i32 88], [2 x i32] [i32 -10, i32 73], [2 x i32] [i32 -9, i32 79], [2 x i32] [i32 -14, i32 86], [2 x i32] [i32 -10, i32 73], [2 x i32] [i32 -10, i32 70], [2 x i32] [i32 -10, i32 69], [2 x i32] [i32 -5, i32 66], [2 x i32] [i32 -9, i32 64], [2 x i32] [i32 -5, i32 58], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -12, i32 104], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -16, i32 96], [2 x i32] [i32 -7, i32 88], [2 x i32] [i32 -8, i32 85], [2 x i32] [i32 -7, i32 85], [2 x i32] [i32 -9, i32 85], [2 x i32] [i32 -13, i32 88], [2 x i32] [i32 4, i32 66], [2 x i32] [i32 -3, i32 77], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 10, i32 58], [2 x i32] [i32 -1, i32 76], [2 x i32] [i32 -1, i32 83]], [15 x [2 x i32]] [[2 x i32] [i32 -7, i32 99], [2 x i32] [i32 -14, i32 95], [2 x i32] [i32 2, i32 95], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 76], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 0, i32 70], [2 x i32] [i32 -11, i32 75], [2 x i32] [i32 1, i32 68], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 -14, i32 73], [2 x i32] [i32 3, i32 62], [2 x i32] [i32 4, i32 62], [2 x i32] [i32 -1, i32 68], [2 x i32] [i32 -13, i32 75], [2 x i32] [i32 11, i32 55], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 12, i32 70]]]], align 16
@INIT_FLD_MAP_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -13, i32 106], [2 x i32] [i32 -16, i32 106], [2 x i32] [i32 -10, i32 87], [2 x i32] [i32 -21, i32 114], [2 x i32] [i32 -18, i32 110], [2 x i32] [i32 -14, i32 98], [2 x i32] [i32 -22, i32 110], [2 x i32] [i32 -21, i32 106], [2 x i32] [i32 -18, i32 103], [2 x i32] [i32 -21, i32 107], [2 x i32] [i32 -23, i32 108], [2 x i32] [i32 -26, i32 112], [2 x i32] [i32 -10, i32 96], [2 x i32] [i32 -12, i32 95], [2 x i32] [i32 -5, i32 91]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -9, i32 93], [2 x i32] [i32 -22, i32 94], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 9, i32 67], [2 x i32] [i32 -4, i32 80], [2 x i32] [i32 -10, i32 85], [2 x i32] [i32 -1, i32 70], [2 x i32] [i32 7, i32 60], [2 x i32] [i32 9, i32 58], [2 x i32] [i32 5, i32 61], [2 x i32] [i32 12, i32 50], [2 x i32] [i32 15, i32 50], [2 x i32] [i32 18, i32 49], [2 x i32] [i32 17, i32 54]], [15 x [2 x i32]] [[2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -10, i32 77], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 -17, i32 80], [2 x i32] [i32 -18, i32 73], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -10, i32 83], [2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -14, i32 66], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 10, i32 41], [2 x i32] [i32 7, i32 46], [2 x i32] [i32 -1, i32 51], [2 x i32] [i32 7, i32 49], [2 x i32] [i32 8, i32 52], [2 x i32] [i32 9, i32 41], [2 x i32] [i32 6, i32 47], [2 x i32] [i32 2, i32 55], [2 x i32] [i32 13, i32 41], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 6, i32 50], [2 x i32] [i32 5, i32 53], [2 x i32] [i32 13, i32 49], [2 x i32] [i32 4, i32 63], [2 x i32] [i32 6, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -2, i32 69], [2 x i32] [i32 -2, i32 59], [2 x i32] [i32 6, i32 70], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 9, i32 31], [2 x i32] [i32 12, i32 43], [2 x i32] [i32 3, i32 53], [2 x i32] [i32 14, i32 34], [2 x i32] [i32 10, i32 38], [2 x i32] [i32 -3, i32 52], [2 x i32] [i32 13, i32 40], [2 x i32] [i32 17, i32 32], [2 x i32] [i32 7, i32 44], [2 x i32] [i32 7, i32 38], [2 x i32] [i32 13, i32 50], [2 x i32] [i32 10, i32 57], [2 x i32] [i32 26, i32 43]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -21, i32 126], [2 x i32] [i32 -23, i32 124], [2 x i32] [i32 -20, i32 110], [2 x i32] [i32 -26, i32 126], [2 x i32] [i32 -25, i32 124], [2 x i32] [i32 -17, i32 105], [2 x i32] [i32 -27, i32 121], [2 x i32] [i32 -27, i32 117], [2 x i32] [i32 -17, i32 102], [2 x i32] [i32 -26, i32 117], [2 x i32] [i32 -27, i32 116], [2 x i32] [i32 -33, i32 122], [2 x i32] [i32 -10, i32 95], [2 x i32] [i32 -14, i32 100], [2 x i32] [i32 -8, i32 95]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -17, i32 111], [2 x i32] [i32 -28, i32 114], [2 x i32] [i32 -6, i32 89], [2 x i32] [i32 -2, i32 80], [2 x i32] [i32 -4, i32 82], [2 x i32] [i32 -9, i32 85], [2 x i32] [i32 -8, i32 81], [2 x i32] [i32 -1, i32 72], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 1, i32 67], [2 x i32] [i32 9, i32 56], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 1, i32 69], [2 x i32] [i32 7, i32 69]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -7, i32 72], [2 x i32] [i32 -6, i32 78], [2 x i32] [i32 -12, i32 72], [2 x i32] [i32 -14, i32 68], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -5, i32 66], [2 x i32] [i32 -5, i32 62], [2 x i32] [i32 0, i32 57], [2 x i32] [i32 -4, i32 61], [2 x i32] [i32 -9, i32 60], [2 x i32] [i32 1, i32 54], [2 x i32] [i32 2, i32 58]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -7, i32 69], [2 x i32] [i32 -6, i32 67], [2 x i32] [i32 -16, i32 77], [2 x i32] [i32 -2, i32 64], [2 x i32] [i32 2, i32 61], [2 x i32] [i32 -6, i32 67], [2 x i32] [i32 -3, i32 64], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 -3, i32 65], [2 x i32] [i32 -3, i32 66], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 9, i32 51], [2 x i32] [i32 -1, i32 66], [2 x i32] [i32 -2, i32 71], [2 x i32] [i32 -2, i32 75]], [15 x [2 x i32]] [[2 x i32] [i32 -1, i32 70], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 14, i32 60], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 16, i32 37], [2 x i32] [i32 0, i32 47], [2 x i32] [i32 18, i32 35], [2 x i32] [i32 11, i32 37], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 10, i32 41], [2 x i32] [i32 2, i32 48], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 13, i32 41], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 3, i32 50], [2 x i32] [i32 19, i32 40], [2 x i32] [i32 3, i32 66], [2 x i32] [i32 18, i32 50]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -22, i32 127], [2 x i32] [i32 -25, i32 127], [2 x i32] [i32 -25, i32 120], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -19, i32 114], [2 x i32] [i32 -23, i32 117], [2 x i32] [i32 -25, i32 118], [2 x i32] [i32 -26, i32 117], [2 x i32] [i32 -24, i32 113], [2 x i32] [i32 -28, i32 118], [2 x i32] [i32 -31, i32 120], [2 x i32] [i32 -37, i32 124], [2 x i32] [i32 -10, i32 94], [2 x i32] [i32 -15, i32 102], [2 x i32] [i32 -10, i32 99]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -13, i32 106], [2 x i32] [i32 -50, i32 127], [2 x i32] [i32 -5, i32 92], [2 x i32] [i32 17, i32 57], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 -13, i32 94], [2 x i32] [i32 -12, i32 91], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 0, i32 71], [2 x i32] [i32 -1, i32 73], [2 x i32] [i32 4, i32 64], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 15, i32 57]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 78], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 -10, i32 72], [2 x i32] [i32 -18, i32 75], [2 x i32] [i32 -12, i32 71], [2 x i32] [i32 -11, i32 63], [2 x i32] [i32 -5, i32 70], [2 x i32] [i32 -17, i32 75], [2 x i32] [i32 -14, i32 72], [2 x i32] [i32 -16, i32 67], [2 x i32] [i32 -8, i32 53], [2 x i32] [i32 -14, i32 59], [2 x i32] [i32 -9, i32 52], [2 x i32] [i32 -11, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -10, i32 67], [2 x i32] [i32 1, i32 68], [2 x i32] [i32 0, i32 77], [2 x i32] [i32 2, i32 64], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -5, i32 78], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 5, i32 59], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 14, i32 54], [2 x i32] [i32 15, i32 44], [2 x i32] [i32 5, i32 60], [2 x i32] [i32 2, i32 70]], [15 x [2 x i32]] [[2 x i32] [i32 -2, i32 76], [2 x i32] [i32 -18, i32 86], [2 x i32] [i32 12, i32 70], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 -12, i32 70], [2 x i32] [i32 11, i32 55], [2 x i32] [i32 5, i32 56], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 -6, i32 74], [2 x i32] [i32 5, i32 54], [2 x i32] [i32 7, i32 54], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -11, i32 82], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 25, i32 42]]]], align 16
@INIT_FLD_LAST_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 15, i32 6], [2 x i32] [i32 6, i32 19], [2 x i32] [i32 7, i32 16], [2 x i32] [i32 12, i32 14], [2 x i32] [i32 18, i32 13], [2 x i32] [i32 13, i32 11], [2 x i32] [i32 13, i32 15], [2 x i32] [i32 15, i32 16], [2 x i32] [i32 12, i32 23], [2 x i32] [i32 13, i32 23], [2 x i32] [i32 15, i32 20], [2 x i32] [i32 14, i32 26], [2 x i32] [i32 14, i32 44], [2 x i32] [i32 17, i32 40], [2 x i32] [i32 17, i32 47]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 24, i32 17], [2 x i32] [i32 21, i32 21], [2 x i32] [i32 25, i32 22], [2 x i32] [i32 31, i32 27], [2 x i32] [i32 22, i32 29], [2 x i32] [i32 19, i32 35], [2 x i32] [i32 14, i32 50], [2 x i32] [i32 10, i32 57], [2 x i32] [i32 7, i32 63], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 -4, i32 82], [2 x i32] [i32 -3, i32 94], [2 x i32] [i32 9, i32 69], [2 x i32] [i32 -12, i32 109]], [15 x [2 x i32]] [[2 x i32] [i32 21, i32 -10], [2 x i32] [i32 24, i32 -11], [2 x i32] [i32 28, i32 -8], [2 x i32] [i32 28, i32 -1], [2 x i32] [i32 29, i32 3], [2 x i32] [i32 29, i32 9], [2 x i32] [i32 35, i32 20], [2 x i32] [i32 29, i32 36], [2 x i32] [i32 14, i32 67], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 36, i32 -35], [2 x i32] [i32 36, i32 -34], [2 x i32] [i32 32, i32 -26], [2 x i32] [i32 37, i32 -30], [2 x i32] [i32 44, i32 -32], [2 x i32] [i32 34, i32 -18], [2 x i32] [i32 34, i32 -15], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 33, i32 -7], [2 x i32] [i32 35, i32 -5], [2 x i32] [i32 33, i32 0], [2 x i32] [i32 38, i32 2], [2 x i32] [i32 33, i32 13], [2 x i32] [i32 23, i32 35], [2 x i32] [i32 13, i32 58]], [15 x [2 x i32]] [[2 x i32] [i32 29, i32 -3], [2 x i32] [i32 26, i32 0], [2 x i32] [i32 22, i32 30], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 31, i32 -7], [2 x i32] [i32 35, i32 -15], [2 x i32] [i32 34, i32 -3], [2 x i32] [i32 34, i32 3], [2 x i32] [i32 36, i32 -1], [2 x i32] [i32 34, i32 5], [2 x i32] [i32 32, i32 11], [2 x i32] [i32 35, i32 5], [2 x i32] [i32 34, i32 12], [2 x i32] [i32 39, i32 11], [2 x i32] [i32 30, i32 29], [2 x i32] [i32 34, i32 26], [2 x i32] [i32 29, i32 39], [2 x i32] [i32 19, i32 66]]]], align 16
@INIT_FLD_LAST_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 14, i32 11], [2 x i32] [i32 11, i32 14], [2 x i32] [i32 9, i32 11], [2 x i32] [i32 18, i32 11], [2 x i32] [i32 21, i32 9], [2 x i32] [i32 23, i32 -2], [2 x i32] [i32 32, i32 -15], [2 x i32] [i32 32, i32 -15], [2 x i32] [i32 34, i32 -21], [2 x i32] [i32 39, i32 -23], [2 x i32] [i32 42, i32 -33], [2 x i32] [i32 41, i32 -31], [2 x i32] [i32 46, i32 -28], [2 x i32] [i32 38, i32 -12], [2 x i32] [i32 21, i32 29]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 45, i32 -24], [2 x i32] [i32 53, i32 -45], [2 x i32] [i32 48, i32 -26], [2 x i32] [i32 65, i32 -43], [2 x i32] [i32 43, i32 -19], [2 x i32] [i32 39, i32 -10], [2 x i32] [i32 30, i32 9], [2 x i32] [i32 18, i32 26], [2 x i32] [i32 20, i32 27], [2 x i32] [i32 0, i32 57], [2 x i32] [i32 -14, i32 82], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -19, i32 97], [2 x i32] [i32 -35, i32 125]], [15 x [2 x i32]] [[2 x i32] [i32 21, i32 -13], [2 x i32] [i32 33, i32 -14], [2 x i32] [i32 39, i32 -7], [2 x i32] [i32 46, i32 -2], [2 x i32] [i32 51, i32 2], [2 x i32] [i32 60, i32 6], [2 x i32] [i32 61, i32 17], [2 x i32] [i32 55, i32 34], [2 x i32] [i32 42, i32 62], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 27, i32 0], [2 x i32] [i32 28, i32 0], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 27, i32 6], [2 x i32] [i32 34, i32 8], [2 x i32] [i32 30, i32 10], [2 x i32] [i32 24, i32 22], [2 x i32] [i32 33, i32 19], [2 x i32] [i32 22, i32 32], [2 x i32] [i32 26, i32 31], [2 x i32] [i32 21, i32 41], [2 x i32] [i32 26, i32 44], [2 x i32] [i32 23, i32 47], [2 x i32] [i32 16, i32 65], [2 x i32] [i32 14, i32 71]], [15 x [2 x i32]] [[2 x i32] [i32 8, i32 60], [2 x i32] [i32 6, i32 63], [2 x i32] [i32 17, i32 65], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 21, i32 24], [2 x i32] [i32 23, i32 20], [2 x i32] [i32 26, i32 23], [2 x i32] [i32 27, i32 32], [2 x i32] [i32 28, i32 23], [2 x i32] [i32 28, i32 24], [2 x i32] [i32 23, i32 40], [2 x i32] [i32 24, i32 32], [2 x i32] [i32 28, i32 29], [2 x i32] [i32 23, i32 42], [2 x i32] [i32 19, i32 57], [2 x i32] [i32 22, i32 53], [2 x i32] [i32 22, i32 61], [2 x i32] [i32 11, i32 86]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 19, i32 -6], [2 x i32] [i32 18, i32 -6], [2 x i32] [i32 14, i32 0], [2 x i32] [i32 26, i32 -12], [2 x i32] [i32 31, i32 -16], [2 x i32] [i32 33, i32 -25], [2 x i32] [i32 33, i32 -22], [2 x i32] [i32 37, i32 -28], [2 x i32] [i32 39, i32 -30], [2 x i32] [i32 42, i32 -30], [2 x i32] [i32 47, i32 -42], [2 x i32] [i32 45, i32 -36], [2 x i32] [i32 49, i32 -34], [2 x i32] [i32 41, i32 -17], [2 x i32] [i32 32, i32 9]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 69, i32 -71], [2 x i32] [i32 63, i32 -63], [2 x i32] [i32 66, i32 -64], [2 x i32] [i32 77, i32 -74], [2 x i32] [i32 54, i32 -39], [2 x i32] [i32 52, i32 -35], [2 x i32] [i32 41, i32 -10], [2 x i32] [i32 36, i32 0], [2 x i32] [i32 40, i32 -1], [2 x i32] [i32 30, i32 14], [2 x i32] [i32 28, i32 26], [2 x i32] [i32 23, i32 37], [2 x i32] [i32 12, i32 55], [2 x i32] [i32 11, i32 65]], [15 x [2 x i32]] [[2 x i32] [i32 17, i32 -10], [2 x i32] [i32 32, i32 -13], [2 x i32] [i32 42, i32 -9], [2 x i32] [i32 49, i32 -5], [2 x i32] [i32 53, i32 0], [2 x i32] [i32 64, i32 3], [2 x i32] [i32 68, i32 10], [2 x i32] [i32 66, i32 27], [2 x i32] [i32 47, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 37, i32 -33], [2 x i32] [i32 39, i32 -36], [2 x i32] [i32 40, i32 -37], [2 x i32] [i32 38, i32 -30], [2 x i32] [i32 46, i32 -33], [2 x i32] [i32 42, i32 -30], [2 x i32] [i32 40, i32 -24], [2 x i32] [i32 49, i32 -29], [2 x i32] [i32 38, i32 -12], [2 x i32] [i32 40, i32 -10], [2 x i32] [i32 38, i32 -3], [2 x i32] [i32 46, i32 -5], [2 x i32] [i32 31, i32 20], [2 x i32] [i32 29, i32 30], [2 x i32] [i32 25, i32 44]], [15 x [2 x i32]] [[2 x i32] [i32 12, i32 48], [2 x i32] [i32 11, i32 49], [2 x i32] [i32 26, i32 45], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 22, i32 22], [2 x i32] [i32 23, i32 22], [2 x i32] [i32 27, i32 21], [2 x i32] [i32 33, i32 20], [2 x i32] [i32 26, i32 28], [2 x i32] [i32 30, i32 24], [2 x i32] [i32 27, i32 34], [2 x i32] [i32 18, i32 42], [2 x i32] [i32 25, i32 39], [2 x i32] [i32 18, i32 50], [2 x i32] [i32 12, i32 70], [2 x i32] [i32 21, i32 54], [2 x i32] [i32 14, i32 71], [2 x i32] [i32 11, i32 83]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 17, i32 -13], [2 x i32] [i32 16, i32 -9], [2 x i32] [i32 17, i32 -12], [2 x i32] [i32 27, i32 -21], [2 x i32] [i32 37, i32 -30], [2 x i32] [i32 41, i32 -40], [2 x i32] [i32 42, i32 -41], [2 x i32] [i32 48, i32 -47], [2 x i32] [i32 39, i32 -32], [2 x i32] [i32 46, i32 -40], [2 x i32] [i32 52, i32 -51], [2 x i32] [i32 46, i32 -41], [2 x i32] [i32 52, i32 -39], [2 x i32] [i32 43, i32 -19], [2 x i32] [i32 32, i32 11]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 61, i32 -55], [2 x i32] [i32 56, i32 -46], [2 x i32] [i32 62, i32 -50], [2 x i32] [i32 81, i32 -67], [2 x i32] [i32 45, i32 -20], [2 x i32] [i32 35, i32 -2], [2 x i32] [i32 28, i32 15], [2 x i32] [i32 34, i32 1], [2 x i32] [i32 39, i32 1], [2 x i32] [i32 30, i32 17], [2 x i32] [i32 20, i32 38], [2 x i32] [i32 18, i32 45], [2 x i32] [i32 15, i32 54], [2 x i32] [i32 0, i32 79]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 30, i32 -10], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 33, i32 -1], [2 x i32] [i32 33, i32 7], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 37, i32 23], [2 x i32] [i32 31, i32 38], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 36, i32 -16], [2 x i32] [i32 37, i32 -14], [2 x i32] [i32 37, i32 -17], [2 x i32] [i32 32, i32 1], [2 x i32] [i32 34, i32 15], [2 x i32] [i32 29, i32 15], [2 x i32] [i32 24, i32 25], [2 x i32] [i32 34, i32 22], [2 x i32] [i32 31, i32 16], [2 x i32] [i32 35, i32 18], [2 x i32] [i32 31, i32 28], [2 x i32] [i32 33, i32 41], [2 x i32] [i32 36, i32 28], [2 x i32] [i32 27, i32 47], [2 x i32] [i32 21, i32 62]], [15 x [2 x i32]] [[2 x i32] [i32 18, i32 31], [2 x i32] [i32 19, i32 26], [2 x i32] [i32 36, i32 24], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 24, i32 23], [2 x i32] [i32 27, i32 16], [2 x i32] [i32 24, i32 30], [2 x i32] [i32 31, i32 29], [2 x i32] [i32 22, i32 41], [2 x i32] [i32 22, i32 42], [2 x i32] [i32 16, i32 60], [2 x i32] [i32 15, i32 52], [2 x i32] [i32 14, i32 60], [2 x i32] [i32 3, i32 78], [2 x i32] [i32 -16, i32 123], [2 x i32] [i32 21, i32 53], [2 x i32] [i32 22, i32 56], [2 x i32] [i32 25, i32 61]]]], align 16
@color_formats = common dso_local local_unnamed_addr global i32 0, align 4
@top_pic = common dso_local local_unnamed_addr global ptr null, align 8
@bottom_pic = common dso_local local_unnamed_addr global ptr null, align 8
@frame_pic = common dso_local local_unnamed_addr global ptr null, align 8
@frame_pic_1 = common dso_local local_unnamed_addr global ptr null, align 8
@frame_pic_2 = common dso_local local_unnamed_addr global ptr null, align 8
@frame_pic_3 = common dso_local local_unnamed_addr global ptr null, align 8
@frame_pic_si = common dso_local local_unnamed_addr global ptr null, align 8
@Bit_Buffer = common dso_local local_unnamed_addr global ptr null, align 8
@imgY_org = common dso_local local_unnamed_addr global ptr null, align 8
@imgUV_org = common dso_local local_unnamed_addr global ptr null, align 8
@imgY_sub_tmp = common dso_local local_unnamed_addr global ptr null, align 8
@PicPos = common dso_local local_unnamed_addr global ptr null, align 8
@log2_max_frame_num_minus4 = common dso_local local_unnamed_addr global i32 0, align 4
@log2_max_pic_order_cnt_lsb_minus4 = common dso_local local_unnamed_addr global i32 0, align 4
@me_tot_time = common dso_local local_unnamed_addr global i64 0, align 8
@me_time = common dso_local local_unnamed_addr global i64 0, align 8
@active_pps = common dso_local local_unnamed_addr global ptr null, align 8
@active_sps = common dso_local local_unnamed_addr global ptr null, align 8
@dsr_new_search_range = common dso_local local_unnamed_addr global i32 0, align 4
@mb_adaptive = common dso_local local_unnamed_addr global i32 0, align 4
@MBPairIsField = common dso_local local_unnamed_addr global i32 0, align 4
@wp_weight = common dso_local local_unnamed_addr global ptr null, align 8
@wp_offset = common dso_local local_unnamed_addr global ptr null, align 8
@wbp_weight = common dso_local local_unnamed_addr global ptr null, align 8
@luma_log_weight_denom = common dso_local local_unnamed_addr global i32 0, align 4
@chroma_log_weight_denom = common dso_local local_unnamed_addr global i32 0, align 4
@wp_luma_round = common dso_local local_unnamed_addr global i32 0, align 4
@wp_chroma_round = common dso_local local_unnamed_addr global i32 0, align 4
@imgY_org_top = common dso_local local_unnamed_addr global ptr null, align 8
@imgY_org_bot = common dso_local local_unnamed_addr global ptr null, align 8
@imgUV_org_top = common dso_local local_unnamed_addr global ptr null, align 8
@imgUV_org_bot = common dso_local local_unnamed_addr global ptr null, align 8
@imgY_org_frm = common dso_local local_unnamed_addr global ptr null, align 8
@imgUV_org_frm = common dso_local local_unnamed_addr global ptr null, align 8
@imgY_com = common dso_local local_unnamed_addr global ptr null, align 8
@imgUV_com = common dso_local local_unnamed_addr global ptr null, align 8
@direct_ref_idx = common dso_local local_unnamed_addr global ptr null, align 8
@direct_pdir = common dso_local local_unnamed_addr global ptr null, align 8
@pixel_map = common dso_local local_unnamed_addr global ptr null, align 8
@refresh_map = common dso_local local_unnamed_addr global ptr null, align 8
@intras = common dso_local local_unnamed_addr global i32 0, align 4
@frame_ctr = common dso_local local_unnamed_addr global [5 x i32] zeroinitializer, align 16
@frame_no = common dso_local local_unnamed_addr global i32 0, align 4
@nextP_tr_fld = common dso_local local_unnamed_addr global i32 0, align 4
@nextP_tr_frm = common dso_local local_unnamed_addr global i32 0, align 4
@tot_time = common dso_local local_unnamed_addr global i64 0, align 8
@errortext = common dso_local local_unnamed_addr global [300 x i8] zeroinitializer, align 16
@b8_ipredmode8x8 = common dso_local local_unnamed_addr global [4 x [4 x i8]] zeroinitializer, align 16
@b8_intra_pred_modes8x8 = common dso_local local_unnamed_addr global [16 x i8] zeroinitializer, align 16
@gop_structure = common dso_local local_unnamed_addr global ptr null, align 8
@rdopt = common dso_local local_unnamed_addr global ptr null, align 8
@rddata_top_frame_mb = common dso_local local_unnamed_addr global %struct.RD_DATA zeroinitializer, align 8
@rddata_bot_frame_mb = common dso_local local_unnamed_addr global %struct.RD_DATA zeroinitializer, align 8
@rddata_top_field_mb = common dso_local local_unnamed_addr global %struct.RD_DATA zeroinitializer, align 8
@rddata_bot_field_mb = common dso_local local_unnamed_addr global %struct.RD_DATA zeroinitializer, align 8
@p_stat = common dso_local local_unnamed_addr global ptr null, align 8
@p_log = common dso_local local_unnamed_addr global ptr null, align 8
@p_trace = common dso_local local_unnamed_addr global ptr null, align 8
@p_in = common dso_local local_unnamed_addr global i32 0, align 4
@p_dec = common dso_local local_unnamed_addr global i32 0, align 4
@mb16x16_cost_frame = common dso_local local_unnamed_addr global ptr null, align 8
@Bytes_After_Header = common dso_local local_unnamed_addr global i32 0, align 4
@encode_one_macroblock = common dso_local local_unnamed_addr global ptr null, align 8
@lrec = common dso_local local_unnamed_addr global ptr null, align 8
@lrec_uv = common dso_local local_unnamed_addr global ptr null, align 8
@si_frame_indicator = common dso_local local_unnamed_addr global i32 0, align 4
@sp2_frame_indicator = common dso_local local_unnamed_addr global i32 0, align 4
@number_sp2_frames = common dso_local local_unnamed_addr global i32 0, align 4
@giRDOpt_B8OnlyFlag = common dso_local local_unnamed_addr global i32 0, align 4
@imgY_tmp = common dso_local local_unnamed_addr global ptr null, align 8
@imgUV_tmp = common dso_local local_unnamed_addr global [2 x ptr] zeroinitializer, align 16
@frameNuminGOP = common dso_local local_unnamed_addr global i32 0, align 4
@redundant_coding = common dso_local local_unnamed_addr global i32 0, align 4
@key_frame = common dso_local local_unnamed_addr global i32 0, align 4
@redundant_ref_idx = common dso_local local_unnamed_addr global i32 0, align 4
@img_pad_size_uv_x = common dso_local local_unnamed_addr global i32 0, align 4
@img_pad_size_uv_y = common dso_local local_unnamed_addr global i32 0, align 4
@chroma_mask_mv_y = common dso_local local_unnamed_addr global i8 0, align 1
@chroma_mask_mv_x = common dso_local local_unnamed_addr global i8 0, align 1
@chroma_shift_y = common dso_local local_unnamed_addr global i32 0, align 4
@chroma_shift_x = common dso_local local_unnamed_addr global i32 0, align 4
@shift_cr_x = common dso_local local_unnamed_addr global i32 0, align 4
@shift_cr_y = common dso_local local_unnamed_addr global i32 0, align 4
@img_padded_size_x = common dso_local local_unnamed_addr global i32 0, align 4
@img_cr_padded_size_x = common dso_local local_unnamed_addr global i32 0, align 4
@start_me_refinement_hp = common dso_local local_unnamed_addr global i32 0, align 4
@start_me_refinement_qp = common dso_local local_unnamed_addr global i32 0, align 4

; Function Attrs: nounwind uwtable
define dso_local void @create_context_memory() local_unnamed_addr #0 {
  %1 = load ptr, ptr @img, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.ImageParameters, ptr %1, i64 0, i32 120
  %3 = load i32, ptr %2, align 8, !tbaa !9
  %4 = load ptr, ptr @input, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.InputParameters, ptr %4, i64 0, i32 21
  %6 = load i32, ptr %5, align 8, !tbaa !15
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %11

8:                                                ; preds = %0
  %9 = getelementptr inbounds %struct.InputParameters, ptr %4, i64 0, i32 22
  %10 = load i32, ptr %9, align 4, !tbaa !17
  br label %11

11:                                               ; preds = %0, %8
  %12 = phi i32 [ %10, %8 ], [ %3, %0 ]
  store i32 %12, ptr @num_mb_per_slice, align 4, !tbaa !18
  %13 = add i32 %3, -1
  %14 = add i32 %13, %12
  %15 = sdiv i32 %14, %12
  store i32 %15, ptr @number_of_slices, align 4, !tbaa !18
  %16 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #13
  store ptr %16, ptr @initialized, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %11
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #14
  br label %19

19:                                               ; preds = %18, %11
  %20 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #13
  store ptr %20, ptr @model_number, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %23, %19
  br label %27

23:                                               ; preds = %19
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #14
  br label %22

24:                                               ; preds = %133
  %25 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %136, label %292

27:                                               ; preds = %22, %133
  %28 = phi i64 [ %134, %133 ], [ 0, %22 ]
  %29 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #13
  %30 = load ptr, ptr @initialized, align 8, !tbaa !5
  %31 = getelementptr inbounds ptr, ptr %30, i64 %28
  store ptr %29, ptr %31, align 8, !tbaa !5
  %32 = icmp eq ptr %29, null
  br i1 %32, label %33, label %34

33:                                               ; preds = %27
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #14
  br label %34

34:                                               ; preds = %33, %27
  %35 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #13
  %36 = load ptr, ptr @model_number, align 8, !tbaa !5
  %37 = getelementptr inbounds ptr, ptr %36, i64 %28
  store ptr %35, ptr %37, align 8, !tbaa !5
  %38 = icmp eq ptr %35, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %34
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #14
  br label %40

40:                                               ; preds = %39, %34
  %41 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 2
  %44 = tail call noalias ptr @malloc(i64 noundef %43) #13
  %45 = load ptr, ptr @initialized, align 8, !tbaa !5
  %46 = getelementptr inbounds ptr, ptr %45, i64 %28
  %47 = load ptr, ptr %46, align 8, !tbaa !5
  store ptr %44, ptr %47, align 8, !tbaa !5
  %48 = icmp eq ptr %44, null
  br i1 %48, label %49, label %53

49:                                               ; preds = %40
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #14
  %50 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %51 = sext i32 %50 to i64
  %52 = shl nsw i64 %51, 2
  br label %53

53:                                               ; preds = %49, %40
  %54 = phi i64 [ %52, %49 ], [ %43, %40 ]
  %55 = tail call noalias ptr @malloc(i64 noundef %54) #13
  %56 = load ptr, ptr @model_number, align 8, !tbaa !5
  %57 = getelementptr inbounds ptr, ptr %56, i64 %28
  %58 = load ptr, ptr %57, align 8, !tbaa !5
  store ptr %55, ptr %58, align 8, !tbaa !5
  %59 = icmp eq ptr %55, null
  br i1 %59, label %60, label %64

60:                                               ; preds = %53
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #14
  %61 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %62 = sext i32 %61 to i64
  %63 = shl nsw i64 %62, 2
  br label %64

64:                                               ; preds = %53, %60
  %65 = phi i64 [ %54, %53 ], [ %63, %60 ]
  %66 = tail call noalias ptr @malloc(i64 noundef %65) #13
  %67 = load ptr, ptr @initialized, align 8, !tbaa !5
  %68 = getelementptr inbounds ptr, ptr %67, i64 %28
  %69 = load ptr, ptr %68, align 8, !tbaa !5
  %70 = getelementptr inbounds ptr, ptr %69, i64 1
  store ptr %66, ptr %70, align 8, !tbaa !5
  %71 = icmp eq ptr %66, null
  br i1 %71, label %72, label %76

72:                                               ; preds = %64
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #14
  %73 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 2
  br label %76

76:                                               ; preds = %72, %64
  %77 = phi i64 [ %75, %72 ], [ %65, %64 ]
  %78 = tail call noalias ptr @malloc(i64 noundef %77) #13
  %79 = load ptr, ptr @model_number, align 8, !tbaa !5
  %80 = getelementptr inbounds ptr, ptr %79, i64 %28
  %81 = load ptr, ptr %80, align 8, !tbaa !5
  %82 = getelementptr inbounds ptr, ptr %81, i64 1
  store ptr %78, ptr %82, align 8, !tbaa !5
  %83 = icmp eq ptr %78, null
  br i1 %83, label %84, label %88

84:                                               ; preds = %76
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #14
  %85 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %86 = sext i32 %85 to i64
  %87 = shl nsw i64 %86, 2
  br label %88

88:                                               ; preds = %84, %76
  %89 = phi i64 [ %87, %84 ], [ %77, %76 ]
  %90 = tail call noalias ptr @malloc(i64 noundef %89) #13
  %91 = load ptr, ptr @initialized, align 8, !tbaa !5
  %92 = getelementptr inbounds ptr, ptr %91, i64 %28
  %93 = load ptr, ptr %92, align 8, !tbaa !5
  %94 = getelementptr inbounds ptr, ptr %93, i64 2
  store ptr %90, ptr %94, align 8, !tbaa !5
  %95 = icmp eq ptr %90, null
  br i1 %95, label %96, label %100

96:                                               ; preds = %88
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #14
  %97 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %98 = sext i32 %97 to i64
  %99 = shl nsw i64 %98, 2
  br label %100

100:                                              ; preds = %96, %88
  %101 = phi i64 [ %99, %96 ], [ %89, %88 ]
  %102 = tail call noalias ptr @malloc(i64 noundef %101) #13
  %103 = load ptr, ptr @model_number, align 8, !tbaa !5
  %104 = getelementptr inbounds ptr, ptr %103, i64 %28
  %105 = load ptr, ptr %104, align 8, !tbaa !5
  %106 = getelementptr inbounds ptr, ptr %105, i64 2
  store ptr %102, ptr %106, align 8, !tbaa !5
  %107 = icmp eq ptr %102, null
  br i1 %107, label %108, label %112

108:                                              ; preds = %100
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #14
  %109 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 2
  br label %112

112:                                              ; preds = %108, %100
  %113 = phi i64 [ %111, %108 ], [ %101, %100 ]
  %114 = tail call noalias ptr @malloc(i64 noundef %113) #13
  %115 = load ptr, ptr @initialized, align 8, !tbaa !5
  %116 = getelementptr inbounds ptr, ptr %115, i64 %28
  %117 = load ptr, ptr %116, align 8, !tbaa !5
  %118 = getelementptr inbounds ptr, ptr %117, i64 3
  store ptr %114, ptr %118, align 8, !tbaa !5
  %119 = icmp eq ptr %114, null
  br i1 %119, label %120, label %124

120:                                              ; preds = %112
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #14
  %121 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %122 = sext i32 %121 to i64
  %123 = shl nsw i64 %122, 2
  br label %124

124:                                              ; preds = %120, %112
  %125 = phi i64 [ %123, %120 ], [ %113, %112 ]
  %126 = tail call noalias ptr @malloc(i64 noundef %125) #13
  %127 = load ptr, ptr @model_number, align 8, !tbaa !5
  %128 = getelementptr inbounds ptr, ptr %127, i64 %28
  %129 = load ptr, ptr %128, align 8, !tbaa !5
  %130 = getelementptr inbounds ptr, ptr %129, i64 3
  store ptr %126, ptr %130, align 8, !tbaa !5
  %131 = icmp eq ptr %126, null
  br i1 %131, label %132, label %133

132:                                              ; preds = %124
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #14
  br label %133

133:                                              ; preds = %132, %124
  %134 = add nuw nsw i64 %28, 1
  %135 = icmp eq i64 %134, 3
  br i1 %135, label %24, label %27, !llvm.loop !19

136:                                              ; preds = %24
  %137 = load ptr, ptr @initialized, align 8
  %138 = load ptr, ptr %137, align 8, !tbaa !5
  %139 = load ptr, ptr %138, align 8, !tbaa !5
  br label %140

140:                                              ; preds = %136, %140
  %141 = phi i64 [ 0, %136 ], [ %143, %140 ]
  %142 = getelementptr inbounds i32, ptr %139, i64 %141
  store i32 0, ptr %142, align 4, !tbaa !18
  %143 = add nuw nsw i64 %141, 1
  %144 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %145 = sext i32 %144 to i64
  %146 = icmp slt i64 %143, %145
  br i1 %146, label %140, label %147, !llvm.loop !21

147:                                              ; preds = %140
  %148 = icmp sgt i32 %144, 0
  br i1 %148, label %149, label %292

149:                                              ; preds = %147
  %150 = load ptr, ptr %137, align 8, !tbaa !5
  %151 = getelementptr inbounds ptr, ptr %150, i64 1
  %152 = load ptr, ptr %151, align 8, !tbaa !5
  br label %153

153:                                              ; preds = %153, %149
  %154 = phi i64 [ 0, %149 ], [ %156, %153 ]
  %155 = getelementptr inbounds i32, ptr %152, i64 %154
  store i32 0, ptr %155, align 4, !tbaa !18
  %156 = add nuw nsw i64 %154, 1
  %157 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %158 = sext i32 %157 to i64
  %159 = icmp slt i64 %156, %158
  br i1 %159, label %153, label %160, !llvm.loop !21

160:                                              ; preds = %153
  %161 = icmp sgt i32 %157, 0
  br i1 %161, label %162, label %292

162:                                              ; preds = %160
  %163 = load ptr, ptr %137, align 8, !tbaa !5
  %164 = getelementptr inbounds ptr, ptr %163, i64 2
  %165 = load ptr, ptr %164, align 8, !tbaa !5
  br label %166

166:                                              ; preds = %166, %162
  %167 = phi i64 [ 0, %162 ], [ %169, %166 ]
  %168 = getelementptr inbounds i32, ptr %165, i64 %167
  store i32 0, ptr %168, align 4, !tbaa !18
  %169 = add nuw nsw i64 %167, 1
  %170 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %171 = sext i32 %170 to i64
  %172 = icmp slt i64 %169, %171
  br i1 %172, label %166, label %173, !llvm.loop !21

173:                                              ; preds = %166
  %174 = icmp sgt i32 %170, 0
  br i1 %174, label %175, label %292

175:                                              ; preds = %173
  %176 = load ptr, ptr %137, align 8, !tbaa !5
  %177 = getelementptr inbounds ptr, ptr %176, i64 3
  %178 = load ptr, ptr %177, align 8, !tbaa !5
  br label %179

179:                                              ; preds = %179, %175
  %180 = phi i64 [ 0, %175 ], [ %182, %179 ]
  %181 = getelementptr inbounds i32, ptr %178, i64 %180
  store i32 0, ptr %181, align 4, !tbaa !18
  %182 = add nuw nsw i64 %180, 1
  %183 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %184 = sext i32 %183 to i64
  %185 = icmp slt i64 %182, %184
  br i1 %185, label %179, label %186, !llvm.loop !21

186:                                              ; preds = %179
  %187 = load ptr, ptr @initialized, align 8
  %188 = getelementptr inbounds ptr, ptr %187, i64 1
  %189 = icmp sgt i32 %183, 0
  br i1 %189, label %190, label %292

190:                                              ; preds = %186
  %191 = load ptr, ptr %188, align 8, !tbaa !5
  %192 = load ptr, ptr %191, align 8, !tbaa !5
  br label %193

193:                                              ; preds = %193, %190
  %194 = phi i64 [ 0, %190 ], [ %196, %193 ]
  %195 = getelementptr inbounds i32, ptr %192, i64 %194
  store i32 0, ptr %195, align 4, !tbaa !18
  %196 = add nuw nsw i64 %194, 1
  %197 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %198 = sext i32 %197 to i64
  %199 = icmp slt i64 %196, %198
  br i1 %199, label %193, label %200, !llvm.loop !21

200:                                              ; preds = %193
  %201 = icmp sgt i32 %197, 0
  br i1 %201, label %202, label %292

202:                                              ; preds = %200
  %203 = load ptr, ptr %188, align 8, !tbaa !5
  %204 = getelementptr inbounds ptr, ptr %203, i64 1
  %205 = load ptr, ptr %204, align 8, !tbaa !5
  br label %206

206:                                              ; preds = %206, %202
  %207 = phi i64 [ 0, %202 ], [ %209, %206 ]
  %208 = getelementptr inbounds i32, ptr %205, i64 %207
  store i32 0, ptr %208, align 4, !tbaa !18
  %209 = add nuw nsw i64 %207, 1
  %210 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %211 = sext i32 %210 to i64
  %212 = icmp slt i64 %209, %211
  br i1 %212, label %206, label %213, !llvm.loop !21

213:                                              ; preds = %206
  %214 = icmp sgt i32 %210, 0
  br i1 %214, label %215, label %292

215:                                              ; preds = %213
  %216 = load ptr, ptr %188, align 8, !tbaa !5
  %217 = getelementptr inbounds ptr, ptr %216, i64 2
  %218 = load ptr, ptr %217, align 8, !tbaa !5
  br label %219

219:                                              ; preds = %219, %215
  %220 = phi i64 [ 0, %215 ], [ %222, %219 ]
  %221 = getelementptr inbounds i32, ptr %218, i64 %220
  store i32 0, ptr %221, align 4, !tbaa !18
  %222 = add nuw nsw i64 %220, 1
  %223 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %224 = sext i32 %223 to i64
  %225 = icmp slt i64 %222, %224
  br i1 %225, label %219, label %226, !llvm.loop !21

226:                                              ; preds = %219
  %227 = icmp sgt i32 %223, 0
  br i1 %227, label %228, label %292

228:                                              ; preds = %226
  %229 = load ptr, ptr %188, align 8, !tbaa !5
  %230 = getelementptr inbounds ptr, ptr %229, i64 3
  %231 = load ptr, ptr %230, align 8, !tbaa !5
  br label %232

232:                                              ; preds = %232, %228
  %233 = phi i64 [ 0, %228 ], [ %235, %232 ]
  %234 = getelementptr inbounds i32, ptr %231, i64 %233
  store i32 0, ptr %234, align 4, !tbaa !18
  %235 = add nuw nsw i64 %233, 1
  %236 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %237 = sext i32 %236 to i64
  %238 = icmp slt i64 %235, %237
  br i1 %238, label %232, label %239, !llvm.loop !21

239:                                              ; preds = %232
  %240 = load ptr, ptr @initialized, align 8
  %241 = getelementptr inbounds ptr, ptr %240, i64 2
  %242 = icmp sgt i32 %236, 0
  br i1 %242, label %243, label %292

243:                                              ; preds = %239
  %244 = load ptr, ptr %241, align 8, !tbaa !5
  %245 = load ptr, ptr %244, align 8, !tbaa !5
  br label %246

246:                                              ; preds = %246, %243
  %247 = phi i64 [ 0, %243 ], [ %249, %246 ]
  %248 = getelementptr inbounds i32, ptr %245, i64 %247
  store i32 0, ptr %248, align 4, !tbaa !18
  %249 = add nuw nsw i64 %247, 1
  %250 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %251 = sext i32 %250 to i64
  %252 = icmp slt i64 %249, %251
  br i1 %252, label %246, label %253, !llvm.loop !21

253:                                              ; preds = %246
  %254 = icmp sgt i32 %250, 0
  br i1 %254, label %255, label %292

255:                                              ; preds = %253
  %256 = load ptr, ptr %241, align 8, !tbaa !5
  %257 = getelementptr inbounds ptr, ptr %256, i64 1
  %258 = load ptr, ptr %257, align 8, !tbaa !5
  br label %259

259:                                              ; preds = %259, %255
  %260 = phi i64 [ 0, %255 ], [ %262, %259 ]
  %261 = getelementptr inbounds i32, ptr %258, i64 %260
  store i32 0, ptr %261, align 4, !tbaa !18
  %262 = add nuw nsw i64 %260, 1
  %263 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %264 = sext i32 %263 to i64
  %265 = icmp slt i64 %262, %264
  br i1 %265, label %259, label %266, !llvm.loop !21

266:                                              ; preds = %259
  %267 = icmp sgt i32 %263, 0
  br i1 %267, label %268, label %292

268:                                              ; preds = %266
  %269 = load ptr, ptr %241, align 8, !tbaa !5
  %270 = getelementptr inbounds ptr, ptr %269, i64 2
  %271 = load ptr, ptr %270, align 8, !tbaa !5
  br label %272

272:                                              ; preds = %272, %268
  %273 = phi i64 [ 0, %268 ], [ %275, %272 ]
  %274 = getelementptr inbounds i32, ptr %271, i64 %273
  store i32 0, ptr %274, align 4, !tbaa !18
  %275 = add nuw nsw i64 %273, 1
  %276 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %277 = sext i32 %276 to i64
  %278 = icmp slt i64 %275, %277
  br i1 %278, label %272, label %279, !llvm.loop !21

279:                                              ; preds = %272
  %280 = icmp sgt i32 %276, 0
  br i1 %280, label %281, label %292

281:                                              ; preds = %279
  %282 = load ptr, ptr %241, align 8, !tbaa !5
  %283 = getelementptr inbounds ptr, ptr %282, i64 3
  %284 = load ptr, ptr %283, align 8, !tbaa !5
  br label %285

285:                                              ; preds = %285, %281
  %286 = phi i64 [ 0, %281 ], [ %288, %285 ]
  %287 = getelementptr inbounds i32, ptr %284, i64 %286
  store i32 0, ptr %287, align 4, !tbaa !18
  %288 = add nuw nsw i64 %286, 1
  %289 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %290 = sext i32 %289 to i64
  %291 = icmp slt i64 %288, %290
  br i1 %291, label %285, label %292, !llvm.loop !21

292:                                              ; preds = %285, %253, %266, %200, %213, %226, %147, %160, %173, %186, %239, %279, %24
  br label %293

293:                                              ; preds = %292, %293
  %294 = phi i64 [ %307, %293 ], [ 0, %292 ]
  %295 = sub nuw nsw i64 127, %294
  %296 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %295
  %297 = load double, ptr %296, align 8, !tbaa !22
  %298 = fsub double 1.000000e+00, %297
  %299 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %294
  store double %298, ptr %299, align 8, !tbaa !22
  %300 = tail call double @log10(double noundef %298) #14
  %301 = fdiv double %300, 0x3FD34413509F79FF
  %302 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %294
  store double %301, ptr %302, align 8, !tbaa !22
  %303 = load double, ptr %296, align 8, !tbaa !22
  %304 = tail call double @log10(double noundef %303) #14
  %305 = fdiv double %304, 0x3FD34413509F79FF
  %306 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %295
  store double %305, ptr %306, align 8, !tbaa !22
  %307 = add nuw nsw i64 %294, 1
  %308 = icmp eq i64 %307, 64
  br i1 %308, label %309, label %293, !llvm.loop !23

309:                                              ; preds = %293
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

declare void @no_mem_exit(ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @log10(double noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nounwind willreturn uwtable
define dso_local void @free_context_memory() local_unnamed_addr #4 {
  %1 = load ptr, ptr @initialized, align 8, !tbaa !5
  %2 = load ptr, ptr %1, align 8, !tbaa !5
  %3 = load ptr, ptr %2, align 8, !tbaa !5
  tail call void @free(ptr noundef %3) #14
  %4 = load ptr, ptr @model_number, align 8, !tbaa !5
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  tail call void @free(ptr noundef %6) #14
  %7 = load ptr, ptr @initialized, align 8, !tbaa !5
  %8 = load ptr, ptr %7, align 8, !tbaa !5
  %9 = getelementptr inbounds ptr, ptr %8, i64 1
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  tail call void @free(ptr noundef %10) #14
  %11 = load ptr, ptr @model_number, align 8, !tbaa !5
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = getelementptr inbounds ptr, ptr %12, i64 1
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  tail call void @free(ptr noundef %14) #14
  %15 = load ptr, ptr @initialized, align 8, !tbaa !5
  %16 = load ptr, ptr %15, align 8, !tbaa !5
  %17 = getelementptr inbounds ptr, ptr %16, i64 2
  %18 = load ptr, ptr %17, align 8, !tbaa !5
  tail call void @free(ptr noundef %18) #14
  %19 = load ptr, ptr @model_number, align 8, !tbaa !5
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = getelementptr inbounds ptr, ptr %20, i64 2
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  tail call void @free(ptr noundef %22) #14
  %23 = load ptr, ptr @initialized, align 8, !tbaa !5
  %24 = load ptr, ptr %23, align 8, !tbaa !5
  %25 = getelementptr inbounds ptr, ptr %24, i64 3
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  tail call void @free(ptr noundef %26) #14
  %27 = load ptr, ptr @model_number, align 8, !tbaa !5
  %28 = load ptr, ptr %27, align 8, !tbaa !5
  %29 = getelementptr inbounds ptr, ptr %28, i64 3
  %30 = load ptr, ptr %29, align 8, !tbaa !5
  tail call void @free(ptr noundef %30) #14
  %31 = load ptr, ptr @initialized, align 8, !tbaa !5
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  tail call void @free(ptr noundef %32) #14
  %33 = load ptr, ptr @model_number, align 8, !tbaa !5
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  tail call void @free(ptr noundef %34) #14
  %35 = load ptr, ptr @initialized, align 8, !tbaa !5
  %36 = getelementptr inbounds ptr, ptr %35, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !5
  %38 = load ptr, ptr %37, align 8, !tbaa !5
  tail call void @free(ptr noundef %38) #14
  %39 = load ptr, ptr @model_number, align 8, !tbaa !5
  %40 = getelementptr inbounds ptr, ptr %39, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  tail call void @free(ptr noundef %42) #14
  %43 = load ptr, ptr @initialized, align 8, !tbaa !5
  %44 = getelementptr inbounds ptr, ptr %43, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  %46 = getelementptr inbounds ptr, ptr %45, i64 1
  %47 = load ptr, ptr %46, align 8, !tbaa !5
  tail call void @free(ptr noundef %47) #14
  %48 = load ptr, ptr @model_number, align 8, !tbaa !5
  %49 = getelementptr inbounds ptr, ptr %48, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !5
  %51 = getelementptr inbounds ptr, ptr %50, i64 1
  %52 = load ptr, ptr %51, align 8, !tbaa !5
  tail call void @free(ptr noundef %52) #14
  %53 = load ptr, ptr @initialized, align 8, !tbaa !5
  %54 = getelementptr inbounds ptr, ptr %53, i64 1
  %55 = load ptr, ptr %54, align 8, !tbaa !5
  %56 = getelementptr inbounds ptr, ptr %55, i64 2
  %57 = load ptr, ptr %56, align 8, !tbaa !5
  tail call void @free(ptr noundef %57) #14
  %58 = load ptr, ptr @model_number, align 8, !tbaa !5
  %59 = getelementptr inbounds ptr, ptr %58, i64 1
  %60 = load ptr, ptr %59, align 8, !tbaa !5
  %61 = getelementptr inbounds ptr, ptr %60, i64 2
  %62 = load ptr, ptr %61, align 8, !tbaa !5
  tail call void @free(ptr noundef %62) #14
  %63 = load ptr, ptr @initialized, align 8, !tbaa !5
  %64 = getelementptr inbounds ptr, ptr %63, i64 1
  %65 = load ptr, ptr %64, align 8, !tbaa !5
  %66 = getelementptr inbounds ptr, ptr %65, i64 3
  %67 = load ptr, ptr %66, align 8, !tbaa !5
  tail call void @free(ptr noundef %67) #14
  %68 = load ptr, ptr @model_number, align 8, !tbaa !5
  %69 = getelementptr inbounds ptr, ptr %68, i64 1
  %70 = load ptr, ptr %69, align 8, !tbaa !5
  %71 = getelementptr inbounds ptr, ptr %70, i64 3
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  tail call void @free(ptr noundef %72) #14
  %73 = load ptr, ptr @initialized, align 8, !tbaa !5
  %74 = getelementptr inbounds ptr, ptr %73, i64 1
  %75 = load ptr, ptr %74, align 8, !tbaa !5
  tail call void @free(ptr noundef %75) #14
  %76 = load ptr, ptr @model_number, align 8, !tbaa !5
  %77 = getelementptr inbounds ptr, ptr %76, i64 1
  %78 = load ptr, ptr %77, align 8, !tbaa !5
  tail call void @free(ptr noundef %78) #14
  %79 = load ptr, ptr @initialized, align 8, !tbaa !5
  %80 = getelementptr inbounds ptr, ptr %79, i64 2
  %81 = load ptr, ptr %80, align 8, !tbaa !5
  %82 = load ptr, ptr %81, align 8, !tbaa !5
  tail call void @free(ptr noundef %82) #14
  %83 = load ptr, ptr @model_number, align 8, !tbaa !5
  %84 = getelementptr inbounds ptr, ptr %83, i64 2
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load ptr, ptr %85, align 8, !tbaa !5
  tail call void @free(ptr noundef %86) #14
  %87 = load ptr, ptr @initialized, align 8, !tbaa !5
  %88 = getelementptr inbounds ptr, ptr %87, i64 2
  %89 = load ptr, ptr %88, align 8, !tbaa !5
  %90 = getelementptr inbounds ptr, ptr %89, i64 1
  %91 = load ptr, ptr %90, align 8, !tbaa !5
  tail call void @free(ptr noundef %91) #14
  %92 = load ptr, ptr @model_number, align 8, !tbaa !5
  %93 = getelementptr inbounds ptr, ptr %92, i64 2
  %94 = load ptr, ptr %93, align 8, !tbaa !5
  %95 = getelementptr inbounds ptr, ptr %94, i64 1
  %96 = load ptr, ptr %95, align 8, !tbaa !5
  tail call void @free(ptr noundef %96) #14
  %97 = load ptr, ptr @initialized, align 8, !tbaa !5
  %98 = getelementptr inbounds ptr, ptr %97, i64 2
  %99 = load ptr, ptr %98, align 8, !tbaa !5
  %100 = getelementptr inbounds ptr, ptr %99, i64 2
  %101 = load ptr, ptr %100, align 8, !tbaa !5
  tail call void @free(ptr noundef %101) #14
  %102 = load ptr, ptr @model_number, align 8, !tbaa !5
  %103 = getelementptr inbounds ptr, ptr %102, i64 2
  %104 = load ptr, ptr %103, align 8, !tbaa !5
  %105 = getelementptr inbounds ptr, ptr %104, i64 2
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  tail call void @free(ptr noundef %106) #14
  %107 = load ptr, ptr @initialized, align 8, !tbaa !5
  %108 = getelementptr inbounds ptr, ptr %107, i64 2
  %109 = load ptr, ptr %108, align 8, !tbaa !5
  %110 = getelementptr inbounds ptr, ptr %109, i64 3
  %111 = load ptr, ptr %110, align 8, !tbaa !5
  tail call void @free(ptr noundef %111) #14
  %112 = load ptr, ptr @model_number, align 8, !tbaa !5
  %113 = getelementptr inbounds ptr, ptr %112, i64 2
  %114 = load ptr, ptr %113, align 8, !tbaa !5
  %115 = getelementptr inbounds ptr, ptr %114, i64 3
  %116 = load ptr, ptr %115, align 8, !tbaa !5
  tail call void @free(ptr noundef %116) #14
  %117 = load ptr, ptr @initialized, align 8, !tbaa !5
  %118 = getelementptr inbounds ptr, ptr %117, i64 2
  %119 = load ptr, ptr %118, align 8, !tbaa !5
  tail call void @free(ptr noundef %119) #14
  %120 = load ptr, ptr @model_number, align 8, !tbaa !5
  %121 = getelementptr inbounds ptr, ptr %120, i64 2
  %122 = load ptr, ptr %121, align 8, !tbaa !5
  tail call void @free(ptr noundef %122) #14
  %123 = load ptr, ptr @initialized, align 8, !tbaa !5
  tail call void @free(ptr noundef %123) #14
  %124 = load ptr, ptr @model_number, align 8, !tbaa !5
  tail call void @free(ptr noundef %124) #14
  ret void
}

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @SetCtxModelNumber() local_unnamed_addr #6 {
  %1 = load ptr, ptr @img, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.ImageParameters, ptr %1, i64 0, i32 110
  %3 = load i32, ptr %2, align 8, !tbaa !24
  %4 = getelementptr inbounds %struct.ImageParameters, ptr %1, i64 0, i32 5
  %5 = load i32, ptr %4, align 4, !tbaa !25
  %6 = getelementptr inbounds %struct.ImageParameters, ptr %1, i64 0, i32 60
  %7 = load ptr, ptr %6, align 8, !tbaa !26
  %8 = getelementptr inbounds %struct.Slice, ptr %7, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !27
  %10 = load i32, ptr @num_mb_per_slice, align 4, !tbaa !18
  %11 = sdiv i32 %9, %10
  %12 = icmp eq i32 %5, 2
  br i1 %12, label %57, label %13

13:                                               ; preds = %0
  %14 = load ptr, ptr @input, align 8, !tbaa !5
  %15 = getelementptr inbounds %struct.InputParameters, ptr %14, i64 0, i32 151
  %16 = load i32, ptr %15, align 4, !tbaa !29
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.InputParameters, ptr %14, i64 0, i32 152
  %20 = load i32, ptr %19, align 8, !tbaa !30
  br label %57

21:                                               ; preds = %13
  %22 = load ptr, ptr @initialized, align 8, !tbaa !5
  %23 = sext i32 %3 to i64
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !5
  %26 = sext i32 %5 to i64
  %27 = getelementptr inbounds ptr, ptr %25, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !5
  %29 = sext i32 %11 to i64
  %30 = getelementptr inbounds i32, ptr %28, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !18
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %21
  %34 = load ptr, ptr @model_number, align 8, !tbaa !5
  %35 = getelementptr inbounds ptr, ptr %34, i64 %23
  %36 = load ptr, ptr %35, align 8, !tbaa !5
  %37 = getelementptr inbounds ptr, ptr %36, i64 %26
  %38 = load ptr, ptr %37, align 8, !tbaa !5
  %39 = getelementptr inbounds i32, ptr %38, i64 %29
  %40 = load i32, ptr %39, align 4, !tbaa !18
  br label %57

41:                                               ; preds = %21
  %42 = icmp eq i32 %11, 0
  br i1 %42, label %57, label %43

43:                                               ; preds = %41
  %44 = add nsw i32 %11, -1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %28, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !18
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %57, label %49

49:                                               ; preds = %43
  %50 = load ptr, ptr @model_number, align 8, !tbaa !5
  %51 = getelementptr inbounds ptr, ptr %50, i64 %23
  %52 = load ptr, ptr %51, align 8, !tbaa !5
  %53 = getelementptr inbounds ptr, ptr %52, i64 %26
  %54 = load ptr, ptr %53, align 8, !tbaa !5
  %55 = getelementptr inbounds i32, ptr %54, i64 %45
  %56 = load i32, ptr %55, align 4, !tbaa !18
  br label %57

57:                                               ; preds = %41, %43, %0, %33, %49, %18
  %58 = phi i32 [ %40, %33 ], [ %56, %49 ], [ %20, %18 ], [ 0, %0 ], [ 0, %43 ], [ 0, %41 ]
  %59 = getelementptr inbounds %struct.ImageParameters, ptr %1, i64 0, i32 127
  store i32 %58, ptr %59, align 8, !tbaa !31
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @init_contexts() local_unnamed_addr #0 {
  %1 = load ptr, ptr @img, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.ImageParameters, ptr %1, i64 0, i32 60
  %3 = load ptr, ptr %2, align 8, !tbaa !26
  %4 = getelementptr inbounds %struct.Slice, ptr %3, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !32
  %6 = getelementptr inbounds %struct.Slice, ptr %3, i64 0, i32 8
  %7 = load ptr, ptr %6, align 8, !tbaa !33
  br label %8

8:                                                ; preds = %0, %8
  %9 = phi i64 [ 0, %0 ], [ %131, %8 ]
  %10 = load ptr, ptr @img, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.ImageParameters, ptr %10, i64 0, i32 5
  %12 = load i32, ptr %11, align 4, !tbaa !25
  %13 = icmp eq i32 %12, 2
  %14 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 0
  %15 = getelementptr inbounds %struct.ImageParameters, ptr %10, i64 0, i32 127
  %16 = load i32, ptr %15, align 8, !tbaa !31
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %17, i64 %9, i64 0
  %19 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %17, i64 %9, i64 0
  %20 = select i1 %13, ptr %18, ptr %19
  tail call void @biari_init_context(ptr noundef %14, ptr noundef nonnull %20) #14
  %21 = load ptr, ptr @img, align 8, !tbaa !5
  %22 = getelementptr inbounds %struct.ImageParameters, ptr %21, i64 0, i32 5
  %23 = load i32, ptr %22, align 4, !tbaa !25
  %24 = icmp eq i32 %23, 2
  %25 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 1
  %26 = getelementptr inbounds %struct.ImageParameters, ptr %21, i64 0, i32 127
  %27 = load i32, ptr %26, align 8, !tbaa !31
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %28, i64 %9, i64 1
  %30 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %28, i64 %9, i64 1
  %31 = select i1 %24, ptr %29, ptr %30
  tail call void @biari_init_context(ptr noundef nonnull %25, ptr noundef nonnull %31) #14
  %32 = load ptr, ptr @img, align 8, !tbaa !5
  %33 = getelementptr inbounds %struct.ImageParameters, ptr %32, i64 0, i32 5
  %34 = load i32, ptr %33, align 4, !tbaa !25
  %35 = icmp eq i32 %34, 2
  %36 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 2
  %37 = getelementptr inbounds %struct.ImageParameters, ptr %32, i64 0, i32 127
  %38 = load i32, ptr %37, align 8, !tbaa !31
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %39, i64 %9, i64 2
  %41 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %39, i64 %9, i64 2
  %42 = select i1 %35, ptr %40, ptr %41
  tail call void @biari_init_context(ptr noundef nonnull %36, ptr noundef nonnull %42) #14
  %43 = load ptr, ptr @img, align 8, !tbaa !5
  %44 = getelementptr inbounds %struct.ImageParameters, ptr %43, i64 0, i32 5
  %45 = load i32, ptr %44, align 4, !tbaa !25
  %46 = icmp eq i32 %45, 2
  %47 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 3
  %48 = getelementptr inbounds %struct.ImageParameters, ptr %43, i64 0, i32 127
  %49 = load i32, ptr %48, align 8, !tbaa !31
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %50, i64 %9, i64 3
  %52 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %50, i64 %9, i64 3
  %53 = select i1 %46, ptr %51, ptr %52
  tail call void @biari_init_context(ptr noundef nonnull %47, ptr noundef nonnull %53) #14
  %54 = load ptr, ptr @img, align 8, !tbaa !5
  %55 = getelementptr inbounds %struct.ImageParameters, ptr %54, i64 0, i32 5
  %56 = load i32, ptr %55, align 4, !tbaa !25
  %57 = icmp eq i32 %56, 2
  %58 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 4
  %59 = getelementptr inbounds %struct.ImageParameters, ptr %54, i64 0, i32 127
  %60 = load i32, ptr %59, align 8, !tbaa !31
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %61, i64 %9, i64 4
  %63 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %61, i64 %9, i64 4
  %64 = select i1 %57, ptr %62, ptr %63
  tail call void @biari_init_context(ptr noundef nonnull %58, ptr noundef nonnull %64) #14
  %65 = load ptr, ptr @img, align 8, !tbaa !5
  %66 = getelementptr inbounds %struct.ImageParameters, ptr %65, i64 0, i32 5
  %67 = load i32, ptr %66, align 4, !tbaa !25
  %68 = icmp eq i32 %67, 2
  %69 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 5
  %70 = getelementptr inbounds %struct.ImageParameters, ptr %65, i64 0, i32 127
  %71 = load i32, ptr %70, align 8, !tbaa !31
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %72, i64 %9, i64 5
  %74 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %72, i64 %9, i64 5
  %75 = select i1 %68, ptr %73, ptr %74
  tail call void @biari_init_context(ptr noundef nonnull %69, ptr noundef nonnull %75) #14
  %76 = load ptr, ptr @img, align 8, !tbaa !5
  %77 = getelementptr inbounds %struct.ImageParameters, ptr %76, i64 0, i32 5
  %78 = load i32, ptr %77, align 4, !tbaa !25
  %79 = icmp eq i32 %78, 2
  %80 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 6
  %81 = getelementptr inbounds %struct.ImageParameters, ptr %76, i64 0, i32 127
  %82 = load i32, ptr %81, align 8, !tbaa !31
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %83, i64 %9, i64 6
  %85 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %83, i64 %9, i64 6
  %86 = select i1 %79, ptr %84, ptr %85
  tail call void @biari_init_context(ptr noundef nonnull %80, ptr noundef nonnull %86) #14
  %87 = load ptr, ptr @img, align 8, !tbaa !5
  %88 = getelementptr inbounds %struct.ImageParameters, ptr %87, i64 0, i32 5
  %89 = load i32, ptr %88, align 4, !tbaa !25
  %90 = icmp eq i32 %89, 2
  %91 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 7
  %92 = getelementptr inbounds %struct.ImageParameters, ptr %87, i64 0, i32 127
  %93 = load i32, ptr %92, align 8, !tbaa !31
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %94, i64 %9, i64 7
  %96 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %94, i64 %9, i64 7
  %97 = select i1 %90, ptr %95, ptr %96
  tail call void @biari_init_context(ptr noundef nonnull %91, ptr noundef nonnull %97) #14
  %98 = load ptr, ptr @img, align 8, !tbaa !5
  %99 = getelementptr inbounds %struct.ImageParameters, ptr %98, i64 0, i32 5
  %100 = load i32, ptr %99, align 4, !tbaa !25
  %101 = icmp eq i32 %100, 2
  %102 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 8
  %103 = getelementptr inbounds %struct.ImageParameters, ptr %98, i64 0, i32 127
  %104 = load i32, ptr %103, align 8, !tbaa !31
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %105, i64 %9, i64 8
  %107 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %105, i64 %9, i64 8
  %108 = select i1 %101, ptr %106, ptr %107
  tail call void @biari_init_context(ptr noundef nonnull %102, ptr noundef nonnull %108) #14
  %109 = load ptr, ptr @img, align 8, !tbaa !5
  %110 = getelementptr inbounds %struct.ImageParameters, ptr %109, i64 0, i32 5
  %111 = load i32, ptr %110, align 4, !tbaa !25
  %112 = icmp eq i32 %111, 2
  %113 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 9
  %114 = getelementptr inbounds %struct.ImageParameters, ptr %109, i64 0, i32 127
  %115 = load i32, ptr %114, align 8, !tbaa !31
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %116, i64 %9, i64 9
  %118 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %116, i64 %9, i64 9
  %119 = select i1 %112, ptr %117, ptr %118
  tail call void @biari_init_context(ptr noundef nonnull %113, ptr noundef nonnull %119) #14
  %120 = load ptr, ptr @img, align 8, !tbaa !5
  %121 = getelementptr inbounds %struct.ImageParameters, ptr %120, i64 0, i32 5
  %122 = load i32, ptr %121, align 4, !tbaa !25
  %123 = icmp eq i32 %122, 2
  %124 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %5, i64 0, i64 %9, i64 10
  %125 = getelementptr inbounds %struct.ImageParameters, ptr %120, i64 0, i32 127
  %126 = load i32, ptr %125, align 8, !tbaa !31
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %127, i64 %9, i64 10
  %129 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %127, i64 %9, i64 10
  %130 = select i1 %123, ptr %128, ptr %129
  tail call void @biari_init_context(ptr noundef nonnull %124, ptr noundef nonnull %130) #14
  %131 = add nuw nsw i64 %9, 1
  %132 = icmp eq i64 %131, 3
  br i1 %132, label %133, label %8, !llvm.loop !34

133:                                              ; preds = %8
  %134 = load ptr, ptr @img, align 8, !tbaa !5
  %135 = getelementptr inbounds %struct.ImageParameters, ptr %134, i64 0, i32 5
  %136 = load i32, ptr %135, align 4, !tbaa !25
  %137 = icmp eq i32 %136, 2
  %138 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 0
  %139 = getelementptr inbounds %struct.ImageParameters, ptr %134, i64 0, i32 127
  %140 = load i32, ptr %139, align 8, !tbaa !31
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %141, i64 0, i64 0
  %143 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %141, i64 0, i64 0
  %144 = select i1 %137, ptr %142, ptr %143
  tail call void @biari_init_context(ptr noundef nonnull %138, ptr noundef nonnull %144) #14
  %145 = load ptr, ptr @img, align 8, !tbaa !5
  %146 = getelementptr inbounds %struct.ImageParameters, ptr %145, i64 0, i32 5
  %147 = load i32, ptr %146, align 4, !tbaa !25
  %148 = icmp eq i32 %147, 2
  %149 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 1
  %150 = getelementptr inbounds %struct.ImageParameters, ptr %145, i64 0, i32 127
  %151 = load i32, ptr %150, align 8, !tbaa !31
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %152, i64 0, i64 1
  %154 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %152, i64 0, i64 1
  %155 = select i1 %148, ptr %153, ptr %154
  tail call void @biari_init_context(ptr noundef nonnull %149, ptr noundef nonnull %155) #14
  %156 = load ptr, ptr @img, align 8, !tbaa !5
  %157 = getelementptr inbounds %struct.ImageParameters, ptr %156, i64 0, i32 5
  %158 = load i32, ptr %157, align 4, !tbaa !25
  %159 = icmp eq i32 %158, 2
  %160 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 2
  %161 = getelementptr inbounds %struct.ImageParameters, ptr %156, i64 0, i32 127
  %162 = load i32, ptr %161, align 8, !tbaa !31
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %163, i64 0, i64 2
  %165 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %163, i64 0, i64 2
  %166 = select i1 %159, ptr %164, ptr %165
  tail call void @biari_init_context(ptr noundef nonnull %160, ptr noundef nonnull %166) #14
  %167 = load ptr, ptr @img, align 8, !tbaa !5
  %168 = getelementptr inbounds %struct.ImageParameters, ptr %167, i64 0, i32 5
  %169 = load i32, ptr %168, align 4, !tbaa !25
  %170 = icmp eq i32 %169, 2
  %171 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 3
  %172 = getelementptr inbounds %struct.ImageParameters, ptr %167, i64 0, i32 127
  %173 = load i32, ptr %172, align 8, !tbaa !31
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %174, i64 0, i64 3
  %176 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %174, i64 0, i64 3
  %177 = select i1 %170, ptr %175, ptr %176
  tail call void @biari_init_context(ptr noundef nonnull %171, ptr noundef nonnull %177) #14
  %178 = load ptr, ptr @img, align 8, !tbaa !5
  %179 = getelementptr inbounds %struct.ImageParameters, ptr %178, i64 0, i32 5
  %180 = load i32, ptr %179, align 4, !tbaa !25
  %181 = icmp eq i32 %180, 2
  %182 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 4
  %183 = getelementptr inbounds %struct.ImageParameters, ptr %178, i64 0, i32 127
  %184 = load i32, ptr %183, align 8, !tbaa !31
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %185, i64 0, i64 4
  %187 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %185, i64 0, i64 4
  %188 = select i1 %181, ptr %186, ptr %187
  tail call void @biari_init_context(ptr noundef nonnull %182, ptr noundef nonnull %188) #14
  %189 = load ptr, ptr @img, align 8, !tbaa !5
  %190 = getelementptr inbounds %struct.ImageParameters, ptr %189, i64 0, i32 5
  %191 = load i32, ptr %190, align 4, !tbaa !25
  %192 = icmp eq i32 %191, 2
  %193 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 5
  %194 = getelementptr inbounds %struct.ImageParameters, ptr %189, i64 0, i32 127
  %195 = load i32, ptr %194, align 8, !tbaa !31
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %196, i64 0, i64 5
  %198 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %196, i64 0, i64 5
  %199 = select i1 %192, ptr %197, ptr %198
  tail call void @biari_init_context(ptr noundef nonnull %193, ptr noundef nonnull %199) #14
  %200 = load ptr, ptr @img, align 8, !tbaa !5
  %201 = getelementptr inbounds %struct.ImageParameters, ptr %200, i64 0, i32 5
  %202 = load i32, ptr %201, align 4, !tbaa !25
  %203 = icmp eq i32 %202, 2
  %204 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 6
  %205 = getelementptr inbounds %struct.ImageParameters, ptr %200, i64 0, i32 127
  %206 = load i32, ptr %205, align 8, !tbaa !31
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %207, i64 0, i64 6
  %209 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %207, i64 0, i64 6
  %210 = select i1 %203, ptr %208, ptr %209
  tail call void @biari_init_context(ptr noundef nonnull %204, ptr noundef nonnull %210) #14
  %211 = load ptr, ptr @img, align 8, !tbaa !5
  %212 = getelementptr inbounds %struct.ImageParameters, ptr %211, i64 0, i32 5
  %213 = load i32, ptr %212, align 4, !tbaa !25
  %214 = icmp eq i32 %213, 2
  %215 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 7
  %216 = getelementptr inbounds %struct.ImageParameters, ptr %211, i64 0, i32 127
  %217 = load i32, ptr %216, align 8, !tbaa !31
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %218, i64 0, i64 7
  %220 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %218, i64 0, i64 7
  %221 = select i1 %214, ptr %219, ptr %220
  tail call void @biari_init_context(ptr noundef nonnull %215, ptr noundef nonnull %221) #14
  %222 = load ptr, ptr @img, align 8, !tbaa !5
  %223 = getelementptr inbounds %struct.ImageParameters, ptr %222, i64 0, i32 5
  %224 = load i32, ptr %223, align 4, !tbaa !25
  %225 = icmp eq i32 %224, 2
  %226 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 0, i64 8
  %227 = getelementptr inbounds %struct.ImageParameters, ptr %222, i64 0, i32 127
  %228 = load i32, ptr %227, align 8, !tbaa !31
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %229, i64 0, i64 8
  %231 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %229, i64 0, i64 8
  %232 = select i1 %225, ptr %230, ptr %231
  tail call void @biari_init_context(ptr noundef nonnull %226, ptr noundef nonnull %232) #14
  %233 = load ptr, ptr @img, align 8, !tbaa !5
  %234 = getelementptr inbounds %struct.ImageParameters, ptr %233, i64 0, i32 5
  %235 = load i32, ptr %234, align 4, !tbaa !25
  %236 = icmp eq i32 %235, 2
  %237 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 0
  %238 = getelementptr inbounds %struct.ImageParameters, ptr %233, i64 0, i32 127
  %239 = load i32, ptr %238, align 8, !tbaa !31
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %240, i64 1, i64 0
  %242 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %240, i64 1, i64 0
  %243 = select i1 %236, ptr %241, ptr %242
  tail call void @biari_init_context(ptr noundef nonnull %237, ptr noundef nonnull %243) #14
  %244 = load ptr, ptr @img, align 8, !tbaa !5
  %245 = getelementptr inbounds %struct.ImageParameters, ptr %244, i64 0, i32 5
  %246 = load i32, ptr %245, align 4, !tbaa !25
  %247 = icmp eq i32 %246, 2
  %248 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 1
  %249 = getelementptr inbounds %struct.ImageParameters, ptr %244, i64 0, i32 127
  %250 = load i32, ptr %249, align 8, !tbaa !31
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %251, i64 1, i64 1
  %253 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %251, i64 1, i64 1
  %254 = select i1 %247, ptr %252, ptr %253
  tail call void @biari_init_context(ptr noundef nonnull %248, ptr noundef nonnull %254) #14
  %255 = load ptr, ptr @img, align 8, !tbaa !5
  %256 = getelementptr inbounds %struct.ImageParameters, ptr %255, i64 0, i32 5
  %257 = load i32, ptr %256, align 4, !tbaa !25
  %258 = icmp eq i32 %257, 2
  %259 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 2
  %260 = getelementptr inbounds %struct.ImageParameters, ptr %255, i64 0, i32 127
  %261 = load i32, ptr %260, align 8, !tbaa !31
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %262, i64 1, i64 2
  %264 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %262, i64 1, i64 2
  %265 = select i1 %258, ptr %263, ptr %264
  tail call void @biari_init_context(ptr noundef nonnull %259, ptr noundef nonnull %265) #14
  %266 = load ptr, ptr @img, align 8, !tbaa !5
  %267 = getelementptr inbounds %struct.ImageParameters, ptr %266, i64 0, i32 5
  %268 = load i32, ptr %267, align 4, !tbaa !25
  %269 = icmp eq i32 %268, 2
  %270 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 3
  %271 = getelementptr inbounds %struct.ImageParameters, ptr %266, i64 0, i32 127
  %272 = load i32, ptr %271, align 8, !tbaa !31
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %273, i64 1, i64 3
  %275 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %273, i64 1, i64 3
  %276 = select i1 %269, ptr %274, ptr %275
  tail call void @biari_init_context(ptr noundef nonnull %270, ptr noundef nonnull %276) #14
  %277 = load ptr, ptr @img, align 8, !tbaa !5
  %278 = getelementptr inbounds %struct.ImageParameters, ptr %277, i64 0, i32 5
  %279 = load i32, ptr %278, align 4, !tbaa !25
  %280 = icmp eq i32 %279, 2
  %281 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 4
  %282 = getelementptr inbounds %struct.ImageParameters, ptr %277, i64 0, i32 127
  %283 = load i32, ptr %282, align 8, !tbaa !31
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %284, i64 1, i64 4
  %286 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %284, i64 1, i64 4
  %287 = select i1 %280, ptr %285, ptr %286
  tail call void @biari_init_context(ptr noundef nonnull %281, ptr noundef nonnull %287) #14
  %288 = load ptr, ptr @img, align 8, !tbaa !5
  %289 = getelementptr inbounds %struct.ImageParameters, ptr %288, i64 0, i32 5
  %290 = load i32, ptr %289, align 4, !tbaa !25
  %291 = icmp eq i32 %290, 2
  %292 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 5
  %293 = getelementptr inbounds %struct.ImageParameters, ptr %288, i64 0, i32 127
  %294 = load i32, ptr %293, align 8, !tbaa !31
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %295, i64 1, i64 5
  %297 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %295, i64 1, i64 5
  %298 = select i1 %291, ptr %296, ptr %297
  tail call void @biari_init_context(ptr noundef nonnull %292, ptr noundef nonnull %298) #14
  %299 = load ptr, ptr @img, align 8, !tbaa !5
  %300 = getelementptr inbounds %struct.ImageParameters, ptr %299, i64 0, i32 5
  %301 = load i32, ptr %300, align 4, !tbaa !25
  %302 = icmp eq i32 %301, 2
  %303 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 6
  %304 = getelementptr inbounds %struct.ImageParameters, ptr %299, i64 0, i32 127
  %305 = load i32, ptr %304, align 8, !tbaa !31
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %306, i64 1, i64 6
  %308 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %306, i64 1, i64 6
  %309 = select i1 %302, ptr %307, ptr %308
  tail call void @biari_init_context(ptr noundef nonnull %303, ptr noundef nonnull %309) #14
  %310 = load ptr, ptr @img, align 8, !tbaa !5
  %311 = getelementptr inbounds %struct.ImageParameters, ptr %310, i64 0, i32 5
  %312 = load i32, ptr %311, align 4, !tbaa !25
  %313 = icmp eq i32 %312, 2
  %314 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 7
  %315 = getelementptr inbounds %struct.ImageParameters, ptr %310, i64 0, i32 127
  %316 = load i32, ptr %315, align 8, !tbaa !31
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %317, i64 1, i64 7
  %319 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %317, i64 1, i64 7
  %320 = select i1 %313, ptr %318, ptr %319
  tail call void @biari_init_context(ptr noundef nonnull %314, ptr noundef nonnull %320) #14
  %321 = load ptr, ptr @img, align 8, !tbaa !5
  %322 = getelementptr inbounds %struct.ImageParameters, ptr %321, i64 0, i32 5
  %323 = load i32, ptr %322, align 4, !tbaa !25
  %324 = icmp eq i32 %323, 2
  %325 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 1, i64 1, i64 8
  %326 = getelementptr inbounds %struct.ImageParameters, ptr %321, i64 0, i32 127
  %327 = load i32, ptr %326, align 8, !tbaa !31
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %328, i64 1, i64 8
  %330 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %328, i64 1, i64 8
  %331 = select i1 %324, ptr %329, ptr %330
  tail call void @biari_init_context(ptr noundef nonnull %325, ptr noundef nonnull %331) #14
  %332 = load ptr, ptr @img, align 8, !tbaa !5
  %333 = getelementptr inbounds %struct.ImageParameters, ptr %332, i64 0, i32 5
  %334 = load i32, ptr %333, align 4, !tbaa !25
  %335 = icmp eq i32 %334, 2
  %336 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 0
  %337 = getelementptr inbounds %struct.ImageParameters, ptr %332, i64 0, i32 127
  %338 = load i32, ptr %337, align 8, !tbaa !31
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %339, i64 0, i64 0
  %341 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %339, i64 0, i64 0
  %342 = select i1 %335, ptr %340, ptr %341
  tail call void @biari_init_context(ptr noundef nonnull %336, ptr noundef nonnull %342) #14
  %343 = load ptr, ptr @img, align 8, !tbaa !5
  %344 = getelementptr inbounds %struct.ImageParameters, ptr %343, i64 0, i32 5
  %345 = load i32, ptr %344, align 4, !tbaa !25
  %346 = icmp eq i32 %345, 2
  %347 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 1
  %348 = getelementptr inbounds %struct.ImageParameters, ptr %343, i64 0, i32 127
  %349 = load i32, ptr %348, align 8, !tbaa !31
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %350, i64 0, i64 1
  %352 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %350, i64 0, i64 1
  %353 = select i1 %346, ptr %351, ptr %352
  tail call void @biari_init_context(ptr noundef nonnull %347, ptr noundef nonnull %353) #14
  %354 = load ptr, ptr @img, align 8, !tbaa !5
  %355 = getelementptr inbounds %struct.ImageParameters, ptr %354, i64 0, i32 5
  %356 = load i32, ptr %355, align 4, !tbaa !25
  %357 = icmp eq i32 %356, 2
  %358 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 2
  %359 = getelementptr inbounds %struct.ImageParameters, ptr %354, i64 0, i32 127
  %360 = load i32, ptr %359, align 8, !tbaa !31
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %361, i64 0, i64 2
  %363 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %361, i64 0, i64 2
  %364 = select i1 %357, ptr %362, ptr %363
  tail call void @biari_init_context(ptr noundef nonnull %358, ptr noundef nonnull %364) #14
  %365 = load ptr, ptr @img, align 8, !tbaa !5
  %366 = getelementptr inbounds %struct.ImageParameters, ptr %365, i64 0, i32 5
  %367 = load i32, ptr %366, align 4, !tbaa !25
  %368 = icmp eq i32 %367, 2
  %369 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 3
  %370 = getelementptr inbounds %struct.ImageParameters, ptr %365, i64 0, i32 127
  %371 = load i32, ptr %370, align 8, !tbaa !31
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %372, i64 0, i64 3
  %374 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %372, i64 0, i64 3
  %375 = select i1 %368, ptr %373, ptr %374
  tail call void @biari_init_context(ptr noundef nonnull %369, ptr noundef nonnull %375) #14
  %376 = load ptr, ptr @img, align 8, !tbaa !5
  %377 = getelementptr inbounds %struct.ImageParameters, ptr %376, i64 0, i32 5
  %378 = load i32, ptr %377, align 4, !tbaa !25
  %379 = icmp eq i32 %378, 2
  %380 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 4
  %381 = getelementptr inbounds %struct.ImageParameters, ptr %376, i64 0, i32 127
  %382 = load i32, ptr %381, align 8, !tbaa !31
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %383, i64 0, i64 4
  %385 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %383, i64 0, i64 4
  %386 = select i1 %379, ptr %384, ptr %385
  tail call void @biari_init_context(ptr noundef nonnull %380, ptr noundef nonnull %386) #14
  %387 = load ptr, ptr @img, align 8, !tbaa !5
  %388 = getelementptr inbounds %struct.ImageParameters, ptr %387, i64 0, i32 5
  %389 = load i32, ptr %388, align 4, !tbaa !25
  %390 = icmp eq i32 %389, 2
  %391 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 5
  %392 = getelementptr inbounds %struct.ImageParameters, ptr %387, i64 0, i32 127
  %393 = load i32, ptr %392, align 8, !tbaa !31
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %394, i64 0, i64 5
  %396 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %394, i64 0, i64 5
  %397 = select i1 %390, ptr %395, ptr %396
  tail call void @biari_init_context(ptr noundef nonnull %391, ptr noundef nonnull %397) #14
  %398 = load ptr, ptr @img, align 8, !tbaa !5
  %399 = getelementptr inbounds %struct.ImageParameters, ptr %398, i64 0, i32 5
  %400 = load i32, ptr %399, align 4, !tbaa !25
  %401 = icmp eq i32 %400, 2
  %402 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 6
  %403 = getelementptr inbounds %struct.ImageParameters, ptr %398, i64 0, i32 127
  %404 = load i32, ptr %403, align 8, !tbaa !31
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %405, i64 0, i64 6
  %407 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %405, i64 0, i64 6
  %408 = select i1 %401, ptr %406, ptr %407
  tail call void @biari_init_context(ptr noundef nonnull %402, ptr noundef nonnull %408) #14
  %409 = load ptr, ptr @img, align 8, !tbaa !5
  %410 = getelementptr inbounds %struct.ImageParameters, ptr %409, i64 0, i32 5
  %411 = load i32, ptr %410, align 4, !tbaa !25
  %412 = icmp eq i32 %411, 2
  %413 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 7
  %414 = getelementptr inbounds %struct.ImageParameters, ptr %409, i64 0, i32 127
  %415 = load i32, ptr %414, align 8, !tbaa !31
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %416, i64 0, i64 7
  %418 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %416, i64 0, i64 7
  %419 = select i1 %412, ptr %417, ptr %418
  tail call void @biari_init_context(ptr noundef nonnull %413, ptr noundef nonnull %419) #14
  %420 = load ptr, ptr @img, align 8, !tbaa !5
  %421 = getelementptr inbounds %struct.ImageParameters, ptr %420, i64 0, i32 5
  %422 = load i32, ptr %421, align 4, !tbaa !25
  %423 = icmp eq i32 %422, 2
  %424 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 8
  %425 = getelementptr inbounds %struct.ImageParameters, ptr %420, i64 0, i32 127
  %426 = load i32, ptr %425, align 8, !tbaa !31
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %427, i64 0, i64 8
  %429 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %427, i64 0, i64 8
  %430 = select i1 %423, ptr %428, ptr %429
  tail call void @biari_init_context(ptr noundef nonnull %424, ptr noundef nonnull %430) #14
  %431 = load ptr, ptr @img, align 8, !tbaa !5
  %432 = getelementptr inbounds %struct.ImageParameters, ptr %431, i64 0, i32 5
  %433 = load i32, ptr %432, align 4, !tbaa !25
  %434 = icmp eq i32 %433, 2
  %435 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 0, i64 9
  %436 = getelementptr inbounds %struct.ImageParameters, ptr %431, i64 0, i32 127
  %437 = load i32, ptr %436, align 8, !tbaa !31
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %438, i64 0, i64 9
  %440 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %438, i64 0, i64 9
  %441 = select i1 %434, ptr %439, ptr %440
  tail call void @biari_init_context(ptr noundef nonnull %435, ptr noundef nonnull %441) #14
  %442 = load ptr, ptr @img, align 8, !tbaa !5
  %443 = getelementptr inbounds %struct.ImageParameters, ptr %442, i64 0, i32 5
  %444 = load i32, ptr %443, align 4, !tbaa !25
  %445 = icmp eq i32 %444, 2
  %446 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 0
  %447 = getelementptr inbounds %struct.ImageParameters, ptr %442, i64 0, i32 127
  %448 = load i32, ptr %447, align 8, !tbaa !31
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %449, i64 1, i64 0
  %451 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %449, i64 1, i64 0
  %452 = select i1 %445, ptr %450, ptr %451
  tail call void @biari_init_context(ptr noundef nonnull %446, ptr noundef nonnull %452) #14
  %453 = load ptr, ptr @img, align 8, !tbaa !5
  %454 = getelementptr inbounds %struct.ImageParameters, ptr %453, i64 0, i32 5
  %455 = load i32, ptr %454, align 4, !tbaa !25
  %456 = icmp eq i32 %455, 2
  %457 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 1
  %458 = getelementptr inbounds %struct.ImageParameters, ptr %453, i64 0, i32 127
  %459 = load i32, ptr %458, align 8, !tbaa !31
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %460, i64 1, i64 1
  %462 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %460, i64 1, i64 1
  %463 = select i1 %456, ptr %461, ptr %462
  tail call void @biari_init_context(ptr noundef nonnull %457, ptr noundef nonnull %463) #14
  %464 = load ptr, ptr @img, align 8, !tbaa !5
  %465 = getelementptr inbounds %struct.ImageParameters, ptr %464, i64 0, i32 5
  %466 = load i32, ptr %465, align 4, !tbaa !25
  %467 = icmp eq i32 %466, 2
  %468 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 2
  %469 = getelementptr inbounds %struct.ImageParameters, ptr %464, i64 0, i32 127
  %470 = load i32, ptr %469, align 8, !tbaa !31
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %471, i64 1, i64 2
  %473 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %471, i64 1, i64 2
  %474 = select i1 %467, ptr %472, ptr %473
  tail call void @biari_init_context(ptr noundef nonnull %468, ptr noundef nonnull %474) #14
  %475 = load ptr, ptr @img, align 8, !tbaa !5
  %476 = getelementptr inbounds %struct.ImageParameters, ptr %475, i64 0, i32 5
  %477 = load i32, ptr %476, align 4, !tbaa !25
  %478 = icmp eq i32 %477, 2
  %479 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 3
  %480 = getelementptr inbounds %struct.ImageParameters, ptr %475, i64 0, i32 127
  %481 = load i32, ptr %480, align 8, !tbaa !31
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %482, i64 1, i64 3
  %484 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %482, i64 1, i64 3
  %485 = select i1 %478, ptr %483, ptr %484
  tail call void @biari_init_context(ptr noundef nonnull %479, ptr noundef nonnull %485) #14
  %486 = load ptr, ptr @img, align 8, !tbaa !5
  %487 = getelementptr inbounds %struct.ImageParameters, ptr %486, i64 0, i32 5
  %488 = load i32, ptr %487, align 4, !tbaa !25
  %489 = icmp eq i32 %488, 2
  %490 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 4
  %491 = getelementptr inbounds %struct.ImageParameters, ptr %486, i64 0, i32 127
  %492 = load i32, ptr %491, align 8, !tbaa !31
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %493, i64 1, i64 4
  %495 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %493, i64 1, i64 4
  %496 = select i1 %489, ptr %494, ptr %495
  tail call void @biari_init_context(ptr noundef nonnull %490, ptr noundef nonnull %496) #14
  %497 = load ptr, ptr @img, align 8, !tbaa !5
  %498 = getelementptr inbounds %struct.ImageParameters, ptr %497, i64 0, i32 5
  %499 = load i32, ptr %498, align 4, !tbaa !25
  %500 = icmp eq i32 %499, 2
  %501 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 5
  %502 = getelementptr inbounds %struct.ImageParameters, ptr %497, i64 0, i32 127
  %503 = load i32, ptr %502, align 8, !tbaa !31
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %504, i64 1, i64 5
  %506 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %504, i64 1, i64 5
  %507 = select i1 %500, ptr %505, ptr %506
  tail call void @biari_init_context(ptr noundef nonnull %501, ptr noundef nonnull %507) #14
  %508 = load ptr, ptr @img, align 8, !tbaa !5
  %509 = getelementptr inbounds %struct.ImageParameters, ptr %508, i64 0, i32 5
  %510 = load i32, ptr %509, align 4, !tbaa !25
  %511 = icmp eq i32 %510, 2
  %512 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 6
  %513 = getelementptr inbounds %struct.ImageParameters, ptr %508, i64 0, i32 127
  %514 = load i32, ptr %513, align 8, !tbaa !31
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %515, i64 1, i64 6
  %517 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %515, i64 1, i64 6
  %518 = select i1 %511, ptr %516, ptr %517
  tail call void @biari_init_context(ptr noundef nonnull %512, ptr noundef nonnull %518) #14
  %519 = load ptr, ptr @img, align 8, !tbaa !5
  %520 = getelementptr inbounds %struct.ImageParameters, ptr %519, i64 0, i32 5
  %521 = load i32, ptr %520, align 4, !tbaa !25
  %522 = icmp eq i32 %521, 2
  %523 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 7
  %524 = getelementptr inbounds %struct.ImageParameters, ptr %519, i64 0, i32 127
  %525 = load i32, ptr %524, align 8, !tbaa !31
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %526, i64 1, i64 7
  %528 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %526, i64 1, i64 7
  %529 = select i1 %522, ptr %527, ptr %528
  tail call void @biari_init_context(ptr noundef nonnull %523, ptr noundef nonnull %529) #14
  %530 = load ptr, ptr @img, align 8, !tbaa !5
  %531 = getelementptr inbounds %struct.ImageParameters, ptr %530, i64 0, i32 5
  %532 = load i32, ptr %531, align 4, !tbaa !25
  %533 = icmp eq i32 %532, 2
  %534 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 8
  %535 = getelementptr inbounds %struct.ImageParameters, ptr %530, i64 0, i32 127
  %536 = load i32, ptr %535, align 8, !tbaa !31
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %537, i64 1, i64 8
  %539 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %537, i64 1, i64 8
  %540 = select i1 %533, ptr %538, ptr %539
  tail call void @biari_init_context(ptr noundef nonnull %534, ptr noundef nonnull %540) #14
  %541 = load ptr, ptr @img, align 8, !tbaa !5
  %542 = getelementptr inbounds %struct.ImageParameters, ptr %541, i64 0, i32 5
  %543 = load i32, ptr %542, align 4, !tbaa !25
  %544 = icmp eq i32 %543, 2
  %545 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 2, i64 1, i64 9
  %546 = getelementptr inbounds %struct.ImageParameters, ptr %541, i64 0, i32 127
  %547 = load i32, ptr %546, align 8, !tbaa !31
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %548, i64 1, i64 9
  %550 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %548, i64 1, i64 9
  %551 = select i1 %544, ptr %549, ptr %550
  tail call void @biari_init_context(ptr noundef nonnull %545, ptr noundef nonnull %551) #14
  %552 = load ptr, ptr @img, align 8, !tbaa !5
  %553 = getelementptr inbounds %struct.ImageParameters, ptr %552, i64 0, i32 5
  %554 = load i32, ptr %553, align 4, !tbaa !25
  %555 = icmp eq i32 %554, 2
  %556 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 0, i64 0
  %557 = getelementptr inbounds %struct.ImageParameters, ptr %552, i64 0, i32 127
  %558 = load i32, ptr %557, align 8, !tbaa !31
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %559, i64 0, i64 0
  %561 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %559, i64 0, i64 0
  %562 = select i1 %555, ptr %560, ptr %561
  tail call void @biari_init_context(ptr noundef nonnull %556, ptr noundef nonnull %562) #14
  %563 = load ptr, ptr @img, align 8, !tbaa !5
  %564 = getelementptr inbounds %struct.ImageParameters, ptr %563, i64 0, i32 5
  %565 = load i32, ptr %564, align 4, !tbaa !25
  %566 = icmp eq i32 %565, 2
  %567 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 0, i64 1
  %568 = getelementptr inbounds %struct.ImageParameters, ptr %563, i64 0, i32 127
  %569 = load i32, ptr %568, align 8, !tbaa !31
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %570, i64 0, i64 1
  %572 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %570, i64 0, i64 1
  %573 = select i1 %566, ptr %571, ptr %572
  tail call void @biari_init_context(ptr noundef nonnull %567, ptr noundef nonnull %573) #14
  %574 = load ptr, ptr @img, align 8, !tbaa !5
  %575 = getelementptr inbounds %struct.ImageParameters, ptr %574, i64 0, i32 5
  %576 = load i32, ptr %575, align 4, !tbaa !25
  %577 = icmp eq i32 %576, 2
  %578 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 0, i64 2
  %579 = getelementptr inbounds %struct.ImageParameters, ptr %574, i64 0, i32 127
  %580 = load i32, ptr %579, align 8, !tbaa !31
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %581, i64 0, i64 2
  %583 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %581, i64 0, i64 2
  %584 = select i1 %577, ptr %582, ptr %583
  tail call void @biari_init_context(ptr noundef nonnull %578, ptr noundef nonnull %584) #14
  %585 = load ptr, ptr @img, align 8, !tbaa !5
  %586 = getelementptr inbounds %struct.ImageParameters, ptr %585, i64 0, i32 5
  %587 = load i32, ptr %586, align 4, !tbaa !25
  %588 = icmp eq i32 %587, 2
  %589 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 0, i64 3
  %590 = getelementptr inbounds %struct.ImageParameters, ptr %585, i64 0, i32 127
  %591 = load i32, ptr %590, align 8, !tbaa !31
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %592, i64 0, i64 3
  %594 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %592, i64 0, i64 3
  %595 = select i1 %588, ptr %593, ptr %594
  tail call void @biari_init_context(ptr noundef nonnull %589, ptr noundef nonnull %595) #14
  %596 = load ptr, ptr @img, align 8, !tbaa !5
  %597 = getelementptr inbounds %struct.ImageParameters, ptr %596, i64 0, i32 5
  %598 = load i32, ptr %597, align 4, !tbaa !25
  %599 = icmp eq i32 %598, 2
  %600 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 0, i64 4
  %601 = getelementptr inbounds %struct.ImageParameters, ptr %596, i64 0, i32 127
  %602 = load i32, ptr %601, align 8, !tbaa !31
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %603, i64 0, i64 4
  %605 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %603, i64 0, i64 4
  %606 = select i1 %599, ptr %604, ptr %605
  tail call void @biari_init_context(ptr noundef nonnull %600, ptr noundef nonnull %606) #14
  %607 = load ptr, ptr @img, align 8, !tbaa !5
  %608 = getelementptr inbounds %struct.ImageParameters, ptr %607, i64 0, i32 5
  %609 = load i32, ptr %608, align 4, !tbaa !25
  %610 = icmp eq i32 %609, 2
  %611 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 0, i64 5
  %612 = getelementptr inbounds %struct.ImageParameters, ptr %607, i64 0, i32 127
  %613 = load i32, ptr %612, align 8, !tbaa !31
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %614, i64 0, i64 5
  %616 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %614, i64 0, i64 5
  %617 = select i1 %610, ptr %615, ptr %616
  tail call void @biari_init_context(ptr noundef nonnull %611, ptr noundef nonnull %617) #14
  %618 = load ptr, ptr @img, align 8, !tbaa !5
  %619 = getelementptr inbounds %struct.ImageParameters, ptr %618, i64 0, i32 5
  %620 = load i32, ptr %619, align 4, !tbaa !25
  %621 = icmp eq i32 %620, 2
  %622 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 1, i64 0
  %623 = getelementptr inbounds %struct.ImageParameters, ptr %618, i64 0, i32 127
  %624 = load i32, ptr %623, align 8, !tbaa !31
  %625 = sext i32 %624 to i64
  %626 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %625, i64 1, i64 0
  %627 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %625, i64 1, i64 0
  %628 = select i1 %621, ptr %626, ptr %627
  tail call void @biari_init_context(ptr noundef nonnull %622, ptr noundef nonnull %628) #14
  %629 = load ptr, ptr @img, align 8, !tbaa !5
  %630 = getelementptr inbounds %struct.ImageParameters, ptr %629, i64 0, i32 5
  %631 = load i32, ptr %630, align 4, !tbaa !25
  %632 = icmp eq i32 %631, 2
  %633 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 1, i64 1
  %634 = getelementptr inbounds %struct.ImageParameters, ptr %629, i64 0, i32 127
  %635 = load i32, ptr %634, align 8, !tbaa !31
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %636, i64 1, i64 1
  %638 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %636, i64 1, i64 1
  %639 = select i1 %632, ptr %637, ptr %638
  tail call void @biari_init_context(ptr noundef nonnull %633, ptr noundef nonnull %639) #14
  %640 = load ptr, ptr @img, align 8, !tbaa !5
  %641 = getelementptr inbounds %struct.ImageParameters, ptr %640, i64 0, i32 5
  %642 = load i32, ptr %641, align 4, !tbaa !25
  %643 = icmp eq i32 %642, 2
  %644 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 1, i64 2
  %645 = getelementptr inbounds %struct.ImageParameters, ptr %640, i64 0, i32 127
  %646 = load i32, ptr %645, align 8, !tbaa !31
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %647, i64 1, i64 2
  %649 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %647, i64 1, i64 2
  %650 = select i1 %643, ptr %648, ptr %649
  tail call void @biari_init_context(ptr noundef nonnull %644, ptr noundef nonnull %650) #14
  %651 = load ptr, ptr @img, align 8, !tbaa !5
  %652 = getelementptr inbounds %struct.ImageParameters, ptr %651, i64 0, i32 5
  %653 = load i32, ptr %652, align 4, !tbaa !25
  %654 = icmp eq i32 %653, 2
  %655 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 1, i64 3
  %656 = getelementptr inbounds %struct.ImageParameters, ptr %651, i64 0, i32 127
  %657 = load i32, ptr %656, align 8, !tbaa !31
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %658, i64 1, i64 3
  %660 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %658, i64 1, i64 3
  %661 = select i1 %654, ptr %659, ptr %660
  tail call void @biari_init_context(ptr noundef nonnull %655, ptr noundef nonnull %661) #14
  %662 = load ptr, ptr @img, align 8, !tbaa !5
  %663 = getelementptr inbounds %struct.ImageParameters, ptr %662, i64 0, i32 5
  %664 = load i32, ptr %663, align 4, !tbaa !25
  %665 = icmp eq i32 %664, 2
  %666 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 1, i64 4
  %667 = getelementptr inbounds %struct.ImageParameters, ptr %662, i64 0, i32 127
  %668 = load i32, ptr %667, align 8, !tbaa !31
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %669, i64 1, i64 4
  %671 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %669, i64 1, i64 4
  %672 = select i1 %665, ptr %670, ptr %671
  tail call void @biari_init_context(ptr noundef nonnull %666, ptr noundef nonnull %672) #14
  %673 = load ptr, ptr @img, align 8, !tbaa !5
  %674 = getelementptr inbounds %struct.ImageParameters, ptr %673, i64 0, i32 5
  %675 = load i32, ptr %674, align 4, !tbaa !25
  %676 = icmp eq i32 %675, 2
  %677 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 3, i64 1, i64 5
  %678 = getelementptr inbounds %struct.ImageParameters, ptr %673, i64 0, i32 127
  %679 = load i32, ptr %678, align 8, !tbaa !31
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %680, i64 1, i64 5
  %682 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %680, i64 1, i64 5
  %683 = select i1 %676, ptr %681, ptr %682
  tail call void @biari_init_context(ptr noundef nonnull %677, ptr noundef nonnull %683) #14
  %684 = load ptr, ptr @img, align 8, !tbaa !5
  %685 = getelementptr inbounds %struct.ImageParameters, ptr %684, i64 0, i32 5
  %686 = load i32, ptr %685, align 4, !tbaa !25
  %687 = icmp eq i32 %686, 2
  %688 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 4, i64 0
  %689 = getelementptr inbounds %struct.ImageParameters, ptr %684, i64 0, i32 127
  %690 = load i32, ptr %689, align 8, !tbaa !31
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %691
  %693 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %691
  %694 = select i1 %687, ptr %692, ptr %693
  tail call void @biari_init_context(ptr noundef nonnull %688, ptr noundef nonnull %694) #14
  %695 = load ptr, ptr @img, align 8, !tbaa !5
  %696 = getelementptr inbounds %struct.ImageParameters, ptr %695, i64 0, i32 5
  %697 = load i32, ptr %696, align 4, !tbaa !25
  %698 = icmp eq i32 %697, 2
  %699 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 4, i64 1
  %700 = getelementptr inbounds %struct.ImageParameters, ptr %695, i64 0, i32 127
  %701 = load i32, ptr %700, align 8, !tbaa !31
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %702, i64 0, i64 1
  %704 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %702, i64 0, i64 1
  %705 = select i1 %698, ptr %703, ptr %704
  tail call void @biari_init_context(ptr noundef nonnull %699, ptr noundef nonnull %705) #14
  %706 = load ptr, ptr @img, align 8, !tbaa !5
  %707 = getelementptr inbounds %struct.ImageParameters, ptr %706, i64 0, i32 5
  %708 = load i32, ptr %707, align 4, !tbaa !25
  %709 = icmp eq i32 %708, 2
  %710 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 4, i64 2
  %711 = getelementptr inbounds %struct.ImageParameters, ptr %706, i64 0, i32 127
  %712 = load i32, ptr %711, align 8, !tbaa !31
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %713, i64 0, i64 2
  %715 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %713, i64 0, i64 2
  %716 = select i1 %709, ptr %714, ptr %715
  tail call void @biari_init_context(ptr noundef nonnull %710, ptr noundef nonnull %716) #14
  %717 = load ptr, ptr @img, align 8, !tbaa !5
  %718 = getelementptr inbounds %struct.ImageParameters, ptr %717, i64 0, i32 5
  %719 = load i32, ptr %718, align 4, !tbaa !25
  %720 = icmp eq i32 %719, 2
  %721 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 4, i64 3
  %722 = getelementptr inbounds %struct.ImageParameters, ptr %717, i64 0, i32 127
  %723 = load i32, ptr %722, align 8, !tbaa !31
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %724, i64 0, i64 3
  %726 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %724, i64 0, i64 3
  %727 = select i1 %720, ptr %725, ptr %726
  tail call void @biari_init_context(ptr noundef nonnull %721, ptr noundef nonnull %727) #14
  %728 = load ptr, ptr @img, align 8, !tbaa !5
  %729 = getelementptr inbounds %struct.ImageParameters, ptr %728, i64 0, i32 5
  %730 = load i32, ptr %729, align 4, !tbaa !25
  %731 = icmp eq i32 %730, 2
  %732 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 5, i64 0
  %733 = getelementptr inbounds %struct.ImageParameters, ptr %728, i64 0, i32 127
  %734 = load i32, ptr %733, align 8, !tbaa !31
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %735
  %737 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %735
  %738 = select i1 %731, ptr %736, ptr %737
  tail call void @biari_init_context(ptr noundef nonnull %732, ptr noundef nonnull %738) #14
  %739 = load ptr, ptr @img, align 8, !tbaa !5
  %740 = getelementptr inbounds %struct.ImageParameters, ptr %739, i64 0, i32 5
  %741 = load i32, ptr %740, align 4, !tbaa !25
  %742 = icmp eq i32 %741, 2
  %743 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 5, i64 1
  %744 = getelementptr inbounds %struct.ImageParameters, ptr %739, i64 0, i32 127
  %745 = load i32, ptr %744, align 8, !tbaa !31
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %746, i64 0, i64 1
  %748 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %746, i64 0, i64 1
  %749 = select i1 %742, ptr %747, ptr %748
  tail call void @biari_init_context(ptr noundef nonnull %743, ptr noundef nonnull %749) #14
  %750 = load ptr, ptr @img, align 8, !tbaa !5
  %751 = getelementptr inbounds %struct.ImageParameters, ptr %750, i64 0, i32 5
  %752 = load i32, ptr %751, align 4, !tbaa !25
  %753 = icmp eq i32 %752, 2
  %754 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 5, i64 2
  %755 = getelementptr inbounds %struct.ImageParameters, ptr %750, i64 0, i32 127
  %756 = load i32, ptr %755, align 8, !tbaa !31
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %757, i64 0, i64 2
  %759 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %757, i64 0, i64 2
  %760 = select i1 %753, ptr %758, ptr %759
  tail call void @biari_init_context(ptr noundef nonnull %754, ptr noundef nonnull %760) #14
  %761 = load ptr, ptr @img, align 8, !tbaa !5
  %762 = getelementptr inbounds %struct.ImageParameters, ptr %761, i64 0, i32 5
  %763 = load i32, ptr %762, align 4, !tbaa !25
  %764 = icmp eq i32 %763, 2
  %765 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 5, i64 3
  %766 = getelementptr inbounds %struct.ImageParameters, ptr %761, i64 0, i32 127
  %767 = load i32, ptr %766, align 8, !tbaa !31
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %768, i64 0, i64 3
  %770 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %768, i64 0, i64 3
  %771 = select i1 %764, ptr %769, ptr %770
  tail call void @biari_init_context(ptr noundef nonnull %765, ptr noundef nonnull %771) #14
  %772 = load ptr, ptr @img, align 8, !tbaa !5
  %773 = getelementptr inbounds %struct.ImageParameters, ptr %772, i64 0, i32 5
  %774 = load i32, ptr %773, align 4, !tbaa !25
  %775 = icmp eq i32 %774, 2
  %776 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 6, i64 0
  %777 = getelementptr inbounds %struct.ImageParameters, ptr %772, i64 0, i32 127
  %778 = load i32, ptr %777, align 8, !tbaa !31
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %779
  %781 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %779
  %782 = select i1 %775, ptr %780, ptr %781
  tail call void @biari_init_context(ptr noundef nonnull %776, ptr noundef nonnull %782) #14
  %783 = load ptr, ptr @img, align 8, !tbaa !5
  %784 = getelementptr inbounds %struct.ImageParameters, ptr %783, i64 0, i32 5
  %785 = load i32, ptr %784, align 4, !tbaa !25
  %786 = icmp eq i32 %785, 2
  %787 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 6, i64 1
  %788 = getelementptr inbounds %struct.ImageParameters, ptr %783, i64 0, i32 127
  %789 = load i32, ptr %788, align 8, !tbaa !31
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %790, i64 0, i64 1
  %792 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %790, i64 0, i64 1
  %793 = select i1 %786, ptr %791, ptr %792
  tail call void @biari_init_context(ptr noundef nonnull %787, ptr noundef nonnull %793) #14
  %794 = load ptr, ptr @img, align 8, !tbaa !5
  %795 = getelementptr inbounds %struct.ImageParameters, ptr %794, i64 0, i32 5
  %796 = load i32, ptr %795, align 4, !tbaa !25
  %797 = icmp eq i32 %796, 2
  %798 = getelementptr inbounds %struct.MotionInfoContexts, ptr %5, i64 0, i32 6, i64 2
  %799 = getelementptr inbounds %struct.ImageParameters, ptr %794, i64 0, i32 127
  %800 = load i32, ptr %799, align 8, !tbaa !31
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %801, i64 0, i64 2
  %803 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %801, i64 0, i64 2
  %804 = select i1 %797, ptr %802, ptr %803
  tail call void @biari_init_context(ptr noundef nonnull %798, ptr noundef nonnull %804) #14
  %805 = load ptr, ptr @img, align 8, !tbaa !5
  %806 = getelementptr inbounds %struct.ImageParameters, ptr %805, i64 0, i32 5
  %807 = load i32, ptr %806, align 4, !tbaa !25
  %808 = icmp eq i32 %807, 2
  %809 = getelementptr inbounds %struct.ImageParameters, ptr %805, i64 0, i32 127
  %810 = load i32, ptr %809, align 8, !tbaa !31
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_I, i64 0, i64 %811
  %813 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_P, i64 0, i64 %811
  %814 = select i1 %808, ptr %812, ptr %813
  tail call void @biari_init_context(ptr noundef %7, ptr noundef nonnull %814) #14
  %815 = load ptr, ptr @img, align 8, !tbaa !5
  %816 = getelementptr inbounds %struct.ImageParameters, ptr %815, i64 0, i32 5
  %817 = load i32, ptr %816, align 4, !tbaa !25
  %818 = icmp eq i32 %817, 2
  %819 = getelementptr inbounds [2 x %struct.BiContextType], ptr %7, i64 0, i64 1
  %820 = getelementptr inbounds %struct.ImageParameters, ptr %815, i64 0, i32 127
  %821 = load i32, ptr %820, align 8, !tbaa !31
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_I, i64 0, i64 %822, i64 0, i64 1
  %824 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_P, i64 0, i64 %822, i64 0, i64 1
  %825 = select i1 %818, ptr %823, ptr %824
  tail call void @biari_init_context(ptr noundef nonnull %819, ptr noundef nonnull %825) #14
  %826 = load ptr, ptr @img, align 8, !tbaa !5
  %827 = getelementptr inbounds %struct.ImageParameters, ptr %826, i64 0, i32 5
  %828 = load i32, ptr %827, align 4, !tbaa !25
  %829 = icmp eq i32 %828, 2
  %830 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 1, i64 0
  %831 = getelementptr inbounds %struct.ImageParameters, ptr %826, i64 0, i32 127
  %832 = load i32, ptr %831, align 8, !tbaa !31
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %833
  %835 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %833
  %836 = select i1 %829, ptr %834, ptr %835
  tail call void @biari_init_context(ptr noundef nonnull %830, ptr noundef nonnull %836) #14
  %837 = load ptr, ptr @img, align 8, !tbaa !5
  %838 = getelementptr inbounds %struct.ImageParameters, ptr %837, i64 0, i32 5
  %839 = load i32, ptr %838, align 4, !tbaa !25
  %840 = icmp eq i32 %839, 2
  %841 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 1, i64 1
  %842 = getelementptr inbounds %struct.ImageParameters, ptr %837, i64 0, i32 127
  %843 = load i32, ptr %842, align 8, !tbaa !31
  %844 = sext i32 %843 to i64
  %845 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %844, i64 0, i64 1
  %846 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %844, i64 0, i64 1
  %847 = select i1 %840, ptr %845, ptr %846
  tail call void @biari_init_context(ptr noundef nonnull %841, ptr noundef nonnull %847) #14
  %848 = load ptr, ptr @img, align 8, !tbaa !5
  %849 = getelementptr inbounds %struct.ImageParameters, ptr %848, i64 0, i32 5
  %850 = load i32, ptr %849, align 4, !tbaa !25
  %851 = icmp eq i32 %850, 2
  %852 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 1, i64 2
  %853 = getelementptr inbounds %struct.ImageParameters, ptr %848, i64 0, i32 127
  %854 = load i32, ptr %853, align 8, !tbaa !31
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %855, i64 0, i64 2
  %857 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %855, i64 0, i64 2
  %858 = select i1 %851, ptr %856, ptr %857
  tail call void @biari_init_context(ptr noundef nonnull %852, ptr noundef nonnull %858) #14
  %859 = load ptr, ptr @img, align 8, !tbaa !5
  %860 = getelementptr inbounds %struct.ImageParameters, ptr %859, i64 0, i32 5
  %861 = load i32, ptr %860, align 4, !tbaa !25
  %862 = icmp eq i32 %861, 2
  %863 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 1, i64 3
  %864 = getelementptr inbounds %struct.ImageParameters, ptr %859, i64 0, i32 127
  %865 = load i32, ptr %864, align 8, !tbaa !31
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %866, i64 0, i64 3
  %868 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %866, i64 0, i64 3
  %869 = select i1 %862, ptr %867, ptr %868
  tail call void @biari_init_context(ptr noundef nonnull %863, ptr noundef nonnull %869) #14
  %870 = load ptr, ptr @img, align 8, !tbaa !5
  %871 = getelementptr inbounds %struct.ImageParameters, ptr %870, i64 0, i32 5
  %872 = load i32, ptr %871, align 4, !tbaa !25
  %873 = icmp eq i32 %872, 2
  %874 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 0, i64 0
  %875 = getelementptr inbounds %struct.ImageParameters, ptr %870, i64 0, i32 127
  %876 = load i32, ptr %875, align 8, !tbaa !31
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %877, i64 0, i64 0
  %879 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %877, i64 0, i64 0
  %880 = select i1 %873, ptr %878, ptr %879
  tail call void @biari_init_context(ptr noundef nonnull %874, ptr noundef nonnull %880) #14
  %881 = load ptr, ptr @img, align 8, !tbaa !5
  %882 = getelementptr inbounds %struct.ImageParameters, ptr %881, i64 0, i32 5
  %883 = load i32, ptr %882, align 4, !tbaa !25
  %884 = icmp eq i32 %883, 2
  %885 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 0, i64 1
  %886 = getelementptr inbounds %struct.ImageParameters, ptr %881, i64 0, i32 127
  %887 = load i32, ptr %886, align 8, !tbaa !31
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %888, i64 0, i64 1
  %890 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %888, i64 0, i64 1
  %891 = select i1 %884, ptr %889, ptr %890
  tail call void @biari_init_context(ptr noundef nonnull %885, ptr noundef nonnull %891) #14
  %892 = load ptr, ptr @img, align 8, !tbaa !5
  %893 = getelementptr inbounds %struct.ImageParameters, ptr %892, i64 0, i32 5
  %894 = load i32, ptr %893, align 4, !tbaa !25
  %895 = icmp eq i32 %894, 2
  %896 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 0, i64 2
  %897 = getelementptr inbounds %struct.ImageParameters, ptr %892, i64 0, i32 127
  %898 = load i32, ptr %897, align 8, !tbaa !31
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %899, i64 0, i64 2
  %901 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %899, i64 0, i64 2
  %902 = select i1 %895, ptr %900, ptr %901
  tail call void @biari_init_context(ptr noundef nonnull %896, ptr noundef nonnull %902) #14
  %903 = load ptr, ptr @img, align 8, !tbaa !5
  %904 = getelementptr inbounds %struct.ImageParameters, ptr %903, i64 0, i32 5
  %905 = load i32, ptr %904, align 4, !tbaa !25
  %906 = icmp eq i32 %905, 2
  %907 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 0, i64 3
  %908 = getelementptr inbounds %struct.ImageParameters, ptr %903, i64 0, i32 127
  %909 = load i32, ptr %908, align 8, !tbaa !31
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %910, i64 0, i64 3
  %912 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %910, i64 0, i64 3
  %913 = select i1 %906, ptr %911, ptr %912
  tail call void @biari_init_context(ptr noundef nonnull %907, ptr noundef nonnull %913) #14
  %914 = load ptr, ptr @img, align 8, !tbaa !5
  %915 = getelementptr inbounds %struct.ImageParameters, ptr %914, i64 0, i32 5
  %916 = load i32, ptr %915, align 4, !tbaa !25
  %917 = icmp eq i32 %916, 2
  %918 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 1, i64 0
  %919 = getelementptr inbounds %struct.ImageParameters, ptr %914, i64 0, i32 127
  %920 = load i32, ptr %919, align 8, !tbaa !31
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %921, i64 1, i64 0
  %923 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %921, i64 1, i64 0
  %924 = select i1 %917, ptr %922, ptr %923
  tail call void @biari_init_context(ptr noundef nonnull %918, ptr noundef nonnull %924) #14
  %925 = load ptr, ptr @img, align 8, !tbaa !5
  %926 = getelementptr inbounds %struct.ImageParameters, ptr %925, i64 0, i32 5
  %927 = load i32, ptr %926, align 4, !tbaa !25
  %928 = icmp eq i32 %927, 2
  %929 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 1, i64 1
  %930 = getelementptr inbounds %struct.ImageParameters, ptr %925, i64 0, i32 127
  %931 = load i32, ptr %930, align 8, !tbaa !31
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %932, i64 1, i64 1
  %934 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %932, i64 1, i64 1
  %935 = select i1 %928, ptr %933, ptr %934
  tail call void @biari_init_context(ptr noundef nonnull %929, ptr noundef nonnull %935) #14
  %936 = load ptr, ptr @img, align 8, !tbaa !5
  %937 = getelementptr inbounds %struct.ImageParameters, ptr %936, i64 0, i32 5
  %938 = load i32, ptr %937, align 4, !tbaa !25
  %939 = icmp eq i32 %938, 2
  %940 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 1, i64 2
  %941 = getelementptr inbounds %struct.ImageParameters, ptr %936, i64 0, i32 127
  %942 = load i32, ptr %941, align 8, !tbaa !31
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %943, i64 1, i64 2
  %945 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %943, i64 1, i64 2
  %946 = select i1 %939, ptr %944, ptr %945
  tail call void @biari_init_context(ptr noundef nonnull %940, ptr noundef nonnull %946) #14
  %947 = load ptr, ptr @img, align 8, !tbaa !5
  %948 = getelementptr inbounds %struct.ImageParameters, ptr %947, i64 0, i32 5
  %949 = load i32, ptr %948, align 4, !tbaa !25
  %950 = icmp eq i32 %949, 2
  %951 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 1, i64 3
  %952 = getelementptr inbounds %struct.ImageParameters, ptr %947, i64 0, i32 127
  %953 = load i32, ptr %952, align 8, !tbaa !31
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %954, i64 1, i64 3
  %956 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %954, i64 1, i64 3
  %957 = select i1 %950, ptr %955, ptr %956
  tail call void @biari_init_context(ptr noundef nonnull %951, ptr noundef nonnull %957) #14
  %958 = load ptr, ptr @img, align 8, !tbaa !5
  %959 = getelementptr inbounds %struct.ImageParameters, ptr %958, i64 0, i32 5
  %960 = load i32, ptr %959, align 4, !tbaa !25
  %961 = icmp eq i32 %960, 2
  %962 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 2, i64 0
  %963 = getelementptr inbounds %struct.ImageParameters, ptr %958, i64 0, i32 127
  %964 = load i32, ptr %963, align 8, !tbaa !31
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %965, i64 2, i64 0
  %967 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %965, i64 2, i64 0
  %968 = select i1 %961, ptr %966, ptr %967
  tail call void @biari_init_context(ptr noundef nonnull %962, ptr noundef nonnull %968) #14
  %969 = load ptr, ptr @img, align 8, !tbaa !5
  %970 = getelementptr inbounds %struct.ImageParameters, ptr %969, i64 0, i32 5
  %971 = load i32, ptr %970, align 4, !tbaa !25
  %972 = icmp eq i32 %971, 2
  %973 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 2, i64 1
  %974 = getelementptr inbounds %struct.ImageParameters, ptr %969, i64 0, i32 127
  %975 = load i32, ptr %974, align 8, !tbaa !31
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %976, i64 2, i64 1
  %978 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %976, i64 2, i64 1
  %979 = select i1 %972, ptr %977, ptr %978
  tail call void @biari_init_context(ptr noundef nonnull %973, ptr noundef nonnull %979) #14
  %980 = load ptr, ptr @img, align 8, !tbaa !5
  %981 = getelementptr inbounds %struct.ImageParameters, ptr %980, i64 0, i32 5
  %982 = load i32, ptr %981, align 4, !tbaa !25
  %983 = icmp eq i32 %982, 2
  %984 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 2, i64 2
  %985 = getelementptr inbounds %struct.ImageParameters, ptr %980, i64 0, i32 127
  %986 = load i32, ptr %985, align 8, !tbaa !31
  %987 = sext i32 %986 to i64
  %988 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %987, i64 2, i64 2
  %989 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %987, i64 2, i64 2
  %990 = select i1 %983, ptr %988, ptr %989
  tail call void @biari_init_context(ptr noundef nonnull %984, ptr noundef nonnull %990) #14
  %991 = load ptr, ptr @img, align 8, !tbaa !5
  %992 = getelementptr inbounds %struct.ImageParameters, ptr %991, i64 0, i32 5
  %993 = load i32, ptr %992, align 4, !tbaa !25
  %994 = icmp eq i32 %993, 2
  %995 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 2, i64 2, i64 3
  %996 = getelementptr inbounds %struct.ImageParameters, ptr %991, i64 0, i32 127
  %997 = load i32, ptr %996, align 8, !tbaa !31
  %998 = sext i32 %997 to i64
  %999 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %998, i64 2, i64 3
  %1000 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %998, i64 2, i64 3
  %1001 = select i1 %994, ptr %999, ptr %1000
  tail call void @biari_init_context(ptr noundef nonnull %995, ptr noundef nonnull %1001) #14
  br label %1002

1002:                                             ; preds = %133, %1002
  %1003 = phi i64 [ 0, %133 ], [ %1048, %1002 ]
  %1004 = load ptr, ptr @img, align 8, !tbaa !5
  %1005 = getelementptr inbounds %struct.ImageParameters, ptr %1004, i64 0, i32 5
  %1006 = load i32, ptr %1005, align 4, !tbaa !25
  %1007 = icmp eq i32 %1006, 2
  %1008 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 3, i64 %1003, i64 0
  %1009 = getelementptr inbounds %struct.ImageParameters, ptr %1004, i64 0, i32 127
  %1010 = load i32, ptr %1009, align 8, !tbaa !31
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1011, i64 %1003, i64 0
  %1013 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1011, i64 %1003, i64 0
  %1014 = select i1 %1007, ptr %1012, ptr %1013
  tail call void @biari_init_context(ptr noundef nonnull %1008, ptr noundef nonnull %1014) #14
  %1015 = load ptr, ptr @img, align 8, !tbaa !5
  %1016 = getelementptr inbounds %struct.ImageParameters, ptr %1015, i64 0, i32 5
  %1017 = load i32, ptr %1016, align 4, !tbaa !25
  %1018 = icmp eq i32 %1017, 2
  %1019 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 3, i64 %1003, i64 1
  %1020 = getelementptr inbounds %struct.ImageParameters, ptr %1015, i64 0, i32 127
  %1021 = load i32, ptr %1020, align 8, !tbaa !31
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1022, i64 %1003, i64 1
  %1024 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1022, i64 %1003, i64 1
  %1025 = select i1 %1018, ptr %1023, ptr %1024
  tail call void @biari_init_context(ptr noundef nonnull %1019, ptr noundef nonnull %1025) #14
  %1026 = load ptr, ptr @img, align 8, !tbaa !5
  %1027 = getelementptr inbounds %struct.ImageParameters, ptr %1026, i64 0, i32 5
  %1028 = load i32, ptr %1027, align 4, !tbaa !25
  %1029 = icmp eq i32 %1028, 2
  %1030 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 3, i64 %1003, i64 2
  %1031 = getelementptr inbounds %struct.ImageParameters, ptr %1026, i64 0, i32 127
  %1032 = load i32, ptr %1031, align 8, !tbaa !31
  %1033 = sext i32 %1032 to i64
  %1034 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1033, i64 %1003, i64 2
  %1035 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1033, i64 %1003, i64 2
  %1036 = select i1 %1029, ptr %1034, ptr %1035
  tail call void @biari_init_context(ptr noundef nonnull %1030, ptr noundef nonnull %1036) #14
  %1037 = load ptr, ptr @img, align 8, !tbaa !5
  %1038 = getelementptr inbounds %struct.ImageParameters, ptr %1037, i64 0, i32 5
  %1039 = load i32, ptr %1038, align 4, !tbaa !25
  %1040 = icmp eq i32 %1039, 2
  %1041 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 3, i64 %1003, i64 3
  %1042 = getelementptr inbounds %struct.ImageParameters, ptr %1037, i64 0, i32 127
  %1043 = load i32, ptr %1042, align 8, !tbaa !31
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1044, i64 %1003, i64 3
  %1046 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1044, i64 %1003, i64 3
  %1047 = select i1 %1040, ptr %1045, ptr %1046
  tail call void @biari_init_context(ptr noundef nonnull %1041, ptr noundef nonnull %1047) #14
  %1048 = add nuw nsw i64 %1003, 1
  %1049 = icmp eq i64 %1048, 8
  br i1 %1049, label %1050, label %1002, !llvm.loop !35

1050:                                             ; preds = %1002, %1050
  %1051 = phi i64 [ %1217, %1050 ], [ 0, %1002 ]
  %1052 = load ptr, ptr @img, align 8, !tbaa !5
  %1053 = getelementptr inbounds %struct.ImageParameters, ptr %1052, i64 0, i32 5
  %1054 = load i32, ptr %1053, align 4, !tbaa !25
  %1055 = icmp eq i32 %1054, 2
  %1056 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 0
  %1057 = getelementptr inbounds %struct.ImageParameters, ptr %1052, i64 0, i32 127
  %1058 = load i32, ptr %1057, align 8, !tbaa !31
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1059, i64 %1051, i64 0
  %1061 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1059, i64 %1051, i64 0
  %1062 = select i1 %1055, ptr %1060, ptr %1061
  tail call void @biari_init_context(ptr noundef nonnull %1056, ptr noundef nonnull %1062) #14
  %1063 = load ptr, ptr @img, align 8, !tbaa !5
  %1064 = getelementptr inbounds %struct.ImageParameters, ptr %1063, i64 0, i32 5
  %1065 = load i32, ptr %1064, align 4, !tbaa !25
  %1066 = icmp eq i32 %1065, 2
  %1067 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 1
  %1068 = getelementptr inbounds %struct.ImageParameters, ptr %1063, i64 0, i32 127
  %1069 = load i32, ptr %1068, align 8, !tbaa !31
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1070, i64 %1051, i64 1
  %1072 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1070, i64 %1051, i64 1
  %1073 = select i1 %1066, ptr %1071, ptr %1072
  tail call void @biari_init_context(ptr noundef nonnull %1067, ptr noundef nonnull %1073) #14
  %1074 = load ptr, ptr @img, align 8, !tbaa !5
  %1075 = getelementptr inbounds %struct.ImageParameters, ptr %1074, i64 0, i32 5
  %1076 = load i32, ptr %1075, align 4, !tbaa !25
  %1077 = icmp eq i32 %1076, 2
  %1078 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 2
  %1079 = getelementptr inbounds %struct.ImageParameters, ptr %1074, i64 0, i32 127
  %1080 = load i32, ptr %1079, align 8, !tbaa !31
  %1081 = sext i32 %1080 to i64
  %1082 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1081, i64 %1051, i64 2
  %1083 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1081, i64 %1051, i64 2
  %1084 = select i1 %1077, ptr %1082, ptr %1083
  tail call void @biari_init_context(ptr noundef nonnull %1078, ptr noundef nonnull %1084) #14
  %1085 = load ptr, ptr @img, align 8, !tbaa !5
  %1086 = getelementptr inbounds %struct.ImageParameters, ptr %1085, i64 0, i32 5
  %1087 = load i32, ptr %1086, align 4, !tbaa !25
  %1088 = icmp eq i32 %1087, 2
  %1089 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 3
  %1090 = getelementptr inbounds %struct.ImageParameters, ptr %1085, i64 0, i32 127
  %1091 = load i32, ptr %1090, align 8, !tbaa !31
  %1092 = sext i32 %1091 to i64
  %1093 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1092, i64 %1051, i64 3
  %1094 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1092, i64 %1051, i64 3
  %1095 = select i1 %1088, ptr %1093, ptr %1094
  tail call void @biari_init_context(ptr noundef nonnull %1089, ptr noundef nonnull %1095) #14
  %1096 = load ptr, ptr @img, align 8, !tbaa !5
  %1097 = getelementptr inbounds %struct.ImageParameters, ptr %1096, i64 0, i32 5
  %1098 = load i32, ptr %1097, align 4, !tbaa !25
  %1099 = icmp eq i32 %1098, 2
  %1100 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 4
  %1101 = getelementptr inbounds %struct.ImageParameters, ptr %1096, i64 0, i32 127
  %1102 = load i32, ptr %1101, align 8, !tbaa !31
  %1103 = sext i32 %1102 to i64
  %1104 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1103, i64 %1051, i64 4
  %1105 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1103, i64 %1051, i64 4
  %1106 = select i1 %1099, ptr %1104, ptr %1105
  tail call void @biari_init_context(ptr noundef nonnull %1100, ptr noundef nonnull %1106) #14
  %1107 = load ptr, ptr @img, align 8, !tbaa !5
  %1108 = getelementptr inbounds %struct.ImageParameters, ptr %1107, i64 0, i32 5
  %1109 = load i32, ptr %1108, align 4, !tbaa !25
  %1110 = icmp eq i32 %1109, 2
  %1111 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 5
  %1112 = getelementptr inbounds %struct.ImageParameters, ptr %1107, i64 0, i32 127
  %1113 = load i32, ptr %1112, align 8, !tbaa !31
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1114, i64 %1051, i64 5
  %1116 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1114, i64 %1051, i64 5
  %1117 = select i1 %1110, ptr %1115, ptr %1116
  tail call void @biari_init_context(ptr noundef nonnull %1111, ptr noundef nonnull %1117) #14
  %1118 = load ptr, ptr @img, align 8, !tbaa !5
  %1119 = getelementptr inbounds %struct.ImageParameters, ptr %1118, i64 0, i32 5
  %1120 = load i32, ptr %1119, align 4, !tbaa !25
  %1121 = icmp eq i32 %1120, 2
  %1122 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 6
  %1123 = getelementptr inbounds %struct.ImageParameters, ptr %1118, i64 0, i32 127
  %1124 = load i32, ptr %1123, align 8, !tbaa !31
  %1125 = sext i32 %1124 to i64
  %1126 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1125, i64 %1051, i64 6
  %1127 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1125, i64 %1051, i64 6
  %1128 = select i1 %1121, ptr %1126, ptr %1127
  tail call void @biari_init_context(ptr noundef nonnull %1122, ptr noundef nonnull %1128) #14
  %1129 = load ptr, ptr @img, align 8, !tbaa !5
  %1130 = getelementptr inbounds %struct.ImageParameters, ptr %1129, i64 0, i32 5
  %1131 = load i32, ptr %1130, align 4, !tbaa !25
  %1132 = icmp eq i32 %1131, 2
  %1133 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 7
  %1134 = getelementptr inbounds %struct.ImageParameters, ptr %1129, i64 0, i32 127
  %1135 = load i32, ptr %1134, align 8, !tbaa !31
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1136, i64 %1051, i64 7
  %1138 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1136, i64 %1051, i64 7
  %1139 = select i1 %1132, ptr %1137, ptr %1138
  tail call void @biari_init_context(ptr noundef nonnull %1133, ptr noundef nonnull %1139) #14
  %1140 = load ptr, ptr @img, align 8, !tbaa !5
  %1141 = getelementptr inbounds %struct.ImageParameters, ptr %1140, i64 0, i32 5
  %1142 = load i32, ptr %1141, align 4, !tbaa !25
  %1143 = icmp eq i32 %1142, 2
  %1144 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 8
  %1145 = getelementptr inbounds %struct.ImageParameters, ptr %1140, i64 0, i32 127
  %1146 = load i32, ptr %1145, align 8, !tbaa !31
  %1147 = sext i32 %1146 to i64
  %1148 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1147, i64 %1051, i64 8
  %1149 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1147, i64 %1051, i64 8
  %1150 = select i1 %1143, ptr %1148, ptr %1149
  tail call void @biari_init_context(ptr noundef nonnull %1144, ptr noundef nonnull %1150) #14
  %1151 = load ptr, ptr @img, align 8, !tbaa !5
  %1152 = getelementptr inbounds %struct.ImageParameters, ptr %1151, i64 0, i32 5
  %1153 = load i32, ptr %1152, align 4, !tbaa !25
  %1154 = icmp eq i32 %1153, 2
  %1155 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 9
  %1156 = getelementptr inbounds %struct.ImageParameters, ptr %1151, i64 0, i32 127
  %1157 = load i32, ptr %1156, align 8, !tbaa !31
  %1158 = sext i32 %1157 to i64
  %1159 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1158, i64 %1051, i64 9
  %1160 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1158, i64 %1051, i64 9
  %1161 = select i1 %1154, ptr %1159, ptr %1160
  tail call void @biari_init_context(ptr noundef nonnull %1155, ptr noundef nonnull %1161) #14
  %1162 = load ptr, ptr @img, align 8, !tbaa !5
  %1163 = getelementptr inbounds %struct.ImageParameters, ptr %1162, i64 0, i32 5
  %1164 = load i32, ptr %1163, align 4, !tbaa !25
  %1165 = icmp eq i32 %1164, 2
  %1166 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 10
  %1167 = getelementptr inbounds %struct.ImageParameters, ptr %1162, i64 0, i32 127
  %1168 = load i32, ptr %1167, align 8, !tbaa !31
  %1169 = sext i32 %1168 to i64
  %1170 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1169, i64 %1051, i64 10
  %1171 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1169, i64 %1051, i64 10
  %1172 = select i1 %1165, ptr %1170, ptr %1171
  tail call void @biari_init_context(ptr noundef nonnull %1166, ptr noundef nonnull %1172) #14
  %1173 = load ptr, ptr @img, align 8, !tbaa !5
  %1174 = getelementptr inbounds %struct.ImageParameters, ptr %1173, i64 0, i32 5
  %1175 = load i32, ptr %1174, align 4, !tbaa !25
  %1176 = icmp eq i32 %1175, 2
  %1177 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 11
  %1178 = getelementptr inbounds %struct.ImageParameters, ptr %1173, i64 0, i32 127
  %1179 = load i32, ptr %1178, align 8, !tbaa !31
  %1180 = sext i32 %1179 to i64
  %1181 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1180, i64 %1051, i64 11
  %1182 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1180, i64 %1051, i64 11
  %1183 = select i1 %1176, ptr %1181, ptr %1182
  tail call void @biari_init_context(ptr noundef nonnull %1177, ptr noundef nonnull %1183) #14
  %1184 = load ptr, ptr @img, align 8, !tbaa !5
  %1185 = getelementptr inbounds %struct.ImageParameters, ptr %1184, i64 0, i32 5
  %1186 = load i32, ptr %1185, align 4, !tbaa !25
  %1187 = icmp eq i32 %1186, 2
  %1188 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 12
  %1189 = getelementptr inbounds %struct.ImageParameters, ptr %1184, i64 0, i32 127
  %1190 = load i32, ptr %1189, align 8, !tbaa !31
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1191, i64 %1051, i64 12
  %1193 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1191, i64 %1051, i64 12
  %1194 = select i1 %1187, ptr %1192, ptr %1193
  tail call void @biari_init_context(ptr noundef nonnull %1188, ptr noundef nonnull %1194) #14
  %1195 = load ptr, ptr @img, align 8, !tbaa !5
  %1196 = getelementptr inbounds %struct.ImageParameters, ptr %1195, i64 0, i32 5
  %1197 = load i32, ptr %1196, align 4, !tbaa !25
  %1198 = icmp eq i32 %1197, 2
  %1199 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 13
  %1200 = getelementptr inbounds %struct.ImageParameters, ptr %1195, i64 0, i32 127
  %1201 = load i32, ptr %1200, align 8, !tbaa !31
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1202, i64 %1051, i64 13
  %1204 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1202, i64 %1051, i64 13
  %1205 = select i1 %1198, ptr %1203, ptr %1204
  tail call void @biari_init_context(ptr noundef nonnull %1199, ptr noundef nonnull %1205) #14
  %1206 = load ptr, ptr @img, align 8, !tbaa !5
  %1207 = getelementptr inbounds %struct.ImageParameters, ptr %1206, i64 0, i32 5
  %1208 = load i32, ptr %1207, align 4, !tbaa !25
  %1209 = icmp eq i32 %1208, 2
  %1210 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 4, i64 %1051, i64 14
  %1211 = getelementptr inbounds %struct.ImageParameters, ptr %1206, i64 0, i32 127
  %1212 = load i32, ptr %1211, align 8, !tbaa !31
  %1213 = sext i32 %1212 to i64
  %1214 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1213, i64 %1051, i64 14
  %1215 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1213, i64 %1051, i64 14
  %1216 = select i1 %1209, ptr %1214, ptr %1215
  tail call void @biari_init_context(ptr noundef nonnull %1210, ptr noundef nonnull %1216) #14
  %1217 = add nuw nsw i64 %1051, 1
  %1218 = icmp eq i64 %1217, 8
  br i1 %1218, label %1219, label %1050, !llvm.loop !36

1219:                                             ; preds = %1050, %1219
  %1220 = phi i64 [ %1386, %1219 ], [ 0, %1050 ]
  %1221 = load ptr, ptr @img, align 8, !tbaa !5
  %1222 = getelementptr inbounds %struct.ImageParameters, ptr %1221, i64 0, i32 5
  %1223 = load i32, ptr %1222, align 4, !tbaa !25
  %1224 = icmp eq i32 %1223, 2
  %1225 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 0
  %1226 = getelementptr inbounds %struct.ImageParameters, ptr %1221, i64 0, i32 127
  %1227 = load i32, ptr %1226, align 8, !tbaa !31
  %1228 = sext i32 %1227 to i64
  %1229 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1228, i64 %1220, i64 0
  %1230 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1228, i64 %1220, i64 0
  %1231 = select i1 %1224, ptr %1229, ptr %1230
  tail call void @biari_init_context(ptr noundef nonnull %1225, ptr noundef nonnull %1231) #14
  %1232 = load ptr, ptr @img, align 8, !tbaa !5
  %1233 = getelementptr inbounds %struct.ImageParameters, ptr %1232, i64 0, i32 5
  %1234 = load i32, ptr %1233, align 4, !tbaa !25
  %1235 = icmp eq i32 %1234, 2
  %1236 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 1
  %1237 = getelementptr inbounds %struct.ImageParameters, ptr %1232, i64 0, i32 127
  %1238 = load i32, ptr %1237, align 8, !tbaa !31
  %1239 = sext i32 %1238 to i64
  %1240 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1239, i64 %1220, i64 1
  %1241 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1239, i64 %1220, i64 1
  %1242 = select i1 %1235, ptr %1240, ptr %1241
  tail call void @biari_init_context(ptr noundef nonnull %1236, ptr noundef nonnull %1242) #14
  %1243 = load ptr, ptr @img, align 8, !tbaa !5
  %1244 = getelementptr inbounds %struct.ImageParameters, ptr %1243, i64 0, i32 5
  %1245 = load i32, ptr %1244, align 4, !tbaa !25
  %1246 = icmp eq i32 %1245, 2
  %1247 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 2
  %1248 = getelementptr inbounds %struct.ImageParameters, ptr %1243, i64 0, i32 127
  %1249 = load i32, ptr %1248, align 8, !tbaa !31
  %1250 = sext i32 %1249 to i64
  %1251 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1250, i64 %1220, i64 2
  %1252 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1250, i64 %1220, i64 2
  %1253 = select i1 %1246, ptr %1251, ptr %1252
  tail call void @biari_init_context(ptr noundef nonnull %1247, ptr noundef nonnull %1253) #14
  %1254 = load ptr, ptr @img, align 8, !tbaa !5
  %1255 = getelementptr inbounds %struct.ImageParameters, ptr %1254, i64 0, i32 5
  %1256 = load i32, ptr %1255, align 4, !tbaa !25
  %1257 = icmp eq i32 %1256, 2
  %1258 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 3
  %1259 = getelementptr inbounds %struct.ImageParameters, ptr %1254, i64 0, i32 127
  %1260 = load i32, ptr %1259, align 8, !tbaa !31
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1261, i64 %1220, i64 3
  %1263 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1261, i64 %1220, i64 3
  %1264 = select i1 %1257, ptr %1262, ptr %1263
  tail call void @biari_init_context(ptr noundef nonnull %1258, ptr noundef nonnull %1264) #14
  %1265 = load ptr, ptr @img, align 8, !tbaa !5
  %1266 = getelementptr inbounds %struct.ImageParameters, ptr %1265, i64 0, i32 5
  %1267 = load i32, ptr %1266, align 4, !tbaa !25
  %1268 = icmp eq i32 %1267, 2
  %1269 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 4
  %1270 = getelementptr inbounds %struct.ImageParameters, ptr %1265, i64 0, i32 127
  %1271 = load i32, ptr %1270, align 8, !tbaa !31
  %1272 = sext i32 %1271 to i64
  %1273 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1272, i64 %1220, i64 4
  %1274 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1272, i64 %1220, i64 4
  %1275 = select i1 %1268, ptr %1273, ptr %1274
  tail call void @biari_init_context(ptr noundef nonnull %1269, ptr noundef nonnull %1275) #14
  %1276 = load ptr, ptr @img, align 8, !tbaa !5
  %1277 = getelementptr inbounds %struct.ImageParameters, ptr %1276, i64 0, i32 5
  %1278 = load i32, ptr %1277, align 4, !tbaa !25
  %1279 = icmp eq i32 %1278, 2
  %1280 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 5
  %1281 = getelementptr inbounds %struct.ImageParameters, ptr %1276, i64 0, i32 127
  %1282 = load i32, ptr %1281, align 8, !tbaa !31
  %1283 = sext i32 %1282 to i64
  %1284 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1283, i64 %1220, i64 5
  %1285 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1283, i64 %1220, i64 5
  %1286 = select i1 %1279, ptr %1284, ptr %1285
  tail call void @biari_init_context(ptr noundef nonnull %1280, ptr noundef nonnull %1286) #14
  %1287 = load ptr, ptr @img, align 8, !tbaa !5
  %1288 = getelementptr inbounds %struct.ImageParameters, ptr %1287, i64 0, i32 5
  %1289 = load i32, ptr %1288, align 4, !tbaa !25
  %1290 = icmp eq i32 %1289, 2
  %1291 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 6
  %1292 = getelementptr inbounds %struct.ImageParameters, ptr %1287, i64 0, i32 127
  %1293 = load i32, ptr %1292, align 8, !tbaa !31
  %1294 = sext i32 %1293 to i64
  %1295 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1294, i64 %1220, i64 6
  %1296 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1294, i64 %1220, i64 6
  %1297 = select i1 %1290, ptr %1295, ptr %1296
  tail call void @biari_init_context(ptr noundef nonnull %1291, ptr noundef nonnull %1297) #14
  %1298 = load ptr, ptr @img, align 8, !tbaa !5
  %1299 = getelementptr inbounds %struct.ImageParameters, ptr %1298, i64 0, i32 5
  %1300 = load i32, ptr %1299, align 4, !tbaa !25
  %1301 = icmp eq i32 %1300, 2
  %1302 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 7
  %1303 = getelementptr inbounds %struct.ImageParameters, ptr %1298, i64 0, i32 127
  %1304 = load i32, ptr %1303, align 8, !tbaa !31
  %1305 = sext i32 %1304 to i64
  %1306 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1305, i64 %1220, i64 7
  %1307 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1305, i64 %1220, i64 7
  %1308 = select i1 %1301, ptr %1306, ptr %1307
  tail call void @biari_init_context(ptr noundef nonnull %1302, ptr noundef nonnull %1308) #14
  %1309 = load ptr, ptr @img, align 8, !tbaa !5
  %1310 = getelementptr inbounds %struct.ImageParameters, ptr %1309, i64 0, i32 5
  %1311 = load i32, ptr %1310, align 4, !tbaa !25
  %1312 = icmp eq i32 %1311, 2
  %1313 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 8
  %1314 = getelementptr inbounds %struct.ImageParameters, ptr %1309, i64 0, i32 127
  %1315 = load i32, ptr %1314, align 8, !tbaa !31
  %1316 = sext i32 %1315 to i64
  %1317 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1316, i64 %1220, i64 8
  %1318 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1316, i64 %1220, i64 8
  %1319 = select i1 %1312, ptr %1317, ptr %1318
  tail call void @biari_init_context(ptr noundef nonnull %1313, ptr noundef nonnull %1319) #14
  %1320 = load ptr, ptr @img, align 8, !tbaa !5
  %1321 = getelementptr inbounds %struct.ImageParameters, ptr %1320, i64 0, i32 5
  %1322 = load i32, ptr %1321, align 4, !tbaa !25
  %1323 = icmp eq i32 %1322, 2
  %1324 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 9
  %1325 = getelementptr inbounds %struct.ImageParameters, ptr %1320, i64 0, i32 127
  %1326 = load i32, ptr %1325, align 8, !tbaa !31
  %1327 = sext i32 %1326 to i64
  %1328 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1327, i64 %1220, i64 9
  %1329 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1327, i64 %1220, i64 9
  %1330 = select i1 %1323, ptr %1328, ptr %1329
  tail call void @biari_init_context(ptr noundef nonnull %1324, ptr noundef nonnull %1330) #14
  %1331 = load ptr, ptr @img, align 8, !tbaa !5
  %1332 = getelementptr inbounds %struct.ImageParameters, ptr %1331, i64 0, i32 5
  %1333 = load i32, ptr %1332, align 4, !tbaa !25
  %1334 = icmp eq i32 %1333, 2
  %1335 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 10
  %1336 = getelementptr inbounds %struct.ImageParameters, ptr %1331, i64 0, i32 127
  %1337 = load i32, ptr %1336, align 8, !tbaa !31
  %1338 = sext i32 %1337 to i64
  %1339 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1338, i64 %1220, i64 10
  %1340 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1338, i64 %1220, i64 10
  %1341 = select i1 %1334, ptr %1339, ptr %1340
  tail call void @biari_init_context(ptr noundef nonnull %1335, ptr noundef nonnull %1341) #14
  %1342 = load ptr, ptr @img, align 8, !tbaa !5
  %1343 = getelementptr inbounds %struct.ImageParameters, ptr %1342, i64 0, i32 5
  %1344 = load i32, ptr %1343, align 4, !tbaa !25
  %1345 = icmp eq i32 %1344, 2
  %1346 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 11
  %1347 = getelementptr inbounds %struct.ImageParameters, ptr %1342, i64 0, i32 127
  %1348 = load i32, ptr %1347, align 8, !tbaa !31
  %1349 = sext i32 %1348 to i64
  %1350 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1349, i64 %1220, i64 11
  %1351 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1349, i64 %1220, i64 11
  %1352 = select i1 %1345, ptr %1350, ptr %1351
  tail call void @biari_init_context(ptr noundef nonnull %1346, ptr noundef nonnull %1352) #14
  %1353 = load ptr, ptr @img, align 8, !tbaa !5
  %1354 = getelementptr inbounds %struct.ImageParameters, ptr %1353, i64 0, i32 5
  %1355 = load i32, ptr %1354, align 4, !tbaa !25
  %1356 = icmp eq i32 %1355, 2
  %1357 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 12
  %1358 = getelementptr inbounds %struct.ImageParameters, ptr %1353, i64 0, i32 127
  %1359 = load i32, ptr %1358, align 8, !tbaa !31
  %1360 = sext i32 %1359 to i64
  %1361 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1360, i64 %1220, i64 12
  %1362 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1360, i64 %1220, i64 12
  %1363 = select i1 %1356, ptr %1361, ptr %1362
  tail call void @biari_init_context(ptr noundef nonnull %1357, ptr noundef nonnull %1363) #14
  %1364 = load ptr, ptr @img, align 8, !tbaa !5
  %1365 = getelementptr inbounds %struct.ImageParameters, ptr %1364, i64 0, i32 5
  %1366 = load i32, ptr %1365, align 4, !tbaa !25
  %1367 = icmp eq i32 %1366, 2
  %1368 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 13
  %1369 = getelementptr inbounds %struct.ImageParameters, ptr %1364, i64 0, i32 127
  %1370 = load i32, ptr %1369, align 8, !tbaa !31
  %1371 = sext i32 %1370 to i64
  %1372 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1371, i64 %1220, i64 13
  %1373 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1371, i64 %1220, i64 13
  %1374 = select i1 %1367, ptr %1372, ptr %1373
  tail call void @biari_init_context(ptr noundef nonnull %1368, ptr noundef nonnull %1374) #14
  %1375 = load ptr, ptr @img, align 8, !tbaa !5
  %1376 = getelementptr inbounds %struct.ImageParameters, ptr %1375, i64 0, i32 5
  %1377 = load i32, ptr %1376, align 4, !tbaa !25
  %1378 = icmp eq i32 %1377, 2
  %1379 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 5, i64 %1220, i64 14
  %1380 = getelementptr inbounds %struct.ImageParameters, ptr %1375, i64 0, i32 127
  %1381 = load i32, ptr %1380, align 8, !tbaa !31
  %1382 = sext i32 %1381 to i64
  %1383 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1382, i64 %1220, i64 14
  %1384 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1382, i64 %1220, i64 14
  %1385 = select i1 %1378, ptr %1383, ptr %1384
  tail call void @biari_init_context(ptr noundef nonnull %1379, ptr noundef nonnull %1385) #14
  %1386 = add nuw nsw i64 %1220, 1
  %1387 = icmp eq i64 %1386, 8
  br i1 %1387, label %1388, label %1219, !llvm.loop !37

1388:                                             ; preds = %1219, %1388
  %1389 = phi i64 [ %1445, %1388 ], [ 0, %1219 ]
  %1390 = load ptr, ptr @img, align 8, !tbaa !5
  %1391 = getelementptr inbounds %struct.ImageParameters, ptr %1390, i64 0, i32 5
  %1392 = load i32, ptr %1391, align 4, !tbaa !25
  %1393 = icmp eq i32 %1392, 2
  %1394 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 6, i64 %1389, i64 0
  %1395 = getelementptr inbounds %struct.ImageParameters, ptr %1390, i64 0, i32 127
  %1396 = load i32, ptr %1395, align 8, !tbaa !31
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1397, i64 %1389, i64 0
  %1399 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1397, i64 %1389, i64 0
  %1400 = select i1 %1393, ptr %1398, ptr %1399
  tail call void @biari_init_context(ptr noundef nonnull %1394, ptr noundef nonnull %1400) #14
  %1401 = load ptr, ptr @img, align 8, !tbaa !5
  %1402 = getelementptr inbounds %struct.ImageParameters, ptr %1401, i64 0, i32 5
  %1403 = load i32, ptr %1402, align 4, !tbaa !25
  %1404 = icmp eq i32 %1403, 2
  %1405 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 6, i64 %1389, i64 1
  %1406 = getelementptr inbounds %struct.ImageParameters, ptr %1401, i64 0, i32 127
  %1407 = load i32, ptr %1406, align 8, !tbaa !31
  %1408 = sext i32 %1407 to i64
  %1409 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1408, i64 %1389, i64 1
  %1410 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1408, i64 %1389, i64 1
  %1411 = select i1 %1404, ptr %1409, ptr %1410
  tail call void @biari_init_context(ptr noundef nonnull %1405, ptr noundef nonnull %1411) #14
  %1412 = load ptr, ptr @img, align 8, !tbaa !5
  %1413 = getelementptr inbounds %struct.ImageParameters, ptr %1412, i64 0, i32 5
  %1414 = load i32, ptr %1413, align 4, !tbaa !25
  %1415 = icmp eq i32 %1414, 2
  %1416 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 6, i64 %1389, i64 2
  %1417 = getelementptr inbounds %struct.ImageParameters, ptr %1412, i64 0, i32 127
  %1418 = load i32, ptr %1417, align 8, !tbaa !31
  %1419 = sext i32 %1418 to i64
  %1420 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1419, i64 %1389, i64 2
  %1421 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1419, i64 %1389, i64 2
  %1422 = select i1 %1415, ptr %1420, ptr %1421
  tail call void @biari_init_context(ptr noundef nonnull %1416, ptr noundef nonnull %1422) #14
  %1423 = load ptr, ptr @img, align 8, !tbaa !5
  %1424 = getelementptr inbounds %struct.ImageParameters, ptr %1423, i64 0, i32 5
  %1425 = load i32, ptr %1424, align 4, !tbaa !25
  %1426 = icmp eq i32 %1425, 2
  %1427 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 6, i64 %1389, i64 3
  %1428 = getelementptr inbounds %struct.ImageParameters, ptr %1423, i64 0, i32 127
  %1429 = load i32, ptr %1428, align 8, !tbaa !31
  %1430 = sext i32 %1429 to i64
  %1431 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1430, i64 %1389, i64 3
  %1432 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1430, i64 %1389, i64 3
  %1433 = select i1 %1426, ptr %1431, ptr %1432
  tail call void @biari_init_context(ptr noundef nonnull %1427, ptr noundef nonnull %1433) #14
  %1434 = load ptr, ptr @img, align 8, !tbaa !5
  %1435 = getelementptr inbounds %struct.ImageParameters, ptr %1434, i64 0, i32 5
  %1436 = load i32, ptr %1435, align 4, !tbaa !25
  %1437 = icmp eq i32 %1436, 2
  %1438 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 6, i64 %1389, i64 4
  %1439 = getelementptr inbounds %struct.ImageParameters, ptr %1434, i64 0, i32 127
  %1440 = load i32, ptr %1439, align 8, !tbaa !31
  %1441 = sext i32 %1440 to i64
  %1442 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1441, i64 %1389, i64 4
  %1443 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1441, i64 %1389, i64 4
  %1444 = select i1 %1437, ptr %1442, ptr %1443
  tail call void @biari_init_context(ptr noundef nonnull %1438, ptr noundef nonnull %1444) #14
  %1445 = add nuw nsw i64 %1389, 1
  %1446 = icmp eq i64 %1445, 8
  br i1 %1446, label %1447, label %1388, !llvm.loop !38

1447:                                             ; preds = %1388, %1447
  %1448 = phi i64 [ %1504, %1447 ], [ 0, %1388 ]
  %1449 = load ptr, ptr @img, align 8, !tbaa !5
  %1450 = getelementptr inbounds %struct.ImageParameters, ptr %1449, i64 0, i32 5
  %1451 = load i32, ptr %1450, align 4, !tbaa !25
  %1452 = icmp eq i32 %1451, 2
  %1453 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 7, i64 %1448, i64 0
  %1454 = getelementptr inbounds %struct.ImageParameters, ptr %1449, i64 0, i32 127
  %1455 = load i32, ptr %1454, align 8, !tbaa !31
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1456, i64 %1448, i64 0
  %1458 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1456, i64 %1448, i64 0
  %1459 = select i1 %1452, ptr %1457, ptr %1458
  tail call void @biari_init_context(ptr noundef nonnull %1453, ptr noundef nonnull %1459) #14
  %1460 = load ptr, ptr @img, align 8, !tbaa !5
  %1461 = getelementptr inbounds %struct.ImageParameters, ptr %1460, i64 0, i32 5
  %1462 = load i32, ptr %1461, align 4, !tbaa !25
  %1463 = icmp eq i32 %1462, 2
  %1464 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 7, i64 %1448, i64 1
  %1465 = getelementptr inbounds %struct.ImageParameters, ptr %1460, i64 0, i32 127
  %1466 = load i32, ptr %1465, align 8, !tbaa !31
  %1467 = sext i32 %1466 to i64
  %1468 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1467, i64 %1448, i64 1
  %1469 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1467, i64 %1448, i64 1
  %1470 = select i1 %1463, ptr %1468, ptr %1469
  tail call void @biari_init_context(ptr noundef nonnull %1464, ptr noundef nonnull %1470) #14
  %1471 = load ptr, ptr @img, align 8, !tbaa !5
  %1472 = getelementptr inbounds %struct.ImageParameters, ptr %1471, i64 0, i32 5
  %1473 = load i32, ptr %1472, align 4, !tbaa !25
  %1474 = icmp eq i32 %1473, 2
  %1475 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 7, i64 %1448, i64 2
  %1476 = getelementptr inbounds %struct.ImageParameters, ptr %1471, i64 0, i32 127
  %1477 = load i32, ptr %1476, align 8, !tbaa !31
  %1478 = sext i32 %1477 to i64
  %1479 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1478, i64 %1448, i64 2
  %1480 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1478, i64 %1448, i64 2
  %1481 = select i1 %1474, ptr %1479, ptr %1480
  tail call void @biari_init_context(ptr noundef nonnull %1475, ptr noundef nonnull %1481) #14
  %1482 = load ptr, ptr @img, align 8, !tbaa !5
  %1483 = getelementptr inbounds %struct.ImageParameters, ptr %1482, i64 0, i32 5
  %1484 = load i32, ptr %1483, align 4, !tbaa !25
  %1485 = icmp eq i32 %1484, 2
  %1486 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 7, i64 %1448, i64 3
  %1487 = getelementptr inbounds %struct.ImageParameters, ptr %1482, i64 0, i32 127
  %1488 = load i32, ptr %1487, align 8, !tbaa !31
  %1489 = sext i32 %1488 to i64
  %1490 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1489, i64 %1448, i64 3
  %1491 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1489, i64 %1448, i64 3
  %1492 = select i1 %1485, ptr %1490, ptr %1491
  tail call void @biari_init_context(ptr noundef nonnull %1486, ptr noundef nonnull %1492) #14
  %1493 = load ptr, ptr @img, align 8, !tbaa !5
  %1494 = getelementptr inbounds %struct.ImageParameters, ptr %1493, i64 0, i32 5
  %1495 = load i32, ptr %1494, align 4, !tbaa !25
  %1496 = icmp eq i32 %1495, 2
  %1497 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 7, i64 %1448, i64 4
  %1498 = getelementptr inbounds %struct.ImageParameters, ptr %1493, i64 0, i32 127
  %1499 = load i32, ptr %1498, align 8, !tbaa !31
  %1500 = sext i32 %1499 to i64
  %1501 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1500, i64 %1448, i64 4
  %1502 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1500, i64 %1448, i64 4
  %1503 = select i1 %1496, ptr %1501, ptr %1502
  tail call void @biari_init_context(ptr noundef nonnull %1497, ptr noundef nonnull %1503) #14
  %1504 = add nuw nsw i64 %1448, 1
  %1505 = icmp eq i64 %1504, 8
  br i1 %1505, label %1506, label %1447, !llvm.loop !39

1506:                                             ; preds = %1447, %1506
  %1507 = phi i64 [ %1673, %1506 ], [ 0, %1447 ]
  %1508 = load ptr, ptr @img, align 8, !tbaa !5
  %1509 = getelementptr inbounds %struct.ImageParameters, ptr %1508, i64 0, i32 5
  %1510 = load i32, ptr %1509, align 4, !tbaa !25
  %1511 = icmp eq i32 %1510, 2
  %1512 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 0
  %1513 = getelementptr inbounds %struct.ImageParameters, ptr %1508, i64 0, i32 127
  %1514 = load i32, ptr %1513, align 8, !tbaa !31
  %1515 = sext i32 %1514 to i64
  %1516 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1515, i64 %1507, i64 0
  %1517 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1515, i64 %1507, i64 0
  %1518 = select i1 %1511, ptr %1516, ptr %1517
  tail call void @biari_init_context(ptr noundef nonnull %1512, ptr noundef nonnull %1518) #14
  %1519 = load ptr, ptr @img, align 8, !tbaa !5
  %1520 = getelementptr inbounds %struct.ImageParameters, ptr %1519, i64 0, i32 5
  %1521 = load i32, ptr %1520, align 4, !tbaa !25
  %1522 = icmp eq i32 %1521, 2
  %1523 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 1
  %1524 = getelementptr inbounds %struct.ImageParameters, ptr %1519, i64 0, i32 127
  %1525 = load i32, ptr %1524, align 8, !tbaa !31
  %1526 = sext i32 %1525 to i64
  %1527 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1526, i64 %1507, i64 1
  %1528 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1526, i64 %1507, i64 1
  %1529 = select i1 %1522, ptr %1527, ptr %1528
  tail call void @biari_init_context(ptr noundef nonnull %1523, ptr noundef nonnull %1529) #14
  %1530 = load ptr, ptr @img, align 8, !tbaa !5
  %1531 = getelementptr inbounds %struct.ImageParameters, ptr %1530, i64 0, i32 5
  %1532 = load i32, ptr %1531, align 4, !tbaa !25
  %1533 = icmp eq i32 %1532, 2
  %1534 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 2
  %1535 = getelementptr inbounds %struct.ImageParameters, ptr %1530, i64 0, i32 127
  %1536 = load i32, ptr %1535, align 8, !tbaa !31
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1537, i64 %1507, i64 2
  %1539 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1537, i64 %1507, i64 2
  %1540 = select i1 %1533, ptr %1538, ptr %1539
  tail call void @biari_init_context(ptr noundef nonnull %1534, ptr noundef nonnull %1540) #14
  %1541 = load ptr, ptr @img, align 8, !tbaa !5
  %1542 = getelementptr inbounds %struct.ImageParameters, ptr %1541, i64 0, i32 5
  %1543 = load i32, ptr %1542, align 4, !tbaa !25
  %1544 = icmp eq i32 %1543, 2
  %1545 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 3
  %1546 = getelementptr inbounds %struct.ImageParameters, ptr %1541, i64 0, i32 127
  %1547 = load i32, ptr %1546, align 8, !tbaa !31
  %1548 = sext i32 %1547 to i64
  %1549 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1548, i64 %1507, i64 3
  %1550 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1548, i64 %1507, i64 3
  %1551 = select i1 %1544, ptr %1549, ptr %1550
  tail call void @biari_init_context(ptr noundef nonnull %1545, ptr noundef nonnull %1551) #14
  %1552 = load ptr, ptr @img, align 8, !tbaa !5
  %1553 = getelementptr inbounds %struct.ImageParameters, ptr %1552, i64 0, i32 5
  %1554 = load i32, ptr %1553, align 4, !tbaa !25
  %1555 = icmp eq i32 %1554, 2
  %1556 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 4
  %1557 = getelementptr inbounds %struct.ImageParameters, ptr %1552, i64 0, i32 127
  %1558 = load i32, ptr %1557, align 8, !tbaa !31
  %1559 = sext i32 %1558 to i64
  %1560 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1559, i64 %1507, i64 4
  %1561 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1559, i64 %1507, i64 4
  %1562 = select i1 %1555, ptr %1560, ptr %1561
  tail call void @biari_init_context(ptr noundef nonnull %1556, ptr noundef nonnull %1562) #14
  %1563 = load ptr, ptr @img, align 8, !tbaa !5
  %1564 = getelementptr inbounds %struct.ImageParameters, ptr %1563, i64 0, i32 5
  %1565 = load i32, ptr %1564, align 4, !tbaa !25
  %1566 = icmp eq i32 %1565, 2
  %1567 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 5
  %1568 = getelementptr inbounds %struct.ImageParameters, ptr %1563, i64 0, i32 127
  %1569 = load i32, ptr %1568, align 8, !tbaa !31
  %1570 = sext i32 %1569 to i64
  %1571 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1570, i64 %1507, i64 5
  %1572 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1570, i64 %1507, i64 5
  %1573 = select i1 %1566, ptr %1571, ptr %1572
  tail call void @biari_init_context(ptr noundef nonnull %1567, ptr noundef nonnull %1573) #14
  %1574 = load ptr, ptr @img, align 8, !tbaa !5
  %1575 = getelementptr inbounds %struct.ImageParameters, ptr %1574, i64 0, i32 5
  %1576 = load i32, ptr %1575, align 4, !tbaa !25
  %1577 = icmp eq i32 %1576, 2
  %1578 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 6
  %1579 = getelementptr inbounds %struct.ImageParameters, ptr %1574, i64 0, i32 127
  %1580 = load i32, ptr %1579, align 8, !tbaa !31
  %1581 = sext i32 %1580 to i64
  %1582 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1581, i64 %1507, i64 6
  %1583 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1581, i64 %1507, i64 6
  %1584 = select i1 %1577, ptr %1582, ptr %1583
  tail call void @biari_init_context(ptr noundef nonnull %1578, ptr noundef nonnull %1584) #14
  %1585 = load ptr, ptr @img, align 8, !tbaa !5
  %1586 = getelementptr inbounds %struct.ImageParameters, ptr %1585, i64 0, i32 5
  %1587 = load i32, ptr %1586, align 4, !tbaa !25
  %1588 = icmp eq i32 %1587, 2
  %1589 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 7
  %1590 = getelementptr inbounds %struct.ImageParameters, ptr %1585, i64 0, i32 127
  %1591 = load i32, ptr %1590, align 8, !tbaa !31
  %1592 = sext i32 %1591 to i64
  %1593 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1592, i64 %1507, i64 7
  %1594 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1592, i64 %1507, i64 7
  %1595 = select i1 %1588, ptr %1593, ptr %1594
  tail call void @biari_init_context(ptr noundef nonnull %1589, ptr noundef nonnull %1595) #14
  %1596 = load ptr, ptr @img, align 8, !tbaa !5
  %1597 = getelementptr inbounds %struct.ImageParameters, ptr %1596, i64 0, i32 5
  %1598 = load i32, ptr %1597, align 4, !tbaa !25
  %1599 = icmp eq i32 %1598, 2
  %1600 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 8
  %1601 = getelementptr inbounds %struct.ImageParameters, ptr %1596, i64 0, i32 127
  %1602 = load i32, ptr %1601, align 8, !tbaa !31
  %1603 = sext i32 %1602 to i64
  %1604 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1603, i64 %1507, i64 8
  %1605 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1603, i64 %1507, i64 8
  %1606 = select i1 %1599, ptr %1604, ptr %1605
  tail call void @biari_init_context(ptr noundef nonnull %1600, ptr noundef nonnull %1606) #14
  %1607 = load ptr, ptr @img, align 8, !tbaa !5
  %1608 = getelementptr inbounds %struct.ImageParameters, ptr %1607, i64 0, i32 5
  %1609 = load i32, ptr %1608, align 4, !tbaa !25
  %1610 = icmp eq i32 %1609, 2
  %1611 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 9
  %1612 = getelementptr inbounds %struct.ImageParameters, ptr %1607, i64 0, i32 127
  %1613 = load i32, ptr %1612, align 8, !tbaa !31
  %1614 = sext i32 %1613 to i64
  %1615 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1614, i64 %1507, i64 9
  %1616 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1614, i64 %1507, i64 9
  %1617 = select i1 %1610, ptr %1615, ptr %1616
  tail call void @biari_init_context(ptr noundef nonnull %1611, ptr noundef nonnull %1617) #14
  %1618 = load ptr, ptr @img, align 8, !tbaa !5
  %1619 = getelementptr inbounds %struct.ImageParameters, ptr %1618, i64 0, i32 5
  %1620 = load i32, ptr %1619, align 4, !tbaa !25
  %1621 = icmp eq i32 %1620, 2
  %1622 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 10
  %1623 = getelementptr inbounds %struct.ImageParameters, ptr %1618, i64 0, i32 127
  %1624 = load i32, ptr %1623, align 8, !tbaa !31
  %1625 = sext i32 %1624 to i64
  %1626 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1625, i64 %1507, i64 10
  %1627 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1625, i64 %1507, i64 10
  %1628 = select i1 %1621, ptr %1626, ptr %1627
  tail call void @biari_init_context(ptr noundef nonnull %1622, ptr noundef nonnull %1628) #14
  %1629 = load ptr, ptr @img, align 8, !tbaa !5
  %1630 = getelementptr inbounds %struct.ImageParameters, ptr %1629, i64 0, i32 5
  %1631 = load i32, ptr %1630, align 4, !tbaa !25
  %1632 = icmp eq i32 %1631, 2
  %1633 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 11
  %1634 = getelementptr inbounds %struct.ImageParameters, ptr %1629, i64 0, i32 127
  %1635 = load i32, ptr %1634, align 8, !tbaa !31
  %1636 = sext i32 %1635 to i64
  %1637 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1636, i64 %1507, i64 11
  %1638 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1636, i64 %1507, i64 11
  %1639 = select i1 %1632, ptr %1637, ptr %1638
  tail call void @biari_init_context(ptr noundef nonnull %1633, ptr noundef nonnull %1639) #14
  %1640 = load ptr, ptr @img, align 8, !tbaa !5
  %1641 = getelementptr inbounds %struct.ImageParameters, ptr %1640, i64 0, i32 5
  %1642 = load i32, ptr %1641, align 4, !tbaa !25
  %1643 = icmp eq i32 %1642, 2
  %1644 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 12
  %1645 = getelementptr inbounds %struct.ImageParameters, ptr %1640, i64 0, i32 127
  %1646 = load i32, ptr %1645, align 8, !tbaa !31
  %1647 = sext i32 %1646 to i64
  %1648 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1647, i64 %1507, i64 12
  %1649 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1647, i64 %1507, i64 12
  %1650 = select i1 %1643, ptr %1648, ptr %1649
  tail call void @biari_init_context(ptr noundef nonnull %1644, ptr noundef nonnull %1650) #14
  %1651 = load ptr, ptr @img, align 8, !tbaa !5
  %1652 = getelementptr inbounds %struct.ImageParameters, ptr %1651, i64 0, i32 5
  %1653 = load i32, ptr %1652, align 4, !tbaa !25
  %1654 = icmp eq i32 %1653, 2
  %1655 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 13
  %1656 = getelementptr inbounds %struct.ImageParameters, ptr %1651, i64 0, i32 127
  %1657 = load i32, ptr %1656, align 8, !tbaa !31
  %1658 = sext i32 %1657 to i64
  %1659 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1658, i64 %1507, i64 13
  %1660 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1658, i64 %1507, i64 13
  %1661 = select i1 %1654, ptr %1659, ptr %1660
  tail call void @biari_init_context(ptr noundef nonnull %1655, ptr noundef nonnull %1661) #14
  %1662 = load ptr, ptr @img, align 8, !tbaa !5
  %1663 = getelementptr inbounds %struct.ImageParameters, ptr %1662, i64 0, i32 5
  %1664 = load i32, ptr %1663, align 4, !tbaa !25
  %1665 = icmp eq i32 %1664, 2
  %1666 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 8, i64 %1507, i64 14
  %1667 = getelementptr inbounds %struct.ImageParameters, ptr %1662, i64 0, i32 127
  %1668 = load i32, ptr %1667, align 8, !tbaa !31
  %1669 = sext i32 %1668 to i64
  %1670 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1669, i64 %1507, i64 14
  %1671 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1669, i64 %1507, i64 14
  %1672 = select i1 %1665, ptr %1670, ptr %1671
  tail call void @biari_init_context(ptr noundef nonnull %1666, ptr noundef nonnull %1672) #14
  %1673 = add nuw nsw i64 %1507, 1
  %1674 = icmp eq i64 %1673, 8
  br i1 %1674, label %1675, label %1506, !llvm.loop !40

1675:                                             ; preds = %1506, %1675
  %1676 = phi i64 [ %1842, %1675 ], [ 0, %1506 ]
  %1677 = load ptr, ptr @img, align 8, !tbaa !5
  %1678 = getelementptr inbounds %struct.ImageParameters, ptr %1677, i64 0, i32 5
  %1679 = load i32, ptr %1678, align 4, !tbaa !25
  %1680 = icmp eq i32 %1679, 2
  %1681 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 0
  %1682 = getelementptr inbounds %struct.ImageParameters, ptr %1677, i64 0, i32 127
  %1683 = load i32, ptr %1682, align 8, !tbaa !31
  %1684 = sext i32 %1683 to i64
  %1685 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1684, i64 %1676, i64 0
  %1686 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1684, i64 %1676, i64 0
  %1687 = select i1 %1680, ptr %1685, ptr %1686
  tail call void @biari_init_context(ptr noundef nonnull %1681, ptr noundef nonnull %1687) #14
  %1688 = load ptr, ptr @img, align 8, !tbaa !5
  %1689 = getelementptr inbounds %struct.ImageParameters, ptr %1688, i64 0, i32 5
  %1690 = load i32, ptr %1689, align 4, !tbaa !25
  %1691 = icmp eq i32 %1690, 2
  %1692 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 1
  %1693 = getelementptr inbounds %struct.ImageParameters, ptr %1688, i64 0, i32 127
  %1694 = load i32, ptr %1693, align 8, !tbaa !31
  %1695 = sext i32 %1694 to i64
  %1696 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1695, i64 %1676, i64 1
  %1697 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1695, i64 %1676, i64 1
  %1698 = select i1 %1691, ptr %1696, ptr %1697
  tail call void @biari_init_context(ptr noundef nonnull %1692, ptr noundef nonnull %1698) #14
  %1699 = load ptr, ptr @img, align 8, !tbaa !5
  %1700 = getelementptr inbounds %struct.ImageParameters, ptr %1699, i64 0, i32 5
  %1701 = load i32, ptr %1700, align 4, !tbaa !25
  %1702 = icmp eq i32 %1701, 2
  %1703 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 2
  %1704 = getelementptr inbounds %struct.ImageParameters, ptr %1699, i64 0, i32 127
  %1705 = load i32, ptr %1704, align 8, !tbaa !31
  %1706 = sext i32 %1705 to i64
  %1707 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1706, i64 %1676, i64 2
  %1708 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1706, i64 %1676, i64 2
  %1709 = select i1 %1702, ptr %1707, ptr %1708
  tail call void @biari_init_context(ptr noundef nonnull %1703, ptr noundef nonnull %1709) #14
  %1710 = load ptr, ptr @img, align 8, !tbaa !5
  %1711 = getelementptr inbounds %struct.ImageParameters, ptr %1710, i64 0, i32 5
  %1712 = load i32, ptr %1711, align 4, !tbaa !25
  %1713 = icmp eq i32 %1712, 2
  %1714 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 3
  %1715 = getelementptr inbounds %struct.ImageParameters, ptr %1710, i64 0, i32 127
  %1716 = load i32, ptr %1715, align 8, !tbaa !31
  %1717 = sext i32 %1716 to i64
  %1718 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1717, i64 %1676, i64 3
  %1719 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1717, i64 %1676, i64 3
  %1720 = select i1 %1713, ptr %1718, ptr %1719
  tail call void @biari_init_context(ptr noundef nonnull %1714, ptr noundef nonnull %1720) #14
  %1721 = load ptr, ptr @img, align 8, !tbaa !5
  %1722 = getelementptr inbounds %struct.ImageParameters, ptr %1721, i64 0, i32 5
  %1723 = load i32, ptr %1722, align 4, !tbaa !25
  %1724 = icmp eq i32 %1723, 2
  %1725 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 4
  %1726 = getelementptr inbounds %struct.ImageParameters, ptr %1721, i64 0, i32 127
  %1727 = load i32, ptr %1726, align 8, !tbaa !31
  %1728 = sext i32 %1727 to i64
  %1729 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1728, i64 %1676, i64 4
  %1730 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1728, i64 %1676, i64 4
  %1731 = select i1 %1724, ptr %1729, ptr %1730
  tail call void @biari_init_context(ptr noundef nonnull %1725, ptr noundef nonnull %1731) #14
  %1732 = load ptr, ptr @img, align 8, !tbaa !5
  %1733 = getelementptr inbounds %struct.ImageParameters, ptr %1732, i64 0, i32 5
  %1734 = load i32, ptr %1733, align 4, !tbaa !25
  %1735 = icmp eq i32 %1734, 2
  %1736 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 5
  %1737 = getelementptr inbounds %struct.ImageParameters, ptr %1732, i64 0, i32 127
  %1738 = load i32, ptr %1737, align 8, !tbaa !31
  %1739 = sext i32 %1738 to i64
  %1740 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1739, i64 %1676, i64 5
  %1741 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1739, i64 %1676, i64 5
  %1742 = select i1 %1735, ptr %1740, ptr %1741
  tail call void @biari_init_context(ptr noundef nonnull %1736, ptr noundef nonnull %1742) #14
  %1743 = load ptr, ptr @img, align 8, !tbaa !5
  %1744 = getelementptr inbounds %struct.ImageParameters, ptr %1743, i64 0, i32 5
  %1745 = load i32, ptr %1744, align 4, !tbaa !25
  %1746 = icmp eq i32 %1745, 2
  %1747 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 6
  %1748 = getelementptr inbounds %struct.ImageParameters, ptr %1743, i64 0, i32 127
  %1749 = load i32, ptr %1748, align 8, !tbaa !31
  %1750 = sext i32 %1749 to i64
  %1751 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1750, i64 %1676, i64 6
  %1752 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1750, i64 %1676, i64 6
  %1753 = select i1 %1746, ptr %1751, ptr %1752
  tail call void @biari_init_context(ptr noundef nonnull %1747, ptr noundef nonnull %1753) #14
  %1754 = load ptr, ptr @img, align 8, !tbaa !5
  %1755 = getelementptr inbounds %struct.ImageParameters, ptr %1754, i64 0, i32 5
  %1756 = load i32, ptr %1755, align 4, !tbaa !25
  %1757 = icmp eq i32 %1756, 2
  %1758 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 7
  %1759 = getelementptr inbounds %struct.ImageParameters, ptr %1754, i64 0, i32 127
  %1760 = load i32, ptr %1759, align 8, !tbaa !31
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1761, i64 %1676, i64 7
  %1763 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1761, i64 %1676, i64 7
  %1764 = select i1 %1757, ptr %1762, ptr %1763
  tail call void @biari_init_context(ptr noundef nonnull %1758, ptr noundef nonnull %1764) #14
  %1765 = load ptr, ptr @img, align 8, !tbaa !5
  %1766 = getelementptr inbounds %struct.ImageParameters, ptr %1765, i64 0, i32 5
  %1767 = load i32, ptr %1766, align 4, !tbaa !25
  %1768 = icmp eq i32 %1767, 2
  %1769 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 8
  %1770 = getelementptr inbounds %struct.ImageParameters, ptr %1765, i64 0, i32 127
  %1771 = load i32, ptr %1770, align 8, !tbaa !31
  %1772 = sext i32 %1771 to i64
  %1773 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1772, i64 %1676, i64 8
  %1774 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1772, i64 %1676, i64 8
  %1775 = select i1 %1768, ptr %1773, ptr %1774
  tail call void @biari_init_context(ptr noundef nonnull %1769, ptr noundef nonnull %1775) #14
  %1776 = load ptr, ptr @img, align 8, !tbaa !5
  %1777 = getelementptr inbounds %struct.ImageParameters, ptr %1776, i64 0, i32 5
  %1778 = load i32, ptr %1777, align 4, !tbaa !25
  %1779 = icmp eq i32 %1778, 2
  %1780 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 9
  %1781 = getelementptr inbounds %struct.ImageParameters, ptr %1776, i64 0, i32 127
  %1782 = load i32, ptr %1781, align 8, !tbaa !31
  %1783 = sext i32 %1782 to i64
  %1784 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1783, i64 %1676, i64 9
  %1785 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1783, i64 %1676, i64 9
  %1786 = select i1 %1779, ptr %1784, ptr %1785
  tail call void @biari_init_context(ptr noundef nonnull %1780, ptr noundef nonnull %1786) #14
  %1787 = load ptr, ptr @img, align 8, !tbaa !5
  %1788 = getelementptr inbounds %struct.ImageParameters, ptr %1787, i64 0, i32 5
  %1789 = load i32, ptr %1788, align 4, !tbaa !25
  %1790 = icmp eq i32 %1789, 2
  %1791 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 10
  %1792 = getelementptr inbounds %struct.ImageParameters, ptr %1787, i64 0, i32 127
  %1793 = load i32, ptr %1792, align 8, !tbaa !31
  %1794 = sext i32 %1793 to i64
  %1795 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1794, i64 %1676, i64 10
  %1796 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1794, i64 %1676, i64 10
  %1797 = select i1 %1790, ptr %1795, ptr %1796
  tail call void @biari_init_context(ptr noundef nonnull %1791, ptr noundef nonnull %1797) #14
  %1798 = load ptr, ptr @img, align 8, !tbaa !5
  %1799 = getelementptr inbounds %struct.ImageParameters, ptr %1798, i64 0, i32 5
  %1800 = load i32, ptr %1799, align 4, !tbaa !25
  %1801 = icmp eq i32 %1800, 2
  %1802 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 11
  %1803 = getelementptr inbounds %struct.ImageParameters, ptr %1798, i64 0, i32 127
  %1804 = load i32, ptr %1803, align 8, !tbaa !31
  %1805 = sext i32 %1804 to i64
  %1806 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1805, i64 %1676, i64 11
  %1807 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1805, i64 %1676, i64 11
  %1808 = select i1 %1801, ptr %1806, ptr %1807
  tail call void @biari_init_context(ptr noundef nonnull %1802, ptr noundef nonnull %1808) #14
  %1809 = load ptr, ptr @img, align 8, !tbaa !5
  %1810 = getelementptr inbounds %struct.ImageParameters, ptr %1809, i64 0, i32 5
  %1811 = load i32, ptr %1810, align 4, !tbaa !25
  %1812 = icmp eq i32 %1811, 2
  %1813 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 12
  %1814 = getelementptr inbounds %struct.ImageParameters, ptr %1809, i64 0, i32 127
  %1815 = load i32, ptr %1814, align 8, !tbaa !31
  %1816 = sext i32 %1815 to i64
  %1817 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1816, i64 %1676, i64 12
  %1818 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1816, i64 %1676, i64 12
  %1819 = select i1 %1812, ptr %1817, ptr %1818
  tail call void @biari_init_context(ptr noundef nonnull %1813, ptr noundef nonnull %1819) #14
  %1820 = load ptr, ptr @img, align 8, !tbaa !5
  %1821 = getelementptr inbounds %struct.ImageParameters, ptr %1820, i64 0, i32 5
  %1822 = load i32, ptr %1821, align 4, !tbaa !25
  %1823 = icmp eq i32 %1822, 2
  %1824 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 13
  %1825 = getelementptr inbounds %struct.ImageParameters, ptr %1820, i64 0, i32 127
  %1826 = load i32, ptr %1825, align 8, !tbaa !31
  %1827 = sext i32 %1826 to i64
  %1828 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1827, i64 %1676, i64 13
  %1829 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1827, i64 %1676, i64 13
  %1830 = select i1 %1823, ptr %1828, ptr %1829
  tail call void @biari_init_context(ptr noundef nonnull %1824, ptr noundef nonnull %1830) #14
  %1831 = load ptr, ptr @img, align 8, !tbaa !5
  %1832 = getelementptr inbounds %struct.ImageParameters, ptr %1831, i64 0, i32 5
  %1833 = load i32, ptr %1832, align 4, !tbaa !25
  %1834 = icmp eq i32 %1833, 2
  %1835 = getelementptr inbounds %struct.TextureInfoContexts, ptr %7, i64 0, i32 9, i64 %1676, i64 14
  %1836 = getelementptr inbounds %struct.ImageParameters, ptr %1831, i64 0, i32 127
  %1837 = load i32, ptr %1836, align 8, !tbaa !31
  %1838 = sext i32 %1837 to i64
  %1839 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1838, i64 %1676, i64 14
  %1840 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1838, i64 %1676, i64 14
  %1841 = select i1 %1834, ptr %1839, ptr %1840
  tail call void @biari_init_context(ptr noundef nonnull %1835, ptr noundef nonnull %1841) #14
  %1842 = add nuw nsw i64 %1676, 1
  %1843 = icmp eq i64 %1842, 8
  br i1 %1843, label %1844, label %1675, !llvm.loop !41

1844:                                             ; preds = %1675
  ret void
}

declare void @biari_init_context(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local double @XRate(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) local_unnamed_addr #7 {
  %3 = load ptr, ptr @img, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.ImageParameters, ptr %3, i64 0, i32 9
  %5 = load i32, ptr %4, align 4, !tbaa !42
  %6 = getelementptr inbounds %struct.BiContextType, ptr %0, i64 0, i32 2
  %7 = load i64, ptr %6, align 8, !tbaa !43
  %8 = load i32, ptr %1, align 4, !tbaa !18
  %9 = getelementptr inbounds i32, ptr %1, i64 1
  %10 = load i32, ptr %9, align 4, !tbaa !18
  %11 = getelementptr inbounds %struct.BiContextType, ptr %0, i64 0, i32 1
  %12 = load i8, ptr %11, align 2, !tbaa !46
  %13 = icmp eq i8 %12, 0
  %14 = load i16, ptr %0, align 8, !tbaa !47
  %15 = zext i16 %14 to i32
  %16 = add nuw nsw i32 %15, 64
  %17 = sub nsw i32 63, %15
  %18 = select i1 %13, i32 %17, i32 %16
  %19 = tail call i32 @llvm.smax.i32(i32 %5, i32 0)
  %20 = mul nsw i32 %8, %19
  %21 = ashr i32 %20, 4
  %22 = add nsw i32 %21, %10
  %23 = tail call i32 @llvm.smax.i32(i32 %22, i32 0)
  %24 = tail call i32 @llvm.smin.i32(i32 %23, i32 127)
  %25 = uitofp i64 %7 to double
  %26 = fmul double %25, 3.125000e-02
  %27 = fcmp ogt double %26, 1.000000e+00
  %28 = select i1 %27, double 1.000000e+00, double %26
  %29 = sext i32 %18 to i64
  %30 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %29
  %31 = load double, ptr %30, align 8, !tbaa !22
  %32 = zext i32 %24 to i64
  %33 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %32
  %34 = load double, ptr %33, align 8, !tbaa !22
  %35 = fneg double %28
  %36 = fmul double %31, %35
  %37 = tail call double @llvm.fmuladd.f64(double %36, double %34, double 0.000000e+00)
  %38 = sub nsw i32 127, %18
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !22
  %42 = xor i32 %24, 127
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %43
  %45 = load double, ptr %44, align 8, !tbaa !22
  %46 = fmul double %41, %35
  %47 = tail call double @llvm.fmuladd.f64(double %46, double %45, double %37)
  ret double %47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #8

; Function Attrs: nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define dso_local void @GetCtxModelNumber(ptr nocapture noundef writeonly %0, ptr noundef readonly %1, ptr noundef readonly %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr @img, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.ImageParameters, ptr %4, i64 0, i32 5
  %6 = load i32, ptr %5, align 4, !tbaa !25
  %7 = icmp ne i32 %6, 2
  %8 = getelementptr inbounds %struct.ImageParameters, ptr %4, i64 0, i32 9
  %9 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 0
  %10 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 0, i32 2
  %11 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 0, i32 1
  %12 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 1
  %13 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 1, i32 2
  %14 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 1, i32 1
  %15 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 2
  %16 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 2, i32 2
  %17 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 2, i32 1
  %18 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 0, i32 2
  %19 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 0, i32 1
  %20 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 1
  %21 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 1, i32 2
  %22 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 1, i32 1
  %23 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 0
  %24 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 0, i32 2
  %25 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 0, i32 1
  %26 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 1
  %27 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 1, i32 2
  %28 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 1, i32 1
  %29 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 2
  %30 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 2, i32 2
  %31 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 6, i64 2, i32 1
  %32 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 0, i32 2
  %33 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 0, i32 1
  %34 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 1
  %35 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 1, i32 2
  %36 = getelementptr inbounds [2 x %struct.BiContextType], ptr %2, i64 0, i64 1, i32 1
  %37 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 0
  %38 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 0, i32 2
  %39 = load i64, ptr %38, align 8, !tbaa !43
  %40 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 0, i32 1
  %41 = load i8, ptr %40, align 2, !tbaa !46
  %42 = icmp eq i8 %41, 0
  %43 = load i16, ptr %37, align 8, !tbaa !47
  %44 = zext i16 %43 to i32
  %45 = add nuw nsw i32 %44, 64
  %46 = sub nsw i32 63, %44
  %47 = select i1 %42, i32 %46, i32 %45
  %48 = uitofp i64 %39 to double
  %49 = fmul double %48, 3.125000e-02
  %50 = fcmp ogt double %49, 1.000000e+00
  %51 = select i1 %50, double 1.000000e+00, double %49
  %52 = sext i32 %47 to i64
  %53 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %52
  %54 = load double, ptr %53, align 8, !tbaa !22
  %55 = fneg double %51
  %56 = fmul double %54, %55
  %57 = sub nsw i32 127, %47
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %58
  %60 = load double, ptr %59, align 8, !tbaa !22
  %61 = fmul double %60, %55
  %62 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 1
  %63 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 1, i32 2
  %64 = load i64, ptr %63, align 8, !tbaa !43
  %65 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 1, i32 1
  %66 = load i8, ptr %65, align 2, !tbaa !46
  %67 = icmp eq i8 %66, 0
  %68 = load i16, ptr %62, align 8, !tbaa !47
  %69 = zext i16 %68 to i32
  %70 = add nuw nsw i32 %69, 64
  %71 = sub nsw i32 63, %69
  %72 = select i1 %67, i32 %71, i32 %70
  %73 = uitofp i64 %64 to double
  %74 = fmul double %73, 3.125000e-02
  %75 = fcmp ogt double %74, 1.000000e+00
  %76 = select i1 %75, double 1.000000e+00, double %74
  %77 = sext i32 %72 to i64
  %78 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %77
  %79 = load double, ptr %78, align 8, !tbaa !22
  %80 = fneg double %76
  %81 = fmul double %79, %80
  %82 = sub nsw i32 127, %72
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %83
  %85 = load double, ptr %84, align 8, !tbaa !22
  %86 = fmul double %85, %80
  %87 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 2
  %88 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 2, i32 2
  %89 = load i64, ptr %88, align 8, !tbaa !43
  %90 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 2, i32 1
  %91 = load i8, ptr %90, align 2, !tbaa !46
  %92 = icmp eq i8 %91, 0
  %93 = load i16, ptr %87, align 8, !tbaa !47
  %94 = zext i16 %93 to i32
  %95 = add nuw nsw i32 %94, 64
  %96 = sub nsw i32 63, %94
  %97 = select i1 %92, i32 %96, i32 %95
  %98 = uitofp i64 %89 to double
  %99 = fmul double %98, 3.125000e-02
  %100 = fcmp ogt double %99, 1.000000e+00
  %101 = select i1 %100, double 1.000000e+00, double %99
  %102 = sext i32 %97 to i64
  %103 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %102
  %104 = load double, ptr %103, align 8, !tbaa !22
  %105 = fneg double %101
  %106 = fmul double %104, %105
  %107 = sub nsw i32 127, %97
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %108
  %110 = load double, ptr %109, align 8, !tbaa !22
  %111 = fmul double %110, %105
  %112 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 3
  %113 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 3, i32 2
  %114 = load i64, ptr %113, align 8, !tbaa !43
  %115 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 4, i64 3, i32 1
  %116 = load i8, ptr %115, align 2, !tbaa !46
  %117 = icmp eq i8 %116, 0
  %118 = load i16, ptr %112, align 8, !tbaa !47
  %119 = zext i16 %118 to i32
  %120 = add nuw nsw i32 %119, 64
  %121 = sub nsw i32 63, %119
  %122 = select i1 %117, i32 %121, i32 %120
  %123 = uitofp i64 %114 to double
  %124 = fmul double %123, 3.125000e-02
  %125 = fcmp ogt double %124, 1.000000e+00
  %126 = select i1 %125, double 1.000000e+00, double %124
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %127
  %129 = load double, ptr %128, align 8, !tbaa !22
  %130 = fneg double %126
  %131 = fmul double %129, %130
  %132 = sub nsw i32 127, %122
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %133
  %135 = load double, ptr %134, align 8, !tbaa !22
  %136 = fmul double %135, %130
  %137 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 0
  %138 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 0, i32 2
  %139 = load i64, ptr %138, align 8, !tbaa !43
  %140 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 0, i32 1
  %141 = load i8, ptr %140, align 2, !tbaa !46
  %142 = icmp eq i8 %141, 0
  %143 = load i16, ptr %137, align 8, !tbaa !47
  %144 = zext i16 %143 to i32
  %145 = add nuw nsw i32 %144, 64
  %146 = sub nsw i32 63, %144
  %147 = select i1 %142, i32 %146, i32 %145
  %148 = uitofp i64 %139 to double
  %149 = fmul double %148, 3.125000e-02
  %150 = fcmp ogt double %149, 1.000000e+00
  %151 = select i1 %150, double 1.000000e+00, double %149
  %152 = sext i32 %147 to i64
  %153 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %152
  %154 = fneg double %151
  %155 = uitofp i64 %139 to double
  %156 = fmul double %155, 3.125000e-02
  %157 = fcmp ogt double %156, 1.000000e+00
  %158 = select i1 %157, double 1.000000e+00, double %156
  %159 = sext i32 %147 to i64
  %160 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %159
  %161 = fneg double %158
  %162 = sub nsw i32 127, %147
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %163
  %165 = load double, ptr %164, align 8, !tbaa !22
  %166 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 1
  %167 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 1, i32 2
  %168 = load i64, ptr %167, align 8, !tbaa !43
  %169 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 1, i32 1
  %170 = load i8, ptr %169, align 2, !tbaa !46
  %171 = icmp eq i8 %170, 0
  %172 = load i16, ptr %166, align 8, !tbaa !47
  %173 = zext i16 %172 to i32
  %174 = add nuw nsw i32 %173, 64
  %175 = sub nsw i32 63, %173
  %176 = select i1 %171, i32 %175, i32 %174
  %177 = uitofp i64 %168 to double
  %178 = fmul double %177, 3.125000e-02
  %179 = fcmp ogt double %178, 1.000000e+00
  %180 = select i1 %179, double 1.000000e+00, double %178
  %181 = sext i32 %176 to i64
  %182 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %181
  %183 = fneg double %180
  %184 = uitofp i64 %168 to double
  %185 = fmul double %184, 3.125000e-02
  %186 = fcmp ogt double %185, 1.000000e+00
  %187 = select i1 %186, double 1.000000e+00, double %185
  %188 = sext i32 %176 to i64
  %189 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %188
  %190 = fneg double %187
  %191 = sub nsw i32 127, %176
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %192
  %194 = load double, ptr %193, align 8, !tbaa !22
  %195 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 2
  %196 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 2, i32 2
  %197 = load i64, ptr %196, align 8, !tbaa !43
  %198 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 2, i32 1
  %199 = load i8, ptr %198, align 2, !tbaa !46
  %200 = icmp eq i8 %199, 0
  %201 = load i16, ptr %195, align 8, !tbaa !47
  %202 = zext i16 %201 to i32
  %203 = add nuw nsw i32 %202, 64
  %204 = sub nsw i32 63, %202
  %205 = select i1 %200, i32 %204, i32 %203
  %206 = uitofp i64 %197 to double
  %207 = fmul double %206, 3.125000e-02
  %208 = fcmp ogt double %207, 1.000000e+00
  %209 = select i1 %208, double 1.000000e+00, double %207
  %210 = sext i32 %205 to i64
  %211 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %210
  %212 = fneg double %209
  %213 = uitofp i64 %197 to double
  %214 = fmul double %213, 3.125000e-02
  %215 = fcmp ogt double %214, 1.000000e+00
  %216 = select i1 %215, double 1.000000e+00, double %214
  %217 = sext i32 %205 to i64
  %218 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %217
  %219 = fneg double %216
  %220 = sub nsw i32 127, %205
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %221
  %223 = load double, ptr %222, align 8, !tbaa !22
  %224 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 3
  %225 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 3, i32 2
  %226 = load i64, ptr %225, align 8, !tbaa !43
  %227 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 1, i64 3, i32 1
  %228 = load i8, ptr %227, align 2, !tbaa !46
  %229 = icmp eq i8 %228, 0
  %230 = load i16, ptr %224, align 8, !tbaa !47
  %231 = zext i16 %230 to i32
  %232 = add nuw nsw i32 %231, 64
  %233 = sub nsw i32 63, %231
  %234 = select i1 %229, i32 %233, i32 %232
  %235 = uitofp i64 %226 to double
  %236 = fmul double %235, 3.125000e-02
  %237 = fcmp ogt double %236, 1.000000e+00
  %238 = select i1 %237, double 1.000000e+00, double %236
  %239 = sext i32 %234 to i64
  %240 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %239
  %241 = fneg double %238
  %242 = uitofp i64 %226 to double
  %243 = fmul double %242, 3.125000e-02
  %244 = fcmp ogt double %243, 1.000000e+00
  %245 = select i1 %244, double 1.000000e+00, double %243
  %246 = sext i32 %234 to i64
  %247 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %246
  %248 = fneg double %245
  %249 = sub nsw i32 127, %234
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %250
  %252 = load double, ptr %251, align 8, !tbaa !22
  br label %256

253:                                              ; preds = %3925
  %254 = add nuw nsw i64 %258, 1
  %255 = load i32, ptr %5, align 4, !tbaa !25
  br label %256

256:                                              ; preds = %253, %3
  %257 = phi i32 [ %255, %253 ], [ %6, %3 ]
  %258 = phi i64 [ %254, %253 ], [ 0, %3 ]
  %259 = phi double [ %3926, %253 ], [ 1.000000e+30, %3 ]
  %260 = icmp eq i32 %257, 2
  %261 = load i32, ptr %8, align 4, !tbaa !42
  %262 = tail call i32 @llvm.smax.i32(i32 %261, i32 0)
  br label %264

263:                                              ; preds = %365
  br i1 %260, label %369, label %413

264:                                              ; preds = %256, %365
  %265 = phi i64 [ 0, %256 ], [ %367, %365 ]
  %266 = phi double [ 0.000000e+00, %256 ], [ %366, %365 ]
  br i1 %260, label %267, label %316

267:                                              ; preds = %264, %267
  %268 = phi i64 [ %314, %267 ], [ 0, %264 ]
  %269 = phi double [ %313, %267 ], [ %266, %264 ]
  %270 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %1, i64 0, i64 %265, i64 %268
  %271 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 0, i64 %265, i64 %268
  %272 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %1, i64 0, i64 %265, i64 %268, i32 2
  %273 = load i64, ptr %272, align 8, !tbaa !43
  %274 = load i32, ptr %271, align 8, !tbaa !18
  %275 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 0, i64 %265, i64 %268, i64 1
  %276 = load i32, ptr %275, align 4, !tbaa !18
  %277 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %1, i64 0, i64 %265, i64 %268, i32 1
  %278 = load i8, ptr %277, align 2, !tbaa !46
  %279 = icmp eq i8 %278, 0
  %280 = load i16, ptr %270, align 8, !tbaa !47
  %281 = zext i16 %280 to i32
  %282 = add nuw nsw i32 %281, 64
  %283 = sub nsw i32 63, %281
  %284 = select i1 %279, i32 %283, i32 %282
  %285 = mul nsw i32 %274, %262
  %286 = ashr i32 %285, 4
  %287 = add nsw i32 %286, %276
  %288 = tail call i32 @llvm.smax.i32(i32 %287, i32 0)
  %289 = tail call i32 @llvm.smin.i32(i32 %288, i32 127)
  %290 = uitofp i64 %273 to double
  %291 = fmul double %290, 3.125000e-02
  %292 = fcmp ogt double %291, 1.000000e+00
  %293 = select i1 %292, double 1.000000e+00, double %291
  %294 = sext i32 %284 to i64
  %295 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %294
  %296 = load double, ptr %295, align 8, !tbaa !22
  %297 = zext i32 %289 to i64
  %298 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %297
  %299 = load double, ptr %298, align 8, !tbaa !22
  %300 = fneg double %293
  %301 = fmul double %296, %300
  %302 = tail call double @llvm.fmuladd.f64(double %301, double %299, double 0.000000e+00)
  %303 = sub nsw i32 127, %284
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %304
  %306 = load double, ptr %305, align 8, !tbaa !22
  %307 = xor i32 %289, 127
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %308
  %310 = load double, ptr %309, align 8, !tbaa !22
  %311 = fmul double %306, %300
  %312 = tail call double @llvm.fmuladd.f64(double %311, double %310, double %302)
  %313 = fadd double %269, %312
  %314 = add nuw nsw i64 %268, 1
  %315 = icmp eq i64 %314, 11
  br i1 %315, label %365, label %267, !llvm.loop !48

316:                                              ; preds = %264, %316
  %317 = phi i64 [ %363, %316 ], [ 0, %264 ]
  %318 = phi double [ %362, %316 ], [ %266, %264 ]
  %319 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %1, i64 0, i64 %265, i64 %317
  %320 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %258, i64 %265, i64 %317
  %321 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %1, i64 0, i64 %265, i64 %317, i32 2
  %322 = load i64, ptr %321, align 8, !tbaa !43
  %323 = load i32, ptr %320, align 8, !tbaa !18
  %324 = getelementptr inbounds i32, ptr %320, i64 1
  %325 = load i32, ptr %324, align 4, !tbaa !18
  %326 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %1, i64 0, i64 %265, i64 %317, i32 1
  %327 = load i8, ptr %326, align 2, !tbaa !46
  %328 = icmp eq i8 %327, 0
  %329 = load i16, ptr %319, align 8, !tbaa !47
  %330 = zext i16 %329 to i32
  %331 = add nuw nsw i32 %330, 64
  %332 = sub nsw i32 63, %330
  %333 = select i1 %328, i32 %332, i32 %331
  %334 = mul nsw i32 %323, %262
  %335 = ashr i32 %334, 4
  %336 = add nsw i32 %335, %325
  %337 = tail call i32 @llvm.smax.i32(i32 %336, i32 0)
  %338 = tail call i32 @llvm.smin.i32(i32 %337, i32 127)
  %339 = uitofp i64 %322 to double
  %340 = fmul double %339, 3.125000e-02
  %341 = fcmp ogt double %340, 1.000000e+00
  %342 = select i1 %341, double 1.000000e+00, double %340
  %343 = sext i32 %333 to i64
  %344 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %343
  %345 = load double, ptr %344, align 8, !tbaa !22
  %346 = zext i32 %338 to i64
  %347 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %346
  %348 = load double, ptr %347, align 8, !tbaa !22
  %349 = fneg double %342
  %350 = fmul double %345, %349
  %351 = tail call double @llvm.fmuladd.f64(double %350, double %348, double 0.000000e+00)
  %352 = sub nsw i32 127, %333
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %353
  %355 = load double, ptr %354, align 8, !tbaa !22
  %356 = xor i32 %338, 127
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %357
  %359 = load double, ptr %358, align 8, !tbaa !22
  %360 = fmul double %355, %349
  %361 = tail call double @llvm.fmuladd.f64(double %360, double %359, double %351)
  %362 = fadd double %318, %361
  %363 = add nuw nsw i64 %317, 1
  %364 = icmp eq i64 %363, 11
  br i1 %364, label %365, label %316, !llvm.loop !48

365:                                              ; preds = %316, %267
  %366 = phi double [ %313, %267 ], [ %362, %316 ]
  %367 = add nuw nsw i64 %265, 1
  %368 = icmp eq i64 %367, 3
  br i1 %368, label %263, label %264, !llvm.loop !49

369:                                              ; preds = %263, %369
  %370 = phi i64 [ %411, %369 ], [ 0, %263 ]
  %371 = phi double [ %410, %369 ], [ %366, %263 ]
  %372 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 0, i64 %370
  %373 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 0, i64 %370, i32 2
  %374 = load i64, ptr %373, align 8, !tbaa !43
  %375 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 0, i64 0, i64 %370, i64 1
  %376 = load i32, ptr %375, align 4, !tbaa !18
  %377 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 0, i64 %370, i32 1
  %378 = load i8, ptr %377, align 2, !tbaa !46
  %379 = icmp eq i8 %378, 0
  %380 = load i16, ptr %372, align 8, !tbaa !47
  %381 = zext i16 %380 to i32
  %382 = add nuw nsw i32 %381, 64
  %383 = sub nsw i32 63, %381
  %384 = select i1 %379, i32 %383, i32 %382
  %385 = tail call i32 @llvm.smax.i32(i32 %376, i32 0)
  %386 = tail call i32 @llvm.smin.i32(i32 %385, i32 127)
  %387 = uitofp i64 %374 to double
  %388 = fmul double %387, 3.125000e-02
  %389 = fcmp ogt double %388, 1.000000e+00
  %390 = select i1 %389, double 1.000000e+00, double %388
  %391 = sext i32 %384 to i64
  %392 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %391
  %393 = load double, ptr %392, align 8, !tbaa !22
  %394 = zext i32 %386 to i64
  %395 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %394
  %396 = load double, ptr %395, align 8, !tbaa !22
  %397 = fneg double %390
  %398 = fmul double %393, %397
  %399 = tail call double @llvm.fmuladd.f64(double %398, double %396, double 0.000000e+00)
  %400 = sub nsw i32 127, %384
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %401
  %403 = load double, ptr %402, align 8, !tbaa !22
  %404 = xor i32 %386, 127
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %405
  %407 = load double, ptr %406, align 8, !tbaa !22
  %408 = fmul double %403, %397
  %409 = tail call double @llvm.fmuladd.f64(double %408, double %407, double %399)
  %410 = fadd double %371, %409
  %411 = add nuw nsw i64 %370, 1
  %412 = icmp eq i64 %411, 9
  br i1 %412, label %464, label %369, !llvm.loop !50

413:                                              ; preds = %263
  %414 = tail call i32 @llvm.smax.i32(i32 %261, i32 0)
  br label %415

415:                                              ; preds = %413, %415
  %416 = phi i64 [ 0, %413 ], [ %462, %415 ]
  %417 = phi double [ %366, %413 ], [ %461, %415 ]
  %418 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 0, i64 %416
  %419 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %258, i64 0, i64 %416
  %420 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 0, i64 %416, i32 2
  %421 = load i64, ptr %420, align 8, !tbaa !43
  %422 = load i32, ptr %419, align 8, !tbaa !18
  %423 = getelementptr inbounds i32, ptr %419, i64 1
  %424 = load i32, ptr %423, align 4, !tbaa !18
  %425 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 0, i64 %416, i32 1
  %426 = load i8, ptr %425, align 2, !tbaa !46
  %427 = icmp eq i8 %426, 0
  %428 = load i16, ptr %418, align 8, !tbaa !47
  %429 = zext i16 %428 to i32
  %430 = add nuw nsw i32 %429, 64
  %431 = sub nsw i32 63, %429
  %432 = select i1 %427, i32 %431, i32 %430
  %433 = mul nsw i32 %422, %414
  %434 = ashr i32 %433, 4
  %435 = add nsw i32 %434, %424
  %436 = tail call i32 @llvm.smax.i32(i32 %435, i32 0)
  %437 = tail call i32 @llvm.smin.i32(i32 %436, i32 127)
  %438 = uitofp i64 %421 to double
  %439 = fmul double %438, 3.125000e-02
  %440 = fcmp ogt double %439, 1.000000e+00
  %441 = select i1 %440, double 1.000000e+00, double %439
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %442
  %444 = load double, ptr %443, align 8, !tbaa !22
  %445 = zext i32 %437 to i64
  %446 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %445
  %447 = load double, ptr %446, align 8, !tbaa !22
  %448 = fneg double %441
  %449 = fmul double %444, %448
  %450 = tail call double @llvm.fmuladd.f64(double %449, double %447, double 0.000000e+00)
  %451 = sub nsw i32 127, %432
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %452
  %454 = load double, ptr %453, align 8, !tbaa !22
  %455 = xor i32 %437, 127
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %456
  %458 = load double, ptr %457, align 8, !tbaa !22
  %459 = fmul double %454, %448
  %460 = tail call double @llvm.fmuladd.f64(double %459, double %458, double %450)
  %461 = fadd double %417, %460
  %462 = add nuw nsw i64 %416, 1
  %463 = icmp eq i64 %462, 9
  br i1 %463, label %464, label %415, !llvm.loop !50

464:                                              ; preds = %415, %369
  %465 = phi double [ %410, %369 ], [ %461, %415 ]
  br i1 %260, label %517, label %466

466:                                              ; preds = %464
  %467 = tail call i32 @llvm.smax.i32(i32 %261, i32 0)
  br label %468

468:                                              ; preds = %468, %466
  %469 = phi i64 [ 0, %466 ], [ %515, %468 ]
  %470 = phi double [ %465, %466 ], [ %514, %468 ]
  %471 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 1, i64 %469
  %472 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %258, i64 1, i64 %469
  %473 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 1, i64 %469, i32 2
  %474 = load i64, ptr %473, align 8, !tbaa !43
  %475 = load i32, ptr %472, align 8, !tbaa !18
  %476 = getelementptr inbounds i32, ptr %472, i64 1
  %477 = load i32, ptr %476, align 4, !tbaa !18
  %478 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 1, i64 %469, i32 1
  %479 = load i8, ptr %478, align 2, !tbaa !46
  %480 = icmp eq i8 %479, 0
  %481 = load i16, ptr %471, align 8, !tbaa !47
  %482 = zext i16 %481 to i32
  %483 = add nuw nsw i32 %482, 64
  %484 = sub nsw i32 63, %482
  %485 = select i1 %480, i32 %484, i32 %483
  %486 = mul nsw i32 %475, %467
  %487 = ashr i32 %486, 4
  %488 = add nsw i32 %487, %477
  %489 = tail call i32 @llvm.smax.i32(i32 %488, i32 0)
  %490 = tail call i32 @llvm.smin.i32(i32 %489, i32 127)
  %491 = uitofp i64 %474 to double
  %492 = fmul double %491, 3.125000e-02
  %493 = fcmp ogt double %492, 1.000000e+00
  %494 = select i1 %493, double 1.000000e+00, double %492
  %495 = sext i32 %485 to i64
  %496 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %495
  %497 = load double, ptr %496, align 8, !tbaa !22
  %498 = zext i32 %490 to i64
  %499 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %498
  %500 = load double, ptr %499, align 8, !tbaa !22
  %501 = fneg double %494
  %502 = fmul double %497, %501
  %503 = tail call double @llvm.fmuladd.f64(double %502, double %500, double 0.000000e+00)
  %504 = sub nsw i32 127, %485
  %505 = sext i32 %504 to i64
  %506 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %505
  %507 = load double, ptr %506, align 8, !tbaa !22
  %508 = xor i32 %490, 127
  %509 = zext i32 %508 to i64
  %510 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %509
  %511 = load double, ptr %510, align 8, !tbaa !22
  %512 = fmul double %507, %501
  %513 = tail call double @llvm.fmuladd.f64(double %512, double %511, double %503)
  %514 = fadd double %470, %513
  %515 = add nuw nsw i64 %469, 1
  %516 = icmp eq i64 %515, 9
  br i1 %516, label %561, label %468, !llvm.loop !50

517:                                              ; preds = %464, %517
  %518 = phi i64 [ %559, %517 ], [ 0, %464 ]
  %519 = phi double [ %558, %517 ], [ %465, %464 ]
  %520 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 1, i64 %518
  %521 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 1, i64 %518, i32 2
  %522 = load i64, ptr %521, align 8, !tbaa !43
  %523 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 0, i64 1, i64 %518, i64 1
  %524 = load i32, ptr %523, align 4, !tbaa !18
  %525 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 1, i64 1, i64 %518, i32 1
  %526 = load i8, ptr %525, align 2, !tbaa !46
  %527 = icmp eq i8 %526, 0
  %528 = load i16, ptr %520, align 8, !tbaa !47
  %529 = zext i16 %528 to i32
  %530 = add nuw nsw i32 %529, 64
  %531 = sub nsw i32 63, %529
  %532 = select i1 %527, i32 %531, i32 %530
  %533 = tail call i32 @llvm.smax.i32(i32 %524, i32 0)
  %534 = tail call i32 @llvm.smin.i32(i32 %533, i32 127)
  %535 = uitofp i64 %522 to double
  %536 = fmul double %535, 3.125000e-02
  %537 = fcmp ogt double %536, 1.000000e+00
  %538 = select i1 %537, double 1.000000e+00, double %536
  %539 = sext i32 %532 to i64
  %540 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %539
  %541 = load double, ptr %540, align 8, !tbaa !22
  %542 = zext i32 %534 to i64
  %543 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %542
  %544 = load double, ptr %543, align 8, !tbaa !22
  %545 = fneg double %538
  %546 = fmul double %541, %545
  %547 = tail call double @llvm.fmuladd.f64(double %546, double %544, double 0.000000e+00)
  %548 = sub nsw i32 127, %532
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %549
  %551 = load double, ptr %550, align 8, !tbaa !22
  %552 = xor i32 %534, 127
  %553 = zext i32 %552 to i64
  %554 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %553
  %555 = load double, ptr %554, align 8, !tbaa !22
  %556 = fmul double %551, %545
  %557 = tail call double @llvm.fmuladd.f64(double %556, double %555, double %547)
  %558 = fadd double %519, %557
  %559 = add nuw nsw i64 %518, 1
  %560 = icmp eq i64 %559, 9
  br i1 %560, label %561, label %517, !llvm.loop !50

561:                                              ; preds = %468, %517
  %562 = phi double [ %558, %517 ], [ %514, %468 ]
  br i1 %260, label %563, label %607

563:                                              ; preds = %561, %563
  %564 = phi i64 [ %605, %563 ], [ 0, %561 ]
  %565 = phi double [ %604, %563 ], [ %562, %561 ]
  %566 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 0, i64 %564
  %567 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 0, i64 %564, i32 2
  %568 = load i64, ptr %567, align 8, !tbaa !43
  %569 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 0, i64 0, i64 %564, i64 1
  %570 = load i32, ptr %569, align 4, !tbaa !18
  %571 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 0, i64 %564, i32 1
  %572 = load i8, ptr %571, align 2, !tbaa !46
  %573 = icmp eq i8 %572, 0
  %574 = load i16, ptr %566, align 8, !tbaa !47
  %575 = zext i16 %574 to i32
  %576 = add nuw nsw i32 %575, 64
  %577 = sub nsw i32 63, %575
  %578 = select i1 %573, i32 %577, i32 %576
  %579 = tail call i32 @llvm.smax.i32(i32 %570, i32 0)
  %580 = tail call i32 @llvm.smin.i32(i32 %579, i32 127)
  %581 = uitofp i64 %568 to double
  %582 = fmul double %581, 3.125000e-02
  %583 = fcmp ogt double %582, 1.000000e+00
  %584 = select i1 %583, double 1.000000e+00, double %582
  %585 = sext i32 %578 to i64
  %586 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %585
  %587 = load double, ptr %586, align 8, !tbaa !22
  %588 = zext i32 %580 to i64
  %589 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %588
  %590 = load double, ptr %589, align 8, !tbaa !22
  %591 = fneg double %584
  %592 = fmul double %587, %591
  %593 = tail call double @llvm.fmuladd.f64(double %592, double %590, double 0.000000e+00)
  %594 = sub nsw i32 127, %578
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %595
  %597 = load double, ptr %596, align 8, !tbaa !22
  %598 = xor i32 %580, 127
  %599 = zext i32 %598 to i64
  %600 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %599
  %601 = load double, ptr %600, align 8, !tbaa !22
  %602 = fmul double %597, %591
  %603 = tail call double @llvm.fmuladd.f64(double %602, double %601, double %593)
  %604 = fadd double %565, %603
  %605 = add nuw nsw i64 %564, 1
  %606 = icmp eq i64 %605, 10
  br i1 %606, label %658, label %563, !llvm.loop !51

607:                                              ; preds = %561
  %608 = tail call i32 @llvm.smax.i32(i32 %261, i32 0)
  br label %609

609:                                              ; preds = %607, %609
  %610 = phi i64 [ 0, %607 ], [ %656, %609 ]
  %611 = phi double [ %562, %607 ], [ %655, %609 ]
  %612 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 0, i64 %610
  %613 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %258, i64 0, i64 %610
  %614 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 0, i64 %610, i32 2
  %615 = load i64, ptr %614, align 8, !tbaa !43
  %616 = load i32, ptr %613, align 8, !tbaa !18
  %617 = getelementptr inbounds i32, ptr %613, i64 1
  %618 = load i32, ptr %617, align 4, !tbaa !18
  %619 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 0, i64 %610, i32 1
  %620 = load i8, ptr %619, align 2, !tbaa !46
  %621 = icmp eq i8 %620, 0
  %622 = load i16, ptr %612, align 8, !tbaa !47
  %623 = zext i16 %622 to i32
  %624 = add nuw nsw i32 %623, 64
  %625 = sub nsw i32 63, %623
  %626 = select i1 %621, i32 %625, i32 %624
  %627 = mul nsw i32 %616, %608
  %628 = ashr i32 %627, 4
  %629 = add nsw i32 %628, %618
  %630 = tail call i32 @llvm.smax.i32(i32 %629, i32 0)
  %631 = tail call i32 @llvm.smin.i32(i32 %630, i32 127)
  %632 = uitofp i64 %615 to double
  %633 = fmul double %632, 3.125000e-02
  %634 = fcmp ogt double %633, 1.000000e+00
  %635 = select i1 %634, double 1.000000e+00, double %633
  %636 = sext i32 %626 to i64
  %637 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %636
  %638 = load double, ptr %637, align 8, !tbaa !22
  %639 = zext i32 %631 to i64
  %640 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %639
  %641 = load double, ptr %640, align 8, !tbaa !22
  %642 = fneg double %635
  %643 = fmul double %638, %642
  %644 = tail call double @llvm.fmuladd.f64(double %643, double %641, double 0.000000e+00)
  %645 = sub nsw i32 127, %626
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %646
  %648 = load double, ptr %647, align 8, !tbaa !22
  %649 = xor i32 %631, 127
  %650 = zext i32 %649 to i64
  %651 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %650
  %652 = load double, ptr %651, align 8, !tbaa !22
  %653 = fmul double %648, %642
  %654 = tail call double @llvm.fmuladd.f64(double %653, double %652, double %644)
  %655 = fadd double %611, %654
  %656 = add nuw nsw i64 %610, 1
  %657 = icmp eq i64 %656, 10
  br i1 %657, label %658, label %609, !llvm.loop !51

658:                                              ; preds = %609, %563
  %659 = phi double [ %604, %563 ], [ %655, %609 ]
  br i1 %260, label %711, label %660

660:                                              ; preds = %658
  %661 = tail call i32 @llvm.smax.i32(i32 %261, i32 0)
  br label %662

662:                                              ; preds = %662, %660
  %663 = phi i64 [ 0, %660 ], [ %709, %662 ]
  %664 = phi double [ %659, %660 ], [ %708, %662 ]
  %665 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 1, i64 %663
  %666 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %258, i64 1, i64 %663
  %667 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 1, i64 %663, i32 2
  %668 = load i64, ptr %667, align 8, !tbaa !43
  %669 = load i32, ptr %666, align 8, !tbaa !18
  %670 = getelementptr inbounds i32, ptr %666, i64 1
  %671 = load i32, ptr %670, align 4, !tbaa !18
  %672 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 1, i64 %663, i32 1
  %673 = load i8, ptr %672, align 2, !tbaa !46
  %674 = icmp eq i8 %673, 0
  %675 = load i16, ptr %665, align 8, !tbaa !47
  %676 = zext i16 %675 to i32
  %677 = add nuw nsw i32 %676, 64
  %678 = sub nsw i32 63, %676
  %679 = select i1 %674, i32 %678, i32 %677
  %680 = mul nsw i32 %669, %661
  %681 = ashr i32 %680, 4
  %682 = add nsw i32 %681, %671
  %683 = tail call i32 @llvm.smax.i32(i32 %682, i32 0)
  %684 = tail call i32 @llvm.smin.i32(i32 %683, i32 127)
  %685 = uitofp i64 %668 to double
  %686 = fmul double %685, 3.125000e-02
  %687 = fcmp ogt double %686, 1.000000e+00
  %688 = select i1 %687, double 1.000000e+00, double %686
  %689 = sext i32 %679 to i64
  %690 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %689
  %691 = load double, ptr %690, align 8, !tbaa !22
  %692 = zext i32 %684 to i64
  %693 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %692
  %694 = load double, ptr %693, align 8, !tbaa !22
  %695 = fneg double %688
  %696 = fmul double %691, %695
  %697 = tail call double @llvm.fmuladd.f64(double %696, double %694, double 0.000000e+00)
  %698 = sub nsw i32 127, %679
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %699
  %701 = load double, ptr %700, align 8, !tbaa !22
  %702 = xor i32 %684, 127
  %703 = zext i32 %702 to i64
  %704 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %703
  %705 = load double, ptr %704, align 8, !tbaa !22
  %706 = fmul double %701, %695
  %707 = tail call double @llvm.fmuladd.f64(double %706, double %705, double %697)
  %708 = fadd double %664, %707
  %709 = add nuw nsw i64 %663, 1
  %710 = icmp eq i64 %709, 10
  br i1 %710, label %755, label %662, !llvm.loop !51

711:                                              ; preds = %658, %711
  %712 = phi i64 [ %753, %711 ], [ 0, %658 ]
  %713 = phi double [ %752, %711 ], [ %659, %658 ]
  %714 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 1, i64 %712
  %715 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 1, i64 %712, i32 2
  %716 = load i64, ptr %715, align 8, !tbaa !43
  %717 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 0, i64 1, i64 %712, i64 1
  %718 = load i32, ptr %717, align 4, !tbaa !18
  %719 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 2, i64 1, i64 %712, i32 1
  %720 = load i8, ptr %719, align 2, !tbaa !46
  %721 = icmp eq i8 %720, 0
  %722 = load i16, ptr %714, align 8, !tbaa !47
  %723 = zext i16 %722 to i32
  %724 = add nuw nsw i32 %723, 64
  %725 = sub nsw i32 63, %723
  %726 = select i1 %721, i32 %725, i32 %724
  %727 = tail call i32 @llvm.smax.i32(i32 %718, i32 0)
  %728 = tail call i32 @llvm.smin.i32(i32 %727, i32 127)
  %729 = uitofp i64 %716 to double
  %730 = fmul double %729, 3.125000e-02
  %731 = fcmp ogt double %730, 1.000000e+00
  %732 = select i1 %731, double 1.000000e+00, double %730
  %733 = sext i32 %726 to i64
  %734 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %733
  %735 = load double, ptr %734, align 8, !tbaa !22
  %736 = zext i32 %728 to i64
  %737 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %736
  %738 = load double, ptr %737, align 8, !tbaa !22
  %739 = fneg double %732
  %740 = fmul double %735, %739
  %741 = tail call double @llvm.fmuladd.f64(double %740, double %738, double 0.000000e+00)
  %742 = sub nsw i32 127, %726
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %743
  %745 = load double, ptr %744, align 8, !tbaa !22
  %746 = xor i32 %728, 127
  %747 = zext i32 %746 to i64
  %748 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %747
  %749 = load double, ptr %748, align 8, !tbaa !22
  %750 = fmul double %745, %739
  %751 = tail call double @llvm.fmuladd.f64(double %750, double %749, double %741)
  %752 = fadd double %713, %751
  %753 = add nuw nsw i64 %712, 1
  %754 = icmp eq i64 %753, 10
  br i1 %754, label %755, label %711, !llvm.loop !51

755:                                              ; preds = %662, %711
  %756 = phi double [ %752, %711 ], [ %708, %662 ]
  br label %826

757:                                              ; preds = %1310
  %758 = load i32, ptr %5, align 4, !tbaa !25
  %759 = icmp eq i32 %758, 2
  %760 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %258
  %761 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %258
  %762 = select i1 %759, ptr %760, ptr %761
  %763 = getelementptr inbounds [4 x [2 x i32]], ptr %762, i64 0, i64 0, i64 1
  %764 = load i32, ptr %763, align 4, !tbaa !18
  %765 = tail call i32 @llvm.smax.i32(i32 %764, i32 0)
  %766 = tail call i32 @llvm.smin.i32(i32 %765, i32 127)
  %767 = zext i32 %766 to i64
  %768 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %767
  %769 = load double, ptr %768, align 8, !tbaa !22
  %770 = tail call double @llvm.fmuladd.f64(double %56, double %769, double 0.000000e+00)
  %771 = xor i32 %766, 127
  %772 = zext i32 %771 to i64
  %773 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %772
  %774 = load double, ptr %773, align 8, !tbaa !22
  %775 = tail call double @llvm.fmuladd.f64(double %61, double %774, double %770)
  %776 = fadd double %1326, %775
  %777 = select i1 %759, ptr %760, ptr %761
  %778 = getelementptr inbounds [4 x [2 x i32]], ptr %777, i64 0, i64 1, i64 1
  %779 = load i32, ptr %778, align 4, !tbaa !18
  %780 = tail call i32 @llvm.smax.i32(i32 %779, i32 0)
  %781 = tail call i32 @llvm.smin.i32(i32 %780, i32 127)
  %782 = zext i32 %781 to i64
  %783 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %782
  %784 = load double, ptr %783, align 8, !tbaa !22
  %785 = tail call double @llvm.fmuladd.f64(double %81, double %784, double 0.000000e+00)
  %786 = xor i32 %781, 127
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %787
  %789 = load double, ptr %788, align 8, !tbaa !22
  %790 = tail call double @llvm.fmuladd.f64(double %86, double %789, double %785)
  %791 = fadd double %776, %790
  %792 = select i1 %759, ptr %760, ptr %761
  %793 = getelementptr inbounds [4 x [2 x i32]], ptr %792, i64 0, i64 2, i64 1
  %794 = load i32, ptr %793, align 4, !tbaa !18
  %795 = tail call i32 @llvm.smax.i32(i32 %794, i32 0)
  %796 = tail call i32 @llvm.smin.i32(i32 %795, i32 127)
  %797 = zext i32 %796 to i64
  %798 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %797
  %799 = load double, ptr %798, align 8, !tbaa !22
  %800 = tail call double @llvm.fmuladd.f64(double %106, double %799, double 0.000000e+00)
  %801 = xor i32 %796, 127
  %802 = zext i32 %801 to i64
  %803 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %802
  %804 = load double, ptr %803, align 8, !tbaa !22
  %805 = tail call double @llvm.fmuladd.f64(double %111, double %804, double %800)
  %806 = fadd double %791, %805
  %807 = select i1 %759, ptr %760, ptr %761
  %808 = getelementptr inbounds [4 x [2 x i32]], ptr %807, i64 0, i64 3, i64 1
  %809 = load i32, ptr %808, align 4, !tbaa !18
  %810 = tail call i32 @llvm.smax.i32(i32 %809, i32 0)
  %811 = tail call i32 @llvm.smin.i32(i32 %810, i32 127)
  %812 = zext i32 %811 to i64
  %813 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %812
  %814 = load double, ptr %813, align 8, !tbaa !22
  %815 = tail call double @llvm.fmuladd.f64(double %131, double %814, double 0.000000e+00)
  %816 = xor i32 %811, 127
  %817 = zext i32 %816 to i64
  %818 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %817
  %819 = load double, ptr %818, align 8, !tbaa !22
  %820 = tail call double @llvm.fmuladd.f64(double %136, double %819, double %815)
  %821 = fadd double %806, %820
  %822 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %258
  %823 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %258
  %824 = load i32, ptr %8, align 4, !tbaa !42
  %825 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  br label %1327

826:                                              ; preds = %755, %1310
  %827 = phi i1 [ false, %1310 ], [ true, %755 ]
  %828 = phi i64 [ 1, %1310 ], [ 0, %755 ]
  %829 = phi double [ %1326, %1310 ], [ %756, %755 ]
  br i1 %260, label %830, label %1054

830:                                              ; preds = %826
  %831 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 0
  %832 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 0, i32 2
  %833 = load i64, ptr %832, align 8, !tbaa !43
  %834 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 0, i64 %828, i64 0, i64 1
  %835 = load i32, ptr %834, align 4, !tbaa !18
  %836 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 0, i32 1
  %837 = load i8, ptr %836, align 2, !tbaa !46
  %838 = icmp eq i8 %837, 0
  %839 = load i16, ptr %831, align 8, !tbaa !47
  %840 = zext i16 %839 to i32
  %841 = add nuw nsw i32 %840, 64
  %842 = sub nsw i32 63, %840
  %843 = select i1 %838, i32 %842, i32 %841
  %844 = tail call i32 @llvm.smax.i32(i32 %835, i32 0)
  %845 = tail call i32 @llvm.smin.i32(i32 %844, i32 127)
  %846 = uitofp i64 %833 to double
  %847 = fmul double %846, 3.125000e-02
  %848 = fcmp ogt double %847, 1.000000e+00
  %849 = select i1 %848, double 1.000000e+00, double %847
  %850 = sext i32 %843 to i64
  %851 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %850
  %852 = load double, ptr %851, align 8, !tbaa !22
  %853 = zext i32 %845 to i64
  %854 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %853
  %855 = load double, ptr %854, align 8, !tbaa !22
  %856 = fneg double %849
  %857 = fmul double %852, %856
  %858 = tail call double @llvm.fmuladd.f64(double %857, double %855, double 0.000000e+00)
  %859 = sub nsw i32 127, %843
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %860
  %862 = load double, ptr %861, align 8, !tbaa !22
  %863 = xor i32 %845, 127
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %864
  %866 = load double, ptr %865, align 8, !tbaa !22
  %867 = fmul double %862, %856
  %868 = tail call double @llvm.fmuladd.f64(double %867, double %866, double %858)
  %869 = fadd double %829, %868
  %870 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 1
  %871 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 1, i32 2
  %872 = load i64, ptr %871, align 8, !tbaa !43
  %873 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 0, i64 %828, i64 1, i64 1
  %874 = load i32, ptr %873, align 4, !tbaa !18
  %875 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 1, i32 1
  %876 = load i8, ptr %875, align 2, !tbaa !46
  %877 = icmp eq i8 %876, 0
  %878 = load i16, ptr %870, align 8, !tbaa !47
  %879 = zext i16 %878 to i32
  %880 = add nuw nsw i32 %879, 64
  %881 = sub nsw i32 63, %879
  %882 = select i1 %877, i32 %881, i32 %880
  %883 = tail call i32 @llvm.smax.i32(i32 %874, i32 0)
  %884 = tail call i32 @llvm.smin.i32(i32 %883, i32 127)
  %885 = uitofp i64 %872 to double
  %886 = fmul double %885, 3.125000e-02
  %887 = fcmp ogt double %886, 1.000000e+00
  %888 = select i1 %887, double 1.000000e+00, double %886
  %889 = sext i32 %882 to i64
  %890 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %889
  %891 = load double, ptr %890, align 8, !tbaa !22
  %892 = zext i32 %884 to i64
  %893 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %892
  %894 = load double, ptr %893, align 8, !tbaa !22
  %895 = fneg double %888
  %896 = fmul double %891, %895
  %897 = tail call double @llvm.fmuladd.f64(double %896, double %894, double 0.000000e+00)
  %898 = sub nsw i32 127, %882
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %899
  %901 = load double, ptr %900, align 8, !tbaa !22
  %902 = xor i32 %884, 127
  %903 = zext i32 %902 to i64
  %904 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %903
  %905 = load double, ptr %904, align 8, !tbaa !22
  %906 = fmul double %901, %895
  %907 = tail call double @llvm.fmuladd.f64(double %906, double %905, double %897)
  %908 = fadd double %869, %907
  %909 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 2
  %910 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 2, i32 2
  %911 = load i64, ptr %910, align 8, !tbaa !43
  %912 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 0, i64 %828, i64 2, i64 1
  %913 = load i32, ptr %912, align 4, !tbaa !18
  %914 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 2, i32 1
  %915 = load i8, ptr %914, align 2, !tbaa !46
  %916 = icmp eq i8 %915, 0
  %917 = load i16, ptr %909, align 8, !tbaa !47
  %918 = zext i16 %917 to i32
  %919 = add nuw nsw i32 %918, 64
  %920 = sub nsw i32 63, %918
  %921 = select i1 %916, i32 %920, i32 %919
  %922 = tail call i32 @llvm.smax.i32(i32 %913, i32 0)
  %923 = tail call i32 @llvm.smin.i32(i32 %922, i32 127)
  %924 = uitofp i64 %911 to double
  %925 = fmul double %924, 3.125000e-02
  %926 = fcmp ogt double %925, 1.000000e+00
  %927 = select i1 %926, double 1.000000e+00, double %925
  %928 = sext i32 %921 to i64
  %929 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %928
  %930 = load double, ptr %929, align 8, !tbaa !22
  %931 = zext i32 %923 to i64
  %932 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %931
  %933 = load double, ptr %932, align 8, !tbaa !22
  %934 = fneg double %927
  %935 = fmul double %930, %934
  %936 = tail call double @llvm.fmuladd.f64(double %935, double %933, double 0.000000e+00)
  %937 = sub nsw i32 127, %921
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %938
  %940 = load double, ptr %939, align 8, !tbaa !22
  %941 = xor i32 %923, 127
  %942 = zext i32 %941 to i64
  %943 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %942
  %944 = load double, ptr %943, align 8, !tbaa !22
  %945 = fmul double %940, %934
  %946 = tail call double @llvm.fmuladd.f64(double %945, double %944, double %936)
  %947 = fadd double %908, %946
  %948 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 3
  %949 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 3, i32 2
  %950 = load i64, ptr %949, align 8, !tbaa !43
  %951 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 0, i64 %828, i64 3, i64 1
  %952 = load i32, ptr %951, align 4, !tbaa !18
  %953 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 3, i32 1
  %954 = load i8, ptr %953, align 2, !tbaa !46
  %955 = icmp eq i8 %954, 0
  %956 = load i16, ptr %948, align 8, !tbaa !47
  %957 = zext i16 %956 to i32
  %958 = add nuw nsw i32 %957, 64
  %959 = sub nsw i32 63, %957
  %960 = select i1 %955, i32 %959, i32 %958
  %961 = tail call i32 @llvm.smax.i32(i32 %952, i32 0)
  %962 = tail call i32 @llvm.smin.i32(i32 %961, i32 127)
  %963 = uitofp i64 %950 to double
  %964 = fmul double %963, 3.125000e-02
  %965 = fcmp ogt double %964, 1.000000e+00
  %966 = select i1 %965, double 1.000000e+00, double %964
  %967 = sext i32 %960 to i64
  %968 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %967
  %969 = load double, ptr %968, align 8, !tbaa !22
  %970 = zext i32 %962 to i64
  %971 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %970
  %972 = load double, ptr %971, align 8, !tbaa !22
  %973 = fneg double %966
  %974 = fmul double %969, %973
  %975 = tail call double @llvm.fmuladd.f64(double %974, double %972, double 0.000000e+00)
  %976 = sub nsw i32 127, %960
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %977
  %979 = load double, ptr %978, align 8, !tbaa !22
  %980 = xor i32 %962, 127
  %981 = zext i32 %980 to i64
  %982 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %981
  %983 = load double, ptr %982, align 8, !tbaa !22
  %984 = fmul double %979, %973
  %985 = tail call double @llvm.fmuladd.f64(double %984, double %983, double %975)
  %986 = fadd double %947, %985
  %987 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 4
  %988 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 4, i32 2
  %989 = load i64, ptr %988, align 8, !tbaa !43
  %990 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 0, i64 %828, i64 4, i64 1
  %991 = load i32, ptr %990, align 4, !tbaa !18
  %992 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 4, i32 1
  %993 = load i8, ptr %992, align 2, !tbaa !46
  %994 = icmp eq i8 %993, 0
  %995 = load i16, ptr %987, align 8, !tbaa !47
  %996 = zext i16 %995 to i32
  %997 = add nuw nsw i32 %996, 64
  %998 = sub nsw i32 63, %996
  %999 = select i1 %994, i32 %998, i32 %997
  %1000 = tail call i32 @llvm.smax.i32(i32 %991, i32 0)
  %1001 = tail call i32 @llvm.smin.i32(i32 %1000, i32 127)
  %1002 = uitofp i64 %989 to double
  %1003 = fmul double %1002, 3.125000e-02
  %1004 = fcmp ogt double %1003, 1.000000e+00
  %1005 = select i1 %1004, double 1.000000e+00, double %1003
  %1006 = sext i32 %999 to i64
  %1007 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1006
  %1008 = load double, ptr %1007, align 8, !tbaa !22
  %1009 = zext i32 %1001 to i64
  %1010 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1009
  %1011 = load double, ptr %1010, align 8, !tbaa !22
  %1012 = fneg double %1005
  %1013 = fmul double %1008, %1012
  %1014 = tail call double @llvm.fmuladd.f64(double %1013, double %1011, double 0.000000e+00)
  %1015 = sub nsw i32 127, %999
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1016
  %1018 = load double, ptr %1017, align 8, !tbaa !22
  %1019 = xor i32 %1001, 127
  %1020 = zext i32 %1019 to i64
  %1021 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1020
  %1022 = load double, ptr %1021, align 8, !tbaa !22
  %1023 = fmul double %1018, %1012
  %1024 = tail call double @llvm.fmuladd.f64(double %1023, double %1022, double %1014)
  %1025 = fadd double %986, %1024
  %1026 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 5
  %1027 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 5, i32 2
  %1028 = load i64, ptr %1027, align 8, !tbaa !43
  %1029 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 0, i64 %828, i64 5, i64 1
  %1030 = load i32, ptr %1029, align 4, !tbaa !18
  %1031 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 5, i32 1
  %1032 = load i8, ptr %1031, align 2, !tbaa !46
  %1033 = icmp eq i8 %1032, 0
  %1034 = load i16, ptr %1026, align 8, !tbaa !47
  %1035 = zext i16 %1034 to i32
  %1036 = add nuw nsw i32 %1035, 64
  %1037 = sub nsw i32 63, %1035
  %1038 = select i1 %1033, i32 %1037, i32 %1036
  %1039 = tail call i32 @llvm.smax.i32(i32 %1030, i32 0)
  %1040 = tail call i32 @llvm.smin.i32(i32 %1039, i32 127)
  %1041 = uitofp i64 %1028 to double
  %1042 = fmul double %1041, 3.125000e-02
  %1043 = fcmp ogt double %1042, 1.000000e+00
  %1044 = select i1 %1043, double 1.000000e+00, double %1042
  %1045 = sext i32 %1038 to i64
  %1046 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1045
  %1047 = load double, ptr %1046, align 8, !tbaa !22
  %1048 = zext i32 %1040 to i64
  %1049 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1048
  %1050 = load double, ptr %1049, align 8, !tbaa !22
  %1051 = fneg double %1044
  %1052 = fmul double %1047, %1051
  %1053 = tail call double @llvm.fmuladd.f64(double %1052, double %1050, double 0.000000e+00)
  br label %1310

1054:                                             ; preds = %826
  %1055 = load i32, ptr %8, align 4, !tbaa !42
  %1056 = tail call i32 @llvm.smax.i32(i32 %1055, i32 0)
  %1057 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 0
  %1058 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %258, i64 %828, i64 0
  %1059 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 0, i32 2
  %1060 = load i64, ptr %1059, align 8, !tbaa !43
  %1061 = load i32, ptr %1058, align 16, !tbaa !18
  %1062 = getelementptr inbounds i32, ptr %1058, i64 1
  %1063 = load i32, ptr %1062, align 4, !tbaa !18
  %1064 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 0, i32 1
  %1065 = load i8, ptr %1064, align 2, !tbaa !46
  %1066 = icmp eq i8 %1065, 0
  %1067 = load i16, ptr %1057, align 8, !tbaa !47
  %1068 = zext i16 %1067 to i32
  %1069 = add nuw nsw i32 %1068, 64
  %1070 = sub nsw i32 63, %1068
  %1071 = select i1 %1066, i32 %1070, i32 %1069
  %1072 = mul nsw i32 %1061, %1056
  %1073 = ashr i32 %1072, 4
  %1074 = add nsw i32 %1073, %1063
  %1075 = tail call i32 @llvm.smax.i32(i32 %1074, i32 0)
  %1076 = tail call i32 @llvm.smin.i32(i32 %1075, i32 127)
  %1077 = uitofp i64 %1060 to double
  %1078 = fmul double %1077, 3.125000e-02
  %1079 = fcmp ogt double %1078, 1.000000e+00
  %1080 = select i1 %1079, double 1.000000e+00, double %1078
  %1081 = sext i32 %1071 to i64
  %1082 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1081
  %1083 = load double, ptr %1082, align 8, !tbaa !22
  %1084 = zext i32 %1076 to i64
  %1085 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1084
  %1086 = load double, ptr %1085, align 8, !tbaa !22
  %1087 = fneg double %1080
  %1088 = fmul double %1083, %1087
  %1089 = tail call double @llvm.fmuladd.f64(double %1088, double %1086, double 0.000000e+00)
  %1090 = sub nsw i32 127, %1071
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1091
  %1093 = load double, ptr %1092, align 8, !tbaa !22
  %1094 = xor i32 %1076, 127
  %1095 = zext i32 %1094 to i64
  %1096 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1095
  %1097 = load double, ptr %1096, align 8, !tbaa !22
  %1098 = fmul double %1093, %1087
  %1099 = tail call double @llvm.fmuladd.f64(double %1098, double %1097, double %1089)
  %1100 = fadd double %829, %1099
  %1101 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 1
  %1102 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %258, i64 %828, i64 1
  %1103 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 1, i32 2
  %1104 = load i64, ptr %1103, align 8, !tbaa !43
  %1105 = load i32, ptr %1102, align 8, !tbaa !18
  %1106 = getelementptr inbounds i32, ptr %1102, i64 1
  %1107 = load i32, ptr %1106, align 4, !tbaa !18
  %1108 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 1, i32 1
  %1109 = load i8, ptr %1108, align 2, !tbaa !46
  %1110 = icmp eq i8 %1109, 0
  %1111 = load i16, ptr %1101, align 8, !tbaa !47
  %1112 = zext i16 %1111 to i32
  %1113 = add nuw nsw i32 %1112, 64
  %1114 = sub nsw i32 63, %1112
  %1115 = select i1 %1110, i32 %1114, i32 %1113
  %1116 = mul nsw i32 %1105, %1056
  %1117 = ashr i32 %1116, 4
  %1118 = add nsw i32 %1117, %1107
  %1119 = tail call i32 @llvm.smax.i32(i32 %1118, i32 0)
  %1120 = tail call i32 @llvm.smin.i32(i32 %1119, i32 127)
  %1121 = uitofp i64 %1104 to double
  %1122 = fmul double %1121, 3.125000e-02
  %1123 = fcmp ogt double %1122, 1.000000e+00
  %1124 = select i1 %1123, double 1.000000e+00, double %1122
  %1125 = sext i32 %1115 to i64
  %1126 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1125
  %1127 = load double, ptr %1126, align 8, !tbaa !22
  %1128 = zext i32 %1120 to i64
  %1129 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1128
  %1130 = load double, ptr %1129, align 8, !tbaa !22
  %1131 = fneg double %1124
  %1132 = fmul double %1127, %1131
  %1133 = tail call double @llvm.fmuladd.f64(double %1132, double %1130, double 0.000000e+00)
  %1134 = sub nsw i32 127, %1115
  %1135 = sext i32 %1134 to i64
  %1136 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1135
  %1137 = load double, ptr %1136, align 8, !tbaa !22
  %1138 = xor i32 %1120, 127
  %1139 = zext i32 %1138 to i64
  %1140 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1139
  %1141 = load double, ptr %1140, align 8, !tbaa !22
  %1142 = fmul double %1137, %1131
  %1143 = tail call double @llvm.fmuladd.f64(double %1142, double %1141, double %1133)
  %1144 = fadd double %1100, %1143
  %1145 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 2
  %1146 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %258, i64 %828, i64 2
  %1147 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 2, i32 2
  %1148 = load i64, ptr %1147, align 8, !tbaa !43
  %1149 = load i32, ptr %1146, align 16, !tbaa !18
  %1150 = getelementptr inbounds i32, ptr %1146, i64 1
  %1151 = load i32, ptr %1150, align 4, !tbaa !18
  %1152 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 2, i32 1
  %1153 = load i8, ptr %1152, align 2, !tbaa !46
  %1154 = icmp eq i8 %1153, 0
  %1155 = load i16, ptr %1145, align 8, !tbaa !47
  %1156 = zext i16 %1155 to i32
  %1157 = add nuw nsw i32 %1156, 64
  %1158 = sub nsw i32 63, %1156
  %1159 = select i1 %1154, i32 %1158, i32 %1157
  %1160 = mul nsw i32 %1149, %1056
  %1161 = ashr i32 %1160, 4
  %1162 = add nsw i32 %1161, %1151
  %1163 = tail call i32 @llvm.smax.i32(i32 %1162, i32 0)
  %1164 = tail call i32 @llvm.smin.i32(i32 %1163, i32 127)
  %1165 = uitofp i64 %1148 to double
  %1166 = fmul double %1165, 3.125000e-02
  %1167 = fcmp ogt double %1166, 1.000000e+00
  %1168 = select i1 %1167, double 1.000000e+00, double %1166
  %1169 = sext i32 %1159 to i64
  %1170 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1169
  %1171 = load double, ptr %1170, align 8, !tbaa !22
  %1172 = zext i32 %1164 to i64
  %1173 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1172
  %1174 = load double, ptr %1173, align 8, !tbaa !22
  %1175 = fneg double %1168
  %1176 = fmul double %1171, %1175
  %1177 = tail call double @llvm.fmuladd.f64(double %1176, double %1174, double 0.000000e+00)
  %1178 = sub nsw i32 127, %1159
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1179
  %1181 = load double, ptr %1180, align 8, !tbaa !22
  %1182 = xor i32 %1164, 127
  %1183 = zext i32 %1182 to i64
  %1184 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1183
  %1185 = load double, ptr %1184, align 8, !tbaa !22
  %1186 = fmul double %1181, %1175
  %1187 = tail call double @llvm.fmuladd.f64(double %1186, double %1185, double %1177)
  %1188 = fadd double %1144, %1187
  %1189 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 3
  %1190 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %258, i64 %828, i64 3
  %1191 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 3, i32 2
  %1192 = load i64, ptr %1191, align 8, !tbaa !43
  %1193 = load i32, ptr %1190, align 8, !tbaa !18
  %1194 = getelementptr inbounds i32, ptr %1190, i64 1
  %1195 = load i32, ptr %1194, align 4, !tbaa !18
  %1196 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 3, i32 1
  %1197 = load i8, ptr %1196, align 2, !tbaa !46
  %1198 = icmp eq i8 %1197, 0
  %1199 = load i16, ptr %1189, align 8, !tbaa !47
  %1200 = zext i16 %1199 to i32
  %1201 = add nuw nsw i32 %1200, 64
  %1202 = sub nsw i32 63, %1200
  %1203 = select i1 %1198, i32 %1202, i32 %1201
  %1204 = mul nsw i32 %1193, %1056
  %1205 = ashr i32 %1204, 4
  %1206 = add nsw i32 %1205, %1195
  %1207 = tail call i32 @llvm.smax.i32(i32 %1206, i32 0)
  %1208 = tail call i32 @llvm.smin.i32(i32 %1207, i32 127)
  %1209 = uitofp i64 %1192 to double
  %1210 = fmul double %1209, 3.125000e-02
  %1211 = fcmp ogt double %1210, 1.000000e+00
  %1212 = select i1 %1211, double 1.000000e+00, double %1210
  %1213 = sext i32 %1203 to i64
  %1214 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1213
  %1215 = load double, ptr %1214, align 8, !tbaa !22
  %1216 = zext i32 %1208 to i64
  %1217 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1216
  %1218 = load double, ptr %1217, align 8, !tbaa !22
  %1219 = fneg double %1212
  %1220 = fmul double %1215, %1219
  %1221 = tail call double @llvm.fmuladd.f64(double %1220, double %1218, double 0.000000e+00)
  %1222 = sub nsw i32 127, %1203
  %1223 = sext i32 %1222 to i64
  %1224 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1223
  %1225 = load double, ptr %1224, align 8, !tbaa !22
  %1226 = xor i32 %1208, 127
  %1227 = zext i32 %1226 to i64
  %1228 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1227
  %1229 = load double, ptr %1228, align 8, !tbaa !22
  %1230 = fmul double %1225, %1219
  %1231 = tail call double @llvm.fmuladd.f64(double %1230, double %1229, double %1221)
  %1232 = fadd double %1188, %1231
  %1233 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 4
  %1234 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %258, i64 %828, i64 4
  %1235 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 4, i32 2
  %1236 = load i64, ptr %1235, align 8, !tbaa !43
  %1237 = load i32, ptr %1234, align 16, !tbaa !18
  %1238 = getelementptr inbounds i32, ptr %1234, i64 1
  %1239 = load i32, ptr %1238, align 4, !tbaa !18
  %1240 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 4, i32 1
  %1241 = load i8, ptr %1240, align 2, !tbaa !46
  %1242 = icmp eq i8 %1241, 0
  %1243 = load i16, ptr %1233, align 8, !tbaa !47
  %1244 = zext i16 %1243 to i32
  %1245 = add nuw nsw i32 %1244, 64
  %1246 = sub nsw i32 63, %1244
  %1247 = select i1 %1242, i32 %1246, i32 %1245
  %1248 = mul nsw i32 %1237, %1056
  %1249 = ashr i32 %1248, 4
  %1250 = add nsw i32 %1249, %1239
  %1251 = tail call i32 @llvm.smax.i32(i32 %1250, i32 0)
  %1252 = tail call i32 @llvm.smin.i32(i32 %1251, i32 127)
  %1253 = uitofp i64 %1236 to double
  %1254 = fmul double %1253, 3.125000e-02
  %1255 = fcmp ogt double %1254, 1.000000e+00
  %1256 = select i1 %1255, double 1.000000e+00, double %1254
  %1257 = sext i32 %1247 to i64
  %1258 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1257
  %1259 = load double, ptr %1258, align 8, !tbaa !22
  %1260 = zext i32 %1252 to i64
  %1261 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1260
  %1262 = load double, ptr %1261, align 8, !tbaa !22
  %1263 = fneg double %1256
  %1264 = fmul double %1259, %1263
  %1265 = tail call double @llvm.fmuladd.f64(double %1264, double %1262, double 0.000000e+00)
  %1266 = sub nsw i32 127, %1247
  %1267 = sext i32 %1266 to i64
  %1268 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1267
  %1269 = load double, ptr %1268, align 8, !tbaa !22
  %1270 = xor i32 %1252, 127
  %1271 = zext i32 %1270 to i64
  %1272 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1271
  %1273 = load double, ptr %1272, align 8, !tbaa !22
  %1274 = fmul double %1269, %1263
  %1275 = tail call double @llvm.fmuladd.f64(double %1274, double %1273, double %1265)
  %1276 = fadd double %1232, %1275
  %1277 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 5
  %1278 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %258, i64 %828, i64 5
  %1279 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 5, i32 2
  %1280 = load i64, ptr %1279, align 8, !tbaa !43
  %1281 = load i32, ptr %1278, align 8, !tbaa !18
  %1282 = getelementptr inbounds i32, ptr %1278, i64 1
  %1283 = load i32, ptr %1282, align 4, !tbaa !18
  %1284 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 3, i64 %828, i64 5, i32 1
  %1285 = load i8, ptr %1284, align 2, !tbaa !46
  %1286 = icmp eq i8 %1285, 0
  %1287 = load i16, ptr %1277, align 8, !tbaa !47
  %1288 = zext i16 %1287 to i32
  %1289 = add nuw nsw i32 %1288, 64
  %1290 = sub nsw i32 63, %1288
  %1291 = select i1 %1286, i32 %1290, i32 %1289
  %1292 = mul nsw i32 %1281, %1056
  %1293 = ashr i32 %1292, 4
  %1294 = add nsw i32 %1293, %1283
  %1295 = tail call i32 @llvm.smax.i32(i32 %1294, i32 0)
  %1296 = tail call i32 @llvm.smin.i32(i32 %1295, i32 127)
  %1297 = uitofp i64 %1280 to double
  %1298 = fmul double %1297, 3.125000e-02
  %1299 = fcmp ogt double %1298, 1.000000e+00
  %1300 = select i1 %1299, double 1.000000e+00, double %1298
  %1301 = sext i32 %1291 to i64
  %1302 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1301
  %1303 = load double, ptr %1302, align 8, !tbaa !22
  %1304 = zext i32 %1296 to i64
  %1305 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1304
  %1306 = load double, ptr %1305, align 8, !tbaa !22
  %1307 = fneg double %1300
  %1308 = fmul double %1303, %1307
  %1309 = tail call double @llvm.fmuladd.f64(double %1308, double %1306, double 0.000000e+00)
  br label %1310

1310:                                             ; preds = %1054, %830
  %1311 = phi i32 [ %1291, %1054 ], [ %1038, %830 ]
  %1312 = phi i32 [ %1296, %1054 ], [ %1040, %830 ]
  %1313 = phi double [ %1307, %1054 ], [ %1051, %830 ]
  %1314 = phi double [ %1309, %1054 ], [ %1053, %830 ]
  %1315 = phi double [ %1276, %1054 ], [ %1025, %830 ]
  %1316 = sub nsw i32 127, %1311
  %1317 = sext i32 %1316 to i64
  %1318 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1317
  %1319 = load double, ptr %1318, align 8, !tbaa !22
  %1320 = xor i32 %1312, 127
  %1321 = zext i32 %1320 to i64
  %1322 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1321
  %1323 = load double, ptr %1322, align 8, !tbaa !22
  %1324 = fmul double %1319, %1313
  %1325 = tail call double @llvm.fmuladd.f64(double %1324, double %1323, double %1314)
  %1326 = fadd double %1315, %1325
  br i1 %827, label %826, label %757, !llvm.loop !52

1327:                                             ; preds = %1377, %757
  %1328 = phi i64 [ 0, %757 ], [ %1355, %1377 ]
  %1329 = phi double [ %821, %757 ], [ %1378, %1377 ]
  %1330 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 5, i64 %1328
  %1331 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 5, i64 %1328, i32 2
  %1332 = load i64, ptr %1331, align 8, !tbaa !43
  %1333 = getelementptr inbounds %struct.MotionInfoContexts, ptr %1, i64 0, i32 5, i64 %1328, i32 1
  %1334 = load i8, ptr %1333, align 2, !tbaa !46
  %1335 = icmp eq i8 %1334, 0
  %1336 = load i16, ptr %1330, align 8, !tbaa !47
  %1337 = zext i16 %1336 to i32
  %1338 = add nuw nsw i32 %1337, 64
  %1339 = sub nsw i32 63, %1337
  %1340 = select i1 %1335, i32 %1339, i32 %1338
  %1341 = uitofp i64 %1332 to double
  %1342 = fmul double %1341, 3.125000e-02
  %1343 = fcmp ogt double %1342, 1.000000e+00
  %1344 = select i1 %1343, double 1.000000e+00, double %1342
  %1345 = sext i32 %1340 to i64
  %1346 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1345
  %1347 = load double, ptr %1346, align 8, !tbaa !22
  %1348 = fneg double %1344
  %1349 = fmul double %1347, %1348
  %1350 = sub nsw i32 127, %1340
  %1351 = sext i32 %1350 to i64
  %1352 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1351
  %1353 = load double, ptr %1352, align 8, !tbaa !22
  %1354 = fmul double %1353, %1348
  %1355 = add nuw nsw i64 %1328, 1
  %1356 = icmp eq i64 %1355, 4
  br i1 %759, label %1357, label %1379

1357:                                             ; preds = %1327
  %1358 = getelementptr inbounds [4 x [2 x i32]], ptr %823, i64 0, i64 %1328
  %1359 = load i32, ptr %1358, align 8, !tbaa !18
  %1360 = getelementptr inbounds i32, ptr %1358, i64 1
  %1361 = load i32, ptr %1360, align 4, !tbaa !18
  %1362 = mul nsw i32 %1359, %825
  %1363 = ashr i32 %1362, 4
  %1364 = add nsw i32 %1363, %1361
  %1365 = tail call i32 @llvm.smax.i32(i32 %1364, i32 0)
  %1366 = tail call i32 @llvm.smin.i32(i32 %1365, i32 127)
  %1367 = zext i32 %1366 to i64
  %1368 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1367
  %1369 = load double, ptr %1368, align 8, !tbaa !22
  %1370 = tail call double @llvm.fmuladd.f64(double %1349, double %1369, double 0.000000e+00)
  %1371 = xor i32 %1366, 127
  %1372 = zext i32 %1371 to i64
  %1373 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1372
  %1374 = load double, ptr %1373, align 8, !tbaa !22
  %1375 = tail call double @llvm.fmuladd.f64(double %1354, double %1374, double %1370)
  %1376 = fadd double %1329, %1375
  br i1 %1356, label %1599, label %1377

1377:                                             ; preds = %1357, %1379
  %1378 = phi double [ %1376, %1357 ], [ %1398, %1379 ]
  br label %1327, !llvm.loop !53

1379:                                             ; preds = %1327
  %1380 = getelementptr inbounds [4 x [2 x i32]], ptr %822, i64 0, i64 %1328
  %1381 = load i32, ptr %1380, align 8, !tbaa !18
  %1382 = getelementptr inbounds i32, ptr %1380, i64 1
  %1383 = load i32, ptr %1382, align 4, !tbaa !18
  %1384 = mul nsw i32 %1381, %825
  %1385 = ashr i32 %1384, 4
  %1386 = add nsw i32 %1385, %1383
  %1387 = tail call i32 @llvm.smax.i32(i32 %1386, i32 0)
  %1388 = tail call i32 @llvm.smin.i32(i32 %1387, i32 127)
  %1389 = zext i32 %1388 to i64
  %1390 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1389
  %1391 = load double, ptr %1390, align 8, !tbaa !22
  %1392 = tail call double @llvm.fmuladd.f64(double %1349, double %1391, double 0.000000e+00)
  %1393 = xor i32 %1388, 127
  %1394 = zext i32 %1393 to i64
  %1395 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1394
  %1396 = load double, ptr %1395, align 8, !tbaa !22
  %1397 = tail call double @llvm.fmuladd.f64(double %1354, double %1396, double %1392)
  %1398 = fadd double %1329, %1397
  br i1 %1356, label %1399, label %1377

1399:                                             ; preds = %1379
  %1400 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %258
  %1401 = load i64, ptr %10, align 8, !tbaa !43
  %1402 = load i32, ptr %1400, align 8, !tbaa !18
  %1403 = getelementptr inbounds i32, ptr %1400, i64 1
  %1404 = load i32, ptr %1403, align 4, !tbaa !18
  %1405 = load i8, ptr %11, align 2, !tbaa !46
  %1406 = icmp eq i8 %1405, 0
  %1407 = load i16, ptr %9, align 8, !tbaa !47
  %1408 = zext i16 %1407 to i32
  %1409 = add nuw nsw i32 %1408, 64
  %1410 = sub nsw i32 63, %1408
  %1411 = select i1 %1406, i32 %1410, i32 %1409
  %1412 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1413 = mul nsw i32 %1402, %1412
  %1414 = ashr i32 %1413, 4
  %1415 = add nsw i32 %1414, %1404
  %1416 = tail call i32 @llvm.smax.i32(i32 %1415, i32 0)
  %1417 = tail call i32 @llvm.smin.i32(i32 %1416, i32 127)
  %1418 = uitofp i64 %1401 to double
  %1419 = fmul double %1418, 3.125000e-02
  %1420 = fcmp ogt double %1419, 1.000000e+00
  %1421 = select i1 %1420, double 1.000000e+00, double %1419
  %1422 = sext i32 %1411 to i64
  %1423 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1422
  %1424 = load double, ptr %1423, align 8, !tbaa !22
  %1425 = zext i32 %1417 to i64
  %1426 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1425
  %1427 = load double, ptr %1426, align 8, !tbaa !22
  %1428 = fneg double %1421
  %1429 = fmul double %1424, %1428
  %1430 = tail call double @llvm.fmuladd.f64(double %1429, double %1427, double 0.000000e+00)
  %1431 = sub nsw i32 127, %1411
  %1432 = sext i32 %1431 to i64
  %1433 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1432
  %1434 = load double, ptr %1433, align 8, !tbaa !22
  %1435 = xor i32 %1417, 127
  %1436 = zext i32 %1435 to i64
  %1437 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1436
  %1438 = load double, ptr %1437, align 8, !tbaa !22
  %1439 = fmul double %1434, %1428
  %1440 = tail call double @llvm.fmuladd.f64(double %1439, double %1438, double %1430)
  %1441 = fadd double %1398, %1440
  %1442 = getelementptr inbounds [3 x [2 x i32]], ptr %1400, i64 0, i64 1
  %1443 = load i64, ptr %13, align 8, !tbaa !43
  %1444 = load i32, ptr %1442, align 8, !tbaa !18
  %1445 = getelementptr inbounds [3 x [2 x i32]], ptr %1400, i64 0, i64 1, i64 1
  %1446 = load i32, ptr %1445, align 4, !tbaa !18
  %1447 = load i8, ptr %14, align 2, !tbaa !46
  %1448 = icmp eq i8 %1447, 0
  %1449 = load i16, ptr %12, align 8, !tbaa !47
  %1450 = zext i16 %1449 to i32
  %1451 = add nuw nsw i32 %1450, 64
  %1452 = sub nsw i32 63, %1450
  %1453 = select i1 %1448, i32 %1452, i32 %1451
  %1454 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1455 = mul nsw i32 %1444, %1454
  %1456 = ashr i32 %1455, 4
  %1457 = add nsw i32 %1456, %1446
  %1458 = tail call i32 @llvm.smax.i32(i32 %1457, i32 0)
  %1459 = tail call i32 @llvm.smin.i32(i32 %1458, i32 127)
  %1460 = uitofp i64 %1443 to double
  %1461 = fmul double %1460, 3.125000e-02
  %1462 = fcmp ogt double %1461, 1.000000e+00
  %1463 = select i1 %1462, double 1.000000e+00, double %1461
  %1464 = sext i32 %1453 to i64
  %1465 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1464
  %1466 = load double, ptr %1465, align 8, !tbaa !22
  %1467 = zext i32 %1459 to i64
  %1468 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1467
  %1469 = load double, ptr %1468, align 8, !tbaa !22
  %1470 = fneg double %1463
  %1471 = fmul double %1466, %1470
  %1472 = tail call double @llvm.fmuladd.f64(double %1471, double %1469, double 0.000000e+00)
  %1473 = sub nsw i32 127, %1453
  %1474 = sext i32 %1473 to i64
  %1475 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1474
  %1476 = load double, ptr %1475, align 8, !tbaa !22
  %1477 = xor i32 %1459, 127
  %1478 = zext i32 %1477 to i64
  %1479 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1478
  %1480 = load double, ptr %1479, align 8, !tbaa !22
  %1481 = fmul double %1476, %1470
  %1482 = tail call double @llvm.fmuladd.f64(double %1481, double %1480, double %1472)
  %1483 = fadd double %1441, %1482
  %1484 = getelementptr inbounds [3 x [2 x i32]], ptr %1400, i64 0, i64 2
  %1485 = load i64, ptr %16, align 8, !tbaa !43
  %1486 = load i32, ptr %1484, align 8, !tbaa !18
  %1487 = getelementptr inbounds [3 x [2 x i32]], ptr %1400, i64 0, i64 2, i64 1
  %1488 = load i32, ptr %1487, align 4, !tbaa !18
  %1489 = load i8, ptr %17, align 2, !tbaa !46
  %1490 = icmp eq i8 %1489, 0
  %1491 = load i16, ptr %15, align 8, !tbaa !47
  %1492 = zext i16 %1491 to i32
  %1493 = add nuw nsw i32 %1492, 64
  %1494 = sub nsw i32 63, %1492
  %1495 = select i1 %1490, i32 %1494, i32 %1493
  %1496 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1497 = mul nsw i32 %1486, %1496
  %1498 = ashr i32 %1497, 4
  %1499 = add nsw i32 %1498, %1488
  %1500 = tail call i32 @llvm.smax.i32(i32 %1499, i32 0)
  %1501 = tail call i32 @llvm.smin.i32(i32 %1500, i32 127)
  %1502 = uitofp i64 %1485 to double
  %1503 = fmul double %1502, 3.125000e-02
  %1504 = fcmp ogt double %1503, 1.000000e+00
  %1505 = select i1 %1504, double 1.000000e+00, double %1503
  %1506 = sext i32 %1495 to i64
  %1507 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1506
  %1508 = load double, ptr %1507, align 8, !tbaa !22
  %1509 = zext i32 %1501 to i64
  %1510 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1509
  %1511 = load double, ptr %1510, align 8, !tbaa !22
  %1512 = fneg double %1505
  %1513 = fmul double %1508, %1512
  %1514 = tail call double @llvm.fmuladd.f64(double %1513, double %1511, double 0.000000e+00)
  %1515 = sub nsw i32 127, %1495
  %1516 = sext i32 %1515 to i64
  %1517 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1516
  %1518 = load double, ptr %1517, align 8, !tbaa !22
  %1519 = xor i32 %1501, 127
  %1520 = zext i32 %1519 to i64
  %1521 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1520
  %1522 = load double, ptr %1521, align 8, !tbaa !22
  %1523 = fmul double %1518, %1512
  %1524 = tail call double @llvm.fmuladd.f64(double %1523, double %1522, double %1514)
  %1525 = fadd double %1483, %1524
  %1526 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_P, i64 0, i64 %258
  %1527 = load i64, ptr %18, align 8, !tbaa !43
  %1528 = load i32, ptr %1526, align 16, !tbaa !18
  %1529 = getelementptr inbounds i32, ptr %1526, i64 1
  %1530 = load i32, ptr %1529, align 4, !tbaa !18
  %1531 = load i8, ptr %19, align 2, !tbaa !46
  %1532 = icmp eq i8 %1531, 0
  %1533 = load i16, ptr %2, align 8, !tbaa !47
  %1534 = zext i16 %1533 to i32
  %1535 = add nuw nsw i32 %1534, 64
  %1536 = sub nsw i32 63, %1534
  %1537 = select i1 %1532, i32 %1536, i32 %1535
  %1538 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1539 = mul nsw i32 %1528, %1538
  %1540 = ashr i32 %1539, 4
  %1541 = add nsw i32 %1540, %1530
  %1542 = tail call i32 @llvm.smax.i32(i32 %1541, i32 0)
  %1543 = tail call i32 @llvm.smin.i32(i32 %1542, i32 127)
  %1544 = uitofp i64 %1527 to double
  %1545 = fmul double %1544, 3.125000e-02
  %1546 = fcmp ogt double %1545, 1.000000e+00
  %1547 = select i1 %1546, double 1.000000e+00, double %1545
  %1548 = sext i32 %1537 to i64
  %1549 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1548
  %1550 = load double, ptr %1549, align 8, !tbaa !22
  %1551 = zext i32 %1543 to i64
  %1552 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1551
  %1553 = load double, ptr %1552, align 8, !tbaa !22
  %1554 = fneg double %1547
  %1555 = fmul double %1550, %1554
  %1556 = tail call double @llvm.fmuladd.f64(double %1555, double %1553, double 0.000000e+00)
  %1557 = sub nsw i32 127, %1537
  %1558 = sext i32 %1557 to i64
  %1559 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1558
  %1560 = load double, ptr %1559, align 8, !tbaa !22
  %1561 = xor i32 %1543, 127
  %1562 = zext i32 %1561 to i64
  %1563 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1562
  %1564 = load double, ptr %1563, align 8, !tbaa !22
  %1565 = fmul double %1560, %1554
  %1566 = tail call double @llvm.fmuladd.f64(double %1565, double %1564, double %1556)
  %1567 = fadd double %1525, %1566
  %1568 = getelementptr inbounds [2 x [2 x i32]], ptr %1526, i64 0, i64 1
  %1569 = load i64, ptr %21, align 8, !tbaa !43
  %1570 = load i32, ptr %1568, align 8, !tbaa !18
  %1571 = getelementptr inbounds [2 x [2 x i32]], ptr %1526, i64 0, i64 1, i64 1
  %1572 = load i32, ptr %1571, align 4, !tbaa !18
  %1573 = load i8, ptr %22, align 2, !tbaa !46
  %1574 = icmp eq i8 %1573, 0
  %1575 = load i16, ptr %20, align 8, !tbaa !47
  %1576 = zext i16 %1575 to i32
  %1577 = add nuw nsw i32 %1576, 64
  %1578 = sub nsw i32 63, %1576
  %1579 = select i1 %1574, i32 %1578, i32 %1577
  %1580 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1581 = mul nsw i32 %1570, %1580
  %1582 = ashr i32 %1581, 4
  %1583 = add nsw i32 %1582, %1572
  %1584 = tail call i32 @llvm.smax.i32(i32 %1583, i32 0)
  %1585 = tail call i32 @llvm.smin.i32(i32 %1584, i32 127)
  %1586 = uitofp i64 %1569 to double
  %1587 = fmul double %1586, 3.125000e-02
  %1588 = fcmp ogt double %1587, 1.000000e+00
  %1589 = select i1 %1588, double 1.000000e+00, double %1587
  %1590 = sext i32 %1579 to i64
  %1591 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1590
  %1592 = load double, ptr %1591, align 8, !tbaa !22
  %1593 = zext i32 %1585 to i64
  %1594 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1593
  %1595 = load double, ptr %1594, align 8, !tbaa !22
  %1596 = fneg double %1589
  %1597 = fmul double %1592, %1596
  %1598 = tail call double @llvm.fmuladd.f64(double %1597, double %1595, double 0.000000e+00)
  br label %1797

1599:                                             ; preds = %1357
  %1600 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %258
  %1601 = load i64, ptr %24, align 8, !tbaa !43
  %1602 = getelementptr inbounds i32, ptr %1600, i64 1
  %1603 = load i32, ptr %1602, align 4, !tbaa !18
  %1604 = load i8, ptr %25, align 2, !tbaa !46
  %1605 = icmp eq i8 %1604, 0
  %1606 = load i16, ptr %23, align 8, !tbaa !47
  %1607 = zext i16 %1606 to i32
  %1608 = add nuw nsw i32 %1607, 64
  %1609 = sub nsw i32 63, %1607
  %1610 = select i1 %1605, i32 %1609, i32 %1608
  %1611 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1612 = mul nsw i32 %1611, 31
  %1613 = lshr i32 %1612, 4
  %1614 = add nsw i32 %1613, %1603
  %1615 = tail call i32 @llvm.smax.i32(i32 %1614, i32 0)
  %1616 = tail call i32 @llvm.smin.i32(i32 %1615, i32 127)
  %1617 = uitofp i64 %1601 to double
  %1618 = fmul double %1617, 3.125000e-02
  %1619 = fcmp ogt double %1618, 1.000000e+00
  %1620 = select i1 %1619, double 1.000000e+00, double %1618
  %1621 = sext i32 %1610 to i64
  %1622 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1621
  %1623 = load double, ptr %1622, align 8, !tbaa !22
  %1624 = zext i32 %1616 to i64
  %1625 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1624
  %1626 = load double, ptr %1625, align 8, !tbaa !22
  %1627 = fneg double %1620
  %1628 = fmul double %1623, %1627
  %1629 = tail call double @llvm.fmuladd.f64(double %1628, double %1626, double 0.000000e+00)
  %1630 = sub nsw i32 127, %1610
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1631
  %1633 = load double, ptr %1632, align 8, !tbaa !22
  %1634 = xor i32 %1616, 127
  %1635 = zext i32 %1634 to i64
  %1636 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1635
  %1637 = load double, ptr %1636, align 8, !tbaa !22
  %1638 = fmul double %1633, %1627
  %1639 = tail call double @llvm.fmuladd.f64(double %1638, double %1637, double %1629)
  %1640 = fadd double %1376, %1639
  %1641 = getelementptr inbounds [3 x [2 x i32]], ptr %1600, i64 0, i64 1
  %1642 = load i64, ptr %27, align 8, !tbaa !43
  %1643 = load i32, ptr %1641, align 8, !tbaa !18
  %1644 = getelementptr inbounds [3 x [2 x i32]], ptr %1600, i64 0, i64 1, i64 1
  %1645 = load i32, ptr %1644, align 4, !tbaa !18
  %1646 = load i8, ptr %28, align 2, !tbaa !46
  %1647 = icmp eq i8 %1646, 0
  %1648 = load i16, ptr %26, align 8, !tbaa !47
  %1649 = zext i16 %1648 to i32
  %1650 = add nuw nsw i32 %1649, 64
  %1651 = sub nsw i32 63, %1649
  %1652 = select i1 %1647, i32 %1651, i32 %1650
  %1653 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1654 = mul nsw i32 %1643, %1653
  %1655 = ashr i32 %1654, 4
  %1656 = add nsw i32 %1655, %1645
  %1657 = tail call i32 @llvm.smax.i32(i32 %1656, i32 0)
  %1658 = tail call i32 @llvm.smin.i32(i32 %1657, i32 127)
  %1659 = uitofp i64 %1642 to double
  %1660 = fmul double %1659, 3.125000e-02
  %1661 = fcmp ogt double %1660, 1.000000e+00
  %1662 = select i1 %1661, double 1.000000e+00, double %1660
  %1663 = sext i32 %1652 to i64
  %1664 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1663
  %1665 = load double, ptr %1664, align 8, !tbaa !22
  %1666 = zext i32 %1658 to i64
  %1667 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1666
  %1668 = load double, ptr %1667, align 8, !tbaa !22
  %1669 = fneg double %1662
  %1670 = fmul double %1665, %1669
  %1671 = tail call double @llvm.fmuladd.f64(double %1670, double %1668, double 0.000000e+00)
  %1672 = sub nsw i32 127, %1652
  %1673 = sext i32 %1672 to i64
  %1674 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1673
  %1675 = load double, ptr %1674, align 8, !tbaa !22
  %1676 = xor i32 %1658, 127
  %1677 = zext i32 %1676 to i64
  %1678 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1677
  %1679 = load double, ptr %1678, align 8, !tbaa !22
  %1680 = fmul double %1675, %1669
  %1681 = tail call double @llvm.fmuladd.f64(double %1680, double %1679, double %1671)
  %1682 = fadd double %1640, %1681
  %1683 = getelementptr inbounds [3 x [2 x i32]], ptr %1600, i64 0, i64 2
  %1684 = load i64, ptr %30, align 8, !tbaa !43
  %1685 = load i32, ptr %1683, align 8, !tbaa !18
  %1686 = getelementptr inbounds [3 x [2 x i32]], ptr %1600, i64 0, i64 2, i64 1
  %1687 = load i32, ptr %1686, align 4, !tbaa !18
  %1688 = load i8, ptr %31, align 2, !tbaa !46
  %1689 = icmp eq i8 %1688, 0
  %1690 = load i16, ptr %29, align 8, !tbaa !47
  %1691 = zext i16 %1690 to i32
  %1692 = add nuw nsw i32 %1691, 64
  %1693 = sub nsw i32 63, %1691
  %1694 = select i1 %1689, i32 %1693, i32 %1692
  %1695 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1696 = mul nsw i32 %1685, %1695
  %1697 = ashr i32 %1696, 4
  %1698 = add nsw i32 %1697, %1687
  %1699 = tail call i32 @llvm.smax.i32(i32 %1698, i32 0)
  %1700 = tail call i32 @llvm.smin.i32(i32 %1699, i32 127)
  %1701 = uitofp i64 %1684 to double
  %1702 = fmul double %1701, 3.125000e-02
  %1703 = fcmp ogt double %1702, 1.000000e+00
  %1704 = select i1 %1703, double 1.000000e+00, double %1702
  %1705 = sext i32 %1694 to i64
  %1706 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1705
  %1707 = load double, ptr %1706, align 8, !tbaa !22
  %1708 = zext i32 %1700 to i64
  %1709 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1708
  %1710 = load double, ptr %1709, align 8, !tbaa !22
  %1711 = fneg double %1704
  %1712 = fmul double %1707, %1711
  %1713 = tail call double @llvm.fmuladd.f64(double %1712, double %1710, double 0.000000e+00)
  %1714 = sub nsw i32 127, %1694
  %1715 = sext i32 %1714 to i64
  %1716 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1715
  %1717 = load double, ptr %1716, align 8, !tbaa !22
  %1718 = xor i32 %1700, 127
  %1719 = zext i32 %1718 to i64
  %1720 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1719
  %1721 = load double, ptr %1720, align 8, !tbaa !22
  %1722 = fmul double %1717, %1711
  %1723 = tail call double @llvm.fmuladd.f64(double %1722, double %1721, double %1713)
  %1724 = fadd double %1682, %1723
  %1725 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_I, i64 0, i64 %258
  %1726 = load i64, ptr %32, align 8, !tbaa !43
  %1727 = getelementptr inbounds i32, ptr %1725, i64 1
  %1728 = load i32, ptr %1727, align 4, !tbaa !18
  %1729 = load i8, ptr %33, align 2, !tbaa !46
  %1730 = icmp eq i8 %1729, 0
  %1731 = load i16, ptr %2, align 8, !tbaa !47
  %1732 = zext i16 %1731 to i32
  %1733 = add nuw nsw i32 %1732, 64
  %1734 = sub nsw i32 63, %1732
  %1735 = select i1 %1730, i32 %1734, i32 %1733
  %1736 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1737 = mul nsw i32 %1736, 13
  %1738 = lshr i32 %1737, 4
  %1739 = add nsw i32 %1738, %1728
  %1740 = tail call i32 @llvm.smax.i32(i32 %1739, i32 0)
  %1741 = tail call i32 @llvm.smin.i32(i32 %1740, i32 127)
  %1742 = uitofp i64 %1726 to double
  %1743 = fmul double %1742, 3.125000e-02
  %1744 = fcmp ogt double %1743, 1.000000e+00
  %1745 = select i1 %1744, double 1.000000e+00, double %1743
  %1746 = sext i32 %1735 to i64
  %1747 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1746
  %1748 = load double, ptr %1747, align 8, !tbaa !22
  %1749 = zext i32 %1741 to i64
  %1750 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1749
  %1751 = load double, ptr %1750, align 8, !tbaa !22
  %1752 = fneg double %1745
  %1753 = fmul double %1748, %1752
  %1754 = tail call double @llvm.fmuladd.f64(double %1753, double %1751, double 0.000000e+00)
  %1755 = sub nsw i32 127, %1735
  %1756 = sext i32 %1755 to i64
  %1757 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1756
  %1758 = load double, ptr %1757, align 8, !tbaa !22
  %1759 = xor i32 %1741, 127
  %1760 = zext i32 %1759 to i64
  %1761 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1760
  %1762 = load double, ptr %1761, align 8, !tbaa !22
  %1763 = fmul double %1758, %1752
  %1764 = tail call double @llvm.fmuladd.f64(double %1763, double %1762, double %1754)
  %1765 = fadd double %1724, %1764
  %1766 = getelementptr inbounds [2 x [2 x i32]], ptr %1725, i64 0, i64 1
  %1767 = load i64, ptr %35, align 8, !tbaa !43
  %1768 = load i32, ptr %1766, align 8, !tbaa !18
  %1769 = getelementptr inbounds [2 x [2 x i32]], ptr %1725, i64 0, i64 1, i64 1
  %1770 = load i32, ptr %1769, align 4, !tbaa !18
  %1771 = load i8, ptr %36, align 2, !tbaa !46
  %1772 = icmp eq i8 %1771, 0
  %1773 = load i16, ptr %34, align 8, !tbaa !47
  %1774 = zext i16 %1773 to i32
  %1775 = add nuw nsw i32 %1774, 64
  %1776 = sub nsw i32 63, %1774
  %1777 = select i1 %1772, i32 %1776, i32 %1775
  %1778 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1779 = mul nsw i32 %1768, %1778
  %1780 = ashr i32 %1779, 4
  %1781 = add nsw i32 %1780, %1770
  %1782 = tail call i32 @llvm.smax.i32(i32 %1781, i32 0)
  %1783 = tail call i32 @llvm.smin.i32(i32 %1782, i32 127)
  %1784 = uitofp i64 %1767 to double
  %1785 = fmul double %1784, 3.125000e-02
  %1786 = fcmp ogt double %1785, 1.000000e+00
  %1787 = select i1 %1786, double 1.000000e+00, double %1785
  %1788 = sext i32 %1777 to i64
  %1789 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1788
  %1790 = load double, ptr %1789, align 8, !tbaa !22
  %1791 = zext i32 %1783 to i64
  %1792 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1791
  %1793 = load double, ptr %1792, align 8, !tbaa !22
  %1794 = fneg double %1787
  %1795 = fmul double %1790, %1794
  %1796 = tail call double @llvm.fmuladd.f64(double %1795, double %1793, double 0.000000e+00)
  br label %1797

1797:                                             ; preds = %1599, %1399
  %1798 = phi i32 [ %1777, %1599 ], [ %1579, %1399 ]
  %1799 = phi i32 [ %1783, %1599 ], [ %1585, %1399 ]
  %1800 = phi double [ %1794, %1599 ], [ %1596, %1399 ]
  %1801 = phi double [ %1796, %1599 ], [ %1598, %1399 ]
  %1802 = phi double [ %1765, %1599 ], [ %1567, %1399 ]
  %1803 = sub nsw i32 127, %1798
  %1804 = sext i32 %1803 to i64
  %1805 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1804
  %1806 = load double, ptr %1805, align 8, !tbaa !22
  %1807 = xor i32 %1799, 127
  %1808 = zext i32 %1807 to i64
  %1809 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1808
  %1810 = load double, ptr %1809, align 8, !tbaa !22
  %1811 = fmul double %1806, %1800
  %1812 = tail call double @llvm.fmuladd.f64(double %1811, double %1810, double %1801)
  %1813 = fadd double %1802, %1812
  %1814 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %258
  %1815 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %258
  %1816 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  br i1 %759, label %1817, label %1831

1817:                                             ; preds = %1797
  %1818 = getelementptr inbounds i32, ptr %1815, i64 1
  %1819 = load i32, ptr %1818, align 4, !tbaa !18
  %1820 = mul nsw i32 %1816, -9
  %1821 = ashr i32 %1820, 4
  %1822 = add nsw i32 %1821, %1819
  %1823 = tail call i32 @llvm.smax.i32(i32 %1822, i32 0)
  %1824 = tail call i32 @llvm.smin.i32(i32 %1823, i32 127)
  %1825 = load double, ptr %160, align 8, !tbaa !22
  %1826 = zext i32 %1824 to i64
  %1827 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1826
  %1828 = load double, ptr %1827, align 8, !tbaa !22
  %1829 = fmul double %1825, %161
  %1830 = tail call double @llvm.fmuladd.f64(double %1829, double %1828, double 0.000000e+00)
  br label %1847

1831:                                             ; preds = %1797
  %1832 = load i32, ptr %1814, align 16, !tbaa !18
  %1833 = getelementptr inbounds i32, ptr %1814, i64 1
  %1834 = load i32, ptr %1833, align 4, !tbaa !18
  %1835 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1836 = mul nsw i32 %1832, %1835
  %1837 = ashr i32 %1836, 4
  %1838 = add nsw i32 %1837, %1834
  %1839 = tail call i32 @llvm.smax.i32(i32 %1838, i32 0)
  %1840 = tail call i32 @llvm.smin.i32(i32 %1839, i32 127)
  %1841 = load double, ptr %153, align 8, !tbaa !22
  %1842 = zext i32 %1840 to i64
  %1843 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1842
  %1844 = load double, ptr %1843, align 8, !tbaa !22
  %1845 = fmul double %1841, %154
  %1846 = tail call double @llvm.fmuladd.f64(double %1845, double %1844, double 0.000000e+00)
  br label %1847

1847:                                             ; preds = %1817, %1831
  %1848 = phi i32 [ %1824, %1817 ], [ %1840, %1831 ]
  %1849 = phi double [ %161, %1817 ], [ %154, %1831 ]
  %1850 = phi double [ %1830, %1817 ], [ %1846, %1831 ]
  %1851 = xor i32 %1848, 127
  %1852 = zext i32 %1851 to i64
  %1853 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1852
  %1854 = load double, ptr %1853, align 8, !tbaa !22
  %1855 = fmul double %165, %1849
  %1856 = tail call double @llvm.fmuladd.f64(double %1855, double %1854, double %1850)
  %1857 = fadd double %1813, %1856
  br i1 %759, label %1875, label %1858

1858:                                             ; preds = %1847
  %1859 = getelementptr inbounds [4 x [2 x i32]], ptr %1814, i64 0, i64 1
  %1860 = load i32, ptr %1859, align 8, !tbaa !18
  %1861 = getelementptr inbounds [4 x [2 x i32]], ptr %1814, i64 0, i64 1, i64 1
  %1862 = load i32, ptr %1861, align 4, !tbaa !18
  %1863 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1864 = mul nsw i32 %1860, %1863
  %1865 = ashr i32 %1864, 4
  %1866 = add nsw i32 %1865, %1862
  %1867 = tail call i32 @llvm.smax.i32(i32 %1866, i32 0)
  %1868 = tail call i32 @llvm.smin.i32(i32 %1867, i32 127)
  %1869 = load double, ptr %182, align 8, !tbaa !22
  %1870 = zext i32 %1868 to i64
  %1871 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1870
  %1872 = load double, ptr %1871, align 8, !tbaa !22
  %1873 = fmul double %1869, %183
  %1874 = tail call double @llvm.fmuladd.f64(double %1873, double %1872, double 0.000000e+00)
  br label %1891

1875:                                             ; preds = %1847
  %1876 = getelementptr inbounds [4 x [2 x i32]], ptr %1815, i64 0, i64 1
  %1877 = load i32, ptr %1876, align 8, !tbaa !18
  %1878 = getelementptr inbounds [4 x [2 x i32]], ptr %1815, i64 0, i64 1, i64 1
  %1879 = load i32, ptr %1878, align 4, !tbaa !18
  %1880 = mul nsw i32 %1877, %1816
  %1881 = ashr i32 %1880, 4
  %1882 = add nsw i32 %1881, %1879
  %1883 = tail call i32 @llvm.smax.i32(i32 %1882, i32 0)
  %1884 = tail call i32 @llvm.smin.i32(i32 %1883, i32 127)
  %1885 = load double, ptr %189, align 8, !tbaa !22
  %1886 = zext i32 %1884 to i64
  %1887 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1886
  %1888 = load double, ptr %1887, align 8, !tbaa !22
  %1889 = fmul double %1885, %190
  %1890 = tail call double @llvm.fmuladd.f64(double %1889, double %1888, double 0.000000e+00)
  br label %1891

1891:                                             ; preds = %1875, %1858
  %1892 = phi i32 [ %1884, %1875 ], [ %1868, %1858 ]
  %1893 = phi double [ %190, %1875 ], [ %183, %1858 ]
  %1894 = phi double [ %1890, %1875 ], [ %1874, %1858 ]
  %1895 = xor i32 %1892, 127
  %1896 = zext i32 %1895 to i64
  %1897 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1896
  %1898 = load double, ptr %1897, align 8, !tbaa !22
  %1899 = fmul double %194, %1893
  %1900 = tail call double @llvm.fmuladd.f64(double %1899, double %1898, double %1894)
  %1901 = fadd double %1857, %1900
  br i1 %759, label %1919, label %1902

1902:                                             ; preds = %1891
  %1903 = getelementptr inbounds [4 x [2 x i32]], ptr %1814, i64 0, i64 2
  %1904 = load i32, ptr %1903, align 16, !tbaa !18
  %1905 = getelementptr inbounds [4 x [2 x i32]], ptr %1814, i64 0, i64 2, i64 1
  %1906 = load i32, ptr %1905, align 4, !tbaa !18
  %1907 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1908 = mul nsw i32 %1904, %1907
  %1909 = ashr i32 %1908, 4
  %1910 = add nsw i32 %1909, %1906
  %1911 = tail call i32 @llvm.smax.i32(i32 %1910, i32 0)
  %1912 = tail call i32 @llvm.smin.i32(i32 %1911, i32 127)
  %1913 = load double, ptr %211, align 8, !tbaa !22
  %1914 = zext i32 %1912 to i64
  %1915 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1914
  %1916 = load double, ptr %1915, align 8, !tbaa !22
  %1917 = fmul double %1913, %212
  %1918 = tail call double @llvm.fmuladd.f64(double %1917, double %1916, double 0.000000e+00)
  br label %1935

1919:                                             ; preds = %1891
  %1920 = getelementptr inbounds [4 x [2 x i32]], ptr %1815, i64 0, i64 2
  %1921 = load i32, ptr %1920, align 16, !tbaa !18
  %1922 = getelementptr inbounds [4 x [2 x i32]], ptr %1815, i64 0, i64 2, i64 1
  %1923 = load i32, ptr %1922, align 4, !tbaa !18
  %1924 = mul nsw i32 %1921, %1816
  %1925 = ashr i32 %1924, 4
  %1926 = add nsw i32 %1925, %1923
  %1927 = tail call i32 @llvm.smax.i32(i32 %1926, i32 0)
  %1928 = tail call i32 @llvm.smin.i32(i32 %1927, i32 127)
  %1929 = load double, ptr %218, align 8, !tbaa !22
  %1930 = zext i32 %1928 to i64
  %1931 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1930
  %1932 = load double, ptr %1931, align 8, !tbaa !22
  %1933 = fmul double %1929, %219
  %1934 = tail call double @llvm.fmuladd.f64(double %1933, double %1932, double 0.000000e+00)
  br label %1935

1935:                                             ; preds = %1919, %1902
  %1936 = phi i32 [ %1928, %1919 ], [ %1912, %1902 ]
  %1937 = phi double [ %219, %1919 ], [ %212, %1902 ]
  %1938 = phi double [ %1934, %1919 ], [ %1918, %1902 ]
  %1939 = xor i32 %1936, 127
  %1940 = zext i32 %1939 to i64
  %1941 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1940
  %1942 = load double, ptr %1941, align 8, !tbaa !22
  %1943 = fmul double %223, %1937
  %1944 = tail call double @llvm.fmuladd.f64(double %1943, double %1942, double %1938)
  %1945 = fadd double %1901, %1944
  br i1 %759, label %1963, label %1946

1946:                                             ; preds = %1935
  %1947 = getelementptr inbounds [4 x [2 x i32]], ptr %1814, i64 0, i64 3
  %1948 = load i32, ptr %1947, align 8, !tbaa !18
  %1949 = getelementptr inbounds [4 x [2 x i32]], ptr %1814, i64 0, i64 3, i64 1
  %1950 = load i32, ptr %1949, align 4, !tbaa !18
  %1951 = tail call i32 @llvm.smax.i32(i32 %824, i32 0)
  %1952 = mul nsw i32 %1948, %1951
  %1953 = ashr i32 %1952, 4
  %1954 = add nsw i32 %1953, %1950
  %1955 = tail call i32 @llvm.smax.i32(i32 %1954, i32 0)
  %1956 = tail call i32 @llvm.smin.i32(i32 %1955, i32 127)
  %1957 = load double, ptr %240, align 8, !tbaa !22
  %1958 = zext i32 %1956 to i64
  %1959 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1958
  %1960 = load double, ptr %1959, align 8, !tbaa !22
  %1961 = fmul double %1957, %241
  %1962 = tail call double @llvm.fmuladd.f64(double %1961, double %1960, double 0.000000e+00)
  br label %1979

1963:                                             ; preds = %1935
  %1964 = getelementptr inbounds [4 x [2 x i32]], ptr %1815, i64 0, i64 3
  %1965 = load i32, ptr %1964, align 8, !tbaa !18
  %1966 = getelementptr inbounds [4 x [2 x i32]], ptr %1815, i64 0, i64 3, i64 1
  %1967 = load i32, ptr %1966, align 4, !tbaa !18
  %1968 = mul nsw i32 %1965, %1816
  %1969 = ashr i32 %1968, 4
  %1970 = add nsw i32 %1969, %1967
  %1971 = tail call i32 @llvm.smax.i32(i32 %1970, i32 0)
  %1972 = tail call i32 @llvm.smin.i32(i32 %1971, i32 127)
  %1973 = load double, ptr %247, align 8, !tbaa !22
  %1974 = zext i32 %1972 to i64
  %1975 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1974
  %1976 = load double, ptr %1975, align 8, !tbaa !22
  %1977 = fmul double %1973, %248
  %1978 = tail call double @llvm.fmuladd.f64(double %1977, double %1976, double 0.000000e+00)
  br label %1979

1979:                                             ; preds = %1963, %1946
  %1980 = phi i32 [ %1972, %1963 ], [ %1956, %1946 ]
  %1981 = phi double [ %248, %1963 ], [ %241, %1946 ]
  %1982 = phi double [ %1978, %1963 ], [ %1962, %1946 ]
  %1983 = xor i32 %1980, 127
  %1984 = zext i32 %1983 to i64
  %1985 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1984
  %1986 = load double, ptr %1985, align 8, !tbaa !22
  %1987 = fmul double %252, %1981
  %1988 = tail call double @llvm.fmuladd.f64(double %1987, double %1986, double %1982)
  %1989 = fadd double %1945, %1988
  %1990 = load i32, ptr %8, align 4, !tbaa !42
  %1991 = tail call i32 @llvm.smax.i32(i32 %1990, i32 0)
  br label %1997

1992:                                             ; preds = %2304
  %1993 = load i32, ptr %5, align 4, !tbaa !25
  %1994 = icmp eq i32 %1993, 2
  %1995 = load i32, ptr %8, align 4, !tbaa !42
  %1996 = tail call i32 @llvm.smax.i32(i32 %1995, i32 0)
  br label %2328

1997:                                             ; preds = %1979, %2304
  %1998 = phi i64 [ %2321, %2304 ], [ 0, %1979 ]
  %1999 = phi double [ %2320, %2304 ], [ %1989, %1979 ]
  %2000 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 0
  %2001 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 0, i32 2
  %2002 = load i64, ptr %2001, align 8, !tbaa !43
  %2003 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 0, i32 1
  %2004 = load i8, ptr %2003, align 2, !tbaa !46
  %2005 = icmp eq i8 %2004, 0
  %2006 = load i16, ptr %2000, align 8, !tbaa !47
  %2007 = zext i16 %2006 to i32
  %2008 = add nuw nsw i32 %2007, 64
  %2009 = sub nsw i32 63, %2007
  %2010 = select i1 %2005, i32 %2009, i32 %2008
  %2011 = uitofp i64 %2002 to double
  %2012 = fmul double %2011, 3.125000e-02
  %2013 = fcmp ogt double %2012, 1.000000e+00
  %2014 = select i1 %2013, double 1.000000e+00, double %2012
  %2015 = sext i32 %2010 to i64
  %2016 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2015
  %2017 = load double, ptr %2016, align 8, !tbaa !22
  %2018 = fneg double %2014
  %2019 = fmul double %2017, %2018
  %2020 = sub nsw i32 127, %2010
  %2021 = sext i32 %2020 to i64
  %2022 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2021
  %2023 = load double, ptr %2022, align 8, !tbaa !22
  %2024 = fmul double %2023, %2018
  %2025 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 1
  %2026 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 1, i32 2
  %2027 = load i64, ptr %2026, align 8, !tbaa !43
  br i1 %759, label %2028, label %2166

2028:                                             ; preds = %1997
  %2029 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 0
  %2030 = load i32, ptr %2029, align 16, !tbaa !18
  %2031 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 0, i64 1
  %2032 = load i32, ptr %2031, align 4, !tbaa !18
  %2033 = mul nsw i32 %2030, %1991
  %2034 = ashr i32 %2033, 4
  %2035 = add nsw i32 %2034, %2032
  %2036 = tail call i32 @llvm.smax.i32(i32 %2035, i32 0)
  %2037 = tail call i32 @llvm.smin.i32(i32 %2036, i32 127)
  %2038 = zext i32 %2037 to i64
  %2039 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2038
  %2040 = load double, ptr %2039, align 8, !tbaa !22
  %2041 = tail call double @llvm.fmuladd.f64(double %2019, double %2040, double 0.000000e+00)
  %2042 = xor i32 %2037, 127
  %2043 = zext i32 %2042 to i64
  %2044 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2043
  %2045 = load double, ptr %2044, align 8, !tbaa !22
  %2046 = tail call double @llvm.fmuladd.f64(double %2024, double %2045, double %2041)
  %2047 = fadd double %1999, %2046
  %2048 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 1
  %2049 = load i32, ptr %2048, align 8, !tbaa !18
  %2050 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 1, i64 1
  %2051 = load i32, ptr %2050, align 4, !tbaa !18
  %2052 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 1, i32 1
  %2053 = load i8, ptr %2052, align 2, !tbaa !46
  %2054 = icmp eq i8 %2053, 0
  %2055 = load i16, ptr %2025, align 8, !tbaa !47
  %2056 = zext i16 %2055 to i32
  %2057 = add nuw nsw i32 %2056, 64
  %2058 = sub nsw i32 63, %2056
  %2059 = select i1 %2054, i32 %2058, i32 %2057
  %2060 = mul nsw i32 %2049, %1991
  %2061 = ashr i32 %2060, 4
  %2062 = add nsw i32 %2061, %2051
  %2063 = tail call i32 @llvm.smax.i32(i32 %2062, i32 0)
  %2064 = tail call i32 @llvm.smin.i32(i32 %2063, i32 127)
  %2065 = uitofp i64 %2027 to double
  %2066 = fmul double %2065, 3.125000e-02
  %2067 = fcmp ogt double %2066, 1.000000e+00
  %2068 = select i1 %2067, double 1.000000e+00, double %2066
  %2069 = sext i32 %2059 to i64
  %2070 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2069
  %2071 = load double, ptr %2070, align 8, !tbaa !22
  %2072 = zext i32 %2064 to i64
  %2073 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2072
  %2074 = load double, ptr %2073, align 8, !tbaa !22
  %2075 = fneg double %2068
  %2076 = fmul double %2071, %2075
  %2077 = tail call double @llvm.fmuladd.f64(double %2076, double %2074, double 0.000000e+00)
  %2078 = sub nsw i32 127, %2059
  %2079 = sext i32 %2078 to i64
  %2080 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2079
  %2081 = load double, ptr %2080, align 8, !tbaa !22
  %2082 = xor i32 %2064, 127
  %2083 = zext i32 %2082 to i64
  %2084 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2083
  %2085 = load double, ptr %2084, align 8, !tbaa !22
  %2086 = fmul double %2081, %2075
  %2087 = tail call double @llvm.fmuladd.f64(double %2086, double %2085, double %2077)
  %2088 = fadd double %2047, %2087
  %2089 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 2
  %2090 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 2
  %2091 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 2, i32 2
  %2092 = load i64, ptr %2091, align 8, !tbaa !43
  %2093 = load i32, ptr %2090, align 16, !tbaa !18
  %2094 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 2, i64 1
  %2095 = load i32, ptr %2094, align 4, !tbaa !18
  %2096 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 2, i32 1
  %2097 = load i8, ptr %2096, align 2, !tbaa !46
  %2098 = icmp eq i8 %2097, 0
  %2099 = load i16, ptr %2089, align 8, !tbaa !47
  %2100 = zext i16 %2099 to i32
  %2101 = add nuw nsw i32 %2100, 64
  %2102 = sub nsw i32 63, %2100
  %2103 = select i1 %2098, i32 %2102, i32 %2101
  %2104 = mul nsw i32 %2093, %1991
  %2105 = ashr i32 %2104, 4
  %2106 = add nsw i32 %2105, %2095
  %2107 = tail call i32 @llvm.smax.i32(i32 %2106, i32 0)
  %2108 = tail call i32 @llvm.smin.i32(i32 %2107, i32 127)
  %2109 = uitofp i64 %2092 to double
  %2110 = fmul double %2109, 3.125000e-02
  %2111 = fcmp ogt double %2110, 1.000000e+00
  %2112 = select i1 %2111, double 1.000000e+00, double %2110
  %2113 = sext i32 %2103 to i64
  %2114 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2113
  %2115 = load double, ptr %2114, align 8, !tbaa !22
  %2116 = zext i32 %2108 to i64
  %2117 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2116
  %2118 = load double, ptr %2117, align 8, !tbaa !22
  %2119 = fneg double %2112
  %2120 = fmul double %2115, %2119
  %2121 = tail call double @llvm.fmuladd.f64(double %2120, double %2118, double 0.000000e+00)
  %2122 = sub nsw i32 127, %2103
  %2123 = sext i32 %2122 to i64
  %2124 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2123
  %2125 = load double, ptr %2124, align 8, !tbaa !22
  %2126 = xor i32 %2108, 127
  %2127 = zext i32 %2126 to i64
  %2128 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2127
  %2129 = load double, ptr %2128, align 8, !tbaa !22
  %2130 = fmul double %2125, %2119
  %2131 = tail call double @llvm.fmuladd.f64(double %2130, double %2129, double %2121)
  %2132 = fadd double %2088, %2131
  %2133 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 3
  %2134 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 3
  %2135 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 3, i32 2
  %2136 = load i64, ptr %2135, align 8, !tbaa !43
  %2137 = load i32, ptr %2134, align 8, !tbaa !18
  %2138 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1998, i64 3, i64 1
  %2139 = load i32, ptr %2138, align 4, !tbaa !18
  %2140 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 3, i32 1
  %2141 = load i8, ptr %2140, align 2, !tbaa !46
  %2142 = icmp eq i8 %2141, 0
  %2143 = load i16, ptr %2133, align 8, !tbaa !47
  %2144 = zext i16 %2143 to i32
  %2145 = add nuw nsw i32 %2144, 64
  %2146 = sub nsw i32 63, %2144
  %2147 = select i1 %2142, i32 %2146, i32 %2145
  %2148 = mul nsw i32 %2137, %1991
  %2149 = ashr i32 %2148, 4
  %2150 = add nsw i32 %2149, %2139
  %2151 = tail call i32 @llvm.smax.i32(i32 %2150, i32 0)
  %2152 = tail call i32 @llvm.smin.i32(i32 %2151, i32 127)
  %2153 = uitofp i64 %2136 to double
  %2154 = fmul double %2153, 3.125000e-02
  %2155 = fcmp ogt double %2154, 1.000000e+00
  %2156 = select i1 %2155, double 1.000000e+00, double %2154
  %2157 = sext i32 %2147 to i64
  %2158 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2157
  %2159 = load double, ptr %2158, align 8, !tbaa !22
  %2160 = zext i32 %2152 to i64
  %2161 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2160
  %2162 = load double, ptr %2161, align 8, !tbaa !22
  %2163 = fneg double %2156
  %2164 = fmul double %2159, %2163
  %2165 = tail call double @llvm.fmuladd.f64(double %2164, double %2162, double 0.000000e+00)
  br label %2304

2166:                                             ; preds = %1997
  %2167 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %258, i64 %1998, i64 0
  %2168 = load i32, ptr %2167, align 16, !tbaa !18
  %2169 = getelementptr inbounds i32, ptr %2167, i64 1
  %2170 = load i32, ptr %2169, align 4, !tbaa !18
  %2171 = mul nsw i32 %2168, %1991
  %2172 = ashr i32 %2171, 4
  %2173 = add nsw i32 %2172, %2170
  %2174 = tail call i32 @llvm.smax.i32(i32 %2173, i32 0)
  %2175 = tail call i32 @llvm.smin.i32(i32 %2174, i32 127)
  %2176 = zext i32 %2175 to i64
  %2177 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2176
  %2178 = load double, ptr %2177, align 8, !tbaa !22
  %2179 = tail call double @llvm.fmuladd.f64(double %2019, double %2178, double 0.000000e+00)
  %2180 = xor i32 %2175, 127
  %2181 = zext i32 %2180 to i64
  %2182 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2181
  %2183 = load double, ptr %2182, align 8, !tbaa !22
  %2184 = tail call double @llvm.fmuladd.f64(double %2024, double %2183, double %2179)
  %2185 = fadd double %1999, %2184
  %2186 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %258, i64 %1998, i64 1
  %2187 = load i32, ptr %2186, align 8, !tbaa !18
  %2188 = getelementptr inbounds i32, ptr %2186, i64 1
  %2189 = load i32, ptr %2188, align 4, !tbaa !18
  %2190 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 1, i32 1
  %2191 = load i8, ptr %2190, align 2, !tbaa !46
  %2192 = icmp eq i8 %2191, 0
  %2193 = load i16, ptr %2025, align 8, !tbaa !47
  %2194 = zext i16 %2193 to i32
  %2195 = add nuw nsw i32 %2194, 64
  %2196 = sub nsw i32 63, %2194
  %2197 = select i1 %2192, i32 %2196, i32 %2195
  %2198 = mul nsw i32 %2187, %1991
  %2199 = ashr i32 %2198, 4
  %2200 = add nsw i32 %2199, %2189
  %2201 = tail call i32 @llvm.smax.i32(i32 %2200, i32 0)
  %2202 = tail call i32 @llvm.smin.i32(i32 %2201, i32 127)
  %2203 = uitofp i64 %2027 to double
  %2204 = fmul double %2203, 3.125000e-02
  %2205 = fcmp ogt double %2204, 1.000000e+00
  %2206 = select i1 %2205, double 1.000000e+00, double %2204
  %2207 = sext i32 %2197 to i64
  %2208 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2207
  %2209 = load double, ptr %2208, align 8, !tbaa !22
  %2210 = zext i32 %2202 to i64
  %2211 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2210
  %2212 = load double, ptr %2211, align 8, !tbaa !22
  %2213 = fneg double %2206
  %2214 = fmul double %2209, %2213
  %2215 = tail call double @llvm.fmuladd.f64(double %2214, double %2212, double 0.000000e+00)
  %2216 = sub nsw i32 127, %2197
  %2217 = sext i32 %2216 to i64
  %2218 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2217
  %2219 = load double, ptr %2218, align 8, !tbaa !22
  %2220 = xor i32 %2202, 127
  %2221 = zext i32 %2220 to i64
  %2222 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2221
  %2223 = load double, ptr %2222, align 8, !tbaa !22
  %2224 = fmul double %2219, %2213
  %2225 = tail call double @llvm.fmuladd.f64(double %2224, double %2223, double %2215)
  %2226 = fadd double %2185, %2225
  %2227 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 2
  %2228 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %258, i64 %1998, i64 2
  %2229 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 2, i32 2
  %2230 = load i64, ptr %2229, align 8, !tbaa !43
  %2231 = load i32, ptr %2228, align 16, !tbaa !18
  %2232 = getelementptr inbounds i32, ptr %2228, i64 1
  %2233 = load i32, ptr %2232, align 4, !tbaa !18
  %2234 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 2, i32 1
  %2235 = load i8, ptr %2234, align 2, !tbaa !46
  %2236 = icmp eq i8 %2235, 0
  %2237 = load i16, ptr %2227, align 8, !tbaa !47
  %2238 = zext i16 %2237 to i32
  %2239 = add nuw nsw i32 %2238, 64
  %2240 = sub nsw i32 63, %2238
  %2241 = select i1 %2236, i32 %2240, i32 %2239
  %2242 = mul nsw i32 %2231, %1991
  %2243 = ashr i32 %2242, 4
  %2244 = add nsw i32 %2243, %2233
  %2245 = tail call i32 @llvm.smax.i32(i32 %2244, i32 0)
  %2246 = tail call i32 @llvm.smin.i32(i32 %2245, i32 127)
  %2247 = uitofp i64 %2230 to double
  %2248 = fmul double %2247, 3.125000e-02
  %2249 = fcmp ogt double %2248, 1.000000e+00
  %2250 = select i1 %2249, double 1.000000e+00, double %2248
  %2251 = sext i32 %2241 to i64
  %2252 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2251
  %2253 = load double, ptr %2252, align 8, !tbaa !22
  %2254 = zext i32 %2246 to i64
  %2255 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2254
  %2256 = load double, ptr %2255, align 8, !tbaa !22
  %2257 = fneg double %2250
  %2258 = fmul double %2253, %2257
  %2259 = tail call double @llvm.fmuladd.f64(double %2258, double %2256, double 0.000000e+00)
  %2260 = sub nsw i32 127, %2241
  %2261 = sext i32 %2260 to i64
  %2262 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2261
  %2263 = load double, ptr %2262, align 8, !tbaa !22
  %2264 = xor i32 %2246, 127
  %2265 = zext i32 %2264 to i64
  %2266 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2265
  %2267 = load double, ptr %2266, align 8, !tbaa !22
  %2268 = fmul double %2263, %2257
  %2269 = tail call double @llvm.fmuladd.f64(double %2268, double %2267, double %2259)
  %2270 = fadd double %2226, %2269
  %2271 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 3
  %2272 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %258, i64 %1998, i64 3
  %2273 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 3, i32 2
  %2274 = load i64, ptr %2273, align 8, !tbaa !43
  %2275 = load i32, ptr %2272, align 8, !tbaa !18
  %2276 = getelementptr inbounds i32, ptr %2272, i64 1
  %2277 = load i32, ptr %2276, align 4, !tbaa !18
  %2278 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 2, i64 %1998, i64 3, i32 1
  %2279 = load i8, ptr %2278, align 2, !tbaa !46
  %2280 = icmp eq i8 %2279, 0
  %2281 = load i16, ptr %2271, align 8, !tbaa !47
  %2282 = zext i16 %2281 to i32
  %2283 = add nuw nsw i32 %2282, 64
  %2284 = sub nsw i32 63, %2282
  %2285 = select i1 %2280, i32 %2284, i32 %2283
  %2286 = mul nsw i32 %2275, %1991
  %2287 = ashr i32 %2286, 4
  %2288 = add nsw i32 %2287, %2277
  %2289 = tail call i32 @llvm.smax.i32(i32 %2288, i32 0)
  %2290 = tail call i32 @llvm.smin.i32(i32 %2289, i32 127)
  %2291 = uitofp i64 %2274 to double
  %2292 = fmul double %2291, 3.125000e-02
  %2293 = fcmp ogt double %2292, 1.000000e+00
  %2294 = select i1 %2293, double 1.000000e+00, double %2292
  %2295 = sext i32 %2285 to i64
  %2296 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2295
  %2297 = load double, ptr %2296, align 8, !tbaa !22
  %2298 = zext i32 %2290 to i64
  %2299 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2298
  %2300 = load double, ptr %2299, align 8, !tbaa !22
  %2301 = fneg double %2294
  %2302 = fmul double %2297, %2301
  %2303 = tail call double @llvm.fmuladd.f64(double %2302, double %2300, double 0.000000e+00)
  br label %2304

2304:                                             ; preds = %2166, %2028
  %2305 = phi i32 [ %2285, %2166 ], [ %2147, %2028 ]
  %2306 = phi i32 [ %2290, %2166 ], [ %2152, %2028 ]
  %2307 = phi double [ %2301, %2166 ], [ %2163, %2028 ]
  %2308 = phi double [ %2303, %2166 ], [ %2165, %2028 ]
  %2309 = phi double [ %2270, %2166 ], [ %2132, %2028 ]
  %2310 = sub nsw i32 127, %2305
  %2311 = sext i32 %2310 to i64
  %2312 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2311
  %2313 = load double, ptr %2312, align 8, !tbaa !22
  %2314 = xor i32 %2306, 127
  %2315 = zext i32 %2314 to i64
  %2316 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2315
  %2317 = load double, ptr %2316, align 8, !tbaa !22
  %2318 = fmul double %2313, %2307
  %2319 = tail call double @llvm.fmuladd.f64(double %2318, double %2317, double %2308)
  %2320 = fadd double %2309, %2319
  %2321 = add nuw nsw i64 %1998, 1
  %2322 = icmp eq i64 %2321, 3
  br i1 %2322, label %1992, label %1997, !llvm.loop !54

2323:                                             ; preds = %2635
  %2324 = load i32, ptr %5, align 4, !tbaa !25
  %2325 = icmp eq i32 %2324, 2
  %2326 = load i32, ptr %8, align 4, !tbaa !42
  %2327 = tail call i32 @llvm.smax.i32(i32 %2326, i32 0)
  br label %2657

2328:                                             ; preds = %1992, %2635
  %2329 = phi i64 [ 0, %1992 ], [ %2652, %2635 ]
  %2330 = phi double [ %2320, %1992 ], [ %2651, %2635 ]
  %2331 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 0
  %2332 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 0, i32 2
  %2333 = load i64, ptr %2332, align 8, !tbaa !43
  %2334 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 0, i32 1
  %2335 = load i8, ptr %2334, align 2, !tbaa !46
  %2336 = icmp eq i8 %2335, 0
  %2337 = load i16, ptr %2331, align 8, !tbaa !47
  %2338 = zext i16 %2337 to i32
  %2339 = add nuw nsw i32 %2338, 64
  %2340 = sub nsw i32 63, %2338
  %2341 = select i1 %2336, i32 %2340, i32 %2339
  %2342 = uitofp i64 %2333 to double
  %2343 = fmul double %2342, 3.125000e-02
  %2344 = fcmp ogt double %2343, 1.000000e+00
  %2345 = select i1 %2344, double 1.000000e+00, double %2343
  %2346 = sext i32 %2341 to i64
  %2347 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2346
  %2348 = load double, ptr %2347, align 8, !tbaa !22
  %2349 = fneg double %2345
  %2350 = fmul double %2348, %2349
  %2351 = sub nsw i32 127, %2341
  %2352 = sext i32 %2351 to i64
  %2353 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2352
  %2354 = load double, ptr %2353, align 8, !tbaa !22
  %2355 = fmul double %2354, %2349
  %2356 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 1
  %2357 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 1, i32 2
  %2358 = load i64, ptr %2357, align 8, !tbaa !43
  br i1 %1994, label %2359, label %2497

2359:                                             ; preds = %2328
  %2360 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 0
  %2361 = load i32, ptr %2360, align 16, !tbaa !18
  %2362 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 0, i64 1
  %2363 = load i32, ptr %2362, align 4, !tbaa !18
  %2364 = mul nsw i32 %2361, %1996
  %2365 = ashr i32 %2364, 4
  %2366 = add nsw i32 %2365, %2363
  %2367 = tail call i32 @llvm.smax.i32(i32 %2366, i32 0)
  %2368 = tail call i32 @llvm.smin.i32(i32 %2367, i32 127)
  %2369 = zext i32 %2368 to i64
  %2370 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2369
  %2371 = load double, ptr %2370, align 8, !tbaa !22
  %2372 = tail call double @llvm.fmuladd.f64(double %2350, double %2371, double 0.000000e+00)
  %2373 = xor i32 %2368, 127
  %2374 = zext i32 %2373 to i64
  %2375 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2374
  %2376 = load double, ptr %2375, align 8, !tbaa !22
  %2377 = tail call double @llvm.fmuladd.f64(double %2355, double %2376, double %2372)
  %2378 = fadd double %2330, %2377
  %2379 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 1
  %2380 = load i32, ptr %2379, align 8, !tbaa !18
  %2381 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 1, i64 1
  %2382 = load i32, ptr %2381, align 4, !tbaa !18
  %2383 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 1, i32 1
  %2384 = load i8, ptr %2383, align 2, !tbaa !46
  %2385 = icmp eq i8 %2384, 0
  %2386 = load i16, ptr %2356, align 8, !tbaa !47
  %2387 = zext i16 %2386 to i32
  %2388 = add nuw nsw i32 %2387, 64
  %2389 = sub nsw i32 63, %2387
  %2390 = select i1 %2385, i32 %2389, i32 %2388
  %2391 = mul nsw i32 %2380, %1996
  %2392 = ashr i32 %2391, 4
  %2393 = add nsw i32 %2392, %2382
  %2394 = tail call i32 @llvm.smax.i32(i32 %2393, i32 0)
  %2395 = tail call i32 @llvm.smin.i32(i32 %2394, i32 127)
  %2396 = uitofp i64 %2358 to double
  %2397 = fmul double %2396, 3.125000e-02
  %2398 = fcmp ogt double %2397, 1.000000e+00
  %2399 = select i1 %2398, double 1.000000e+00, double %2397
  %2400 = sext i32 %2390 to i64
  %2401 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2400
  %2402 = load double, ptr %2401, align 8, !tbaa !22
  %2403 = zext i32 %2395 to i64
  %2404 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2403
  %2405 = load double, ptr %2404, align 8, !tbaa !22
  %2406 = fneg double %2399
  %2407 = fmul double %2402, %2406
  %2408 = tail call double @llvm.fmuladd.f64(double %2407, double %2405, double 0.000000e+00)
  %2409 = sub nsw i32 127, %2390
  %2410 = sext i32 %2409 to i64
  %2411 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2410
  %2412 = load double, ptr %2411, align 8, !tbaa !22
  %2413 = xor i32 %2395, 127
  %2414 = zext i32 %2413 to i64
  %2415 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2414
  %2416 = load double, ptr %2415, align 8, !tbaa !22
  %2417 = fmul double %2412, %2406
  %2418 = tail call double @llvm.fmuladd.f64(double %2417, double %2416, double %2408)
  %2419 = fadd double %2378, %2418
  %2420 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 2
  %2421 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 2
  %2422 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 2, i32 2
  %2423 = load i64, ptr %2422, align 8, !tbaa !43
  %2424 = load i32, ptr %2421, align 16, !tbaa !18
  %2425 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 2, i64 1
  %2426 = load i32, ptr %2425, align 4, !tbaa !18
  %2427 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 2, i32 1
  %2428 = load i8, ptr %2427, align 2, !tbaa !46
  %2429 = icmp eq i8 %2428, 0
  %2430 = load i16, ptr %2420, align 8, !tbaa !47
  %2431 = zext i16 %2430 to i32
  %2432 = add nuw nsw i32 %2431, 64
  %2433 = sub nsw i32 63, %2431
  %2434 = select i1 %2429, i32 %2433, i32 %2432
  %2435 = mul nsw i32 %2424, %1996
  %2436 = ashr i32 %2435, 4
  %2437 = add nsw i32 %2436, %2426
  %2438 = tail call i32 @llvm.smax.i32(i32 %2437, i32 0)
  %2439 = tail call i32 @llvm.smin.i32(i32 %2438, i32 127)
  %2440 = uitofp i64 %2423 to double
  %2441 = fmul double %2440, 3.125000e-02
  %2442 = fcmp ogt double %2441, 1.000000e+00
  %2443 = select i1 %2442, double 1.000000e+00, double %2441
  %2444 = sext i32 %2434 to i64
  %2445 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2444
  %2446 = load double, ptr %2445, align 8, !tbaa !22
  %2447 = zext i32 %2439 to i64
  %2448 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2447
  %2449 = load double, ptr %2448, align 8, !tbaa !22
  %2450 = fneg double %2443
  %2451 = fmul double %2446, %2450
  %2452 = tail call double @llvm.fmuladd.f64(double %2451, double %2449, double 0.000000e+00)
  %2453 = sub nsw i32 127, %2434
  %2454 = sext i32 %2453 to i64
  %2455 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2454
  %2456 = load double, ptr %2455, align 8, !tbaa !22
  %2457 = xor i32 %2439, 127
  %2458 = zext i32 %2457 to i64
  %2459 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2458
  %2460 = load double, ptr %2459, align 8, !tbaa !22
  %2461 = fmul double %2456, %2450
  %2462 = tail call double @llvm.fmuladd.f64(double %2461, double %2460, double %2452)
  %2463 = fadd double %2419, %2462
  %2464 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 3
  %2465 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 3
  %2466 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 3, i32 2
  %2467 = load i64, ptr %2466, align 8, !tbaa !43
  %2468 = load i32, ptr %2465, align 8, !tbaa !18
  %2469 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %2329, i64 3, i64 1
  %2470 = load i32, ptr %2469, align 4, !tbaa !18
  %2471 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 3, i32 1
  %2472 = load i8, ptr %2471, align 2, !tbaa !46
  %2473 = icmp eq i8 %2472, 0
  %2474 = load i16, ptr %2464, align 8, !tbaa !47
  %2475 = zext i16 %2474 to i32
  %2476 = add nuw nsw i32 %2475, 64
  %2477 = sub nsw i32 63, %2475
  %2478 = select i1 %2473, i32 %2477, i32 %2476
  %2479 = mul nsw i32 %2468, %1996
  %2480 = ashr i32 %2479, 4
  %2481 = add nsw i32 %2480, %2470
  %2482 = tail call i32 @llvm.smax.i32(i32 %2481, i32 0)
  %2483 = tail call i32 @llvm.smin.i32(i32 %2482, i32 127)
  %2484 = uitofp i64 %2467 to double
  %2485 = fmul double %2484, 3.125000e-02
  %2486 = fcmp ogt double %2485, 1.000000e+00
  %2487 = select i1 %2486, double 1.000000e+00, double %2485
  %2488 = sext i32 %2478 to i64
  %2489 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2488
  %2490 = load double, ptr %2489, align 8, !tbaa !22
  %2491 = zext i32 %2483 to i64
  %2492 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2491
  %2493 = load double, ptr %2492, align 8, !tbaa !22
  %2494 = fneg double %2487
  %2495 = fmul double %2490, %2494
  %2496 = tail call double @llvm.fmuladd.f64(double %2495, double %2493, double 0.000000e+00)
  br label %2635

2497:                                             ; preds = %2328
  %2498 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %258, i64 %2329, i64 0
  %2499 = load i32, ptr %2498, align 16, !tbaa !18
  %2500 = getelementptr inbounds i32, ptr %2498, i64 1
  %2501 = load i32, ptr %2500, align 4, !tbaa !18
  %2502 = mul nsw i32 %2499, %1996
  %2503 = ashr i32 %2502, 4
  %2504 = add nsw i32 %2503, %2501
  %2505 = tail call i32 @llvm.smax.i32(i32 %2504, i32 0)
  %2506 = tail call i32 @llvm.smin.i32(i32 %2505, i32 127)
  %2507 = zext i32 %2506 to i64
  %2508 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2507
  %2509 = load double, ptr %2508, align 8, !tbaa !22
  %2510 = tail call double @llvm.fmuladd.f64(double %2350, double %2509, double 0.000000e+00)
  %2511 = xor i32 %2506, 127
  %2512 = zext i32 %2511 to i64
  %2513 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2512
  %2514 = load double, ptr %2513, align 8, !tbaa !22
  %2515 = tail call double @llvm.fmuladd.f64(double %2355, double %2514, double %2510)
  %2516 = fadd double %2330, %2515
  %2517 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %258, i64 %2329, i64 1
  %2518 = load i32, ptr %2517, align 8, !tbaa !18
  %2519 = getelementptr inbounds i32, ptr %2517, i64 1
  %2520 = load i32, ptr %2519, align 4, !tbaa !18
  %2521 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 1, i32 1
  %2522 = load i8, ptr %2521, align 2, !tbaa !46
  %2523 = icmp eq i8 %2522, 0
  %2524 = load i16, ptr %2356, align 8, !tbaa !47
  %2525 = zext i16 %2524 to i32
  %2526 = add nuw nsw i32 %2525, 64
  %2527 = sub nsw i32 63, %2525
  %2528 = select i1 %2523, i32 %2527, i32 %2526
  %2529 = mul nsw i32 %2518, %1996
  %2530 = ashr i32 %2529, 4
  %2531 = add nsw i32 %2530, %2520
  %2532 = tail call i32 @llvm.smax.i32(i32 %2531, i32 0)
  %2533 = tail call i32 @llvm.smin.i32(i32 %2532, i32 127)
  %2534 = uitofp i64 %2358 to double
  %2535 = fmul double %2534, 3.125000e-02
  %2536 = fcmp ogt double %2535, 1.000000e+00
  %2537 = select i1 %2536, double 1.000000e+00, double %2535
  %2538 = sext i32 %2528 to i64
  %2539 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2538
  %2540 = load double, ptr %2539, align 8, !tbaa !22
  %2541 = zext i32 %2533 to i64
  %2542 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2541
  %2543 = load double, ptr %2542, align 8, !tbaa !22
  %2544 = fneg double %2537
  %2545 = fmul double %2540, %2544
  %2546 = tail call double @llvm.fmuladd.f64(double %2545, double %2543, double 0.000000e+00)
  %2547 = sub nsw i32 127, %2528
  %2548 = sext i32 %2547 to i64
  %2549 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2548
  %2550 = load double, ptr %2549, align 8, !tbaa !22
  %2551 = xor i32 %2533, 127
  %2552 = zext i32 %2551 to i64
  %2553 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2552
  %2554 = load double, ptr %2553, align 8, !tbaa !22
  %2555 = fmul double %2550, %2544
  %2556 = tail call double @llvm.fmuladd.f64(double %2555, double %2554, double %2546)
  %2557 = fadd double %2516, %2556
  %2558 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 2
  %2559 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %258, i64 %2329, i64 2
  %2560 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 2, i32 2
  %2561 = load i64, ptr %2560, align 8, !tbaa !43
  %2562 = load i32, ptr %2559, align 16, !tbaa !18
  %2563 = getelementptr inbounds i32, ptr %2559, i64 1
  %2564 = load i32, ptr %2563, align 4, !tbaa !18
  %2565 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 2, i32 1
  %2566 = load i8, ptr %2565, align 2, !tbaa !46
  %2567 = icmp eq i8 %2566, 0
  %2568 = load i16, ptr %2558, align 8, !tbaa !47
  %2569 = zext i16 %2568 to i32
  %2570 = add nuw nsw i32 %2569, 64
  %2571 = sub nsw i32 63, %2569
  %2572 = select i1 %2567, i32 %2571, i32 %2570
  %2573 = mul nsw i32 %2562, %1996
  %2574 = ashr i32 %2573, 4
  %2575 = add nsw i32 %2574, %2564
  %2576 = tail call i32 @llvm.smax.i32(i32 %2575, i32 0)
  %2577 = tail call i32 @llvm.smin.i32(i32 %2576, i32 127)
  %2578 = uitofp i64 %2561 to double
  %2579 = fmul double %2578, 3.125000e-02
  %2580 = fcmp ogt double %2579, 1.000000e+00
  %2581 = select i1 %2580, double 1.000000e+00, double %2579
  %2582 = sext i32 %2572 to i64
  %2583 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2582
  %2584 = load double, ptr %2583, align 8, !tbaa !22
  %2585 = zext i32 %2577 to i64
  %2586 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2585
  %2587 = load double, ptr %2586, align 8, !tbaa !22
  %2588 = fneg double %2581
  %2589 = fmul double %2584, %2588
  %2590 = tail call double @llvm.fmuladd.f64(double %2589, double %2587, double 0.000000e+00)
  %2591 = sub nsw i32 127, %2572
  %2592 = sext i32 %2591 to i64
  %2593 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2592
  %2594 = load double, ptr %2593, align 8, !tbaa !22
  %2595 = xor i32 %2577, 127
  %2596 = zext i32 %2595 to i64
  %2597 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2596
  %2598 = load double, ptr %2597, align 8, !tbaa !22
  %2599 = fmul double %2594, %2588
  %2600 = tail call double @llvm.fmuladd.f64(double %2599, double %2598, double %2590)
  %2601 = fadd double %2557, %2600
  %2602 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 3
  %2603 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %258, i64 %2329, i64 3
  %2604 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 3, i32 2
  %2605 = load i64, ptr %2604, align 8, !tbaa !43
  %2606 = load i32, ptr %2603, align 8, !tbaa !18
  %2607 = getelementptr inbounds i32, ptr %2603, i64 1
  %2608 = load i32, ptr %2607, align 4, !tbaa !18
  %2609 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 3, i64 %2329, i64 3, i32 1
  %2610 = load i8, ptr %2609, align 2, !tbaa !46
  %2611 = icmp eq i8 %2610, 0
  %2612 = load i16, ptr %2602, align 8, !tbaa !47
  %2613 = zext i16 %2612 to i32
  %2614 = add nuw nsw i32 %2613, 64
  %2615 = sub nsw i32 63, %2613
  %2616 = select i1 %2611, i32 %2615, i32 %2614
  %2617 = mul nsw i32 %2606, %1996
  %2618 = ashr i32 %2617, 4
  %2619 = add nsw i32 %2618, %2608
  %2620 = tail call i32 @llvm.smax.i32(i32 %2619, i32 0)
  %2621 = tail call i32 @llvm.smin.i32(i32 %2620, i32 127)
  %2622 = uitofp i64 %2605 to double
  %2623 = fmul double %2622, 3.125000e-02
  %2624 = fcmp ogt double %2623, 1.000000e+00
  %2625 = select i1 %2624, double 1.000000e+00, double %2623
  %2626 = sext i32 %2616 to i64
  %2627 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2626
  %2628 = load double, ptr %2627, align 8, !tbaa !22
  %2629 = zext i32 %2621 to i64
  %2630 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2629
  %2631 = load double, ptr %2630, align 8, !tbaa !22
  %2632 = fneg double %2625
  %2633 = fmul double %2628, %2632
  %2634 = tail call double @llvm.fmuladd.f64(double %2633, double %2631, double 0.000000e+00)
  br label %2635

2635:                                             ; preds = %2497, %2359
  %2636 = phi i32 [ %2616, %2497 ], [ %2478, %2359 ]
  %2637 = phi i32 [ %2621, %2497 ], [ %2483, %2359 ]
  %2638 = phi double [ %2632, %2497 ], [ %2494, %2359 ]
  %2639 = phi double [ %2634, %2497 ], [ %2496, %2359 ]
  %2640 = phi double [ %2601, %2497 ], [ %2463, %2359 ]
  %2641 = sub nsw i32 127, %2636
  %2642 = sext i32 %2641 to i64
  %2643 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2642
  %2644 = load double, ptr %2643, align 8, !tbaa !22
  %2645 = xor i32 %2637, 127
  %2646 = zext i32 %2645 to i64
  %2647 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2646
  %2648 = load double, ptr %2647, align 8, !tbaa !22
  %2649 = fmul double %2644, %2638
  %2650 = tail call double @llvm.fmuladd.f64(double %2649, double %2648, double %2639)
  %2651 = fadd double %2640, %2650
  %2652 = add nuw nsw i64 %2329, 1
  %2653 = icmp eq i64 %2652, 8
  br i1 %2653, label %2323, label %2328, !llvm.loop !55

2654:                                             ; preds = %2758
  %2655 = tail call i32 @llvm.smax.i32(i32 %2326, i32 0)
  %2656 = tail call i32 @llvm.smax.i32(i32 %2326, i32 0)
  br label %2762

2657:                                             ; preds = %2323, %2758
  %2658 = phi i64 [ 0, %2323 ], [ %2760, %2758 ]
  %2659 = phi double [ %2651, %2323 ], [ %2759, %2758 ]
  br i1 %2325, label %2660, label %2709

2660:                                             ; preds = %2657, %2660
  %2661 = phi i64 [ %2707, %2660 ], [ 0, %2657 ]
  %2662 = phi double [ %2706, %2660 ], [ %2659, %2657 ]
  %2663 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 4, i64 %2658, i64 %2661
  %2664 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 0, i64 %2658, i64 %2661
  %2665 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 4, i64 %2658, i64 %2661, i32 2
  %2666 = load i64, ptr %2665, align 8, !tbaa !43
  %2667 = load i32, ptr %2664, align 8, !tbaa !18
  %2668 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 0, i64 %2658, i64 %2661, i64 1
  %2669 = load i32, ptr %2668, align 4, !tbaa !18
  %2670 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 4, i64 %2658, i64 %2661, i32 1
  %2671 = load i8, ptr %2670, align 2, !tbaa !46
  %2672 = icmp eq i8 %2671, 0
  %2673 = load i16, ptr %2663, align 8, !tbaa !47
  %2674 = zext i16 %2673 to i32
  %2675 = add nuw nsw i32 %2674, 64
  %2676 = sub nsw i32 63, %2674
  %2677 = select i1 %2672, i32 %2676, i32 %2675
  %2678 = mul nsw i32 %2667, %2327
  %2679 = ashr i32 %2678, 4
  %2680 = add nsw i32 %2679, %2669
  %2681 = tail call i32 @llvm.smax.i32(i32 %2680, i32 0)
  %2682 = tail call i32 @llvm.smin.i32(i32 %2681, i32 127)
  %2683 = uitofp i64 %2666 to double
  %2684 = fmul double %2683, 3.125000e-02
  %2685 = fcmp ogt double %2684, 1.000000e+00
  %2686 = select i1 %2685, double 1.000000e+00, double %2684
  %2687 = sext i32 %2677 to i64
  %2688 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2687
  %2689 = load double, ptr %2688, align 8, !tbaa !22
  %2690 = zext i32 %2682 to i64
  %2691 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2690
  %2692 = load double, ptr %2691, align 8, !tbaa !22
  %2693 = fneg double %2686
  %2694 = fmul double %2689, %2693
  %2695 = tail call double @llvm.fmuladd.f64(double %2694, double %2692, double 0.000000e+00)
  %2696 = sub nsw i32 127, %2677
  %2697 = sext i32 %2696 to i64
  %2698 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2697
  %2699 = load double, ptr %2698, align 8, !tbaa !22
  %2700 = xor i32 %2682, 127
  %2701 = zext i32 %2700 to i64
  %2702 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2701
  %2703 = load double, ptr %2702, align 8, !tbaa !22
  %2704 = fmul double %2699, %2693
  %2705 = tail call double @llvm.fmuladd.f64(double %2704, double %2703, double %2695)
  %2706 = fadd double %2662, %2705
  %2707 = add nuw nsw i64 %2661, 1
  %2708 = icmp eq i64 %2707, 15
  br i1 %2708, label %2758, label %2660, !llvm.loop !56

2709:                                             ; preds = %2657, %2709
  %2710 = phi i64 [ %2756, %2709 ], [ 0, %2657 ]
  %2711 = phi double [ %2755, %2709 ], [ %2659, %2657 ]
  %2712 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 4, i64 %2658, i64 %2710
  %2713 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %258, i64 %2658, i64 %2710
  %2714 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 4, i64 %2658, i64 %2710, i32 2
  %2715 = load i64, ptr %2714, align 8, !tbaa !43
  %2716 = load i32, ptr %2713, align 8, !tbaa !18
  %2717 = getelementptr inbounds i32, ptr %2713, i64 1
  %2718 = load i32, ptr %2717, align 4, !tbaa !18
  %2719 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 4, i64 %2658, i64 %2710, i32 1
  %2720 = load i8, ptr %2719, align 2, !tbaa !46
  %2721 = icmp eq i8 %2720, 0
  %2722 = load i16, ptr %2712, align 8, !tbaa !47
  %2723 = zext i16 %2722 to i32
  %2724 = add nuw nsw i32 %2723, 64
  %2725 = sub nsw i32 63, %2723
  %2726 = select i1 %2721, i32 %2725, i32 %2724
  %2727 = mul nsw i32 %2716, %2327
  %2728 = ashr i32 %2727, 4
  %2729 = add nsw i32 %2728, %2718
  %2730 = tail call i32 @llvm.smax.i32(i32 %2729, i32 0)
  %2731 = tail call i32 @llvm.smin.i32(i32 %2730, i32 127)
  %2732 = uitofp i64 %2715 to double
  %2733 = fmul double %2732, 3.125000e-02
  %2734 = fcmp ogt double %2733, 1.000000e+00
  %2735 = select i1 %2734, double 1.000000e+00, double %2733
  %2736 = sext i32 %2726 to i64
  %2737 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2736
  %2738 = load double, ptr %2737, align 8, !tbaa !22
  %2739 = zext i32 %2731 to i64
  %2740 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2739
  %2741 = load double, ptr %2740, align 8, !tbaa !22
  %2742 = fneg double %2735
  %2743 = fmul double %2738, %2742
  %2744 = tail call double @llvm.fmuladd.f64(double %2743, double %2741, double 0.000000e+00)
  %2745 = sub nsw i32 127, %2726
  %2746 = sext i32 %2745 to i64
  %2747 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2746
  %2748 = load double, ptr %2747, align 8, !tbaa !22
  %2749 = xor i32 %2731, 127
  %2750 = zext i32 %2749 to i64
  %2751 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2750
  %2752 = load double, ptr %2751, align 8, !tbaa !22
  %2753 = fmul double %2748, %2742
  %2754 = tail call double @llvm.fmuladd.f64(double %2753, double %2752, double %2744)
  %2755 = fadd double %2711, %2754
  %2756 = add nuw nsw i64 %2710, 1
  %2757 = icmp eq i64 %2756, 15
  br i1 %2757, label %2758, label %2709, !llvm.loop !56

2758:                                             ; preds = %2709, %2660
  %2759 = phi double [ %2706, %2660 ], [ %2755, %2709 ]
  %2760 = add nuw nsw i64 %2658, 1
  %2761 = icmp eq i64 %2760, 8
  br i1 %2761, label %2654, label %2657, !llvm.loop !57

2762:                                             ; preds = %2654, %2863
  %2763 = phi i64 [ 0, %2654 ], [ %2865, %2863 ]
  %2764 = phi double [ %2759, %2654 ], [ %2864, %2863 ]
  br i1 %2325, label %2765, label %2814

2765:                                             ; preds = %2762, %2765
  %2766 = phi i64 [ %2812, %2765 ], [ 0, %2762 ]
  %2767 = phi double [ %2811, %2765 ], [ %2764, %2762 ]
  %2768 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 5, i64 %2763, i64 %2766
  %2769 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 0, i64 %2763, i64 %2766
  %2770 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 5, i64 %2763, i64 %2766, i32 2
  %2771 = load i64, ptr %2770, align 8, !tbaa !43
  %2772 = load i32, ptr %2769, align 8, !tbaa !18
  %2773 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 0, i64 %2763, i64 %2766, i64 1
  %2774 = load i32, ptr %2773, align 4, !tbaa !18
  %2775 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 5, i64 %2763, i64 %2766, i32 1
  %2776 = load i8, ptr %2775, align 2, !tbaa !46
  %2777 = icmp eq i8 %2776, 0
  %2778 = load i16, ptr %2768, align 8, !tbaa !47
  %2779 = zext i16 %2778 to i32
  %2780 = add nuw nsw i32 %2779, 64
  %2781 = sub nsw i32 63, %2779
  %2782 = select i1 %2777, i32 %2781, i32 %2780
  %2783 = mul nsw i32 %2772, %2655
  %2784 = ashr i32 %2783, 4
  %2785 = add nsw i32 %2784, %2774
  %2786 = tail call i32 @llvm.smax.i32(i32 %2785, i32 0)
  %2787 = tail call i32 @llvm.smin.i32(i32 %2786, i32 127)
  %2788 = uitofp i64 %2771 to double
  %2789 = fmul double %2788, 3.125000e-02
  %2790 = fcmp ogt double %2789, 1.000000e+00
  %2791 = select i1 %2790, double 1.000000e+00, double %2789
  %2792 = sext i32 %2782 to i64
  %2793 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2792
  %2794 = load double, ptr %2793, align 8, !tbaa !22
  %2795 = zext i32 %2787 to i64
  %2796 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2795
  %2797 = load double, ptr %2796, align 8, !tbaa !22
  %2798 = fneg double %2791
  %2799 = fmul double %2794, %2798
  %2800 = tail call double @llvm.fmuladd.f64(double %2799, double %2797, double 0.000000e+00)
  %2801 = sub nsw i32 127, %2782
  %2802 = sext i32 %2801 to i64
  %2803 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2802
  %2804 = load double, ptr %2803, align 8, !tbaa !22
  %2805 = xor i32 %2787, 127
  %2806 = zext i32 %2805 to i64
  %2807 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2806
  %2808 = load double, ptr %2807, align 8, !tbaa !22
  %2809 = fmul double %2804, %2798
  %2810 = tail call double @llvm.fmuladd.f64(double %2809, double %2808, double %2800)
  %2811 = fadd double %2767, %2810
  %2812 = add nuw nsw i64 %2766, 1
  %2813 = icmp eq i64 %2812, 15
  br i1 %2813, label %2863, label %2765, !llvm.loop !58

2814:                                             ; preds = %2762, %2814
  %2815 = phi i64 [ %2861, %2814 ], [ 0, %2762 ]
  %2816 = phi double [ %2860, %2814 ], [ %2764, %2762 ]
  %2817 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 5, i64 %2763, i64 %2815
  %2818 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %258, i64 %2763, i64 %2815
  %2819 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 5, i64 %2763, i64 %2815, i32 2
  %2820 = load i64, ptr %2819, align 8, !tbaa !43
  %2821 = load i32, ptr %2818, align 8, !tbaa !18
  %2822 = getelementptr inbounds i32, ptr %2818, i64 1
  %2823 = load i32, ptr %2822, align 4, !tbaa !18
  %2824 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 5, i64 %2763, i64 %2815, i32 1
  %2825 = load i8, ptr %2824, align 2, !tbaa !46
  %2826 = icmp eq i8 %2825, 0
  %2827 = load i16, ptr %2817, align 8, !tbaa !47
  %2828 = zext i16 %2827 to i32
  %2829 = add nuw nsw i32 %2828, 64
  %2830 = sub nsw i32 63, %2828
  %2831 = select i1 %2826, i32 %2830, i32 %2829
  %2832 = mul nsw i32 %2821, %2656
  %2833 = ashr i32 %2832, 4
  %2834 = add nsw i32 %2833, %2823
  %2835 = tail call i32 @llvm.smax.i32(i32 %2834, i32 0)
  %2836 = tail call i32 @llvm.smin.i32(i32 %2835, i32 127)
  %2837 = uitofp i64 %2820 to double
  %2838 = fmul double %2837, 3.125000e-02
  %2839 = fcmp ogt double %2838, 1.000000e+00
  %2840 = select i1 %2839, double 1.000000e+00, double %2838
  %2841 = sext i32 %2831 to i64
  %2842 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2841
  %2843 = load double, ptr %2842, align 8, !tbaa !22
  %2844 = zext i32 %2836 to i64
  %2845 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2844
  %2846 = load double, ptr %2845, align 8, !tbaa !22
  %2847 = fneg double %2840
  %2848 = fmul double %2843, %2847
  %2849 = tail call double @llvm.fmuladd.f64(double %2848, double %2846, double 0.000000e+00)
  %2850 = sub nsw i32 127, %2831
  %2851 = sext i32 %2850 to i64
  %2852 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2851
  %2853 = load double, ptr %2852, align 8, !tbaa !22
  %2854 = xor i32 %2836, 127
  %2855 = zext i32 %2854 to i64
  %2856 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2855
  %2857 = load double, ptr %2856, align 8, !tbaa !22
  %2858 = fmul double %2853, %2847
  %2859 = tail call double @llvm.fmuladd.f64(double %2858, double %2857, double %2849)
  %2860 = fadd double %2816, %2859
  %2861 = add nuw nsw i64 %2815, 1
  %2862 = icmp eq i64 %2861, 15
  br i1 %2862, label %2863, label %2814, !llvm.loop !58

2863:                                             ; preds = %2814, %2765
  %2864 = phi double [ %2811, %2765 ], [ %2860, %2814 ]
  %2865 = add nuw nsw i64 %2763, 1
  %2866 = icmp eq i64 %2865, 8
  br i1 %2866, label %2867, label %2762, !llvm.loop !59

2867:                                             ; preds = %2863
  %2868 = load i32, ptr %8, align 4, !tbaa !42
  %2869 = tail call i32 @llvm.smax.i32(i32 %2868, i32 0)
  br label %2875

2870:                                             ; preds = %3270
  %2871 = load i32, ptr %5, align 4, !tbaa !25
  %2872 = icmp eq i32 %2871, 2
  %2873 = load i32, ptr %8, align 4, !tbaa !42
  %2874 = tail call i32 @llvm.smax.i32(i32 %2873, i32 0)
  br label %3294

2875:                                             ; preds = %2867, %3270
  %2876 = phi i64 [ %3287, %3270 ], [ 0, %2867 ]
  %2877 = phi double [ %3286, %3270 ], [ %2864, %2867 ]
  %2878 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 0
  %2879 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 0, i32 2
  %2880 = load i64, ptr %2879, align 8, !tbaa !43
  %2881 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 0, i32 1
  %2882 = load i8, ptr %2881, align 2, !tbaa !46
  %2883 = icmp eq i8 %2882, 0
  %2884 = load i16, ptr %2878, align 8, !tbaa !47
  %2885 = zext i16 %2884 to i32
  %2886 = add nuw nsw i32 %2885, 64
  %2887 = sub nsw i32 63, %2885
  %2888 = select i1 %2883, i32 %2887, i32 %2886
  %2889 = uitofp i64 %2880 to double
  %2890 = fmul double %2889, 3.125000e-02
  %2891 = fcmp ogt double %2890, 1.000000e+00
  %2892 = select i1 %2891, double 1.000000e+00, double %2890
  %2893 = sext i32 %2888 to i64
  %2894 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2893
  %2895 = load double, ptr %2894, align 8, !tbaa !22
  %2896 = fneg double %2892
  %2897 = fmul double %2895, %2896
  %2898 = sub nsw i32 127, %2888
  %2899 = sext i32 %2898 to i64
  %2900 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2899
  %2901 = load double, ptr %2900, align 8, !tbaa !22
  %2902 = fmul double %2901, %2896
  %2903 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 1
  %2904 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 1, i32 2
  %2905 = load i64, ptr %2904, align 8, !tbaa !43
  br i1 %2325, label %2906, label %3088

2906:                                             ; preds = %2875
  %2907 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 0
  %2908 = load i32, ptr %2907, align 8, !tbaa !18
  %2909 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 0, i64 1
  %2910 = load i32, ptr %2909, align 4, !tbaa !18
  %2911 = mul nsw i32 %2908, %2869
  %2912 = ashr i32 %2911, 4
  %2913 = add nsw i32 %2912, %2910
  %2914 = tail call i32 @llvm.smax.i32(i32 %2913, i32 0)
  %2915 = tail call i32 @llvm.smin.i32(i32 %2914, i32 127)
  %2916 = zext i32 %2915 to i64
  %2917 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2916
  %2918 = load double, ptr %2917, align 8, !tbaa !22
  %2919 = tail call double @llvm.fmuladd.f64(double %2897, double %2918, double 0.000000e+00)
  %2920 = xor i32 %2915, 127
  %2921 = zext i32 %2920 to i64
  %2922 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2921
  %2923 = load double, ptr %2922, align 8, !tbaa !22
  %2924 = tail call double @llvm.fmuladd.f64(double %2902, double %2923, double %2919)
  %2925 = fadd double %2877, %2924
  %2926 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 1
  %2927 = load i32, ptr %2926, align 8, !tbaa !18
  %2928 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 1, i64 1
  %2929 = load i32, ptr %2928, align 4, !tbaa !18
  %2930 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 1, i32 1
  %2931 = load i8, ptr %2930, align 2, !tbaa !46
  %2932 = icmp eq i8 %2931, 0
  %2933 = load i16, ptr %2903, align 8, !tbaa !47
  %2934 = zext i16 %2933 to i32
  %2935 = add nuw nsw i32 %2934, 64
  %2936 = sub nsw i32 63, %2934
  %2937 = select i1 %2932, i32 %2936, i32 %2935
  %2938 = mul nsw i32 %2927, %2869
  %2939 = ashr i32 %2938, 4
  %2940 = add nsw i32 %2939, %2929
  %2941 = tail call i32 @llvm.smax.i32(i32 %2940, i32 0)
  %2942 = tail call i32 @llvm.smin.i32(i32 %2941, i32 127)
  %2943 = uitofp i64 %2905 to double
  %2944 = fmul double %2943, 3.125000e-02
  %2945 = fcmp ogt double %2944, 1.000000e+00
  %2946 = select i1 %2945, double 1.000000e+00, double %2944
  %2947 = sext i32 %2937 to i64
  %2948 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2947
  %2949 = load double, ptr %2948, align 8, !tbaa !22
  %2950 = zext i32 %2942 to i64
  %2951 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2950
  %2952 = load double, ptr %2951, align 8, !tbaa !22
  %2953 = fneg double %2946
  %2954 = fmul double %2949, %2953
  %2955 = tail call double @llvm.fmuladd.f64(double %2954, double %2952, double 0.000000e+00)
  %2956 = sub nsw i32 127, %2937
  %2957 = sext i32 %2956 to i64
  %2958 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2957
  %2959 = load double, ptr %2958, align 8, !tbaa !22
  %2960 = xor i32 %2942, 127
  %2961 = zext i32 %2960 to i64
  %2962 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2961
  %2963 = load double, ptr %2962, align 8, !tbaa !22
  %2964 = fmul double %2959, %2953
  %2965 = tail call double @llvm.fmuladd.f64(double %2964, double %2963, double %2955)
  %2966 = fadd double %2925, %2965
  %2967 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 2
  %2968 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 2
  %2969 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 2, i32 2
  %2970 = load i64, ptr %2969, align 8, !tbaa !43
  %2971 = load i32, ptr %2968, align 8, !tbaa !18
  %2972 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 2, i64 1
  %2973 = load i32, ptr %2972, align 4, !tbaa !18
  %2974 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 2, i32 1
  %2975 = load i8, ptr %2974, align 2, !tbaa !46
  %2976 = icmp eq i8 %2975, 0
  %2977 = load i16, ptr %2967, align 8, !tbaa !47
  %2978 = zext i16 %2977 to i32
  %2979 = add nuw nsw i32 %2978, 64
  %2980 = sub nsw i32 63, %2978
  %2981 = select i1 %2976, i32 %2980, i32 %2979
  %2982 = mul nsw i32 %2971, %2869
  %2983 = ashr i32 %2982, 4
  %2984 = add nsw i32 %2983, %2973
  %2985 = tail call i32 @llvm.smax.i32(i32 %2984, i32 0)
  %2986 = tail call i32 @llvm.smin.i32(i32 %2985, i32 127)
  %2987 = uitofp i64 %2970 to double
  %2988 = fmul double %2987, 3.125000e-02
  %2989 = fcmp ogt double %2988, 1.000000e+00
  %2990 = select i1 %2989, double 1.000000e+00, double %2988
  %2991 = sext i32 %2981 to i64
  %2992 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %2991
  %2993 = load double, ptr %2992, align 8, !tbaa !22
  %2994 = zext i32 %2986 to i64
  %2995 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %2994
  %2996 = load double, ptr %2995, align 8, !tbaa !22
  %2997 = fneg double %2990
  %2998 = fmul double %2993, %2997
  %2999 = tail call double @llvm.fmuladd.f64(double %2998, double %2996, double 0.000000e+00)
  %3000 = sub nsw i32 127, %2981
  %3001 = sext i32 %3000 to i64
  %3002 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3001
  %3003 = load double, ptr %3002, align 8, !tbaa !22
  %3004 = xor i32 %2986, 127
  %3005 = zext i32 %3004 to i64
  %3006 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3005
  %3007 = load double, ptr %3006, align 8, !tbaa !22
  %3008 = fmul double %3003, %2997
  %3009 = tail call double @llvm.fmuladd.f64(double %3008, double %3007, double %2999)
  %3010 = fadd double %2966, %3009
  %3011 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 3
  %3012 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 3
  %3013 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 3, i32 2
  %3014 = load i64, ptr %3013, align 8, !tbaa !43
  %3015 = load i32, ptr %3012, align 8, !tbaa !18
  %3016 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 3, i64 1
  %3017 = load i32, ptr %3016, align 4, !tbaa !18
  %3018 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 3, i32 1
  %3019 = load i8, ptr %3018, align 2, !tbaa !46
  %3020 = icmp eq i8 %3019, 0
  %3021 = load i16, ptr %3011, align 8, !tbaa !47
  %3022 = zext i16 %3021 to i32
  %3023 = add nuw nsw i32 %3022, 64
  %3024 = sub nsw i32 63, %3022
  %3025 = select i1 %3020, i32 %3024, i32 %3023
  %3026 = mul nsw i32 %3015, %2869
  %3027 = ashr i32 %3026, 4
  %3028 = add nsw i32 %3027, %3017
  %3029 = tail call i32 @llvm.smax.i32(i32 %3028, i32 0)
  %3030 = tail call i32 @llvm.smin.i32(i32 %3029, i32 127)
  %3031 = uitofp i64 %3014 to double
  %3032 = fmul double %3031, 3.125000e-02
  %3033 = fcmp ogt double %3032, 1.000000e+00
  %3034 = select i1 %3033, double 1.000000e+00, double %3032
  %3035 = sext i32 %3025 to i64
  %3036 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3035
  %3037 = load double, ptr %3036, align 8, !tbaa !22
  %3038 = zext i32 %3030 to i64
  %3039 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3038
  %3040 = load double, ptr %3039, align 8, !tbaa !22
  %3041 = fneg double %3034
  %3042 = fmul double %3037, %3041
  %3043 = tail call double @llvm.fmuladd.f64(double %3042, double %3040, double 0.000000e+00)
  %3044 = sub nsw i32 127, %3025
  %3045 = sext i32 %3044 to i64
  %3046 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3045
  %3047 = load double, ptr %3046, align 8, !tbaa !22
  %3048 = xor i32 %3030, 127
  %3049 = zext i32 %3048 to i64
  %3050 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3049
  %3051 = load double, ptr %3050, align 8, !tbaa !22
  %3052 = fmul double %3047, %3041
  %3053 = tail call double @llvm.fmuladd.f64(double %3052, double %3051, double %3043)
  %3054 = fadd double %3010, %3053
  %3055 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 4
  %3056 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 4
  %3057 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 4, i32 2
  %3058 = load i64, ptr %3057, align 8, !tbaa !43
  %3059 = load i32, ptr %3056, align 8, !tbaa !18
  %3060 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %2876, i64 4, i64 1
  %3061 = load i32, ptr %3060, align 4, !tbaa !18
  %3062 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 4, i32 1
  %3063 = load i8, ptr %3062, align 2, !tbaa !46
  %3064 = icmp eq i8 %3063, 0
  %3065 = load i16, ptr %3055, align 8, !tbaa !47
  %3066 = zext i16 %3065 to i32
  %3067 = add nuw nsw i32 %3066, 64
  %3068 = sub nsw i32 63, %3066
  %3069 = select i1 %3064, i32 %3068, i32 %3067
  %3070 = mul nsw i32 %3059, %2869
  %3071 = ashr i32 %3070, 4
  %3072 = add nsw i32 %3071, %3061
  %3073 = tail call i32 @llvm.smax.i32(i32 %3072, i32 0)
  %3074 = tail call i32 @llvm.smin.i32(i32 %3073, i32 127)
  %3075 = uitofp i64 %3058 to double
  %3076 = fmul double %3075, 3.125000e-02
  %3077 = fcmp ogt double %3076, 1.000000e+00
  %3078 = select i1 %3077, double 1.000000e+00, double %3076
  %3079 = sext i32 %3069 to i64
  %3080 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3079
  %3081 = load double, ptr %3080, align 8, !tbaa !22
  %3082 = zext i32 %3074 to i64
  %3083 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3082
  %3084 = load double, ptr %3083, align 8, !tbaa !22
  %3085 = fneg double %3078
  %3086 = fmul double %3081, %3085
  %3087 = tail call double @llvm.fmuladd.f64(double %3086, double %3084, double 0.000000e+00)
  br label %3270

3088:                                             ; preds = %2875
  %3089 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %258, i64 %2876, i64 0
  %3090 = load i32, ptr %3089, align 8, !tbaa !18
  %3091 = getelementptr inbounds i32, ptr %3089, i64 1
  %3092 = load i32, ptr %3091, align 4, !tbaa !18
  %3093 = mul nsw i32 %3090, %2869
  %3094 = ashr i32 %3093, 4
  %3095 = add nsw i32 %3094, %3092
  %3096 = tail call i32 @llvm.smax.i32(i32 %3095, i32 0)
  %3097 = tail call i32 @llvm.smin.i32(i32 %3096, i32 127)
  %3098 = zext i32 %3097 to i64
  %3099 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3098
  %3100 = load double, ptr %3099, align 8, !tbaa !22
  %3101 = tail call double @llvm.fmuladd.f64(double %2897, double %3100, double 0.000000e+00)
  %3102 = xor i32 %3097, 127
  %3103 = zext i32 %3102 to i64
  %3104 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3103
  %3105 = load double, ptr %3104, align 8, !tbaa !22
  %3106 = tail call double @llvm.fmuladd.f64(double %2902, double %3105, double %3101)
  %3107 = fadd double %2877, %3106
  %3108 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %258, i64 %2876, i64 1
  %3109 = load i32, ptr %3108, align 8, !tbaa !18
  %3110 = getelementptr inbounds i32, ptr %3108, i64 1
  %3111 = load i32, ptr %3110, align 4, !tbaa !18
  %3112 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 1, i32 1
  %3113 = load i8, ptr %3112, align 2, !tbaa !46
  %3114 = icmp eq i8 %3113, 0
  %3115 = load i16, ptr %2903, align 8, !tbaa !47
  %3116 = zext i16 %3115 to i32
  %3117 = add nuw nsw i32 %3116, 64
  %3118 = sub nsw i32 63, %3116
  %3119 = select i1 %3114, i32 %3118, i32 %3117
  %3120 = mul nsw i32 %3109, %2869
  %3121 = ashr i32 %3120, 4
  %3122 = add nsw i32 %3121, %3111
  %3123 = tail call i32 @llvm.smax.i32(i32 %3122, i32 0)
  %3124 = tail call i32 @llvm.smin.i32(i32 %3123, i32 127)
  %3125 = uitofp i64 %2905 to double
  %3126 = fmul double %3125, 3.125000e-02
  %3127 = fcmp ogt double %3126, 1.000000e+00
  %3128 = select i1 %3127, double 1.000000e+00, double %3126
  %3129 = sext i32 %3119 to i64
  %3130 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3129
  %3131 = load double, ptr %3130, align 8, !tbaa !22
  %3132 = zext i32 %3124 to i64
  %3133 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3132
  %3134 = load double, ptr %3133, align 8, !tbaa !22
  %3135 = fneg double %3128
  %3136 = fmul double %3131, %3135
  %3137 = tail call double @llvm.fmuladd.f64(double %3136, double %3134, double 0.000000e+00)
  %3138 = sub nsw i32 127, %3119
  %3139 = sext i32 %3138 to i64
  %3140 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3139
  %3141 = load double, ptr %3140, align 8, !tbaa !22
  %3142 = xor i32 %3124, 127
  %3143 = zext i32 %3142 to i64
  %3144 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3143
  %3145 = load double, ptr %3144, align 8, !tbaa !22
  %3146 = fmul double %3141, %3135
  %3147 = tail call double @llvm.fmuladd.f64(double %3146, double %3145, double %3137)
  %3148 = fadd double %3107, %3147
  %3149 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 2
  %3150 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %258, i64 %2876, i64 2
  %3151 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 2, i32 2
  %3152 = load i64, ptr %3151, align 8, !tbaa !43
  %3153 = load i32, ptr %3150, align 8, !tbaa !18
  %3154 = getelementptr inbounds i32, ptr %3150, i64 1
  %3155 = load i32, ptr %3154, align 4, !tbaa !18
  %3156 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 2, i32 1
  %3157 = load i8, ptr %3156, align 2, !tbaa !46
  %3158 = icmp eq i8 %3157, 0
  %3159 = load i16, ptr %3149, align 8, !tbaa !47
  %3160 = zext i16 %3159 to i32
  %3161 = add nuw nsw i32 %3160, 64
  %3162 = sub nsw i32 63, %3160
  %3163 = select i1 %3158, i32 %3162, i32 %3161
  %3164 = mul nsw i32 %3153, %2869
  %3165 = ashr i32 %3164, 4
  %3166 = add nsw i32 %3165, %3155
  %3167 = tail call i32 @llvm.smax.i32(i32 %3166, i32 0)
  %3168 = tail call i32 @llvm.smin.i32(i32 %3167, i32 127)
  %3169 = uitofp i64 %3152 to double
  %3170 = fmul double %3169, 3.125000e-02
  %3171 = fcmp ogt double %3170, 1.000000e+00
  %3172 = select i1 %3171, double 1.000000e+00, double %3170
  %3173 = sext i32 %3163 to i64
  %3174 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3173
  %3175 = load double, ptr %3174, align 8, !tbaa !22
  %3176 = zext i32 %3168 to i64
  %3177 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3176
  %3178 = load double, ptr %3177, align 8, !tbaa !22
  %3179 = fneg double %3172
  %3180 = fmul double %3175, %3179
  %3181 = tail call double @llvm.fmuladd.f64(double %3180, double %3178, double 0.000000e+00)
  %3182 = sub nsw i32 127, %3163
  %3183 = sext i32 %3182 to i64
  %3184 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3183
  %3185 = load double, ptr %3184, align 8, !tbaa !22
  %3186 = xor i32 %3168, 127
  %3187 = zext i32 %3186 to i64
  %3188 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3187
  %3189 = load double, ptr %3188, align 8, !tbaa !22
  %3190 = fmul double %3185, %3179
  %3191 = tail call double @llvm.fmuladd.f64(double %3190, double %3189, double %3181)
  %3192 = fadd double %3148, %3191
  %3193 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 3
  %3194 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %258, i64 %2876, i64 3
  %3195 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 3, i32 2
  %3196 = load i64, ptr %3195, align 8, !tbaa !43
  %3197 = load i32, ptr %3194, align 8, !tbaa !18
  %3198 = getelementptr inbounds i32, ptr %3194, i64 1
  %3199 = load i32, ptr %3198, align 4, !tbaa !18
  %3200 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 3, i32 1
  %3201 = load i8, ptr %3200, align 2, !tbaa !46
  %3202 = icmp eq i8 %3201, 0
  %3203 = load i16, ptr %3193, align 8, !tbaa !47
  %3204 = zext i16 %3203 to i32
  %3205 = add nuw nsw i32 %3204, 64
  %3206 = sub nsw i32 63, %3204
  %3207 = select i1 %3202, i32 %3206, i32 %3205
  %3208 = mul nsw i32 %3197, %2869
  %3209 = ashr i32 %3208, 4
  %3210 = add nsw i32 %3209, %3199
  %3211 = tail call i32 @llvm.smax.i32(i32 %3210, i32 0)
  %3212 = tail call i32 @llvm.smin.i32(i32 %3211, i32 127)
  %3213 = uitofp i64 %3196 to double
  %3214 = fmul double %3213, 3.125000e-02
  %3215 = fcmp ogt double %3214, 1.000000e+00
  %3216 = select i1 %3215, double 1.000000e+00, double %3214
  %3217 = sext i32 %3207 to i64
  %3218 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3217
  %3219 = load double, ptr %3218, align 8, !tbaa !22
  %3220 = zext i32 %3212 to i64
  %3221 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3220
  %3222 = load double, ptr %3221, align 8, !tbaa !22
  %3223 = fneg double %3216
  %3224 = fmul double %3219, %3223
  %3225 = tail call double @llvm.fmuladd.f64(double %3224, double %3222, double 0.000000e+00)
  %3226 = sub nsw i32 127, %3207
  %3227 = sext i32 %3226 to i64
  %3228 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3227
  %3229 = load double, ptr %3228, align 8, !tbaa !22
  %3230 = xor i32 %3212, 127
  %3231 = zext i32 %3230 to i64
  %3232 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3231
  %3233 = load double, ptr %3232, align 8, !tbaa !22
  %3234 = fmul double %3229, %3223
  %3235 = tail call double @llvm.fmuladd.f64(double %3234, double %3233, double %3225)
  %3236 = fadd double %3192, %3235
  %3237 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 4
  %3238 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %258, i64 %2876, i64 4
  %3239 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 4, i32 2
  %3240 = load i64, ptr %3239, align 8, !tbaa !43
  %3241 = load i32, ptr %3238, align 8, !tbaa !18
  %3242 = getelementptr inbounds i32, ptr %3238, i64 1
  %3243 = load i32, ptr %3242, align 4, !tbaa !18
  %3244 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 6, i64 %2876, i64 4, i32 1
  %3245 = load i8, ptr %3244, align 2, !tbaa !46
  %3246 = icmp eq i8 %3245, 0
  %3247 = load i16, ptr %3237, align 8, !tbaa !47
  %3248 = zext i16 %3247 to i32
  %3249 = add nuw nsw i32 %3248, 64
  %3250 = sub nsw i32 63, %3248
  %3251 = select i1 %3246, i32 %3250, i32 %3249
  %3252 = mul nsw i32 %3241, %2869
  %3253 = ashr i32 %3252, 4
  %3254 = add nsw i32 %3253, %3243
  %3255 = tail call i32 @llvm.smax.i32(i32 %3254, i32 0)
  %3256 = tail call i32 @llvm.smin.i32(i32 %3255, i32 127)
  %3257 = uitofp i64 %3240 to double
  %3258 = fmul double %3257, 3.125000e-02
  %3259 = fcmp ogt double %3258, 1.000000e+00
  %3260 = select i1 %3259, double 1.000000e+00, double %3258
  %3261 = sext i32 %3251 to i64
  %3262 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3261
  %3263 = load double, ptr %3262, align 8, !tbaa !22
  %3264 = zext i32 %3256 to i64
  %3265 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3264
  %3266 = load double, ptr %3265, align 8, !tbaa !22
  %3267 = fneg double %3260
  %3268 = fmul double %3263, %3267
  %3269 = tail call double @llvm.fmuladd.f64(double %3268, double %3266, double 0.000000e+00)
  br label %3270

3270:                                             ; preds = %3088, %2906
  %3271 = phi i32 [ %3251, %3088 ], [ %3069, %2906 ]
  %3272 = phi i32 [ %3256, %3088 ], [ %3074, %2906 ]
  %3273 = phi double [ %3267, %3088 ], [ %3085, %2906 ]
  %3274 = phi double [ %3269, %3088 ], [ %3087, %2906 ]
  %3275 = phi double [ %3236, %3088 ], [ %3054, %2906 ]
  %3276 = sub nsw i32 127, %3271
  %3277 = sext i32 %3276 to i64
  %3278 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3277
  %3279 = load double, ptr %3278, align 8, !tbaa !22
  %3280 = xor i32 %3272, 127
  %3281 = zext i32 %3280 to i64
  %3282 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3281
  %3283 = load double, ptr %3282, align 8, !tbaa !22
  %3284 = fmul double %3279, %3273
  %3285 = tail call double @llvm.fmuladd.f64(double %3284, double %3283, double %3274)
  %3286 = fadd double %3275, %3285
  %3287 = add nuw nsw i64 %2876, 1
  %3288 = icmp eq i64 %3287, 8
  br i1 %3288, label %2870, label %2875, !llvm.loop !60

3289:                                             ; preds = %3689
  %3290 = load i32, ptr %5, align 4, !tbaa !25
  %3291 = icmp eq i32 %3290, 2
  %3292 = load i32, ptr %8, align 4, !tbaa !42
  %3293 = tail call i32 @llvm.smax.i32(i32 %3292, i32 0)
  br label %3711

3294:                                             ; preds = %2870, %3689
  %3295 = phi i64 [ 0, %2870 ], [ %3706, %3689 ]
  %3296 = phi double [ %3286, %2870 ], [ %3705, %3689 ]
  %3297 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 0
  %3298 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 0, i32 2
  %3299 = load i64, ptr %3298, align 8, !tbaa !43
  %3300 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 0, i32 1
  %3301 = load i8, ptr %3300, align 2, !tbaa !46
  %3302 = icmp eq i8 %3301, 0
  %3303 = load i16, ptr %3297, align 8, !tbaa !47
  %3304 = zext i16 %3303 to i32
  %3305 = add nuw nsw i32 %3304, 64
  %3306 = sub nsw i32 63, %3304
  %3307 = select i1 %3302, i32 %3306, i32 %3305
  %3308 = uitofp i64 %3299 to double
  %3309 = fmul double %3308, 3.125000e-02
  %3310 = fcmp ogt double %3309, 1.000000e+00
  %3311 = select i1 %3310, double 1.000000e+00, double %3309
  %3312 = sext i32 %3307 to i64
  %3313 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3312
  %3314 = load double, ptr %3313, align 8, !tbaa !22
  %3315 = fneg double %3311
  %3316 = fmul double %3314, %3315
  %3317 = sub nsw i32 127, %3307
  %3318 = sext i32 %3317 to i64
  %3319 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3318
  %3320 = load double, ptr %3319, align 8, !tbaa !22
  %3321 = fmul double %3320, %3315
  %3322 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 1
  %3323 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 1, i32 2
  %3324 = load i64, ptr %3323, align 8, !tbaa !43
  br i1 %2872, label %3325, label %3507

3325:                                             ; preds = %3294
  %3326 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 0
  %3327 = load i32, ptr %3326, align 8, !tbaa !18
  %3328 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 0, i64 1
  %3329 = load i32, ptr %3328, align 4, !tbaa !18
  %3330 = mul nsw i32 %3327, %2874
  %3331 = ashr i32 %3330, 4
  %3332 = add nsw i32 %3331, %3329
  %3333 = tail call i32 @llvm.smax.i32(i32 %3332, i32 0)
  %3334 = tail call i32 @llvm.smin.i32(i32 %3333, i32 127)
  %3335 = zext i32 %3334 to i64
  %3336 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3335
  %3337 = load double, ptr %3336, align 8, !tbaa !22
  %3338 = tail call double @llvm.fmuladd.f64(double %3316, double %3337, double 0.000000e+00)
  %3339 = xor i32 %3334, 127
  %3340 = zext i32 %3339 to i64
  %3341 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3340
  %3342 = load double, ptr %3341, align 8, !tbaa !22
  %3343 = tail call double @llvm.fmuladd.f64(double %3321, double %3342, double %3338)
  %3344 = fadd double %3296, %3343
  %3345 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 1
  %3346 = load i32, ptr %3345, align 8, !tbaa !18
  %3347 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 1, i64 1
  %3348 = load i32, ptr %3347, align 4, !tbaa !18
  %3349 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 1, i32 1
  %3350 = load i8, ptr %3349, align 2, !tbaa !46
  %3351 = icmp eq i8 %3350, 0
  %3352 = load i16, ptr %3322, align 8, !tbaa !47
  %3353 = zext i16 %3352 to i32
  %3354 = add nuw nsw i32 %3353, 64
  %3355 = sub nsw i32 63, %3353
  %3356 = select i1 %3351, i32 %3355, i32 %3354
  %3357 = mul nsw i32 %3346, %2874
  %3358 = ashr i32 %3357, 4
  %3359 = add nsw i32 %3358, %3348
  %3360 = tail call i32 @llvm.smax.i32(i32 %3359, i32 0)
  %3361 = tail call i32 @llvm.smin.i32(i32 %3360, i32 127)
  %3362 = uitofp i64 %3324 to double
  %3363 = fmul double %3362, 3.125000e-02
  %3364 = fcmp ogt double %3363, 1.000000e+00
  %3365 = select i1 %3364, double 1.000000e+00, double %3363
  %3366 = sext i32 %3356 to i64
  %3367 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3366
  %3368 = load double, ptr %3367, align 8, !tbaa !22
  %3369 = zext i32 %3361 to i64
  %3370 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3369
  %3371 = load double, ptr %3370, align 8, !tbaa !22
  %3372 = fneg double %3365
  %3373 = fmul double %3368, %3372
  %3374 = tail call double @llvm.fmuladd.f64(double %3373, double %3371, double 0.000000e+00)
  %3375 = sub nsw i32 127, %3356
  %3376 = sext i32 %3375 to i64
  %3377 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3376
  %3378 = load double, ptr %3377, align 8, !tbaa !22
  %3379 = xor i32 %3361, 127
  %3380 = zext i32 %3379 to i64
  %3381 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3380
  %3382 = load double, ptr %3381, align 8, !tbaa !22
  %3383 = fmul double %3378, %3372
  %3384 = tail call double @llvm.fmuladd.f64(double %3383, double %3382, double %3374)
  %3385 = fadd double %3344, %3384
  %3386 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 2
  %3387 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 2
  %3388 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 2, i32 2
  %3389 = load i64, ptr %3388, align 8, !tbaa !43
  %3390 = load i32, ptr %3387, align 8, !tbaa !18
  %3391 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 2, i64 1
  %3392 = load i32, ptr %3391, align 4, !tbaa !18
  %3393 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 2, i32 1
  %3394 = load i8, ptr %3393, align 2, !tbaa !46
  %3395 = icmp eq i8 %3394, 0
  %3396 = load i16, ptr %3386, align 8, !tbaa !47
  %3397 = zext i16 %3396 to i32
  %3398 = add nuw nsw i32 %3397, 64
  %3399 = sub nsw i32 63, %3397
  %3400 = select i1 %3395, i32 %3399, i32 %3398
  %3401 = mul nsw i32 %3390, %2874
  %3402 = ashr i32 %3401, 4
  %3403 = add nsw i32 %3402, %3392
  %3404 = tail call i32 @llvm.smax.i32(i32 %3403, i32 0)
  %3405 = tail call i32 @llvm.smin.i32(i32 %3404, i32 127)
  %3406 = uitofp i64 %3389 to double
  %3407 = fmul double %3406, 3.125000e-02
  %3408 = fcmp ogt double %3407, 1.000000e+00
  %3409 = select i1 %3408, double 1.000000e+00, double %3407
  %3410 = sext i32 %3400 to i64
  %3411 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3410
  %3412 = load double, ptr %3411, align 8, !tbaa !22
  %3413 = zext i32 %3405 to i64
  %3414 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3413
  %3415 = load double, ptr %3414, align 8, !tbaa !22
  %3416 = fneg double %3409
  %3417 = fmul double %3412, %3416
  %3418 = tail call double @llvm.fmuladd.f64(double %3417, double %3415, double 0.000000e+00)
  %3419 = sub nsw i32 127, %3400
  %3420 = sext i32 %3419 to i64
  %3421 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3420
  %3422 = load double, ptr %3421, align 8, !tbaa !22
  %3423 = xor i32 %3405, 127
  %3424 = zext i32 %3423 to i64
  %3425 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3424
  %3426 = load double, ptr %3425, align 8, !tbaa !22
  %3427 = fmul double %3422, %3416
  %3428 = tail call double @llvm.fmuladd.f64(double %3427, double %3426, double %3418)
  %3429 = fadd double %3385, %3428
  %3430 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 3
  %3431 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 3
  %3432 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 3, i32 2
  %3433 = load i64, ptr %3432, align 8, !tbaa !43
  %3434 = load i32, ptr %3431, align 8, !tbaa !18
  %3435 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 3, i64 1
  %3436 = load i32, ptr %3435, align 4, !tbaa !18
  %3437 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 3, i32 1
  %3438 = load i8, ptr %3437, align 2, !tbaa !46
  %3439 = icmp eq i8 %3438, 0
  %3440 = load i16, ptr %3430, align 8, !tbaa !47
  %3441 = zext i16 %3440 to i32
  %3442 = add nuw nsw i32 %3441, 64
  %3443 = sub nsw i32 63, %3441
  %3444 = select i1 %3439, i32 %3443, i32 %3442
  %3445 = mul nsw i32 %3434, %2874
  %3446 = ashr i32 %3445, 4
  %3447 = add nsw i32 %3446, %3436
  %3448 = tail call i32 @llvm.smax.i32(i32 %3447, i32 0)
  %3449 = tail call i32 @llvm.smin.i32(i32 %3448, i32 127)
  %3450 = uitofp i64 %3433 to double
  %3451 = fmul double %3450, 3.125000e-02
  %3452 = fcmp ogt double %3451, 1.000000e+00
  %3453 = select i1 %3452, double 1.000000e+00, double %3451
  %3454 = sext i32 %3444 to i64
  %3455 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3454
  %3456 = load double, ptr %3455, align 8, !tbaa !22
  %3457 = zext i32 %3449 to i64
  %3458 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3457
  %3459 = load double, ptr %3458, align 8, !tbaa !22
  %3460 = fneg double %3453
  %3461 = fmul double %3456, %3460
  %3462 = tail call double @llvm.fmuladd.f64(double %3461, double %3459, double 0.000000e+00)
  %3463 = sub nsw i32 127, %3444
  %3464 = sext i32 %3463 to i64
  %3465 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3464
  %3466 = load double, ptr %3465, align 8, !tbaa !22
  %3467 = xor i32 %3449, 127
  %3468 = zext i32 %3467 to i64
  %3469 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3468
  %3470 = load double, ptr %3469, align 8, !tbaa !22
  %3471 = fmul double %3466, %3460
  %3472 = tail call double @llvm.fmuladd.f64(double %3471, double %3470, double %3462)
  %3473 = fadd double %3429, %3472
  %3474 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 4
  %3475 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 4
  %3476 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 4, i32 2
  %3477 = load i64, ptr %3476, align 8, !tbaa !43
  %3478 = load i32, ptr %3475, align 8, !tbaa !18
  %3479 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %3295, i64 4, i64 1
  %3480 = load i32, ptr %3479, align 4, !tbaa !18
  %3481 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 4, i32 1
  %3482 = load i8, ptr %3481, align 2, !tbaa !46
  %3483 = icmp eq i8 %3482, 0
  %3484 = load i16, ptr %3474, align 8, !tbaa !47
  %3485 = zext i16 %3484 to i32
  %3486 = add nuw nsw i32 %3485, 64
  %3487 = sub nsw i32 63, %3485
  %3488 = select i1 %3483, i32 %3487, i32 %3486
  %3489 = mul nsw i32 %3478, %2874
  %3490 = ashr i32 %3489, 4
  %3491 = add nsw i32 %3490, %3480
  %3492 = tail call i32 @llvm.smax.i32(i32 %3491, i32 0)
  %3493 = tail call i32 @llvm.smin.i32(i32 %3492, i32 127)
  %3494 = uitofp i64 %3477 to double
  %3495 = fmul double %3494, 3.125000e-02
  %3496 = fcmp ogt double %3495, 1.000000e+00
  %3497 = select i1 %3496, double 1.000000e+00, double %3495
  %3498 = sext i32 %3488 to i64
  %3499 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3498
  %3500 = load double, ptr %3499, align 8, !tbaa !22
  %3501 = zext i32 %3493 to i64
  %3502 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3501
  %3503 = load double, ptr %3502, align 8, !tbaa !22
  %3504 = fneg double %3497
  %3505 = fmul double %3500, %3504
  %3506 = tail call double @llvm.fmuladd.f64(double %3505, double %3503, double 0.000000e+00)
  br label %3689

3507:                                             ; preds = %3294
  %3508 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %258, i64 %3295, i64 0
  %3509 = load i32, ptr %3508, align 8, !tbaa !18
  %3510 = getelementptr inbounds i32, ptr %3508, i64 1
  %3511 = load i32, ptr %3510, align 4, !tbaa !18
  %3512 = mul nsw i32 %3509, %2874
  %3513 = ashr i32 %3512, 4
  %3514 = add nsw i32 %3513, %3511
  %3515 = tail call i32 @llvm.smax.i32(i32 %3514, i32 0)
  %3516 = tail call i32 @llvm.smin.i32(i32 %3515, i32 127)
  %3517 = zext i32 %3516 to i64
  %3518 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3517
  %3519 = load double, ptr %3518, align 8, !tbaa !22
  %3520 = tail call double @llvm.fmuladd.f64(double %3316, double %3519, double 0.000000e+00)
  %3521 = xor i32 %3516, 127
  %3522 = zext i32 %3521 to i64
  %3523 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3522
  %3524 = load double, ptr %3523, align 8, !tbaa !22
  %3525 = tail call double @llvm.fmuladd.f64(double %3321, double %3524, double %3520)
  %3526 = fadd double %3296, %3525
  %3527 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %258, i64 %3295, i64 1
  %3528 = load i32, ptr %3527, align 8, !tbaa !18
  %3529 = getelementptr inbounds i32, ptr %3527, i64 1
  %3530 = load i32, ptr %3529, align 4, !tbaa !18
  %3531 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 1, i32 1
  %3532 = load i8, ptr %3531, align 2, !tbaa !46
  %3533 = icmp eq i8 %3532, 0
  %3534 = load i16, ptr %3322, align 8, !tbaa !47
  %3535 = zext i16 %3534 to i32
  %3536 = add nuw nsw i32 %3535, 64
  %3537 = sub nsw i32 63, %3535
  %3538 = select i1 %3533, i32 %3537, i32 %3536
  %3539 = mul nsw i32 %3528, %2874
  %3540 = ashr i32 %3539, 4
  %3541 = add nsw i32 %3540, %3530
  %3542 = tail call i32 @llvm.smax.i32(i32 %3541, i32 0)
  %3543 = tail call i32 @llvm.smin.i32(i32 %3542, i32 127)
  %3544 = uitofp i64 %3324 to double
  %3545 = fmul double %3544, 3.125000e-02
  %3546 = fcmp ogt double %3545, 1.000000e+00
  %3547 = select i1 %3546, double 1.000000e+00, double %3545
  %3548 = sext i32 %3538 to i64
  %3549 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3548
  %3550 = load double, ptr %3549, align 8, !tbaa !22
  %3551 = zext i32 %3543 to i64
  %3552 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3551
  %3553 = load double, ptr %3552, align 8, !tbaa !22
  %3554 = fneg double %3547
  %3555 = fmul double %3550, %3554
  %3556 = tail call double @llvm.fmuladd.f64(double %3555, double %3553, double 0.000000e+00)
  %3557 = sub nsw i32 127, %3538
  %3558 = sext i32 %3557 to i64
  %3559 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3558
  %3560 = load double, ptr %3559, align 8, !tbaa !22
  %3561 = xor i32 %3543, 127
  %3562 = zext i32 %3561 to i64
  %3563 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3562
  %3564 = load double, ptr %3563, align 8, !tbaa !22
  %3565 = fmul double %3560, %3554
  %3566 = tail call double @llvm.fmuladd.f64(double %3565, double %3564, double %3556)
  %3567 = fadd double %3526, %3566
  %3568 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 2
  %3569 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %258, i64 %3295, i64 2
  %3570 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 2, i32 2
  %3571 = load i64, ptr %3570, align 8, !tbaa !43
  %3572 = load i32, ptr %3569, align 8, !tbaa !18
  %3573 = getelementptr inbounds i32, ptr %3569, i64 1
  %3574 = load i32, ptr %3573, align 4, !tbaa !18
  %3575 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 2, i32 1
  %3576 = load i8, ptr %3575, align 2, !tbaa !46
  %3577 = icmp eq i8 %3576, 0
  %3578 = load i16, ptr %3568, align 8, !tbaa !47
  %3579 = zext i16 %3578 to i32
  %3580 = add nuw nsw i32 %3579, 64
  %3581 = sub nsw i32 63, %3579
  %3582 = select i1 %3577, i32 %3581, i32 %3580
  %3583 = mul nsw i32 %3572, %2874
  %3584 = ashr i32 %3583, 4
  %3585 = add nsw i32 %3584, %3574
  %3586 = tail call i32 @llvm.smax.i32(i32 %3585, i32 0)
  %3587 = tail call i32 @llvm.smin.i32(i32 %3586, i32 127)
  %3588 = uitofp i64 %3571 to double
  %3589 = fmul double %3588, 3.125000e-02
  %3590 = fcmp ogt double %3589, 1.000000e+00
  %3591 = select i1 %3590, double 1.000000e+00, double %3589
  %3592 = sext i32 %3582 to i64
  %3593 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3592
  %3594 = load double, ptr %3593, align 8, !tbaa !22
  %3595 = zext i32 %3587 to i64
  %3596 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3595
  %3597 = load double, ptr %3596, align 8, !tbaa !22
  %3598 = fneg double %3591
  %3599 = fmul double %3594, %3598
  %3600 = tail call double @llvm.fmuladd.f64(double %3599, double %3597, double 0.000000e+00)
  %3601 = sub nsw i32 127, %3582
  %3602 = sext i32 %3601 to i64
  %3603 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3602
  %3604 = load double, ptr %3603, align 8, !tbaa !22
  %3605 = xor i32 %3587, 127
  %3606 = zext i32 %3605 to i64
  %3607 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3606
  %3608 = load double, ptr %3607, align 8, !tbaa !22
  %3609 = fmul double %3604, %3598
  %3610 = tail call double @llvm.fmuladd.f64(double %3609, double %3608, double %3600)
  %3611 = fadd double %3567, %3610
  %3612 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 3
  %3613 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %258, i64 %3295, i64 3
  %3614 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 3, i32 2
  %3615 = load i64, ptr %3614, align 8, !tbaa !43
  %3616 = load i32, ptr %3613, align 8, !tbaa !18
  %3617 = getelementptr inbounds i32, ptr %3613, i64 1
  %3618 = load i32, ptr %3617, align 4, !tbaa !18
  %3619 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 3, i32 1
  %3620 = load i8, ptr %3619, align 2, !tbaa !46
  %3621 = icmp eq i8 %3620, 0
  %3622 = load i16, ptr %3612, align 8, !tbaa !47
  %3623 = zext i16 %3622 to i32
  %3624 = add nuw nsw i32 %3623, 64
  %3625 = sub nsw i32 63, %3623
  %3626 = select i1 %3621, i32 %3625, i32 %3624
  %3627 = mul nsw i32 %3616, %2874
  %3628 = ashr i32 %3627, 4
  %3629 = add nsw i32 %3628, %3618
  %3630 = tail call i32 @llvm.smax.i32(i32 %3629, i32 0)
  %3631 = tail call i32 @llvm.smin.i32(i32 %3630, i32 127)
  %3632 = uitofp i64 %3615 to double
  %3633 = fmul double %3632, 3.125000e-02
  %3634 = fcmp ogt double %3633, 1.000000e+00
  %3635 = select i1 %3634, double 1.000000e+00, double %3633
  %3636 = sext i32 %3626 to i64
  %3637 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3636
  %3638 = load double, ptr %3637, align 8, !tbaa !22
  %3639 = zext i32 %3631 to i64
  %3640 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3639
  %3641 = load double, ptr %3640, align 8, !tbaa !22
  %3642 = fneg double %3635
  %3643 = fmul double %3638, %3642
  %3644 = tail call double @llvm.fmuladd.f64(double %3643, double %3641, double 0.000000e+00)
  %3645 = sub nsw i32 127, %3626
  %3646 = sext i32 %3645 to i64
  %3647 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3646
  %3648 = load double, ptr %3647, align 8, !tbaa !22
  %3649 = xor i32 %3631, 127
  %3650 = zext i32 %3649 to i64
  %3651 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3650
  %3652 = load double, ptr %3651, align 8, !tbaa !22
  %3653 = fmul double %3648, %3642
  %3654 = tail call double @llvm.fmuladd.f64(double %3653, double %3652, double %3644)
  %3655 = fadd double %3611, %3654
  %3656 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 4
  %3657 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %258, i64 %3295, i64 4
  %3658 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 4, i32 2
  %3659 = load i64, ptr %3658, align 8, !tbaa !43
  %3660 = load i32, ptr %3657, align 8, !tbaa !18
  %3661 = getelementptr inbounds i32, ptr %3657, i64 1
  %3662 = load i32, ptr %3661, align 4, !tbaa !18
  %3663 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 7, i64 %3295, i64 4, i32 1
  %3664 = load i8, ptr %3663, align 2, !tbaa !46
  %3665 = icmp eq i8 %3664, 0
  %3666 = load i16, ptr %3656, align 8, !tbaa !47
  %3667 = zext i16 %3666 to i32
  %3668 = add nuw nsw i32 %3667, 64
  %3669 = sub nsw i32 63, %3667
  %3670 = select i1 %3665, i32 %3669, i32 %3668
  %3671 = mul nsw i32 %3660, %2874
  %3672 = ashr i32 %3671, 4
  %3673 = add nsw i32 %3672, %3662
  %3674 = tail call i32 @llvm.smax.i32(i32 %3673, i32 0)
  %3675 = tail call i32 @llvm.smin.i32(i32 %3674, i32 127)
  %3676 = uitofp i64 %3659 to double
  %3677 = fmul double %3676, 3.125000e-02
  %3678 = fcmp ogt double %3677, 1.000000e+00
  %3679 = select i1 %3678, double 1.000000e+00, double %3677
  %3680 = sext i32 %3670 to i64
  %3681 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3680
  %3682 = load double, ptr %3681, align 8, !tbaa !22
  %3683 = zext i32 %3675 to i64
  %3684 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3683
  %3685 = load double, ptr %3684, align 8, !tbaa !22
  %3686 = fneg double %3679
  %3687 = fmul double %3682, %3686
  %3688 = tail call double @llvm.fmuladd.f64(double %3687, double %3685, double 0.000000e+00)
  br label %3689

3689:                                             ; preds = %3507, %3325
  %3690 = phi i32 [ %3670, %3507 ], [ %3488, %3325 ]
  %3691 = phi i32 [ %3675, %3507 ], [ %3493, %3325 ]
  %3692 = phi double [ %3686, %3507 ], [ %3504, %3325 ]
  %3693 = phi double [ %3688, %3507 ], [ %3506, %3325 ]
  %3694 = phi double [ %3655, %3507 ], [ %3473, %3325 ]
  %3695 = sub nsw i32 127, %3690
  %3696 = sext i32 %3695 to i64
  %3697 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3696
  %3698 = load double, ptr %3697, align 8, !tbaa !22
  %3699 = xor i32 %3691, 127
  %3700 = zext i32 %3699 to i64
  %3701 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3700
  %3702 = load double, ptr %3701, align 8, !tbaa !22
  %3703 = fmul double %3698, %3692
  %3704 = tail call double @llvm.fmuladd.f64(double %3703, double %3702, double %3693)
  %3705 = fadd double %3694, %3704
  %3706 = add nuw nsw i64 %3295, 1
  %3707 = icmp eq i64 %3706, 8
  br i1 %3707, label %3289, label %3294, !llvm.loop !61

3708:                                             ; preds = %3812
  %3709 = tail call i32 @llvm.smax.i32(i32 %3292, i32 0)
  %3710 = tail call i32 @llvm.smax.i32(i32 %3292, i32 0)
  br label %3816

3711:                                             ; preds = %3289, %3812
  %3712 = phi i64 [ 0, %3289 ], [ %3814, %3812 ]
  %3713 = phi double [ %3705, %3289 ], [ %3813, %3812 ]
  br i1 %3291, label %3714, label %3763

3714:                                             ; preds = %3711, %3714
  %3715 = phi i64 [ %3761, %3714 ], [ 0, %3711 ]
  %3716 = phi double [ %3760, %3714 ], [ %3713, %3711 ]
  %3717 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 8, i64 %3712, i64 %3715
  %3718 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 0, i64 %3712, i64 %3715
  %3719 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 8, i64 %3712, i64 %3715, i32 2
  %3720 = load i64, ptr %3719, align 8, !tbaa !43
  %3721 = load i32, ptr %3718, align 8, !tbaa !18
  %3722 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 0, i64 %3712, i64 %3715, i64 1
  %3723 = load i32, ptr %3722, align 4, !tbaa !18
  %3724 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 8, i64 %3712, i64 %3715, i32 1
  %3725 = load i8, ptr %3724, align 2, !tbaa !46
  %3726 = icmp eq i8 %3725, 0
  %3727 = load i16, ptr %3717, align 8, !tbaa !47
  %3728 = zext i16 %3727 to i32
  %3729 = add nuw nsw i32 %3728, 64
  %3730 = sub nsw i32 63, %3728
  %3731 = select i1 %3726, i32 %3730, i32 %3729
  %3732 = mul nsw i32 %3721, %3293
  %3733 = ashr i32 %3732, 4
  %3734 = add nsw i32 %3733, %3723
  %3735 = tail call i32 @llvm.smax.i32(i32 %3734, i32 0)
  %3736 = tail call i32 @llvm.smin.i32(i32 %3735, i32 127)
  %3737 = uitofp i64 %3720 to double
  %3738 = fmul double %3737, 3.125000e-02
  %3739 = fcmp ogt double %3738, 1.000000e+00
  %3740 = select i1 %3739, double 1.000000e+00, double %3738
  %3741 = sext i32 %3731 to i64
  %3742 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3741
  %3743 = load double, ptr %3742, align 8, !tbaa !22
  %3744 = zext i32 %3736 to i64
  %3745 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3744
  %3746 = load double, ptr %3745, align 8, !tbaa !22
  %3747 = fneg double %3740
  %3748 = fmul double %3743, %3747
  %3749 = tail call double @llvm.fmuladd.f64(double %3748, double %3746, double 0.000000e+00)
  %3750 = sub nsw i32 127, %3731
  %3751 = sext i32 %3750 to i64
  %3752 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3751
  %3753 = load double, ptr %3752, align 8, !tbaa !22
  %3754 = xor i32 %3736, 127
  %3755 = zext i32 %3754 to i64
  %3756 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3755
  %3757 = load double, ptr %3756, align 8, !tbaa !22
  %3758 = fmul double %3753, %3747
  %3759 = tail call double @llvm.fmuladd.f64(double %3758, double %3757, double %3749)
  %3760 = fadd double %3716, %3759
  %3761 = add nuw nsw i64 %3715, 1
  %3762 = icmp eq i64 %3761, 15
  br i1 %3762, label %3812, label %3714, !llvm.loop !62

3763:                                             ; preds = %3711, %3763
  %3764 = phi i64 [ %3810, %3763 ], [ 0, %3711 ]
  %3765 = phi double [ %3809, %3763 ], [ %3713, %3711 ]
  %3766 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 8, i64 %3712, i64 %3764
  %3767 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %258, i64 %3712, i64 %3764
  %3768 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 8, i64 %3712, i64 %3764, i32 2
  %3769 = load i64, ptr %3768, align 8, !tbaa !43
  %3770 = load i32, ptr %3767, align 8, !tbaa !18
  %3771 = getelementptr inbounds i32, ptr %3767, i64 1
  %3772 = load i32, ptr %3771, align 4, !tbaa !18
  %3773 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 8, i64 %3712, i64 %3764, i32 1
  %3774 = load i8, ptr %3773, align 2, !tbaa !46
  %3775 = icmp eq i8 %3774, 0
  %3776 = load i16, ptr %3766, align 8, !tbaa !47
  %3777 = zext i16 %3776 to i32
  %3778 = add nuw nsw i32 %3777, 64
  %3779 = sub nsw i32 63, %3777
  %3780 = select i1 %3775, i32 %3779, i32 %3778
  %3781 = mul nsw i32 %3770, %3293
  %3782 = ashr i32 %3781, 4
  %3783 = add nsw i32 %3782, %3772
  %3784 = tail call i32 @llvm.smax.i32(i32 %3783, i32 0)
  %3785 = tail call i32 @llvm.smin.i32(i32 %3784, i32 127)
  %3786 = uitofp i64 %3769 to double
  %3787 = fmul double %3786, 3.125000e-02
  %3788 = fcmp ogt double %3787, 1.000000e+00
  %3789 = select i1 %3788, double 1.000000e+00, double %3787
  %3790 = sext i32 %3780 to i64
  %3791 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3790
  %3792 = load double, ptr %3791, align 8, !tbaa !22
  %3793 = zext i32 %3785 to i64
  %3794 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3793
  %3795 = load double, ptr %3794, align 8, !tbaa !22
  %3796 = fneg double %3789
  %3797 = fmul double %3792, %3796
  %3798 = tail call double @llvm.fmuladd.f64(double %3797, double %3795, double 0.000000e+00)
  %3799 = sub nsw i32 127, %3780
  %3800 = sext i32 %3799 to i64
  %3801 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3800
  %3802 = load double, ptr %3801, align 8, !tbaa !22
  %3803 = xor i32 %3785, 127
  %3804 = zext i32 %3803 to i64
  %3805 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3804
  %3806 = load double, ptr %3805, align 8, !tbaa !22
  %3807 = fmul double %3802, %3796
  %3808 = tail call double @llvm.fmuladd.f64(double %3807, double %3806, double %3798)
  %3809 = fadd double %3765, %3808
  %3810 = add nuw nsw i64 %3764, 1
  %3811 = icmp eq i64 %3810, 15
  br i1 %3811, label %3812, label %3763, !llvm.loop !62

3812:                                             ; preds = %3763, %3714
  %3813 = phi double [ %3760, %3714 ], [ %3809, %3763 ]
  %3814 = add nuw nsw i64 %3712, 1
  %3815 = icmp eq i64 %3814, 8
  br i1 %3815, label %3708, label %3711, !llvm.loop !63

3816:                                             ; preds = %3708, %3917
  %3817 = phi i64 [ 0, %3708 ], [ %3919, %3917 ]
  %3818 = phi double [ %3813, %3708 ], [ %3918, %3917 ]
  br i1 %3291, label %3819, label %3868

3819:                                             ; preds = %3816, %3819
  %3820 = phi i64 [ %3866, %3819 ], [ 0, %3816 ]
  %3821 = phi double [ %3865, %3819 ], [ %3818, %3816 ]
  %3822 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 9, i64 %3817, i64 %3820
  %3823 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 0, i64 %3817, i64 %3820
  %3824 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 9, i64 %3817, i64 %3820, i32 2
  %3825 = load i64, ptr %3824, align 8, !tbaa !43
  %3826 = load i32, ptr %3823, align 8, !tbaa !18
  %3827 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 0, i64 %3817, i64 %3820, i64 1
  %3828 = load i32, ptr %3827, align 4, !tbaa !18
  %3829 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 9, i64 %3817, i64 %3820, i32 1
  %3830 = load i8, ptr %3829, align 2, !tbaa !46
  %3831 = icmp eq i8 %3830, 0
  %3832 = load i16, ptr %3822, align 8, !tbaa !47
  %3833 = zext i16 %3832 to i32
  %3834 = add nuw nsw i32 %3833, 64
  %3835 = sub nsw i32 63, %3833
  %3836 = select i1 %3831, i32 %3835, i32 %3834
  %3837 = mul nsw i32 %3826, %3709
  %3838 = ashr i32 %3837, 4
  %3839 = add nsw i32 %3838, %3828
  %3840 = tail call i32 @llvm.smax.i32(i32 %3839, i32 0)
  %3841 = tail call i32 @llvm.smin.i32(i32 %3840, i32 127)
  %3842 = uitofp i64 %3825 to double
  %3843 = fmul double %3842, 3.125000e-02
  %3844 = fcmp ogt double %3843, 1.000000e+00
  %3845 = select i1 %3844, double 1.000000e+00, double %3843
  %3846 = sext i32 %3836 to i64
  %3847 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3846
  %3848 = load double, ptr %3847, align 8, !tbaa !22
  %3849 = zext i32 %3841 to i64
  %3850 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3849
  %3851 = load double, ptr %3850, align 8, !tbaa !22
  %3852 = fneg double %3845
  %3853 = fmul double %3848, %3852
  %3854 = tail call double @llvm.fmuladd.f64(double %3853, double %3851, double 0.000000e+00)
  %3855 = sub nsw i32 127, %3836
  %3856 = sext i32 %3855 to i64
  %3857 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3856
  %3858 = load double, ptr %3857, align 8, !tbaa !22
  %3859 = xor i32 %3841, 127
  %3860 = zext i32 %3859 to i64
  %3861 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3860
  %3862 = load double, ptr %3861, align 8, !tbaa !22
  %3863 = fmul double %3858, %3852
  %3864 = tail call double @llvm.fmuladd.f64(double %3863, double %3862, double %3854)
  %3865 = fadd double %3821, %3864
  %3866 = add nuw nsw i64 %3820, 1
  %3867 = icmp eq i64 %3866, 15
  br i1 %3867, label %3917, label %3819, !llvm.loop !64

3868:                                             ; preds = %3816, %3868
  %3869 = phi i64 [ %3915, %3868 ], [ 0, %3816 ]
  %3870 = phi double [ %3914, %3868 ], [ %3818, %3816 ]
  %3871 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 9, i64 %3817, i64 %3869
  %3872 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %258, i64 %3817, i64 %3869
  %3873 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 9, i64 %3817, i64 %3869, i32 2
  %3874 = load i64, ptr %3873, align 8, !tbaa !43
  %3875 = load i32, ptr %3872, align 8, !tbaa !18
  %3876 = getelementptr inbounds i32, ptr %3872, i64 1
  %3877 = load i32, ptr %3876, align 4, !tbaa !18
  %3878 = getelementptr inbounds %struct.TextureInfoContexts, ptr %2, i64 0, i32 9, i64 %3817, i64 %3869, i32 1
  %3879 = load i8, ptr %3878, align 2, !tbaa !46
  %3880 = icmp eq i8 %3879, 0
  %3881 = load i16, ptr %3871, align 8, !tbaa !47
  %3882 = zext i16 %3881 to i32
  %3883 = add nuw nsw i32 %3882, 64
  %3884 = sub nsw i32 63, %3882
  %3885 = select i1 %3880, i32 %3884, i32 %3883
  %3886 = mul nsw i32 %3875, %3710
  %3887 = ashr i32 %3886, 4
  %3888 = add nsw i32 %3887, %3877
  %3889 = tail call i32 @llvm.smax.i32(i32 %3888, i32 0)
  %3890 = tail call i32 @llvm.smin.i32(i32 %3889, i32 127)
  %3891 = uitofp i64 %3874 to double
  %3892 = fmul double %3891, 3.125000e-02
  %3893 = fcmp ogt double %3892, 1.000000e+00
  %3894 = select i1 %3893, double 1.000000e+00, double %3892
  %3895 = sext i32 %3885 to i64
  %3896 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3895
  %3897 = load double, ptr %3896, align 8, !tbaa !22
  %3898 = zext i32 %3890 to i64
  %3899 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3898
  %3900 = load double, ptr %3899, align 8, !tbaa !22
  %3901 = fneg double %3894
  %3902 = fmul double %3897, %3901
  %3903 = tail call double @llvm.fmuladd.f64(double %3902, double %3900, double 0.000000e+00)
  %3904 = sub nsw i32 127, %3885
  %3905 = sext i32 %3904 to i64
  %3906 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %3905
  %3907 = load double, ptr %3906, align 8, !tbaa !22
  %3908 = xor i32 %3890, 127
  %3909 = zext i32 %3908 to i64
  %3910 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %3909
  %3911 = load double, ptr %3910, align 8, !tbaa !22
  %3912 = fmul double %3907, %3901
  %3913 = tail call double @llvm.fmuladd.f64(double %3912, double %3911, double %3903)
  %3914 = fadd double %3870, %3913
  %3915 = add nuw nsw i64 %3869, 1
  %3916 = icmp eq i64 %3915, 15
  br i1 %3916, label %3917, label %3868, !llvm.loop !64

3917:                                             ; preds = %3868, %3819
  %3918 = phi double [ %3865, %3819 ], [ %3914, %3868 ]
  %3919 = add nuw nsw i64 %3817, 1
  %3920 = icmp eq i64 %3919, 8
  br i1 %3920, label %3921, label %3816, !llvm.loop !65

3921:                                             ; preds = %3917
  %3922 = fcmp olt double %3918, %259
  br i1 %3922, label %3923, label %3925

3923:                                             ; preds = %3921
  %3924 = trunc i64 %258 to i32
  store i32 %3924, ptr %0, align 4, !tbaa !18
  br label %3925

3925:                                             ; preds = %3921, %3923
  %3926 = phi double [ %3918, %3923 ], [ %259, %3921 ]
  %3927 = icmp ult i64 %258, 2
  %3928 = select i1 %7, i1 %3927, i1 false
  br i1 %3928, label %253, label %3929, !llvm.loop !66

3929:                                             ; preds = %3925
  ret void
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @store_contexts() local_unnamed_addr #10 {
  %1 = load ptr, ptr @input, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.InputParameters, ptr %1, i64 0, i32 151
  %3 = load i32, ptr %2, align 4, !tbaa !29
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %36, label %5

5:                                                ; preds = %0
  %6 = load ptr, ptr @img, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.ImageParameters, ptr %6, i64 0, i32 60
  %8 = load ptr, ptr %7, align 8, !tbaa !26
  %9 = getelementptr inbounds %struct.Slice, ptr %8, i64 0, i32 3
  %10 = load i32, ptr %9, align 4, !tbaa !27
  %11 = load i32, ptr @num_mb_per_slice, align 4, !tbaa !18
  %12 = sdiv i32 %10, %11
  %13 = getelementptr inbounds %struct.ImageParameters, ptr %6, i64 0, i32 5
  %14 = load i32, ptr %13, align 4, !tbaa !25
  %15 = getelementptr inbounds %struct.ImageParameters, ptr %6, i64 0, i32 110
  %16 = load i32, ptr %15, align 8, !tbaa !24
  %17 = load ptr, ptr @initialized, align 8, !tbaa !5
  %18 = sext i32 %16 to i64
  %19 = getelementptr inbounds ptr, ptr %17, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = sext i32 %14 to i64
  %22 = getelementptr inbounds ptr, ptr %20, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !5
  %24 = sext i32 %12 to i64
  %25 = getelementptr inbounds i32, ptr %23, i64 %24
  store i32 1, ptr %25, align 4, !tbaa !18
  %26 = load ptr, ptr @model_number, align 8, !tbaa !5
  %27 = getelementptr inbounds ptr, ptr %26, i64 %18
  %28 = load ptr, ptr %27, align 8, !tbaa !5
  %29 = getelementptr inbounds ptr, ptr %28, i64 %21
  %30 = load ptr, ptr %29, align 8, !tbaa !5
  %31 = getelementptr inbounds i32, ptr %30, i64 %24
  %32 = getelementptr inbounds %struct.Slice, ptr %8, i64 0, i32 7
  %33 = load ptr, ptr %32, align 8, !tbaa !32
  %34 = getelementptr inbounds %struct.Slice, ptr %8, i64 0, i32 8
  %35 = load ptr, ptr %34, align 8, !tbaa !33
  tail call void @GetCtxModelNumber(ptr noundef %31, ptr noundef %33, ptr noundef %35)
  br label %36

36:                                               ; preds = %0, %5
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @update_field_frame_contexts(i32 noundef %0) local_unnamed_addr #11 {
  %2 = icmp eq i32 %0, 0
  %3 = load ptr, ptr @initialized, align 8
  %4 = getelementptr inbounds ptr, ptr %3, i64 1
  %5 = load ptr, ptr @model_number, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 1
  %7 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %8 = icmp sgt i32 %7, 0
  br i1 %2, label %10, label %9

9:                                                ; preds = %1
  br i1 %8, label %11, label %235

10:                                               ; preds = %1
  br i1 %8, label %121, label %235

11:                                               ; preds = %9
  %12 = load ptr, ptr %4, align 8, !tbaa !5
  %13 = load ptr, ptr %12, align 8, !tbaa !5
  %14 = load ptr, ptr %3, align 8, !tbaa !5
  %15 = load ptr, ptr %14, align 8, !tbaa !5
  %16 = load ptr, ptr %6, align 8, !tbaa !5
  %17 = load ptr, ptr %16, align 8, !tbaa !5
  %18 = load ptr, ptr %5, align 8, !tbaa !5
  %19 = load ptr, ptr %18, align 8, !tbaa !5
  br label %20

20:                                               ; preds = %11, %20
  %21 = phi i64 [ 0, %11 ], [ %30, %20 ]
  %22 = lshr i64 %21, 1
  %23 = and i64 %22, 2147483647
  %24 = getelementptr inbounds i32, ptr %13, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !18
  %26 = getelementptr inbounds i32, ptr %15, i64 %21
  store i32 %25, ptr %26, align 4, !tbaa !18
  %27 = getelementptr inbounds i32, ptr %17, i64 %23
  %28 = load i32, ptr %27, align 4, !tbaa !18
  %29 = getelementptr inbounds i32, ptr %19, i64 %21
  store i32 %28, ptr %29, align 4, !tbaa !18
  %30 = add nuw nsw i64 %21, 1
  %31 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %20, label %34, !llvm.loop !67

34:                                               ; preds = %20
  %35 = icmp sgt i32 %31, 0
  br i1 %35, label %36, label %235

36:                                               ; preds = %34
  %37 = load ptr, ptr %4, align 8, !tbaa !5
  %38 = getelementptr inbounds ptr, ptr %37, i64 1
  %39 = load ptr, ptr %38, align 8, !tbaa !5
  %40 = load ptr, ptr %3, align 8, !tbaa !5
  %41 = getelementptr inbounds ptr, ptr %40, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load ptr, ptr %6, align 8, !tbaa !5
  %44 = getelementptr inbounds ptr, ptr %43, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  %46 = load ptr, ptr %5, align 8, !tbaa !5
  %47 = getelementptr inbounds ptr, ptr %46, i64 1
  %48 = load ptr, ptr %47, align 8, !tbaa !5
  br label %49

49:                                               ; preds = %49, %36
  %50 = phi i64 [ 0, %36 ], [ %59, %49 ]
  %51 = lshr i64 %50, 1
  %52 = and i64 %51, 2147483647
  %53 = getelementptr inbounds i32, ptr %39, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !18
  %55 = getelementptr inbounds i32, ptr %42, i64 %50
  store i32 %54, ptr %55, align 4, !tbaa !18
  %56 = getelementptr inbounds i32, ptr %45, i64 %52
  %57 = load i32, ptr %56, align 4, !tbaa !18
  %58 = getelementptr inbounds i32, ptr %48, i64 %50
  store i32 %57, ptr %58, align 4, !tbaa !18
  %59 = add nuw nsw i64 %50, 1
  %60 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %61 = sext i32 %60 to i64
  %62 = icmp slt i64 %59, %61
  br i1 %62, label %49, label %63, !llvm.loop !67

63:                                               ; preds = %49
  %64 = icmp sgt i32 %60, 0
  br i1 %64, label %65, label %235

65:                                               ; preds = %63
  %66 = load ptr, ptr %4, align 8, !tbaa !5
  %67 = getelementptr inbounds ptr, ptr %66, i64 2
  %68 = load ptr, ptr %67, align 8, !tbaa !5
  %69 = load ptr, ptr %3, align 8, !tbaa !5
  %70 = getelementptr inbounds ptr, ptr %69, i64 2
  %71 = load ptr, ptr %70, align 8, !tbaa !5
  %72 = load ptr, ptr %6, align 8, !tbaa !5
  %73 = getelementptr inbounds ptr, ptr %72, i64 2
  %74 = load ptr, ptr %73, align 8, !tbaa !5
  %75 = load ptr, ptr %5, align 8, !tbaa !5
  %76 = getelementptr inbounds ptr, ptr %75, i64 2
  %77 = load ptr, ptr %76, align 8, !tbaa !5
  br label %78

78:                                               ; preds = %78, %65
  %79 = phi i64 [ 0, %65 ], [ %88, %78 ]
  %80 = lshr i64 %79, 1
  %81 = and i64 %80, 2147483647
  %82 = getelementptr inbounds i32, ptr %68, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !18
  %84 = getelementptr inbounds i32, ptr %71, i64 %79
  store i32 %83, ptr %84, align 4, !tbaa !18
  %85 = getelementptr inbounds i32, ptr %74, i64 %81
  %86 = load i32, ptr %85, align 4, !tbaa !18
  %87 = getelementptr inbounds i32, ptr %77, i64 %79
  store i32 %86, ptr %87, align 4, !tbaa !18
  %88 = add nuw nsw i64 %79, 1
  %89 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %90 = sext i32 %89 to i64
  %91 = icmp slt i64 %88, %90
  br i1 %91, label %78, label %92, !llvm.loop !67

92:                                               ; preds = %78
  %93 = icmp sgt i32 %89, 0
  br i1 %93, label %94, label %235

94:                                               ; preds = %92
  %95 = load ptr, ptr %4, align 8, !tbaa !5
  %96 = getelementptr inbounds ptr, ptr %95, i64 3
  %97 = load ptr, ptr %96, align 8, !tbaa !5
  %98 = load ptr, ptr %3, align 8, !tbaa !5
  %99 = getelementptr inbounds ptr, ptr %98, i64 3
  %100 = load ptr, ptr %99, align 8, !tbaa !5
  %101 = load ptr, ptr %6, align 8, !tbaa !5
  %102 = getelementptr inbounds ptr, ptr %101, i64 3
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  %104 = load ptr, ptr %5, align 8, !tbaa !5
  %105 = getelementptr inbounds ptr, ptr %104, i64 3
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  br label %107

107:                                              ; preds = %107, %94
  %108 = phi i64 [ 0, %94 ], [ %117, %107 ]
  %109 = lshr i64 %108, 1
  %110 = and i64 %109, 2147483647
  %111 = getelementptr inbounds i32, ptr %97, i64 %110
  %112 = load i32, ptr %111, align 4, !tbaa !18
  %113 = getelementptr inbounds i32, ptr %100, i64 %108
  store i32 %112, ptr %113, align 4, !tbaa !18
  %114 = getelementptr inbounds i32, ptr %103, i64 %110
  %115 = load i32, ptr %114, align 4, !tbaa !18
  %116 = getelementptr inbounds i32, ptr %106, i64 %108
  store i32 %115, ptr %116, align 4, !tbaa !18
  %117 = add nuw nsw i64 %108, 1
  %118 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %119 = sext i32 %118 to i64
  %120 = icmp slt i64 %117, %119
  br i1 %120, label %107, label %235, !llvm.loop !67

121:                                              ; preds = %10
  %122 = load ptr, ptr %3, align 8, !tbaa !5
  %123 = load ptr, ptr %122, align 8, !tbaa !5
  %124 = load ptr, ptr %4, align 8, !tbaa !5
  %125 = load ptr, ptr %124, align 8, !tbaa !5
  %126 = load ptr, ptr %5, align 8, !tbaa !5
  %127 = load ptr, ptr %126, align 8, !tbaa !5
  %128 = load ptr, ptr %6, align 8, !tbaa !5
  %129 = load ptr, ptr %128, align 8, !tbaa !5
  br label %130

130:                                              ; preds = %121, %130
  %131 = phi i64 [ 0, %121 ], [ %139, %130 ]
  %132 = shl nuw i64 %131, 1
  %133 = getelementptr inbounds i32, ptr %123, i64 %132
  %134 = load i32, ptr %133, align 4, !tbaa !18
  %135 = getelementptr inbounds i32, ptr %125, i64 %131
  store i32 %134, ptr %135, align 4, !tbaa !18
  %136 = getelementptr inbounds i32, ptr %127, i64 %132
  %137 = load i32, ptr %136, align 4, !tbaa !18
  %138 = getelementptr inbounds i32, ptr %129, i64 %131
  store i32 %137, ptr %138, align 4, !tbaa !18
  %139 = add nuw nsw i64 %131, 1
  %140 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %141 = add nsw i32 %140, 1
  %142 = ashr i32 %141, 1
  %143 = sext i32 %142 to i64
  %144 = icmp slt i64 %139, %143
  br i1 %144, label %130, label %145, !llvm.loop !68

145:                                              ; preds = %130
  %146 = icmp sgt i32 %140, 0
  br i1 %146, label %147, label %235

147:                                              ; preds = %145
  %148 = load ptr, ptr %3, align 8, !tbaa !5
  %149 = getelementptr inbounds ptr, ptr %148, i64 1
  %150 = load ptr, ptr %149, align 8, !tbaa !5
  %151 = load ptr, ptr %4, align 8, !tbaa !5
  %152 = getelementptr inbounds ptr, ptr %151, i64 1
  %153 = load ptr, ptr %152, align 8, !tbaa !5
  %154 = load ptr, ptr %5, align 8, !tbaa !5
  %155 = getelementptr inbounds ptr, ptr %154, i64 1
  %156 = load ptr, ptr %155, align 8, !tbaa !5
  %157 = load ptr, ptr %6, align 8, !tbaa !5
  %158 = getelementptr inbounds ptr, ptr %157, i64 1
  %159 = load ptr, ptr %158, align 8, !tbaa !5
  br label %160

160:                                              ; preds = %160, %147
  %161 = phi i64 [ 0, %147 ], [ %169, %160 ]
  %162 = shl nuw i64 %161, 1
  %163 = getelementptr inbounds i32, ptr %150, i64 %162
  %164 = load i32, ptr %163, align 4, !tbaa !18
  %165 = getelementptr inbounds i32, ptr %153, i64 %161
  store i32 %164, ptr %165, align 4, !tbaa !18
  %166 = getelementptr inbounds i32, ptr %156, i64 %162
  %167 = load i32, ptr %166, align 4, !tbaa !18
  %168 = getelementptr inbounds i32, ptr %159, i64 %161
  store i32 %167, ptr %168, align 4, !tbaa !18
  %169 = add nuw nsw i64 %161, 1
  %170 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %171 = add nsw i32 %170, 1
  %172 = ashr i32 %171, 1
  %173 = sext i32 %172 to i64
  %174 = icmp slt i64 %169, %173
  br i1 %174, label %160, label %175, !llvm.loop !68

175:                                              ; preds = %160
  %176 = icmp sgt i32 %170, 0
  br i1 %176, label %177, label %235

177:                                              ; preds = %175
  %178 = load ptr, ptr %3, align 8, !tbaa !5
  %179 = getelementptr inbounds ptr, ptr %178, i64 2
  %180 = load ptr, ptr %179, align 8, !tbaa !5
  %181 = load ptr, ptr %4, align 8, !tbaa !5
  %182 = getelementptr inbounds ptr, ptr %181, i64 2
  %183 = load ptr, ptr %182, align 8, !tbaa !5
  %184 = load ptr, ptr %5, align 8, !tbaa !5
  %185 = getelementptr inbounds ptr, ptr %184, i64 2
  %186 = load ptr, ptr %185, align 8, !tbaa !5
  %187 = load ptr, ptr %6, align 8, !tbaa !5
  %188 = getelementptr inbounds ptr, ptr %187, i64 2
  %189 = load ptr, ptr %188, align 8, !tbaa !5
  br label %190

190:                                              ; preds = %190, %177
  %191 = phi i64 [ 0, %177 ], [ %199, %190 ]
  %192 = shl nuw i64 %191, 1
  %193 = getelementptr inbounds i32, ptr %180, i64 %192
  %194 = load i32, ptr %193, align 4, !tbaa !18
  %195 = getelementptr inbounds i32, ptr %183, i64 %191
  store i32 %194, ptr %195, align 4, !tbaa !18
  %196 = getelementptr inbounds i32, ptr %186, i64 %192
  %197 = load i32, ptr %196, align 4, !tbaa !18
  %198 = getelementptr inbounds i32, ptr %189, i64 %191
  store i32 %197, ptr %198, align 4, !tbaa !18
  %199 = add nuw nsw i64 %191, 1
  %200 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %201 = add nsw i32 %200, 1
  %202 = ashr i32 %201, 1
  %203 = sext i32 %202 to i64
  %204 = icmp slt i64 %199, %203
  br i1 %204, label %190, label %205, !llvm.loop !68

205:                                              ; preds = %190
  %206 = icmp sgt i32 %200, 0
  br i1 %206, label %207, label %235

207:                                              ; preds = %205
  %208 = load ptr, ptr %3, align 8, !tbaa !5
  %209 = getelementptr inbounds ptr, ptr %208, i64 3
  %210 = load ptr, ptr %209, align 8, !tbaa !5
  %211 = load ptr, ptr %4, align 8, !tbaa !5
  %212 = getelementptr inbounds ptr, ptr %211, i64 3
  %213 = load ptr, ptr %212, align 8, !tbaa !5
  %214 = load ptr, ptr %5, align 8, !tbaa !5
  %215 = getelementptr inbounds ptr, ptr %214, i64 3
  %216 = load ptr, ptr %215, align 8, !tbaa !5
  %217 = load ptr, ptr %6, align 8, !tbaa !5
  %218 = getelementptr inbounds ptr, ptr %217, i64 3
  %219 = load ptr, ptr %218, align 8, !tbaa !5
  br label %220

220:                                              ; preds = %220, %207
  %221 = phi i64 [ 0, %207 ], [ %229, %220 ]
  %222 = shl nuw i64 %221, 1
  %223 = getelementptr inbounds i32, ptr %210, i64 %222
  %224 = load i32, ptr %223, align 4, !tbaa !18
  %225 = getelementptr inbounds i32, ptr %213, i64 %221
  store i32 %224, ptr %225, align 4, !tbaa !18
  %226 = getelementptr inbounds i32, ptr %216, i64 %222
  %227 = load i32, ptr %226, align 4, !tbaa !18
  %228 = getelementptr inbounds i32, ptr %219, i64 %221
  store i32 %227, ptr %228, align 4, !tbaa !18
  %229 = add nuw nsw i64 %221, 1
  %230 = load i32, ptr @number_of_slices, align 4, !tbaa !18
  %231 = add nsw i32 %230, 1
  %232 = ashr i32 %231, 1
  %233 = sext i32 %232 to i64
  %234 = icmp slt i64 %229, %233
  br i1 %234, label %220, label %235, !llvm.loop !68

235:                                              ; preds = %107, %220, %10, %145, %175, %34, %63, %205, %92, %9
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #12

attributes #0 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nounwind willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #9 = { nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #13 = { nounwind allocsize(0) }
attributes #14 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !11, i64 15352}
!10 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !12, i64 48, !11, i64 52, !11, i64 56, !11, i64 60, !11, i64 64, !11, i64 68, !11, i64 72, !11, i64 76, !11, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96, !11, i64 100, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116, !11, i64 120, !6, i64 128, !6, i64 136, !11, i64 144, !6, i64 152, !11, i64 160, !11, i64 164, !11, i64 168, !11, i64 172, !11, i64 176, !11, i64 180, !11, i64 184, !11, i64 188, !11, i64 192, !11, i64 196, !11, i64 200, !11, i64 204, !7, i64 208, !7, i64 4816, !7, i64 7376, !7, i64 8528, !7, i64 12624, !7, i64 13136, !6, i64 14160, !6, i64 14168, !6, i64 14176, !6, i64 14184, !6, i64 14192, !6, i64 14200, !6, i64 14208, !6, i64 14216, !6, i64 14224, !6, i64 14232, !6, i64 14240, !11, i64 14248, !11, i64 14252, !11, i64 14256, !11, i64 14260, !7, i64 14264, !11, i64 14328, !11, i64 14332, !11, i64 14336, !11, i64 14340, !11, i64 14344, !13, i64 14352, !11, i64 14360, !11, i64 14364, !11, i64 14368, !11, i64 14372, !6, i64 14376, !6, i64 14384, !6, i64 14392, !6, i64 14400, !7, i64 14408, !11, i64 14440, !11, i64 14444, !11, i64 14448, !11, i64 14452, !11, i64 14456, !11, i64 14460, !11, i64 14464, !11, i64 14468, !7, i64 14472, !11, i64 15240, !11, i64 15244, !11, i64 15248, !11, i64 15252, !11, i64 15256, !11, i64 15260, !11, i64 15264, !11, i64 15268, !11, i64 15272, !7, i64 15276, !11, i64 15280, !11, i64 15284, !11, i64 15288, !7, i64 15292, !11, i64 15296, !11, i64 15300, !7, i64 15304, !11, i64 15312, !11, i64 15316, !11, i64 15320, !11, i64 15324, !11, i64 15328, !11, i64 15332, !11, i64 15336, !11, i64 15340, !11, i64 15344, !11, i64 15348, !11, i64 15352, !7, i64 15356, !11, i64 15360, !11, i64 15364, !11, i64 15368, !11, i64 15372, !6, i64 15376, !11, i64 15384, !11, i64 15388, !11, i64 15392, !11, i64 15396, !11, i64 15400, !11, i64 15404, !11, i64 15408, !11, i64 15412, !11, i64 15416, !11, i64 15420, !11, i64 15424, !11, i64 15428, !11, i64 15432, !11, i64 15436, !11, i64 15440, !11, i64 15444, !11, i64 15448, !11, i64 15452, !11, i64 15456, !11, i64 15460, !11, i64 15464, !11, i64 15468, !11, i64 15472, !6, i64 15480, !6, i64 15488, !6, i64 15496, !6, i64 15504, !11, i64 15512, !11, i64 15516, !11, i64 15520, !11, i64 15524, !11, i64 15528, !11, i64 15532, !11, i64 15536, !11, i64 15540, !11, i64 15544, !11, i64 15548, !7, i64 15552, !7, i64 15576, !11, i64 15584, !11, i64 15588, !14, i64 15592, !11, i64 15596, !11, i64 15600, !11, i64 15604, !11, i64 15608, !11, i64 15612}
!11 = !{!"int", !7, i64 0}
!12 = !{!"float", !7, i64 0}
!13 = !{!"double", !7, i64 0}
!14 = !{!"short", !7, i64 0}
!15 = !{!16, !11, i64 264}
!16 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60, !11, i64 64, !11, i64 68, !7, i64 72, !7, i64 136, !7, i64 200, !11, i64 264, !11, i64 268, !11, i64 272, !11, i64 276, !7, i64 280, !7, i64 536, !7, i64 792, !7, i64 1048, !7, i64 1304, !11, i64 1560, !11, i64 1564, !11, i64 1568, !11, i64 1572, !11, i64 1576, !11, i64 1580, !7, i64 1584, !11, i64 2084, !11, i64 2088, !11, i64 2092, !11, i64 2096, !11, i64 2100, !11, i64 2104, !11, i64 2108, !11, i64 2112, !11, i64 2116, !11, i64 2120, !11, i64 2124, !11, i64 2128, !11, i64 2132, !11, i64 2136, !11, i64 2140, !11, i64 2144, !11, i64 2148, !11, i64 2152, !11, i64 2156, !7, i64 2160, !7, i64 2416, !7, i64 2672, !11, i64 2928, !11, i64 2932, !11, i64 2936, !11, i64 2940, !11, i64 2944, !11, i64 2948, !11, i64 2952, !11, i64 2956, !11, i64 2960, !11, i64 2964, !11, i64 2968, !11, i64 2972, !7, i64 2976, !11, i64 4000, !11, i64 4004, !11, i64 4008, !11, i64 4012, !11, i64 4016, !11, i64 4020, !11, i64 4024, !11, i64 4028, !11, i64 4032, !11, i64 4036, !11, i64 4040, !11, i64 4044, !11, i64 4048, !11, i64 4052, !11, i64 4056, !11, i64 4060, !11, i64 4064, !11, i64 4068, !11, i64 4072, !11, i64 4076, !13, i64 4080, !11, i64 4088, !11, i64 4092, !11, i64 4096, !11, i64 4100, !11, i64 4104, !11, i64 4108, !11, i64 4112, !11, i64 4116, !11, i64 4120, !11, i64 4124, !11, i64 4128, !11, i64 4132, !11, i64 4136, !11, i64 4140, !11, i64 4144, !11, i64 4148, !11, i64 4152, !11, i64 4156, !11, i64 4160, !11, i64 4164, !11, i64 4168, !11, i64 4172, !11, i64 4176, !11, i64 4180, !11, i64 4184, !11, i64 4188, !7, i64 4192, !7, i64 4448, !11, i64 4704, !11, i64 4708, !11, i64 4712, !11, i64 4716, !11, i64 4720, !11, i64 4724, !11, i64 4728, !11, i64 4732, !11, i64 4736, !11, i64 4740, !11, i64 4744, !11, i64 4748, !11, i64 4752, !11, i64 4756, !11, i64 4760, !11, i64 4764, !11, i64 4768, !11, i64 4772, !7, i64 4776, !11, i64 5032, !11, i64 5036, !6, i64 5040, !6, i64 5048, !6, i64 5056, !6, i64 5064, !11, i64 5072, !11, i64 5076, !11, i64 5080, !11, i64 5084, !11, i64 5088, !11, i64 5092, !11, i64 5096, !11, i64 5100, !11, i64 5104, !11, i64 5108, !11, i64 5112, !11, i64 5116, !11, i64 5120, !11, i64 5124, !11, i64 5128, !11, i64 5132, !11, i64 5136, !13, i64 5144, !13, i64 5152, !13, i64 5160, !7, i64 5168, !11, i64 5208, !7, i64 5212, !7, i64 5244, !11, i64 5248, !11, i64 5252, !11, i64 5256, !11, i64 5260, !11, i64 5264, !11, i64 5268, !11, i64 5272, !11, i64 5276, !11, i64 5280, !11, i64 5284, !11, i64 5288, !7, i64 5296, !7, i64 5344, !7, i64 5392, !11, i64 5648, !11, i64 5652, !11, i64 5656, !11, i64 5660, !7, i64 5664, !7, i64 5704, !11, i64 5744, !11, i64 5748, !11, i64 5752, !11, i64 5756, !11, i64 5760, !11, i64 5764, !11, i64 5768, !11, i64 5772, !11, i64 5776, !7, i64 5780, !11, i64 5792}
!17 = !{!16, !11, i64 268}
!18 = !{!11, !11, i64 0}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.mustprogress"}
!21 = distinct !{!21, !20}
!22 = !{!13, !13, i64 0}
!23 = distinct !{!23, !20}
!24 = !{!10, !11, i64 15312}
!25 = !{!10, !11, i64 20}
!26 = !{!10, !6, i64 14216}
!27 = !{!28, !11, i64 12}
!28 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !6, i64 24, !6, i64 32, !6, i64 40, !11, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !11, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !7, i64 120}
!29 = !{!16, !11, i64 5092}
!30 = !{!16, !11, i64 5096}
!31 = !{!10, !11, i64 15384}
!32 = !{!28, !6, i64 32}
!33 = !{!28, !6, i64 40}
!34 = distinct !{!34, !20}
!35 = distinct !{!35, !20}
!36 = distinct !{!36, !20}
!37 = distinct !{!37, !20}
!38 = distinct !{!38, !20}
!39 = distinct !{!39, !20}
!40 = distinct !{!40, !20}
!41 = distinct !{!41, !20}
!42 = !{!10, !11, i64 36}
!43 = !{!44, !45, i64 8}
!44 = !{!"", !14, i64 0, !7, i64 2, !45, i64 8}
!45 = !{!"long", !7, i64 0}
!46 = !{!44, !7, i64 2}
!47 = !{!44, !14, i64 0}
!48 = distinct !{!48, !20}
!49 = distinct !{!49, !20}
!50 = distinct !{!50, !20}
!51 = distinct !{!51, !20}
!52 = distinct !{!52, !20}
!53 = distinct !{!53, !20}
!54 = distinct !{!54, !20}
!55 = distinct !{!55, !20}
!56 = distinct !{!56, !20}
!57 = distinct !{!57, !20}
!58 = distinct !{!58, !20}
!59 = distinct !{!59, !20}
!60 = distinct !{!60, !20}
!61 = distinct !{!61, !20}
!62 = distinct !{!62, !20}
!63 = distinct !{!63, !20}
!64 = distinct !{!64, !20}
!65 = distinct !{!65, !20}
!66 = distinct !{!66, !20}
!67 = distinct !{!67, !20}
!68 = distinct !{!68, !20}
