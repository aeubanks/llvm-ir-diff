; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Benchmarks/Bullet/btSolve2LinearConstraint.cpp'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Benchmarks/Bullet/btSolve2LinearConstraint.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.btVector3 = type { [4 x float] }
%class.btRigidBody = type <{ %class.btCollisionObject, %class.btMatrix3x3, %class.btVector3, %class.btVector3, float, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, float, float, i8, [3 x i8], float, float, float, float, float, float, ptr, %class.btAlignedObjectArray, i32, i32, i32, [4 x i8] }>
%class.btCollisionObject = type { ptr, %class.btTransform, %class.btTransform, %class.btVector3, %class.btVector3, %class.btVector3, i8, float, ptr, ptr, ptr, i32, i32, i32, i32, float, float, float, ptr, i32, float, float, float, i8, [7 x i8] }
%class.btTransform = type { %class.btMatrix3x3, %class.btVector3 }
%class.btMatrix3x3 = type { [3 x %class.btVector3] }
%class.btAlignedObjectArray = type <{ %class.btAlignedAllocator, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator = type { i8 }
%class.btSolve2LinearConstraint = type { float, float }

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN24btSolve2LinearConstraint31resolveUnilateralPairConstraintEP11btRigidBodyS1_RK11btMatrix3x3S4_RK9btVector3fS7_S7_S7_S7_fS7_S7_S7_fS7_S7_S7_fS7_RfS8_(ptr nocapture noundef nonnull readonly align 4 dereferenceable(8) %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %3, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %4, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %5, float noundef %6, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %7, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %8, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %9, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %10, float noundef %11, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %12, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %13, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %14, float noundef %15, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %16, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %17, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %18, float noundef %19, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %20, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %21, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %22) local_unnamed_addr #0 align 2 {
  store float 0.000000e+00, ptr %21, align 4, !tbaa !5
  store float 0.000000e+00, ptr %22, align 4, !tbaa !5
  %24 = getelementptr inbounds [4 x float], ptr %16, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !5
  %26 = fmul float %25, %25
  %27 = getelementptr inbounds [4 x float], ptr %16, i64 0, i64 2
  %28 = load float, ptr %16, align 4, !tbaa !5
  %29 = tail call float @llvm.fmuladd.f32(float %28, float %28, float %26)
  %30 = load float, ptr %27, align 4, !tbaa !5
  %31 = tail call float @llvm.fmuladd.f32(float %30, float %30, float %29)
  %32 = tail call float @llvm.sqrt.f32(float %31)
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fadd float %33, -1.000000e+00
  %35 = tail call float @llvm.fabs.f32(float %34)
  %36 = fcmp ult float %35, 0x3E80000000000000
  br i1 %36, label %37, label %409

37:                                               ; preds = %23
  %38 = getelementptr inbounds [4 x float], ptr %9, i64 0, i64 1
  %39 = getelementptr inbounds [4 x float], ptr %9, i64 0, i64 2
  %40 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %41 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  %42 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1
  %43 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 1
  %44 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 2
  %45 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2
  %46 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 1
  %47 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 2
  %48 = fneg float %28
  %49 = fneg float %25
  %50 = fneg float %30
  %51 = getelementptr inbounds [4 x float], ptr %14, i64 0, i64 1
  %52 = getelementptr inbounds [4 x float], ptr %14, i64 0, i64 2
  %53 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 1
  %54 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 2
  %55 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1
  %56 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1, i32 0, i64 1
  %57 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1, i32 0, i64 2
  %58 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2
  %59 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2, i32 0, i64 1
  %60 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2, i32 0, i64 2
  %61 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 1
  %62 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %63 = getelementptr inbounds [4 x float], ptr %10, i64 0, i64 1
  %64 = getelementptr inbounds [4 x float], ptr %10, i64 0, i64 2
  %65 = getelementptr inbounds i8, ptr %20, i64 4
  %66 = load float, ptr %65, align 4, !tbaa.struct !9
  %67 = getelementptr inbounds i8, ptr %20, i64 8
  %68 = getelementptr inbounds [4 x float], ptr %17, i64 0, i64 1
  %69 = getelementptr inbounds [4 x float], ptr %17, i64 0, i64 2
  %70 = fneg float %66
  %71 = getelementptr inbounds [4 x float], ptr %18, i64 0, i64 1
  %72 = getelementptr inbounds [4 x float], ptr %18, i64 0, i64 2
  %73 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 2
  %74 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 3
  %75 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 3, i32 0, i64 1
  %76 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 3, i32 0, i64 2
  %77 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 2, i32 0, i64 1
  %78 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 2, i32 0, i64 2
  %79 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 2
  %80 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 3
  %81 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 3, i32 0, i64 1
  %82 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 3, i32 0, i64 2
  %83 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 2, i32 0, i64 1
  %84 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 2, i32 0, i64 2
  %85 = load float, ptr %78, align 8, !tbaa !5
  %86 = load float, ptr %74, align 8, !tbaa !5
  %87 = load float, ptr %80, align 8, !tbaa !5
  %88 = insertelement <2 x float> poison, float %86, i64 0
  %89 = insertelement <2 x float> %88, float %87, i64 1
  %90 = fneg <2 x float> %89
  %91 = load float, ptr %84, align 8, !tbaa !5
  %92 = insertelement <2 x float> poison, float %85, i64 0
  %93 = insertelement <2 x float> %92, float %91, i64 1
  %94 = load float, ptr %65, align 4, !tbaa !5
  %95 = load float, ptr %67, align 4, !tbaa !5
  %96 = fadd float %6, %11
  %97 = fdiv float 1.000000e+00, %96
  %98 = load float, ptr %0, align 4, !tbaa !11
  %99 = fmul float %98, %15
  %100 = getelementptr inbounds %class.btSolve2LinearConstraint, ptr %0, i64 0, i32 1
  %101 = load float, ptr %100, align 4, !tbaa !13
  %102 = fmul float %98, %19
  %103 = fmul float %25, %66
  %104 = fmul float %103, %6
  %105 = fmul float %103, %11
  %106 = load float, ptr %3, align 4, !tbaa !5
  %107 = load float, ptr %40, align 4, !tbaa !5
  %108 = load float, ptr %41, align 4, !tbaa !5
  %109 = load <4 x float>, ptr %45, align 4
  %110 = shufflevector <4 x float> %109, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %111 = load float, ptr %46, align 4, !tbaa !5
  %112 = insertelement <2 x float> poison, float %111, i64 0
  %113 = insertelement <2 x float> %112, float %107, i64 1
  %114 = insertelement <2 x float> %110, float %106, i64 1
  %115 = load float, ptr %47, align 4, !tbaa !5
  %116 = insertelement <2 x float> poison, float %115, i64 0
  %117 = insertelement <2 x float> %116, float %108, i64 1
  %118 = load float, ptr %4, align 4, !tbaa !5
  %119 = load float, ptr %53, align 4, !tbaa !5
  %120 = load float, ptr %54, align 4, !tbaa !5
  %121 = load <4 x float>, ptr %58, align 4
  %122 = shufflevector <4 x float> %121, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %123 = load float, ptr %59, align 4, !tbaa !5
  %124 = insertelement <2 x float> poison, float %123, i64 0
  %125 = insertelement <2 x float> %124, float %119, i64 1
  %126 = insertelement <2 x float> %122, float %118, i64 1
  %127 = load float, ptr %60, align 4, !tbaa !5
  %128 = insertelement <2 x float> poison, float %127, i64 0
  %129 = insertelement <2 x float> %128, float %120, i64 1
  %130 = load float, ptr %5, align 4, !tbaa !5
  %131 = load float, ptr %62, align 4, !tbaa !5
  %132 = insertelement <2 x float> poison, float %131, i64 0
  %133 = insertelement <2 x float> %132, float %130, i64 1
  %134 = load float, ptr %10, align 4, !tbaa !5
  %135 = load float, ptr %64, align 4, !tbaa !5
  %136 = insertelement <2 x float> poison, float %135, i64 0
  %137 = insertelement <2 x float> %136, float %134, i64 1
  %138 = load float, ptr %20, align 4, !tbaa.struct !14
  %139 = load float, ptr %67, align 4, !tbaa.struct !15
  %140 = fneg float %138
  %141 = fneg float %139
  %142 = insertelement <2 x float> poison, float %30, i64 0
  %143 = insertelement <2 x float> %142, float %28, i64 1
  %144 = insertelement <2 x float> poison, float %139, i64 0
  %145 = insertelement <2 x float> %144, float %138, i64 1
  %146 = fmul <2 x float> %143, %145
  %147 = load float, ptr %38, align 4, !tbaa !5
  %148 = load float, ptr %39, align 4, !tbaa !5
  %149 = fneg float %148
  %150 = load float, ptr %9, align 4, !tbaa !5
  %151 = fneg float %150
  %152 = fneg float %147
  %153 = load <4 x float>, ptr %42, align 4
  %154 = shufflevector <4 x float> %153, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %155 = load <4 x float>, ptr %43, align 4
  %156 = shufflevector <4 x float> %155, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %157 = load <4 x float>, ptr %44, align 4
  %158 = shufflevector <4 x float> %157, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %159 = load float, ptr %51, align 4, !tbaa !5
  %160 = load float, ptr %52, align 4, !tbaa !5
  %161 = insertelement <2 x float> poison, float %25, i64 0
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer
  %163 = insertelement <2 x float> poison, float %149, i64 0
  %164 = insertelement <2 x float> %163, float %160, i64 1
  %165 = fmul <2 x float> %162, %164
  %166 = insertelement <2 x float> poison, float %147, i64 0
  %167 = insertelement <2 x float> %166, float %159, i64 1
  %168 = insertelement <2 x float> %142, float %50, i64 1
  %169 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %167, <2 x float> %168, <2 x float> %165)
  %170 = load float, ptr %14, align 4, !tbaa !5
  %171 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> zeroinitializer
  %172 = insertelement <2 x float> poison, float %151, i64 0
  %173 = insertelement <2 x float> %172, float %170, i64 1
  %174 = fmul <2 x float> %171, %173
  %175 = insertelement <2 x float> poison, float %148, i64 0
  %176 = insertelement <2 x float> %175, float %160, i64 1
  %177 = insertelement <2 x float> poison, float %28, i64 0
  %178 = insertelement <2 x float> %177, float %48, i64 1
  %179 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %176, <2 x float> %178, <2 x float> %174)
  %180 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> zeroinitializer
  %181 = insertelement <2 x float> %167, float %152, i64 0
  %182 = fmul <2 x float> %180, %181
  %183 = insertelement <2 x float> poison, float %150, i64 0
  %184 = insertelement <2 x float> %183, float %170, i64 1
  %185 = insertelement <2 x float> %162, float %49, i64 1
  %186 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %184, <2 x float> %185, <2 x float> %182)
  %187 = load float, ptr %55, align 4, !tbaa !5
  %188 = load float, ptr %56, align 4, !tbaa !5
  %189 = insertelement <2 x float> %156, float %188, i64 1
  %190 = fmul <2 x float> %179, %189
  %191 = insertelement <2 x float> %154, float %187, i64 1
  %192 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %191, <2 x float> %169, <2 x float> %190)
  %193 = load float, ptr %57, align 4, !tbaa !5
  %194 = insertelement <2 x float> %158, float %193, i64 1
  %195 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %194, <2 x float> %186, <2 x float> %192)
  %196 = load float, ptr %61, align 4, !tbaa !5
  %197 = load float, ptr %63, align 4, !tbaa !5
  %198 = insertelement <2 x float> poison, float %196, i64 0
  %199 = insertelement <2 x float> %198, float %197, i64 1
  %200 = fmul <2 x float> %195, %199
  %201 = fmul <2 x float> %195, %200
  %202 = extractelement <2 x float> %201, i64 0
  %203 = fmul <2 x float> %195, %200
  %204 = extractelement <2 x float> %203, i64 1
  %205 = load float, ptr %68, align 4, !tbaa !5
  %206 = load float, ptr %69, align 4, !tbaa !5
  %207 = fneg float %206
  %208 = load float, ptr %17, align 4, !tbaa !5
  %209 = fneg float %208
  %210 = fneg float %205
  %211 = load float, ptr %71, align 4, !tbaa !5
  %212 = load float, ptr %72, align 4, !tbaa !5
  %213 = insertelement <2 x float> poison, float %66, i64 0
  %214 = shufflevector <2 x float> %213, <2 x float> poison, <2 x i32> zeroinitializer
  %215 = insertelement <2 x float> poison, float %207, i64 0
  %216 = insertelement <2 x float> %215, float %212, i64 1
  %217 = fmul <2 x float> %214, %216
  %218 = load float, ptr %18, align 4, !tbaa !5
  %219 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer
  %220 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> zeroinitializer
  %221 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer
  %222 = load float, ptr %73, align 8, !tbaa !5
  %223 = load float, ptr %79, align 8, !tbaa !5
  %224 = load float, ptr %75, align 4, !tbaa !5
  %225 = load float, ptr %81, align 4, !tbaa !5
  %226 = insertelement <2 x float> poison, float %224, i64 0
  %227 = insertelement <2 x float> %226, float %225, i64 1
  %228 = fneg <2 x float> %227
  %229 = insertelement <2 x float> poison, float %222, i64 0
  %230 = insertelement <2 x float> %229, float %223, i64 1
  %231 = fmul <2 x float> %219, %228
  %232 = insertelement <2 x float> poison, float %205, i64 0
  %233 = shufflevector <2 x float> %232, <2 x float> poison, <2 x i32> zeroinitializer
  %234 = insertelement <2 x float> poison, float %206, i64 0
  %235 = shufflevector <2 x float> %234, <2 x float> poison, <2 x i32> zeroinitializer
  %236 = fmul <2 x float> %221, %90
  %237 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %89, <2 x float> %220, <2 x float> %231)
  %238 = fadd <2 x float> %237, %93
  %239 = shufflevector <2 x float> %238, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %240 = fsub <2 x float> %238, %239
  %241 = extractelement <2 x float> %240, i64 0
  %242 = insertelement <2 x float> poison, float %208, i64 0
  %243 = shufflevector <2 x float> %242, <2 x float> poison, <2 x i32> zeroinitializer
  %244 = fmul <2 x float> %243, %228
  %245 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %89, <2 x float> %233, <2 x float> %244)
  %246 = load float, ptr %77, align 4, !tbaa !5
  %247 = load float, ptr %83, align 4, !tbaa !5
  %248 = load float, ptr %76, align 8, !tbaa !5
  %249 = load float, ptr %82, align 8, !tbaa !5
  %250 = insertelement <2 x float> poison, float %248, i64 0
  %251 = insertelement <2 x float> %250, float %249, i64 1
  %252 = fneg <2 x float> %251
  %253 = insertelement <2 x float> poison, float %246, i64 0
  %254 = insertelement <2 x float> %253, float %247, i64 1
  %255 = fmul <2 x float> %220, %252
  %256 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %227, <2 x float> %221, <2 x float> %255)
  %257 = fadd <2 x float> %256, %230
  %258 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %259 = fsub <2 x float> %257, %258
  %260 = extractelement <2 x float> %259, i64 0
  %261 = fmul <2 x float> %233, %252
  %262 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %227, <2 x float> %235, <2 x float> %261)
  %263 = fadd <2 x float> %262, %230
  %264 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %251, <2 x float> %219, <2 x float> %236)
  %265 = fadd <2 x float> %254, %264
  %266 = shufflevector <2 x float> %265, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %267 = fsub <2 x float> %265, %266
  %268 = extractelement <2 x float> %267, i64 0
  %269 = fmul float %25, %268
  %270 = tail call float @llvm.fmuladd.f32(float %28, float %260, float %269)
  %271 = tail call float @llvm.fmuladd.f32(float %30, float %241, float %270)
  %272 = fmul <2 x float> %235, %90
  %273 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %251, <2 x float> %243, <2 x float> %272)
  %274 = fadd <2 x float> %254, %273
  %275 = fadd <2 x float> %245, %93
  %276 = shufflevector <2 x float> %263, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %277 = fsub <2 x float> %263, %276
  %278 = extractelement <2 x float> %277, i64 0
  %279 = shufflevector <2 x float> %274, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %280 = fsub <2 x float> %274, %279
  %281 = extractelement <2 x float> %280, i64 0
  %282 = shufflevector <2 x float> %275, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %283 = fsub <2 x float> %275, %282
  %284 = extractelement <2 x float> %283, i64 0
  %285 = fmul float %94, %281
  %286 = fneg float %271
  %287 = fmul float %101, %286
  %288 = tail call float @llvm.fmuladd.f32(float %99, float %97, float %287)
  %289 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> zeroinitializer
  %290 = fmul <2 x float> %289, %113
  %291 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %292 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %114, <2 x float> %291, <2 x float> %290)
  %293 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> zeroinitializer
  %294 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %117, <2 x float> %293, <2 x float> %292)
  %295 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %296 = fmul <2 x float> %295, %125
  %297 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %298 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %126, <2 x float> %297, <2 x float> %296)
  %299 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %300 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %129, <2 x float> %299, <2 x float> %298)
  %301 = fmul <2 x float> %294, %133
  %302 = fmul <2 x float> %300, %137
  %303 = extractelement <2 x float> %301, i64 1
  %304 = extractelement <2 x float> %294, i64 1
  %305 = tail call float @llvm.fmuladd.f32(float %303, float %304, float %202)
  %306 = extractelement <2 x float> %301, i64 0
  %307 = extractelement <2 x float> %294, i64 0
  %308 = tail call float @llvm.fmuladd.f32(float %306, float %307, float %305)
  %309 = fadd float %308, %6
  %310 = fadd float %309, %11
  %311 = extractelement <2 x float> %302, i64 1
  %312 = extractelement <2 x float> %300, i64 1
  %313 = tail call float @llvm.fmuladd.f32(float %311, float %312, float %204)
  %314 = extractelement <2 x float> %302, i64 0
  %315 = extractelement <2 x float> %300, i64 0
  %316 = tail call float @llvm.fmuladd.f32(float %314, float %315, float %313)
  %317 = fadd float %310, %316
  %318 = shufflevector <2 x float> %144, <2 x float> poison, <2 x i32> zeroinitializer
  %319 = insertelement <2 x float> poison, float %209, i64 0
  %320 = insertelement <2 x float> %319, float %218, i64 1
  %321 = fmul <2 x float> %318, %320
  %322 = insertelement <2 x float> %234, float %212, i64 1
  %323 = insertelement <2 x float> poison, float %138, i64 0
  %324 = insertelement <2 x float> %323, float %140, i64 1
  %325 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %322, <2 x float> %324, <2 x float> %321)
  %326 = shufflevector <2 x float> %325, <2 x float> poison, <2 x i32> zeroinitializer
  %327 = fmul <2 x float> %113, %326
  %328 = insertelement <2 x float> %232, float %211, i64 1
  %329 = insertelement <2 x float> %318, float %141, i64 1
  %330 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %328, <2 x float> %329, <2 x float> %217)
  %331 = shufflevector <2 x float> %330, <2 x float> poison, <2 x i32> zeroinitializer
  %332 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %114, <2 x float> %331, <2 x float> %327)
  %333 = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> zeroinitializer
  %334 = insertelement <2 x float> %328, float %210, i64 0
  %335 = fmul <2 x float> %333, %334
  %336 = insertelement <2 x float> %242, float %218, i64 1
  %337 = insertelement <2 x float> %214, float %70, i64 1
  %338 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %336, <2 x float> %337, <2 x float> %335)
  %339 = shufflevector <2 x float> %338, <2 x float> poison, <2 x i32> zeroinitializer
  %340 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %117, <2 x float> %339, <2 x float> %332)
  %341 = fmul <2 x float> %189, %325
  %342 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %191, <2 x float> %330, <2 x float> %341)
  %343 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %194, <2 x float> %338, <2 x float> %342)
  %344 = shufflevector <2 x float> %325, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %345 = fmul <2 x float> %125, %344
  %346 = shufflevector <2 x float> %330, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %347 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %126, <2 x float> %346, <2 x float> %345)
  %348 = shufflevector <2 x float> %338, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %349 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %129, <2 x float> %348, <2 x float> %347)
  %350 = extractelement <2 x float> %340, i64 1
  %351 = fmul float %130, %350
  %352 = extractelement <2 x float> %343, i64 0
  %353 = fmul float %196, %352
  %354 = extractelement <2 x float> %340, i64 0
  %355 = fmul float %131, %354
  %356 = extractelement <2 x float> %349, i64 1
  %357 = fmul float %134, %356
  %358 = extractelement <2 x float> %343, i64 1
  %359 = fmul float %197, %358
  %360 = extractelement <2 x float> %349, i64 0
  %361 = fmul float %135, %360
  %362 = fmul float %352, %353
  %363 = tail call float @llvm.fmuladd.f32(float %351, float %350, float %362)
  %364 = tail call float @llvm.fmuladd.f32(float %355, float %354, float %363)
  %365 = fadd float %364, %6
  %366 = fadd float %365, %11
  %367 = fmul float %358, %359
  %368 = tail call float @llvm.fmuladd.f32(float %357, float %356, float %367)
  %369 = tail call float @llvm.fmuladd.f32(float %361, float %360, float %368)
  %370 = fadd float %366, %369
  %371 = tail call float @llvm.fmuladd.f32(float %138, float %278, float %285)
  %372 = tail call float @llvm.fmuladd.f32(float %95, float %284, float %371)
  %373 = fneg float %372
  %374 = fmul float %101, %373
  %375 = tail call float @llvm.fmuladd.f32(float %102, float %97, float %374)
  %376 = fmul <2 x float> %301, %340
  %377 = fmul <2 x float> %200, %343
  %378 = fmul <2 x float> %302, %349
  %379 = insertelement <2 x float> poison, float %6, i64 0
  %380 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> zeroinitializer
  %381 = fmul <2 x float> %146, %380
  %382 = insertelement <2 x float> poison, float %11, i64 0
  %383 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> zeroinitializer
  %384 = fmul <2 x float> %146, %383
  %385 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %386 = fadd <2 x float> %377, %385
  %387 = extractelement <2 x float> %386, i64 0
  %388 = fadd <2 x float> %376, %378
  %389 = fadd float %104, %387
  %390 = fadd <2 x float> %381, %388
  %391 = fadd float %105, %389
  %392 = fadd <2 x float> %384, %390
  %393 = extractelement <2 x float> %392, i64 1
  %394 = fadd float %393, %391
  %395 = extractelement <2 x float> %392, i64 0
  %396 = fadd float %395, %394
  %397 = fneg float %396
  %398 = fmul float %396, %397
  %399 = tail call float @llvm.fmuladd.f32(float %317, float %370, float %398)
  %400 = fdiv float 1.000000e+00, %399
  %401 = fmul float %317, %288
  %402 = fmul float %375, %397
  %403 = fmul float %400, %402
  %404 = tail call float @llvm.fmuladd.f32(float %401, float %400, float %403)
  store float %404, ptr %21, align 4, !tbaa !5
  %405 = fmul float %370, %375
  %406 = fmul float %288, %397
  %407 = fmul float %400, %406
  %408 = tail call float @llvm.fmuladd.f32(float %405, float %400, float %407)
  store float %408, ptr %22, align 4, !tbaa !5
  br label %409

409:                                              ; preds = %23, %37
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN24btSolve2LinearConstraint30resolveBilateralPairConstraintEP11btRigidBodyS1_RK11btMatrix3x3S4_RK9btVector3fS7_S7_S7_S7_fS7_S7_S7_fS7_S7_S7_fS7_RfS8_(ptr nocapture noundef nonnull readonly align 4 dereferenceable(8) %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %3, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %4, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %5, float noundef %6, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %7, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %8, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %9, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %10, float noundef %11, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %12, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %13, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %14, float noundef %15, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %16, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %17, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %18, float noundef %19, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %20, ptr nocapture noundef nonnull align 4 dereferenceable(4) %21, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %22) local_unnamed_addr #0 align 2 {
  store float 0.000000e+00, ptr %21, align 4, !tbaa !5
  store float 0.000000e+00, ptr %22, align 4, !tbaa !5
  %24 = getelementptr inbounds [4 x float], ptr %16, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !5
  %26 = fmul float %25, %25
  %27 = getelementptr inbounds [4 x float], ptr %16, i64 0, i64 2
  %28 = load float, ptr %16, align 4, !tbaa !5
  %29 = tail call float @llvm.fmuladd.f32(float %28, float %28, float %26)
  %30 = load float, ptr %27, align 4, !tbaa !5
  %31 = tail call float @llvm.fmuladd.f32(float %30, float %30, float %29)
  %32 = tail call float @llvm.sqrt.f32(float %31)
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fadd float %33, -1.000000e+00
  %35 = tail call float @llvm.fabs.f32(float %34)
  %36 = fcmp ult float %35, 0x3E80000000000000
  br i1 %36, label %37, label %419

37:                                               ; preds = %23
  %38 = getelementptr inbounds [4 x float], ptr %9, i64 0, i64 1
  %39 = getelementptr inbounds [4 x float], ptr %9, i64 0, i64 2
  %40 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %41 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  %42 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1
  %43 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 1
  %44 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 2
  %45 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2
  %46 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 1
  %47 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 2
  %48 = fneg float %28
  %49 = fneg float %25
  %50 = fneg float %30
  %51 = getelementptr inbounds [4 x float], ptr %14, i64 0, i64 1
  %52 = getelementptr inbounds [4 x float], ptr %14, i64 0, i64 2
  %53 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 1
  %54 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 2
  %55 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1
  %56 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1, i32 0, i64 1
  %57 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1, i32 0, i64 2
  %58 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2
  %59 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2, i32 0, i64 1
  %60 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2, i32 0, i64 2
  %61 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 1
  %62 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %63 = getelementptr inbounds [4 x float], ptr %10, i64 0, i64 1
  %64 = getelementptr inbounds [4 x float], ptr %10, i64 0, i64 2
  %65 = getelementptr inbounds i8, ptr %20, i64 4
  %66 = load float, ptr %65, align 4, !tbaa.struct !9
  %67 = getelementptr inbounds i8, ptr %20, i64 8
  %68 = getelementptr inbounds [4 x float], ptr %17, i64 0, i64 1
  %69 = getelementptr inbounds [4 x float], ptr %17, i64 0, i64 2
  %70 = fneg float %66
  %71 = getelementptr inbounds [4 x float], ptr %18, i64 0, i64 1
  %72 = getelementptr inbounds [4 x float], ptr %18, i64 0, i64 2
  %73 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 2
  %74 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 3
  %75 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 3, i32 0, i64 1
  %76 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 3, i32 0, i64 2
  %77 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 2, i32 0, i64 1
  %78 = getelementptr inbounds %class.btRigidBody, ptr %1, i64 0, i32 2, i32 0, i64 2
  %79 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 2
  %80 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 3
  %81 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 3, i32 0, i64 1
  %82 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 3, i32 0, i64 2
  %83 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 2, i32 0, i64 1
  %84 = getelementptr inbounds %class.btRigidBody, ptr %2, i64 0, i32 2, i32 0, i64 2
  %85 = load float, ptr %78, align 8, !tbaa !5
  %86 = load float, ptr %74, align 8, !tbaa !5
  %87 = load float, ptr %80, align 8, !tbaa !5
  %88 = insertelement <2 x float> poison, float %86, i64 0
  %89 = insertelement <2 x float> %88, float %87, i64 1
  %90 = fneg <2 x float> %89
  %91 = load float, ptr %84, align 8, !tbaa !5
  %92 = insertelement <2 x float> poison, float %85, i64 0
  %93 = insertelement <2 x float> %92, float %91, i64 1
  %94 = load float, ptr %65, align 4, !tbaa !5
  %95 = load float, ptr %67, align 4, !tbaa !5
  %96 = load float, ptr %0, align 4, !tbaa !11
  %97 = getelementptr inbounds %class.btSolve2LinearConstraint, ptr %0, i64 0, i32 1
  %98 = load float, ptr %97, align 4, !tbaa !13
  %99 = fmul float %25, %66
  %100 = fmul float %99, %6
  %101 = fmul float %99, %11
  %102 = load float, ptr %3, align 4, !tbaa !5
  %103 = load float, ptr %40, align 4, !tbaa !5
  %104 = load float, ptr %41, align 4, !tbaa !5
  %105 = load <4 x float>, ptr %45, align 4
  %106 = shufflevector <4 x float> %105, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %107 = load float, ptr %46, align 4, !tbaa !5
  %108 = insertelement <2 x float> poison, float %107, i64 0
  %109 = insertelement <2 x float> %108, float %103, i64 1
  %110 = insertelement <2 x float> %106, float %102, i64 1
  %111 = load float, ptr %47, align 4, !tbaa !5
  %112 = insertelement <2 x float> poison, float %111, i64 0
  %113 = insertelement <2 x float> %112, float %104, i64 1
  %114 = load float, ptr %4, align 4, !tbaa !5
  %115 = load float, ptr %53, align 4, !tbaa !5
  %116 = load float, ptr %54, align 4, !tbaa !5
  %117 = load <4 x float>, ptr %58, align 4
  %118 = shufflevector <4 x float> %117, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %119 = load float, ptr %59, align 4, !tbaa !5
  %120 = insertelement <2 x float> poison, float %119, i64 0
  %121 = insertelement <2 x float> %120, float %115, i64 1
  %122 = insertelement <2 x float> %118, float %114, i64 1
  %123 = load float, ptr %60, align 4, !tbaa !5
  %124 = insertelement <2 x float> poison, float %123, i64 0
  %125 = insertelement <2 x float> %124, float %116, i64 1
  %126 = load float, ptr %5, align 4, !tbaa !5
  %127 = load float, ptr %62, align 4, !tbaa !5
  %128 = insertelement <2 x float> poison, float %127, i64 0
  %129 = insertelement <2 x float> %128, float %126, i64 1
  %130 = load float, ptr %10, align 4, !tbaa !5
  %131 = load float, ptr %64, align 4, !tbaa !5
  %132 = insertelement <2 x float> poison, float %131, i64 0
  %133 = insertelement <2 x float> %132, float %130, i64 1
  %134 = load float, ptr %20, align 4, !tbaa.struct !14
  %135 = load float, ptr %67, align 4, !tbaa.struct !15
  %136 = fneg float %134
  %137 = fneg float %135
  %138 = insertelement <2 x float> poison, float %30, i64 0
  %139 = insertelement <2 x float> %138, float %28, i64 1
  %140 = insertelement <2 x float> poison, float %135, i64 0
  %141 = insertelement <2 x float> %140, float %134, i64 1
  %142 = fmul <2 x float> %139, %141
  %143 = load float, ptr %38, align 4, !tbaa !5
  %144 = load float, ptr %39, align 4, !tbaa !5
  %145 = fneg float %144
  %146 = load float, ptr %9, align 4, !tbaa !5
  %147 = fneg float %146
  %148 = fneg float %143
  %149 = load <4 x float>, ptr %42, align 4
  %150 = shufflevector <4 x float> %149, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %151 = load <4 x float>, ptr %43, align 4
  %152 = shufflevector <4 x float> %151, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %153 = load <4 x float>, ptr %44, align 4
  %154 = shufflevector <4 x float> %153, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %155 = load float, ptr %51, align 4, !tbaa !5
  %156 = load float, ptr %52, align 4, !tbaa !5
  %157 = insertelement <2 x float> poison, float %25, i64 0
  %158 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> zeroinitializer
  %159 = insertelement <2 x float> poison, float %145, i64 0
  %160 = insertelement <2 x float> %159, float %156, i64 1
  %161 = fmul <2 x float> %158, %160
  %162 = insertelement <2 x float> poison, float %143, i64 0
  %163 = insertelement <2 x float> %162, float %155, i64 1
  %164 = insertelement <2 x float> %138, float %50, i64 1
  %165 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %163, <2 x float> %164, <2 x float> %161)
  %166 = load float, ptr %14, align 4, !tbaa !5
  %167 = shufflevector <2 x float> %138, <2 x float> poison, <2 x i32> zeroinitializer
  %168 = insertelement <2 x float> poison, float %147, i64 0
  %169 = insertelement <2 x float> %168, float %166, i64 1
  %170 = fmul <2 x float> %167, %169
  %171 = insertelement <2 x float> poison, float %144, i64 0
  %172 = insertelement <2 x float> %171, float %156, i64 1
  %173 = insertelement <2 x float> poison, float %28, i64 0
  %174 = insertelement <2 x float> %173, float %48, i64 1
  %175 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %172, <2 x float> %174, <2 x float> %170)
  %176 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer
  %177 = insertelement <2 x float> %163, float %148, i64 0
  %178 = fmul <2 x float> %176, %177
  %179 = insertelement <2 x float> poison, float %146, i64 0
  %180 = insertelement <2 x float> %179, float %166, i64 1
  %181 = insertelement <2 x float> %158, float %49, i64 1
  %182 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %180, <2 x float> %181, <2 x float> %178)
  %183 = load float, ptr %55, align 4, !tbaa !5
  %184 = load float, ptr %56, align 4, !tbaa !5
  %185 = insertelement <2 x float> %152, float %184, i64 1
  %186 = fmul <2 x float> %175, %185
  %187 = insertelement <2 x float> %150, float %183, i64 1
  %188 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %187, <2 x float> %165, <2 x float> %186)
  %189 = load float, ptr %57, align 4, !tbaa !5
  %190 = insertelement <2 x float> %154, float %189, i64 1
  %191 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %190, <2 x float> %182, <2 x float> %188)
  %192 = load float, ptr %61, align 4, !tbaa !5
  %193 = load float, ptr %63, align 4, !tbaa !5
  %194 = insertelement <2 x float> poison, float %192, i64 0
  %195 = insertelement <2 x float> %194, float %193, i64 1
  %196 = fmul <2 x float> %191, %195
  %197 = fmul <2 x float> %191, %196
  %198 = extractelement <2 x float> %197, i64 0
  %199 = fmul <2 x float> %191, %196
  %200 = extractelement <2 x float> %199, i64 1
  %201 = load float, ptr %68, align 4, !tbaa !5
  %202 = load float, ptr %69, align 4, !tbaa !5
  %203 = fneg float %202
  %204 = load float, ptr %17, align 4, !tbaa !5
  %205 = fneg float %204
  %206 = fneg float %201
  %207 = load float, ptr %71, align 4, !tbaa !5
  %208 = load float, ptr %72, align 4, !tbaa !5
  %209 = insertelement <2 x float> poison, float %66, i64 0
  %210 = shufflevector <2 x float> %209, <2 x float> poison, <2 x i32> zeroinitializer
  %211 = insertelement <2 x float> poison, float %203, i64 0
  %212 = insertelement <2 x float> %211, float %208, i64 1
  %213 = fmul <2 x float> %210, %212
  %214 = load float, ptr %18, align 4, !tbaa !5
  %215 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> zeroinitializer
  %216 = shufflevector <2 x float> %162, <2 x float> poison, <2 x i32> zeroinitializer
  %217 = shufflevector <2 x float> %171, <2 x float> poison, <2 x i32> zeroinitializer
  %218 = load float, ptr %73, align 8, !tbaa !5
  %219 = load float, ptr %79, align 8, !tbaa !5
  %220 = load float, ptr %75, align 4, !tbaa !5
  %221 = load float, ptr %81, align 4, !tbaa !5
  %222 = insertelement <2 x float> poison, float %220, i64 0
  %223 = insertelement <2 x float> %222, float %221, i64 1
  %224 = fneg <2 x float> %223
  %225 = insertelement <2 x float> poison, float %218, i64 0
  %226 = insertelement <2 x float> %225, float %219, i64 1
  %227 = fmul <2 x float> %215, %224
  %228 = insertelement <2 x float> poison, float %201, i64 0
  %229 = shufflevector <2 x float> %228, <2 x float> poison, <2 x i32> zeroinitializer
  %230 = insertelement <2 x float> poison, float %202, i64 0
  %231 = shufflevector <2 x float> %230, <2 x float> poison, <2 x i32> zeroinitializer
  %232 = fmul <2 x float> %217, %90
  %233 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %89, <2 x float> %216, <2 x float> %227)
  %234 = fadd <2 x float> %233, %93
  %235 = shufflevector <2 x float> %234, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %236 = fsub <2 x float> %234, %235
  %237 = extractelement <2 x float> %236, i64 0
  %238 = insertelement <2 x float> poison, float %204, i64 0
  %239 = shufflevector <2 x float> %238, <2 x float> poison, <2 x i32> zeroinitializer
  %240 = fmul <2 x float> %239, %224
  %241 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %89, <2 x float> %229, <2 x float> %240)
  %242 = load float, ptr %77, align 4, !tbaa !5
  %243 = load float, ptr %83, align 4, !tbaa !5
  %244 = load float, ptr %76, align 8, !tbaa !5
  %245 = load float, ptr %82, align 8, !tbaa !5
  %246 = insertelement <2 x float> poison, float %244, i64 0
  %247 = insertelement <2 x float> %246, float %245, i64 1
  %248 = fneg <2 x float> %247
  %249 = insertelement <2 x float> poison, float %242, i64 0
  %250 = insertelement <2 x float> %249, float %243, i64 1
  %251 = fmul <2 x float> %216, %248
  %252 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %223, <2 x float> %217, <2 x float> %251)
  %253 = fadd <2 x float> %252, %226
  %254 = shufflevector <2 x float> %253, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %255 = fsub <2 x float> %253, %254
  %256 = extractelement <2 x float> %255, i64 0
  %257 = fmul <2 x float> %229, %248
  %258 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %223, <2 x float> %231, <2 x float> %257)
  %259 = fadd <2 x float> %258, %226
  %260 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %247, <2 x float> %215, <2 x float> %232)
  %261 = fadd <2 x float> %250, %260
  %262 = shufflevector <2 x float> %261, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %263 = fsub <2 x float> %261, %262
  %264 = extractelement <2 x float> %263, i64 0
  %265 = fmul float %25, %264
  %266 = tail call float @llvm.fmuladd.f32(float %28, float %256, float %265)
  %267 = tail call float @llvm.fmuladd.f32(float %30, float %237, float %266)
  %268 = fmul <2 x float> %231, %90
  %269 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %247, <2 x float> %239, <2 x float> %268)
  %270 = fadd <2 x float> %250, %269
  %271 = fadd <2 x float> %241, %93
  %272 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %273 = fsub <2 x float> %259, %272
  %274 = extractelement <2 x float> %273, i64 0
  %275 = shufflevector <2 x float> %270, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %276 = fsub <2 x float> %270, %275
  %277 = extractelement <2 x float> %276, i64 0
  %278 = shufflevector <2 x float> %271, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %279 = fsub <2 x float> %271, %278
  %280 = extractelement <2 x float> %279, i64 0
  %281 = fmul float %94, %277
  %282 = fneg float %267
  %283 = fmul float %98, %282
  %284 = tail call float @llvm.fmuladd.f32(float %15, float %96, float %283)
  %285 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer
  %286 = fmul <2 x float> %285, %109
  %287 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer
  %288 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %110, <2 x float> %287, <2 x float> %286)
  %289 = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> zeroinitializer
  %290 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %113, <2 x float> %289, <2 x float> %288)
  %291 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %292 = fmul <2 x float> %291, %121
  %293 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %294 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %122, <2 x float> %293, <2 x float> %292)
  %295 = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %296 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %125, <2 x float> %295, <2 x float> %294)
  %297 = fmul <2 x float> %290, %129
  %298 = fmul <2 x float> %296, %133
  %299 = extractelement <2 x float> %297, i64 1
  %300 = extractelement <2 x float> %290, i64 1
  %301 = tail call float @llvm.fmuladd.f32(float %299, float %300, float %198)
  %302 = extractelement <2 x float> %297, i64 0
  %303 = extractelement <2 x float> %290, i64 0
  %304 = tail call float @llvm.fmuladd.f32(float %302, float %303, float %301)
  %305 = fadd float %304, %6
  %306 = fadd float %305, %11
  %307 = extractelement <2 x float> %298, i64 1
  %308 = extractelement <2 x float> %296, i64 1
  %309 = tail call float @llvm.fmuladd.f32(float %307, float %308, float %200)
  %310 = extractelement <2 x float> %298, i64 0
  %311 = extractelement <2 x float> %296, i64 0
  %312 = tail call float @llvm.fmuladd.f32(float %310, float %311, float %309)
  %313 = fadd float %306, %312
  %314 = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> zeroinitializer
  %315 = insertelement <2 x float> poison, float %205, i64 0
  %316 = insertelement <2 x float> %315, float %214, i64 1
  %317 = fmul <2 x float> %314, %316
  %318 = insertelement <2 x float> %230, float %208, i64 1
  %319 = insertelement <2 x float> poison, float %134, i64 0
  %320 = insertelement <2 x float> %319, float %136, i64 1
  %321 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %318, <2 x float> %320, <2 x float> %317)
  %322 = shufflevector <2 x float> %321, <2 x float> poison, <2 x i32> zeroinitializer
  %323 = fmul <2 x float> %109, %322
  %324 = insertelement <2 x float> %228, float %207, i64 1
  %325 = insertelement <2 x float> %314, float %137, i64 1
  %326 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %324, <2 x float> %325, <2 x float> %213)
  %327 = shufflevector <2 x float> %326, <2 x float> poison, <2 x i32> zeroinitializer
  %328 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %110, <2 x float> %327, <2 x float> %323)
  %329 = shufflevector <2 x float> %319, <2 x float> poison, <2 x i32> zeroinitializer
  %330 = insertelement <2 x float> %324, float %206, i64 0
  %331 = fmul <2 x float> %329, %330
  %332 = insertelement <2 x float> %238, float %214, i64 1
  %333 = insertelement <2 x float> %210, float %70, i64 1
  %334 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %332, <2 x float> %333, <2 x float> %331)
  %335 = shufflevector <2 x float> %334, <2 x float> poison, <2 x i32> zeroinitializer
  %336 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %113, <2 x float> %335, <2 x float> %328)
  %337 = fmul <2 x float> %185, %321
  %338 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %187, <2 x float> %326, <2 x float> %337)
  %339 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %190, <2 x float> %334, <2 x float> %338)
  %340 = shufflevector <2 x float> %321, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %341 = fmul <2 x float> %121, %340
  %342 = shufflevector <2 x float> %326, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %343 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %122, <2 x float> %342, <2 x float> %341)
  %344 = shufflevector <2 x float> %334, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %345 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %125, <2 x float> %344, <2 x float> %343)
  %346 = extractelement <2 x float> %336, i64 1
  %347 = fmul float %126, %346
  %348 = extractelement <2 x float> %339, i64 0
  %349 = fmul float %192, %348
  %350 = extractelement <2 x float> %336, i64 0
  %351 = fmul float %127, %350
  %352 = extractelement <2 x float> %345, i64 1
  %353 = fmul float %130, %352
  %354 = extractelement <2 x float> %339, i64 1
  %355 = fmul float %193, %354
  %356 = extractelement <2 x float> %345, i64 0
  %357 = fmul float %131, %356
  %358 = fmul float %348, %349
  %359 = tail call float @llvm.fmuladd.f32(float %347, float %346, float %358)
  %360 = tail call float @llvm.fmuladd.f32(float %351, float %350, float %359)
  %361 = fadd float %360, %6
  %362 = fadd float %361, %11
  %363 = fmul float %354, %355
  %364 = tail call float @llvm.fmuladd.f32(float %353, float %352, float %363)
  %365 = tail call float @llvm.fmuladd.f32(float %357, float %356, float %364)
  %366 = fadd float %362, %365
  %367 = tail call float @llvm.fmuladd.f32(float %134, float %274, float %281)
  %368 = tail call float @llvm.fmuladd.f32(float %95, float %280, float %367)
  %369 = fneg float %368
  %370 = fmul float %98, %369
  %371 = tail call float @llvm.fmuladd.f32(float %19, float %96, float %370)
  %372 = fmul <2 x float> %297, %336
  %373 = fmul <2 x float> %196, %339
  %374 = fmul <2 x float> %298, %345
  %375 = insertelement <2 x float> poison, float %6, i64 0
  %376 = shufflevector <2 x float> %375, <2 x float> poison, <2 x i32> zeroinitializer
  %377 = fmul <2 x float> %142, %376
  %378 = insertelement <2 x float> poison, float %11, i64 0
  %379 = shufflevector <2 x float> %378, <2 x float> poison, <2 x i32> zeroinitializer
  %380 = fmul <2 x float> %142, %379
  %381 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %382 = fadd <2 x float> %373, %381
  %383 = extractelement <2 x float> %382, i64 0
  %384 = fadd <2 x float> %372, %374
  %385 = fadd float %100, %383
  %386 = fadd <2 x float> %377, %384
  %387 = fadd float %101, %385
  %388 = fadd <2 x float> %380, %386
  %389 = extractelement <2 x float> %388, i64 1
  %390 = fadd float %389, %387
  %391 = extractelement <2 x float> %388, i64 0
  %392 = fadd float %391, %390
  %393 = fneg float %392
  %394 = fmul float %392, %393
  %395 = tail call float @llvm.fmuladd.f32(float %313, float %366, float %394)
  %396 = fdiv float 1.000000e+00, %395
  %397 = fmul float %313, %284
  %398 = fmul float %371, %393
  %399 = fmul float %396, %398
  %400 = tail call float @llvm.fmuladd.f32(float %397, float %396, float %399)
  store float %400, ptr %21, align 4, !tbaa !5
  %401 = fmul float %366, %371
  %402 = fmul float %284, %393
  %403 = fmul float %396, %402
  %404 = tail call float @llvm.fmuladd.f32(float %401, float %396, float %403)
  store float %404, ptr %22, align 4, !tbaa !5
  %405 = load float, ptr %21, align 4, !tbaa !5
  %406 = fcmp ogt float %405, 0.000000e+00
  br i1 %406, label %407, label %412

407:                                              ; preds = %37
  %408 = fcmp ogt float %404, 0.000000e+00
  br i1 %408, label %419, label %409

409:                                              ; preds = %407
  store float 0.000000e+00, ptr %22, align 4, !tbaa !5
  %410 = fdiv float %284, %313
  store float %410, ptr %21, align 4, !tbaa !5
  %411 = fcmp ogt float %410, 0.000000e+00
  br i1 %411, label %419, label %418

412:                                              ; preds = %37
  store float 0.000000e+00, ptr %21, align 4, !tbaa !5
  %413 = fdiv float %371, %366
  store float %413, ptr %22, align 4, !tbaa !5
  %414 = fcmp ugt float %413, 0.000000e+00
  br i1 %414, label %419, label %415

415:                                              ; preds = %412
  store float 0.000000e+00, ptr %22, align 4, !tbaa !5
  %416 = fdiv float %284, %313
  store float %416, ptr %21, align 4, !tbaa !5
  %417 = fcmp ogt float %416, 0.000000e+00
  br i1 %417, label %419, label %418

418:                                              ; preds = %415, %409
  store float 0.000000e+00, ptr %21, align 4, !tbaa !5
  br label %419

419:                                              ; preds = %418, %409, %407, %412, %415, %23
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.sqrt.f32(float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fmuladd.v2f32(<2 x float>, <2 x float>, <2 x float>) #2

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{i64 0, i64 12, !10}
!10 = !{!7, !7, i64 0}
!11 = !{!12, !6, i64 0}
!12 = !{!"_ZTS24btSolve2LinearConstraint", !6, i64 0, !6, i64 4}
!13 = !{!12, !6, i64 4}
!14 = !{i64 0, i64 16, !10}
!15 = !{i64 0, i64 8, !10}
