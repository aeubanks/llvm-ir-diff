; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Benchmarks/Bullet/btSoftBody.cpp'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Benchmarks/Bullet/btSoftBody.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.btVector3 = type { [4 x float] }
%class.btTransform = type { %class.btMatrix3x3, %class.btVector3 }
%class.btMatrix3x3 = type { [3 x %class.btVector3] }
%"struct.btSoftBody::Node" = type <{ %"struct.btSoftBody::Feature", %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, float, float, ptr, i8, [7 x i8] }>
%"struct.btSoftBody::Feature" = type { %"struct.btSoftBody::Element", ptr }
%"struct.btSoftBody::Element" = type { ptr }
%"struct.btSoftBody::Material" = type { %"struct.btSoftBody::Element", float, float, float, i32 }
%"struct.btSoftBody::Note" = type { %"struct.btSoftBody::Element", ptr, %class.btVector3, i32, [4 x ptr], [4 x float] }
%"struct.btSoftBody::Link" = type <{ %"struct.btSoftBody::Feature", [2 x ptr], float, i8, [3 x i8], float, float, float, %class.btVector3, [4 x i8] }>
%"struct.btSoftBody::Face" = type { %"struct.btSoftBody::Feature", [3 x ptr], %class.btVector3, float, ptr }
%"struct.btSoftBody::Tetra" = type { %"struct.btSoftBody::Feature", [4 x ptr], float, ptr, [4 x %class.btVector3], float, float }
%struct.btDbvtAabbMm = type { %class.btVector3, %class.btVector3 }
%class.btSoftBody = type { %class.btCollisionObject, %class.btAlignedObjectArray, %"struct.btSoftBody::Config", %"struct.btSoftBody::SolverState", [4 x i8], %"struct.btSoftBody::Pose", ptr, ptr, %class.btAlignedObjectArray.20, %class.btAlignedObjectArray.24, %class.btAlignedObjectArray.28, %class.btAlignedObjectArray.32, %class.btAlignedObjectArray.36, %class.btAlignedObjectArray.40, %class.btAlignedObjectArray.48, %class.btAlignedObjectArray.52, %class.btAlignedObjectArray.56, %class.btAlignedObjectArray.64, float, [2 x %class.btVector3], i8, %struct.btDbvt, %struct.btDbvt, %struct.btDbvt, %class.btAlignedObjectArray.72, %class.btAlignedObjectArray.76, %class.btTransform, %class.btAlignedObjectArray.80 }
%class.btCollisionObject = type { ptr, %class.btTransform, %class.btTransform, %class.btVector3, %class.btVector3, %class.btVector3, i8, float, ptr, ptr, ptr, i32, i32, i32, i32, float, float, float, ptr, i32, float, float, float, i8, [7 x i8] }
%class.btAlignedObjectArray = type <{ %class.btAlignedAllocator, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator = type { i8 }
%"struct.btSoftBody::Config" = type { i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, %class.btAlignedObjectArray.0, %class.btAlignedObjectArray.4, %class.btAlignedObjectArray.4 }
%class.btAlignedObjectArray.0 = type <{ %class.btAlignedAllocator.1, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.1 = type { i8 }
%class.btAlignedObjectArray.4 = type <{ %class.btAlignedAllocator.5, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.5 = type { i8 }
%"struct.btSoftBody::SolverState" = type { float, float, float, float, float }
%"struct.btSoftBody::Pose" = type { i8, i8, float, %class.btAlignedObjectArray.8, %class.btAlignedObjectArray.12, %class.btVector3, %class.btMatrix3x3, %class.btMatrix3x3, %class.btMatrix3x3 }
%class.btAlignedObjectArray.8 = type <{ %class.btAlignedAllocator.9, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.9 = type { i8 }
%class.btAlignedObjectArray.12 = type <{ %class.btAlignedAllocator.13, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.13 = type { i8 }
%class.btAlignedObjectArray.20 = type <{ %class.btAlignedAllocator.21, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.21 = type { i8 }
%class.btAlignedObjectArray.24 = type <{ %class.btAlignedAllocator.25, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.25 = type { i8 }
%class.btAlignedObjectArray.28 = type <{ %class.btAlignedAllocator.29, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.29 = type { i8 }
%class.btAlignedObjectArray.32 = type <{ %class.btAlignedAllocator.33, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.33 = type { i8 }
%class.btAlignedObjectArray.36 = type <{ %class.btAlignedAllocator.37, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.37 = type { i8 }
%class.btAlignedObjectArray.40 = type <{ %class.btAlignedAllocator.41, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.41 = type { i8 }
%class.btAlignedObjectArray.48 = type <{ %class.btAlignedAllocator.49, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.49 = type { i8 }
%class.btAlignedObjectArray.52 = type <{ %class.btAlignedAllocator.53, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.53 = type { i8 }
%class.btAlignedObjectArray.56 = type <{ %class.btAlignedAllocator.57, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.57 = type { i8 }
%class.btAlignedObjectArray.64 = type <{ %class.btAlignedAllocator.65, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.65 = type { i8 }
%struct.btDbvt = type { ptr, ptr, i32, i32, i32, [4 x i8], %class.btAlignedObjectArray.68 }
%class.btAlignedObjectArray.68 = type <{ %class.btAlignedAllocator.69, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.69 = type { i8 }
%class.btAlignedObjectArray.72 = type <{ %class.btAlignedAllocator.73, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.73 = type { i8 }
%class.btAlignedObjectArray.76 = type <{ %class.btAlignedAllocator.77, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.77 = type { i8 }
%class.btAlignedObjectArray.80 = type <{ %class.btAlignedAllocator.81, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.81 = type { i8 }
%class.btCollisionShape = type { ptr, i32, ptr }
%class.btSoftBodyCollisionShape = type { %class.btConcaveShape.base, ptr }
%class.btConcaveShape.base = type <{ %class.btCollisionShape, float }>
%class.btConcaveShape = type <{ %class.btCollisionShape, float, [4 x i8] }>
%struct.btSoftBodyWorldInfo = type { float, float, float, %class.btVector3, ptr, ptr, %class.btVector3, %struct.btSparseSdf }
%struct.btSparseSdf = type { %class.btAlignedObjectArray.16, float, i32, i32, i32, i32, [4 x i8] }
%class.btAlignedObjectArray.16 = type <{ %class.btAlignedAllocator.17, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.17 = type { i8 }
%"struct.btSoftBody::Cluster" = type { %class.btAlignedObjectArray.59, %class.btAlignedObjectArray.12, %class.btAlignedObjectArray.8, %class.btTransform, float, float, %class.btMatrix3x3, %class.btMatrix3x3, %class.btVector3, [2 x %class.btVector3], [2 x %class.btVector3], i32, i32, %class.btVector3, %class.btVector3, ptr, float, float, float, float, float, float, i8, i8, i32 }
%class.btAlignedObjectArray.59 = type <{ %class.btAlignedAllocator.60, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.60 = type { i8 }
%class.btVector4 = type { %class.btVector3 }
%struct.btDbvtNode = type { %struct.btDbvtAabbMm, ptr, %union.anon }
%union.anon = type { [2 x ptr] }
%"struct.btSoftBody::Anchor" = type <{ ptr, %class.btVector3, ptr, %class.btMatrix3x3, %class.btVector3, float, [4 x i8] }>
%"struct.btSoftBody::Body" = type { ptr, ptr, ptr }
%"struct.btSoftBody::Joint" = type <{ ptr, [2 x %"struct.btSoftBody::Body"], [2 x %class.btVector3], float, float, float, %class.btVector3, %class.btVector3, %class.btMatrix3x3, i8, [3 x i8] }>
%"struct.btSoftBody::LJoint::Specs" = type { %"struct.btSoftBody::Joint::Specs", %class.btVector3 }
%"struct.btSoftBody::Joint::Specs" = type { float, float, float }
%"struct.btSoftBody::AJoint::Specs" = type { %"struct.btSoftBody::Joint::Specs", %class.btVector3, ptr }
%"struct.btSoftBody::AJoint" = type { %"struct.btSoftBody::Joint.base", [2 x %class.btVector3], ptr }
%"struct.btSoftBody::Joint.base" = type <{ ptr, [2 x %"struct.btSoftBody::Body"], [2 x %class.btVector3], float, float, float, %class.btVector3, %class.btVector3, %class.btMatrix3x3, i8 }>
%"struct.btSoftBody::Impulse" = type <{ %class.btVector3, %class.btVector3, i8, [3 x i8] }>
%class.btAlignedObjectArray.84 = type <{ %class.btAlignedAllocator.85, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.85 = type { i8 }
%struct.NodeLinks = type { %class.btAlignedObjectArray.80 }
%struct.btSymMatrix = type { %class.btAlignedObjectArray.80, i32, [4 x i8] }
%"struct.btSoftBody::sRayCast" = type { ptr, i32, i32, float }
%"struct.btSoftBody::RayFromToCaster" = type <{ %"struct.btDbvt::ICollide", %class.btVector3, %class.btVector3, %class.btVector3, float, [4 x i8], ptr, i32, [4 x i8] }>
%"struct.btDbvt::ICollide" = type { ptr }
%"struct.btSoftBody::RContact" = type <{ %"struct.btSoftBody::sCti", ptr, %class.btMatrix3x3, %class.btVector3, float, float, float, [4 x i8] }>
%"struct.btSoftBody::sCti" = type <{ ptr, %class.btVector3, float, [4 x i8] }>
%"struct.btSoftBody::SContact" = type { ptr, ptr, %class.btVector3, %class.btVector3, float, float, [2 x float] }
%class.btRigidBody = type <{ %class.btCollisionObject, %class.btMatrix3x3, %class.btVector3, %class.btVector3, float, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, float, float, i8, [3 x i8], float, float, float, float, float, float, ptr, %class.btAlignedObjectArray.43, i32, i32, i32, [4 x i8] }>
%class.btAlignedObjectArray.43 = type <{ %class.btAlignedAllocator.44, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.44 = type { i8 }
%class.btAlignedObjectArray.88 = type <{ %class.btAlignedAllocator.89, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator.89 = type { i8 }
%"struct.btSparseSdf<3>::Cell" = type { [4 x [4 x [4 x float]]], [3 x i32], i32, i32, ptr, ptr }
%"struct.btSoftBody::LJoint" = type { %"struct.btSoftBody::Joint.base", [2 x %class.btVector3] }
%"struct.btSoftBody::CJoint" = type { %"struct.btSoftBody::Joint.base", i32, i32, [2 x %class.btVector3], %class.btVector3, float, [4 x i8] }
%"struct.btSoftColliders::CollideSDF_RS" = type { %"struct.btDbvt::ICollide", ptr, ptr, ptr, float, float }
%"struct.btSoftColliders::CollideCL_RS" = type { %"struct.btSoftColliders::ClusterBase.base", ptr, ptr }
%"struct.btSoftColliders::ClusterBase.base" = type <{ %"struct.btDbvt::ICollide", float, float, float, float, float }>
%"struct.btSoftColliders::ClusterBase" = type <{ %"struct.btDbvt::ICollide", float, float, float, float, float, [4 x i8] }>
%"struct.btSoftColliders::CollideCL_SS" = type { %"struct.btSoftColliders::ClusterBase.base", [2 x ptr] }
%"struct.btSoftColliders::CollideVF_SS" = type <{ %"struct.btDbvt::ICollide", [2 x ptr], float, [4 x i8] }>
%"struct.btDbvt::sStkNN" = type { ptr, ptr }
%class.btSoftClusterCollisionShape = type { %class.btConvexInternalShape, ptr }
%class.btConvexInternalShape = type { %class.btConvexShape, %class.btVector3, %class.btVector3, float, float }
%class.btConvexShape = type { %class.btCollisionShape }
%"struct.btGjkEpaSolver2::sResults" = type { i32, [2 x %class.btVector3], %class.btVector3, float }

$_ZN20btAlignedObjectArrayIiED2Ev = comdat any

$__clang_call_terminate = comdat any

$_ZN20btAlignedObjectArrayIbED2Ev = comdat any

$_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev = comdat any

$_ZN10btSoftBody4PoseD2Ev = comdat any

$_ZN10btSoftBody6ConfigD2Ev = comdat any

$_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEE9push_backERKS1_ = comdat any

$_ZN20btAlignedObjectArrayIfED2Ev = comdat any

$_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_ = comdat any

$_ZN20btAlignedObjectArrayI9NodeLinksED2Ev = comdat any

$_ZN10btSoftBody7ClusterD2Ev = comdat any

$_ZN20btAlignedObjectArrayI9btVector3ED2Ev = comdat any

$_ZN11btSymMatrixIiEC2EiRKi = comdat any

$_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f = comdat any

$_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE = comdat any

$_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f = comdat any

$_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_ = comdat any

$_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3 = comdat any

$_ZN11btRigidBody12applyImpulseERK9btVector3S2_ = comdat any

$_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE = comdat any

$_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE = comdat any

$_ZN10btSoftBody5JointD0Ev = comdat any

$_ZN10btSoftBody5JointD2Ev = comdat any

$_ZN10btSoftBody6CJointD0Ev = comdat any

$_ZNK10btSoftBody6CJoint4TypeEv = comdat any

$_ZN17btCollisionObject24checkCollideWithOverrideEPS_ = comdat any

$_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape = comdat any

$_ZNK10btSoftBody7getAabbER9btVector3S1_ = comdat any

$_ZN10btSoftBody6LJointD0Ev = comdat any

$_ZNK10btSoftBody6LJoint4TypeEv = comdat any

$_ZN10btSoftBody6AJointD0Ev = comdat any

$_ZNK10btSoftBody6AJoint4TypeEv = comdat any

$_ZN10btSoftBody15RayFromToCasterD0Ev = comdat any

$_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_ = comdat any

$_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef = comdat any

$_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode = comdat any

$_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev = comdat any

$_ZN24btSoftBodyCollisionShapeD0Ev = comdat any

$_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_ = comdat any

$_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3 = comdat any

$_ZNK24btSoftBodyCollisionShape15getLocalScalingEv = comdat any

$_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3 = comdat any

$_ZNK24btSoftBodyCollisionShape7getNameEv = comdat any

$_ZN14btConcaveShape9setMarginEf = comdat any

$_ZNK14btConcaveShape9getMarginEv = comdat any

$_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_ = comdat any

$_ZN11btMatrix3x311getIdentityEv = comdat any

$_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev = comdat any

$_ZN6btDbvt8ICollideD2Ev = comdat any

$_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode = comdat any

$_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_ = comdat any

$_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3 = comdat any

$_ZN15btSoftColliders13CollideSDF_RSD0Ev = comdat any

$_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode = comdat any

$_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE = comdat any

$_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE9push_backERKS1_ = comdat any

$_ZN15btSoftColliders12CollideCL_RSD0Ev = comdat any

$_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode = comdat any

$_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE = comdat any

$_ZN27btSoftClusterCollisionShapeD0Ev = comdat any

$_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_ = comdat any

$_ZNK21btConvexInternalShape15getLocalScalingEv = comdat any

$_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3 = comdat any

$_ZNK27btSoftClusterCollisionShape7getNameEv = comdat any

$_ZN27btSoftClusterCollisionShape9setMarginEf = comdat any

$_ZNK27btSoftClusterCollisionShape9getMarginEv = comdat any

$_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3 = comdat any

$_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3 = comdat any

$_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i = comdat any

$_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv = comdat any

$_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3 = comdat any

$_ZNK27btSoftClusterCollisionShape12getShapeTypeEv = comdat any

$_ZN15btSoftColliders12CollideCL_SSD0Ev = comdat any

$_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_ = comdat any

$_ZN15btSoftColliders12CollideVF_SSD0Ev = comdat any

$_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_ = comdat any

$_ZN20btAlignedObjectArrayI9NodeLinksE7reserveEi = comdat any

$_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE = comdat any

$_ZTSN6btDbvt8ICollideE = comdat any

$_ZTIN6btDbvt8ICollideE = comdat any

$_ZTV24btSoftBodyCollisionShape = comdat any

$_ZTS24btSoftBodyCollisionShape = comdat any

$_ZTI24btSoftBodyCollisionShape = comdat any

$_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy = comdat any

$_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy = comdat any

$_ZZNK10btSoftBody4Body5xformEvE8identity = comdat any

$_ZGVZNK10btSoftBody4Body5xformEvE8identity = comdat any

$_ZZN11btTransform11getIdentityEvE17identityTransform = comdat any

$_ZGVZN11btTransform11getIdentityEvE17identityTransform = comdat any

$_ZZN11btMatrix3x311getIdentityEvE14identityMatrix = comdat any

$_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix = comdat any

$_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi = comdat any

$_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi = comdat any

$_ZTVN15btSoftColliders13CollideSDF_RSE = comdat any

$_ZTSN15btSoftColliders13CollideSDF_RSE = comdat any

$_ZTIN15btSoftColliders13CollideSDF_RSE = comdat any

$_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic = comdat any

$_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic = comdat any

$_ZTVN15btSoftColliders12CollideCL_RSE = comdat any

$_ZTSN15btSoftColliders12CollideCL_RSE = comdat any

$_ZTSN15btSoftColliders11ClusterBaseE = comdat any

$_ZTIN15btSoftColliders11ClusterBaseE = comdat any

$_ZTIN15btSoftColliders12CollideCL_RSE = comdat any

$_ZTV27btSoftClusterCollisionShape = comdat any

$_ZTS27btSoftClusterCollisionShape = comdat any

$_ZTI27btSoftClusterCollisionShape = comdat any

$_ZTVN15btSoftColliders12CollideCL_SSE = comdat any

$_ZTSN15btSoftColliders12CollideCL_SSE = comdat any

$_ZTIN15btSoftColliders12CollideCL_SSE = comdat any

$_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count = comdat any

$_ZTVN15btSoftColliders12CollideVF_SSE = comdat any

$_ZTSN15btSoftColliders12CollideVF_SSE = comdat any

$_ZTIN15btSoftColliders12CollideVF_SSE = comdat any

@_ZTV10btSoftBody = dso_local unnamed_addr constant { [7 x ptr] } { [7 x ptr] [ptr null, ptr @_ZTI10btSoftBody, ptr @_ZN17btCollisionObject24checkCollideWithOverrideEPS_, ptr @_ZN10btSoftBodyD2Ev, ptr @_ZN10btSoftBodyD0Ev, ptr @_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape, ptr @_ZNK10btSoftBody7getAabbER9btVector3S1_] }, align 8
@_ZTVN10btSoftBody15RayFromToCasterE = dso_local unnamed_addr constant { [9 x ptr] } { [9 x ptr] [ptr null, ptr @_ZTIN10btSoftBody15RayFromToCasterE, ptr @_ZN6btDbvt8ICollideD2Ev, ptr @_ZN10btSoftBody15RayFromToCasterD0Ev, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_, ptr @_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef, ptr @_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode] }, align 8
@.str = private unnamed_addr constant [15 x i8] c"UpdateClusters\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"ApplyClusters\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"SoftBody applyForces\00", align 1
@_ZTVN10btSoftBody5JointE = dso_local unnamed_addr constant { [8 x ptr] } { [8 x ptr] [ptr null, ptr @_ZTIN10btSoftBody5JointE, ptr @_ZN10btSoftBody5JointD2Ev, ptr @_ZN10btSoftBody5JointD0Ev, ptr @_ZN10btSoftBody5Joint7PrepareEfi, ptr @__cxa_pure_virtual, ptr @__cxa_pure_virtual, ptr @__cxa_pure_virtual] }, align 8
@_ZTVN10__cxxabiv117__class_type_infoE = external global ptr
@_ZTSN10btSoftBody5JointE = dso_local constant [21 x i8] c"N10btSoftBody5JointE\00", align 1
@_ZTIN10btSoftBody5JointE = dso_local constant { ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv117__class_type_infoE, i64 2), ptr @_ZTSN10btSoftBody5JointE }, align 8
@_ZTVN10btSoftBody6CJointE = dso_local unnamed_addr constant { [8 x ptr] } { [8 x ptr] [ptr null, ptr @_ZTIN10btSoftBody6CJointE, ptr @_ZN10btSoftBody5JointD2Ev, ptr @_ZN10btSoftBody6CJointD0Ev, ptr @_ZN10btSoftBody6CJoint7PrepareEfi, ptr @_ZN10btSoftBody6CJoint5SolveEff, ptr @_ZN10btSoftBody6CJoint9TerminateEf, ptr @_ZNK10btSoftBody6CJoint4TypeEv] }, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global ptr
@_ZTSN10btSoftBody6CJointE = dso_local constant [22 x i8] c"N10btSoftBody6CJointE\00", align 1
@_ZTIN10btSoftBody6CJointE = dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN10btSoftBody6CJointE, ptr @_ZTIN10btSoftBody5JointE }, align 8
@_ZTS10btSoftBody = dso_local constant [13 x i8] c"10btSoftBody\00", align 1
@_ZTI17btCollisionObject = external constant ptr
@_ZTI10btSoftBody = dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTS10btSoftBody, ptr @_ZTI17btCollisionObject }, align 8
@_ZTVN10btSoftBody6LJointE = dso_local unnamed_addr constant { [8 x ptr] } { [8 x ptr] [ptr null, ptr @_ZTIN10btSoftBody6LJointE, ptr @_ZN10btSoftBody5JointD2Ev, ptr @_ZN10btSoftBody6LJointD0Ev, ptr @_ZN10btSoftBody6LJoint7PrepareEfi, ptr @_ZN10btSoftBody6LJoint5SolveEff, ptr @_ZN10btSoftBody6LJoint9TerminateEf, ptr @_ZNK10btSoftBody6LJoint4TypeEv] }, align 8
@_ZTSN10btSoftBody6LJointE = dso_local constant [22 x i8] c"N10btSoftBody6LJointE\00", align 1
@_ZTIN10btSoftBody6LJointE = dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN10btSoftBody6LJointE, ptr @_ZTIN10btSoftBody5JointE }, align 8
@_ZTVN10btSoftBody6AJointE = dso_local unnamed_addr constant { [8 x ptr] } { [8 x ptr] [ptr null, ptr @_ZTIN10btSoftBody6AJointE, ptr @_ZN10btSoftBody5JointD2Ev, ptr @_ZN10btSoftBody6AJointD0Ev, ptr @_ZN10btSoftBody6AJoint7PrepareEfi, ptr @_ZN10btSoftBody6AJoint5SolveEff, ptr @_ZN10btSoftBody6AJoint9TerminateEf, ptr @_ZNK10btSoftBody6AJoint4TypeEv] }, align 8
@_ZTSN10btSoftBody6AJointE = dso_local constant [22 x i8] c"N10btSoftBody6AJointE\00", align 1
@_ZTIN10btSoftBody6AJointE = dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN10btSoftBody6AJointE, ptr @_ZTIN10btSoftBody5JointE }, align 8
@_ZTSN10btSoftBody15RayFromToCasterE = dso_local constant [32 x i8] c"N10btSoftBody15RayFromToCasterE\00", align 1
@_ZTSN6btDbvt8ICollideE = linkonce_odr dso_local constant [19 x i8] c"N6btDbvt8ICollideE\00", comdat, align 1
@_ZTIN6btDbvt8ICollideE = linkonce_odr dso_local constant { ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv117__class_type_infoE, i64 2), ptr @_ZTSN6btDbvt8ICollideE }, comdat, align 8
@_ZTIN10btSoftBody15RayFromToCasterE = dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN10btSoftBody15RayFromToCasterE, ptr @_ZTIN6btDbvt8ICollideE }, align 8
@_ZTV24btSoftBodyCollisionShape = linkonce_odr dso_local unnamed_addr constant { [15 x ptr] } { [15 x ptr] [ptr null, ptr @_ZTI24btSoftBodyCollisionShape, ptr @_ZN14btConcaveShapeD2Ev, ptr @_ZN24btSoftBodyCollisionShapeD0Ev, ptr @_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_, ptr @_ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf, ptr @_ZNK16btCollisionShape20getAngularMotionDiscEv, ptr @_ZNK16btCollisionShape27getContactBreakingThresholdEv, ptr @_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3, ptr @_ZNK24btSoftBodyCollisionShape15getLocalScalingEv, ptr @_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3, ptr @_ZNK24btSoftBodyCollisionShape7getNameEv, ptr @_ZN14btConcaveShape9setMarginEf, ptr @_ZNK14btConcaveShape9getMarginEv, ptr @_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_] }, comdat, align 8
@_ZTS24btSoftBodyCollisionShape = linkonce_odr dso_local constant [27 x i8] c"24btSoftBodyCollisionShape\00", comdat, align 1
@_ZTI14btConcaveShape = external constant ptr
@_ZTI24btSoftBodyCollisionShape = linkonce_odr dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTS24btSoftBodyCollisionShape, ptr @_ZTI14btConcaveShape }, comdat, align 8
@_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy = linkonce_odr dso_local global %class.btVector3 zeroinitializer, comdat, align 4
@_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy = linkonce_odr dso_local global i64 0, comdat, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"SoftBody\00", align 1
@_ZZNK10btSoftBody4Body5xformEvE8identity = linkonce_odr dso_local global %class.btTransform zeroinitializer, comdat, align 4
@_ZGVZNK10btSoftBody4Body5xformEvE8identity = linkonce_odr dso_local global i64 0, comdat, align 8
@_ZZN11btTransform11getIdentityEvE17identityTransform = linkonce_odr dso_local global %class.btTransform zeroinitializer, comdat, align 4
@_ZGVZN11btTransform11getIdentityEvE17identityTransform = linkonce_odr dso_local global i64 0, comdat, align 8
@_ZZN11btMatrix3x311getIdentityEvE14identityMatrix = linkonce_odr dso_local global %class.btMatrix3x3 zeroinitializer, comdat, align 4
@_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix = linkonce_odr dso_local global i64 0, comdat, align 8
@_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi = linkonce_odr dso_local global %class.btMatrix3x3 zeroinitializer, comdat, align 4
@_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi = linkonce_odr dso_local global i64 0, comdat, align 8
@_ZTVN15btSoftColliders13CollideSDF_RSE = linkonce_odr dso_local unnamed_addr constant { [9 x ptr] } { [9 x ptr] [ptr null, ptr @_ZTIN15btSoftColliders13CollideSDF_RSE, ptr @_ZN6btDbvt8ICollideD2Ev, ptr @_ZN15btSoftColliders13CollideSDF_RSD0Ev, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_, ptr @_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef, ptr @_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode] }, comdat, align 8
@_ZTSN15btSoftColliders13CollideSDF_RSE = linkonce_odr dso_local constant [35 x i8] c"N15btSoftColliders13CollideSDF_RSE\00", comdat, align 1
@_ZTIN15btSoftColliders13CollideSDF_RSE = linkonce_odr dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN15btSoftColliders13CollideSDF_RSE, ptr @_ZTIN6btDbvt8ICollideE }, comdat, align 8
@_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic = linkonce_odr dso_local global %class.btMatrix3x3 zeroinitializer, comdat, align 4
@_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic = linkonce_odr dso_local global i64 0, comdat, align 8
@_ZTVN15btSoftColliders12CollideCL_RSE = linkonce_odr dso_local unnamed_addr constant { [9 x ptr] } { [9 x ptr] [ptr null, ptr @_ZTIN15btSoftColliders12CollideCL_RSE, ptr @_ZN6btDbvt8ICollideD2Ev, ptr @_ZN15btSoftColliders12CollideCL_RSD0Ev, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_, ptr @_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef, ptr @_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode] }, comdat, align 8
@_ZTSN15btSoftColliders12CollideCL_RSE = linkonce_odr dso_local constant [34 x i8] c"N15btSoftColliders12CollideCL_RSE\00", comdat, align 1
@_ZTSN15btSoftColliders11ClusterBaseE = linkonce_odr dso_local constant [33 x i8] c"N15btSoftColliders11ClusterBaseE\00", comdat, align 1
@_ZTIN15btSoftColliders11ClusterBaseE = linkonce_odr dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN15btSoftColliders11ClusterBaseE, ptr @_ZTIN6btDbvt8ICollideE }, comdat, align 8
@_ZTIN15btSoftColliders12CollideCL_RSE = linkonce_odr dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN15btSoftColliders12CollideCL_RSE, ptr @_ZTIN15btSoftColliders11ClusterBaseE }, comdat, align 8
@_ZTV27btSoftClusterCollisionShape = linkonce_odr dso_local unnamed_addr constant { [21 x ptr] } { [21 x ptr] [ptr null, ptr @_ZTI27btSoftClusterCollisionShape, ptr @_ZN13btConvexShapeD2Ev, ptr @_ZN27btSoftClusterCollisionShapeD0Ev, ptr @_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_, ptr @_ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf, ptr @_ZNK16btCollisionShape20getAngularMotionDiscEv, ptr @_ZNK16btCollisionShape27getContactBreakingThresholdEv, ptr @_ZN21btConvexInternalShape15setLocalScalingERK9btVector3, ptr @_ZNK21btConvexInternalShape15getLocalScalingEv, ptr @_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3, ptr @_ZNK27btSoftClusterCollisionShape7getNameEv, ptr @_ZN27btSoftClusterCollisionShape9setMarginEf, ptr @_ZNK27btSoftClusterCollisionShape9getMarginEv, ptr @_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3, ptr @_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3, ptr @_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i, ptr @_ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_, ptr @_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv, ptr @_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3, ptr @_ZNK27btSoftClusterCollisionShape12getShapeTypeEv] }, comdat, align 8
@_ZTS27btSoftClusterCollisionShape = linkonce_odr dso_local constant [30 x i8] c"27btSoftClusterCollisionShape\00", comdat, align 1
@_ZTI21btConvexInternalShape = external constant ptr
@_ZTI27btSoftClusterCollisionShape = linkonce_odr dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTS27btSoftClusterCollisionShape, ptr @_ZTI21btConvexInternalShape }, comdat, align 8
@.str.4 = private unnamed_addr constant [12 x i8] c"SOFTCLUSTER\00", align 1
@_ZTVN15btSoftColliders12CollideCL_SSE = linkonce_odr dso_local unnamed_addr constant { [9 x ptr] } { [9 x ptr] [ptr null, ptr @_ZTIN15btSoftColliders12CollideCL_SSE, ptr @_ZN6btDbvt8ICollideD2Ev, ptr @_ZN15btSoftColliders12CollideCL_SSD0Ev, ptr @_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef, ptr @_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode] }, comdat, align 8
@_ZTSN15btSoftColliders12CollideCL_SSE = linkonce_odr dso_local constant [34 x i8] c"N15btSoftColliders12CollideCL_SSE\00", comdat, align 1
@_ZTIN15btSoftColliders12CollideCL_SSE = linkonce_odr dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN15btSoftColliders12CollideCL_SSE, ptr @_ZTIN15btSoftColliders11ClusterBaseE }, comdat, align 8
@_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count = linkonce_odr dso_local local_unnamed_addr global i32 0, comdat, align 4
@_ZTVN15btSoftColliders12CollideVF_SSE = linkonce_odr dso_local unnamed_addr constant { [9 x ptr] } { [9 x ptr] [ptr null, ptr @_ZTIN15btSoftColliders12CollideVF_SSE, ptr @_ZN6btDbvt8ICollideD2Ev, ptr @_ZN15btSoftColliders12CollideVF_SSD0Ev, ptr @_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef, ptr @_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode, ptr @_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode] }, comdat, align 8
@_ZTSN15btSoftColliders12CollideVF_SSE = linkonce_odr dso_local constant [34 x i8] c"N15btSoftColliders12CollideVF_SSE\00", comdat, align 1
@_ZTIN15btSoftColliders12CollideVF_SSE = linkonce_odr dso_local constant { ptr, ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2), ptr @_ZTSN15btSoftColliders12CollideVF_SSE, ptr @_ZTIN6btDbvt8ICollideE }, comdat, align 8
@_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy = internal global %"struct.btSoftBody::Node" zeroinitializer, align 8
@_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy = internal global i64 0, align 8
@_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy = internal global %"struct.btSoftBody::Material" zeroinitializer, align 8
@_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy = internal global i64 0, align 8
@_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy = internal global %"struct.btSoftBody::Note" zeroinitializer, align 8
@_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy = internal global i64 0, align 8
@_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy = internal global %"struct.btSoftBody::Link" zeroinitializer, align 8
@_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy = internal global i64 0, align 8
@_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy = internal global %"struct.btSoftBody::Face" zeroinitializer, align 8
@_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy = internal global i64 0, align 8
@_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy = internal global %"struct.btSoftBody::Tetra" zeroinitializer, align 8
@_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy = internal global i64 0, align 8
@switch.table._ZN10btSoftBody11staticSolveEi = private unnamed_addr constant [4 x ptr] [ptr @_ZN10btSoftBody12PSolve_LinksEPS_ff, ptr @_ZN10btSoftBody14PSolve_AnchorsEPS_ff, ptr @_ZN10btSoftBody16PSolve_RContactsEPS_ff, ptr @_ZN10btSoftBody16PSolve_SContactsEPS_ff], align 8

@_ZN10btSoftBodyC1EP19btSoftBodyWorldInfoiPK9btVector3PKf = dso_local unnamed_addr alias void (ptr, ptr, i32, ptr, ptr), ptr @_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf
@_ZN10btSoftBodyD1Ev = dso_local unnamed_addr alias void (ptr), ptr @_ZN10btSoftBodyD2Ev
@_ZN10btSoftBody15RayFromToCasterC1ERK9btVector3S3_f = dso_local unnamed_addr alias void (ptr, ptr, ptr, float), ptr @_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, i32 noundef %2, ptr noundef readonly %3, ptr noundef readonly %4) unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %6 = alloca %struct.btDbvtAabbMm, align 8
  tail call void @_ZN17btCollisionObjectC2Ev(ptr noundef nonnull align 8 dereferenceable(280) %0)
  store ptr getelementptr inbounds ({ [7 x ptr] }, ptr @_ZTV10btSoftBody, i64 0, inrange i32 0, i64 2), ptr %0, align 8, !tbaa !5
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 6
  store i8 1, ptr %7, align 8, !tbaa !8
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 5
  store ptr null, ptr %8, align 8, !tbaa !15
  %9 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 2
  store i32 0, ptr %9, align 4, !tbaa !16
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 3
  store i32 0, ptr %10, align 8, !tbaa !17
  %11 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 6
  store i8 1, ptr %11, align 8, !tbaa !18
  %12 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 5
  store ptr null, ptr %12, align 8, !tbaa !21
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 2
  store i32 0, ptr %13, align 4, !tbaa !22
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 3
  store i32 0, ptr %14, align 8, !tbaa !23
  %15 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 6
  store i8 1, ptr %15, align 8, !tbaa !24
  %16 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 5
  store ptr null, ptr %16, align 8, !tbaa !27
  %17 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 2
  store i32 0, ptr %17, align 4, !tbaa !28
  %18 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 3
  store i32 0, ptr %18, align 8, !tbaa !29
  %19 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 6
  store i8 1, ptr %19, align 8, !tbaa !24
  %20 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 5
  store ptr null, ptr %20, align 8, !tbaa !27
  %21 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 2
  store i32 0, ptr %21, align 4, !tbaa !28
  %22 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 3
  store i32 0, ptr %22, align 8, !tbaa !29
  %23 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 6
  store i8 1, ptr %23, align 8, !tbaa !30
  %24 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  store ptr null, ptr %24, align 8, !tbaa !33
  %25 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 2
  store i32 0, ptr %25, align 4, !tbaa !34
  %26 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 3
  store i32 0, ptr %26, align 8, !tbaa !35
  %27 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 6
  store i8 1, ptr %27, align 8, !tbaa !36
  %28 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  store ptr null, ptr %28, align 8, !tbaa !39
  %29 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 2
  store i32 0, ptr %29, align 4, !tbaa !40
  %30 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 3
  store i32 0, ptr %30, align 8, !tbaa !41
  %31 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  store ptr %1, ptr %31, align 8, !tbaa !42
  %32 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 6
  store i8 1, ptr %32, align 8, !tbaa !82
  %33 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 5
  store ptr null, ptr %33, align 8, !tbaa !83
  %34 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 2
  store i32 0, ptr %34, align 4, !tbaa !84
  %35 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 3
  store i32 0, ptr %35, align 8, !tbaa !85
  %36 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 6
  store i8 1, ptr %36, align 8, !tbaa !86
  %37 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  store ptr null, ptr %37, align 8, !tbaa !87
  %38 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  store i32 0, ptr %38, align 4, !tbaa !88
  %39 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 3
  store i32 0, ptr %39, align 8, !tbaa !89
  %40 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 6
  store i8 1, ptr %40, align 8, !tbaa !90
  %41 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  store ptr null, ptr %41, align 8, !tbaa !91
  %42 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  store i32 0, ptr %42, align 4, !tbaa !92
  %43 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 3
  store i32 0, ptr %43, align 8, !tbaa !93
  %44 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 6
  store i8 1, ptr %44, align 8, !tbaa !94
  %45 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  store ptr null, ptr %45, align 8, !tbaa !95
  %46 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  store i32 0, ptr %46, align 4, !tbaa !96
  %47 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 3
  store i32 0, ptr %47, align 8, !tbaa !97
  %48 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 6
  store i8 1, ptr %48, align 8, !tbaa !98
  %49 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  store ptr null, ptr %49, align 8, !tbaa !99
  %50 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 2
  store i32 0, ptr %50, align 4, !tbaa !100
  %51 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 3
  store i32 0, ptr %51, align 8, !tbaa !101
  %52 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 6
  store i8 1, ptr %52, align 8, !tbaa !102
  %53 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 5
  store ptr null, ptr %53, align 8, !tbaa !103
  %54 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 2
  store i32 0, ptr %54, align 4, !tbaa !104
  %55 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 3
  store i32 0, ptr %55, align 8, !tbaa !105
  %56 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 6
  store i8 1, ptr %56, align 8, !tbaa !106
  %57 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 5
  store ptr null, ptr %57, align 8, !tbaa !107
  %58 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 2
  store i32 0, ptr %58, align 4, !tbaa !108
  %59 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 3
  store i32 0, ptr %59, align 8, !tbaa !109
  %60 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 6
  store i8 1, ptr %60, align 8, !tbaa !110
  %61 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 5
  store ptr null, ptr %61, align 8, !tbaa !111
  %62 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 2
  store i32 0, ptr %62, align 4, !tbaa !112
  %63 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 3
  store i32 0, ptr %63, align 8, !tbaa !113
  %64 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 6
  store i8 1, ptr %64, align 8, !tbaa !114
  %65 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  store ptr null, ptr %65, align 8, !tbaa !115
  %66 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 2
  store i32 0, ptr %66, align 4, !tbaa !116
  %67 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 3
  store i32 0, ptr %67, align 8, !tbaa !117
  %68 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 6
  store i8 1, ptr %68, align 8, !tbaa !118
  %69 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  store ptr null, ptr %69, align 8, !tbaa !119
  %70 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 2
  store i32 0, ptr %70, align 4, !tbaa !120
  %71 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 3
  store i32 0, ptr %71, align 8, !tbaa !121
  %72 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  %73 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1
  %74 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2
  %75 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5
  %76 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8
  %77 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9
  %78 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10
  %79 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11
  %80 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12
  %81 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13
  %82 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14
  %83 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15
  %84 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16
  %85 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17
  %86 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  %87 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  invoke void @_ZN6btDbvtC1Ev(ptr noundef nonnull align 8 dereferenceable(64) %87)
          to label %88 unwind label %286

88:                                               ; preds = %5
  %89 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  invoke void @_ZN6btDbvtC1Ev(ptr noundef nonnull align 8 dereferenceable(64) %89)
          to label %90 unwind label %288

90:                                               ; preds = %88
  %91 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  invoke void @_ZN6btDbvtC1Ev(ptr noundef nonnull align 8 dereferenceable(64) %91)
          to label %92 unwind label %290

92:                                               ; preds = %90
  %93 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24
  %94 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 6
  store i8 1, ptr %94, align 8, !tbaa !122
  %95 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  store ptr null, ptr %95, align 8, !tbaa !123
  %96 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  store i32 0, ptr %96, align 4, !tbaa !124
  %97 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 3
  store i32 0, ptr %97, align 8, !tbaa !125
  %98 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25
  %99 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 6
  store i8 1, ptr %99, align 8, !tbaa !126
  %100 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 5
  store ptr null, ptr %100, align 8, !tbaa !127
  %101 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 2
  store i32 0, ptr %101, align 4, !tbaa !128
  %102 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 3
  store i32 0, ptr %102, align 8, !tbaa !129
  %103 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27
  %104 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 6
  store i8 1, ptr %104, align 8, !tbaa !130
  %105 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 5
  store ptr null, ptr %105, align 8, !tbaa !131
  %106 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 2
  store i32 0, ptr %106, align 4, !tbaa !132
  %107 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 3
  store i32 0, ptr %107, align 8, !tbaa !133
  %108 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 19
  store i32 4, ptr %108, align 8, !tbaa !134
  store i32 0, ptr %74, align 8, !tbaa !135
  %109 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 1
  store float 1.000000e+00, ptr %109, align 4, !tbaa !136
  %110 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 2
  %111 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %110, i8 0, i64 20, i1 false)
  store <2 x float> <float 0x3FC99999A0000000, float 0.000000e+00>, ptr %111, align 4, !tbaa !137
  %112 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 9
  store float 1.000000e+00, ptr %112, align 4, !tbaa !138
  %113 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 10
  store <4 x float> <float 0x3FB99999A0000000, float 1.000000e+00, float 0x3FE6666660000000, float 0x3FB99999A0000000>, ptr %113, align 8, !tbaa !137
  %114 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 14
  store <4 x float> <float 1.000000e+00, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, ptr %114, align 8, !tbaa !137
  %115 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 18
  store <2 x float> <float 5.000000e-01, float 1.000000e+00>, ptr %115, align 8, !tbaa !137
  %116 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 20
  store float 1.000000e+00, ptr %116, align 8, !tbaa !139
  %117 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 21
  store <4 x i32> <i32 0, i32 1, i32 0, i32 4>, ptr %117, align 4, !tbaa !140
  %118 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 25
  store i32 1, ptr %118, align 4, !tbaa !141
  store i8 0, ptr %75, align 8, !tbaa !142
  %119 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 1
  store i8 0, ptr %119, align 1, !tbaa !143
  %120 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 2
  store float 0.000000e+00, ptr %120, align 4, !tbaa !144
  %121 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 5
  %122 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %121, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %122, align 8, !tbaa !137
  %123 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 0, i32 0, i64 1
  %124 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %123, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %124, align 4, !tbaa !137
  %125 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1, i32 0, i64 2
  %126 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 2, i32 0, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %125, i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr %126, align 8, !tbaa !137
  %127 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7
  store float 1.000000e+00, ptr %127, align 8, !tbaa !137
  %128 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 0, i32 0, i64 1
  %129 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 1, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %128, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %129, align 4, !tbaa !137
  %130 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 1, i32 0, i64 2
  %131 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 2, i32 0, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %130, i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr %131, align 8, !tbaa !137
  %132 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 6
  store ptr null, ptr %132, align 8, !tbaa !145
  %133 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 18
  store float 0.000000e+00, ptr %133, align 8, !tbaa !146
  store i8 1, ptr %86, align 4, !tbaa !147
  %134 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 0, i32 0, i64 2
  %135 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1
  %136 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1, i32 0, i64 2
  %137 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %72, i8 0, i64 32, i1 false)
  store float 1.000000e+00, ptr %137, align 8, !tbaa !137
  %138 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 0, i32 0, i64 1
  %139 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %138, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %139, align 4, !tbaa !137
  %140 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1, i32 0, i64 2
  %141 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2, i32 0, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %140, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %141, align 8, !tbaa !137
  %142 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2, i32 0, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %142, i8 0, i64 20, i1 false)
  invoke void @_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef 0)
          to label %143 unwind label %292

143:                                              ; preds = %92
  %144 = invoke noundef ptr @_ZN10btSoftBody14appendMaterialEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
          to label %145 unwind label %294

145:                                              ; preds = %143
  %146 = getelementptr inbounds %"struct.btSoftBody::Material", ptr %144, i64 0, i32 1
  store <2 x float> <float 1.000000e+00, float 1.000000e+00>, ptr %146, align 8, !tbaa !137
  %147 = getelementptr inbounds %"struct.btSoftBody::Material", ptr %144, i64 0, i32 3
  store float 1.000000e+00, ptr %147, align 8, !tbaa !148
  %148 = getelementptr inbounds %"struct.btSoftBody::Material", ptr %144, i64 0, i32 4
  store i32 1, ptr %148, align 4, !tbaa !151
  %149 = invoke noalias noundef nonnull dereferenceable(40) ptr @_Znwm(i64 noundef 40) #36
          to label %150 unwind label %294

150:                                              ; preds = %145
  invoke void @_ZN14btConcaveShapeC2Ev(ptr noundef nonnull align 8 dereferenceable(28) %149)
          to label %151 unwind label %296

151:                                              ; preds = %150
  store ptr getelementptr inbounds ({ [15 x ptr] }, ptr @_ZTV24btSoftBodyCollisionShape, i64 0, inrange i32 0, i64 2), ptr %149, align 8, !tbaa !5
  %152 = getelementptr inbounds %class.btCollisionShape, ptr %149, i64 0, i32 1
  store i32 32, ptr %152, align 8, !tbaa !152
  %153 = getelementptr inbounds %class.btSoftBodyCollisionShape, ptr %149, i64 0, i32 1
  store ptr %0, ptr %153, align 8, !tbaa !154
  %154 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  store ptr %149, ptr %154, align 8, !tbaa !157
  %155 = getelementptr inbounds %class.btConcaveShape, ptr %149, i64 0, i32 1
  store float 2.500000e-01, ptr %155, align 8, !tbaa !158
  %156 = load i32, ptr %38, align 4, !tbaa !88
  %157 = icmp slt i32 %156, %2
  br i1 %157, label %158, label %241

158:                                              ; preds = %151
  %159 = load i32, ptr %39, align 8, !tbaa !89
  %160 = icmp slt i32 %159, %2
  br i1 %160, label %161, label %207

161:                                              ; preds = %158
  %162 = icmp eq i32 %2, 0
  br i1 %162, label %169, label %163

163:                                              ; preds = %161
  %164 = sext i32 %2 to i64
  %165 = mul nsw i64 %164, 120
  %166 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %165, i32 noundef 16)
          to label %167 unwind label %300

167:                                              ; preds = %163
  %168 = load i32, ptr %38, align 4, !tbaa !88
  br label %169

169:                                              ; preds = %167, %161
  %170 = phi i32 [ %168, %167 ], [ %156, %161 ]
  %171 = phi ptr [ %166, %167 ], [ null, %161 ]
  %172 = icmp sgt i32 %170, 0
  br i1 %172, label %173, label %199

173:                                              ; preds = %169
  %174 = zext i32 %170 to i64
  %175 = and i64 %174, 1
  %176 = icmp eq i32 %170, 1
  br i1 %176, label %192, label %177

177:                                              ; preds = %173
  %178 = and i64 %174, 4294967294
  br label %179

179:                                              ; preds = %179, %177
  %180 = phi i64 [ 0, %177 ], [ %189, %179 ]
  %181 = phi i64 [ 0, %177 ], [ %190, %179 ]
  %182 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %171, i64 %180
  %183 = load ptr, ptr %37, align 8, !tbaa !87
  %184 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %180
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %182, ptr noundef nonnull align 8 dereferenceable(120) %184, i64 120, i1 false)
  %185 = or i64 %180, 1
  %186 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %171, i64 %185
  %187 = load ptr, ptr %37, align 8, !tbaa !87
  %188 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %187, i64 %185
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %186, ptr noundef nonnull align 8 dereferenceable(120) %188, i64 120, i1 false)
  %189 = add nuw nsw i64 %180, 2
  %190 = add i64 %181, 2
  %191 = icmp eq i64 %190, %178
  br i1 %191, label %192, label %179

192:                                              ; preds = %179, %173
  %193 = phi i64 [ 0, %173 ], [ %189, %179 ]
  %194 = icmp eq i64 %175, 0
  br i1 %194, label %199, label %195

195:                                              ; preds = %192
  %196 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %171, i64 %193
  %197 = load ptr, ptr %37, align 8, !tbaa !87
  %198 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %197, i64 %193
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %196, ptr noundef nonnull align 8 dereferenceable(120) %198, i64 120, i1 false)
  br label %199

199:                                              ; preds = %195, %192, %169
  %200 = load ptr, ptr %37, align 8, !tbaa !87
  %201 = icmp eq ptr %200, null
  %202 = load i8, ptr %36, align 8
  %203 = icmp eq i8 %202, 0
  %204 = select i1 %201, i1 true, i1 %203
  br i1 %204, label %206, label %205

205:                                              ; preds = %199
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %200)
          to label %206 unwind label %300

206:                                              ; preds = %205, %199
  store i8 1, ptr %36, align 8, !tbaa !86
  store ptr %171, ptr %37, align 8, !tbaa !87
  store i32 %2, ptr %39, align 8, !tbaa !89
  br label %207

207:                                              ; preds = %206, %158
  %208 = sext i32 %156 to i64
  %209 = sext i32 %2 to i64
  %210 = sub nsw i64 %209, %208
  %211 = xor i64 %208, -1
  %212 = add nsw i64 %211, %209
  %213 = and i64 %210, 3
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %223, label %215

215:                                              ; preds = %207, %215
  %216 = phi i64 [ %220, %215 ], [ %208, %207 ]
  %217 = phi i64 [ %221, %215 ], [ 0, %207 ]
  %218 = load ptr, ptr %37, align 8, !tbaa !87
  %219 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %218, i64 %216
  store ptr null, ptr %219, align 8
  %220 = add nsw i64 %216, 1
  %221 = add i64 %217, 1
  %222 = icmp eq i64 %221, %213
  br i1 %222, label %223, label %215, !llvm.loop !159

223:                                              ; preds = %215, %207
  %224 = phi i64 [ %208, %207 ], [ %220, %215 ]
  %225 = icmp ult i64 %212, 3
  br i1 %225, label %241, label %226

226:                                              ; preds = %223, %226
  %227 = phi i64 [ %239, %226 ], [ %224, %223 ]
  %228 = load ptr, ptr %37, align 8, !tbaa !87
  %229 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %228, i64 %227
  store ptr null, ptr %229, align 8
  %230 = add nsw i64 %227, 1
  %231 = load ptr, ptr %37, align 8, !tbaa !87
  %232 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %231, i64 %230
  store ptr null, ptr %232, align 8
  %233 = add nsw i64 %227, 2
  %234 = load ptr, ptr %37, align 8, !tbaa !87
  %235 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %234, i64 %233
  store ptr null, ptr %235, align 8
  %236 = add nsw i64 %227, 3
  %237 = load ptr, ptr %37, align 8, !tbaa !87
  %238 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %237, i64 %236
  store ptr null, ptr %238, align 8
  %239 = add nsw i64 %227, 4
  %240 = icmp eq i64 %239, %209
  br i1 %240, label %241, label %226

241:                                              ; preds = %223, %226, %151
  store i32 %2, ptr %38, align 4, !tbaa !88
  %242 = icmp sgt i32 %2, 0
  br i1 %242, label %243, label %248

243:                                              ; preds = %241
  %244 = getelementptr inbounds i8, ptr %6, i64 8
  %245 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %6, i64 0, i32 1
  %246 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %6, i64 0, i32 1, i32 0, i64 2
  %247 = zext i32 %2 to i64
  br label %302

248:                                              ; preds = %348, %241
  %249 = load ptr, ptr %87, align 8, !tbaa !161
  %250 = icmp eq ptr %249, null
  br i1 %250, label %285, label %251

251:                                              ; preds = %248
  %252 = load ptr, ptr %154, align 8, !tbaa !157
  %253 = load ptr, ptr %252, align 8, !tbaa !5
  %254 = getelementptr inbounds ptr, ptr %253, i64 11
  %255 = load ptr, ptr %254, align 8
  %256 = invoke noundef float %255(ptr noundef nonnull align 8 dereferenceable(24) %252)
          to label %257 unwind label %298

257:                                              ; preds = %251
  %258 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %249, i64 0, i32 1
  %259 = load <2 x float>, ptr %249, align 4, !tbaa !137
  %260 = insertelement <2 x float> poison, float %256, i64 0
  %261 = shufflevector <2 x float> %260, <2 x float> poison, <2 x i32> zeroinitializer
  %262 = fsub <2 x float> %259, %261
  %263 = getelementptr inbounds [4 x float], ptr %249, i64 0, i64 2
  %264 = load float, ptr %263, align 4, !tbaa !137
  %265 = fsub float %264, %256
  %266 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %265, i64 0
  store <2 x float> %262, ptr %72, align 4, !tbaa.struct !162
  store <2 x float> %266, ptr %134, align 4, !tbaa.struct !164
  %267 = load <2 x float>, ptr %258, align 4, !tbaa !137
  %268 = fadd <2 x float> %261, %267
  %269 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %249, i64 0, i32 1, i32 0, i64 2
  %270 = load float, ptr %269, align 4, !tbaa !137
  %271 = fadd float %256, %270
  %272 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %271, i64 0
  store <2 x float> %268, ptr %135, align 4, !tbaa.struct !162
  store <2 x float> %272, ptr %136, align 4, !tbaa.struct !164
  %273 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 8
  %274 = load ptr, ptr %273, align 8, !tbaa !165
  %275 = icmp eq ptr %274, null
  br i1 %275, label %355, label %276

276:                                              ; preds = %257
  %277 = load ptr, ptr %31, align 8, !tbaa !42
  %278 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %277, i64 0, i32 4
  %279 = load ptr, ptr %278, align 8, !tbaa !166
  %280 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %277, i64 0, i32 5
  %281 = load ptr, ptr %280, align 8, !tbaa !171
  %282 = load ptr, ptr %279, align 8, !tbaa !5
  %283 = getelementptr inbounds ptr, ptr %282, i64 4
  %284 = load ptr, ptr %283, align 8
  invoke void %284(ptr noundef nonnull align 8 dereferenceable(8) %279, ptr noundef nonnull %274, ptr noundef nonnull align 4 dereferenceable(16) %72, ptr noundef nonnull align 4 dereferenceable(16) %135, ptr noundef %281)
          to label %355 unwind label %298

285:                                              ; preds = %248
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %72, i8 0, i64 32, i1 false)
  br label %355

286:                                              ; preds = %5
  %287 = landingpad { ptr, i32 }
          cleanup
  br label %371

288:                                              ; preds = %88
  %289 = landingpad { ptr, i32 }
          cleanup
  br label %369

290:                                              ; preds = %90
  %291 = landingpad { ptr, i32 }
          cleanup
  br label %367

292:                                              ; preds = %92
  %293 = landingpad { ptr, i32 }
          cleanup
  br label %362

294:                                              ; preds = %145, %143
  %295 = landingpad { ptr, i32 }
          cleanup
  br label %362

296:                                              ; preds = %150
  %297 = landingpad { ptr, i32 }
          cleanup
  tail call void @_ZdlPv(ptr noundef nonnull %149) #37
  br label %362

298:                                              ; preds = %276, %251
  %299 = landingpad { ptr, i32 }
          cleanup
  br label %362

300:                                              ; preds = %205, %163
  %301 = landingpad { ptr, i32 }
          cleanup
  br label %362

302:                                              ; preds = %243, %348
  %303 = phi i64 [ 0, %243 ], [ %351, %348 ]
  %304 = phi ptr [ %3, %243 ], [ %323, %348 ]
  %305 = phi ptr [ %4, %243 ], [ %334, %348 ]
  %306 = load ptr, ptr %37, align 8, !tbaa !87
  %307 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %306, i64 %303
  %308 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy acquire, align 8
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %310, label %315, !prof !172

310:                                              ; preds = %302
  %311 = call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy) #38
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %315, label %313

313:                                              ; preds = %310
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy, align 8, !tbaa !173
  %314 = call ptr @llvm.invariant.start.p0(i64 120, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
  call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy) #38
  br label %315

315:                                              ; preds = %313, %310, %302
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(113) %307, ptr noundef nonnull align 8 dereferenceable(113) @_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy, i64 113, i1 false)
  %316 = icmp eq ptr %304, null
  br i1 %316, label %322, label %317

317:                                              ; preds = %315
  %318 = getelementptr inbounds %class.btVector3, ptr %304, i64 1
  %319 = load <2 x float>, ptr %304, align 4
  %320 = getelementptr inbounds i8, ptr %304, i64 8
  %321 = load <2 x float>, ptr %320, align 4
  br label %322

322:                                              ; preds = %315, %317
  %323 = phi ptr [ %318, %317 ], [ null, %315 ]
  %324 = phi <2 x float> [ %319, %317 ], [ zeroinitializer, %315 ]
  %325 = phi <2 x float> [ %321, %317 ], [ zeroinitializer, %315 ]
  %326 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %306, i64 %303, i32 1
  store <2 x float> %324, ptr %326, align 8
  %327 = getelementptr inbounds i8, ptr %326, i64 8
  store <2 x float> %325, ptr %327, align 8
  %328 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %306, i64 %303, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %328, ptr noundef nonnull align 8 dereferenceable(16) %326, i64 16, i1 false), !tbaa.struct !162
  %329 = icmp eq ptr %305, null
  br i1 %329, label %333, label %330

330:                                              ; preds = %322
  %331 = getelementptr inbounds float, ptr %305, i64 1
  %332 = load float, ptr %305, align 4, !tbaa !137
  br label %333

333:                                              ; preds = %330, %322
  %334 = phi ptr [ %331, %330 ], [ null, %322 ]
  %335 = phi float [ %332, %330 ], [ 1.000000e+00, %322 ]
  %336 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %306, i64 %303, i32 6
  %337 = fcmp ogt float %335, 0.000000e+00
  %338 = fdiv float 1.000000e+00, %335
  %339 = select i1 %337, float %338, float 0.000000e+00
  store float %339, ptr %336, align 8, !tbaa !174
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #38
  %340 = fadd <2 x float> %324, <float -2.500000e-01, float -2.500000e-01>
  %341 = extractelement <2 x float> %325, i64 0
  %342 = fadd float %341, -2.500000e-01
  %343 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %342, i64 0
  store <2 x float> %340, ptr %6, align 8, !tbaa.struct !162, !alias.scope !177
  store <2 x float> %343, ptr %244, align 8, !tbaa.struct !164, !alias.scope !177
  %344 = fadd <2 x float> %324, <float 2.500000e-01, float 2.500000e-01>
  %345 = fadd float %341, 2.500000e-01
  %346 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %345, i64 0
  store <2 x float> %344, ptr %245, align 8, !tbaa.struct !162, !alias.scope !177
  store <2 x float> %346, ptr %246, align 8, !tbaa.struct !164, !alias.scope !177
  %347 = invoke noundef ptr @_ZN6btDbvt6insertERK12btDbvtAabbMmPv(ptr noundef nonnull align 8 dereferenceable(64) %87, ptr noundef nonnull align 4 dereferenceable(32) %6, ptr noundef nonnull %307)
          to label %348 unwind label %353

348:                                              ; preds = %333
  %349 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %306, i64 %303, i32 8
  store ptr %347, ptr %349, align 8, !tbaa !182
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #38
  %350 = getelementptr inbounds %"struct.btSoftBody::Feature", ptr %307, i64 0, i32 1
  store ptr %144, ptr %350, align 8, !tbaa !183
  %351 = add nuw nsw i64 %303, 1
  %352 = icmp eq i64 %351, %247
  br i1 %352, label %248, label %302

353:                                              ; preds = %333
  %354 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #38
  br label %362

355:                                              ; preds = %276, %257, %285
  %356 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26
  store float 1.000000e+00, ptr %356, align 8, !tbaa !137
  %357 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 0, i32 0, i64 0, i32 0, i64 1
  %358 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 0, i32 0, i64 1, i32 0, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %357, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %358, align 4, !tbaa !137
  %359 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 0, i32 0, i64 1, i32 0, i64 2
  %360 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 0, i32 0, i64 2, i32 0, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %359, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %360, align 8, !tbaa !137
  %361 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 0, i32 0, i64 2, i32 0, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %361, i8 0, i64 20, i1 false)
  ret void

362:                                              ; preds = %294, %296, %353, %300, %298, %292
  %363 = phi { ptr, i32 } [ %293, %292 ], [ %295, %294 ], [ %297, %296 ], [ %299, %298 ], [ %301, %300 ], [ %354, %353 ]
  invoke void @_ZN20btAlignedObjectArrayIiED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %103)
          to label %364 unwind label %387

364:                                              ; preds = %362
  invoke void @_ZN20btAlignedObjectArrayIbED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %98)
          to label %365 unwind label %387

365:                                              ; preds = %364
  invoke void @_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %93)
          to label %366 unwind label %387

366:                                              ; preds = %365
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %91)
          to label %367 unwind label %387

367:                                              ; preds = %366, %290
  %368 = phi { ptr, i32 } [ %363, %366 ], [ %291, %290 ]
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %89)
          to label %369 unwind label %387

369:                                              ; preds = %367, %288
  %370 = phi { ptr, i32 } [ %368, %367 ], [ %289, %288 ]
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %87)
          to label %371 unwind label %387

371:                                              ; preds = %369, %286
  %372 = phi { ptr, i32 } [ %370, %369 ], [ %287, %286 ]
  invoke void @_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %85)
          to label %373 unwind label %387

373:                                              ; preds = %371
  invoke void @_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %84)
          to label %374 unwind label %387

374:                                              ; preds = %373
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %83)
          to label %375 unwind label %387

375:                                              ; preds = %374
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %82)
          to label %376 unwind label %387

376:                                              ; preds = %375
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %81)
          to label %377 unwind label %387

377:                                              ; preds = %376
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %80)
          to label %378 unwind label %387

378:                                              ; preds = %377
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %79)
          to label %379 unwind label %387

379:                                              ; preds = %378
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %78)
          to label %380 unwind label %387

380:                                              ; preds = %379
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %77)
          to label %381 unwind label %387

381:                                              ; preds = %380
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %76)
          to label %382 unwind label %387

382:                                              ; preds = %381
  invoke void @_ZN10btSoftBody4PoseD2Ev(ptr noundef nonnull align 8 dereferenceable(232) %75)
          to label %383 unwind label %387

383:                                              ; preds = %382
  invoke void @_ZN10btSoftBody6ConfigD2Ev(ptr noundef nonnull align 8 dereferenceable(200) %74)
          to label %384 unwind label %387

384:                                              ; preds = %383
  invoke void @_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %73)
          to label %385 unwind label %387

385:                                              ; preds = %384
  invoke void @_ZN17btCollisionObjectD2Ev(ptr noundef nonnull align 8 dereferenceable(280) %0)
          to label %386 unwind label %387

386:                                              ; preds = %385
  resume { ptr, i32 } %372

387:                                              ; preds = %385, %384, %383, %382, %381, %380, %379, %378, %377, %376, %375, %374, %373, %371, %369, %367, %366, %365, %364, %362
  %388 = landingpad { ptr, i32 }
          catch ptr null
  %389 = extractvalue { ptr, i32 } %388, 0
  call void @__clang_call_terminate(ptr %389) #39
  unreachable
}

declare void @_ZN17btCollisionObjectC2Ev(ptr noundef nonnull align 8 dereferenceable(280)) unnamed_addr #1

declare i32 @__gxx_personality_v0(...)

declare void @_ZN6btDbvtC1Ev(ptr noundef nonnull align 8 dereferenceable(64)) unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !21
  %5 = icmp eq ptr %4, null
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 6
  %7 = load i8, ptr %6, align 8
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %5, i1 true, i1 %8
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %4)
  br label %11

11:                                               ; preds = %2, %10
  %12 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 2
  store i8 1, ptr %6, align 8, !tbaa !18
  store ptr null, ptr %3, align 8, !tbaa !21
  store i32 0, ptr %12, align 4, !tbaa !22
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 3
  store i32 0, ptr %13, align 8, !tbaa !23
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !27
  %16 = icmp eq ptr %15, null
  %17 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 6
  %18 = load i8, ptr %17, align 8
  %19 = icmp eq i8 %18, 0
  %20 = select i1 %16, i1 true, i1 %19
  br i1 %20, label %22, label %21

21:                                               ; preds = %11
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %15)
  br label %22

22:                                               ; preds = %11, %21
  %23 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 2
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr null, ptr %14, align 8, !tbaa !27
  store i32 0, ptr %23, align 4, !tbaa !28
  %24 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 3
  store i32 0, ptr %24, align 8, !tbaa !29
  %25 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 5
  %26 = load ptr, ptr %25, align 8, !tbaa !27
  %27 = icmp eq ptr %26, null
  %28 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 6
  %29 = load i8, ptr %28, align 8
  %30 = icmp eq i8 %29, 0
  %31 = select i1 %27, i1 true, i1 %30
  br i1 %31, label %33, label %32

32:                                               ; preds = %22
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %26)
  br label %33

33:                                               ; preds = %22, %32
  %34 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 2
  store i8 1, ptr %28, align 8, !tbaa !24
  store ptr null, ptr %25, align 8, !tbaa !27
  store i32 0, ptr %34, align 4, !tbaa !28
  %35 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 3
  store i32 0, ptr %35, align 8, !tbaa !29
  switch i32 %1, label %909 [
    i32 0, label %36
    i32 1, label %419
  ]

36:                                               ; preds = %33
  %37 = load i32, ptr %23, align 4, !tbaa !28
  %38 = load i32, ptr %24, align 8, !tbaa !29
  %39 = icmp eq i32 %37, %38
  br i1 %39, label %40, label %128

40:                                               ; preds = %36
  %41 = icmp eq i32 %37, 0
  %42 = shl nsw i32 %37, 1
  %43 = select i1 %41, i32 1, i32 %42
  %44 = icmp slt i32 %37, %43
  br i1 %44, label %45, label %128

45:                                               ; preds = %40
  %46 = icmp eq i32 %43, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %45
  %48 = sext i32 %43 to i64
  %49 = shl nsw i64 %48, 2
  %50 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %49, i32 noundef 16)
  %51 = load i32, ptr %23, align 4, !tbaa !28
  br label %52

52:                                               ; preds = %47, %45
  %53 = phi i32 [ %51, %47 ], [ %37, %45 ]
  %54 = phi ptr [ %50, %47 ], [ null, %45 ]
  %55 = icmp sgt i32 %53, 0
  %56 = load ptr, ptr %14, align 8, !tbaa !27
  br i1 %55, label %57, label %116

57:                                               ; preds = %52
  %58 = ptrtoint ptr %56 to i64
  %59 = ptrtoint ptr %54 to i64
  %60 = zext i32 %53 to i64
  %61 = icmp ult i32 %53, 8
  %62 = sub i64 %59, %58
  %63 = icmp ult i64 %62, 32
  %64 = select i1 %61, i1 true, i1 %63
  br i1 %64, label %79, label %65

65:                                               ; preds = %57
  %66 = and i64 %60, 4294967288
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %75, %67 ]
  %69 = getelementptr inbounds i32, ptr %54, i64 %68
  %70 = getelementptr inbounds i32, ptr %56, i64 %68
  %71 = load <4 x i32>, ptr %70, align 4, !tbaa !184
  %72 = getelementptr inbounds i32, ptr %70, i64 4
  %73 = load <4 x i32>, ptr %72, align 4, !tbaa !184
  store <4 x i32> %71, ptr %69, align 4, !tbaa !184
  %74 = getelementptr inbounds i32, ptr %69, i64 4
  store <4 x i32> %73, ptr %74, align 4, !tbaa !184
  %75 = add nuw i64 %68, 8
  %76 = icmp eq i64 %75, %66
  br i1 %76, label %77, label %67, !llvm.loop !186

77:                                               ; preds = %67
  %78 = icmp eq i64 %66, %60
  br i1 %78, label %121, label %79

79:                                               ; preds = %57, %77
  %80 = phi i64 [ 0, %57 ], [ %66, %77 ]
  %81 = xor i64 %80, -1
  %82 = add nsw i64 %81, %60
  %83 = and i64 %60, 3
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %94, label %85

85:                                               ; preds = %79, %85
  %86 = phi i64 [ %91, %85 ], [ %80, %79 ]
  %87 = phi i64 [ %92, %85 ], [ 0, %79 ]
  %88 = getelementptr inbounds i32, ptr %54, i64 %86
  %89 = getelementptr inbounds i32, ptr %56, i64 %86
  %90 = load i32, ptr %89, align 4, !tbaa !184
  store i32 %90, ptr %88, align 4, !tbaa !184
  %91 = add nuw nsw i64 %86, 1
  %92 = add i64 %87, 1
  %93 = icmp eq i64 %92, %83
  br i1 %93, label %94, label %85, !llvm.loop !189

94:                                               ; preds = %85, %79
  %95 = phi i64 [ %80, %79 ], [ %91, %85 ]
  %96 = icmp ult i64 %82, 3
  br i1 %96, label %121, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %114, %97 ], [ %95, %94 ]
  %99 = getelementptr inbounds i32, ptr %54, i64 %98
  %100 = getelementptr inbounds i32, ptr %56, i64 %98
  %101 = load i32, ptr %100, align 4, !tbaa !184
  store i32 %101, ptr %99, align 4, !tbaa !184
  %102 = add nuw nsw i64 %98, 1
  %103 = getelementptr inbounds i32, ptr %54, i64 %102
  %104 = getelementptr inbounds i32, ptr %56, i64 %102
  %105 = load i32, ptr %104, align 4, !tbaa !184
  store i32 %105, ptr %103, align 4, !tbaa !184
  %106 = add nuw nsw i64 %98, 2
  %107 = getelementptr inbounds i32, ptr %54, i64 %106
  %108 = getelementptr inbounds i32, ptr %56, i64 %106
  %109 = load i32, ptr %108, align 4, !tbaa !184
  store i32 %109, ptr %107, align 4, !tbaa !184
  %110 = add nuw nsw i64 %98, 3
  %111 = getelementptr inbounds i32, ptr %54, i64 %110
  %112 = getelementptr inbounds i32, ptr %56, i64 %110
  %113 = load i32, ptr %112, align 4, !tbaa !184
  store i32 %113, ptr %111, align 4, !tbaa !184
  %114 = add nuw nsw i64 %98, 4
  %115 = icmp eq i64 %114, %60
  br i1 %115, label %121, label %97, !llvm.loop !190

116:                                              ; preds = %52
  %117 = icmp eq ptr %56, null
  %118 = load i8, ptr %17, align 8
  %119 = icmp eq i8 %118, 0
  %120 = select i1 %117, i1 true, i1 %119
  br i1 %120, label %126, label %124

121:                                              ; preds = %94, %97, %77
  %122 = load i8, ptr %17, align 8, !tbaa !24, !range !191, !noundef !192
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %126, label %124

124:                                              ; preds = %121, %116
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %56)
  %125 = load i32, ptr %23, align 4, !tbaa !28
  br label %126

126:                                              ; preds = %124, %121, %116
  %127 = phi i32 [ %53, %116 ], [ %125, %124 ], [ %53, %121 ]
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr %54, ptr %14, align 8, !tbaa !27
  store i32 %43, ptr %24, align 8, !tbaa !29
  br label %128

128:                                              ; preds = %36, %40, %126
  %129 = phi i32 [ %43, %126 ], [ %37, %40 ], [ %38, %36 ]
  %130 = phi i32 [ %127, %126 ], [ %37, %40 ], [ %37, %36 ]
  %131 = load ptr, ptr %14, align 8, !tbaa !27
  %132 = sext i32 %130 to i64
  %133 = getelementptr inbounds i32, ptr %131, i64 %132
  store i32 1, ptr %133, align 4, !tbaa !184
  %134 = add nsw i32 %130, 1
  store i32 %134, ptr %23, align 4, !tbaa !28
  %135 = icmp eq i32 %134, %129
  br i1 %135, label %136, label %225

136:                                              ; preds = %128
  %137 = icmp eq i32 %129, 0
  %138 = shl nsw i32 %129, 1
  %139 = select i1 %137, i32 1, i32 %138
  %140 = icmp slt i32 %129, %139
  br i1 %140, label %141, label %225

141:                                              ; preds = %136
  %142 = icmp eq i32 %139, 0
  br i1 %142, label %149, label %143

143:                                              ; preds = %141
  %144 = sext i32 %139 to i64
  %145 = shl nsw i64 %144, 2
  %146 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %145, i32 noundef 16)
  %147 = load i32, ptr %23, align 4, !tbaa !28
  %148 = load ptr, ptr %14, align 8, !tbaa !27
  br label %149

149:                                              ; preds = %143, %141
  %150 = phi ptr [ %148, %143 ], [ %131, %141 ]
  %151 = phi i32 [ %147, %143 ], [ %129, %141 ]
  %152 = phi ptr [ %146, %143 ], [ null, %141 ]
  %153 = icmp sgt i32 %151, 0
  br i1 %153, label %154, label %213

154:                                              ; preds = %149
  %155 = ptrtoint ptr %150 to i64
  %156 = ptrtoint ptr %152 to i64
  %157 = zext i32 %151 to i64
  %158 = icmp ult i32 %151, 8
  %159 = sub i64 %156, %155
  %160 = icmp ult i64 %159, 32
  %161 = select i1 %158, i1 true, i1 %160
  br i1 %161, label %176, label %162

162:                                              ; preds = %154
  %163 = and i64 %157, 4294967288
  br label %164

164:                                              ; preds = %164, %162
  %165 = phi i64 [ 0, %162 ], [ %172, %164 ]
  %166 = getelementptr inbounds i32, ptr %152, i64 %165
  %167 = getelementptr inbounds i32, ptr %150, i64 %165
  %168 = load <4 x i32>, ptr %167, align 4, !tbaa !184
  %169 = getelementptr inbounds i32, ptr %167, i64 4
  %170 = load <4 x i32>, ptr %169, align 4, !tbaa !184
  store <4 x i32> %168, ptr %166, align 4, !tbaa !184
  %171 = getelementptr inbounds i32, ptr %166, i64 4
  store <4 x i32> %170, ptr %171, align 4, !tbaa !184
  %172 = add nuw i64 %165, 8
  %173 = icmp eq i64 %172, %163
  br i1 %173, label %174, label %164, !llvm.loop !193

174:                                              ; preds = %164
  %175 = icmp eq i64 %163, %157
  br i1 %175, label %218, label %176

176:                                              ; preds = %154, %174
  %177 = phi i64 [ 0, %154 ], [ %163, %174 ]
  %178 = xor i64 %177, -1
  %179 = add nsw i64 %178, %157
  %180 = and i64 %157, 3
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %191, label %182

182:                                              ; preds = %176, %182
  %183 = phi i64 [ %188, %182 ], [ %177, %176 ]
  %184 = phi i64 [ %189, %182 ], [ 0, %176 ]
  %185 = getelementptr inbounds i32, ptr %152, i64 %183
  %186 = getelementptr inbounds i32, ptr %150, i64 %183
  %187 = load i32, ptr %186, align 4, !tbaa !184
  store i32 %187, ptr %185, align 4, !tbaa !184
  %188 = add nuw nsw i64 %183, 1
  %189 = add i64 %184, 1
  %190 = icmp eq i64 %189, %180
  br i1 %190, label %191, label %182, !llvm.loop !194

191:                                              ; preds = %182, %176
  %192 = phi i64 [ %177, %176 ], [ %188, %182 ]
  %193 = icmp ult i64 %179, 3
  br i1 %193, label %218, label %194

194:                                              ; preds = %191, %194
  %195 = phi i64 [ %211, %194 ], [ %192, %191 ]
  %196 = getelementptr inbounds i32, ptr %152, i64 %195
  %197 = getelementptr inbounds i32, ptr %150, i64 %195
  %198 = load i32, ptr %197, align 4, !tbaa !184
  store i32 %198, ptr %196, align 4, !tbaa !184
  %199 = add nuw nsw i64 %195, 1
  %200 = getelementptr inbounds i32, ptr %152, i64 %199
  %201 = getelementptr inbounds i32, ptr %150, i64 %199
  %202 = load i32, ptr %201, align 4, !tbaa !184
  store i32 %202, ptr %200, align 4, !tbaa !184
  %203 = add nuw nsw i64 %195, 2
  %204 = getelementptr inbounds i32, ptr %152, i64 %203
  %205 = getelementptr inbounds i32, ptr %150, i64 %203
  %206 = load i32, ptr %205, align 4, !tbaa !184
  store i32 %206, ptr %204, align 4, !tbaa !184
  %207 = add nuw nsw i64 %195, 3
  %208 = getelementptr inbounds i32, ptr %152, i64 %207
  %209 = getelementptr inbounds i32, ptr %150, i64 %207
  %210 = load i32, ptr %209, align 4, !tbaa !184
  store i32 %210, ptr %208, align 4, !tbaa !184
  %211 = add nuw nsw i64 %195, 4
  %212 = icmp eq i64 %211, %157
  br i1 %212, label %218, label %194, !llvm.loop !195

213:                                              ; preds = %149
  %214 = icmp eq ptr %150, null
  %215 = load i8, ptr %17, align 8
  %216 = icmp eq i8 %215, 0
  %217 = select i1 %214, i1 true, i1 %216
  br i1 %217, label %223, label %221

218:                                              ; preds = %191, %194, %174
  %219 = load i8, ptr %17, align 8, !tbaa !24, !range !191, !noundef !192
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %223, label %221

221:                                              ; preds = %218, %213
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %150)
  %222 = load i32, ptr %23, align 4, !tbaa !28
  br label %223

223:                                              ; preds = %221, %218, %213
  %224 = phi i32 [ %151, %213 ], [ %222, %221 ], [ %151, %218 ]
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr %152, ptr %14, align 8, !tbaa !27
  store i32 %139, ptr %24, align 8, !tbaa !29
  br label %225

225:                                              ; preds = %128, %136, %223
  %226 = phi i32 [ %139, %223 ], [ %129, %136 ], [ %129, %128 ]
  %227 = phi ptr [ %152, %223 ], [ %131, %136 ], [ %131, %128 ]
  %228 = phi i32 [ %224, %223 ], [ %129, %136 ], [ %134, %128 ]
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i32, ptr %227, i64 %229
  store i32 2, ptr %230, align 4, !tbaa !184
  %231 = add nsw i32 %228, 1
  store i32 %231, ptr %23, align 4, !tbaa !28
  %232 = icmp eq i32 %231, %226
  br i1 %232, label %233, label %322

233:                                              ; preds = %225
  %234 = icmp eq i32 %226, 0
  %235 = shl nsw i32 %226, 1
  %236 = select i1 %234, i32 1, i32 %235
  %237 = icmp slt i32 %226, %236
  br i1 %237, label %238, label %322

238:                                              ; preds = %233
  %239 = icmp eq i32 %236, 0
  br i1 %239, label %246, label %240

240:                                              ; preds = %238
  %241 = sext i32 %236 to i64
  %242 = shl nsw i64 %241, 2
  %243 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %242, i32 noundef 16)
  %244 = load i32, ptr %23, align 4, !tbaa !28
  %245 = load ptr, ptr %14, align 8, !tbaa !27
  br label %246

246:                                              ; preds = %240, %238
  %247 = phi ptr [ %245, %240 ], [ %227, %238 ]
  %248 = phi i32 [ %244, %240 ], [ %226, %238 ]
  %249 = phi ptr [ %243, %240 ], [ null, %238 ]
  %250 = icmp sgt i32 %248, 0
  br i1 %250, label %251, label %310

251:                                              ; preds = %246
  %252 = ptrtoint ptr %247 to i64
  %253 = ptrtoint ptr %249 to i64
  %254 = zext i32 %248 to i64
  %255 = icmp ult i32 %248, 8
  %256 = sub i64 %253, %252
  %257 = icmp ult i64 %256, 32
  %258 = select i1 %255, i1 true, i1 %257
  br i1 %258, label %273, label %259

259:                                              ; preds = %251
  %260 = and i64 %254, 4294967288
  br label %261

261:                                              ; preds = %261, %259
  %262 = phi i64 [ 0, %259 ], [ %269, %261 ]
  %263 = getelementptr inbounds i32, ptr %249, i64 %262
  %264 = getelementptr inbounds i32, ptr %247, i64 %262
  %265 = load <4 x i32>, ptr %264, align 4, !tbaa !184
  %266 = getelementptr inbounds i32, ptr %264, i64 4
  %267 = load <4 x i32>, ptr %266, align 4, !tbaa !184
  store <4 x i32> %265, ptr %263, align 4, !tbaa !184
  %268 = getelementptr inbounds i32, ptr %263, i64 4
  store <4 x i32> %267, ptr %268, align 4, !tbaa !184
  %269 = add nuw i64 %262, 8
  %270 = icmp eq i64 %269, %260
  br i1 %270, label %271, label %261, !llvm.loop !196

271:                                              ; preds = %261
  %272 = icmp eq i64 %260, %254
  br i1 %272, label %315, label %273

273:                                              ; preds = %251, %271
  %274 = phi i64 [ 0, %251 ], [ %260, %271 ]
  %275 = xor i64 %274, -1
  %276 = add nsw i64 %275, %254
  %277 = and i64 %254, 3
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %288, label %279

279:                                              ; preds = %273, %279
  %280 = phi i64 [ %285, %279 ], [ %274, %273 ]
  %281 = phi i64 [ %286, %279 ], [ 0, %273 ]
  %282 = getelementptr inbounds i32, ptr %249, i64 %280
  %283 = getelementptr inbounds i32, ptr %247, i64 %280
  %284 = load i32, ptr %283, align 4, !tbaa !184
  store i32 %284, ptr %282, align 4, !tbaa !184
  %285 = add nuw nsw i64 %280, 1
  %286 = add i64 %281, 1
  %287 = icmp eq i64 %286, %277
  br i1 %287, label %288, label %279, !llvm.loop !197

288:                                              ; preds = %279, %273
  %289 = phi i64 [ %274, %273 ], [ %285, %279 ]
  %290 = icmp ult i64 %276, 3
  br i1 %290, label %315, label %291

291:                                              ; preds = %288, %291
  %292 = phi i64 [ %308, %291 ], [ %289, %288 ]
  %293 = getelementptr inbounds i32, ptr %249, i64 %292
  %294 = getelementptr inbounds i32, ptr %247, i64 %292
  %295 = load i32, ptr %294, align 4, !tbaa !184
  store i32 %295, ptr %293, align 4, !tbaa !184
  %296 = add nuw nsw i64 %292, 1
  %297 = getelementptr inbounds i32, ptr %249, i64 %296
  %298 = getelementptr inbounds i32, ptr %247, i64 %296
  %299 = load i32, ptr %298, align 4, !tbaa !184
  store i32 %299, ptr %297, align 4, !tbaa !184
  %300 = add nuw nsw i64 %292, 2
  %301 = getelementptr inbounds i32, ptr %249, i64 %300
  %302 = getelementptr inbounds i32, ptr %247, i64 %300
  %303 = load i32, ptr %302, align 4, !tbaa !184
  store i32 %303, ptr %301, align 4, !tbaa !184
  %304 = add nuw nsw i64 %292, 3
  %305 = getelementptr inbounds i32, ptr %249, i64 %304
  %306 = getelementptr inbounds i32, ptr %247, i64 %304
  %307 = load i32, ptr %306, align 4, !tbaa !184
  store i32 %307, ptr %305, align 4, !tbaa !184
  %308 = add nuw nsw i64 %292, 4
  %309 = icmp eq i64 %308, %254
  br i1 %309, label %315, label %291, !llvm.loop !198

310:                                              ; preds = %246
  %311 = icmp eq ptr %247, null
  %312 = load i8, ptr %17, align 8
  %313 = icmp eq i8 %312, 0
  %314 = select i1 %311, i1 true, i1 %313
  br i1 %314, label %320, label %318

315:                                              ; preds = %288, %291, %271
  %316 = load i8, ptr %17, align 8, !tbaa !24, !range !191, !noundef !192
  %317 = icmp eq i8 %316, 0
  br i1 %317, label %320, label %318

318:                                              ; preds = %315, %310
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %247)
  %319 = load i32, ptr %23, align 4, !tbaa !28
  br label %320

320:                                              ; preds = %318, %315, %310
  %321 = phi i32 [ %248, %310 ], [ %319, %318 ], [ %248, %315 ]
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr %249, ptr %14, align 8, !tbaa !27
  store i32 %236, ptr %24, align 8, !tbaa !29
  br label %322

322:                                              ; preds = %225, %233, %320
  %323 = phi i32 [ %236, %320 ], [ %226, %233 ], [ %226, %225 ]
  %324 = phi ptr [ %249, %320 ], [ %227, %233 ], [ %227, %225 ]
  %325 = phi i32 [ %321, %320 ], [ %226, %233 ], [ %231, %225 ]
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i32, ptr %324, i64 %326
  store i32 3, ptr %327, align 4, !tbaa !184
  %328 = add nsw i32 %325, 1
  store i32 %328, ptr %23, align 4, !tbaa !28
  %329 = icmp eq i32 %328, %323
  br i1 %329, label %330, label %902

330:                                              ; preds = %322
  %331 = icmp eq i32 %323, 0
  %332 = shl nsw i32 %323, 1
  %333 = select i1 %331, i32 1, i32 %332
  %334 = icmp slt i32 %323, %333
  br i1 %334, label %335, label %902

335:                                              ; preds = %330
  %336 = icmp eq i32 %333, 0
  br i1 %336, label %343, label %337

337:                                              ; preds = %335
  %338 = sext i32 %333 to i64
  %339 = shl nsw i64 %338, 2
  %340 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %339, i32 noundef 16)
  %341 = load i32, ptr %23, align 4, !tbaa !28
  %342 = load ptr, ptr %14, align 8, !tbaa !27
  br label %343

343:                                              ; preds = %337, %335
  %344 = phi ptr [ %342, %337 ], [ %324, %335 ]
  %345 = phi i32 [ %341, %337 ], [ %323, %335 ]
  %346 = phi ptr [ %340, %337 ], [ null, %335 ]
  %347 = icmp sgt i32 %345, 0
  br i1 %347, label %348, label %407

348:                                              ; preds = %343
  %349 = ptrtoint ptr %344 to i64
  %350 = ptrtoint ptr %346 to i64
  %351 = zext i32 %345 to i64
  %352 = icmp ult i32 %345, 8
  %353 = sub i64 %350, %349
  %354 = icmp ult i64 %353, 32
  %355 = select i1 %352, i1 true, i1 %354
  br i1 %355, label %370, label %356

356:                                              ; preds = %348
  %357 = and i64 %351, 4294967288
  br label %358

358:                                              ; preds = %358, %356
  %359 = phi i64 [ 0, %356 ], [ %366, %358 ]
  %360 = getelementptr inbounds i32, ptr %346, i64 %359
  %361 = getelementptr inbounds i32, ptr %344, i64 %359
  %362 = load <4 x i32>, ptr %361, align 4, !tbaa !184
  %363 = getelementptr inbounds i32, ptr %361, i64 4
  %364 = load <4 x i32>, ptr %363, align 4, !tbaa !184
  store <4 x i32> %362, ptr %360, align 4, !tbaa !184
  %365 = getelementptr inbounds i32, ptr %360, i64 4
  store <4 x i32> %364, ptr %365, align 4, !tbaa !184
  %366 = add nuw i64 %359, 8
  %367 = icmp eq i64 %366, %357
  br i1 %367, label %368, label %358, !llvm.loop !199

368:                                              ; preds = %358
  %369 = icmp eq i64 %357, %351
  br i1 %369, label %412, label %370

370:                                              ; preds = %348, %368
  %371 = phi i64 [ 0, %348 ], [ %357, %368 ]
  %372 = xor i64 %371, -1
  %373 = add nsw i64 %372, %351
  %374 = and i64 %351, 3
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %385, label %376

376:                                              ; preds = %370, %376
  %377 = phi i64 [ %382, %376 ], [ %371, %370 ]
  %378 = phi i64 [ %383, %376 ], [ 0, %370 ]
  %379 = getelementptr inbounds i32, ptr %346, i64 %377
  %380 = getelementptr inbounds i32, ptr %344, i64 %377
  %381 = load i32, ptr %380, align 4, !tbaa !184
  store i32 %381, ptr %379, align 4, !tbaa !184
  %382 = add nuw nsw i64 %377, 1
  %383 = add i64 %378, 1
  %384 = icmp eq i64 %383, %374
  br i1 %384, label %385, label %376, !llvm.loop !200

385:                                              ; preds = %376, %370
  %386 = phi i64 [ %371, %370 ], [ %382, %376 ]
  %387 = icmp ult i64 %373, 3
  br i1 %387, label %412, label %388

388:                                              ; preds = %385, %388
  %389 = phi i64 [ %405, %388 ], [ %386, %385 ]
  %390 = getelementptr inbounds i32, ptr %346, i64 %389
  %391 = getelementptr inbounds i32, ptr %344, i64 %389
  %392 = load i32, ptr %391, align 4, !tbaa !184
  store i32 %392, ptr %390, align 4, !tbaa !184
  %393 = add nuw nsw i64 %389, 1
  %394 = getelementptr inbounds i32, ptr %346, i64 %393
  %395 = getelementptr inbounds i32, ptr %344, i64 %393
  %396 = load i32, ptr %395, align 4, !tbaa !184
  store i32 %396, ptr %394, align 4, !tbaa !184
  %397 = add nuw nsw i64 %389, 2
  %398 = getelementptr inbounds i32, ptr %346, i64 %397
  %399 = getelementptr inbounds i32, ptr %344, i64 %397
  %400 = load i32, ptr %399, align 4, !tbaa !184
  store i32 %400, ptr %398, align 4, !tbaa !184
  %401 = add nuw nsw i64 %389, 3
  %402 = getelementptr inbounds i32, ptr %346, i64 %401
  %403 = getelementptr inbounds i32, ptr %344, i64 %401
  %404 = load i32, ptr %403, align 4, !tbaa !184
  store i32 %404, ptr %402, align 4, !tbaa !184
  %405 = add nuw nsw i64 %389, 4
  %406 = icmp eq i64 %405, %351
  br i1 %406, label %412, label %388, !llvm.loop !201

407:                                              ; preds = %343
  %408 = icmp eq ptr %344, null
  %409 = load i8, ptr %17, align 8
  %410 = icmp eq i8 %409, 0
  %411 = select i1 %408, i1 true, i1 %410
  br i1 %411, label %417, label %415

412:                                              ; preds = %385, %388, %368
  %413 = load i8, ptr %17, align 8, !tbaa !24, !range !191, !noundef !192
  %414 = icmp eq i8 %413, 0
  br i1 %414, label %417, label %415

415:                                              ; preds = %412, %407
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %344)
  %416 = load i32, ptr %23, align 4, !tbaa !28
  br label %417

417:                                              ; preds = %415, %412, %407
  %418 = phi i32 [ %345, %407 ], [ %416, %415 ], [ %345, %412 ]
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr %346, ptr %14, align 8, !tbaa !27
  store i32 %333, ptr %24, align 8, !tbaa !29
  br label %902

419:                                              ; preds = %33
  %420 = load i32, ptr %12, align 4, !tbaa !22
  %421 = load i32, ptr %13, align 8, !tbaa !23
  %422 = icmp eq i32 %420, %421
  br i1 %422, label %423, label %511

423:                                              ; preds = %419
  %424 = icmp eq i32 %420, 0
  %425 = shl nsw i32 %420, 1
  %426 = select i1 %424, i32 1, i32 %425
  %427 = icmp slt i32 %420, %426
  br i1 %427, label %428, label %511

428:                                              ; preds = %423
  %429 = icmp eq i32 %426, 0
  br i1 %429, label %435, label %430

430:                                              ; preds = %428
  %431 = sext i32 %426 to i64
  %432 = shl nsw i64 %431, 2
  %433 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %432, i32 noundef 16)
  %434 = load i32, ptr %12, align 4, !tbaa !22
  br label %435

435:                                              ; preds = %430, %428
  %436 = phi i32 [ %434, %430 ], [ %420, %428 ]
  %437 = phi ptr [ %433, %430 ], [ null, %428 ]
  %438 = icmp sgt i32 %436, 0
  %439 = load ptr, ptr %3, align 8, !tbaa !21
  br i1 %438, label %440, label %499

440:                                              ; preds = %435
  %441 = ptrtoint ptr %439 to i64
  %442 = ptrtoint ptr %437 to i64
  %443 = zext i32 %436 to i64
  %444 = icmp ult i32 %436, 8
  %445 = sub i64 %442, %441
  %446 = icmp ult i64 %445, 32
  %447 = select i1 %444, i1 true, i1 %446
  br i1 %447, label %462, label %448

448:                                              ; preds = %440
  %449 = and i64 %443, 4294967288
  br label %450

450:                                              ; preds = %450, %448
  %451 = phi i64 [ 0, %448 ], [ %458, %450 ]
  %452 = getelementptr inbounds i32, ptr %437, i64 %451
  %453 = getelementptr inbounds i32, ptr %439, i64 %451
  %454 = load <4 x i32>, ptr %453, align 4, !tbaa !202
  %455 = getelementptr inbounds i32, ptr %453, i64 4
  %456 = load <4 x i32>, ptr %455, align 4, !tbaa !202
  store <4 x i32> %454, ptr %452, align 4, !tbaa !202
  %457 = getelementptr inbounds i32, ptr %452, i64 4
  store <4 x i32> %456, ptr %457, align 4, !tbaa !202
  %458 = add nuw i64 %451, 8
  %459 = icmp eq i64 %458, %449
  br i1 %459, label %460, label %450, !llvm.loop !204

460:                                              ; preds = %450
  %461 = icmp eq i64 %449, %443
  br i1 %461, label %504, label %462

462:                                              ; preds = %440, %460
  %463 = phi i64 [ 0, %440 ], [ %449, %460 ]
  %464 = xor i64 %463, -1
  %465 = add nsw i64 %464, %443
  %466 = and i64 %443, 3
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %477, label %468

468:                                              ; preds = %462, %468
  %469 = phi i64 [ %474, %468 ], [ %463, %462 ]
  %470 = phi i64 [ %475, %468 ], [ 0, %462 ]
  %471 = getelementptr inbounds i32, ptr %437, i64 %469
  %472 = getelementptr inbounds i32, ptr %439, i64 %469
  %473 = load i32, ptr %472, align 4, !tbaa !202
  store i32 %473, ptr %471, align 4, !tbaa !202
  %474 = add nuw nsw i64 %469, 1
  %475 = add i64 %470, 1
  %476 = icmp eq i64 %475, %466
  br i1 %476, label %477, label %468, !llvm.loop !205

477:                                              ; preds = %468, %462
  %478 = phi i64 [ %463, %462 ], [ %474, %468 ]
  %479 = icmp ult i64 %465, 3
  br i1 %479, label %504, label %480

480:                                              ; preds = %477, %480
  %481 = phi i64 [ %497, %480 ], [ %478, %477 ]
  %482 = getelementptr inbounds i32, ptr %437, i64 %481
  %483 = getelementptr inbounds i32, ptr %439, i64 %481
  %484 = load i32, ptr %483, align 4, !tbaa !202
  store i32 %484, ptr %482, align 4, !tbaa !202
  %485 = add nuw nsw i64 %481, 1
  %486 = getelementptr inbounds i32, ptr %437, i64 %485
  %487 = getelementptr inbounds i32, ptr %439, i64 %485
  %488 = load i32, ptr %487, align 4, !tbaa !202
  store i32 %488, ptr %486, align 4, !tbaa !202
  %489 = add nuw nsw i64 %481, 2
  %490 = getelementptr inbounds i32, ptr %437, i64 %489
  %491 = getelementptr inbounds i32, ptr %439, i64 %489
  %492 = load i32, ptr %491, align 4, !tbaa !202
  store i32 %492, ptr %490, align 4, !tbaa !202
  %493 = add nuw nsw i64 %481, 3
  %494 = getelementptr inbounds i32, ptr %437, i64 %493
  %495 = getelementptr inbounds i32, ptr %439, i64 %493
  %496 = load i32, ptr %495, align 4, !tbaa !202
  store i32 %496, ptr %494, align 4, !tbaa !202
  %497 = add nuw nsw i64 %481, 4
  %498 = icmp eq i64 %497, %443
  br i1 %498, label %504, label %480, !llvm.loop !206

499:                                              ; preds = %435
  %500 = icmp eq ptr %439, null
  %501 = load i8, ptr %6, align 8
  %502 = icmp eq i8 %501, 0
  %503 = select i1 %500, i1 true, i1 %502
  br i1 %503, label %509, label %507

504:                                              ; preds = %477, %480, %460
  %505 = load i8, ptr %6, align 8, !tbaa !18, !range !191, !noundef !192
  %506 = icmp eq i8 %505, 0
  br i1 %506, label %509, label %507

507:                                              ; preds = %504, %499
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %439)
  %508 = load i32, ptr %12, align 4, !tbaa !22
  br label %509

509:                                              ; preds = %507, %504, %499
  %510 = phi i32 [ %436, %499 ], [ %508, %507 ], [ %436, %504 ]
  store i8 1, ptr %6, align 8, !tbaa !18
  store ptr %437, ptr %3, align 8, !tbaa !21
  store i32 %426, ptr %13, align 8, !tbaa !23
  br label %511

511:                                              ; preds = %419, %423, %509
  %512 = phi i32 [ %510, %509 ], [ %420, %423 ], [ %420, %419 ]
  %513 = load ptr, ptr %3, align 8, !tbaa !21
  %514 = sext i32 %512 to i64
  %515 = getelementptr inbounds i32, ptr %513, i64 %514
  store i32 0, ptr %515, align 4, !tbaa !202
  %516 = add nsw i32 %512, 1
  store i32 %516, ptr %12, align 4, !tbaa !22
  %517 = load i32, ptr %23, align 4, !tbaa !28
  %518 = load i32, ptr %24, align 8, !tbaa !29
  %519 = icmp eq i32 %517, %518
  br i1 %519, label %520, label %608

520:                                              ; preds = %511
  %521 = icmp eq i32 %517, 0
  %522 = shl nsw i32 %517, 1
  %523 = select i1 %521, i32 1, i32 %522
  %524 = icmp slt i32 %517, %523
  br i1 %524, label %525, label %608

525:                                              ; preds = %520
  %526 = icmp eq i32 %523, 0
  br i1 %526, label %532, label %527

527:                                              ; preds = %525
  %528 = sext i32 %523 to i64
  %529 = shl nsw i64 %528, 2
  %530 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %529, i32 noundef 16)
  %531 = load i32, ptr %23, align 4, !tbaa !28
  br label %532

532:                                              ; preds = %527, %525
  %533 = phi i32 [ %531, %527 ], [ %517, %525 ]
  %534 = phi ptr [ %530, %527 ], [ null, %525 ]
  %535 = icmp sgt i32 %533, 0
  %536 = load ptr, ptr %14, align 8, !tbaa !27
  br i1 %535, label %537, label %596

537:                                              ; preds = %532
  %538 = ptrtoint ptr %536 to i64
  %539 = ptrtoint ptr %534 to i64
  %540 = zext i32 %533 to i64
  %541 = icmp ult i32 %533, 8
  %542 = sub i64 %539, %538
  %543 = icmp ult i64 %542, 32
  %544 = select i1 %541, i1 true, i1 %543
  br i1 %544, label %559, label %545

545:                                              ; preds = %537
  %546 = and i64 %540, 4294967288
  br label %547

547:                                              ; preds = %547, %545
  %548 = phi i64 [ 0, %545 ], [ %555, %547 ]
  %549 = getelementptr inbounds i32, ptr %534, i64 %548
  %550 = getelementptr inbounds i32, ptr %536, i64 %548
  %551 = load <4 x i32>, ptr %550, align 4, !tbaa !184
  %552 = getelementptr inbounds i32, ptr %550, i64 4
  %553 = load <4 x i32>, ptr %552, align 4, !tbaa !184
  store <4 x i32> %551, ptr %549, align 4, !tbaa !184
  %554 = getelementptr inbounds i32, ptr %549, i64 4
  store <4 x i32> %553, ptr %554, align 4, !tbaa !184
  %555 = add nuw i64 %548, 8
  %556 = icmp eq i64 %555, %546
  br i1 %556, label %557, label %547, !llvm.loop !207

557:                                              ; preds = %547
  %558 = icmp eq i64 %546, %540
  br i1 %558, label %601, label %559

559:                                              ; preds = %537, %557
  %560 = phi i64 [ 0, %537 ], [ %546, %557 ]
  %561 = xor i64 %560, -1
  %562 = add nsw i64 %561, %540
  %563 = and i64 %540, 3
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %574, label %565

565:                                              ; preds = %559, %565
  %566 = phi i64 [ %571, %565 ], [ %560, %559 ]
  %567 = phi i64 [ %572, %565 ], [ 0, %559 ]
  %568 = getelementptr inbounds i32, ptr %534, i64 %566
  %569 = getelementptr inbounds i32, ptr %536, i64 %566
  %570 = load i32, ptr %569, align 4, !tbaa !184
  store i32 %570, ptr %568, align 4, !tbaa !184
  %571 = add nuw nsw i64 %566, 1
  %572 = add i64 %567, 1
  %573 = icmp eq i64 %572, %563
  br i1 %573, label %574, label %565, !llvm.loop !208

574:                                              ; preds = %565, %559
  %575 = phi i64 [ %560, %559 ], [ %571, %565 ]
  %576 = icmp ult i64 %562, 3
  br i1 %576, label %601, label %577

577:                                              ; preds = %574, %577
  %578 = phi i64 [ %594, %577 ], [ %575, %574 ]
  %579 = getelementptr inbounds i32, ptr %534, i64 %578
  %580 = getelementptr inbounds i32, ptr %536, i64 %578
  %581 = load i32, ptr %580, align 4, !tbaa !184
  store i32 %581, ptr %579, align 4, !tbaa !184
  %582 = add nuw nsw i64 %578, 1
  %583 = getelementptr inbounds i32, ptr %534, i64 %582
  %584 = getelementptr inbounds i32, ptr %536, i64 %582
  %585 = load i32, ptr %584, align 4, !tbaa !184
  store i32 %585, ptr %583, align 4, !tbaa !184
  %586 = add nuw nsw i64 %578, 2
  %587 = getelementptr inbounds i32, ptr %534, i64 %586
  %588 = getelementptr inbounds i32, ptr %536, i64 %586
  %589 = load i32, ptr %588, align 4, !tbaa !184
  store i32 %589, ptr %587, align 4, !tbaa !184
  %590 = add nuw nsw i64 %578, 3
  %591 = getelementptr inbounds i32, ptr %534, i64 %590
  %592 = getelementptr inbounds i32, ptr %536, i64 %590
  %593 = load i32, ptr %592, align 4, !tbaa !184
  store i32 %593, ptr %591, align 4, !tbaa !184
  %594 = add nuw nsw i64 %578, 4
  %595 = icmp eq i64 %594, %540
  br i1 %595, label %601, label %577, !llvm.loop !209

596:                                              ; preds = %532
  %597 = icmp eq ptr %536, null
  %598 = load i8, ptr %17, align 8
  %599 = icmp eq i8 %598, 0
  %600 = select i1 %597, i1 true, i1 %599
  br i1 %600, label %606, label %604

601:                                              ; preds = %574, %577, %557
  %602 = load i8, ptr %17, align 8, !tbaa !24, !range !191, !noundef !192
  %603 = icmp eq i8 %602, 0
  br i1 %603, label %606, label %604

604:                                              ; preds = %601, %596
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %536)
  %605 = load i32, ptr %23, align 4, !tbaa !28
  br label %606

606:                                              ; preds = %604, %601, %596
  %607 = phi i32 [ %533, %596 ], [ %605, %604 ], [ %533, %601 ]
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr %534, ptr %14, align 8, !tbaa !27
  store i32 %523, ptr %24, align 8, !tbaa !29
  br label %608

608:                                              ; preds = %511, %520, %606
  %609 = phi i32 [ %523, %606 ], [ %517, %520 ], [ %518, %511 ]
  %610 = phi i32 [ %607, %606 ], [ %517, %520 ], [ %517, %511 ]
  %611 = load ptr, ptr %14, align 8, !tbaa !27
  %612 = sext i32 %610 to i64
  %613 = getelementptr inbounds i32, ptr %611, i64 %612
  store i32 1, ptr %613, align 4, !tbaa !184
  %614 = add nsw i32 %610, 1
  store i32 %614, ptr %23, align 4, !tbaa !28
  %615 = icmp eq i32 %614, %609
  br i1 %615, label %616, label %705

616:                                              ; preds = %608
  %617 = icmp eq i32 %609, 0
  %618 = shl nsw i32 %609, 1
  %619 = select i1 %617, i32 1, i32 %618
  %620 = icmp slt i32 %609, %619
  br i1 %620, label %621, label %705

621:                                              ; preds = %616
  %622 = icmp eq i32 %619, 0
  br i1 %622, label %629, label %623

623:                                              ; preds = %621
  %624 = sext i32 %619 to i64
  %625 = shl nsw i64 %624, 2
  %626 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %625, i32 noundef 16)
  %627 = load i32, ptr %23, align 4, !tbaa !28
  %628 = load ptr, ptr %14, align 8, !tbaa !27
  br label %629

629:                                              ; preds = %623, %621
  %630 = phi ptr [ %628, %623 ], [ %611, %621 ]
  %631 = phi i32 [ %627, %623 ], [ %609, %621 ]
  %632 = phi ptr [ %626, %623 ], [ null, %621 ]
  %633 = icmp sgt i32 %631, 0
  br i1 %633, label %634, label %693

634:                                              ; preds = %629
  %635 = ptrtoint ptr %630 to i64
  %636 = ptrtoint ptr %632 to i64
  %637 = zext i32 %631 to i64
  %638 = icmp ult i32 %631, 8
  %639 = sub i64 %636, %635
  %640 = icmp ult i64 %639, 32
  %641 = select i1 %638, i1 true, i1 %640
  br i1 %641, label %656, label %642

642:                                              ; preds = %634
  %643 = and i64 %637, 4294967288
  br label %644

644:                                              ; preds = %644, %642
  %645 = phi i64 [ 0, %642 ], [ %652, %644 ]
  %646 = getelementptr inbounds i32, ptr %632, i64 %645
  %647 = getelementptr inbounds i32, ptr %630, i64 %645
  %648 = load <4 x i32>, ptr %647, align 4, !tbaa !184
  %649 = getelementptr inbounds i32, ptr %647, i64 4
  %650 = load <4 x i32>, ptr %649, align 4, !tbaa !184
  store <4 x i32> %648, ptr %646, align 4, !tbaa !184
  %651 = getelementptr inbounds i32, ptr %646, i64 4
  store <4 x i32> %650, ptr %651, align 4, !tbaa !184
  %652 = add nuw i64 %645, 8
  %653 = icmp eq i64 %652, %643
  br i1 %653, label %654, label %644, !llvm.loop !210

654:                                              ; preds = %644
  %655 = icmp eq i64 %643, %637
  br i1 %655, label %698, label %656

656:                                              ; preds = %634, %654
  %657 = phi i64 [ 0, %634 ], [ %643, %654 ]
  %658 = xor i64 %657, -1
  %659 = add nsw i64 %658, %637
  %660 = and i64 %637, 3
  %661 = icmp eq i64 %660, 0
  br i1 %661, label %671, label %662

662:                                              ; preds = %656, %662
  %663 = phi i64 [ %668, %662 ], [ %657, %656 ]
  %664 = phi i64 [ %669, %662 ], [ 0, %656 ]
  %665 = getelementptr inbounds i32, ptr %632, i64 %663
  %666 = getelementptr inbounds i32, ptr %630, i64 %663
  %667 = load i32, ptr %666, align 4, !tbaa !184
  store i32 %667, ptr %665, align 4, !tbaa !184
  %668 = add nuw nsw i64 %663, 1
  %669 = add i64 %664, 1
  %670 = icmp eq i64 %669, %660
  br i1 %670, label %671, label %662, !llvm.loop !211

671:                                              ; preds = %662, %656
  %672 = phi i64 [ %657, %656 ], [ %668, %662 ]
  %673 = icmp ult i64 %659, 3
  br i1 %673, label %698, label %674

674:                                              ; preds = %671, %674
  %675 = phi i64 [ %691, %674 ], [ %672, %671 ]
  %676 = getelementptr inbounds i32, ptr %632, i64 %675
  %677 = getelementptr inbounds i32, ptr %630, i64 %675
  %678 = load i32, ptr %677, align 4, !tbaa !184
  store i32 %678, ptr %676, align 4, !tbaa !184
  %679 = add nuw nsw i64 %675, 1
  %680 = getelementptr inbounds i32, ptr %632, i64 %679
  %681 = getelementptr inbounds i32, ptr %630, i64 %679
  %682 = load i32, ptr %681, align 4, !tbaa !184
  store i32 %682, ptr %680, align 4, !tbaa !184
  %683 = add nuw nsw i64 %675, 2
  %684 = getelementptr inbounds i32, ptr %632, i64 %683
  %685 = getelementptr inbounds i32, ptr %630, i64 %683
  %686 = load i32, ptr %685, align 4, !tbaa !184
  store i32 %686, ptr %684, align 4, !tbaa !184
  %687 = add nuw nsw i64 %675, 3
  %688 = getelementptr inbounds i32, ptr %632, i64 %687
  %689 = getelementptr inbounds i32, ptr %630, i64 %687
  %690 = load i32, ptr %689, align 4, !tbaa !184
  store i32 %690, ptr %688, align 4, !tbaa !184
  %691 = add nuw nsw i64 %675, 4
  %692 = icmp eq i64 %691, %637
  br i1 %692, label %698, label %674, !llvm.loop !212

693:                                              ; preds = %629
  %694 = icmp eq ptr %630, null
  %695 = load i8, ptr %17, align 8
  %696 = icmp eq i8 %695, 0
  %697 = select i1 %694, i1 true, i1 %696
  br i1 %697, label %703, label %701

698:                                              ; preds = %671, %674, %654
  %699 = load i8, ptr %17, align 8, !tbaa !24, !range !191, !noundef !192
  %700 = icmp eq i8 %699, 0
  br i1 %700, label %703, label %701

701:                                              ; preds = %698, %693
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %630)
  %702 = load i32, ptr %23, align 4, !tbaa !28
  br label %703

703:                                              ; preds = %701, %698, %693
  %704 = phi i32 [ %631, %693 ], [ %702, %701 ], [ %631, %698 ]
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr %632, ptr %14, align 8, !tbaa !27
  store i32 %619, ptr %24, align 8, !tbaa !29
  br label %705

705:                                              ; preds = %608, %616, %703
  %706 = phi i32 [ %619, %703 ], [ %609, %616 ], [ %609, %608 ]
  %707 = phi ptr [ %632, %703 ], [ %611, %616 ], [ %611, %608 ]
  %708 = phi i32 [ %704, %703 ], [ %609, %616 ], [ %614, %608 ]
  %709 = sext i32 %708 to i64
  %710 = getelementptr inbounds i32, ptr %707, i64 %709
  store i32 2, ptr %710, align 4, !tbaa !184
  %711 = add nsw i32 %708, 1
  store i32 %711, ptr %23, align 4, !tbaa !28
  %712 = icmp eq i32 %711, %706
  br i1 %712, label %713, label %802

713:                                              ; preds = %705
  %714 = icmp eq i32 %706, 0
  %715 = shl nsw i32 %706, 1
  %716 = select i1 %714, i32 1, i32 %715
  %717 = icmp slt i32 %706, %716
  br i1 %717, label %718, label %802

718:                                              ; preds = %713
  %719 = icmp eq i32 %716, 0
  br i1 %719, label %726, label %720

720:                                              ; preds = %718
  %721 = sext i32 %716 to i64
  %722 = shl nsw i64 %721, 2
  %723 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %722, i32 noundef 16)
  %724 = load i32, ptr %23, align 4, !tbaa !28
  %725 = load ptr, ptr %14, align 8, !tbaa !27
  br label %726

726:                                              ; preds = %720, %718
  %727 = phi ptr [ %725, %720 ], [ %707, %718 ]
  %728 = phi i32 [ %724, %720 ], [ %706, %718 ]
  %729 = phi ptr [ %723, %720 ], [ null, %718 ]
  %730 = icmp sgt i32 %728, 0
  br i1 %730, label %731, label %790

731:                                              ; preds = %726
  %732 = ptrtoint ptr %727 to i64
  %733 = ptrtoint ptr %729 to i64
  %734 = zext i32 %728 to i64
  %735 = icmp ult i32 %728, 8
  %736 = sub i64 %733, %732
  %737 = icmp ult i64 %736, 32
  %738 = select i1 %735, i1 true, i1 %737
  br i1 %738, label %753, label %739

739:                                              ; preds = %731
  %740 = and i64 %734, 4294967288
  br label %741

741:                                              ; preds = %741, %739
  %742 = phi i64 [ 0, %739 ], [ %749, %741 ]
  %743 = getelementptr inbounds i32, ptr %729, i64 %742
  %744 = getelementptr inbounds i32, ptr %727, i64 %742
  %745 = load <4 x i32>, ptr %744, align 4, !tbaa !184
  %746 = getelementptr inbounds i32, ptr %744, i64 4
  %747 = load <4 x i32>, ptr %746, align 4, !tbaa !184
  store <4 x i32> %745, ptr %743, align 4, !tbaa !184
  %748 = getelementptr inbounds i32, ptr %743, i64 4
  store <4 x i32> %747, ptr %748, align 4, !tbaa !184
  %749 = add nuw i64 %742, 8
  %750 = icmp eq i64 %749, %740
  br i1 %750, label %751, label %741, !llvm.loop !213

751:                                              ; preds = %741
  %752 = icmp eq i64 %740, %734
  br i1 %752, label %795, label %753

753:                                              ; preds = %731, %751
  %754 = phi i64 [ 0, %731 ], [ %740, %751 ]
  %755 = xor i64 %754, -1
  %756 = add nsw i64 %755, %734
  %757 = and i64 %734, 3
  %758 = icmp eq i64 %757, 0
  br i1 %758, label %768, label %759

759:                                              ; preds = %753, %759
  %760 = phi i64 [ %765, %759 ], [ %754, %753 ]
  %761 = phi i64 [ %766, %759 ], [ 0, %753 ]
  %762 = getelementptr inbounds i32, ptr %729, i64 %760
  %763 = getelementptr inbounds i32, ptr %727, i64 %760
  %764 = load i32, ptr %763, align 4, !tbaa !184
  store i32 %764, ptr %762, align 4, !tbaa !184
  %765 = add nuw nsw i64 %760, 1
  %766 = add i64 %761, 1
  %767 = icmp eq i64 %766, %757
  br i1 %767, label %768, label %759, !llvm.loop !214

768:                                              ; preds = %759, %753
  %769 = phi i64 [ %754, %753 ], [ %765, %759 ]
  %770 = icmp ult i64 %756, 3
  br i1 %770, label %795, label %771

771:                                              ; preds = %768, %771
  %772 = phi i64 [ %788, %771 ], [ %769, %768 ]
  %773 = getelementptr inbounds i32, ptr %729, i64 %772
  %774 = getelementptr inbounds i32, ptr %727, i64 %772
  %775 = load i32, ptr %774, align 4, !tbaa !184
  store i32 %775, ptr %773, align 4, !tbaa !184
  %776 = add nuw nsw i64 %772, 1
  %777 = getelementptr inbounds i32, ptr %729, i64 %776
  %778 = getelementptr inbounds i32, ptr %727, i64 %776
  %779 = load i32, ptr %778, align 4, !tbaa !184
  store i32 %779, ptr %777, align 4, !tbaa !184
  %780 = add nuw nsw i64 %772, 2
  %781 = getelementptr inbounds i32, ptr %729, i64 %780
  %782 = getelementptr inbounds i32, ptr %727, i64 %780
  %783 = load i32, ptr %782, align 4, !tbaa !184
  store i32 %783, ptr %781, align 4, !tbaa !184
  %784 = add nuw nsw i64 %772, 3
  %785 = getelementptr inbounds i32, ptr %729, i64 %784
  %786 = getelementptr inbounds i32, ptr %727, i64 %784
  %787 = load i32, ptr %786, align 4, !tbaa !184
  store i32 %787, ptr %785, align 4, !tbaa !184
  %788 = add nuw nsw i64 %772, 4
  %789 = icmp eq i64 %788, %734
  br i1 %789, label %795, label %771, !llvm.loop !215

790:                                              ; preds = %726
  %791 = icmp eq ptr %727, null
  %792 = load i8, ptr %17, align 8
  %793 = icmp eq i8 %792, 0
  %794 = select i1 %791, i1 true, i1 %793
  br i1 %794, label %800, label %798

795:                                              ; preds = %768, %771, %751
  %796 = load i8, ptr %17, align 8, !tbaa !24, !range !191, !noundef !192
  %797 = icmp eq i8 %796, 0
  br i1 %797, label %800, label %798

798:                                              ; preds = %795, %790
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %727)
  %799 = load i32, ptr %23, align 4, !tbaa !28
  br label %800

800:                                              ; preds = %798, %795, %790
  %801 = phi i32 [ %728, %790 ], [ %799, %798 ], [ %728, %795 ]
  store i8 1, ptr %17, align 8, !tbaa !24
  store ptr %729, ptr %14, align 8, !tbaa !27
  store i32 %716, ptr %24, align 8, !tbaa !29
  br label %802

802:                                              ; preds = %705, %713, %800
  %803 = phi ptr [ %729, %800 ], [ %707, %713 ], [ %707, %705 ]
  %804 = phi i32 [ %801, %800 ], [ %706, %713 ], [ %711, %705 ]
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds i32, ptr %803, i64 %805
  store i32 3, ptr %806, align 4, !tbaa !184
  %807 = add nsw i32 %804, 1
  store i32 %807, ptr %23, align 4, !tbaa !28
  %808 = load i32, ptr %34, align 4, !tbaa !28
  %809 = load i32, ptr %35, align 8, !tbaa !29
  %810 = icmp eq i32 %808, %809
  br i1 %810, label %811, label %899

811:                                              ; preds = %802
  %812 = icmp eq i32 %808, 0
  %813 = shl nsw i32 %808, 1
  %814 = select i1 %812, i32 1, i32 %813
  %815 = icmp slt i32 %808, %814
  br i1 %815, label %816, label %899

816:                                              ; preds = %811
  %817 = icmp eq i32 %814, 0
  br i1 %817, label %823, label %818

818:                                              ; preds = %816
  %819 = sext i32 %814 to i64
  %820 = shl nsw i64 %819, 2
  %821 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %820, i32 noundef 16)
  %822 = load i32, ptr %34, align 4, !tbaa !28
  br label %823

823:                                              ; preds = %818, %816
  %824 = phi i32 [ %822, %818 ], [ %808, %816 ]
  %825 = phi ptr [ %821, %818 ], [ null, %816 ]
  %826 = icmp sgt i32 %824, 0
  %827 = load ptr, ptr %25, align 8, !tbaa !27
  br i1 %826, label %828, label %887

828:                                              ; preds = %823
  %829 = ptrtoint ptr %827 to i64
  %830 = ptrtoint ptr %825 to i64
  %831 = zext i32 %824 to i64
  %832 = icmp ult i32 %824, 8
  %833 = sub i64 %830, %829
  %834 = icmp ult i64 %833, 32
  %835 = select i1 %832, i1 true, i1 %834
  br i1 %835, label %850, label %836

836:                                              ; preds = %828
  %837 = and i64 %831, 4294967288
  br label %838

838:                                              ; preds = %838, %836
  %839 = phi i64 [ 0, %836 ], [ %846, %838 ]
  %840 = getelementptr inbounds i32, ptr %825, i64 %839
  %841 = getelementptr inbounds i32, ptr %827, i64 %839
  %842 = load <4 x i32>, ptr %841, align 4, !tbaa !184
  %843 = getelementptr inbounds i32, ptr %841, i64 4
  %844 = load <4 x i32>, ptr %843, align 4, !tbaa !184
  store <4 x i32> %842, ptr %840, align 4, !tbaa !184
  %845 = getelementptr inbounds i32, ptr %840, i64 4
  store <4 x i32> %844, ptr %845, align 4, !tbaa !184
  %846 = add nuw i64 %839, 8
  %847 = icmp eq i64 %846, %837
  br i1 %847, label %848, label %838, !llvm.loop !216

848:                                              ; preds = %838
  %849 = icmp eq i64 %837, %831
  br i1 %849, label %892, label %850

850:                                              ; preds = %828, %848
  %851 = phi i64 [ 0, %828 ], [ %837, %848 ]
  %852 = xor i64 %851, -1
  %853 = add nsw i64 %852, %831
  %854 = and i64 %831, 3
  %855 = icmp eq i64 %854, 0
  br i1 %855, label %865, label %856

856:                                              ; preds = %850, %856
  %857 = phi i64 [ %862, %856 ], [ %851, %850 ]
  %858 = phi i64 [ %863, %856 ], [ 0, %850 ]
  %859 = getelementptr inbounds i32, ptr %825, i64 %857
  %860 = getelementptr inbounds i32, ptr %827, i64 %857
  %861 = load i32, ptr %860, align 4, !tbaa !184
  store i32 %861, ptr %859, align 4, !tbaa !184
  %862 = add nuw nsw i64 %857, 1
  %863 = add i64 %858, 1
  %864 = icmp eq i64 %863, %854
  br i1 %864, label %865, label %856, !llvm.loop !217

865:                                              ; preds = %856, %850
  %866 = phi i64 [ %851, %850 ], [ %862, %856 ]
  %867 = icmp ult i64 %853, 3
  br i1 %867, label %892, label %868

868:                                              ; preds = %865, %868
  %869 = phi i64 [ %885, %868 ], [ %866, %865 ]
  %870 = getelementptr inbounds i32, ptr %825, i64 %869
  %871 = getelementptr inbounds i32, ptr %827, i64 %869
  %872 = load i32, ptr %871, align 4, !tbaa !184
  store i32 %872, ptr %870, align 4, !tbaa !184
  %873 = add nuw nsw i64 %869, 1
  %874 = getelementptr inbounds i32, ptr %825, i64 %873
  %875 = getelementptr inbounds i32, ptr %827, i64 %873
  %876 = load i32, ptr %875, align 4, !tbaa !184
  store i32 %876, ptr %874, align 4, !tbaa !184
  %877 = add nuw nsw i64 %869, 2
  %878 = getelementptr inbounds i32, ptr %825, i64 %877
  %879 = getelementptr inbounds i32, ptr %827, i64 %877
  %880 = load i32, ptr %879, align 4, !tbaa !184
  store i32 %880, ptr %878, align 4, !tbaa !184
  %881 = add nuw nsw i64 %869, 3
  %882 = getelementptr inbounds i32, ptr %825, i64 %881
  %883 = getelementptr inbounds i32, ptr %827, i64 %881
  %884 = load i32, ptr %883, align 4, !tbaa !184
  store i32 %884, ptr %882, align 4, !tbaa !184
  %885 = add nuw nsw i64 %869, 4
  %886 = icmp eq i64 %885, %831
  br i1 %886, label %892, label %868, !llvm.loop !218

887:                                              ; preds = %823
  %888 = icmp eq ptr %827, null
  %889 = load i8, ptr %28, align 8
  %890 = icmp eq i8 %889, 0
  %891 = select i1 %888, i1 true, i1 %890
  br i1 %891, label %897, label %895

892:                                              ; preds = %865, %868, %848
  %893 = load i8, ptr %28, align 8, !tbaa !24, !range !191, !noundef !192
  %894 = icmp eq i8 %893, 0
  br i1 %894, label %897, label %895

895:                                              ; preds = %892, %887
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %827)
  %896 = load i32, ptr %34, align 4, !tbaa !28
  br label %897

897:                                              ; preds = %895, %892, %887
  %898 = phi i32 [ %824, %887 ], [ %896, %895 ], [ %824, %892 ]
  store i8 1, ptr %28, align 8, !tbaa !24
  store ptr %825, ptr %25, align 8, !tbaa !27
  store i32 %814, ptr %35, align 8, !tbaa !29
  br label %899

899:                                              ; preds = %802, %811, %897
  %900 = phi i32 [ %898, %897 ], [ %808, %811 ], [ %808, %802 ]
  %901 = load ptr, ptr %25, align 8, !tbaa !27
  br label %902

902:                                              ; preds = %417, %330, %322, %899
  %903 = phi i32 [ %900, %899 ], [ %418, %417 ], [ %323, %330 ], [ %328, %322 ]
  %904 = phi ptr [ %901, %899 ], [ %346, %417 ], [ %324, %330 ], [ %324, %322 ]
  %905 = phi ptr [ %34, %899 ], [ %23, %417 ], [ %23, %330 ], [ %23, %322 ]
  %906 = sext i32 %903 to i64
  %907 = getelementptr inbounds i32, ptr %904, i64 %906
  store i32 0, ptr %907, align 4, !tbaa !184
  %908 = add nsw i32 %903, 1
  store i32 %908, ptr %905, align 4, !tbaa !28
  br label %909

909:                                              ; preds = %902, %33
  ret void
}

; Function Attrs: uwtable
define dso_local noundef ptr @_ZN10btSoftBody14appendMaterialEv(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  %2 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 24, i32 noundef 16)
  store ptr null, ptr %2, align 8, !tbaa !173
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !120
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !119
  %9 = load ptr, ptr %8, align 8, !tbaa !219
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %2, ptr noundef nonnull align 8 dereferenceable(24) %9, i64 24, i1 false)
  br label %19

10:                                               ; preds = %1
  %11 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy acquire, align 8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %18, !prof !172

13:                                               ; preds = %10
  %14 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy) #38
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %13
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy, align 8, !tbaa !173
  %17 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy) #38
  br label %18

18:                                               ; preds = %10, %13, %16
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %2, ptr noundef nonnull align 8 dereferenceable(24) @_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy, i64 24, i1 false)
  br label %19

19:                                               ; preds = %18, %6
  %20 = load i32, ptr %3, align 4, !tbaa !120
  %21 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 3
  %22 = load i32, ptr %21, align 8, !tbaa !121
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %24, label %97

24:                                               ; preds = %19
  %25 = icmp eq i32 %20, 0
  %26 = shl nsw i32 %20, 1
  %27 = select i1 %25, i32 1, i32 %26
  %28 = icmp slt i32 %20, %27
  br i1 %28, label %29, label %97

29:                                               ; preds = %24
  %30 = icmp eq i32 %27, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %29
  %32 = sext i32 %27 to i64
  %33 = shl nsw i64 %32, 3
  %34 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %33, i32 noundef 16)
  %35 = load i32, ptr %3, align 4, !tbaa !120
  br label %36

36:                                               ; preds = %31, %29
  %37 = phi i32 [ %35, %31 ], [ %20, %29 ]
  %38 = phi ptr [ %34, %31 ], [ null, %29 ]
  %39 = icmp sgt i32 %37, 0
  br i1 %39, label %40, label %85

40:                                               ; preds = %36
  %41 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %42 = zext i32 %37 to i64
  %43 = and i64 %42, 3
  %44 = icmp ult i32 %37, 4
  br i1 %44, label %72, label %45

45:                                               ; preds = %40
  %46 = and i64 %42, 4294967292
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %69, %47 ]
  %49 = phi i64 [ 0, %45 ], [ %70, %47 ]
  %50 = getelementptr inbounds ptr, ptr %38, i64 %48
  %51 = load ptr, ptr %41, align 8, !tbaa !119
  %52 = getelementptr inbounds ptr, ptr %51, i64 %48
  %53 = load ptr, ptr %52, align 8, !tbaa !219
  store ptr %53, ptr %50, align 8, !tbaa !219
  %54 = or i64 %48, 1
  %55 = getelementptr inbounds ptr, ptr %38, i64 %54
  %56 = load ptr, ptr %41, align 8, !tbaa !119
  %57 = getelementptr inbounds ptr, ptr %56, i64 %54
  %58 = load ptr, ptr %57, align 8, !tbaa !219
  store ptr %58, ptr %55, align 8, !tbaa !219
  %59 = or i64 %48, 2
  %60 = getelementptr inbounds ptr, ptr %38, i64 %59
  %61 = load ptr, ptr %41, align 8, !tbaa !119
  %62 = getelementptr inbounds ptr, ptr %61, i64 %59
  %63 = load ptr, ptr %62, align 8, !tbaa !219
  store ptr %63, ptr %60, align 8, !tbaa !219
  %64 = or i64 %48, 3
  %65 = getelementptr inbounds ptr, ptr %38, i64 %64
  %66 = load ptr, ptr %41, align 8, !tbaa !119
  %67 = getelementptr inbounds ptr, ptr %66, i64 %64
  %68 = load ptr, ptr %67, align 8, !tbaa !219
  store ptr %68, ptr %65, align 8, !tbaa !219
  %69 = add nuw nsw i64 %48, 4
  %70 = add i64 %49, 4
  %71 = icmp eq i64 %70, %46
  br i1 %71, label %72, label %47

72:                                               ; preds = %47, %40
  %73 = phi i64 [ 0, %40 ], [ %69, %47 ]
  %74 = icmp eq i64 %43, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %72, %75
  %76 = phi i64 [ %82, %75 ], [ %73, %72 ]
  %77 = phi i64 [ %83, %75 ], [ 0, %72 ]
  %78 = getelementptr inbounds ptr, ptr %38, i64 %76
  %79 = load ptr, ptr %41, align 8, !tbaa !119
  %80 = getelementptr inbounds ptr, ptr %79, i64 %76
  %81 = load ptr, ptr %80, align 8, !tbaa !219
  store ptr %81, ptr %78, align 8, !tbaa !219
  %82 = add nuw nsw i64 %76, 1
  %83 = add i64 %77, 1
  %84 = icmp eq i64 %83, %43
  br i1 %84, label %85, label %75, !llvm.loop !220

85:                                               ; preds = %72, %75, %36
  %86 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %87 = load ptr, ptr %86, align 8, !tbaa !119
  %88 = icmp eq ptr %87, null
  %89 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 6
  %90 = load i8, ptr %89, align 8
  %91 = icmp eq i8 %90, 0
  %92 = select i1 %88, i1 true, i1 %91
  br i1 %92, label %95, label %93

93:                                               ; preds = %85
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %87)
  %94 = load i32, ptr %3, align 4, !tbaa !120
  br label %95

95:                                               ; preds = %93, %85
  %96 = phi i32 [ %94, %93 ], [ %37, %85 ]
  store i8 1, ptr %89, align 8, !tbaa !118
  store ptr %38, ptr %86, align 8, !tbaa !119
  store i32 %27, ptr %21, align 8, !tbaa !121
  br label %97

97:                                               ; preds = %19, %24, %95
  %98 = phi i32 [ %96, %95 ], [ %20, %24 ], [ %20, %19 ]
  %99 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %100 = load ptr, ptr %99, align 8, !tbaa !119
  %101 = sext i32 %98 to i64
  %102 = getelementptr inbounds ptr, ptr %100, i64 %101
  store ptr %2, ptr %102, align 8, !tbaa !219
  %103 = add nsw i32 %98, 1
  store i32 %103, ptr %3, align 4, !tbaa !120
  ret ptr %2
}

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull ptr @_Znwm(i64 noundef) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(ptr noundef) local_unnamed_addr #6

declare noundef ptr @_ZN6btDbvt6insertERK12btDbvtAabbMmPv(ptr noundef nonnull align 8 dereferenceable(64), ptr noundef nonnull align 4 dereferenceable(32), ptr noundef) local_unnamed_addr #1

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody12updateBoundsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %3 = load ptr, ptr %2, align 8, !tbaa !161
  %4 = icmp eq ptr %3, null
  br i1 %4, label %44, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %3, i64 0, i32 1
  %7 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %8 = load ptr, ptr %7, align 8, !tbaa !157
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = getelementptr inbounds ptr, ptr %9, i64 11
  %11 = load ptr, ptr %10, align 8
  %12 = tail call noundef float %11(ptr noundef nonnull align 8 dereferenceable(24) %8)
  %13 = load <2 x float>, ptr %3, align 4, !tbaa !137
  %14 = insertelement <2 x float> poison, float %12, i64 0
  %15 = shufflevector <2 x float> %14, <2 x float> poison, <2 x i32> zeroinitializer
  %16 = fsub <2 x float> %13, %15
  %17 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  %18 = load float, ptr %17, align 4, !tbaa !137
  %19 = fsub float %18, %12
  %20 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %19, i64 0
  %21 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  store <2 x float> %16, ptr %21, align 4, !tbaa.struct !162
  %22 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 0, i32 0, i64 2
  store <2 x float> %20, ptr %22, align 4, !tbaa.struct !164
  %23 = load <2 x float>, ptr %6, align 4, !tbaa !137
  %24 = fadd <2 x float> %15, %23
  %25 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %3, i64 0, i32 1, i32 0, i64 2
  %26 = load float, ptr %25, align 4, !tbaa !137
  %27 = fadd float %12, %26
  %28 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %27, i64 0
  %29 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1
  store <2 x float> %24, ptr %29, align 4, !tbaa.struct !162
  %30 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1, i32 0, i64 2
  store <2 x float> %28, ptr %30, align 4, !tbaa.struct !164
  %31 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 8
  %32 = load ptr, ptr %31, align 8, !tbaa !165
  %33 = icmp eq ptr %32, null
  br i1 %33, label %46, label %34

34:                                               ; preds = %5
  %35 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  %36 = load ptr, ptr %35, align 8, !tbaa !42
  %37 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %36, i64 0, i32 4
  %38 = load ptr, ptr %37, align 8, !tbaa !166
  %39 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %36, i64 0, i32 5
  %40 = load ptr, ptr %39, align 8, !tbaa !171
  %41 = load ptr, ptr %38, align 8, !tbaa !5
  %42 = getelementptr inbounds ptr, ptr %41, i64 4
  %43 = load ptr, ptr %42, align 8
  tail call void %43(ptr noundef nonnull align 8 dereferenceable(8) %38, ptr noundef nonnull %32, ptr noundef nonnull align 4 dereferenceable(16) %21, ptr noundef nonnull align 4 dereferenceable(16) %29, ptr noundef %40)
  br label %46

44:                                               ; preds = %1
  %45 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %45, i8 0, i64 32, i1 false)
  br label %46

46:                                               ; preds = %5, %34, %44
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIiED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !131
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !130
  store ptr null, ptr %2, align 8, !tbaa !131
  store i32 0, ptr %11, align 4, !tbaa !132
  %12 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !133
  ret void
}

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(ptr noundef %0) local_unnamed_addr #7 comdat {
  %2 = tail call ptr @__cxa_begin_catch(ptr %0) #38
  tail call void @_ZSt9terminatev() #39
  unreachable
}

declare ptr @__cxa_begin_catch(ptr) local_unnamed_addr

declare void @_ZSt9terminatev() local_unnamed_addr

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIbED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.76, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !127
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.76, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.76, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !126
  store ptr null, ptr %2, align 8, !tbaa !127
  store i32 0, ptr %11, align 4, !tbaa !128
  %12 = getelementptr inbounds %class.btAlignedObjectArray.76, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !129
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.72, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !123
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.72, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.72, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !122
  store ptr null, ptr %2, align 8, !tbaa !123
  store i32 0, ptr %11, align 4, !tbaa !124
  %12 = getelementptr inbounds %class.btAlignedObjectArray.72, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !125
  ret void
}

declare void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64)) unnamed_addr #1

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.64, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !119
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.64, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.64, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !118
  store ptr null, ptr %2, align 8, !tbaa !119
  store i32 0, ptr %11, align 4, !tbaa !120
  %12 = getelementptr inbounds %class.btAlignedObjectArray.64, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !121
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.56, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !115
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.56, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.56, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !114
  store ptr null, ptr %2, align 8, !tbaa !115
  store i32 0, ptr %11, align 4, !tbaa !116
  %12 = getelementptr inbounds %class.btAlignedObjectArray.56, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !117
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.52, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !111
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.52, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.52, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !110
  store ptr null, ptr %2, align 8, !tbaa !111
  store i32 0, ptr %11, align 4, !tbaa !112
  %12 = getelementptr inbounds %class.btAlignedObjectArray.52, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !113
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !107
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !106
  store ptr null, ptr %2, align 8, !tbaa !107
  store i32 0, ptr %11, align 4, !tbaa !108
  %12 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !109
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !103
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !102
  store ptr null, ptr %2, align 8, !tbaa !103
  store i32 0, ptr %11, align 4, !tbaa !104
  %12 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !105
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.36, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !99
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.36, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.36, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !98
  store ptr null, ptr %2, align 8, !tbaa !99
  store i32 0, ptr %11, align 4, !tbaa !100
  %12 = getelementptr inbounds %class.btAlignedObjectArray.36, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !101
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.32, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !95
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.32, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.32, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !94
  store ptr null, ptr %2, align 8, !tbaa !95
  store i32 0, ptr %11, align 4, !tbaa !96
  %12 = getelementptr inbounds %class.btAlignedObjectArray.32, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !97
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.28, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !91
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.28, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.28, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !90
  store ptr null, ptr %2, align 8, !tbaa !91
  store i32 0, ptr %11, align 4, !tbaa !92
  %12 = getelementptr inbounds %class.btAlignedObjectArray.28, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !93
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.24, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !87
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.24, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.24, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !86
  store ptr null, ptr %2, align 8, !tbaa !87
  store i32 0, ptr %11, align 4, !tbaa !88
  %12 = getelementptr inbounds %class.btAlignedObjectArray.24, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !89
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.20, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !83
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.20, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.20, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !82
  store ptr null, ptr %2, align 8, !tbaa !83
  store i32 0, ptr %11, align 4, !tbaa !84
  %12 = getelementptr inbounds %class.btAlignedObjectArray.20, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !85
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody4PoseD2Ev(ptr noundef nonnull align 8 dereferenceable(232) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  %2 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 4, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !39
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 4, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
          to label %10 unwind label %24

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 4, i32 2
  store i8 1, ptr %5, align 8, !tbaa !36
  store ptr null, ptr %2, align 8, !tbaa !39
  store i32 0, ptr %11, align 4, !tbaa !40
  %12 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 4, i32 3
  store i32 0, ptr %12, align 8, !tbaa !41
  %13 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 3, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !33
  %15 = icmp eq ptr %14, null
  %16 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 3, i32 6
  %17 = load i8, ptr %16, align 8
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %15, i1 true, i1 %18
  br i1 %19, label %21, label %20

20:                                               ; preds = %10
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %14)
  br label %21

21:                                               ; preds = %10, %20
  %22 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 3, i32 2
  store i8 1, ptr %16, align 8, !tbaa !30
  store ptr null, ptr %13, align 8, !tbaa !33
  store i32 0, ptr %22, align 4, !tbaa !34
  %23 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 3, i32 3
  store i32 0, ptr %23, align 8, !tbaa !35
  ret void

24:                                               ; preds = %9
  %25 = landingpad { ptr, i32 }
          cleanup
  %26 = getelementptr inbounds %"struct.btSoftBody::Pose", ptr %0, i64 0, i32 3
  invoke void @_ZN20btAlignedObjectArrayI9btVector3ED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %26)
          to label %27 unwind label %28

27:                                               ; preds = %24
  resume { ptr, i32 } %25

28:                                               ; preds = %24
  %29 = landingpad { ptr, i32 }
          catch ptr null
  %30 = extractvalue { ptr, i32 } %29, 0
  tail call void @__clang_call_terminate(ptr %30) #39
  unreachable
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody6ConfigD2Ev(ptr noundef nonnull align 8 dereferenceable(200) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  %2 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 28, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !27
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 28, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
          to label %10 unwind label %35

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 28, i32 2
  store i8 1, ptr %5, align 8, !tbaa !24
  store ptr null, ptr %2, align 8, !tbaa !27
  store i32 0, ptr %11, align 4, !tbaa !28
  %12 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 28, i32 3
  store i32 0, ptr %12, align 8, !tbaa !29
  %13 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 27, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !27
  %15 = icmp eq ptr %14, null
  %16 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 27, i32 6
  %17 = load i8, ptr %16, align 8
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %15, i1 true, i1 %18
  br i1 %19, label %21, label %20

20:                                               ; preds = %10
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %14)
          to label %21 unwind label %38

21:                                               ; preds = %10, %20
  %22 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 27, i32 2
  store i8 1, ptr %16, align 8, !tbaa !24
  store ptr null, ptr %13, align 8, !tbaa !27
  store i32 0, ptr %22, align 4, !tbaa !28
  %23 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 27, i32 3
  store i32 0, ptr %23, align 8, !tbaa !29
  %24 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 26, i32 5
  %25 = load ptr, ptr %24, align 8, !tbaa !21
  %26 = icmp eq ptr %25, null
  %27 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 26, i32 6
  %28 = load i8, ptr %27, align 8
  %29 = icmp eq i8 %28, 0
  %30 = select i1 %26, i1 true, i1 %29
  br i1 %30, label %32, label %31

31:                                               ; preds = %21
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %25)
  br label %32

32:                                               ; preds = %21, %31
  %33 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 26, i32 2
  store i8 1, ptr %27, align 8, !tbaa !18
  store ptr null, ptr %24, align 8, !tbaa !21
  store i32 0, ptr %33, align 4, !tbaa !22
  %34 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 26, i32 3
  store i32 0, ptr %34, align 8, !tbaa !23
  ret void

35:                                               ; preds = %9
  %36 = landingpad { ptr, i32 }
          cleanup
  %37 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 27
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %37)
          to label %40 unwind label %44

38:                                               ; preds = %20
  %39 = landingpad { ptr, i32 }
          cleanup
  br label %40

40:                                               ; preds = %35, %38
  %41 = phi { ptr, i32 } [ %39, %38 ], [ %36, %35 ]
  %42 = getelementptr inbounds %"struct.btSoftBody::Config", ptr %0, i64 0, i32 26
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %42)
          to label %43 unwind label %44

43:                                               ; preds = %40
  resume { ptr, i32 } %41

44:                                               ; preds = %40, %35
  %45 = landingpad { ptr, i32 }
          catch ptr null
  %46 = extractvalue { ptr, i32 } %45, 0
  tail call void @__clang_call_terminate(ptr %46) #39
  unreachable
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !15
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !8
  store ptr null, ptr %2, align 8, !tbaa !15
  store i32 0, ptr %11, align 4, !tbaa !16
  %12 = getelementptr inbounds %class.btAlignedObjectArray, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !17
  ret void
}

declare void @_ZN17btCollisionObjectD2Ev(ptr noundef nonnull align 8 dereferenceable(280)) unnamed_addr #1

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBodyD2Ev(ptr noundef nonnull align 8 dereferenceable(1496) %0) unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  store ptr getelementptr inbounds ({ [7 x ptr] }, ptr @_ZTV10btSoftBody, i64 0, inrange i32 0, i64 2), ptr %0, align 8, !tbaa !5
  %2 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %3 = load ptr, ptr %2, align 8, !tbaa !157
  %4 = icmp eq ptr %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr %3, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %6, i64 1
  %8 = load ptr, ptr %7, align 8
  invoke void %8(ptr noundef nonnull align 8 dereferenceable(24) %3)
          to label %9 unwind label %78

9:                                                ; preds = %5, %1
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %11 = load i32, ptr %10, align 4, !tbaa !124
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %56

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %15 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  br label %16

16:                                               ; preds = %53, %13
  %17 = load ptr, ptr %14, align 8, !tbaa !123
  %18 = load ptr, ptr %17, align 8, !tbaa !219
  %19 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %18, i64 0, i32 15
  %20 = load ptr, ptr %19, align 8, !tbaa !221
  %21 = icmp eq ptr %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %16
  invoke void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64) %15, ptr noundef nonnull %20)
          to label %23 unwind label %84

23:                                               ; preds = %22, %16
  invoke void @_ZN10btSoftBody7ClusterD2Ev(ptr noundef nonnull align 8 dereferenceable(424) %18)
          to label %24 unwind label %84

24:                                               ; preds = %23
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %18)
          to label %25 unwind label %84

25:                                               ; preds = %24
  %26 = load i32, ptr %10, align 4, !tbaa !124
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %56

28:                                               ; preds = %25
  %29 = load ptr, ptr %14, align 8, !tbaa !123
  %30 = zext i32 %26 to i64
  br label %31

31:                                               ; preds = %36, %28
  %32 = phi i64 [ 0, %28 ], [ %37, %36 ]
  %33 = getelementptr inbounds ptr, ptr %29, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !219
  %35 = icmp eq ptr %34, %18
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp eq i64 %37, %30
  br i1 %38, label %53, label %31

39:                                               ; preds = %31
  %40 = trunc i64 %32 to i32
  %41 = icmp sgt i32 %26, %40
  br i1 %41, label %42, label %53

42:                                               ; preds = %39
  %43 = add nsw i32 %26, -1
  %44 = shl i64 %32, 32
  %45 = ashr exact i64 %44, 32
  %46 = getelementptr inbounds ptr, ptr %29, i64 %45
  %47 = load ptr, ptr %46, align 8, !tbaa !219
  %48 = sext i32 %43 to i64
  %49 = getelementptr inbounds ptr, ptr %29, i64 %48
  %50 = load ptr, ptr %49, align 8, !tbaa !219
  store ptr %50, ptr %46, align 8, !tbaa !219
  %51 = load ptr, ptr %14, align 8, !tbaa !123
  %52 = getelementptr inbounds ptr, ptr %51, i64 %48
  store ptr %47, ptr %52, align 8, !tbaa !219
  store i32 %43, ptr %10, align 4, !tbaa !124
  br label %53

53:                                               ; preds = %36, %42, %39
  %54 = phi i32 [ %26, %39 ], [ %43, %42 ], [ %26, %36 ]
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %16, label %56

56:                                               ; preds = %25, %53, %9
  %57 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 2
  %58 = load i32, ptr %57, align 4, !tbaa !120
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %56
  %61 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  br label %68

62:                                               ; preds = %73, %56
  %63 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 2
  %64 = load i32, ptr %63, align 4, !tbaa !116
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %96

66:                                               ; preds = %62
  %67 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  br label %86

68:                                               ; preds = %60, %73
  %69 = phi i64 [ 0, %60 ], [ %74, %73 ]
  %70 = load ptr, ptr %61, align 8, !tbaa !119
  %71 = getelementptr inbounds ptr, ptr %70, i64 %69
  %72 = load ptr, ptr %71, align 8, !tbaa !219
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef %72)
          to label %73 unwind label %82

73:                                               ; preds = %68
  %74 = add nuw nsw i64 %69, 1
  %75 = load i32, ptr %57, align 4, !tbaa !120
  %76 = sext i32 %75 to i64
  %77 = icmp slt i64 %74, %76
  br i1 %77, label %68, label %62

78:                                               ; preds = %5
  %79 = landingpad { ptr, i32 }
          cleanup
  br label %286

80:                                               ; preds = %86
  %81 = landingpad { ptr, i32 }
          cleanup
  br label %286

82:                                               ; preds = %68
  %83 = landingpad { ptr, i32 }
          cleanup
  br label %286

84:                                               ; preds = %24, %23, %22
  %85 = landingpad { ptr, i32 }
          cleanup
  br label %286

86:                                               ; preds = %66, %91
  %87 = phi i64 [ 0, %66 ], [ %92, %91 ]
  %88 = load ptr, ptr %67, align 8, !tbaa !115
  %89 = getelementptr inbounds ptr, ptr %88, i64 %87
  %90 = load ptr, ptr %89, align 8, !tbaa !219
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef %90)
          to label %91 unwind label %80

91:                                               ; preds = %86
  %92 = add nuw nsw i64 %87, 1
  %93 = load i32, ptr %63, align 4, !tbaa !116
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %92, %94
  br i1 %95, label %86, label %96

96:                                               ; preds = %91, %62
  %97 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 5
  %98 = load ptr, ptr %97, align 8, !tbaa !131
  %99 = icmp eq ptr %98, null
  %100 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 6
  %101 = load i8, ptr %100, align 8
  %102 = icmp eq i8 %101, 0
  %103 = select i1 %99, i1 true, i1 %102
  br i1 %103, label %105, label %104

104:                                              ; preds = %96
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %98)
          to label %105 unwind label %284

105:                                              ; preds = %96, %104
  %106 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 2
  store i8 1, ptr %100, align 8, !tbaa !130
  store ptr null, ptr %97, align 8, !tbaa !131
  store i32 0, ptr %106, align 4, !tbaa !132
  %107 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27, i32 3
  store i32 0, ptr %107, align 8, !tbaa !133
  %108 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 5
  %109 = load ptr, ptr %108, align 8, !tbaa !127
  %110 = icmp eq ptr %109, null
  %111 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 6
  %112 = load i8, ptr %111, align 8
  %113 = icmp eq i8 %112, 0
  %114 = select i1 %110, i1 true, i1 %113
  br i1 %114, label %116, label %115

115:                                              ; preds = %105
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %109)
          to label %116 unwind label %289

116:                                              ; preds = %105, %115
  %117 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 2
  store i8 1, ptr %111, align 8, !tbaa !126
  store ptr null, ptr %108, align 8, !tbaa !127
  store i32 0, ptr %117, align 4, !tbaa !128
  %118 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 3
  store i32 0, ptr %118, align 8, !tbaa !129
  %119 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %120 = load ptr, ptr %119, align 8, !tbaa !123
  %121 = icmp eq ptr %120, null
  %122 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 6
  %123 = load i8, ptr %122, align 8
  %124 = icmp eq i8 %123, 0
  %125 = select i1 %121, i1 true, i1 %124
  br i1 %125, label %127, label %126

126:                                              ; preds = %116
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %120)
          to label %127 unwind label %294

127:                                              ; preds = %116, %126
  store i8 1, ptr %122, align 8, !tbaa !122
  store ptr null, ptr %119, align 8, !tbaa !123
  store i32 0, ptr %10, align 4, !tbaa !124
  %128 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 3
  store i32 0, ptr %128, align 8, !tbaa !125
  %129 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %129)
          to label %130 unwind label %299

130:                                              ; preds = %127
  %131 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %131)
          to label %132 unwind label %304

132:                                              ; preds = %130
  %133 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %133)
          to label %134 unwind label %309

134:                                              ; preds = %132
  %135 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %136 = load ptr, ptr %135, align 8, !tbaa !119
  %137 = icmp eq ptr %136, null
  %138 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 6
  %139 = load i8, ptr %138, align 8
  %140 = icmp eq i8 %139, 0
  %141 = select i1 %137, i1 true, i1 %140
  br i1 %141, label %143, label %142

142:                                              ; preds = %134
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %136)
          to label %143 unwind label %314

143:                                              ; preds = %134, %142
  store i8 1, ptr %138, align 8, !tbaa !118
  store ptr null, ptr %135, align 8, !tbaa !119
  store i32 0, ptr %57, align 4, !tbaa !120
  %144 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 3
  store i32 0, ptr %144, align 8, !tbaa !121
  %145 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %146 = load ptr, ptr %145, align 8, !tbaa !115
  %147 = icmp eq ptr %146, null
  %148 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 6
  %149 = load i8, ptr %148, align 8
  %150 = icmp eq i8 %149, 0
  %151 = select i1 %147, i1 true, i1 %150
  br i1 %151, label %153, label %152

152:                                              ; preds = %143
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %146)
          to label %153 unwind label %319

153:                                              ; preds = %143, %152
  store i8 1, ptr %148, align 8, !tbaa !114
  store ptr null, ptr %145, align 8, !tbaa !115
  store i32 0, ptr %63, align 4, !tbaa !116
  %154 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 3
  store i32 0, ptr %154, align 8, !tbaa !117
  %155 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 5
  %156 = load ptr, ptr %155, align 8, !tbaa !111
  %157 = icmp eq ptr %156, null
  %158 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 6
  %159 = load i8, ptr %158, align 8
  %160 = icmp eq i8 %159, 0
  %161 = select i1 %157, i1 true, i1 %160
  br i1 %161, label %163, label %162

162:                                              ; preds = %153
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %156)
          to label %163 unwind label %324

163:                                              ; preds = %153, %162
  %164 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 2
  store i8 1, ptr %158, align 8, !tbaa !110
  store ptr null, ptr %155, align 8, !tbaa !111
  store i32 0, ptr %164, align 4, !tbaa !112
  %165 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 3
  store i32 0, ptr %165, align 8, !tbaa !113
  %166 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 5
  %167 = load ptr, ptr %166, align 8, !tbaa !107
  %168 = icmp eq ptr %167, null
  %169 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 6
  %170 = load i8, ptr %169, align 8
  %171 = icmp eq i8 %170, 0
  %172 = select i1 %168, i1 true, i1 %171
  br i1 %172, label %174, label %173

173:                                              ; preds = %163
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %167)
          to label %174 unwind label %329

174:                                              ; preds = %163, %173
  %175 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 2
  store i8 1, ptr %169, align 8, !tbaa !106
  store ptr null, ptr %166, align 8, !tbaa !107
  store i32 0, ptr %175, align 4, !tbaa !108
  %176 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 3
  store i32 0, ptr %176, align 8, !tbaa !109
  %177 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 5
  %178 = load ptr, ptr %177, align 8, !tbaa !103
  %179 = icmp eq ptr %178, null
  %180 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 6
  %181 = load i8, ptr %180, align 8
  %182 = icmp eq i8 %181, 0
  %183 = select i1 %179, i1 true, i1 %182
  br i1 %183, label %185, label %184

184:                                              ; preds = %174
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %178)
          to label %185 unwind label %334

185:                                              ; preds = %174, %184
  %186 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 2
  store i8 1, ptr %180, align 8, !tbaa !102
  store ptr null, ptr %177, align 8, !tbaa !103
  store i32 0, ptr %186, align 4, !tbaa !104
  %187 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 3
  store i32 0, ptr %187, align 8, !tbaa !105
  %188 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %189 = load ptr, ptr %188, align 8, !tbaa !99
  %190 = icmp eq ptr %189, null
  %191 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 6
  %192 = load i8, ptr %191, align 8
  %193 = icmp eq i8 %192, 0
  %194 = select i1 %190, i1 true, i1 %193
  br i1 %194, label %196, label %195

195:                                              ; preds = %185
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %189)
          to label %196 unwind label %339

196:                                              ; preds = %185, %195
  %197 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 2
  store i8 1, ptr %191, align 8, !tbaa !98
  store ptr null, ptr %188, align 8, !tbaa !99
  store i32 0, ptr %197, align 4, !tbaa !100
  %198 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 3
  store i32 0, ptr %198, align 8, !tbaa !101
  %199 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %200 = load ptr, ptr %199, align 8, !tbaa !95
  %201 = icmp eq ptr %200, null
  %202 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 6
  %203 = load i8, ptr %202, align 8
  %204 = icmp eq i8 %203, 0
  %205 = select i1 %201, i1 true, i1 %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %196
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %200)
          to label %207 unwind label %344

207:                                              ; preds = %196, %206
  %208 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  store i8 1, ptr %202, align 8, !tbaa !94
  store ptr null, ptr %199, align 8, !tbaa !95
  store i32 0, ptr %208, align 4, !tbaa !96
  %209 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 3
  store i32 0, ptr %209, align 8, !tbaa !97
  %210 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %211 = load ptr, ptr %210, align 8, !tbaa !91
  %212 = icmp eq ptr %211, null
  %213 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 6
  %214 = load i8, ptr %213, align 8
  %215 = icmp eq i8 %214, 0
  %216 = select i1 %212, i1 true, i1 %215
  br i1 %216, label %218, label %217

217:                                              ; preds = %207
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %211)
          to label %218 unwind label %349

218:                                              ; preds = %207, %217
  %219 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  store i8 1, ptr %213, align 8, !tbaa !90
  store ptr null, ptr %210, align 8, !tbaa !91
  store i32 0, ptr %219, align 4, !tbaa !92
  %220 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 3
  store i32 0, ptr %220, align 8, !tbaa !93
  %221 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %222 = load ptr, ptr %221, align 8, !tbaa !87
  %223 = icmp eq ptr %222, null
  %224 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 6
  %225 = load i8, ptr %224, align 8
  %226 = icmp eq i8 %225, 0
  %227 = select i1 %223, i1 true, i1 %226
  br i1 %227, label %229, label %228

228:                                              ; preds = %218
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %222)
          to label %229 unwind label %354

229:                                              ; preds = %218, %228
  %230 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  store i8 1, ptr %224, align 8, !tbaa !86
  store ptr null, ptr %221, align 8, !tbaa !87
  store i32 0, ptr %230, align 4, !tbaa !88
  %231 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 3
  store i32 0, ptr %231, align 8, !tbaa !89
  %232 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 5
  %233 = load ptr, ptr %232, align 8, !tbaa !83
  %234 = icmp eq ptr %233, null
  %235 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 6
  %236 = load i8, ptr %235, align 8
  %237 = icmp eq i8 %236, 0
  %238 = select i1 %234, i1 true, i1 %237
  br i1 %238, label %240, label %239

239:                                              ; preds = %229
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %233)
          to label %240 unwind label %359

240:                                              ; preds = %229, %239
  %241 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 2
  store i8 1, ptr %235, align 8, !tbaa !82
  store ptr null, ptr %232, align 8, !tbaa !83
  store i32 0, ptr %241, align 4, !tbaa !84
  %242 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 3
  store i32 0, ptr %242, align 8, !tbaa !85
  %243 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %244 = load ptr, ptr %243, align 8, !tbaa !39
  %245 = icmp eq ptr %244, null
  %246 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 6
  %247 = load i8, ptr %246, align 8
  %248 = icmp eq i8 %247, 0
  %249 = select i1 %245, i1 true, i1 %248
  br i1 %249, label %251, label %250

250:                                              ; preds = %240
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %244)
          to label %251 unwind label %262

251:                                              ; preds = %250, %240
  %252 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 2
  store i8 1, ptr %246, align 8, !tbaa !36
  store ptr null, ptr %243, align 8, !tbaa !39
  store i32 0, ptr %252, align 4, !tbaa !40
  %253 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 3
  store i32 0, ptr %253, align 8, !tbaa !41
  %254 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  %255 = load ptr, ptr %254, align 8, !tbaa !33
  %256 = icmp eq ptr %255, null
  %257 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 6
  %258 = load i8, ptr %257, align 8
  %259 = icmp eq i8 %258, 0
  %260 = select i1 %256, i1 true, i1 %259
  br i1 %260, label %268, label %261

261:                                              ; preds = %251
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %255)
          to label %268 unwind label %364

262:                                              ; preds = %250
  %263 = landingpad { ptr, i32 }
          cleanup
  %264 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3
  invoke void @_ZN20btAlignedObjectArrayI9btVector3ED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %264)
          to label %371 unwind label %265

265:                                              ; preds = %262
  %266 = landingpad { ptr, i32 }
          catch ptr null
  %267 = extractvalue { ptr, i32 } %266, 0
  tail call void @__clang_call_terminate(ptr %267) #39
  unreachable

268:                                              ; preds = %251, %261
  %269 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 2
  store i8 1, ptr %257, align 8, !tbaa !30
  store ptr null, ptr %254, align 8, !tbaa !33
  store i32 0, ptr %269, align 4, !tbaa !34
  %270 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 3
  store i32 0, ptr %270, align 8, !tbaa !35
  %271 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2
  invoke void @_ZN10btSoftBody6ConfigD2Ev(ptr noundef nonnull align 8 dereferenceable(200) %271)
          to label %272 unwind label %369

272:                                              ; preds = %268
  %273 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 5
  %274 = load ptr, ptr %273, align 8, !tbaa !15
  %275 = icmp eq ptr %274, null
  %276 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 6
  %277 = load i8, ptr %276, align 8
  %278 = icmp eq i8 %277, 0
  %279 = select i1 %275, i1 true, i1 %278
  br i1 %279, label %281, label %280

280:                                              ; preds = %272
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %274)
          to label %281 unwind label %374

281:                                              ; preds = %272, %280
  %282 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 2
  store i8 1, ptr %276, align 8, !tbaa !8
  store ptr null, ptr %273, align 8, !tbaa !15
  store i32 0, ptr %282, align 4, !tbaa !16
  %283 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 3
  store i32 0, ptr %283, align 8, !tbaa !17
  tail call void @_ZN17btCollisionObjectD2Ev(ptr noundef nonnull align 8 dereferenceable(280) %0)
  ret void

284:                                              ; preds = %104
  %285 = landingpad { ptr, i32 }
          cleanup
  br label %291

286:                                              ; preds = %80, %84, %82, %78
  %287 = phi { ptr, i32 } [ %79, %78 ], [ %81, %80 ], [ %83, %82 ], [ %85, %84 ]
  %288 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 27
  invoke void @_ZN20btAlignedObjectArrayIiED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %288)
          to label %291 unwind label %382

289:                                              ; preds = %115
  %290 = landingpad { ptr, i32 }
          cleanup
  br label %296

291:                                              ; preds = %286, %284
  %292 = phi { ptr, i32 } [ %287, %286 ], [ %285, %284 ]
  %293 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25
  invoke void @_ZN20btAlignedObjectArrayIbED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %293)
          to label %296 unwind label %382

294:                                              ; preds = %126
  %295 = landingpad { ptr, i32 }
          cleanup
  br label %301

296:                                              ; preds = %291, %289
  %297 = phi { ptr, i32 } [ %292, %291 ], [ %290, %289 ]
  %298 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24
  invoke void @_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %298)
          to label %301 unwind label %382

299:                                              ; preds = %127
  %300 = landingpad { ptr, i32 }
          cleanup
  br label %306

301:                                              ; preds = %296, %294
  %302 = phi { ptr, i32 } [ %297, %296 ], [ %295, %294 ]
  %303 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %303)
          to label %306 unwind label %382

304:                                              ; preds = %130
  %305 = landingpad { ptr, i32 }
          cleanup
  br label %311

306:                                              ; preds = %301, %299
  %307 = phi { ptr, i32 } [ %302, %301 ], [ %300, %299 ]
  %308 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %308)
          to label %311 unwind label %382

309:                                              ; preds = %132
  %310 = landingpad { ptr, i32 }
          cleanup
  br label %316

311:                                              ; preds = %306, %304
  %312 = phi { ptr, i32 } [ %307, %306 ], [ %305, %304 ]
  %313 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  invoke void @_ZN6btDbvtD1Ev(ptr noundef nonnull align 8 dereferenceable(64) %313)
          to label %316 unwind label %382

314:                                              ; preds = %142
  %315 = landingpad { ptr, i32 }
          cleanup
  br label %321

316:                                              ; preds = %311, %309
  %317 = phi { ptr, i32 } [ %312, %311 ], [ %310, %309 ]
  %318 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17
  invoke void @_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %318)
          to label %321 unwind label %382

319:                                              ; preds = %152
  %320 = landingpad { ptr, i32 }
          cleanup
  br label %326

321:                                              ; preds = %316, %314
  %322 = phi { ptr, i32 } [ %317, %316 ], [ %315, %314 ]
  %323 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16
  invoke void @_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %323)
          to label %326 unwind label %382

324:                                              ; preds = %162
  %325 = landingpad { ptr, i32 }
          cleanup
  br label %331

326:                                              ; preds = %321, %319
  %327 = phi { ptr, i32 } [ %322, %321 ], [ %320, %319 ]
  %328 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %328)
          to label %331 unwind label %382

329:                                              ; preds = %173
  %330 = landingpad { ptr, i32 }
          cleanup
  br label %336

331:                                              ; preds = %326, %324
  %332 = phi { ptr, i32 } [ %327, %326 ], [ %325, %324 ]
  %333 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %333)
          to label %336 unwind label %382

334:                                              ; preds = %184
  %335 = landingpad { ptr, i32 }
          cleanup
  br label %341

336:                                              ; preds = %331, %329
  %337 = phi { ptr, i32 } [ %332, %331 ], [ %330, %329 ]
  %338 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %338)
          to label %341 unwind label %382

339:                                              ; preds = %195
  %340 = landingpad { ptr, i32 }
          cleanup
  br label %346

341:                                              ; preds = %336, %334
  %342 = phi { ptr, i32 } [ %337, %336 ], [ %335, %334 ]
  %343 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %343)
          to label %346 unwind label %382

344:                                              ; preds = %206
  %345 = landingpad { ptr, i32 }
          cleanup
  br label %351

346:                                              ; preds = %341, %339
  %347 = phi { ptr, i32 } [ %342, %341 ], [ %340, %339 ]
  %348 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %348)
          to label %351 unwind label %382

349:                                              ; preds = %217
  %350 = landingpad { ptr, i32 }
          cleanup
  br label %356

351:                                              ; preds = %346, %344
  %352 = phi { ptr, i32 } [ %347, %346 ], [ %345, %344 ]
  %353 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %353)
          to label %356 unwind label %382

354:                                              ; preds = %228
  %355 = landingpad { ptr, i32 }
          cleanup
  br label %361

356:                                              ; preds = %351, %349
  %357 = phi { ptr, i32 } [ %352, %351 ], [ %350, %349 ]
  %358 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %358)
          to label %361 unwind label %382

359:                                              ; preds = %239
  %360 = landingpad { ptr, i32 }
          cleanup
  br label %366

361:                                              ; preds = %356, %354
  %362 = phi { ptr, i32 } [ %357, %356 ], [ %355, %354 ]
  %363 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8
  invoke void @_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %363)
          to label %366 unwind label %382

364:                                              ; preds = %261
  %365 = landingpad { ptr, i32 }
          cleanup
  br label %371

366:                                              ; preds = %361, %359
  %367 = phi { ptr, i32 } [ %362, %361 ], [ %360, %359 ]
  %368 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5
  invoke void @_ZN10btSoftBody4PoseD2Ev(ptr noundef nonnull align 8 dereferenceable(232) %368)
          to label %371 unwind label %382

369:                                              ; preds = %268
  %370 = landingpad { ptr, i32 }
          cleanup
  br label %376

371:                                              ; preds = %364, %262, %366
  %372 = phi { ptr, i32 } [ %367, %366 ], [ %365, %364 ], [ %263, %262 ]
  %373 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2
  invoke void @_ZN10btSoftBody6ConfigD2Ev(ptr noundef nonnull align 8 dereferenceable(200) %373)
          to label %376 unwind label %382

374:                                              ; preds = %280
  %375 = landingpad { ptr, i32 }
          cleanup
  br label %379

376:                                              ; preds = %371, %369
  %377 = phi { ptr, i32 } [ %372, %371 ], [ %370, %369 ]
  %378 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1
  invoke void @_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %378)
          to label %379 unwind label %382

379:                                              ; preds = %376, %374
  %380 = phi { ptr, i32 } [ %377, %376 ], [ %375, %374 ]
  invoke void @_ZN17btCollisionObjectD2Ev(ptr noundef nonnull align 8 dereferenceable(280) %0)
          to label %381 unwind label %382

381:                                              ; preds = %379
  resume { ptr, i32 } %380

382:                                              ; preds = %379, %376, %371, %366, %361, %356, %351, %346, %341, %336, %331, %326, %321, %316, %311, %306, %301, %296, %291, %286
  %383 = landingpad { ptr, i32 }
          catch ptr null
  %384 = extractvalue { ptr, i32 } %383, 0
  tail call void @__clang_call_terminate(ptr %384) #39
  unreachable
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody15releaseClustersEv(ptr noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !124
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %46

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  br label %8

8:                                                ; preds = %5, %43
  %9 = load ptr, ptr %6, align 8, !tbaa !123
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  %11 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %10, i64 0, i32 15
  %12 = load ptr, ptr %11, align 8, !tbaa !221
  %13 = icmp eq ptr %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %8
  tail call void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64) %7, ptr noundef nonnull %12)
  br label %15

15:                                               ; preds = %14, %8
  tail call void @_ZN10btSoftBody7ClusterD2Ev(ptr noundef nonnull align 8 dereferenceable(424) %10)
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %10)
  %16 = load i32, ptr %2, align 4, !tbaa !124
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %46

18:                                               ; preds = %15
  %19 = load ptr, ptr %6, align 8, !tbaa !123
  %20 = zext i32 %16 to i64
  br label %21

21:                                               ; preds = %26, %18
  %22 = phi i64 [ 0, %18 ], [ %27, %26 ]
  %23 = getelementptr inbounds ptr, ptr %19, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !219
  %25 = icmp eq ptr %24, %10
  br i1 %25, label %29, label %26

26:                                               ; preds = %21
  %27 = add nuw nsw i64 %22, 1
  %28 = icmp eq i64 %27, %20
  br i1 %28, label %43, label %21

29:                                               ; preds = %21
  %30 = trunc i64 %22 to i32
  %31 = icmp sgt i32 %16, %30
  br i1 %31, label %32, label %43

32:                                               ; preds = %29
  %33 = add nsw i32 %16, -1
  %34 = shl i64 %22, 32
  %35 = ashr exact i64 %34, 32
  %36 = getelementptr inbounds ptr, ptr %19, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !219
  %38 = sext i32 %33 to i64
  %39 = getelementptr inbounds ptr, ptr %19, i64 %38
  %40 = load ptr, ptr %39, align 8, !tbaa !219
  store ptr %40, ptr %36, align 8, !tbaa !219
  %41 = load ptr, ptr %6, align 8, !tbaa !123
  %42 = getelementptr inbounds ptr, ptr %41, i64 %38
  store ptr %37, ptr %42, align 8, !tbaa !219
  store i32 %33, ptr %2, align 4, !tbaa !124
  br label %43

43:                                               ; preds = %26, %29, %32
  %44 = phi i32 [ %16, %29 ], [ %33, %32 ], [ %16, %26 ]
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %8, label %46

46:                                               ; preds = %15, %43, %1
  ret void
}

declare void @_Z21btAlignedFreeInternalPv(ptr noundef) local_unnamed_addr #1

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBodyD0Ev(ptr noundef nonnull align 8 dereferenceable(1496) %0) unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  invoke void @_ZN10btSoftBodyD2Ev(ptr noundef nonnull align 8 dereferenceable(1496) %0)
          to label %2 unwind label %3

2:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %0)
  ret void

3:                                                ; preds = %1
  %4 = landingpad { ptr, i32 }
          cleanup
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %0)
          to label %5 unwind label %6

5:                                                ; preds = %3
  resume { ptr, i32 } %4

6:                                                ; preds = %3
  %7 = landingpad { ptr, i32 }
          catch ptr null
  %8 = extractvalue { ptr, i32 } %7, 0
  tail call void @__clang_call_terminate(ptr %8) #39
  unreachable
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local noundef zeroext i1 @_ZNK10btSoftBody9checkLinkEii(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #9 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !87
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 %6
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 %8
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %11 = load i32, ptr %10, align 4, !tbaa !92
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %46

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !91
  %16 = zext i32 %11 to i64
  %17 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %15, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !219
  %19 = icmp eq ptr %18, %7
  %20 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %15, i64 0, i32 1, i64 1
  %21 = load ptr, ptr %20, align 8
  %22 = icmp eq ptr %21, %9
  %23 = select i1 %19, i1 %22, i1 false
  br i1 %23, label %46, label %24

24:                                               ; preds = %13
  %25 = icmp eq ptr %18, %9
  %26 = icmp eq ptr %21, %7
  %27 = select i1 %25, i1 %26, i1 false
  br i1 %27, label %46, label %28

28:                                               ; preds = %24, %40
  %29 = phi i64 [ %30, %40 ], [ 0, %24 ]
  %30 = add nuw nsw i64 %29, 1
  %31 = icmp eq i64 %30, %16
  br i1 %31, label %44, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %15, i64 %30, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !219
  %35 = icmp eq ptr %34, %7
  %36 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %15, i64 %30, i32 1, i64 1
  %37 = load ptr, ptr %36, align 8
  %38 = icmp eq ptr %37, %9
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %44, label %40

40:                                               ; preds = %32
  %41 = icmp eq ptr %34, %9
  %42 = icmp eq ptr %37, %7
  %43 = select i1 %41, i1 %42, i1 false
  br i1 %43, label %44, label %28

44:                                               ; preds = %40, %32, %28
  %45 = icmp ult i64 %30, %16
  br label %46

46:                                               ; preds = %44, %24, %13, %3
  %47 = phi i1 [ false, %3 ], [ true, %13 ], [ true, %24 ], [ %45, %44 ]
  ret i1 %47
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local noundef zeroext i1 @_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr noundef readnone %1, ptr noundef readnone %2) local_unnamed_addr #9 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !92
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %39

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !91
  %10 = zext i32 %5 to i64
  %11 = zext i32 %5 to i64
  %12 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !219
  %14 = icmp eq ptr %13, %1
  %15 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 0, i32 1, i64 1
  %16 = load ptr, ptr %15, align 8
  %17 = icmp eq ptr %16, %2
  %18 = select i1 %14, i1 %17, i1 false
  br i1 %18, label %39, label %31

19:                                               ; preds = %31
  %20 = add nuw nsw i64 %35, 1
  %21 = icmp ult i64 %20, %10
  %22 = icmp eq i64 %20, %11
  br i1 %22, label %39, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 %20, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !219
  %26 = icmp eq ptr %25, %1
  %27 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 %20, i32 1, i64 1
  %28 = load ptr, ptr %27, align 8
  %29 = icmp eq ptr %28, %2
  %30 = select i1 %26, i1 %29, i1 false
  br i1 %30, label %39, label %31

31:                                               ; preds = %7, %23
  %32 = phi ptr [ %28, %23 ], [ %16, %7 ]
  %33 = phi ptr [ %25, %23 ], [ %13, %7 ]
  %34 = phi i1 [ %21, %23 ], [ true, %7 ]
  %35 = phi i64 [ %20, %23 ], [ 0, %7 ]
  %36 = icmp eq ptr %33, %2
  %37 = icmp eq ptr %32, %1
  %38 = select i1 %36, i1 %37, i1 false
  br i1 %38, label %39, label %19

39:                                               ; preds = %19, %23, %31, %7, %3
  %40 = phi i1 [ false, %3 ], [ true, %7 ], [ %34, %31 ], [ %21, %23 ], [ %21, %19 ]
  ret i1 %40
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local noundef zeroext i1 @_ZNK10btSoftBody9checkFaceEiii(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #9 align 2 {
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !87
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %6, i64 %7
  %9 = sext i32 %2 to i64
  %10 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %6, i64 %9
  %11 = sext i32 %3 to i64
  %12 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %6, i64 %11
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %14 = load i32, ptr %13, align 4, !tbaa !96
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %51

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %18 = load ptr, ptr %17, align 8, !tbaa !95
  %19 = zext i32 %14 to i64
  %20 = zext i32 %14 to i64
  br label %25

21:                                               ; preds = %43, %35, %25
  %22 = add nuw nsw i64 %26, 1
  %23 = icmp ult i64 %22, %19
  %24 = icmp eq i64 %22, %20
  br i1 %24, label %51, label %25

25:                                               ; preds = %16, %21
  %26 = phi i64 [ 0, %16 ], [ %22, %21 ]
  %27 = phi i1 [ true, %16 ], [ %23, %21 ]
  %28 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %18, i64 %26, i32 1, i64 0
  %29 = load ptr, ptr %28, align 8, !tbaa !219
  %30 = icmp eq ptr %29, %8
  %31 = icmp eq ptr %29, %10
  %32 = or i1 %30, %31
  %33 = icmp eq ptr %29, %12
  %34 = or i1 %33, %32
  br i1 %34, label %35, label %21

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %18, i64 %26, i32 1, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !219
  %38 = icmp eq ptr %37, %8
  %39 = icmp eq ptr %37, %10
  %40 = or i1 %38, %39
  %41 = icmp eq ptr %37, %12
  %42 = or i1 %41, %40
  br i1 %42, label %43, label %21

43:                                               ; preds = %35
  %44 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %18, i64 %26, i32 1, i64 2
  %45 = load ptr, ptr %44, align 8, !tbaa !219
  %46 = icmp eq ptr %45, %8
  %47 = icmp eq ptr %45, %10
  %48 = or i1 %46, %47
  %49 = icmp eq ptr %45, %12
  %50 = or i1 %49, %48
  br i1 %50, label %51, label %21

51:                                               ; preds = %21, %43, %4
  %52 = phi i1 [ false, %4 ], [ %27, %43 ], [ %23, %21 ]
  ret i1 %52
}

declare noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7) local_unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  %9 = alloca [4 x float], align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  %10 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy acquire, align 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %17, !prof !172

12:                                               ; preds = %8
  %13 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy) #38
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy, align 8, !tbaa !173
  %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy) #38
  br label %17

17:                                               ; preds = %8, %12, %15
  %18 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy, align 8
  %19 = load i32, ptr getelementptr inbounds (i8, ptr @_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy, i64 36), align 4
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, ptr noundef nonnull align 4 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !162
  %20 = load <4 x float>, ptr %3, align 4, !tbaa !137
  %21 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 2
  %22 = load i32, ptr %21, align 4, !tbaa !84
  %23 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 3
  %24 = load i32, ptr %23, align 8, !tbaa !85
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %80

26:                                               ; preds = %17
  %27 = icmp eq i32 %22, 0
  %28 = shl nsw i32 %22, 1
  %29 = select i1 %27, i32 1, i32 %28
  %30 = icmp slt i32 %22, %29
  br i1 %30, label %31, label %80

31:                                               ; preds = %26
  %32 = icmp eq i32 %29, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %31
  %34 = sext i32 %29 to i64
  %35 = mul nsw i64 %34, 88
  %36 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %35, i32 noundef 16)
  %37 = load i32, ptr %21, align 4, !tbaa !84
  br label %38

38:                                               ; preds = %33, %31
  %39 = phi i32 [ %37, %33 ], [ %22, %31 ]
  %40 = phi ptr [ %36, %33 ], [ null, %31 ]
  %41 = icmp sgt i32 %39, 0
  br i1 %41, label %42, label %69

42:                                               ; preds = %38
  %43 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 5
  %44 = zext i32 %39 to i64
  %45 = and i64 %44, 1
  %46 = icmp eq i32 %39, 1
  br i1 %46, label %62, label %47

47:                                               ; preds = %42
  %48 = and i64 %44, 4294967294
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %59, %49 ]
  %51 = phi i64 [ 0, %47 ], [ %60, %49 ]
  %52 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %40, i64 %50
  %53 = load ptr, ptr %43, align 8, !tbaa !83
  %54 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %53, i64 %50
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %52, ptr noundef nonnull align 8 dereferenceable(88) %54, i64 88, i1 false)
  %55 = or i64 %50, 1
  %56 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %40, i64 %55
  %57 = load ptr, ptr %43, align 8, !tbaa !83
  %58 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %57, i64 %55
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %56, ptr noundef nonnull align 8 dereferenceable(88) %58, i64 88, i1 false)
  %59 = add nuw nsw i64 %50, 2
  %60 = add i64 %51, 2
  %61 = icmp eq i64 %60, %48
  br i1 %61, label %62, label %49

62:                                               ; preds = %49, %42
  %63 = phi i64 [ 0, %42 ], [ %59, %49 ]
  %64 = icmp eq i64 %45, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %40, i64 %63
  %67 = load ptr, ptr %43, align 8, !tbaa !83
  %68 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %67, i64 %63
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %66, ptr noundef nonnull align 8 dereferenceable(88) %68, i64 88, i1 false)
  br label %69

69:                                               ; preds = %65, %62, %38
  %70 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 5
  %71 = load ptr, ptr %70, align 8, !tbaa !83
  %72 = icmp eq ptr %71, null
  %73 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 6
  %74 = load i8, ptr %73, align 8
  %75 = icmp eq i8 %74, 0
  %76 = select i1 %72, i1 true, i1 %75
  br i1 %76, label %78, label %77

77:                                               ; preds = %69
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %71)
  br label %78

78:                                               ; preds = %77, %69
  store i8 1, ptr %73, align 8, !tbaa !82
  store ptr %40, ptr %70, align 8, !tbaa !83
  store i32 %29, ptr %23, align 8, !tbaa !85
  %79 = load i32, ptr %21, align 4, !tbaa !84
  br label %80

80:                                               ; preds = %17, %26, %78
  %81 = phi i32 [ %79, %78 ], [ %22, %26 ], [ %22, %17 ]
  %82 = icmp ne ptr %4, null
  %83 = zext i1 %82 to i32
  %84 = icmp ne ptr %5, null
  %85 = zext i1 %84 to i32
  %86 = add nuw nsw i32 %85, %83
  %87 = icmp ne ptr %6, null
  %88 = zext i1 %87 to i32
  %89 = add nuw nsw i32 %86, %88
  %90 = icmp ne ptr %7, null
  %91 = zext i1 %90 to i32
  %92 = add nuw nsw i32 %89, %91
  %93 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 5
  %94 = load ptr, ptr %93, align 8, !tbaa !83
  %95 = sext i32 %81 to i64
  %96 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %94, i64 %95
  store ptr %18, ptr %96, align 8
  %97 = getelementptr inbounds i8, ptr %96, i64 8
  store ptr %1, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %96, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %98, ptr noundef nonnull align 8 dereferenceable(16) %9, i64 16, i1 false)
  %99 = getelementptr inbounds i8, ptr %96, i64 32
  store i32 %92, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %96, i64 36
  store i32 %19, ptr %100, align 4
  %101 = getelementptr inbounds i8, ptr %96, i64 40
  store ptr %4, ptr %101, align 8
  %102 = getelementptr inbounds i8, ptr %96, i64 48
  store ptr %5, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %96, i64 56
  store ptr %6, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %96, i64 64
  store ptr %7, ptr %104, align 8
  %105 = getelementptr inbounds i8, ptr %96, i64 72
  store <4 x float> %20, ptr %105, align 8
  %106 = load i32, ptr %21, align 4, !tbaa !84
  %107 = add nsw i32 %106, 1
  store i32 %107, ptr %21, align 4, !tbaa !84
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2, ptr noundef %3) local_unnamed_addr #4 align 2 {
  %5 = alloca %class.btVector4, align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, ptr %5, align 16, !tbaa !137
  call void @_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %5, ptr noundef %3, ptr noundef null, ptr noundef null, ptr noundef null)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2, ptr nocapture noundef readonly %3) local_unnamed_addr #4 align 2 {
  %5 = alloca %class.btVector4, align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  store <4 x float> <float 5.000000e-01, float 5.000000e-01, float 0.000000e+00, float 0.000000e+00>, ptr %5, align 16, !tbaa !137
  %6 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %3, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !219
  %8 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %3, i64 0, i32 1, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !219
  call void @_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %5, ptr noundef %7, ptr noundef %9, ptr noundef null, ptr noundef null)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2, ptr nocapture noundef readonly %3) local_unnamed_addr #4 align 2 {
  %5 = alloca %class.btVector4, align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  store <4 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0.000000e+00>, ptr %5, align 16, !tbaa !137
  %6 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %3, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !219
  %8 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %3, i64 0, i32 1, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !219
  %10 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %3, i64 0, i32 1, i64 2
  %11 = load ptr, ptr %10, align 8, !tbaa !219
  call void @_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %5, ptr noundef %7, ptr noundef %9, ptr noundef %11, ptr noundef null)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendNodeERK9btVector3f(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1, float noundef %2) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca %struct.btDbvtAabbMm, align 8
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !89
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !88
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %60

10:                                               ; preds = %3
  tail call void @_ZN10btSoftBody17pointersToIndicesEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %11 = load i32, ptr %7, align 4, !tbaa !88
  %12 = shl nsw i32 %11, 1
  %13 = or i32 %12, 1
  %14 = load i32, ptr %5, align 8, !tbaa !89
  %15 = icmp slt i32 %14, %13
  br i1 %15, label %16, label %59

16:                                               ; preds = %10
  %17 = sext i32 %13 to i64
  %18 = mul nsw i64 %17, 120
  %19 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %18, i32 noundef 16)
  %20 = load i32, ptr %7, align 4, !tbaa !88
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %49

22:                                               ; preds = %16
  %23 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %24 = zext i32 %20 to i64
  %25 = and i64 %24, 1
  %26 = icmp eq i32 %20, 1
  br i1 %26, label %42, label %27

27:                                               ; preds = %22
  %28 = and i64 %24, 4294967294
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %39, %29 ]
  %31 = phi i64 [ 0, %27 ], [ %40, %29 ]
  %32 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 %30
  %33 = load ptr, ptr %23, align 8, !tbaa !87
  %34 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %33, i64 %30
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %32, ptr noundef nonnull align 8 dereferenceable(120) %34, i64 120, i1 false)
  %35 = or i64 %30, 1
  %36 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 %35
  %37 = load ptr, ptr %23, align 8, !tbaa !87
  %38 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %37, i64 %35
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %36, ptr noundef nonnull align 8 dereferenceable(120) %38, i64 120, i1 false)
  %39 = add nuw nsw i64 %30, 2
  %40 = add i64 %31, 2
  %41 = icmp eq i64 %40, %28
  br i1 %41, label %42, label %29

42:                                               ; preds = %29, %22
  %43 = phi i64 [ 0, %22 ], [ %39, %29 ]
  %44 = icmp eq i64 %25, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 %43
  %47 = load ptr, ptr %23, align 8, !tbaa !87
  %48 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %43
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %46, ptr noundef nonnull align 8 dereferenceable(120) %48, i64 120, i1 false)
  br label %49

49:                                               ; preds = %45, %42, %16
  %50 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %51 = load ptr, ptr %50, align 8, !tbaa !87
  %52 = icmp eq ptr %51, null
  %53 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 6
  %54 = load i8, ptr %53, align 8
  %55 = icmp eq i8 %54, 0
  %56 = select i1 %52, i1 true, i1 %55
  br i1 %56, label %58, label %57

57:                                               ; preds = %49
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %51)
  br label %58

58:                                               ; preds = %57, %49
  store i8 1, ptr %53, align 8, !tbaa !86
  store ptr %19, ptr %50, align 8, !tbaa !87
  store i32 %13, ptr %5, align 8, !tbaa !89
  br label %59

59:                                               ; preds = %10, %58
  tail call void @_ZN10btSoftBody17indicesToPointersEPKi(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef null)
  br label %60

60:                                               ; preds = %59, %3
  %61 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %62 = load ptr, ptr %61, align 8, !tbaa !157
  %63 = load ptr, ptr %62, align 8, !tbaa !5
  %64 = getelementptr inbounds ptr, ptr %63, i64 11
  %65 = load ptr, ptr %64, align 8
  %66 = tail call noundef float %65(ptr noundef nonnull align 8 dereferenceable(24) %62)
  %67 = load i32, ptr %7, align 4, !tbaa !88
  %68 = load i32, ptr %5, align 8, !tbaa !89
  %69 = icmp eq i32 %67, %68
  br i1 %69, label %70, label %124

70:                                               ; preds = %60
  %71 = icmp eq i32 %67, 0
  %72 = shl nsw i32 %67, 1
  %73 = select i1 %71, i32 1, i32 %72
  %74 = icmp slt i32 %67, %73
  br i1 %74, label %75, label %124

75:                                               ; preds = %70
  %76 = icmp eq i32 %73, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %75
  %78 = sext i32 %73 to i64
  %79 = mul nsw i64 %78, 120
  %80 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %79, i32 noundef 16)
  %81 = load i32, ptr %7, align 4, !tbaa !88
  br label %82

82:                                               ; preds = %77, %75
  %83 = phi i32 [ %81, %77 ], [ %67, %75 ]
  %84 = phi ptr [ %80, %77 ], [ null, %75 ]
  %85 = icmp sgt i32 %83, 0
  br i1 %85, label %86, label %113

86:                                               ; preds = %82
  %87 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %88 = zext i32 %83 to i64
  %89 = and i64 %88, 1
  %90 = icmp eq i32 %83, 1
  br i1 %90, label %106, label %91

91:                                               ; preds = %86
  %92 = and i64 %88, 4294967294
  br label %93

93:                                               ; preds = %93, %91
  %94 = phi i64 [ 0, %91 ], [ %103, %93 ]
  %95 = phi i64 [ 0, %91 ], [ %104, %93 ]
  %96 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %84, i64 %94
  %97 = load ptr, ptr %87, align 8, !tbaa !87
  %98 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %97, i64 %94
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %96, ptr noundef nonnull align 8 dereferenceable(120) %98, i64 120, i1 false)
  %99 = or i64 %94, 1
  %100 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %84, i64 %99
  %101 = load ptr, ptr %87, align 8, !tbaa !87
  %102 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %101, i64 %99
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %100, ptr noundef nonnull align 8 dereferenceable(120) %102, i64 120, i1 false)
  %103 = add nuw nsw i64 %94, 2
  %104 = add i64 %95, 2
  %105 = icmp eq i64 %104, %92
  br i1 %105, label %106, label %93

106:                                              ; preds = %93, %86
  %107 = phi i64 [ 0, %86 ], [ %103, %93 ]
  %108 = icmp eq i64 %89, 0
  br i1 %108, label %113, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %84, i64 %107
  %111 = load ptr, ptr %87, align 8, !tbaa !87
  %112 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %111, i64 %107
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %110, ptr noundef nonnull align 8 dereferenceable(120) %112, i64 120, i1 false)
  br label %113

113:                                              ; preds = %109, %106, %82
  %114 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %115 = load ptr, ptr %114, align 8, !tbaa !87
  %116 = icmp eq ptr %115, null
  %117 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 6
  %118 = load i8, ptr %117, align 8
  %119 = icmp eq i8 %118, 0
  %120 = select i1 %116, i1 true, i1 %119
  br i1 %120, label %122, label %121

121:                                              ; preds = %113
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %115)
  br label %122

122:                                              ; preds = %121, %113
  store i8 1, ptr %117, align 8, !tbaa !86
  store ptr %84, ptr %114, align 8, !tbaa !87
  store i32 %73, ptr %5, align 8, !tbaa !89
  %123 = load i32, ptr %7, align 4, !tbaa !88
  br label %124

124:                                              ; preds = %60, %70, %122
  %125 = phi i32 [ %123, %122 ], [ %67, %70 ], [ %67, %60 ]
  %126 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %127 = load ptr, ptr %126, align 8, !tbaa !87
  %128 = sext i32 %125 to i64
  %129 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %127, i64 %128
  store ptr null, ptr %129, align 8
  %130 = load i32, ptr %7, align 4, !tbaa !88
  %131 = add nsw i32 %130, 1
  store i32 %131, ptr %7, align 4, !tbaa !88
  %132 = load ptr, ptr %126, align 8, !tbaa !87
  %133 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy acquire, align 8
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %135, label %140, !prof !172

135:                                              ; preds = %124
  %136 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy) #38
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %140, label %138

138:                                              ; preds = %135
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy, align 8, !tbaa !173
  %139 = tail call ptr @llvm.invariant.start.p0(i64 120, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy) #38
  br label %140

140:                                              ; preds = %124, %135, %138
  %141 = sext i32 %130 to i64
  %142 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %132, i64 %141
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(113) %142, ptr noundef nonnull align 8 dereferenceable(113) @_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy, i64 113, i1 false)
  %143 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %132, i64 %141, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %143, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  %144 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %132, i64 %141, i32 2
  tail call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %144, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false)
  %145 = fcmp ogt float %2, 0.000000e+00
  %146 = fdiv float 1.000000e+00, %2
  %147 = select i1 %145, float %146, float 0.000000e+00
  %148 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %132, i64 %141, i32 6
  store float %147, ptr %148, align 8, !tbaa !174
  %149 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %150 = load ptr, ptr %149, align 8, !tbaa !119
  %151 = load ptr, ptr %150, align 8, !tbaa !219
  %152 = getelementptr inbounds %"struct.btSoftBody::Feature", ptr %142, i64 0, i32 1
  store ptr %151, ptr %152, align 8, !tbaa !183
  %153 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !225)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !228)
  %154 = load <2 x float>, ptr %143, align 4, !tbaa !137, !noalias !231
  %155 = insertelement <2 x float> poison, float %66, i64 0
  %156 = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> zeroinitializer
  %157 = fsub <2 x float> %154, %156
  %158 = getelementptr inbounds [4 x float], ptr %143, i64 0, i64 2
  %159 = load float, ptr %158, align 4, !tbaa !137, !noalias !231
  %160 = fsub float %159, %66
  %161 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %160, i64 0
  store <2 x float> %157, ptr %4, align 8, !tbaa.struct !162, !alias.scope !231
  %162 = getelementptr inbounds i8, ptr %4, i64 8
  store <2 x float> %161, ptr %162, align 8, !tbaa.struct !164, !alias.scope !231
  %163 = fadd <2 x float> %156, %154
  %164 = fadd float %66, %159
  %165 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %164, i64 0
  %166 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %4, i64 0, i32 1
  store <2 x float> %163, ptr %166, align 8, !tbaa.struct !162, !alias.scope !231
  %167 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %4, i64 0, i32 1, i32 0, i64 2
  store <2 x float> %165, ptr %167, align 8, !tbaa.struct !164, !alias.scope !231
  %168 = call noundef ptr @_ZN6btDbvt6insertERK12btDbvtAabbMmPv(ptr noundef nonnull align 8 dereferenceable(64) %153, ptr noundef nonnull align 4 dereferenceable(32) %4, ptr noundef nonnull %142)
  %169 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %132, i64 %141, i32 8
  store ptr %168, ptr %169, align 8, !tbaa !182
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #38
  ret void
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody17pointersToIndicesEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #10 align 2 {
  %2 = alloca i32, align 8
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !87
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2)
  store i32 0, ptr %2, align 8, !tbaa !140
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %6 = load i32, ptr %5, align 4, !tbaa !88
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %28

8:                                                ; preds = %1
  %9 = zext i32 %6 to i64
  br label %10

10:                                               ; preds = %8, %24
  %11 = phi i64 [ 0, %8 ], [ %25, %24 ]
  %12 = load ptr, ptr %3, align 8, !tbaa !87
  %13 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %12, i64 %11, i32 8
  %14 = load ptr, ptr %13, align 8, !tbaa !182
  %15 = icmp eq ptr %14, null
  br i1 %15, label %24, label %16

16:                                               ; preds = %10
  %17 = load ptr, ptr %2, align 8, !tbaa !219
  %18 = ptrtoint ptr %17 to i64
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %12, i64 %20, i32 8
  %22 = load ptr, ptr %21, align 8, !tbaa !182
  %23 = getelementptr inbounds %struct.btDbvtNode, ptr %22, i64 0, i32 2
  store ptr %17, ptr %23, align 8, !tbaa !163
  br label %24

24:                                               ; preds = %10, %16
  %25 = add nuw nsw i64 %11, 1
  %26 = trunc i64 %25 to i32
  store i32 %26, ptr %2, align 8, !tbaa !140
  %27 = icmp eq i64 %25, %9
  br i1 %27, label %28, label %10

28:                                               ; preds = %24, %1
  %29 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %30 = load i32, ptr %29, align 4, !tbaa !92
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %54

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %34 = ptrtoint ptr %4 to i64
  %35 = zext i32 %30 to i64
  br label %36

36:                                               ; preds = %32, %36
  %37 = phi i64 [ 0, %32 ], [ %52, %36 ]
  %38 = load ptr, ptr %33, align 8, !tbaa !91
  %39 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %38, i64 %37, i32 1
  %40 = load ptr, ptr %39, align 8, !tbaa !219
  %41 = ptrtoint ptr %40 to i64
  %42 = sub i64 %41, %34
  %43 = sdiv exact i64 %42, 120
  %44 = inttoptr i64 %43 to ptr
  store ptr %44, ptr %39, align 8, !tbaa !219
  %45 = load ptr, ptr %33, align 8, !tbaa !91
  %46 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %45, i64 %37, i32 1, i64 1
  %47 = load ptr, ptr %46, align 8, !tbaa !219
  %48 = ptrtoint ptr %47 to i64
  %49 = sub i64 %48, %34
  %50 = sdiv exact i64 %49, 120
  %51 = inttoptr i64 %50 to ptr
  store ptr %51, ptr %46, align 8, !tbaa !219
  %52 = add nuw nsw i64 %37, 1
  %53 = icmp eq i64 %52, %35
  br i1 %53, label %54, label %36

54:                                               ; preds = %36, %28
  store i32 0, ptr %2, align 8, !tbaa !140
  %55 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %56 = load i32, ptr %55, align 4, !tbaa !96
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %101

58:                                               ; preds = %54
  %59 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %60 = ptrtoint ptr %4 to i64
  %61 = zext i32 %56 to i64
  br label %62

62:                                               ; preds = %58, %97
  %63 = phi i64 [ 0, %58 ], [ %98, %97 ]
  %64 = load ptr, ptr %59, align 8, !tbaa !95
  %65 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %64, i64 %63, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !219
  %67 = ptrtoint ptr %66 to i64
  %68 = sub i64 %67, %60
  %69 = sdiv exact i64 %68, 120
  %70 = inttoptr i64 %69 to ptr
  store ptr %70, ptr %65, align 8, !tbaa !219
  %71 = load ptr, ptr %59, align 8, !tbaa !95
  %72 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %71, i64 %63, i32 1, i64 1
  %73 = load ptr, ptr %72, align 8, !tbaa !219
  %74 = ptrtoint ptr %73 to i64
  %75 = sub i64 %74, %60
  %76 = sdiv exact i64 %75, 120
  %77 = inttoptr i64 %76 to ptr
  store ptr %77, ptr %72, align 8, !tbaa !219
  %78 = load ptr, ptr %59, align 8, !tbaa !95
  %79 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %78, i64 %63, i32 1, i64 2
  %80 = load ptr, ptr %79, align 8, !tbaa !219
  %81 = ptrtoint ptr %80 to i64
  %82 = sub i64 %81, %60
  %83 = sdiv exact i64 %82, 120
  %84 = inttoptr i64 %83 to ptr
  store ptr %84, ptr %79, align 8, !tbaa !219
  %85 = load ptr, ptr %59, align 8, !tbaa !95
  %86 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %85, i64 %63, i32 4
  %87 = load ptr, ptr %86, align 8, !tbaa !232
  %88 = icmp eq ptr %87, null
  br i1 %88, label %97, label %89

89:                                               ; preds = %62
  %90 = load ptr, ptr %2, align 8, !tbaa !219
  %91 = ptrtoint ptr %90 to i64
  %92 = shl i64 %91, 32
  %93 = ashr exact i64 %92, 32
  %94 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %85, i64 %93, i32 4
  %95 = load ptr, ptr %94, align 8, !tbaa !232
  %96 = getelementptr inbounds %struct.btDbvtNode, ptr %95, i64 0, i32 2
  store ptr %90, ptr %96, align 8, !tbaa !163
  br label %97

97:                                               ; preds = %62, %89
  %98 = add nuw nsw i64 %63, 1
  %99 = trunc i64 %98 to i32
  store i32 %99, ptr %2, align 8, !tbaa !140
  %100 = icmp eq i64 %98, %61
  br i1 %100, label %101, label %62

101:                                              ; preds = %97, %54
  %102 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 2
  %103 = load i32, ptr %102, align 4, !tbaa !104
  %104 = icmp sgt i32 %103, 0
  br i1 %104, label %105, label %143

105:                                              ; preds = %101
  %106 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 5
  %107 = load ptr, ptr %106, align 8, !tbaa !103
  %108 = ptrtoint ptr %4 to i64
  %109 = zext i32 %103 to i64
  %110 = and i64 %109, 1
  %111 = icmp eq i32 %103, 1
  br i1 %111, label %133, label %112

112:                                              ; preds = %105
  %113 = and i64 %109, 4294967294
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i64 [ 0, %112 ], [ %130, %114 ]
  %116 = phi i64 [ 0, %112 ], [ %131, %114 ]
  %117 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %107, i64 %115
  %118 = load ptr, ptr %117, align 8, !tbaa !234
  %119 = ptrtoint ptr %118 to i64
  %120 = sub i64 %119, %108
  %121 = sdiv exact i64 %120, 120
  %122 = inttoptr i64 %121 to ptr
  store ptr %122, ptr %117, align 8, !tbaa !234
  %123 = or i64 %115, 1
  %124 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %107, i64 %123
  %125 = load ptr, ptr %124, align 8, !tbaa !234
  %126 = ptrtoint ptr %125 to i64
  %127 = sub i64 %126, %108
  %128 = sdiv exact i64 %127, 120
  %129 = inttoptr i64 %128 to ptr
  store ptr %129, ptr %124, align 8, !tbaa !234
  %130 = add nuw nsw i64 %115, 2
  %131 = add i64 %116, 2
  %132 = icmp eq i64 %131, %113
  br i1 %132, label %133, label %114

133:                                              ; preds = %114, %105
  %134 = phi i64 [ 0, %105 ], [ %130, %114 ]
  %135 = icmp eq i64 %110, 0
  br i1 %135, label %143, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %107, i64 %134
  %138 = load ptr, ptr %137, align 8, !tbaa !234
  %139 = ptrtoint ptr %138 to i64
  %140 = sub i64 %139, %108
  %141 = sdiv exact i64 %140, 120
  %142 = inttoptr i64 %141 to ptr
  store ptr %142, ptr %137, align 8, !tbaa !234
  br label %143

143:                                              ; preds = %136, %133, %101
  store i32 0, ptr %2, align 8, !tbaa !140
  %144 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 2
  %145 = load i32, ptr %144, align 4, !tbaa !84
  %146 = icmp sgt i32 %145, 0
  br i1 %146, label %147, label %177

147:                                              ; preds = %143
  %148 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 5
  %149 = ptrtoint ptr %4 to i64
  %150 = zext i32 %145 to i64
  %151 = load ptr, ptr %148, align 8, !tbaa !83
  br label %152

152:                                              ; preds = %147, %158
  %153 = phi ptr [ %151, %147 ], [ %159, %158 ]
  %154 = phi i64 [ 0, %147 ], [ %160, %158 ]
  %155 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %153, i64 %154, i32 3
  %156 = load i32, ptr %155, align 8, !tbaa !236
  %157 = icmp sgt i32 %156, 0
  br i1 %157, label %162, label %158

158:                                              ; preds = %162, %152
  %159 = phi ptr [ %153, %152 ], [ %172, %162 ]
  %160 = add nuw nsw i64 %154, 1
  %161 = icmp eq i64 %160, %150
  br i1 %161, label %177, label %152

162:                                              ; preds = %152, %162
  %163 = phi i64 [ %171, %162 ], [ 0, %152 ]
  %164 = phi ptr [ %172, %162 ], [ %153, %152 ]
  %165 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %164, i64 %154, i32 4, i64 %163
  %166 = load ptr, ptr %165, align 8, !tbaa !219
  %167 = ptrtoint ptr %166 to i64
  %168 = sub i64 %167, %149
  %169 = sdiv exact i64 %168, 120
  %170 = inttoptr i64 %169 to ptr
  store ptr %170, ptr %165, align 8, !tbaa !219
  %171 = add nuw nsw i64 %163, 1
  %172 = load ptr, ptr %148, align 8, !tbaa !83
  %173 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %172, i64 %154, i32 3
  %174 = load i32, ptr %173, align 8, !tbaa !236
  %175 = sext i32 %174 to i64
  %176 = icmp slt i64 %171, %175
  br i1 %176, label %162, label %158

177:                                              ; preds = %158, %143
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2)
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody17indicesToPointersEPKi(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr noundef readonly %1) local_unnamed_addr #11 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !87
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %6 = load i32, ptr %5, align 4, !tbaa !88
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %48

8:                                                ; preds = %2
  %9 = zext i32 %6 to i64
  %10 = and i64 %9, 1
  %11 = icmp eq i32 %6, 1
  br i1 %11, label %37, label %12

12:                                               ; preds = %8
  %13 = and i64 %9, 4294967294
  br label %14

14:                                               ; preds = %33, %12
  %15 = phi i64 [ 0, %12 ], [ %34, %33 ]
  %16 = phi i64 [ 0, %12 ], [ %35, %33 ]
  %17 = load ptr, ptr %3, align 8, !tbaa !87
  %18 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 %15, i32 8
  %19 = load ptr, ptr %18, align 8, !tbaa !182
  %20 = icmp eq ptr %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 %15
  %23 = getelementptr inbounds %struct.btDbvtNode, ptr %19, i64 0, i32 2
  store ptr %22, ptr %23, align 8, !tbaa !163
  br label %24

24:                                               ; preds = %14, %21
  %25 = or i64 %15, 1
  %26 = load ptr, ptr %3, align 8, !tbaa !87
  %27 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 %25, i32 8
  %28 = load ptr, ptr %27, align 8, !tbaa !182
  %29 = icmp eq ptr %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 %25
  %32 = getelementptr inbounds %struct.btDbvtNode, ptr %28, i64 0, i32 2
  store ptr %31, ptr %32, align 8, !tbaa !163
  br label %33

33:                                               ; preds = %30, %24
  %34 = add nuw nsw i64 %15, 2
  %35 = add i64 %16, 2
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %14

37:                                               ; preds = %33, %8
  %38 = phi i64 [ 0, %8 ], [ %34, %33 ]
  %39 = icmp eq i64 %10, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = load ptr, ptr %3, align 8, !tbaa !87
  %42 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %41, i64 %38, i32 8
  %43 = load ptr, ptr %42, align 8, !tbaa !182
  %44 = icmp eq ptr %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %41, i64 %38
  %47 = getelementptr inbounds %struct.btDbvtNode, ptr %43, i64 0, i32 2
  store ptr %46, ptr %47, align 8, !tbaa !163
  br label %48

48:                                               ; preds = %37, %45, %40, %2
  %49 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %50 = load i32, ptr %49, align 4, !tbaa !92
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %122

52:                                               ; preds = %48
  %53 = icmp eq ptr %1, null
  %54 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %55 = zext i32 %50 to i64
  br i1 %53, label %56, label %88

56:                                               ; preds = %52
  %57 = and i64 %55, 1
  %58 = icmp eq i32 %50, 1
  br i1 %58, label %108, label %59

59:                                               ; preds = %56
  %60 = and i64 %55, 4294967294
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %85, %61 ]
  %63 = phi i64 [ 0, %59 ], [ %86, %61 ]
  %64 = load ptr, ptr %54, align 8, !tbaa !91
  %65 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %64, i64 %62, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !219
  %67 = ptrtoint ptr %66 to i64
  %68 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %67
  store ptr %68, ptr %65, align 8, !tbaa !219
  %69 = load ptr, ptr %54, align 8, !tbaa !91
  %70 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %69, i64 %62, i32 1, i64 1
  %71 = load ptr, ptr %70, align 8, !tbaa !219
  %72 = ptrtoint ptr %71 to i64
  %73 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %72
  store ptr %73, ptr %70, align 8, !tbaa !219
  %74 = or i64 %62, 1
  %75 = load ptr, ptr %54, align 8, !tbaa !91
  %76 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %75, i64 %74, i32 1
  %77 = load ptr, ptr %76, align 8, !tbaa !219
  %78 = ptrtoint ptr %77 to i64
  %79 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %78
  store ptr %79, ptr %76, align 8, !tbaa !219
  %80 = load ptr, ptr %54, align 8, !tbaa !91
  %81 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %80, i64 %74, i32 1, i64 1
  %82 = load ptr, ptr %81, align 8, !tbaa !219
  %83 = ptrtoint ptr %82 to i64
  %84 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %83
  store ptr %84, ptr %81, align 8, !tbaa !219
  %85 = add nuw nsw i64 %62, 2
  %86 = add i64 %63, 2
  %87 = icmp eq i64 %86, %60
  br i1 %87, label %108, label %61

88:                                               ; preds = %52, %88
  %89 = phi i64 [ %106, %88 ], [ 0, %52 ]
  %90 = load ptr, ptr %54, align 8, !tbaa !91
  %91 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %90, i64 %89, i32 1
  %92 = load ptr, ptr %91, align 8, !tbaa !219
  %93 = ptrtoint ptr %92 to i64
  %94 = getelementptr inbounds i32, ptr %1, i64 %93
  %95 = load i32, ptr %94, align 4, !tbaa !140
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %96
  store ptr %97, ptr %91, align 8, !tbaa !219
  %98 = load ptr, ptr %54, align 8, !tbaa !91
  %99 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %98, i64 %89, i32 1, i64 1
  %100 = load ptr, ptr %99, align 8, !tbaa !219
  %101 = ptrtoint ptr %100 to i64
  %102 = getelementptr inbounds i32, ptr %1, i64 %101
  %103 = load i32, ptr %102, align 4, !tbaa !140
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %104
  store ptr %105, ptr %99, align 8, !tbaa !219
  %106 = add nuw nsw i64 %89, 1
  %107 = icmp eq i64 %106, %55
  br i1 %107, label %122, label %88

108:                                              ; preds = %61, %56
  %109 = phi i64 [ 0, %56 ], [ %85, %61 ]
  %110 = icmp eq i64 %57, 0
  br i1 %110, label %122, label %111

111:                                              ; preds = %108
  %112 = load ptr, ptr %54, align 8, !tbaa !91
  %113 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %112, i64 %109, i32 1
  %114 = load ptr, ptr %113, align 8, !tbaa !219
  %115 = ptrtoint ptr %114 to i64
  %116 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %115
  store ptr %116, ptr %113, align 8, !tbaa !219
  %117 = load ptr, ptr %54, align 8, !tbaa !91
  %118 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %117, i64 %109, i32 1, i64 1
  %119 = load ptr, ptr %118, align 8, !tbaa !219
  %120 = ptrtoint ptr %119 to i64
  %121 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %120
  store ptr %121, ptr %118, align 8, !tbaa !219
  br label %122

122:                                              ; preds = %88, %111, %108, %48
  %123 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %124 = load i32, ptr %123, align 4, !tbaa !96
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %182

126:                                              ; preds = %122
  %127 = icmp eq ptr %1, null
  %128 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %129 = zext i32 %124 to i64
  br label %130

130:                                              ; preds = %126, %179
  %131 = phi i64 [ 0, %126 ], [ %180, %179 ]
  %132 = load ptr, ptr %128, align 8, !tbaa !95
  %133 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %132, i64 %131, i32 1
  %134 = load ptr, ptr %133, align 8, !tbaa !219
  %135 = ptrtoint ptr %134 to i64
  br i1 %127, label %156, label %136

136:                                              ; preds = %130
  %137 = getelementptr inbounds i32, ptr %1, i64 %135
  %138 = load i32, ptr %137, align 4, !tbaa !140
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %139
  store ptr %140, ptr %133, align 8, !tbaa !219
  %141 = load ptr, ptr %128, align 8, !tbaa !95
  %142 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %141, i64 %131, i32 1, i64 1
  %143 = load ptr, ptr %142, align 8, !tbaa !219
  %144 = ptrtoint ptr %143 to i64
  %145 = getelementptr inbounds i32, ptr %1, i64 %144
  %146 = load i32, ptr %145, align 4, !tbaa !140
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %147
  store ptr %148, ptr %142, align 8, !tbaa !219
  %149 = load ptr, ptr %128, align 8, !tbaa !95
  %150 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %149, i64 %131, i32 1, i64 2
  %151 = load ptr, ptr %150, align 8, !tbaa !219
  %152 = ptrtoint ptr %151 to i64
  %153 = getelementptr inbounds i32, ptr %1, i64 %152
  %154 = load i32, ptr %153, align 4, !tbaa !140
  %155 = sext i32 %154 to i64
  br label %167

156:                                              ; preds = %130
  %157 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %135
  store ptr %157, ptr %133, align 8, !tbaa !219
  %158 = load ptr, ptr %128, align 8, !tbaa !95
  %159 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %158, i64 %131, i32 1, i64 1
  %160 = load ptr, ptr %159, align 8, !tbaa !219
  %161 = ptrtoint ptr %160 to i64
  %162 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %161
  store ptr %162, ptr %159, align 8, !tbaa !219
  %163 = load ptr, ptr %128, align 8, !tbaa !95
  %164 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %163, i64 %131, i32 1, i64 2
  %165 = load ptr, ptr %164, align 8, !tbaa !219
  %166 = ptrtoint ptr %165 to i64
  br label %167

167:                                              ; preds = %156, %136
  %168 = phi ptr [ %149, %136 ], [ %163, %156 ]
  %169 = phi i64 [ %155, %136 ], [ %166, %156 ]
  %170 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %169
  %171 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %168, i64 %131, i32 1, i64 2
  store ptr %170, ptr %171, align 8, !tbaa !219
  %172 = load ptr, ptr %128, align 8, !tbaa !95
  %173 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %172, i64 %131, i32 4
  %174 = load ptr, ptr %173, align 8, !tbaa !232
  %175 = icmp eq ptr %174, null
  br i1 %175, label %179, label %176

176:                                              ; preds = %167
  %177 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %172, i64 %131
  %178 = getelementptr inbounds %struct.btDbvtNode, ptr %174, i64 0, i32 2
  store ptr %177, ptr %178, align 8, !tbaa !163
  br label %179

179:                                              ; preds = %167, %176
  %180 = add nuw nsw i64 %131, 1
  %181 = icmp eq i64 %180, %129
  br i1 %181, label %182, label %130

182:                                              ; preds = %179, %122
  %183 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 2
  %184 = load i32, ptr %183, align 4, !tbaa !104
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %186, label %271

186:                                              ; preds = %182
  %187 = icmp eq ptr %1, null
  %188 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 5
  %189 = load ptr, ptr %188, align 8
  %190 = zext i32 %184 to i64
  br i1 %187, label %196, label %191

191:                                              ; preds = %186
  %192 = and i64 %190, 1
  %193 = icmp eq i32 %184, 1
  br i1 %193, label %260, label %194

194:                                              ; preds = %191
  %195 = and i64 %190, 4294967294
  br label %226

196:                                              ; preds = %186
  %197 = and i64 %190, 3
  %198 = icmp ult i32 %184, 4
  br i1 %198, label %247, label %199

199:                                              ; preds = %196
  %200 = and i64 %190, 4294967292
  br label %201

201:                                              ; preds = %201, %199
  %202 = phi i64 [ 0, %199 ], [ %223, %201 ]
  %203 = phi i64 [ 0, %199 ], [ %224, %201 ]
  %204 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %202
  %205 = load ptr, ptr %204, align 8, !tbaa !234
  %206 = ptrtoint ptr %205 to i64
  %207 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %206
  store ptr %207, ptr %204, align 8, !tbaa !234
  %208 = or i64 %202, 1
  %209 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %208
  %210 = load ptr, ptr %209, align 8, !tbaa !234
  %211 = ptrtoint ptr %210 to i64
  %212 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %211
  store ptr %212, ptr %209, align 8, !tbaa !234
  %213 = or i64 %202, 2
  %214 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %213
  %215 = load ptr, ptr %214, align 8, !tbaa !234
  %216 = ptrtoint ptr %215 to i64
  %217 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %216
  store ptr %217, ptr %214, align 8, !tbaa !234
  %218 = or i64 %202, 3
  %219 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %218
  %220 = load ptr, ptr %219, align 8, !tbaa !234
  %221 = ptrtoint ptr %220 to i64
  %222 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %221
  store ptr %222, ptr %219, align 8, !tbaa !234
  %223 = add nuw nsw i64 %202, 4
  %224 = add i64 %203, 4
  %225 = icmp eq i64 %224, %200
  br i1 %225, label %247, label %201

226:                                              ; preds = %226, %194
  %227 = phi i64 [ 0, %194 ], [ %244, %226 ]
  %228 = phi i64 [ 0, %194 ], [ %245, %226 ]
  %229 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %227
  %230 = load ptr, ptr %229, align 8, !tbaa !234
  %231 = ptrtoint ptr %230 to i64
  %232 = getelementptr inbounds i32, ptr %1, i64 %231
  %233 = load i32, ptr %232, align 4, !tbaa !140
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %234
  store ptr %235, ptr %229, align 8, !tbaa !234
  %236 = or i64 %227, 1
  %237 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %236
  %238 = load ptr, ptr %237, align 8, !tbaa !234
  %239 = ptrtoint ptr %238 to i64
  %240 = getelementptr inbounds i32, ptr %1, i64 %239
  %241 = load i32, ptr %240, align 4, !tbaa !140
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %242
  store ptr %243, ptr %237, align 8, !tbaa !234
  %244 = add nuw nsw i64 %227, 2
  %245 = add i64 %228, 2
  %246 = icmp eq i64 %245, %195
  br i1 %246, label %260, label %226

247:                                              ; preds = %201, %196
  %248 = phi i64 [ 0, %196 ], [ %223, %201 ]
  %249 = icmp eq i64 %197, 0
  br i1 %249, label %271, label %250

250:                                              ; preds = %247, %250
  %251 = phi i64 [ %257, %250 ], [ %248, %247 ]
  %252 = phi i64 [ %258, %250 ], [ 0, %247 ]
  %253 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %251
  %254 = load ptr, ptr %253, align 8, !tbaa !234
  %255 = ptrtoint ptr %254 to i64
  %256 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %255
  store ptr %256, ptr %253, align 8, !tbaa !234
  %257 = add nuw nsw i64 %251, 1
  %258 = add i64 %252, 1
  %259 = icmp eq i64 %258, %197
  br i1 %259, label %271, label %250, !llvm.loop !238

260:                                              ; preds = %226, %191
  %261 = phi i64 [ 0, %191 ], [ %244, %226 ]
  %262 = icmp eq i64 %192, 0
  br i1 %262, label %271, label %263

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %189, i64 %261
  %265 = load ptr, ptr %264, align 8, !tbaa !234
  %266 = ptrtoint ptr %265 to i64
  %267 = getelementptr inbounds i32, ptr %1, i64 %266
  %268 = load i32, ptr %267, align 4, !tbaa !140
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %269
  store ptr %270, ptr %264, align 8, !tbaa !234
  br label %271

271:                                              ; preds = %263, %260, %247, %250, %182
  %272 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 2
  %273 = load i32, ptr %272, align 4, !tbaa !84
  %274 = icmp sgt i32 %273, 0
  br i1 %274, label %275, label %329

275:                                              ; preds = %271
  %276 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 8, i32 5
  %277 = icmp eq ptr %1, null
  %278 = zext i32 %273 to i64
  %279 = load ptr, ptr %276, align 8, !tbaa !83
  br i1 %277, label %280, label %303

280:                                              ; preds = %275, %286
  %281 = phi ptr [ %287, %286 ], [ %279, %275 ]
  %282 = phi i64 [ %288, %286 ], [ 0, %275 ]
  %283 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %281, i64 %282, i32 3
  %284 = load i32, ptr %283, align 8, !tbaa !236
  %285 = icmp sgt i32 %284, 0
  br i1 %285, label %290, label %286

286:                                              ; preds = %290, %280
  %287 = phi ptr [ %281, %280 ], [ %298, %290 ]
  %288 = add nuw nsw i64 %282, 1
  %289 = icmp eq i64 %288, %278
  br i1 %289, label %329, label %280

290:                                              ; preds = %280, %290
  %291 = phi i64 [ %297, %290 ], [ 0, %280 ]
  %292 = phi ptr [ %298, %290 ], [ %281, %280 ]
  %293 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %292, i64 %282, i32 4, i64 %291
  %294 = load ptr, ptr %293, align 8, !tbaa !219
  %295 = ptrtoint ptr %294 to i64
  %296 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %295
  store ptr %296, ptr %293, align 8, !tbaa !219
  %297 = add nuw nsw i64 %291, 1
  %298 = load ptr, ptr %276, align 8, !tbaa !83
  %299 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %298, i64 %282, i32 3
  %300 = load i32, ptr %299, align 8, !tbaa !236
  %301 = sext i32 %300 to i64
  %302 = icmp slt i64 %297, %301
  br i1 %302, label %290, label %286

303:                                              ; preds = %275, %309
  %304 = phi ptr [ %310, %309 ], [ %279, %275 ]
  %305 = phi i64 [ %311, %309 ], [ 0, %275 ]
  %306 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %304, i64 %305, i32 3
  %307 = load i32, ptr %306, align 8, !tbaa !236
  %308 = icmp sgt i32 %307, 0
  br i1 %308, label %313, label %309

309:                                              ; preds = %313, %303
  %310 = phi ptr [ %304, %303 ], [ %324, %313 ]
  %311 = add nuw nsw i64 %305, 1
  %312 = icmp eq i64 %311, %278
  br i1 %312, label %329, label %303

313:                                              ; preds = %303, %313
  %314 = phi i64 [ %323, %313 ], [ 0, %303 ]
  %315 = phi ptr [ %324, %313 ], [ %304, %303 ]
  %316 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %315, i64 %305, i32 4, i64 %314
  %317 = load ptr, ptr %316, align 8, !tbaa !219
  %318 = ptrtoint ptr %317 to i64
  %319 = getelementptr inbounds i32, ptr %1, i64 %318
  %320 = load i32, ptr %319, align 4, !tbaa !140
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %321
  store ptr %322, ptr %316, align 8, !tbaa !219
  %323 = add nuw nsw i64 %314, 1
  %324 = load ptr, ptr %276, align 8, !tbaa !83
  %325 = getelementptr inbounds %"struct.btSoftBody::Note", ptr %324, i64 %305, i32 3
  %326 = load i32, ptr %325, align 8, !tbaa !236
  %327 = sext i32 %326 to i64
  %328 = icmp slt i64 %323, %327
  br i1 %328, label %313, label %309

329:                                              ; preds = %309, %286, %271
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendLinkEiPNS_8MaterialE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca <{ [2 x ptr], float, i8, [3 x i8], float, float, float, %class.btVector3, [4 x i8] }>, align 8
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4)
  %5 = icmp sgt i32 %1, -1
  br i1 %5, label %6, label %15

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !91
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %10, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(52) %4, ptr noundef nonnull align 8 dereferenceable(52) %14, i64 52, i1 false)
  br label %30

15:                                               ; preds = %3
  %16 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy acquire, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %23, !prof !172

18:                                               ; preds = %15
  %19 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8, !tbaa !173
  %22 = tail call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  br label %23

23:                                               ; preds = %15, %18, %21
  %24 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(52) %4, ptr noundef nonnull align 8 dereferenceable(52) getelementptr inbounds (%"struct.btSoftBody::Link", ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 52, i1 false)
  %25 = icmp eq ptr %2, null
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  %27 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !119
  %29 = load ptr, ptr %28, align 8, !tbaa !219
  br label %30

30:                                               ; preds = %26, %23, %6
  %31 = phi ptr [ %13, %6 ], [ %29, %26 ], [ %2, %23 ]
  %32 = phi ptr [ %11, %6 ], [ %24, %26 ], [ %24, %23 ]
  %33 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %34 = load i32, ptr %33, align 4, !tbaa !92
  %35 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 3
  %36 = load i32, ptr %35, align 8, !tbaa !93
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %38, label %92

38:                                               ; preds = %30
  %39 = icmp eq i32 %34, 0
  %40 = shl nsw i32 %34, 1
  %41 = select i1 %39, i32 1, i32 %40
  %42 = icmp slt i32 %34, %41
  br i1 %42, label %43, label %92

43:                                               ; preds = %38
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %43
  %46 = sext i32 %41 to i64
  %47 = mul nsw i64 %46, 72
  %48 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %47, i32 noundef 16)
  %49 = load i32, ptr %33, align 4, !tbaa !92
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i32 [ %49, %45 ], [ %34, %43 ]
  %52 = phi ptr [ %48, %45 ], [ null, %43 ]
  %53 = icmp sgt i32 %51, 0
  br i1 %53, label %54, label %81

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %56 = zext i32 %51 to i64
  %57 = and i64 %56, 1
  %58 = icmp eq i32 %51, 1
  br i1 %58, label %74, label %59

59:                                               ; preds = %54
  %60 = and i64 %56, 4294967294
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %71, %61 ]
  %63 = phi i64 [ 0, %59 ], [ %72, %61 ]
  %64 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %52, i64 %62
  %65 = load ptr, ptr %55, align 8, !tbaa !91
  %66 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %65, i64 %62
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %64, ptr noundef nonnull align 8 dereferenceable(72) %66, i64 72, i1 false)
  %67 = or i64 %62, 1
  %68 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %52, i64 %67
  %69 = load ptr, ptr %55, align 8, !tbaa !91
  %70 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %69, i64 %67
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %68, ptr noundef nonnull align 8 dereferenceable(72) %70, i64 72, i1 false)
  %71 = add nuw nsw i64 %62, 2
  %72 = add i64 %63, 2
  %73 = icmp eq i64 %72, %60
  br i1 %73, label %74, label %61

74:                                               ; preds = %61, %54
  %75 = phi i64 [ 0, %54 ], [ %71, %61 ]
  %76 = icmp eq i64 %57, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %52, i64 %75
  %79 = load ptr, ptr %55, align 8, !tbaa !91
  %80 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %79, i64 %75
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %78, ptr noundef nonnull align 8 dereferenceable(72) %80, i64 72, i1 false)
  br label %81

81:                                               ; preds = %77, %74, %50
  %82 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %83 = load ptr, ptr %82, align 8, !tbaa !91
  %84 = icmp eq ptr %83, null
  %85 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 6
  %86 = load i8, ptr %85, align 8
  %87 = icmp eq i8 %86, 0
  %88 = select i1 %84, i1 true, i1 %87
  br i1 %88, label %90, label %89

89:                                               ; preds = %81
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %83)
  br label %90

90:                                               ; preds = %89, %81
  store i8 1, ptr %85, align 8, !tbaa !90
  store ptr %52, ptr %82, align 8, !tbaa !91
  store i32 %41, ptr %35, align 8, !tbaa !93
  %91 = load i32, ptr %33, align 4, !tbaa !92
  br label %92

92:                                               ; preds = %30, %38, %90
  %93 = phi i32 [ %91, %90 ], [ %34, %38 ], [ %34, %30 ]
  %94 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %95 = load ptr, ptr %94, align 8, !tbaa !91
  %96 = sext i32 %93 to i64
  %97 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %95, i64 %96
  store ptr %32, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr %31, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %97, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %99, ptr noundef nonnull align 8 dereferenceable(56) %4, i64 56, i1 false)
  %100 = load i32, ptr %33, align 4, !tbaa !92
  %101 = add nsw i32 %100, 1
  store i32 %101, ptr %33, align 4, !tbaa !92
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, i32 noundef %2, ptr noundef %3, i1 noundef zeroext %4) local_unnamed_addr #4 align 2 {
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !87
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 %8
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 %10
  tail call void @_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull %9, ptr noundef nonnull %11, ptr noundef %3, i1 noundef zeroext %4)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i1 noundef zeroext %4) local_unnamed_addr #0 align 2 {
  br i1 %4, label %6, label %43

6:                                                ; preds = %5
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !92
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %43

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %12 = load ptr, ptr %11, align 8, !tbaa !91
  %13 = zext i32 %8 to i64
  %14 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !219
  %16 = icmp eq ptr %15, %1
  %17 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 0, i32 1, i64 1
  %18 = load ptr, ptr %17, align 8
  %19 = icmp eq ptr %18, %2
  %20 = select i1 %16, i1 %19, i1 false
  br i1 %20, label %73, label %21

21:                                               ; preds = %10
  %22 = icmp eq ptr %15, %2
  %23 = icmp eq ptr %18, %1
  %24 = select i1 %22, i1 %23, i1 false
  br i1 %24, label %73, label %25

25:                                               ; preds = %21, %37
  %26 = phi i64 [ %27, %37 ], [ 0, %21 ]
  %27 = add nuw nsw i64 %26, 1
  %28 = icmp eq i64 %27, %13
  br i1 %28, label %41, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %27, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !219
  %32 = icmp eq ptr %31, %1
  %33 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %27, i32 1, i64 1
  %34 = load ptr, ptr %33, align 8
  %35 = icmp eq ptr %34, %2
  %36 = select i1 %32, i1 %35, i1 false
  br i1 %36, label %41, label %37

37:                                               ; preds = %29
  %38 = icmp eq ptr %31, %2
  %39 = icmp eq ptr %34, %1
  %40 = select i1 %38, i1 %39, i1 false
  br i1 %40, label %41, label %25

41:                                               ; preds = %25, %29, %37
  %42 = icmp ult i64 %27, %13
  br i1 %42, label %73, label %43

43:                                               ; preds = %6, %41, %5
  tail call void @_ZN10btSoftBody10appendLinkEiPNS_8MaterialE(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef -1, ptr noundef %3)
  %44 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %45 = load i32, ptr %44, align 4, !tbaa !92
  %46 = add nsw i32 %45, -1
  %47 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %48 = load ptr, ptr %47, align 8, !tbaa !91
  %49 = sext i32 %46 to i64
  %50 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %48, i64 %49, i32 1
  store ptr %1, ptr %50, align 8, !tbaa !219
  %51 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %48, i64 %49, i32 1, i64 1
  store ptr %2, ptr %51, align 8, !tbaa !219
  %52 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 1
  %53 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %2, i64 0, i32 1
  %54 = load float, ptr %52, align 4, !tbaa !137
  %55 = load float, ptr %53, align 4, !tbaa !137
  %56 = fsub float %54, %55
  %57 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 1, i32 0, i64 1
  %58 = load float, ptr %57, align 4, !tbaa !137
  %59 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %2, i64 0, i32 1, i32 0, i64 1
  %60 = load float, ptr %59, align 4, !tbaa !137
  %61 = fsub float %58, %60
  %62 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 1, i32 0, i64 2
  %63 = load float, ptr %62, align 4, !tbaa !137
  %64 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %2, i64 0, i32 1, i32 0, i64 2
  %65 = load float, ptr %64, align 4, !tbaa !137
  %66 = fsub float %63, %65
  %67 = fmul float %61, %61
  %68 = tail call float @llvm.fmuladd.f32(float %56, float %56, float %67)
  %69 = tail call float @llvm.fmuladd.f32(float %66, float %66, float %68)
  %70 = tail call float @llvm.sqrt.f32(float %69)
  %71 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %48, i64 %49, i32 2
  store float %70, ptr %71, align 8, !tbaa !239
  %72 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  store i8 1, ptr %72, align 4, !tbaa !147
  br label %73

73:                                               ; preds = %21, %10, %43, %41
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendFaceEiPNS_8MaterialE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca { [3 x ptr], %class.btVector3, float, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4)
  %5 = icmp sgt i32 %1, -1
  br i1 %5, label %6, label %15

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !95
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %10, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %4, ptr noundef nonnull align 8 dereferenceable(56) %14, i64 56, i1 false)
  br label %30

15:                                               ; preds = %3
  %16 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy acquire, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %23, !prof !172

18:                                               ; preds = %15
  %19 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy) #38
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy, align 8, !tbaa !173
  %22 = tail call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy) #38
  br label %23

23:                                               ; preds = %15, %18, %21
  %24 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %4, ptr noundef nonnull align 8 dereferenceable(56) getelementptr inbounds (%"struct.btSoftBody::Face", ptr @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 56, i1 false)
  %25 = icmp eq ptr %2, null
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  %27 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !119
  %29 = load ptr, ptr %28, align 8, !tbaa !219
  br label %30

30:                                               ; preds = %26, %23, %6
  %31 = phi ptr [ %13, %6 ], [ %29, %26 ], [ %2, %23 ]
  %32 = phi ptr [ %11, %6 ], [ %24, %26 ], [ %24, %23 ]
  %33 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %34 = load i32, ptr %33, align 4, !tbaa !96
  %35 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 3
  %36 = load i32, ptr %35, align 8, !tbaa !97
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %38, label %92

38:                                               ; preds = %30
  %39 = icmp eq i32 %34, 0
  %40 = shl nsw i32 %34, 1
  %41 = select i1 %39, i32 1, i32 %40
  %42 = icmp slt i32 %34, %41
  br i1 %42, label %43, label %92

43:                                               ; preds = %38
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %43
  %46 = sext i32 %41 to i64
  %47 = mul nsw i64 %46, 72
  %48 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %47, i32 noundef 16)
  %49 = load i32, ptr %33, align 4, !tbaa !96
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i32 [ %49, %45 ], [ %34, %43 ]
  %52 = phi ptr [ %48, %45 ], [ null, %43 ]
  %53 = icmp sgt i32 %51, 0
  br i1 %53, label %54, label %81

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %56 = zext i32 %51 to i64
  %57 = and i64 %56, 1
  %58 = icmp eq i32 %51, 1
  br i1 %58, label %74, label %59

59:                                               ; preds = %54
  %60 = and i64 %56, 4294967294
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %71, %61 ]
  %63 = phi i64 [ 0, %59 ], [ %72, %61 ]
  %64 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %52, i64 %62
  %65 = load ptr, ptr %55, align 8, !tbaa !95
  %66 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %65, i64 %62
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %64, ptr noundef nonnull align 8 dereferenceable(72) %66, i64 72, i1 false)
  %67 = or i64 %62, 1
  %68 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %52, i64 %67
  %69 = load ptr, ptr %55, align 8, !tbaa !95
  %70 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %69, i64 %67
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %68, ptr noundef nonnull align 8 dereferenceable(72) %70, i64 72, i1 false)
  %71 = add nuw nsw i64 %62, 2
  %72 = add i64 %63, 2
  %73 = icmp eq i64 %72, %60
  br i1 %73, label %74, label %61

74:                                               ; preds = %61, %54
  %75 = phi i64 [ 0, %54 ], [ %71, %61 ]
  %76 = icmp eq i64 %57, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %52, i64 %75
  %79 = load ptr, ptr %55, align 8, !tbaa !95
  %80 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %79, i64 %75
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %78, ptr noundef nonnull align 8 dereferenceable(72) %80, i64 72, i1 false)
  br label %81

81:                                               ; preds = %77, %74, %50
  %82 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %83 = load ptr, ptr %82, align 8, !tbaa !95
  %84 = icmp eq ptr %83, null
  %85 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 6
  %86 = load i8, ptr %85, align 8
  %87 = icmp eq i8 %86, 0
  %88 = select i1 %84, i1 true, i1 %87
  br i1 %88, label %90, label %89

89:                                               ; preds = %81
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %83)
  br label %90

90:                                               ; preds = %89, %81
  store i8 1, ptr %85, align 8, !tbaa !94
  store ptr %52, ptr %82, align 8, !tbaa !95
  store i32 %41, ptr %35, align 8, !tbaa !97
  %91 = load i32, ptr %33, align 4, !tbaa !96
  br label %92

92:                                               ; preds = %30, %38, %90
  %93 = phi i32 [ %91, %90 ], [ %34, %38 ], [ %34, %30 ]
  %94 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %95 = load ptr, ptr %94, align 8, !tbaa !95
  %96 = sext i32 %93 to i64
  %97 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %95, i64 %96
  store ptr %32, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr %31, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %97, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %99, ptr noundef nonnull align 8 dereferenceable(56) %4, i64 56, i1 false)
  %100 = load i32, ptr %33, align 4, !tbaa !96
  %101 = add nsw i32 %100, 1
  store i32 %101, ptr %33, align 4, !tbaa !96
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4) local_unnamed_addr #0 align 2 {
  %6 = icmp eq i32 %1, %2
  %7 = icmp eq i32 %2, %3
  %8 = or i1 %6, %7
  %9 = icmp eq i32 %3, %1
  %10 = or i1 %9, %8
  br i1 %10, label %70, label %11

11:                                               ; preds = %5
  tail call void @_ZN10btSoftBody10appendFaceEiPNS_8MaterialE(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef -1, ptr noundef %4)
  %12 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %13 = load i32, ptr %12, align 4, !tbaa !96
  %14 = add nsw i32 %13, -1
  %15 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !95
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !87
  %20 = sext i32 %1 to i64
  %21 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 %20
  %22 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %16, i64 %17, i32 1
  store ptr %21, ptr %22, align 8, !tbaa !219
  %23 = load ptr, ptr %18, align 8, !tbaa !87
  %24 = sext i32 %2 to i64
  %25 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %23, i64 %24
  %26 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %16, i64 %17, i32 1, i64 1
  store ptr %25, ptr %26, align 8, !tbaa !219
  %27 = load ptr, ptr %18, align 8, !tbaa !87
  %28 = sext i32 %3 to i64
  %29 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %27, i64 %28
  %30 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %16, i64 %17, i32 1, i64 2
  store ptr %29, ptr %30, align 8, !tbaa !219
  %31 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 %20, i32 1
  %32 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %23, i64 %24, i32 1
  %33 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %27, i64 %28, i32 1
  %34 = load float, ptr %32, align 4, !tbaa !137
  %35 = load float, ptr %31, align 4, !tbaa !137
  %36 = fsub float %34, %35
  %37 = getelementptr inbounds [4 x float], ptr %32, i64 0, i64 1
  %38 = load float, ptr %37, align 4, !tbaa !137
  %39 = getelementptr inbounds [4 x float], ptr %31, i64 0, i64 1
  %40 = load float, ptr %39, align 4, !tbaa !137
  %41 = fsub float %38, %40
  %42 = getelementptr inbounds [4 x float], ptr %32, i64 0, i64 2
  %43 = load float, ptr %42, align 4, !tbaa !137
  %44 = getelementptr inbounds [4 x float], ptr %31, i64 0, i64 2
  %45 = load float, ptr %44, align 4, !tbaa !137
  %46 = fsub float %43, %45
  %47 = load float, ptr %33, align 4, !tbaa !137
  %48 = fsub float %47, %35
  %49 = getelementptr inbounds [4 x float], ptr %33, i64 0, i64 1
  %50 = load float, ptr %49, align 4, !tbaa !137
  %51 = fsub float %50, %40
  %52 = getelementptr inbounds [4 x float], ptr %33, i64 0, i64 2
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = fsub float %53, %45
  %55 = fneg float %46
  %56 = fmul float %51, %55
  %57 = tail call float @llvm.fmuladd.f32(float %41, float %54, float %56)
  %58 = fneg float %36
  %59 = fmul float %54, %58
  %60 = tail call float @llvm.fmuladd.f32(float %46, float %48, float %59)
  %61 = fneg float %41
  %62 = fmul float %48, %61
  %63 = tail call float @llvm.fmuladd.f32(float %36, float %51, float %62)
  %64 = fmul float %60, %60
  %65 = tail call float @llvm.fmuladd.f32(float %57, float %57, float %64)
  %66 = tail call float @llvm.fmuladd.f32(float %63, float %63, float %65)
  %67 = tail call float @llvm.sqrt.f32(float %66)
  %68 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %16, i64 %17, i32 3
  store float %67, ptr %68, align 8, !tbaa !241
  %69 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  store i8 1, ptr %69, align 4, !tbaa !147
  br label %70

70:                                               ; preds = %5, %11
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody11appendTetraEiPNS_8MaterialE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca { [4 x ptr], float, ptr, [4 x %class.btVector3], float, float }, align 8
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %4)
  %5 = icmp sgt i32 %1, -1
  br i1 %5, label %6, label %15

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !99
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %10, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %4, ptr noundef nonnull align 8 dereferenceable(120) %14, i64 120, i1 false)
  br label %30

15:                                               ; preds = %3
  %16 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy acquire, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %23, !prof !172

18:                                               ; preds = %15
  %19 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy) #38
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy, align 8, !tbaa !173
  %22 = tail call ptr @llvm.invariant.start.p0(i64 136, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy) #38
  br label %23

23:                                               ; preds = %15, %18, %21
  %24 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %4, ptr noundef nonnull align 8 dereferenceable(120) getelementptr inbounds (%"struct.btSoftBody::Tetra", ptr @_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 120, i1 false)
  %25 = icmp eq ptr %2, null
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  %27 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !119
  %29 = load ptr, ptr %28, align 8, !tbaa !219
  br label %30

30:                                               ; preds = %26, %23, %6
  %31 = phi ptr [ %13, %6 ], [ %29, %26 ], [ %2, %23 ]
  %32 = phi ptr [ %11, %6 ], [ %24, %26 ], [ %24, %23 ]
  %33 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 2
  %34 = load i32, ptr %33, align 4, !tbaa !100
  %35 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 3
  %36 = load i32, ptr %35, align 8, !tbaa !101
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %38, label %92

38:                                               ; preds = %30
  %39 = icmp eq i32 %34, 0
  %40 = shl nsw i32 %34, 1
  %41 = select i1 %39, i32 1, i32 %40
  %42 = icmp slt i32 %34, %41
  br i1 %42, label %43, label %92

43:                                               ; preds = %38
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %43
  %46 = sext i32 %41 to i64
  %47 = mul nsw i64 %46, 136
  %48 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %47, i32 noundef 16)
  %49 = load i32, ptr %33, align 4, !tbaa !100
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i32 [ %49, %45 ], [ %34, %43 ]
  %52 = phi ptr [ %48, %45 ], [ null, %43 ]
  %53 = icmp sgt i32 %51, 0
  br i1 %53, label %54, label %81

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %56 = zext i32 %51 to i64
  %57 = and i64 %56, 1
  %58 = icmp eq i32 %51, 1
  br i1 %58, label %74, label %59

59:                                               ; preds = %54
  %60 = and i64 %56, 4294967294
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %71, %61 ]
  %63 = phi i64 [ 0, %59 ], [ %72, %61 ]
  %64 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %52, i64 %62
  %65 = load ptr, ptr %55, align 8, !tbaa !99
  %66 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %65, i64 %62
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(136) %64, ptr noundef nonnull align 8 dereferenceable(136) %66, i64 136, i1 false)
  %67 = or i64 %62, 1
  %68 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %52, i64 %67
  %69 = load ptr, ptr %55, align 8, !tbaa !99
  %70 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %69, i64 %67
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(136) %68, ptr noundef nonnull align 8 dereferenceable(136) %70, i64 136, i1 false)
  %71 = add nuw nsw i64 %62, 2
  %72 = add i64 %63, 2
  %73 = icmp eq i64 %72, %60
  br i1 %73, label %74, label %61

74:                                               ; preds = %61, %54
  %75 = phi i64 [ 0, %54 ], [ %71, %61 ]
  %76 = icmp eq i64 %57, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %52, i64 %75
  %79 = load ptr, ptr %55, align 8, !tbaa !99
  %80 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %79, i64 %75
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(136) %78, ptr noundef nonnull align 8 dereferenceable(136) %80, i64 136, i1 false)
  br label %81

81:                                               ; preds = %77, %74, %50
  %82 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %83 = load ptr, ptr %82, align 8, !tbaa !99
  %84 = icmp eq ptr %83, null
  %85 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 6
  %86 = load i8, ptr %85, align 8
  %87 = icmp eq i8 %86, 0
  %88 = select i1 %84, i1 true, i1 %87
  br i1 %88, label %90, label %89

89:                                               ; preds = %81
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %83)
  br label %90

90:                                               ; preds = %89, %81
  store i8 1, ptr %85, align 8, !tbaa !98
  store ptr %52, ptr %82, align 8, !tbaa !99
  store i32 %41, ptr %35, align 8, !tbaa !101
  %91 = load i32, ptr %33, align 4, !tbaa !100
  br label %92

92:                                               ; preds = %30, %38, %90
  %93 = phi i32 [ %91, %90 ], [ %34, %38 ], [ %34, %30 ]
  %94 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %95 = load ptr, ptr %94, align 8, !tbaa !99
  %96 = sext i32 %93 to i64
  %97 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %95, i64 %96
  store ptr %32, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr %31, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %97, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %99, ptr noundef nonnull align 8 dereferenceable(120) %4, i64 120, i1 false)
  %100 = load i32, ptr %33, align 4, !tbaa !100
  %101 = add nsw i32 %100, 1
  store i32 %101, ptr %33, align 4, !tbaa !100
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %4)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, ptr noundef %5) local_unnamed_addr #0 align 2 {
  tail call void @_ZN10btSoftBody11appendTetraEiPNS_8MaterialE(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef -1, ptr noundef %5)
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !100
  %9 = add nsw i32 %8, -1
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !99
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !87
  %15 = sext i32 %1 to i64
  %16 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %15
  %17 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %11, i64 %12, i32 1
  store ptr %16, ptr %17, align 8, !tbaa !219
  %18 = load ptr, ptr %13, align 8, !tbaa !87
  %19 = sext i32 %2 to i64
  %20 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %18, i64 %19
  %21 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %11, i64 %12, i32 1, i64 1
  store ptr %20, ptr %21, align 8, !tbaa !219
  %22 = load ptr, ptr %13, align 8, !tbaa !87
  %23 = sext i32 %3 to i64
  %24 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %22, i64 %23
  %25 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %11, i64 %12, i32 1, i64 2
  store ptr %24, ptr %25, align 8, !tbaa !219
  %26 = load ptr, ptr %13, align 8, !tbaa !87
  %27 = sext i32 %4 to i64
  %28 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 %27
  %29 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %11, i64 %12, i32 1, i64 3
  store ptr %28, ptr %29, align 8, !tbaa !219
  %30 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %15, i32 1
  %31 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %18, i64 %19, i32 1
  %32 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %22, i64 %23, i32 1
  %33 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 %27, i32 1
  %34 = load float, ptr %31, align 4, !tbaa !137
  %35 = load float, ptr %30, align 4, !tbaa !137
  %36 = fsub float %34, %35
  %37 = getelementptr inbounds [4 x float], ptr %31, i64 0, i64 1
  %38 = load float, ptr %37, align 4, !tbaa !137
  %39 = getelementptr inbounds [4 x float], ptr %30, i64 0, i64 1
  %40 = load float, ptr %39, align 4, !tbaa !137
  %41 = fsub float %38, %40
  %42 = getelementptr inbounds [4 x float], ptr %31, i64 0, i64 2
  %43 = load float, ptr %42, align 4, !tbaa !137
  %44 = getelementptr inbounds [4 x float], ptr %30, i64 0, i64 2
  %45 = load float, ptr %44, align 4, !tbaa !137
  %46 = fsub float %43, %45
  %47 = load float, ptr %32, align 4, !tbaa !137
  %48 = fsub float %47, %35
  %49 = getelementptr inbounds [4 x float], ptr %32, i64 0, i64 1
  %50 = load float, ptr %49, align 4, !tbaa !137
  %51 = fsub float %50, %40
  %52 = getelementptr inbounds [4 x float], ptr %32, i64 0, i64 2
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = fsub float %53, %45
  %55 = load float, ptr %33, align 4, !tbaa !137
  %56 = fsub float %55, %35
  %57 = getelementptr inbounds [4 x float], ptr %33, i64 0, i64 1
  %58 = load float, ptr %57, align 4, !tbaa !137
  %59 = fsub float %58, %40
  %60 = getelementptr inbounds [4 x float], ptr %33, i64 0, i64 2
  %61 = load float, ptr %60, align 4, !tbaa !137
  %62 = fsub float %61, %45
  %63 = fneg float %54
  %64 = fmul float %59, %63
  %65 = tail call float @llvm.fmuladd.f32(float %51, float %62, float %64)
  %66 = fneg float %48
  %67 = fmul float %62, %66
  %68 = tail call float @llvm.fmuladd.f32(float %54, float %56, float %67)
  %69 = fneg float %51
  %70 = fmul float %56, %69
  %71 = tail call float @llvm.fmuladd.f32(float %48, float %59, float %70)
  %72 = fmul float %41, %68
  %73 = tail call float @llvm.fmuladd.f32(float %36, float %65, float %72)
  %74 = tail call float @llvm.fmuladd.f32(float %46, float %71, float %73)
  %75 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %11, i64 %12, i32 2
  store float %74, ptr %75, align 8, !tbaa !242
  %76 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  store i8 1, ptr %76, align 4, !tbaa !147
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody12appendAnchorEiP11btRigidBodyb(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, ptr noundef %2, i1 noundef zeroext %3) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.btSoftBody::Anchor", align 8
  br i1 %3, label %6, label %109

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %25

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 5
  %12 = load ptr, ptr %11, align 8, !tbaa !15
  %13 = zext i32 %8 to i64
  br label %14

14:                                               ; preds = %19, %10
  %15 = phi i64 [ 0, %10 ], [ %20, %19 ]
  %16 = getelementptr inbounds ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8, !tbaa !219
  %18 = icmp eq ptr %17, %2
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = add nuw nsw i64 %15, 1
  %21 = icmp eq i64 %20, %13
  br i1 %21, label %25, label %14

22:                                               ; preds = %14
  %23 = trunc i64 %15 to i32
  %24 = icmp eq i32 %8, %23
  br i1 %24, label %25, label %109

25:                                               ; preds = %19, %6, %22
  %26 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 3
  %27 = load i32, ptr %26, align 8, !tbaa !17
  %28 = icmp eq i32 %8, %27
  br i1 %28, label %29, label %102

29:                                               ; preds = %25
  %30 = icmp eq i32 %8, 0
  %31 = shl nsw i32 %8, 1
  %32 = select i1 %30, i32 1, i32 %31
  %33 = icmp slt i32 %8, %32
  br i1 %33, label %34, label %102

34:                                               ; preds = %29
  %35 = icmp eq i32 %32, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %34
  %37 = sext i32 %32 to i64
  %38 = shl nsw i64 %37, 3
  %39 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %38, i32 noundef 16)
  %40 = load i32, ptr %7, align 4, !tbaa !16
  br label %41

41:                                               ; preds = %36, %34
  %42 = phi i32 [ %40, %36 ], [ %8, %34 ]
  %43 = phi ptr [ %39, %36 ], [ null, %34 ]
  %44 = icmp sgt i32 %42, 0
  br i1 %44, label %45, label %90

45:                                               ; preds = %41
  %46 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 5
  %47 = zext i32 %42 to i64
  %48 = and i64 %47, 3
  %49 = icmp ult i32 %42, 4
  br i1 %49, label %77, label %50

50:                                               ; preds = %45
  %51 = and i64 %47, 4294967292
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %74, %52 ]
  %54 = phi i64 [ 0, %50 ], [ %75, %52 ]
  %55 = getelementptr inbounds ptr, ptr %43, i64 %53
  %56 = load ptr, ptr %46, align 8, !tbaa !15
  %57 = getelementptr inbounds ptr, ptr %56, i64 %53
  %58 = load ptr, ptr %57, align 8, !tbaa !219
  store ptr %58, ptr %55, align 8, !tbaa !219
  %59 = or i64 %53, 1
  %60 = getelementptr inbounds ptr, ptr %43, i64 %59
  %61 = load ptr, ptr %46, align 8, !tbaa !15
  %62 = getelementptr inbounds ptr, ptr %61, i64 %59
  %63 = load ptr, ptr %62, align 8, !tbaa !219
  store ptr %63, ptr %60, align 8, !tbaa !219
  %64 = or i64 %53, 2
  %65 = getelementptr inbounds ptr, ptr %43, i64 %64
  %66 = load ptr, ptr %46, align 8, !tbaa !15
  %67 = getelementptr inbounds ptr, ptr %66, i64 %64
  %68 = load ptr, ptr %67, align 8, !tbaa !219
  store ptr %68, ptr %65, align 8, !tbaa !219
  %69 = or i64 %53, 3
  %70 = getelementptr inbounds ptr, ptr %43, i64 %69
  %71 = load ptr, ptr %46, align 8, !tbaa !15
  %72 = getelementptr inbounds ptr, ptr %71, i64 %69
  %73 = load ptr, ptr %72, align 8, !tbaa !219
  store ptr %73, ptr %70, align 8, !tbaa !219
  %74 = add nuw nsw i64 %53, 4
  %75 = add i64 %54, 4
  %76 = icmp eq i64 %75, %51
  br i1 %76, label %77, label %52

77:                                               ; preds = %52, %45
  %78 = phi i64 [ 0, %45 ], [ %74, %52 ]
  %79 = icmp eq i64 %48, 0
  br i1 %79, label %90, label %80

80:                                               ; preds = %77, %80
  %81 = phi i64 [ %87, %80 ], [ %78, %77 ]
  %82 = phi i64 [ %88, %80 ], [ 0, %77 ]
  %83 = getelementptr inbounds ptr, ptr %43, i64 %81
  %84 = load ptr, ptr %46, align 8, !tbaa !15
  %85 = getelementptr inbounds ptr, ptr %84, i64 %81
  %86 = load ptr, ptr %85, align 8, !tbaa !219
  store ptr %86, ptr %83, align 8, !tbaa !219
  %87 = add nuw nsw i64 %81, 1
  %88 = add i64 %82, 1
  %89 = icmp eq i64 %88, %48
  br i1 %89, label %90, label %80, !llvm.loop !244

90:                                               ; preds = %77, %80, %41
  %91 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 5
  %92 = load ptr, ptr %91, align 8, !tbaa !15
  %93 = icmp eq ptr %92, null
  %94 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 6
  %95 = load i8, ptr %94, align 8
  %96 = icmp eq i8 %95, 0
  %97 = select i1 %93, i1 true, i1 %96
  br i1 %97, label %100, label %98

98:                                               ; preds = %90
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %92)
  %99 = load i32, ptr %7, align 4, !tbaa !16
  br label %100

100:                                              ; preds = %98, %90
  %101 = phi i32 [ %99, %98 ], [ %42, %90 ]
  store i8 1, ptr %94, align 8, !tbaa !8
  store ptr %43, ptr %91, align 8, !tbaa !15
  store i32 %32, ptr %26, align 8, !tbaa !17
  br label %102

102:                                              ; preds = %25, %29, %100
  %103 = phi i32 [ %101, %100 ], [ %8, %29 ], [ %8, %25 ]
  %104 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 1, i32 5
  %105 = load ptr, ptr %104, align 8, !tbaa !15
  %106 = sext i32 %103 to i64
  %107 = getelementptr inbounds ptr, ptr %105, i64 %106
  store ptr %2, ptr %107, align 8, !tbaa !219
  %108 = add nsw i32 %103, 1
  store i32 %108, ptr %7, align 4, !tbaa !16
  br label %109

109:                                              ; preds = %22, %102, %4
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %5) #38
  %110 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %111 = load ptr, ptr %110, align 8, !tbaa !87
  %112 = sext i32 %1 to i64
  %113 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %111, i64 %112
  store ptr %113, ptr %5, align 8, !tbaa !234
  %114 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %5, i64 0, i32 2
  store ptr %2, ptr %114, align 8, !tbaa !245
  %115 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2
  %116 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 0, i32 0, i64 1
  %117 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 0, i32 0, i64 2
  %118 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 0, i32 0, i64 0, i32 0, i64 2
  %119 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 0, i32 0, i64 1, i32 0, i64 2
  %120 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 0, i32 0, i64 2, i32 0, i64 2
  %121 = load float, ptr %118, align 4, !tbaa !137, !noalias !246
  %122 = load float, ptr %119, align 4, !tbaa !137, !noalias !246
  %123 = load float, ptr %120, align 4, !tbaa !137, !noalias !246
  %124 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 1
  %125 = load float, ptr %124, align 4, !tbaa !137, !noalias !251
  %126 = fneg float %125
  %127 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 1, i32 0, i64 1
  %128 = load float, ptr %127, align 4, !tbaa !137, !noalias !251
  %129 = fneg float %128
  %130 = getelementptr inbounds %class.btCollisionObject, ptr %2, i64 0, i32 2, i32 1, i32 0, i64 2
  %131 = load float, ptr %130, align 4, !tbaa !137, !noalias !251
  %132 = fneg float %131
  %133 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %111, i64 %112, i32 1
  %134 = load float, ptr %133, align 4, !tbaa !137
  %135 = getelementptr inbounds [4 x float], ptr %133, i64 0, i64 1
  %136 = load float, ptr %135, align 4, !tbaa !137
  %137 = getelementptr inbounds [4 x float], ptr %133, i64 0, i64 2
  %138 = load float, ptr %137, align 4, !tbaa !137
  %139 = load <2 x float>, ptr %115, align 4, !tbaa !137, !noalias !246
  %140 = load <2 x float>, ptr %116, align 4, !tbaa !137, !noalias !246
  %141 = load <2 x float>, ptr %117, align 4, !tbaa !137, !noalias !246
  %142 = insertelement <2 x float> poison, float %129, i64 0
  %143 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> zeroinitializer
  %144 = fmul <2 x float> %140, %143
  %145 = insertelement <2 x float> poison, float %126, i64 0
  %146 = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> zeroinitializer
  %147 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %139, <2 x float> %146, <2 x float> %144)
  %148 = insertelement <2 x float> poison, float %132, i64 0
  %149 = shufflevector <2 x float> %148, <2 x float> poison, <2 x i32> zeroinitializer
  %150 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %141, <2 x float> %149, <2 x float> %147)
  %151 = insertelement <2 x float> poison, float %136, i64 0
  %152 = shufflevector <2 x float> %151, <2 x float> poison, <2 x i32> zeroinitializer
  %153 = fmul <2 x float> %140, %152
  %154 = insertelement <2 x float> poison, float %134, i64 0
  %155 = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> zeroinitializer
  %156 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %139, <2 x float> %155, <2 x float> %153)
  %157 = insertelement <2 x float> poison, float %138, i64 0
  %158 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> zeroinitializer
  %159 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %141, <2 x float> %158, <2 x float> %156)
  %160 = fadd <2 x float> %150, %159
  %161 = insertelement <2 x float> poison, float %122, i64 0
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer
  %163 = insertelement <2 x float> %142, float %136, i64 1
  %164 = fmul <2 x float> %162, %163
  %165 = insertelement <2 x float> poison, float %121, i64 0
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer
  %167 = insertelement <2 x float> %145, float %134, i64 1
  %168 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %166, <2 x float> %167, <2 x float> %164)
  %169 = insertelement <2 x float> poison, float %123, i64 0
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = insertelement <2 x float> %148, float %138, i64 1
  %172 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %170, <2 x float> %171, <2 x float> %168)
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %174 = fadd <2 x float> %172, %173
  %175 = insertelement <2 x float> %174, float 0.000000e+00, i64 1
  %176 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %5, i64 0, i32 1
  store <2 x float> %160, ptr %176, align 8, !tbaa.struct !162
  %177 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %5, i64 0, i32 1, i32 0, i64 2
  store <2 x float> %175, ptr %177, align 8, !tbaa.struct !164
  %178 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %111, i64 %112, i32 9
  %179 = load i8, ptr %178, align 8
  %180 = or i8 %179, 1
  store i8 %180, ptr %178, align 8
  %181 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13
  call void @_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEE9push_backERKS1_(ptr noundef nonnull align 8 dereferenceable(25) %181, ptr noundef nonnull align 8 dereferenceable(100) %5)
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %5) #38
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEE9push_backERKS1_(ptr noundef nonnull align 8 dereferenceable(25) %0, ptr noundef nonnull align 8 dereferenceable(100) %1) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !104
  %5 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !105
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %53

8:                                                ; preds = %2
  %9 = icmp eq i32 %4, 0
  %10 = shl nsw i32 %4, 1
  %11 = select i1 %9, i32 1, i32 %10
  %12 = icmp slt i32 %4, %11
  br i1 %12, label %13, label %53

13:                                               ; preds = %8
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %13
  %16 = sext i32 %11 to i64
  %17 = mul nsw i64 %16, 104
  %18 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %17, i32 noundef 16)
  %19 = load i32, ptr %3, align 4, !tbaa !104
  br label %20

20:                                               ; preds = %15, %13
  %21 = phi i32 [ %19, %15 ], [ %4, %13 ]
  %22 = phi ptr [ %18, %15 ], [ null, %13 ]
  %23 = icmp sgt i32 %21, 0
  br i1 %23, label %24, label %42

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 5
  %26 = zext i32 %21 to i64
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi i64 [ 0, %24 ], [ %40, %27 ]
  %29 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %22, i64 %28
  %30 = load ptr, ptr %25, align 8, !tbaa !103
  %31 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %30, i64 %28
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %29, ptr noundef nonnull align 8 dereferenceable(32) %31, i64 32, i1 false)
  %32 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %22, i64 %28, i32 3
  %33 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %30, i64 %28, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %32, ptr noundef nonnull align 8 dereferenceable(16) %33, i64 16, i1 false), !tbaa.struct !162
  %34 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %30, i64 %28, i32 3, i32 0, i64 1
  %35 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %22, i64 %28, i32 3, i32 0, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %35, ptr noundef nonnull align 8 dereferenceable(16) %34, i64 16, i1 false), !tbaa.struct !162
  %36 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %30, i64 %28, i32 3, i32 0, i64 2
  %37 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %22, i64 %28, i32 3, i32 0, i64 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %37, ptr noundef nonnull align 8 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !162
  %38 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %22, i64 %28, i32 4
  %39 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %30, i64 %28, i32 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %38, ptr noundef nonnull align 8 dereferenceable(20) %39, i64 20, i1 false)
  %40 = add nuw nsw i64 %28, 1
  %41 = icmp eq i64 %40, %26
  br i1 %41, label %42, label %27

42:                                               ; preds = %27, %20
  %43 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 5
  %44 = load ptr, ptr %43, align 8, !tbaa !103
  %45 = icmp eq ptr %44, null
  %46 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 6
  %47 = load i8, ptr %46, align 8
  %48 = icmp eq i8 %47, 0
  %49 = select i1 %45, i1 true, i1 %48
  br i1 %49, label %51, label %50

50:                                               ; preds = %42
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %44)
  br label %51

51:                                               ; preds = %50, %42
  store i8 1, ptr %46, align 8, !tbaa !102
  store ptr %22, ptr %43, align 8, !tbaa !103
  store i32 %11, ptr %5, align 8, !tbaa !105
  %52 = load i32, ptr %3, align 4, !tbaa !104
  br label %53

53:                                               ; preds = %51, %8, %2
  %54 = phi i32 [ %52, %51 ], [ %4, %8 ], [ %4, %2 ]
  %55 = getelementptr inbounds %class.btAlignedObjectArray.40, ptr %0, i64 0, i32 5
  %56 = load ptr, ptr %55, align 8, !tbaa !103
  %57 = sext i32 %54 to i64
  %58 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %56, i64 %57
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %58, ptr noundef nonnull align 8 dereferenceable(32) %1, i64 32, i1 false)
  %59 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %56, i64 %57, i32 3
  %60 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %1, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %59, ptr noundef nonnull align 8 dereferenceable(16) %60, i64 16, i1 false), !tbaa.struct !162
  %61 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %1, i64 0, i32 3, i32 0, i64 1
  %62 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %56, i64 %57, i32 3, i32 0, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %62, ptr noundef nonnull align 8 dereferenceable(16) %61, i64 16, i1 false), !tbaa.struct !162
  %63 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %1, i64 0, i32 3, i32 0, i64 2
  %64 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %56, i64 %57, i32 3, i32 0, i64 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %64, ptr noundef nonnull align 8 dereferenceable(16) %63, i64 16, i1 false), !tbaa.struct !162
  %65 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %56, i64 %57, i32 4
  %66 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %1, i64 0, i32 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %65, ptr noundef nonnull align 8 dereferenceable(20) %66, i64 20, i1 false)
  %67 = load i32, ptr %3, align 4, !tbaa !104
  %68 = add nsw i32 %67, 1
  store i32 %68, ptr %3, align 4, !tbaa !104
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(28) %1, ptr noundef %2, ptr nocapture noundef readonly byval(%"struct.btSoftBody::Body") align 8 %3) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %5 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 216, i32 noundef 16)
  %6 = getelementptr %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1
  %7 = getelementptr inbounds i8, ptr %5, i64 56
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(160) %7, i8 0, i64 160, i1 false)
  store ptr getelementptr inbounds ({ [8 x ptr] }, ptr @_ZTVN10btSoftBody6LJointE, i64 0, inrange i32 0, i64 2), ptr %5, align 8, !tbaa !5
  store ptr %2, ptr %6, align 8, !tbaa.struct !252
  %8 = getelementptr %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false)
  %9 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %9, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false), !tbaa.struct !252
  %10 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %33, !prof !172

12:                                               ; preds = %4
  %13 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %33, label %15

15:                                               ; preds = %12
  %16 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %31, !prof !172

18:                                               ; preds = %15
  %19 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %31, label %21

21:                                               ; preds = %18
  %22 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %29, !prof !172

24:                                               ; preds = %21
  %25 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %28 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %29

29:                                               ; preds = %27, %24, %21
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %30 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %31

31:                                               ; preds = %29, %18, %15
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %32 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %33

33:                                               ; preds = %4, %12, %31
  %34 = getelementptr %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !253
  %36 = icmp eq ptr %35, null
  %37 = getelementptr inbounds %class.btCollisionObject, ptr %35, i64 0, i32 2
  %38 = load ptr, ptr %6, align 8
  %39 = icmp eq ptr %38, null
  %40 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %38, i64 0, i32 3
  %41 = select i1 %39, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %40
  %42 = select i1 %36, ptr %41, ptr %37
  %43 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 1
  %44 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 2
  %45 = getelementptr inbounds [4 x float], ptr %42, i64 0, i64 2
  %46 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 1, i32 0, i64 2
  %47 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 2, i32 0, i64 2
  %48 = load float, ptr %45, align 4, !tbaa !137, !noalias !255
  %49 = load float, ptr %46, align 4, !tbaa !137, !noalias !255
  %50 = load float, ptr %47, align 4, !tbaa !137, !noalias !255
  %51 = getelementptr inbounds %class.btTransform, ptr %42, i64 0, i32 1
  %52 = load float, ptr %51, align 4, !tbaa !137, !noalias !260
  %53 = fneg float %52
  %54 = getelementptr inbounds %class.btTransform, ptr %42, i64 0, i32 1, i32 0, i64 1
  %55 = load float, ptr %54, align 4, !tbaa !137, !noalias !260
  %56 = fneg float %55
  %57 = getelementptr inbounds %class.btTransform, ptr %42, i64 0, i32 1, i32 0, i64 2
  %58 = load float, ptr %57, align 4, !tbaa !137, !noalias !260
  %59 = fneg float %58
  %60 = getelementptr inbounds %"struct.btSoftBody::LJoint::Specs", ptr %1, i64 0, i32 1
  %61 = load float, ptr %60, align 4, !tbaa !137
  %62 = getelementptr inbounds %"struct.btSoftBody::LJoint::Specs", ptr %1, i64 0, i32 1, i32 0, i64 1
  %63 = load float, ptr %62, align 4, !tbaa !137
  %64 = getelementptr inbounds %"struct.btSoftBody::LJoint::Specs", ptr %1, i64 0, i32 1, i32 0, i64 2
  %65 = load float, ptr %64, align 4, !tbaa !137
  %66 = load <2 x float>, ptr %42, align 4, !tbaa !137, !noalias !255
  %67 = load <2 x float>, ptr %43, align 4, !tbaa !137, !noalias !255
  %68 = load <2 x float>, ptr %44, align 4, !tbaa !137, !noalias !255
  %69 = insertelement <2 x float> poison, float %56, i64 0
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> zeroinitializer
  %71 = fmul <2 x float> %67, %70
  %72 = insertelement <2 x float> poison, float %53, i64 0
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer
  %74 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %66, <2 x float> %73, <2 x float> %71)
  %75 = insertelement <2 x float> poison, float %59, i64 0
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer
  %77 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %68, <2 x float> %76, <2 x float> %74)
  %78 = insertelement <2 x float> poison, float %63, i64 0
  %79 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> zeroinitializer
  %80 = fmul <2 x float> %67, %79
  %81 = insertelement <2 x float> poison, float %61, i64 0
  %82 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> zeroinitializer
  %83 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %66, <2 x float> %82, <2 x float> %80)
  %84 = insertelement <2 x float> poison, float %65, i64 0
  %85 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> zeroinitializer
  %86 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %68, <2 x float> %85, <2 x float> %83)
  %87 = fadd <2 x float> %77, %86
  %88 = insertelement <2 x float> poison, float %49, i64 0
  %89 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> zeroinitializer
  %90 = insertelement <2 x float> %69, float %63, i64 1
  %91 = fmul <2 x float> %89, %90
  %92 = insertelement <2 x float> poison, float %48, i64 0
  %93 = shufflevector <2 x float> %92, <2 x float> poison, <2 x i32> zeroinitializer
  %94 = insertelement <2 x float> %72, float %61, i64 1
  %95 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %93, <2 x float> %94, <2 x float> %91)
  %96 = insertelement <2 x float> poison, float %50, i64 0
  %97 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> zeroinitializer
  %98 = insertelement <2 x float> %75, float %65, i64 1
  %99 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %97, <2 x float> %98, <2 x float> %95)
  %100 = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %101 = fadd <2 x float> %99, %100
  %102 = insertelement <2 x float> %101, float 0.000000e+00, i64 1
  %103 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2
  store <2 x float> %87, ptr %103, align 8, !tbaa.struct !162
  %104 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2, i64 0, i32 0, i64 2
  store <2 x float> %102, ptr %104, align 8, !tbaa.struct !164
  %105 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %128, !prof !172

107:                                              ; preds = %33
  %108 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %128, label %110

110:                                              ; preds = %107
  %111 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %126, !prof !172

113:                                              ; preds = %110
  %114 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %126, label %116

116:                                              ; preds = %113
  %117 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %124, !prof !172

119:                                              ; preds = %116
  %120 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %119
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %123 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %124

124:                                              ; preds = %122, %119, %116
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %125 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %126

126:                                              ; preds = %124, %113, %110
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %127 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %128

128:                                              ; preds = %33, %107, %126
  %129 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 1, i32 2
  %130 = load ptr, ptr %129, align 8, !tbaa !253
  %131 = icmp eq ptr %130, null
  %132 = getelementptr inbounds %class.btCollisionObject, ptr %130, i64 0, i32 2
  %133 = load ptr, ptr %9, align 8
  %134 = icmp eq ptr %133, null
  %135 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %133, i64 0, i32 3
  %136 = select i1 %134, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %135
  %137 = select i1 %131, ptr %136, ptr %132
  %138 = getelementptr inbounds [3 x %class.btVector3], ptr %137, i64 0, i64 1
  %139 = getelementptr inbounds [3 x %class.btVector3], ptr %137, i64 0, i64 2
  %140 = getelementptr inbounds [4 x float], ptr %137, i64 0, i64 2
  %141 = getelementptr inbounds [3 x %class.btVector3], ptr %137, i64 0, i64 1, i32 0, i64 2
  %142 = getelementptr inbounds [3 x %class.btVector3], ptr %137, i64 0, i64 2, i32 0, i64 2
  %143 = load float, ptr %140, align 4, !tbaa !137, !noalias !261
  %144 = load float, ptr %141, align 4, !tbaa !137, !noalias !261
  %145 = load float, ptr %142, align 4, !tbaa !137, !noalias !261
  %146 = getelementptr inbounds %class.btTransform, ptr %137, i64 0, i32 1
  %147 = load float, ptr %146, align 4, !tbaa !137, !noalias !266
  %148 = fneg float %147
  %149 = getelementptr inbounds %class.btTransform, ptr %137, i64 0, i32 1, i32 0, i64 1
  %150 = load float, ptr %149, align 4, !tbaa !137, !noalias !266
  %151 = fneg float %150
  %152 = getelementptr inbounds %class.btTransform, ptr %137, i64 0, i32 1, i32 0, i64 2
  %153 = load float, ptr %152, align 4, !tbaa !137, !noalias !266
  %154 = fneg float %153
  %155 = load float, ptr %60, align 4, !tbaa !137
  %156 = load float, ptr %62, align 4, !tbaa !137
  %157 = load float, ptr %64, align 4, !tbaa !137
  %158 = load <2 x float>, ptr %137, align 4, !tbaa !137, !noalias !261
  %159 = load <2 x float>, ptr %138, align 4, !tbaa !137, !noalias !261
  %160 = load <2 x float>, ptr %139, align 4, !tbaa !137, !noalias !261
  %161 = insertelement <2 x float> poison, float %151, i64 0
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer
  %163 = fmul <2 x float> %159, %162
  %164 = insertelement <2 x float> poison, float %148, i64 0
  %165 = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> zeroinitializer
  %166 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %158, <2 x float> %165, <2 x float> %163)
  %167 = insertelement <2 x float> poison, float %154, i64 0
  %168 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer
  %169 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %160, <2 x float> %168, <2 x float> %166)
  %170 = insertelement <2 x float> poison, float %156, i64 0
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <2 x i32> zeroinitializer
  %172 = fmul <2 x float> %159, %171
  %173 = insertelement <2 x float> poison, float %155, i64 0
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer
  %175 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %158, <2 x float> %174, <2 x float> %172)
  %176 = insertelement <2 x float> poison, float %157, i64 0
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <2 x i32> zeroinitializer
  %178 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %160, <2 x float> %177, <2 x float> %175)
  %179 = fadd <2 x float> %169, %178
  %180 = insertelement <2 x float> poison, float %144, i64 0
  %181 = shufflevector <2 x float> %180, <2 x float> poison, <2 x i32> zeroinitializer
  %182 = insertelement <2 x float> %161, float %156, i64 1
  %183 = fmul <2 x float> %181, %182
  %184 = insertelement <2 x float> poison, float %143, i64 0
  %185 = shufflevector <2 x float> %184, <2 x float> poison, <2 x i32> zeroinitializer
  %186 = insertelement <2 x float> %164, float %155, i64 1
  %187 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %185, <2 x float> %186, <2 x float> %183)
  %188 = insertelement <2 x float> poison, float %145, i64 0
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> zeroinitializer
  %190 = insertelement <2 x float> %167, float %157, i64 1
  %191 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %189, <2 x float> %190, <2 x float> %187)
  %192 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %193 = fadd <2 x float> %191, %192
  %194 = insertelement <2 x float> %193, float 0.000000e+00, i64 1
  %195 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2, i64 1
  store <2 x float> %179, ptr %195, align 8, !tbaa.struct !162
  %196 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2, i64 1, i32 0, i64 2
  store <2 x float> %194, ptr %196, align 8, !tbaa.struct !164
  %197 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 3
  %198 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %199 = shufflevector <2 x float> %198, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  store <2 x float> %199, ptr %197, align 8, !tbaa !137
  %200 = getelementptr inbounds %"struct.btSoftBody::Joint::Specs", ptr %1, i64 0, i32 2
  %201 = load float, ptr %200, align 4, !tbaa !267
  %202 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 5
  store float %201, ptr %202, align 8, !tbaa !269
  %203 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 2
  %204 = load i32, ptr %203, align 4, !tbaa !116
  %205 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 3
  %206 = load i32, ptr %205, align 8, !tbaa !117
  %207 = icmp eq i32 %204, %206
  br i1 %207, label %208, label %281

208:                                              ; preds = %128
  %209 = icmp eq i32 %204, 0
  %210 = shl nsw i32 %204, 1
  %211 = select i1 %209, i32 1, i32 %210
  %212 = icmp slt i32 %204, %211
  br i1 %212, label %213, label %281

213:                                              ; preds = %208
  %214 = icmp eq i32 %211, 0
  br i1 %214, label %220, label %215

215:                                              ; preds = %213
  %216 = sext i32 %211 to i64
  %217 = shl nsw i64 %216, 3
  %218 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %217, i32 noundef 16)
  %219 = load i32, ptr %203, align 4, !tbaa !116
  br label %220

220:                                              ; preds = %215, %213
  %221 = phi i32 [ %219, %215 ], [ %204, %213 ]
  %222 = phi ptr [ %218, %215 ], [ null, %213 ]
  %223 = icmp sgt i32 %221, 0
  br i1 %223, label %224, label %269

224:                                              ; preds = %220
  %225 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %226 = zext i32 %221 to i64
  %227 = and i64 %226, 3
  %228 = icmp ult i32 %221, 4
  br i1 %228, label %256, label %229

229:                                              ; preds = %224
  %230 = and i64 %226, 4294967292
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %253, %231 ]
  %233 = phi i64 [ 0, %229 ], [ %254, %231 ]
  %234 = getelementptr inbounds ptr, ptr %222, i64 %232
  %235 = load ptr, ptr %225, align 8, !tbaa !115
  %236 = getelementptr inbounds ptr, ptr %235, i64 %232
  %237 = load ptr, ptr %236, align 8, !tbaa !219
  store ptr %237, ptr %234, align 8, !tbaa !219
  %238 = or i64 %232, 1
  %239 = getelementptr inbounds ptr, ptr %222, i64 %238
  %240 = load ptr, ptr %225, align 8, !tbaa !115
  %241 = getelementptr inbounds ptr, ptr %240, i64 %238
  %242 = load ptr, ptr %241, align 8, !tbaa !219
  store ptr %242, ptr %239, align 8, !tbaa !219
  %243 = or i64 %232, 2
  %244 = getelementptr inbounds ptr, ptr %222, i64 %243
  %245 = load ptr, ptr %225, align 8, !tbaa !115
  %246 = getelementptr inbounds ptr, ptr %245, i64 %243
  %247 = load ptr, ptr %246, align 8, !tbaa !219
  store ptr %247, ptr %244, align 8, !tbaa !219
  %248 = or i64 %232, 3
  %249 = getelementptr inbounds ptr, ptr %222, i64 %248
  %250 = load ptr, ptr %225, align 8, !tbaa !115
  %251 = getelementptr inbounds ptr, ptr %250, i64 %248
  %252 = load ptr, ptr %251, align 8, !tbaa !219
  store ptr %252, ptr %249, align 8, !tbaa !219
  %253 = add nuw nsw i64 %232, 4
  %254 = add i64 %233, 4
  %255 = icmp eq i64 %254, %230
  br i1 %255, label %256, label %231

256:                                              ; preds = %231, %224
  %257 = phi i64 [ 0, %224 ], [ %253, %231 ]
  %258 = icmp eq i64 %227, 0
  br i1 %258, label %269, label %259

259:                                              ; preds = %256, %259
  %260 = phi i64 [ %266, %259 ], [ %257, %256 ]
  %261 = phi i64 [ %267, %259 ], [ 0, %256 ]
  %262 = getelementptr inbounds ptr, ptr %222, i64 %260
  %263 = load ptr, ptr %225, align 8, !tbaa !115
  %264 = getelementptr inbounds ptr, ptr %263, i64 %260
  %265 = load ptr, ptr %264, align 8, !tbaa !219
  store ptr %265, ptr %262, align 8, !tbaa !219
  %266 = add nuw nsw i64 %260, 1
  %267 = add i64 %261, 1
  %268 = icmp eq i64 %267, %227
  br i1 %268, label %269, label %259, !llvm.loop !271

269:                                              ; preds = %256, %259, %220
  %270 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %271 = load ptr, ptr %270, align 8, !tbaa !115
  %272 = icmp eq ptr %271, null
  %273 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 6
  %274 = load i8, ptr %273, align 8
  %275 = icmp eq i8 %274, 0
  %276 = select i1 %272, i1 true, i1 %275
  br i1 %276, label %279, label %277

277:                                              ; preds = %269
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %271)
  %278 = load i32, ptr %203, align 4, !tbaa !116
  br label %279

279:                                              ; preds = %277, %269
  %280 = phi i32 [ %278, %277 ], [ %221, %269 ]
  store i8 1, ptr %273, align 8, !tbaa !114
  store ptr %222, ptr %270, align 8, !tbaa !115
  store i32 %211, ptr %205, align 8, !tbaa !117
  br label %281

281:                                              ; preds = %128, %208, %279
  %282 = phi i32 [ %280, %279 ], [ %204, %208 ], [ %204, %128 ]
  %283 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %284 = load ptr, ptr %283, align 8, !tbaa !115
  %285 = sext i32 %282 to i64
  %286 = getelementptr inbounds ptr, ptr %284, i64 %285
  store ptr %5, ptr %286, align 8, !tbaa !219
  %287 = add nsw i32 %282, 1
  store i32 %287, ptr %203, align 4, !tbaa !116
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(28) %1, ptr nocapture noundef readonly byval(%"struct.btSoftBody::Body") align 8 %2) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !123
  %6 = load ptr, ptr %5, align 8, !tbaa !219
  tail call void @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(28) %1, ptr noundef %6, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %2)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(28) %1, ptr nocapture noundef readonly %2) local_unnamed_addr #4 align 2 {
  %4 = alloca %"struct.btSoftBody::Body", align 8
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !123
  %7 = load ptr, ptr %6, align 8, !tbaa !219
  %8 = getelementptr inbounds %class.btSoftBody, ptr %2, i64 0, i32 24, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !123
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  store ptr %10, ptr %4, align 8, !tbaa !272
  %11 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %4, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false)
  tail call void @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(28) %1, ptr noundef %7, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %4)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 8 dereferenceable(40) %1, ptr noundef %2, ptr nocapture noundef readonly byval(%"struct.btSoftBody::Body") align 8 %3) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %5 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 224, i32 noundef 16)
  %6 = getelementptr %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1
  %7 = getelementptr inbounds i8, ptr %5, i64 56
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %7, i8 0, i64 168, i1 false)
  store ptr getelementptr inbounds ({ [8 x ptr] }, ptr @_ZTVN10btSoftBody6AJointE, i64 0, inrange i32 0, i64 2), ptr %5, align 8, !tbaa !5
  store ptr %2, ptr %6, align 8, !tbaa.struct !252
  %8 = getelementptr %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false)
  %9 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %9, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false), !tbaa.struct !252
  %10 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %33, !prof !172

12:                                               ; preds = %4
  %13 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %33, label %15

15:                                               ; preds = %12
  %16 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %31, !prof !172

18:                                               ; preds = %15
  %19 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %31, label %21

21:                                               ; preds = %18
  %22 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %29, !prof !172

24:                                               ; preds = %21
  %25 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %28 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %29

29:                                               ; preds = %27, %24, %21
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %30 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %31

31:                                               ; preds = %29, %18, %15
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %32 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %33

33:                                               ; preds = %4, %12, %31
  %34 = getelementptr %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !253
  %36 = icmp eq ptr %35, null
  %37 = getelementptr inbounds %class.btCollisionObject, ptr %35, i64 0, i32 2
  %38 = load ptr, ptr %6, align 8
  %39 = icmp eq ptr %38, null
  %40 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %38, i64 0, i32 3
  %41 = select i1 %39, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %40
  %42 = select i1 %36, ptr %41, ptr %37
  %43 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 1
  %44 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 2
  %45 = getelementptr inbounds [4 x float], ptr %42, i64 0, i64 2
  %46 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 1, i32 0, i64 2
  %47 = getelementptr inbounds [3 x %class.btVector3], ptr %42, i64 0, i64 2, i32 0, i64 2
  %48 = load float, ptr %45, align 4, !tbaa !137, !noalias !273
  %49 = load float, ptr %46, align 4, !tbaa !137, !noalias !273
  %50 = load float, ptr %47, align 4, !tbaa !137, !noalias !273
  %51 = getelementptr inbounds %"struct.btSoftBody::AJoint::Specs", ptr %1, i64 0, i32 1
  %52 = load float, ptr %51, align 4, !tbaa !137
  %53 = getelementptr inbounds %"struct.btSoftBody::AJoint::Specs", ptr %1, i64 0, i32 1, i32 0, i64 1
  %54 = load float, ptr %53, align 8, !tbaa !137
  %55 = getelementptr inbounds %"struct.btSoftBody::AJoint::Specs", ptr %1, i64 0, i32 1, i32 0, i64 2
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = load <2 x float>, ptr %42, align 4, !tbaa !137, !noalias !273
  %58 = load <2 x float>, ptr %43, align 4, !tbaa !137, !noalias !273
  %59 = load <2 x float>, ptr %44, align 4, !tbaa !137, !noalias !273
  %60 = insertelement <2 x float> poison, float %54, i64 0
  %61 = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> zeroinitializer
  %62 = fmul <2 x float> %58, %61
  %63 = insertelement <2 x float> poison, float %52, i64 0
  %64 = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> zeroinitializer
  %65 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %57, <2 x float> %64, <2 x float> %62)
  %66 = insertelement <2 x float> poison, float %56, i64 0
  %67 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> zeroinitializer
  %68 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %59, <2 x float> %67, <2 x float> %65)
  %69 = fmul float %49, %54
  %70 = tail call float @llvm.fmuladd.f32(float %48, float %52, float %69)
  %71 = tail call float @llvm.fmuladd.f32(float %50, float %56, float %70)
  %72 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %71, i64 0
  %73 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2
  store <2 x float> %68, ptr %73, align 8, !tbaa.struct !162
  %74 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2, i64 0, i32 0, i64 2
  store <2 x float> %72, ptr %74, align 8, !tbaa.struct !164
  %75 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %98, !prof !172

77:                                               ; preds = %33
  %78 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %98, label %80

80:                                               ; preds = %77
  %81 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %96, !prof !172

83:                                               ; preds = %80
  %84 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %96, label %86

86:                                               ; preds = %83
  %87 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %89, label %94, !prof !172

89:                                               ; preds = %86
  %90 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %94, label %92

92:                                               ; preds = %89
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %93 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %94

94:                                               ; preds = %92, %89, %86
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %95 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %96

96:                                               ; preds = %94, %83, %80
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %97 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %98

98:                                               ; preds = %33, %77, %96
  %99 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 1, i64 1, i32 2
  %100 = load ptr, ptr %99, align 8, !tbaa !253
  %101 = icmp eq ptr %100, null
  %102 = getelementptr inbounds %class.btCollisionObject, ptr %100, i64 0, i32 2
  %103 = load ptr, ptr %9, align 8
  %104 = icmp eq ptr %103, null
  %105 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %103, i64 0, i32 3
  %106 = select i1 %104, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %105
  %107 = select i1 %101, ptr %106, ptr %102
  %108 = getelementptr inbounds [3 x %class.btVector3], ptr %107, i64 0, i64 1
  %109 = getelementptr inbounds [3 x %class.btVector3], ptr %107, i64 0, i64 2
  %110 = getelementptr inbounds [4 x float], ptr %107, i64 0, i64 2
  %111 = getelementptr inbounds [3 x %class.btVector3], ptr %107, i64 0, i64 1, i32 0, i64 2
  %112 = getelementptr inbounds [3 x %class.btVector3], ptr %107, i64 0, i64 2, i32 0, i64 2
  %113 = load float, ptr %110, align 4, !tbaa !137, !noalias !278
  %114 = load float, ptr %111, align 4, !tbaa !137, !noalias !278
  %115 = load float, ptr %112, align 4, !tbaa !137, !noalias !278
  %116 = load float, ptr %51, align 4, !tbaa !137
  %117 = load float, ptr %53, align 8, !tbaa !137
  %118 = load float, ptr %55, align 4, !tbaa !137
  %119 = load <2 x float>, ptr %107, align 4, !tbaa !137, !noalias !278
  %120 = load <2 x float>, ptr %108, align 4, !tbaa !137, !noalias !278
  %121 = load <2 x float>, ptr %109, align 4, !tbaa !137, !noalias !278
  %122 = insertelement <2 x float> poison, float %117, i64 0
  %123 = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> zeroinitializer
  %124 = fmul <2 x float> %120, %123
  %125 = insertelement <2 x float> poison, float %116, i64 0
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> zeroinitializer
  %127 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %119, <2 x float> %126, <2 x float> %124)
  %128 = insertelement <2 x float> poison, float %118, i64 0
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer
  %130 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %121, <2 x float> %129, <2 x float> %127)
  %131 = fmul float %114, %117
  %132 = tail call float @llvm.fmuladd.f32(float %113, float %116, float %131)
  %133 = tail call float @llvm.fmuladd.f32(float %115, float %118, float %132)
  %134 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %133, i64 0
  %135 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2, i64 1
  store <2 x float> %130, ptr %135, align 8, !tbaa.struct !162
  %136 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 2, i64 1, i32 0, i64 2
  store <2 x float> %134, ptr %136, align 8, !tbaa.struct !164
  %137 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 3
  %138 = load <2 x float>, ptr %1, align 8, !tbaa !137
  %139 = shufflevector <2 x float> %138, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  store <2 x float> %139, ptr %137, align 8, !tbaa !137
  %140 = getelementptr inbounds %"struct.btSoftBody::Joint::Specs", ptr %1, i64 0, i32 2
  %141 = load float, ptr %140, align 8, !tbaa !267
  %142 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %5, i64 0, i32 5
  store float %141, ptr %142, align 8, !tbaa !269
  %143 = getelementptr inbounds %"struct.btSoftBody::AJoint::Specs", ptr %1, i64 0, i32 2
  %144 = load ptr, ptr %143, align 8, !tbaa !283
  %145 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %5, i64 0, i32 2
  store ptr %144, ptr %145, align 8, !tbaa !285
  %146 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 2
  %147 = load i32, ptr %146, align 4, !tbaa !116
  %148 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 3
  %149 = load i32, ptr %148, align 8, !tbaa !117
  %150 = icmp eq i32 %147, %149
  br i1 %150, label %151, label %224

151:                                              ; preds = %98
  %152 = icmp eq i32 %147, 0
  %153 = shl nsw i32 %147, 1
  %154 = select i1 %152, i32 1, i32 %153
  %155 = icmp slt i32 %147, %154
  br i1 %155, label %156, label %224

156:                                              ; preds = %151
  %157 = icmp eq i32 %154, 0
  br i1 %157, label %163, label %158

158:                                              ; preds = %156
  %159 = sext i32 %154 to i64
  %160 = shl nsw i64 %159, 3
  %161 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %160, i32 noundef 16)
  %162 = load i32, ptr %146, align 4, !tbaa !116
  br label %163

163:                                              ; preds = %158, %156
  %164 = phi i32 [ %162, %158 ], [ %147, %156 ]
  %165 = phi ptr [ %161, %158 ], [ null, %156 ]
  %166 = icmp sgt i32 %164, 0
  br i1 %166, label %167, label %212

167:                                              ; preds = %163
  %168 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %169 = zext i32 %164 to i64
  %170 = and i64 %169, 3
  %171 = icmp ult i32 %164, 4
  br i1 %171, label %199, label %172

172:                                              ; preds = %167
  %173 = and i64 %169, 4294967292
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ 0, %172 ], [ %196, %174 ]
  %176 = phi i64 [ 0, %172 ], [ %197, %174 ]
  %177 = getelementptr inbounds ptr, ptr %165, i64 %175
  %178 = load ptr, ptr %168, align 8, !tbaa !115
  %179 = getelementptr inbounds ptr, ptr %178, i64 %175
  %180 = load ptr, ptr %179, align 8, !tbaa !219
  store ptr %180, ptr %177, align 8, !tbaa !219
  %181 = or i64 %175, 1
  %182 = getelementptr inbounds ptr, ptr %165, i64 %181
  %183 = load ptr, ptr %168, align 8, !tbaa !115
  %184 = getelementptr inbounds ptr, ptr %183, i64 %181
  %185 = load ptr, ptr %184, align 8, !tbaa !219
  store ptr %185, ptr %182, align 8, !tbaa !219
  %186 = or i64 %175, 2
  %187 = getelementptr inbounds ptr, ptr %165, i64 %186
  %188 = load ptr, ptr %168, align 8, !tbaa !115
  %189 = getelementptr inbounds ptr, ptr %188, i64 %186
  %190 = load ptr, ptr %189, align 8, !tbaa !219
  store ptr %190, ptr %187, align 8, !tbaa !219
  %191 = or i64 %175, 3
  %192 = getelementptr inbounds ptr, ptr %165, i64 %191
  %193 = load ptr, ptr %168, align 8, !tbaa !115
  %194 = getelementptr inbounds ptr, ptr %193, i64 %191
  %195 = load ptr, ptr %194, align 8, !tbaa !219
  store ptr %195, ptr %192, align 8, !tbaa !219
  %196 = add nuw nsw i64 %175, 4
  %197 = add i64 %176, 4
  %198 = icmp eq i64 %197, %173
  br i1 %198, label %199, label %174

199:                                              ; preds = %174, %167
  %200 = phi i64 [ 0, %167 ], [ %196, %174 ]
  %201 = icmp eq i64 %170, 0
  br i1 %201, label %212, label %202

202:                                              ; preds = %199, %202
  %203 = phi i64 [ %209, %202 ], [ %200, %199 ]
  %204 = phi i64 [ %210, %202 ], [ 0, %199 ]
  %205 = getelementptr inbounds ptr, ptr %165, i64 %203
  %206 = load ptr, ptr %168, align 8, !tbaa !115
  %207 = getelementptr inbounds ptr, ptr %206, i64 %203
  %208 = load ptr, ptr %207, align 8, !tbaa !219
  store ptr %208, ptr %205, align 8, !tbaa !219
  %209 = add nuw nsw i64 %203, 1
  %210 = add i64 %204, 1
  %211 = icmp eq i64 %210, %170
  br i1 %211, label %212, label %202, !llvm.loop !287

212:                                              ; preds = %199, %202, %163
  %213 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %214 = load ptr, ptr %213, align 8, !tbaa !115
  %215 = icmp eq ptr %214, null
  %216 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 6
  %217 = load i8, ptr %216, align 8
  %218 = icmp eq i8 %217, 0
  %219 = select i1 %215, i1 true, i1 %218
  br i1 %219, label %222, label %220

220:                                              ; preds = %212
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %214)
  %221 = load i32, ptr %146, align 4, !tbaa !116
  br label %222

222:                                              ; preds = %220, %212
  %223 = phi i32 [ %221, %220 ], [ %164, %212 ]
  store i8 1, ptr %216, align 8, !tbaa !114
  store ptr %165, ptr %213, align 8, !tbaa !115
  store i32 %154, ptr %148, align 8, !tbaa !117
  br label %224

224:                                              ; preds = %98, %151, %222
  %225 = phi i32 [ %223, %222 ], [ %147, %151 ], [ %147, %98 ]
  %226 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %227 = load ptr, ptr %226, align 8, !tbaa !115
  %228 = sext i32 %225 to i64
  %229 = getelementptr inbounds ptr, ptr %227, i64 %228
  store ptr %5, ptr %229, align 8, !tbaa !219
  %230 = add nsw i32 %225, 1
  store i32 %230, ptr %146, align 4, !tbaa !116
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 8 dereferenceable(40) %1, ptr nocapture noundef readonly byval(%"struct.btSoftBody::Body") align 8 %2) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !123
  %6 = load ptr, ptr %5, align 8, !tbaa !219
  tail call void @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 8 dereferenceable(40) %1, ptr noundef %6, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %2)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 8 dereferenceable(40) %1, ptr nocapture noundef readonly %2) local_unnamed_addr #4 align 2 {
  %4 = alloca %"struct.btSoftBody::Body", align 8
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !123
  %7 = load ptr, ptr %6, align 8, !tbaa !219
  %8 = getelementptr inbounds %class.btSoftBody, ptr %2, i64 0, i32 24, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !123
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  store ptr %10, ptr %4, align 8, !tbaa !272
  %11 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %4, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false)
  tail call void @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 8 dereferenceable(40) %1, ptr noundef %7, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %4)
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody8addForceERK9btVector3(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #11 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !88
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !87
  %9 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %11 = zext i32 %4 to i64
  br label %13

12:                                               ; preds = %31, %2
  ret void

13:                                               ; preds = %6, %31
  %14 = phi i64 [ 0, %6 ], [ %32, %31 ]
  %15 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 %14, i32 6
  %16 = load float, ptr %15, align 8, !tbaa !174
  %17 = fcmp ogt float %16, 0.000000e+00
  br i1 %17, label %18, label %31

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 %14, i32 4
  %20 = load float, ptr %1, align 4, !tbaa !137
  %21 = load float, ptr %19, align 4, !tbaa !137
  %22 = fadd float %20, %21
  store float %22, ptr %19, align 4, !tbaa !137
  %23 = load float, ptr %9, align 4, !tbaa !137
  %24 = getelementptr inbounds [4 x float], ptr %19, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !137
  %26 = fadd float %23, %25
  store float %26, ptr %24, align 4, !tbaa !137
  %27 = load float, ptr %10, align 4, !tbaa !137
  %28 = getelementptr inbounds [4 x float], ptr %19, i64 0, i64 2
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = fadd float %27, %29
  store float %30, ptr %28, align 4, !tbaa !137
  br label %31

31:                                               ; preds = %13, %18
  %32 = add nuw nsw i64 %14, 1
  %33 = icmp eq i64 %32, %11
  br i1 %33, label %12, label %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody8addForceERK9btVector3i(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1, i32 noundef %2) local_unnamed_addr #13 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !87
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 %6, i32 6
  %8 = load float, ptr %7, align 8, !tbaa !174
  %9 = fcmp ogt float %8, 0.000000e+00
  br i1 %9, label %10, label %25

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 %6, i32 4
  %12 = load float, ptr %1, align 4, !tbaa !137
  %13 = load float, ptr %11, align 4, !tbaa !137
  %14 = fadd float %12, %13
  store float %14, ptr %11, align 4, !tbaa !137
  %15 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %16 = load float, ptr %15, align 4, !tbaa !137
  %17 = getelementptr inbounds [4 x float], ptr %11, i64 0, i64 1
  %18 = load float, ptr %17, align 4, !tbaa !137
  %19 = fadd float %16, %18
  store float %19, ptr %17, align 4, !tbaa !137
  %20 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = getelementptr inbounds [4 x float], ptr %11, i64 0, i64 2
  %23 = load float, ptr %22, align 4, !tbaa !137
  %24 = fadd float %21, %23
  store float %24, ptr %22, align 4, !tbaa !137
  br label %25

25:                                               ; preds = %10, %3
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody11addVelocityERK9btVector3(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #11 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !88
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !87
  %9 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %11 = zext i32 %4 to i64
  br label %13

12:                                               ; preds = %31, %2
  ret void

13:                                               ; preds = %6, %31
  %14 = phi i64 [ 0, %6 ], [ %32, %31 ]
  %15 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 %14, i32 6
  %16 = load float, ptr %15, align 8, !tbaa !174
  %17 = fcmp ogt float %16, 0.000000e+00
  br i1 %17, label %18, label %31

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 %14, i32 3
  %20 = load float, ptr %1, align 4, !tbaa !137
  %21 = load float, ptr %19, align 4, !tbaa !137
  %22 = fadd float %20, %21
  store float %22, ptr %19, align 4, !tbaa !137
  %23 = load float, ptr %9, align 4, !tbaa !137
  %24 = getelementptr inbounds [4 x float], ptr %19, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !137
  %26 = fadd float %23, %25
  store float %26, ptr %24, align 4, !tbaa !137
  %27 = load float, ptr %10, align 4, !tbaa !137
  %28 = getelementptr inbounds [4 x float], ptr %19, i64 0, i64 2
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = fadd float %27, %29
  store float %30, ptr %28, align 4, !tbaa !137
  br label %31

31:                                               ; preds = %13, %18
  %32 = add nuw nsw i64 %14, 1
  %33 = icmp eq i64 %32, %11
  br i1 %33, label %12, label %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody11addVelocityERK9btVector3i(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1, i32 noundef %2) local_unnamed_addr #13 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !87
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 %6, i32 6
  %8 = load float, ptr %7, align 8, !tbaa !174
  %9 = fcmp ogt float %8, 0.000000e+00
  br i1 %9, label %10, label %25

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 %6, i32 3
  %12 = load float, ptr %1, align 4, !tbaa !137
  %13 = load float, ptr %11, align 4, !tbaa !137
  %14 = fadd float %12, %13
  store float %14, ptr %11, align 4, !tbaa !137
  %15 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %16 = load float, ptr %15, align 4, !tbaa !137
  %17 = getelementptr inbounds [4 x float], ptr %11, i64 0, i64 1
  %18 = load float, ptr %17, align 4, !tbaa !137
  %19 = fadd float %16, %18
  store float %19, ptr %17, align 4, !tbaa !137
  %20 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = getelementptr inbounds [4 x float], ptr %11, i64 0, i64 2
  %23 = load float, ptr %22, align 4, !tbaa !137
  %24 = fadd float %21, %23
  store float %24, ptr %22, align 4, !tbaa !137
  br label %25

25:                                               ; preds = %10, %3
  ret void
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody11setVelocityERK9btVector3(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #10 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !88
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %23

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %8 = zext i32 %4 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i32 %4, 1
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = and i64 %8, 4294967294
  br label %24

13:                                               ; preds = %41, %6
  %14 = phi i64 [ 0, %6 ], [ %42, %41 ]
  %15 = icmp eq i64 %9, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %13
  %17 = load ptr, ptr %7, align 8, !tbaa !87
  %18 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 %14, i32 6
  %19 = load float, ptr %18, align 8, !tbaa !174
  %20 = fcmp ogt float %19, 0.000000e+00
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 %14, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %22, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  br label %23

23:                                               ; preds = %13, %21, %16, %2
  ret void

24:                                               ; preds = %41, %11
  %25 = phi i64 [ 0, %11 ], [ %42, %41 ]
  %26 = phi i64 [ 0, %11 ], [ %43, %41 ]
  %27 = load ptr, ptr %7, align 8, !tbaa !87
  %28 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %27, i64 %25, i32 6
  %29 = load float, ptr %28, align 8, !tbaa !174
  %30 = fcmp ogt float %29, 0.000000e+00
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %27, i64 %25, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %32, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  br label %33

33:                                               ; preds = %31, %24
  %34 = or i64 %25, 1
  %35 = load ptr, ptr %7, align 8, !tbaa !87
  %36 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %35, i64 %34, i32 6
  %37 = load float, ptr %36, align 8, !tbaa !174
  %38 = fcmp ogt float %37, 0.000000e+00
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %35, i64 %34, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %40, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  br label %41

41:                                               ; preds = %39, %33
  %42 = add nuw nsw i64 %25, 2
  %43 = add i64 %26, 2
  %44 = icmp eq i64 %43, %12
  br i1 %44, label %13, label %24
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody7setMassEif(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, float noundef %2) local_unnamed_addr #14 align 2 {
  %4 = fcmp ogt float %2, 0.000000e+00
  %5 = fdiv float 1.000000e+00, %2
  %6 = select i1 %4, float %5, float 0.000000e+00
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !87
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 %9, i32 6
  store float %6, ptr %10, align 8, !tbaa !174
  %11 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  store i8 1, ptr %11, align 4, !tbaa !147
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local noundef float @_ZNK10btSoftBody7getMassEi(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, i32 noundef %1) local_unnamed_addr #15 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !87
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %4, i64 %5, i32 6
  %7 = load float, ptr %6, align 8, !tbaa !174
  %8 = fcmp ogt float %7, 0.000000e+00
  %9 = fdiv float 1.000000e+00, %7
  %10 = select i1 %8, float %9, float 0.000000e+00
  ret float %10
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local noundef float @_ZNK10btSoftBody12getTotalMassEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !88
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %25

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !87
  %8 = zext i32 %3 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i32 %3, 1
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = and i64 %8, 4294967294
  br label %27

13:                                               ; preds = %27, %5
  %14 = phi float [ undef, %5 ], [ %43, %27 ]
  %15 = phi i64 [ 0, %5 ], [ %44, %27 ]
  %16 = phi float [ 0.000000e+00, %5 ], [ %43, %27 ]
  %17 = icmp eq i64 %9, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 %15, i32 6
  %20 = load float, ptr %19, align 8, !tbaa !174
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = fdiv float 1.000000e+00, %20
  %23 = select i1 %21, float %22, float 0.000000e+00
  %24 = fadd float %16, %23
  br label %25

25:                                               ; preds = %18, %13, %1
  %26 = phi float [ 0.000000e+00, %1 ], [ %14, %13 ], [ %24, %18 ]
  ret float %26

27:                                               ; preds = %27, %11
  %28 = phi i64 [ 0, %11 ], [ %44, %27 ]
  %29 = phi float [ 0.000000e+00, %11 ], [ %43, %27 ]
  %30 = phi i64 [ 0, %11 ], [ %45, %27 ]
  %31 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 %28, i32 6
  %32 = load float, ptr %31, align 8, !tbaa !174
  %33 = fcmp ogt float %32, 0.000000e+00
  %34 = fdiv float 1.000000e+00, %32
  %35 = select i1 %33, float %34, float 0.000000e+00
  %36 = fadd float %29, %35
  %37 = or i64 %28, 1
  %38 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 %37, i32 6
  %39 = load float, ptr %38, align 8, !tbaa !174
  %40 = fcmp ogt float %39, 0.000000e+00
  %41 = fdiv float 1.000000e+00, %39
  %42 = select i1 %40, float %41, float 0.000000e+00
  %43 = fadd float %36, %42
  %44 = add nuw nsw i64 %28, 2
  %45 = add i64 %30, 2
  %46 = icmp eq i64 %45, %12
  br i1 %46, label %13, label %27
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody12setTotalMassEfb(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, float noundef %1, i1 noundef zeroext %2) local_unnamed_addr #16 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !88
  br i1 %2, label %6, label %146

6:                                                ; preds = %3
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !87
  %11 = zext i32 %5 to i64
  %12 = and i64 %11, 3
  %13 = icmp ult i32 %5, 4
  br i1 %13, label %16, label %14

14:                                               ; preds = %8
  %15 = and i64 %11, 4294967292
  br label %34

16:                                               ; preds = %34, %8
  %17 = phi i64 [ 0, %8 ], [ %44, %34 ]
  %18 = icmp eq i64 %12, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %23, %19 ], [ %17, %16 ]
  %21 = phi i64 [ %24, %19 ], [ 0, %16 ]
  %22 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %10, i64 %20, i32 6
  store float 0.000000e+00, ptr %22, align 8, !tbaa !174
  %23 = add nuw nsw i64 %20, 1
  %24 = add i64 %21, 1
  %25 = icmp eq i64 %24, %12
  br i1 %25, label %26, label %19, !llvm.loop !288

26:                                               ; preds = %16, %19, %6
  %27 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %28 = load i32, ptr %27, align 4, !tbaa !96
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %47

30:                                               ; preds = %26
  %31 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %32 = load ptr, ptr %31, align 8, !tbaa !95
  %33 = zext i32 %28 to i64
  br label %83

34:                                               ; preds = %34, %14
  %35 = phi i64 [ 0, %14 ], [ %44, %34 ]
  %36 = phi i64 [ 0, %14 ], [ %45, %34 ]
  %37 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %10, i64 %35, i32 6
  store float 0.000000e+00, ptr %37, align 8, !tbaa !174
  %38 = or i64 %35, 1
  %39 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %10, i64 %38, i32 6
  store float 0.000000e+00, ptr %39, align 8, !tbaa !174
  %40 = or i64 %35, 2
  %41 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %10, i64 %40, i32 6
  store float 0.000000e+00, ptr %41, align 8, !tbaa !174
  %42 = or i64 %35, 3
  %43 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %10, i64 %42, i32 6
  store float 0.000000e+00, ptr %43, align 8, !tbaa !174
  %44 = add nuw nsw i64 %35, 4
  %45 = add i64 %36, 4
  %46 = icmp eq i64 %45, %15
  br i1 %46, label %16, label %34

47:                                               ; preds = %83, %26
  br i1 %7, label %48, label %236

48:                                               ; preds = %47
  %49 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %50 = load ptr, ptr %49, align 8, !tbaa !87
  %51 = zext i32 %5 to i64
  %52 = icmp ult i32 %5, 4
  br i1 %52, label %81, label %53

53:                                               ; preds = %48
  %54 = and i64 %51, 4294967292
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %77, %55 ]
  %57 = or i64 %56, 1
  %58 = or i64 %56, 2
  %59 = or i64 %56, 3
  %60 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 %56, i32 6
  %61 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 %57, i32 6
  %62 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 %58, i32 6
  %63 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 %59, i32 6
  %64 = load float, ptr %60, align 8, !tbaa !174
  %65 = load float, ptr %61, align 8, !tbaa !174
  %66 = load float, ptr %62, align 8, !tbaa !174
  %67 = load float, ptr %63, align 8, !tbaa !174
  %68 = insertelement <4 x float> poison, float %64, i64 0
  %69 = insertelement <4 x float> %68, float %65, i64 1
  %70 = insertelement <4 x float> %69, float %66, i64 2
  %71 = insertelement <4 x float> %70, float %67, i64 3
  %72 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %71
  %73 = extractelement <4 x float> %72, i64 0
  store float %73, ptr %60, align 8, !tbaa !174
  %74 = extractelement <4 x float> %72, i64 1
  store float %74, ptr %61, align 8, !tbaa !174
  %75 = extractelement <4 x float> %72, i64 2
  store float %75, ptr %62, align 8, !tbaa !174
  %76 = extractelement <4 x float> %72, i64 3
  store float %76, ptr %63, align 8, !tbaa !174
  %77 = add nuw i64 %56, 4
  %78 = icmp eq i64 %77, %54
  br i1 %78, label %79, label %55, !llvm.loop !289

79:                                               ; preds = %55
  %80 = icmp eq i64 %54, %51
  br i1 %80, label %146, label %81

81:                                               ; preds = %48, %79
  %82 = phi i64 [ 0, %48 ], [ %54, %79 ]
  br label %139

83:                                               ; preds = %30, %83
  %84 = phi i64 [ 0, %30 ], [ %137, %83 ]
  %85 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %32, i64 %84, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !219
  %87 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 0, i32 1
  %88 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %32, i64 %84, i32 1, i64 1
  %89 = load ptr, ptr %88, align 8, !tbaa !219
  %90 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %89, i64 0, i32 1
  %91 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %32, i64 %84, i32 1, i64 2
  %92 = load ptr, ptr %91, align 8, !tbaa !219
  %93 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %92, i64 0, i32 1
  %94 = load float, ptr %90, align 4, !tbaa !137
  %95 = load float, ptr %87, align 4, !tbaa !137
  %96 = fsub float %94, %95
  %97 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %89, i64 0, i32 1, i32 0, i64 1
  %98 = load float, ptr %97, align 4, !tbaa !137
  %99 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 0, i32 1, i32 0, i64 1
  %100 = load float, ptr %99, align 4, !tbaa !137
  %101 = fsub float %98, %100
  %102 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %89, i64 0, i32 1, i32 0, i64 2
  %103 = load float, ptr %102, align 4, !tbaa !137
  %104 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 0, i32 1, i32 0, i64 2
  %105 = load float, ptr %104, align 4, !tbaa !137
  %106 = fsub float %103, %105
  %107 = load float, ptr %93, align 4, !tbaa !137
  %108 = fsub float %107, %95
  %109 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %92, i64 0, i32 1, i32 0, i64 1
  %110 = load float, ptr %109, align 4, !tbaa !137
  %111 = fsub float %110, %100
  %112 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %92, i64 0, i32 1, i32 0, i64 2
  %113 = load float, ptr %112, align 4, !tbaa !137
  %114 = fsub float %113, %105
  %115 = fneg float %106
  %116 = fmul float %111, %115
  %117 = tail call float @llvm.fmuladd.f32(float %101, float %114, float %116)
  %118 = fneg float %96
  %119 = fmul float %114, %118
  %120 = tail call float @llvm.fmuladd.f32(float %106, float %108, float %119)
  %121 = fneg float %101
  %122 = fmul float %108, %121
  %123 = tail call float @llvm.fmuladd.f32(float %96, float %111, float %122)
  %124 = fmul float %120, %120
  %125 = tail call float @llvm.fmuladd.f32(float %117, float %117, float %124)
  %126 = tail call float @llvm.fmuladd.f32(float %123, float %123, float %125)
  %127 = tail call float @llvm.sqrt.f32(float %126)
  %128 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 0, i32 6
  %129 = load float, ptr %128, align 8, !tbaa !174
  %130 = fadd float %127, %129
  store float %130, ptr %128, align 8, !tbaa !174
  %131 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %89, i64 0, i32 6
  %132 = load float, ptr %131, align 8, !tbaa !174
  %133 = fadd float %127, %132
  store float %133, ptr %131, align 8, !tbaa !174
  %134 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %92, i64 0, i32 6
  %135 = load float, ptr %134, align 8, !tbaa !174
  %136 = fadd float %127, %135
  store float %136, ptr %134, align 8, !tbaa !174
  %137 = add nuw nsw i64 %84, 1
  %138 = icmp eq i64 %137, %33
  br i1 %138, label %47, label %83

139:                                              ; preds = %81, %139
  %140 = phi i64 [ %144, %139 ], [ %82, %81 ]
  %141 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 %140, i32 6
  %142 = load float, ptr %141, align 8, !tbaa !174
  %143 = fdiv float 1.000000e+00, %142
  store float %143, ptr %141, align 8, !tbaa !174
  %144 = add nuw nsw i64 %140, 1
  %145 = icmp eq i64 %144, %51
  br i1 %145, label %146, label %139, !llvm.loop !290

146:                                              ; preds = %139, %79, %3
  %147 = icmp sgt i32 %5, 0
  br i1 %147, label %148, label %236

148:                                              ; preds = %146
  %149 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %150 = load ptr, ptr %149, align 8, !tbaa !87
  %151 = zext i32 %5 to i64
  %152 = and i64 %151, 1
  %153 = icmp eq i32 %5, 1
  br i1 %153, label %176, label %154

154:                                              ; preds = %148
  %155 = and i64 %151, 4294967294
  br label %156

156:                                              ; preds = %156, %154
  %157 = phi i64 [ 0, %154 ], [ %173, %156 ]
  %158 = phi float [ 0.000000e+00, %154 ], [ %172, %156 ]
  %159 = phi i64 [ 0, %154 ], [ %174, %156 ]
  %160 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %150, i64 %157, i32 6
  %161 = load float, ptr %160, align 8, !tbaa !174
  %162 = fcmp ogt float %161, 0.000000e+00
  %163 = fdiv float 1.000000e+00, %161
  %164 = select i1 %162, float %163, float 0.000000e+00
  %165 = fadd float %158, %164
  %166 = or i64 %157, 1
  %167 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %150, i64 %166, i32 6
  %168 = load float, ptr %167, align 8, !tbaa !174
  %169 = fcmp ogt float %168, 0.000000e+00
  %170 = fdiv float 1.000000e+00, %168
  %171 = select i1 %169, float %170, float 0.000000e+00
  %172 = fadd float %165, %171
  %173 = add nuw nsw i64 %157, 2
  %174 = add i64 %159, 2
  %175 = icmp eq i64 %174, %155
  br i1 %175, label %176, label %156

176:                                              ; preds = %156, %148
  %177 = phi float [ undef, %148 ], [ %172, %156 ]
  %178 = phi i64 [ 0, %148 ], [ %173, %156 ]
  %179 = phi float [ 0.000000e+00, %148 ], [ %172, %156 ]
  %180 = icmp eq i64 %152, 0
  br i1 %180, label %188, label %181

181:                                              ; preds = %176
  %182 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %150, i64 %178, i32 6
  %183 = load float, ptr %182, align 8, !tbaa !174
  %184 = fcmp ogt float %183, 0.000000e+00
  %185 = fdiv float 1.000000e+00, %183
  %186 = select i1 %184, float %185, float 0.000000e+00
  %187 = fadd float %179, %186
  br label %188

188:                                              ; preds = %176, %181
  %189 = phi float [ %177, %176 ], [ %187, %181 ]
  br i1 %147, label %190, label %236

190:                                              ; preds = %188
  %191 = fdiv float 1.000000e+00, %189
  %192 = fmul float %191, %1
  %193 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %194 = load ptr, ptr %193, align 8, !tbaa !87
  %195 = zext i32 %5 to i64
  %196 = icmp ult i32 %5, 4
  br i1 %196, label %227, label %197

197:                                              ; preds = %190
  %198 = and i64 %151, 4294967292
  %199 = insertelement <4 x float> poison, float %192, i64 0
  %200 = shufflevector <4 x float> %199, <4 x float> poison, <4 x i32> zeroinitializer
  br label %201

201:                                              ; preds = %201, %197
  %202 = phi i64 [ 0, %197 ], [ %223, %201 ]
  %203 = or i64 %202, 1
  %204 = or i64 %202, 2
  %205 = or i64 %202, 3
  %206 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %194, i64 %202, i32 6
  %207 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %194, i64 %203, i32 6
  %208 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %194, i64 %204, i32 6
  %209 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %194, i64 %205, i32 6
  %210 = load float, ptr %206, align 8, !tbaa !174
  %211 = load float, ptr %207, align 8, !tbaa !174
  %212 = load float, ptr %208, align 8, !tbaa !174
  %213 = load float, ptr %209, align 8, !tbaa !174
  %214 = insertelement <4 x float> poison, float %210, i64 0
  %215 = insertelement <4 x float> %214, float %211, i64 1
  %216 = insertelement <4 x float> %215, float %212, i64 2
  %217 = insertelement <4 x float> %216, float %213, i64 3
  %218 = fdiv <4 x float> %217, %200
  %219 = extractelement <4 x float> %218, i64 0
  store float %219, ptr %206, align 8, !tbaa !174
  %220 = extractelement <4 x float> %218, i64 1
  store float %220, ptr %207, align 8, !tbaa !174
  %221 = extractelement <4 x float> %218, i64 2
  store float %221, ptr %208, align 8, !tbaa !174
  %222 = extractelement <4 x float> %218, i64 3
  store float %222, ptr %209, align 8, !tbaa !174
  %223 = add nuw i64 %202, 4
  %224 = icmp eq i64 %223, %198
  br i1 %224, label %225, label %201, !llvm.loop !291

225:                                              ; preds = %201
  %226 = icmp eq i64 %198, %151
  br i1 %226, label %236, label %227

227:                                              ; preds = %190, %225
  %228 = phi i64 [ 0, %190 ], [ %198, %225 ]
  br label %229

229:                                              ; preds = %227, %229
  %230 = phi i64 [ %234, %229 ], [ %228, %227 ]
  %231 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %194, i64 %230, i32 6
  %232 = load float, ptr %231, align 8, !tbaa !174
  %233 = fdiv float %232, %192
  store float %233, ptr %231, align 8, !tbaa !174
  %234 = add nuw nsw i64 %230, 1
  %235 = icmp eq i64 %234, %195
  br i1 %235, label %236, label %229, !llvm.loop !292

236:                                              ; preds = %229, %225, %47, %146, %188
  %237 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  store i8 1, ptr %237, align 4, !tbaa !147
  ret void
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody15setTotalDensityEf(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, float noundef %1) local_unnamed_addr #16 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !88
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %76

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !87
  %9 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 0, i32 1
  %10 = load float, ptr %9, align 8, !tbaa.struct !162
  %11 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 0, i32 1, i32 0, i64 1
  %12 = load float, ptr %11, align 4, !tbaa.struct !293
  %13 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %8, i64 0, i32 1, i32 0, i64 2
  %14 = load float, ptr %13, align 8, !tbaa.struct !164
  %15 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %16 = load i32, ptr %15, align 4, !tbaa !96
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %73

18:                                               ; preds = %6
  %19 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %20 = load ptr, ptr %19, align 8, !tbaa !95
  %21 = zext i32 %16 to i64
  br label %22

22:                                               ; preds = %22, %18
  %23 = phi i64 [ 0, %18 ], [ %71, %22 ]
  %24 = phi float [ 0.000000e+00, %18 ], [ %70, %22 ]
  %25 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %20, i64 %23, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !219
  %27 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 0, i32 1
  %28 = load float, ptr %27, align 4, !tbaa !137
  %29 = fsub float %28, %10
  %30 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 0, i32 1, i32 0, i64 1
  %31 = load float, ptr %30, align 4, !tbaa !137
  %32 = fsub float %31, %12
  %33 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 0, i32 1, i32 0, i64 2
  %34 = load float, ptr %33, align 4, !tbaa !137
  %35 = fsub float %34, %14
  %36 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %20, i64 %23, i32 1, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !219
  %38 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %37, i64 0, i32 1
  %39 = load float, ptr %38, align 4, !tbaa !137
  %40 = fsub float %39, %10
  %41 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %37, i64 0, i32 1, i32 0, i64 1
  %42 = load float, ptr %41, align 4, !tbaa !137
  %43 = fsub float %42, %12
  %44 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %37, i64 0, i32 1, i32 0, i64 2
  %45 = load float, ptr %44, align 4, !tbaa !137
  %46 = fsub float %45, %14
  %47 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %20, i64 %23, i32 1, i64 2
  %48 = load ptr, ptr %47, align 8, !tbaa !219
  %49 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %48, i64 0, i32 1
  %50 = load float, ptr %49, align 4, !tbaa !137
  %51 = fsub float %50, %10
  %52 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %48, i64 0, i32 1, i32 0, i64 1
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = fsub float %53, %12
  %55 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %48, i64 0, i32 1, i32 0, i64 2
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = fsub float %56, %14
  %58 = fneg float %46
  %59 = fmul float %54, %58
  %60 = tail call float @llvm.fmuladd.f32(float %43, float %57, float %59)
  %61 = fneg float %40
  %62 = fmul float %57, %61
  %63 = tail call float @llvm.fmuladd.f32(float %46, float %51, float %62)
  %64 = fneg float %43
  %65 = fmul float %51, %64
  %66 = tail call float @llvm.fmuladd.f32(float %40, float %54, float %65)
  %67 = fmul float %32, %63
  %68 = tail call float @llvm.fmuladd.f32(float %29, float %60, float %67)
  %69 = tail call float @llvm.fmuladd.f32(float %35, float %66, float %68)
  %70 = fadd float %24, %69
  %71 = add nuw nsw i64 %23, 1
  %72 = icmp eq i64 %71, %21
  br i1 %72, label %73, label %22

73:                                               ; preds = %22, %6
  %74 = phi float [ 0.000000e+00, %6 ], [ %70, %22 ]
  %75 = fdiv float %74, 6.000000e+00
  br label %76

76:                                               ; preds = %2, %73
  %77 = phi float [ %75, %73 ], [ 0.000000e+00, %2 ]
  %78 = fmul float %77, %1
  tail call void @_ZN10btSoftBody12setTotalMassEfb(ptr noundef nonnull align 8 dereferenceable(1496) %0, float noundef %78, i1 noundef zeroext true)
  ret void
}

; Function Attrs: nofree nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local noundef float @_ZNK10btSoftBody9getVolumeEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #17 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !88
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %75

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !87
  %8 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 0, i32 1
  %9 = load float, ptr %8, align 8, !tbaa.struct !162
  %10 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 0, i32 1, i32 0, i64 1
  %11 = load float, ptr %10, align 4, !tbaa.struct !293
  %12 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 0, i32 1, i32 0, i64 2
  %13 = load float, ptr %12, align 8, !tbaa.struct !164
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %15 = load i32, ptr %14, align 4, !tbaa !96
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %72

17:                                               ; preds = %5
  %18 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !95
  %20 = zext i32 %15 to i64
  br label %21

21:                                               ; preds = %17, %21
  %22 = phi i64 [ 0, %17 ], [ %70, %21 ]
  %23 = phi float [ 0.000000e+00, %17 ], [ %69, %21 ]
  %24 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %22, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !219
  %26 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1
  %27 = load float, ptr %26, align 4, !tbaa !137
  %28 = fsub float %27, %9
  %29 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1, i32 0, i64 1
  %30 = load float, ptr %29, align 4, !tbaa !137
  %31 = fsub float %30, %11
  %32 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1, i32 0, i64 2
  %33 = load float, ptr %32, align 4, !tbaa !137
  %34 = fsub float %33, %13
  %35 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %22, i32 1, i64 1
  %36 = load ptr, ptr %35, align 8, !tbaa !219
  %37 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %36, i64 0, i32 1
  %38 = load float, ptr %37, align 4, !tbaa !137
  %39 = fsub float %38, %9
  %40 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %36, i64 0, i32 1, i32 0, i64 1
  %41 = load float, ptr %40, align 4, !tbaa !137
  %42 = fsub float %41, %11
  %43 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %36, i64 0, i32 1, i32 0, i64 2
  %44 = load float, ptr %43, align 4, !tbaa !137
  %45 = fsub float %44, %13
  %46 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %22, i32 1, i64 2
  %47 = load ptr, ptr %46, align 8, !tbaa !219
  %48 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 0, i32 1
  %49 = load float, ptr %48, align 4, !tbaa !137
  %50 = fsub float %49, %9
  %51 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 0, i32 1, i32 0, i64 1
  %52 = load float, ptr %51, align 4, !tbaa !137
  %53 = fsub float %52, %11
  %54 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 0, i32 1, i32 0, i64 2
  %55 = load float, ptr %54, align 4, !tbaa !137
  %56 = fsub float %55, %13
  %57 = fneg float %45
  %58 = fmul float %53, %57
  %59 = tail call float @llvm.fmuladd.f32(float %42, float %56, float %58)
  %60 = fneg float %39
  %61 = fmul float %56, %60
  %62 = tail call float @llvm.fmuladd.f32(float %45, float %50, float %61)
  %63 = fneg float %42
  %64 = fmul float %50, %63
  %65 = tail call float @llvm.fmuladd.f32(float %39, float %53, float %64)
  %66 = fmul float %31, %62
  %67 = tail call float @llvm.fmuladd.f32(float %28, float %59, float %66)
  %68 = tail call float @llvm.fmuladd.f32(float %34, float %65, float %67)
  %69 = fadd float %23, %68
  %70 = add nuw nsw i64 %22, 1
  %71 = icmp eq i64 %70, %20
  br i1 %71, label %72, label %21

72:                                               ; preds = %21, %5
  %73 = phi float [ 0.000000e+00, %5 ], [ %69, %21 ]
  %74 = fdiv float %73, 6.000000e+00
  br label %75

75:                                               ; preds = %72, %1
  %76 = phi float [ %74, %72 ], [ 0.000000e+00, %1 ]
  ret float %76
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody13setVolumeMassEf(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, float noundef %1) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !88
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %30

6:                                                ; preds = %2
  %7 = zext i32 %4 to i64
  %8 = shl nuw nsw i64 %7, 2
  %9 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %8, i32 noundef 16)
  tail call void @llvm.memset.p0.i64(ptr align 4 %9, i8 0, i64 %8, i1 false), !tbaa !137
  %10 = load i32, ptr %3, align 4, !tbaa !88
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %6
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !87
  %15 = zext i32 %10 to i64
  %16 = and i64 %15, 3
  %17 = icmp ult i32 %10, 4
  br i1 %17, label %20, label %18

18:                                               ; preds = %12
  %19 = and i64 %15, 4294967292
  br label %44

20:                                               ; preds = %44, %12
  %21 = phi i64 [ 0, %12 ], [ %54, %44 ]
  %22 = icmp eq i64 %16, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %27, %23 ], [ %21, %20 ]
  %25 = phi i64 [ %28, %23 ], [ 0, %20 ]
  %26 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %24, i32 6
  store float 0.000000e+00, ptr %26, align 8, !tbaa !174
  %27 = add nuw nsw i64 %24, 1
  %28 = add i64 %25, 1
  %29 = icmp eq i64 %28, %16
  br i1 %29, label %30, label %23, !llvm.loop !294

30:                                               ; preds = %20, %23, %2, %6
  %31 = phi i1 [ false, %6 ], [ false, %2 ], [ %11, %23 ], [ %11, %20 ]
  %32 = phi ptr [ %9, %6 ], [ null, %2 ], [ %9, %23 ], [ %9, %20 ]
  %33 = phi i32 [ %10, %6 ], [ %4, %2 ], [ %10, %23 ], [ %10, %20 ]
  %34 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 2
  %35 = load i32, ptr %34, align 4, !tbaa !100
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %57

37:                                               ; preds = %30
  %38 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %39 = load ptr, ptr %38, align 8, !tbaa !99
  %40 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %41 = load ptr, ptr %40, align 8, !tbaa !87
  %42 = ptrtoint ptr %41 to i64
  %43 = zext i32 %35 to i64
  br label %66

44:                                               ; preds = %44, %18
  %45 = phi i64 [ 0, %18 ], [ %54, %44 ]
  %46 = phi i64 [ 0, %18 ], [ %55, %44 ]
  %47 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %45, i32 6
  store float 0.000000e+00, ptr %47, align 8, !tbaa !174
  %48 = or i64 %45, 1
  %49 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %48, i32 6
  store float 0.000000e+00, ptr %49, align 8, !tbaa !174
  %50 = or i64 %45, 2
  %51 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %50, i32 6
  store float 0.000000e+00, ptr %51, align 8, !tbaa !174
  %52 = or i64 %45, 3
  %53 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %52, i32 6
  store float 0.000000e+00, ptr %53, align 8, !tbaa !174
  %54 = add nuw nsw i64 %45, 4
  %55 = add i64 %46, 4
  %56 = icmp eq i64 %55, %19
  br i1 %56, label %20, label %44

57:                                               ; preds = %66, %30
  br i1 %31, label %58, label %250

58:                                               ; preds = %57
  %59 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %60 = load ptr, ptr %59, align 8, !tbaa !87
  %61 = zext i32 %33 to i64
  %62 = and i64 %61, 1
  %63 = icmp eq i32 %33, 1
  br i1 %63, label %131, label %64

64:                                               ; preds = %58
  %65 = and i64 %61, 4294967294
  br label %227

66:                                               ; preds = %37, %66
  %67 = phi i64 [ 0, %37 ], [ %129, %66 ]
  %68 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %39, i64 %67, i32 2
  %69 = load float, ptr %68, align 8, !tbaa !242
  %70 = tail call float @llvm.fabs.f32(float %69)
  %71 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %39, i64 %67, i32 1, i64 0
  %72 = load ptr, ptr %71, align 8, !tbaa !219
  %73 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %72, i64 0, i32 6
  %74 = load float, ptr %73, align 8, !tbaa !174
  %75 = fadd float %70, %74
  store float %75, ptr %73, align 8, !tbaa !174
  %76 = ptrtoint ptr %72 to i64
  %77 = sub i64 %76, %42
  %78 = sdiv exact i64 %77, 120
  %79 = shl i64 %78, 32
  %80 = ashr exact i64 %79, 32
  %81 = getelementptr inbounds float, ptr %32, i64 %80
  %82 = load float, ptr %81, align 4, !tbaa !137
  %83 = fadd float %82, 1.000000e+00
  store float %83, ptr %81, align 4, !tbaa !137
  %84 = load float, ptr %68, align 8, !tbaa !242
  %85 = tail call float @llvm.fabs.f32(float %84)
  %86 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %39, i64 %67, i32 1, i64 1
  %87 = load ptr, ptr %86, align 8, !tbaa !219
  %88 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %87, i64 0, i32 6
  %89 = load float, ptr %88, align 8, !tbaa !174
  %90 = fadd float %85, %89
  store float %90, ptr %88, align 8, !tbaa !174
  %91 = ptrtoint ptr %87 to i64
  %92 = sub i64 %91, %42
  %93 = sdiv exact i64 %92, 120
  %94 = shl i64 %93, 32
  %95 = ashr exact i64 %94, 32
  %96 = getelementptr inbounds float, ptr %32, i64 %95
  %97 = load float, ptr %96, align 4, !tbaa !137
  %98 = fadd float %97, 1.000000e+00
  store float %98, ptr %96, align 4, !tbaa !137
  %99 = load float, ptr %68, align 8, !tbaa !242
  %100 = tail call float @llvm.fabs.f32(float %99)
  %101 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %39, i64 %67, i32 1, i64 2
  %102 = load ptr, ptr %101, align 8, !tbaa !219
  %103 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %102, i64 0, i32 6
  %104 = load float, ptr %103, align 8, !tbaa !174
  %105 = fadd float %100, %104
  store float %105, ptr %103, align 8, !tbaa !174
  %106 = ptrtoint ptr %102 to i64
  %107 = sub i64 %106, %42
  %108 = sdiv exact i64 %107, 120
  %109 = shl i64 %108, 32
  %110 = ashr exact i64 %109, 32
  %111 = getelementptr inbounds float, ptr %32, i64 %110
  %112 = load float, ptr %111, align 4, !tbaa !137
  %113 = fadd float %112, 1.000000e+00
  store float %113, ptr %111, align 4, !tbaa !137
  %114 = load float, ptr %68, align 8, !tbaa !242
  %115 = tail call float @llvm.fabs.f32(float %114)
  %116 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %39, i64 %67, i32 1, i64 3
  %117 = load ptr, ptr %116, align 8, !tbaa !219
  %118 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %117, i64 0, i32 6
  %119 = load float, ptr %118, align 8, !tbaa !174
  %120 = fadd float %115, %119
  store float %120, ptr %118, align 8, !tbaa !174
  %121 = ptrtoint ptr %117 to i64
  %122 = sub i64 %121, %42
  %123 = sdiv exact i64 %122, 120
  %124 = shl i64 %123, 32
  %125 = ashr exact i64 %124, 32
  %126 = getelementptr inbounds float, ptr %32, i64 %125
  %127 = load float, ptr %126, align 4, !tbaa !137
  %128 = fadd float %127, 1.000000e+00
  store float %128, ptr %126, align 4, !tbaa !137
  %129 = add nuw nsw i64 %67, 1
  %130 = icmp eq i64 %129, %43
  br i1 %130, label %57, label %66

131:                                              ; preds = %246, %58
  %132 = phi i64 [ 0, %58 ], [ %247, %246 ]
  %133 = icmp eq i64 %62, 0
  br i1 %133, label %142, label %134

134:                                              ; preds = %131
  %135 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %60, i64 %132, i32 6
  %136 = load float, ptr %135, align 8, !tbaa !174
  %137 = fcmp ogt float %136, 0.000000e+00
  br i1 %137, label %138, label %142

138:                                              ; preds = %134
  %139 = getelementptr inbounds float, ptr %32, i64 %132
  %140 = load float, ptr %139, align 4, !tbaa !137
  %141 = fdiv float %140, %136
  store float %141, ptr %135, align 8, !tbaa !174
  br label %142

142:                                              ; preds = %134, %138, %131
  br i1 %31, label %143, label %250

143:                                              ; preds = %142
  %144 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %145 = load ptr, ptr %144, align 8, !tbaa !87
  %146 = zext i32 %33 to i64
  %147 = and i64 %61, 1
  %148 = icmp eq i32 %33, 1
  br i1 %148, label %171, label %149

149:                                              ; preds = %143
  %150 = and i64 %61, 4294967294
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %168, %151 ]
  %153 = phi float [ 0.000000e+00, %149 ], [ %167, %151 ]
  %154 = phi i64 [ 0, %149 ], [ %169, %151 ]
  %155 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %152, i32 6
  %156 = load float, ptr %155, align 8, !tbaa !174
  %157 = fcmp ogt float %156, 0.000000e+00
  %158 = fdiv float 1.000000e+00, %156
  %159 = select i1 %157, float %158, float 0.000000e+00
  %160 = fadd float %153, %159
  %161 = or i64 %152, 1
  %162 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %161, i32 6
  %163 = load float, ptr %162, align 8, !tbaa !174
  %164 = fcmp ogt float %163, 0.000000e+00
  %165 = fdiv float 1.000000e+00, %163
  %166 = select i1 %164, float %165, float 0.000000e+00
  %167 = fadd float %160, %166
  %168 = add nuw nsw i64 %152, 2
  %169 = add i64 %154, 2
  %170 = icmp eq i64 %169, %150
  br i1 %170, label %171, label %151

171:                                              ; preds = %151, %143
  %172 = phi float [ undef, %143 ], [ %167, %151 ]
  %173 = phi i64 [ 0, %143 ], [ %168, %151 ]
  %174 = phi float [ 0.000000e+00, %143 ], [ %167, %151 ]
  %175 = icmp eq i64 %147, 0
  br i1 %175, label %183, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %173, i32 6
  %178 = load float, ptr %177, align 8, !tbaa !174
  %179 = fcmp ogt float %178, 0.000000e+00
  %180 = fdiv float 1.000000e+00, %178
  %181 = select i1 %179, float %180, float 0.000000e+00
  %182 = fadd float %174, %181
  br label %183

183:                                              ; preds = %171, %176
  %184 = phi float [ %172, %171 ], [ %182, %176 ]
  %185 = fdiv float 1.000000e+00, %184
  %186 = fmul float %185, %1
  %187 = icmp ult i32 %33, 4
  br i1 %187, label %218, label %188

188:                                              ; preds = %183
  %189 = and i64 %61, 4294967292
  %190 = insertelement <4 x float> poison, float %186, i64 0
  %191 = shufflevector <4 x float> %190, <4 x float> poison, <4 x i32> zeroinitializer
  br label %192

192:                                              ; preds = %192, %188
  %193 = phi i64 [ 0, %188 ], [ %214, %192 ]
  %194 = or i64 %193, 1
  %195 = or i64 %193, 2
  %196 = or i64 %193, 3
  %197 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %193, i32 6
  %198 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %194, i32 6
  %199 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %195, i32 6
  %200 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %196, i32 6
  %201 = load float, ptr %197, align 8, !tbaa !174
  %202 = load float, ptr %198, align 8, !tbaa !174
  %203 = load float, ptr %199, align 8, !tbaa !174
  %204 = load float, ptr %200, align 8, !tbaa !174
  %205 = insertelement <4 x float> poison, float %201, i64 0
  %206 = insertelement <4 x float> %205, float %202, i64 1
  %207 = insertelement <4 x float> %206, float %203, i64 2
  %208 = insertelement <4 x float> %207, float %204, i64 3
  %209 = fdiv <4 x float> %208, %191
  %210 = extractelement <4 x float> %209, i64 0
  store float %210, ptr %197, align 8, !tbaa !174
  %211 = extractelement <4 x float> %209, i64 1
  store float %211, ptr %198, align 8, !tbaa !174
  %212 = extractelement <4 x float> %209, i64 2
  store float %212, ptr %199, align 8, !tbaa !174
  %213 = extractelement <4 x float> %209, i64 3
  store float %213, ptr %200, align 8, !tbaa !174
  %214 = add nuw i64 %193, 4
  %215 = icmp eq i64 %214, %189
  br i1 %215, label %216, label %192, !llvm.loop !295

216:                                              ; preds = %192
  %217 = icmp eq i64 %189, %61
  br i1 %217, label %250, label %218

218:                                              ; preds = %183, %216
  %219 = phi i64 [ 0, %183 ], [ %189, %216 ]
  br label %220

220:                                              ; preds = %218, %220
  %221 = phi i64 [ %225, %220 ], [ %219, %218 ]
  %222 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %145, i64 %221, i32 6
  %223 = load float, ptr %222, align 8, !tbaa !174
  %224 = fdiv float %223, %186
  store float %224, ptr %222, align 8, !tbaa !174
  %225 = add nuw nsw i64 %221, 1
  %226 = icmp eq i64 %225, %146
  br i1 %226, label %250, label %220, !llvm.loop !296

227:                                              ; preds = %246, %64
  %228 = phi i64 [ 0, %64 ], [ %247, %246 ]
  %229 = phi i64 [ 0, %64 ], [ %248, %246 ]
  %230 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %60, i64 %228, i32 6
  %231 = load float, ptr %230, align 8, !tbaa !174
  %232 = fcmp ogt float %231, 0.000000e+00
  br i1 %232, label %233, label %237

233:                                              ; preds = %227
  %234 = getelementptr inbounds float, ptr %32, i64 %228
  %235 = load float, ptr %234, align 4, !tbaa !137
  %236 = fdiv float %235, %231
  store float %236, ptr %230, align 8, !tbaa !174
  br label %237

237:                                              ; preds = %227, %233
  %238 = or i64 %228, 1
  %239 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %60, i64 %238, i32 6
  %240 = load float, ptr %239, align 8, !tbaa !174
  %241 = fcmp ogt float %240, 0.000000e+00
  br i1 %241, label %242, label %246

242:                                              ; preds = %237
  %243 = getelementptr inbounds float, ptr %32, i64 %238
  %244 = load float, ptr %243, align 4, !tbaa !137
  %245 = fdiv float %244, %240
  store float %245, ptr %239, align 8, !tbaa !174
  br label %246

246:                                              ; preds = %242, %237
  %247 = add nuw nsw i64 %228, 2
  %248 = add i64 %229, 2
  %249 = icmp eq i64 %248, %65
  br i1 %249, label %131, label %227

250:                                              ; preds = %220, %216, %57, %142
  %251 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  store i8 1, ptr %251, align 4, !tbaa !147
  %252 = icmp eq ptr %32, null
  br i1 %252, label %254, label %253

253:                                              ; preds = %250
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %32)
  br label %254

254:                                              ; preds = %250, %253
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIfED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.12, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !39
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.12, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.12, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !36
  store ptr null, ptr %2, align 8, !tbaa !39
  store i32 0, ptr %11, align 4, !tbaa !40
  %12 = getelementptr inbounds %class.btAlignedObjectArray.12, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !41
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody16setVolumeDensityEf(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, float noundef %1) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !100
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %27

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !99
  %9 = zext i32 %4 to i64
  %10 = and i64 %9, 1
  %11 = icmp eq i32 %4, 1
  br i1 %11, label %14, label %12

12:                                               ; preds = %6
  %13 = and i64 %9, 4294967294
  br label %31

14:                                               ; preds = %31, %6
  %15 = phi float [ undef, %6 ], [ %49, %31 ]
  %16 = phi i64 [ 0, %6 ], [ %50, %31 ]
  %17 = phi float [ 0.000000e+00, %6 ], [ %49, %31 ]
  %18 = icmp eq i64 %10, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %8, i64 %16, i32 2
  %21 = load float, ptr %20, align 8, !tbaa !242
  %22 = tail call float @llvm.fabs.f32(float %21)
  %23 = fadd float %17, %22
  %24 = fadd float %23, %22
  %25 = fadd float %24, %22
  %26 = fadd float %25, %22
  br label %27

27:                                               ; preds = %19, %14, %2
  %28 = phi float [ 0.000000e+00, %2 ], [ %15, %14 ], [ %26, %19 ]
  %29 = fmul float %28, %1
  %30 = fdiv float %29, 6.000000e+00
  tail call void @_ZN10btSoftBody13setVolumeMassEf(ptr noundef nonnull align 8 dereferenceable(1496) %0, float noundef %30)
  ret void

31:                                               ; preds = %31, %12
  %32 = phi i64 [ 0, %12 ], [ %50, %31 ]
  %33 = phi float [ 0.000000e+00, %12 ], [ %49, %31 ]
  %34 = phi i64 [ 0, %12 ], [ %51, %31 ]
  %35 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %8, i64 %32, i32 2
  %36 = load float, ptr %35, align 8, !tbaa !242
  %37 = tail call float @llvm.fabs.f32(float %36)
  %38 = fadd float %33, %37
  %39 = fadd float %38, %37
  %40 = fadd float %39, %37
  %41 = fadd float %40, %37
  %42 = or i64 %32, 1
  %43 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %8, i64 %42, i32 2
  %44 = load float, ptr %43, align 8, !tbaa !242
  %45 = tail call float @llvm.fabs.f32(float %44)
  %46 = fadd float %41, %45
  %47 = fadd float %46, %45
  %48 = fadd float %47, %45
  %49 = fadd float %48, %45
  %50 = add nuw nsw i64 %32, 2
  %51 = add i64 %34, 2
  %52 = icmp eq i64 %51, %13
  br i1 %52, label %14, label %31
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody9transformERK11btTransform(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(64) %1) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.btDbvtAabbMm, align 8
  %4 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %5 = load ptr, ptr %4, align 8, !tbaa !157
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %6, i64 11
  %8 = load ptr, ptr %7, align 8
  %9 = tail call noundef float %8(ptr noundef nonnull align 8 dereferenceable(24) %5)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #38
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %11 = load i32, ptr %10, align 4, !tbaa !88
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %32

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %15 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %16 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %17 = getelementptr inbounds %class.btTransform, ptr %1, i64 0, i32 1
  %18 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1
  %19 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1, i32 0, i64 1
  %20 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1, i32 0, i64 2
  %21 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2
  %22 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2, i32 0, i64 1
  %23 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2, i32 0, i64 2
  %24 = getelementptr inbounds %class.btTransform, ptr %1, i64 0, i32 1, i32 0, i64 2
  %25 = getelementptr inbounds i8, ptr %3, i64 8
  %26 = getelementptr inbounds i8, ptr %3, i64 16
  %27 = getelementptr inbounds i8, ptr %3, i64 24
  %28 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %29 = zext i32 %11 to i64
  %30 = insertelement <2 x float> poison, float %9, i64 0
  %31 = shufflevector <2 x float> %30, <2 x float> poison, <2 x i32> zeroinitializer
  br label %84

32:                                               ; preds = %84, %2
  call void @_ZN10btSoftBody13updateNormalsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %33 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %34 = load ptr, ptr %33, align 8, !tbaa !161
  %35 = icmp eq ptr %34, null
  br i1 %35, label %74, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %34, i64 0, i32 1
  %38 = load ptr, ptr %4, align 8, !tbaa !157
  %39 = load ptr, ptr %38, align 8, !tbaa !5
  %40 = getelementptr inbounds ptr, ptr %39, i64 11
  %41 = load ptr, ptr %40, align 8
  %42 = call noundef float %41(ptr noundef nonnull align 8 dereferenceable(24) %38)
  %43 = load <2 x float>, ptr %34, align 4, !tbaa !137
  %44 = insertelement <2 x float> poison, float %42, i64 0
  %45 = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> zeroinitializer
  %46 = fsub <2 x float> %43, %45
  %47 = getelementptr inbounds [4 x float], ptr %34, i64 0, i64 2
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fsub float %48, %42
  %50 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %49, i64 0
  %51 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  store <2 x float> %46, ptr %51, align 4, !tbaa.struct !162
  %52 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 0, i32 0, i64 2
  store <2 x float> %50, ptr %52, align 4, !tbaa.struct !164
  %53 = load <2 x float>, ptr %37, align 4, !tbaa !137
  %54 = fadd <2 x float> %45, %53
  %55 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %34, i64 0, i32 1, i32 0, i64 2
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = fadd float %42, %56
  %58 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %57, i64 0
  %59 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1
  store <2 x float> %54, ptr %59, align 4, !tbaa.struct !162
  %60 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1, i32 0, i64 2
  store <2 x float> %58, ptr %60, align 4, !tbaa.struct !164
  %61 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 8
  %62 = load ptr, ptr %61, align 8, !tbaa !165
  %63 = icmp eq ptr %62, null
  br i1 %63, label %76, label %64

64:                                               ; preds = %36
  %65 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  %66 = load ptr, ptr %65, align 8, !tbaa !42
  %67 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %66, i64 0, i32 4
  %68 = load ptr, ptr %67, align 8, !tbaa !166
  %69 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %66, i64 0, i32 5
  %70 = load ptr, ptr %69, align 8, !tbaa !171
  %71 = load ptr, ptr %68, align 8, !tbaa !5
  %72 = getelementptr inbounds ptr, ptr %71, i64 4
  %73 = load ptr, ptr %72, align 8
  call void %73(ptr noundef nonnull align 8 dereferenceable(8) %68, ptr noundef nonnull %62, ptr noundef nonnull align 4 dereferenceable(16) %51, ptr noundef nonnull align 4 dereferenceable(16) %59, ptr noundef %70)
  br label %76

74:                                               ; preds = %32
  %75 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %75, i8 0, i64 32, i1 false)
  br label %76

76:                                               ; preds = %36, %64, %74
  call void @_ZN10btSoftBody15updateConstantsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %77 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %77, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  %78 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1
  %79 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 0, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %79, ptr noundef nonnull align 4 dereferenceable(16) %78, i64 16, i1 false), !tbaa.struct !162
  %80 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2
  %81 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 0, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %81, ptr noundef nonnull align 4 dereferenceable(16) %80, i64 16, i1 false), !tbaa.struct !162
  %82 = getelementptr inbounds %class.btTransform, ptr %1, i64 0, i32 1
  %83 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 26, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %83, ptr noundef nonnull align 4 dereferenceable(16) %82, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #38
  ret void

84:                                               ; preds = %13, %84
  %85 = phi i64 [ 0, %13 ], [ %208, %84 ]
  %86 = load ptr, ptr %14, align 8, !tbaa !87
  %87 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 %85, i32 1
  %88 = load float, ptr %87, align 4, !tbaa !137
  %89 = getelementptr inbounds [4 x float], ptr %87, i64 0, i64 1
  %90 = load float, ptr %89, align 4, !tbaa !137
  %91 = getelementptr inbounds [4 x float], ptr %87, i64 0, i64 2
  %92 = load float, ptr %91, align 4, !tbaa !137
  %93 = load <4 x float>, ptr %1, align 4
  %94 = shufflevector <4 x float> %93, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %95 = load <4 x float>, ptr %15, align 4
  %96 = shufflevector <4 x float> %95, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %97 = load <4 x float>, ptr %16, align 4
  %98 = shufflevector <4 x float> %97, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %99 = load float, ptr %18, align 4, !tbaa !137
  %100 = load float, ptr %19, align 4, !tbaa !137
  %101 = insertelement <2 x float> poison, float %90, i64 0
  %102 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> zeroinitializer
  %103 = insertelement <2 x float> %96, float %100, i64 1
  %104 = fmul <2 x float> %102, %103
  %105 = insertelement <2 x float> %94, float %99, i64 1
  %106 = insertelement <2 x float> poison, float %88, i64 0
  %107 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> zeroinitializer
  %108 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %105, <2 x float> %107, <2 x float> %104)
  %109 = load float, ptr %20, align 4, !tbaa !137
  %110 = insertelement <2 x float> %98, float %109, i64 1
  %111 = insertelement <2 x float> poison, float %92, i64 0
  %112 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> zeroinitializer
  %113 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %110, <2 x float> %112, <2 x float> %108)
  %114 = load <2 x float>, ptr %17, align 4, !tbaa !137
  %115 = fadd <2 x float> %113, %114
  %116 = load float, ptr %21, align 4, !tbaa !137
  %117 = load float, ptr %22, align 4, !tbaa !137
  %118 = fmul float %90, %117
  %119 = call float @llvm.fmuladd.f32(float %116, float %88, float %118)
  %120 = load float, ptr %23, align 4, !tbaa !137
  %121 = call float @llvm.fmuladd.f32(float %120, float %92, float %119)
  %122 = load float, ptr %24, align 4, !tbaa !137
  %123 = fadd float %122, %121
  %124 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %123, i64 0
  store <2 x float> %115, ptr %87, align 8, !tbaa.struct !162
  %125 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 %85, i32 1, i32 0, i64 2
  store <2 x float> %124, ptr %125, align 8, !tbaa.struct !164
  %126 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 %85, i32 2
  %127 = load float, ptr %126, align 4, !tbaa !137
  %128 = getelementptr inbounds [4 x float], ptr %126, i64 0, i64 1
  %129 = load float, ptr %128, align 4, !tbaa !137
  %130 = getelementptr inbounds [4 x float], ptr %126, i64 0, i64 2
  %131 = load float, ptr %130, align 4, !tbaa !137
  %132 = load <4 x float>, ptr %1, align 4
  %133 = shufflevector <4 x float> %132, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %134 = load <4 x float>, ptr %15, align 4
  %135 = shufflevector <4 x float> %134, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %136 = load <4 x float>, ptr %16, align 4
  %137 = shufflevector <4 x float> %136, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %138 = load float, ptr %18, align 4, !tbaa !137
  %139 = load float, ptr %19, align 4, !tbaa !137
  %140 = insertelement <2 x float> poison, float %129, i64 0
  %141 = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> zeroinitializer
  %142 = insertelement <2 x float> %135, float %139, i64 1
  %143 = fmul <2 x float> %141, %142
  %144 = insertelement <2 x float> %133, float %138, i64 1
  %145 = insertelement <2 x float> poison, float %127, i64 0
  %146 = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> zeroinitializer
  %147 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %144, <2 x float> %146, <2 x float> %143)
  %148 = load float, ptr %20, align 4, !tbaa !137
  %149 = insertelement <2 x float> %137, float %148, i64 1
  %150 = insertelement <2 x float> poison, float %131, i64 0
  %151 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> zeroinitializer
  %152 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %149, <2 x float> %151, <2 x float> %147)
  %153 = load <2 x float>, ptr %17, align 4, !tbaa !137
  %154 = fadd <2 x float> %152, %153
  %155 = load float, ptr %21, align 4, !tbaa !137
  %156 = load float, ptr %22, align 4, !tbaa !137
  %157 = fmul float %129, %156
  %158 = call float @llvm.fmuladd.f32(float %155, float %127, float %157)
  %159 = load float, ptr %23, align 4, !tbaa !137
  %160 = call float @llvm.fmuladd.f32(float %159, float %131, float %158)
  %161 = load float, ptr %24, align 4, !tbaa !137
  %162 = fadd float %161, %160
  %163 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %162, i64 0
  store <2 x float> %154, ptr %126, align 8, !tbaa.struct !162
  %164 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 %85, i32 2, i32 0, i64 2
  store <2 x float> %163, ptr %164, align 8, !tbaa.struct !164
  %165 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 %85, i32 5
  %166 = load float, ptr %165, align 4, !tbaa !137
  %167 = getelementptr inbounds [4 x float], ptr %165, i64 0, i64 1
  %168 = load float, ptr %167, align 4, !tbaa !137
  %169 = getelementptr inbounds [4 x float], ptr %165, i64 0, i64 2
  %170 = load float, ptr %169, align 4, !tbaa !137
  %171 = load <4 x float>, ptr %1, align 4
  %172 = shufflevector <4 x float> %171, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %173 = load <4 x float>, ptr %15, align 4
  %174 = shufflevector <4 x float> %173, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %175 = load <4 x float>, ptr %16, align 4
  %176 = shufflevector <4 x float> %175, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %177 = load float, ptr %18, align 4, !tbaa !137
  %178 = load float, ptr %19, align 4, !tbaa !137
  %179 = insertelement <2 x float> poison, float %168, i64 0
  %180 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> zeroinitializer
  %181 = insertelement <2 x float> %174, float %178, i64 1
  %182 = fmul <2 x float> %180, %181
  %183 = insertelement <2 x float> %172, float %177, i64 1
  %184 = insertelement <2 x float> poison, float %166, i64 0
  %185 = shufflevector <2 x float> %184, <2 x float> poison, <2 x i32> zeroinitializer
  %186 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %183, <2 x float> %185, <2 x float> %182)
  %187 = load float, ptr %20, align 4, !tbaa !137
  %188 = insertelement <2 x float> %176, float %187, i64 1
  %189 = insertelement <2 x float> poison, float %170, i64 0
  %190 = shufflevector <2 x float> %189, <2 x float> poison, <2 x i32> zeroinitializer
  %191 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %188, <2 x float> %190, <2 x float> %186)
  %192 = load float, ptr %21, align 4, !tbaa !137
  %193 = load float, ptr %22, align 4, !tbaa !137
  %194 = fmul float %168, %193
  %195 = call float @llvm.fmuladd.f32(float %192, float %166, float %194)
  %196 = load float, ptr %23, align 4, !tbaa !137
  %197 = call float @llvm.fmuladd.f32(float %196, float %170, float %195)
  %198 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %197, i64 0
  store <2 x float> %191, ptr %165, align 8, !tbaa.struct !162
  %199 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 %85, i32 5, i32 0, i64 2
  store <2 x float> %198, ptr %199, align 8, !tbaa.struct !164
  %200 = fsub <2 x float> %115, %31
  %201 = fsub float %123, %9
  %202 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %201, i64 0
  %203 = fadd <2 x float> %31, %115
  %204 = fadd float %9, %123
  %205 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %204, i64 0
  store <2 x float> %200, ptr %3, align 8, !tbaa.struct !297
  store <2 x float> %202, ptr %25, align 8, !tbaa.struct !298
  store <2 x float> %203, ptr %26, align 8, !tbaa.struct !162
  store <2 x float> %205, ptr %27, align 8, !tbaa.struct !164
  %206 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %86, i64 %85, i32 8
  %207 = load ptr, ptr %206, align 8, !tbaa !182
  call void @_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm(ptr noundef nonnull align 8 dereferenceable(64) %28, ptr noundef %207, ptr noundef nonnull align 4 dereferenceable(32) %3)
  %208 = add nuw nsw i64 %85, 1
  %209 = icmp eq i64 %208, %29
  br i1 %209, label %32, label %84
}

declare void @_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm(ptr noundef nonnull align 8 dereferenceable(64), ptr noundef, ptr noundef nonnull align 4 dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody13updateNormalsEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #16 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !88
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %40

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 3
  %9 = icmp ult i32 %3, 4
  br i1 %9, label %29, label %10

10:                                               ; preds = %5
  %11 = and i64 %7, 4294967292
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %26, %12 ]
  %14 = phi i64 [ 0, %10 ], [ %27, %12 ]
  %15 = load ptr, ptr %6, align 8, !tbaa !87
  %16 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %15, i64 %13, i32 5
  %17 = or i64 %13, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %16, i8 0, i64 16, i1 false)
  %18 = load ptr, ptr %6, align 8, !tbaa !87
  %19 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %18, i64 %17, i32 5
  %20 = or i64 %13, 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false)
  %21 = load ptr, ptr %6, align 8, !tbaa !87
  %22 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %21, i64 %20, i32 5
  %23 = or i64 %13, 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %22, i8 0, i64 16, i1 false)
  %24 = load ptr, ptr %6, align 8, !tbaa !87
  %25 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %24, i64 %23, i32 5
  %26 = add nuw nsw i64 %13, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %25, i8 0, i64 16, i1 false)
  %27 = add i64 %14, 4
  %28 = icmp eq i64 %27, %11
  br i1 %28, label %29, label %12

29:                                               ; preds = %12, %5
  %30 = phi i64 [ 0, %5 ], [ %26, %12 ]
  %31 = icmp eq i64 %8, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %29, %32
  %33 = phi i64 [ %37, %32 ], [ %30, %29 ]
  %34 = phi i64 [ %38, %32 ], [ 0, %29 ]
  %35 = load ptr, ptr %6, align 8, !tbaa !87
  %36 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %35, i64 %33, i32 5
  %37 = add nuw nsw i64 %33, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %36, i8 0, i64 16, i1 false)
  %38 = add i64 %34, 1
  %39 = icmp eq i64 %38, %8
  br i1 %39, label %40, label %32, !llvm.loop !299

40:                                               ; preds = %29, %32, %1
  %41 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %42 = load i32, ptr %41, align 4, !tbaa !96
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %124

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %46 = zext i32 %42 to i64
  br label %47

47:                                               ; preds = %44, %47
  %48 = phi i64 [ 0, %44 ], [ %122, %47 ]
  %49 = load ptr, ptr %45, align 8, !tbaa !95
  %50 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %49, i64 %48, i32 1
  %51 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %49, i64 %48, i32 1, i64 1
  %52 = load ptr, ptr %51, align 8, !tbaa !219
  %53 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %50, align 8, !tbaa !219
  %55 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %54, i64 0, i32 1
  %56 = load float, ptr %53, align 4, !tbaa !137
  %57 = load float, ptr %55, align 4, !tbaa !137
  %58 = fsub float %56, %57
  %59 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %52, i64 0, i32 1, i32 0, i64 1
  %60 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %54, i64 0, i32 1, i32 0, i64 1
  %61 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %49, i64 %48, i32 1, i64 2
  %62 = load ptr, ptr %61, align 8, !tbaa !219
  %63 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %62, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %62, i64 0, i32 1, i32 0, i64 1
  %65 = load float, ptr %64, align 4, !tbaa !137
  %66 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %62, i64 0, i32 1, i32 0, i64 2
  %67 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %49, i64 %48, i32 2
  %68 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %49, i64 %48, i32 2, i32 0, i64 2
  %69 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %54, i64 0, i32 5
  %70 = load <2 x float>, ptr %59, align 4, !tbaa !137
  %71 = load <2 x float>, ptr %60, align 4, !tbaa !137
  %72 = fsub <2 x float> %70, %71
  %73 = load float, ptr %63, align 4, !tbaa !137
  %74 = extractelement <2 x float> %71, i64 0
  %75 = fsub float %65, %74
  %76 = load float, ptr %66, align 4, !tbaa !137
  %77 = insertelement <2 x float> poison, float %73, i64 0
  %78 = insertelement <2 x float> %77, float %76, i64 1
  %79 = insertelement <2 x float> %71, float %57, i64 0
  %80 = fsub <2 x float> %78, %79
  %81 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %82 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %83 = insertelement <2 x float> %82, float %58, i64 1
  %84 = fneg <2 x float> %83
  %85 = insertelement <2 x float> %80, float %75, i64 0
  %86 = fmul <2 x float> %85, %84
  %87 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %72, <2 x float> %81, <2 x float> %86)
  %88 = extractelement <2 x float> %72, i64 0
  %89 = fneg float %88
  %90 = extractelement <2 x float> %80, i64 0
  %91 = fmul float %90, %89
  %92 = tail call float @llvm.fmuladd.f32(float %58, float %75, float %91)
  %93 = fmul <2 x float> %87, %87
  %94 = extractelement <2 x float> %93, i64 1
  %95 = extractelement <2 x float> %87, i64 0
  %96 = tail call float @llvm.fmuladd.f32(float %95, float %95, float %94)
  %97 = tail call float @llvm.fmuladd.f32(float %92, float %92, float %96)
  %98 = tail call float @llvm.sqrt.f32(float %97)
  %99 = fdiv float 1.000000e+00, %98
  %100 = insertelement <2 x float> poison, float %99, i64 0
  %101 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> zeroinitializer
  %102 = fmul <2 x float> %87, %101
  %103 = fmul float %92, %99
  %104 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %103, i64 0
  store <2 x float> %102, ptr %67, align 8, !tbaa.struct !162
  store <2 x float> %104, ptr %68, align 8, !tbaa.struct !164
  %105 = load <2 x float>, ptr %69, align 4, !tbaa !137
  %106 = fadd <2 x float> %87, %105
  store <2 x float> %106, ptr %69, align 4, !tbaa !137
  %107 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %54, i64 0, i32 5, i32 0, i64 2
  %108 = load float, ptr %107, align 4, !tbaa !137
  %109 = fadd float %92, %108
  store float %109, ptr %107, align 4, !tbaa !137
  %110 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %52, i64 0, i32 5
  %111 = load <2 x float>, ptr %110, align 4, !tbaa !137
  %112 = fadd <2 x float> %87, %111
  store <2 x float> %112, ptr %110, align 4, !tbaa !137
  %113 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %52, i64 0, i32 5, i32 0, i64 2
  %114 = load float, ptr %113, align 4, !tbaa !137
  %115 = fadd float %92, %114
  store float %115, ptr %113, align 4, !tbaa !137
  %116 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %62, i64 0, i32 5
  %117 = load <2 x float>, ptr %116, align 4, !tbaa !137
  %118 = fadd <2 x float> %87, %117
  store <2 x float> %118, ptr %116, align 4, !tbaa !137
  %119 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %62, i64 0, i32 5, i32 0, i64 2
  %120 = load float, ptr %119, align 4, !tbaa !137
  %121 = fadd float %92, %120
  store float %121, ptr %119, align 4, !tbaa !137
  %122 = add nuw nsw i64 %48, 1
  %123 = icmp eq i64 %122, %46
  br i1 %123, label %124, label %47

124:                                              ; preds = %47, %40
  %125 = load i32, ptr %2, align 4, !tbaa !88
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %127, label %153

127:                                              ; preds = %124
  %128 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %129 = load ptr, ptr %128, align 8, !tbaa !87
  %130 = zext i32 %125 to i64
  br label %131

131:                                              ; preds = %127, %150
  %132 = phi i64 [ 0, %127 ], [ %151, %150 ]
  %133 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %129, i64 %132, i32 5
  %134 = load <2 x float>, ptr %133, align 4, !tbaa !137
  %135 = fmul <2 x float> %134, %134
  %136 = extractelement <2 x float> %135, i64 1
  %137 = extractelement <2 x float> %134, i64 0
  %138 = tail call float @llvm.fmuladd.f32(float %137, float %137, float %136)
  %139 = getelementptr inbounds [4 x float], ptr %133, i64 0, i64 2
  %140 = load float, ptr %139, align 4, !tbaa !137
  %141 = tail call float @llvm.fmuladd.f32(float %140, float %140, float %138)
  %142 = tail call float @llvm.sqrt.f32(float %141)
  %143 = fcmp ogt float %142, 0x3E80000000000000
  br i1 %143, label %144, label %150

144:                                              ; preds = %131
  %145 = fdiv float 1.000000e+00, %142
  %146 = insertelement <2 x float> poison, float %145, i64 0
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> zeroinitializer
  %148 = fmul <2 x float> %134, %147
  store <2 x float> %148, ptr %133, align 4, !tbaa !137
  %149 = fmul float %140, %145
  store float %149, ptr %139, align 4, !tbaa !137
  br label %150

150:                                              ; preds = %144, %131
  %151 = add nuw nsw i64 %132, 1
  %152 = icmp eq i64 %151, %130
  br i1 %152, label %153, label %131

153:                                              ; preds = %150, %124
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody15updateConstantsEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !92
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %50

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !91
  %8 = zext i32 %3 to i64
  br label %9

9:                                                ; preds = %5, %9
  %10 = phi i64 [ 0, %5 ], [ %48, %9 ]
  %11 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %7, i64 %10, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !183
  %13 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %7, i64 %10, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !219
  %15 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 0, i32 1
  %16 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %7, i64 %10, i32 1, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !219
  %18 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 0, i32 1
  %19 = load float, ptr %15, align 4, !tbaa !137
  %20 = load float, ptr %18, align 4, !tbaa !137
  %21 = fsub float %19, %20
  %22 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 0, i32 1, i32 0, i64 1
  %23 = load float, ptr %22, align 4, !tbaa !137
  %24 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 0, i32 1, i32 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !137
  %26 = fsub float %23, %25
  %27 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 0, i32 1, i32 0, i64 2
  %28 = load float, ptr %27, align 4, !tbaa !137
  %29 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 0, i32 1, i32 0, i64 2
  %30 = load float, ptr %29, align 4, !tbaa !137
  %31 = fsub float %28, %30
  %32 = fmul float %26, %26
  %33 = tail call float @llvm.fmuladd.f32(float %21, float %21, float %32)
  %34 = tail call float @llvm.fmuladd.f32(float %31, float %31, float %33)
  %35 = tail call float @llvm.sqrt.f32(float %34)
  %36 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %7, i64 %10, i32 2
  store float %35, ptr %36, align 8, !tbaa !239
  %37 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 0, i32 6
  %38 = load float, ptr %37, align 8, !tbaa !174
  %39 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 0, i32 6
  %40 = load float, ptr %39, align 8, !tbaa !174
  %41 = fadd float %38, %40
  %42 = getelementptr inbounds %"struct.btSoftBody::Material", ptr %12, i64 0, i32 1
  %43 = load float, ptr %42, align 8, !tbaa !300
  %44 = fdiv float %41, %43
  %45 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %7, i64 %10, i32 5
  store float %44, ptr %45, align 8, !tbaa !301
  %46 = fmul float %35, %35
  %47 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %7, i64 %10, i32 6
  store float %46, ptr %47, align 4, !tbaa !302
  %48 = add nuw nsw i64 %10, 1
  %49 = icmp eq i64 %48, %8
  br i1 %49, label %50, label %9

50:                                               ; preds = %9, %1
  %51 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %52 = load i32, ptr %51, align 4, !tbaa !96
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %106

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %56 = load ptr, ptr %55, align 8, !tbaa !95
  %57 = zext i32 %52 to i64
  br label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ 0, %54 ], [ %104, %58 ]
  %60 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %56, i64 %59, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !219
  %62 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %61, i64 0, i32 1
  %63 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %56, i64 %59, i32 1, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !219
  %65 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %64, i64 0, i32 1
  %66 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %56, i64 %59, i32 1, i64 2
  %67 = load ptr, ptr %66, align 8, !tbaa !219
  %68 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1
  %69 = load float, ptr %65, align 4, !tbaa !137
  %70 = load float, ptr %62, align 4, !tbaa !137
  %71 = fsub float %69, %70
  %72 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %64, i64 0, i32 1, i32 0, i64 1
  %73 = load float, ptr %72, align 4, !tbaa !137
  %74 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %61, i64 0, i32 1, i32 0, i64 1
  %75 = load float, ptr %74, align 4, !tbaa !137
  %76 = fsub float %73, %75
  %77 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %64, i64 0, i32 1, i32 0, i64 2
  %78 = load float, ptr %77, align 4, !tbaa !137
  %79 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %61, i64 0, i32 1, i32 0, i64 2
  %80 = load float, ptr %79, align 4, !tbaa !137
  %81 = fsub float %78, %80
  %82 = load float, ptr %68, align 4, !tbaa !137
  %83 = fsub float %82, %70
  %84 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1, i32 0, i64 1
  %85 = load float, ptr %84, align 4, !tbaa !137
  %86 = fsub float %85, %75
  %87 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1, i32 0, i64 2
  %88 = load float, ptr %87, align 4, !tbaa !137
  %89 = fsub float %88, %80
  %90 = fneg float %81
  %91 = fmul float %86, %90
  %92 = tail call float @llvm.fmuladd.f32(float %76, float %89, float %91)
  %93 = fneg float %71
  %94 = fmul float %89, %93
  %95 = tail call float @llvm.fmuladd.f32(float %81, float %83, float %94)
  %96 = fneg float %76
  %97 = fmul float %83, %96
  %98 = tail call float @llvm.fmuladd.f32(float %71, float %86, float %97)
  %99 = fmul float %95, %95
  %100 = tail call float @llvm.fmuladd.f32(float %92, float %92, float %99)
  %101 = tail call float @llvm.fmuladd.f32(float %98, float %98, float %100)
  %102 = tail call float @llvm.sqrt.f32(float %101)
  %103 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %56, i64 %59, i32 3
  store float %102, ptr %103, align 8, !tbaa !241
  %104 = add nuw nsw i64 %59, 1
  %105 = icmp eq i64 %104, %57
  br i1 %105, label %106, label %58

106:                                              ; preds = %58, %50
  %107 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %108 = load i32, ptr %107, align 4, !tbaa !88
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %147

110:                                              ; preds = %106
  %111 = zext i32 %108 to i64
  %112 = shl nuw nsw i64 %111, 2
  %113 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %112, i32 noundef 16)
  tail call void @llvm.memset.p0.i64(ptr align 4 %113, i8 0, i64 %112, i1 false), !tbaa !140
  %114 = load i32, ptr %107, align 4, !tbaa !88
  %115 = icmp sgt i32 %114, 0
  br i1 %115, label %116, label %147

116:                                              ; preds = %110
  %117 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %118 = load ptr, ptr %117, align 8, !tbaa !87
  %119 = zext i32 %114 to i64
  %120 = and i64 %119, 3
  %121 = icmp ult i32 %114, 4
  br i1 %121, label %137, label %122

122:                                              ; preds = %116
  %123 = and i64 %119, 4294967292
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ 0, %122 ], [ %134, %124 ]
  %126 = phi i64 [ 0, %122 ], [ %135, %124 ]
  %127 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %118, i64 %125, i32 7
  store float 0.000000e+00, ptr %127, align 4, !tbaa !303
  %128 = or i64 %125, 1
  %129 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %118, i64 %128, i32 7
  store float 0.000000e+00, ptr %129, align 4, !tbaa !303
  %130 = or i64 %125, 2
  %131 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %118, i64 %130, i32 7
  store float 0.000000e+00, ptr %131, align 4, !tbaa !303
  %132 = or i64 %125, 3
  %133 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %118, i64 %132, i32 7
  store float 0.000000e+00, ptr %133, align 4, !tbaa !303
  %134 = add nuw nsw i64 %125, 4
  %135 = add i64 %126, 4
  %136 = icmp eq i64 %135, %123
  br i1 %136, label %137, label %124

137:                                              ; preds = %124, %116
  %138 = phi i64 [ 0, %116 ], [ %134, %124 ]
  %139 = icmp eq i64 %120, 0
  br i1 %139, label %147, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %144, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %145, %140 ], [ 0, %137 ]
  %143 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %118, i64 %141, i32 7
  store float 0.000000e+00, ptr %143, align 4, !tbaa !303
  %144 = add nuw nsw i64 %141, 1
  %145 = add i64 %142, 1
  %146 = icmp eq i64 %145, %120
  br i1 %146, label %147, label %140, !llvm.loop !304

147:                                              ; preds = %137, %140, %106, %110
  %148 = phi ptr [ %113, %110 ], [ null, %106 ], [ %113, %140 ], [ %113, %137 ]
  %149 = phi i32 [ %114, %110 ], [ %108, %106 ], [ %114, %140 ], [ %114, %137 ]
  %150 = load i32, ptr %51, align 4, !tbaa !96
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %152, label %207

152:                                              ; preds = %147
  %153 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %154 = load ptr, ptr %153, align 8, !tbaa !95
  %155 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %156 = load ptr, ptr %155, align 8, !tbaa !87
  %157 = ptrtoint ptr %156 to i64
  %158 = zext i32 %150 to i64
  br label %159

159:                                              ; preds = %152, %159
  %160 = phi i64 [ 0, %152 ], [ %203, %159 ]
  %161 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %154, i64 %160, i32 3
  %162 = load float, ptr %161, align 8, !tbaa !241
  %163 = tail call float @llvm.fabs.f32(float %162)
  %164 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %154, i64 %160, i32 1, i64 0
  %165 = load ptr, ptr %164, align 8, !tbaa !219
  %166 = ptrtoint ptr %165 to i64
  %167 = sub i64 %166, %157
  %168 = sdiv exact i64 %167, 120
  %169 = shl i64 %168, 32
  %170 = ashr exact i64 %169, 32
  %171 = getelementptr inbounds i32, ptr %148, i64 %170
  %172 = load i32, ptr %171, align 4, !tbaa !140
  %173 = add nsw i32 %172, 1
  store i32 %173, ptr %171, align 4, !tbaa !140
  %174 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %165, i64 0, i32 7
  %175 = load float, ptr %174, align 4, !tbaa !303
  %176 = fadd float %175, %163
  store float %176, ptr %174, align 4, !tbaa !303
  %177 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %154, i64 %160, i32 1, i64 1
  %178 = load ptr, ptr %177, align 8, !tbaa !219
  %179 = ptrtoint ptr %178 to i64
  %180 = sub i64 %179, %157
  %181 = sdiv exact i64 %180, 120
  %182 = shl i64 %181, 32
  %183 = ashr exact i64 %182, 32
  %184 = getelementptr inbounds i32, ptr %148, i64 %183
  %185 = load i32, ptr %184, align 4, !tbaa !140
  %186 = add nsw i32 %185, 1
  store i32 %186, ptr %184, align 4, !tbaa !140
  %187 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %178, i64 0, i32 7
  %188 = load float, ptr %187, align 4, !tbaa !303
  %189 = fadd float %188, %163
  store float %189, ptr %187, align 4, !tbaa !303
  %190 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %154, i64 %160, i32 1, i64 2
  %191 = load ptr, ptr %190, align 8, !tbaa !219
  %192 = ptrtoint ptr %191 to i64
  %193 = sub i64 %192, %157
  %194 = sdiv exact i64 %193, 120
  %195 = shl i64 %194, 32
  %196 = ashr exact i64 %195, 32
  %197 = getelementptr inbounds i32, ptr %148, i64 %196
  %198 = load i32, ptr %197, align 4, !tbaa !140
  %199 = add nsw i32 %198, 1
  store i32 %199, ptr %197, align 4, !tbaa !140
  %200 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %191, i64 0, i32 7
  %201 = load float, ptr %200, align 4, !tbaa !303
  %202 = fadd float %201, %163
  store float %202, ptr %200, align 4, !tbaa !303
  %203 = add nuw nsw i64 %160, 1
  %204 = icmp eq i64 %203, %158
  br i1 %204, label %205, label %159

205:                                              ; preds = %159
  %206 = load i32, ptr %107, align 4, !tbaa !88
  br label %207

207:                                              ; preds = %205, %147
  %208 = phi i32 [ %206, %205 ], [ %149, %147 ]
  %209 = icmp sgt i32 %208, 0
  br i1 %209, label %210, label %229

210:                                              ; preds = %207
  %211 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %212 = load ptr, ptr %211, align 8
  %213 = zext i32 %208 to i64
  br label %214

214:                                              ; preds = %210, %226
  %215 = phi i64 [ 0, %210 ], [ %227, %226 ]
  %216 = getelementptr inbounds i32, ptr %148, i64 %215
  %217 = load i32, ptr %216, align 4, !tbaa !140
  %218 = icmp sgt i32 %217, 0
  br i1 %218, label %219, label %224

219:                                              ; preds = %214
  %220 = sitofp i32 %217 to float
  %221 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %212, i64 %215, i32 7
  %222 = load float, ptr %221, align 4, !tbaa !303
  %223 = fdiv float %222, %220
  store float %223, ptr %221, align 4, !tbaa !303
  br label %226

224:                                              ; preds = %214
  %225 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %212, i64 %215, i32 7
  store float 0.000000e+00, ptr %225, align 4, !tbaa !303
  br label %226

226:                                              ; preds = %219, %224
  %227 = add nuw nsw i64 %215, 1
  %228 = icmp eq i64 %227, %213
  br i1 %228, label %231, label %214

229:                                              ; preds = %207
  %230 = icmp eq ptr %148, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %226, %229
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %148)
  br label %232

232:                                              ; preds = %229, %231
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody9translateERK9btVector3(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #4 align 2 {
  %3 = alloca %class.btTransform, align 4
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #38
  store float 1.000000e+00, ptr %3, align 4, !tbaa !137
  %4 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %5 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %5, align 4, !tbaa !137
  %6 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 2
  %7 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %7, align 4, !tbaa !137
  %8 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 3
  store i32 0, ptr %8, align 4
  %9 = getelementptr inbounds %class.btTransform, ptr %3, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %9, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  call void @_ZN10btSoftBody9transformERK11btTransform(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(64) %3)
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6rotateERK12btQuaternion(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #4 align 2 {
  %3 = alloca %class.btTransform, align 4
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #38
  %4 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %5 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 1
  %6 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 2
  %7 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 2
  %8 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 3
  %9 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %9, i8 0, i64 16, i1 false)
  %10 = load float, ptr %1, align 4, !tbaa !137
  %11 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %12 = load float, ptr %11, align 4, !tbaa !137
  %13 = fmul float %12, %12
  %14 = tail call float @llvm.fmuladd.f32(float %10, float %10, float %13)
  %15 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %16 = load float, ptr %15, align 4, !tbaa !137
  %17 = tail call float @llvm.fmuladd.f32(float %16, float %16, float %14)
  %18 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 3
  %19 = load float, ptr %18, align 4, !tbaa !137
  %20 = tail call float @llvm.fmuladd.f32(float %19, float %19, float %17)
  %21 = fdiv float 2.000000e+00, %20
  %22 = fmul float %10, %21
  %23 = fmul float %12, %21
  %24 = fmul float %16, %21
  %25 = fmul float %19, %22
  %26 = fmul float %19, %23
  %27 = fmul float %19, %24
  %28 = fmul float %10, %22
  %29 = fmul float %10, %23
  %30 = fmul float %10, %24
  %31 = fmul float %12, %23
  %32 = fmul float %12, %24
  %33 = fmul float %16, %24
  %34 = fadd float %31, %33
  %35 = fsub float 1.000000e+00, %34
  %36 = fsub float %29, %27
  %37 = fadd float %30, %26
  %38 = fadd float %29, %27
  %39 = fadd float %28, %33
  %40 = fsub float 1.000000e+00, %39
  %41 = fsub float %32, %25
  %42 = fsub float %30, %26
  %43 = fadd float %32, %25
  %44 = fadd float %28, %31
  %45 = fsub float 1.000000e+00, %44
  store float %35, ptr %3, align 4, !tbaa !137
  store float %36, ptr %4, align 4, !tbaa !137
  %46 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  store float %37, ptr %46, align 4, !tbaa !137
  %47 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 3
  store float 0.000000e+00, ptr %47, align 4, !tbaa !137
  %48 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1
  store float %38, ptr %48, align 4, !tbaa !137
  store float %40, ptr %5, align 4, !tbaa !137
  store float %41, ptr %6, align 4, !tbaa !137
  %49 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %49, align 4, !tbaa !137
  %50 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2
  store float %42, ptr %50, align 4, !tbaa !137
  %51 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 1
  store float %43, ptr %51, align 4, !tbaa !137
  store float %45, ptr %7, align 4, !tbaa !137
  store float 0.000000e+00, ptr %8, align 4, !tbaa !137
  call void @_ZN10btSoftBody9transformERK11btTransform(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(64) %3)
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody5scaleERK9btVector3(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.btDbvtAabbMm, align 8
  %4 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %5 = load ptr, ptr %4, align 8, !tbaa !157
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = getelementptr inbounds ptr, ptr %6, i64 11
  %8 = load ptr, ptr %7, align 8
  %9 = tail call noundef float %8(ptr noundef nonnull align 8 dereferenceable(24) %5)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #38
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %11 = load i32, ptr %10, align 4, !tbaa !88
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %15 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %16 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %17 = getelementptr inbounds i8, ptr %3, i64 8
  %18 = getelementptr inbounds i8, ptr %3, i64 16
  %19 = getelementptr inbounds i8, ptr %3, i64 24
  %20 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %21 = zext i32 %11 to i64
  %22 = insertelement <2 x float> poison, float %9, i64 0
  %23 = shufflevector <2 x float> %22, <2 x float> poison, <2 x i32> zeroinitializer
  br label %69

24:                                               ; preds = %69, %2
  call void @_ZN10btSoftBody13updateNormalsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %25 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %26 = load ptr, ptr %25, align 8, !tbaa !161
  %27 = icmp eq ptr %26, null
  br i1 %27, label %66, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %26, i64 0, i32 1
  %30 = load ptr, ptr %4, align 8, !tbaa !157
  %31 = load ptr, ptr %30, align 8, !tbaa !5
  %32 = getelementptr inbounds ptr, ptr %31, i64 11
  %33 = load ptr, ptr %32, align 8
  %34 = call noundef float %33(ptr noundef nonnull align 8 dereferenceable(24) %30)
  %35 = load <2 x float>, ptr %26, align 4, !tbaa !137
  %36 = insertelement <2 x float> poison, float %34, i64 0
  %37 = shufflevector <2 x float> %36, <2 x float> poison, <2 x i32> zeroinitializer
  %38 = fsub <2 x float> %35, %37
  %39 = getelementptr inbounds [4 x float], ptr %26, i64 0, i64 2
  %40 = load float, ptr %39, align 4, !tbaa !137
  %41 = fsub float %40, %34
  %42 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %41, i64 0
  %43 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  store <2 x float> %38, ptr %43, align 4, !tbaa.struct !162
  %44 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 0, i32 0, i64 2
  store <2 x float> %42, ptr %44, align 4, !tbaa.struct !164
  %45 = load <2 x float>, ptr %29, align 4, !tbaa !137
  %46 = fadd <2 x float> %37, %45
  %47 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %26, i64 0, i32 1, i32 0, i64 2
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fadd float %34, %48
  %50 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %49, i64 0
  %51 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1
  store <2 x float> %46, ptr %51, align 4, !tbaa.struct !162
  %52 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1, i32 0, i64 2
  store <2 x float> %50, ptr %52, align 4, !tbaa.struct !164
  %53 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 8
  %54 = load ptr, ptr %53, align 8, !tbaa !165
  %55 = icmp eq ptr %54, null
  br i1 %55, label %68, label %56

56:                                               ; preds = %28
  %57 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  %58 = load ptr, ptr %57, align 8, !tbaa !42
  %59 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %58, i64 0, i32 4
  %60 = load ptr, ptr %59, align 8, !tbaa !166
  %61 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %58, i64 0, i32 5
  %62 = load ptr, ptr %61, align 8, !tbaa !171
  %63 = load ptr, ptr %60, align 8, !tbaa !5
  %64 = getelementptr inbounds ptr, ptr %63, i64 4
  %65 = load ptr, ptr %64, align 8
  call void %65(ptr noundef nonnull align 8 dereferenceable(8) %60, ptr noundef nonnull %54, ptr noundef nonnull align 4 dereferenceable(16) %43, ptr noundef nonnull align 4 dereferenceable(16) %51, ptr noundef %62)
  br label %68

66:                                               ; preds = %24
  %67 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %67, i8 0, i64 32, i1 false)
  br label %68

68:                                               ; preds = %28, %56, %66
  call void @_ZN10btSoftBody15updateConstantsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #38
  ret void

69:                                               ; preds = %13, %69
  %70 = phi i64 [ 0, %13 ], [ %106, %69 ]
  %71 = load ptr, ptr %14, align 8, !tbaa !87
  %72 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %71, i64 %70, i32 1
  %73 = load float, ptr %1, align 4, !tbaa !137
  %74 = load float, ptr %72, align 4, !tbaa !137
  %75 = getelementptr inbounds [4 x float], ptr %72, i64 0, i64 1
  %76 = load float, ptr %75, align 4, !tbaa !137
  %77 = getelementptr inbounds [4 x float], ptr %72, i64 0, i64 2
  %78 = load float, ptr %77, align 4, !tbaa !137
  %79 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %71, i64 %70, i32 2
  %80 = load float, ptr %79, align 4, !tbaa !137
  %81 = getelementptr inbounds [4 x float], ptr %79, i64 0, i64 1
  %82 = load float, ptr %81, align 4, !tbaa !137
  %83 = getelementptr inbounds [4 x float], ptr %79, i64 0, i64 2
  %84 = load float, ptr %83, align 4, !tbaa !137
  %85 = fmul float %73, %74
  store float %85, ptr %72, align 4, !tbaa !137
  %86 = load float, ptr %15, align 4, !tbaa !137
  %87 = fmul float %86, %76
  store float %87, ptr %75, align 4, !tbaa !137
  %88 = load float, ptr %16, align 4, !tbaa !137
  %89 = fmul float %88, %78
  store float %89, ptr %77, align 4, !tbaa !137
  %90 = load float, ptr %1, align 4, !tbaa !137
  %91 = fmul float %90, %80
  store float %91, ptr %79, align 4, !tbaa !137
  %92 = load float, ptr %15, align 4, !tbaa !137
  %93 = fmul float %92, %82
  store float %93, ptr %81, align 4, !tbaa !137
  %94 = load float, ptr %16, align 4, !tbaa !137
  %95 = fmul float %94, %84
  store float %95, ptr %83, align 4, !tbaa !137
  %96 = insertelement <2 x float> poison, float %85, i64 0
  %97 = insertelement <2 x float> %96, float %87, i64 1
  %98 = fsub <2 x float> %97, %23
  %99 = fsub float %89, %9
  %100 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %99, i64 0
  %101 = fadd <2 x float> %23, %97
  %102 = fadd float %9, %89
  %103 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %102, i64 0
  store <2 x float> %98, ptr %3, align 8, !tbaa.struct !297
  store <2 x float> %100, ptr %17, align 8, !tbaa.struct !298
  store <2 x float> %101, ptr %18, align 8, !tbaa.struct !162
  store <2 x float> %103, ptr %19, align 8, !tbaa.struct !164
  %104 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %71, i64 %70, i32 8
  %105 = load ptr, ptr %104, align 8, !tbaa !182
  call void @_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm(ptr noundef nonnull align 8 dereferenceable(64) %20, ptr noundef %105, ptr noundef nonnull align 4 dereferenceable(32) %3)
  %106 = add nuw nsw i64 %70, 1
  %107 = icmp eq i64 %106, %21
  br i1 %107, label %24, label %69
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody7setPoseEbb(ptr noundef nonnull align 8 dereferenceable(1496) %0, i1 noundef zeroext %1, i1 noundef zeroext %2) local_unnamed_addr #0 align 2 {
  %4 = zext i1 %1 to i8
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5
  store i8 %4, ptr %6, align 8, !tbaa !142
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 1
  store i8 %5, ptr %7, align 1, !tbaa !143
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %9 = load i32, ptr %8, align 4, !tbaa !88
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %51

11:                                               ; preds = %3
  %12 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !87
  %14 = zext i32 %9 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i32 %9, 1
  br i1 %16, label %39, label %17

17:                                               ; preds = %11
  %18 = and i64 %14, 4294967294
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %36, %19 ]
  %21 = phi float [ 0.000000e+00, %17 ], [ %35, %19 ]
  %22 = phi i64 [ 0, %17 ], [ %37, %19 ]
  %23 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %13, i64 %20, i32 6
  %24 = load float, ptr %23, align 8, !tbaa !174
  %25 = fcmp ogt float %24, 0.000000e+00
  %26 = fdiv float 1.000000e+00, %24
  %27 = select i1 %25, float %26, float 0.000000e+00
  %28 = fadd float %21, %27
  %29 = or i64 %20, 1
  %30 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %13, i64 %29, i32 6
  %31 = load float, ptr %30, align 8, !tbaa !174
  %32 = fcmp ogt float %31, 0.000000e+00
  %33 = fdiv float 1.000000e+00, %31
  %34 = select i1 %32, float %33, float 0.000000e+00
  %35 = fadd float %28, %34
  %36 = add nuw nsw i64 %20, 2
  %37 = add i64 %22, 2
  %38 = icmp eq i64 %37, %18
  br i1 %38, label %39, label %19

39:                                               ; preds = %19, %11
  %40 = phi float [ undef, %11 ], [ %35, %19 ]
  %41 = phi i64 [ 0, %11 ], [ %36, %19 ]
  %42 = phi float [ 0.000000e+00, %11 ], [ %35, %19 ]
  %43 = icmp eq i64 %15, 0
  br i1 %43, label %51, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %13, i64 %41, i32 6
  %46 = load float, ptr %45, align 8, !tbaa !174
  %47 = fcmp ogt float %46, 0.000000e+00
  %48 = fdiv float 1.000000e+00, %46
  %49 = select i1 %47, float %48, float 0.000000e+00
  %50 = fadd float %42, %49
  br label %51

51:                                               ; preds = %44, %39, %3
  %52 = phi float [ 0.000000e+00, %3 ], [ %40, %39 ], [ %50, %44 ]
  %53 = sitofp i32 %9 to float
  %54 = fmul float %52, %53
  %55 = fmul float %54, 1.000000e+03
  %56 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 2
  %57 = load i32, ptr %56, align 4, !tbaa !40
  %58 = icmp slt i32 %57, %9
  br i1 %58, label %59, label %157

59:                                               ; preds = %51
  %60 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 3
  %61 = load i32, ptr %60, align 8, !tbaa !41
  %62 = icmp slt i32 %61, %9
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %65 = load ptr, ptr %64, align 8, !tbaa !39
  br label %148

66:                                               ; preds = %59
  %67 = icmp eq i32 %9, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %66
  %69 = sext i32 %9 to i64
  %70 = shl nsw i64 %69, 2
  %71 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %70, i32 noundef 16)
  %72 = load i32, ptr %56, align 4, !tbaa !40
  br label %73

73:                                               ; preds = %68, %66
  %74 = phi i32 [ %72, %68 ], [ %57, %66 ]
  %75 = phi ptr [ %71, %68 ], [ null, %66 ]
  %76 = icmp sgt i32 %74, 0
  %77 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %78 = load ptr, ptr %77, align 8, !tbaa !39
  br i1 %76, label %79, label %138

79:                                               ; preds = %73
  %80 = ptrtoint ptr %78 to i64
  %81 = ptrtoint ptr %75 to i64
  %82 = zext i32 %74 to i64
  %83 = icmp ult i32 %74, 8
  %84 = sub i64 %81, %80
  %85 = icmp ult i64 %84, 32
  %86 = select i1 %83, i1 true, i1 %85
  br i1 %86, label %101, label %87

87:                                               ; preds = %79
  %88 = and i64 %82, 4294967288
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi i64 [ 0, %87 ], [ %97, %89 ]
  %91 = getelementptr inbounds float, ptr %75, i64 %90
  %92 = getelementptr inbounds float, ptr %78, i64 %90
  %93 = load <4 x float>, ptr %92, align 4, !tbaa !137
  %94 = getelementptr inbounds float, ptr %92, i64 4
  %95 = load <4 x float>, ptr %94, align 4, !tbaa !137
  store <4 x float> %93, ptr %91, align 4, !tbaa !137
  %96 = getelementptr inbounds float, ptr %91, i64 4
  store <4 x float> %95, ptr %96, align 4, !tbaa !137
  %97 = add nuw i64 %90, 8
  %98 = icmp eq i64 %97, %88
  br i1 %98, label %99, label %89, !llvm.loop !305

99:                                               ; preds = %89
  %100 = icmp eq i64 %88, %82
  br i1 %100, label %142, label %101

101:                                              ; preds = %79, %99
  %102 = phi i64 [ 0, %79 ], [ %88, %99 ]
  %103 = xor i64 %102, -1
  %104 = add nsw i64 %103, %82
  %105 = and i64 %82, 3
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %116, label %107

107:                                              ; preds = %101, %107
  %108 = phi i64 [ %113, %107 ], [ %102, %101 ]
  %109 = phi i64 [ %114, %107 ], [ 0, %101 ]
  %110 = getelementptr inbounds float, ptr %75, i64 %108
  %111 = getelementptr inbounds float, ptr %78, i64 %108
  %112 = load float, ptr %111, align 4, !tbaa !137
  store float %112, ptr %110, align 4, !tbaa !137
  %113 = add nuw nsw i64 %108, 1
  %114 = add i64 %109, 1
  %115 = icmp eq i64 %114, %105
  br i1 %115, label %116, label %107, !llvm.loop !306

116:                                              ; preds = %107, %101
  %117 = phi i64 [ %102, %101 ], [ %113, %107 ]
  %118 = icmp ult i64 %104, 3
  br i1 %118, label %142, label %119

119:                                              ; preds = %116, %119
  %120 = phi i64 [ %136, %119 ], [ %117, %116 ]
  %121 = getelementptr inbounds float, ptr %75, i64 %120
  %122 = getelementptr inbounds float, ptr %78, i64 %120
  %123 = load float, ptr %122, align 4, !tbaa !137
  store float %123, ptr %121, align 4, !tbaa !137
  %124 = add nuw nsw i64 %120, 1
  %125 = getelementptr inbounds float, ptr %75, i64 %124
  %126 = getelementptr inbounds float, ptr %78, i64 %124
  %127 = load float, ptr %126, align 4, !tbaa !137
  store float %127, ptr %125, align 4, !tbaa !137
  %128 = add nuw nsw i64 %120, 2
  %129 = getelementptr inbounds float, ptr %75, i64 %128
  %130 = getelementptr inbounds float, ptr %78, i64 %128
  %131 = load float, ptr %130, align 4, !tbaa !137
  store float %131, ptr %129, align 4, !tbaa !137
  %132 = add nuw nsw i64 %120, 3
  %133 = getelementptr inbounds float, ptr %75, i64 %132
  %134 = getelementptr inbounds float, ptr %78, i64 %132
  %135 = load float, ptr %134, align 4, !tbaa !137
  store float %135, ptr %133, align 4, !tbaa !137
  %136 = add nuw nsw i64 %120, 4
  %137 = icmp eq i64 %136, %82
  br i1 %137, label %142, label %119, !llvm.loop !307

138:                                              ; preds = %73
  %139 = icmp eq ptr %78, null
  br i1 %139, label %140, label %142

140:                                              ; preds = %138
  %141 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 6
  store i8 1, ptr %141, align 8, !tbaa !36
  store ptr %75, ptr %77, align 8, !tbaa !39
  store i32 %9, ptr %60, align 8, !tbaa !41
  br label %148

142:                                              ; preds = %116, %119, %99, %138
  %143 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 6
  %144 = load i8, ptr %143, align 8, !tbaa !36, !range !191, !noundef !192
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %147, label %146

146:                                              ; preds = %142
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %78)
  br label %147

147:                                              ; preds = %146, %142
  store i8 1, ptr %143, align 8, !tbaa !36
  store ptr %75, ptr %77, align 8, !tbaa !39
  store i32 %9, ptr %60, align 8, !tbaa !41
  br label %148

148:                                              ; preds = %63, %147, %140
  %149 = phi ptr [ %65, %63 ], [ %75, %147 ], [ %75, %140 ]
  %150 = sext i32 %57 to i64
  %151 = sext i32 %9 to i64
  %152 = shl nsw i64 %150, 2
  %153 = getelementptr i8, ptr %149, i64 %152
  %154 = sub nsw i64 %151, %150
  %155 = shl nsw i64 %154, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %153, i8 0, i64 %155, i1 false), !tbaa !137
  %156 = load i32, ptr %8, align 4, !tbaa !88
  br label %157

157:                                              ; preds = %148, %51
  %158 = phi i32 [ %156, %148 ], [ %9, %51 ]
  store i32 %9, ptr %56, align 4, !tbaa !40
  %159 = icmp slt i32 %158, 1
  br i1 %159, label %286, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %162 = load ptr, ptr %161, align 8, !tbaa !87
  %163 = zext i32 %158 to i64
  %164 = and i64 %163, 1
  %165 = icmp eq i32 %158, 1
  br i1 %165, label %168, label %166

166:                                              ; preds = %160
  %167 = and i64 %163, 4294967294
  br label %249

168:                                              ; preds = %249, %160
  %169 = phi float [ undef, %160 ], [ %263, %249 ]
  %170 = phi i64 [ 0, %160 ], [ %264, %249 ]
  %171 = phi float [ %52, %160 ], [ %263, %249 ]
  %172 = icmp eq i64 %164, 0
  br i1 %172, label %179, label %173

173:                                              ; preds = %168
  %174 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %162, i64 %170, i32 6
  %175 = load float, ptr %174, align 8, !tbaa !174
  %176 = fcmp ugt float %175, 0.000000e+00
  %177 = select i1 %176, float -0.000000e+00, float %55
  %178 = fadd float %171, %177
  br label %179

179:                                              ; preds = %168, %173
  %180 = phi float [ %169, %168 ], [ %178, %173 ]
  br i1 %159, label %286, label %181

181:                                              ; preds = %179
  %182 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %183 = load ptr, ptr %182, align 8, !tbaa !87
  %184 = fdiv float %55, %180
  %185 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %186 = load ptr, ptr %185, align 8, !tbaa !39
  %187 = zext i32 %158 to i64
  %188 = icmp ult i32 %158, 4
  br i1 %188, label %231, label %189

189:                                              ; preds = %181
  %190 = shl nuw nsw i64 %163, 2
  %191 = getelementptr i8, ptr %186, i64 %190
  %192 = getelementptr i8, ptr %183, i64 96
  %193 = mul nuw nsw i64 %163, 120
  %194 = add nsw i64 %193, -20
  %195 = getelementptr i8, ptr %183, i64 %194
  %196 = icmp ult ptr %186, %195
  %197 = icmp ult ptr %192, %191
  %198 = and i1 %196, %197
  br i1 %198, label %231, label %199

199:                                              ; preds = %189
  %200 = and i64 %163, 4294967292
  %201 = insertelement <4 x float> poison, float %180, i64 0
  %202 = shufflevector <4 x float> %201, <4 x float> poison, <4 x i32> zeroinitializer
  %203 = insertelement <4 x float> poison, float %184, i64 0
  %204 = shufflevector <4 x float> %203, <4 x float> poison, <4 x i32> zeroinitializer
  br label %205

205:                                              ; preds = %205, %199
  %206 = phi i64 [ 0, %199 ], [ %227, %205 ]
  %207 = or i64 %206, 1
  %208 = or i64 %206, 2
  %209 = or i64 %206, 3
  %210 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %206, i32 6
  %211 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %207, i32 6
  %212 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %208, i32 6
  %213 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %209, i32 6
  %214 = load float, ptr %210, align 8, !tbaa !174, !alias.scope !308
  %215 = load float, ptr %211, align 8, !tbaa !174, !alias.scope !308
  %216 = load float, ptr %212, align 8, !tbaa !174, !alias.scope !308
  %217 = load float, ptr %213, align 8, !tbaa !174, !alias.scope !308
  %218 = insertelement <4 x float> poison, float %214, i64 0
  %219 = insertelement <4 x float> %218, float %215, i64 1
  %220 = insertelement <4 x float> %219, float %216, i64 2
  %221 = insertelement <4 x float> %220, float %217, i64 3
  %222 = fcmp ogt <4 x float> %221, zeroinitializer
  %223 = fmul <4 x float> %202, %221
  %224 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %223
  %225 = select <4 x i1> %222, <4 x float> %224, <4 x float> %204
  %226 = getelementptr inbounds float, ptr %186, i64 %206
  store <4 x float> %225, ptr %226, align 4, !tbaa !137, !alias.scope !311, !noalias !308
  %227 = add nuw i64 %206, 4
  %228 = icmp eq i64 %227, %200
  br i1 %228, label %229, label %205, !llvm.loop !313

229:                                              ; preds = %205
  %230 = icmp eq i64 %200, %163
  br i1 %230, label %286, label %231

231:                                              ; preds = %189, %181, %229
  %232 = phi i64 [ 0, %189 ], [ 0, %181 ], [ %200, %229 ]
  %233 = xor i64 %232, -1
  %234 = and i64 %163, 1
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %245, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %232, i32 6
  %238 = load float, ptr %237, align 8, !tbaa !174
  %239 = fcmp ogt float %238, 0.000000e+00
  %240 = fmul float %180, %238
  %241 = fdiv float 1.000000e+00, %240
  %242 = select i1 %239, float %241, float %184
  %243 = getelementptr inbounds float, ptr %186, i64 %232
  store float %242, ptr %243, align 4, !tbaa !137
  %244 = or i64 %232, 1
  br label %245

245:                                              ; preds = %236, %231
  %246 = phi i64 [ %232, %231 ], [ %244, %236 ]
  %247 = sub nsw i64 0, %163
  %248 = icmp eq i64 %233, %247
  br i1 %248, label %286, label %267

249:                                              ; preds = %249, %166
  %250 = phi i64 [ 0, %166 ], [ %264, %249 ]
  %251 = phi float [ %52, %166 ], [ %263, %249 ]
  %252 = phi i64 [ 0, %166 ], [ %265, %249 ]
  %253 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %162, i64 %250, i32 6
  %254 = load float, ptr %253, align 8, !tbaa !174
  %255 = fcmp ugt float %254, 0.000000e+00
  %256 = select i1 %255, float -0.000000e+00, float %55
  %257 = fadd float %251, %256
  %258 = or i64 %250, 1
  %259 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %162, i64 %258, i32 6
  %260 = load float, ptr %259, align 8, !tbaa !174
  %261 = fcmp ugt float %260, 0.000000e+00
  %262 = select i1 %261, float -0.000000e+00, float %55
  %263 = fadd float %257, %262
  %264 = add nuw nsw i64 %250, 2
  %265 = add i64 %252, 2
  %266 = icmp eq i64 %265, %167
  br i1 %266, label %168, label %249

267:                                              ; preds = %245, %267
  %268 = phi i64 [ %284, %267 ], [ %246, %245 ]
  %269 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %268, i32 6
  %270 = load float, ptr %269, align 8, !tbaa !174
  %271 = fcmp ogt float %270, 0.000000e+00
  %272 = fmul float %180, %270
  %273 = fdiv float 1.000000e+00, %272
  %274 = select i1 %271, float %273, float %184
  %275 = getelementptr inbounds float, ptr %186, i64 %268
  store float %274, ptr %275, align 4, !tbaa !137
  %276 = add nuw nsw i64 %268, 1
  %277 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %183, i64 %276, i32 6
  %278 = load float, ptr %277, align 8, !tbaa !174
  %279 = fcmp ogt float %278, 0.000000e+00
  %280 = fmul float %180, %278
  %281 = fdiv float 1.000000e+00, %280
  %282 = select i1 %279, float %281, float %184
  %283 = getelementptr inbounds float, ptr %186, i64 %276
  store float %282, ptr %283, align 4, !tbaa !137
  %284 = add nuw nsw i64 %268, 2
  %285 = icmp eq i64 %284, %187
  br i1 %285, label %286, label %267, !llvm.loop !314

286:                                              ; preds = %245, %267, %229, %157, %179
  %287 = load i8, ptr %7, align 1, !tbaa !143, !range !191, !noundef !192
  %288 = icmp eq i8 %287, 0
  %289 = or i1 %288, %159
  br i1 %289, label %366, label %290

290:                                              ; preds = %286
  %291 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %292 = load ptr, ptr %291, align 8, !tbaa !87
  %293 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %294 = load ptr, ptr %293, align 8, !tbaa !39
  %295 = zext i32 %158 to i64
  %296 = and i64 %295, 1
  %297 = icmp eq i32 %158, 1
  br i1 %297, label %339, label %298

298:                                              ; preds = %290
  %299 = and i64 %295, 4294967294
  br label %300

300:                                              ; preds = %300, %298
  %301 = phi i64 [ 0, %298 ], [ %333, %300 ]
  %302 = phi <2 x float> [ zeroinitializer, %298 ], [ %332, %300 ]
  %303 = phi <2 x float> [ zeroinitializer, %298 ], [ %330, %300 ]
  %304 = phi i64 [ 0, %298 ], [ %334, %300 ]
  %305 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %292, i64 %301, i32 1
  %306 = getelementptr inbounds float, ptr %294, i64 %301
  %307 = load float, ptr %306, align 4, !tbaa !137
  %308 = getelementptr inbounds [4 x float], ptr %305, i64 0, i64 2
  %309 = load float, ptr %308, align 4, !tbaa !137
  %310 = fmul float %307, %309
  %311 = load <2 x float>, ptr %305, align 4, !tbaa !137
  %312 = insertelement <2 x float> poison, float %307, i64 0
  %313 = shufflevector <2 x float> %312, <2 x float> poison, <2 x i32> zeroinitializer
  %314 = fmul <2 x float> %313, %311
  %315 = fadd <2 x float> %303, %314
  %316 = extractelement <2 x float> %302, i64 0
  %317 = fadd float %316, %310
  %318 = insertelement <2 x float> %302, float %317, i64 0
  %319 = or i64 %301, 1
  %320 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %292, i64 %319, i32 1
  %321 = getelementptr inbounds float, ptr %294, i64 %319
  %322 = load float, ptr %321, align 4, !tbaa !137
  %323 = getelementptr inbounds [4 x float], ptr %320, i64 0, i64 2
  %324 = load float, ptr %323, align 4, !tbaa !137
  %325 = fmul float %322, %324
  %326 = load <2 x float>, ptr %320, align 4, !tbaa !137
  %327 = insertelement <2 x float> poison, float %322, i64 0
  %328 = shufflevector <2 x float> %327, <2 x float> poison, <2 x i32> zeroinitializer
  %329 = fmul <2 x float> %328, %326
  %330 = fadd <2 x float> %315, %329
  %331 = fadd float %317, %325
  %332 = insertelement <2 x float> %318, float %331, i64 0
  %333 = add nuw nsw i64 %301, 2
  %334 = add i64 %304, 2
  %335 = icmp eq i64 %334, %299
  br i1 %335, label %336, label %300

336:                                              ; preds = %300
  %337 = insertelement <2 x float> %302, float %317, i64 0
  %338 = insertelement <2 x float> %337, float %331, i64 0
  br label %339

339:                                              ; preds = %336, %290
  %340 = phi <2 x float> [ undef, %290 ], [ %337, %336 ]
  %341 = phi <2 x float> [ undef, %290 ], [ %330, %336 ]
  %342 = phi float [ undef, %290 ], [ %331, %336 ]
  %343 = phi i64 [ 0, %290 ], [ %333, %336 ]
  %344 = phi <2 x float> [ zeroinitializer, %290 ], [ %338, %336 ]
  %345 = phi <2 x float> [ zeroinitializer, %290 ], [ %330, %336 ]
  %346 = icmp eq i64 %296, 0
  br i1 %346, label %361, label %347

347:                                              ; preds = %339
  %348 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %292, i64 %343, i32 1
  %349 = getelementptr inbounds float, ptr %294, i64 %343
  %350 = load float, ptr %349, align 4, !tbaa !137
  %351 = getelementptr inbounds [4 x float], ptr %348, i64 0, i64 2
  %352 = load float, ptr %351, align 4, !tbaa !137
  %353 = fmul float %350, %352
  %354 = load <2 x float>, ptr %348, align 4, !tbaa !137
  %355 = insertelement <2 x float> poison, float %350, i64 0
  %356 = shufflevector <2 x float> %355, <2 x float> poison, <2 x i32> zeroinitializer
  %357 = fmul <2 x float> %356, %354
  %358 = fadd <2 x float> %345, %357
  %359 = extractelement <2 x float> %344, i64 0
  %360 = fadd float %359, %353
  br label %361

361:                                              ; preds = %339, %347
  %362 = phi <2 x float> [ %340, %339 ], [ %344, %347 ]
  %363 = phi <2 x float> [ %341, %339 ], [ %358, %347 ]
  %364 = phi float [ %342, %339 ], [ %360, %347 ]
  %365 = insertelement <2 x float> %362, float %364, i64 0
  br label %366

366:                                              ; preds = %286, %361
  %367 = phi <2 x float> [ zeroinitializer, %286 ], [ %363, %361 ]
  %368 = phi <2 x float> [ zeroinitializer, %286 ], [ %365, %361 ]
  %369 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 2
  %370 = load i32, ptr %369, align 4, !tbaa !34
  %371 = icmp slt i32 %370, %158
  br i1 %371, label %372, label %426

372:                                              ; preds = %366
  %373 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 3
  %374 = load i32, ptr %373, align 8, !tbaa !35
  %375 = icmp slt i32 %374, %158
  br i1 %375, label %376, label %424

376:                                              ; preds = %372
  %377 = icmp eq i32 %158, 0
  br i1 %377, label %383, label %378

378:                                              ; preds = %376
  %379 = sext i32 %158 to i64
  %380 = shl nsw i64 %379, 4
  %381 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %380, i32 noundef 16)
  %382 = load i32, ptr %369, align 4, !tbaa !34
  br label %383

383:                                              ; preds = %378, %376
  %384 = phi i32 [ %382, %378 ], [ %370, %376 ]
  %385 = phi ptr [ %381, %378 ], [ null, %376 ]
  %386 = icmp sgt i32 %384, 0
  br i1 %386, label %387, label %414

387:                                              ; preds = %383
  %388 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  %389 = zext i32 %384 to i64
  %390 = and i64 %389, 1
  %391 = icmp eq i32 %384, 1
  br i1 %391, label %407, label %392

392:                                              ; preds = %387
  %393 = and i64 %389, 4294967294
  br label %394

394:                                              ; preds = %394, %392
  %395 = phi i64 [ 0, %392 ], [ %404, %394 ]
  %396 = phi i64 [ 0, %392 ], [ %405, %394 ]
  %397 = getelementptr inbounds %class.btVector3, ptr %385, i64 %395
  %398 = load ptr, ptr %388, align 8, !tbaa !33
  %399 = getelementptr inbounds %class.btVector3, ptr %398, i64 %395
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %397, ptr noundef nonnull align 4 dereferenceable(16) %399, i64 16, i1 false), !tbaa.struct !162
  %400 = or i64 %395, 1
  %401 = getelementptr inbounds %class.btVector3, ptr %385, i64 %400
  %402 = load ptr, ptr %388, align 8, !tbaa !33
  %403 = getelementptr inbounds %class.btVector3, ptr %402, i64 %400
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %401, ptr noundef nonnull align 4 dereferenceable(16) %403, i64 16, i1 false), !tbaa.struct !162
  %404 = add nuw nsw i64 %395, 2
  %405 = add i64 %396, 2
  %406 = icmp eq i64 %405, %393
  br i1 %406, label %407, label %394

407:                                              ; preds = %394, %387
  %408 = phi i64 [ 0, %387 ], [ %404, %394 ]
  %409 = icmp eq i64 %390, 0
  br i1 %409, label %414, label %410

410:                                              ; preds = %407
  %411 = getelementptr inbounds %class.btVector3, ptr %385, i64 %408
  %412 = load ptr, ptr %388, align 8, !tbaa !33
  %413 = getelementptr inbounds %class.btVector3, ptr %412, i64 %408
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %411, ptr noundef nonnull align 4 dereferenceable(16) %413, i64 16, i1 false), !tbaa.struct !162
  br label %414

414:                                              ; preds = %410, %407, %383
  %415 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  %416 = load ptr, ptr %415, align 8, !tbaa !33
  %417 = icmp eq ptr %416, null
  %418 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 6
  %419 = load i8, ptr %418, align 8
  %420 = icmp eq i8 %419, 0
  %421 = select i1 %417, i1 true, i1 %420
  br i1 %421, label %423, label %422

422:                                              ; preds = %414
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %416)
  br label %423

423:                                              ; preds = %422, %414
  store i8 1, ptr %418, align 8, !tbaa !30
  store ptr %385, ptr %415, align 8, !tbaa !33
  store i32 %158, ptr %373, align 8, !tbaa !35
  br label %424

424:                                              ; preds = %372, %423
  %425 = load i32, ptr %8, align 4, !tbaa !88
  br label %426

426:                                              ; preds = %424, %366
  %427 = phi i32 [ %425, %424 ], [ %158, %366 ]
  store i32 %158, ptr %369, align 4, !tbaa !34
  %428 = icmp sgt i32 %427, 0
  br i1 %428, label %429, label %482

429:                                              ; preds = %426
  %430 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %431 = extractelement <2 x float> %368, i64 0
  %432 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  %433 = zext i32 %427 to i64
  %434 = and i64 %433, 1
  %435 = icmp eq i32 %427, 1
  br i1 %435, label %467, label %436

436:                                              ; preds = %429
  %437 = and i64 %433, 4294967294
  br label %438

438:                                              ; preds = %438, %436
  %439 = phi i64 [ 0, %436 ], [ %464, %438 ]
  %440 = phi i64 [ 0, %436 ], [ %465, %438 ]
  %441 = load ptr, ptr %430, align 8, !tbaa !87
  %442 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %441, i64 %439, i32 1
  %443 = load <2 x float>, ptr %442, align 4, !tbaa !137
  %444 = fsub <2 x float> %443, %367
  %445 = getelementptr inbounds [4 x float], ptr %442, i64 0, i64 2
  %446 = load float, ptr %445, align 4, !tbaa !137
  %447 = fsub float %446, %431
  %448 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %447, i64 0
  %449 = load ptr, ptr %432, align 8, !tbaa !33
  %450 = getelementptr inbounds %class.btVector3, ptr %449, i64 %439
  store <2 x float> %444, ptr %450, align 4, !tbaa.struct !162
  %451 = getelementptr inbounds i8, ptr %450, i64 8
  store <2 x float> %448, ptr %451, align 4, !tbaa.struct !164
  %452 = or i64 %439, 1
  %453 = load ptr, ptr %430, align 8, !tbaa !87
  %454 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %453, i64 %452, i32 1
  %455 = load <2 x float>, ptr %454, align 4, !tbaa !137
  %456 = fsub <2 x float> %455, %367
  %457 = getelementptr inbounds [4 x float], ptr %454, i64 0, i64 2
  %458 = load float, ptr %457, align 4, !tbaa !137
  %459 = fsub float %458, %431
  %460 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %459, i64 0
  %461 = load ptr, ptr %432, align 8, !tbaa !33
  %462 = getelementptr inbounds %class.btVector3, ptr %461, i64 %452
  store <2 x float> %456, ptr %462, align 4, !tbaa.struct !162
  %463 = getelementptr inbounds i8, ptr %462, i64 8
  store <2 x float> %460, ptr %463, align 4, !tbaa.struct !164
  %464 = add nuw nsw i64 %439, 2
  %465 = add i64 %440, 2
  %466 = icmp eq i64 %465, %437
  br i1 %466, label %467, label %438

467:                                              ; preds = %438, %429
  %468 = phi i64 [ 0, %429 ], [ %464, %438 ]
  %469 = icmp eq i64 %434, 0
  br i1 %469, label %482, label %470

470:                                              ; preds = %467
  %471 = load ptr, ptr %430, align 8, !tbaa !87
  %472 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %471, i64 %468, i32 1
  %473 = load <2 x float>, ptr %472, align 4, !tbaa !137
  %474 = fsub <2 x float> %473, %367
  %475 = getelementptr inbounds [4 x float], ptr %472, i64 0, i64 2
  %476 = load float, ptr %475, align 4, !tbaa !137
  %477 = fsub float %476, %431
  %478 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %477, i64 0
  %479 = load ptr, ptr %432, align 8, !tbaa !33
  %480 = getelementptr inbounds %class.btVector3, ptr %479, i64 %468
  store <2 x float> %474, ptr %480, align 4, !tbaa.struct !162
  %481 = getelementptr inbounds i8, ptr %480, i64 8
  store <2 x float> %478, ptr %481, align 4, !tbaa.struct !164
  br label %482

482:                                              ; preds = %470, %467, %426
  %483 = load i32, ptr %8, align 4
  %484 = icmp sgt i32 %483, 0
  %485 = select i1 %1, i1 %484, i1 false
  br i1 %485, label %486, label %556

486:                                              ; preds = %482
  %487 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %488 = load ptr, ptr %487, align 8, !tbaa !87
  %489 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %488, i64 0, i32 1
  %490 = load float, ptr %489, align 8, !tbaa.struct !162
  %491 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %488, i64 0, i32 1, i32 0, i64 1
  %492 = load float, ptr %491, align 4, !tbaa.struct !293
  %493 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %488, i64 0, i32 1, i32 0, i64 2
  %494 = load float, ptr %493, align 8, !tbaa.struct !164
  %495 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %496 = load i32, ptr %495, align 4, !tbaa !96
  %497 = icmp sgt i32 %496, 0
  br i1 %497, label %498, label %553

498:                                              ; preds = %486
  %499 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %500 = load ptr, ptr %499, align 8, !tbaa !95
  %501 = zext i32 %496 to i64
  br label %502

502:                                              ; preds = %502, %498
  %503 = phi i64 [ 0, %498 ], [ %551, %502 ]
  %504 = phi float [ 0.000000e+00, %498 ], [ %550, %502 ]
  %505 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %500, i64 %503, i32 1
  %506 = load ptr, ptr %505, align 8, !tbaa !219
  %507 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %506, i64 0, i32 1
  %508 = load float, ptr %507, align 4, !tbaa !137
  %509 = fsub float %508, %490
  %510 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %506, i64 0, i32 1, i32 0, i64 1
  %511 = load float, ptr %510, align 4, !tbaa !137
  %512 = fsub float %511, %492
  %513 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %506, i64 0, i32 1, i32 0, i64 2
  %514 = load float, ptr %513, align 4, !tbaa !137
  %515 = fsub float %514, %494
  %516 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %500, i64 %503, i32 1, i64 1
  %517 = load ptr, ptr %516, align 8, !tbaa !219
  %518 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %517, i64 0, i32 1
  %519 = load float, ptr %518, align 4, !tbaa !137
  %520 = fsub float %519, %490
  %521 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %517, i64 0, i32 1, i32 0, i64 1
  %522 = load float, ptr %521, align 4, !tbaa !137
  %523 = fsub float %522, %492
  %524 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %517, i64 0, i32 1, i32 0, i64 2
  %525 = load float, ptr %524, align 4, !tbaa !137
  %526 = fsub float %525, %494
  %527 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %500, i64 %503, i32 1, i64 2
  %528 = load ptr, ptr %527, align 8, !tbaa !219
  %529 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %528, i64 0, i32 1
  %530 = load float, ptr %529, align 4, !tbaa !137
  %531 = fsub float %530, %490
  %532 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %528, i64 0, i32 1, i32 0, i64 1
  %533 = load float, ptr %532, align 4, !tbaa !137
  %534 = fsub float %533, %492
  %535 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %528, i64 0, i32 1, i32 0, i64 2
  %536 = load float, ptr %535, align 4, !tbaa !137
  %537 = fsub float %536, %494
  %538 = fneg float %526
  %539 = fmul float %534, %538
  %540 = tail call float @llvm.fmuladd.f32(float %523, float %537, float %539)
  %541 = fneg float %520
  %542 = fmul float %537, %541
  %543 = tail call float @llvm.fmuladd.f32(float %526, float %531, float %542)
  %544 = fneg float %523
  %545 = fmul float %531, %544
  %546 = tail call float @llvm.fmuladd.f32(float %520, float %534, float %545)
  %547 = fmul float %512, %543
  %548 = tail call float @llvm.fmuladd.f32(float %509, float %540, float %547)
  %549 = tail call float @llvm.fmuladd.f32(float %515, float %546, float %548)
  %550 = fadd float %504, %549
  %551 = add nuw nsw i64 %503, 1
  %552 = icmp eq i64 %551, %501
  br i1 %552, label %553, label %502

553:                                              ; preds = %502, %486
  %554 = phi float [ 0.000000e+00, %486 ], [ %550, %502 ]
  %555 = fdiv float %554, 6.000000e+00
  br label %556

556:                                              ; preds = %553, %482
  %557 = phi float [ 0.000000e+00, %482 ], [ %555, %553 ]
  %558 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 2
  store float %557, ptr %558, align 4, !tbaa !144
  %559 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 5
  store <2 x float> %367, ptr %559, align 8, !tbaa.struct !162
  %560 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 5, i32 0, i64 2
  store <2 x float> %368, ptr %560, align 8, !tbaa.struct !164
  %561 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6
  store float 1.000000e+00, ptr %561, align 8, !tbaa !137
  %562 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 0, i32 0, i64 1
  %563 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %562, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %563, align 4, !tbaa !137
  %564 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1, i32 0, i64 2
  %565 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 2, i32 0, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %564, i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr %565, align 8, !tbaa !137
  %566 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7
  store float 1.000000e+00, ptr %566, align 8, !tbaa !137
  %567 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 0, i32 0, i64 1
  %568 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 1, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %567, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %568, align 4, !tbaa !137
  %569 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 1, i32 0, i64 2
  %570 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 2, i32 0, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %569, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %570, align 8, !tbaa !137
  %571 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 2, i32 0, i64 3
  %572 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8
  %573 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 2
  %574 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 2, i32 0, i64 1
  %575 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(52) %571, i8 0, i64 52, i1 false)
  br i1 %484, label %591, label %576

576:                                              ; preds = %556
  %577 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 0, i32 0, i64 1
  %578 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1, i32 0, i64 1
  %579 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1, i32 0, i64 2
  %580 = load float, ptr %575, align 8, !tbaa !137, !noalias !315
  %581 = load float, ptr %572, align 8, !tbaa !137, !noalias !315
  %582 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 0, i32 0, i64 2
  %583 = load float, ptr %578, align 4, !tbaa !137, !noalias !315
  %584 = load float, ptr %579, align 8, !tbaa !137, !noalias !315
  %585 = load <4 x float>, ptr %577, align 4
  %586 = shufflevector <4 x float> %585, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %587 = load <4 x float>, ptr %582, align 8
  %588 = shufflevector <4 x float> %587, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %589 = insertelement <2 x float> %588, float %583, i64 1
  %590 = insertelement <2 x float> %586, float %584, i64 1
  br label %653

591:                                              ; preds = %556
  %592 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  %593 = load ptr, ptr %592, align 8, !tbaa !33
  %594 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %595 = load ptr, ptr %594, align 8, !tbaa !39
  %596 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 0, i32 0, i64 2
  %597 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1, i32 0, i64 2
  %598 = load <2 x float>, ptr %572, align 8, !tbaa !137
  %599 = load float, ptr %596, align 8, !tbaa !137
  %600 = load <2 x float>, ptr %575, align 8, !tbaa !137
  %601 = load float, ptr %597, align 8, !tbaa !137
  %602 = zext i32 %483 to i64
  br label %603

603:                                              ; preds = %591, %603
  %604 = phi i64 [ 0, %591 ], [ %645, %603 ]
  %605 = phi float [ %601, %591 ], [ %636, %603 ]
  %606 = phi float [ %599, %591 ], [ %627, %603 ]
  %607 = phi float [ 0.000000e+00, %591 ], [ %643, %603 ]
  %608 = phi <2 x float> [ zeroinitializer, %591 ], [ %644, %603 ]
  %609 = phi <2 x float> [ %598, %591 ], [ %628, %603 ]
  %610 = phi <2 x float> [ %600, %591 ], [ %635, %603 ]
  %611 = getelementptr inbounds %class.btVector3, ptr %593, i64 %604
  %612 = getelementptr inbounds float, ptr %595, i64 %604
  %613 = load float, ptr %612, align 4, !tbaa !137
  %614 = getelementptr inbounds [4 x float], ptr %611, i64 0, i64 1
  %615 = getelementptr inbounds [4 x float], ptr %611, i64 0, i64 2
  %616 = load float, ptr %615, align 4, !tbaa !137
  %617 = fmul float %613, %616
  %618 = load <2 x float>, ptr %611, align 4, !tbaa !137
  %619 = extractelement <2 x float> %618, i64 0
  %620 = fmul float %619, %613
  %621 = extractelement <2 x float> %618, i64 1
  %622 = fmul float %613, %621
  %623 = insertelement <2 x float> poison, float %620, i64 0
  %624 = shufflevector <2 x float> %623, <2 x float> poison, <2 x i32> zeroinitializer
  %625 = fmul <2 x float> %618, %624
  %626 = fmul float %620, %616
  %627 = fadd float %626, %606
  store float %627, ptr %596, align 8, !tbaa !137
  %628 = fadd <2 x float> %625, %609
  store <2 x float> %628, ptr %572, align 8, !tbaa !137
  %629 = load float, ptr %615, align 4, !tbaa !137
  %630 = fmul float %622, %629
  %631 = load <2 x float>, ptr %611, align 4, !tbaa !137
  %632 = insertelement <2 x float> poison, float %622, i64 0
  %633 = shufflevector <2 x float> %632, <2 x float> poison, <2 x i32> zeroinitializer
  %634 = fmul <2 x float> %633, %631
  %635 = fadd <2 x float> %634, %610
  store <2 x float> %635, ptr %575, align 8, !tbaa !137
  %636 = fadd float %630, %605
  store float %636, ptr %597, align 8, !tbaa !137
  %637 = load float, ptr %611, align 4, !tbaa !137
  %638 = fmul float %617, %637
  %639 = load <2 x float>, ptr %614, align 4, !tbaa !137
  %640 = insertelement <2 x float> poison, float %617, i64 0
  %641 = shufflevector <2 x float> %640, <2 x float> poison, <2 x i32> zeroinitializer
  %642 = fmul <2 x float> %641, %639
  %643 = fadd float %638, %607
  store float %643, ptr %573, align 8, !tbaa !137
  %644 = fadd <2 x float> %642, %608
  store <2 x float> %644, ptr %574, align 4, !tbaa !137
  %645 = add nuw nsw i64 %604, 1
  %646 = icmp eq i64 %645, %602
  br i1 %646, label %647, label %603

647:                                              ; preds = %603
  %648 = extractelement <2 x float> %635, i64 0
  %649 = extractelement <2 x float> %628, i64 0
  %650 = shufflevector <2 x float> %628, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %651 = insertelement <2 x float> %650, float %636, i64 1
  %652 = insertelement <2 x float> %635, float %627, i64 0
  br label %653

653:                                              ; preds = %647, %576
  %654 = phi float [ %581, %576 ], [ %649, %647 ]
  %655 = phi float [ %580, %576 ], [ %648, %647 ]
  %656 = phi float [ 0.000000e+00, %576 ], [ %643, %647 ]
  %657 = phi <2 x float> [ %589, %576 ], [ %652, %647 ]
  %658 = phi <2 x float> [ zeroinitializer, %576 ], [ %644, %647 ]
  %659 = phi <2 x float> [ %590, %576 ], [ %651, %647 ]
  %660 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 2, i32 0, i64 2
  %661 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 2, i32 0, i64 3
  %662 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1, i32 0, i64 2
  %663 = fneg <2 x float> %659
  %664 = extractelement <2 x float> %659, i64 1
  %665 = extractelement <2 x float> %657, i64 1
  %666 = extractelement <2 x float> %659, i64 0
  %667 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 0, i32 0, i64 2
  %668 = extractelement <2 x float> %657, i64 0
  %669 = extractelement <2 x float> %663, i64 0
  %670 = fmul float %655, %669
  %671 = tail call float @llvm.fmuladd.f32(float %654, float %665, float %670)
  %672 = shufflevector <2 x float> %658, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %673 = fmul <2 x float> %672, %663
  %674 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %657, <2 x float> %658, <2 x float> %673)
  %675 = extractelement <2 x float> %674, i64 1
  %676 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 0, i32 0, i64 3
  store float 0.000000e+00, ptr %676, align 4, !tbaa.struct !318
  %677 = shufflevector <2 x float> %657, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %678 = insertelement <2 x float> %677, float %655, i64 0
  %679 = fneg <2 x float> %678
  %680 = insertelement <2 x float> %672, float %656, i64 1
  %681 = fmul <2 x float> %680, %679
  %682 = shufflevector <2 x float> %659, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %683 = insertelement <2 x float> %682, float %654, i64 1
  %684 = insertelement <2 x float> %658, float %656, i64 0
  %685 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %683, <2 x float> %684, <2 x float> %681)
  %686 = fmul <2 x float> %659, %685
  %687 = extractelement <2 x float> %686, i64 0
  %688 = fmul <2 x float> %657, %679
  %689 = extractelement <2 x float> %688, i64 1
  %690 = tail call float @llvm.fmuladd.f32(float %666, float %664, float %689)
  %691 = tail call float @llvm.fmuladd.f32(float %654, float %675, float %687)
  %692 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %692, align 4, !tbaa.struct !318
  %693 = insertelement <2 x float> %677, float %654, i64 1
  %694 = fneg <2 x float> %693
  %695 = fmul <2 x float> %659, %694
  %696 = extractelement <2 x float> %695, i64 1
  %697 = tail call float @llvm.fmuladd.f32(float %668, float %655, float %696)
  %698 = insertelement <2 x float> %672, float %656, i64 0
  %699 = fmul <2 x float> %698, %694
  %700 = insertelement <2 x float> %682, float %655, i64 0
  %701 = insertelement <2 x float> %658, float %656, i64 1
  %702 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %700, <2 x float> %701, <2 x float> %699)
  %703 = extractelement <2 x float> %702, i64 0
  %704 = tail call float @llvm.fmuladd.f32(float %668, float %703, float %691)
  %705 = fdiv float 1.000000e+00, %704
  %706 = insertelement <2 x float> poison, float %705, i64 0
  %707 = shufflevector <2 x float> %706, <2 x float> poison, <2 x i32> zeroinitializer
  %708 = fmul <2 x float> %674, %707
  %709 = fmul float %690, %705
  %710 = fmul <2 x float> %685, %707
  %711 = fmul float %697, %705
  %712 = fmul <2 x float> %702, %707
  %713 = fmul float %671, %705
  %714 = shufflevector <2 x float> %708, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  store <2 x float> %714, ptr %572, align 8
  store float %709, ptr %667, align 8, !tbaa.struct !164
  store <2 x float> %710, ptr %575, align 8
  store float %711, ptr %662, align 8, !tbaa.struct !164
  store <2 x float> %712, ptr %573, align 8
  store float %713, ptr %660, align 8, !tbaa.struct !164
  store float 0.000000e+00, ptr %661, align 4, !tbaa.struct !318
  tail call void @_ZN10btSoftBody15updateConstantsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local { <2 x float>, <2 x float> } @_ZNK10btSoftBody11evaluateComEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #18 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 1
  %3 = load i8, ptr %2, align 1, !tbaa !143, !range !191, !noundef !192
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %85, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %7 = load i32, ptr %6, align 4, !tbaa !88
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %85

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !87
  %12 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !39
  %14 = zext i32 %7 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i32 %7, 1
  br i1 %16, label %58, label %17

17:                                               ; preds = %9
  %18 = and i64 %14, 4294967294
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %52, %19 ]
  %21 = phi <2 x float> [ zeroinitializer, %17 ], [ %51, %19 ]
  %22 = phi <2 x float> [ zeroinitializer, %17 ], [ %49, %19 ]
  %23 = phi i64 [ 0, %17 ], [ %53, %19 ]
  %24 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %11, i64 %20, i32 1
  %25 = getelementptr inbounds float, ptr %13, i64 %20
  %26 = load float, ptr %25, align 4, !tbaa !137
  %27 = getelementptr inbounds [4 x float], ptr %24, i64 0, i64 2
  %28 = load float, ptr %27, align 4, !tbaa !137
  %29 = fmul float %26, %28
  %30 = load <2 x float>, ptr %24, align 4, !tbaa !137
  %31 = insertelement <2 x float> poison, float %26, i64 0
  %32 = shufflevector <2 x float> %31, <2 x float> poison, <2 x i32> zeroinitializer
  %33 = fmul <2 x float> %32, %30
  %34 = fadd <2 x float> %22, %33
  %35 = extractelement <2 x float> %21, i64 0
  %36 = fadd float %35, %29
  %37 = insertelement <2 x float> %21, float %36, i64 0
  %38 = or i64 %20, 1
  %39 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %11, i64 %38, i32 1
  %40 = getelementptr inbounds float, ptr %13, i64 %38
  %41 = load float, ptr %40, align 4, !tbaa !137
  %42 = getelementptr inbounds [4 x float], ptr %39, i64 0, i64 2
  %43 = load float, ptr %42, align 4, !tbaa !137
  %44 = fmul float %41, %43
  %45 = load <2 x float>, ptr %39, align 4, !tbaa !137
  %46 = insertelement <2 x float> poison, float %41, i64 0
  %47 = shufflevector <2 x float> %46, <2 x float> poison, <2 x i32> zeroinitializer
  %48 = fmul <2 x float> %47, %45
  %49 = fadd <2 x float> %34, %48
  %50 = fadd float %36, %44
  %51 = insertelement <2 x float> %37, float %50, i64 0
  %52 = add nuw nsw i64 %20, 2
  %53 = add i64 %23, 2
  %54 = icmp eq i64 %53, %18
  br i1 %54, label %55, label %19

55:                                               ; preds = %19
  %56 = insertelement <2 x float> %21, float %36, i64 0
  %57 = insertelement <2 x float> %56, float %50, i64 0
  br label %58

58:                                               ; preds = %55, %9
  %59 = phi <2 x float> [ undef, %9 ], [ %56, %55 ]
  %60 = phi <2 x float> [ undef, %9 ], [ %49, %55 ]
  %61 = phi float [ undef, %9 ], [ %50, %55 ]
  %62 = phi i64 [ 0, %9 ], [ %52, %55 ]
  %63 = phi <2 x float> [ zeroinitializer, %9 ], [ %57, %55 ]
  %64 = phi <2 x float> [ zeroinitializer, %9 ], [ %49, %55 ]
  %65 = icmp eq i64 %15, 0
  br i1 %65, label %80, label %66

66:                                               ; preds = %58
  %67 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %11, i64 %62, i32 1
  %68 = getelementptr inbounds float, ptr %13, i64 %62
  %69 = load float, ptr %68, align 4, !tbaa !137
  %70 = getelementptr inbounds [4 x float], ptr %67, i64 0, i64 2
  %71 = load float, ptr %70, align 4, !tbaa !137
  %72 = fmul float %69, %71
  %73 = load <2 x float>, ptr %67, align 4, !tbaa !137
  %74 = insertelement <2 x float> poison, float %69, i64 0
  %75 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> zeroinitializer
  %76 = fmul <2 x float> %75, %73
  %77 = fadd <2 x float> %64, %76
  %78 = extractelement <2 x float> %63, i64 0
  %79 = fadd float %78, %72
  br label %80

80:                                               ; preds = %58, %66
  %81 = phi <2 x float> [ %59, %58 ], [ %63, %66 ]
  %82 = phi <2 x float> [ %60, %58 ], [ %77, %66 ]
  %83 = phi float [ %61, %58 ], [ %79, %66 ]
  %84 = insertelement <2 x float> %81, float %83, i64 0
  br label %85

85:                                               ; preds = %80, %5, %1
  %86 = phi <2 x float> [ zeroinitializer, %1 ], [ zeroinitializer, %5 ], [ %82, %80 ]
  %87 = phi <2 x float> [ zeroinitializer, %1 ], [ zeroinitializer, %5 ], [ %84, %80 ]
  %88 = insertvalue { <2 x float>, <2 x float> } poison, <2 x float> %86, 0
  %89 = insertvalue { <2 x float>, <2 x float> } %88, <2 x float> %87, 1
  ret { <2 x float>, <2 x float> } %89
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) uwtable
define dso_local noundef i32 @_ZNK10btSoftBody12clusterCountEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #19 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !124
  ret i32 %3
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local { <2 x float>, <2 x float> } @_ZN10btSoftBody10clusterComEPKNS_7ClusterE(ptr nocapture noundef readonly %0) local_unnamed_addr #18 align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !319
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %37

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !320
  %8 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 1, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !39
  %10 = zext i32 %3 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %3, 1
  br i1 %12, label %15, label %13

13:                                               ; preds = %5
  %14 = and i64 %10, 4294967294
  br label %52

15:                                               ; preds = %52, %5
  %16 = phi float [ undef, %5 ], [ %84, %52 ]
  %17 = phi <2 x float> [ undef, %5 ], [ %85, %52 ]
  %18 = phi i64 [ 0, %5 ], [ %86, %52 ]
  %19 = phi float [ 0.000000e+00, %5 ], [ %84, %52 ]
  %20 = phi <2 x float> [ zeroinitializer, %5 ], [ %85, %52 ]
  %21 = icmp eq i64 %11, 0
  br i1 %21, label %37, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds ptr, ptr %7, i64 %18
  %24 = load ptr, ptr %23, align 8, !tbaa !219
  %25 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %24, i64 0, i32 1
  %26 = getelementptr inbounds float, ptr %9, i64 %18
  %27 = load float, ptr %25, align 4, !tbaa !137
  %28 = load float, ptr %26, align 4, !tbaa !137
  %29 = fmul float %27, %28
  %30 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %24, i64 0, i32 1, i32 0, i64 1
  %31 = load <2 x float>, ptr %30, align 4, !tbaa !137
  %32 = insertelement <2 x float> poison, float %28, i64 0
  %33 = shufflevector <2 x float> %32, <2 x float> poison, <2 x i32> zeroinitializer
  %34 = fmul <2 x float> %33, %31
  %35 = fadd float %19, %29
  %36 = fadd <2 x float> %20, %34
  br label %37

37:                                               ; preds = %22, %15, %1
  %38 = phi float [ 0.000000e+00, %1 ], [ %16, %15 ], [ %35, %22 ]
  %39 = phi <2 x float> [ zeroinitializer, %1 ], [ %17, %15 ], [ %36, %22 ]
  %40 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 5
  %41 = load float, ptr %40, align 4, !tbaa !137
  %42 = shufflevector <2 x float> %39, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %43 = insertelement <2 x float> %42, float %38, i64 0
  %44 = insertelement <2 x float> poison, float %41, i64 0
  %45 = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> zeroinitializer
  %46 = fmul <2 x float> %43, %45
  %47 = extractelement <2 x float> %39, i64 1
  %48 = fmul float %47, %41
  %49 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %48, i64 0
  %50 = insertvalue { <2 x float>, <2 x float> } poison, <2 x float> %46, 0
  %51 = insertvalue { <2 x float>, <2 x float> } %50, <2 x float> %49, 1
  ret { <2 x float>, <2 x float> } %51

52:                                               ; preds = %52, %13
  %53 = phi i64 [ 0, %13 ], [ %86, %52 ]
  %54 = phi float [ 0.000000e+00, %13 ], [ %84, %52 ]
  %55 = phi <2 x float> [ zeroinitializer, %13 ], [ %85, %52 ]
  %56 = phi i64 [ 0, %13 ], [ %87, %52 ]
  %57 = getelementptr inbounds ptr, ptr %7, i64 %53
  %58 = load ptr, ptr %57, align 8, !tbaa !219
  %59 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %58, i64 0, i32 1
  %60 = getelementptr inbounds float, ptr %9, i64 %53
  %61 = load float, ptr %59, align 4, !tbaa !137
  %62 = load float, ptr %60, align 4, !tbaa !137
  %63 = fmul float %61, %62
  %64 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %58, i64 0, i32 1, i32 0, i64 1
  %65 = load <2 x float>, ptr %64, align 4, !tbaa !137
  %66 = insertelement <2 x float> poison, float %62, i64 0
  %67 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> zeroinitializer
  %68 = fmul <2 x float> %67, %65
  %69 = fadd float %54, %63
  %70 = fadd <2 x float> %55, %68
  %71 = or i64 %53, 1
  %72 = getelementptr inbounds ptr, ptr %7, i64 %71
  %73 = load ptr, ptr %72, align 8, !tbaa !219
  %74 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %73, i64 0, i32 1
  %75 = getelementptr inbounds float, ptr %9, i64 %71
  %76 = load float, ptr %74, align 4, !tbaa !137
  %77 = load float, ptr %75, align 4, !tbaa !137
  %78 = fmul float %76, %77
  %79 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %73, i64 0, i32 1, i32 0, i64 1
  %80 = load <2 x float>, ptr %79, align 4, !tbaa !137
  %81 = insertelement <2 x float> poison, float %77, i64 0
  %82 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> zeroinitializer
  %83 = fmul <2 x float> %82, %80
  %84 = fadd float %69, %78
  %85 = fadd <2 x float> %70, %83
  %86 = add nuw nsw i64 %53, 2
  %87 = add i64 %56, 2
  %88 = icmp eq i64 %87, %14
  br i1 %88, label %15, label %52
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable
define dso_local { <2 x float>, <2 x float> } @_ZNK10btSoftBody10clusterComEi(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, i32 noundef %1) local_unnamed_addr #18 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !123
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds ptr, ptr %4, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !219
  %8 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %7, i64 0, i32 2
  %9 = load i32, ptr %8, align 4, !tbaa !319
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %80

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %7, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !320
  %14 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %7, i64 0, i32 1, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !39
  %16 = zext i32 %9 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i32 %9, 1
  br i1 %18, label %58, label %19

19:                                               ; preds = %11
  %20 = and i64 %16, 4294967294
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %55, %21 ]
  %23 = phi float [ 0.000000e+00, %19 ], [ %53, %21 ]
  %24 = phi <2 x float> [ zeroinitializer, %19 ], [ %54, %21 ]
  %25 = phi i64 [ 0, %19 ], [ %56, %21 ]
  %26 = getelementptr inbounds ptr, ptr %13, i64 %22
  %27 = load ptr, ptr %26, align 8, !tbaa !219
  %28 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %27, i64 0, i32 1
  %29 = getelementptr inbounds float, ptr %15, i64 %22
  %30 = load float, ptr %28, align 4, !tbaa !137
  %31 = load float, ptr %29, align 4, !tbaa !137
  %32 = fmul float %30, %31
  %33 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %27, i64 0, i32 1, i32 0, i64 1
  %34 = load <2 x float>, ptr %33, align 4, !tbaa !137
  %35 = insertelement <2 x float> poison, float %31, i64 0
  %36 = shufflevector <2 x float> %35, <2 x float> poison, <2 x i32> zeroinitializer
  %37 = fmul <2 x float> %36, %34
  %38 = fadd float %23, %32
  %39 = fadd <2 x float> %24, %37
  %40 = or i64 %22, 1
  %41 = getelementptr inbounds ptr, ptr %13, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !219
  %43 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %42, i64 0, i32 1
  %44 = getelementptr inbounds float, ptr %15, i64 %40
  %45 = load float, ptr %43, align 4, !tbaa !137
  %46 = load float, ptr %44, align 4, !tbaa !137
  %47 = fmul float %45, %46
  %48 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %42, i64 0, i32 1, i32 0, i64 1
  %49 = load <2 x float>, ptr %48, align 4, !tbaa !137
  %50 = insertelement <2 x float> poison, float %46, i64 0
  %51 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer
  %52 = fmul <2 x float> %51, %49
  %53 = fadd float %38, %47
  %54 = fadd <2 x float> %39, %52
  %55 = add nuw nsw i64 %22, 2
  %56 = add i64 %25, 2
  %57 = icmp eq i64 %56, %20
  br i1 %57, label %58, label %21

58:                                               ; preds = %21, %11
  %59 = phi float [ undef, %11 ], [ %53, %21 ]
  %60 = phi <2 x float> [ undef, %11 ], [ %54, %21 ]
  %61 = phi i64 [ 0, %11 ], [ %55, %21 ]
  %62 = phi float [ 0.000000e+00, %11 ], [ %53, %21 ]
  %63 = phi <2 x float> [ zeroinitializer, %11 ], [ %54, %21 ]
  %64 = icmp eq i64 %17, 0
  br i1 %64, label %80, label %65

65:                                               ; preds = %58
  %66 = getelementptr inbounds ptr, ptr %13, i64 %61
  %67 = load ptr, ptr %66, align 8, !tbaa !219
  %68 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1
  %69 = getelementptr inbounds float, ptr %15, i64 %61
  %70 = load float, ptr %68, align 4, !tbaa !137
  %71 = load float, ptr %69, align 4, !tbaa !137
  %72 = fmul float %70, %71
  %73 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1, i32 0, i64 1
  %74 = load <2 x float>, ptr %73, align 4, !tbaa !137
  %75 = insertelement <2 x float> poison, float %71, i64 0
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer
  %77 = fmul <2 x float> %76, %74
  %78 = fadd float %62, %72
  %79 = fadd <2 x float> %63, %77
  br label %80

80:                                               ; preds = %65, %58, %2
  %81 = phi float [ 0.000000e+00, %2 ], [ %59, %58 ], [ %78, %65 ]
  %82 = phi <2 x float> [ zeroinitializer, %2 ], [ %60, %58 ], [ %79, %65 ]
  %83 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %7, i64 0, i32 5
  %84 = load float, ptr %83, align 4, !tbaa !137
  %85 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %86 = insertelement <2 x float> %85, float %81, i64 0
  %87 = insertelement <2 x float> poison, float %84, i64 0
  %88 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> zeroinitializer
  %89 = fmul <2 x float> %86, %88
  %90 = extractelement <2 x float> %82, i64 1
  %91 = fmul float %90, %84
  %92 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %91, i64 0
  %93 = insertvalue { <2 x float>, <2 x float> } poison, <2 x float> %89, 0
  %94 = insertvalue { <2 x float>, <2 x float> } %93, <2 x float> %92, 1
  ret { <2 x float>, <2 x float> } %94
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: read) uwtable
define dso_local { <2 x float>, <2 x float> } @_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3(ptr nocapture noundef readonly %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #20 align 2 {
  %3 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 13
  %4 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14
  %5 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %6 = load float, ptr %5, align 4, !tbaa !137
  %7 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14, i32 0, i64 2
  %8 = load float, ptr %3, align 4, !tbaa !137
  %9 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 13, i32 0, i64 1
  %10 = load float, ptr %7, align 4, !tbaa !137
  %11 = fneg float %10
  %12 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %13 = extractelement <2 x float> %12, i64 1
  %14 = fmul float %13, %11
  %15 = load <2 x float>, ptr %4, align 4, !tbaa !137
  %16 = extractelement <2 x float> %15, i64 1
  %17 = tail call float @llvm.fmuladd.f32(float %16, float %6, float %14)
  %18 = fneg <2 x float> %15
  %19 = insertelement <2 x float> poison, float %6, i64 0
  %20 = shufflevector <2 x float> %19, <2 x float> %12, <2 x i32> <i32 0, i32 2>
  %21 = fmul <2 x float> %20, %18
  %22 = insertelement <2 x float> poison, float %10, i64 0
  %23 = shufflevector <2 x float> %22, <2 x float> %15, <2 x i32> <i32 0, i32 2>
  %24 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %23, <2 x float> %12, <2 x float> %21)
  %25 = fadd float %17, %8
  %26 = load <2 x float>, ptr %9, align 4, !tbaa !137
  %27 = fadd <2 x float> %26, %24
  %28 = insertelement <2 x float> undef, float %25, i64 0
  %29 = shufflevector <2 x float> %28, <2 x float> %27, <2 x i32> <i32 0, i32 2>
  %30 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %27, <2 x i32> <i32 3, i32 1>
  %31 = insertvalue { <2 x float>, <2 x float> } poison, <2 x float> %29, 0
  %32 = insertvalue { <2 x float>, <2 x float> } %31, <2 x float> %30, 1
  ret { <2 x float>, <2 x float> } %32
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_(ptr nocapture noundef %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2) local_unnamed_addr #21 align 2 {
  %4 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 5
  %5 = load float, ptr %4, align 4, !tbaa !137
  %6 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %7 = load float, ptr %6, align 4, !tbaa !137
  %8 = fmul float %5, %7
  %9 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %11 = load float, ptr %10, align 4, !tbaa !137
  %12 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = fneg float %13
  %15 = load float, ptr %1, align 4, !tbaa !137
  %16 = fneg float %15
  %17 = fmul float %7, %16
  %18 = fneg float %11
  %19 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %20 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %21 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %22 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %23 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %24 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %25 = load float, ptr %24, align 4, !tbaa !137
  %26 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %27 = load float, ptr %26, align 4, !tbaa !137
  %28 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9
  %31 = load <2 x float>, ptr %2, align 4, !tbaa !137
  %32 = insertelement <2 x float> poison, float %5, i64 0
  %33 = shufflevector <2 x float> %32, <2 x float> poison, <2 x i32> zeroinitializer
  %34 = fmul <2 x float> %33, %31
  %35 = extractelement <2 x float> %31, i64 1
  %36 = fmul float %35, %14
  %37 = tail call float @llvm.fmuladd.f32(float %11, float %7, float %36)
  %38 = extractelement <2 x float> %31, i64 0
  %39 = tail call float @llvm.fmuladd.f32(float %13, float %38, float %17)
  %40 = fmul float %38, %18
  %41 = tail call float @llvm.fmuladd.f32(float %15, float %35, float %40)
  %42 = fmul float %39, %27
  %43 = tail call float @llvm.fmuladd.f32(float %25, float %37, float %42)
  %44 = tail call float @llvm.fmuladd.f32(float %29, float %41, float %43)
  %45 = load <2 x float>, ptr %30, align 4, !tbaa !137
  %46 = fadd <2 x float> %34, %45
  store <2 x float> %46, ptr %30, align 4, !tbaa !137
  %47 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 0, i32 0, i64 2
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fadd float %8, %48
  store float %49, ptr %47, align 4, !tbaa !137
  %50 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 13
  %51 = load <2 x float>, ptr %50, align 4, !tbaa !137
  %52 = fadd <2 x float> %34, %51
  store <2 x float> %52, ptr %50, align 4, !tbaa !137
  %53 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 13, i32 0, i64 2
  %54 = load float, ptr %53, align 4, !tbaa !137
  %55 = fadd float %8, %54
  store float %55, ptr %53, align 4, !tbaa !137
  %56 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1
  %57 = load float, ptr %9, align 4, !tbaa !137
  %58 = load float, ptr %19, align 4, !tbaa !137
  %59 = load float, ptr %20, align 4, !tbaa !137
  %60 = load float, ptr %21, align 4, !tbaa !137
  %61 = load float, ptr %22, align 4, !tbaa !137
  %62 = load float, ptr %23, align 4, !tbaa !137
  %63 = insertelement <2 x float> poison, float %58, i64 0
  %64 = insertelement <2 x float> %63, float %61, i64 1
  %65 = insertelement <2 x float> poison, float %39, i64 0
  %66 = shufflevector <2 x float> %65, <2 x float> poison, <2 x i32> zeroinitializer
  %67 = fmul <2 x float> %64, %66
  %68 = insertelement <2 x float> poison, float %57, i64 0
  %69 = insertelement <2 x float> %68, float %60, i64 1
  %70 = insertelement <2 x float> poison, float %37, i64 0
  %71 = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> zeroinitializer
  %72 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %69, <2 x float> %71, <2 x float> %67)
  %73 = insertelement <2 x float> poison, float %59, i64 0
  %74 = insertelement <2 x float> %73, float %62, i64 1
  %75 = insertelement <2 x float> poison, float %41, i64 0
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer
  %77 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %74, <2 x float> %76, <2 x float> %72)
  %78 = load <2 x float>, ptr %56, align 4, !tbaa !137
  %79 = fadd <2 x float> %77, %78
  store <2 x float> %79, ptr %56, align 4, !tbaa !137
  %80 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1, i32 0, i64 2
  %81 = load float, ptr %80, align 4, !tbaa !137
  %82 = fadd float %44, %81
  store float %82, ptr %80, align 4, !tbaa !137
  %83 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14
  %84 = load <2 x float>, ptr %83, align 4, !tbaa !137
  %85 = fadd <2 x float> %77, %84
  store <2 x float> %85, ptr %83, align 4, !tbaa !137
  %86 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14, i32 0, i64 2
  %87 = load float, ptr %86, align 4, !tbaa !137
  %88 = fadd float %44, %87
  store float %88, ptr %86, align 4, !tbaa !137
  %89 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 11
  %90 = load i32, ptr %89, align 8, !tbaa !321
  %91 = add nsw i32 %90, 1
  store i32 %91, ptr %89, align 8, !tbaa !321
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_(ptr nocapture noundef %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2) local_unnamed_addr #21 align 2 {
  %4 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 5
  %5 = load float, ptr %4, align 4, !tbaa !137
  %6 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %7 = load float, ptr %6, align 4, !tbaa !137
  %8 = fmul float %5, %7
  %9 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %11 = load float, ptr %10, align 4, !tbaa !137
  %12 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = fneg float %13
  %15 = load float, ptr %1, align 4, !tbaa !137
  %16 = fneg float %15
  %17 = fmul float %7, %16
  %18 = fneg float %11
  %19 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %20 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %21 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %22 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %23 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %24 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %25 = load float, ptr %24, align 4, !tbaa !137
  %26 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %27 = load float, ptr %26, align 4, !tbaa !137
  %28 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10
  %31 = load <2 x float>, ptr %2, align 4, !tbaa !137
  %32 = insertelement <2 x float> poison, float %5, i64 0
  %33 = shufflevector <2 x float> %32, <2 x float> poison, <2 x i32> zeroinitializer
  %34 = fmul <2 x float> %33, %31
  %35 = extractelement <2 x float> %31, i64 1
  %36 = fmul float %35, %14
  %37 = tail call float @llvm.fmuladd.f32(float %11, float %7, float %36)
  %38 = extractelement <2 x float> %31, i64 0
  %39 = tail call float @llvm.fmuladd.f32(float %13, float %38, float %17)
  %40 = fmul float %38, %18
  %41 = tail call float @llvm.fmuladd.f32(float %15, float %35, float %40)
  %42 = fmul float %39, %27
  %43 = tail call float @llvm.fmuladd.f32(float %25, float %37, float %42)
  %44 = tail call float @llvm.fmuladd.f32(float %29, float %41, float %43)
  %45 = load <2 x float>, ptr %30, align 4, !tbaa !137
  %46 = fadd <2 x float> %34, %45
  store <2 x float> %46, ptr %30, align 4, !tbaa !137
  %47 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 0, i32 0, i64 2
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fadd float %8, %48
  store float %49, ptr %47, align 4, !tbaa !137
  %50 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1
  %51 = load float, ptr %9, align 4, !tbaa !137
  %52 = load float, ptr %19, align 4, !tbaa !137
  %53 = load float, ptr %20, align 4, !tbaa !137
  %54 = load float, ptr %21, align 4, !tbaa !137
  %55 = load float, ptr %22, align 4, !tbaa !137
  %56 = load float, ptr %23, align 4, !tbaa !137
  %57 = insertelement <2 x float> poison, float %52, i64 0
  %58 = insertelement <2 x float> %57, float %55, i64 1
  %59 = insertelement <2 x float> poison, float %39, i64 0
  %60 = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> zeroinitializer
  %61 = fmul <2 x float> %58, %60
  %62 = insertelement <2 x float> poison, float %51, i64 0
  %63 = insertelement <2 x float> %62, float %54, i64 1
  %64 = insertelement <2 x float> poison, float %37, i64 0
  %65 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> zeroinitializer
  %66 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %63, <2 x float> %65, <2 x float> %61)
  %67 = insertelement <2 x float> poison, float %53, i64 0
  %68 = insertelement <2 x float> %67, float %56, i64 1
  %69 = insertelement <2 x float> poison, float %41, i64 0
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> zeroinitializer
  %71 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %68, <2 x float> %70, <2 x float> %66)
  %72 = load <2 x float>, ptr %50, align 4, !tbaa !137
  %73 = fadd <2 x float> %71, %72
  store <2 x float> %73, ptr %50, align 4, !tbaa !137
  %74 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1, i32 0, i64 2
  %75 = load float, ptr %74, align 4, !tbaa !137
  %76 = fadd float %44, %75
  store float %76, ptr %74, align 4, !tbaa !137
  %77 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 12
  %78 = load i32, ptr %77, align 4, !tbaa !322
  %79 = add nsw i32 %78, 1
  store i32 %79, ptr %77, align 4, !tbaa !322
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE(ptr nocapture noundef %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(33) %2) local_unnamed_addr #21 align 2 {
  %4 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %2, i64 0, i32 2
  %5 = load i8, ptr %4, align 4
  %6 = and i8 %5, 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %98, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 5
  %10 = load float, ptr %9, align 4, !tbaa !137
  %11 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %12 = load float, ptr %11, align 4, !tbaa !137
  %13 = fmul float %10, %12
  %14 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %15 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %16 = load float, ptr %15, align 4, !tbaa !137
  %17 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %18 = load float, ptr %17, align 4, !tbaa !137
  %19 = fneg float %18
  %20 = load float, ptr %1, align 4, !tbaa !137
  %21 = fneg float %20
  %22 = fmul float %12, %21
  %23 = fneg float %16
  %24 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %25 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %26 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %27 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %28 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %29 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %30 = load float, ptr %29, align 4, !tbaa !137
  %31 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %32 = load float, ptr %31, align 4, !tbaa !137
  %33 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %34 = load float, ptr %33, align 4, !tbaa !137
  %35 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9
  %36 = load <2 x float>, ptr %2, align 4, !tbaa !137
  %37 = insertelement <2 x float> poison, float %10, i64 0
  %38 = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> zeroinitializer
  %39 = fmul <2 x float> %38, %36
  %40 = extractelement <2 x float> %36, i64 1
  %41 = fmul float %40, %19
  %42 = tail call float @llvm.fmuladd.f32(float %16, float %12, float %41)
  %43 = extractelement <2 x float> %36, i64 0
  %44 = tail call float @llvm.fmuladd.f32(float %18, float %43, float %22)
  %45 = fmul float %43, %23
  %46 = tail call float @llvm.fmuladd.f32(float %20, float %40, float %45)
  %47 = fmul float %44, %32
  %48 = tail call float @llvm.fmuladd.f32(float %30, float %42, float %47)
  %49 = tail call float @llvm.fmuladd.f32(float %34, float %46, float %48)
  %50 = load <2 x float>, ptr %35, align 4, !tbaa !137
  %51 = fadd <2 x float> %39, %50
  store <2 x float> %51, ptr %35, align 4, !tbaa !137
  %52 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 0, i32 0, i64 2
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = fadd float %13, %53
  store float %54, ptr %52, align 4, !tbaa !137
  %55 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 13
  %56 = load <2 x float>, ptr %55, align 4, !tbaa !137
  %57 = fadd <2 x float> %39, %56
  store <2 x float> %57, ptr %55, align 4, !tbaa !137
  %58 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 13, i32 0, i64 2
  %59 = load float, ptr %58, align 4, !tbaa !137
  %60 = fadd float %13, %59
  store float %60, ptr %58, align 4, !tbaa !137
  %61 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1
  %62 = load float, ptr %14, align 4, !tbaa !137
  %63 = load float, ptr %24, align 4, !tbaa !137
  %64 = load float, ptr %25, align 4, !tbaa !137
  %65 = load float, ptr %26, align 4, !tbaa !137
  %66 = load float, ptr %27, align 4, !tbaa !137
  %67 = load float, ptr %28, align 4, !tbaa !137
  %68 = insertelement <2 x float> poison, float %63, i64 0
  %69 = insertelement <2 x float> %68, float %66, i64 1
  %70 = insertelement <2 x float> poison, float %44, i64 0
  %71 = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> zeroinitializer
  %72 = fmul <2 x float> %69, %71
  %73 = insertelement <2 x float> poison, float %62, i64 0
  %74 = insertelement <2 x float> %73, float %65, i64 1
  %75 = insertelement <2 x float> poison, float %42, i64 0
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer
  %77 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %74, <2 x float> %76, <2 x float> %72)
  %78 = insertelement <2 x float> poison, float %64, i64 0
  %79 = insertelement <2 x float> %78, float %67, i64 1
  %80 = insertelement <2 x float> poison, float %46, i64 0
  %81 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> zeroinitializer
  %82 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %79, <2 x float> %81, <2 x float> %77)
  %83 = load <2 x float>, ptr %61, align 4, !tbaa !137
  %84 = fadd <2 x float> %82, %83
  store <2 x float> %84, ptr %61, align 4, !tbaa !137
  %85 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1, i32 0, i64 2
  %86 = load float, ptr %85, align 4, !tbaa !137
  %87 = fadd float %49, %86
  store float %87, ptr %85, align 4, !tbaa !137
  %88 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14
  %89 = load <2 x float>, ptr %88, align 4, !tbaa !137
  %90 = fadd <2 x float> %82, %89
  store <2 x float> %90, ptr %88, align 4, !tbaa !137
  %91 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14, i32 0, i64 2
  %92 = load float, ptr %91, align 4, !tbaa !137
  %93 = fadd float %49, %92
  store float %93, ptr %91, align 4, !tbaa !137
  %94 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 11
  %95 = load i32, ptr %94, align 8, !tbaa !321
  %96 = add nsw i32 %95, 1
  store i32 %96, ptr %94, align 8, !tbaa !321
  %97 = load i8, ptr %4, align 4
  br label %98

98:                                               ; preds = %8, %3
  %99 = phi i8 [ %97, %8 ], [ %5, %3 ]
  %100 = and i8 %99, 2
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %180, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %2, i64 0, i32 1
  %104 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 5
  %105 = load float, ptr %104, align 4, !tbaa !137
  %106 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %2, i64 0, i32 1, i32 0, i64 2
  %107 = load float, ptr %106, align 4, !tbaa !137
  %108 = fmul float %105, %107
  %109 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %110 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %111 = load float, ptr %110, align 4, !tbaa !137
  %112 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %113 = load float, ptr %112, align 4, !tbaa !137
  %114 = fneg float %113
  %115 = load float, ptr %1, align 4, !tbaa !137
  %116 = fneg float %115
  %117 = fmul float %107, %116
  %118 = fneg float %111
  %119 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %120 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %121 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %122 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %123 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %124 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %125 = load float, ptr %124, align 4, !tbaa !137
  %126 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %127 = load float, ptr %126, align 4, !tbaa !137
  %128 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %129 = load float, ptr %128, align 4, !tbaa !137
  %130 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10
  %131 = load <2 x float>, ptr %103, align 4, !tbaa !137
  %132 = insertelement <2 x float> poison, float %105, i64 0
  %133 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> zeroinitializer
  %134 = fmul <2 x float> %133, %131
  %135 = extractelement <2 x float> %131, i64 1
  %136 = fmul float %135, %114
  %137 = tail call float @llvm.fmuladd.f32(float %111, float %107, float %136)
  %138 = extractelement <2 x float> %131, i64 0
  %139 = tail call float @llvm.fmuladd.f32(float %113, float %138, float %117)
  %140 = fmul float %138, %118
  %141 = tail call float @llvm.fmuladd.f32(float %115, float %135, float %140)
  %142 = fmul float %139, %127
  %143 = tail call float @llvm.fmuladd.f32(float %125, float %137, float %142)
  %144 = tail call float @llvm.fmuladd.f32(float %129, float %141, float %143)
  %145 = load <2 x float>, ptr %130, align 4, !tbaa !137
  %146 = fadd <2 x float> %134, %145
  store <2 x float> %146, ptr %130, align 4, !tbaa !137
  %147 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 0, i32 0, i64 2
  %148 = load float, ptr %147, align 4, !tbaa !137
  %149 = fadd float %108, %148
  store float %149, ptr %147, align 4, !tbaa !137
  %150 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1
  %151 = load float, ptr %109, align 4, !tbaa !137
  %152 = load float, ptr %119, align 4, !tbaa !137
  %153 = load float, ptr %120, align 4, !tbaa !137
  %154 = load float, ptr %121, align 4, !tbaa !137
  %155 = load float, ptr %122, align 4, !tbaa !137
  %156 = load float, ptr %123, align 4, !tbaa !137
  %157 = insertelement <2 x float> poison, float %152, i64 0
  %158 = insertelement <2 x float> %157, float %155, i64 1
  %159 = insertelement <2 x float> poison, float %139, i64 0
  %160 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> zeroinitializer
  %161 = fmul <2 x float> %158, %160
  %162 = insertelement <2 x float> poison, float %151, i64 0
  %163 = insertelement <2 x float> %162, float %154, i64 1
  %164 = insertelement <2 x float> poison, float %137, i64 0
  %165 = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> zeroinitializer
  %166 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %163, <2 x float> %165, <2 x float> %161)
  %167 = insertelement <2 x float> poison, float %153, i64 0
  %168 = insertelement <2 x float> %167, float %156, i64 1
  %169 = insertelement <2 x float> poison, float %141, i64 0
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %168, <2 x float> %170, <2 x float> %166)
  %172 = load <2 x float>, ptr %150, align 4, !tbaa !137
  %173 = fadd <2 x float> %171, %172
  store <2 x float> %173, ptr %150, align 4, !tbaa !137
  %174 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1, i32 0, i64 2
  %175 = load float, ptr %174, align 4, !tbaa !137
  %176 = fadd float %144, %175
  store float %176, ptr %174, align 4, !tbaa !137
  %177 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 12
  %178 = load i32, ptr %177, align 4, !tbaa !322
  %179 = add nsw i32 %178, 1
  store i32 %179, ptr %177, align 4, !tbaa !322
  br label %180

180:                                              ; preds = %102, %98
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3(ptr nocapture noundef %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #21 align 2 {
  %3 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %4 = load float, ptr %1, align 4, !tbaa !137
  %5 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %6 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %7 = load float, ptr %6, align 4, !tbaa !137
  %8 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %9 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %10 = load float, ptr %9, align 4, !tbaa !137
  %11 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %12 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %13 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %14 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %15 = load float, ptr %14, align 4, !tbaa !137
  %16 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %17 = load float, ptr %16, align 4, !tbaa !137
  %18 = fmul float %7, %17
  %19 = tail call float @llvm.fmuladd.f32(float %15, float %4, float %18)
  %20 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = tail call float @llvm.fmuladd.f32(float %21, float %10, float %19)
  %23 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1
  %24 = load float, ptr %3, align 4, !tbaa !137
  %25 = load float, ptr %5, align 4, !tbaa !137
  %26 = load float, ptr %8, align 4, !tbaa !137
  %27 = load float, ptr %11, align 4, !tbaa !137
  %28 = load float, ptr %12, align 4, !tbaa !137
  %29 = insertelement <2 x float> poison, float %7, i64 0
  %30 = shufflevector <2 x float> %29, <2 x float> poison, <2 x i32> zeroinitializer
  %31 = insertelement <2 x float> poison, float %25, i64 0
  %32 = insertelement <2 x float> %31, float %28, i64 1
  %33 = fmul <2 x float> %30, %32
  %34 = insertelement <2 x float> poison, float %24, i64 0
  %35 = insertelement <2 x float> %34, float %27, i64 1
  %36 = insertelement <2 x float> poison, float %4, i64 0
  %37 = shufflevector <2 x float> %36, <2 x float> poison, <2 x i32> zeroinitializer
  %38 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %35, <2 x float> %37, <2 x float> %33)
  %39 = load float, ptr %13, align 4, !tbaa !137
  %40 = insertelement <2 x float> poison, float %26, i64 0
  %41 = insertelement <2 x float> %40, float %39, i64 1
  %42 = insertelement <2 x float> poison, float %10, i64 0
  %43 = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> zeroinitializer
  %44 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %41, <2 x float> %43, <2 x float> %38)
  %45 = load <2 x float>, ptr %23, align 4, !tbaa !137
  %46 = fadd <2 x float> %44, %45
  store <2 x float> %46, ptr %23, align 4, !tbaa !137
  %47 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1, i32 0, i64 2
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fadd float %22, %48
  store float %49, ptr %47, align 4, !tbaa !137
  %50 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14
  %51 = load <2 x float>, ptr %50, align 4, !tbaa !137
  %52 = fadd <2 x float> %44, %51
  store <2 x float> %52, ptr %50, align 4, !tbaa !137
  %53 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14, i32 0, i64 2
  %54 = load float, ptr %53, align 4, !tbaa !137
  %55 = fadd float %22, %54
  store float %55, ptr %53, align 4, !tbaa !137
  %56 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 11
  %57 = load i32, ptr %56, align 8, !tbaa !321
  %58 = add nsw i32 %57, 1
  store i32 %58, ptr %56, align 8, !tbaa !321
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3(ptr nocapture noundef %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #21 align 2 {
  %3 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %4 = load float, ptr %1, align 4, !tbaa !137
  %5 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %6 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %7 = load float, ptr %6, align 4, !tbaa !137
  %8 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %9 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %10 = load float, ptr %9, align 4, !tbaa !137
  %11 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %12 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %13 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %14 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %15 = load float, ptr %14, align 4, !tbaa !137
  %16 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %17 = load float, ptr %16, align 4, !tbaa !137
  %18 = fmul float %7, %17
  %19 = tail call float @llvm.fmuladd.f32(float %15, float %4, float %18)
  %20 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = tail call float @llvm.fmuladd.f32(float %21, float %10, float %19)
  %23 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1
  %24 = load float, ptr %3, align 4, !tbaa !137
  %25 = load float, ptr %5, align 4, !tbaa !137
  %26 = load float, ptr %8, align 4, !tbaa !137
  %27 = load float, ptr %11, align 4, !tbaa !137
  %28 = load float, ptr %12, align 4, !tbaa !137
  %29 = insertelement <2 x float> poison, float %7, i64 0
  %30 = shufflevector <2 x float> %29, <2 x float> poison, <2 x i32> zeroinitializer
  %31 = insertelement <2 x float> poison, float %25, i64 0
  %32 = insertelement <2 x float> %31, float %28, i64 1
  %33 = fmul <2 x float> %30, %32
  %34 = insertelement <2 x float> poison, float %24, i64 0
  %35 = insertelement <2 x float> %34, float %27, i64 1
  %36 = insertelement <2 x float> poison, float %4, i64 0
  %37 = shufflevector <2 x float> %36, <2 x float> poison, <2 x i32> zeroinitializer
  %38 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %35, <2 x float> %37, <2 x float> %33)
  %39 = load float, ptr %13, align 4, !tbaa !137
  %40 = insertelement <2 x float> poison, float %26, i64 0
  %41 = insertelement <2 x float> %40, float %39, i64 1
  %42 = insertelement <2 x float> poison, float %10, i64 0
  %43 = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> zeroinitializer
  %44 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %41, <2 x float> %43, <2 x float> %38)
  %45 = load <2 x float>, ptr %23, align 4, !tbaa !137
  %46 = fadd <2 x float> %44, %45
  store <2 x float> %46, ptr %23, align 4, !tbaa !137
  %47 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1, i32 0, i64 2
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fadd float %22, %48
  store float %49, ptr %47, align 4, !tbaa !137
  %50 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 12
  %51 = load i32, ptr %50, align 4, !tbaa !322
  %52 = add nsw i32 %51, 1
  store i32 %52, ptr %50, align 4, !tbaa !322
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE(ptr nocapture noundef %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(33) %1) local_unnamed_addr #21 align 2 {
  %3 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %1, i64 0, i32 2
  %4 = load i8, ptr %3, align 4
  %5 = and i8 %4, 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %65, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %9 = load float, ptr %1, align 4, !tbaa !137
  %10 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %11 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %12 = load float, ptr %11, align 4, !tbaa !137
  %13 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %14 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %15 = load float, ptr %14, align 4, !tbaa !137
  %16 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %17 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %18 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %19 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %20 = load float, ptr %19, align 4, !tbaa !137
  %21 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %22 = load float, ptr %21, align 4, !tbaa !137
  %23 = fmul float %12, %22
  %24 = tail call float @llvm.fmuladd.f32(float %20, float %9, float %23)
  %25 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %26 = load float, ptr %25, align 4, !tbaa !137
  %27 = tail call float @llvm.fmuladd.f32(float %26, float %15, float %24)
  %28 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1
  %29 = load float, ptr %8, align 4, !tbaa !137
  %30 = load float, ptr %10, align 4, !tbaa !137
  %31 = load float, ptr %13, align 4, !tbaa !137
  %32 = load float, ptr %16, align 4, !tbaa !137
  %33 = load float, ptr %17, align 4, !tbaa !137
  %34 = insertelement <2 x float> poison, float %12, i64 0
  %35 = shufflevector <2 x float> %34, <2 x float> poison, <2 x i32> zeroinitializer
  %36 = insertelement <2 x float> poison, float %30, i64 0
  %37 = insertelement <2 x float> %36, float %33, i64 1
  %38 = fmul <2 x float> %35, %37
  %39 = insertelement <2 x float> poison, float %29, i64 0
  %40 = insertelement <2 x float> %39, float %32, i64 1
  %41 = insertelement <2 x float> poison, float %9, i64 0
  %42 = shufflevector <2 x float> %41, <2 x float> poison, <2 x i32> zeroinitializer
  %43 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %40, <2 x float> %42, <2 x float> %38)
  %44 = load float, ptr %18, align 4, !tbaa !137
  %45 = insertelement <2 x float> poison, float %31, i64 0
  %46 = insertelement <2 x float> %45, float %44, i64 1
  %47 = insertelement <2 x float> poison, float %15, i64 0
  %48 = shufflevector <2 x float> %47, <2 x float> poison, <2 x i32> zeroinitializer
  %49 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %46, <2 x float> %48, <2 x float> %43)
  %50 = load <2 x float>, ptr %28, align 4, !tbaa !137
  %51 = fadd <2 x float> %49, %50
  store <2 x float> %51, ptr %28, align 4, !tbaa !137
  %52 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 9, i64 1, i32 0, i64 2
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = fadd float %27, %53
  store float %54, ptr %52, align 4, !tbaa !137
  %55 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14
  %56 = load <2 x float>, ptr %55, align 4, !tbaa !137
  %57 = fadd <2 x float> %49, %56
  store <2 x float> %57, ptr %55, align 4, !tbaa !137
  %58 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 14, i32 0, i64 2
  %59 = load float, ptr %58, align 4, !tbaa !137
  %60 = fadd float %27, %59
  store float %60, ptr %58, align 4, !tbaa !137
  %61 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 11
  %62 = load i32, ptr %61, align 8, !tbaa !321
  %63 = add nsw i32 %62, 1
  store i32 %63, ptr %61, align 8, !tbaa !321
  %64 = load i8, ptr %3, align 4
  br label %65

65:                                               ; preds = %7, %2
  %66 = phi i8 [ %64, %7 ], [ %4, %2 ]
  %67 = and i8 %66, 2
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %121, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %1, i64 0, i32 1
  %71 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7
  %72 = load float, ptr %70, align 4, !tbaa !137
  %73 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %74 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %1, i64 0, i32 1, i32 0, i64 1
  %75 = load float, ptr %74, align 4, !tbaa !137
  %76 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %77 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %1, i64 0, i32 1, i32 0, i64 2
  %78 = load float, ptr %77, align 4, !tbaa !137
  %79 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1
  %80 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %81 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %82 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2
  %83 = load float, ptr %82, align 4, !tbaa !137
  %84 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %85 = load float, ptr %84, align 4, !tbaa !137
  %86 = fmul float %75, %85
  %87 = tail call float @llvm.fmuladd.f32(float %83, float %72, float %86)
  %88 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %89 = load float, ptr %88, align 4, !tbaa !137
  %90 = tail call float @llvm.fmuladd.f32(float %89, float %78, float %87)
  %91 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1
  %92 = load float, ptr %71, align 4, !tbaa !137
  %93 = load float, ptr %73, align 4, !tbaa !137
  %94 = load float, ptr %76, align 4, !tbaa !137
  %95 = load float, ptr %79, align 4, !tbaa !137
  %96 = load float, ptr %80, align 4, !tbaa !137
  %97 = insertelement <2 x float> poison, float %75, i64 0
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> zeroinitializer
  %99 = insertelement <2 x float> poison, float %93, i64 0
  %100 = insertelement <2 x float> %99, float %96, i64 1
  %101 = fmul <2 x float> %98, %100
  %102 = insertelement <2 x float> poison, float %92, i64 0
  %103 = insertelement <2 x float> %102, float %95, i64 1
  %104 = insertelement <2 x float> poison, float %72, i64 0
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer
  %106 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %103, <2 x float> %105, <2 x float> %101)
  %107 = load float, ptr %81, align 4, !tbaa !137
  %108 = insertelement <2 x float> poison, float %94, i64 0
  %109 = insertelement <2 x float> %108, float %107, i64 1
  %110 = insertelement <2 x float> poison, float %78, i64 0
  %111 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> zeroinitializer
  %112 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %109, <2 x float> %111, <2 x float> %106)
  %113 = load <2 x float>, ptr %91, align 4, !tbaa !137
  %114 = fadd <2 x float> %112, %113
  store <2 x float> %114, ptr %91, align 4, !tbaa !137
  %115 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 1, i32 0, i64 2
  %116 = load float, ptr %115, align 4, !tbaa !137
  %117 = fadd float %90, %116
  store float %117, ptr %115, align 4, !tbaa !137
  %118 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 12
  %119 = load i32, ptr %118, align 4, !tbaa !322
  %120 = add nsw i32 %119, 1
  store i32 %120, ptr %118, align 4, !tbaa !322
  br label %121

121:                                              ; preds = %69, %65
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3(ptr nocapture noundef %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1) local_unnamed_addr #22 align 2 {
  %3 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 5
  %4 = load float, ptr %3, align 4, !tbaa !137
  %5 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %6 = load float, ptr %5, align 4, !tbaa !137
  %7 = fmul float %4, %6
  %8 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10
  %9 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %10 = insertelement <2 x float> poison, float %4, i64 0
  %11 = shufflevector <2 x float> %10, <2 x float> poison, <2 x i32> zeroinitializer
  %12 = fmul <2 x float> %11, %9
  %13 = load <2 x float>, ptr %8, align 4, !tbaa !137
  %14 = fadd <2 x float> %12, %13
  store <2 x float> %14, ptr %8, align 4, !tbaa !137
  %15 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 10, i64 0, i32 0, i64 2
  %16 = load float, ptr %15, align 4, !tbaa !137
  %17 = fadd float %7, %16
  store float %17, ptr %15, align 4, !tbaa !137
  %18 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 12
  %19 = load i32, ptr %18, align 4, !tbaa !322
  %20 = add nsw i32 %19, 1
  store i32 %20, ptr %18, align 4, !tbaa !322
  ret void
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca <{ [2 x ptr], float, i8, [3 x i8], float, float, float, %class.btVector3, [4 x i8] }>, align 8
  %5 = alloca %class.btAlignedObjectArray.84, align 8
  %6 = alloca %struct.NodeLinks, align 8
  %7 = icmp sgt i32 %1, 1
  br i1 %7, label %8, label %676

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %10 = load i32, ptr %9, align 4, !tbaa !88
  %11 = mul nsw i32 %10, %10
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %13) #36
  %15 = icmp sgt i32 %10, 0
  br i1 %15, label %16, label %40

16:                                               ; preds = %8
  %17 = zext i32 %10 to i64
  %18 = zext i32 %10 to i64
  br label %19

19:                                               ; preds = %16, %37
  %20 = phi i64 [ 0, %16 ], [ %38, %37 ]
  %21 = mul nsw i64 %20, %17
  %22 = add nuw nsw i64 %21, %20
  %23 = getelementptr inbounds i32, ptr %14, i64 %22
  br label %24

24:                                               ; preds = %19, %34
  %25 = phi i64 [ 0, %19 ], [ %35, %34 ]
  %26 = icmp eq i64 %25, %20
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = mul nsw i64 %25, %17
  %29 = add nuw nsw i64 %28, %20
  %30 = getelementptr inbounds i32, ptr %14, i64 %29
  store i32 2147483647, ptr %30, align 4, !tbaa !140
  %31 = add nuw nsw i64 %25, %21
  %32 = getelementptr inbounds i32, ptr %14, i64 %31
  store i32 2147483647, ptr %32, align 4, !tbaa !140
  br label %34

33:                                               ; preds = %24
  store i32 0, ptr %23, align 4, !tbaa !140
  br label %34

34:                                               ; preds = %33, %27
  %35 = add nuw nsw i64 %25, 1
  %36 = icmp eq i64 %35, %18
  br i1 %36, label %37, label %24

37:                                               ; preds = %34
  %38 = add nuw nsw i64 %20, 1
  %39 = icmp eq i64 %38, %18
  br i1 %39, label %40, label %19

40:                                               ; preds = %37, %8
  %41 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %42 = load i32, ptr %41, align 4, !tbaa !92
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %75

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %46 = load ptr, ptr %45, align 8, !tbaa !91
  %47 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %48 = load ptr, ptr %47, align 8, !tbaa !87
  %49 = ptrtoint ptr %48 to i64
  %50 = zext i32 %42 to i64
  br label %51

51:                                               ; preds = %44, %51
  %52 = phi i64 [ 0, %44 ], [ %73, %51 ]
  %53 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %46, i64 %52, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !219
  %55 = ptrtoint ptr %54 to i64
  %56 = sub i64 %55, %49
  %57 = sdiv exact i64 %56, 120
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %46, i64 %52, i32 1, i64 1
  %60 = load ptr, ptr %59, align 8, !tbaa !219
  %61 = ptrtoint ptr %60 to i64
  %62 = sub i64 %61, %49
  %63 = sdiv exact i64 %62, 120
  %64 = trunc i64 %63 to i32
  %65 = mul nsw i32 %10, %64
  %66 = add nsw i32 %65, %58
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, ptr %14, i64 %67
  store i32 1, ptr %68, align 4, !tbaa !140
  %69 = mul nsw i32 %10, %58
  %70 = add nsw i32 %69, %64
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, ptr %14, i64 %71
  store i32 1, ptr %72, align 4, !tbaa !140
  %73 = add nuw nsw i64 %52, 1
  %74 = icmp eq i64 %73, %50
  br i1 %74, label %75, label %51

75:                                               ; preds = %51, %40
  %76 = icmp eq i32 %1, 2
  br i1 %76, label %117, label %77

77:                                               ; preds = %75
  br i1 %15, label %78, label %674

78:                                               ; preds = %77
  %79 = zext i32 %10 to i64
  %80 = zext i32 %10 to i64
  br label %81

81:                                               ; preds = %78, %114
  %82 = phi i64 [ 0, %78 ], [ %115, %114 ]
  %83 = mul nsw i64 %82, %79
  br label %84

84:                                               ; preds = %81, %107
  %85 = phi i64 [ 0, %81 ], [ %87, %107 ]
  %86 = phi i64 [ 1, %81 ], [ %108, %107 ]
  %87 = add nuw nsw i64 %85, 1
  %88 = icmp ult i64 %87, %79
  br i1 %88, label %110, label %107

89:                                               ; preds = %110, %104
  %90 = phi i64 [ %86, %110 ], [ %105, %104 ]
  %91 = add nuw nsw i64 %90, %83
  %92 = getelementptr inbounds i32, ptr %14, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !140
  %94 = load i32, ptr %113, align 4, !tbaa !140
  %95 = add i32 %94, %93
  %96 = add nuw nsw i64 %90, %111
  %97 = getelementptr inbounds i32, ptr %14, i64 %96
  %98 = load i32, ptr %97, align 4, !tbaa !140
  %99 = icmp ugt i32 %98, %95
  br i1 %99, label %100, label %104

100:                                              ; preds = %89
  %101 = mul nsw i64 %90, %79
  %102 = add nuw nsw i64 %101, %85
  %103 = getelementptr inbounds i32, ptr %14, i64 %102
  store i32 %95, ptr %103, align 4, !tbaa !140
  store i32 %95, ptr %97, align 4, !tbaa !140
  br label %104

104:                                              ; preds = %100, %89
  %105 = add nuw nsw i64 %90, 1
  %106 = icmp eq i64 %105, %80
  br i1 %106, label %107, label %89

107:                                              ; preds = %104, %84
  %108 = add nuw nsw i64 %86, 1
  %109 = icmp eq i64 %87, %80
  br i1 %109, label %114, label %84

110:                                              ; preds = %84
  %111 = mul nsw i64 %85, %79
  %112 = add nuw nsw i64 %111, %82
  %113 = getelementptr inbounds i32, ptr %14, i64 %112
  br label %89

114:                                              ; preds = %107
  %115 = add nuw nsw i64 %82, 1
  %116 = icmp eq i64 %115, %80
  br i1 %116, label %530, label %81

117:                                              ; preds = %75
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #38
  %118 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %5, i64 0, i32 6
  store i8 1, ptr %118, align 8, !tbaa !323
  %119 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %5, i64 0, i32 5
  store ptr null, ptr %119, align 8, !tbaa !326
  %120 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %5, i64 0, i32 2
  store i32 0, ptr %120, align 4, !tbaa !327
  %121 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %5, i64 0, i32 3
  store i32 0, ptr %121, align 8, !tbaa !328
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #38
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, i8 0, i64 32, i1 false)
  %122 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %6, i64 0, i32 6
  store i8 1, ptr %122, align 8, !tbaa !130
  %123 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %6, i64 0, i32 5
  %124 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %6, i64 0, i32 2
  store i32 0, ptr %124, align 4, !tbaa !132
  invoke void @_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_(ptr noundef nonnull align 8 dereferenceable(25) %5, i32 noundef %10, ptr noundef nonnull align 8 dereferenceable(32) %6)
          to label %125 unwind label %289

125:                                              ; preds = %117
  %126 = load ptr, ptr %123, align 8, !tbaa !131
  %127 = icmp eq ptr %126, null
  %128 = load i8, ptr %122, align 8
  %129 = icmp eq i8 %128, 0
  %130 = select i1 %127, i1 true, i1 %129
  br i1 %130, label %132, label %131

131:                                              ; preds = %125
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %126)
          to label %132 unwind label %287

132:                                              ; preds = %125, %131
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #38
  %133 = load i32, ptr %41, align 4, !tbaa !92
  %134 = icmp sgt i32 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %132
  %136 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %137 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  br label %144

138:                                              ; preds = %426, %132
  %139 = load i32, ptr %120, align 4, !tbaa !327
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %462

141:                                              ; preds = %138
  %142 = load ptr, ptr %119, align 8, !tbaa !326
  %143 = zext i32 %139 to i64
  br label %431

144:                                              ; preds = %135, %426
  %145 = phi i64 [ 0, %135 ], [ %427, %426 ]
  %146 = load ptr, ptr %136, align 8, !tbaa !91
  %147 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %146, i64 %145, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !219
  %149 = load ptr, ptr %137, align 8, !tbaa !87
  %150 = ptrtoint ptr %148 to i64
  %151 = ptrtoint ptr %149 to i64
  %152 = sub i64 %150, %151
  %153 = sdiv exact i64 %152, 120
  %154 = trunc i64 %153 to i32
  %155 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %146, i64 %145, i32 1, i64 1
  %156 = load ptr, ptr %155, align 8, !tbaa !219
  %157 = ptrtoint ptr %156 to i64
  %158 = sub i64 %157, %151
  %159 = sdiv exact i64 %158, 120
  %160 = trunc i64 %159 to i32
  %161 = load ptr, ptr %119, align 8, !tbaa !326
  %162 = shl i64 %153, 32
  %163 = ashr exact i64 %162, 32
  %164 = getelementptr inbounds %struct.NodeLinks, ptr %161, i64 %163
  %165 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %164, i64 0, i32 2
  %166 = load i32, ptr %165, align 4, !tbaa !132
  %167 = icmp sgt i32 %166, 0
  br i1 %167, label %168, label %183

168:                                              ; preds = %144
  %169 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %164, i64 0, i32 5
  %170 = load ptr, ptr %169, align 8, !tbaa !131
  %171 = zext i32 %166 to i64
  br label %172

172:                                              ; preds = %177, %168
  %173 = phi i64 [ 0, %168 ], [ %178, %177 ]
  %174 = getelementptr inbounds i32, ptr %170, i64 %173
  %175 = load i32, ptr %174, align 4, !tbaa !140
  %176 = icmp eq i32 %175, %160
  br i1 %176, label %180, label %177

177:                                              ; preds = %172
  %178 = add nuw nsw i64 %173, 1
  %179 = icmp eq i64 %178, %171
  br i1 %179, label %183, label %172

180:                                              ; preds = %172
  %181 = trunc i64 %173 to i32
  %182 = icmp eq i32 %166, %181
  br i1 %182, label %183, label %301

183:                                              ; preds = %177, %144, %180
  %184 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %164, i64 0, i32 3
  %185 = load i32, ptr %184, align 8, !tbaa !133
  %186 = icmp eq i32 %166, %185
  br i1 %186, label %187, label %278

187:                                              ; preds = %183
  %188 = icmp eq i32 %166, 0
  %189 = shl nsw i32 %166, 1
  %190 = select i1 %188, i32 1, i32 %189
  %191 = icmp slt i32 %166, %190
  br i1 %191, label %192, label %278

192:                                              ; preds = %187
  %193 = icmp eq i32 %190, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %192
  %195 = sext i32 %190 to i64
  %196 = shl nsw i64 %195, 2
  %197 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %196, i32 noundef 16)
          to label %198 unwind label %299

198:                                              ; preds = %194
  %199 = load i32, ptr %165, align 4, !tbaa !132
  br label %200

200:                                              ; preds = %198, %192
  %201 = phi i32 [ %199, %198 ], [ %166, %192 ]
  %202 = phi ptr [ %197, %198 ], [ null, %192 ]
  %203 = icmp sgt i32 %201, 0
  %204 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %164, i64 0, i32 5
  %205 = load ptr, ptr %204, align 8, !tbaa !131
  br i1 %203, label %206, label %265

206:                                              ; preds = %200
  %207 = ptrtoint ptr %205 to i64
  %208 = ptrtoint ptr %202 to i64
  %209 = zext i32 %201 to i64
  %210 = icmp ult i32 %201, 8
  %211 = sub i64 %208, %207
  %212 = icmp ult i64 %211, 32
  %213 = select i1 %210, i1 true, i1 %212
  br i1 %213, label %228, label %214

214:                                              ; preds = %206
  %215 = and i64 %209, 4294967288
  br label %216

216:                                              ; preds = %216, %214
  %217 = phi i64 [ 0, %214 ], [ %224, %216 ]
  %218 = getelementptr inbounds i32, ptr %202, i64 %217
  %219 = getelementptr inbounds i32, ptr %205, i64 %217
  %220 = load <4 x i32>, ptr %219, align 4, !tbaa !140
  %221 = getelementptr inbounds i32, ptr %219, i64 4
  %222 = load <4 x i32>, ptr %221, align 4, !tbaa !140
  store <4 x i32> %220, ptr %218, align 4, !tbaa !140
  %223 = getelementptr inbounds i32, ptr %218, i64 4
  store <4 x i32> %222, ptr %223, align 4, !tbaa !140
  %224 = add nuw i64 %217, 8
  %225 = icmp eq i64 %224, %215
  br i1 %225, label %226, label %216, !llvm.loop !329

226:                                              ; preds = %216
  %227 = icmp eq i64 %215, %209
  br i1 %227, label %267, label %228

228:                                              ; preds = %206, %226
  %229 = phi i64 [ 0, %206 ], [ %215, %226 ]
  %230 = xor i64 %229, -1
  %231 = add nsw i64 %230, %209
  %232 = and i64 %209, 3
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %243, label %234

234:                                              ; preds = %228, %234
  %235 = phi i64 [ %240, %234 ], [ %229, %228 ]
  %236 = phi i64 [ %241, %234 ], [ 0, %228 ]
  %237 = getelementptr inbounds i32, ptr %202, i64 %235
  %238 = getelementptr inbounds i32, ptr %205, i64 %235
  %239 = load i32, ptr %238, align 4, !tbaa !140
  store i32 %239, ptr %237, align 4, !tbaa !140
  %240 = add nuw nsw i64 %235, 1
  %241 = add i64 %236, 1
  %242 = icmp eq i64 %241, %232
  br i1 %242, label %243, label %234, !llvm.loop !330

243:                                              ; preds = %234, %228
  %244 = phi i64 [ %229, %228 ], [ %240, %234 ]
  %245 = icmp ult i64 %231, 3
  br i1 %245, label %267, label %246

246:                                              ; preds = %243, %246
  %247 = phi i64 [ %263, %246 ], [ %244, %243 ]
  %248 = getelementptr inbounds i32, ptr %202, i64 %247
  %249 = getelementptr inbounds i32, ptr %205, i64 %247
  %250 = load i32, ptr %249, align 4, !tbaa !140
  store i32 %250, ptr %248, align 4, !tbaa !140
  %251 = add nuw nsw i64 %247, 1
  %252 = getelementptr inbounds i32, ptr %202, i64 %251
  %253 = getelementptr inbounds i32, ptr %205, i64 %251
  %254 = load i32, ptr %253, align 4, !tbaa !140
  store i32 %254, ptr %252, align 4, !tbaa !140
  %255 = add nuw nsw i64 %247, 2
  %256 = getelementptr inbounds i32, ptr %202, i64 %255
  %257 = getelementptr inbounds i32, ptr %205, i64 %255
  %258 = load i32, ptr %257, align 4, !tbaa !140
  store i32 %258, ptr %256, align 4, !tbaa !140
  %259 = add nuw nsw i64 %247, 3
  %260 = getelementptr inbounds i32, ptr %202, i64 %259
  %261 = getelementptr inbounds i32, ptr %205, i64 %259
  %262 = load i32, ptr %261, align 4, !tbaa !140
  store i32 %262, ptr %260, align 4, !tbaa !140
  %263 = add nuw nsw i64 %247, 4
  %264 = icmp eq i64 %263, %209
  br i1 %264, label %267, label %246, !llvm.loop !331

265:                                              ; preds = %200
  %266 = icmp eq ptr %205, null
  br i1 %266, label %274, label %267

267:                                              ; preds = %243, %246, %226, %265
  %268 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %164, i64 0, i32 6
  %269 = load i8, ptr %268, align 8, !tbaa !130, !range !191, !noundef !192
  %270 = icmp eq i8 %269, 0
  br i1 %270, label %272, label %271

271:                                              ; preds = %267
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %205)
          to label %272 unwind label %299

272:                                              ; preds = %271, %267
  %273 = load i32, ptr %165, align 4, !tbaa !132
  br label %274

274:                                              ; preds = %272, %265
  %275 = phi i32 [ %273, %272 ], [ %201, %265 ]
  %276 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %164, i64 0, i32 6
  store i8 1, ptr %276, align 8, !tbaa !130
  store ptr %202, ptr %204, align 8, !tbaa !131
  store i32 %190, ptr %184, align 8, !tbaa !133
  %277 = load ptr, ptr %119, align 8, !tbaa !326
  br label %278

278:                                              ; preds = %183, %187, %274
  %279 = phi ptr [ %277, %274 ], [ %161, %187 ], [ %161, %183 ]
  %280 = phi i32 [ %275, %274 ], [ %166, %187 ], [ %166, %183 ]
  %281 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %164, i64 0, i32 5
  %282 = load ptr, ptr %281, align 8, !tbaa !131
  %283 = sext i32 %280 to i64
  %284 = getelementptr inbounds i32, ptr %282, i64 %283
  store i32 %160, ptr %284, align 4, !tbaa !140
  %285 = load i32, ptr %165, align 4, !tbaa !132
  %286 = add nsw i32 %285, 1
  store i32 %286, ptr %165, align 4, !tbaa !132
  br label %301

287:                                              ; preds = %131
  %288 = landingpad { ptr, i32 }
          cleanup
  br label %297

289:                                              ; preds = %117
  %290 = landingpad { ptr, i32 }
          cleanup
  %291 = load ptr, ptr %123, align 8, !tbaa !131
  %292 = icmp eq ptr %291, null
  %293 = load i8, ptr %122, align 8
  %294 = icmp eq i8 %293, 0
  %295 = select i1 %292, i1 true, i1 %294
  br i1 %295, label %297, label %296

296:                                              ; preds = %289
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %291)
          to label %297 unwind label %678

297:                                              ; preds = %289, %296, %287
  %298 = phi { ptr, i32 } [ %288, %287 ], [ %290, %296 ], [ %290, %289 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #38
  br label %527

299:                                              ; preds = %412, %335, %271, %194
  %300 = landingpad { ptr, i32 }
          cleanup
  br label %527

301:                                              ; preds = %278, %180
  %302 = phi ptr [ %279, %278 ], [ %161, %180 ]
  %303 = shl i64 %159, 32
  %304 = ashr exact i64 %303, 32
  %305 = getelementptr inbounds %struct.NodeLinks, ptr %302, i64 %304
  %306 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %305, i64 0, i32 2
  %307 = load i32, ptr %306, align 4, !tbaa !132
  %308 = icmp sgt i32 %307, 0
  br i1 %308, label %309, label %324

309:                                              ; preds = %301
  %310 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %305, i64 0, i32 5
  %311 = load ptr, ptr %310, align 8, !tbaa !131
  %312 = zext i32 %307 to i64
  br label %313

313:                                              ; preds = %318, %309
  %314 = phi i64 [ 0, %309 ], [ %319, %318 ]
  %315 = getelementptr inbounds i32, ptr %311, i64 %314
  %316 = load i32, ptr %315, align 4, !tbaa !140
  %317 = icmp eq i32 %316, %154
  br i1 %317, label %321, label %318

318:                                              ; preds = %313
  %319 = add nuw nsw i64 %314, 1
  %320 = icmp eq i64 %319, %312
  br i1 %320, label %324, label %313

321:                                              ; preds = %313
  %322 = trunc i64 %314 to i32
  %323 = icmp eq i32 %307, %322
  br i1 %323, label %324, label %426

324:                                              ; preds = %318, %301, %321
  %325 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %305, i64 0, i32 3
  %326 = load i32, ptr %325, align 8, !tbaa !133
  %327 = icmp eq i32 %307, %326
  br i1 %327, label %328, label %418

328:                                              ; preds = %324
  %329 = icmp eq i32 %307, 0
  %330 = shl nsw i32 %307, 1
  %331 = select i1 %329, i32 1, i32 %330
  %332 = icmp slt i32 %307, %331
  br i1 %332, label %333, label %418

333:                                              ; preds = %328
  %334 = icmp eq i32 %331, 0
  br i1 %334, label %341, label %335

335:                                              ; preds = %333
  %336 = sext i32 %331 to i64
  %337 = shl nsw i64 %336, 2
  %338 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %337, i32 noundef 16)
          to label %339 unwind label %299

339:                                              ; preds = %335
  %340 = load i32, ptr %306, align 4, !tbaa !132
  br label %341

341:                                              ; preds = %339, %333
  %342 = phi i32 [ %340, %339 ], [ %307, %333 ]
  %343 = phi ptr [ %338, %339 ], [ null, %333 ]
  %344 = icmp sgt i32 %342, 0
  %345 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %305, i64 0, i32 5
  %346 = load ptr, ptr %345, align 8, !tbaa !131
  br i1 %344, label %347, label %406

347:                                              ; preds = %341
  %348 = ptrtoint ptr %346 to i64
  %349 = ptrtoint ptr %343 to i64
  %350 = zext i32 %342 to i64
  %351 = icmp ult i32 %342, 8
  %352 = sub i64 %349, %348
  %353 = icmp ult i64 %352, 32
  %354 = select i1 %351, i1 true, i1 %353
  br i1 %354, label %369, label %355

355:                                              ; preds = %347
  %356 = and i64 %350, 4294967288
  br label %357

357:                                              ; preds = %357, %355
  %358 = phi i64 [ 0, %355 ], [ %365, %357 ]
  %359 = getelementptr inbounds i32, ptr %343, i64 %358
  %360 = getelementptr inbounds i32, ptr %346, i64 %358
  %361 = load <4 x i32>, ptr %360, align 4, !tbaa !140
  %362 = getelementptr inbounds i32, ptr %360, i64 4
  %363 = load <4 x i32>, ptr %362, align 4, !tbaa !140
  store <4 x i32> %361, ptr %359, align 4, !tbaa !140
  %364 = getelementptr inbounds i32, ptr %359, i64 4
  store <4 x i32> %363, ptr %364, align 4, !tbaa !140
  %365 = add nuw i64 %358, 8
  %366 = icmp eq i64 %365, %356
  br i1 %366, label %367, label %357, !llvm.loop !332

367:                                              ; preds = %357
  %368 = icmp eq i64 %356, %350
  br i1 %368, label %408, label %369

369:                                              ; preds = %347, %367
  %370 = phi i64 [ 0, %347 ], [ %356, %367 ]
  %371 = xor i64 %370, -1
  %372 = add nsw i64 %371, %350
  %373 = and i64 %350, 3
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %384, label %375

375:                                              ; preds = %369, %375
  %376 = phi i64 [ %381, %375 ], [ %370, %369 ]
  %377 = phi i64 [ %382, %375 ], [ 0, %369 ]
  %378 = getelementptr inbounds i32, ptr %343, i64 %376
  %379 = getelementptr inbounds i32, ptr %346, i64 %376
  %380 = load i32, ptr %379, align 4, !tbaa !140
  store i32 %380, ptr %378, align 4, !tbaa !140
  %381 = add nuw nsw i64 %376, 1
  %382 = add i64 %377, 1
  %383 = icmp eq i64 %382, %373
  br i1 %383, label %384, label %375, !llvm.loop !333

384:                                              ; preds = %375, %369
  %385 = phi i64 [ %370, %369 ], [ %381, %375 ]
  %386 = icmp ult i64 %372, 3
  br i1 %386, label %408, label %387

387:                                              ; preds = %384, %387
  %388 = phi i64 [ %404, %387 ], [ %385, %384 ]
  %389 = getelementptr inbounds i32, ptr %343, i64 %388
  %390 = getelementptr inbounds i32, ptr %346, i64 %388
  %391 = load i32, ptr %390, align 4, !tbaa !140
  store i32 %391, ptr %389, align 4, !tbaa !140
  %392 = add nuw nsw i64 %388, 1
  %393 = getelementptr inbounds i32, ptr %343, i64 %392
  %394 = getelementptr inbounds i32, ptr %346, i64 %392
  %395 = load i32, ptr %394, align 4, !tbaa !140
  store i32 %395, ptr %393, align 4, !tbaa !140
  %396 = add nuw nsw i64 %388, 2
  %397 = getelementptr inbounds i32, ptr %343, i64 %396
  %398 = getelementptr inbounds i32, ptr %346, i64 %396
  %399 = load i32, ptr %398, align 4, !tbaa !140
  store i32 %399, ptr %397, align 4, !tbaa !140
  %400 = add nuw nsw i64 %388, 3
  %401 = getelementptr inbounds i32, ptr %343, i64 %400
  %402 = getelementptr inbounds i32, ptr %346, i64 %400
  %403 = load i32, ptr %402, align 4, !tbaa !140
  store i32 %403, ptr %401, align 4, !tbaa !140
  %404 = add nuw nsw i64 %388, 4
  %405 = icmp eq i64 %404, %350
  br i1 %405, label %408, label %387, !llvm.loop !334

406:                                              ; preds = %341
  %407 = icmp eq ptr %346, null
  br i1 %407, label %415, label %408

408:                                              ; preds = %384, %387, %367, %406
  %409 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %305, i64 0, i32 6
  %410 = load i8, ptr %409, align 8, !tbaa !130, !range !191, !noundef !192
  %411 = icmp eq i8 %410, 0
  br i1 %411, label %413, label %412

412:                                              ; preds = %408
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %346)
          to label %413 unwind label %299

413:                                              ; preds = %412, %408
  %414 = load i32, ptr %306, align 4, !tbaa !132
  br label %415

415:                                              ; preds = %413, %406
  %416 = phi i32 [ %414, %413 ], [ %342, %406 ]
  %417 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %305, i64 0, i32 6
  store i8 1, ptr %417, align 8, !tbaa !130
  store ptr %343, ptr %345, align 8, !tbaa !131
  store i32 %331, ptr %325, align 8, !tbaa !133
  br label %418

418:                                              ; preds = %324, %328, %415
  %419 = phi i32 [ %416, %415 ], [ %307, %328 ], [ %307, %324 ]
  %420 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %305, i64 0, i32 5
  %421 = load ptr, ptr %420, align 8, !tbaa !131
  %422 = sext i32 %419 to i64
  %423 = getelementptr inbounds i32, ptr %421, i64 %422
  store i32 %154, ptr %423, align 4, !tbaa !140
  %424 = load i32, ptr %306, align 4, !tbaa !132
  %425 = add nsw i32 %424, 1
  store i32 %425, ptr %306, align 4, !tbaa !132
  br label %426

426:                                              ; preds = %418, %321
  %427 = add nuw nsw i64 %145, 1
  %428 = load i32, ptr %41, align 4, !tbaa !92
  %429 = sext i32 %428 to i64
  %430 = icmp slt i64 %427, %429
  br i1 %430, label %144, label %138

431:                                              ; preds = %141, %470
  %432 = phi i64 [ 0, %141 ], [ %471, %470 ]
  %433 = getelementptr inbounds %struct.NodeLinks, ptr %142, i64 %432
  %434 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %433, i64 0, i32 2
  %435 = load i32, ptr %434, align 4, !tbaa !132
  %436 = icmp sgt i32 %435, 0
  br i1 %436, label %437, label %470

437:                                              ; preds = %431
  %438 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %433, i64 0, i32 5
  %439 = load ptr, ptr %438, align 8, !tbaa !131
  %440 = trunc i64 %432 to i32
  %441 = mul nsw i32 %10, %440
  br label %473

442:                                              ; preds = %470
  br i1 %140, label %443, label %462

443:                                              ; preds = %442
  %444 = zext i32 %139 to i64
  br label %445

445:                                              ; preds = %457, %443
  %446 = phi i64 [ 0, %443 ], [ %460, %457 ]
  %447 = load ptr, ptr %119, align 8, !tbaa !326
  %448 = getelementptr inbounds %struct.NodeLinks, ptr %447, i64 %446
  %449 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %448, i64 0, i32 5
  %450 = load ptr, ptr %449, align 8, !tbaa !131
  %451 = icmp eq ptr %450, null
  %452 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %448, i64 0, i32 6
  %453 = load i8, ptr %452, align 8
  %454 = icmp eq i8 %453, 0
  %455 = select i1 %451, i1 true, i1 %454
  br i1 %455, label %457, label %456

456:                                              ; preds = %445
  call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %450)
  br label %457

457:                                              ; preds = %456, %445
  %458 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %448, i64 0, i32 2
  store i8 1, ptr %452, align 8, !tbaa !130
  store ptr null, ptr %449, align 8, !tbaa !131
  store i32 0, ptr %458, align 4, !tbaa !132
  %459 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %448, i64 0, i32 3
  store i32 0, ptr %459, align 8, !tbaa !133
  %460 = add nuw nsw i64 %446, 1
  %461 = icmp eq i64 %460, %444
  br i1 %461, label %462, label %445

462:                                              ; preds = %457, %138, %442
  %463 = load ptr, ptr %119, align 8, !tbaa !326
  %464 = icmp eq ptr %463, null
  %465 = load i8, ptr %118, align 8
  %466 = icmp eq i8 %465, 0
  %467 = select i1 %464, i1 true, i1 %466
  br i1 %467, label %469, label %468

468:                                              ; preds = %462
  call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %463)
  br label %469

469:                                              ; preds = %462, %468
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #38
  br label %530

470:                                              ; preds = %492, %431
  %471 = add nuw nsw i64 %432, 1
  %472 = icmp eq i64 %471, %143
  br i1 %472, label %442, label %431

473:                                              ; preds = %437, %492
  %474 = phi i32 [ %435, %437 ], [ %493, %492 ]
  %475 = phi i64 [ 0, %437 ], [ %494, %492 ]
  %476 = getelementptr inbounds i32, ptr %439, i64 %475
  %477 = load i32, ptr %476, align 4, !tbaa !140
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds %struct.NodeLinks, ptr %142, i64 %478
  %480 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %479, i64 0, i32 2
  %481 = load i32, ptr %480, align 4, !tbaa !132
  %482 = icmp sgt i32 %481, 0
  br i1 %482, label %483, label %492

483:                                              ; preds = %473
  %484 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %479, i64 0, i32 5
  %485 = load ptr, ptr %484, align 8, !tbaa !131
  %486 = mul nsw i32 %477, %10
  %487 = add nsw i32 %486, %440
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i32, ptr %14, i64 %488
  br label %497

490:                                              ; preds = %522
  %491 = load i32, ptr %434, align 4, !tbaa !132
  br label %492

492:                                              ; preds = %490, %473
  %493 = phi i32 [ %491, %490 ], [ %474, %473 ]
  %494 = add nuw nsw i64 %475, 1
  %495 = sext i32 %493 to i64
  %496 = icmp slt i64 %494, %495
  br i1 %496, label %473, label %470

497:                                              ; preds = %483, %522
  %498 = phi i32 [ %481, %483 ], [ %523, %522 ]
  %499 = phi i64 [ 0, %483 ], [ %524, %522 ]
  %500 = getelementptr inbounds i32, ptr %485, i64 %499
  %501 = load i32, ptr %500, align 4, !tbaa !140
  %502 = zext i32 %501 to i64
  %503 = icmp eq i64 %432, %502
  br i1 %503, label %522, label %504

504:                                              ; preds = %497
  %505 = load i32, ptr %489, align 4, !tbaa !140
  %506 = mul nsw i32 %501, %10
  %507 = add nsw i32 %506, %477
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i32, ptr %14, i64 %508
  %510 = load i32, ptr %509, align 4, !tbaa !140
  %511 = add i32 %510, %505
  %512 = add nsw i32 %506, %440
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i32, ptr %14, i64 %513
  %515 = load i32, ptr %514, align 4, !tbaa !140
  %516 = icmp ugt i32 %515, %511
  br i1 %516, label %517, label %522

517:                                              ; preds = %504
  %518 = add nsw i32 %501, %441
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds i32, ptr %14, i64 %519
  store i32 %511, ptr %520, align 4, !tbaa !140
  store i32 %511, ptr %514, align 4, !tbaa !140
  %521 = load i32, ptr %480, align 4, !tbaa !132
  br label %522

522:                                              ; preds = %504, %517, %497
  %523 = phi i32 [ %498, %504 ], [ %521, %517 ], [ %498, %497 ]
  %524 = add nuw nsw i64 %499, 1
  %525 = sext i32 %523 to i64
  %526 = icmp slt i64 %524, %525
  br i1 %526, label %497, label %490

527:                                              ; preds = %299, %297
  %528 = phi { ptr, i32 } [ %300, %299 ], [ %298, %297 ]
  invoke void @_ZN20btAlignedObjectArrayI9NodeLinksED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %5)
          to label %529 unwind label %678

529:                                              ; preds = %527
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #38
  resume { ptr, i32 } %528

530:                                              ; preds = %114, %469
  br i1 %15, label %531, label %674

531:                                              ; preds = %530
  %532 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %533 = icmp eq ptr %2, null
  %534 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %535 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 3
  %536 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %537 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 6
  %538 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  %539 = zext i32 %10 to i64
  %540 = zext i32 %10 to i64
  br label %545

541:                                              ; preds = %670, %545
  %542 = phi i32 [ %548, %545 ], [ %671, %670 ]
  %543 = add nuw nsw i64 %547, 1
  %544 = icmp eq i64 %549, %540
  br i1 %544, label %674, label %545

545:                                              ; preds = %531, %541
  %546 = phi i64 [ 0, %531 ], [ %549, %541 ]
  %547 = phi i64 [ 1, %531 ], [ %543, %541 ]
  %548 = phi i32 [ 0, %531 ], [ %542, %541 ]
  %549 = add nuw nsw i64 %546, 1
  %550 = icmp ult i64 %549, %539
  br i1 %550, label %551, label %541

551:                                              ; preds = %545
  %552 = mul nsw i64 %546, %539
  br label %553

553:                                              ; preds = %551, %670
  %554 = phi i64 [ %547, %551 ], [ %672, %670 ]
  %555 = phi i32 [ %548, %551 ], [ %671, %670 ]
  %556 = add nuw nsw i64 %554, %552
  %557 = getelementptr inbounds i32, ptr %14, i64 %556
  %558 = load i32, ptr %557, align 4, !tbaa !140
  %559 = icmp eq i32 %558, %1
  br i1 %559, label %560, label %670

560:                                              ; preds = %553
  %561 = load ptr, ptr %532, align 8, !tbaa !87
  %562 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %554
  %563 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %546
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4)
  %564 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy acquire, align 8
  %565 = icmp eq i8 %564, 0
  br i1 %565, label %566, label %571, !prof !172

566:                                              ; preds = %560
  %567 = call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  %568 = icmp eq i32 %567, 0
  br i1 %568, label %571, label %569

569:                                              ; preds = %566
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8, !tbaa !173
  %570 = call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
  call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  br label %571

571:                                              ; preds = %569, %566, %560
  %572 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(52) %4, ptr noundef nonnull align 8 dereferenceable(52) getelementptr inbounds (%"struct.btSoftBody::Link", ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 52, i1 false)
  br i1 %533, label %573, label %576

573:                                              ; preds = %571
  %574 = load ptr, ptr %534, align 8, !tbaa !119
  %575 = load ptr, ptr %574, align 8, !tbaa !219
  br label %576

576:                                              ; preds = %573, %571
  %577 = phi ptr [ %575, %573 ], [ %2, %571 ]
  %578 = load i32, ptr %41, align 4, !tbaa !92
  %579 = load i32, ptr %535, align 8, !tbaa !93
  %580 = icmp eq i32 %578, %579
  br i1 %580, label %581, label %632

581:                                              ; preds = %576
  %582 = icmp eq i32 %578, 0
  %583 = shl nsw i32 %578, 1
  %584 = select i1 %582, i32 1, i32 %583
  %585 = icmp slt i32 %578, %584
  br i1 %585, label %586, label %632

586:                                              ; preds = %581
  %587 = icmp eq i32 %584, 0
  br i1 %587, label %593, label %588

588:                                              ; preds = %586
  %589 = sext i32 %584 to i64
  %590 = mul nsw i64 %589, 72
  %591 = call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %590, i32 noundef 16)
  %592 = load i32, ptr %41, align 4, !tbaa !92
  br label %593

593:                                              ; preds = %588, %586
  %594 = phi i32 [ %592, %588 ], [ %578, %586 ]
  %595 = phi ptr [ %591, %588 ], [ null, %586 ]
  %596 = icmp sgt i32 %594, 0
  br i1 %596, label %597, label %623

597:                                              ; preds = %593
  %598 = zext i32 %594 to i64
  %599 = and i64 %598, 1
  %600 = icmp eq i32 %594, 1
  br i1 %600, label %616, label %601

601:                                              ; preds = %597
  %602 = and i64 %598, 4294967294
  br label %603

603:                                              ; preds = %603, %601
  %604 = phi i64 [ 0, %601 ], [ %613, %603 ]
  %605 = phi i64 [ 0, %601 ], [ %614, %603 ]
  %606 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %595, i64 %604
  %607 = load ptr, ptr %536, align 8, !tbaa !91
  %608 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %607, i64 %604
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %606, ptr noundef nonnull align 8 dereferenceable(72) %608, i64 72, i1 false)
  %609 = or i64 %604, 1
  %610 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %595, i64 %609
  %611 = load ptr, ptr %536, align 8, !tbaa !91
  %612 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %611, i64 %609
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %610, ptr noundef nonnull align 8 dereferenceable(72) %612, i64 72, i1 false)
  %613 = add nuw nsw i64 %604, 2
  %614 = add i64 %605, 2
  %615 = icmp eq i64 %614, %602
  br i1 %615, label %616, label %603

616:                                              ; preds = %603, %597
  %617 = phi i64 [ 0, %597 ], [ %613, %603 ]
  %618 = icmp eq i64 %599, 0
  br i1 %618, label %623, label %619

619:                                              ; preds = %616
  %620 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %595, i64 %617
  %621 = load ptr, ptr %536, align 8, !tbaa !91
  %622 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %621, i64 %617
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %620, ptr noundef nonnull align 8 dereferenceable(72) %622, i64 72, i1 false)
  br label %623

623:                                              ; preds = %619, %616, %593
  %624 = load ptr, ptr %536, align 8, !tbaa !91
  %625 = icmp eq ptr %624, null
  %626 = load i8, ptr %537, align 8
  %627 = icmp eq i8 %626, 0
  %628 = select i1 %625, i1 true, i1 %627
  br i1 %628, label %630, label %629

629:                                              ; preds = %623
  call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %624)
  br label %630

630:                                              ; preds = %629, %623
  store i8 1, ptr %537, align 8, !tbaa !90
  store ptr %595, ptr %536, align 8, !tbaa !91
  store i32 %584, ptr %535, align 8, !tbaa !93
  %631 = load i32, ptr %41, align 4, !tbaa !92
  br label %632

632:                                              ; preds = %576, %581, %630
  %633 = phi i32 [ %631, %630 ], [ %578, %581 ], [ %578, %576 ]
  %634 = load ptr, ptr %536, align 8, !tbaa !91
  %635 = sext i32 %633 to i64
  %636 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %634, i64 %635
  store ptr %572, ptr %636, align 8
  %637 = getelementptr inbounds i8, ptr %636, i64 8
  store ptr %577, ptr %637, align 8
  %638 = getelementptr inbounds i8, ptr %636, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %638, ptr noundef nonnull align 8 dereferenceable(56) %4, i64 56, i1 false)
  %639 = load i32, ptr %41, align 4, !tbaa !92
  %640 = add nsw i32 %639, 1
  store i32 %640, ptr %41, align 4, !tbaa !92
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4)
  %641 = load ptr, ptr %536, align 8, !tbaa !91
  %642 = sext i32 %639 to i64
  %643 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %641, i64 %642, i32 1
  store ptr %562, ptr %643, align 8, !tbaa !219
  %644 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %641, i64 %642, i32 1, i64 1
  store ptr %563, ptr %644, align 8, !tbaa !219
  %645 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %554, i32 1
  %646 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %546, i32 1
  %647 = load float, ptr %645, align 4, !tbaa !137
  %648 = load float, ptr %646, align 4, !tbaa !137
  %649 = fsub float %647, %648
  %650 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %554, i32 1, i32 0, i64 1
  %651 = load float, ptr %650, align 4, !tbaa !137
  %652 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %546, i32 1, i32 0, i64 1
  %653 = load float, ptr %652, align 4, !tbaa !137
  %654 = fsub float %651, %653
  %655 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %554, i32 1, i32 0, i64 2
  %656 = load float, ptr %655, align 4, !tbaa !137
  %657 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %561, i64 %546, i32 1, i32 0, i64 2
  %658 = load float, ptr %657, align 4, !tbaa !137
  %659 = fsub float %656, %658
  %660 = fmul float %654, %654
  %661 = call float @llvm.fmuladd.f32(float %649, float %649, float %660)
  %662 = call float @llvm.fmuladd.f32(float %659, float %659, float %661)
  %663 = call float @llvm.sqrt.f32(float %662)
  %664 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %641, i64 %642, i32 2
  store float %663, ptr %664, align 8, !tbaa !239
  store i8 1, ptr %538, align 4, !tbaa !147
  %665 = load ptr, ptr %536, align 8, !tbaa !91
  %666 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %665, i64 %642, i32 3
  %667 = load i8, ptr %666, align 4
  %668 = or i8 %667, 1
  store i8 %668, ptr %666, align 4
  %669 = add nsw i32 %555, 1
  br label %670

670:                                              ; preds = %553, %632
  %671 = phi i32 [ %669, %632 ], [ %555, %553 ]
  %672 = add nuw nsw i64 %554, 1
  %673 = icmp eq i64 %672, %540
  br i1 %673, label %541, label %553

674:                                              ; preds = %541, %77, %530
  %675 = phi i32 [ 0, %530 ], [ 0, %77 ], [ %542, %541 ]
  call void @_ZdaPv(ptr noundef nonnull %14) #37
  br label %676

676:                                              ; preds = %3, %674
  %677 = phi i32 [ %675, %674 ], [ 0, %3 ]
  ret i32 %677

678:                                              ; preds = %296, %527
  %679 = landingpad { ptr, i32 }
          catch ptr null
  %680 = extractvalue { ptr, i32 } %679, 0
  call void @__clang_call_terminate(ptr %680) #39
  unreachable
}

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull ptr @_Znam(i64 noundef) local_unnamed_addr #5

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_(ptr noundef nonnull align 8 dereferenceable(25) %0, i32 noundef %1, ptr noundef nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #8 comdat align 2 {
  %4 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !327
  %6 = icmp sgt i32 %5, %1
  br i1 %6, label %7, label %28

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 5
  %9 = sext i32 %1 to i64
  br label %10

10:                                               ; preds = %7, %22
  %11 = phi i64 [ %9, %7 ], [ %25, %22 ]
  %12 = load ptr, ptr %8, align 8, !tbaa !326
  %13 = getelementptr inbounds %struct.NodeLinks, ptr %12, i64 %11
  %14 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %13, i64 0, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !131
  %16 = icmp eq ptr %15, null
  %17 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %13, i64 0, i32 6
  %18 = load i8, ptr %17, align 8
  %19 = icmp eq i8 %18, 0
  %20 = select i1 %16, i1 true, i1 %19
  br i1 %20, label %22, label %21

21:                                               ; preds = %10
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %15)
  br label %22

22:                                               ; preds = %10, %21
  %23 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %13, i64 0, i32 2
  store i8 1, ptr %17, align 8, !tbaa !130
  store ptr null, ptr %14, align 8, !tbaa !131
  store i32 0, ptr %23, align 4, !tbaa !132
  %24 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %13, i64 0, i32 3
  store i32 0, ptr %24, align 8, !tbaa !133
  %25 = add nsw i64 %11, 1
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %5, %26
  br i1 %27, label %185, label %10

28:                                               ; preds = %3
  %29 = icmp slt i32 %5, %1
  br i1 %29, label %30, label %185

30:                                               ; preds = %28
  tail call void @_ZN20btAlignedObjectArrayI9NodeLinksE7reserveEi(ptr noundef nonnull align 8 dereferenceable(25) %0, i32 noundef %1)
  %31 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 5
  %32 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %2, i64 0, i32 2
  %33 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %2, i64 0, i32 5
  %34 = sext i32 %5 to i64
  br label %35

35:                                               ; preds = %30, %181
  %36 = phi i64 [ %34, %30 ], [ %182, %181 ]
  %37 = load ptr, ptr %31, align 8, !tbaa !326
  %38 = getelementptr inbounds %struct.NodeLinks, ptr %37, i64 %36
  %39 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %38, i64 0, i32 6
  store i8 1, ptr %39, align 8, !tbaa !130
  %40 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %38, i64 0, i32 5
  store ptr null, ptr %40, align 8, !tbaa !131
  %41 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %38, i64 0, i32 2
  store i32 0, ptr %41, align 4, !tbaa !132
  %42 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %38, i64 0, i32 3
  store i32 0, ptr %42, align 8, !tbaa !133
  %43 = load i32, ptr %32, align 4, !tbaa !132
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %35
  store i32 %43, ptr %41, align 4, !tbaa !132
  br label %181

46:                                               ; preds = %35
  %47 = zext i32 %43 to i64
  %48 = shl nuw nsw i64 %47, 2
  %49 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %48, i32 noundef 16)
  %50 = ptrtoint ptr %49 to i64
  %51 = load i32, ptr %41, align 4, !tbaa !132
  %52 = icmp sgt i32 %51, 0
  %53 = load ptr, ptr %40, align 8, !tbaa !131
  br i1 %52, label %54, label %112

54:                                               ; preds = %46
  %55 = ptrtoint ptr %53 to i64
  %56 = zext i32 %51 to i64
  %57 = icmp ult i32 %51, 8
  %58 = sub i64 %50, %55
  %59 = icmp ult i64 %58, 32
  %60 = select i1 %57, i1 true, i1 %59
  br i1 %60, label %75, label %61

61:                                               ; preds = %54
  %62 = and i64 %56, 4294967288
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i64 [ 0, %61 ], [ %71, %63 ]
  %65 = getelementptr inbounds i32, ptr %49, i64 %64
  %66 = getelementptr inbounds i32, ptr %53, i64 %64
  %67 = load <4 x i32>, ptr %66, align 4, !tbaa !140
  %68 = getelementptr inbounds i32, ptr %66, i64 4
  %69 = load <4 x i32>, ptr %68, align 4, !tbaa !140
  store <4 x i32> %67, ptr %65, align 4, !tbaa !140
  %70 = getelementptr inbounds i32, ptr %65, i64 4
  store <4 x i32> %69, ptr %70, align 4, !tbaa !140
  %71 = add nuw i64 %64, 8
  %72 = icmp eq i64 %71, %62
  br i1 %72, label %73, label %63, !llvm.loop !335

73:                                               ; preds = %63
  %74 = icmp eq i64 %62, %56
  br i1 %74, label %117, label %75

75:                                               ; preds = %54, %73
  %76 = phi i64 [ 0, %54 ], [ %62, %73 ]
  %77 = xor i64 %76, -1
  %78 = add nsw i64 %77, %56
  %79 = and i64 %56, 3
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %90, label %81

81:                                               ; preds = %75, %81
  %82 = phi i64 [ %87, %81 ], [ %76, %75 ]
  %83 = phi i64 [ %88, %81 ], [ 0, %75 ]
  %84 = getelementptr inbounds i32, ptr %49, i64 %82
  %85 = getelementptr inbounds i32, ptr %53, i64 %82
  %86 = load i32, ptr %85, align 4, !tbaa !140
  store i32 %86, ptr %84, align 4, !tbaa !140
  %87 = add nuw nsw i64 %82, 1
  %88 = add i64 %83, 1
  %89 = icmp eq i64 %88, %79
  br i1 %89, label %90, label %81, !llvm.loop !336

90:                                               ; preds = %81, %75
  %91 = phi i64 [ %76, %75 ], [ %87, %81 ]
  %92 = icmp ult i64 %78, 3
  br i1 %92, label %117, label %93

93:                                               ; preds = %90, %93
  %94 = phi i64 [ %110, %93 ], [ %91, %90 ]
  %95 = getelementptr inbounds i32, ptr %49, i64 %94
  %96 = getelementptr inbounds i32, ptr %53, i64 %94
  %97 = load i32, ptr %96, align 4, !tbaa !140
  store i32 %97, ptr %95, align 4, !tbaa !140
  %98 = add nuw nsw i64 %94, 1
  %99 = getelementptr inbounds i32, ptr %49, i64 %98
  %100 = getelementptr inbounds i32, ptr %53, i64 %98
  %101 = load i32, ptr %100, align 4, !tbaa !140
  store i32 %101, ptr %99, align 4, !tbaa !140
  %102 = add nuw nsw i64 %94, 2
  %103 = getelementptr inbounds i32, ptr %49, i64 %102
  %104 = getelementptr inbounds i32, ptr %53, i64 %102
  %105 = load i32, ptr %104, align 4, !tbaa !140
  store i32 %105, ptr %103, align 4, !tbaa !140
  %106 = add nuw nsw i64 %94, 3
  %107 = getelementptr inbounds i32, ptr %49, i64 %106
  %108 = getelementptr inbounds i32, ptr %53, i64 %106
  %109 = load i32, ptr %108, align 4, !tbaa !140
  store i32 %109, ptr %107, align 4, !tbaa !140
  %110 = add nuw nsw i64 %94, 4
  %111 = icmp eq i64 %110, %56
  br i1 %111, label %117, label %93, !llvm.loop !337

112:                                              ; preds = %46
  %113 = icmp eq ptr %53, null
  %114 = load i8, ptr %39, align 8
  %115 = icmp eq i8 %114, 0
  %116 = select i1 %113, i1 true, i1 %115
  br i1 %116, label %121, label %120

117:                                              ; preds = %90, %93, %73
  %118 = load i8, ptr %39, align 8, !tbaa !130, !range !191, !noundef !192
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %121, label %120

120:                                              ; preds = %117, %112
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %53)
  br label %121

121:                                              ; preds = %120, %117, %112
  store i8 1, ptr %39, align 8, !tbaa !130
  store ptr %49, ptr %40, align 8, !tbaa !131
  store i32 %43, ptr %42, align 8, !tbaa !133
  %122 = sext i32 %43 to i64
  %123 = shl nuw nsw i64 %122, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %49, i8 0, i64 %123, i1 false), !tbaa !140
  store i32 %43, ptr %41, align 4, !tbaa !132
  %124 = load ptr, ptr %33, align 8, !tbaa !131
  %125 = icmp ult i32 %43, 8
  %126 = ptrtoint ptr %124 to i64
  %127 = sub i64 %50, %126
  %128 = icmp ult i64 %127, 32
  %129 = select i1 %125, i1 true, i1 %128
  br i1 %129, label %144, label %130

130:                                              ; preds = %121
  %131 = and i64 %47, 4294967288
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %140, %132 ]
  %134 = getelementptr inbounds i32, ptr %49, i64 %133
  %135 = getelementptr inbounds i32, ptr %124, i64 %133
  %136 = load <4 x i32>, ptr %135, align 4, !tbaa !140
  %137 = getelementptr inbounds i32, ptr %135, i64 4
  %138 = load <4 x i32>, ptr %137, align 4, !tbaa !140
  store <4 x i32> %136, ptr %134, align 4, !tbaa !140
  %139 = getelementptr inbounds i32, ptr %134, i64 4
  store <4 x i32> %138, ptr %139, align 4, !tbaa !140
  %140 = add nuw i64 %133, 8
  %141 = icmp eq i64 %140, %131
  br i1 %141, label %142, label %132, !llvm.loop !338

142:                                              ; preds = %132
  %143 = icmp eq i64 %131, %47
  br i1 %143, label %181, label %144

144:                                              ; preds = %121, %142
  %145 = phi i64 [ 0, %121 ], [ %131, %142 ]
  %146 = xor i64 %145, -1
  %147 = add nsw i64 %146, %47
  %148 = and i64 %47, 3
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %159, label %150

150:                                              ; preds = %144, %150
  %151 = phi i64 [ %156, %150 ], [ %145, %144 ]
  %152 = phi i64 [ %157, %150 ], [ 0, %144 ]
  %153 = getelementptr inbounds i32, ptr %49, i64 %151
  %154 = getelementptr inbounds i32, ptr %124, i64 %151
  %155 = load i32, ptr %154, align 4, !tbaa !140
  store i32 %155, ptr %153, align 4, !tbaa !140
  %156 = add nuw nsw i64 %151, 1
  %157 = add i64 %152, 1
  %158 = icmp eq i64 %157, %148
  br i1 %158, label %159, label %150, !llvm.loop !339

159:                                              ; preds = %150, %144
  %160 = phi i64 [ %145, %144 ], [ %156, %150 ]
  %161 = icmp ult i64 %147, 3
  br i1 %161, label %181, label %162

162:                                              ; preds = %159, %162
  %163 = phi i64 [ %179, %162 ], [ %160, %159 ]
  %164 = getelementptr inbounds i32, ptr %49, i64 %163
  %165 = getelementptr inbounds i32, ptr %124, i64 %163
  %166 = load i32, ptr %165, align 4, !tbaa !140
  store i32 %166, ptr %164, align 4, !tbaa !140
  %167 = add nuw nsw i64 %163, 1
  %168 = getelementptr inbounds i32, ptr %49, i64 %167
  %169 = getelementptr inbounds i32, ptr %124, i64 %167
  %170 = load i32, ptr %169, align 4, !tbaa !140
  store i32 %170, ptr %168, align 4, !tbaa !140
  %171 = add nuw nsw i64 %163, 2
  %172 = getelementptr inbounds i32, ptr %49, i64 %171
  %173 = getelementptr inbounds i32, ptr %124, i64 %171
  %174 = load i32, ptr %173, align 4, !tbaa !140
  store i32 %174, ptr %172, align 4, !tbaa !140
  %175 = add nuw nsw i64 %163, 3
  %176 = getelementptr inbounds i32, ptr %49, i64 %175
  %177 = getelementptr inbounds i32, ptr %124, i64 %175
  %178 = load i32, ptr %177, align 4, !tbaa !140
  store i32 %178, ptr %176, align 4, !tbaa !140
  %179 = add nuw nsw i64 %163, 4
  %180 = icmp eq i64 %179, %47
  br i1 %180, label %181, label %162, !llvm.loop !340

181:                                              ; preds = %159, %162, %142, %45
  %182 = add nsw i64 %36, 1
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, %1
  br i1 %184, label %185, label %35

185:                                              ; preds = %181, %22, %28
  store i32 %1, ptr %4, align 4, !tbaa !327
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayI9NodeLinksED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !327
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %25

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 5
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %20, %5
  %9 = phi i64 [ 0, %5 ], [ %23, %20 ]
  %10 = load ptr, ptr %6, align 8, !tbaa !326
  %11 = getelementptr inbounds %struct.NodeLinks, ptr %10, i64 %9
  %12 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %11, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !131
  %14 = icmp eq ptr %13, null
  %15 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %11, i64 0, i32 6
  %16 = load i8, ptr %15, align 8
  %17 = icmp eq i8 %16, 0
  %18 = select i1 %14, i1 true, i1 %17
  br i1 %18, label %20, label %19

19:                                               ; preds = %8
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %13)
  br label %20

20:                                               ; preds = %19, %8
  %21 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %11, i64 0, i32 2
  store i8 1, ptr %15, align 8, !tbaa !130
  store ptr null, ptr %12, align 8, !tbaa !131
  store i32 0, ptr %21, align 4, !tbaa !132
  %22 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %11, i64 0, i32 3
  store i32 0, ptr %22, align 8, !tbaa !133
  %23 = add nuw nsw i64 %9, 1
  %24 = icmp eq i64 %23, %7
  br i1 %24, label %25, label %8

25:                                               ; preds = %20, %1
  %26 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 5
  %27 = load ptr, ptr %26, align 8, !tbaa !326
  %28 = icmp eq ptr %27, null
  %29 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 6
  %30 = load i8, ptr %29, align 8
  %31 = icmp eq i8 %30, 0
  %32 = select i1 %28, i1 true, i1 %31
  br i1 %32, label %34, label %33

33:                                               ; preds = %25
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %27)
  br label %34

34:                                               ; preds = %25, %33
  store i8 1, ptr %29, align 8, !tbaa !323
  store ptr null, ptr %26, align 8, !tbaa !326
  store i32 0, ptr %2, align 4, !tbaa !327
  %35 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 3
  store i32 0, ptr %35, align 8, !tbaa !328
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody20randomizeConstraintsEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #10 align 2 {
  %2 = alloca %"struct.btSoftBody::Face", align 8
  %3 = alloca %"struct.btSoftBody::Link", align 8
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !92
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %25

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %9 = zext i32 %5 to i64
  %10 = zext i32 %5 to i64
  br label %11

11:                                               ; preds = %7, %11
  %12 = phi i64 [ 0, %7 ], [ %23, %11 ]
  %13 = phi i64 [ 243703, %7 ], [ %18, %11 ]
  %14 = load ptr, ptr %8, align 8, !tbaa !91
  %15 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %14, i64 %12
  %16 = mul nuw nsw i64 %13, 1664525
  %17 = add nuw nsw i64 %16, 1013904223
  %18 = and i64 %17, 4294967295
  %19 = urem i64 %18, %9
  %20 = shl nuw i64 %19, 32
  %21 = ashr exact i64 %20, 32
  %22 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %14, i64 %21
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %3, ptr noundef nonnull align 8 dereferenceable(72) %15, i64 72, i1 false)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(68) %15, ptr noundef nonnull align 8 dereferenceable(68) %22, i64 68, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(68) %22, ptr noundef nonnull align 8 dereferenceable(68) %3, i64 68, i1 false)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %3)
  %23 = add nuw nsw i64 %12, 1
  %24 = icmp eq i64 %23, %10
  br i1 %24, label %25, label %11

25:                                               ; preds = %11, %1
  %26 = phi i64 [ 243703, %1 ], [ %18, %11 ]
  %27 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %28 = load i32, ptr %27, align 4, !tbaa !96
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %48

30:                                               ; preds = %25
  %31 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %32 = zext i32 %28 to i64
  %33 = zext i32 %28 to i64
  br label %34

34:                                               ; preds = %30, %34
  %35 = phi i64 [ 0, %30 ], [ %46, %34 ]
  %36 = phi i64 [ %26, %30 ], [ %41, %34 ]
  %37 = load ptr, ptr %31, align 8, !tbaa !95
  %38 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %37, i64 %35
  %39 = mul nuw nsw i64 %36, 1664525
  %40 = add nuw nsw i64 %39, 1013904223
  %41 = and i64 %40, 4294967295
  %42 = urem i64 %41, %32
  %43 = shl nuw i64 %42, 32
  %44 = ashr exact i64 %43, 32
  %45 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %37, i64 %44
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %2)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %2, ptr noundef nonnull align 8 dereferenceable(72) %38, i64 72, i1 false)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %38, ptr noundef nonnull align 8 dereferenceable(72) %45, i64 72, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %45, ptr noundef nonnull align 8 dereferenceable(72) %2, i64 72, i1 false)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %2)
  %46 = add nuw nsw i64 %35, 1
  %47 = icmp eq i64 %46, %33
  br i1 %47, label %48, label %34

48:                                               ; preds = %34, %25
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody14releaseClusterEi(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !123
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds ptr, ptr %4, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !219
  %8 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %7, i64 0, i32 15
  %9 = load ptr, ptr %8, align 8, !tbaa !221
  %10 = icmp eq ptr %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  tail call void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64) %12, ptr noundef nonnull %9)
  br label %13

13:                                               ; preds = %11, %2
  tail call void @_ZN10btSoftBody7ClusterD2Ev(ptr noundef nonnull align 8 dereferenceable(424) %7)
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %7)
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %15 = load i32, ptr %14, align 4, !tbaa !124
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %42

17:                                               ; preds = %13
  %18 = load ptr, ptr %3, align 8, !tbaa !123
  %19 = zext i32 %15 to i64
  br label %20

20:                                               ; preds = %25, %17
  %21 = phi i64 [ 0, %17 ], [ %26, %25 ]
  %22 = getelementptr inbounds ptr, ptr %18, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !219
  %24 = icmp eq ptr %23, %7
  br i1 %24, label %28, label %25

25:                                               ; preds = %20
  %26 = add nuw nsw i64 %21, 1
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %42, label %20

28:                                               ; preds = %20
  %29 = trunc i64 %21 to i32
  %30 = icmp sgt i32 %15, %29
  br i1 %30, label %31, label %42

31:                                               ; preds = %28
  %32 = add nsw i32 %15, -1
  %33 = shl i64 %21, 32
  %34 = ashr exact i64 %33, 32
  %35 = getelementptr inbounds ptr, ptr %18, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !219
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds ptr, ptr %18, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !219
  store ptr %39, ptr %35, align 8, !tbaa !219
  %40 = load ptr, ptr %3, align 8, !tbaa !123
  %41 = getelementptr inbounds ptr, ptr %40, i64 %37
  store ptr %36, ptr %41, align 8, !tbaa !219
  store i32 %32, ptr %14, align 4, !tbaa !124
  br label %42

42:                                               ; preds = %25, %13, %28, %31
  ret void
}

declare void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64), ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody7ClusterD2Ev(ptr noundef nonnull align 8 dereferenceable(424) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  %2 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 2, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !33
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 2, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
          to label %10 unwind label %35

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 2, i32 2
  store i8 1, ptr %5, align 8, !tbaa !30
  store ptr null, ptr %2, align 8, !tbaa !33
  store i32 0, ptr %11, align 4, !tbaa !34
  %12 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 2, i32 3
  store i32 0, ptr %12, align 8, !tbaa !35
  %13 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 1, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !39
  %15 = icmp eq ptr %14, null
  %16 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 1, i32 6
  %17 = load i8, ptr %16, align 8
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %15, i1 true, i1 %18
  br i1 %19, label %21, label %20

20:                                               ; preds = %10
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %14)
          to label %21 unwind label %38

21:                                               ; preds = %10, %20
  %22 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 1, i32 2
  store i8 1, ptr %16, align 8, !tbaa !36
  store ptr null, ptr %13, align 8, !tbaa !39
  store i32 0, ptr %22, align 4, !tbaa !40
  %23 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 1, i32 3
  store i32 0, ptr %23, align 8, !tbaa !41
  %24 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 5
  %25 = load ptr, ptr %24, align 8, !tbaa !320
  %26 = icmp eq ptr %25, null
  %27 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 6
  %28 = load i8, ptr %27, align 8
  %29 = icmp eq i8 %28, 0
  %30 = select i1 %26, i1 true, i1 %29
  br i1 %30, label %32, label %31

31:                                               ; preds = %21
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %25)
  br label %32

32:                                               ; preds = %21, %31
  %33 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 2
  store i8 1, ptr %27, align 8, !tbaa !341
  store ptr null, ptr %24, align 8, !tbaa !320
  store i32 0, ptr %33, align 4, !tbaa !319
  %34 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 3
  store i32 0, ptr %34, align 8, !tbaa !342
  ret void

35:                                               ; preds = %9
  %36 = landingpad { ptr, i32 }
          cleanup
  %37 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %0, i64 0, i32 1
  invoke void @_ZN20btAlignedObjectArrayIfED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %37)
          to label %40 unwind label %43

38:                                               ; preds = %20
  %39 = landingpad { ptr, i32 }
          cleanup
  br label %40

40:                                               ; preds = %35, %38
  %41 = phi { ptr, i32 } [ %39, %38 ], [ %36, %35 ]
  invoke void @_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0)
          to label %42 unwind label %43

42:                                               ; preds = %40
  resume { ptr, i32 } %41

43:                                               ; preds = %40, %35
  %44 = landingpad { ptr, i32 }
          catch ptr null
  %45 = extractvalue { ptr, i32 } %44, 0
  tail call void @__clang_call_terminate(ptr %45) #39
  unreachable
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN10btSoftBody16generateClustersEii(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca [3 x i32], align 4
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %6 = load i32, ptr %5, align 4, !tbaa !124
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %49

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  br label %11

11:                                               ; preds = %46, %8
  %12 = load ptr, ptr %9, align 8, !tbaa !123
  %13 = load ptr, ptr %12, align 8, !tbaa !219
  %14 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %13, i64 0, i32 15
  %15 = load ptr, ptr %14, align 8, !tbaa !221
  %16 = icmp eq ptr %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64) %10, ptr noundef nonnull %15)
  br label %18

18:                                               ; preds = %17, %11
  tail call void @_ZN10btSoftBody7ClusterD2Ev(ptr noundef nonnull align 8 dereferenceable(424) %13)
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %13)
  %19 = load i32, ptr %5, align 4, !tbaa !124
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %49

21:                                               ; preds = %18
  %22 = load ptr, ptr %9, align 8, !tbaa !123
  %23 = zext i32 %19 to i64
  br label %24

24:                                               ; preds = %29, %21
  %25 = phi i64 [ 0, %21 ], [ %30, %29 ]
  %26 = getelementptr inbounds ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !219
  %28 = icmp eq ptr %27, %13
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = add nuw nsw i64 %25, 1
  %31 = icmp eq i64 %30, %23
  br i1 %31, label %46, label %24

32:                                               ; preds = %24
  %33 = trunc i64 %25 to i32
  %34 = icmp sgt i32 %19, %33
  br i1 %34, label %35, label %46

35:                                               ; preds = %32
  %36 = add nsw i32 %19, -1
  %37 = shl i64 %25, 32
  %38 = ashr exact i64 %37, 32
  %39 = getelementptr inbounds ptr, ptr %22, i64 %38
  %40 = load ptr, ptr %39, align 8, !tbaa !219
  %41 = sext i32 %36 to i64
  %42 = getelementptr inbounds ptr, ptr %22, i64 %41
  %43 = load ptr, ptr %42, align 8, !tbaa !219
  store ptr %43, ptr %39, align 8, !tbaa !219
  %44 = load ptr, ptr %9, align 8, !tbaa !123
  %45 = getelementptr inbounds ptr, ptr %44, i64 %41
  store ptr %40, ptr %45, align 8, !tbaa !219
  store i32 %36, ptr %5, align 4, !tbaa !124
  br label %46

46:                                               ; preds = %29, %35, %32
  %47 = phi i32 [ %19, %32 ], [ %36, %35 ], [ %19, %29 ]
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %11, label %49

49:                                               ; preds = %18, %46, %3
  %50 = phi i32 [ %6, %3 ], [ %19, %18 ], [ %47, %46 ]
  %51 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %52 = load i32, ptr %51, align 4, !tbaa !88
  %53 = tail call i32 @llvm.smin.i32(i32 %52, i32 %1)
  %54 = icmp slt i32 %50, %53
  br i1 %54, label %55, label %158

55:                                               ; preds = %49
  %56 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 3
  %57 = load i32, ptr %56, align 8, !tbaa !125
  %58 = icmp slt i32 %57, %53
  br i1 %58, label %59, label %123

59:                                               ; preds = %55
  %60 = icmp eq i32 %53, 0
  br i1 %60, label %112, label %61

61:                                               ; preds = %59
  %62 = sext i32 %53 to i64
  %63 = shl nsw i64 %62, 3
  %64 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %63, i32 noundef 16)
  %65 = load i32, ptr %5, align 4, !tbaa !124
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %112

67:                                               ; preds = %61
  %68 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %69 = zext i32 %65 to i64
  %70 = and i64 %69, 3
  %71 = icmp ult i32 %65, 4
  br i1 %71, label %99, label %72

72:                                               ; preds = %67
  %73 = and i64 %69, 4294967292
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %96, %74 ]
  %76 = phi i64 [ 0, %72 ], [ %97, %74 ]
  %77 = getelementptr inbounds ptr, ptr %64, i64 %75
  %78 = load ptr, ptr %68, align 8, !tbaa !123
  %79 = getelementptr inbounds ptr, ptr %78, i64 %75
  %80 = load ptr, ptr %79, align 8, !tbaa !219
  store ptr %80, ptr %77, align 8, !tbaa !219
  %81 = or i64 %75, 1
  %82 = getelementptr inbounds ptr, ptr %64, i64 %81
  %83 = load ptr, ptr %68, align 8, !tbaa !123
  %84 = getelementptr inbounds ptr, ptr %83, i64 %81
  %85 = load ptr, ptr %84, align 8, !tbaa !219
  store ptr %85, ptr %82, align 8, !tbaa !219
  %86 = or i64 %75, 2
  %87 = getelementptr inbounds ptr, ptr %64, i64 %86
  %88 = load ptr, ptr %68, align 8, !tbaa !123
  %89 = getelementptr inbounds ptr, ptr %88, i64 %86
  %90 = load ptr, ptr %89, align 8, !tbaa !219
  store ptr %90, ptr %87, align 8, !tbaa !219
  %91 = or i64 %75, 3
  %92 = getelementptr inbounds ptr, ptr %64, i64 %91
  %93 = load ptr, ptr %68, align 8, !tbaa !123
  %94 = getelementptr inbounds ptr, ptr %93, i64 %91
  %95 = load ptr, ptr %94, align 8, !tbaa !219
  store ptr %95, ptr %92, align 8, !tbaa !219
  %96 = add nuw nsw i64 %75, 4
  %97 = add i64 %76, 4
  %98 = icmp eq i64 %97, %73
  br i1 %98, label %99, label %74

99:                                               ; preds = %74, %67
  %100 = phi i64 [ 0, %67 ], [ %96, %74 ]
  %101 = icmp eq i64 %70, 0
  br i1 %101, label %112, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %109, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %110, %102 ], [ 0, %99 ]
  %105 = getelementptr inbounds ptr, ptr %64, i64 %103
  %106 = load ptr, ptr %68, align 8, !tbaa !123
  %107 = getelementptr inbounds ptr, ptr %106, i64 %103
  %108 = load ptr, ptr %107, align 8, !tbaa !219
  store ptr %108, ptr %105, align 8, !tbaa !219
  %109 = add nuw nsw i64 %103, 1
  %110 = add i64 %104, 1
  %111 = icmp eq i64 %110, %70
  br i1 %111, label %112, label %102, !llvm.loop !343

112:                                              ; preds = %99, %102, %59, %61
  %113 = phi ptr [ %64, %61 ], [ null, %59 ], [ %64, %102 ], [ %64, %99 ]
  %114 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %115 = load ptr, ptr %114, align 8, !tbaa !123
  %116 = icmp eq ptr %115, null
  %117 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 6
  %118 = load i8, ptr %117, align 8
  %119 = icmp eq i8 %118, 0
  %120 = select i1 %116, i1 true, i1 %119
  br i1 %120, label %122, label %121

121:                                              ; preds = %112
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %115)
  br label %122

122:                                              ; preds = %121, %112
  store i8 1, ptr %117, align 8, !tbaa !122
  store ptr %113, ptr %114, align 8, !tbaa !123
  store i32 %53, ptr %56, align 8, !tbaa !125
  br label %123

123:                                              ; preds = %122, %55
  %124 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %125 = sext i32 %50 to i64
  %126 = sext i32 %53 to i64
  %127 = sub nsw i64 %126, %125
  %128 = xor i64 %125, -1
  %129 = add nsw i64 %128, %126
  %130 = and i64 %127, 3
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %123, %132
  %133 = phi i64 [ %137, %132 ], [ %125, %123 ]
  %134 = phi i64 [ %138, %132 ], [ 0, %123 ]
  %135 = load ptr, ptr %124, align 8, !tbaa !123
  %136 = getelementptr inbounds ptr, ptr %135, i64 %133
  store ptr null, ptr %136, align 8, !tbaa !219
  %137 = add nsw i64 %133, 1
  %138 = add i64 %134, 1
  %139 = icmp eq i64 %138, %130
  br i1 %139, label %140, label %132, !llvm.loop !344

140:                                              ; preds = %132, %123
  %141 = phi i64 [ %125, %123 ], [ %137, %132 ]
  %142 = icmp ult i64 %129, 3
  br i1 %142, label %158, label %143

143:                                              ; preds = %140, %143
  %144 = phi i64 [ %156, %143 ], [ %141, %140 ]
  %145 = load ptr, ptr %124, align 8, !tbaa !123
  %146 = getelementptr inbounds ptr, ptr %145, i64 %144
  store ptr null, ptr %146, align 8, !tbaa !219
  %147 = add nsw i64 %144, 1
  %148 = load ptr, ptr %124, align 8, !tbaa !123
  %149 = getelementptr inbounds ptr, ptr %148, i64 %147
  store ptr null, ptr %149, align 8, !tbaa !219
  %150 = add nsw i64 %144, 2
  %151 = load ptr, ptr %124, align 8, !tbaa !123
  %152 = getelementptr inbounds ptr, ptr %151, i64 %150
  store ptr null, ptr %152, align 8, !tbaa !219
  %153 = add nsw i64 %144, 3
  %154 = load ptr, ptr %124, align 8, !tbaa !123
  %155 = getelementptr inbounds ptr, ptr %154, i64 %153
  store ptr null, ptr %155, align 8, !tbaa !219
  %156 = add nsw i64 %144, 4
  %157 = icmp eq i64 %156, %126
  br i1 %157, label %158, label %143

158:                                              ; preds = %140, %143, %49
  store i32 %53, ptr %5, align 4, !tbaa !124
  %159 = icmp sgt i32 %53, 0
  br i1 %159, label %160, label %1410

160:                                              ; preds = %158
  %161 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  br label %162

162:                                              ; preds = %160, %162
  %163 = phi i64 [ 0, %160 ], [ %186, %162 ]
  %164 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 424, i32 noundef 16)
  %165 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %164, i64 0, i32 6
  store i8 1, ptr %165, align 8, !tbaa !341
  %166 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %164, i64 0, i32 5
  store ptr null, ptr %166, align 8, !tbaa !320
  %167 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %164, i64 0, i32 2
  store i32 0, ptr %167, align 4, !tbaa !319
  %168 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %164, i64 0, i32 3
  store i32 0, ptr %168, align 8, !tbaa !342
  %169 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 1, i32 6
  store i8 1, ptr %169, align 8, !tbaa !36
  %170 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 1, i32 5
  store ptr null, ptr %170, align 8, !tbaa !39
  %171 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 1, i32 2
  store i32 0, ptr %171, align 4, !tbaa !40
  %172 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 1, i32 3
  store i32 0, ptr %172, align 8, !tbaa !41
  %173 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 2, i32 6
  store i8 1, ptr %173, align 8, !tbaa !30
  %174 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 2, i32 5
  store ptr null, ptr %174, align 8, !tbaa !33
  %175 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 2, i32 2
  store i32 0, ptr %175, align 4, !tbaa !34
  %176 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 2, i32 3
  store i32 0, ptr %176, align 8, !tbaa !35
  %177 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 15
  %178 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %177, i8 0, i64 24, i1 false)
  store <2 x float> <float 1.000000e+02, float 0x3F847AE140000000>, ptr %178, align 8, !tbaa !137
  %179 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %164, i64 0, i32 22
  store i8 0, ptr %179, align 8, !tbaa !345
  %180 = load ptr, ptr %161, align 8, !tbaa !123
  %181 = getelementptr inbounds ptr, ptr %180, i64 %163
  store ptr %164, ptr %181, align 8, !tbaa !219
  %182 = load ptr, ptr %161, align 8, !tbaa !123
  %183 = getelementptr inbounds ptr, ptr %182, i64 %163
  %184 = load ptr, ptr %183, align 8, !tbaa !219
  %185 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %184, i64 0, i32 23
  store i8 1, ptr %185, align 1, !tbaa !346
  %186 = add nuw nsw i64 %163, 1
  %187 = load i32, ptr %5, align 4, !tbaa !124
  %188 = sext i32 %187 to i64
  %189 = icmp slt i64 %186, %188
  br i1 %189, label %162, label %190

190:                                              ; preds = %162
  %191 = icmp sgt i32 %187, 0
  br i1 %191, label %192, label %1410

192:                                              ; preds = %190
  %193 = load i32, ptr %51, align 4, !tbaa !88
  %194 = icmp sgt i32 %193, 0
  br i1 %194, label %195, label %309

195:                                              ; preds = %192
  %196 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %197 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  br label %198

198:                                              ; preds = %195, %298
  %199 = phi i32 [ %193, %195 ], [ %299, %298 ]
  %200 = phi i64 [ 0, %195 ], [ %306, %298 ]
  %201 = phi float [ 0.000000e+00, %195 ], [ %210, %298 ]
  %202 = phi <2 x float> [ zeroinitializer, %195 ], [ %207, %298 ]
  %203 = load ptr, ptr %196, align 8, !tbaa !87
  %204 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %203, i64 %200
  %205 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %203, i64 %200, i32 1
  %206 = load <2 x float>, ptr %205, align 4, !tbaa !137
  %207 = fadd <2 x float> %202, %206
  %208 = getelementptr inbounds [4 x float], ptr %205, i64 0, i64 2
  %209 = load float, ptr %208, align 4, !tbaa !137
  %210 = fadd float %201, %209
  %211 = load i32, ptr %5, align 4, !tbaa !124
  %212 = trunc i64 %200 to i32
  %213 = mul i32 %212, 29873
  %214 = srem i32 %213, %211
  %215 = load ptr, ptr %197, align 8, !tbaa !123
  %216 = zext i32 %214 to i64
  %217 = getelementptr inbounds ptr, ptr %215, i64 %216
  %218 = load ptr, ptr %217, align 8, !tbaa !219
  %219 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %218, i64 0, i32 2
  %220 = load i32, ptr %219, align 4, !tbaa !319
  %221 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %218, i64 0, i32 3
  %222 = load i32, ptr %221, align 8, !tbaa !342
  %223 = icmp eq i32 %220, %222
  br i1 %223, label %224, label %298

224:                                              ; preds = %198
  %225 = icmp eq i32 %220, 0
  %226 = shl nsw i32 %220, 1
  %227 = select i1 %225, i32 1, i32 %226
  %228 = icmp slt i32 %220, %227
  br i1 %228, label %229, label %298

229:                                              ; preds = %224
  %230 = icmp eq i32 %227, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %229
  %232 = sext i32 %227 to i64
  %233 = shl nsw i64 %232, 3
  %234 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %233, i32 noundef 16)
  %235 = load i32, ptr %219, align 4, !tbaa !319
  br label %236

236:                                              ; preds = %231, %229
  %237 = phi i32 [ %235, %231 ], [ %220, %229 ]
  %238 = phi ptr [ %234, %231 ], [ null, %229 ]
  %239 = icmp sgt i32 %237, 0
  br i1 %239, label %240, label %285

240:                                              ; preds = %236
  %241 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %218, i64 0, i32 5
  %242 = zext i32 %237 to i64
  %243 = and i64 %242, 3
  %244 = icmp ult i32 %237, 4
  br i1 %244, label %272, label %245

245:                                              ; preds = %240
  %246 = and i64 %242, 4294967292
  br label %247

247:                                              ; preds = %247, %245
  %248 = phi i64 [ 0, %245 ], [ %269, %247 ]
  %249 = phi i64 [ 0, %245 ], [ %270, %247 ]
  %250 = getelementptr inbounds ptr, ptr %238, i64 %248
  %251 = load ptr, ptr %241, align 8, !tbaa !320
  %252 = getelementptr inbounds ptr, ptr %251, i64 %248
  %253 = load ptr, ptr %252, align 8, !tbaa !219
  store ptr %253, ptr %250, align 8, !tbaa !219
  %254 = or i64 %248, 1
  %255 = getelementptr inbounds ptr, ptr %238, i64 %254
  %256 = load ptr, ptr %241, align 8, !tbaa !320
  %257 = getelementptr inbounds ptr, ptr %256, i64 %254
  %258 = load ptr, ptr %257, align 8, !tbaa !219
  store ptr %258, ptr %255, align 8, !tbaa !219
  %259 = or i64 %248, 2
  %260 = getelementptr inbounds ptr, ptr %238, i64 %259
  %261 = load ptr, ptr %241, align 8, !tbaa !320
  %262 = getelementptr inbounds ptr, ptr %261, i64 %259
  %263 = load ptr, ptr %262, align 8, !tbaa !219
  store ptr %263, ptr %260, align 8, !tbaa !219
  %264 = or i64 %248, 3
  %265 = getelementptr inbounds ptr, ptr %238, i64 %264
  %266 = load ptr, ptr %241, align 8, !tbaa !320
  %267 = getelementptr inbounds ptr, ptr %266, i64 %264
  %268 = load ptr, ptr %267, align 8, !tbaa !219
  store ptr %268, ptr %265, align 8, !tbaa !219
  %269 = add nuw nsw i64 %248, 4
  %270 = add i64 %249, 4
  %271 = icmp eq i64 %270, %246
  br i1 %271, label %272, label %247

272:                                              ; preds = %247, %240
  %273 = phi i64 [ 0, %240 ], [ %269, %247 ]
  %274 = icmp eq i64 %243, 0
  br i1 %274, label %285, label %275

275:                                              ; preds = %272, %275
  %276 = phi i64 [ %282, %275 ], [ %273, %272 ]
  %277 = phi i64 [ %283, %275 ], [ 0, %272 ]
  %278 = getelementptr inbounds ptr, ptr %238, i64 %276
  %279 = load ptr, ptr %241, align 8, !tbaa !320
  %280 = getelementptr inbounds ptr, ptr %279, i64 %276
  %281 = load ptr, ptr %280, align 8, !tbaa !219
  store ptr %281, ptr %278, align 8, !tbaa !219
  %282 = add nuw nsw i64 %276, 1
  %283 = add i64 %277, 1
  %284 = icmp eq i64 %283, %243
  br i1 %284, label %285, label %275, !llvm.loop !347

285:                                              ; preds = %272, %275, %236
  %286 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %218, i64 0, i32 5
  %287 = load ptr, ptr %286, align 8, !tbaa !320
  %288 = icmp eq ptr %287, null
  %289 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %218, i64 0, i32 6
  %290 = load i8, ptr %289, align 8
  %291 = icmp eq i8 %290, 0
  %292 = select i1 %288, i1 true, i1 %291
  br i1 %292, label %295, label %293

293:                                              ; preds = %285
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %287)
  %294 = load i32, ptr %219, align 4, !tbaa !319
  br label %295

295:                                              ; preds = %293, %285
  %296 = phi i32 [ %294, %293 ], [ %237, %285 ]
  store i8 1, ptr %289, align 8, !tbaa !341
  store ptr %238, ptr %286, align 8, !tbaa !320
  store i32 %227, ptr %221, align 8, !tbaa !342
  %297 = load i32, ptr %51, align 4, !tbaa !88
  br label %298

298:                                              ; preds = %295, %224, %198
  %299 = phi i32 [ %297, %295 ], [ %199, %224 ], [ %199, %198 ]
  %300 = phi i32 [ %296, %295 ], [ %220, %224 ], [ %220, %198 ]
  %301 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %218, i64 0, i32 5
  %302 = load ptr, ptr %301, align 8, !tbaa !320
  %303 = sext i32 %300 to i64
  %304 = getelementptr inbounds ptr, ptr %302, i64 %303
  store ptr %204, ptr %304, align 8, !tbaa !219
  %305 = add nsw i32 %300, 1
  store i32 %305, ptr %219, align 4, !tbaa !319
  %306 = add nuw nsw i64 %200, 1
  %307 = sext i32 %299 to i64
  %308 = icmp slt i64 %306, %307
  br i1 %308, label %198, label %309

309:                                              ; preds = %298, %192
  %310 = phi float [ 0.000000e+00, %192 ], [ %210, %298 ]
  %311 = phi i32 [ %193, %192 ], [ %299, %298 ]
  %312 = phi <2 x float> [ zeroinitializer, %192 ], [ %207, %298 ]
  %313 = sitofp i32 %311 to float
  %314 = fdiv float 1.000000e+00, %313
  %315 = insertelement <2 x float> poison, float %314, i64 0
  %316 = shufflevector <2 x float> %315, <2 x float> poison, <2 x i32> zeroinitializer
  %317 = fmul <2 x float> %312, %316
  %318 = fmul float %310, %314
  %319 = zext i32 %187 to i64
  %320 = shl nuw nsw i64 %319, 4
  %321 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %320, i32 noundef 16)
  %322 = and i64 %319, 3
  %323 = icmp ult i32 %187, 4
  br i1 %323, label %347, label %324

324:                                              ; preds = %309
  %325 = and i64 %319, 4294967292
  br label %326

326:                                              ; preds = %326, %324
  %327 = phi i64 [ 0, %324 ], [ %344, %326 ]
  %328 = phi i64 [ 0, %324 ], [ %345, %326 ]
  %329 = getelementptr inbounds %class.btVector3, ptr %321, i64 %327
  store <2 x float> %317, ptr %329, align 4
  %330 = getelementptr inbounds i8, ptr %329, i64 8
  store float %318, ptr %330, align 4, !tbaa.struct !164
  %331 = getelementptr inbounds i8, ptr %329, i64 12
  store float 0.000000e+00, ptr %331, align 4, !tbaa.struct !318
  %332 = or i64 %327, 1
  %333 = getelementptr inbounds %class.btVector3, ptr %321, i64 %332
  store <2 x float> %317, ptr %333, align 4
  %334 = getelementptr inbounds i8, ptr %333, i64 8
  store float %318, ptr %334, align 4, !tbaa.struct !164
  %335 = getelementptr inbounds i8, ptr %333, i64 12
  store float 0.000000e+00, ptr %335, align 4, !tbaa.struct !318
  %336 = or i64 %327, 2
  %337 = getelementptr inbounds %class.btVector3, ptr %321, i64 %336
  store <2 x float> %317, ptr %337, align 4
  %338 = getelementptr inbounds i8, ptr %337, i64 8
  store float %318, ptr %338, align 4, !tbaa.struct !164
  %339 = getelementptr inbounds i8, ptr %337, i64 12
  store float 0.000000e+00, ptr %339, align 4, !tbaa.struct !318
  %340 = or i64 %327, 3
  %341 = getelementptr inbounds %class.btVector3, ptr %321, i64 %340
  store <2 x float> %317, ptr %341, align 4
  %342 = getelementptr inbounds i8, ptr %341, i64 8
  store float %318, ptr %342, align 4, !tbaa.struct !164
  %343 = getelementptr inbounds i8, ptr %341, i64 12
  store float 0.000000e+00, ptr %343, align 4, !tbaa.struct !318
  %344 = add nuw nsw i64 %327, 4
  %345 = add i64 %328, 4
  %346 = icmp eq i64 %345, %325
  br i1 %346, label %347, label %326

347:                                              ; preds = %326, %309
  %348 = phi i64 [ 0, %309 ], [ %344, %326 ]
  %349 = icmp eq i64 %322, 0
  br i1 %349, label %359, label %350

350:                                              ; preds = %347, %350
  %351 = phi i64 [ %356, %350 ], [ %348, %347 ]
  %352 = phi i64 [ %357, %350 ], [ 0, %347 ]
  %353 = getelementptr inbounds %class.btVector3, ptr %321, i64 %351
  store <2 x float> %317, ptr %353, align 4
  %354 = getelementptr inbounds i8, ptr %353, i64 8
  store float %318, ptr %354, align 4, !tbaa.struct !164
  %355 = getelementptr inbounds i8, ptr %353, i64 12
  store float 0.000000e+00, ptr %355, align 4, !tbaa.struct !318
  %356 = add nuw nsw i64 %351, 1
  %357 = add i64 %352, 1
  %358 = icmp eq i64 %357, %322
  br i1 %358, label %359, label %350, !llvm.loop !348

359:                                              ; preds = %350, %347
  %360 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %361 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %362 = getelementptr inbounds [4 x float], ptr %321, i64 0, i64 1
  %363 = getelementptr inbounds [4 x float], ptr %321, i64 0, i64 2
  %364 = icmp sgt i32 %187, 1
  br label %365

365:                                              ; preds = %714, %359
  %366 = phi i32 [ %372, %714 ], [ 0, %359 ]
  %367 = sitofp i32 %366 to float
  %368 = fmul float %367, 6.250000e-02
  %369 = fcmp ogt float %368, 1.000000e+00
  %370 = select i1 %369, float 1.000000e+00, float %368
  %371 = fsub float 2.000000e+00, %370
  %372 = add nuw nsw i32 %366, 1
  %373 = insertelement <2 x float> poison, float %371, i64 0
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer
  br label %378

375:                                              ; preds = %565
  %376 = load i32, ptr %51, align 4, !tbaa !88
  %377 = icmp sgt i32 %376, 0
  br i1 %377, label %569, label %714

378:                                              ; preds = %365, %565
  %379 = phi i64 [ 0, %365 ], [ %567, %565 ]
  %380 = phi i8 [ 0, %365 ], [ %566, %565 ]
  %381 = load ptr, ptr %360, align 8, !tbaa !123
  %382 = getelementptr inbounds ptr, ptr %381, i64 %379
  %383 = load ptr, ptr %382, align 8, !tbaa !219
  %384 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %383, i64 0, i32 2
  %385 = load i32, ptr %384, align 4, !tbaa !319
  %386 = icmp sgt i32 %385, 0
  br i1 %386, label %387, label %429

387:                                              ; preds = %378
  %388 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %383, i64 0, i32 5
  %389 = load ptr, ptr %388, align 8, !tbaa !320
  %390 = zext i32 %385 to i64
  %391 = and i64 %390, 3
  %392 = icmp ult i32 %385, 4
  br i1 %392, label %398, label %393

393:                                              ; preds = %387
  %394 = and i64 %390, 4294967292
  br label %433

395:                                              ; preds = %433
  %396 = insertelement <2 x float> %435, float %464, i64 0
  %397 = insertelement <2 x float> %396, float %474, i64 0
  br label %398

398:                                              ; preds = %395, %387
  %399 = phi <2 x float> [ undef, %387 ], [ %396, %395 ]
  %400 = phi <2 x float> [ undef, %387 ], [ %471, %395 ]
  %401 = phi float [ undef, %387 ], [ %474, %395 ]
  %402 = phi i64 [ 0, %387 ], [ %476, %395 ]
  %403 = phi <2 x float> [ zeroinitializer, %387 ], [ %397, %395 ]
  %404 = phi <2 x float> [ zeroinitializer, %387 ], [ %471, %395 ]
  %405 = icmp eq i64 %391, 0
  br i1 %405, label %424, label %406

406:                                              ; preds = %398, %406
  %407 = phi i64 [ %421, %406 ], [ %402, %398 ]
  %408 = phi <2 x float> [ %420, %406 ], [ %403, %398 ]
  %409 = phi <2 x float> [ %415, %406 ], [ %404, %398 ]
  %410 = phi i64 [ %422, %406 ], [ 0, %398 ]
  %411 = getelementptr inbounds ptr, ptr %389, i64 %407
  %412 = load ptr, ptr %411, align 8, !tbaa !219
  %413 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %412, i64 0, i32 1
  %414 = load <2 x float>, ptr %413, align 4, !tbaa !137
  %415 = fadd <2 x float> %409, %414
  %416 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %412, i64 0, i32 1, i32 0, i64 2
  %417 = load float, ptr %416, align 4, !tbaa !137
  %418 = extractelement <2 x float> %408, i64 0
  %419 = fadd float %418, %417
  %420 = insertelement <2 x float> %408, float %419, i64 0
  %421 = add nuw nsw i64 %407, 1
  %422 = add i64 %410, 1
  %423 = icmp eq i64 %422, %391
  br i1 %423, label %424, label %406, !llvm.loop !349

424:                                              ; preds = %406, %398
  %425 = phi <2 x float> [ %399, %398 ], [ %408, %406 ]
  %426 = phi <2 x float> [ %400, %398 ], [ %415, %406 ]
  %427 = phi float [ %401, %398 ], [ %419, %406 ]
  %428 = insertelement <2 x float> %425, float %427, i64 0
  br label %429

429:                                              ; preds = %424, %378
  %430 = phi <2 x float> [ zeroinitializer, %378 ], [ %426, %424 ]
  %431 = phi <2 x float> [ zeroinitializer, %378 ], [ %428, %424 ]
  %432 = icmp eq i32 %385, 0
  br i1 %432, label %565, label %479

433:                                              ; preds = %433, %393
  %434 = phi i64 [ 0, %393 ], [ %476, %433 ]
  %435 = phi <2 x float> [ zeroinitializer, %393 ], [ %475, %433 ]
  %436 = phi <2 x float> [ zeroinitializer, %393 ], [ %471, %433 ]
  %437 = phi i64 [ 0, %393 ], [ %477, %433 ]
  %438 = getelementptr inbounds ptr, ptr %389, i64 %434
  %439 = load ptr, ptr %438, align 8, !tbaa !219
  %440 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %439, i64 0, i32 1
  %441 = load <2 x float>, ptr %440, align 4, !tbaa !137
  %442 = fadd <2 x float> %436, %441
  %443 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %439, i64 0, i32 1, i32 0, i64 2
  %444 = load float, ptr %443, align 4, !tbaa !137
  %445 = extractelement <2 x float> %435, i64 0
  %446 = fadd float %445, %444
  %447 = or i64 %434, 1
  %448 = getelementptr inbounds ptr, ptr %389, i64 %447
  %449 = load ptr, ptr %448, align 8, !tbaa !219
  %450 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %449, i64 0, i32 1
  %451 = load <2 x float>, ptr %450, align 4, !tbaa !137
  %452 = fadd <2 x float> %442, %451
  %453 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %449, i64 0, i32 1, i32 0, i64 2
  %454 = load float, ptr %453, align 4, !tbaa !137
  %455 = fadd float %446, %454
  %456 = or i64 %434, 2
  %457 = getelementptr inbounds ptr, ptr %389, i64 %456
  %458 = load ptr, ptr %457, align 8, !tbaa !219
  %459 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %458, i64 0, i32 1
  %460 = load <2 x float>, ptr %459, align 4, !tbaa !137
  %461 = fadd <2 x float> %452, %460
  %462 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %458, i64 0, i32 1, i32 0, i64 2
  %463 = load float, ptr %462, align 4, !tbaa !137
  %464 = fadd float %455, %463
  %465 = insertelement <2 x float> %435, float %464, i64 0
  %466 = or i64 %434, 3
  %467 = getelementptr inbounds ptr, ptr %389, i64 %466
  %468 = load ptr, ptr %467, align 8, !tbaa !219
  %469 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %468, i64 0, i32 1
  %470 = load <2 x float>, ptr %469, align 4, !tbaa !137
  %471 = fadd <2 x float> %461, %470
  %472 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %468, i64 0, i32 1, i32 0, i64 2
  %473 = load float, ptr %472, align 4, !tbaa !137
  %474 = fadd float %464, %473
  %475 = insertelement <2 x float> %465, float %474, i64 0
  %476 = add nuw nsw i64 %434, 4
  %477 = add i64 %437, 4
  %478 = icmp eq i64 %477, %394
  br i1 %478, label %395, label %433

479:                                              ; preds = %429
  %480 = sitofp i32 %385 to float
  %481 = fdiv float 1.000000e+00, %480
  %482 = extractelement <2 x float> %431, i64 0
  %483 = fmul float %482, %481
  %484 = getelementptr inbounds %class.btVector3, ptr %321, i64 %379
  %485 = getelementptr inbounds [4 x float], ptr %484, i64 0, i64 2
  %486 = load float, ptr %485, align 4, !tbaa !137
  %487 = fsub float %483, %486
  %488 = fmul float %371, %487
  %489 = insertelement <2 x float> poison, float %481, i64 0
  %490 = shufflevector <2 x float> %489, <2 x float> poison, <2 x i32> zeroinitializer
  %491 = fmul <2 x float> %430, %490
  %492 = load <2 x float>, ptr %484, align 4, !tbaa !137
  %493 = fsub <2 x float> %491, %492
  %494 = fmul <2 x float> %374, %493
  %495 = fadd <2 x float> %492, %494
  %496 = fadd float %486, %488
  %497 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %496, i64 0
  %498 = fsub <2 x float> %495, %492
  %499 = extractelement <2 x float> %498, i64 0
  %500 = fsub <2 x float> %495, %492
  %501 = fsub float %496, %486
  %502 = fmul <2 x float> %500, %500
  %503 = extractelement <2 x float> %502, i64 1
  %504 = tail call float @llvm.fmuladd.f32(float %499, float %499, float %503)
  %505 = tail call float @llvm.fmuladd.f32(float %501, float %501, float %504)
  store <2 x float> %495, ptr %484, align 4, !tbaa.struct !162
  store <2 x float> %497, ptr %485, align 4, !tbaa.struct !164
  %506 = load ptr, ptr %360, align 8, !tbaa !123
  %507 = getelementptr inbounds ptr, ptr %506, i64 %379
  %508 = load ptr, ptr %507, align 8, !tbaa !219
  %509 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %508, i64 0, i32 2
  %510 = load i32, ptr %509, align 4, !tbaa !319
  %511 = icmp slt i32 %510, 0
  br i1 %511, label %512, label %558

512:                                              ; preds = %479
  %513 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %508, i64 0, i32 3
  %514 = load i32, ptr %513, align 8, !tbaa !342
  %515 = icmp slt i32 %514, 0
  br i1 %515, label %516, label %526

516:                                              ; preds = %512
  %517 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %508, i64 0, i32 5
  %518 = load ptr, ptr %517, align 8, !tbaa !320
  %519 = icmp eq ptr %518, null
  %520 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %508, i64 0, i32 6
  %521 = load i8, ptr %520, align 8
  %522 = icmp eq i8 %521, 0
  %523 = select i1 %519, i1 true, i1 %522
  br i1 %523, label %525, label %524

524:                                              ; preds = %516
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %518)
          to label %525 unwind label %563

525:                                              ; preds = %524, %516
  store i8 1, ptr %520, align 8, !tbaa !341
  store ptr null, ptr %517, align 8, !tbaa !320
  store i32 0, ptr %513, align 8, !tbaa !342
  br label %526

526:                                              ; preds = %525, %512
  %527 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %508, i64 0, i32 5
  %528 = sext i32 %510 to i64
  %529 = sub nsw i64 0, %528
  %530 = and i64 %529, 3
  %531 = icmp eq i64 %530, 0
  br i1 %531, label %540, label %532

532:                                              ; preds = %526, %532
  %533 = phi i64 [ %537, %532 ], [ %528, %526 ]
  %534 = phi i64 [ %538, %532 ], [ 0, %526 ]
  %535 = load ptr, ptr %527, align 8, !tbaa !320
  %536 = getelementptr inbounds ptr, ptr %535, i64 %533
  store ptr null, ptr %536, align 8, !tbaa !219
  %537 = add nsw i64 %533, 1
  %538 = add i64 %534, 1
  %539 = icmp eq i64 %538, %530
  br i1 %539, label %540, label %532, !llvm.loop !350

540:                                              ; preds = %532, %526
  %541 = phi i64 [ %528, %526 ], [ %537, %532 ]
  %542 = icmp ugt i32 %510, -4
  br i1 %542, label %558, label %543

543:                                              ; preds = %540, %543
  %544 = phi i64 [ %556, %543 ], [ %541, %540 ]
  %545 = load ptr, ptr %527, align 8, !tbaa !320
  %546 = getelementptr inbounds ptr, ptr %545, i64 %544
  store ptr null, ptr %546, align 8, !tbaa !219
  %547 = add nsw i64 %544, 1
  %548 = load ptr, ptr %527, align 8, !tbaa !320
  %549 = getelementptr inbounds ptr, ptr %548, i64 %547
  store ptr null, ptr %549, align 8, !tbaa !219
  %550 = add nsw i64 %544, 2
  %551 = load ptr, ptr %527, align 8, !tbaa !320
  %552 = getelementptr inbounds ptr, ptr %551, i64 %550
  store ptr null, ptr %552, align 8, !tbaa !219
  %553 = add nsw i64 %544, 3
  %554 = load ptr, ptr %527, align 8, !tbaa !320
  %555 = getelementptr inbounds ptr, ptr %554, i64 %553
  store ptr null, ptr %555, align 8, !tbaa !219
  %556 = add nsw i64 %544, 4
  %557 = icmp eq i64 %556, 0
  br i1 %557, label %558, label %543

558:                                              ; preds = %540, %543, %479
  store i32 0, ptr %509, align 4, !tbaa !319
  %559 = and i8 %380, 1
  %560 = fcmp ogt float %505, 0x3E80000000000000
  %561 = zext i1 %560 to i8
  %562 = or i8 %559, %561
  br label %565

563:                                              ; preds = %524
  %564 = landingpad { ptr, i32 }
          cleanup
  br label %1406

565:                                              ; preds = %558, %429
  %566 = phi i8 [ %562, %558 ], [ %380, %429 ]
  %567 = add nuw nsw i64 %379, 1
  %568 = icmp eq i64 %567, %319
  br i1 %568, label %375, label %378

569:                                              ; preds = %375, %701
  %570 = phi i32 [ %702, %701 ], [ %376, %375 ]
  %571 = phi i64 [ %709, %701 ], [ 0, %375 ]
  %572 = load ptr, ptr %361, align 8, !tbaa !87
  %573 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %572, i64 %571
  %574 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %572, i64 %571, i32 1
  %575 = load <2 x float>, ptr %574, align 8
  %576 = getelementptr inbounds i8, ptr %574, i64 8
  %577 = load float, ptr %576, align 8, !tbaa.struct !164
  br i1 %364, label %578, label %592

578:                                              ; preds = %569
  %579 = load float, ptr %321, align 4, !tbaa !137
  %580 = extractelement <2 x float> %575, i64 0
  %581 = fsub float %579, %580
  %582 = tail call float @llvm.fabs.f32(float %581)
  %583 = load float, ptr %362, align 4, !tbaa !137
  %584 = extractelement <2 x float> %575, i64 1
  %585 = fsub float %583, %584
  %586 = tail call float @llvm.fabs.f32(float %585)
  %587 = fadd float %582, %586
  %588 = load float, ptr %363, align 4, !tbaa !137
  %589 = fsub float %588, %577
  %590 = tail call float @llvm.fabs.f32(float %589)
  %591 = fadd float %587, %590
  br label %679

592:                                              ; preds = %679, %569
  %593 = phi i32 [ 0, %569 ], [ %697, %679 ]
  %594 = load ptr, ptr %360, align 8, !tbaa !123
  %595 = sext i32 %593 to i64
  %596 = getelementptr inbounds ptr, ptr %594, i64 %595
  %597 = load ptr, ptr %596, align 8, !tbaa !219
  %598 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %597, i64 0, i32 2
  %599 = load i32, ptr %598, align 4, !tbaa !319
  %600 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %597, i64 0, i32 3
  %601 = load i32, ptr %600, align 8, !tbaa !342
  %602 = icmp eq i32 %599, %601
  br i1 %602, label %603, label %701

603:                                              ; preds = %592
  %604 = icmp eq i32 %599, 0
  %605 = shl nsw i32 %599, 1
  %606 = select i1 %604, i32 1, i32 %605
  %607 = icmp slt i32 %599, %606
  br i1 %607, label %608, label %701

608:                                              ; preds = %603
  %609 = icmp eq i32 %606, 0
  br i1 %609, label %616, label %610

610:                                              ; preds = %608
  %611 = sext i32 %606 to i64
  %612 = shl nsw i64 %611, 3
  %613 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %612, i32 noundef 16)
          to label %614 unwind label %712

614:                                              ; preds = %610
  %615 = load i32, ptr %598, align 4, !tbaa !319
  br label %616

616:                                              ; preds = %614, %608
  %617 = phi i32 [ %615, %614 ], [ %599, %608 ]
  %618 = phi ptr [ %613, %614 ], [ null, %608 ]
  %619 = icmp sgt i32 %617, 0
  br i1 %619, label %620, label %665

620:                                              ; preds = %616
  %621 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %597, i64 0, i32 5
  %622 = zext i32 %617 to i64
  %623 = and i64 %622, 3
  %624 = icmp ult i32 %617, 4
  br i1 %624, label %652, label %625

625:                                              ; preds = %620
  %626 = and i64 %622, 4294967292
  br label %627

627:                                              ; preds = %627, %625
  %628 = phi i64 [ 0, %625 ], [ %649, %627 ]
  %629 = phi i64 [ 0, %625 ], [ %650, %627 ]
  %630 = getelementptr inbounds ptr, ptr %618, i64 %628
  %631 = load ptr, ptr %621, align 8, !tbaa !320
  %632 = getelementptr inbounds ptr, ptr %631, i64 %628
  %633 = load ptr, ptr %632, align 8, !tbaa !219
  store ptr %633, ptr %630, align 8, !tbaa !219
  %634 = or i64 %628, 1
  %635 = getelementptr inbounds ptr, ptr %618, i64 %634
  %636 = load ptr, ptr %621, align 8, !tbaa !320
  %637 = getelementptr inbounds ptr, ptr %636, i64 %634
  %638 = load ptr, ptr %637, align 8, !tbaa !219
  store ptr %638, ptr %635, align 8, !tbaa !219
  %639 = or i64 %628, 2
  %640 = getelementptr inbounds ptr, ptr %618, i64 %639
  %641 = load ptr, ptr %621, align 8, !tbaa !320
  %642 = getelementptr inbounds ptr, ptr %641, i64 %639
  %643 = load ptr, ptr %642, align 8, !tbaa !219
  store ptr %643, ptr %640, align 8, !tbaa !219
  %644 = or i64 %628, 3
  %645 = getelementptr inbounds ptr, ptr %618, i64 %644
  %646 = load ptr, ptr %621, align 8, !tbaa !320
  %647 = getelementptr inbounds ptr, ptr %646, i64 %644
  %648 = load ptr, ptr %647, align 8, !tbaa !219
  store ptr %648, ptr %645, align 8, !tbaa !219
  %649 = add nuw nsw i64 %628, 4
  %650 = add i64 %629, 4
  %651 = icmp eq i64 %650, %626
  br i1 %651, label %652, label %627

652:                                              ; preds = %627, %620
  %653 = phi i64 [ 0, %620 ], [ %649, %627 ]
  %654 = icmp eq i64 %623, 0
  br i1 %654, label %665, label %655

655:                                              ; preds = %652, %655
  %656 = phi i64 [ %662, %655 ], [ %653, %652 ]
  %657 = phi i64 [ %663, %655 ], [ 0, %652 ]
  %658 = getelementptr inbounds ptr, ptr %618, i64 %656
  %659 = load ptr, ptr %621, align 8, !tbaa !320
  %660 = getelementptr inbounds ptr, ptr %659, i64 %656
  %661 = load ptr, ptr %660, align 8, !tbaa !219
  store ptr %661, ptr %658, align 8, !tbaa !219
  %662 = add nuw nsw i64 %656, 1
  %663 = add i64 %657, 1
  %664 = icmp eq i64 %663, %623
  br i1 %664, label %665, label %655, !llvm.loop !351

665:                                              ; preds = %652, %655, %616
  %666 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %597, i64 0, i32 5
  %667 = load ptr, ptr %666, align 8, !tbaa !320
  %668 = icmp eq ptr %667, null
  %669 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %597, i64 0, i32 6
  %670 = load i8, ptr %669, align 8
  %671 = icmp eq i8 %670, 0
  %672 = select i1 %668, i1 true, i1 %671
  br i1 %672, label %676, label %673

673:                                              ; preds = %665
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %667)
          to label %674 unwind label %712

674:                                              ; preds = %673
  %675 = load i32, ptr %598, align 4, !tbaa !319
  br label %676

676:                                              ; preds = %674, %665
  %677 = phi i32 [ %675, %674 ], [ %617, %665 ]
  store i8 1, ptr %669, align 8, !tbaa !341
  store ptr %618, ptr %666, align 8, !tbaa !320
  store i32 %606, ptr %600, align 8, !tbaa !342
  %678 = load i32, ptr %51, align 4, !tbaa !88
  br label %701

679:                                              ; preds = %578, %679
  %680 = phi i64 [ 1, %578 ], [ %699, %679 ]
  %681 = phi float [ %591, %578 ], [ %698, %679 ]
  %682 = phi i32 [ 0, %578 ], [ %697, %679 ]
  %683 = getelementptr inbounds %class.btVector3, ptr %321, i64 %680
  %684 = getelementptr inbounds [4 x float], ptr %683, i64 0, i64 2
  %685 = load float, ptr %684, align 4, !tbaa !137
  %686 = fsub float %685, %577
  %687 = load <2 x float>, ptr %683, align 4, !tbaa !137
  %688 = fsub <2 x float> %687, %575
  %689 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %688)
  %690 = shufflevector <2 x float> %689, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %691 = fadd <2 x float> %689, %690
  %692 = extractelement <2 x float> %691, i64 0
  %693 = tail call float @llvm.fabs.f32(float %686)
  %694 = fadd float %692, %693
  %695 = fcmp olt float %694, %681
  %696 = trunc i64 %680 to i32
  %697 = select i1 %695, i32 %696, i32 %682
  %698 = select i1 %695, float %694, float %681
  %699 = add nuw nsw i64 %680, 1
  %700 = icmp eq i64 %699, %319
  br i1 %700, label %592, label %679

701:                                              ; preds = %676, %603, %592
  %702 = phi i32 [ %678, %676 ], [ %570, %603 ], [ %570, %592 ]
  %703 = phi i32 [ %677, %676 ], [ %599, %603 ], [ %599, %592 ]
  %704 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %597, i64 0, i32 5
  %705 = load ptr, ptr %704, align 8, !tbaa !320
  %706 = sext i32 %703 to i64
  %707 = getelementptr inbounds ptr, ptr %705, i64 %706
  store ptr %573, ptr %707, align 8, !tbaa !219
  %708 = add nsw i32 %703, 1
  store i32 %708, ptr %598, align 4, !tbaa !319
  %709 = add nuw nsw i64 %571, 1
  %710 = sext i32 %702 to i64
  %711 = icmp slt i64 %709, %710
  br i1 %711, label %569, label %714

712:                                              ; preds = %673, %610
  %713 = landingpad { ptr, i32 }
          cleanup
  br label %1403

714:                                              ; preds = %701, %375
  %715 = phi i32 [ %376, %375 ], [ %702, %701 ]
  %716 = and i8 %566, 1
  %717 = icmp ne i8 %716, 0
  %718 = icmp slt i32 %372, %2
  %719 = select i1 %717, i1 %718, i1 false
  br i1 %719, label %365, label %720

720:                                              ; preds = %714
  %721 = icmp sgt i32 %715, 0
  br i1 %721, label %722, label %727

722:                                              ; preds = %720
  %723 = zext i32 %715 to i64
  %724 = shl nuw nsw i64 %723, 2
  %725 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %724, i32 noundef 16)
          to label %726 unwind label %767

726:                                              ; preds = %722
  tail call void @llvm.memset.p0.i64(ptr align 4 %725, i8 -1, i64 %724, i1 false), !tbaa !140
  br label %727

727:                                              ; preds = %726, %720
  %728 = phi ptr [ null, %720 ], [ %725, %726 ]
  %729 = load i32, ptr %5, align 4, !tbaa !124
  %730 = icmp sgt i32 %729, 0
  br i1 %730, label %731, label %747

731:                                              ; preds = %727
  %732 = load ptr, ptr %360, align 8, !tbaa !123
  %733 = load ptr, ptr %361, align 8
  %734 = ptrtoint ptr %733 to i64
  br label %735

735:                                              ; preds = %731, %758
  %736 = phi i32 [ %729, %731 ], [ %759, %758 ]
  %737 = phi i64 [ 0, %731 ], [ %760, %758 ]
  %738 = getelementptr inbounds ptr, ptr %732, i64 %737
  %739 = load ptr, ptr %738, align 8, !tbaa !219
  %740 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %739, i64 0, i32 2
  %741 = load i32, ptr %740, align 4, !tbaa !319
  %742 = icmp sgt i32 %741, 0
  br i1 %742, label %743, label %758

743:                                              ; preds = %735
  %744 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %739, i64 0, i32 5
  %745 = load ptr, ptr %744, align 8, !tbaa !320
  %746 = trunc i64 %737 to i32
  br label %769

747:                                              ; preds = %758, %727
  %748 = phi i32 [ %729, %727 ], [ %759, %758 ]
  %749 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %750 = load i32, ptr %749, align 4, !tbaa !96
  %751 = icmp sgt i32 %750, 0
  br i1 %751, label %752, label %1066

752:                                              ; preds = %747
  %753 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %754 = getelementptr inbounds i32, ptr %4, i64 1
  %755 = getelementptr inbounds i32, ptr %4, i64 2
  br label %783

756:                                              ; preds = %769
  %757 = load i32, ptr %5, align 4, !tbaa !124
  br label %758

758:                                              ; preds = %756, %735
  %759 = phi i32 [ %757, %756 ], [ %736, %735 ]
  %760 = add nuw nsw i64 %737, 1
  %761 = sext i32 %759 to i64
  %762 = icmp slt i64 %760, %761
  br i1 %762, label %735, label %747

763:                                              ; preds = %1395
  %764 = landingpad { ptr, i32 }
          cleanup
  br label %1403

765:                                              ; preds = %1359, %1358, %1357
  %766 = landingpad { ptr, i32 }
          cleanup
  br label %1399

767:                                              ; preds = %722
  %768 = landingpad { ptr, i32 }
          cleanup
  br label %1403

769:                                              ; preds = %743, %769
  %770 = phi i64 [ 0, %743 ], [ %779, %769 ]
  %771 = getelementptr inbounds ptr, ptr %745, i64 %770
  %772 = load ptr, ptr %771, align 8, !tbaa !219
  %773 = ptrtoint ptr %772 to i64
  %774 = sub i64 %773, %734
  %775 = sdiv exact i64 %774, 120
  %776 = shl i64 %775, 32
  %777 = ashr exact i64 %776, 32
  %778 = getelementptr inbounds i32, ptr %728, i64 %777
  store i32 %746, ptr %778, align 4, !tbaa !140
  %779 = add nuw nsw i64 %770, 1
  %780 = load i32, ptr %740, align 4, !tbaa !319
  %781 = sext i32 %780 to i64
  %782 = icmp slt i64 %779, %781
  br i1 %782, label %769, label %756

783:                                              ; preds = %752, %806
  %784 = phi i64 [ 0, %752 ], [ %807, %806 ]
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #38
  %785 = load ptr, ptr %753, align 8, !tbaa !95
  %786 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %785, i64 %784, i32 1
  %787 = load ptr, ptr %786, align 8, !tbaa !219
  %788 = load ptr, ptr %361, align 8, !tbaa !87
  %789 = ptrtoint ptr %787 to i64
  %790 = ptrtoint ptr %788 to i64
  %791 = sub i64 %789, %790
  %792 = sdiv exact i64 %791, 120
  %793 = trunc i64 %792 to i32
  store i32 %793, ptr %4, align 4, !tbaa !140
  %794 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %785, i64 %784, i32 1, i64 1
  %795 = load ptr, ptr %794, align 8, !tbaa !219
  %796 = ptrtoint ptr %795 to i64
  %797 = sub i64 %796, %790
  %798 = sdiv exact i64 %797, 120
  %799 = trunc i64 %798 to i32
  store i32 %799, ptr %754, align 4, !tbaa !140
  %800 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %785, i64 %784, i32 1, i64 2
  %801 = load ptr, ptr %800, align 8, !tbaa !219
  %802 = ptrtoint ptr %801 to i64
  %803 = sub i64 %802, %790
  %804 = sdiv exact i64 %803, 120
  %805 = trunc i64 %804 to i32
  store i32 %805, ptr %755, align 4, !tbaa !140
  br label %811

806:                                              ; preds = %1062
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #38
  %807 = add nuw nsw i64 %784, 1
  %808 = load i32, ptr %749, align 4, !tbaa !96
  %809 = sext i32 %808 to i64
  %810 = icmp slt i64 %807, %809
  br i1 %810, label %783, label %1064

811:                                              ; preds = %783, %1062
  %812 = phi i64 [ 0, %783 ], [ %819, %1062 ]
  %813 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 %812
  %814 = load i32, ptr %813, align 4, !tbaa !140
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds i32, ptr %728, i64 %815
  %817 = load i32, ptr %816, align 4, !tbaa !140
  %818 = sext i32 %817 to i64
  %819 = add nuw nsw i64 %812, 1
  %820 = icmp eq i64 %819, 3
  %821 = and i64 %819, 4294967295
  %822 = select i1 %820, i64 0, i64 %821
  %823 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 %822
  %824 = load i32, ptr %823, align 4, !tbaa !140
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i32, ptr %728, i64 %825
  %827 = load i32, ptr %826, align 4, !tbaa !140
  %828 = icmp eq i32 %827, %817
  br i1 %828, label %941, label %829

829:                                              ; preds = %811
  %830 = load ptr, ptr %360, align 8, !tbaa !123
  %831 = getelementptr inbounds ptr, ptr %830, i64 %818
  %832 = load ptr, ptr %831, align 8, !tbaa !219
  %833 = load ptr, ptr %361, align 8, !tbaa !87
  %834 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %833, i64 %825
  %835 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %832, i64 0, i32 2
  %836 = load i32, ptr %835, align 4, !tbaa !319
  %837 = icmp sgt i32 %836, 0
  br i1 %837, label %838, label %853

838:                                              ; preds = %829
  %839 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %832, i64 0, i32 5
  %840 = load ptr, ptr %839, align 8, !tbaa !320
  %841 = zext i32 %836 to i64
  br label %842

842:                                              ; preds = %847, %838
  %843 = phi i64 [ 0, %838 ], [ %848, %847 ]
  %844 = getelementptr inbounds ptr, ptr %840, i64 %843
  %845 = load ptr, ptr %844, align 8, !tbaa !219
  %846 = icmp eq ptr %845, %834
  br i1 %846, label %850, label %847

847:                                              ; preds = %842
  %848 = add nuw nsw i64 %843, 1
  %849 = icmp eq i64 %848, %841
  br i1 %849, label %853, label %842

850:                                              ; preds = %842
  %851 = trunc i64 %843 to i32
  %852 = icmp eq i32 %836, %851
  br i1 %852, label %853, label %941

853:                                              ; preds = %847, %829, %850
  %854 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %832, i64 0, i32 3
  %855 = load i32, ptr %854, align 8, !tbaa !342
  %856 = icmp eq i32 %836, %855
  br i1 %856, label %857, label %932

857:                                              ; preds = %853
  %858 = icmp eq i32 %836, 0
  %859 = shl nsw i32 %836, 1
  %860 = select i1 %858, i32 1, i32 %859
  %861 = icmp slt i32 %836, %860
  br i1 %861, label %862, label %932

862:                                              ; preds = %857
  %863 = icmp eq i32 %860, 0
  br i1 %863, label %870, label %864

864:                                              ; preds = %862
  %865 = sext i32 %860 to i64
  %866 = shl nsw i64 %865, 3
  %867 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %866, i32 noundef 16)
          to label %868 unwind label %939

868:                                              ; preds = %864
  %869 = load i32, ptr %835, align 4, !tbaa !319
  br label %870

870:                                              ; preds = %868, %862
  %871 = phi i32 [ %869, %868 ], [ %836, %862 ]
  %872 = phi ptr [ %867, %868 ], [ null, %862 ]
  %873 = icmp sgt i32 %871, 0
  br i1 %873, label %874, label %919

874:                                              ; preds = %870
  %875 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %832, i64 0, i32 5
  %876 = zext i32 %871 to i64
  %877 = and i64 %876, 3
  %878 = icmp ult i32 %871, 4
  br i1 %878, label %906, label %879

879:                                              ; preds = %874
  %880 = and i64 %876, 4294967292
  br label %881

881:                                              ; preds = %881, %879
  %882 = phi i64 [ 0, %879 ], [ %903, %881 ]
  %883 = phi i64 [ 0, %879 ], [ %904, %881 ]
  %884 = getelementptr inbounds ptr, ptr %872, i64 %882
  %885 = load ptr, ptr %875, align 8, !tbaa !320
  %886 = getelementptr inbounds ptr, ptr %885, i64 %882
  %887 = load ptr, ptr %886, align 8, !tbaa !219
  store ptr %887, ptr %884, align 8, !tbaa !219
  %888 = or i64 %882, 1
  %889 = getelementptr inbounds ptr, ptr %872, i64 %888
  %890 = load ptr, ptr %875, align 8, !tbaa !320
  %891 = getelementptr inbounds ptr, ptr %890, i64 %888
  %892 = load ptr, ptr %891, align 8, !tbaa !219
  store ptr %892, ptr %889, align 8, !tbaa !219
  %893 = or i64 %882, 2
  %894 = getelementptr inbounds ptr, ptr %872, i64 %893
  %895 = load ptr, ptr %875, align 8, !tbaa !320
  %896 = getelementptr inbounds ptr, ptr %895, i64 %893
  %897 = load ptr, ptr %896, align 8, !tbaa !219
  store ptr %897, ptr %894, align 8, !tbaa !219
  %898 = or i64 %882, 3
  %899 = getelementptr inbounds ptr, ptr %872, i64 %898
  %900 = load ptr, ptr %875, align 8, !tbaa !320
  %901 = getelementptr inbounds ptr, ptr %900, i64 %898
  %902 = load ptr, ptr %901, align 8, !tbaa !219
  store ptr %902, ptr %899, align 8, !tbaa !219
  %903 = add nuw nsw i64 %882, 4
  %904 = add i64 %883, 4
  %905 = icmp eq i64 %904, %880
  br i1 %905, label %906, label %881

906:                                              ; preds = %881, %874
  %907 = phi i64 [ 0, %874 ], [ %903, %881 ]
  %908 = icmp eq i64 %877, 0
  br i1 %908, label %919, label %909

909:                                              ; preds = %906, %909
  %910 = phi i64 [ %916, %909 ], [ %907, %906 ]
  %911 = phi i64 [ %917, %909 ], [ 0, %906 ]
  %912 = getelementptr inbounds ptr, ptr %872, i64 %910
  %913 = load ptr, ptr %875, align 8, !tbaa !320
  %914 = getelementptr inbounds ptr, ptr %913, i64 %910
  %915 = load ptr, ptr %914, align 8, !tbaa !219
  store ptr %915, ptr %912, align 8, !tbaa !219
  %916 = add nuw nsw i64 %910, 1
  %917 = add i64 %911, 1
  %918 = icmp eq i64 %917, %877
  br i1 %918, label %919, label %909, !llvm.loop !352

919:                                              ; preds = %906, %909, %870
  %920 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %832, i64 0, i32 5
  %921 = load ptr, ptr %920, align 8, !tbaa !320
  %922 = icmp eq ptr %921, null
  %923 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %832, i64 0, i32 6
  %924 = load i8, ptr %923, align 8
  %925 = icmp eq i8 %924, 0
  %926 = select i1 %922, i1 true, i1 %925
  br i1 %926, label %930, label %927

927:                                              ; preds = %919
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %921)
          to label %928 unwind label %939

928:                                              ; preds = %927
  %929 = load i32, ptr %835, align 4, !tbaa !319
  br label %930

930:                                              ; preds = %928, %919
  %931 = phi i32 [ %929, %928 ], [ %871, %919 ]
  store i8 1, ptr %923, align 8, !tbaa !341
  store ptr %872, ptr %920, align 8, !tbaa !320
  store i32 %860, ptr %854, align 8, !tbaa !342
  br label %932

932:                                              ; preds = %930, %857, %853
  %933 = phi i32 [ %931, %930 ], [ %836, %857 ], [ %836, %853 ]
  %934 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %832, i64 0, i32 5
  %935 = load ptr, ptr %934, align 8, !tbaa !320
  %936 = sext i32 %933 to i64
  %937 = getelementptr inbounds ptr, ptr %935, i64 %936
  store ptr %834, ptr %937, align 8, !tbaa !219
  %938 = add nsw i32 %933, 1
  store i32 %938, ptr %835, align 4, !tbaa !319
  br label %941

939:                                              ; preds = %1050, %987, %927, %864
  %940 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #38
  br label %1399

941:                                              ; preds = %850, %932, %811
  %942 = trunc i64 %812 to i32
  %943 = add i32 %942, 2
  %944 = urem i32 %943, 3
  %945 = zext i32 %944 to i64
  %946 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 %945
  %947 = load i32, ptr %946, align 4, !tbaa !140
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds i32, ptr %728, i64 %948
  %950 = load i32, ptr %949, align 4, !tbaa !140
  %951 = icmp eq i32 %950, %817
  br i1 %951, label %1062, label %952

952:                                              ; preds = %941
  %953 = load ptr, ptr %360, align 8, !tbaa !123
  %954 = getelementptr inbounds ptr, ptr %953, i64 %818
  %955 = load ptr, ptr %954, align 8, !tbaa !219
  %956 = load ptr, ptr %361, align 8, !tbaa !87
  %957 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %956, i64 %948
  %958 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %955, i64 0, i32 2
  %959 = load i32, ptr %958, align 4, !tbaa !319
  %960 = icmp sgt i32 %959, 0
  br i1 %960, label %961, label %976

961:                                              ; preds = %952
  %962 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %955, i64 0, i32 5
  %963 = load ptr, ptr %962, align 8, !tbaa !320
  %964 = zext i32 %959 to i64
  br label %965

965:                                              ; preds = %970, %961
  %966 = phi i64 [ 0, %961 ], [ %971, %970 ]
  %967 = getelementptr inbounds ptr, ptr %963, i64 %966
  %968 = load ptr, ptr %967, align 8, !tbaa !219
  %969 = icmp eq ptr %968, %957
  br i1 %969, label %973, label %970

970:                                              ; preds = %965
  %971 = add nuw nsw i64 %966, 1
  %972 = icmp eq i64 %971, %964
  br i1 %972, label %976, label %965

973:                                              ; preds = %965
  %974 = trunc i64 %966 to i32
  %975 = icmp eq i32 %959, %974
  br i1 %975, label %976, label %1062

976:                                              ; preds = %970, %973, %952
  %977 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %955, i64 0, i32 3
  %978 = load i32, ptr %977, align 8, !tbaa !342
  %979 = icmp eq i32 %959, %978
  br i1 %979, label %980, label %1055

980:                                              ; preds = %976
  %981 = icmp eq i32 %959, 0
  %982 = shl nsw i32 %959, 1
  %983 = select i1 %981, i32 1, i32 %982
  %984 = icmp slt i32 %959, %983
  br i1 %984, label %985, label %1055

985:                                              ; preds = %980
  %986 = icmp eq i32 %983, 0
  br i1 %986, label %993, label %987

987:                                              ; preds = %985
  %988 = sext i32 %983 to i64
  %989 = shl nsw i64 %988, 3
  %990 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %989, i32 noundef 16)
          to label %991 unwind label %939

991:                                              ; preds = %987
  %992 = load i32, ptr %958, align 4, !tbaa !319
  br label %993

993:                                              ; preds = %991, %985
  %994 = phi i32 [ %992, %991 ], [ %959, %985 ]
  %995 = phi ptr [ %990, %991 ], [ null, %985 ]
  %996 = icmp sgt i32 %994, 0
  br i1 %996, label %997, label %1042

997:                                              ; preds = %993
  %998 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %955, i64 0, i32 5
  %999 = zext i32 %994 to i64
  %1000 = and i64 %999, 3
  %1001 = icmp ult i32 %994, 4
  br i1 %1001, label %1029, label %1002

1002:                                             ; preds = %997
  %1003 = and i64 %999, 4294967292
  br label %1004

1004:                                             ; preds = %1004, %1002
  %1005 = phi i64 [ 0, %1002 ], [ %1026, %1004 ]
  %1006 = phi i64 [ 0, %1002 ], [ %1027, %1004 ]
  %1007 = getelementptr inbounds ptr, ptr %995, i64 %1005
  %1008 = load ptr, ptr %998, align 8, !tbaa !320
  %1009 = getelementptr inbounds ptr, ptr %1008, i64 %1005
  %1010 = load ptr, ptr %1009, align 8, !tbaa !219
  store ptr %1010, ptr %1007, align 8, !tbaa !219
  %1011 = or i64 %1005, 1
  %1012 = getelementptr inbounds ptr, ptr %995, i64 %1011
  %1013 = load ptr, ptr %998, align 8, !tbaa !320
  %1014 = getelementptr inbounds ptr, ptr %1013, i64 %1011
  %1015 = load ptr, ptr %1014, align 8, !tbaa !219
  store ptr %1015, ptr %1012, align 8, !tbaa !219
  %1016 = or i64 %1005, 2
  %1017 = getelementptr inbounds ptr, ptr %995, i64 %1016
  %1018 = load ptr, ptr %998, align 8, !tbaa !320
  %1019 = getelementptr inbounds ptr, ptr %1018, i64 %1016
  %1020 = load ptr, ptr %1019, align 8, !tbaa !219
  store ptr %1020, ptr %1017, align 8, !tbaa !219
  %1021 = or i64 %1005, 3
  %1022 = getelementptr inbounds ptr, ptr %995, i64 %1021
  %1023 = load ptr, ptr %998, align 8, !tbaa !320
  %1024 = getelementptr inbounds ptr, ptr %1023, i64 %1021
  %1025 = load ptr, ptr %1024, align 8, !tbaa !219
  store ptr %1025, ptr %1022, align 8, !tbaa !219
  %1026 = add nuw nsw i64 %1005, 4
  %1027 = add i64 %1006, 4
  %1028 = icmp eq i64 %1027, %1003
  br i1 %1028, label %1029, label %1004

1029:                                             ; preds = %1004, %997
  %1030 = phi i64 [ 0, %997 ], [ %1026, %1004 ]
  %1031 = icmp eq i64 %1000, 0
  br i1 %1031, label %1042, label %1032

1032:                                             ; preds = %1029, %1032
  %1033 = phi i64 [ %1039, %1032 ], [ %1030, %1029 ]
  %1034 = phi i64 [ %1040, %1032 ], [ 0, %1029 ]
  %1035 = getelementptr inbounds ptr, ptr %995, i64 %1033
  %1036 = load ptr, ptr %998, align 8, !tbaa !320
  %1037 = getelementptr inbounds ptr, ptr %1036, i64 %1033
  %1038 = load ptr, ptr %1037, align 8, !tbaa !219
  store ptr %1038, ptr %1035, align 8, !tbaa !219
  %1039 = add nuw nsw i64 %1033, 1
  %1040 = add i64 %1034, 1
  %1041 = icmp eq i64 %1040, %1000
  br i1 %1041, label %1042, label %1032, !llvm.loop !353

1042:                                             ; preds = %1029, %1032, %993
  %1043 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %955, i64 0, i32 5
  %1044 = load ptr, ptr %1043, align 8, !tbaa !320
  %1045 = icmp eq ptr %1044, null
  %1046 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %955, i64 0, i32 6
  %1047 = load i8, ptr %1046, align 8
  %1048 = icmp eq i8 %1047, 0
  %1049 = select i1 %1045, i1 true, i1 %1048
  br i1 %1049, label %1053, label %1050

1050:                                             ; preds = %1042
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1044)
          to label %1051 unwind label %939

1051:                                             ; preds = %1050
  %1052 = load i32, ptr %958, align 4, !tbaa !319
  br label %1053

1053:                                             ; preds = %1051, %1042
  %1054 = phi i32 [ %1052, %1051 ], [ %994, %1042 ]
  store i8 1, ptr %1046, align 8, !tbaa !341
  store ptr %995, ptr %1043, align 8, !tbaa !320
  store i32 %983, ptr %977, align 8, !tbaa !342
  br label %1055

1055:                                             ; preds = %1053, %980, %976
  %1056 = phi i32 [ %1054, %1053 ], [ %959, %980 ], [ %959, %976 ]
  %1057 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %955, i64 0, i32 5
  %1058 = load ptr, ptr %1057, align 8, !tbaa !320
  %1059 = sext i32 %1056 to i64
  %1060 = getelementptr inbounds ptr, ptr %1058, i64 %1059
  store ptr %957, ptr %1060, align 8, !tbaa !219
  %1061 = add nsw i32 %1056, 1
  store i32 %1061, ptr %958, align 4, !tbaa !319
  br label %1062

1062:                                             ; preds = %1055, %973, %941
  %1063 = icmp eq i64 %819, 3
  br i1 %1063, label %806, label %811

1064:                                             ; preds = %806
  %1065 = load i32, ptr %5, align 4, !tbaa !124
  br label %1066

1066:                                             ; preds = %1064, %747
  %1067 = phi i32 [ %1065, %1064 ], [ %748, %747 ]
  %1068 = icmp sgt i32 %1067, 1
  br i1 %1068, label %1069, label %1337

1069:                                             ; preds = %1066
  %1070 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 424, i32 noundef 16)
          to label %1071 unwind label %1231

1071:                                             ; preds = %1069
  %1072 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1070, i64 0, i32 6
  store i8 1, ptr %1072, align 8, !tbaa !341
  %1073 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1070, i64 0, i32 5
  store ptr null, ptr %1073, align 8, !tbaa !320
  %1074 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1070, i64 0, i32 2
  store i32 0, ptr %1074, align 4, !tbaa !319
  %1075 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1070, i64 0, i32 3
  store i32 0, ptr %1075, align 8, !tbaa !342
  %1076 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 1, i32 6
  store i8 1, ptr %1076, align 8, !tbaa !36
  %1077 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 1, i32 5
  store ptr null, ptr %1077, align 8, !tbaa !39
  %1078 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 1, i32 2
  store i32 0, ptr %1078, align 4, !tbaa !40
  %1079 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 1, i32 3
  store i32 0, ptr %1079, align 8, !tbaa !41
  %1080 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 2, i32 6
  store i8 1, ptr %1080, align 8, !tbaa !30
  %1081 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 2, i32 5
  store ptr null, ptr %1081, align 8, !tbaa !33
  %1082 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 2, i32 2
  store i32 0, ptr %1082, align 4, !tbaa !34
  %1083 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 2, i32 3
  store i32 0, ptr %1083, align 8, !tbaa !35
  %1084 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 15
  %1085 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %1084, i8 0, i64 24, i1 false)
  store <2 x float> <float 1.000000e+02, float 0x3F847AE140000000>, ptr %1085, align 8, !tbaa !137
  %1086 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 22
  store i8 0, ptr %1086, align 8, !tbaa !345
  %1087 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1070, i64 0, i32 23
  store i8 0, ptr %1087, align 1, !tbaa !346
  %1088 = load i32, ptr %51, align 4, !tbaa !88
  %1089 = icmp sgt i32 %1088, 0
  br i1 %1089, label %1090, label %1153

1090:                                             ; preds = %1071
  %1091 = zext i32 %1088 to i64
  %1092 = shl nuw nsw i64 %1091, 3
  %1093 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1092, i32 noundef 16)
          to label %1094 unwind label %1231

1094:                                             ; preds = %1090
  %1095 = load i32, ptr %1074, align 4, !tbaa !319
  %1096 = icmp sgt i32 %1095, 0
  br i1 %1096, label %1097, label %1141

1097:                                             ; preds = %1094
  %1098 = zext i32 %1095 to i64
  %1099 = and i64 %1098, 3
  %1100 = icmp ult i32 %1095, 4
  br i1 %1100, label %1128, label %1101

1101:                                             ; preds = %1097
  %1102 = and i64 %1098, 4294967292
  br label %1103

1103:                                             ; preds = %1103, %1101
  %1104 = phi i64 [ 0, %1101 ], [ %1125, %1103 ]
  %1105 = phi i64 [ 0, %1101 ], [ %1126, %1103 ]
  %1106 = getelementptr inbounds ptr, ptr %1093, i64 %1104
  %1107 = load ptr, ptr %1073, align 8, !tbaa !320
  %1108 = getelementptr inbounds ptr, ptr %1107, i64 %1104
  %1109 = load ptr, ptr %1108, align 8, !tbaa !219
  store ptr %1109, ptr %1106, align 8, !tbaa !219
  %1110 = or i64 %1104, 1
  %1111 = getelementptr inbounds ptr, ptr %1093, i64 %1110
  %1112 = load ptr, ptr %1073, align 8, !tbaa !320
  %1113 = getelementptr inbounds ptr, ptr %1112, i64 %1110
  %1114 = load ptr, ptr %1113, align 8, !tbaa !219
  store ptr %1114, ptr %1111, align 8, !tbaa !219
  %1115 = or i64 %1104, 2
  %1116 = getelementptr inbounds ptr, ptr %1093, i64 %1115
  %1117 = load ptr, ptr %1073, align 8, !tbaa !320
  %1118 = getelementptr inbounds ptr, ptr %1117, i64 %1115
  %1119 = load ptr, ptr %1118, align 8, !tbaa !219
  store ptr %1119, ptr %1116, align 8, !tbaa !219
  %1120 = or i64 %1104, 3
  %1121 = getelementptr inbounds ptr, ptr %1093, i64 %1120
  %1122 = load ptr, ptr %1073, align 8, !tbaa !320
  %1123 = getelementptr inbounds ptr, ptr %1122, i64 %1120
  %1124 = load ptr, ptr %1123, align 8, !tbaa !219
  store ptr %1124, ptr %1121, align 8, !tbaa !219
  %1125 = add nuw nsw i64 %1104, 4
  %1126 = add i64 %1105, 4
  %1127 = icmp eq i64 %1126, %1102
  br i1 %1127, label %1128, label %1103

1128:                                             ; preds = %1103, %1097
  %1129 = phi i64 [ 0, %1097 ], [ %1125, %1103 ]
  %1130 = icmp eq i64 %1099, 0
  br i1 %1130, label %1141, label %1131

1131:                                             ; preds = %1128, %1131
  %1132 = phi i64 [ %1138, %1131 ], [ %1129, %1128 ]
  %1133 = phi i64 [ %1139, %1131 ], [ 0, %1128 ]
  %1134 = getelementptr inbounds ptr, ptr %1093, i64 %1132
  %1135 = load ptr, ptr %1073, align 8, !tbaa !320
  %1136 = getelementptr inbounds ptr, ptr %1135, i64 %1132
  %1137 = load ptr, ptr %1136, align 8, !tbaa !219
  store ptr %1137, ptr %1134, align 8, !tbaa !219
  %1138 = add nuw nsw i64 %1132, 1
  %1139 = add i64 %1133, 1
  %1140 = icmp eq i64 %1139, %1099
  br i1 %1140, label %1141, label %1131, !llvm.loop !354

1141:                                             ; preds = %1128, %1131, %1094
  %1142 = load ptr, ptr %1073, align 8, !tbaa !320
  %1143 = icmp eq ptr %1142, null
  %1144 = load i8, ptr %1072, align 8
  %1145 = icmp eq i8 %1144, 0
  %1146 = select i1 %1143, i1 true, i1 %1145
  br i1 %1146, label %1148, label %1147

1147:                                             ; preds = %1141
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1142)
          to label %1148 unwind label %1231

1148:                                             ; preds = %1141, %1147
  store i8 1, ptr %1072, align 8, !tbaa !341
  store ptr %1093, ptr %1073, align 8, !tbaa !320
  store i32 %1088, ptr %1075, align 8, !tbaa !342
  %1149 = load i32, ptr %51, align 4, !tbaa !88
  %1150 = icmp sgt i32 %1149, 0
  br i1 %1150, label %1151, label %1153

1151:                                             ; preds = %1148
  %1152 = load i32, ptr %1074, align 4, !tbaa !319
  br label %1233

1153:                                             ; preds = %1314, %1071, %1148
  %1154 = load i32, ptr %5, align 4, !tbaa !124
  %1155 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 3
  %1156 = load i32, ptr %1155, align 8, !tbaa !125
  %1157 = icmp eq i32 %1154, %1156
  br i1 %1157, label %1158, label %1327

1158:                                             ; preds = %1153
  %1159 = icmp eq i32 %1154, 0
  %1160 = shl nsw i32 %1154, 1
  %1161 = select i1 %1159, i32 1, i32 %1160
  %1162 = icmp slt i32 %1154, %1161
  br i1 %1162, label %1163, label %1327

1163:                                             ; preds = %1158
  %1164 = icmp eq i32 %1161, 0
  br i1 %1164, label %1171, label %1165

1165:                                             ; preds = %1163
  %1166 = sext i32 %1161 to i64
  %1167 = shl nsw i64 %1166, 3
  %1168 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1167, i32 noundef 16)
          to label %1169 unwind label %1231

1169:                                             ; preds = %1165
  %1170 = load i32, ptr %5, align 4, !tbaa !124
  br label %1171

1171:                                             ; preds = %1169, %1163
  %1172 = phi i32 [ %1170, %1169 ], [ %1154, %1163 ]
  %1173 = phi ptr [ %1168, %1169 ], [ null, %1163 ]
  %1174 = icmp sgt i32 %1172, 0
  br i1 %1174, label %1175, label %1219

1175:                                             ; preds = %1171
  %1176 = zext i32 %1172 to i64
  %1177 = and i64 %1176, 3
  %1178 = icmp ult i32 %1172, 4
  br i1 %1178, label %1206, label %1179

1179:                                             ; preds = %1175
  %1180 = and i64 %1176, 4294967292
  br label %1181

1181:                                             ; preds = %1181, %1179
  %1182 = phi i64 [ 0, %1179 ], [ %1203, %1181 ]
  %1183 = phi i64 [ 0, %1179 ], [ %1204, %1181 ]
  %1184 = getelementptr inbounds ptr, ptr %1173, i64 %1182
  %1185 = load ptr, ptr %360, align 8, !tbaa !123
  %1186 = getelementptr inbounds ptr, ptr %1185, i64 %1182
  %1187 = load ptr, ptr %1186, align 8, !tbaa !219
  store ptr %1187, ptr %1184, align 8, !tbaa !219
  %1188 = or i64 %1182, 1
  %1189 = getelementptr inbounds ptr, ptr %1173, i64 %1188
  %1190 = load ptr, ptr %360, align 8, !tbaa !123
  %1191 = getelementptr inbounds ptr, ptr %1190, i64 %1188
  %1192 = load ptr, ptr %1191, align 8, !tbaa !219
  store ptr %1192, ptr %1189, align 8, !tbaa !219
  %1193 = or i64 %1182, 2
  %1194 = getelementptr inbounds ptr, ptr %1173, i64 %1193
  %1195 = load ptr, ptr %360, align 8, !tbaa !123
  %1196 = getelementptr inbounds ptr, ptr %1195, i64 %1193
  %1197 = load ptr, ptr %1196, align 8, !tbaa !219
  store ptr %1197, ptr %1194, align 8, !tbaa !219
  %1198 = or i64 %1182, 3
  %1199 = getelementptr inbounds ptr, ptr %1173, i64 %1198
  %1200 = load ptr, ptr %360, align 8, !tbaa !123
  %1201 = getelementptr inbounds ptr, ptr %1200, i64 %1198
  %1202 = load ptr, ptr %1201, align 8, !tbaa !219
  store ptr %1202, ptr %1199, align 8, !tbaa !219
  %1203 = add nuw nsw i64 %1182, 4
  %1204 = add i64 %1183, 4
  %1205 = icmp eq i64 %1204, %1180
  br i1 %1205, label %1206, label %1181

1206:                                             ; preds = %1181, %1175
  %1207 = phi i64 [ 0, %1175 ], [ %1203, %1181 ]
  %1208 = icmp eq i64 %1177, 0
  br i1 %1208, label %1219, label %1209

1209:                                             ; preds = %1206, %1209
  %1210 = phi i64 [ %1216, %1209 ], [ %1207, %1206 ]
  %1211 = phi i64 [ %1217, %1209 ], [ 0, %1206 ]
  %1212 = getelementptr inbounds ptr, ptr %1173, i64 %1210
  %1213 = load ptr, ptr %360, align 8, !tbaa !123
  %1214 = getelementptr inbounds ptr, ptr %1213, i64 %1210
  %1215 = load ptr, ptr %1214, align 8, !tbaa !219
  store ptr %1215, ptr %1212, align 8, !tbaa !219
  %1216 = add nuw nsw i64 %1210, 1
  %1217 = add i64 %1211, 1
  %1218 = icmp eq i64 %1217, %1177
  br i1 %1218, label %1219, label %1209, !llvm.loop !355

1219:                                             ; preds = %1206, %1209, %1171
  %1220 = load ptr, ptr %360, align 8, !tbaa !123
  %1221 = icmp eq ptr %1220, null
  %1222 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 6
  %1223 = load i8, ptr %1222, align 8
  %1224 = icmp eq i8 %1223, 0
  %1225 = select i1 %1221, i1 true, i1 %1224
  br i1 %1225, label %1229, label %1226

1226:                                             ; preds = %1219
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1220)
          to label %1227 unwind label %1231

1227:                                             ; preds = %1226
  %1228 = load i32, ptr %5, align 4, !tbaa !124
  br label %1229

1229:                                             ; preds = %1227, %1219
  %1230 = phi i32 [ %1228, %1227 ], [ %1172, %1219 ]
  store i8 1, ptr %1222, align 8, !tbaa !122
  store ptr %1173, ptr %360, align 8, !tbaa !123
  store i32 %1161, ptr %1155, align 8, !tbaa !125
  br label %1327

1231:                                             ; preds = %1226, %1165, %1147, %1090, %1069
  %1232 = landingpad { ptr, i32 }
          cleanup
  br label %1399

1233:                                             ; preds = %1151, %1314
  %1234 = phi i32 [ %1149, %1151 ], [ %1315, %1314 ]
  %1235 = phi i32 [ %1088, %1151 ], [ %1316, %1314 ]
  %1236 = phi i32 [ %1152, %1151 ], [ %1321, %1314 ]
  %1237 = phi i64 [ 0, %1151 ], [ %1322, %1314 ]
  %1238 = load ptr, ptr %361, align 8, !tbaa !87
  %1239 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1238, i64 %1237
  %1240 = icmp eq i32 %1236, %1235
  br i1 %1240, label %1241, label %1314

1241:                                             ; preds = %1233
  %1242 = icmp eq i32 %1235, 0
  %1243 = shl nsw i32 %1235, 1
  %1244 = select i1 %1242, i32 1, i32 %1243
  %1245 = icmp slt i32 %1235, %1244
  br i1 %1245, label %1246, label %1314

1246:                                             ; preds = %1241
  %1247 = icmp eq i32 %1244, 0
  br i1 %1247, label %1254, label %1248

1248:                                             ; preds = %1246
  %1249 = sext i32 %1244 to i64
  %1250 = shl nsw i64 %1249, 3
  %1251 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1250, i32 noundef 16)
          to label %1252 unwind label %1325

1252:                                             ; preds = %1248
  %1253 = load i32, ptr %1074, align 4, !tbaa !319
  br label %1254

1254:                                             ; preds = %1252, %1246
  %1255 = phi i32 [ %1253, %1252 ], [ %1235, %1246 ]
  %1256 = phi ptr [ %1251, %1252 ], [ null, %1246 ]
  %1257 = icmp sgt i32 %1255, 0
  br i1 %1257, label %1258, label %1302

1258:                                             ; preds = %1254
  %1259 = zext i32 %1255 to i64
  %1260 = and i64 %1259, 3
  %1261 = icmp ult i32 %1255, 4
  br i1 %1261, label %1289, label %1262

1262:                                             ; preds = %1258
  %1263 = and i64 %1259, 4294967292
  br label %1264

1264:                                             ; preds = %1264, %1262
  %1265 = phi i64 [ 0, %1262 ], [ %1286, %1264 ]
  %1266 = phi i64 [ 0, %1262 ], [ %1287, %1264 ]
  %1267 = getelementptr inbounds ptr, ptr %1256, i64 %1265
  %1268 = load ptr, ptr %1073, align 8, !tbaa !320
  %1269 = getelementptr inbounds ptr, ptr %1268, i64 %1265
  %1270 = load ptr, ptr %1269, align 8, !tbaa !219
  store ptr %1270, ptr %1267, align 8, !tbaa !219
  %1271 = or i64 %1265, 1
  %1272 = getelementptr inbounds ptr, ptr %1256, i64 %1271
  %1273 = load ptr, ptr %1073, align 8, !tbaa !320
  %1274 = getelementptr inbounds ptr, ptr %1273, i64 %1271
  %1275 = load ptr, ptr %1274, align 8, !tbaa !219
  store ptr %1275, ptr %1272, align 8, !tbaa !219
  %1276 = or i64 %1265, 2
  %1277 = getelementptr inbounds ptr, ptr %1256, i64 %1276
  %1278 = load ptr, ptr %1073, align 8, !tbaa !320
  %1279 = getelementptr inbounds ptr, ptr %1278, i64 %1276
  %1280 = load ptr, ptr %1279, align 8, !tbaa !219
  store ptr %1280, ptr %1277, align 8, !tbaa !219
  %1281 = or i64 %1265, 3
  %1282 = getelementptr inbounds ptr, ptr %1256, i64 %1281
  %1283 = load ptr, ptr %1073, align 8, !tbaa !320
  %1284 = getelementptr inbounds ptr, ptr %1283, i64 %1281
  %1285 = load ptr, ptr %1284, align 8, !tbaa !219
  store ptr %1285, ptr %1282, align 8, !tbaa !219
  %1286 = add nuw nsw i64 %1265, 4
  %1287 = add i64 %1266, 4
  %1288 = icmp eq i64 %1287, %1263
  br i1 %1288, label %1289, label %1264

1289:                                             ; preds = %1264, %1258
  %1290 = phi i64 [ 0, %1258 ], [ %1286, %1264 ]
  %1291 = icmp eq i64 %1260, 0
  br i1 %1291, label %1302, label %1292

1292:                                             ; preds = %1289, %1292
  %1293 = phi i64 [ %1299, %1292 ], [ %1290, %1289 ]
  %1294 = phi i64 [ %1300, %1292 ], [ 0, %1289 ]
  %1295 = getelementptr inbounds ptr, ptr %1256, i64 %1293
  %1296 = load ptr, ptr %1073, align 8, !tbaa !320
  %1297 = getelementptr inbounds ptr, ptr %1296, i64 %1293
  %1298 = load ptr, ptr %1297, align 8, !tbaa !219
  store ptr %1298, ptr %1295, align 8, !tbaa !219
  %1299 = add nuw nsw i64 %1293, 1
  %1300 = add i64 %1294, 1
  %1301 = icmp eq i64 %1300, %1260
  br i1 %1301, label %1302, label %1292, !llvm.loop !356

1302:                                             ; preds = %1289, %1292, %1254
  %1303 = load ptr, ptr %1073, align 8, !tbaa !320
  %1304 = icmp eq ptr %1303, null
  %1305 = load i8, ptr %1072, align 8
  %1306 = icmp eq i8 %1305, 0
  %1307 = select i1 %1304, i1 true, i1 %1306
  br i1 %1307, label %1311, label %1308

1308:                                             ; preds = %1302
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1303)
          to label %1309 unwind label %1325

1309:                                             ; preds = %1308
  %1310 = load i32, ptr %1074, align 4, !tbaa !319
  br label %1311

1311:                                             ; preds = %1309, %1302
  %1312 = phi i32 [ %1310, %1309 ], [ %1255, %1302 ]
  store i8 1, ptr %1072, align 8, !tbaa !341
  store ptr %1256, ptr %1073, align 8, !tbaa !320
  store i32 %1244, ptr %1075, align 8, !tbaa !342
  %1313 = load i32, ptr %51, align 4, !tbaa !88
  br label %1314

1314:                                             ; preds = %1311, %1241, %1233
  %1315 = phi i32 [ %1313, %1311 ], [ %1234, %1241 ], [ %1234, %1233 ]
  %1316 = phi i32 [ %1244, %1311 ], [ %1235, %1241 ], [ %1235, %1233 ]
  %1317 = phi i32 [ %1312, %1311 ], [ %1235, %1241 ], [ %1236, %1233 ]
  %1318 = load ptr, ptr %1073, align 8, !tbaa !320
  %1319 = sext i32 %1317 to i64
  %1320 = getelementptr inbounds ptr, ptr %1318, i64 %1319
  store ptr %1239, ptr %1320, align 8, !tbaa !219
  %1321 = add nsw i32 %1317, 1
  store i32 %1321, ptr %1074, align 4, !tbaa !319
  %1322 = add nuw nsw i64 %1237, 1
  %1323 = sext i32 %1315 to i64
  %1324 = icmp slt i64 %1322, %1323
  br i1 %1324, label %1233, label %1153

1325:                                             ; preds = %1308, %1248
  %1326 = landingpad { ptr, i32 }
          cleanup
  br label %1399

1327:                                             ; preds = %1229, %1158, %1153
  %1328 = phi i32 [ %1230, %1229 ], [ %1154, %1158 ], [ %1154, %1153 ]
  %1329 = load ptr, ptr %360, align 8, !tbaa !123
  %1330 = sext i32 %1328 to i64
  %1331 = getelementptr inbounds ptr, ptr %1329, i64 %1330
  store ptr %1070, ptr %1331, align 8, !tbaa !219
  %1332 = add nsw i32 %1328, 1
  store i32 %1332, ptr %5, align 4, !tbaa !124
  %1333 = load ptr, ptr %360, align 8, !tbaa !123
  %1334 = getelementptr inbounds ptr, ptr %1333, i64 %1330
  %1335 = load ptr, ptr %1333, align 8, !tbaa !219
  %1336 = load ptr, ptr %1334, align 8, !tbaa !219
  store ptr %1336, ptr %1333, align 8, !tbaa !219
  store ptr %1335, ptr %1334, align 8, !tbaa !219
  br label %1337

1337:                                             ; preds = %1327, %1066
  %1338 = phi i32 [ %1332, %1327 ], [ %1067, %1066 ]
  %1339 = icmp sgt i32 %1338, 0
  br i1 %1339, label %1340, label %1393

1340:                                             ; preds = %1337
  %1341 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  br label %1342

1342:                                             ; preds = %1340, %1388
  %1343 = phi i32 [ %1338, %1340 ], [ %1389, %1388 ]
  %1344 = phi i32 [ 0, %1340 ], [ %1391, %1388 ]
  %1345 = load ptr, ptr %360, align 8, !tbaa !123
  %1346 = sext i32 %1344 to i64
  %1347 = getelementptr inbounds ptr, ptr %1345, i64 %1346
  %1348 = load ptr, ptr %1347, align 8, !tbaa !219
  %1349 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1348, i64 0, i32 2
  %1350 = load i32, ptr %1349, align 4, !tbaa !319
  %1351 = icmp eq i32 %1350, 0
  br i1 %1351, label %1352, label %1388

1352:                                             ; preds = %1342
  %1353 = add nsw i32 %1344, -1
  %1354 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1348, i64 0, i32 15
  %1355 = load ptr, ptr %1354, align 8, !tbaa !221
  %1356 = icmp eq ptr %1355, null
  br i1 %1356, label %1358, label %1357

1357:                                             ; preds = %1352
  invoke void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64) %1341, ptr noundef nonnull %1355)
          to label %1358 unwind label %765

1358:                                             ; preds = %1357, %1352
  invoke void @_ZN10btSoftBody7ClusterD2Ev(ptr noundef nonnull align 8 dereferenceable(424) %1348)
          to label %1359 unwind label %765

1359:                                             ; preds = %1358
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1348)
          to label %1360 unwind label %765

1360:                                             ; preds = %1359
  %1361 = load i32, ptr %5, align 4, !tbaa !124
  %1362 = icmp sgt i32 %1361, 0
  br i1 %1362, label %1363, label %1388

1363:                                             ; preds = %1360
  %1364 = load ptr, ptr %360, align 8, !tbaa !123
  %1365 = zext i32 %1361 to i64
  br label %1366

1366:                                             ; preds = %1371, %1363
  %1367 = phi i64 [ 0, %1363 ], [ %1372, %1371 ]
  %1368 = getelementptr inbounds ptr, ptr %1364, i64 %1367
  %1369 = load ptr, ptr %1368, align 8, !tbaa !219
  %1370 = icmp eq ptr %1369, %1348
  br i1 %1370, label %1374, label %1371

1371:                                             ; preds = %1366
  %1372 = add nuw nsw i64 %1367, 1
  %1373 = icmp eq i64 %1372, %1365
  br i1 %1373, label %1388, label %1366

1374:                                             ; preds = %1366
  %1375 = trunc i64 %1367 to i32
  %1376 = icmp sgt i32 %1361, %1375
  br i1 %1376, label %1377, label %1388

1377:                                             ; preds = %1374
  %1378 = add nsw i32 %1361, -1
  %1379 = shl i64 %1367, 32
  %1380 = ashr exact i64 %1379, 32
  %1381 = getelementptr inbounds ptr, ptr %1364, i64 %1380
  %1382 = load ptr, ptr %1381, align 8, !tbaa !219
  %1383 = sext i32 %1378 to i64
  %1384 = getelementptr inbounds ptr, ptr %1364, i64 %1383
  %1385 = load ptr, ptr %1384, align 8, !tbaa !219
  store ptr %1385, ptr %1381, align 8, !tbaa !219
  %1386 = load ptr, ptr %360, align 8, !tbaa !123
  %1387 = getelementptr inbounds ptr, ptr %1386, i64 %1383
  store ptr %1382, ptr %1387, align 8, !tbaa !219
  store i32 %1378, ptr %5, align 4, !tbaa !124
  br label %1388

1388:                                             ; preds = %1371, %1377, %1374, %1360, %1342
  %1389 = phi i32 [ %1343, %1342 ], [ %1361, %1360 ], [ %1361, %1374 ], [ %1378, %1377 ], [ %1361, %1371 ]
  %1390 = phi i32 [ %1344, %1342 ], [ %1353, %1360 ], [ %1353, %1374 ], [ %1353, %1377 ], [ %1353, %1371 ]
  %1391 = add nsw i32 %1390, 1
  %1392 = icmp slt i32 %1391, %1389
  br i1 %1392, label %1342, label %1393

1393:                                             ; preds = %1388, %1337
  %1394 = icmp eq ptr %728, null
  br i1 %1394, label %1396, label %1395

1395:                                             ; preds = %1393
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %728)
          to label %1396 unwind label %763

1396:                                             ; preds = %1393, %1395
  %1397 = icmp eq ptr %321, null
  br i1 %1397, label %2348, label %1398

1398:                                             ; preds = %1396
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %321)
  br label %2348

1399:                                             ; preds = %1231, %1325, %939, %765
  %1400 = phi { ptr, i32 } [ %940, %939 ], [ %766, %765 ], [ %1326, %1325 ], [ %1232, %1231 ]
  %1401 = icmp eq ptr %728, null
  br i1 %1401, label %1403, label %1402

1402:                                             ; preds = %1399
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %728)
          to label %1403 unwind label %2531

1403:                                             ; preds = %763, %1402, %767, %1399, %712
  %1404 = phi { ptr, i32 } [ %713, %712 ], [ %764, %763 ], [ %768, %767 ], [ %1400, %1399 ], [ %1400, %1402 ]
  %1405 = icmp eq ptr %321, null
  br i1 %1405, label %1408, label %1406

1406:                                             ; preds = %563, %1403
  %1407 = phi { ptr, i32 } [ %564, %563 ], [ %1404, %1403 ]
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %321)
          to label %1408 unwind label %2531

1408:                                             ; preds = %1403, %1406
  %1409 = phi { ptr, i32 } [ %1404, %1403 ], [ %1407, %1406 ]
  resume { ptr, i32 } %1409

1410:                                             ; preds = %158, %190
  %1411 = phi i32 [ %187, %190 ], [ %53, %158 ]
  %1412 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 2
  %1413 = load i32, ptr %1412, align 4, !tbaa !100
  %1414 = icmp eq i32 %1413, 0
  br i1 %1414, label %1924, label %1415

1415:                                             ; preds = %1410
  %1416 = icmp slt i32 %1411, %1413
  br i1 %1416, label %1417, label %1516

1417:                                             ; preds = %1415
  %1418 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 3
  %1419 = load i32, ptr %1418, align 8, !tbaa !125
  %1420 = icmp slt i32 %1419, %1413
  %1421 = sext i32 %1413 to i64
  br i1 %1420, label %1422, label %1482

1422:                                             ; preds = %1417
  %1423 = shl nsw i64 %1421, 3
  %1424 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1423, i32 noundef 16)
  %1425 = load i32, ptr %5, align 4, !tbaa !124
  %1426 = icmp sgt i32 %1425, 0
  br i1 %1426, label %1427, label %1472

1427:                                             ; preds = %1422
  %1428 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %1429 = zext i32 %1425 to i64
  %1430 = and i64 %1429, 3
  %1431 = icmp ult i32 %1425, 4
  br i1 %1431, label %1459, label %1432

1432:                                             ; preds = %1427
  %1433 = and i64 %1429, 4294967292
  br label %1434

1434:                                             ; preds = %1434, %1432
  %1435 = phi i64 [ 0, %1432 ], [ %1456, %1434 ]
  %1436 = phi i64 [ 0, %1432 ], [ %1457, %1434 ]
  %1437 = getelementptr inbounds ptr, ptr %1424, i64 %1435
  %1438 = load ptr, ptr %1428, align 8, !tbaa !123
  %1439 = getelementptr inbounds ptr, ptr %1438, i64 %1435
  %1440 = load ptr, ptr %1439, align 8, !tbaa !219
  store ptr %1440, ptr %1437, align 8, !tbaa !219
  %1441 = or i64 %1435, 1
  %1442 = getelementptr inbounds ptr, ptr %1424, i64 %1441
  %1443 = load ptr, ptr %1428, align 8, !tbaa !123
  %1444 = getelementptr inbounds ptr, ptr %1443, i64 %1441
  %1445 = load ptr, ptr %1444, align 8, !tbaa !219
  store ptr %1445, ptr %1442, align 8, !tbaa !219
  %1446 = or i64 %1435, 2
  %1447 = getelementptr inbounds ptr, ptr %1424, i64 %1446
  %1448 = load ptr, ptr %1428, align 8, !tbaa !123
  %1449 = getelementptr inbounds ptr, ptr %1448, i64 %1446
  %1450 = load ptr, ptr %1449, align 8, !tbaa !219
  store ptr %1450, ptr %1447, align 8, !tbaa !219
  %1451 = or i64 %1435, 3
  %1452 = getelementptr inbounds ptr, ptr %1424, i64 %1451
  %1453 = load ptr, ptr %1428, align 8, !tbaa !123
  %1454 = getelementptr inbounds ptr, ptr %1453, i64 %1451
  %1455 = load ptr, ptr %1454, align 8, !tbaa !219
  store ptr %1455, ptr %1452, align 8, !tbaa !219
  %1456 = add nuw nsw i64 %1435, 4
  %1457 = add i64 %1436, 4
  %1458 = icmp eq i64 %1457, %1433
  br i1 %1458, label %1459, label %1434

1459:                                             ; preds = %1434, %1427
  %1460 = phi i64 [ 0, %1427 ], [ %1456, %1434 ]
  %1461 = icmp eq i64 %1430, 0
  br i1 %1461, label %1472, label %1462

1462:                                             ; preds = %1459, %1462
  %1463 = phi i64 [ %1469, %1462 ], [ %1460, %1459 ]
  %1464 = phi i64 [ %1470, %1462 ], [ 0, %1459 ]
  %1465 = getelementptr inbounds ptr, ptr %1424, i64 %1463
  %1466 = load ptr, ptr %1428, align 8, !tbaa !123
  %1467 = getelementptr inbounds ptr, ptr %1466, i64 %1463
  %1468 = load ptr, ptr %1467, align 8, !tbaa !219
  store ptr %1468, ptr %1465, align 8, !tbaa !219
  %1469 = add nuw nsw i64 %1463, 1
  %1470 = add i64 %1464, 1
  %1471 = icmp eq i64 %1470, %1430
  br i1 %1471, label %1472, label %1462, !llvm.loop !357

1472:                                             ; preds = %1459, %1462, %1422
  %1473 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %1474 = load ptr, ptr %1473, align 8, !tbaa !123
  %1475 = icmp eq ptr %1474, null
  %1476 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 6
  %1477 = load i8, ptr %1476, align 8
  %1478 = icmp eq i8 %1477, 0
  %1479 = select i1 %1475, i1 true, i1 %1478
  br i1 %1479, label %1481, label %1480

1480:                                             ; preds = %1472
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1474)
  br label %1481

1481:                                             ; preds = %1480, %1472
  store i8 1, ptr %1476, align 8, !tbaa !122
  store ptr %1424, ptr %1473, align 8, !tbaa !123
  store i32 %1413, ptr %1418, align 8, !tbaa !125
  br label %1482

1482:                                             ; preds = %1417, %1481
  %1483 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %1484 = sext i32 %1411 to i64
  %1485 = sub nsw i64 %1421, %1484
  %1486 = xor i64 %1484, -1
  %1487 = add nsw i64 %1486, %1421
  %1488 = and i64 %1485, 3
  %1489 = icmp eq i64 %1488, 0
  br i1 %1489, label %1498, label %1490

1490:                                             ; preds = %1482, %1490
  %1491 = phi i64 [ %1495, %1490 ], [ %1484, %1482 ]
  %1492 = phi i64 [ %1496, %1490 ], [ 0, %1482 ]
  %1493 = load ptr, ptr %1483, align 8, !tbaa !123
  %1494 = getelementptr inbounds ptr, ptr %1493, i64 %1491
  store ptr null, ptr %1494, align 8, !tbaa !219
  %1495 = add nsw i64 %1491, 1
  %1496 = add i64 %1492, 1
  %1497 = icmp eq i64 %1496, %1488
  br i1 %1497, label %1498, label %1490, !llvm.loop !358

1498:                                             ; preds = %1490, %1482
  %1499 = phi i64 [ %1484, %1482 ], [ %1495, %1490 ]
  %1500 = icmp ult i64 %1487, 3
  br i1 %1500, label %1516, label %1501

1501:                                             ; preds = %1498, %1501
  %1502 = phi i64 [ %1514, %1501 ], [ %1499, %1498 ]
  %1503 = load ptr, ptr %1483, align 8, !tbaa !123
  %1504 = getelementptr inbounds ptr, ptr %1503, i64 %1502
  store ptr null, ptr %1504, align 8, !tbaa !219
  %1505 = add nsw i64 %1502, 1
  %1506 = load ptr, ptr %1483, align 8, !tbaa !123
  %1507 = getelementptr inbounds ptr, ptr %1506, i64 %1505
  store ptr null, ptr %1507, align 8, !tbaa !219
  %1508 = add nsw i64 %1502, 2
  %1509 = load ptr, ptr %1483, align 8, !tbaa !123
  %1510 = getelementptr inbounds ptr, ptr %1509, i64 %1508
  store ptr null, ptr %1510, align 8, !tbaa !219
  %1511 = add nsw i64 %1502, 3
  %1512 = load ptr, ptr %1483, align 8, !tbaa !123
  %1513 = getelementptr inbounds ptr, ptr %1512, i64 %1511
  store ptr null, ptr %1513, align 8, !tbaa !219
  %1514 = add nsw i64 %1502, 4
  %1515 = icmp eq i64 %1514, %1421
  br i1 %1515, label %1516, label %1501

1516:                                             ; preds = %1498, %1501, %1415
  store i32 %1413, ptr %5, align 4, !tbaa !124
  %1517 = icmp sgt i32 %1413, 0
  br i1 %1517, label %1518, label %1520

1518:                                             ; preds = %1516
  %1519 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  br label %1526

1520:                                             ; preds = %1526, %1516
  %1521 = load i32, ptr %1412, align 4, !tbaa !100
  %1522 = icmp sgt i32 %1521, 0
  br i1 %1522, label %1523, label %2348

1523:                                             ; preds = %1520
  %1524 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %1525 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 12, i32 5
  br label %1554

1526:                                             ; preds = %1518, %1526
  %1527 = phi i64 [ 0, %1518 ], [ %1550, %1526 ]
  %1528 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 424, i32 noundef 16)
  %1529 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1528, i64 0, i32 6
  store i8 1, ptr %1529, align 8, !tbaa !341
  %1530 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1528, i64 0, i32 5
  store ptr null, ptr %1530, align 8, !tbaa !320
  %1531 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1528, i64 0, i32 2
  store i32 0, ptr %1531, align 4, !tbaa !319
  %1532 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1528, i64 0, i32 3
  store i32 0, ptr %1532, align 8, !tbaa !342
  %1533 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 1, i32 6
  store i8 1, ptr %1533, align 8, !tbaa !36
  %1534 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 1, i32 5
  store ptr null, ptr %1534, align 8, !tbaa !39
  %1535 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 1, i32 2
  store i32 0, ptr %1535, align 4, !tbaa !40
  %1536 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 1, i32 3
  store i32 0, ptr %1536, align 8, !tbaa !41
  %1537 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 2, i32 6
  store i8 1, ptr %1537, align 8, !tbaa !30
  %1538 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 2, i32 5
  store ptr null, ptr %1538, align 8, !tbaa !33
  %1539 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 2, i32 2
  store i32 0, ptr %1539, align 4, !tbaa !34
  %1540 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 2, i32 3
  store i32 0, ptr %1540, align 8, !tbaa !35
  %1541 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 15
  %1542 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %1541, i8 0, i64 24, i1 false)
  store <2 x float> <float 1.000000e+02, float 0x3F847AE140000000>, ptr %1542, align 8, !tbaa !137
  %1543 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1528, i64 0, i32 22
  store i8 0, ptr %1543, align 8, !tbaa !345
  %1544 = load ptr, ptr %1519, align 8, !tbaa !123
  %1545 = getelementptr inbounds ptr, ptr %1544, i64 %1527
  store ptr %1528, ptr %1545, align 8, !tbaa !219
  %1546 = load ptr, ptr %1519, align 8, !tbaa !123
  %1547 = getelementptr inbounds ptr, ptr %1546, i64 %1527
  %1548 = load ptr, ptr %1547, align 8, !tbaa !219
  %1549 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %1548, i64 0, i32 23
  store i8 1, ptr %1549, align 1, !tbaa !346
  %1550 = add nuw nsw i64 %1527, 1
  %1551 = load i32, ptr %5, align 4, !tbaa !124
  %1552 = sext i32 %1551 to i64
  %1553 = icmp slt i64 %1550, %1552
  br i1 %1553, label %1526, label %1520

1554:                                             ; preds = %1523, %1912
  %1555 = phi i64 [ 0, %1523 ], [ %1920, %1912 ]
  %1556 = load ptr, ptr %1524, align 8, !tbaa !123
  %1557 = getelementptr inbounds ptr, ptr %1556, i64 %1555
  %1558 = load ptr, ptr %1557, align 8, !tbaa !219
  %1559 = load ptr, ptr %1525, align 8, !tbaa !99
  %1560 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %1559, i64 %1555, i32 1, i64 0
  %1561 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1558, i64 0, i32 2
  %1562 = load i32, ptr %1561, align 4, !tbaa !319
  %1563 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1558, i64 0, i32 3
  %1564 = load i32, ptr %1563, align 8, !tbaa !342
  %1565 = icmp eq i32 %1562, %1564
  br i1 %1565, label %1566, label %1639

1566:                                             ; preds = %1554
  %1567 = icmp eq i32 %1562, 0
  %1568 = shl nsw i32 %1562, 1
  %1569 = select i1 %1567, i32 1, i32 %1568
  %1570 = icmp slt i32 %1562, %1569
  br i1 %1570, label %1571, label %1639

1571:                                             ; preds = %1566
  %1572 = icmp eq i32 %1569, 0
  br i1 %1572, label %1578, label %1573

1573:                                             ; preds = %1571
  %1574 = sext i32 %1569 to i64
  %1575 = shl nsw i64 %1574, 3
  %1576 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1575, i32 noundef 16)
  %1577 = load i32, ptr %1561, align 4, !tbaa !319
  br label %1578

1578:                                             ; preds = %1573, %1571
  %1579 = phi i32 [ %1577, %1573 ], [ %1562, %1571 ]
  %1580 = phi ptr [ %1576, %1573 ], [ null, %1571 ]
  %1581 = icmp sgt i32 %1579, 0
  br i1 %1581, label %1582, label %1627

1582:                                             ; preds = %1578
  %1583 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1558, i64 0, i32 5
  %1584 = zext i32 %1579 to i64
  %1585 = and i64 %1584, 3
  %1586 = icmp ult i32 %1579, 4
  br i1 %1586, label %1614, label %1587

1587:                                             ; preds = %1582
  %1588 = and i64 %1584, 4294967292
  br label %1589

1589:                                             ; preds = %1589, %1587
  %1590 = phi i64 [ 0, %1587 ], [ %1611, %1589 ]
  %1591 = phi i64 [ 0, %1587 ], [ %1612, %1589 ]
  %1592 = getelementptr inbounds ptr, ptr %1580, i64 %1590
  %1593 = load ptr, ptr %1583, align 8, !tbaa !320
  %1594 = getelementptr inbounds ptr, ptr %1593, i64 %1590
  %1595 = load ptr, ptr %1594, align 8, !tbaa !219
  store ptr %1595, ptr %1592, align 8, !tbaa !219
  %1596 = or i64 %1590, 1
  %1597 = getelementptr inbounds ptr, ptr %1580, i64 %1596
  %1598 = load ptr, ptr %1583, align 8, !tbaa !320
  %1599 = getelementptr inbounds ptr, ptr %1598, i64 %1596
  %1600 = load ptr, ptr %1599, align 8, !tbaa !219
  store ptr %1600, ptr %1597, align 8, !tbaa !219
  %1601 = or i64 %1590, 2
  %1602 = getelementptr inbounds ptr, ptr %1580, i64 %1601
  %1603 = load ptr, ptr %1583, align 8, !tbaa !320
  %1604 = getelementptr inbounds ptr, ptr %1603, i64 %1601
  %1605 = load ptr, ptr %1604, align 8, !tbaa !219
  store ptr %1605, ptr %1602, align 8, !tbaa !219
  %1606 = or i64 %1590, 3
  %1607 = getelementptr inbounds ptr, ptr %1580, i64 %1606
  %1608 = load ptr, ptr %1583, align 8, !tbaa !320
  %1609 = getelementptr inbounds ptr, ptr %1608, i64 %1606
  %1610 = load ptr, ptr %1609, align 8, !tbaa !219
  store ptr %1610, ptr %1607, align 8, !tbaa !219
  %1611 = add nuw nsw i64 %1590, 4
  %1612 = add i64 %1591, 4
  %1613 = icmp eq i64 %1612, %1588
  br i1 %1613, label %1614, label %1589

1614:                                             ; preds = %1589, %1582
  %1615 = phi i64 [ 0, %1582 ], [ %1611, %1589 ]
  %1616 = icmp eq i64 %1585, 0
  br i1 %1616, label %1627, label %1617

1617:                                             ; preds = %1614, %1617
  %1618 = phi i64 [ %1624, %1617 ], [ %1615, %1614 ]
  %1619 = phi i64 [ %1625, %1617 ], [ 0, %1614 ]
  %1620 = getelementptr inbounds ptr, ptr %1580, i64 %1618
  %1621 = load ptr, ptr %1583, align 8, !tbaa !320
  %1622 = getelementptr inbounds ptr, ptr %1621, i64 %1618
  %1623 = load ptr, ptr %1622, align 8, !tbaa !219
  store ptr %1623, ptr %1620, align 8, !tbaa !219
  %1624 = add nuw nsw i64 %1618, 1
  %1625 = add i64 %1619, 1
  %1626 = icmp eq i64 %1625, %1585
  br i1 %1626, label %1627, label %1617, !llvm.loop !359

1627:                                             ; preds = %1614, %1617, %1578
  %1628 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1558, i64 0, i32 5
  %1629 = load ptr, ptr %1628, align 8, !tbaa !320
  %1630 = icmp eq ptr %1629, null
  %1631 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1558, i64 0, i32 6
  %1632 = load i8, ptr %1631, align 8
  %1633 = icmp eq i8 %1632, 0
  %1634 = select i1 %1630, i1 true, i1 %1633
  br i1 %1634, label %1637, label %1635

1635:                                             ; preds = %1627
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1629)
  %1636 = load i32, ptr %1561, align 4, !tbaa !319
  br label %1637

1637:                                             ; preds = %1635, %1627
  %1638 = phi i32 [ %1636, %1635 ], [ %1579, %1627 ]
  store i8 1, ptr %1631, align 8, !tbaa !341
  store ptr %1580, ptr %1628, align 8, !tbaa !320
  store i32 %1569, ptr %1563, align 8, !tbaa !342
  br label %1639

1639:                                             ; preds = %1554, %1566, %1637
  %1640 = phi i32 [ %1638, %1637 ], [ %1562, %1566 ], [ %1562, %1554 ]
  %1641 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1558, i64 0, i32 5
  %1642 = load ptr, ptr %1641, align 8, !tbaa !320
  %1643 = sext i32 %1640 to i64
  %1644 = getelementptr inbounds ptr, ptr %1642, i64 %1643
  %1645 = load ptr, ptr %1560, align 8, !tbaa !219
  store ptr %1645, ptr %1644, align 8, !tbaa !219
  %1646 = add nsw i32 %1640, 1
  store i32 %1646, ptr %1561, align 4, !tbaa !319
  %1647 = load ptr, ptr %1524, align 8, !tbaa !123
  %1648 = getelementptr inbounds ptr, ptr %1647, i64 %1555
  %1649 = load ptr, ptr %1648, align 8, !tbaa !219
  %1650 = load ptr, ptr %1525, align 8, !tbaa !99
  %1651 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %1650, i64 %1555, i32 1, i64 1
  %1652 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1649, i64 0, i32 2
  %1653 = load i32, ptr %1652, align 4, !tbaa !319
  %1654 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1649, i64 0, i32 3
  %1655 = load i32, ptr %1654, align 8, !tbaa !342
  %1656 = icmp eq i32 %1653, %1655
  br i1 %1656, label %1657, label %1730

1657:                                             ; preds = %1639
  %1658 = icmp eq i32 %1653, 0
  %1659 = shl nsw i32 %1653, 1
  %1660 = select i1 %1658, i32 1, i32 %1659
  %1661 = icmp slt i32 %1653, %1660
  br i1 %1661, label %1662, label %1730

1662:                                             ; preds = %1657
  %1663 = icmp eq i32 %1660, 0
  br i1 %1663, label %1669, label %1664

1664:                                             ; preds = %1662
  %1665 = sext i32 %1660 to i64
  %1666 = shl nsw i64 %1665, 3
  %1667 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1666, i32 noundef 16)
  %1668 = load i32, ptr %1652, align 4, !tbaa !319
  br label %1669

1669:                                             ; preds = %1664, %1662
  %1670 = phi i32 [ %1668, %1664 ], [ %1653, %1662 ]
  %1671 = phi ptr [ %1667, %1664 ], [ null, %1662 ]
  %1672 = icmp sgt i32 %1670, 0
  br i1 %1672, label %1673, label %1718

1673:                                             ; preds = %1669
  %1674 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1649, i64 0, i32 5
  %1675 = zext i32 %1670 to i64
  %1676 = and i64 %1675, 3
  %1677 = icmp ult i32 %1670, 4
  br i1 %1677, label %1705, label %1678

1678:                                             ; preds = %1673
  %1679 = and i64 %1675, 4294967292
  br label %1680

1680:                                             ; preds = %1680, %1678
  %1681 = phi i64 [ 0, %1678 ], [ %1702, %1680 ]
  %1682 = phi i64 [ 0, %1678 ], [ %1703, %1680 ]
  %1683 = getelementptr inbounds ptr, ptr %1671, i64 %1681
  %1684 = load ptr, ptr %1674, align 8, !tbaa !320
  %1685 = getelementptr inbounds ptr, ptr %1684, i64 %1681
  %1686 = load ptr, ptr %1685, align 8, !tbaa !219
  store ptr %1686, ptr %1683, align 8, !tbaa !219
  %1687 = or i64 %1681, 1
  %1688 = getelementptr inbounds ptr, ptr %1671, i64 %1687
  %1689 = load ptr, ptr %1674, align 8, !tbaa !320
  %1690 = getelementptr inbounds ptr, ptr %1689, i64 %1687
  %1691 = load ptr, ptr %1690, align 8, !tbaa !219
  store ptr %1691, ptr %1688, align 8, !tbaa !219
  %1692 = or i64 %1681, 2
  %1693 = getelementptr inbounds ptr, ptr %1671, i64 %1692
  %1694 = load ptr, ptr %1674, align 8, !tbaa !320
  %1695 = getelementptr inbounds ptr, ptr %1694, i64 %1692
  %1696 = load ptr, ptr %1695, align 8, !tbaa !219
  store ptr %1696, ptr %1693, align 8, !tbaa !219
  %1697 = or i64 %1681, 3
  %1698 = getelementptr inbounds ptr, ptr %1671, i64 %1697
  %1699 = load ptr, ptr %1674, align 8, !tbaa !320
  %1700 = getelementptr inbounds ptr, ptr %1699, i64 %1697
  %1701 = load ptr, ptr %1700, align 8, !tbaa !219
  store ptr %1701, ptr %1698, align 8, !tbaa !219
  %1702 = add nuw nsw i64 %1681, 4
  %1703 = add i64 %1682, 4
  %1704 = icmp eq i64 %1703, %1679
  br i1 %1704, label %1705, label %1680

1705:                                             ; preds = %1680, %1673
  %1706 = phi i64 [ 0, %1673 ], [ %1702, %1680 ]
  %1707 = icmp eq i64 %1676, 0
  br i1 %1707, label %1718, label %1708

1708:                                             ; preds = %1705, %1708
  %1709 = phi i64 [ %1715, %1708 ], [ %1706, %1705 ]
  %1710 = phi i64 [ %1716, %1708 ], [ 0, %1705 ]
  %1711 = getelementptr inbounds ptr, ptr %1671, i64 %1709
  %1712 = load ptr, ptr %1674, align 8, !tbaa !320
  %1713 = getelementptr inbounds ptr, ptr %1712, i64 %1709
  %1714 = load ptr, ptr %1713, align 8, !tbaa !219
  store ptr %1714, ptr %1711, align 8, !tbaa !219
  %1715 = add nuw nsw i64 %1709, 1
  %1716 = add i64 %1710, 1
  %1717 = icmp eq i64 %1716, %1676
  br i1 %1717, label %1718, label %1708, !llvm.loop !360

1718:                                             ; preds = %1705, %1708, %1669
  %1719 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1649, i64 0, i32 5
  %1720 = load ptr, ptr %1719, align 8, !tbaa !320
  %1721 = icmp eq ptr %1720, null
  %1722 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1649, i64 0, i32 6
  %1723 = load i8, ptr %1722, align 8
  %1724 = icmp eq i8 %1723, 0
  %1725 = select i1 %1721, i1 true, i1 %1724
  br i1 %1725, label %1728, label %1726

1726:                                             ; preds = %1718
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1720)
  %1727 = load i32, ptr %1652, align 4, !tbaa !319
  br label %1728

1728:                                             ; preds = %1726, %1718
  %1729 = phi i32 [ %1727, %1726 ], [ %1670, %1718 ]
  store i8 1, ptr %1722, align 8, !tbaa !341
  store ptr %1671, ptr %1719, align 8, !tbaa !320
  store i32 %1660, ptr %1654, align 8, !tbaa !342
  br label %1730

1730:                                             ; preds = %1728, %1657, %1639
  %1731 = phi i32 [ %1729, %1728 ], [ %1653, %1657 ], [ %1653, %1639 ]
  %1732 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1649, i64 0, i32 5
  %1733 = load ptr, ptr %1732, align 8, !tbaa !320
  %1734 = sext i32 %1731 to i64
  %1735 = getelementptr inbounds ptr, ptr %1733, i64 %1734
  %1736 = load ptr, ptr %1651, align 8, !tbaa !219
  store ptr %1736, ptr %1735, align 8, !tbaa !219
  %1737 = add nsw i32 %1731, 1
  store i32 %1737, ptr %1652, align 4, !tbaa !319
  %1738 = load ptr, ptr %1524, align 8, !tbaa !123
  %1739 = getelementptr inbounds ptr, ptr %1738, i64 %1555
  %1740 = load ptr, ptr %1739, align 8, !tbaa !219
  %1741 = load ptr, ptr %1525, align 8, !tbaa !99
  %1742 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %1741, i64 %1555, i32 1, i64 2
  %1743 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1740, i64 0, i32 2
  %1744 = load i32, ptr %1743, align 4, !tbaa !319
  %1745 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1740, i64 0, i32 3
  %1746 = load i32, ptr %1745, align 8, !tbaa !342
  %1747 = icmp eq i32 %1744, %1746
  br i1 %1747, label %1748, label %1821

1748:                                             ; preds = %1730
  %1749 = icmp eq i32 %1744, 0
  %1750 = shl nsw i32 %1744, 1
  %1751 = select i1 %1749, i32 1, i32 %1750
  %1752 = icmp slt i32 %1744, %1751
  br i1 %1752, label %1753, label %1821

1753:                                             ; preds = %1748
  %1754 = icmp eq i32 %1751, 0
  br i1 %1754, label %1760, label %1755

1755:                                             ; preds = %1753
  %1756 = sext i32 %1751 to i64
  %1757 = shl nsw i64 %1756, 3
  %1758 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1757, i32 noundef 16)
  %1759 = load i32, ptr %1743, align 4, !tbaa !319
  br label %1760

1760:                                             ; preds = %1755, %1753
  %1761 = phi i32 [ %1759, %1755 ], [ %1744, %1753 ]
  %1762 = phi ptr [ %1758, %1755 ], [ null, %1753 ]
  %1763 = icmp sgt i32 %1761, 0
  br i1 %1763, label %1764, label %1809

1764:                                             ; preds = %1760
  %1765 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1740, i64 0, i32 5
  %1766 = zext i32 %1761 to i64
  %1767 = and i64 %1766, 3
  %1768 = icmp ult i32 %1761, 4
  br i1 %1768, label %1796, label %1769

1769:                                             ; preds = %1764
  %1770 = and i64 %1766, 4294967292
  br label %1771

1771:                                             ; preds = %1771, %1769
  %1772 = phi i64 [ 0, %1769 ], [ %1793, %1771 ]
  %1773 = phi i64 [ 0, %1769 ], [ %1794, %1771 ]
  %1774 = getelementptr inbounds ptr, ptr %1762, i64 %1772
  %1775 = load ptr, ptr %1765, align 8, !tbaa !320
  %1776 = getelementptr inbounds ptr, ptr %1775, i64 %1772
  %1777 = load ptr, ptr %1776, align 8, !tbaa !219
  store ptr %1777, ptr %1774, align 8, !tbaa !219
  %1778 = or i64 %1772, 1
  %1779 = getelementptr inbounds ptr, ptr %1762, i64 %1778
  %1780 = load ptr, ptr %1765, align 8, !tbaa !320
  %1781 = getelementptr inbounds ptr, ptr %1780, i64 %1778
  %1782 = load ptr, ptr %1781, align 8, !tbaa !219
  store ptr %1782, ptr %1779, align 8, !tbaa !219
  %1783 = or i64 %1772, 2
  %1784 = getelementptr inbounds ptr, ptr %1762, i64 %1783
  %1785 = load ptr, ptr %1765, align 8, !tbaa !320
  %1786 = getelementptr inbounds ptr, ptr %1785, i64 %1783
  %1787 = load ptr, ptr %1786, align 8, !tbaa !219
  store ptr %1787, ptr %1784, align 8, !tbaa !219
  %1788 = or i64 %1772, 3
  %1789 = getelementptr inbounds ptr, ptr %1762, i64 %1788
  %1790 = load ptr, ptr %1765, align 8, !tbaa !320
  %1791 = getelementptr inbounds ptr, ptr %1790, i64 %1788
  %1792 = load ptr, ptr %1791, align 8, !tbaa !219
  store ptr %1792, ptr %1789, align 8, !tbaa !219
  %1793 = add nuw nsw i64 %1772, 4
  %1794 = add i64 %1773, 4
  %1795 = icmp eq i64 %1794, %1770
  br i1 %1795, label %1796, label %1771

1796:                                             ; preds = %1771, %1764
  %1797 = phi i64 [ 0, %1764 ], [ %1793, %1771 ]
  %1798 = icmp eq i64 %1767, 0
  br i1 %1798, label %1809, label %1799

1799:                                             ; preds = %1796, %1799
  %1800 = phi i64 [ %1806, %1799 ], [ %1797, %1796 ]
  %1801 = phi i64 [ %1807, %1799 ], [ 0, %1796 ]
  %1802 = getelementptr inbounds ptr, ptr %1762, i64 %1800
  %1803 = load ptr, ptr %1765, align 8, !tbaa !320
  %1804 = getelementptr inbounds ptr, ptr %1803, i64 %1800
  %1805 = load ptr, ptr %1804, align 8, !tbaa !219
  store ptr %1805, ptr %1802, align 8, !tbaa !219
  %1806 = add nuw nsw i64 %1800, 1
  %1807 = add i64 %1801, 1
  %1808 = icmp eq i64 %1807, %1767
  br i1 %1808, label %1809, label %1799, !llvm.loop !361

1809:                                             ; preds = %1796, %1799, %1760
  %1810 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1740, i64 0, i32 5
  %1811 = load ptr, ptr %1810, align 8, !tbaa !320
  %1812 = icmp eq ptr %1811, null
  %1813 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1740, i64 0, i32 6
  %1814 = load i8, ptr %1813, align 8
  %1815 = icmp eq i8 %1814, 0
  %1816 = select i1 %1812, i1 true, i1 %1815
  br i1 %1816, label %1819, label %1817

1817:                                             ; preds = %1809
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1811)
  %1818 = load i32, ptr %1743, align 4, !tbaa !319
  br label %1819

1819:                                             ; preds = %1817, %1809
  %1820 = phi i32 [ %1818, %1817 ], [ %1761, %1809 ]
  store i8 1, ptr %1813, align 8, !tbaa !341
  store ptr %1762, ptr %1810, align 8, !tbaa !320
  store i32 %1751, ptr %1745, align 8, !tbaa !342
  br label %1821

1821:                                             ; preds = %1819, %1748, %1730
  %1822 = phi i32 [ %1820, %1819 ], [ %1744, %1748 ], [ %1744, %1730 ]
  %1823 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1740, i64 0, i32 5
  %1824 = load ptr, ptr %1823, align 8, !tbaa !320
  %1825 = sext i32 %1822 to i64
  %1826 = getelementptr inbounds ptr, ptr %1824, i64 %1825
  %1827 = load ptr, ptr %1742, align 8, !tbaa !219
  store ptr %1827, ptr %1826, align 8, !tbaa !219
  %1828 = add nsw i32 %1822, 1
  store i32 %1828, ptr %1743, align 4, !tbaa !319
  %1829 = load ptr, ptr %1524, align 8, !tbaa !123
  %1830 = getelementptr inbounds ptr, ptr %1829, i64 %1555
  %1831 = load ptr, ptr %1830, align 8, !tbaa !219
  %1832 = load ptr, ptr %1525, align 8, !tbaa !99
  %1833 = getelementptr inbounds %"struct.btSoftBody::Tetra", ptr %1832, i64 %1555, i32 1, i64 3
  %1834 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1831, i64 0, i32 2
  %1835 = load i32, ptr %1834, align 4, !tbaa !319
  %1836 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1831, i64 0, i32 3
  %1837 = load i32, ptr %1836, align 8, !tbaa !342
  %1838 = icmp eq i32 %1835, %1837
  br i1 %1838, label %1839, label %1912

1839:                                             ; preds = %1821
  %1840 = icmp eq i32 %1835, 0
  %1841 = shl nsw i32 %1835, 1
  %1842 = select i1 %1840, i32 1, i32 %1841
  %1843 = icmp slt i32 %1835, %1842
  br i1 %1843, label %1844, label %1912

1844:                                             ; preds = %1839
  %1845 = icmp eq i32 %1842, 0
  br i1 %1845, label %1851, label %1846

1846:                                             ; preds = %1844
  %1847 = sext i32 %1842 to i64
  %1848 = shl nsw i64 %1847, 3
  %1849 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1848, i32 noundef 16)
  %1850 = load i32, ptr %1834, align 4, !tbaa !319
  br label %1851

1851:                                             ; preds = %1846, %1844
  %1852 = phi i32 [ %1850, %1846 ], [ %1835, %1844 ]
  %1853 = phi ptr [ %1849, %1846 ], [ null, %1844 ]
  %1854 = icmp sgt i32 %1852, 0
  br i1 %1854, label %1855, label %1900

1855:                                             ; preds = %1851
  %1856 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1831, i64 0, i32 5
  %1857 = zext i32 %1852 to i64
  %1858 = and i64 %1857, 3
  %1859 = icmp ult i32 %1852, 4
  br i1 %1859, label %1887, label %1860

1860:                                             ; preds = %1855
  %1861 = and i64 %1857, 4294967292
  br label %1862

1862:                                             ; preds = %1862, %1860
  %1863 = phi i64 [ 0, %1860 ], [ %1884, %1862 ]
  %1864 = phi i64 [ 0, %1860 ], [ %1885, %1862 ]
  %1865 = getelementptr inbounds ptr, ptr %1853, i64 %1863
  %1866 = load ptr, ptr %1856, align 8, !tbaa !320
  %1867 = getelementptr inbounds ptr, ptr %1866, i64 %1863
  %1868 = load ptr, ptr %1867, align 8, !tbaa !219
  store ptr %1868, ptr %1865, align 8, !tbaa !219
  %1869 = or i64 %1863, 1
  %1870 = getelementptr inbounds ptr, ptr %1853, i64 %1869
  %1871 = load ptr, ptr %1856, align 8, !tbaa !320
  %1872 = getelementptr inbounds ptr, ptr %1871, i64 %1869
  %1873 = load ptr, ptr %1872, align 8, !tbaa !219
  store ptr %1873, ptr %1870, align 8, !tbaa !219
  %1874 = or i64 %1863, 2
  %1875 = getelementptr inbounds ptr, ptr %1853, i64 %1874
  %1876 = load ptr, ptr %1856, align 8, !tbaa !320
  %1877 = getelementptr inbounds ptr, ptr %1876, i64 %1874
  %1878 = load ptr, ptr %1877, align 8, !tbaa !219
  store ptr %1878, ptr %1875, align 8, !tbaa !219
  %1879 = or i64 %1863, 3
  %1880 = getelementptr inbounds ptr, ptr %1853, i64 %1879
  %1881 = load ptr, ptr %1856, align 8, !tbaa !320
  %1882 = getelementptr inbounds ptr, ptr %1881, i64 %1879
  %1883 = load ptr, ptr %1882, align 8, !tbaa !219
  store ptr %1883, ptr %1880, align 8, !tbaa !219
  %1884 = add nuw nsw i64 %1863, 4
  %1885 = add i64 %1864, 4
  %1886 = icmp eq i64 %1885, %1861
  br i1 %1886, label %1887, label %1862

1887:                                             ; preds = %1862, %1855
  %1888 = phi i64 [ 0, %1855 ], [ %1884, %1862 ]
  %1889 = icmp eq i64 %1858, 0
  br i1 %1889, label %1900, label %1890

1890:                                             ; preds = %1887, %1890
  %1891 = phi i64 [ %1897, %1890 ], [ %1888, %1887 ]
  %1892 = phi i64 [ %1898, %1890 ], [ 0, %1887 ]
  %1893 = getelementptr inbounds ptr, ptr %1853, i64 %1891
  %1894 = load ptr, ptr %1856, align 8, !tbaa !320
  %1895 = getelementptr inbounds ptr, ptr %1894, i64 %1891
  %1896 = load ptr, ptr %1895, align 8, !tbaa !219
  store ptr %1896, ptr %1893, align 8, !tbaa !219
  %1897 = add nuw nsw i64 %1891, 1
  %1898 = add i64 %1892, 1
  %1899 = icmp eq i64 %1898, %1858
  br i1 %1899, label %1900, label %1890, !llvm.loop !362

1900:                                             ; preds = %1887, %1890, %1851
  %1901 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1831, i64 0, i32 5
  %1902 = load ptr, ptr %1901, align 8, !tbaa !320
  %1903 = icmp eq ptr %1902, null
  %1904 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1831, i64 0, i32 6
  %1905 = load i8, ptr %1904, align 8
  %1906 = icmp eq i8 %1905, 0
  %1907 = select i1 %1903, i1 true, i1 %1906
  br i1 %1907, label %1910, label %1908

1908:                                             ; preds = %1900
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1902)
  %1909 = load i32, ptr %1834, align 4, !tbaa !319
  br label %1910

1910:                                             ; preds = %1908, %1900
  %1911 = phi i32 [ %1909, %1908 ], [ %1852, %1900 ]
  store i8 1, ptr %1904, align 8, !tbaa !341
  store ptr %1853, ptr %1901, align 8, !tbaa !320
  store i32 %1842, ptr %1836, align 8, !tbaa !342
  br label %1912

1912:                                             ; preds = %1910, %1839, %1821
  %1913 = phi i32 [ %1911, %1910 ], [ %1835, %1839 ], [ %1835, %1821 ]
  %1914 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %1831, i64 0, i32 5
  %1915 = load ptr, ptr %1914, align 8, !tbaa !320
  %1916 = sext i32 %1913 to i64
  %1917 = getelementptr inbounds ptr, ptr %1915, i64 %1916
  %1918 = load ptr, ptr %1833, align 8, !tbaa !219
  store ptr %1918, ptr %1917, align 8, !tbaa !219
  %1919 = add nsw i32 %1913, 1
  store i32 %1919, ptr %1834, align 4, !tbaa !319
  %1920 = add nuw nsw i64 %1555, 1
  %1921 = load i32, ptr %1412, align 4, !tbaa !100
  %1922 = sext i32 %1921 to i64
  %1923 = icmp slt i64 %1920, %1922
  br i1 %1923, label %1554, label %2348

1924:                                             ; preds = %1410
  %1925 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %1926 = load i32, ptr %1925, align 4, !tbaa !96
  %1927 = icmp slt i32 %1411, %1926
  br i1 %1927, label %1928, label %2031

1928:                                             ; preds = %1924
  %1929 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 3
  %1930 = load i32, ptr %1929, align 8, !tbaa !125
  %1931 = icmp slt i32 %1930, %1926
  br i1 %1931, label %1932, label %1996

1932:                                             ; preds = %1928
  %1933 = icmp eq i32 %1926, 0
  br i1 %1933, label %1985, label %1934

1934:                                             ; preds = %1932
  %1935 = sext i32 %1926 to i64
  %1936 = shl nsw i64 %1935, 3
  %1937 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %1936, i32 noundef 16)
  %1938 = load i32, ptr %5, align 4, !tbaa !124
  %1939 = icmp sgt i32 %1938, 0
  br i1 %1939, label %1940, label %1985

1940:                                             ; preds = %1934
  %1941 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %1942 = zext i32 %1938 to i64
  %1943 = and i64 %1942, 3
  %1944 = icmp ult i32 %1938, 4
  br i1 %1944, label %1972, label %1945

1945:                                             ; preds = %1940
  %1946 = and i64 %1942, 4294967292
  br label %1947

1947:                                             ; preds = %1947, %1945
  %1948 = phi i64 [ 0, %1945 ], [ %1969, %1947 ]
  %1949 = phi i64 [ 0, %1945 ], [ %1970, %1947 ]
  %1950 = getelementptr inbounds ptr, ptr %1937, i64 %1948
  %1951 = load ptr, ptr %1941, align 8, !tbaa !123
  %1952 = getelementptr inbounds ptr, ptr %1951, i64 %1948
  %1953 = load ptr, ptr %1952, align 8, !tbaa !219
  store ptr %1953, ptr %1950, align 8, !tbaa !219
  %1954 = or i64 %1948, 1
  %1955 = getelementptr inbounds ptr, ptr %1937, i64 %1954
  %1956 = load ptr, ptr %1941, align 8, !tbaa !123
  %1957 = getelementptr inbounds ptr, ptr %1956, i64 %1954
  %1958 = load ptr, ptr %1957, align 8, !tbaa !219
  store ptr %1958, ptr %1955, align 8, !tbaa !219
  %1959 = or i64 %1948, 2
  %1960 = getelementptr inbounds ptr, ptr %1937, i64 %1959
  %1961 = load ptr, ptr %1941, align 8, !tbaa !123
  %1962 = getelementptr inbounds ptr, ptr %1961, i64 %1959
  %1963 = load ptr, ptr %1962, align 8, !tbaa !219
  store ptr %1963, ptr %1960, align 8, !tbaa !219
  %1964 = or i64 %1948, 3
  %1965 = getelementptr inbounds ptr, ptr %1937, i64 %1964
  %1966 = load ptr, ptr %1941, align 8, !tbaa !123
  %1967 = getelementptr inbounds ptr, ptr %1966, i64 %1964
  %1968 = load ptr, ptr %1967, align 8, !tbaa !219
  store ptr %1968, ptr %1965, align 8, !tbaa !219
  %1969 = add nuw nsw i64 %1948, 4
  %1970 = add i64 %1949, 4
  %1971 = icmp eq i64 %1970, %1946
  br i1 %1971, label %1972, label %1947

1972:                                             ; preds = %1947, %1940
  %1973 = phi i64 [ 0, %1940 ], [ %1969, %1947 ]
  %1974 = icmp eq i64 %1943, 0
  br i1 %1974, label %1985, label %1975

1975:                                             ; preds = %1972, %1975
  %1976 = phi i64 [ %1982, %1975 ], [ %1973, %1972 ]
  %1977 = phi i64 [ %1983, %1975 ], [ 0, %1972 ]
  %1978 = getelementptr inbounds ptr, ptr %1937, i64 %1976
  %1979 = load ptr, ptr %1941, align 8, !tbaa !123
  %1980 = getelementptr inbounds ptr, ptr %1979, i64 %1976
  %1981 = load ptr, ptr %1980, align 8, !tbaa !219
  store ptr %1981, ptr %1978, align 8, !tbaa !219
  %1982 = add nuw nsw i64 %1976, 1
  %1983 = add i64 %1977, 1
  %1984 = icmp eq i64 %1983, %1943
  br i1 %1984, label %1985, label %1975, !llvm.loop !363

1985:                                             ; preds = %1972, %1975, %1932, %1934
  %1986 = phi ptr [ %1937, %1934 ], [ null, %1932 ], [ %1937, %1975 ], [ %1937, %1972 ]
  %1987 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %1988 = load ptr, ptr %1987, align 8, !tbaa !123
  %1989 = icmp eq ptr %1988, null
  %1990 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 6
  %1991 = load i8, ptr %1990, align 8
  %1992 = icmp eq i8 %1991, 0
  %1993 = select i1 %1989, i1 true, i1 %1992
  br i1 %1993, label %1995, label %1994

1994:                                             ; preds = %1985
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1988)
  br label %1995

1995:                                             ; preds = %1994, %1985
  store i8 1, ptr %1990, align 8, !tbaa !122
  store ptr %1986, ptr %1987, align 8, !tbaa !123
  store i32 %1926, ptr %1929, align 8, !tbaa !125
  br label %1996

1996:                                             ; preds = %1995, %1928
  %1997 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %1998 = sext i32 %1411 to i64
  %1999 = sext i32 %1926 to i64
  %2000 = sub nsw i64 %1999, %1998
  %2001 = xor i64 %1998, -1
  %2002 = add nsw i64 %2001, %1999
  %2003 = and i64 %2000, 3
  %2004 = icmp eq i64 %2003, 0
  br i1 %2004, label %2013, label %2005

2005:                                             ; preds = %1996, %2005
  %2006 = phi i64 [ %2010, %2005 ], [ %1998, %1996 ]
  %2007 = phi i64 [ %2011, %2005 ], [ 0, %1996 ]
  %2008 = load ptr, ptr %1997, align 8, !tbaa !123
  %2009 = getelementptr inbounds ptr, ptr %2008, i64 %2006
  store ptr null, ptr %2009, align 8, !tbaa !219
  %2010 = add nsw i64 %2006, 1
  %2011 = add i64 %2007, 1
  %2012 = icmp eq i64 %2011, %2003
  br i1 %2012, label %2013, label %2005, !llvm.loop !364

2013:                                             ; preds = %2005, %1996
  %2014 = phi i64 [ %1998, %1996 ], [ %2010, %2005 ]
  %2015 = icmp ult i64 %2002, 3
  br i1 %2015, label %2031, label %2016

2016:                                             ; preds = %2013, %2016
  %2017 = phi i64 [ %2029, %2016 ], [ %2014, %2013 ]
  %2018 = load ptr, ptr %1997, align 8, !tbaa !123
  %2019 = getelementptr inbounds ptr, ptr %2018, i64 %2017
  store ptr null, ptr %2019, align 8, !tbaa !219
  %2020 = add nsw i64 %2017, 1
  %2021 = load ptr, ptr %1997, align 8, !tbaa !123
  %2022 = getelementptr inbounds ptr, ptr %2021, i64 %2020
  store ptr null, ptr %2022, align 8, !tbaa !219
  %2023 = add nsw i64 %2017, 2
  %2024 = load ptr, ptr %1997, align 8, !tbaa !123
  %2025 = getelementptr inbounds ptr, ptr %2024, i64 %2023
  store ptr null, ptr %2025, align 8, !tbaa !219
  %2026 = add nsw i64 %2017, 3
  %2027 = load ptr, ptr %1997, align 8, !tbaa !123
  %2028 = getelementptr inbounds ptr, ptr %2027, i64 %2026
  store ptr null, ptr %2028, align 8, !tbaa !219
  %2029 = add nsw i64 %2017, 4
  %2030 = icmp eq i64 %2029, %1999
  br i1 %2030, label %2031, label %2016

2031:                                             ; preds = %2013, %2016, %1924
  store i32 %1926, ptr %5, align 4, !tbaa !124
  %2032 = icmp sgt i32 %1926, 0
  br i1 %2032, label %2033, label %2035

2033:                                             ; preds = %2031
  %2034 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  br label %2041

2035:                                             ; preds = %2041, %2031
  %2036 = load i32, ptr %1925, align 4, !tbaa !96
  %2037 = icmp sgt i32 %2036, 0
  br i1 %2037, label %2038, label %2348

2038:                                             ; preds = %2035
  %2039 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %2040 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  br label %2069

2041:                                             ; preds = %2033, %2041
  %2042 = phi i64 [ 0, %2033 ], [ %2065, %2041 ]
  %2043 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 424, i32 noundef 16)
  %2044 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2043, i64 0, i32 6
  store i8 1, ptr %2044, align 8, !tbaa !341
  %2045 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2043, i64 0, i32 5
  store ptr null, ptr %2045, align 8, !tbaa !320
  %2046 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2043, i64 0, i32 2
  store i32 0, ptr %2046, align 4, !tbaa !319
  %2047 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2043, i64 0, i32 3
  store i32 0, ptr %2047, align 8, !tbaa !342
  %2048 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 1, i32 6
  store i8 1, ptr %2048, align 8, !tbaa !36
  %2049 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 1, i32 5
  store ptr null, ptr %2049, align 8, !tbaa !39
  %2050 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 1, i32 2
  store i32 0, ptr %2050, align 4, !tbaa !40
  %2051 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 1, i32 3
  store i32 0, ptr %2051, align 8, !tbaa !41
  %2052 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 2, i32 6
  store i8 1, ptr %2052, align 8, !tbaa !30
  %2053 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 2, i32 5
  store ptr null, ptr %2053, align 8, !tbaa !33
  %2054 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 2, i32 2
  store i32 0, ptr %2054, align 4, !tbaa !34
  %2055 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 2, i32 3
  store i32 0, ptr %2055, align 8, !tbaa !35
  %2056 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 15
  %2057 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %2056, i8 0, i64 24, i1 false)
  store <2 x float> <float 1.000000e+02, float 0x3F847AE140000000>, ptr %2057, align 8, !tbaa !137
  %2058 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2043, i64 0, i32 22
  store i8 0, ptr %2058, align 8, !tbaa !345
  %2059 = load ptr, ptr %2034, align 8, !tbaa !123
  %2060 = getelementptr inbounds ptr, ptr %2059, i64 %2042
  store ptr %2043, ptr %2060, align 8, !tbaa !219
  %2061 = load ptr, ptr %2034, align 8, !tbaa !123
  %2062 = getelementptr inbounds ptr, ptr %2061, i64 %2042
  %2063 = load ptr, ptr %2062, align 8, !tbaa !219
  %2064 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2063, i64 0, i32 23
  store i8 1, ptr %2064, align 1, !tbaa !346
  %2065 = add nuw nsw i64 %2042, 1
  %2066 = load i32, ptr %5, align 4, !tbaa !124
  %2067 = sext i32 %2066 to i64
  %2068 = icmp slt i64 %2065, %2067
  br i1 %2068, label %2041, label %2035

2069:                                             ; preds = %2038, %2336
  %2070 = phi i64 [ 0, %2038 ], [ %2344, %2336 ]
  %2071 = load ptr, ptr %2039, align 8, !tbaa !123
  %2072 = getelementptr inbounds ptr, ptr %2071, i64 %2070
  %2073 = load ptr, ptr %2072, align 8, !tbaa !219
  %2074 = load ptr, ptr %2040, align 8, !tbaa !95
  %2075 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %2074, i64 %2070, i32 1, i64 0
  %2076 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2073, i64 0, i32 2
  %2077 = load i32, ptr %2076, align 4, !tbaa !319
  %2078 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2073, i64 0, i32 3
  %2079 = load i32, ptr %2078, align 8, !tbaa !342
  %2080 = icmp eq i32 %2077, %2079
  br i1 %2080, label %2081, label %2154

2081:                                             ; preds = %2069
  %2082 = icmp eq i32 %2077, 0
  %2083 = shl nsw i32 %2077, 1
  %2084 = select i1 %2082, i32 1, i32 %2083
  %2085 = icmp slt i32 %2077, %2084
  br i1 %2085, label %2086, label %2154

2086:                                             ; preds = %2081
  %2087 = icmp eq i32 %2084, 0
  br i1 %2087, label %2093, label %2088

2088:                                             ; preds = %2086
  %2089 = sext i32 %2084 to i64
  %2090 = shl nsw i64 %2089, 3
  %2091 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %2090, i32 noundef 16)
  %2092 = load i32, ptr %2076, align 4, !tbaa !319
  br label %2093

2093:                                             ; preds = %2088, %2086
  %2094 = phi i32 [ %2092, %2088 ], [ %2077, %2086 ]
  %2095 = phi ptr [ %2091, %2088 ], [ null, %2086 ]
  %2096 = icmp sgt i32 %2094, 0
  br i1 %2096, label %2097, label %2142

2097:                                             ; preds = %2093
  %2098 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2073, i64 0, i32 5
  %2099 = zext i32 %2094 to i64
  %2100 = and i64 %2099, 3
  %2101 = icmp ult i32 %2094, 4
  br i1 %2101, label %2129, label %2102

2102:                                             ; preds = %2097
  %2103 = and i64 %2099, 4294967292
  br label %2104

2104:                                             ; preds = %2104, %2102
  %2105 = phi i64 [ 0, %2102 ], [ %2126, %2104 ]
  %2106 = phi i64 [ 0, %2102 ], [ %2127, %2104 ]
  %2107 = getelementptr inbounds ptr, ptr %2095, i64 %2105
  %2108 = load ptr, ptr %2098, align 8, !tbaa !320
  %2109 = getelementptr inbounds ptr, ptr %2108, i64 %2105
  %2110 = load ptr, ptr %2109, align 8, !tbaa !219
  store ptr %2110, ptr %2107, align 8, !tbaa !219
  %2111 = or i64 %2105, 1
  %2112 = getelementptr inbounds ptr, ptr %2095, i64 %2111
  %2113 = load ptr, ptr %2098, align 8, !tbaa !320
  %2114 = getelementptr inbounds ptr, ptr %2113, i64 %2111
  %2115 = load ptr, ptr %2114, align 8, !tbaa !219
  store ptr %2115, ptr %2112, align 8, !tbaa !219
  %2116 = or i64 %2105, 2
  %2117 = getelementptr inbounds ptr, ptr %2095, i64 %2116
  %2118 = load ptr, ptr %2098, align 8, !tbaa !320
  %2119 = getelementptr inbounds ptr, ptr %2118, i64 %2116
  %2120 = load ptr, ptr %2119, align 8, !tbaa !219
  store ptr %2120, ptr %2117, align 8, !tbaa !219
  %2121 = or i64 %2105, 3
  %2122 = getelementptr inbounds ptr, ptr %2095, i64 %2121
  %2123 = load ptr, ptr %2098, align 8, !tbaa !320
  %2124 = getelementptr inbounds ptr, ptr %2123, i64 %2121
  %2125 = load ptr, ptr %2124, align 8, !tbaa !219
  store ptr %2125, ptr %2122, align 8, !tbaa !219
  %2126 = add nuw nsw i64 %2105, 4
  %2127 = add i64 %2106, 4
  %2128 = icmp eq i64 %2127, %2103
  br i1 %2128, label %2129, label %2104

2129:                                             ; preds = %2104, %2097
  %2130 = phi i64 [ 0, %2097 ], [ %2126, %2104 ]
  %2131 = icmp eq i64 %2100, 0
  br i1 %2131, label %2142, label %2132

2132:                                             ; preds = %2129, %2132
  %2133 = phi i64 [ %2139, %2132 ], [ %2130, %2129 ]
  %2134 = phi i64 [ %2140, %2132 ], [ 0, %2129 ]
  %2135 = getelementptr inbounds ptr, ptr %2095, i64 %2133
  %2136 = load ptr, ptr %2098, align 8, !tbaa !320
  %2137 = getelementptr inbounds ptr, ptr %2136, i64 %2133
  %2138 = load ptr, ptr %2137, align 8, !tbaa !219
  store ptr %2138, ptr %2135, align 8, !tbaa !219
  %2139 = add nuw nsw i64 %2133, 1
  %2140 = add i64 %2134, 1
  %2141 = icmp eq i64 %2140, %2100
  br i1 %2141, label %2142, label %2132, !llvm.loop !365

2142:                                             ; preds = %2129, %2132, %2093
  %2143 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2073, i64 0, i32 5
  %2144 = load ptr, ptr %2143, align 8, !tbaa !320
  %2145 = icmp eq ptr %2144, null
  %2146 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2073, i64 0, i32 6
  %2147 = load i8, ptr %2146, align 8
  %2148 = icmp eq i8 %2147, 0
  %2149 = select i1 %2145, i1 true, i1 %2148
  br i1 %2149, label %2152, label %2150

2150:                                             ; preds = %2142
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %2144)
  %2151 = load i32, ptr %2076, align 4, !tbaa !319
  br label %2152

2152:                                             ; preds = %2150, %2142
  %2153 = phi i32 [ %2151, %2150 ], [ %2094, %2142 ]
  store i8 1, ptr %2146, align 8, !tbaa !341
  store ptr %2095, ptr %2143, align 8, !tbaa !320
  store i32 %2084, ptr %2078, align 8, !tbaa !342
  br label %2154

2154:                                             ; preds = %2069, %2081, %2152
  %2155 = phi i32 [ %2153, %2152 ], [ %2077, %2081 ], [ %2077, %2069 ]
  %2156 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2073, i64 0, i32 5
  %2157 = load ptr, ptr %2156, align 8, !tbaa !320
  %2158 = sext i32 %2155 to i64
  %2159 = getelementptr inbounds ptr, ptr %2157, i64 %2158
  %2160 = load ptr, ptr %2075, align 8, !tbaa !219
  store ptr %2160, ptr %2159, align 8, !tbaa !219
  %2161 = add nsw i32 %2155, 1
  store i32 %2161, ptr %2076, align 4, !tbaa !319
  %2162 = load ptr, ptr %2039, align 8, !tbaa !123
  %2163 = getelementptr inbounds ptr, ptr %2162, i64 %2070
  %2164 = load ptr, ptr %2163, align 8, !tbaa !219
  %2165 = load ptr, ptr %2040, align 8, !tbaa !95
  %2166 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %2165, i64 %2070, i32 1, i64 1
  %2167 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2164, i64 0, i32 2
  %2168 = load i32, ptr %2167, align 4, !tbaa !319
  %2169 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2164, i64 0, i32 3
  %2170 = load i32, ptr %2169, align 8, !tbaa !342
  %2171 = icmp eq i32 %2168, %2170
  br i1 %2171, label %2172, label %2245

2172:                                             ; preds = %2154
  %2173 = icmp eq i32 %2168, 0
  %2174 = shl nsw i32 %2168, 1
  %2175 = select i1 %2173, i32 1, i32 %2174
  %2176 = icmp slt i32 %2168, %2175
  br i1 %2176, label %2177, label %2245

2177:                                             ; preds = %2172
  %2178 = icmp eq i32 %2175, 0
  br i1 %2178, label %2184, label %2179

2179:                                             ; preds = %2177
  %2180 = sext i32 %2175 to i64
  %2181 = shl nsw i64 %2180, 3
  %2182 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %2181, i32 noundef 16)
  %2183 = load i32, ptr %2167, align 4, !tbaa !319
  br label %2184

2184:                                             ; preds = %2179, %2177
  %2185 = phi i32 [ %2183, %2179 ], [ %2168, %2177 ]
  %2186 = phi ptr [ %2182, %2179 ], [ null, %2177 ]
  %2187 = icmp sgt i32 %2185, 0
  br i1 %2187, label %2188, label %2233

2188:                                             ; preds = %2184
  %2189 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2164, i64 0, i32 5
  %2190 = zext i32 %2185 to i64
  %2191 = and i64 %2190, 3
  %2192 = icmp ult i32 %2185, 4
  br i1 %2192, label %2220, label %2193

2193:                                             ; preds = %2188
  %2194 = and i64 %2190, 4294967292
  br label %2195

2195:                                             ; preds = %2195, %2193
  %2196 = phi i64 [ 0, %2193 ], [ %2217, %2195 ]
  %2197 = phi i64 [ 0, %2193 ], [ %2218, %2195 ]
  %2198 = getelementptr inbounds ptr, ptr %2186, i64 %2196
  %2199 = load ptr, ptr %2189, align 8, !tbaa !320
  %2200 = getelementptr inbounds ptr, ptr %2199, i64 %2196
  %2201 = load ptr, ptr %2200, align 8, !tbaa !219
  store ptr %2201, ptr %2198, align 8, !tbaa !219
  %2202 = or i64 %2196, 1
  %2203 = getelementptr inbounds ptr, ptr %2186, i64 %2202
  %2204 = load ptr, ptr %2189, align 8, !tbaa !320
  %2205 = getelementptr inbounds ptr, ptr %2204, i64 %2202
  %2206 = load ptr, ptr %2205, align 8, !tbaa !219
  store ptr %2206, ptr %2203, align 8, !tbaa !219
  %2207 = or i64 %2196, 2
  %2208 = getelementptr inbounds ptr, ptr %2186, i64 %2207
  %2209 = load ptr, ptr %2189, align 8, !tbaa !320
  %2210 = getelementptr inbounds ptr, ptr %2209, i64 %2207
  %2211 = load ptr, ptr %2210, align 8, !tbaa !219
  store ptr %2211, ptr %2208, align 8, !tbaa !219
  %2212 = or i64 %2196, 3
  %2213 = getelementptr inbounds ptr, ptr %2186, i64 %2212
  %2214 = load ptr, ptr %2189, align 8, !tbaa !320
  %2215 = getelementptr inbounds ptr, ptr %2214, i64 %2212
  %2216 = load ptr, ptr %2215, align 8, !tbaa !219
  store ptr %2216, ptr %2213, align 8, !tbaa !219
  %2217 = add nuw nsw i64 %2196, 4
  %2218 = add i64 %2197, 4
  %2219 = icmp eq i64 %2218, %2194
  br i1 %2219, label %2220, label %2195

2220:                                             ; preds = %2195, %2188
  %2221 = phi i64 [ 0, %2188 ], [ %2217, %2195 ]
  %2222 = icmp eq i64 %2191, 0
  br i1 %2222, label %2233, label %2223

2223:                                             ; preds = %2220, %2223
  %2224 = phi i64 [ %2230, %2223 ], [ %2221, %2220 ]
  %2225 = phi i64 [ %2231, %2223 ], [ 0, %2220 ]
  %2226 = getelementptr inbounds ptr, ptr %2186, i64 %2224
  %2227 = load ptr, ptr %2189, align 8, !tbaa !320
  %2228 = getelementptr inbounds ptr, ptr %2227, i64 %2224
  %2229 = load ptr, ptr %2228, align 8, !tbaa !219
  store ptr %2229, ptr %2226, align 8, !tbaa !219
  %2230 = add nuw nsw i64 %2224, 1
  %2231 = add i64 %2225, 1
  %2232 = icmp eq i64 %2231, %2191
  br i1 %2232, label %2233, label %2223, !llvm.loop !366

2233:                                             ; preds = %2220, %2223, %2184
  %2234 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2164, i64 0, i32 5
  %2235 = load ptr, ptr %2234, align 8, !tbaa !320
  %2236 = icmp eq ptr %2235, null
  %2237 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2164, i64 0, i32 6
  %2238 = load i8, ptr %2237, align 8
  %2239 = icmp eq i8 %2238, 0
  %2240 = select i1 %2236, i1 true, i1 %2239
  br i1 %2240, label %2243, label %2241

2241:                                             ; preds = %2233
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %2235)
  %2242 = load i32, ptr %2167, align 4, !tbaa !319
  br label %2243

2243:                                             ; preds = %2241, %2233
  %2244 = phi i32 [ %2242, %2241 ], [ %2185, %2233 ]
  store i8 1, ptr %2237, align 8, !tbaa !341
  store ptr %2186, ptr %2234, align 8, !tbaa !320
  store i32 %2175, ptr %2169, align 8, !tbaa !342
  br label %2245

2245:                                             ; preds = %2243, %2172, %2154
  %2246 = phi i32 [ %2244, %2243 ], [ %2168, %2172 ], [ %2168, %2154 ]
  %2247 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2164, i64 0, i32 5
  %2248 = load ptr, ptr %2247, align 8, !tbaa !320
  %2249 = sext i32 %2246 to i64
  %2250 = getelementptr inbounds ptr, ptr %2248, i64 %2249
  %2251 = load ptr, ptr %2166, align 8, !tbaa !219
  store ptr %2251, ptr %2250, align 8, !tbaa !219
  %2252 = add nsw i32 %2246, 1
  store i32 %2252, ptr %2167, align 4, !tbaa !319
  %2253 = load ptr, ptr %2039, align 8, !tbaa !123
  %2254 = getelementptr inbounds ptr, ptr %2253, i64 %2070
  %2255 = load ptr, ptr %2254, align 8, !tbaa !219
  %2256 = load ptr, ptr %2040, align 8, !tbaa !95
  %2257 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %2256, i64 %2070, i32 1, i64 2
  %2258 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2255, i64 0, i32 2
  %2259 = load i32, ptr %2258, align 4, !tbaa !319
  %2260 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2255, i64 0, i32 3
  %2261 = load i32, ptr %2260, align 8, !tbaa !342
  %2262 = icmp eq i32 %2259, %2261
  br i1 %2262, label %2263, label %2336

2263:                                             ; preds = %2245
  %2264 = icmp eq i32 %2259, 0
  %2265 = shl nsw i32 %2259, 1
  %2266 = select i1 %2264, i32 1, i32 %2265
  %2267 = icmp slt i32 %2259, %2266
  br i1 %2267, label %2268, label %2336

2268:                                             ; preds = %2263
  %2269 = icmp eq i32 %2266, 0
  br i1 %2269, label %2275, label %2270

2270:                                             ; preds = %2268
  %2271 = sext i32 %2266 to i64
  %2272 = shl nsw i64 %2271, 3
  %2273 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %2272, i32 noundef 16)
  %2274 = load i32, ptr %2258, align 4, !tbaa !319
  br label %2275

2275:                                             ; preds = %2270, %2268
  %2276 = phi i32 [ %2274, %2270 ], [ %2259, %2268 ]
  %2277 = phi ptr [ %2273, %2270 ], [ null, %2268 ]
  %2278 = icmp sgt i32 %2276, 0
  br i1 %2278, label %2279, label %2324

2279:                                             ; preds = %2275
  %2280 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2255, i64 0, i32 5
  %2281 = zext i32 %2276 to i64
  %2282 = and i64 %2281, 3
  %2283 = icmp ult i32 %2276, 4
  br i1 %2283, label %2311, label %2284

2284:                                             ; preds = %2279
  %2285 = and i64 %2281, 4294967292
  br label %2286

2286:                                             ; preds = %2286, %2284
  %2287 = phi i64 [ 0, %2284 ], [ %2308, %2286 ]
  %2288 = phi i64 [ 0, %2284 ], [ %2309, %2286 ]
  %2289 = getelementptr inbounds ptr, ptr %2277, i64 %2287
  %2290 = load ptr, ptr %2280, align 8, !tbaa !320
  %2291 = getelementptr inbounds ptr, ptr %2290, i64 %2287
  %2292 = load ptr, ptr %2291, align 8, !tbaa !219
  store ptr %2292, ptr %2289, align 8, !tbaa !219
  %2293 = or i64 %2287, 1
  %2294 = getelementptr inbounds ptr, ptr %2277, i64 %2293
  %2295 = load ptr, ptr %2280, align 8, !tbaa !320
  %2296 = getelementptr inbounds ptr, ptr %2295, i64 %2293
  %2297 = load ptr, ptr %2296, align 8, !tbaa !219
  store ptr %2297, ptr %2294, align 8, !tbaa !219
  %2298 = or i64 %2287, 2
  %2299 = getelementptr inbounds ptr, ptr %2277, i64 %2298
  %2300 = load ptr, ptr %2280, align 8, !tbaa !320
  %2301 = getelementptr inbounds ptr, ptr %2300, i64 %2298
  %2302 = load ptr, ptr %2301, align 8, !tbaa !219
  store ptr %2302, ptr %2299, align 8, !tbaa !219
  %2303 = or i64 %2287, 3
  %2304 = getelementptr inbounds ptr, ptr %2277, i64 %2303
  %2305 = load ptr, ptr %2280, align 8, !tbaa !320
  %2306 = getelementptr inbounds ptr, ptr %2305, i64 %2303
  %2307 = load ptr, ptr %2306, align 8, !tbaa !219
  store ptr %2307, ptr %2304, align 8, !tbaa !219
  %2308 = add nuw nsw i64 %2287, 4
  %2309 = add i64 %2288, 4
  %2310 = icmp eq i64 %2309, %2285
  br i1 %2310, label %2311, label %2286

2311:                                             ; preds = %2286, %2279
  %2312 = phi i64 [ 0, %2279 ], [ %2308, %2286 ]
  %2313 = icmp eq i64 %2282, 0
  br i1 %2313, label %2324, label %2314

2314:                                             ; preds = %2311, %2314
  %2315 = phi i64 [ %2321, %2314 ], [ %2312, %2311 ]
  %2316 = phi i64 [ %2322, %2314 ], [ 0, %2311 ]
  %2317 = getelementptr inbounds ptr, ptr %2277, i64 %2315
  %2318 = load ptr, ptr %2280, align 8, !tbaa !320
  %2319 = getelementptr inbounds ptr, ptr %2318, i64 %2315
  %2320 = load ptr, ptr %2319, align 8, !tbaa !219
  store ptr %2320, ptr %2317, align 8, !tbaa !219
  %2321 = add nuw nsw i64 %2315, 1
  %2322 = add i64 %2316, 1
  %2323 = icmp eq i64 %2322, %2282
  br i1 %2323, label %2324, label %2314, !llvm.loop !367

2324:                                             ; preds = %2311, %2314, %2275
  %2325 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2255, i64 0, i32 5
  %2326 = load ptr, ptr %2325, align 8, !tbaa !320
  %2327 = icmp eq ptr %2326, null
  %2328 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2255, i64 0, i32 6
  %2329 = load i8, ptr %2328, align 8
  %2330 = icmp eq i8 %2329, 0
  %2331 = select i1 %2327, i1 true, i1 %2330
  br i1 %2331, label %2334, label %2332

2332:                                             ; preds = %2324
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %2326)
  %2333 = load i32, ptr %2258, align 4, !tbaa !319
  br label %2334

2334:                                             ; preds = %2332, %2324
  %2335 = phi i32 [ %2333, %2332 ], [ %2276, %2324 ]
  store i8 1, ptr %2328, align 8, !tbaa !341
  store ptr %2277, ptr %2325, align 8, !tbaa !320
  store i32 %2266, ptr %2260, align 8, !tbaa !342
  br label %2336

2336:                                             ; preds = %2334, %2263, %2245
  %2337 = phi i32 [ %2335, %2334 ], [ %2259, %2263 ], [ %2259, %2245 ]
  %2338 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2255, i64 0, i32 5
  %2339 = load ptr, ptr %2338, align 8, !tbaa !320
  %2340 = sext i32 %2337 to i64
  %2341 = getelementptr inbounds ptr, ptr %2339, i64 %2340
  %2342 = load ptr, ptr %2257, align 8, !tbaa !219
  store ptr %2342, ptr %2341, align 8, !tbaa !219
  %2343 = add nsw i32 %2337, 1
  store i32 %2343, ptr %2258, align 4, !tbaa !319
  %2344 = add nuw nsw i64 %2070, 1
  %2345 = load i32, ptr %1925, align 4, !tbaa !96
  %2346 = sext i32 %2345 to i64
  %2347 = icmp slt i64 %2344, %2346
  br i1 %2347, label %2069, label %2348

2348:                                             ; preds = %1912, %2336, %1520, %2035, %1398, %1396
  %2349 = load i32, ptr %5, align 4, !tbaa !124
  %2350 = icmp eq i32 %2349, 0
  br i1 %2350, label %2529, label %2351

2351:                                             ; preds = %2348
  tail call void @_ZN10btSoftBody18initializeClustersEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  tail call void @_ZN10btSoftBody14updateClustersEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %2352 = load i32, ptr %5, align 4, !tbaa !124
  %2353 = mul nsw i32 %2352, %2352
  %2354 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 2
  %2355 = load i32, ptr %2354, align 4, !tbaa !128
  %2356 = icmp slt i32 %2355, %2353
  br i1 %2356, label %2357, label %2469

2357:                                             ; preds = %2351
  %2358 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 3
  %2359 = load i32, ptr %2358, align 8, !tbaa !129
  %2360 = icmp slt i32 %2359, %2353
  br i1 %2360, label %2364, label %2361

2361:                                             ; preds = %2357
  %2362 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 5
  %2363 = load ptr, ptr %2362, align 8, !tbaa !127
  br label %2462

2364:                                             ; preds = %2357
  %2365 = icmp eq i32 %2352, 0
  br i1 %2365, label %2370, label %2366

2366:                                             ; preds = %2364
  %2367 = zext i32 %2353 to i64
  %2368 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %2367, i32 noundef 16)
  %2369 = load i32, ptr %2354, align 4, !tbaa !128
  br label %2370

2370:                                             ; preds = %2366, %2364
  %2371 = phi i32 [ %2369, %2366 ], [ %2355, %2364 ]
  %2372 = phi ptr [ %2368, %2366 ], [ null, %2364 ]
  %2373 = icmp sgt i32 %2371, 0
  %2374 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 5
  %2375 = load ptr, ptr %2374, align 8, !tbaa !127
  br i1 %2373, label %2376, label %2452

2376:                                             ; preds = %2370
  %2377 = ptrtoint ptr %2375 to i64
  %2378 = ptrtoint ptr %2372 to i64
  %2379 = zext i32 %2371 to i64
  %2380 = icmp ult i32 %2371, 8
  %2381 = sub i64 %2378, %2377
  %2382 = icmp ult i64 %2381, 32
  %2383 = select i1 %2380, i1 true, i1 %2382
  br i1 %2383, label %2415, label %2384

2384:                                             ; preds = %2376
  %2385 = icmp ult i32 %2371, 32
  br i1 %2385, label %2403, label %2386

2386:                                             ; preds = %2384
  %2387 = and i64 %2379, 4294967264
  br label %2388

2388:                                             ; preds = %2388, %2386
  %2389 = phi i64 [ 0, %2386 ], [ %2396, %2388 ]
  %2390 = getelementptr inbounds i8, ptr %2372, i64 %2389
  %2391 = getelementptr inbounds i8, ptr %2375, i64 %2389
  %2392 = load <16 x i8>, ptr %2391, align 1, !tbaa !368
  %2393 = getelementptr inbounds i8, ptr %2391, i64 16
  %2394 = load <16 x i8>, ptr %2393, align 1, !tbaa !368
  store <16 x i8> %2392, ptr %2390, align 1, !tbaa !368
  %2395 = getelementptr inbounds i8, ptr %2390, i64 16
  store <16 x i8> %2394, ptr %2395, align 1, !tbaa !368
  %2396 = add nuw i64 %2389, 32
  %2397 = icmp eq i64 %2396, %2387
  br i1 %2397, label %2398, label %2388, !llvm.loop !369

2398:                                             ; preds = %2388
  %2399 = icmp eq i64 %2387, %2379
  br i1 %2399, label %2456, label %2400

2400:                                             ; preds = %2398
  %2401 = and i64 %2379, 24
  %2402 = icmp eq i64 %2401, 0
  br i1 %2402, label %2415, label %2403

2403:                                             ; preds = %2384, %2400
  %2404 = phi i64 [ %2387, %2400 ], [ 0, %2384 ]
  %2405 = and i64 %2379, 4294967288
  br label %2406

2406:                                             ; preds = %2406, %2403
  %2407 = phi i64 [ %2404, %2403 ], [ %2411, %2406 ]
  %2408 = getelementptr inbounds i8, ptr %2372, i64 %2407
  %2409 = getelementptr inbounds i8, ptr %2375, i64 %2407
  %2410 = load <8 x i8>, ptr %2409, align 1, !tbaa !368
  store <8 x i8> %2410, ptr %2408, align 1, !tbaa !368
  %2411 = add nuw i64 %2407, 8
  %2412 = icmp eq i64 %2411, %2405
  br i1 %2412, label %2413, label %2406, !llvm.loop !370

2413:                                             ; preds = %2406
  %2414 = icmp eq i64 %2405, %2379
  br i1 %2414, label %2456, label %2415

2415:                                             ; preds = %2376, %2400, %2413
  %2416 = phi i64 [ 0, %2376 ], [ %2387, %2400 ], [ %2405, %2413 ]
  %2417 = xor i64 %2416, -1
  %2418 = add nsw i64 %2417, %2379
  %2419 = and i64 %2379, 3
  %2420 = icmp eq i64 %2419, 0
  br i1 %2420, label %2430, label %2421

2421:                                             ; preds = %2415, %2421
  %2422 = phi i64 [ %2427, %2421 ], [ %2416, %2415 ]
  %2423 = phi i64 [ %2428, %2421 ], [ 0, %2415 ]
  %2424 = getelementptr inbounds i8, ptr %2372, i64 %2422
  %2425 = getelementptr inbounds i8, ptr %2375, i64 %2422
  %2426 = load i8, ptr %2425, align 1, !tbaa !368, !range !191, !noundef !192
  store i8 %2426, ptr %2424, align 1, !tbaa !368
  %2427 = add nuw nsw i64 %2422, 1
  %2428 = add i64 %2423, 1
  %2429 = icmp eq i64 %2428, %2419
  br i1 %2429, label %2430, label %2421, !llvm.loop !371

2430:                                             ; preds = %2421, %2415
  %2431 = phi i64 [ %2416, %2415 ], [ %2427, %2421 ]
  %2432 = icmp ult i64 %2418, 3
  br i1 %2432, label %2456, label %2433

2433:                                             ; preds = %2430, %2433
  %2434 = phi i64 [ %2450, %2433 ], [ %2431, %2430 ]
  %2435 = getelementptr inbounds i8, ptr %2372, i64 %2434
  %2436 = getelementptr inbounds i8, ptr %2375, i64 %2434
  %2437 = load i8, ptr %2436, align 1, !tbaa !368, !range !191, !noundef !192
  store i8 %2437, ptr %2435, align 1, !tbaa !368
  %2438 = add nuw nsw i64 %2434, 1
  %2439 = getelementptr inbounds i8, ptr %2372, i64 %2438
  %2440 = getelementptr inbounds i8, ptr %2375, i64 %2438
  %2441 = load i8, ptr %2440, align 1, !tbaa !368, !range !191, !noundef !192
  store i8 %2441, ptr %2439, align 1, !tbaa !368
  %2442 = add nuw nsw i64 %2434, 2
  %2443 = getelementptr inbounds i8, ptr %2372, i64 %2442
  %2444 = getelementptr inbounds i8, ptr %2375, i64 %2442
  %2445 = load i8, ptr %2444, align 1, !tbaa !368, !range !191, !noundef !192
  store i8 %2445, ptr %2443, align 1, !tbaa !368
  %2446 = add nuw nsw i64 %2434, 3
  %2447 = getelementptr inbounds i8, ptr %2372, i64 %2446
  %2448 = getelementptr inbounds i8, ptr %2375, i64 %2446
  %2449 = load i8, ptr %2448, align 1, !tbaa !368, !range !191, !noundef !192
  store i8 %2449, ptr %2447, align 1, !tbaa !368
  %2450 = add nuw nsw i64 %2434, 4
  %2451 = icmp eq i64 %2450, %2379
  br i1 %2451, label %2456, label %2433, !llvm.loop !372

2452:                                             ; preds = %2370
  %2453 = icmp eq ptr %2375, null
  br i1 %2453, label %2454, label %2456

2454:                                             ; preds = %2452
  %2455 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 6
  store i8 1, ptr %2455, align 8, !tbaa !126
  store ptr %2372, ptr %2374, align 8, !tbaa !127
  store i32 %2353, ptr %2358, align 8, !tbaa !129
  br label %2462

2456:                                             ; preds = %2430, %2433, %2398, %2413, %2452
  %2457 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 6
  %2458 = load i8, ptr %2457, align 8, !tbaa !126, !range !191, !noundef !192
  %2459 = icmp eq i8 %2458, 0
  br i1 %2459, label %2461, label %2460

2460:                                             ; preds = %2456
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %2375)
  br label %2461

2461:                                             ; preds = %2460, %2456
  store i8 1, ptr %2457, align 8, !tbaa !126
  store ptr %2372, ptr %2374, align 8, !tbaa !127
  store i32 %2353, ptr %2358, align 8, !tbaa !129
  br label %2462

2462:                                             ; preds = %2361, %2461, %2454
  %2463 = phi ptr [ %2363, %2361 ], [ %2372, %2461 ], [ %2372, %2454 ]
  %2464 = sext i32 %2355 to i64
  %2465 = zext i32 %2353 to i64
  %2466 = getelementptr i8, ptr %2463, i64 %2464
  %2467 = sub nsw i64 %2465, %2464
  tail call void @llvm.memset.p0.i64(ptr align 1 %2466, i8 0, i64 %2467, i1 false), !tbaa !368
  %2468 = load i32, ptr %5, align 4, !tbaa !124
  br label %2469

2469:                                             ; preds = %2462, %2351
  %2470 = phi i32 [ %2468, %2462 ], [ %2352, %2351 ]
  store i32 %2353, ptr %2354, align 4, !tbaa !128
  %2471 = icmp sgt i32 %2470, 0
  br i1 %2471, label %2472, label %2529

2472:                                             ; preds = %2469
  %2473 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %2474 = load ptr, ptr %2473, align 8, !tbaa !123
  %2475 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 25, i32 5
  %2476 = load ptr, ptr %2475, align 8
  %2477 = zext i32 %2470 to i64
  %2478 = zext i32 %2470 to i64
  br label %2479

2479:                                             ; preds = %2491, %2472
  %2480 = phi i64 [ 0, %2472 ], [ %2492, %2491 ]
  %2481 = getelementptr inbounds ptr, ptr %2474, i64 %2480
  %2482 = load ptr, ptr %2481, align 8, !tbaa !219
  %2483 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %2482, i64 0, i32 24
  %2484 = trunc i64 %2480 to i32
  store i32 %2484, ptr %2483, align 4, !tbaa !373
  %2485 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2482, i64 0, i32 2
  %2486 = load i32, ptr %2485, align 4, !tbaa !319
  %2487 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2482, i64 0, i32 5
  %2488 = tail call i32 @llvm.smax.i32(i32 %2486, i32 0)
  %2489 = zext i32 %2488 to i64
  %2490 = icmp slt i32 %2486, 1
  br label %2494

2491:                                             ; preds = %2511
  %2492 = add nuw nsw i64 %2480, 1
  %2493 = icmp eq i64 %2492, %2478
  br i1 %2493, label %2529, label %2479

2494:                                             ; preds = %2479, %2511
  %2495 = phi i64 [ 0, %2479 ], [ %2516, %2511 ]
  %2496 = getelementptr inbounds ptr, ptr %2474, i64 %2495
  %2497 = load ptr, ptr %2496, align 8, !tbaa !219
  %2498 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2497, i64 0, i32 2
  %2499 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %2497, i64 0, i32 5
  br i1 %2490, label %2511, label %2500

2500:                                             ; preds = %2494
  %2501 = load i32, ptr %2498, align 4, !tbaa !319
  %2502 = icmp sgt i32 %2501, 0
  %2503 = zext i32 %2501 to i64
  br label %2504

2504:                                             ; preds = %2500, %2526
  %2505 = phi i64 [ %2527, %2526 ], [ 0, %2500 ]
  br i1 %2502, label %2506, label %2526

2506:                                             ; preds = %2504
  %2507 = load ptr, ptr %2487, align 8, !tbaa !320
  %2508 = getelementptr inbounds ptr, ptr %2507, i64 %2505
  %2509 = load ptr, ptr %2508, align 8, !tbaa !219
  %2510 = load ptr, ptr %2499, align 8, !tbaa !320
  br label %2521

2511:                                             ; preds = %2526, %2521, %2494
  %2512 = phi i8 [ 0, %2494 ], [ 1, %2521 ], [ 0, %2526 ]
  %2513 = mul nsw i64 %2495, %2477
  %2514 = add nuw nsw i64 %2513, %2480
  %2515 = getelementptr inbounds i8, ptr %2476, i64 %2514
  store i8 %2512, ptr %2515, align 1, !tbaa !368
  %2516 = add nuw nsw i64 %2495, 1
  %2517 = icmp eq i64 %2516, %2478
  br i1 %2517, label %2491, label %2494

2518:                                             ; preds = %2521
  %2519 = add nuw nsw i64 %2522, 1
  %2520 = icmp eq i64 %2519, %2503
  br i1 %2520, label %2526, label %2521

2521:                                             ; preds = %2506, %2518
  %2522 = phi i64 [ 0, %2506 ], [ %2519, %2518 ]
  %2523 = getelementptr inbounds ptr, ptr %2510, i64 %2522
  %2524 = load ptr, ptr %2523, align 8, !tbaa !219
  %2525 = icmp eq ptr %2509, %2524
  br i1 %2525, label %2511, label %2518

2526:                                             ; preds = %2518, %2504
  %2527 = add nuw nsw i64 %2505, 1
  %2528 = icmp eq i64 %2527, %2489
  br i1 %2528, label %2511, label %2504

2529:                                             ; preds = %2491, %2469, %2348
  %2530 = phi i32 [ %2470, %2469 ], [ 0, %2348 ], [ %2470, %2491 ]
  ret i32 %2530

2531:                                             ; preds = %1406, %1402
  %2532 = landingpad { ptr, i32 }
          catch ptr null
  %2533 = extractvalue { ptr, i32 } %2532, 0
  tail call void @__clang_call_terminate(ptr %2533) #39
  unreachable
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayI9btVector3ED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.8, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !33
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.8, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.8, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !30
  store ptr null, ptr %2, align 8, !tbaa !33
  store i32 0, ptr %11, align 4, !tbaa !34
  %12 = getelementptr inbounds %class.btAlignedObjectArray.8, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !35
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody18initializeClustersEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !124
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %444

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  br label %7

7:                                                ; preds = %5, %439
  %8 = phi i64 [ 0, %5 ], [ %440, %439 ]
  %9 = load ptr, ptr %6, align 8, !tbaa !123
  %10 = getelementptr inbounds ptr, ptr %9, i64 %8
  %11 = load ptr, ptr %10, align 8, !tbaa !219
  %12 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 5
  store float 0.000000e+00, ptr %12, align 4, !tbaa !374
  %13 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %11, i64 0, i32 2
  %14 = load i32, ptr %13, align 4, !tbaa !319
  %15 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 2
  %16 = load i32, ptr %15, align 4, !tbaa !40
  %17 = icmp slt i32 %16, %14
  br i1 %17, label %18, label %116

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 3
  %20 = load i32, ptr %19, align 8, !tbaa !41
  %21 = icmp slt i32 %20, %14
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 5
  %24 = load ptr, ptr %23, align 8, !tbaa !39
  br label %107

25:                                               ; preds = %18
  %26 = icmp eq i32 %14, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %25
  %28 = sext i32 %14 to i64
  %29 = shl nsw i64 %28, 2
  %30 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %29, i32 noundef 16)
  %31 = load i32, ptr %15, align 4, !tbaa !40
  br label %32

32:                                               ; preds = %27, %25
  %33 = phi i32 [ %31, %27 ], [ %16, %25 ]
  %34 = phi ptr [ %30, %27 ], [ null, %25 ]
  %35 = icmp sgt i32 %33, 0
  %36 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 5
  %37 = load ptr, ptr %36, align 8, !tbaa !39
  br i1 %35, label %38, label %97

38:                                               ; preds = %32
  %39 = ptrtoint ptr %37 to i64
  %40 = ptrtoint ptr %34 to i64
  %41 = zext i32 %33 to i64
  %42 = icmp ult i32 %33, 8
  %43 = sub i64 %40, %39
  %44 = icmp ult i64 %43, 32
  %45 = select i1 %42, i1 true, i1 %44
  br i1 %45, label %60, label %46

46:                                               ; preds = %38
  %47 = and i64 %41, 4294967288
  br label %48

48:                                               ; preds = %48, %46
  %49 = phi i64 [ 0, %46 ], [ %56, %48 ]
  %50 = getelementptr inbounds float, ptr %34, i64 %49
  %51 = getelementptr inbounds float, ptr %37, i64 %49
  %52 = load <4 x float>, ptr %51, align 4, !tbaa !137
  %53 = getelementptr inbounds float, ptr %51, i64 4
  %54 = load <4 x float>, ptr %53, align 4, !tbaa !137
  store <4 x float> %52, ptr %50, align 4, !tbaa !137
  %55 = getelementptr inbounds float, ptr %50, i64 4
  store <4 x float> %54, ptr %55, align 4, !tbaa !137
  %56 = add nuw i64 %49, 8
  %57 = icmp eq i64 %56, %47
  br i1 %57, label %58, label %48, !llvm.loop !375

58:                                               ; preds = %48
  %59 = icmp eq i64 %47, %41
  br i1 %59, label %101, label %60

60:                                               ; preds = %38, %58
  %61 = phi i64 [ 0, %38 ], [ %47, %58 ]
  %62 = xor i64 %61, -1
  %63 = add nsw i64 %62, %41
  %64 = and i64 %41, 3
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %60, %66
  %67 = phi i64 [ %72, %66 ], [ %61, %60 ]
  %68 = phi i64 [ %73, %66 ], [ 0, %60 ]
  %69 = getelementptr inbounds float, ptr %34, i64 %67
  %70 = getelementptr inbounds float, ptr %37, i64 %67
  %71 = load float, ptr %70, align 4, !tbaa !137
  store float %71, ptr %69, align 4, !tbaa !137
  %72 = add nuw nsw i64 %67, 1
  %73 = add i64 %68, 1
  %74 = icmp eq i64 %73, %64
  br i1 %74, label %75, label %66, !llvm.loop !376

75:                                               ; preds = %66, %60
  %76 = phi i64 [ %61, %60 ], [ %72, %66 ]
  %77 = icmp ult i64 %63, 3
  br i1 %77, label %101, label %78

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %95, %78 ], [ %76, %75 ]
  %80 = getelementptr inbounds float, ptr %34, i64 %79
  %81 = getelementptr inbounds float, ptr %37, i64 %79
  %82 = load float, ptr %81, align 4, !tbaa !137
  store float %82, ptr %80, align 4, !tbaa !137
  %83 = add nuw nsw i64 %79, 1
  %84 = getelementptr inbounds float, ptr %34, i64 %83
  %85 = getelementptr inbounds float, ptr %37, i64 %83
  %86 = load float, ptr %85, align 4, !tbaa !137
  store float %86, ptr %84, align 4, !tbaa !137
  %87 = add nuw nsw i64 %79, 2
  %88 = getelementptr inbounds float, ptr %34, i64 %87
  %89 = getelementptr inbounds float, ptr %37, i64 %87
  %90 = load float, ptr %89, align 4, !tbaa !137
  store float %90, ptr %88, align 4, !tbaa !137
  %91 = add nuw nsw i64 %79, 3
  %92 = getelementptr inbounds float, ptr %34, i64 %91
  %93 = getelementptr inbounds float, ptr %37, i64 %91
  %94 = load float, ptr %93, align 4, !tbaa !137
  store float %94, ptr %92, align 4, !tbaa !137
  %95 = add nuw nsw i64 %79, 4
  %96 = icmp eq i64 %95, %41
  br i1 %96, label %101, label %78, !llvm.loop !377

97:                                               ; preds = %32
  %98 = icmp eq ptr %37, null
  br i1 %98, label %99, label %101

99:                                               ; preds = %97
  %100 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 6
  store i8 1, ptr %100, align 8, !tbaa !36
  store ptr %34, ptr %36, align 8, !tbaa !39
  store i32 %14, ptr %19, align 8, !tbaa !41
  br label %107

101:                                              ; preds = %75, %78, %58, %97
  %102 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 6
  %103 = load i8, ptr %102, align 8, !tbaa !36, !range !191, !noundef !192
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %106, label %105

105:                                              ; preds = %101
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %37)
  br label %106

106:                                              ; preds = %105, %101
  store i8 1, ptr %102, align 8, !tbaa !36
  store ptr %34, ptr %36, align 8, !tbaa !39
  store i32 %14, ptr %19, align 8, !tbaa !41
  br label %107

107:                                              ; preds = %22, %106, %99
  %108 = phi ptr [ %24, %22 ], [ %34, %106 ], [ %34, %99 ]
  %109 = sext i32 %16 to i64
  %110 = sext i32 %14 to i64
  %111 = shl nsw i64 %109, 2
  %112 = getelementptr i8, ptr %108, i64 %111
  %113 = sub nsw i64 %110, %109
  %114 = shl nsw i64 %113, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %112, i8 0, i64 %114, i1 false), !tbaa !137
  %115 = load i32, ptr %13, align 4, !tbaa !319
  br label %116

116:                                              ; preds = %107, %7
  %117 = phi i32 [ %115, %107 ], [ %14, %7 ]
  store i32 %14, ptr %15, align 4, !tbaa !40
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %116
  %120 = load float, ptr %12, align 4, !tbaa !374
  %121 = fdiv float 1.000000e+00, %120
  store float %121, ptr %12, align 4, !tbaa !374
  br label %199

122:                                              ; preds = %116
  %123 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %11, i64 0, i32 5
  %124 = load ptr, ptr %123, align 8, !tbaa !320
  %125 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 5
  %126 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 22
  %127 = load ptr, ptr %125, align 8, !tbaa !39
  %128 = zext i32 %117 to i64
  br label %241

129:                                              ; preds = %252
  %130 = fdiv float 1.000000e+00, %255
  store float %130, ptr %12, align 4, !tbaa !374
  br i1 %118, label %131, label %199

131:                                              ; preds = %129
  %132 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %11, i64 0, i32 5
  %133 = load ptr, ptr %132, align 8, !tbaa !320
  %134 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 5
  %135 = load ptr, ptr %134, align 8, !tbaa !39
  %136 = and i64 %128, 1
  %137 = icmp eq i32 %117, 1
  br i1 %137, label %177, label %138

138:                                              ; preds = %131
  %139 = and i64 %128, 4294967294
  br label %140

140:                                              ; preds = %140, %138
  %141 = phi i64 [ 0, %138 ], [ %174, %140 ]
  %142 = phi float [ 0.000000e+00, %138 ], [ %172, %140 ]
  %143 = phi <2 x float> [ zeroinitializer, %138 ], [ %173, %140 ]
  %144 = phi i64 [ 0, %138 ], [ %175, %140 ]
  %145 = getelementptr inbounds ptr, ptr %133, i64 %141
  %146 = load ptr, ptr %145, align 8, !tbaa !219
  %147 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %146, i64 0, i32 1
  %148 = getelementptr inbounds float, ptr %135, i64 %141
  %149 = load float, ptr %147, align 4, !tbaa !137
  %150 = load float, ptr %148, align 4, !tbaa !137
  %151 = fmul float %149, %150
  %152 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %146, i64 0, i32 1, i32 0, i64 1
  %153 = load <2 x float>, ptr %152, align 4, !tbaa !137
  %154 = insertelement <2 x float> poison, float %150, i64 0
  %155 = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> zeroinitializer
  %156 = fmul <2 x float> %155, %153
  %157 = fadd float %142, %151
  %158 = fadd <2 x float> %143, %156
  %159 = or i64 %141, 1
  %160 = getelementptr inbounds ptr, ptr %133, i64 %159
  %161 = load ptr, ptr %160, align 8, !tbaa !219
  %162 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %161, i64 0, i32 1
  %163 = getelementptr inbounds float, ptr %135, i64 %159
  %164 = load float, ptr %162, align 4, !tbaa !137
  %165 = load float, ptr %163, align 4, !tbaa !137
  %166 = fmul float %164, %165
  %167 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %161, i64 0, i32 1, i32 0, i64 1
  %168 = load <2 x float>, ptr %167, align 4, !tbaa !137
  %169 = insertelement <2 x float> poison, float %165, i64 0
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = fmul <2 x float> %170, %168
  %172 = fadd float %157, %166
  %173 = fadd <2 x float> %158, %171
  %174 = add nuw nsw i64 %141, 2
  %175 = add i64 %144, 2
  %176 = icmp eq i64 %175, %139
  br i1 %176, label %177, label %140

177:                                              ; preds = %140, %131
  %178 = phi float [ undef, %131 ], [ %172, %140 ]
  %179 = phi <2 x float> [ undef, %131 ], [ %173, %140 ]
  %180 = phi i64 [ 0, %131 ], [ %174, %140 ]
  %181 = phi float [ 0.000000e+00, %131 ], [ %172, %140 ]
  %182 = phi <2 x float> [ zeroinitializer, %131 ], [ %173, %140 ]
  %183 = icmp eq i64 %136, 0
  br i1 %183, label %199, label %184

184:                                              ; preds = %177
  %185 = getelementptr inbounds ptr, ptr %133, i64 %180
  %186 = load ptr, ptr %185, align 8, !tbaa !219
  %187 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %186, i64 0, i32 1
  %188 = getelementptr inbounds float, ptr %135, i64 %180
  %189 = load float, ptr %187, align 4, !tbaa !137
  %190 = load float, ptr %188, align 4, !tbaa !137
  %191 = fmul float %189, %190
  %192 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %186, i64 0, i32 1, i32 0, i64 1
  %193 = load <2 x float>, ptr %192, align 4, !tbaa !137
  %194 = insertelement <2 x float> poison, float %190, i64 0
  %195 = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> zeroinitializer
  %196 = fmul <2 x float> %195, %193
  %197 = fadd float %181, %191
  %198 = fadd <2 x float> %182, %196
  br label %199

199:                                              ; preds = %184, %177, %119, %129
  %200 = phi float [ %130, %129 ], [ %121, %119 ], [ %130, %177 ], [ %130, %184 ]
  %201 = phi float [ 0.000000e+00, %129 ], [ 0.000000e+00, %119 ], [ %178, %177 ], [ %197, %184 ]
  %202 = phi <2 x float> [ zeroinitializer, %129 ], [ zeroinitializer, %119 ], [ %179, %177 ], [ %198, %184 ]
  %203 = fmul float %200, %201
  %204 = insertelement <2 x float> poison, float %200, i64 0
  %205 = shufflevector <2 x float> %204, <2 x float> poison, <2 x i32> zeroinitializer
  %206 = fmul <2 x float> %205, %202
  %207 = insertelement <2 x float> undef, float %203, i64 0
  %208 = shufflevector <2 x float> %207, <2 x float> %206, <2 x i32> <i32 0, i32 2>
  %209 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %206, <2 x i32> <i32 3, i32 1>
  %210 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 8
  store <2 x float> %208, ptr %210, align 8, !tbaa.struct !162
  %211 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 8, i32 0, i64 2
  store <2 x float> %209, ptr %211, align 8, !tbaa.struct !164
  %212 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 13
  %213 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6
  %214 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 2
  %215 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 2, i32 0, i64 1
  %216 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 2, i32 0, i64 2
  %217 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 2, i32 0, i64 3
  %218 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %212, i8 0, i64 40, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) %213, i8 0, i64 48, i1 false)
  br i1 %118, label %227, label %219

219:                                              ; preds = %199
  %220 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 0, i32 0, i64 1
  %221 = load float, ptr %220, align 4, !tbaa !137
  %222 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 0, i32 0, i64 2
  %223 = load float, ptr %222, align 4, !tbaa !137
  %224 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 1, i32 0, i64 1
  %225 = load <2 x float>, ptr %224, align 4, !tbaa !137
  %226 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %223, i64 1
  br label %302

227:                                              ; preds = %199
  %228 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %11, i64 0, i32 5
  %229 = load ptr, ptr %228, align 8, !tbaa !320
  %230 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 1, i32 5
  %231 = load ptr, ptr %230, align 8, !tbaa !39
  %232 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 1, i32 0, i64 1
  %233 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 0, i32 0, i64 1
  %234 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 0, i32 0, i64 2
  %235 = load float, ptr %233, align 4, !tbaa !137
  %236 = load float, ptr %234, align 4, !tbaa !137
  %237 = load <2 x float>, ptr %232, align 4, !tbaa !137
  %238 = zext i32 %117 to i64
  %239 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %236, i64 1
  %240 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %235, i64 1
  br label %258

241:                                              ; preds = %122, %252
  %242 = phi i64 [ 0, %122 ], [ %256, %252 ]
  %243 = getelementptr inbounds ptr, ptr %124, i64 %242
  %244 = load ptr, ptr %243, align 8, !tbaa !219
  %245 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %244, i64 0, i32 6
  %246 = load float, ptr %245, align 8, !tbaa !174
  %247 = fcmp oeq float %246, 0.000000e+00
  %248 = getelementptr inbounds float, ptr %127, i64 %242
  br i1 %247, label %249, label %250

249:                                              ; preds = %241
  store i8 1, ptr %126, align 8, !tbaa !345
  br label %252

250:                                              ; preds = %241
  %251 = fdiv float 1.000000e+00, %246
  br label %252

252:                                              ; preds = %250, %249
  %253 = phi float [ %251, %250 ], [ 0x43ABC16D60000000, %249 ]
  store float %253, ptr %248, align 4, !tbaa !137
  %254 = load float, ptr %12, align 4, !tbaa !374
  %255 = fadd float %253, %254
  store float %255, ptr %12, align 4, !tbaa !374
  %256 = add nuw nsw i64 %242, 1
  %257 = icmp eq i64 %256, %128
  br i1 %257, label %129, label %241

258:                                              ; preds = %227, %258
  %259 = phi i64 [ 0, %227 ], [ %297, %258 ]
  %260 = phi <2 x float> [ %237, %227 ], [ %291, %258 ]
  %261 = phi <2 x float> [ %239, %227 ], [ %294, %258 ]
  %262 = phi <2 x float> [ %240, %227 ], [ %287, %258 ]
  %263 = getelementptr inbounds ptr, ptr %229, i64 %259
  %264 = load ptr, ptr %263, align 8, !tbaa !219
  %265 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %264, i64 0, i32 1
  %266 = load float, ptr %265, align 4, !tbaa !137
  %267 = fsub float %266, %203
  %268 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %264, i64 0, i32 1, i32 0, i64 1
  %269 = fmul float %267, %267
  %270 = load <2 x float>, ptr %268, align 4, !tbaa !137
  %271 = fsub <2 x float> %270, %206
  %272 = fmul <2 x float> %271, %271
  %273 = getelementptr inbounds float, ptr %231, i64 %259
  %274 = load float, ptr %273, align 4, !tbaa !137
  %275 = extractelement <2 x float> %272, i64 0
  %276 = extractelement <2 x float> %272, i64 1
  %277 = fadd float %275, %276
  %278 = fadd float %269, %276
  %279 = fadd float %269, %275
  %280 = fneg float %274
  %281 = fmul float %267, %280
  %282 = extractelement <2 x float> %271, i64 0
  %283 = insertelement <2 x float> poison, float %274, i64 0
  %284 = insertelement <2 x float> %283, float %281, i64 1
  %285 = shufflevector <2 x float> %271, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %286 = insertelement <2 x float> %285, float %277, i64 0
  %287 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %284, <2 x float> %286, <2 x float> %262)
  store <2 x float> %287, ptr %213, align 4, !tbaa !137
  %288 = fmul float %282, %280
  %289 = insertelement <2 x float> %283, float %288, i64 1
  %290 = insertelement <2 x float> %271, float %278, i64 0
  %291 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %289, <2 x float> %290, <2 x float> %260)
  %292 = insertelement <2 x float> %289, float %281, i64 1
  %293 = insertelement <2 x float> %290, float %279, i64 0
  %294 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %292, <2 x float> %293, <2 x float> %261)
  %295 = extractelement <2 x float> %294, i64 0
  store float %295, ptr %216, align 4, !tbaa !137
  %296 = extractelement <2 x float> %294, i64 1
  store float %296, ptr %234, align 4, !tbaa !137
  store <2 x float> %291, ptr %232, align 4, !tbaa !137
  %297 = add nuw nsw i64 %259, 1
  %298 = icmp eq i64 %297, %238
  br i1 %298, label %299, label %258

299:                                              ; preds = %258
  %300 = extractelement <2 x float> %287, i64 1
  %301 = extractelement <2 x float> %287, i64 0
  br label %302

302:                                              ; preds = %299, %219
  %303 = phi float [ 0.000000e+00, %219 ], [ %301, %299 ]
  %304 = phi float [ %221, %219 ], [ %300, %299 ]
  %305 = phi <2 x float> [ %225, %219 ], [ %291, %299 ]
  %306 = phi <2 x float> [ %226, %219 ], [ %294, %299 ]
  %307 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 0, i32 0, i64 2
  %308 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 1, i32 0, i64 1
  %309 = shufflevector <2 x float> %305, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %310 = insertelement <2 x float> %309, float %304, i64 1
  %311 = fneg <2 x float> %310
  %312 = extractelement <2 x float> %305, i64 0
  %313 = fneg float %312
  %314 = extractelement <2 x float> %306, i64 1
  %315 = fmul float %314, %313
  %316 = extractelement <2 x float> %305, i64 1
  %317 = tail call float @llvm.fmuladd.f32(float %304, float %316, float %315)
  %318 = extractelement <2 x float> %311, i64 1
  %319 = fmul float %304, %318
  %320 = tail call float @llvm.fmuladd.f32(float %303, float %312, float %319)
  %321 = shufflevector <2 x float> %305, <2 x float> %306, <2 x i32> <i32 1, i32 2>
  %322 = fmul <2 x float> %321, %311
  %323 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %305, <2 x float> %306, <2 x float> %322)
  %324 = extractelement <2 x float> %323, i64 1
  %325 = fmul float %324, %304
  %326 = extractelement <2 x float> %323, i64 0
  %327 = tail call float @llvm.fmuladd.f32(float %303, float %326, float %325)
  %328 = tail call float @llvm.fmuladd.f32(float %314, float %317, float %327)
  %329 = fdiv float 1.000000e+00, %328
  %330 = insertelement <2 x float> poison, float %329, i64 0
  %331 = shufflevector <2 x float> %330, <2 x float> poison, <2 x i32> zeroinitializer
  %332 = fmul <2 x float> %323, %331
  %333 = fmul float %317, %329
  %334 = fmul float %320, %329
  store <2 x float> %332, ptr %213, align 4
  %335 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 0, i32 0, i64 3
  store float 0.000000e+00, ptr %335, align 4, !tbaa.struct !318
  %336 = extractelement <2 x float> %332, i64 1
  store float %336, ptr %218, align 4, !tbaa.struct !162
  %337 = shufflevector <2 x float> %306, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %338 = insertelement <2 x float> %337, float %303, i64 1
  %339 = fneg <2 x float> %338
  %340 = fmul <2 x float> %305, %339
  %341 = extractelement <2 x float> %340, i64 0
  %342 = tail call float @llvm.fmuladd.f32(float %304, float %316, float %341)
  %343 = shufflevector <2 x float> %306, <2 x float> %305, <2 x i32> <i32 1, i32 3>
  %344 = fmul <2 x float> %343, %339
  %345 = insertelement <2 x float> %306, float %303, i64 0
  %346 = insertelement <2 x float> %306, float %304, i64 1
  %347 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %345, <2 x float> %346, <2 x float> %344)
  %348 = fmul float %342, %329
  %349 = fmul <2 x float> %347, %331
  store float %348, ptr %307, align 4, !tbaa.struct !164
  store <2 x float> %349, ptr %308, align 4
  %350 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 6, i32 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %350, align 4, !tbaa.struct !318
  store float %333, ptr %214, align 4, !tbaa.struct !162
  %351 = extractelement <2 x float> %349, i64 1
  store float %351, ptr %215, align 4, !tbaa.struct !293
  store float %334, ptr %216, align 4, !tbaa.struct !164
  store float 0.000000e+00, ptr %217, align 4, !tbaa.struct !318
  %352 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 3
  store float 1.000000e+00, ptr %352, align 4, !tbaa !137
  %353 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %354 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %353, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %354, align 4, !tbaa !137
  %355 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 2
  %356 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 3, i32 0, i32 0, i64 2, i32 0, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %355, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %356, align 4, !tbaa !137
  %357 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 3, i32 0, i32 0, i64 2, i32 0, i64 3
  store i32 0, ptr %357, align 4
  %358 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %358, ptr noundef nonnull align 4 dereferenceable(16) %210, i64 16, i1 false), !tbaa.struct !162
  %359 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 2, i32 2
  %360 = load i32, ptr %359, align 4, !tbaa !34
  %361 = icmp slt i32 %360, %117
  br i1 %361, label %362, label %414

362:                                              ; preds = %302
  %363 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 2, i32 3
  %364 = load i32, ptr %363, align 8, !tbaa !35
  %365 = icmp slt i32 %364, %117
  br i1 %365, label %366, label %414

366:                                              ; preds = %362
  %367 = icmp eq i32 %117, 0
  br i1 %367, label %373, label %368

368:                                              ; preds = %366
  %369 = sext i32 %117 to i64
  %370 = shl nsw i64 %369, 4
  %371 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %370, i32 noundef 16)
  %372 = load i32, ptr %359, align 4, !tbaa !34
  br label %373

373:                                              ; preds = %368, %366
  %374 = phi i32 [ %372, %368 ], [ %360, %366 ]
  %375 = phi ptr [ %371, %368 ], [ null, %366 ]
  %376 = icmp sgt i32 %374, 0
  br i1 %376, label %377, label %404

377:                                              ; preds = %373
  %378 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 2, i32 5
  %379 = zext i32 %374 to i64
  %380 = and i64 %379, 1
  %381 = icmp eq i32 %374, 1
  br i1 %381, label %397, label %382

382:                                              ; preds = %377
  %383 = and i64 %379, 4294967294
  br label %384

384:                                              ; preds = %384, %382
  %385 = phi i64 [ 0, %382 ], [ %394, %384 ]
  %386 = phi i64 [ 0, %382 ], [ %395, %384 ]
  %387 = getelementptr inbounds %class.btVector3, ptr %375, i64 %385
  %388 = load ptr, ptr %378, align 8, !tbaa !33
  %389 = getelementptr inbounds %class.btVector3, ptr %388, i64 %385
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %387, ptr noundef nonnull align 4 dereferenceable(16) %389, i64 16, i1 false), !tbaa.struct !162
  %390 = or i64 %385, 1
  %391 = getelementptr inbounds %class.btVector3, ptr %375, i64 %390
  %392 = load ptr, ptr %378, align 8, !tbaa !33
  %393 = getelementptr inbounds %class.btVector3, ptr %392, i64 %390
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %391, ptr noundef nonnull align 4 dereferenceable(16) %393, i64 16, i1 false), !tbaa.struct !162
  %394 = add nuw nsw i64 %385, 2
  %395 = add i64 %386, 2
  %396 = icmp eq i64 %395, %383
  br i1 %396, label %397, label %384

397:                                              ; preds = %384, %377
  %398 = phi i64 [ 0, %377 ], [ %394, %384 ]
  %399 = icmp eq i64 %380, 0
  br i1 %399, label %404, label %400

400:                                              ; preds = %397
  %401 = getelementptr inbounds %class.btVector3, ptr %375, i64 %398
  %402 = load ptr, ptr %378, align 8, !tbaa !33
  %403 = getelementptr inbounds %class.btVector3, ptr %402, i64 %398
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %401, ptr noundef nonnull align 4 dereferenceable(16) %403, i64 16, i1 false), !tbaa.struct !162
  br label %404

404:                                              ; preds = %400, %397, %373
  %405 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 2, i32 5
  %406 = load ptr, ptr %405, align 8, !tbaa !33
  %407 = icmp eq ptr %406, null
  %408 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 2, i32 6
  %409 = load i8, ptr %408, align 8
  %410 = icmp eq i8 %409, 0
  %411 = select i1 %407, i1 true, i1 %410
  br i1 %411, label %413, label %412

412:                                              ; preds = %404
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %406)
  br label %413

413:                                              ; preds = %412, %404
  store i8 1, ptr %408, align 8, !tbaa !30
  store ptr %375, ptr %405, align 8, !tbaa !33
  store i32 %117, ptr %363, align 8, !tbaa !35
  br label %414

414:                                              ; preds = %413, %362, %302
  store i32 %117, ptr %359, align 4, !tbaa !34
  br i1 %118, label %415, label %439

415:                                              ; preds = %414
  %416 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %11, i64 0, i32 5
  %417 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %11, i64 0, i32 2, i32 5
  br label %418

418:                                              ; preds = %415, %418
  %419 = phi i64 [ 0, %415 ], [ %435, %418 ]
  %420 = load ptr, ptr %416, align 8, !tbaa !320
  %421 = getelementptr inbounds ptr, ptr %420, i64 %419
  %422 = load ptr, ptr %421, align 8, !tbaa !219
  %423 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %422, i64 0, i32 1
  %424 = load <2 x float>, ptr %423, align 4, !tbaa !137
  %425 = load <2 x float>, ptr %210, align 4, !tbaa !137
  %426 = fsub <2 x float> %424, %425
  %427 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %422, i64 0, i32 1, i32 0, i64 2
  %428 = load float, ptr %427, align 4, !tbaa !137
  %429 = load float, ptr %211, align 4, !tbaa !137
  %430 = fsub float %428, %429
  %431 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %430, i64 0
  %432 = load ptr, ptr %417, align 8, !tbaa !33
  %433 = getelementptr inbounds %class.btVector3, ptr %432, i64 %419
  store <2 x float> %426, ptr %433, align 4, !tbaa.struct !162
  %434 = getelementptr inbounds i8, ptr %433, i64 8
  store <2 x float> %431, ptr %434, align 4, !tbaa.struct !164
  %435 = add nuw nsw i64 %419, 1
  %436 = load i32, ptr %359, align 4, !tbaa !34
  %437 = sext i32 %436 to i64
  %438 = icmp slt i64 %435, %437
  br i1 %438, label %418, label %439

439:                                              ; preds = %418, %414
  %440 = add nuw nsw i64 %8, 1
  %441 = load i32, ptr %2, align 4, !tbaa !124
  %442 = sext i32 %441 to i64
  %443 = icmp slt i64 %440, %442
  br i1 %443, label %7, label %444

444:                                              ; preds = %439, %1
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody14updateClustersEv(ptr noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %2 = alloca %class.btMatrix3x3, align 4
  %3 = alloca %class.btMatrix3x3, align 4
  %4 = alloca %class.btMatrix3x3, align 4
  %5 = alloca %struct.btDbvtAabbMm, align 16
  %6 = alloca %class.btVector3, align 8
  tail call void @_ZN15CProfileManager13Start_ProfileEPKc(ptr noundef nonnull @.str)
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !124
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %570

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %12 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2
  %13 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 1
  %14 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 2
  %15 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1
  %16 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 1
  %17 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %18 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 2
  %19 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1
  %20 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2
  %21 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %5, i64 0, i32 1
  %22 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  %23 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %24 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %6, i64 0, i32 1
  %25 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 3
  br label %26

26:                                               ; preds = %10, %565
  %27 = phi i32 [ %8, %10 ], [ %566, %565 ]
  %28 = phi i64 [ 0, %10 ], [ %567, %565 ]
  %29 = load ptr, ptr %11, align 8, !tbaa !123
  %30 = getelementptr inbounds ptr, ptr %29, i64 %28
  %31 = load ptr, ptr %30, align 8, !tbaa !219
  %32 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %31, i64 0, i32 2
  %33 = load i32, ptr %32, align 4, !tbaa !319
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %565, label %35

35:                                               ; preds = %26
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %2) #38
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %3) #38
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %4) #38
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) %2, i8 0, i64 48, i1 false)
  store float 0x3F2A36E2E0000000, ptr %16, align 4, !tbaa !137
  store float 0x3F33A92A20000000, ptr %14, align 4, !tbaa !137
  %36 = icmp sgt i32 %33, 0
  br i1 %36, label %37, label %106

37:                                               ; preds = %35
  %38 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %31, i64 0, i32 5
  %39 = load ptr, ptr %38, align 8, !tbaa !320
  %40 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 1, i32 5
  %41 = load ptr, ptr %40, align 8, !tbaa !39
  %42 = zext i32 %33 to i64
  %43 = and i64 %42, 1
  %44 = icmp eq i32 %33, 1
  br i1 %44, label %84, label %45

45:                                               ; preds = %37
  %46 = and i64 %42, 4294967294
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %81, %47 ]
  %49 = phi float [ 0.000000e+00, %45 ], [ %80, %47 ]
  %50 = phi <2 x float> [ zeroinitializer, %45 ], [ %79, %47 ]
  %51 = phi i64 [ 0, %45 ], [ %82, %47 ]
  %52 = getelementptr inbounds ptr, ptr %39, i64 %48
  %53 = load ptr, ptr %52, align 8, !tbaa !219
  %54 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %53, i64 0, i32 1
  %55 = getelementptr inbounds float, ptr %41, i64 %48
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = load <2 x float>, ptr %54, align 4, !tbaa !137
  %58 = insertelement <2 x float> poison, float %56, i64 0
  %59 = shufflevector <2 x float> %58, <2 x float> poison, <2 x i32> zeroinitializer
  %60 = fmul <2 x float> %59, %57
  %61 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %53, i64 0, i32 1, i32 0, i64 2
  %62 = load float, ptr %61, align 4, !tbaa !137
  %63 = fmul float %56, %62
  %64 = fadd <2 x float> %50, %60
  %65 = fadd float %49, %63
  %66 = or i64 %48, 1
  %67 = getelementptr inbounds ptr, ptr %39, i64 %66
  %68 = load ptr, ptr %67, align 8, !tbaa !219
  %69 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %68, i64 0, i32 1
  %70 = getelementptr inbounds float, ptr %41, i64 %66
  %71 = load float, ptr %70, align 4, !tbaa !137
  %72 = load <2 x float>, ptr %69, align 4, !tbaa !137
  %73 = insertelement <2 x float> poison, float %71, i64 0
  %74 = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> zeroinitializer
  %75 = fmul <2 x float> %74, %72
  %76 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %68, i64 0, i32 1, i32 0, i64 2
  %77 = load float, ptr %76, align 4, !tbaa !137
  %78 = fmul float %71, %77
  %79 = fadd <2 x float> %64, %75
  %80 = fadd float %65, %78
  %81 = add nuw nsw i64 %48, 2
  %82 = add i64 %51, 2
  %83 = icmp eq i64 %82, %46
  br i1 %83, label %84, label %47

84:                                               ; preds = %47, %37
  %85 = phi <2 x float> [ undef, %37 ], [ %79, %47 ]
  %86 = phi float [ undef, %37 ], [ %80, %47 ]
  %87 = phi i64 [ 0, %37 ], [ %81, %47 ]
  %88 = phi float [ 0.000000e+00, %37 ], [ %80, %47 ]
  %89 = phi <2 x float> [ zeroinitializer, %37 ], [ %79, %47 ]
  %90 = icmp eq i64 %43, 0
  br i1 %90, label %106, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds ptr, ptr %39, i64 %87
  %93 = load ptr, ptr %92, align 8, !tbaa !219
  %94 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %93, i64 0, i32 1
  %95 = getelementptr inbounds float, ptr %41, i64 %87
  %96 = load float, ptr %95, align 4, !tbaa !137
  %97 = load <2 x float>, ptr %94, align 4, !tbaa !137
  %98 = insertelement <2 x float> poison, float %96, i64 0
  %99 = shufflevector <2 x float> %98, <2 x float> poison, <2 x i32> zeroinitializer
  %100 = fmul <2 x float> %99, %97
  %101 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %93, i64 0, i32 1, i32 0, i64 2
  %102 = load float, ptr %101, align 4, !tbaa !137
  %103 = fmul float %96, %102
  %104 = fadd <2 x float> %89, %100
  %105 = fadd float %88, %103
  br label %106

106:                                              ; preds = %91, %84, %35
  %107 = phi float [ 0.000000e+00, %35 ], [ %86, %84 ], [ %105, %91 ]
  %108 = phi <2 x float> [ zeroinitializer, %35 ], [ %85, %84 ], [ %104, %91 ]
  %109 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 5
  %110 = load float, ptr %109, align 4, !tbaa !137
  %111 = insertelement <2 x float> poison, float %110, i64 0
  %112 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> zeroinitializer
  %113 = fmul <2 x float> %108, %112
  %114 = fmul float %107, %110
  %115 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %114, i64 0
  %116 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 8
  store <2 x float> %113, ptr %116, align 8, !tbaa.struct !162
  %117 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 8, i32 0, i64 2
  store <2 x float> %115, ptr %117, align 8, !tbaa.struct !164
  %118 = load float, ptr %15, align 4, !tbaa !137
  %119 = insertelement <2 x float> <float 0x3F1A36E2E0000000, float poison>, float %118, i64 1
  br i1 %36, label %120, label %130

120:                                              ; preds = %106
  %121 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %31, i64 0, i32 5
  %122 = load ptr, ptr %121, align 8, !tbaa !320
  %123 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 2, i32 5
  %124 = load ptr, ptr %123, align 8, !tbaa !33
  %125 = load <2 x float>, ptr %17, align 4, !tbaa !137
  %126 = load float, ptr %18, align 4, !tbaa !137
  %127 = zext i32 %33 to i64
  %128 = insertelement <2 x float> <float 0x3F2A36E2E0000000, float poison>, float %126, i64 1
  br label %277

129:                                              ; preds = %277
  store <2 x float> %301, ptr %17, align 4, !tbaa !137
  store <2 x float> %305, ptr %16, align 4, !tbaa !137
  store <2 x float> %311, ptr %13, align 4, !tbaa !137
  br label %130

130:                                              ; preds = %129, %106
  %131 = phi float [ %310, %129 ], [ 0.000000e+00, %106 ]
  %132 = phi <2 x float> [ %304, %129 ], [ %119, %106 ]
  %133 = extractelement <2 x float> %132, i64 0
  store float %133, ptr %2, align 4, !tbaa !137
  %134 = extractelement <2 x float> %132, i64 1
  store float %134, ptr %15, align 4, !tbaa !137
  store float %131, ptr %12, align 4, !tbaa !137
  call fastcc void @_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_(ptr noundef nonnull align 4 dereferenceable(48) %2, ptr noundef nonnull align 4 dereferenceable(48) %3, ptr noundef nonnull align 4 dereferenceable(48) %4)
  %135 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3
  %136 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %136, ptr noundef nonnull align 4 dereferenceable(16) %116, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %135, ptr noundef nonnull align 4 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !162
  %137 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %137, ptr noundef nonnull align 4 dereferenceable(16) %19, i64 16, i1 false), !tbaa.struct !162
  %138 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %138, ptr noundef nonnull align 4 dereferenceable(16) %20, i64 16, i1 false), !tbaa.struct !162
  %139 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6
  %140 = load float, ptr %139, align 4, !tbaa !137, !noalias !378
  %141 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 1
  %142 = load float, ptr %141, align 4, !tbaa !137, !noalias !378
  %143 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %144 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !137, !noalias !378
  %146 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %147 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 0, i32 0, i64 1
  %148 = load float, ptr %147, align 4, !tbaa !137, !noalias !378
  %149 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 1, i32 0, i64 1
  %150 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 2, i32 0, i64 1
  %151 = load float, ptr %150, align 4, !tbaa !137, !noalias !378
  %152 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 0, i32 0, i64 2
  %153 = load float, ptr %152, align 4, !tbaa !137, !noalias !378
  %154 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 1, i32 0, i64 2
  %155 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 6, i32 0, i64 2, i32 0, i64 2
  %156 = load float, ptr %155, align 4, !tbaa !137, !noalias !378
  %157 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 1
  %158 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 2
  %159 = load float, ptr %138, align 4, !tbaa !137, !noalias !378
  %160 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 2, i32 0, i64 1
  %161 = load float, ptr %160, align 4, !tbaa !137, !noalias !378
  %162 = fmul float %142, %161
  %163 = call float @llvm.fmuladd.f32(float %140, float %159, float %162)
  %164 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 0, i32 0, i64 2, i32 0, i64 2
  %165 = load float, ptr %164, align 4, !tbaa !137, !noalias !378
  %166 = call float @llvm.fmuladd.f32(float %145, float %165, float %163)
  %167 = load float, ptr %149, align 4, !tbaa !137, !noalias !378
  %168 = load float, ptr %154, align 4, !tbaa !137, !noalias !378
  %169 = insertelement <2 x float> poison, float %142, i64 0
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = insertelement <2 x float> poison, float %140, i64 0
  %172 = shufflevector <2 x float> %171, <2 x float> poison, <2 x i32> zeroinitializer
  %173 = insertelement <2 x float> poison, float %145, i64 0
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer
  %175 = insertelement <2 x float> poison, float %167, i64 0
  %176 = insertelement <2 x float> poison, float %148, i64 0
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <2 x i32> zeroinitializer
  %178 = insertelement <2 x float> poison, float %151, i64 0
  %179 = shufflevector <2 x float> %178, <2 x float> poison, <2 x i32> zeroinitializer
  %180 = insertelement <2 x float> poison, float %168, i64 0
  %181 = insertelement <2 x float> poison, float %153, i64 0
  %182 = shufflevector <2 x float> %181, <2 x float> poison, <2 x i32> zeroinitializer
  %183 = insertelement <2 x float> poison, float %156, i64 0
  %184 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer
  %185 = fmul float %167, %161
  %186 = call float @llvm.fmuladd.f32(float %148, float %159, float %185)
  %187 = call float @llvm.fmuladd.f32(float %151, float %165, float %186)
  %188 = fmul float %168, %161
  %189 = call float @llvm.fmuladd.f32(float %153, float %159, float %188)
  %190 = call float @llvm.fmuladd.f32(float %156, float %165, float %189)
  %191 = insertelement <2 x float> poison, float %161, i64 0
  %192 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> zeroinitializer
  %193 = insertelement <2 x float> poison, float %159, i64 0
  %194 = shufflevector <2 x float> %193, <2 x float> poison, <2 x i32> zeroinitializer
  %195 = insertelement <2 x float> poison, float %165, i64 0
  %196 = shufflevector <2 x float> %195, <2 x float> poison, <2 x i32> zeroinitializer
  %197 = fmul float %161, %187
  %198 = call float @llvm.fmuladd.f32(float %159, float %166, float %197)
  %199 = call float @llvm.fmuladd.f32(float %165, float %190, float %198)
  %200 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7
  %201 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %202 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %203 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 0, i32 0, i64 3
  store float 0.000000e+00, ptr %203, align 4, !tbaa.struct !318
  %204 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 1
  %205 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %206 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %206, align 4, !tbaa.struct !318
  %207 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 2
  %208 = load float, ptr %135, align 4, !tbaa !137, !noalias !378
  %209 = load float, ptr %143, align 4, !tbaa !137, !noalias !378
  %210 = load float, ptr %146, align 4, !tbaa !137, !noalias !378
  %211 = load float, ptr %137, align 4, !tbaa !137, !noalias !378
  %212 = load float, ptr %157, align 4, !tbaa !137, !noalias !378
  %213 = insertelement <2 x float> poison, float %209, i64 0
  %214 = insertelement <2 x float> %213, float %212, i64 1
  %215 = fmul <2 x float> %170, %214
  %216 = insertelement <2 x float> poison, float %208, i64 0
  %217 = insertelement <2 x float> %216, float %211, i64 1
  %218 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %172, <2 x float> %217, <2 x float> %215)
  %219 = load float, ptr %158, align 4, !tbaa !137, !noalias !378
  %220 = insertelement <2 x float> poison, float %210, i64 0
  %221 = insertelement <2 x float> %220, float %219, i64 1
  %222 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %174, <2 x float> %221, <2 x float> %218)
  %223 = insertelement <2 x float> %213, float %167, i64 1
  %224 = insertelement <2 x float> %175, float %212, i64 1
  %225 = fmul <2 x float> %223, %224
  %226 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %177, <2 x float> %217, <2 x float> %225)
  %227 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %179, <2 x float> %221, <2 x float> %226)
  %228 = insertelement <2 x float> %213, float %168, i64 1
  %229 = insertelement <2 x float> %180, float %212, i64 1
  %230 = fmul <2 x float> %228, %229
  %231 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %182, <2 x float> %217, <2 x float> %230)
  %232 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %184, <2 x float> %221, <2 x float> %231)
  %233 = shufflevector <2 x float> %213, <2 x float> poison, <2 x i32> zeroinitializer
  %234 = fmul <2 x float> %233, %227
  %235 = shufflevector <2 x float> %216, <2 x float> poison, <2 x i32> zeroinitializer
  %236 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %235, <2 x float> %222, <2 x float> %234)
  %237 = shufflevector <2 x float> %220, <2 x float> poison, <2 x i32> zeroinitializer
  %238 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %237, <2 x float> %232, <2 x float> %236)
  %239 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %240 = fmul <2 x float> %227, %239
  %241 = shufflevector <2 x float> %217, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %242 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %241, <2 x float> %222, <2 x float> %240)
  %243 = shufflevector <2 x float> %221, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %244 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %243, <2 x float> %232, <2 x float> %242)
  %245 = fmul <2 x float> %227, %192
  %246 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %194, <2 x float> %222, <2 x float> %245)
  %247 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %196, <2 x float> %232, <2 x float> %246)
  %248 = insertelement <2 x float> poison, float %187, i64 0
  %249 = shufflevector <2 x float> %248, <2 x float> poison, <2 x i32> zeroinitializer
  %250 = fmul <2 x float> %214, %249
  %251 = insertelement <2 x float> poison, float %166, i64 0
  %252 = shufflevector <2 x float> %251, <2 x float> poison, <2 x i32> zeroinitializer
  %253 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %217, <2 x float> %252, <2 x float> %250)
  %254 = insertelement <2 x float> poison, float %190, i64 0
  %255 = shufflevector <2 x float> %254, <2 x float> poison, <2 x i32> zeroinitializer
  %256 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %221, <2 x float> %255, <2 x float> %253)
  %257 = extractelement <2 x float> %238, i64 0
  store float %257, ptr %200, align 4, !tbaa.struct !162
  %258 = extractelement <2 x float> %244, i64 0
  store float %258, ptr %201, align 4, !tbaa.struct !293
  %259 = extractelement <2 x float> %247, i64 0
  store float %259, ptr %202, align 4, !tbaa.struct !164
  %260 = shufflevector <2 x float> %238, <2 x float> %244, <2 x i32> <i32 1, i32 3>
  store <2 x float> %260, ptr %204, align 4
  %261 = extractelement <2 x float> %247, i64 1
  store float %261, ptr %205, align 4, !tbaa.struct !164
  store <2 x float> %256, ptr %207, align 4
  %262 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  store float %199, ptr %262, align 4, !tbaa.struct !164
  %263 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 7, i32 0, i64 2, i32 0, i64 3
  store float 0.000000e+00, ptr %263, align 4, !tbaa.struct !318
  %264 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 13
  %265 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 13, i32 0, i64 2
  %266 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 14
  %267 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 14, i32 0, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %264, i8 0, i64 32, i1 false)
  br i1 %36, label %268, label %361

268:                                              ; preds = %130
  %269 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %31, i64 0, i32 5
  %270 = load ptr, ptr %269, align 8, !tbaa !320
  %271 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 1, i32 5
  %272 = load ptr, ptr %271, align 8, !tbaa !39
  %273 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 8, i32 0, i64 1
  %274 = zext i32 %33 to i64
  %275 = load float, ptr %116, align 4, !tbaa !137
  %276 = load <2 x float>, ptr %273, align 4, !tbaa !137
  br label %314

277:                                              ; preds = %120, %277
  %278 = phi i64 [ 0, %120 ], [ %312, %277 ]
  %279 = phi float [ 0.000000e+00, %120 ], [ %310, %277 ]
  %280 = phi <2 x float> [ %119, %120 ], [ %304, %277 ]
  %281 = phi <2 x float> [ %125, %120 ], [ %301, %277 ]
  %282 = phi <2 x float> [ %128, %120 ], [ %305, %277 ]
  %283 = phi <2 x float> [ <float 0.000000e+00, float 0x3F33A92A20000000>, %120 ], [ %311, %277 ]
  %284 = getelementptr inbounds ptr, ptr %122, i64 %278
  %285 = load ptr, ptr %284, align 8, !tbaa !219
  %286 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %285, i64 0, i32 1
  %287 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %285, i64 0, i32 1, i32 0, i64 2
  %288 = load float, ptr %287, align 4, !tbaa !137
  %289 = fsub float %288, %114
  %290 = getelementptr inbounds %class.btVector3, ptr %124, i64 %278
  %291 = load float, ptr %290, align 4, !tbaa !137
  %292 = getelementptr inbounds [4 x float], ptr %290, i64 0, i64 1
  %293 = load <2 x float>, ptr %286, align 4, !tbaa !137
  %294 = fsub <2 x float> %293, %113
  %295 = load <2 x float>, ptr %292, align 4, !tbaa !137
  %296 = shufflevector <2 x float> %294, <2 x float> poison, <2 x i32> zeroinitializer
  %297 = fmul <2 x float> %296, %295
  %298 = insertelement <2 x float> poison, float %291, i64 0
  %299 = shufflevector <2 x float> %298, <2 x float> poison, <2 x i32> zeroinitializer
  %300 = fmul <2 x float> %294, %299
  %301 = fadd <2 x float> %297, %281
  %302 = shufflevector <2 x float> %294, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %303 = fmul <2 x float> %302, %295
  %304 = fadd <2 x float> %300, %280
  %305 = fadd <2 x float> %303, %282
  %306 = fmul float %289, %291
  %307 = insertelement <2 x float> poison, float %289, i64 0
  %308 = shufflevector <2 x float> %307, <2 x float> poison, <2 x i32> zeroinitializer
  %309 = fmul <2 x float> %308, %295
  %310 = fadd float %306, %279
  %311 = fadd <2 x float> %309, %283
  %312 = add nuw nsw i64 %278, 1
  %313 = icmp eq i64 %312, %127
  br i1 %313, label %129, label %277

314:                                              ; preds = %268, %314
  %315 = phi i64 [ 0, %268 ], [ %356, %314 ]
  %316 = phi float [ 0.000000e+00, %268 ], [ %355, %314 ]
  %317 = phi float [ 0.000000e+00, %268 ], [ %333, %314 ]
  %318 = phi <2 x float> [ zeroinitializer, %268 ], [ %332, %314 ]
  %319 = phi <2 x float> [ zeroinitializer, %268 ], [ %354, %314 ]
  %320 = getelementptr inbounds ptr, ptr %270, i64 %315
  %321 = load ptr, ptr %320, align 8, !tbaa !219
  %322 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %321, i64 0, i32 3
  %323 = getelementptr inbounds float, ptr %272, i64 %315
  %324 = load float, ptr %323, align 4, !tbaa !137
  %325 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %321, i64 0, i32 3, i32 0, i64 2
  %326 = load float, ptr %325, align 4, !tbaa !137
  %327 = fmul float %324, %326
  %328 = load <2 x float>, ptr %322, align 4, !tbaa !137
  %329 = insertelement <2 x float> poison, float %324, i64 0
  %330 = shufflevector <2 x float> %329, <2 x float> poison, <2 x i32> zeroinitializer
  %331 = fmul <2 x float> %330, %328
  %332 = fadd <2 x float> %331, %318
  store <2 x float> %332, ptr %264, align 4, !tbaa !137
  %333 = fadd float %327, %317
  store float %333, ptr %265, align 4, !tbaa !137
  %334 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %321, i64 0, i32 1
  %335 = load float, ptr %334, align 4, !tbaa !137
  %336 = fsub float %335, %275
  %337 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %321, i64 0, i32 1, i32 0, i64 1
  %338 = extractelement <2 x float> %331, i64 1
  %339 = extractelement <2 x float> %331, i64 0
  %340 = load <2 x float>, ptr %337, align 4, !tbaa !137
  %341 = fsub <2 x float> %340, %276
  %342 = shufflevector <2 x float> %341, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %343 = insertelement <2 x float> %342, float %336, i64 1
  %344 = fneg <2 x float> %343
  %345 = shufflevector <2 x float> %331, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %346 = insertelement <2 x float> %345, float %327, i64 1
  %347 = fmul <2 x float> %346, %344
  %348 = insertelement <2 x float> %345, float %327, i64 0
  %349 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %341, <2 x float> %348, <2 x float> %347)
  %350 = extractelement <2 x float> %341, i64 0
  %351 = fneg float %350
  %352 = fmul float %339, %351
  %353 = call float @llvm.fmuladd.f32(float %336, float %338, float %352)
  %354 = fadd <2 x float> %319, %349
  store <2 x float> %354, ptr %266, align 4, !tbaa !137
  %355 = fadd float %353, %316
  store float %355, ptr %267, align 4, !tbaa !137
  %356 = add nuw nsw i64 %315, 1
  %357 = icmp eq i64 %356, %274
  br i1 %357, label %358, label %314

358:                                              ; preds = %314
  %359 = extractelement <2 x float> %354, i64 1
  %360 = extractelement <2 x float> %354, i64 0
  br label %361

361:                                              ; preds = %358, %130
  %362 = phi float [ 0.000000e+00, %130 ], [ %355, %358 ]
  %363 = phi float [ 0.000000e+00, %130 ], [ %359, %358 ]
  %364 = phi float [ 0.000000e+00, %130 ], [ %360, %358 ]
  %365 = phi float [ 0.000000e+00, %130 ], [ %333, %358 ]
  %366 = phi <2 x float> [ zeroinitializer, %130 ], [ %332, %358 ]
  %367 = load float, ptr %109, align 4, !tbaa !137
  %368 = fmul float %367, %365
  %369 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 17
  %370 = load float, ptr %369, align 4, !tbaa !381
  %371 = fsub float 1.000000e+00, %370
  %372 = insertelement <2 x float> poison, float %367, i64 0
  %373 = shufflevector <2 x float> %372, <2 x float> poison, <2 x i32> zeroinitializer
  %374 = fmul <2 x float> %366, %373
  %375 = insertelement <2 x float> poison, float %371, i64 0
  %376 = shufflevector <2 x float> %375, <2 x float> poison, <2 x i32> zeroinitializer
  %377 = fmul <2 x float> %374, %376
  %378 = fmul float %368, %371
  %379 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %378, i64 0
  store <2 x float> %377, ptr %264, align 8, !tbaa.struct !162
  store <2 x float> %379, ptr %265, align 8, !tbaa.struct !164
  %380 = insertelement <2 x float> poison, float %363, i64 0
  %381 = shufflevector <2 x float> %380, <2 x float> poison, <2 x i32> zeroinitializer
  %382 = fmul <2 x float> %244, %381
  %383 = extractelement <2 x float> %256, i64 1
  %384 = fmul float %363, %383
  %385 = extractelement <2 x float> %256, i64 0
  %386 = call float @llvm.fmuladd.f32(float %385, float %364, float %384)
  %387 = call float @llvm.fmuladd.f32(float %199, float %362, float %386)
  %388 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 18
  %389 = load float, ptr %388, align 8, !tbaa !382
  %390 = fsub float 1.000000e+00, %389
  %391 = insertelement <2 x float> poison, float %364, i64 0
  %392 = shufflevector <2 x float> %391, <2 x float> poison, <2 x i32> zeroinitializer
  %393 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %238, <2 x float> %392, <2 x float> %382)
  %394 = insertelement <2 x float> poison, float %362, i64 0
  %395 = shufflevector <2 x float> %394, <2 x float> poison, <2 x i32> zeroinitializer
  %396 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %247, <2 x float> %395, <2 x float> %393)
  %397 = insertelement <2 x float> poison, float %390, i64 0
  %398 = shufflevector <2 x float> %397, <2 x float> poison, <2 x i32> zeroinitializer
  %399 = fmul <2 x float> %396, %398
  %400 = fmul float %390, %387
  %401 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %400, i64 0
  store <2 x float> %399, ptr %266, align 8, !tbaa.struct !162
  store <2 x float> %401, ptr %267, align 8, !tbaa.struct !164
  %402 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 9
  %403 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 19
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %402, i8 0, i64 72, i1 false)
  %404 = load float, ptr %403, align 4, !tbaa !383
  %405 = fcmp ogt float %404, 0.000000e+00
  br i1 %405, label %406, label %474

406:                                              ; preds = %361
  %407 = load i32, ptr %32, align 4, !tbaa !319
  %408 = icmp sgt i32 %407, 0
  br i1 %408, label %409, label %474

409:                                              ; preds = %406
  %410 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %31, i64 0, i32 5
  %411 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 2, i32 5
  %412 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 3, i32 1, i32 0, i64 2
  br label %413

413:                                              ; preds = %409, %413
  %414 = phi i64 [ 0, %409 ], [ %470, %413 ]
  %415 = load ptr, ptr %410, align 8, !tbaa !320
  %416 = getelementptr inbounds ptr, ptr %415, i64 %414
  %417 = load ptr, ptr %416, align 8, !tbaa !219
  %418 = load ptr, ptr %411, align 8, !tbaa !33
  %419 = getelementptr inbounds %class.btVector3, ptr %418, i64 %414
  %420 = load float, ptr %419, align 4, !tbaa !137
  %421 = getelementptr inbounds [4 x float], ptr %419, i64 0, i64 1
  %422 = load float, ptr %421, align 4, !tbaa !137
  %423 = getelementptr inbounds [4 x float], ptr %419, i64 0, i64 2
  %424 = load float, ptr %423, align 4, !tbaa !137
  %425 = load float, ptr %138, align 4, !tbaa !137
  %426 = load float, ptr %160, align 4, !tbaa !137
  %427 = fmul float %422, %426
  %428 = call float @llvm.fmuladd.f32(float %425, float %420, float %427)
  %429 = load float, ptr %164, align 4, !tbaa !137
  %430 = call float @llvm.fmuladd.f32(float %429, float %424, float %428)
  %431 = load float, ptr %412, align 4, !tbaa !137
  %432 = fadd float %431, %430
  %433 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %417, i64 0, i32 1
  %434 = load float, ptr %403, align 4, !tbaa !383
  %435 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %417, i64 0, i32 1, i32 0, i64 2
  %436 = load float, ptr %435, align 4, !tbaa !137
  %437 = fsub float %432, %436
  %438 = fmul float %434, %437
  %439 = load float, ptr %135, align 4, !tbaa !137
  %440 = load float, ptr %143, align 4, !tbaa !137
  %441 = load float, ptr %146, align 4, !tbaa !137
  %442 = load float, ptr %137, align 4, !tbaa !137
  %443 = load float, ptr %157, align 4, !tbaa !137
  %444 = insertelement <2 x float> poison, float %422, i64 0
  %445 = shufflevector <2 x float> %444, <2 x float> poison, <2 x i32> zeroinitializer
  %446 = insertelement <2 x float> poison, float %440, i64 0
  %447 = insertelement <2 x float> %446, float %443, i64 1
  %448 = fmul <2 x float> %445, %447
  %449 = insertelement <2 x float> poison, float %439, i64 0
  %450 = insertelement <2 x float> %449, float %442, i64 1
  %451 = insertelement <2 x float> poison, float %420, i64 0
  %452 = shufflevector <2 x float> %451, <2 x float> poison, <2 x i32> zeroinitializer
  %453 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %450, <2 x float> %452, <2 x float> %448)
  %454 = load float, ptr %158, align 4, !tbaa !137
  %455 = insertelement <2 x float> poison, float %441, i64 0
  %456 = insertelement <2 x float> %455, float %454, i64 1
  %457 = insertelement <2 x float> poison, float %424, i64 0
  %458 = shufflevector <2 x float> %457, <2 x float> poison, <2 x i32> zeroinitializer
  %459 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %456, <2 x float> %458, <2 x float> %453)
  %460 = load <2 x float>, ptr %136, align 4, !tbaa !137
  %461 = fadd <2 x float> %459, %460
  %462 = load <2 x float>, ptr %433, align 4, !tbaa !137
  %463 = fsub <2 x float> %461, %462
  %464 = insertelement <2 x float> poison, float %434, i64 0
  %465 = shufflevector <2 x float> %464, <2 x float> poison, <2 x i32> zeroinitializer
  %466 = fmul <2 x float> %465, %463
  %467 = fadd <2 x float> %462, %466
  %468 = fadd float %436, %438
  %469 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %468, i64 0
  store <2 x float> %467, ptr %433, align 8, !tbaa.struct !162
  store <2 x float> %469, ptr %435, align 8, !tbaa.struct !164
  %470 = add nuw nsw i64 %414, 1
  %471 = load i32, ptr %32, align 4, !tbaa !319
  %472 = sext i32 %471 to i64
  %473 = icmp slt i64 %470, %472
  br i1 %473, label %413, label %474

474:                                              ; preds = %413, %406, %361
  %475 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 23
  %476 = load i8, ptr %475, align 1, !tbaa !346, !range !191, !noundef !192
  %477 = icmp eq i8 %476, 0
  br i1 %477, label %563, label %478

478:                                              ; preds = %474
  %479 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %31, i64 0, i32 5
  %480 = load ptr, ptr %479, align 8, !tbaa !320
  %481 = load ptr, ptr %480, align 8, !tbaa !219
  %482 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %481, i64 0, i32 1
  %483 = load <4 x float>, ptr %482, align 8
  %484 = icmp sgt i32 %33, 1
  br i1 %484, label %485, label %533

485:                                              ; preds = %478
  %486 = zext i32 %33 to i64
  %487 = add nsw i64 %486, -1
  %488 = and i64 %487, 1
  %489 = icmp eq i32 %33, 2
  br i1 %489, label %517, label %490

490:                                              ; preds = %485
  %491 = and i64 %487, -2
  br label %492

492:                                              ; preds = %492, %490
  %493 = phi i64 [ 1, %490 ], [ %514, %492 ]
  %494 = phi <4 x float> [ %483, %490 ], [ %511, %492 ]
  %495 = phi <4 x float> [ %483, %490 ], [ %513, %492 ]
  %496 = phi i64 [ 0, %490 ], [ %515, %492 ]
  %497 = getelementptr inbounds ptr, ptr %480, i64 %493
  %498 = load ptr, ptr %497, align 8, !tbaa !219
  %499 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %498, i64 0, i32 1
  %500 = load <4 x float>, ptr %499, align 4, !tbaa !137
  %501 = fcmp olt <4 x float> %500, %494
  %502 = select <4 x i1> %501, <4 x float> %500, <4 x float> %494
  %503 = fcmp olt <4 x float> %495, %500
  %504 = select <4 x i1> %503, <4 x float> %500, <4 x float> %495
  %505 = add nuw nsw i64 %493, 1
  %506 = getelementptr inbounds ptr, ptr %480, i64 %505
  %507 = load ptr, ptr %506, align 8, !tbaa !219
  %508 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %507, i64 0, i32 1
  %509 = load <4 x float>, ptr %508, align 4, !tbaa !137
  %510 = fcmp olt <4 x float> %509, %502
  %511 = select <4 x i1> %510, <4 x float> %509, <4 x float> %502
  %512 = fcmp olt <4 x float> %504, %509
  %513 = select <4 x i1> %512, <4 x float> %509, <4 x float> %504
  %514 = add nuw nsw i64 %493, 2
  %515 = add i64 %496, 2
  %516 = icmp eq i64 %515, %491
  br i1 %516, label %517, label %492

517:                                              ; preds = %492, %485
  %518 = phi <4 x float> [ undef, %485 ], [ %511, %492 ]
  %519 = phi <4 x float> [ undef, %485 ], [ %513, %492 ]
  %520 = phi i64 [ 1, %485 ], [ %514, %492 ]
  %521 = phi <4 x float> [ %483, %485 ], [ %511, %492 ]
  %522 = phi <4 x float> [ %483, %485 ], [ %513, %492 ]
  %523 = icmp eq i64 %488, 0
  br i1 %523, label %533, label %524

524:                                              ; preds = %517
  %525 = getelementptr inbounds ptr, ptr %480, i64 %520
  %526 = load ptr, ptr %525, align 8, !tbaa !219
  %527 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %526, i64 0, i32 1
  %528 = load <4 x float>, ptr %527, align 4, !tbaa !137
  %529 = fcmp olt <4 x float> %528, %521
  %530 = select <4 x i1> %529, <4 x float> %528, <4 x float> %521
  %531 = fcmp olt <4 x float> %522, %528
  %532 = select <4 x i1> %531, <4 x float> %528, <4 x float> %522
  br label %533

533:                                              ; preds = %524, %517, %478
  %534 = phi <4 x float> [ %483, %478 ], [ %518, %517 ], [ %530, %524 ]
  %535 = phi <4 x float> [ %483, %478 ], [ %519, %517 ], [ %532, %524 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #38
  store <4 x float> %534, ptr %5, align 16
  store <4 x float> %535, ptr %21, align 16
  %536 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %31, i64 0, i32 15
  %537 = load ptr, ptr %536, align 8, !tbaa !221
  %538 = icmp eq ptr %537, null
  br i1 %538, label %557, label %539

539:                                              ; preds = %533
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6) #38
  %540 = load float, ptr %23, align 8, !tbaa !137
  %541 = load float, ptr %265, align 4, !tbaa !137
  %542 = fmul float %540, %541
  %543 = load <2 x float>, ptr %264, align 4, !tbaa !137
  %544 = insertelement <2 x float> poison, float %540, i64 0
  %545 = shufflevector <2 x float> %544, <2 x float> poison, <2 x i32> zeroinitializer
  %546 = fmul <2 x float> %545, %543
  %547 = fmul <2 x float> %546, <float 3.000000e+00, float 3.000000e+00>
  %548 = fmul float %542, 3.000000e+00
  %549 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %548, i64 0
  store <2 x float> %547, ptr %6, align 8
  store <2 x float> %549, ptr %24, align 8
  %550 = load float, ptr %25, align 4, !tbaa !384
  %551 = invoke noundef zeroext i1 @_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f(ptr noundef nonnull align 8 dereferenceable(64) %22, ptr noundef nonnull %537, ptr noundef nonnull align 4 dereferenceable(32) %5, ptr noundef nonnull align 4 dereferenceable(16) %6, float noundef %550)
          to label %552 unwind label %555

552:                                              ; preds = %539
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #38
  br label %560

553:                                              ; preds = %557
  %554 = landingpad { ptr, i32 }
          cleanup
  br label %561

555:                                              ; preds = %539
  %556 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #38
  br label %561

557:                                              ; preds = %533
  %558 = invoke noundef ptr @_ZN6btDbvt6insertERK12btDbvtAabbMmPv(ptr noundef nonnull align 8 dereferenceable(64) %22, ptr noundef nonnull align 4 dereferenceable(32) %5, ptr noundef nonnull %31)
          to label %559 unwind label %553

559:                                              ; preds = %557
  store ptr %558, ptr %536, align 8, !tbaa !221
  br label %560

560:                                              ; preds = %559, %552
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #38
  br label %563

561:                                              ; preds = %555, %553
  %562 = phi { ptr, i32 } [ %556, %555 ], [ %554, %553 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %4) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %2) #38
  invoke void @_ZN15CProfileManager12Stop_ProfileEv()
          to label %571 unwind label %572

563:                                              ; preds = %560, %474
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %4) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %2) #38
  %564 = load i32, ptr %7, align 4, !tbaa !124
  br label %565

565:                                              ; preds = %563, %26
  %566 = phi i32 [ %564, %563 ], [ %27, %26 ]
  %567 = add nuw nsw i64 %28, 1
  %568 = sext i32 %566 to i64
  %569 = icmp slt i64 %567, %568
  br i1 %569, label %26, label %570

570:                                              ; preds = %565, %1
  call void @_ZN15CProfileManager12Stop_ProfileEv()
  ret void

571:                                              ; preds = %561
  resume { ptr, i32 } %562

572:                                              ; preds = %561
  %573 = landingpad { ptr, i32 }
          catch ptr null
  %574 = extractvalue { ptr, i32 } %573, 0
  call void @__clang_call_terminate(ptr %574) #39
  unreachable
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, float noundef %2, i1 noundef zeroext %3) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %5 = alloca <{ [2 x ptr], float, i8, [3 x i8], float, float, float, %class.btVector3, [4 x i8] }>, align 8
  %6 = alloca %"struct.btSoftBody::Link", align 8
  %7 = alloca { [3 x ptr], %class.btVector3, float, ptr }, align 8
  %8 = alloca %class.btVector3, align 8
  %9 = alloca %"struct.btSoftBody::Link", align 8
  %10 = alloca %struct.btSymMatrix, align 8
  %11 = alloca i32, align 4
  %12 = alloca %class.btVector3, align 8
  %13 = alloca [3 x i32], align 4
  %14 = alloca %class.btVector3, align 4
  %15 = alloca [4 x float], align 4
  %16 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %17 = load ptr, ptr %16, align 8, !tbaa !87
  %18 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %19 = load i32, ptr %18, align 4, !tbaa !88
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %10) #38
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #38
  store i32 -2, ptr %11, align 4, !tbaa !140
  call void @_ZN11btSymMatrixIiEC2EiRKi(ptr noundef nonnull align 8 dereferenceable(36) %10, i32 noundef %19, ptr noundef nonnull align 4 dereferenceable(4) %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #38
  %20 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %21 = load i32, ptr %20, align 4, !tbaa !92
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %80

23:                                               ; preds = %4
  %24 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  br label %33

25:                                               ; preds = %75
  %26 = icmp sgt i32 %76, 0
  br i1 %26, label %27, label %80

27:                                               ; preds = %25
  %28 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %29 = load ptr, ptr %28, align 8, !tbaa !91
  %30 = ptrtoint ptr %17 to i64
  %31 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 5
  %32 = load ptr, ptr %31, align 8, !tbaa !131
  br label %90

33:                                               ; preds = %23, %75
  %34 = phi i32 [ %21, %23 ], [ %76, %75 ]
  %35 = phi i32 [ 0, %23 ], [ %78, %75 ]
  %36 = load ptr, ptr %24, align 8, !tbaa !91
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %36, i64 %37, i32 3
  %39 = load i8, ptr %38, align 4
  %40 = and i8 %39, 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %75, label %42

42:                                               ; preds = %33
  %43 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %36, i64 %37, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !219
  %45 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %1, align 8, !tbaa !5
  %47 = load ptr, ptr %46, align 8
  %48 = invoke noundef float %47(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %45)
          to label %49 unwind label %71

49:                                               ; preds = %42
  %50 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %36, i64 %37, i32 1, i64 1
  %51 = load ptr, ptr %50, align 8, !tbaa !219
  %52 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %1, align 8, !tbaa !5
  %54 = load ptr, ptr %53, align 8
  %55 = invoke noundef float %54(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %52)
          to label %56 unwind label %73

56:                                               ; preds = %49
  %57 = fmul float %48, %55
  %58 = fcmp ogt float %57, 0.000000e+00
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = load i32, ptr %20, align 4, !tbaa !92
  br label %75

61:                                               ; preds = %56
  %62 = load ptr, ptr %24, align 8, !tbaa !91
  %63 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %62, i64 %37
  %64 = load i32, ptr %20, align 4, !tbaa !92
  %65 = add nsw i32 %64, -1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %62, i64 %66
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %9, ptr noundef nonnull align 8 dereferenceable(72) %63, i64 72, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(68) %63, ptr noundef nonnull align 8 dereferenceable(68) %67, i64 68, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(68) %67, ptr noundef nonnull align 8 dereferenceable(68) %9, i64 68, i1 false)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %9)
  %68 = load i32, ptr %20, align 4, !tbaa !92
  %69 = add nsw i32 %68, -1
  store i32 %69, ptr %20, align 4, !tbaa !92
  %70 = add nsw i32 %35, -1
  br label %75

71:                                               ; preds = %42
  %72 = landingpad { ptr, i32 }
          cleanup
  br label %1142

73:                                               ; preds = %49
  %74 = landingpad { ptr, i32 }
          cleanup
  br label %1142

75:                                               ; preds = %59, %61, %33
  %76 = phi i32 [ %69, %61 ], [ %60, %59 ], [ %34, %33 ]
  %77 = phi i32 [ %70, %61 ], [ %35, %59 ], [ %35, %33 ]
  %78 = add nsw i32 %77, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %33, label %25

80:                                               ; preds = %90, %4, %25
  %81 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %82 = load i32, ptr %81, align 4, !tbaa !96
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %116

84:                                               ; preds = %80
  %85 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %86 = load ptr, ptr %85, align 8, !tbaa !95
  %87 = ptrtoint ptr %17 to i64
  %88 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 5
  %89 = load ptr, ptr %88, align 8, !tbaa !131
  br label %125

90:                                               ; preds = %27, %90
  %91 = phi i64 [ 0, %27 ], [ %112, %90 ]
  %92 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %29, i64 %91, i32 1
  %93 = load ptr, ptr %92, align 8, !tbaa !219
  %94 = ptrtoint ptr %93 to i64
  %95 = sub i64 %94, %30
  %96 = sdiv exact i64 %95, 120
  %97 = trunc i64 %96 to i32
  %98 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %29, i64 %91, i32 1, i64 1
  %99 = load ptr, ptr %98, align 8, !tbaa !219
  %100 = ptrtoint ptr %99 to i64
  %101 = sub i64 %100, %30
  %102 = sdiv exact i64 %101, 120
  %103 = trunc i64 %102 to i32
  %104 = call i32 @llvm.smin.i32(i32 %97, i32 %103)
  %105 = call i32 @llvm.smax.i32(i32 %97, i32 %103)
  %106 = add nsw i32 %105, 1
  %107 = mul nsw i32 %106, %105
  %108 = sdiv i32 %107, 2
  %109 = add nsw i32 %108, %104
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, ptr %32, i64 %110
  store i32 -1, ptr %111, align 4, !tbaa !140
  %112 = add nuw nsw i64 %91, 1
  %113 = load i32, ptr %20, align 4, !tbaa !92
  %114 = sext i32 %113 to i64
  %115 = icmp slt i64 %112, %114
  br i1 %115, label %90, label %80

116:                                              ; preds = %125, %80
  %117 = icmp sgt i32 %19, 0
  br i1 %117, label %118, label %344

118:                                              ; preds = %116
  %119 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 5
  %120 = fneg float %2
  %121 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %8, i64 0, i32 1
  %122 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %12, i64 0, i32 1
  %123 = zext i32 %19 to i64
  %124 = zext i32 %19 to i64
  br label %176

125:                                              ; preds = %84, %125
  %126 = phi i64 [ 0, %84 ], [ %169, %125 ]
  %127 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %86, i64 %126, i32 1
  %128 = load ptr, ptr %127, align 8, !tbaa !219
  %129 = ptrtoint ptr %128 to i64
  %130 = sub i64 %129, %87
  %131 = sdiv exact i64 %130, 120
  %132 = trunc i64 %131 to i32
  %133 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %86, i64 %126, i32 1, i64 1
  %134 = load ptr, ptr %133, align 8, !tbaa !219
  %135 = ptrtoint ptr %134 to i64
  %136 = sub i64 %135, %87
  %137 = sdiv exact i64 %136, 120
  %138 = trunc i64 %137 to i32
  %139 = call i32 @llvm.smin.i32(i32 %132, i32 %138)
  %140 = call i32 @llvm.smax.i32(i32 %132, i32 %138)
  %141 = add nsw i32 %140, 1
  %142 = mul nsw i32 %141, %140
  %143 = sdiv i32 %142, 2
  %144 = add nsw i32 %143, %139
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i32, ptr %89, i64 %145
  store i32 -1, ptr %146, align 4, !tbaa !140
  %147 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %86, i64 %126, i32 1, i64 2
  %148 = load ptr, ptr %147, align 8, !tbaa !219
  %149 = ptrtoint ptr %148 to i64
  %150 = sub i64 %149, %87
  %151 = sdiv exact i64 %150, 120
  %152 = trunc i64 %151 to i32
  %153 = call i32 @llvm.smin.i32(i32 %138, i32 %152)
  %154 = call i32 @llvm.smax.i32(i32 %138, i32 %152)
  %155 = add nsw i32 %154, 1
  %156 = mul nsw i32 %155, %154
  %157 = sdiv i32 %156, 2
  %158 = add nsw i32 %157, %153
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i32, ptr %89, i64 %159
  store i32 -1, ptr %160, align 4, !tbaa !140
  %161 = call i32 @llvm.smin.i32(i32 %152, i32 %132)
  %162 = call i32 @llvm.smax.i32(i32 %152, i32 %132)
  %163 = add nsw i32 %162, 1
  %164 = mul nsw i32 %163, %162
  %165 = sdiv i32 %164, 2
  %166 = add nsw i32 %165, %161
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32, ptr %89, i64 %167
  store i32 -1, ptr %168, align 4, !tbaa !140
  %169 = add nuw nsw i64 %126, 1
  %170 = load i32, ptr %81, align 4, !tbaa !96
  %171 = sext i32 %170 to i64
  %172 = icmp slt i64 %169, %171
  br i1 %172, label %125, label %116

173:                                              ; preds = %341, %176
  %174 = add nuw nsw i64 %178, 1
  %175 = icmp eq i64 %179, %124
  br i1 %175, label %344, label %176

176:                                              ; preds = %118, %173
  %177 = phi i64 [ 0, %118 ], [ %179, %173 ]
  %178 = phi i64 [ 1, %118 ], [ %174, %173 ]
  %179 = add nuw nsw i64 %177, 1
  %180 = icmp ult i64 %179, %123
  br i1 %180, label %181, label %173

181:                                              ; preds = %176
  %182 = trunc i64 %177 to i32
  br label %183

183:                                              ; preds = %181, %341
  %184 = phi i64 [ %178, %181 ], [ %342, %341 ]
  %185 = trunc i64 %184 to i32
  %186 = call i32 @llvm.smin.i32(i32 %182, i32 %185)
  %187 = call i32 @llvm.smax.i32(i32 %182, i32 %185)
  %188 = add nuw nsw i32 %187, 1
  %189 = mul nsw i32 %188, %187
  %190 = lshr i32 %189, 1
  %191 = add nuw nsw i32 %190, %186
  %192 = load ptr, ptr %119, align 8, !tbaa !131
  %193 = zext i32 %191 to i64
  %194 = getelementptr inbounds i32, ptr %192, i64 %193
  %195 = load i32, ptr %194, align 4, !tbaa !140
  %196 = icmp eq i32 %195, -1
  br i1 %196, label %197, label %341

197:                                              ; preds = %183
  %198 = load ptr, ptr %16, align 8, !tbaa !87
  %199 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %198, i64 %177, i32 1
  %200 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %198, i64 %184, i32 1
  %201 = load ptr, ptr %1, align 8, !tbaa !5
  %202 = load ptr, ptr %201, align 8
  %203 = invoke noundef float %202(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %199)
          to label %204 unwind label %319

204:                                              ; preds = %197
  %205 = load ptr, ptr %1, align 8, !tbaa !5
  %206 = load ptr, ptr %205, align 8
  %207 = invoke noundef float %206(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %200)
          to label %208 unwind label %319

208:                                              ; preds = %204
  %209 = fcmp ogt float %203, %207
  br i1 %209, label %210, label %211

210:                                              ; preds = %208
  br label %211

211:                                              ; preds = %210, %208
  %212 = phi float [ 0.000000e+00, %210 ], [ 1.000000e+00, %208 ]
  %213 = phi float [ 1.000000e+00, %210 ], [ 0.000000e+00, %208 ]
  %214 = phi float [ %203, %210 ], [ %207, %208 ]
  %215 = phi float [ %207, %210 ], [ %203, %208 ]
  %216 = fcmp ogt float %215, %120
  %217 = fcmp olt float %214, %2
  %218 = or i1 %217, %216
  br i1 %218, label %341, label %219

219:                                              ; preds = %211
  %220 = getelementptr inbounds [4 x float], ptr %200, i64 0, i64 2
  %221 = getelementptr inbounds [4 x float], ptr %199, i64 0, i64 2
  br label %222

222:                                              ; preds = %258, %219
  %223 = phi i32 [ 0, %219 ], [ %263, %258 ]
  %224 = phi float [ %215, %219 ], [ %262, %258 ]
  %225 = phi float [ %214, %219 ], [ %261, %258 ]
  %226 = phi float [ %213, %219 ], [ %260, %258 ]
  %227 = phi float [ %212, %219 ], [ %259, %258 ]
  %228 = fsub float %224, %225
  %229 = fdiv float %224, %228
  %230 = fsub float %227, %226
  %231 = call float @llvm.fmuladd.f32(float %230, float %229, float %226)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #38
  %232 = load float, ptr %220, align 4, !tbaa !137
  %233 = load float, ptr %221, align 4, !tbaa !137
  %234 = fsub float %232, %233
  %235 = fmul float %231, %234
  %236 = load <2 x float>, ptr %200, align 4, !tbaa !137
  %237 = load <2 x float>, ptr %199, align 4, !tbaa !137
  %238 = fsub <2 x float> %236, %237
  %239 = insertelement <2 x float> poison, float %231, i64 0
  %240 = shufflevector <2 x float> %239, <2 x float> poison, <2 x i32> zeroinitializer
  %241 = fmul <2 x float> %240, %238
  %242 = fadd <2 x float> %237, %241
  %243 = fadd float %233, %235
  %244 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %243, i64 0
  store <2 x float> %242, ptr %8, align 8
  store <2 x float> %244, ptr %121, align 8
  %245 = load ptr, ptr %1, align 8, !tbaa !5
  %246 = load ptr, ptr %245, align 8
  %247 = invoke noundef float %246(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %8)
          to label %248 unwind label %317

248:                                              ; preds = %222
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #38
  %249 = fcmp ole float %231, 0.000000e+00
  %250 = fcmp oge float %231, 1.000000e+00
  %251 = or i1 %249, %250
  br i1 %251, label %341, label %252

252:                                              ; preds = %248
  %253 = call float @llvm.fabs.f32(float %247)
  %254 = fcmp olt float %253, %2
  br i1 %254, label %265, label %255

255:                                              ; preds = %252
  %256 = fcmp olt float %247, 0.000000e+00
  br i1 %256, label %258, label %257

257:                                              ; preds = %255
  br label %258

258:                                              ; preds = %257, %255
  %259 = phi float [ %227, %255 ], [ %231, %257 ]
  %260 = phi float [ %231, %255 ], [ %226, %257 ]
  %261 = phi float [ %225, %255 ], [ %247, %257 ]
  %262 = phi float [ %247, %255 ], [ %224, %257 ]
  %263 = add nuw nsw i32 %223, 1
  %264 = icmp eq i32 %263, 256
  br i1 %264, label %341, label %222

265:                                              ; preds = %252
  %266 = fcmp ogt float %231, 0.000000e+00
  br i1 %266, label %267, label %341

267:                                              ; preds = %265
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12) #38
  %268 = load float, ptr %220, align 4, !tbaa !137
  %269 = load float, ptr %221, align 4, !tbaa !137
  %270 = fsub float %268, %269
  %271 = fmul float %231, %270
  %272 = load <2 x float>, ptr %200, align 4, !tbaa !137
  %273 = load <2 x float>, ptr %199, align 4, !tbaa !137
  %274 = fsub <2 x float> %272, %273
  %275 = fmul <2 x float> %240, %274
  %276 = fadd <2 x float> %273, %275
  %277 = fadd float %269, %271
  %278 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %277, i64 0
  store <2 x float> %276, ptr %12, align 8
  store <2 x float> %278, ptr %122, align 8
  %279 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %198, i64 %177, i32 3
  %280 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %198, i64 %184, i32 3
  %281 = getelementptr inbounds [4 x float], ptr %280, i64 0, i64 2
  %282 = load float, ptr %281, align 4, !tbaa !137
  %283 = getelementptr inbounds [4 x float], ptr %279, i64 0, i64 2
  %284 = load float, ptr %283, align 4, !tbaa !137
  %285 = fsub float %282, %284
  %286 = fmul float %231, %285
  %287 = load <2 x float>, ptr %280, align 4, !tbaa !137
  %288 = load <2 x float>, ptr %279, align 4, !tbaa !137
  %289 = fsub <2 x float> %287, %288
  %290 = fmul <2 x float> %240, %289
  %291 = fadd <2 x float> %288, %290
  %292 = fadd float %284, %286
  %293 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %292, i64 0
  %294 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %198, i64 %177, i32 6
  %295 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %198, i64 %184, i32 6
  %296 = load float, ptr %294, align 8, !tbaa !174
  %297 = fcmp ogt float %296, 0.000000e+00
  %298 = load float, ptr %295, align 8, !tbaa !174
  %299 = fcmp ogt float %298, 0.000000e+00
  br i1 %297, label %300, label %324

300:                                              ; preds = %267
  br i1 %299, label %301, label %321

301:                                              ; preds = %300
  %302 = insertelement <2 x float> poison, float %298, i64 0
  %303 = insertelement <2 x float> %302, float %296, i64 1
  %304 = fdiv <2 x float> <float 1.000000e+00, float 1.000000e+00>, %303
  %305 = extractelement <2 x float> %304, i64 0
  %306 = extractelement <2 x float> %304, i64 1
  %307 = fsub float %305, %306
  %308 = call float @llvm.fmuladd.f32(float %307, float %231, float %306)
  %309 = fadd float %306, %305
  %310 = fadd float %309, %308
  %311 = fdiv float %309, %310
  %312 = fmul float %306, %311
  %313 = fdiv float 1.000000e+00, %312
  store float %313, ptr %294, align 8, !tbaa !174
  %314 = fmul float %305, %311
  %315 = fdiv float 1.000000e+00, %314
  store float %315, ptr %295, align 8, !tbaa !174
  %316 = fmul float %308, %311
  br label %328

317:                                              ; preds = %222
  %318 = landingpad { ptr, i32 }
          cleanup
  br label %1142

319:                                              ; preds = %197, %204
  %320 = landingpad { ptr, i32 }
          cleanup
  br label %1142

321:                                              ; preds = %300
  %322 = fmul float %296, 2.000000e+00
  store float %322, ptr %294, align 8, !tbaa !174
  %323 = fdiv float 1.000000e+00, %322
  br label %328

324:                                              ; preds = %267
  br i1 %299, label %325, label %328

325:                                              ; preds = %324
  %326 = fmul float %298, 2.000000e+00
  store float %326, ptr %295, align 8, !tbaa !174
  %327 = fdiv float 1.000000e+00, %326
  br label %328

328:                                              ; preds = %324, %325, %301, %321
  %329 = phi float [ %316, %301 ], [ %323, %321 ], [ %327, %325 ], [ 0.000000e+00, %324 ]
  invoke void @_ZN10btSoftBody10appendNodeERK9btVector3f(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %12, float noundef %329)
          to label %330 unwind label %339

330:                                              ; preds = %328
  %331 = load i32, ptr %18, align 4, !tbaa !88
  %332 = load ptr, ptr %119, align 8, !tbaa !131
  %333 = getelementptr inbounds i32, ptr %332, i64 %193
  %334 = add nsw i32 %331, -1
  store i32 %334, ptr %333, align 4, !tbaa !140
  %335 = load ptr, ptr %16, align 8, !tbaa !87
  %336 = sext i32 %334 to i64
  %337 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %335, i64 %336, i32 3
  store <2 x float> %291, ptr %337, align 8, !tbaa.struct !162
  %338 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %335, i64 %336, i32 3, i32 0, i64 2
  store <2 x float> %293, ptr %338, align 8, !tbaa.struct !164
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12) #38
  br label %341

339:                                              ; preds = %328
  %340 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12) #38
  br label %1142

341:                                              ; preds = %258, %248, %211, %265, %330, %183
  %342 = add nuw nsw i64 %184, 1
  %343 = icmp eq i64 %342, %124
  br i1 %343, label %173, label %183

344:                                              ; preds = %173, %116
  %345 = load ptr, ptr %16, align 8, !tbaa !87
  %346 = load i32, ptr %20, align 4, !tbaa !92
  %347 = icmp sgt i32 %346, 0
  br i1 %347, label %348, label %353

348:                                              ; preds = %344
  %349 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %350 = ptrtoint ptr %345 to i64
  %351 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 5
  %352 = zext i32 %346 to i64
  br label %369

353:                                              ; preds = %425, %344
  %354 = load i32, ptr %81, align 4, !tbaa !96
  %355 = icmp sgt i32 %354, 0
  br i1 %355, label %356, label %741

356:                                              ; preds = %353
  %357 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %358 = ptrtoint ptr %345 to i64
  %359 = getelementptr inbounds i32, ptr %13, i64 1
  %360 = getelementptr inbounds i32, ptr %13, i64 2
  %361 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 5
  %362 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %363 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 3
  %364 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 6
  %365 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 3
  %366 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %367 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 6
  %368 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  br label %428

369:                                              ; preds = %348, %425
  %370 = phi i64 [ 0, %348 ], [ %426, %425 ]
  %371 = load ptr, ptr %349, align 8, !tbaa !91
  %372 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %371, i64 %370, i32 1
  %373 = load ptr, ptr %372, align 8, !tbaa !219
  %374 = ptrtoint ptr %373 to i64
  %375 = sub i64 %374, %350
  %376 = sdiv exact i64 %375, 120
  %377 = trunc i64 %376 to i32
  %378 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %371, i64 %370, i32 1, i64 1
  %379 = load ptr, ptr %378, align 8, !tbaa !219
  %380 = ptrtoint ptr %379 to i64
  %381 = sub i64 %380, %350
  %382 = sdiv exact i64 %381, 120
  %383 = trunc i64 %382 to i32
  %384 = icmp sgt i32 %19, %377
  %385 = icmp sgt i32 %19, %383
  %386 = select i1 %384, i1 %385, i1 false
  br i1 %386, label %387, label %425

387:                                              ; preds = %369
  %388 = call i32 @llvm.smin.i32(i32 %377, i32 %383)
  %389 = call i32 @llvm.smax.i32(i32 %377, i32 %383)
  %390 = add nsw i32 %389, 1
  %391 = mul nsw i32 %390, %389
  %392 = sdiv i32 %391, 2
  %393 = add nsw i32 %392, %388
  %394 = load ptr, ptr %351, align 8, !tbaa !131
  %395 = sext i32 %393 to i64
  %396 = getelementptr inbounds i32, ptr %394, i64 %395
  %397 = load i32, ptr %396, align 4, !tbaa !140
  %398 = icmp sgt i32 %397, 0
  br i1 %398, label %399, label %425

399:                                              ; preds = %387
  %400 = trunc i64 %370 to i32
  invoke void @_ZN10btSoftBody10appendLinkEiPNS_8MaterialE(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %400, ptr noundef null)
          to label %401 unwind label %423

401:                                              ; preds = %399
  %402 = load ptr, ptr %349, align 8, !tbaa !91
  %403 = load i32, ptr %20, align 4, !tbaa !92
  %404 = add nsw i32 %403, -1
  %405 = sext i32 %404 to i64
  %406 = load ptr, ptr %16, align 8, !tbaa !87
  %407 = shl i64 %376, 32
  %408 = ashr exact i64 %407, 32
  %409 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %406, i64 %408
  %410 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %402, i64 %370, i32 1
  store ptr %409, ptr %410, align 8, !tbaa !219
  %411 = load ptr, ptr %16, align 8, !tbaa !87
  %412 = zext i32 %397 to i64
  %413 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %411, i64 %412
  %414 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %402, i64 %370, i32 1, i64 1
  store ptr %413, ptr %414, align 8, !tbaa !219
  %415 = load ptr, ptr %16, align 8, !tbaa !87
  %416 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %415, i64 %412
  %417 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %402, i64 %405, i32 1
  store ptr %416, ptr %417, align 8, !tbaa !219
  %418 = load ptr, ptr %16, align 8, !tbaa !87
  %419 = shl i64 %382, 32
  %420 = ashr exact i64 %419, 32
  %421 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %418, i64 %420
  %422 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %402, i64 %405, i32 1, i64 1
  store ptr %421, ptr %422, align 8, !tbaa !219
  br label %425

423:                                              ; preds = %399
  %424 = landingpad { ptr, i32 }
          cleanup
  br label %1142

425:                                              ; preds = %387, %401, %369
  %426 = add nuw nsw i64 %370, 1
  %427 = icmp eq i64 %426, %352
  br i1 %427, label %353, label %369

428:                                              ; preds = %356, %736
  %429 = phi i32 [ %354, %356 ], [ %737, %736 ]
  %430 = phi i32 [ 0, %356 ], [ %739, %736 ]
  %431 = load ptr, ptr %357, align 8, !tbaa !95
  %432 = sext i32 %430 to i64
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %13) #38
  %433 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %431, i64 %432, i32 1
  %434 = load ptr, ptr %433, align 8, !tbaa !219
  %435 = ptrtoint ptr %434 to i64
  %436 = sub i64 %435, %358
  %437 = sdiv exact i64 %436, 120
  %438 = trunc i64 %437 to i32
  store i32 %438, ptr %13, align 4, !tbaa !140
  %439 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %431, i64 %432, i32 1, i64 1
  %440 = load ptr, ptr %439, align 8, !tbaa !219
  %441 = ptrtoint ptr %440 to i64
  %442 = sub i64 %441, %358
  %443 = sdiv exact i64 %442, 120
  %444 = trunc i64 %443 to i32
  store i32 %444, ptr %359, align 4, !tbaa !140
  %445 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %431, i64 %432, i32 1, i64 2
  %446 = load ptr, ptr %445, align 8, !tbaa !219
  %447 = ptrtoint ptr %446 to i64
  %448 = sub i64 %447, %358
  %449 = sdiv exact i64 %448, 120
  %450 = trunc i64 %449 to i32
  store i32 %450, ptr %360, align 4, !tbaa !140
  %451 = load ptr, ptr %361, align 8
  %452 = icmp sgt i32 %19, %450
  %453 = icmp sgt i32 %19, %438
  %454 = select i1 %452, i1 %453, i1 false
  br i1 %454, label %455, label %707

455:                                              ; preds = %428
  %456 = call i32 @llvm.smin.i32(i32 %450, i32 %438)
  %457 = call i32 @llvm.smax.i32(i32 %450, i32 %438)
  %458 = add nsw i32 %457, 1
  %459 = mul nsw i32 %458, %457
  %460 = sdiv i32 %459, 2
  %461 = add nsw i32 %460, %456
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds i32, ptr %451, i64 %462
  %464 = load i32, ptr %463, align 4, !tbaa !140
  %465 = icmp sgt i32 %464, 0
  br i1 %465, label %466, label %707

466:                                              ; preds = %725, %711, %455
  %467 = phi i64 [ 2, %455 ], [ 0, %711 ], [ 1, %725 ]
  %468 = phi i32 [ 0, %455 ], [ 1, %711 ], [ 2, %725 ]
  %469 = phi i32 [ %464, %455 ], [ %720, %711 ], [ %734, %725 ]
  %470 = getelementptr inbounds [3 x i32], ptr %13, i64 0, i64 %467
  %471 = zext i32 %468 to i64
  %472 = getelementptr inbounds [3 x i32], ptr %13, i64 0, i64 %471
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %7)
  %473 = icmp sgt i32 %430, -1
  br i1 %473, label %474, label %479

474:                                              ; preds = %466
  %475 = zext i32 %430 to i64
  %476 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %431, i64 %475
  %477 = load <2 x ptr>, ptr %476, align 8
  %478 = getelementptr inbounds i8, ptr %476, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %7, ptr noundef nonnull align 8 dereferenceable(56) %478, i64 56, i1 false)
  br label %494

479:                                              ; preds = %466
  %480 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy acquire, align 8
  %481 = icmp eq i8 %480, 0
  br i1 %481, label %482, label %487, !prof !172

482:                                              ; preds = %479
  %483 = call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy) #38
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %487, label %485

485:                                              ; preds = %482
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy, align 8, !tbaa !173
  %486 = call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
  call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy) #38
  br label %487

487:                                              ; preds = %485, %482, %479
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %7, ptr noundef nonnull align 8 dereferenceable(56) getelementptr inbounds (%"struct.btSoftBody::Face", ptr @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 56, i1 false)
  %488 = load ptr, ptr %362, align 8, !tbaa !119
  %489 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy, align 8
  %490 = load ptr, ptr %488, align 8, !tbaa !219
  %491 = load i32, ptr %81, align 4, !tbaa !96
  %492 = insertelement <2 x ptr> poison, ptr %489, i64 0
  %493 = insertelement <2 x ptr> %492, ptr %490, i64 1
  br label %494

494:                                              ; preds = %487, %474
  %495 = phi i32 [ %429, %474 ], [ %491, %487 ]
  %496 = phi <2 x ptr> [ %477, %474 ], [ %493, %487 ]
  %497 = load i32, ptr %363, align 8, !tbaa !97
  %498 = icmp eq i32 %495, %497
  br i1 %498, label %499, label %551

499:                                              ; preds = %494
  %500 = icmp eq i32 %495, 0
  %501 = shl nsw i32 %495, 1
  %502 = select i1 %500, i32 1, i32 %501
  %503 = icmp slt i32 %495, %502
  br i1 %503, label %504, label %551

504:                                              ; preds = %499
  %505 = icmp eq i32 %502, 0
  br i1 %505, label %512, label %506

506:                                              ; preds = %504
  %507 = sext i32 %502 to i64
  %508 = mul nsw i64 %507, 72
  %509 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %508, i32 noundef 16)
          to label %510 unwind label %666

510:                                              ; preds = %506
  %511 = load i32, ptr %81, align 4, !tbaa !96
  br label %512

512:                                              ; preds = %510, %504
  %513 = phi i32 [ %511, %510 ], [ %495, %504 ]
  %514 = phi ptr [ %509, %510 ], [ null, %504 ]
  %515 = icmp sgt i32 %513, 0
  br i1 %515, label %516, label %542

516:                                              ; preds = %512
  %517 = zext i32 %513 to i64
  %518 = and i64 %517, 1
  %519 = icmp eq i32 %513, 1
  br i1 %519, label %535, label %520

520:                                              ; preds = %516
  %521 = and i64 %517, 4294967294
  br label %522

522:                                              ; preds = %522, %520
  %523 = phi i64 [ 0, %520 ], [ %532, %522 ]
  %524 = phi i64 [ 0, %520 ], [ %533, %522 ]
  %525 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %514, i64 %523
  %526 = load ptr, ptr %357, align 8, !tbaa !95
  %527 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %526, i64 %523
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %525, ptr noundef nonnull align 8 dereferenceable(72) %527, i64 72, i1 false)
  %528 = or i64 %523, 1
  %529 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %514, i64 %528
  %530 = load ptr, ptr %357, align 8, !tbaa !95
  %531 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %530, i64 %528
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %529, ptr noundef nonnull align 8 dereferenceable(72) %531, i64 72, i1 false)
  %532 = add nuw nsw i64 %523, 2
  %533 = add i64 %524, 2
  %534 = icmp eq i64 %533, %521
  br i1 %534, label %535, label %522

535:                                              ; preds = %522, %516
  %536 = phi i64 [ 0, %516 ], [ %532, %522 ]
  %537 = icmp eq i64 %518, 0
  br i1 %537, label %542, label %538

538:                                              ; preds = %535
  %539 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %514, i64 %536
  %540 = load ptr, ptr %357, align 8, !tbaa !95
  %541 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %540, i64 %536
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %539, ptr noundef nonnull align 8 dereferenceable(72) %541, i64 72, i1 false)
  br label %542

542:                                              ; preds = %538, %535, %512
  %543 = load ptr, ptr %357, align 8, !tbaa !95
  %544 = icmp eq ptr %543, null
  %545 = load i8, ptr %364, align 8
  %546 = icmp eq i8 %545, 0
  %547 = select i1 %544, i1 true, i1 %546
  br i1 %547, label %549, label %548

548:                                              ; preds = %542
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %543)
          to label %549 unwind label %666

549:                                              ; preds = %548, %542
  store i8 1, ptr %364, align 8, !tbaa !94
  store ptr %514, ptr %357, align 8, !tbaa !95
  store i32 %502, ptr %363, align 8, !tbaa !97
  %550 = load i32, ptr %81, align 4, !tbaa !96
  br label %551

551:                                              ; preds = %549, %499, %494
  %552 = phi i32 [ %550, %549 ], [ %495, %499 ], [ %495, %494 ]
  %553 = load ptr, ptr %357, align 8, !tbaa !95
  %554 = sext i32 %552 to i64
  %555 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %553, i64 %554
  store <2 x ptr> %496, ptr %555, align 8
  %556 = getelementptr inbounds i8, ptr %555, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %556, ptr noundef nonnull align 8 dereferenceable(56) %7, i64 56, i1 false)
  %557 = load i32, ptr %81, align 4, !tbaa !96
  %558 = add nsw i32 %557, 1
  store i32 %558, ptr %81, align 4, !tbaa !96
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %7)
  %559 = add nuw nsw i32 %468, 1
  %560 = icmp eq i32 %559, 3
  %561 = select i1 %560, i32 0, i32 %559
  %562 = load ptr, ptr %357, align 8, !tbaa !95
  %563 = sext i32 %557 to i64
  %564 = zext i32 %561 to i64
  %565 = getelementptr inbounds [3 x i32], ptr %13, i64 0, i64 %564
  %566 = load i32, ptr %565, align 4, !tbaa !140
  %567 = load ptr, ptr %16, align 8, !tbaa !87
  %568 = sext i32 %566 to i64
  %569 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %567, i64 %568
  %570 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %562, i64 %432, i32 1
  store ptr %569, ptr %570, align 8, !tbaa !219
  %571 = load i32, ptr %470, align 4, !tbaa !140
  %572 = load ptr, ptr %16, align 8, !tbaa !87
  %573 = sext i32 %571 to i64
  %574 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %572, i64 %573
  %575 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %562, i64 %432, i32 1, i64 1
  store ptr %574, ptr %575, align 8, !tbaa !219
  %576 = load ptr, ptr %16, align 8, !tbaa !87
  %577 = sext i32 %469 to i64
  %578 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %576, i64 %577
  %579 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %562, i64 %432, i32 1, i64 2
  store ptr %578, ptr %579, align 8, !tbaa !219
  %580 = load ptr, ptr %16, align 8, !tbaa !87
  %581 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %580, i64 %577
  %582 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %562, i64 %563, i32 1
  store ptr %581, ptr %582, align 8, !tbaa !219
  %583 = load i32, ptr %472, align 4, !tbaa !140
  %584 = load ptr, ptr %16, align 8, !tbaa !87
  %585 = sext i32 %583 to i64
  %586 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %584, i64 %585
  %587 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %562, i64 %563, i32 1, i64 1
  store ptr %586, ptr %587, align 8, !tbaa !219
  %588 = load ptr, ptr %16, align 8, !tbaa !87
  %589 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %588, i64 %568
  %590 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %562, i64 %563, i32 1, i64 2
  store ptr %589, ptr %590, align 8, !tbaa !219
  %591 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %562, i64 %432, i32 0, i32 1
  %592 = load ptr, ptr %591, align 8, !tbaa !183
  %593 = load ptr, ptr %16, align 8, !tbaa !87
  %594 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %577
  %595 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %568
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %5)
  %596 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy acquire, align 8
  %597 = icmp eq i8 %596, 0
  br i1 %597, label %598, label %603, !prof !172

598:                                              ; preds = %551
  %599 = call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %603, label %601

601:                                              ; preds = %598
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8, !tbaa !173
  %602 = call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
  call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  br label %603

603:                                              ; preds = %601, %598, %551
  %604 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(52) %5, ptr noundef nonnull align 8 dereferenceable(52) getelementptr inbounds (%"struct.btSoftBody::Link", ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 52, i1 false)
  %605 = icmp eq ptr %592, null
  br i1 %605, label %606, label %609

606:                                              ; preds = %603
  %607 = load ptr, ptr %362, align 8, !tbaa !119
  %608 = load ptr, ptr %607, align 8, !tbaa !219
  br label %609

609:                                              ; preds = %606, %603
  %610 = phi ptr [ %608, %606 ], [ %592, %603 ]
  %611 = load i32, ptr %20, align 4, !tbaa !92
  %612 = load i32, ptr %365, align 8, !tbaa !93
  %613 = icmp eq i32 %611, %612
  br i1 %613, label %614, label %670

614:                                              ; preds = %609
  %615 = icmp eq i32 %611, 0
  %616 = shl nsw i32 %611, 1
  %617 = select i1 %615, i32 1, i32 %616
  %618 = icmp slt i32 %611, %617
  br i1 %618, label %619, label %670

619:                                              ; preds = %614
  %620 = icmp eq i32 %617, 0
  br i1 %620, label %627, label %621

621:                                              ; preds = %619
  %622 = sext i32 %617 to i64
  %623 = mul nsw i64 %622, 72
  %624 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %623, i32 noundef 16)
          to label %625 unwind label %668

625:                                              ; preds = %621
  %626 = load i32, ptr %20, align 4, !tbaa !92
  br label %627

627:                                              ; preds = %625, %619
  %628 = phi i32 [ %626, %625 ], [ %611, %619 ]
  %629 = phi ptr [ %624, %625 ], [ null, %619 ]
  %630 = icmp sgt i32 %628, 0
  br i1 %630, label %631, label %657

631:                                              ; preds = %627
  %632 = zext i32 %628 to i64
  %633 = and i64 %632, 1
  %634 = icmp eq i32 %628, 1
  br i1 %634, label %650, label %635

635:                                              ; preds = %631
  %636 = and i64 %632, 4294967294
  br label %637

637:                                              ; preds = %637, %635
  %638 = phi i64 [ 0, %635 ], [ %647, %637 ]
  %639 = phi i64 [ 0, %635 ], [ %648, %637 ]
  %640 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %629, i64 %638
  %641 = load ptr, ptr %366, align 8, !tbaa !91
  %642 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %641, i64 %638
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %640, ptr noundef nonnull align 8 dereferenceable(72) %642, i64 72, i1 false)
  %643 = or i64 %638, 1
  %644 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %629, i64 %643
  %645 = load ptr, ptr %366, align 8, !tbaa !91
  %646 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %645, i64 %643
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %644, ptr noundef nonnull align 8 dereferenceable(72) %646, i64 72, i1 false)
  %647 = add nuw nsw i64 %638, 2
  %648 = add i64 %639, 2
  %649 = icmp eq i64 %648, %636
  br i1 %649, label %650, label %637

650:                                              ; preds = %637, %631
  %651 = phi i64 [ 0, %631 ], [ %647, %637 ]
  %652 = icmp eq i64 %633, 0
  br i1 %652, label %657, label %653

653:                                              ; preds = %650
  %654 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %629, i64 %651
  %655 = load ptr, ptr %366, align 8, !tbaa !91
  %656 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %655, i64 %651
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %654, ptr noundef nonnull align 8 dereferenceable(72) %656, i64 72, i1 false)
  br label %657

657:                                              ; preds = %653, %650, %627
  %658 = load ptr, ptr %366, align 8, !tbaa !91
  %659 = icmp eq ptr %658, null
  %660 = load i8, ptr %367, align 8
  %661 = icmp eq i8 %660, 0
  %662 = select i1 %659, i1 true, i1 %661
  br i1 %662, label %664, label %663

663:                                              ; preds = %657
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %658)
          to label %664 unwind label %668

664:                                              ; preds = %663, %657
  store i8 1, ptr %367, align 8, !tbaa !90
  store ptr %629, ptr %366, align 8, !tbaa !91
  store i32 %617, ptr %365, align 8, !tbaa !93
  %665 = load i32, ptr %20, align 4, !tbaa !92
  br label %670

666:                                              ; preds = %548, %506
  %667 = landingpad { ptr, i32 }
          cleanup
  br label %705

668:                                              ; preds = %663, %621
  %669 = landingpad { ptr, i32 }
          cleanup
  br label %705

670:                                              ; preds = %609, %614, %664
  %671 = phi i32 [ %665, %664 ], [ %611, %614 ], [ %611, %609 ]
  %672 = load ptr, ptr %366, align 8, !tbaa !91
  %673 = sext i32 %671 to i64
  %674 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %672, i64 %673
  store ptr %604, ptr %674, align 8
  %675 = getelementptr inbounds i8, ptr %674, i64 8
  store ptr %610, ptr %675, align 8
  %676 = getelementptr inbounds i8, ptr %674, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %676, ptr noundef nonnull align 8 dereferenceable(56) %5, i64 56, i1 false)
  %677 = load i32, ptr %20, align 4, !tbaa !92
  %678 = add nsw i32 %677, 1
  store i32 %678, ptr %20, align 4, !tbaa !92
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %5)
  %679 = load ptr, ptr %366, align 8, !tbaa !91
  %680 = sext i32 %677 to i64
  %681 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %679, i64 %680, i32 1
  store ptr %594, ptr %681, align 8, !tbaa !219
  %682 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %679, i64 %680, i32 1, i64 1
  store ptr %595, ptr %682, align 8, !tbaa !219
  %683 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %577, i32 1
  %684 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %568, i32 1
  %685 = load float, ptr %683, align 4, !tbaa !137
  %686 = load float, ptr %684, align 4, !tbaa !137
  %687 = fsub float %685, %686
  %688 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %577, i32 1, i32 0, i64 1
  %689 = load float, ptr %688, align 4, !tbaa !137
  %690 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %568, i32 1, i32 0, i64 1
  %691 = load float, ptr %690, align 4, !tbaa !137
  %692 = fsub float %689, %691
  %693 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %577, i32 1, i32 0, i64 2
  %694 = load float, ptr %693, align 4, !tbaa !137
  %695 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %593, i64 %568, i32 1, i32 0, i64 2
  %696 = load float, ptr %695, align 4, !tbaa !137
  %697 = fsub float %694, %696
  %698 = fmul float %692, %692
  %699 = call float @llvm.fmuladd.f32(float %687, float %687, float %698)
  %700 = call float @llvm.fmuladd.f32(float %697, float %697, float %699)
  %701 = call float @llvm.sqrt.f32(float %700)
  %702 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %679, i64 %680, i32 2
  store float %701, ptr %702, align 8, !tbaa !239
  store i8 1, ptr %368, align 4, !tbaa !147
  %703 = add nsw i32 %430, -1
  %704 = load i32, ptr %81, align 4, !tbaa !96
  br label %736

705:                                              ; preds = %668, %666
  %706 = phi { ptr, i32 } [ %669, %668 ], [ %667, %666 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %13) #38
  br label %1142

707:                                              ; preds = %455, %428
  %708 = icmp sgt i32 %19, %438
  %709 = icmp sgt i32 %19, %444
  %710 = select i1 %708, i1 %709, i1 false
  br i1 %710, label %711, label %722

711:                                              ; preds = %707
  %712 = call i32 @llvm.smin.i32(i32 %438, i32 %444)
  %713 = call i32 @llvm.smax.i32(i32 %438, i32 %444)
  %714 = add nsw i32 %713, 1
  %715 = mul nsw i32 %714, %713
  %716 = sdiv i32 %715, 2
  %717 = add nsw i32 %716, %712
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i32, ptr %451, i64 %718
  %720 = load i32, ptr %719, align 4, !tbaa !140
  %721 = icmp sgt i32 %720, 0
  br i1 %721, label %466, label %722

722:                                              ; preds = %711, %707
  %723 = icmp sgt i32 %19, %444
  %724 = select i1 %723, i1 %452, i1 false
  br i1 %724, label %725, label %736

725:                                              ; preds = %722
  %726 = call i32 @llvm.smin.i32(i32 %444, i32 %450)
  %727 = call i32 @llvm.smax.i32(i32 %444, i32 %450)
  %728 = add nsw i32 %727, 1
  %729 = mul nsw i32 %728, %727
  %730 = sdiv i32 %729, 2
  %731 = add nsw i32 %730, %726
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds i32, ptr %451, i64 %732
  %734 = load i32, ptr %733, align 4, !tbaa !140
  %735 = icmp sgt i32 %734, 0
  br i1 %735, label %466, label %736

736:                                              ; preds = %722, %725, %670
  %737 = phi i32 [ %704, %670 ], [ %429, %725 ], [ %429, %722 ]
  %738 = phi i32 [ %703, %670 ], [ %430, %725 ], [ %430, %722 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %13) #38
  %739 = add nsw i32 %738, 1
  %740 = icmp slt i32 %739, %737
  br i1 %740, label %428, label %741

741:                                              ; preds = %736, %353
  br i1 %3, label %742, label %1131

742:                                              ; preds = %741
  %743 = load i32, ptr %18, align 4, !tbaa !88
  %744 = icmp sgt i32 %743, 0
  br i1 %744, label %745, label %800

745:                                              ; preds = %742
  %746 = zext i32 %743 to i64
  %747 = shl nuw nsw i64 %746, 2
  %748 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %747, i32 noundef 16)
          to label %749 unwind label %780

749:                                              ; preds = %745
  call void @llvm.memset.p0.i64(ptr align 4 %748, i8 0, i64 %747, i1 false), !tbaa !140
  %750 = sext i32 %19 to i64
  %751 = zext i32 %743 to i64
  br label %752

752:                                              ; preds = %749, %795
  %753 = phi i64 [ 0, %749 ], [ %796, %795 ]
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14) #38
  %754 = load ptr, ptr %16, align 8, !tbaa !87
  %755 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %754, i64 %753, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %14, ptr noundef nonnull align 8 dereferenceable(16) %755, i64 16, i1 false), !tbaa.struct !162
  %756 = icmp slt i64 %753, %750
  br i1 %756, label %757, label %766

757:                                              ; preds = %752
  %758 = load ptr, ptr %1, align 8, !tbaa !5
  %759 = load ptr, ptr %758, align 8
  %760 = invoke noundef float %759(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %14)
          to label %761 unwind label %782

761:                                              ; preds = %757
  %762 = call float @llvm.fabs.f32(float %760)
  %763 = fcmp olt float %762, %2
  br i1 %763, label %764, label %795

764:                                              ; preds = %761
  %765 = load ptr, ptr %16, align 8, !tbaa !87
  br label %766

766:                                              ; preds = %764, %752
  %767 = phi ptr [ %765, %764 ], [ %754, %752 ]
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %15)
  %768 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %767, i64 %753, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %15, ptr noundef nonnull align 8 dereferenceable(16) %768, i64 16, i1 false), !tbaa.struct !162
  %769 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %767, i64 %753, i32 6
  %770 = load float, ptr %769, align 8, !tbaa !174
  %771 = fcmp ogt float %770, 0.000000e+00
  %772 = fdiv float 1.000000e+00, %770
  %773 = select i1 %771, float %772, float 0.000000e+00
  %774 = fcmp ogt float %773, 0.000000e+00
  br i1 %774, label %775, label %786

775:                                              ; preds = %766
  %776 = fmul float %773, 5.000000e-01
  %777 = fmul float %770, 2.000000e+00
  store float %777, ptr %769, align 8, !tbaa !174
  br label %786

778:                                              ; preds = %1121
  %779 = landingpad { ptr, i32 }
          cleanup
  br label %1142

780:                                              ; preds = %745
  %781 = landingpad { ptr, i32 }
          cleanup
  br label %1142

782:                                              ; preds = %757
  %783 = landingpad { ptr, i32 }
          cleanup
  br label %798

784:                                              ; preds = %786
  %785 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15)
  br label %798

786:                                              ; preds = %775, %766
  %787 = phi float [ %776, %775 ], [ %773, %766 ]
  invoke void @_ZN10btSoftBody10appendNodeERK9btVector3f(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %14, float noundef %787)
          to label %788 unwind label %784

788:                                              ; preds = %786
  %789 = load i32, ptr %18, align 4, !tbaa !88
  %790 = add nsw i32 %789, -1
  %791 = getelementptr inbounds i32, ptr %748, i64 %753
  store i32 %790, ptr %791, align 4, !tbaa !140
  %792 = load ptr, ptr %16, align 8, !tbaa !87
  %793 = sext i32 %790 to i64
  %794 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %792, i64 %793, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %794, ptr noundef nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15)
  br label %795

795:                                              ; preds = %788, %761
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14) #38
  %796 = add nuw nsw i64 %753, 1
  %797 = icmp eq i64 %796, %751
  br i1 %797, label %800, label %752

798:                                              ; preds = %784, %782
  %799 = phi { ptr, i32 } [ %785, %784 ], [ %783, %782 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14) #38
  br label %1124

800:                                              ; preds = %795, %742
  %801 = phi ptr [ null, %742 ], [ %748, %795 ]
  %802 = load ptr, ptr %16, align 8, !tbaa !87
  %803 = load i32, ptr %20, align 4, !tbaa !92
  %804 = icmp sgt i32 %803, 0
  br i1 %804, label %805, label %897

805:                                              ; preds = %800
  %806 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %807 = ptrtoint ptr %802 to i64
  %808 = zext i32 %803 to i64
  br label %809

809:                                              ; preds = %805, %894
  %810 = phi i64 [ 0, %805 ], [ %895, %894 ]
  %811 = load ptr, ptr %806, align 8, !tbaa !91
  %812 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %811, i64 %810, i32 1
  %813 = load ptr, ptr %812, align 8, !tbaa !219
  %814 = ptrtoint ptr %813 to i64
  %815 = sub i64 %814, %807
  %816 = sdiv exact i64 %815, 120
  %817 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %811, i64 %810, i32 1, i64 1
  %818 = load ptr, ptr %817, align 8, !tbaa !219
  %819 = ptrtoint ptr %818 to i64
  %820 = sub i64 %819, %807
  %821 = sdiv exact i64 %820, 120
  %822 = shl i64 %816, 32
  %823 = ashr exact i64 %822, 32
  %824 = getelementptr inbounds i32, ptr %801, i64 %823
  %825 = load i32, ptr %824, align 4, !tbaa !140
  %826 = icmp eq i32 %825, 0
  br i1 %826, label %840, label %827

827:                                              ; preds = %809
  %828 = shl i64 %821, 32
  %829 = ashr exact i64 %828, 32
  %830 = getelementptr inbounds i32, ptr %801, i64 %829
  %831 = load i32, ptr %830, align 4, !tbaa !140
  %832 = icmp eq i32 %831, 0
  br i1 %832, label %840, label %833

833:                                              ; preds = %827
  %834 = trunc i64 %810 to i32
  invoke void @_ZN10btSoftBody10appendLinkEiPNS_8MaterialE(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %834, ptr noundef null)
          to label %835 unwind label %838

835:                                              ; preds = %833
  %836 = load i32, ptr %20, align 4, !tbaa !92
  %837 = add nsw i32 %836, -1
  br label %859

838:                                              ; preds = %833, %840, %848
  %839 = landingpad { ptr, i32 }
          cleanup
  br label %1128

840:                                              ; preds = %827, %809
  %841 = load ptr, ptr %16, align 8, !tbaa !87
  %842 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %841, i64 %823, i32 1
  %843 = load ptr, ptr %1, align 8, !tbaa !5
  %844 = load ptr, ptr %843, align 8
  %845 = invoke noundef float %844(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %842)
          to label %846 unwind label %838

846:                                              ; preds = %840
  %847 = fcmp olt float %845, %2
  br i1 %847, label %848, label %894

848:                                              ; preds = %846
  %849 = load ptr, ptr %16, align 8, !tbaa !87
  %850 = shl i64 %821, 32
  %851 = ashr exact i64 %850, 32
  %852 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %849, i64 %851, i32 1
  %853 = load ptr, ptr %1, align 8, !tbaa !5
  %854 = load ptr, ptr %853, align 8
  %855 = invoke noundef float %854(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %852)
          to label %856 unwind label %838

856:                                              ; preds = %848
  %857 = fcmp olt float %855, %2
  %858 = trunc i64 %810 to i32
  br i1 %857, label %859, label %894

859:                                              ; preds = %856, %835
  %860 = phi i32 [ %837, %835 ], [ %858, %856 ]
  %861 = icmp eq i32 %860, 0
  br i1 %861, label %894, label %862

862:                                              ; preds = %859
  %863 = load ptr, ptr %806, align 8, !tbaa !91
  %864 = sext i32 %860 to i64
  %865 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %863, i64 %864, i32 1, i64 0
  %866 = load ptr, ptr %865, align 8, !tbaa !219
  %867 = ptrtoint ptr %866 to i64
  %868 = sub i64 %867, %807
  %869 = sdiv exact i64 %868, 120
  %870 = shl i64 %869, 32
  %871 = ashr exact i64 %870, 32
  %872 = getelementptr inbounds i32, ptr %801, i64 %871
  %873 = load i32, ptr %872, align 4, !tbaa !140
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %879, label %875

875:                                              ; preds = %862
  %876 = load ptr, ptr %16, align 8, !tbaa !87
  %877 = sext i32 %873 to i64
  %878 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %876, i64 %877
  store ptr %878, ptr %865, align 8, !tbaa !219
  br label %879

879:                                              ; preds = %875, %862
  %880 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %863, i64 %864, i32 1, i64 1
  %881 = load ptr, ptr %880, align 8, !tbaa !219
  %882 = ptrtoint ptr %881 to i64
  %883 = sub i64 %882, %807
  %884 = sdiv exact i64 %883, 120
  %885 = shl i64 %884, 32
  %886 = ashr exact i64 %885, 32
  %887 = getelementptr inbounds i32, ptr %801, i64 %886
  %888 = load i32, ptr %887, align 4, !tbaa !140
  %889 = icmp eq i32 %888, 0
  br i1 %889, label %894, label %890

890:                                              ; preds = %879
  %891 = load ptr, ptr %16, align 8, !tbaa !87
  %892 = sext i32 %888 to i64
  %893 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %891, i64 %892
  store ptr %893, ptr %880, align 8, !tbaa !219
  br label %894

894:                                              ; preds = %879, %890, %846, %856, %859
  %895 = add nuw nsw i64 %810, 1
  %896 = icmp eq i64 %895, %808
  br i1 %896, label %897, label %809

897:                                              ; preds = %894, %800
  %898 = load i32, ptr %81, align 4, !tbaa !96
  %899 = icmp sgt i32 %898, 0
  br i1 %899, label %900, label %982

900:                                              ; preds = %897
  %901 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %902 = ptrtoint ptr %802 to i64
  %903 = zext i32 %898 to i64
  br label %904

904:                                              ; preds = %900, %979
  %905 = phi i64 [ 0, %900 ], [ %980, %979 ]
  %906 = load ptr, ptr %901, align 8, !tbaa !95
  %907 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %906, i64 %905, i32 1
  %908 = load ptr, ptr %907, align 8, !tbaa !219
  %909 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %908, i64 0, i32 1
  %910 = load ptr, ptr %1, align 8, !tbaa !5
  %911 = load ptr, ptr %910, align 8
  %912 = invoke noundef float %911(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %909)
          to label %913 unwind label %943

913:                                              ; preds = %904
  %914 = fcmp olt float %912, %2
  br i1 %914, label %915, label %979

915:                                              ; preds = %913
  %916 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %906, i64 %905, i32 1, i64 1
  %917 = load ptr, ptr %916, align 8, !tbaa !219
  %918 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %917, i64 0, i32 1
  %919 = load ptr, ptr %1, align 8, !tbaa !5
  %920 = load ptr, ptr %919, align 8
  %921 = invoke noundef float %920(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %918)
          to label %922 unwind label %943

922:                                              ; preds = %915
  %923 = fcmp olt float %921, %2
  br i1 %923, label %924, label %979

924:                                              ; preds = %922
  %925 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %906, i64 %905, i32 1, i64 2
  %926 = load ptr, ptr %925, align 8, !tbaa !219
  %927 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %926, i64 0, i32 1
  %928 = load ptr, ptr %1, align 8, !tbaa !5
  %929 = load ptr, ptr %928, align 8
  %930 = invoke noundef float %929(ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(16) %927)
          to label %931 unwind label %943

931:                                              ; preds = %924
  %932 = fcmp olt float %930, %2
  br i1 %932, label %933, label %979

933:                                              ; preds = %931
  %934 = load ptr, ptr %907, align 8, !tbaa !219
  %935 = ptrtoint ptr %934 to i64
  %936 = sub i64 %935, %902
  %937 = sdiv exact i64 %936, 120
  %938 = shl i64 %937, 32
  %939 = ashr exact i64 %938, 32
  %940 = getelementptr inbounds i32, ptr %801, i64 %939
  %941 = load i32, ptr %940, align 4, !tbaa !140
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %949, label %945

943:                                              ; preds = %924, %915, %904
  %944 = landingpad { ptr, i32 }
          cleanup
  br label %1124

945:                                              ; preds = %933
  %946 = load ptr, ptr %16, align 8, !tbaa !87
  %947 = sext i32 %941 to i64
  %948 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %946, i64 %947
  store ptr %948, ptr %907, align 8, !tbaa !219
  br label %949

949:                                              ; preds = %945, %933
  %950 = getelementptr inbounds ptr, ptr %907, i64 1
  %951 = load ptr, ptr %950, align 8, !tbaa !219
  %952 = ptrtoint ptr %951 to i64
  %953 = sub i64 %952, %902
  %954 = sdiv exact i64 %953, 120
  %955 = shl i64 %954, 32
  %956 = ashr exact i64 %955, 32
  %957 = getelementptr inbounds i32, ptr %801, i64 %956
  %958 = load i32, ptr %957, align 4, !tbaa !140
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %964, label %960

960:                                              ; preds = %949
  %961 = load ptr, ptr %16, align 8, !tbaa !87
  %962 = sext i32 %958 to i64
  %963 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %961, i64 %962
  store ptr %963, ptr %950, align 8, !tbaa !219
  br label %964

964:                                              ; preds = %960, %949
  %965 = getelementptr inbounds ptr, ptr %907, i64 2
  %966 = load ptr, ptr %965, align 8, !tbaa !219
  %967 = ptrtoint ptr %966 to i64
  %968 = sub i64 %967, %902
  %969 = sdiv exact i64 %968, 120
  %970 = shl i64 %969, 32
  %971 = ashr exact i64 %970, 32
  %972 = getelementptr inbounds i32, ptr %801, i64 %971
  %973 = load i32, ptr %972, align 4, !tbaa !140
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %979, label %975

975:                                              ; preds = %964
  %976 = load ptr, ptr %16, align 8, !tbaa !87
  %977 = sext i32 %973 to i64
  %978 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %976, i64 %977
  store ptr %978, ptr %965, align 8, !tbaa !219
  br label %979

979:                                              ; preds = %964, %975, %931, %922, %913
  %980 = add nuw nsw i64 %905, 1
  %981 = icmp eq i64 %980, %903
  br i1 %981, label %982, label %904

982:                                              ; preds = %979, %897
  %983 = load i32, ptr %18, align 4, !tbaa !88
  %984 = icmp sgt i32 %983, 0
  br i1 %984, label %985, label %990

985:                                              ; preds = %982
  %986 = zext i32 %983 to i64
  %987 = shl nuw nsw i64 %986, 2
  %988 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %987, i32 noundef 16)
          to label %989 unwind label %1122

989:                                              ; preds = %985
  call void @llvm.memset.p0.i64(ptr align 4 %988, i8 0, i64 %987, i1 false), !tbaa !140
  br label %990

990:                                              ; preds = %989, %982
  %991 = phi ptr [ null, %982 ], [ %988, %989 ]
  %992 = load i32, ptr %20, align 4, !tbaa !92
  %993 = icmp sgt i32 %992, 0
  br i1 %993, label %994, label %1025

994:                                              ; preds = %990
  %995 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %996 = load ptr, ptr %995, align 8, !tbaa !91
  %997 = ptrtoint ptr %802 to i64
  %998 = zext i32 %992 to i64
  br label %999

999:                                              ; preds = %994, %999
  %1000 = phi i64 [ 0, %994 ], [ %1021, %999 ]
  %1001 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %996, i64 %1000, i32 1, i64 0
  %1002 = load ptr, ptr %1001, align 8, !tbaa !219
  %1003 = ptrtoint ptr %1002 to i64
  %1004 = sub i64 %1003, %997
  %1005 = sdiv exact i64 %1004, 120
  %1006 = shl i64 %1005, 32
  %1007 = ashr exact i64 %1006, 32
  %1008 = getelementptr inbounds i32, ptr %991, i64 %1007
  %1009 = load i32, ptr %1008, align 4, !tbaa !140
  %1010 = add nsw i32 %1009, 1
  store i32 %1010, ptr %1008, align 4, !tbaa !140
  %1011 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %996, i64 %1000, i32 1, i64 1
  %1012 = load ptr, ptr %1011, align 8, !tbaa !219
  %1013 = ptrtoint ptr %1012 to i64
  %1014 = sub i64 %1013, %997
  %1015 = sdiv exact i64 %1014, 120
  %1016 = shl i64 %1015, 32
  %1017 = ashr exact i64 %1016, 32
  %1018 = getelementptr inbounds i32, ptr %991, i64 %1017
  %1019 = load i32, ptr %1018, align 4, !tbaa !140
  %1020 = add nsw i32 %1019, 1
  store i32 %1020, ptr %1018, align 4, !tbaa !140
  %1021 = add nuw nsw i64 %1000, 1
  %1022 = icmp eq i64 %1021, %998
  br i1 %1022, label %1025, label %999

1023:                                             ; preds = %1118
  %1024 = landingpad { ptr, i32 }
          cleanup
  br label %1124

1025:                                             ; preds = %999, %990
  %1026 = load i32, ptr %81, align 4, !tbaa !96
  %1027 = icmp sgt i32 %1026, 0
  br i1 %1027, label %1028, label %1067

1028:                                             ; preds = %1025
  %1029 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %1030 = load ptr, ptr %1029, align 8, !tbaa !95
  %1031 = ptrtoint ptr %802 to i64
  %1032 = zext i32 %1026 to i64
  br label %1033

1033:                                             ; preds = %1028, %1033
  %1034 = phi i64 [ 0, %1028 ], [ %1065, %1033 ]
  %1035 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %1030, i64 %1034, i32 1, i64 0
  %1036 = load ptr, ptr %1035, align 8, !tbaa !219
  %1037 = ptrtoint ptr %1036 to i64
  %1038 = sub i64 %1037, %1031
  %1039 = sdiv exact i64 %1038, 120
  %1040 = shl i64 %1039, 32
  %1041 = ashr exact i64 %1040, 32
  %1042 = getelementptr inbounds i32, ptr %991, i64 %1041
  %1043 = load i32, ptr %1042, align 4, !tbaa !140
  %1044 = add nsw i32 %1043, 1
  store i32 %1044, ptr %1042, align 4, !tbaa !140
  %1045 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %1030, i64 %1034, i32 1, i64 1
  %1046 = load ptr, ptr %1045, align 8, !tbaa !219
  %1047 = ptrtoint ptr %1046 to i64
  %1048 = sub i64 %1047, %1031
  %1049 = sdiv exact i64 %1048, 120
  %1050 = shl i64 %1049, 32
  %1051 = ashr exact i64 %1050, 32
  %1052 = getelementptr inbounds i32, ptr %991, i64 %1051
  %1053 = load i32, ptr %1052, align 4, !tbaa !140
  %1054 = add nsw i32 %1053, 1
  store i32 %1054, ptr %1052, align 4, !tbaa !140
  %1055 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %1030, i64 %1034, i32 1, i64 2
  %1056 = load ptr, ptr %1055, align 8, !tbaa !219
  %1057 = ptrtoint ptr %1056 to i64
  %1058 = sub i64 %1057, %1031
  %1059 = sdiv exact i64 %1058, 120
  %1060 = shl i64 %1059, 32
  %1061 = ashr exact i64 %1060, 32
  %1062 = getelementptr inbounds i32, ptr %991, i64 %1061
  %1063 = load i32, ptr %1062, align 4, !tbaa !140
  %1064 = add nsw i32 %1063, 1
  store i32 %1064, ptr %1062, align 4, !tbaa !140
  %1065 = add nuw nsw i64 %1034, 1
  %1066 = icmp eq i64 %1065, %1032
  br i1 %1066, label %1067, label %1033

1067:                                             ; preds = %1033, %1025
  %1068 = load i32, ptr %20, align 4, !tbaa !92
  %1069 = icmp sgt i32 %1068, 0
  br i1 %1069, label %1070, label %1116

1070:                                             ; preds = %1067
  %1071 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %1072 = ptrtoint ptr %802 to i64
  br label %1073

1073:                                             ; preds = %1070, %1111
  %1074 = phi i32 [ %1068, %1070 ], [ %1112, %1111 ]
  %1075 = phi i32 [ 0, %1070 ], [ %1114, %1111 ]
  %1076 = load ptr, ptr %1071, align 8, !tbaa !91
  %1077 = sext i32 %1075 to i64
  %1078 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %1076, i64 %1077, i32 1
  %1079 = load ptr, ptr %1078, align 8, !tbaa !219
  %1080 = ptrtoint ptr %1079 to i64
  %1081 = sub i64 %1080, %1072
  %1082 = sdiv exact i64 %1081, 120
  %1083 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %1076, i64 %1077, i32 1, i64 1
  %1084 = load ptr, ptr %1083, align 8, !tbaa !219
  %1085 = ptrtoint ptr %1084 to i64
  %1086 = sub i64 %1085, %1072
  %1087 = sdiv exact i64 %1086, 120
  %1088 = shl i64 %1082, 32
  %1089 = ashr exact i64 %1088, 32
  %1090 = getelementptr inbounds i32, ptr %991, i64 %1089
  %1091 = load i32, ptr %1090, align 4, !tbaa !140
  %1092 = icmp eq i32 %1091, 1
  %1093 = shl i64 %1087, 32
  %1094 = ashr exact i64 %1093, 32
  %1095 = getelementptr inbounds i32, ptr %991, i64 %1094
  %1096 = load i32, ptr %1095, align 4
  %1097 = icmp eq i32 %1096, 1
  %1098 = select i1 %1092, i1 true, i1 %1097
  br i1 %1098, label %1099, label %1111

1099:                                             ; preds = %1073
  %1100 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %1076, i64 %1077
  %1101 = add nsw i32 %1091, -1
  store i32 %1101, ptr %1090, align 4, !tbaa !140
  %1102 = load i32, ptr %1095, align 4, !tbaa !140
  %1103 = add nsw i32 %1102, -1
  store i32 %1103, ptr %1095, align 4, !tbaa !140
  %1104 = load i32, ptr %20, align 4, !tbaa !92
  %1105 = add nsw i32 %1104, -1
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %1076, i64 %1106
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %6, ptr noundef nonnull align 8 dereferenceable(72) %1100, i64 72, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(68) %1100, ptr noundef nonnull align 8 dereferenceable(68) %1107, i64 68, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(68) %1107, ptr noundef nonnull align 8 dereferenceable(68) %6, i64 68, i1 false)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %6)
  %1108 = load i32, ptr %20, align 4, !tbaa !92
  %1109 = add nsw i32 %1108, -1
  store i32 %1109, ptr %20, align 4, !tbaa !92
  %1110 = add nsw i32 %1075, -1
  br label %1111

1111:                                             ; preds = %1073, %1099
  %1112 = phi i32 [ %1109, %1099 ], [ %1074, %1073 ]
  %1113 = phi i32 [ %1110, %1099 ], [ %1075, %1073 ]
  %1114 = add nsw i32 %1113, 1
  %1115 = icmp slt i32 %1114, %1112
  br i1 %1115, label %1073, label %1118

1116:                                             ; preds = %1067
  %1117 = icmp eq ptr %991, null
  br i1 %1117, label %1119, label %1118

1118:                                             ; preds = %1111, %1116
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %991)
          to label %1119 unwind label %1023

1119:                                             ; preds = %1116, %1118
  %1120 = icmp eq ptr %801, null
  br i1 %1120, label %1131, label %1121

1121:                                             ; preds = %1119
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %801)
          to label %1131 unwind label %778

1122:                                             ; preds = %985
  %1123 = landingpad { ptr, i32 }
          cleanup
  br label %1124

1124:                                             ; preds = %1023, %1122, %943, %798
  %1125 = phi ptr [ %748, %798 ], [ %801, %943 ], [ %801, %1023 ], [ %801, %1122 ]
  %1126 = phi { ptr, i32 } [ %799, %798 ], [ %944, %943 ], [ %1024, %1023 ], [ %1123, %1122 ]
  %1127 = icmp eq ptr %1125, null
  br i1 %1127, label %1142, label %1128

1128:                                             ; preds = %838, %1124
  %1129 = phi ptr [ %801, %838 ], [ %1125, %1124 ]
  %1130 = phi { ptr, i32 } [ %839, %838 ], [ %1126, %1124 ]
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1129)
          to label %1142 unwind label %1153

1131:                                             ; preds = %1121, %1119, %741
  %1132 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  store i8 1, ptr %1132, align 4, !tbaa !147
  %1133 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 5
  %1134 = load ptr, ptr %1133, align 8, !tbaa !131
  %1135 = icmp eq ptr %1134, null
  %1136 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 6
  %1137 = load i8, ptr %1136, align 8
  %1138 = icmp eq i8 %1137, 0
  %1139 = select i1 %1135, i1 true, i1 %1138
  br i1 %1139, label %1141, label %1140

1140:                                             ; preds = %1131
  call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1134)
  br label %1141

1141:                                             ; preds = %1131, %1140
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %10) #38
  ret void

1142:                                             ; preds = %317, %319, %778, %1128, %780, %1124, %71, %73, %339, %705, %423
  %1143 = phi { ptr, i32 } [ %424, %423 ], [ %706, %705 ], [ %340, %339 ], [ %74, %73 ], [ %72, %71 ], [ %779, %778 ], [ %781, %780 ], [ %1126, %1124 ], [ %1130, %1128 ], [ %318, %317 ], [ %320, %319 ]
  %1144 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 5
  %1145 = load ptr, ptr %1144, align 8, !tbaa !131
  %1146 = icmp eq ptr %1145, null
  %1147 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %10, i64 0, i32 6
  %1148 = load i8, ptr %1147, align 8
  %1149 = icmp eq i8 %1148, 0
  %1150 = select i1 %1146, i1 true, i1 %1149
  br i1 %1150, label %1152, label %1151

1151:                                             ; preds = %1142
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %1145)
          to label %1152 unwind label %1153

1152:                                             ; preds = %1142, %1151
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %10) #38
  resume { ptr, i32 } %1143

1153:                                             ; preds = %1151, %1128
  %1154 = landingpad { ptr, i32 }
          catch ptr null
  %1155 = extractvalue { ptr, i32 } %1154, 0
  call void @__clang_call_terminate(ptr %1155) #39
  unreachable
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN11btSymMatrixIiEC2EiRKi(ptr noundef nonnull align 8 dereferenceable(36) %0, i32 noundef %1, ptr noundef nonnull align 4 dereferenceable(4) %2) unnamed_addr #4 comdat align 2 personality ptr @__gxx_personality_v0 {
  %4 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 6
  store i8 1, ptr %4, align 8, !tbaa !130
  %5 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 5
  store ptr null, ptr %5, align 8, !tbaa !131
  %6 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 2
  store i32 0, ptr %6, align 4, !tbaa !132
  %7 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %0, i64 0, i32 3
  store i32 0, ptr %7, align 8, !tbaa !133
  %8 = getelementptr inbounds %struct.btSymMatrix, ptr %0, i64 0, i32 1
  store i32 %1, ptr %8, align 8, !tbaa !385
  %9 = add nsw i32 %1, 1
  %10 = mul nsw i32 %9, %1
  %11 = sdiv i32 %10, 2
  %12 = icmp sgt i32 %10, 1
  br i1 %12, label %13, label %144

13:                                               ; preds = %3
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %15, i32 noundef 16)
          to label %17 unwind label %145

17:                                               ; preds = %13
  %18 = load i32, ptr %6, align 4, !tbaa !132
  %19 = icmp sgt i32 %18, 0
  %20 = load ptr, ptr %5, align 8, !tbaa !131
  br i1 %19, label %21, label %80

21:                                               ; preds = %17
  %22 = ptrtoint ptr %20 to i64
  %23 = ptrtoint ptr %16 to i64
  %24 = zext i32 %18 to i64
  %25 = icmp ult i32 %18, 8
  %26 = sub i64 %23, %22
  %27 = icmp ult i64 %26, 32
  %28 = select i1 %25, i1 true, i1 %27
  br i1 %28, label %43, label %29

29:                                               ; preds = %21
  %30 = and i64 %24, 4294967288
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %39, %31 ]
  %33 = getelementptr inbounds i32, ptr %16, i64 %32
  %34 = getelementptr inbounds i32, ptr %20, i64 %32
  %35 = load <4 x i32>, ptr %34, align 4, !tbaa !140
  %36 = getelementptr inbounds i32, ptr %34, i64 4
  %37 = load <4 x i32>, ptr %36, align 4, !tbaa !140
  store <4 x i32> %35, ptr %33, align 4, !tbaa !140
  %38 = getelementptr inbounds i32, ptr %33, i64 4
  store <4 x i32> %37, ptr %38, align 4, !tbaa !140
  %39 = add nuw i64 %32, 8
  %40 = icmp eq i64 %39, %30
  br i1 %40, label %41, label %31, !llvm.loop !387

41:                                               ; preds = %31
  %42 = icmp eq i64 %30, %24
  br i1 %42, label %85, label %43

43:                                               ; preds = %21, %41
  %44 = phi i64 [ 0, %21 ], [ %30, %41 ]
  %45 = xor i64 %44, -1
  %46 = add nsw i64 %45, %24
  %47 = and i64 %24, 3
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %58, label %49

49:                                               ; preds = %43, %49
  %50 = phi i64 [ %55, %49 ], [ %44, %43 ]
  %51 = phi i64 [ %56, %49 ], [ 0, %43 ]
  %52 = getelementptr inbounds i32, ptr %16, i64 %50
  %53 = getelementptr inbounds i32, ptr %20, i64 %50
  %54 = load i32, ptr %53, align 4, !tbaa !140
  store i32 %54, ptr %52, align 4, !tbaa !140
  %55 = add nuw nsw i64 %50, 1
  %56 = add i64 %51, 1
  %57 = icmp eq i64 %56, %47
  br i1 %57, label %58, label %49, !llvm.loop !388

58:                                               ; preds = %49, %43
  %59 = phi i64 [ %44, %43 ], [ %55, %49 ]
  %60 = icmp ult i64 %46, 3
  br i1 %60, label %85, label %61

61:                                               ; preds = %58, %61
  %62 = phi i64 [ %78, %61 ], [ %59, %58 ]
  %63 = getelementptr inbounds i32, ptr %16, i64 %62
  %64 = getelementptr inbounds i32, ptr %20, i64 %62
  %65 = load i32, ptr %64, align 4, !tbaa !140
  store i32 %65, ptr %63, align 4, !tbaa !140
  %66 = add nuw nsw i64 %62, 1
  %67 = getelementptr inbounds i32, ptr %16, i64 %66
  %68 = getelementptr inbounds i32, ptr %20, i64 %66
  %69 = load i32, ptr %68, align 4, !tbaa !140
  store i32 %69, ptr %67, align 4, !tbaa !140
  %70 = add nuw nsw i64 %62, 2
  %71 = getelementptr inbounds i32, ptr %16, i64 %70
  %72 = getelementptr inbounds i32, ptr %20, i64 %70
  %73 = load i32, ptr %72, align 4, !tbaa !140
  store i32 %73, ptr %71, align 4, !tbaa !140
  %74 = add nuw nsw i64 %62, 3
  %75 = getelementptr inbounds i32, ptr %16, i64 %74
  %76 = getelementptr inbounds i32, ptr %20, i64 %74
  %77 = load i32, ptr %76, align 4, !tbaa !140
  store i32 %77, ptr %75, align 4, !tbaa !140
  %78 = add nuw nsw i64 %62, 4
  %79 = icmp eq i64 %78, %24
  br i1 %79, label %85, label %61, !llvm.loop !389

80:                                               ; preds = %17
  %81 = icmp eq ptr %20, null
  %82 = load i8, ptr %4, align 8
  %83 = icmp eq i8 %82, 0
  %84 = select i1 %81, i1 true, i1 %83
  br i1 %84, label %89, label %88

85:                                               ; preds = %58, %61, %41
  %86 = load i8, ptr %4, align 8, !tbaa !130, !range !191, !noundef !192
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %89, label %88

88:                                               ; preds = %80, %85
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %20)
          to label %89 unwind label %145

89:                                               ; preds = %85, %88, %80
  store i8 1, ptr %4, align 8, !tbaa !130
  store ptr %16, ptr %5, align 8, !tbaa !131
  store i32 %11, ptr %7, align 8, !tbaa !133
  %90 = sext i32 %11 to i64
  %91 = icmp ult i32 %11, 12
  br i1 %91, label %112, label %92

92:                                               ; preds = %89
  %93 = shl nsw i64 %90, 2
  %94 = getelementptr i8, ptr %16, i64 %93
  %95 = getelementptr i8, ptr %2, i64 4
  %96 = icmp ult ptr %16, %95
  %97 = icmp ugt ptr %94, %2
  %98 = and i1 %96, %97
  br i1 %98, label %112, label %99

99:                                               ; preds = %92
  %100 = and i64 %90, -8
  %101 = load i32, ptr %2, align 4, !tbaa !140, !alias.scope !390
  %102 = insertelement <4 x i32> poison, i32 %101, i64 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %104

104:                                              ; preds = %104, %99
  %105 = phi i64 [ 0, %99 ], [ %108, %104 ]
  %106 = getelementptr inbounds i32, ptr %16, i64 %105
  store <4 x i32> %103, ptr %106, align 4, !tbaa !140, !alias.scope !393, !noalias !390
  %107 = getelementptr inbounds i32, ptr %106, i64 4
  store <4 x i32> %103, ptr %107, align 4, !tbaa !140, !alias.scope !393, !noalias !390
  %108 = add nuw i64 %105, 8
  %109 = icmp eq i64 %108, %100
  br i1 %109, label %110, label %104, !llvm.loop !395

110:                                              ; preds = %104
  %111 = icmp eq i64 %100, %90
  br i1 %111, label %144, label %112

112:                                              ; preds = %92, %89, %110
  %113 = phi i64 [ 0, %92 ], [ 0, %89 ], [ %100, %110 ]
  %114 = xor i64 %113, -1
  %115 = add nsw i64 %114, %90
  %116 = and i64 %90, 3
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %112, %118
  %119 = phi i64 [ %123, %118 ], [ %113, %112 ]
  %120 = phi i64 [ %124, %118 ], [ 0, %112 ]
  %121 = getelementptr inbounds i32, ptr %16, i64 %119
  %122 = load i32, ptr %2, align 4, !tbaa !140
  store i32 %122, ptr %121, align 4, !tbaa !140
  %123 = add nuw nsw i64 %119, 1
  %124 = add i64 %120, 1
  %125 = icmp eq i64 %124, %116
  br i1 %125, label %126, label %118, !llvm.loop !396

126:                                              ; preds = %118, %112
  %127 = phi i64 [ %113, %112 ], [ %123, %118 ]
  %128 = icmp ult i64 %115, 3
  br i1 %128, label %144, label %129

129:                                              ; preds = %126, %129
  %130 = phi i64 [ %142, %129 ], [ %127, %126 ]
  %131 = getelementptr inbounds i32, ptr %16, i64 %130
  %132 = load i32, ptr %2, align 4, !tbaa !140
  store i32 %132, ptr %131, align 4, !tbaa !140
  %133 = add nuw nsw i64 %130, 1
  %134 = getelementptr inbounds i32, ptr %16, i64 %133
  %135 = load i32, ptr %2, align 4, !tbaa !140
  store i32 %135, ptr %134, align 4, !tbaa !140
  %136 = add nuw nsw i64 %130, 2
  %137 = getelementptr inbounds i32, ptr %16, i64 %136
  %138 = load i32, ptr %2, align 4, !tbaa !140
  store i32 %138, ptr %137, align 4, !tbaa !140
  %139 = add nuw nsw i64 %130, 3
  %140 = getelementptr inbounds i32, ptr %16, i64 %139
  %141 = load i32, ptr %2, align 4, !tbaa !140
  store i32 %141, ptr %140, align 4, !tbaa !140
  %142 = add nuw nsw i64 %130, 4
  %143 = icmp eq i64 %142, %90
  br i1 %143, label %144, label %129, !llvm.loop !397

144:                                              ; preds = %126, %129, %110, %3
  store i32 %11, ptr %6, align 4, !tbaa !132
  ret void

145:                                              ; preds = %88, %13
  %146 = landingpad { ptr, i32 }
          cleanup
  invoke void @_ZN20btAlignedObjectArrayIiED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0)
          to label %147 unwind label %148

147:                                              ; preds = %145
  resume { ptr, i32 } %146

148:                                              ; preds = %145
  %149 = landingpad { ptr, i32 }
          catch ptr null
  %150 = extractvalue { ptr, i32 } %149, 0
  tail call void @__clang_call_terminate(ptr %150) #39
  unreachable
}

; Function Attrs: uwtable
define dso_local noundef zeroext i1 @_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1, ptr noundef %2, float noundef %3) local_unnamed_addr #4 align 2 {
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !87
  %7 = ptrtoint ptr %1 to i64
  %8 = ptrtoint ptr %6 to i64
  %9 = sub i64 %7, %8
  %10 = sdiv exact i64 %9, 120
  %11 = trunc i64 %10 to i32
  %12 = ptrtoint ptr %2 to i64
  %13 = sub i64 %12, %8
  %14 = sdiv exact i64 %13, 120
  %15 = trunc i64 %14 to i32
  %16 = tail call noundef zeroext i1 @_ZN10btSoftBody7cutLinkEiif(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %11, i32 noundef %15, float noundef %3)
  ret i1 %16
}

; Function Attrs: uwtable
define dso_local noundef zeroext i1 @_ZN10btSoftBody7cutLinkEiif(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1, i32 noundef %2, float noundef %3) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %5 = alloca <{ [2 x ptr], float, i8, [3 x i8], float, float, float, %class.btVector3, [4 x i8] }>, align 8
  %6 = alloca <{ [2 x ptr], float, i8, [3 x i8], float, float, float, %class.btVector3, [4 x i8] }>, align 8
  %7 = alloca { [3 x ptr], %class.btVector3, float, ptr }, align 8
  %8 = alloca %class.btVector3, align 8
  %9 = alloca [2 x ptr], align 16
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !87
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %11, i64 %12, i32 1
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %11, i64 %14, i32 1
  %16 = getelementptr inbounds [4 x float], ptr %13, i64 0, i64 2
  %17 = load float, ptr %16, align 4, !tbaa !137
  %18 = getelementptr inbounds [4 x float], ptr %15, i64 0, i64 2
  %19 = load float, ptr %18, align 4, !tbaa !137
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #38
  %20 = fsub float %19, %17
  %21 = fmul float %20, %3
  %22 = load <2 x float>, ptr %13, align 4, !tbaa !137
  %23 = load <2 x float>, ptr %15, align 4, !tbaa !137
  %24 = fsub <2 x float> %23, %22
  %25 = insertelement <2 x float> poison, float %3, i64 0
  %26 = shufflevector <2 x float> %25, <2 x float> poison, <2 x i32> zeroinitializer
  %27 = fmul <2 x float> %24, %26
  %28 = fadd <2 x float> %22, %27
  %29 = fadd float %17, %21
  %30 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %29, i64 0
  store <2 x float> %28, ptr %8, align 8
  %31 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %8, i64 0, i32 1
  store <2 x float> %30, ptr %31, align 8
  %32 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %11, i64 %12, i32 3
  %33 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %11, i64 %14, i32 3
  %34 = getelementptr inbounds [4 x float], ptr %33, i64 0, i64 2
  %35 = load float, ptr %34, align 4, !tbaa !137
  %36 = getelementptr inbounds [4 x float], ptr %32, i64 0, i64 2
  %37 = load float, ptr %36, align 4, !tbaa !137
  %38 = fsub float %35, %37
  %39 = fmul float %38, %3
  %40 = load <2 x float>, ptr %33, align 4, !tbaa !137
  %41 = load <2 x float>, ptr %32, align 4, !tbaa !137
  %42 = fsub <2 x float> %40, %41
  %43 = fmul <2 x float> %42, %26
  %44 = fadd <2 x float> %41, %43
  %45 = fadd float %37, %39
  %46 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %45, i64 0
  call void @_ZN10btSoftBody10appendNodeERK9btVector3f(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %8, float noundef 1.000000e+00)
  call void @_ZN10btSoftBody10appendNodeERK9btVector3f(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %8, float noundef 1.000000e+00)
  %47 = load ptr, ptr %10, align 8, !tbaa !87
  %48 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %12
  %49 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %14
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9) #38
  %50 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %51 = load i32, ptr %50, align 4, !tbaa !88
  %52 = add nsw i32 %51, -2
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %53
  store ptr %54, ptr %9, align 16, !tbaa !219
  %55 = getelementptr inbounds ptr, ptr %9, i64 1
  %56 = add nsw i32 %51, -1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %57
  store ptr %58, ptr %55, align 8, !tbaa !219
  %59 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %53, i32 3
  store <2 x float> %44, ptr %59, align 8, !tbaa.struct !162
  %60 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %53, i32 3, i32 0, i64 2
  store <2 x float> %46, ptr %60, align 8, !tbaa.struct !164
  %61 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %57, i32 3
  store <2 x float> %44, ptr %61, align 8, !tbaa.struct !162
  %62 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 %57, i32 3, i32 0, i64 2
  store <2 x float> %46, ptr %62, align 8, !tbaa.struct !164
  %63 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %64 = load i32, ptr %63, align 4, !tbaa !92
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %105

66:                                               ; preds = %4
  %67 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %68 = zext i32 %64 to i64
  br label %69

69:                                               ; preds = %66, %101
  %70 = phi i64 [ 0, %66 ], [ %103, %101 ]
  %71 = phi i8 [ 0, %66 ], [ %102, %101 ]
  %72 = load ptr, ptr %67, align 8, !tbaa !91
  %73 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %72, i64 %70, i32 1
  %74 = load ptr, ptr %73, align 8, !tbaa !219
  %75 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %72, i64 %70, i32 1, i64 1
  %76 = load ptr, ptr %75, align 8, !tbaa !219
  %77 = icmp eq ptr %74, %48
  %78 = icmp eq ptr %76, %49
  %79 = and i1 %77, %78
  %80 = icmp eq ptr %74, %49
  %81 = icmp eq ptr %76, %48
  %82 = and i1 %80, %81
  %83 = select i1 %82, i32 1, i32 -1
  %84 = select i1 %79, i32 0, i32 %83
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %101, label %86

86:                                               ; preds = %69
  %87 = trunc i64 %70 to i32
  tail call void @_ZN10btSoftBody10appendLinkEiPNS_8MaterialE(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %87, ptr noundef null)
  %88 = load ptr, ptr %67, align 8, !tbaa !91
  %89 = load i32, ptr %63, align 4, !tbaa !92
  %90 = add nsw i32 %89, -1
  %91 = sext i32 %90 to i64
  %92 = zext i32 %84 to i64
  %93 = getelementptr inbounds [2 x ptr], ptr %9, i64 0, i64 %92
  %94 = load ptr, ptr %93, align 8, !tbaa !219
  %95 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %88, i64 %70, i32 1, i64 1
  store ptr %94, ptr %95, align 8, !tbaa !219
  %96 = sub nuw nsw i32 1, %84
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds [2 x ptr], ptr %9, i64 0, i64 %97
  %99 = load ptr, ptr %98, align 8, !tbaa !219
  %100 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %88, i64 %91, i32 1
  store ptr %99, ptr %100, align 8, !tbaa !219
  br label %101

101:                                              ; preds = %86, %69
  %102 = phi i8 [ 1, %86 ], [ %71, %69 ]
  %103 = add nuw nsw i64 %70, 1
  %104 = icmp eq i64 %103, %68
  br i1 %104, label %105, label %69

105:                                              ; preds = %101, %4
  %106 = phi i8 [ 0, %4 ], [ %102, %101 ]
  %107 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %108 = load i32, ptr %107, align 4, !tbaa !96
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %523

110:                                              ; preds = %105
  %111 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %112 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 3
  %113 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 6
  %114 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %115 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 17, i32 5
  %116 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 3
  %117 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 6
  %118 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  %119 = zext i32 %108 to i64
  br label %120

120:                                              ; preds = %110, %122
  %121 = phi i64 [ 0, %110 ], [ %123, %122 ]
  br label %125

122:                                              ; preds = %520
  %123 = add nuw nsw i64 %121, 1
  %124 = icmp eq i64 %123, %119
  br i1 %124, label %523, label %120

125:                                              ; preds = %120, %520
  %126 = phi i64 [ 0, %120 ], [ %521, %520 ]
  %127 = phi i64 [ 2, %120 ], [ %126, %520 ]
  %128 = load ptr, ptr %111, align 8, !tbaa !95
  %129 = and i64 %127, 4294967295
  %130 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %128, i64 %121, i32 1, i64 %129
  %131 = load ptr, ptr %130, align 8, !tbaa !219
  %132 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %128, i64 %121, i32 1, i64 %126
  %133 = load ptr, ptr %132, align 8, !tbaa !219
  %134 = icmp eq ptr %131, %48
  %135 = icmp eq ptr %133, %49
  %136 = and i1 %134, %135
  %137 = icmp eq ptr %131, %49
  %138 = icmp eq ptr %133, %48
  %139 = and i1 %137, %138
  %140 = select i1 %139, i32 1, i32 -1
  %141 = select i1 %136, i32 0, i32 %140
  %142 = icmp eq i32 %141, -1
  br i1 %142, label %143, label %145

143:                                              ; preds = %125
  %144 = add nuw nsw i64 %126, 1
  br label %520

145:                                              ; preds = %125
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %7)
  %146 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %128, i64 %121
  %147 = load <2 x ptr>, ptr %146, align 8
  %148 = getelementptr inbounds i8, ptr %146, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %7, ptr noundef nonnull align 8 dereferenceable(56) %148, i64 56, i1 false)
  %149 = load i32, ptr %107, align 4, !tbaa !96
  %150 = load i32, ptr %112, align 8, !tbaa !97
  %151 = icmp eq i32 %149, %150
  br i1 %151, label %152, label %203

152:                                              ; preds = %145
  %153 = icmp eq i32 %149, 0
  %154 = shl nsw i32 %149, 1
  %155 = select i1 %153, i32 1, i32 %154
  %156 = icmp slt i32 %149, %155
  br i1 %156, label %157, label %203

157:                                              ; preds = %152
  %158 = icmp eq i32 %155, 0
  br i1 %158, label %164, label %159

159:                                              ; preds = %157
  %160 = sext i32 %155 to i64
  %161 = mul nsw i64 %160, 72
  %162 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %161, i32 noundef 16)
  %163 = load i32, ptr %107, align 4, !tbaa !96
  br label %164

164:                                              ; preds = %159, %157
  %165 = phi i32 [ %163, %159 ], [ %149, %157 ]
  %166 = phi ptr [ %162, %159 ], [ null, %157 ]
  %167 = icmp sgt i32 %165, 0
  br i1 %167, label %168, label %194

168:                                              ; preds = %164
  %169 = zext i32 %165 to i64
  %170 = and i64 %169, 1
  %171 = icmp eq i32 %165, 1
  br i1 %171, label %187, label %172

172:                                              ; preds = %168
  %173 = and i64 %169, 4294967294
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ 0, %172 ], [ %184, %174 ]
  %176 = phi i64 [ 0, %172 ], [ %185, %174 ]
  %177 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %166, i64 %175
  %178 = load ptr, ptr %111, align 8, !tbaa !95
  %179 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %178, i64 %175
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %177, ptr noundef nonnull align 8 dereferenceable(72) %179, i64 72, i1 false)
  %180 = or i64 %175, 1
  %181 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %166, i64 %180
  %182 = load ptr, ptr %111, align 8, !tbaa !95
  %183 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %182, i64 %180
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %181, ptr noundef nonnull align 8 dereferenceable(72) %183, i64 72, i1 false)
  %184 = add nuw nsw i64 %175, 2
  %185 = add i64 %176, 2
  %186 = icmp eq i64 %185, %173
  br i1 %186, label %187, label %174

187:                                              ; preds = %174, %168
  %188 = phi i64 [ 0, %168 ], [ %184, %174 ]
  %189 = icmp eq i64 %170, 0
  br i1 %189, label %194, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %166, i64 %188
  %192 = load ptr, ptr %111, align 8, !tbaa !95
  %193 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %192, i64 %188
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %191, ptr noundef nonnull align 8 dereferenceable(72) %193, i64 72, i1 false)
  br label %194

194:                                              ; preds = %190, %187, %164
  %195 = load ptr, ptr %111, align 8, !tbaa !95
  %196 = icmp eq ptr %195, null
  %197 = load i8, ptr %113, align 8
  %198 = icmp eq i8 %197, 0
  %199 = select i1 %196, i1 true, i1 %198
  br i1 %199, label %201, label %200

200:                                              ; preds = %194
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %195)
  br label %201

201:                                              ; preds = %200, %194
  store i8 1, ptr %113, align 8, !tbaa !94
  store ptr %166, ptr %111, align 8, !tbaa !95
  store i32 %155, ptr %112, align 8, !tbaa !97
  %202 = load i32, ptr %107, align 4, !tbaa !96
  br label %203

203:                                              ; preds = %145, %152, %201
  %204 = phi ptr [ %166, %201 ], [ %128, %152 ], [ %128, %145 ]
  %205 = phi i32 [ %202, %201 ], [ %149, %152 ], [ %149, %145 ]
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %204, i64 %206
  store <2 x ptr> %147, ptr %207, align 8
  %208 = getelementptr inbounds i8, ptr %207, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %208, ptr noundef nonnull align 8 dereferenceable(56) %7, i64 56, i1 false)
  %209 = load i32, ptr %107, align 4, !tbaa !96
  %210 = add nsw i32 %209, 1
  store i32 %210, ptr %107, align 4, !tbaa !96
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %7)
  %211 = load ptr, ptr %111, align 8, !tbaa !95
  %212 = sext i32 %209 to i64
  %213 = sext i32 %141 to i64
  %214 = getelementptr inbounds [2 x ptr], ptr %9, i64 0, i64 %213
  %215 = load ptr, ptr %214, align 8, !tbaa !219
  %216 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %211, i64 %121, i32 1, i64 %126
  store ptr %215, ptr %216, align 8, !tbaa !219
  %217 = sub nsw i32 1, %141
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds [2 x ptr], ptr %9, i64 0, i64 %218
  %220 = load ptr, ptr %219, align 8, !tbaa !219
  %221 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %211, i64 %212, i32 1, i64 %129
  store ptr %220, ptr %221, align 8, !tbaa !219
  %222 = load ptr, ptr %9, align 16, !tbaa !219
  %223 = add nuw nsw i64 %126, 1
  %224 = icmp eq i64 %223, 3
  %225 = and i64 %223, 4294967295
  %226 = select i1 %224, i64 0, i64 %225
  %227 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %211, i64 %121, i32 1, i64 %226
  %228 = load ptr, ptr %227, align 8, !tbaa !219
  %229 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %211, i64 %121, i32 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !183
  %231 = load i32, ptr %63, align 4, !tbaa !92
  %232 = icmp sgt i32 %231, 0
  br i1 %232, label %233, label %265

233:                                              ; preds = %203
  %234 = load ptr, ptr %114, align 8, !tbaa !91
  %235 = zext i32 %231 to i64
  %236 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %234, i64 0, i32 1
  %237 = load ptr, ptr %236, align 8, !tbaa !219
  %238 = icmp eq ptr %237, %222
  %239 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %234, i64 0, i32 1, i64 1
  %240 = load ptr, ptr %239, align 8
  %241 = icmp eq ptr %240, %228
  %242 = select i1 %238, i1 %241, i1 false
  br i1 %242, label %370, label %243

243:                                              ; preds = %233
  %244 = icmp eq ptr %237, %228
  %245 = icmp eq ptr %240, %222
  %246 = select i1 %244, i1 %245, i1 false
  br i1 %246, label %370, label %247

247:                                              ; preds = %243, %259
  %248 = phi i64 [ %249, %259 ], [ 0, %243 ]
  %249 = add nuw nsw i64 %248, 1
  %250 = icmp eq i64 %249, %235
  br i1 %250, label %263, label %251

251:                                              ; preds = %247
  %252 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %234, i64 %249, i32 1
  %253 = load ptr, ptr %252, align 8, !tbaa !219
  %254 = icmp eq ptr %253, %222
  %255 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %234, i64 %249, i32 1, i64 1
  %256 = load ptr, ptr %255, align 8
  %257 = icmp eq ptr %256, %228
  %258 = select i1 %254, i1 %257, i1 false
  br i1 %258, label %263, label %259

259:                                              ; preds = %251
  %260 = icmp eq ptr %253, %228
  %261 = icmp eq ptr %256, %222
  %262 = select i1 %260, i1 %261, i1 false
  br i1 %262, label %263, label %247

263:                                              ; preds = %247, %251, %259
  %264 = icmp ult i64 %249, %235
  br i1 %264, label %372, label %265

265:                                              ; preds = %263, %203
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %6)
  %266 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy acquire, align 8
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %268, label %273, !prof !172

268:                                              ; preds = %265
  %269 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %273, label %271

271:                                              ; preds = %268
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8, !tbaa !173
  %272 = tail call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  br label %273

273:                                              ; preds = %271, %268, %265
  %274 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(52) %6, ptr noundef nonnull align 8 dereferenceable(52) getelementptr inbounds (%"struct.btSoftBody::Link", ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 52, i1 false)
  %275 = icmp eq ptr %230, null
  br i1 %275, label %276, label %279

276:                                              ; preds = %273
  %277 = load ptr, ptr %115, align 8, !tbaa !119
  %278 = load ptr, ptr %277, align 8, !tbaa !219
  br label %279

279:                                              ; preds = %276, %273
  %280 = phi ptr [ %278, %276 ], [ %230, %273 ]
  %281 = load i32, ptr %63, align 4, !tbaa !92
  %282 = load i32, ptr %116, align 8, !tbaa !93
  %283 = icmp eq i32 %281, %282
  br i1 %283, label %284, label %335

284:                                              ; preds = %279
  %285 = icmp eq i32 %281, 0
  %286 = shl nsw i32 %281, 1
  %287 = select i1 %285, i32 1, i32 %286
  %288 = icmp slt i32 %281, %287
  br i1 %288, label %289, label %335

289:                                              ; preds = %284
  %290 = icmp eq i32 %287, 0
  br i1 %290, label %296, label %291

291:                                              ; preds = %289
  %292 = sext i32 %287 to i64
  %293 = mul nsw i64 %292, 72
  %294 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %293, i32 noundef 16)
  %295 = load i32, ptr %63, align 4, !tbaa !92
  br label %296

296:                                              ; preds = %291, %289
  %297 = phi i32 [ %295, %291 ], [ %281, %289 ]
  %298 = phi ptr [ %294, %291 ], [ null, %289 ]
  %299 = icmp sgt i32 %297, 0
  br i1 %299, label %300, label %326

300:                                              ; preds = %296
  %301 = zext i32 %297 to i64
  %302 = and i64 %301, 1
  %303 = icmp eq i32 %297, 1
  br i1 %303, label %319, label %304

304:                                              ; preds = %300
  %305 = and i64 %301, 4294967294
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %316, %306 ]
  %308 = phi i64 [ 0, %304 ], [ %317, %306 ]
  %309 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %298, i64 %307
  %310 = load ptr, ptr %114, align 8, !tbaa !91
  %311 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %310, i64 %307
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %309, ptr noundef nonnull align 8 dereferenceable(72) %311, i64 72, i1 false)
  %312 = or i64 %307, 1
  %313 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %298, i64 %312
  %314 = load ptr, ptr %114, align 8, !tbaa !91
  %315 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %314, i64 %312
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %313, ptr noundef nonnull align 8 dereferenceable(72) %315, i64 72, i1 false)
  %316 = add nuw nsw i64 %307, 2
  %317 = add i64 %308, 2
  %318 = icmp eq i64 %317, %305
  br i1 %318, label %319, label %306

319:                                              ; preds = %306, %300
  %320 = phi i64 [ 0, %300 ], [ %316, %306 ]
  %321 = icmp eq i64 %302, 0
  br i1 %321, label %326, label %322

322:                                              ; preds = %319
  %323 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %298, i64 %320
  %324 = load ptr, ptr %114, align 8, !tbaa !91
  %325 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %324, i64 %320
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %323, ptr noundef nonnull align 8 dereferenceable(72) %325, i64 72, i1 false)
  br label %326

326:                                              ; preds = %322, %319, %296
  %327 = load ptr, ptr %114, align 8, !tbaa !91
  %328 = icmp eq ptr %327, null
  %329 = load i8, ptr %117, align 8
  %330 = icmp eq i8 %329, 0
  %331 = select i1 %328, i1 true, i1 %330
  br i1 %331, label %333, label %332

332:                                              ; preds = %326
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %327)
  br label %333

333:                                              ; preds = %332, %326
  store i8 1, ptr %117, align 8, !tbaa !90
  store ptr %298, ptr %114, align 8, !tbaa !91
  store i32 %287, ptr %116, align 8, !tbaa !93
  %334 = load i32, ptr %63, align 4, !tbaa !92
  br label %335

335:                                              ; preds = %279, %284, %333
  %336 = phi i32 [ %334, %333 ], [ %281, %284 ], [ %281, %279 ]
  %337 = load ptr, ptr %114, align 8, !tbaa !91
  %338 = sext i32 %336 to i64
  %339 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %337, i64 %338
  store ptr %274, ptr %339, align 8
  %340 = getelementptr inbounds i8, ptr %339, i64 8
  store ptr %280, ptr %340, align 8
  %341 = getelementptr inbounds i8, ptr %339, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %341, ptr noundef nonnull align 8 dereferenceable(56) %6, i64 56, i1 false)
  %342 = load i32, ptr %63, align 4, !tbaa !92
  %343 = add nsw i32 %342, 1
  store i32 %343, ptr %63, align 4, !tbaa !92
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %6)
  %344 = load ptr, ptr %114, align 8, !tbaa !91
  %345 = sext i32 %342 to i64
  %346 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %344, i64 %345, i32 1
  store ptr %222, ptr %346, align 8, !tbaa !219
  %347 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %344, i64 %345, i32 1, i64 1
  store ptr %228, ptr %347, align 8, !tbaa !219
  %348 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %222, i64 0, i32 1
  %349 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %228, i64 0, i32 1
  %350 = load float, ptr %348, align 4, !tbaa !137
  %351 = load float, ptr %349, align 4, !tbaa !137
  %352 = fsub float %350, %351
  %353 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %222, i64 0, i32 1, i32 0, i64 1
  %354 = load float, ptr %353, align 4, !tbaa !137
  %355 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %228, i64 0, i32 1, i32 0, i64 1
  %356 = load float, ptr %355, align 4, !tbaa !137
  %357 = fsub float %354, %356
  %358 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %222, i64 0, i32 1, i32 0, i64 2
  %359 = load float, ptr %358, align 4, !tbaa !137
  %360 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %228, i64 0, i32 1, i32 0, i64 2
  %361 = load float, ptr %360, align 4, !tbaa !137
  %362 = fsub float %359, %361
  %363 = fmul float %357, %357
  %364 = tail call float @llvm.fmuladd.f32(float %352, float %352, float %363)
  %365 = tail call float @llvm.fmuladd.f32(float %362, float %362, float %364)
  %366 = tail call float @llvm.sqrt.f32(float %365)
  %367 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %344, i64 %345, i32 2
  store float %366, ptr %367, align 8, !tbaa !239
  store i8 1, ptr %118, align 4, !tbaa !147
  %368 = load ptr, ptr %227, align 8, !tbaa !219
  %369 = load ptr, ptr %229, align 8, !tbaa !183
  br label %372

370:                                              ; preds = %243, %233
  %371 = load ptr, ptr %55, align 8, !tbaa !219
  br label %378

372:                                              ; preds = %263, %335
  %373 = phi i32 [ %231, %263 ], [ %343, %335 ]
  %374 = phi ptr [ %230, %263 ], [ %369, %335 ]
  %375 = phi ptr [ %228, %263 ], [ %368, %335 ]
  %376 = load ptr, ptr %55, align 8, !tbaa !219
  %377 = icmp sgt i32 %373, 0
  br i1 %377, label %378, label %414

378:                                              ; preds = %370, %372
  %379 = phi ptr [ %371, %370 ], [ %376, %372 ]
  %380 = phi ptr [ %228, %370 ], [ %375, %372 ]
  %381 = phi ptr [ %230, %370 ], [ %374, %372 ]
  %382 = phi i32 [ %231, %370 ], [ %373, %372 ]
  %383 = load ptr, ptr %114, align 8, !tbaa !91
  %384 = zext i32 %382 to i64
  %385 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %383, i64 0, i32 1
  %386 = load ptr, ptr %385, align 8, !tbaa !219
  %387 = icmp eq ptr %386, %379
  %388 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %383, i64 0, i32 1, i64 1
  %389 = load ptr, ptr %388, align 8
  %390 = icmp eq ptr %389, %380
  %391 = select i1 %387, i1 %390, i1 false
  br i1 %391, label %520, label %392

392:                                              ; preds = %378
  %393 = icmp eq ptr %386, %380
  %394 = icmp eq ptr %389, %379
  %395 = select i1 %393, i1 %394, i1 false
  br i1 %395, label %520, label %396

396:                                              ; preds = %392, %408
  %397 = phi i64 [ %398, %408 ], [ 0, %392 ]
  %398 = add nuw nsw i64 %397, 1
  %399 = icmp eq i64 %398, %384
  br i1 %399, label %412, label %400

400:                                              ; preds = %396
  %401 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %383, i64 %398, i32 1
  %402 = load ptr, ptr %401, align 8, !tbaa !219
  %403 = icmp eq ptr %402, %379
  %404 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %383, i64 %398, i32 1, i64 1
  %405 = load ptr, ptr %404, align 8
  %406 = icmp eq ptr %405, %380
  %407 = select i1 %403, i1 %406, i1 false
  br i1 %407, label %412, label %408

408:                                              ; preds = %400
  %409 = icmp eq ptr %402, %380
  %410 = icmp eq ptr %405, %379
  %411 = select i1 %409, i1 %410, i1 false
  br i1 %411, label %412, label %396

412:                                              ; preds = %396, %400, %408
  %413 = icmp ult i64 %398, %384
  br i1 %413, label %520, label %414

414:                                              ; preds = %412, %372
  %415 = phi ptr [ %379, %412 ], [ %376, %372 ]
  %416 = phi ptr [ %380, %412 ], [ %375, %372 ]
  %417 = phi ptr [ %381, %412 ], [ %374, %372 ]
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %5)
  %418 = load atomic i8, ptr @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy acquire, align 8
  %419 = icmp eq i8 %418, 0
  br i1 %419, label %420, label %425, !prof !172

420:                                              ; preds = %414
  %421 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %425, label %423

423:                                              ; preds = %420
  store ptr null, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8, !tbaa !173
  %424 = tail call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy) #38
  br label %425

425:                                              ; preds = %423, %420, %414
  %426 = load ptr, ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(52) %5, ptr noundef nonnull align 8 dereferenceable(52) getelementptr inbounds (%"struct.btSoftBody::Link", ptr @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy, i64 0, i32 1, i64 0), i64 52, i1 false)
  %427 = icmp eq ptr %417, null
  br i1 %427, label %428, label %431

428:                                              ; preds = %425
  %429 = load ptr, ptr %115, align 8, !tbaa !119
  %430 = load ptr, ptr %429, align 8, !tbaa !219
  br label %431

431:                                              ; preds = %428, %425
  %432 = phi ptr [ %430, %428 ], [ %417, %425 ]
  %433 = load i32, ptr %63, align 4, !tbaa !92
  %434 = load i32, ptr %116, align 8, !tbaa !93
  %435 = icmp eq i32 %433, %434
  br i1 %435, label %436, label %487

436:                                              ; preds = %431
  %437 = icmp eq i32 %433, 0
  %438 = shl nsw i32 %433, 1
  %439 = select i1 %437, i32 1, i32 %438
  %440 = icmp slt i32 %433, %439
  br i1 %440, label %441, label %487

441:                                              ; preds = %436
  %442 = icmp eq i32 %439, 0
  br i1 %442, label %448, label %443

443:                                              ; preds = %441
  %444 = sext i32 %439 to i64
  %445 = mul nsw i64 %444, 72
  %446 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %445, i32 noundef 16)
  %447 = load i32, ptr %63, align 4, !tbaa !92
  br label %448

448:                                              ; preds = %443, %441
  %449 = phi i32 [ %447, %443 ], [ %433, %441 ]
  %450 = phi ptr [ %446, %443 ], [ null, %441 ]
  %451 = icmp sgt i32 %449, 0
  br i1 %451, label %452, label %478

452:                                              ; preds = %448
  %453 = zext i32 %449 to i64
  %454 = and i64 %453, 1
  %455 = icmp eq i32 %449, 1
  br i1 %455, label %471, label %456

456:                                              ; preds = %452
  %457 = and i64 %453, 4294967294
  br label %458

458:                                              ; preds = %458, %456
  %459 = phi i64 [ 0, %456 ], [ %468, %458 ]
  %460 = phi i64 [ 0, %456 ], [ %469, %458 ]
  %461 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %450, i64 %459
  %462 = load ptr, ptr %114, align 8, !tbaa !91
  %463 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %462, i64 %459
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %461, ptr noundef nonnull align 8 dereferenceable(72) %463, i64 72, i1 false)
  %464 = or i64 %459, 1
  %465 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %450, i64 %464
  %466 = load ptr, ptr %114, align 8, !tbaa !91
  %467 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %466, i64 %464
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %465, ptr noundef nonnull align 8 dereferenceable(72) %467, i64 72, i1 false)
  %468 = add nuw nsw i64 %459, 2
  %469 = add i64 %460, 2
  %470 = icmp eq i64 %469, %457
  br i1 %470, label %471, label %458

471:                                              ; preds = %458, %452
  %472 = phi i64 [ 0, %452 ], [ %468, %458 ]
  %473 = icmp eq i64 %454, 0
  br i1 %473, label %478, label %474

474:                                              ; preds = %471
  %475 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %450, i64 %472
  %476 = load ptr, ptr %114, align 8, !tbaa !91
  %477 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %476, i64 %472
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %475, ptr noundef nonnull align 8 dereferenceable(72) %477, i64 72, i1 false)
  br label %478

478:                                              ; preds = %474, %471, %448
  %479 = load ptr, ptr %114, align 8, !tbaa !91
  %480 = icmp eq ptr %479, null
  %481 = load i8, ptr %117, align 8
  %482 = icmp eq i8 %481, 0
  %483 = select i1 %480, i1 true, i1 %482
  br i1 %483, label %485, label %484

484:                                              ; preds = %478
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %479)
  br label %485

485:                                              ; preds = %484, %478
  store i8 1, ptr %117, align 8, !tbaa !90
  store ptr %450, ptr %114, align 8, !tbaa !91
  store i32 %439, ptr %116, align 8, !tbaa !93
  %486 = load i32, ptr %63, align 4, !tbaa !92
  br label %487

487:                                              ; preds = %431, %436, %485
  %488 = phi i32 [ %486, %485 ], [ %433, %436 ], [ %433, %431 ]
  %489 = load ptr, ptr %114, align 8, !tbaa !91
  %490 = sext i32 %488 to i64
  %491 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %489, i64 %490
  store ptr %426, ptr %491, align 8
  %492 = getelementptr inbounds i8, ptr %491, i64 8
  store ptr %432, ptr %492, align 8
  %493 = getelementptr inbounds i8, ptr %491, i64 16
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %493, ptr noundef nonnull align 8 dereferenceable(56) %5, i64 56, i1 false)
  %494 = load i32, ptr %63, align 4, !tbaa !92
  %495 = add nsw i32 %494, 1
  store i32 %495, ptr %63, align 4, !tbaa !92
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %5)
  %496 = load ptr, ptr %114, align 8, !tbaa !91
  %497 = sext i32 %494 to i64
  %498 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %496, i64 %497, i32 1
  store ptr %415, ptr %498, align 8, !tbaa !219
  %499 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %496, i64 %497, i32 1, i64 1
  store ptr %416, ptr %499, align 8, !tbaa !219
  %500 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %415, i64 0, i32 1
  %501 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %416, i64 0, i32 1
  %502 = load float, ptr %500, align 4, !tbaa !137
  %503 = load float, ptr %501, align 4, !tbaa !137
  %504 = fsub float %502, %503
  %505 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %415, i64 0, i32 1, i32 0, i64 1
  %506 = load float, ptr %505, align 4, !tbaa !137
  %507 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %416, i64 0, i32 1, i32 0, i64 1
  %508 = load float, ptr %507, align 4, !tbaa !137
  %509 = fsub float %506, %508
  %510 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %415, i64 0, i32 1, i32 0, i64 2
  %511 = load float, ptr %510, align 4, !tbaa !137
  %512 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %416, i64 0, i32 1, i32 0, i64 2
  %513 = load float, ptr %512, align 4, !tbaa !137
  %514 = fsub float %511, %513
  %515 = fmul float %509, %509
  %516 = tail call float @llvm.fmuladd.f32(float %504, float %504, float %515)
  %517 = tail call float @llvm.fmuladd.f32(float %514, float %514, float %516)
  %518 = tail call float @llvm.sqrt.f32(float %517)
  %519 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %496, i64 %497, i32 2
  store float %518, ptr %519, align 8, !tbaa !239
  store i8 1, ptr %118, align 4, !tbaa !147
  br label %520

520:                                              ; preds = %143, %392, %487, %412, %378
  %521 = phi i64 [ %144, %143 ], [ %223, %392 ], [ %223, %487 ], [ %223, %412 ], [ %223, %378 ]
  %522 = icmp eq i64 %521, 3
  br i1 %522, label %122, label %125

523:                                              ; preds = %122, %105
  %524 = and i8 %106, 1
  %525 = icmp ne i8 %524, 0
  br i1 %525, label %536, label %526

526:                                              ; preds = %523
  %527 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %528 = load ptr, ptr %9, align 16, !tbaa !219
  %529 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %528, i64 0, i32 8
  %530 = load ptr, ptr %529, align 8, !tbaa !182
  tail call void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64) %527, ptr noundef %530)
  %531 = load ptr, ptr %55, align 8, !tbaa !219
  %532 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %531, i64 0, i32 8
  %533 = load ptr, ptr %532, align 8, !tbaa !182
  tail call void @_ZN6btDbvt6removeEP10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(64) %527, ptr noundef %533)
  %534 = load i32, ptr %50, align 4, !tbaa !88
  %535 = add nsw i32 %534, -2
  store i32 %535, ptr %50, align 4, !tbaa !88
  br label %536

536:                                              ; preds = %526, %523
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #38
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #38
  ret i1 %525
}

; Function Attrs: uwtable
define dso_local noundef zeroext i1 @_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr nocapture noundef nonnull align 8 dereferenceable(24) %3) local_unnamed_addr #4 align 2 {
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %6 = load i32, ptr %5, align 4, !tbaa !96
  %7 = icmp ne i32 %6, 0
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  %9 = load ptr, ptr %8, align 8
  %10 = icmp eq ptr %9, null
  %11 = select i1 %7, i1 %10, i1 false
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void @_ZN10btSoftBody18initializeFaceTreeEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  br label %13

13:                                               ; preds = %12, %4
  store ptr %0, ptr %3, align 8, !tbaa !398
  %14 = getelementptr inbounds %"struct.btSoftBody::sRayCast", ptr %3, i64 0, i32 3
  store float 1.000000e+00, ptr %14, align 8, !tbaa !401
  %15 = getelementptr inbounds %"struct.btSoftBody::sRayCast", ptr %3, i64 0, i32 1
  store i32 0, ptr %15, align 8, !tbaa !402
  %16 = getelementptr inbounds %"struct.btSoftBody::sRayCast", ptr %3, i64 0, i32 2
  store i32 -1, ptr %16, align 4, !tbaa !403
  %17 = tail call noundef i32 @_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(4) %14, ptr noundef nonnull align 4 dereferenceable(4) %15, ptr noundef nonnull align 4 dereferenceable(4) %16, i1 noundef zeroext false)
  %18 = icmp ne i32 %17, 0
  ret i1 %18
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody18initializeFaceTreeEv(ptr noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #4 align 2 {
  %2 = alloca %struct.btDbvtAabbMm, align 8
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  tail call void @_ZN6btDbvt5clearEv(ptr noundef nonnull align 8 dereferenceable(64) %3)
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !96
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %9 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %2, i64 0, i32 1
  %10 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %11 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %12 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 3
  %13 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %2, i64 0, i32 1, i32 0, i64 1
  %14 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %2, i64 0, i32 1, i32 0, i64 2
  %15 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %2, i64 0, i32 1, i32 0, i64 3
  br label %17

16:                                               ; preds = %87, %1
  ret void

17:                                               ; preds = %7, %87
  %18 = phi i64 [ 0, %7 ], [ %100, %87 ]
  %19 = load ptr, ptr %8, align 8, !tbaa !95
  %20 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %18
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !404)
  %21 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %18, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !219, !noalias !404
  %23 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %22, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %18, i32 1, i64 1
  %25 = load ptr, ptr %24, align 8, !tbaa !219, !noalias !404
  %26 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1
  %27 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %18, i32 1, i64 2
  %28 = load ptr, ptr %27, align 8, !tbaa !219, !noalias !404
  %29 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %28, i64 0, i32 1
  call void @llvm.experimental.noalias.scope.decl(metadata !407)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, ptr noundef nonnull align 4 dereferenceable(16) %23, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %23, i64 16, i1 false)
  %30 = load float, ptr %9, align 8, !tbaa !137, !alias.scope !410
  %31 = load float, ptr %2, align 8, !tbaa !137, !alias.scope !410
  %32 = load float, ptr %10, align 4, !tbaa !137, !alias.scope !410
  %33 = load float, ptr %11, align 8, !tbaa !137, !alias.scope !410
  %34 = load float, ptr %12, align 4, !tbaa !137, !alias.scope !410
  %35 = load float, ptr %13, align 4, !tbaa !137, !alias.scope !410
  %36 = load float, ptr %14, align 8, !tbaa !137, !alias.scope !410
  %37 = load float, ptr %15, align 4, !tbaa !137, !alias.scope !410
  %38 = load float, ptr %26, align 4, !tbaa !137, !noalias !410
  %39 = fcmp olt float %38, %31
  br i1 %39, label %40, label %41

40:                                               ; preds = %17
  store float %38, ptr %2, align 8, !tbaa !137, !alias.scope !410
  br label %41

41:                                               ; preds = %40, %17
  %42 = phi float [ %38, %40 ], [ %31, %17 ]
  %43 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1, i32 0, i64 1
  %44 = load float, ptr %43, align 4, !tbaa !137, !noalias !410
  %45 = fcmp olt float %44, %32
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  store float %44, ptr %10, align 4, !tbaa !137, !alias.scope !410
  br label %47

47:                                               ; preds = %46, %41
  %48 = phi float [ %44, %46 ], [ %32, %41 ]
  %49 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1, i32 0, i64 2
  %50 = load float, ptr %49, align 4, !tbaa !137, !noalias !410
  %51 = fcmp olt float %50, %33
  br i1 %51, label %52, label %53

52:                                               ; preds = %47
  store float %50, ptr %11, align 8, !tbaa !137, !alias.scope !410
  br label %53

53:                                               ; preds = %52, %47
  %54 = phi float [ %50, %52 ], [ %33, %47 ]
  %55 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1, i32 0, i64 3
  %56 = load float, ptr %55, align 4, !tbaa !137, !noalias !410
  %57 = fcmp olt float %56, %34
  br i1 %57, label %58, label %59

58:                                               ; preds = %53
  store float %56, ptr %12, align 4, !tbaa !137, !alias.scope !410
  br label %59

59:                                               ; preds = %58, %53
  %60 = phi float [ %34, %53 ], [ %56, %58 ]
  %61 = fcmp olt float %30, %38
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  store float %38, ptr %9, align 8, !tbaa !137, !alias.scope !410
  br label %63

63:                                               ; preds = %62, %59
  %64 = phi float [ %38, %62 ], [ %30, %59 ]
  %65 = fcmp olt float %35, %44
  %66 = select i1 %65, float %44, float %35
  %67 = fcmp olt float %36, %50
  %68 = select i1 %67, float %50, float %36
  %69 = fcmp olt float %37, %56
  br i1 %69, label %70, label %71

70:                                               ; preds = %63
  store float %56, ptr %15, align 4, !tbaa !137, !alias.scope !410
  br label %71

71:                                               ; preds = %70, %63
  %72 = phi float [ %37, %63 ], [ %56, %70 ]
  %73 = load <2 x float>, ptr %29, align 4, !tbaa !137, !noalias !410
  %74 = insertelement <2 x float> poison, float %42, i64 0
  %75 = insertelement <2 x float> %74, float %48, i64 1
  %76 = fcmp olt <2 x float> %73, %75
  %77 = select <2 x i1> %76, <2 x float> %73, <2 x float> %75
  %78 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %28, i64 0, i32 1, i32 0, i64 2
  %79 = load float, ptr %78, align 4, !tbaa !137, !noalias !410
  %80 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %28, i64 0, i32 1, i32 0, i64 3
  %81 = load float, ptr %80, align 4, !tbaa !137, !noalias !410
  %82 = fcmp olt float %81, %60
  br i1 %82, label %83, label %84

83:                                               ; preds = %71
  store float %81, ptr %12, align 4, !tbaa !137, !alias.scope !410
  br label %84

84:                                               ; preds = %83, %71
  %85 = fcmp olt float %72, %81
  br i1 %85, label %86, label %87

86:                                               ; preds = %84
  store float %81, ptr %15, align 4, !tbaa !137, !alias.scope !410
  br label %87

87:                                               ; preds = %84, %86
  %88 = fcmp olt float %68, %79
  %89 = select i1 %88, float %79, float %68
  %90 = fcmp olt float %79, %54
  %91 = select i1 %90, float %79, float %54
  store <2 x float> %77, ptr %2, align 8, !tbaa !137, !alias.scope !404
  store float %91, ptr %11, align 8, !tbaa !137, !alias.scope !404
  %92 = insertelement <2 x float> poison, float %64, i64 0
  %93 = insertelement <2 x float> %92, float %66, i64 1
  %94 = fcmp olt <2 x float> %93, %73
  %95 = select <2 x i1> %94, <2 x float> %73, <2 x float> %93
  %96 = fadd <2 x float> %95, zeroinitializer
  store <2 x float> %96, ptr %9, align 8, !tbaa !137, !alias.scope !404
  %97 = fadd float %89, 0.000000e+00
  store float %97, ptr %14, align 8, !tbaa !137, !alias.scope !404
  %98 = call noundef ptr @_ZN6btDbvt6insertERK12btDbvtAabbMmPv(ptr noundef nonnull align 8 dereferenceable(64) %3, ptr noundef nonnull align 4 dereferenceable(32) %2, ptr noundef nonnull %20)
  %99 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %19, i64 %18, i32 4
  store ptr %98, ptr %99, align 8, !tbaa !232
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #38
  %100 = add nuw nsw i64 %18, 1
  %101 = load i32, ptr %4, align 4, !tbaa !96
  %102 = sext i32 %101 to i64
  %103 = icmp slt i64 %100, %102
  br i1 %103, label %17, label %16
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %4, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %5, i1 noundef zeroext %6) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %8 = alloca %class.btVector3, align 8
  %9 = alloca %"struct.btSoftBody::RayFromToCaster", align 8
  br i1 %6, label %14, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  %12 = load ptr, ptr %11, align 8, !tbaa !411
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %87

14:                                               ; preds = %10, %7
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #38
  %15 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %16 = load float, ptr %15, align 4, !tbaa !137
  %17 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %18 = load float, ptr %17, align 4, !tbaa !137
  %19 = fsub float %16, %18
  %20 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %19, i64 0
  %21 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %8, i64 0, i32 1
  store <2 x float> %20, ptr %21, align 8
  %22 = load <2 x float>, ptr %2, align 4, !tbaa !137
  %23 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %24 = fsub <2 x float> %22, %23
  %25 = fmul <2 x float> %24, %24
  %26 = extractelement <2 x float> %25, i64 1
  %27 = extractelement <2 x float> %24, i64 0
  %28 = tail call float @llvm.fmuladd.f32(float %27, float %27, float %26)
  %29 = tail call float @llvm.fmuladd.f32(float %19, float %19, float %28)
  %30 = tail call float @llvm.sqrt.f32(float %29)
  %31 = fdiv float 1.000000e+00, %30
  %32 = insertelement <2 x float> poison, float %31, i64 0
  %33 = shufflevector <2 x float> %32, <2 x float> poison, <2 x i32> zeroinitializer
  %34 = fmul <2 x float> %33, %24
  store <2 x float> %34, ptr %8, align 8, !tbaa !137
  %35 = fmul float %19, %31
  store float %35, ptr %21, align 8, !tbaa !137
  %36 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %37 = load i32, ptr %36, align 4, !tbaa !96
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %62

39:                                               ; preds = %14
  %40 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %41 = zext i32 %37 to i64
  br i1 %6, label %42, label %64

42:                                               ; preds = %39, %42
  %43 = phi i64 [ %60, %42 ], [ 0, %39 ]
  %44 = phi i32 [ %59, %42 ], [ 0, %39 ]
  %45 = load ptr, ptr %40, align 8, !tbaa !95
  %46 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %45, i64 %43, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !219
  %48 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %47, i64 0, i32 1
  %49 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %45, i64 %43, i32 1, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !219
  %51 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 0, i32 1
  %52 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %45, i64 %43, i32 1, i64 2
  %53 = load ptr, ptr %52, align 8, !tbaa !219
  %54 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %53, i64 0, i32 1
  %55 = load float, ptr %3, align 4, !tbaa !137
  %56 = call noundef float @_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f(ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %8, ptr noundef nonnull align 4 dereferenceable(16) %48, ptr noundef nonnull align 4 dereferenceable(16) %51, ptr noundef nonnull align 4 dereferenceable(16) %54, float noundef %55)
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = zext i1 %57 to i32
  %59 = add nuw nsw i32 %44, %58
  %60 = add nuw nsw i64 %43, 1
  %61 = icmp eq i64 %60, %41
  br i1 %61, label %62, label %42

62:                                               ; preds = %83, %42, %14
  %63 = phi i32 [ 0, %14 ], [ %59, %42 ], [ %84, %83 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #38
  br label %118

64:                                               ; preds = %39, %83
  %65 = phi i64 [ %85, %83 ], [ 0, %39 ]
  %66 = phi i32 [ %84, %83 ], [ 0, %39 ]
  %67 = load ptr, ptr %40, align 8, !tbaa !95
  %68 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %67, i64 %65, i32 1
  %69 = load ptr, ptr %68, align 8, !tbaa !219
  %70 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %69, i64 0, i32 1
  %71 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %67, i64 %65, i32 1, i64 1
  %72 = load ptr, ptr %71, align 8, !tbaa !219
  %73 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %72, i64 0, i32 1
  %74 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %67, i64 %65, i32 1, i64 2
  %75 = load ptr, ptr %74, align 8, !tbaa !219
  %76 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %75, i64 0, i32 1
  %77 = load float, ptr %3, align 4, !tbaa !137
  %78 = call noundef float @_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f(ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %8, ptr noundef nonnull align 4 dereferenceable(16) %70, ptr noundef nonnull align 4 dereferenceable(16) %73, ptr noundef nonnull align 4 dereferenceable(16) %76, float noundef %77)
  %79 = fcmp ogt float %78, 0.000000e+00
  br i1 %79, label %80, label %83

80:                                               ; preds = %64
  %81 = add nsw i32 %66, 1
  store i32 3, ptr %4, align 4, !tbaa !412
  %82 = trunc i64 %65 to i32
  store i32 %82, ptr %5, align 4, !tbaa !140
  store float %78, ptr %3, align 4, !tbaa !137
  br label %83

83:                                               ; preds = %80, %64
  %84 = phi i32 [ %81, %80 ], [ %66, %64 ]
  %85 = add nuw nsw i64 %65, 1
  %86 = icmp eq i64 %85, %41
  br i1 %86, label %62, label %64

87:                                               ; preds = %10
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %9) #38
  %88 = load float, ptr %3, align 4, !tbaa !137
  store ptr getelementptr inbounds ({ [9 x ptr] }, ptr @_ZTVN10btSoftBody15RayFromToCasterE, i64 0, inrange i32 0, i64 2), ptr %9, align 8, !tbaa !5
  %89 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %9, i64 0, i32 1
  %90 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %9, i64 0, i32 2
  %91 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %9, i64 0, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %89, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  %92 = load <2 x float>, ptr %2, align 4, !tbaa !137
  %93 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %94 = fsub <2 x float> %92, %93
  %95 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %96 = load float, ptr %95, align 4, !tbaa !137
  %97 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %98 = load float, ptr %97, align 4, !tbaa !137
  %99 = fsub float %96, %98
  %100 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %99, i64 0
  store <2 x float> %94, ptr %91, align 8, !tbaa.struct !162
  %101 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %9, i64 0, i32 3, i32 0, i64 2
  store <2 x float> %100, ptr %101, align 8, !tbaa.struct !164
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %90, ptr noundef nonnull align 4 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !162
  %102 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %9, i64 0, i32 4
  store float %88, ptr %102, align 8, !tbaa !413
  %103 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %9, i64 0, i32 6
  store ptr null, ptr %103, align 8, !tbaa !416
  %104 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %9, i64 0, i32 7
  store i32 0, ptr %104, align 8, !tbaa !417
  call void @_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE(ptr noundef nonnull %12, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(8) %9)
  %105 = load ptr, ptr %103, align 8, !tbaa !416
  %106 = icmp eq ptr %105, null
  br i1 %106, label %116, label %107

107:                                              ; preds = %87
  %108 = load float, ptr %102, align 8, !tbaa !413
  store float %108, ptr %3, align 4, !tbaa !137
  store i32 3, ptr %4, align 4, !tbaa !412
  %109 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %110 = load ptr, ptr %109, align 8, !tbaa !95
  %111 = ptrtoint ptr %105 to i64
  %112 = ptrtoint ptr %110 to i64
  %113 = sub i64 %111, %112
  %114 = sdiv exact i64 %113, 72
  %115 = trunc i64 %114 to i32
  store i32 %115, ptr %5, align 4, !tbaa !140
  br label %116

116:                                              ; preds = %107, %87
  %117 = phi i32 [ 1, %107 ], [ 0, %87 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %9) #38
  br label %118

118:                                              ; preds = %116, %62
  %119 = phi i32 [ %63, %62 ], [ %117, %116 ]
  ret i32 %119
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody13predictMotionEf(ptr noundef nonnull align 8 dereferenceable(1496) %0, float noundef %1) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.btDbvtAabbMm, align 8
  %4 = alloca %class.btVector3, align 8
  %5 = alloca %class.btVector3, align 8
  %6 = alloca %"struct.btSoftBody::RContact", align 8
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 20
  %8 = load i8, ptr %7, align 4, !tbaa !147, !range !191, !noundef !192
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %17, label %10

10:                                               ; preds = %2
  store i8 0, ptr %7, align 4, !tbaa !147
  tail call void @_ZN10btSoftBody15updateConstantsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %11 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  tail call void @_ZN6btDbvt5clearEv(ptr noundef nonnull align 8 dereferenceable(64) %11)
  %12 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 25
  %13 = load i32, ptr %12, align 4, !tbaa !141
  %14 = and i32 %13, 16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %10
  tail call void @_ZN10btSoftBody18initializeFaceTreeEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  br label %17

17:                                               ; preds = %10, %16, %2
  %18 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 20
  %19 = load float, ptr %18, align 8, !tbaa !139
  %20 = fmul float %19, %1
  %21 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  store float %20, ptr %21, align 8, !tbaa !418
  %22 = fdiv float 1.000000e+00, %20
  %23 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 1
  store float %22, ptr %23, align 4, !tbaa !419
  %24 = fmul float %20, 3.000000e+00
  %25 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 2
  store float %24, ptr %25, align 8, !tbaa !420
  %26 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %27 = load ptr, ptr %26, align 8, !tbaa !157
  %28 = load ptr, ptr %27, align 8, !tbaa !5
  %29 = getelementptr inbounds ptr, ptr %28, i64 11
  %30 = load ptr, ptr %29, align 8
  %31 = tail call noundef float %30(ptr noundef nonnull align 8 dereferenceable(24) %27)
  %32 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 3
  store float %31, ptr %32, align 4, !tbaa !384
  %33 = fmul float %31, 2.500000e-01
  %34 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 4
  store float %33, ptr %34, align 8, !tbaa !421
  %35 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  %36 = load ptr, ptr %35, align 8, !tbaa !42
  %37 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %36, i64 0, i32 6
  %38 = load float, ptr %21, align 8, !tbaa !137
  %39 = load <2 x float>, ptr %37, align 4, !tbaa !137
  %40 = insertelement <2 x float> poison, float %38, i64 0
  %41 = shufflevector <2 x float> %40, <2 x float> poison, <2 x i32> zeroinitializer
  %42 = fmul <2 x float> %41, %39
  %43 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %36, i64 0, i32 6, i32 0, i64 2
  %44 = load float, ptr %43, align 4, !tbaa !137
  %45 = fmul float %38, %44
  %46 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %47 = load i32, ptr %46, align 4, !tbaa !88
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %68

49:                                               ; preds = %17
  %50 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %51 = load ptr, ptr %50, align 8, !tbaa !87
  %52 = zext i32 %47 to i64
  br label %53

53:                                               ; preds = %65, %49
  %54 = phi i64 [ 0, %49 ], [ %66, %65 ]
  %55 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %51, i64 %54, i32 6
  %56 = load float, ptr %55, align 8, !tbaa !174
  %57 = fcmp ogt float %56, 0.000000e+00
  br i1 %57, label %58, label %65

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %51, i64 %54, i32 3
  %60 = load <2 x float>, ptr %59, align 4, !tbaa !137
  %61 = fadd <2 x float> %42, %60
  store <2 x float> %61, ptr %59, align 4, !tbaa !137
  %62 = getelementptr inbounds [4 x float], ptr %59, i64 0, i64 2
  %63 = load float, ptr %62, align 4, !tbaa !137
  %64 = fadd float %45, %63
  store float %64, ptr %62, align 4, !tbaa !137
  br label %65

65:                                               ; preds = %58, %53
  %66 = add nuw nsw i64 %54, 1
  %67 = icmp eq i64 %66, %52
  br i1 %67, label %68, label %53

68:                                               ; preds = %65, %17
  tail call void @_ZN10btSoftBody11applyForcesEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %69 = load i32, ptr %46, align 4, !tbaa !88
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %116

71:                                               ; preds = %68
  %72 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %73 = zext i32 %69 to i64
  br label %74

74:                                               ; preds = %71, %74
  %75 = phi i64 [ 0, %71 ], [ %114, %74 ]
  %76 = load ptr, ptr %72, align 8, !tbaa !87
  %77 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %76, i64 %75, i32 1
  %78 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %76, i64 %75, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %78, ptr noundef nonnull align 8 dereferenceable(16) %77, i64 16, i1 false), !tbaa.struct !162
  %79 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %76, i64 %75, i32 4
  %80 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %76, i64 %75, i32 6
  %81 = getelementptr inbounds [4 x float], ptr %79, i64 0, i64 1
  %82 = getelementptr inbounds [4 x float], ptr %79, i64 0, i64 2
  %83 = load float, ptr %82, align 4, !tbaa !137
  %84 = load float, ptr %21, align 8, !tbaa !137
  %85 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %76, i64 %75, i32 3
  %86 = getelementptr inbounds [4 x float], ptr %85, i64 0, i64 2
  %87 = load float, ptr %86, align 4, !tbaa !137
  %88 = load float, ptr %79, align 4, !tbaa !137
  %89 = load float, ptr %80, align 4, !tbaa !137
  %90 = load float, ptr %81, align 4, !tbaa !137
  %91 = insertelement <2 x float> poison, float %88, i64 0
  %92 = insertelement <2 x float> %91, float %89, i64 1
  %93 = insertelement <2 x float> poison, float %89, i64 0
  %94 = insertelement <2 x float> %93, float %90, i64 1
  %95 = fmul <2 x float> %92, %94
  %96 = fmul float %89, %83
  %97 = insertelement <2 x float> poison, float %84, i64 0
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> zeroinitializer
  %99 = fmul <2 x float> %95, %98
  %100 = fmul float %84, %96
  %101 = load <2 x float>, ptr %85, align 4, !tbaa !137
  %102 = fadd <2 x float> %99, %101
  store <2 x float> %102, ptr %85, align 4, !tbaa !137
  %103 = fadd float %100, %87
  store float %103, ptr %86, align 4, !tbaa !137
  %104 = load float, ptr %21, align 8, !tbaa !137
  %105 = insertelement <2 x float> poison, float %104, i64 0
  %106 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> zeroinitializer
  %107 = fmul <2 x float> %102, %106
  %108 = fmul float %103, %104
  %109 = load <2 x float>, ptr %77, align 4, !tbaa !137
  %110 = fadd <2 x float> %107, %109
  store <2 x float> %110, ptr %77, align 4, !tbaa !137
  %111 = getelementptr inbounds [4 x float], ptr %77, i64 0, i64 2
  %112 = load float, ptr %111, align 4, !tbaa !137
  %113 = fadd float %108, %112
  store float %113, ptr %111, align 4, !tbaa !137
  %114 = add nuw nsw i64 %75, 1
  %115 = icmp eq i64 %114, %73
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %79, i8 0, i64 16, i1 false)
  br i1 %115, label %116, label %74

116:                                              ; preds = %74, %68
  tail call void @_ZN10btSoftBody14updateClustersEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %117 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %118 = load ptr, ptr %117, align 8, !tbaa !161
  %119 = icmp eq ptr %118, null
  br i1 %119, label %157, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %118, i64 0, i32 1
  %122 = load ptr, ptr %26, align 8, !tbaa !157
  %123 = load ptr, ptr %122, align 8, !tbaa !5
  %124 = getelementptr inbounds ptr, ptr %123, i64 11
  %125 = load ptr, ptr %124, align 8
  %126 = tail call noundef float %125(ptr noundef nonnull align 8 dereferenceable(24) %122)
  %127 = load <2 x float>, ptr %118, align 4, !tbaa !137
  %128 = insertelement <2 x float> poison, float %126, i64 0
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer
  %130 = fsub <2 x float> %127, %129
  %131 = getelementptr inbounds [4 x float], ptr %118, i64 0, i64 2
  %132 = load float, ptr %131, align 4, !tbaa !137
  %133 = fsub float %132, %126
  %134 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %133, i64 0
  %135 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  store <2 x float> %130, ptr %135, align 4, !tbaa.struct !162
  %136 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 0, i32 0, i64 2
  store <2 x float> %134, ptr %136, align 4, !tbaa.struct !164
  %137 = load <2 x float>, ptr %121, align 4, !tbaa !137
  %138 = fadd <2 x float> %129, %137
  %139 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %118, i64 0, i32 1, i32 0, i64 2
  %140 = load float, ptr %139, align 4, !tbaa !137
  %141 = fadd float %126, %140
  %142 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %141, i64 0
  %143 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1
  store <2 x float> %138, ptr %143, align 4, !tbaa.struct !162
  %144 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1, i32 0, i64 2
  store <2 x float> %142, ptr %144, align 4, !tbaa.struct !164
  %145 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 8
  %146 = load ptr, ptr %145, align 8, !tbaa !165
  %147 = icmp eq ptr %146, null
  br i1 %147, label %159, label %148

148:                                              ; preds = %120
  %149 = load ptr, ptr %35, align 8, !tbaa !42
  %150 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %149, i64 0, i32 4
  %151 = load ptr, ptr %150, align 8, !tbaa !166
  %152 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %149, i64 0, i32 5
  %153 = load ptr, ptr %152, align 8, !tbaa !171
  %154 = load ptr, ptr %151, align 8, !tbaa !5
  %155 = getelementptr inbounds ptr, ptr %154, i64 4
  %156 = load ptr, ptr %155, align 8
  tail call void %156(ptr noundef nonnull align 8 dereferenceable(8) %151, ptr noundef nonnull %146, ptr noundef nonnull align 4 dereferenceable(16) %135, ptr noundef nonnull align 4 dereferenceable(16) %143, ptr noundef %153)
  br label %159

157:                                              ; preds = %116
  %158 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %158, i8 0, i64 32, i1 false)
  br label %159

159:                                              ; preds = %120, %148, %157
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #38
  %160 = load i32, ptr %46, align 4, !tbaa !88
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %162, label %201

162:                                              ; preds = %159
  %163 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %164 = getelementptr inbounds i8, ptr %3, i64 8
  %165 = getelementptr inbounds i8, ptr %3, i64 16
  %166 = getelementptr inbounds i8, ptr %3, i64 24
  %167 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %4, i64 0, i32 1
  %168 = zext i32 %160 to i64
  br label %169

169:                                              ; preds = %162, %169
  %170 = phi i64 [ 0, %162 ], [ %199, %169 ]
  %171 = load ptr, ptr %163, align 8, !tbaa !87
  %172 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %171, i64 %170, i32 1
  %173 = load float, ptr %32, align 4, !tbaa !384
  %174 = getelementptr inbounds [4 x float], ptr %172, i64 0, i64 2
  %175 = load float, ptr %174, align 4, !tbaa !137, !noalias !422
  %176 = fsub float %175, %173
  %177 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %176, i64 0
  %178 = load <2 x float>, ptr %172, align 4, !tbaa !137, !noalias !422
  %179 = insertelement <2 x float> poison, float %173, i64 0
  %180 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> zeroinitializer
  %181 = fsub <2 x float> %178, %180
  %182 = fadd <2 x float> %180, %178
  %183 = fadd float %173, %175
  %184 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %183, i64 0
  store <2 x float> %181, ptr %3, align 8, !tbaa.struct !297
  store <2 x float> %177, ptr %164, align 8, !tbaa.struct !298
  store <2 x float> %182, ptr %165, align 8, !tbaa.struct !162
  store <2 x float> %184, ptr %166, align 8, !tbaa.struct !164
  %185 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %171, i64 %170, i32 8
  %186 = load ptr, ptr %185, align 8, !tbaa !182
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #38
  %187 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %171, i64 %170, i32 3
  %188 = load float, ptr %25, align 8, !tbaa !137
  %189 = load <2 x float>, ptr %187, align 4, !tbaa !137
  %190 = insertelement <2 x float> poison, float %188, i64 0
  %191 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> zeroinitializer
  %192 = fmul <2 x float> %191, %189
  %193 = getelementptr inbounds [4 x float], ptr %187, i64 0, i64 2
  %194 = load float, ptr %193, align 4, !tbaa !137
  %195 = fmul float %188, %194
  %196 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %195, i64 0
  store <2 x float> %192, ptr %4, align 8
  store <2 x float> %196, ptr %167, align 8
  %197 = load float, ptr %34, align 8, !tbaa !421
  %198 = call noundef zeroext i1 @_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f(ptr noundef nonnull align 8 dereferenceable(64) %117, ptr noundef %186, ptr noundef nonnull align 4 dereferenceable(32) %3, ptr noundef nonnull align 4 dereferenceable(16) %4, float noundef %197)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #38
  %199 = add nuw nsw i64 %170, 1
  %200 = icmp eq i64 %199, %168
  br i1 %200, label %201, label %169

201:                                              ; preds = %169, %159
  %202 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  %203 = load ptr, ptr %202, align 8, !tbaa !411
  %204 = icmp eq ptr %203, null
  br i1 %204, label %307, label %205

205:                                              ; preds = %201
  %206 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %207 = load i32, ptr %206, align 4, !tbaa !96
  %208 = icmp sgt i32 %207, 0
  br i1 %208, label %209, label %307

209:                                              ; preds = %205
  %210 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %211 = getelementptr inbounds i8, ptr %3, i64 8
  %212 = getelementptr inbounds i8, ptr %3, i64 12
  %213 = getelementptr inbounds i8, ptr %3, i64 16
  %214 = getelementptr inbounds i8, ptr %3, i64 24
  %215 = getelementptr inbounds i8, ptr %3, i64 28
  %216 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %5, i64 0, i32 1
  br label %217

217:                                              ; preds = %209, %217
  %218 = phi i64 [ 0, %209 ], [ %303, %217 ]
  %219 = load ptr, ptr %210, align 8, !tbaa !95
  %220 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %219, i64 %218, i32 1
  %221 = load ptr, ptr %220, align 8, !tbaa !219
  %222 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %221, i64 0, i32 3
  %223 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %219, i64 %218, i32 1, i64 1
  %224 = load ptr, ptr %223, align 8, !tbaa !219
  %225 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %224, i64 0, i32 3
  %226 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %221, i64 0, i32 3, i32 0, i64 2
  %227 = load float, ptr %226, align 4, !tbaa !137
  %228 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %224, i64 0, i32 3, i32 0, i64 2
  %229 = load float, ptr %228, align 4, !tbaa !137
  %230 = fadd float %227, %229
  %231 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %219, i64 %218, i32 1, i64 2
  %232 = load ptr, ptr %231, align 8, !tbaa !219
  %233 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %232, i64 0, i32 3
  %234 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %232, i64 0, i32 3, i32 0, i64 2
  %235 = load float, ptr %234, align 4, !tbaa !137
  %236 = fadd float %230, %235
  %237 = fmul float %236, 0x3FD5555560000000
  %238 = load float, ptr %32, align 4, !tbaa !384
  %239 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %221, i64 0, i32 1
  %240 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %224, i64 0, i32 1
  %241 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %232, i64 0, i32 1
  %242 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %221, i64 0, i32 1, i32 0, i64 2
  %243 = load float, ptr %242, align 4, !tbaa.struct !164
  %244 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %221, i64 0, i32 1, i32 0, i64 3
  %245 = load float, ptr %244, align 4, !tbaa.struct !318
  %246 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %224, i64 0, i32 1, i32 0, i64 2
  %247 = load float, ptr %246, align 4, !tbaa !137, !noalias !427
  %248 = fcmp olt float %247, %243
  %249 = select i1 %248, float %247, float %243
  %250 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %224, i64 0, i32 1, i32 0, i64 3
  %251 = load float, ptr %250, align 4, !tbaa !137, !noalias !427
  %252 = fcmp olt float %251, %245
  %253 = select i1 %252, float %251, float %245
  %254 = fcmp olt float %243, %247
  %255 = select i1 %254, float %247, float %243
  %256 = fcmp olt float %245, %251
  %257 = select i1 %256, float %251, float %245
  %258 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %232, i64 0, i32 1, i32 0, i64 2
  %259 = load float, ptr %258, align 4, !tbaa !137, !noalias !427
  %260 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %232, i64 0, i32 1, i32 0, i64 3
  %261 = load float, ptr %260, align 4, !tbaa !137, !noalias !427
  %262 = fcmp olt float %261, %253
  %263 = select i1 %262, float %261, float %253
  %264 = fcmp olt float %257, %261
  %265 = select i1 %264, float %261, float %257
  %266 = fcmp olt float %255, %259
  %267 = select i1 %266, float %259, float %255
  %268 = fcmp olt float %259, %249
  %269 = select i1 %268, float %259, float %249
  %270 = fsub float %269, %238
  %271 = fadd float %238, %267
  %272 = load <2 x float>, ptr %239, align 4
  %273 = load <2 x float>, ptr %240, align 4, !tbaa !137, !noalias !427
  %274 = fcmp olt <2 x float> %273, %272
  %275 = select <2 x i1> %274, <2 x float> %273, <2 x float> %272
  %276 = load <2 x float>, ptr %241, align 4, !tbaa !137, !noalias !427
  %277 = fcmp olt <2 x float> %276, %275
  %278 = select <2 x i1> %277, <2 x float> %276, <2 x float> %275
  %279 = insertelement <2 x float> poison, float %238, i64 0
  %280 = shufflevector <2 x float> %279, <2 x float> poison, <2 x i32> zeroinitializer
  %281 = fsub <2 x float> %278, %280
  store <2 x float> %281, ptr %3, align 8
  store float %270, ptr %211, align 8, !tbaa.struct !298
  store float %263, ptr %212, align 4, !tbaa.struct !432
  %282 = fcmp olt <2 x float> %272, %273
  %283 = select <2 x i1> %282, <2 x float> %273, <2 x float> %272
  %284 = fcmp olt <2 x float> %283, %276
  %285 = select <2 x i1> %284, <2 x float> %276, <2 x float> %283
  %286 = fadd <2 x float> %280, %285
  store <2 x float> %286, ptr %213, align 8
  store float %271, ptr %214, align 8, !tbaa.struct !164
  store float %265, ptr %215, align 4, !tbaa.struct !318
  %287 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %219, i64 %218, i32 4
  %288 = load ptr, ptr %287, align 8, !tbaa !232
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  %289 = load float, ptr %25, align 8, !tbaa !137
  %290 = load <2 x float>, ptr %222, align 4, !tbaa !137
  %291 = load <2 x float>, ptr %225, align 4, !tbaa !137
  %292 = fadd <2 x float> %290, %291
  %293 = load <2 x float>, ptr %233, align 4, !tbaa !137
  %294 = fadd <2 x float> %292, %293
  %295 = fmul <2 x float> %294, <float 0x3FD5555560000000, float 0x3FD5555560000000>
  %296 = insertelement <2 x float> poison, float %289, i64 0
  %297 = shufflevector <2 x float> %296, <2 x float> poison, <2 x i32> zeroinitializer
  %298 = fmul <2 x float> %295, %297
  %299 = fmul float %237, %289
  %300 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %299, i64 0
  store <2 x float> %298, ptr %5, align 8
  store <2 x float> %300, ptr %216, align 8
  %301 = load float, ptr %34, align 8, !tbaa !421
  %302 = call noundef zeroext i1 @_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f(ptr noundef nonnull align 8 dereferenceable(64) %202, ptr noundef %288, ptr noundef nonnull align 4 dereferenceable(32) %3, ptr noundef nonnull align 4 dereferenceable(16) %5, float noundef %301)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  %303 = add nuw nsw i64 %218, 1
  %304 = load i32, ptr %206, align 4, !tbaa !96
  %305 = sext i32 %304 to i64
  %306 = icmp slt i64 %303, %305
  br i1 %306, label %217, label %307

307:                                              ; preds = %217, %205, %201
  call void @_ZN10btSoftBody10updatePoseEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  %308 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 1
  %309 = load i8, ptr %308, align 1, !tbaa !143, !range !191, !noundef !192
  %310 = icmp eq i8 %309, 0
  br i1 %310, label %396, label %311

311:                                              ; preds = %307
  %312 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 8
  %313 = load float, ptr %312, align 8, !tbaa !433
  %314 = fcmp ogt float %313, 0.000000e+00
  br i1 %314, label %315, label %396

315:                                              ; preds = %311
  %316 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 2
  %317 = load float, ptr %316, align 8, !tbaa.struct !162
  %318 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 2, i32 0, i64 1
  %319 = load float, ptr %318, align 4, !tbaa.struct !293
  %320 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 2, i32 0, i64 2
  %321 = load float, ptr %320, align 8, !tbaa.struct !164
  %322 = load i32, ptr %46, align 4, !tbaa !88
  %323 = icmp sgt i32 %322, 0
  br i1 %323, label %324, label %396

324:                                              ; preds = %315
  %325 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1, i32 0, i64 2
  %326 = load float, ptr %325, align 8, !tbaa.struct !164
  %327 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1, i32 0, i64 1
  %328 = load float, ptr %327, align 4, !tbaa.struct !293
  %329 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1
  %330 = load float, ptr %329, align 8, !tbaa.struct !162
  %331 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 0, i32 0, i64 2
  %332 = load <4 x float>, ptr %331, align 8
  %333 = shufflevector <4 x float> %332, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %334 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 0, i32 0, i64 1
  %335 = load <4 x float>, ptr %334, align 4
  %336 = shufflevector <4 x float> %335, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %337 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6
  %338 = load <4 x float>, ptr %337, align 8
  %339 = shufflevector <4 x float> %338, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %340 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %341 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  %342 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 5
  %343 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 5, i32 0, i64 2
  %344 = zext i32 %322 to i64
  %345 = insertelement <2 x float> %333, float %326, i64 1
  %346 = insertelement <2 x float> %339, float %330, i64 1
  %347 = insertelement <2 x float> %336, float %328, i64 1
  br label %348

348:                                              ; preds = %324, %393
  %349 = phi i64 [ 0, %324 ], [ %394, %393 ]
  %350 = load ptr, ptr %340, align 8, !tbaa !87
  %351 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %350, i64 %349, i32 6
  %352 = load float, ptr %351, align 8, !tbaa !174
  %353 = fcmp ogt float %352, 0.000000e+00
  br i1 %353, label %354, label %393

354:                                              ; preds = %348
  %355 = load ptr, ptr %341, align 8, !tbaa !33
  %356 = getelementptr inbounds %class.btVector3, ptr %355, i64 %349
  %357 = load float, ptr %356, align 4, !tbaa !137
  %358 = getelementptr inbounds [4 x float], ptr %356, i64 0, i64 1
  %359 = load float, ptr %358, align 4, !tbaa !137
  %360 = getelementptr inbounds [4 x float], ptr %356, i64 0, i64 2
  %361 = load float, ptr %360, align 4, !tbaa !137
  %362 = fmul float %319, %359
  %363 = call float @llvm.fmuladd.f32(float %317, float %357, float %362)
  %364 = call float @llvm.fmuladd.f32(float %321, float %361, float %363)
  %365 = load float, ptr %343, align 8, !tbaa !137
  %366 = fadd float %364, %365
  %367 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %350, i64 %349, i32 1
  %368 = load float, ptr %312, align 8, !tbaa !433
  %369 = getelementptr inbounds [4 x float], ptr %367, i64 0, i64 2
  %370 = load float, ptr %369, align 4, !tbaa !137
  %371 = fsub float %366, %370
  %372 = fmul float %368, %371
  %373 = insertelement <2 x float> poison, float %359, i64 0
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer
  %375 = fmul <2 x float> %347, %374
  %376 = insertelement <2 x float> poison, float %357, i64 0
  %377 = shufflevector <2 x float> %376, <2 x float> poison, <2 x i32> zeroinitializer
  %378 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %346, <2 x float> %377, <2 x float> %375)
  %379 = insertelement <2 x float> poison, float %361, i64 0
  %380 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> zeroinitializer
  %381 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %345, <2 x float> %380, <2 x float> %378)
  %382 = load <2 x float>, ptr %342, align 8, !tbaa !137
  %383 = fadd <2 x float> %382, %381
  %384 = load <2 x float>, ptr %367, align 4, !tbaa !137
  %385 = fsub <2 x float> %383, %384
  %386 = insertelement <2 x float> poison, float %368, i64 0
  %387 = shufflevector <2 x float> %386, <2 x float> poison, <2 x i32> zeroinitializer
  %388 = fmul <2 x float> %387, %385
  %389 = fadd <2 x float> %384, %388
  %390 = fadd float %370, %372
  %391 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %390, i64 0
  store <2 x float> %389, ptr %367, align 8, !tbaa.struct !162
  %392 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %350, i64 %349, i32 1, i32 0, i64 2
  store <2 x float> %391, ptr %392, align 8, !tbaa.struct !164
  br label %393

393:                                              ; preds = %354, %348
  %394 = add nuw nsw i64 %349, 1
  %395 = icmp eq i64 %394, %344
  br i1 %395, label %396, label %348

396:                                              ; preds = %393, %315, %311, %307
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %6)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %6, i8 0, i64 120, i1 false)
  %397 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 2
  %398 = load i32, ptr %397, align 4, !tbaa !108
  %399 = icmp slt i32 %398, 0
  br i1 %399, label %400, label %431

400:                                              ; preds = %396
  %401 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 3
  %402 = load i32, ptr %401, align 8, !tbaa !109
  %403 = icmp slt i32 %402, 0
  br i1 %403, label %404, label %414

404:                                              ; preds = %400
  %405 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 5
  %406 = load ptr, ptr %405, align 8, !tbaa !107
  %407 = icmp eq ptr %406, null
  %408 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 6
  %409 = load i8, ptr %408, align 8
  %410 = icmp eq i8 %409, 0
  %411 = select i1 %407, i1 true, i1 %410
  br i1 %411, label %413, label %412

412:                                              ; preds = %404
  call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %406)
  br label %413

413:                                              ; preds = %412, %404
  store i8 1, ptr %408, align 8, !tbaa !106
  store ptr null, ptr %405, align 8, !tbaa !107
  store i32 0, ptr %401, align 8, !tbaa !109
  br label %414

414:                                              ; preds = %413, %400
  %415 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 5
  %416 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %6, i64 0, i32 2
  %417 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %6, i64 0, i32 2, i32 0, i64 1
  %418 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %6, i64 0, i32 2, i32 0, i64 2
  %419 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %6, i64 0, i32 3
  %420 = sext i32 %398 to i64
  br label %421

421:                                              ; preds = %421, %414
  %422 = phi i64 [ %420, %414 ], [ %429, %421 ]
  %423 = load ptr, ptr %415, align 8, !tbaa !107
  %424 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %423, i64 %422
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %424, i8 0, i64 40, i1 false)
  %425 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %423, i64 %422, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %425, ptr noundef nonnull align 8 dereferenceable(16) %416, i64 16, i1 false), !tbaa.struct !162
  %426 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %423, i64 %422, i32 2, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %426, ptr noundef nonnull align 8 dereferenceable(16) %417, i64 16, i1 false), !tbaa.struct !162
  %427 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %423, i64 %422, i32 2, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %427, ptr noundef nonnull align 8 dereferenceable(16) %418, i64 16, i1 false), !tbaa.struct !162
  %428 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %423, i64 %422, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %428, ptr noundef nonnull align 8 dereferenceable(28) %419, i64 28, i1 false)
  %429 = add nsw i64 %422, 1
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %421

431:                                              ; preds = %421, %396
  store i32 0, ptr %397, align 4, !tbaa !108
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %6)
  %432 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 2
  %433 = load i32, ptr %432, align 4, !tbaa !112
  %434 = icmp slt i32 %433, 0
  br i1 %434, label %435, label %481

435:                                              ; preds = %431
  %436 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 3
  %437 = load i32, ptr %436, align 8, !tbaa !113
  %438 = icmp slt i32 %437, 0
  br i1 %438, label %439, label %449

439:                                              ; preds = %435
  %440 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 5
  %441 = load ptr, ptr %440, align 8, !tbaa !111
  %442 = icmp eq ptr %441, null
  %443 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 6
  %444 = load i8, ptr %443, align 8
  %445 = icmp eq i8 %444, 0
  %446 = select i1 %442, i1 true, i1 %445
  br i1 %446, label %448, label %447

447:                                              ; preds = %439
  call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %441)
  br label %448

448:                                              ; preds = %447, %439
  store i8 1, ptr %443, align 8, !tbaa !110
  store ptr null, ptr %440, align 8, !tbaa !111
  store i32 0, ptr %436, align 8, !tbaa !113
  br label %449

449:                                              ; preds = %448, %435
  %450 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 5
  %451 = sext i32 %433 to i64
  %452 = sub nsw i64 0, %451
  %453 = and i64 %452, 3
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %463, label %455

455:                                              ; preds = %449, %455
  %456 = phi i64 [ %460, %455 ], [ %451, %449 ]
  %457 = phi i64 [ %461, %455 ], [ 0, %449 ]
  %458 = load ptr, ptr %450, align 8, !tbaa !111
  %459 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %458, i64 %456
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %459, i8 0, i64 64, i1 false)
  %460 = add nsw i64 %456, 1
  %461 = add i64 %457, 1
  %462 = icmp eq i64 %461, %453
  br i1 %462, label %463, label %455, !llvm.loop !434

463:                                              ; preds = %455, %449
  %464 = phi i64 [ %451, %449 ], [ %460, %455 ]
  %465 = icmp ugt i32 %433, -4
  br i1 %465, label %481, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = load ptr, ptr %450, align 8, !tbaa !111
  %469 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %468, i64 %467
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %469, i8 0, i64 64, i1 false)
  %470 = add nsw i64 %467, 1
  %471 = load ptr, ptr %450, align 8, !tbaa !111
  %472 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %471, i64 %470
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %472, i8 0, i64 64, i1 false)
  %473 = add nsw i64 %467, 2
  %474 = load ptr, ptr %450, align 8, !tbaa !111
  %475 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %474, i64 %473
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %475, i8 0, i64 64, i1 false)
  %476 = add nsw i64 %467, 3
  %477 = load ptr, ptr %450, align 8, !tbaa !111
  %478 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %477, i64 %476
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %478, i8 0, i64 64, i1 false)
  %479 = add nsw i64 %467, 4
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %481, label %466

481:                                              ; preds = %463, %466, %431
  store i32 0, ptr %432, align 4, !tbaa !112
  call void @_ZN6btDbvt19optimizeIncrementalEi(ptr noundef nonnull align 8 dereferenceable(64) %117, i32 noundef 1)
  call void @_ZN6btDbvt19optimizeIncrementalEi(ptr noundef nonnull align 8 dereferenceable(64) %202, i32 noundef 1)
  %482 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  call void @_ZN6btDbvt19optimizeIncrementalEi(ptr noundef nonnull align 8 dereferenceable(64) %482, i32 noundef 1)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #38
  ret void
}

declare void @_ZN6btDbvt5clearEv(ptr noundef nonnull align 8 dereferenceable(64)) local_unnamed_addr #1

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody11applyForcesEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZN15CProfileManager13Start_ProfileEPKc(ptr noundef nonnull @.str.2)
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %3 = load float, ptr %2, align 8, !tbaa !418
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 3
  %6 = load <2 x float>, ptr %5, align 4, !tbaa !137
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 5
  %8 = load float, ptr %7, align 4, !tbaa !435
  %9 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 6
  %10 = load float, ptr %9, align 8, !tbaa !436
  %11 = extractelement <2 x float> %6, i64 1
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = extractelement <2 x float> %6, i64 0
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = fcmp une float %8, 0.000000e+00
  %16 = fcmp ogt float %10, 0.000000e+00
  %17 = select i1 %12, i1 true, i1 %14
  br i1 %17, label %18, label %22

18:                                               ; preds = %1
  %19 = load i32, ptr %4, align 8, !tbaa !135
  %20 = icmp slt i32 %19, 3
  %21 = icmp sgt i32 %19, 2
  br label %22

22:                                               ; preds = %18, %1
  %23 = phi i1 [ %20, %18 ], [ false, %1 ]
  %24 = phi i1 [ %21, %18 ], [ false, %1 ]
  %25 = select i1 %15, i1 true, i1 %16
  %26 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %27 = load i32, ptr %26, align 4, !tbaa !88
  br i1 %25, label %28, label %109

28:                                               ; preds = %22
  %29 = icmp sgt i32 %27, 0
  br i1 %29, label %30, label %100

30:                                               ; preds = %28
  %31 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %32 = load ptr, ptr %31, align 8, !tbaa !87
  %33 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %32, i64 0, i32 1
  %34 = load float, ptr %33, align 8, !tbaa.struct !162
  %35 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %32, i64 0, i32 1, i32 0, i64 1
  %36 = load float, ptr %35, align 4, !tbaa.struct !293
  %37 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %32, i64 0, i32 1, i32 0, i64 2
  %38 = load float, ptr %37, align 8, !tbaa.struct !164
  %39 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %40 = load i32, ptr %39, align 4, !tbaa !96
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %97

42:                                               ; preds = %30
  %43 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %44 = load ptr, ptr %43, align 8, !tbaa !95
  %45 = zext i32 %40 to i64
  br label %46

46:                                               ; preds = %46, %42
  %47 = phi i64 [ 0, %42 ], [ %95, %46 ]
  %48 = phi float [ 0.000000e+00, %42 ], [ %94, %46 ]
  %49 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %44, i64 %47, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !219
  %51 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 0, i32 1
  %52 = load float, ptr %51, align 4, !tbaa !137
  %53 = fsub float %52, %34
  %54 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 0, i32 1, i32 0, i64 1
  %55 = load float, ptr %54, align 4, !tbaa !137
  %56 = fsub float %55, %36
  %57 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %50, i64 0, i32 1, i32 0, i64 2
  %58 = load float, ptr %57, align 4, !tbaa !137
  %59 = fsub float %58, %38
  %60 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %44, i64 %47, i32 1, i64 1
  %61 = load ptr, ptr %60, align 8, !tbaa !219
  %62 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %61, i64 0, i32 1
  %63 = load float, ptr %62, align 4, !tbaa !137
  %64 = fsub float %63, %34
  %65 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %61, i64 0, i32 1, i32 0, i64 1
  %66 = load float, ptr %65, align 4, !tbaa !137
  %67 = fsub float %66, %36
  %68 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %61, i64 0, i32 1, i32 0, i64 2
  %69 = load float, ptr %68, align 4, !tbaa !137
  %70 = fsub float %69, %38
  %71 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %44, i64 %47, i32 1, i64 2
  %72 = load ptr, ptr %71, align 8, !tbaa !219
  %73 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %72, i64 0, i32 1
  %74 = load float, ptr %73, align 4, !tbaa !137
  %75 = fsub float %74, %34
  %76 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %72, i64 0, i32 1, i32 0, i64 1
  %77 = load float, ptr %76, align 4, !tbaa !137
  %78 = fsub float %77, %36
  %79 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %72, i64 0, i32 1, i32 0, i64 2
  %80 = load float, ptr %79, align 4, !tbaa !137
  %81 = fsub float %80, %38
  %82 = fneg float %70
  %83 = fmul float %78, %82
  %84 = tail call float @llvm.fmuladd.f32(float %67, float %81, float %83)
  %85 = fneg float %64
  %86 = fmul float %81, %85
  %87 = tail call float @llvm.fmuladd.f32(float %70, float %75, float %86)
  %88 = fneg float %67
  %89 = fmul float %75, %88
  %90 = tail call float @llvm.fmuladd.f32(float %64, float %78, float %89)
  %91 = fmul float %56, %87
  %92 = tail call float @llvm.fmuladd.f32(float %53, float %84, float %91)
  %93 = tail call float @llvm.fmuladd.f32(float %59, float %90, float %92)
  %94 = fadd float %48, %93
  %95 = add nuw nsw i64 %47, 1
  %96 = icmp eq i64 %95, %45
  br i1 %96, label %97, label %46

97:                                               ; preds = %46, %30
  %98 = phi float [ 0.000000e+00, %30 ], [ %94, %46 ]
  %99 = fdiv float %98, 6.000000e+00
  br label %100

100:                                              ; preds = %97, %28
  %101 = phi float [ %99, %97 ], [ 0.000000e+00, %28 ]
  %102 = tail call float @llvm.fabs.f32(float %101)
  %103 = fdiv float 1.000000e+00, %102
  %104 = fmul float %8, %103
  %105 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 2
  %106 = load float, ptr %105, align 4, !tbaa !144
  %107 = fsub float %106, %101
  %108 = fmul float %10, %107
  br label %109

109:                                              ; preds = %22, %100
  %110 = phi float [ %108, %100 ], [ 0.000000e+00, %22 ]
  %111 = phi float [ %104, %100 ], [ 0.000000e+00, %22 ]
  %112 = icmp sgt i32 %27, 0
  br i1 %112, label %113, label %321

113:                                              ; preds = %109
  %114 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %115 = load ptr, ptr %114, align 8, !tbaa !87
  %116 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %117, i64 0, i32 1
  %119 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %117, i64 0, i32 3
  %120 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %117, i64 0, i32 3, i32 0, i64 1
  %121 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %117, i64 0, i32 3, i32 0, i64 2
  %122 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %117, i64 0, i32 2
  %123 = load i32, ptr %4, align 8
  %124 = zext i32 %27 to i64
  br label %125

125:                                              ; preds = %113, %318
  %126 = phi i64 [ 0, %113 ], [ %319, %318 ]
  %127 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 6
  %128 = load float, ptr %127, align 8, !tbaa !174
  %129 = fcmp ogt float %128, 0.000000e+00
  br i1 %129, label %130, label %318

130:                                              ; preds = %125
  br i1 %17, label %131, label %280

131:                                              ; preds = %130
  %132 = load float, ptr %117, align 8, !tbaa !437
  %133 = load float, ptr %118, align 4, !tbaa !438
  %134 = fcmp ogt float %133, 0.000000e+00
  br i1 %134, label %135, label %152

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 1
  %137 = load float, ptr %136, align 4, !tbaa !137
  %138 = load float, ptr %119, align 4, !tbaa !137
  %139 = getelementptr inbounds [4 x float], ptr %136, i64 0, i64 1
  %140 = load float, ptr %139, align 4, !tbaa !137
  %141 = load float, ptr %120, align 4, !tbaa !137
  %142 = fmul float %140, %141
  %143 = tail call float @llvm.fmuladd.f32(float %137, float %138, float %142)
  %144 = getelementptr inbounds [4 x float], ptr %136, i64 0, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !137
  %146 = load float, ptr %121, align 4, !tbaa !137
  %147 = tail call float @llvm.fmuladd.f32(float %145, float %146, float %143)
  %148 = load float, ptr %122, align 8, !tbaa !439
  %149 = fadd float %147, %148
  %150 = fcmp olt float %149, 0.000000e+00
  br i1 %150, label %151, label %152

151:                                              ; preds = %135
  br label %152

152:                                              ; preds = %151, %135, %131
  %153 = phi float [ %133, %151 ], [ %132, %135 ], [ %132, %131 ]
  br i1 %23, label %154, label %280

154:                                              ; preds = %152
  %155 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 3
  %156 = load <2 x float>, ptr %155, align 4, !tbaa !137
  %157 = getelementptr inbounds [4 x float], ptr %155, i64 0, i64 2
  %158 = load float, ptr %157, align 4, !tbaa !137
  %159 = extractelement <2 x float> %156, i64 1
  %160 = fmul float %159, %159
  %161 = extractelement <2 x float> %156, i64 0
  %162 = tail call float @llvm.fmuladd.f32(float %161, float %161, float %160)
  %163 = tail call float @llvm.fmuladd.f32(float %158, float %158, float %162)
  %164 = fcmp ogt float %163, 0x3E80000000000000
  br i1 %164, label %165, label %280

165:                                              ; preds = %154
  %166 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 5
  %167 = load <2 x float>, ptr %166, align 8, !tbaa.struct !162
  %168 = getelementptr inbounds i8, ptr %166, i64 8
  %169 = load <2 x float>, ptr %168, align 8, !tbaa.struct !164
  switch i32 %123, label %194 [
    i32 0, label %170
    i32 1, label %180
  ]

170:                                              ; preds = %165
  %171 = tail call float @llvm.sqrt.f32(float %163)
  %172 = fcmp ogt float %171, 0x3E80000000000000
  br i1 %172, label %173, label %194

173:                                              ; preds = %170
  %174 = fdiv float 1.000000e+00, %171
  %175 = insertelement <2 x float> poison, float %174, i64 0
  %176 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer
  %177 = fmul <2 x float> %156, %176
  %178 = fmul float %158, %174
  %179 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %178, i64 0
  br label %194

180:                                              ; preds = %165
  %181 = fmul <2 x float> %156, %167
  %182 = extractelement <2 x float> %181, i64 1
  %183 = extractelement <2 x float> %167, i64 0
  %184 = tail call float @llvm.fmuladd.f32(float %183, float %161, float %182)
  %185 = extractelement <2 x float> %169, i64 0
  %186 = tail call float @llvm.fmuladd.f32(float %185, float %158, float %184)
  %187 = fcmp olt float %186, 0.000000e+00
  %188 = select i1 %187, float -1.000000e+00, float 1.000000e+00
  %189 = insertelement <2 x float> poison, float %188, i64 0
  %190 = shufflevector <2 x float> %189, <2 x float> poison, <2 x i32> zeroinitializer
  %191 = fmul <2 x float> %167, %190
  %192 = fmul float %185, %188
  %193 = insertelement <2 x float> %169, float %192, i64 0
  br label %194

194:                                              ; preds = %170, %173, %165, %180
  %195 = phi <2 x float> [ %167, %165 ], [ %191, %180 ], [ %177, %173 ], [ zeroinitializer, %170 ]
  %196 = phi <2 x float> [ %169, %165 ], [ %193, %180 ], [ %179, %173 ], [ zeroinitializer, %170 ]
  %197 = fmul <2 x float> %156, %195
  %198 = extractelement <2 x float> %197, i64 1
  %199 = extractelement <2 x float> %195, i64 0
  %200 = tail call float @llvm.fmuladd.f32(float %161, float %199, float %198)
  %201 = extractelement <2 x float> %196, i64 0
  %202 = tail call float @llvm.fmuladd.f32(float %158, float %201, float %200)
  %203 = fcmp ogt float %202, 0.000000e+00
  br i1 %203, label %204, label %280

204:                                              ; preds = %194
  %205 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 7
  %206 = load float, ptr %205, align 4, !tbaa !303
  %207 = fmul float %202, %206
  %208 = fmul float %163, %207
  %209 = fmul float %208, -5.000000e-01
  %210 = fmul float %153, %209
  %211 = tail call float @llvm.sqrt.f32(float %163)
  %212 = fdiv float 1.000000e+00, %211
  %213 = fmul float %158, %212
  %214 = insertelement <2 x float> poison, float %210, i64 0
  %215 = shufflevector <2 x float> %214, <2 x float> poison, <2 x i32> zeroinitializer
  %216 = fmul <2 x float> %6, %215
  %217 = shufflevector <2 x float> %196, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %218 = insertelement <2 x float> %217, float %213, i64 0
  %219 = fmul <2 x float> %218, %216
  %220 = extractelement <2 x float> %219, i64 1
  %221 = fadd float %220, 0.000000e+00
  %222 = shufflevector <2 x float> %216, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %223 = fmul <2 x float> %195, %222
  %224 = fadd <2 x float> %223, zeroinitializer
  %225 = insertelement <2 x float> poison, float %212, i64 0
  %226 = shufflevector <2 x float> %225, <2 x float> poison, <2 x i32> zeroinitializer
  %227 = fmul <2 x float> %156, %226
  %228 = shufflevector <2 x float> %216, <2 x float> poison, <2 x i32> zeroinitializer
  %229 = fmul <2 x float> %227, %228
  %230 = fadd <2 x float> %229, %224
  %231 = extractelement <2 x float> %219, i64 0
  %232 = fadd float %231, %221
  %233 = fmul float %3, %128
  %234 = extractelement <2 x float> %230, i64 0
  %235 = fmul float %233, %234
  %236 = extractelement <2 x float> %230, i64 1
  %237 = fmul float %233, %236
  %238 = fmul float %233, %232
  %239 = fmul float %237, %237
  %240 = tail call float @llvm.fmuladd.f32(float %235, float %235, float %239)
  %241 = tail call float @llvm.fmuladd.f32(float %238, float %238, float %240)
  %242 = fcmp ogt float %241, %163
  br i1 %242, label %243, label %273

243:                                              ; preds = %204
  %244 = fmul float %236, %236
  %245 = tail call float @llvm.fmuladd.f32(float %234, float %234, float %244)
  %246 = tail call float @llvm.fmuladd.f32(float %232, float %232, float %245)
  %247 = tail call float @llvm.sqrt.f32(float %246)
  %248 = fdiv float 1.000000e+00, %247
  %249 = fmul float %232, %248
  %250 = fdiv float 1.000000e+00, %233
  %251 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 4
  %252 = insertelement <2 x float> poison, float %248, i64 0
  %253 = shufflevector <2 x float> %252, <2 x float> poison, <2 x i32> zeroinitializer
  %254 = fmul <2 x float> %230, %253
  %255 = fmul <2 x float> %156, %254
  %256 = extractelement <2 x float> %255, i64 1
  %257 = extractelement <2 x float> %254, i64 0
  %258 = tail call float @llvm.fmuladd.f32(float %161, float %257, float %256)
  %259 = tail call float @llvm.fmuladd.f32(float %158, float %249, float %258)
  %260 = insertelement <2 x float> poison, float %259, i64 0
  %261 = shufflevector <2 x float> %260, <2 x float> poison, <2 x i32> zeroinitializer
  %262 = fmul <2 x float> %254, %261
  %263 = fmul float %249, %259
  %264 = insertelement <2 x float> poison, float %250, i64 0
  %265 = shufflevector <2 x float> %264, <2 x float> poison, <2 x i32> zeroinitializer
  %266 = fmul <2 x float> %265, %262
  %267 = fmul float %250, %263
  %268 = load <2 x float>, ptr %251, align 8, !tbaa !137
  %269 = fsub <2 x float> %268, %266
  store <2 x float> %269, ptr %251, align 8, !tbaa !137
  %270 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 4, i32 0, i64 2
  %271 = load float, ptr %270, align 8, !tbaa !137
  %272 = fsub float %271, %267
  store float %272, ptr %270, align 8, !tbaa !137
  br label %280

273:                                              ; preds = %204
  %274 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 4
  %275 = load <2 x float>, ptr %274, align 8, !tbaa !137
  %276 = fadd <2 x float> %230, %275
  store <2 x float> %276, ptr %274, align 8, !tbaa !137
  %277 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 4, i32 0, i64 2
  %278 = load float, ptr %277, align 8, !tbaa !137
  %279 = fadd float %232, %278
  store float %279, ptr %277, align 8, !tbaa !137
  br label %280

280:                                              ; preds = %154, %243, %273, %194, %152, %130
  br i1 %15, label %281, label %299

281:                                              ; preds = %280
  %282 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 5
  %283 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 7
  %284 = load float, ptr %283, align 4, !tbaa !303
  %285 = fmul float %111, %284
  %286 = getelementptr inbounds [4 x float], ptr %282, i64 0, i64 2
  %287 = load float, ptr %286, align 4, !tbaa !137
  %288 = fmul float %285, %287
  %289 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 4
  %290 = load <2 x float>, ptr %282, align 4, !tbaa !137
  %291 = insertelement <2 x float> poison, float %285, i64 0
  %292 = shufflevector <2 x float> %291, <2 x float> poison, <2 x i32> zeroinitializer
  %293 = fmul <2 x float> %290, %292
  %294 = load <2 x float>, ptr %289, align 4, !tbaa !137
  %295 = fadd <2 x float> %293, %294
  store <2 x float> %295, ptr %289, align 4, !tbaa !137
  %296 = getelementptr inbounds [4 x float], ptr %289, i64 0, i64 2
  %297 = load float, ptr %296, align 4, !tbaa !137
  %298 = fadd float %288, %297
  store float %298, ptr %296, align 4, !tbaa !137
  br label %299

299:                                              ; preds = %281, %280
  br i1 %16, label %300, label %318

300:                                              ; preds = %299
  %301 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 5
  %302 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 7
  %303 = load float, ptr %302, align 4, !tbaa !303
  %304 = fmul float %110, %303
  %305 = getelementptr inbounds [4 x float], ptr %301, i64 0, i64 2
  %306 = load float, ptr %305, align 4, !tbaa !137
  %307 = fmul float %304, %306
  %308 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %115, i64 %126, i32 4
  %309 = load <2 x float>, ptr %301, align 4, !tbaa !137
  %310 = insertelement <2 x float> poison, float %304, i64 0
  %311 = shufflevector <2 x float> %310, <2 x float> poison, <2 x i32> zeroinitializer
  %312 = fmul <2 x float> %309, %311
  %313 = load <2 x float>, ptr %308, align 4, !tbaa !137
  %314 = fadd <2 x float> %312, %313
  store <2 x float> %314, ptr %308, align 4, !tbaa !137
  %315 = getelementptr inbounds [4 x float], ptr %308, i64 0, i64 2
  %316 = load float, ptr %315, align 4, !tbaa !137
  %317 = fadd float %307, %316
  store float %317, ptr %315, align 4, !tbaa !137
  br label %318

318:                                              ; preds = %299, %300, %125
  %319 = add nuw nsw i64 %126, 1
  %320 = icmp eq i64 %319, %124
  br i1 %320, label %321, label %125

321:                                              ; preds = %318, %109
  %322 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 2
  %323 = load i32, ptr %322, align 4, !tbaa !96
  %324 = icmp sgt i32 %323, 0
  br i1 %324, label %325, label %637

325:                                              ; preds = %321
  %326 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 11, i32 5
  %327 = load ptr, ptr %326, align 8, !tbaa !95
  %328 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  %329 = load ptr, ptr %328, align 8
  %330 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %329, i64 0, i32 1
  %331 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %329, i64 0, i32 3
  %332 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %329, i64 0, i32 3, i32 0, i64 1
  %333 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %329, i64 0, i32 3, i32 0, i64 2
  %334 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %329, i64 0, i32 2
  %335 = load i32, ptr %4, align 8
  %336 = icmp eq i32 %335, 3
  br i1 %24, label %337, label %637

337:                                              ; preds = %325
  %338 = zext i32 %323 to i64
  br label %339

339:                                              ; preds = %337, %506
  %340 = phi i64 [ 0, %337 ], [ %507, %506 ]
  %341 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %327, i64 %340, i32 1
  %342 = load ptr, ptr %341, align 8, !tbaa !219
  %343 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 3
  %344 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %327, i64 %340, i32 1, i64 1
  %345 = load ptr, ptr %344, align 8, !tbaa !219
  %346 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 3
  %347 = load float, ptr %343, align 4, !tbaa !137
  %348 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 3, i32 0, i64 1
  %349 = load float, ptr %348, align 4, !tbaa !137
  %350 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 3, i32 0, i64 1
  %351 = load <2 x float>, ptr %346, align 4, !tbaa !137
  %352 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 3, i32 0, i64 2
  %353 = load float, ptr %352, align 4, !tbaa !137
  %354 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 3, i32 0, i64 2
  %355 = load float, ptr %354, align 4, !tbaa !137
  %356 = fadd float %353, %355
  %357 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %327, i64 %340, i32 1, i64 2
  %358 = load ptr, ptr %357, align 8, !tbaa !219
  %359 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 3
  %360 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 3, i32 0, i64 1
  %361 = insertelement <2 x float> poison, float %347, i64 0
  %362 = insertelement <2 x float> %361, float %349, i64 1
  %363 = fadd <2 x float> %362, %351
  %364 = load <2 x float>, ptr %359, align 4, !tbaa !137
  %365 = fadd <2 x float> %363, %364
  %366 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 3, i32 0, i64 2
  %367 = load float, ptr %366, align 4, !tbaa !137
  %368 = fadd float %356, %367
  %369 = fmul <2 x float> %365, <float 0x3FD5555560000000, float 0x3FD5555560000000>
  %370 = fmul float %368, 0x3FD5555560000000
  %371 = load float, ptr %329, align 8, !tbaa !437
  %372 = load float, ptr %330, align 4, !tbaa !438
  %373 = fcmp ogt float %372, 0.000000e+00
  br i1 %373, label %374, label %412

374:                                              ; preds = %339
  %375 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 1, i32 0, i64 2
  %376 = load float, ptr %375, align 4, !tbaa !137
  %377 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 1, i32 0, i64 2
  %378 = load float, ptr %377, align 4, !tbaa !137
  %379 = fadd float %376, %378
  %380 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 1, i32 0, i64 2
  %381 = load float, ptr %380, align 4, !tbaa !137
  %382 = fadd float %379, %381
  %383 = fmul float %382, 0x3FD5555560000000
  %384 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 1, i32 0, i64 1
  %385 = load float, ptr %384, align 4, !tbaa !137
  %386 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 1, i32 0, i64 1
  %387 = load float, ptr %386, align 4, !tbaa !137
  %388 = fadd float %385, %387
  %389 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 1, i32 0, i64 1
  %390 = load float, ptr %389, align 4, !tbaa !137
  %391 = fadd float %388, %390
  %392 = fmul float %391, 0x3FD5555560000000
  %393 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 1
  %394 = load float, ptr %393, align 4, !tbaa !137
  %395 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 1
  %396 = load float, ptr %395, align 4, !tbaa !137
  %397 = fadd float %394, %396
  %398 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 1
  %399 = load float, ptr %398, align 4, !tbaa !137
  %400 = fadd float %397, %399
  %401 = fmul float %400, 0x3FD5555560000000
  %402 = load float, ptr %331, align 4, !tbaa !137
  %403 = load float, ptr %332, align 4, !tbaa !137
  %404 = fmul float %392, %403
  %405 = tail call float @llvm.fmuladd.f32(float %401, float %402, float %404)
  %406 = load float, ptr %333, align 4, !tbaa !137
  %407 = tail call float @llvm.fmuladd.f32(float %383, float %406, float %405)
  %408 = load float, ptr %334, align 8, !tbaa !439
  %409 = fadd float %408, %407
  %410 = fcmp olt float %409, 0.000000e+00
  br i1 %410, label %411, label %412

411:                                              ; preds = %374
  br label %412

412:                                              ; preds = %411, %374, %339
  %413 = phi float [ %372, %411 ], [ %371, %374 ], [ %371, %339 ]
  %414 = extractelement <2 x float> %369, i64 1
  %415 = fmul float %414, %414
  %416 = extractelement <2 x float> %369, i64 0
  %417 = tail call float @llvm.fmuladd.f32(float %416, float %416, float %415)
  %418 = tail call float @llvm.fmuladd.f32(float %370, float %370, float %417)
  %419 = fcmp ogt float %418, 0x3E80000000000000
  br i1 %419, label %420, label %506

420:                                              ; preds = %412
  %421 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %327, i64 %340, i32 2
  %422 = load <2 x float>, ptr %421, align 8
  %423 = getelementptr inbounds i8, ptr %421, i64 8
  %424 = load float, ptr %423, align 8, !tbaa.struct !164
  br i1 %336, label %425, label %437

425:                                              ; preds = %420
  %426 = fmul <2 x float> %369, %422
  %427 = extractelement <2 x float> %426, i64 1
  %428 = extractelement <2 x float> %422, i64 0
  %429 = tail call float @llvm.fmuladd.f32(float %428, float %416, float %427)
  %430 = tail call float @llvm.fmuladd.f32(float %424, float %370, float %429)
  %431 = fcmp olt float %430, 0.000000e+00
  %432 = select i1 %431, float -1.000000e+00, float 1.000000e+00
  %433 = insertelement <2 x float> poison, float %432, i64 0
  %434 = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> zeroinitializer
  %435 = fmul <2 x float> %422, %434
  %436 = fmul float %424, %432
  br label %437

437:                                              ; preds = %425, %420
  %438 = phi float [ %436, %425 ], [ %424, %420 ]
  %439 = phi <2 x float> [ %435, %425 ], [ %422, %420 ]
  %440 = fmul <2 x float> %369, %439
  %441 = extractelement <2 x float> %440, i64 1
  %442 = extractelement <2 x float> %439, i64 0
  %443 = tail call float @llvm.fmuladd.f32(float %416, float %442, float %441)
  %444 = tail call float @llvm.fmuladd.f32(float %370, float %438, float %443)
  %445 = fcmp ogt float %444, 0.000000e+00
  br i1 %445, label %446, label %506

446:                                              ; preds = %437
  %447 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %327, i64 %340, i32 3
  %448 = load float, ptr %447, align 8, !tbaa !241
  %449 = fneg float %448
  %450 = fmul float %444, %449
  %451 = fmul float %418, %450
  %452 = fmul float %413, %451
  %453 = tail call float @llvm.sqrt.f32(float %418)
  %454 = fdiv float 1.000000e+00, %453
  %455 = fmul float %370, %454
  %456 = insertelement <2 x float> poison, float %452, i64 0
  %457 = shufflevector <2 x float> %456, <2 x float> poison, <2 x i32> zeroinitializer
  %458 = fmul <2 x float> %6, %457
  %459 = insertelement <2 x float> poison, float %455, i64 0
  %460 = insertelement <2 x float> %459, float %438, i64 1
  %461 = fmul <2 x float> %460, %458
  %462 = extractelement <2 x float> %461, i64 1
  %463 = fadd float %462, 0.000000e+00
  %464 = extractelement <2 x float> %461, i64 0
  %465 = fadd float %464, %463
  %466 = shufflevector <2 x float> %458, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %467 = fmul <2 x float> %439, %466
  %468 = fadd <2 x float> %467, zeroinitializer
  %469 = insertelement <2 x float> poison, float %454, i64 0
  %470 = shufflevector <2 x float> %469, <2 x float> poison, <2 x i32> zeroinitializer
  %471 = fmul <2 x float> %369, %470
  %472 = shufflevector <2 x float> %458, <2 x float> poison, <2 x i32> zeroinitializer
  %473 = fmul <2 x float> %471, %472
  %474 = fadd <2 x float> %473, %468
  %475 = fmul <2 x float> %474, <float 0x3FD5555560000000, float 0x3FD5555560000000>
  %476 = fmul float %465, 0x3FD5555560000000
  %477 = extractelement <2 x float> %475, i64 1
  %478 = fmul float %477, %477
  %479 = extractelement <2 x float> %475, i64 0
  %480 = tail call float @llvm.fmuladd.f32(float %479, float %479, float %478)
  %481 = tail call float @llvm.fmuladd.f32(float %476, float %476, float %480)
  %482 = tail call float @llvm.sqrt.f32(float %481)
  %483 = fdiv float 1.000000e+00, %482
  %484 = insertelement <2 x float> poison, float %483, i64 0
  %485 = shufflevector <2 x float> %484, <2 x float> poison, <2 x i32> zeroinitializer
  %486 = fmul <2 x float> %475, %485
  %487 = fmul float %476, %483
  %488 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 6
  %489 = load float, ptr %488, align 8, !tbaa !174
  %490 = fmul float %3, %489
  %491 = fmul float %479, %490
  %492 = fmul float %477, %490
  %493 = fmul float %476, %490
  %494 = insertelement <2 x float> poison, float %492, i64 0
  %495 = insertelement <2 x float> %494, float %349, i64 1
  %496 = fmul <2 x float> %495, %495
  %497 = insertelement <2 x float> poison, float %491, i64 0
  %498 = insertelement <2 x float> %497, float %347, i64 1
  %499 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %498, <2 x float> %498, <2 x float> %496)
  %500 = insertelement <2 x float> poison, float %493, i64 0
  %501 = insertelement <2 x float> %500, float %353, i64 1
  %502 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %501, <2 x float> %501, <2 x float> %499)
  %503 = extractelement <2 x float> %502, i64 0
  %504 = extractelement <2 x float> %502, i64 1
  %505 = fcmp ogt float %503, %504
  br i1 %505, label %516, label %509

506:                                              ; preds = %609, %616, %437, %412
  %507 = add nuw nsw i64 %340, 1
  %508 = icmp eq i64 %507, %338
  br i1 %508, label %637, label %339

509:                                              ; preds = %446
  %510 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 4
  %511 = load <2 x float>, ptr %510, align 8, !tbaa !137
  %512 = fadd <2 x float> %475, %511
  store <2 x float> %512, ptr %510, align 8, !tbaa !137
  %513 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 4, i32 0, i64 2
  %514 = load float, ptr %513, align 8, !tbaa !137
  %515 = fadd float %476, %514
  store float %515, ptr %513, align 8, !tbaa !137
  br label %537

516:                                              ; preds = %446
  %517 = extractelement <2 x float> %486, i64 1
  %518 = fmul float %517, %349
  %519 = extractelement <2 x float> %486, i64 0
  %520 = tail call float @llvm.fmuladd.f32(float %347, float %519, float %518)
  %521 = tail call float @llvm.fmuladd.f32(float %353, float %487, float %520)
  %522 = fmul float %487, %521
  %523 = fdiv float 1.000000e+00, %490
  %524 = fmul float %523, %522
  %525 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 4
  %526 = insertelement <2 x float> poison, float %521, i64 0
  %527 = shufflevector <2 x float> %526, <2 x float> poison, <2 x i32> zeroinitializer
  %528 = fmul <2 x float> %486, %527
  %529 = insertelement <2 x float> poison, float %523, i64 0
  %530 = shufflevector <2 x float> %529, <2 x float> poison, <2 x i32> zeroinitializer
  %531 = fmul <2 x float> %530, %528
  %532 = load <2 x float>, ptr %525, align 8, !tbaa !137
  %533 = fsub <2 x float> %532, %531
  store <2 x float> %533, ptr %525, align 8, !tbaa !137
  %534 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %342, i64 0, i32 4, i32 0, i64 2
  %535 = load float, ptr %534, align 8, !tbaa !137
  %536 = fsub float %535, %524
  store float %536, ptr %534, align 8, !tbaa !137
  br label %537

537:                                              ; preds = %516, %509
  %538 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 6
  %539 = load float, ptr %538, align 8, !tbaa !174
  %540 = fmul float %3, %539
  %541 = fmul float %479, %540
  %542 = fmul float %477, %540
  %543 = fmul float %476, %540
  %544 = load float, ptr %346, align 8, !tbaa !137
  %545 = load float, ptr %350, align 4, !tbaa !137
  %546 = load float, ptr %354, align 8, !tbaa !137
  %547 = insertelement <2 x float> poison, float %542, i64 0
  %548 = insertelement <2 x float> %547, float %545, i64 1
  %549 = fmul <2 x float> %548, %548
  %550 = insertelement <2 x float> poison, float %541, i64 0
  %551 = insertelement <2 x float> %550, float %544, i64 1
  %552 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %551, <2 x float> %551, <2 x float> %549)
  %553 = insertelement <2 x float> poison, float %543, i64 0
  %554 = insertelement <2 x float> %553, float %546, i64 1
  %555 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %554, <2 x float> %554, <2 x float> %552)
  %556 = extractelement <2 x float> %555, i64 0
  %557 = extractelement <2 x float> %555, i64 1
  %558 = fcmp ogt float %556, %557
  br i1 %558, label %566, label %559

559:                                              ; preds = %537
  %560 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 4
  %561 = load <2 x float>, ptr %560, align 8, !tbaa !137
  %562 = fadd <2 x float> %475, %561
  store <2 x float> %562, ptr %560, align 8, !tbaa !137
  %563 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 4, i32 0, i64 2
  %564 = load float, ptr %563, align 8, !tbaa !137
  %565 = fadd float %476, %564
  store float %565, ptr %563, align 8, !tbaa !137
  br label %587

566:                                              ; preds = %537
  %567 = extractelement <2 x float> %486, i64 1
  %568 = fmul float %567, %545
  %569 = extractelement <2 x float> %486, i64 0
  %570 = tail call float @llvm.fmuladd.f32(float %544, float %569, float %568)
  %571 = tail call float @llvm.fmuladd.f32(float %546, float %487, float %570)
  %572 = fmul float %487, %571
  %573 = fdiv float 1.000000e+00, %540
  %574 = fmul float %573, %572
  %575 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 4
  %576 = insertelement <2 x float> poison, float %571, i64 0
  %577 = shufflevector <2 x float> %576, <2 x float> poison, <2 x i32> zeroinitializer
  %578 = fmul <2 x float> %486, %577
  %579 = insertelement <2 x float> poison, float %573, i64 0
  %580 = shufflevector <2 x float> %579, <2 x float> poison, <2 x i32> zeroinitializer
  %581 = fmul <2 x float> %580, %578
  %582 = load <2 x float>, ptr %575, align 8, !tbaa !137
  %583 = fsub <2 x float> %582, %581
  store <2 x float> %583, ptr %575, align 8, !tbaa !137
  %584 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %345, i64 0, i32 4, i32 0, i64 2
  %585 = load float, ptr %584, align 8, !tbaa !137
  %586 = fsub float %585, %574
  store float %586, ptr %584, align 8, !tbaa !137
  br label %587

587:                                              ; preds = %566, %559
  %588 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 6
  %589 = load float, ptr %588, align 8, !tbaa !174
  %590 = fmul float %3, %589
  %591 = fmul float %479, %590
  %592 = fmul float %477, %590
  %593 = fmul float %476, %590
  %594 = load float, ptr %359, align 8, !tbaa !137
  %595 = load float, ptr %360, align 4, !tbaa !137
  %596 = load float, ptr %366, align 8, !tbaa !137
  %597 = insertelement <2 x float> poison, float %592, i64 0
  %598 = insertelement <2 x float> %597, float %595, i64 1
  %599 = fmul <2 x float> %598, %598
  %600 = insertelement <2 x float> poison, float %591, i64 0
  %601 = insertelement <2 x float> %600, float %594, i64 1
  %602 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %601, <2 x float> %601, <2 x float> %599)
  %603 = insertelement <2 x float> poison, float %593, i64 0
  %604 = insertelement <2 x float> %603, float %596, i64 1
  %605 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %604, <2 x float> %604, <2 x float> %602)
  %606 = extractelement <2 x float> %605, i64 0
  %607 = extractelement <2 x float> %605, i64 1
  %608 = fcmp ogt float %606, %607
  br i1 %608, label %616, label %609

609:                                              ; preds = %587
  %610 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 4
  %611 = load <2 x float>, ptr %610, align 8, !tbaa !137
  %612 = fadd <2 x float> %475, %611
  store <2 x float> %612, ptr %610, align 8, !tbaa !137
  %613 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 4, i32 0, i64 2
  %614 = load float, ptr %613, align 8, !tbaa !137
  %615 = fadd float %476, %614
  store float %615, ptr %613, align 8, !tbaa !137
  br label %506

616:                                              ; preds = %587
  %617 = extractelement <2 x float> %486, i64 1
  %618 = fmul float %617, %595
  %619 = extractelement <2 x float> %486, i64 0
  %620 = tail call float @llvm.fmuladd.f32(float %594, float %619, float %618)
  %621 = tail call float @llvm.fmuladd.f32(float %596, float %487, float %620)
  %622 = fmul float %487, %621
  %623 = fdiv float 1.000000e+00, %590
  %624 = fmul float %623, %622
  %625 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 4
  %626 = insertelement <2 x float> poison, float %621, i64 0
  %627 = shufflevector <2 x float> %626, <2 x float> poison, <2 x i32> zeroinitializer
  %628 = fmul <2 x float> %486, %627
  %629 = insertelement <2 x float> poison, float %623, i64 0
  %630 = shufflevector <2 x float> %629, <2 x float> poison, <2 x i32> zeroinitializer
  %631 = fmul <2 x float> %630, %628
  %632 = load <2 x float>, ptr %625, align 8, !tbaa !137
  %633 = fsub <2 x float> %632, %631
  store <2 x float> %633, ptr %625, align 8, !tbaa !137
  %634 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %358, i64 0, i32 4, i32 0, i64 2
  %635 = load float, ptr %634, align 8, !tbaa !137
  %636 = fsub float %635, %624
  store float %636, ptr %634, align 8, !tbaa !137
  br label %506

637:                                              ; preds = %506, %325, %321
  tail call void @_ZN15CProfileManager12Stop_ProfileEv()
  ret void
}

declare noundef zeroext i1 @_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f(ptr noundef nonnull align 8 dereferenceable(64), ptr noundef, ptr noundef nonnull align 4 dereferenceable(32), ptr noundef nonnull align 4 dereferenceable(16), float noundef) local_unnamed_addr #1

; Function Attrs: nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody10updatePoseEv(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #23 align 2 {
  %2 = alloca %class.btMatrix3x3, align 4
  %3 = alloca %class.btMatrix3x3, align 4
  %4 = alloca %class.btMatrix3x3, align 4
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 1
  %6 = load i8, ptr %5, align 1, !tbaa !143, !range !191, !noundef !192
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %333, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %10 = load i32, ptr %9, align 4, !tbaa !88
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %88

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !87
  %15 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !39
  %17 = zext i32 %10 to i64
  %18 = and i64 %17, 1
  %19 = icmp eq i32 %10, 1
  br i1 %19, label %61, label %20

20:                                               ; preds = %12
  %21 = and i64 %17, 4294967294
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %55, %22 ]
  %24 = phi <2 x float> [ zeroinitializer, %20 ], [ %54, %22 ]
  %25 = phi <2 x float> [ zeroinitializer, %20 ], [ %52, %22 ]
  %26 = phi i64 [ 0, %20 ], [ %56, %22 ]
  %27 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %23, i32 1
  %28 = getelementptr inbounds float, ptr %16, i64 %23
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = getelementptr inbounds [4 x float], ptr %27, i64 0, i64 2
  %31 = load float, ptr %30, align 4, !tbaa !137
  %32 = fmul float %29, %31
  %33 = load <2 x float>, ptr %27, align 4, !tbaa !137
  %34 = insertelement <2 x float> poison, float %29, i64 0
  %35 = shufflevector <2 x float> %34, <2 x float> poison, <2 x i32> zeroinitializer
  %36 = fmul <2 x float> %35, %33
  %37 = fadd <2 x float> %25, %36
  %38 = extractelement <2 x float> %24, i64 0
  %39 = fadd float %38, %32
  %40 = insertelement <2 x float> %24, float %39, i64 0
  %41 = or i64 %23, 1
  %42 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %41, i32 1
  %43 = getelementptr inbounds float, ptr %16, i64 %41
  %44 = load float, ptr %43, align 4, !tbaa !137
  %45 = getelementptr inbounds [4 x float], ptr %42, i64 0, i64 2
  %46 = load float, ptr %45, align 4, !tbaa !137
  %47 = fmul float %44, %46
  %48 = load <2 x float>, ptr %42, align 4, !tbaa !137
  %49 = insertelement <2 x float> poison, float %44, i64 0
  %50 = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> zeroinitializer
  %51 = fmul <2 x float> %50, %48
  %52 = fadd <2 x float> %37, %51
  %53 = fadd float %39, %47
  %54 = insertelement <2 x float> %40, float %53, i64 0
  %55 = add nuw nsw i64 %23, 2
  %56 = add i64 %26, 2
  %57 = icmp eq i64 %56, %21
  br i1 %57, label %58, label %22

58:                                               ; preds = %22
  %59 = insertelement <2 x float> %24, float %39, i64 0
  %60 = insertelement <2 x float> %59, float %53, i64 0
  br label %61

61:                                               ; preds = %58, %12
  %62 = phi <2 x float> [ undef, %12 ], [ %59, %58 ]
  %63 = phi <2 x float> [ undef, %12 ], [ %52, %58 ]
  %64 = phi float [ undef, %12 ], [ %53, %58 ]
  %65 = phi i64 [ 0, %12 ], [ %55, %58 ]
  %66 = phi <2 x float> [ zeroinitializer, %12 ], [ %60, %58 ]
  %67 = phi <2 x float> [ zeroinitializer, %12 ], [ %52, %58 ]
  %68 = icmp eq i64 %18, 0
  br i1 %68, label %83, label %69

69:                                               ; preds = %61
  %70 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %14, i64 %65, i32 1
  %71 = getelementptr inbounds float, ptr %16, i64 %65
  %72 = load float, ptr %71, align 4, !tbaa !137
  %73 = getelementptr inbounds [4 x float], ptr %70, i64 0, i64 2
  %74 = load float, ptr %73, align 4, !tbaa !137
  %75 = fmul float %72, %74
  %76 = load <2 x float>, ptr %70, align 4, !tbaa !137
  %77 = insertelement <2 x float> poison, float %72, i64 0
  %78 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> zeroinitializer
  %79 = fmul <2 x float> %78, %76
  %80 = fadd <2 x float> %67, %79
  %81 = extractelement <2 x float> %66, i64 0
  %82 = fadd float %81, %75
  br label %83

83:                                               ; preds = %61, %69
  %84 = phi <2 x float> [ %62, %61 ], [ %66, %69 ]
  %85 = phi <2 x float> [ %63, %61 ], [ %80, %69 ]
  %86 = phi float [ %64, %61 ], [ %82, %69 ]
  %87 = insertelement <2 x float> %84, float %86, i64 0
  br label %88

88:                                               ; preds = %83, %8
  %89 = phi <2 x float> [ zeroinitializer, %8 ], [ %85, %83 ]
  %90 = phi <2 x float> [ zeroinitializer, %8 ], [ %87, %83 ]
  %91 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 5
  store <2 x float> %89, ptr %91, align 8, !tbaa.struct !162
  %92 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 5, i32 0, i64 2
  store <2 x float> %90, ptr %92, align 8, !tbaa.struct !164
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %2) #38
  %93 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2
  %94 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 1
  %95 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 2
  %96 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) %2, i8 0, i64 48, i1 false)
  %97 = load float, ptr %96, align 4, !tbaa !137
  br i1 %11, label %109, label %98

98:                                               ; preds = %88
  %99 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %100 = load float, ptr %99, align 4, !tbaa !137, !noalias !440
  %101 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %102 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 2
  %103 = load <4 x float>, ptr %101, align 4
  %104 = shufflevector <4 x float> %103, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %105 = load float, ptr %102, align 4, !tbaa !137, !noalias !440
  %106 = insertelement <2 x float> <float 0x3E80000000000000, float poison>, float %100, i64 1
  %107 = insertelement <2 x float> <float poison, float 0x3E90000000000000>, float %97, i64 0
  %108 = insertelement <2 x float> %104, float %105, i64 1
  br label %133

109:                                              ; preds = %88
  %110 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 4, i32 5
  %111 = load ptr, ptr %110, align 8, !tbaa !39
  %112 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %113 = load ptr, ptr %112, align 8, !tbaa !87
  %114 = extractelement <2 x float> %90, i64 0
  %115 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 3, i32 5
  %116 = load ptr, ptr %115, align 8, !tbaa !33
  %117 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %118 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %119 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 2
  %120 = load float, ptr %117, align 4, !tbaa !137
  %121 = load <4 x float>, ptr %118, align 4
  %122 = shufflevector <4 x float> %121, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %123 = load float, ptr %119, align 4, !tbaa !137
  %124 = zext i32 %10 to i64
  %125 = insertelement <2 x float> <float 0x3E80000000000000, float poison>, float %120, i64 1
  %126 = insertelement <2 x float> <float poison, float 0x3E90000000000000>, float %97, i64 0
  %127 = insertelement <2 x float> %122, float %123, i64 1
  br label %256

128:                                              ; preds = %256
  %129 = extractelement <2 x float> %285, i64 1
  store float %129, ptr %117, align 4, !tbaa !137
  %130 = extractelement <2 x float> %281, i64 0
  store float %130, ptr %118, align 4, !tbaa !137
  %131 = extractelement <2 x float> %281, i64 1
  store float %131, ptr %119, align 4, !tbaa !137
  %132 = extractelement <2 x float> %293, i64 1
  store float %132, ptr %94, align 4, !tbaa !137
  br label %133

133:                                              ; preds = %98, %128
  %134 = phi float [ %294, %128 ], [ 0x3E98000000000000, %98 ]
  %135 = phi <2 x float> [ %293, %128 ], [ zeroinitializer, %98 ]
  %136 = phi <2 x float> [ %285, %128 ], [ %106, %98 ]
  %137 = phi <2 x float> [ %288, %128 ], [ %107, %98 ]
  %138 = phi <2 x float> [ %281, %128 ], [ %108, %98 ]
  %139 = extractelement <2 x float> %136, i64 0
  store float %139, ptr %2, align 4, !tbaa !137
  store <2 x float> %137, ptr %96, align 4, !tbaa !137
  %140 = extractelement <2 x float> %135, i64 0
  store float %140, ptr %93, align 4, !tbaa !137
  store float %134, ptr %95, align 4, !tbaa !137
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %3) #38
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %4) #38
  call fastcc void @_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_(ptr noundef nonnull align 4 dereferenceable(48) %2, ptr noundef nonnull align 4 dereferenceable(48) %3, ptr noundef nonnull align 4 dereferenceable(48) %4)
  %141 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %141, ptr noundef nonnull align 4 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !162
  %142 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1
  %143 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %143, ptr noundef nonnull align 4 dereferenceable(16) %142, i64 16, i1 false), !tbaa.struct !162
  %144 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2
  %145 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 6, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %145, ptr noundef nonnull align 4 dereferenceable(16) %144, i64 16, i1 false), !tbaa.struct !162
  %146 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8
  %147 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %148 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 1
  %149 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 1
  %150 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  %151 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 2
  %152 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 2
  %153 = load float, ptr %3, align 4, !tbaa !137, !noalias !443
  %154 = load float, ptr %142, align 4, !tbaa !137, !noalias !443
  %155 = load float, ptr %144, align 4, !tbaa !137, !noalias !443
  %156 = load float, ptr %147, align 4, !tbaa !137, !noalias !443
  %157 = load float, ptr %148, align 4, !tbaa !137, !noalias !443
  %158 = load float, ptr %149, align 4, !tbaa !137, !noalias !443
  %159 = load float, ptr %150, align 4, !tbaa !137, !noalias !443
  %160 = load float, ptr %151, align 4, !tbaa !137, !noalias !443
  %161 = load float, ptr %152, align 4, !tbaa !137, !noalias !443
  %162 = load float, ptr %146, align 8, !tbaa !137, !noalias !446
  %163 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 0, i32 0, i64 1
  %164 = load float, ptr %163, align 4, !tbaa !137, !noalias !446
  %165 = fmul float %156, %164
  %166 = tail call float @llvm.fmuladd.f32(float %153, float %162, float %165)
  %167 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 0, i32 0, i64 2
  %168 = load float, ptr %167, align 8, !tbaa !137, !noalias !446
  %169 = tail call float @llvm.fmuladd.f32(float %159, float %168, float %166)
  %170 = fmul float %157, %164
  %171 = tail call float @llvm.fmuladd.f32(float %154, float %162, float %170)
  %172 = tail call float @llvm.fmuladd.f32(float %160, float %168, float %171)
  %173 = fmul float %158, %164
  %174 = tail call float @llvm.fmuladd.f32(float %155, float %162, float %173)
  %175 = tail call float @llvm.fmuladd.f32(float %161, float %168, float %174)
  %176 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1
  %177 = load float, ptr %176, align 8, !tbaa !137, !noalias !446
  %178 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1, i32 0, i64 1
  %179 = load float, ptr %178, align 4, !tbaa !137, !noalias !446
  %180 = fmul float %156, %179
  %181 = tail call float @llvm.fmuladd.f32(float %153, float %177, float %180)
  %182 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 1, i32 0, i64 2
  %183 = load float, ptr %182, align 8, !tbaa !137, !noalias !446
  %184 = tail call float @llvm.fmuladd.f32(float %159, float %183, float %181)
  %185 = fmul float %157, %179
  %186 = tail call float @llvm.fmuladd.f32(float %154, float %177, float %185)
  %187 = tail call float @llvm.fmuladd.f32(float %160, float %183, float %186)
  %188 = fmul float %158, %179
  %189 = tail call float @llvm.fmuladd.f32(float %155, float %177, float %188)
  %190 = tail call float @llvm.fmuladd.f32(float %161, float %183, float %189)
  %191 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 2
  %192 = load float, ptr %191, align 8, !tbaa !137, !noalias !446
  %193 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 2, i32 0, i64 1
  %194 = load float, ptr %193, align 4, !tbaa !137, !noalias !446
  %195 = fmul float %156, %194
  %196 = tail call float @llvm.fmuladd.f32(float %153, float %192, float %195)
  %197 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 8, i32 0, i64 2, i32 0, i64 2
  %198 = load float, ptr %197, align 8, !tbaa !137, !noalias !446
  %199 = tail call float @llvm.fmuladd.f32(float %159, float %198, float %196)
  %200 = fmul float %157, %194
  %201 = tail call float @llvm.fmuladd.f32(float %154, float %192, float %200)
  %202 = tail call float @llvm.fmuladd.f32(float %160, float %198, float %201)
  %203 = fmul float %158, %194
  %204 = tail call float @llvm.fmuladd.f32(float %155, float %192, float %203)
  %205 = tail call float @llvm.fmuladd.f32(float %161, float %198, float %204)
  %206 = insertelement <2 x float> poison, float %172, i64 0
  %207 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> zeroinitializer
  %208 = fmul <2 x float> %207, %137
  %209 = insertelement <2 x float> poison, float %169, i64 0
  %210 = shufflevector <2 x float> %209, <2 x float> poison, <2 x i32> zeroinitializer
  %211 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %136, <2 x float> %210, <2 x float> %208)
  %212 = insertelement <2 x float> poison, float %175, i64 0
  %213 = shufflevector <2 x float> %212, <2 x float> poison, <2 x i32> zeroinitializer
  %214 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %135, <2 x float> %213, <2 x float> %211)
  %215 = extractelement <2 x float> %138, i64 1
  %216 = fmul float %172, %215
  %217 = extractelement <2 x float> %138, i64 0
  %218 = tail call float @llvm.fmuladd.f32(float %217, float %169, float %216)
  %219 = tail call float @llvm.fmuladd.f32(float %134, float %175, float %218)
  %220 = insertelement <2 x float> poison, float %187, i64 0
  %221 = shufflevector <2 x float> %220, <2 x float> poison, <2 x i32> zeroinitializer
  %222 = fmul <2 x float> %221, %137
  %223 = insertelement <2 x float> poison, float %184, i64 0
  %224 = shufflevector <2 x float> %223, <2 x float> poison, <2 x i32> zeroinitializer
  %225 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %136, <2 x float> %224, <2 x float> %222)
  %226 = insertelement <2 x float> poison, float %190, i64 0
  %227 = shufflevector <2 x float> %226, <2 x float> poison, <2 x i32> zeroinitializer
  %228 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %135, <2 x float> %227, <2 x float> %225)
  %229 = fmul float %187, %215
  %230 = tail call float @llvm.fmuladd.f32(float %217, float %184, float %229)
  %231 = tail call float @llvm.fmuladd.f32(float %134, float %190, float %230)
  %232 = insertelement <2 x float> poison, float %202, i64 0
  %233 = shufflevector <2 x float> %232, <2 x float> poison, <2 x i32> zeroinitializer
  %234 = fmul <2 x float> %137, %233
  %235 = insertelement <2 x float> poison, float %199, i64 0
  %236 = shufflevector <2 x float> %235, <2 x float> poison, <2 x i32> zeroinitializer
  %237 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %136, <2 x float> %236, <2 x float> %234)
  %238 = insertelement <2 x float> poison, float %205, i64 0
  %239 = shufflevector <2 x float> %238, <2 x float> poison, <2 x i32> zeroinitializer
  %240 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %135, <2 x float> %239, <2 x float> %237)
  %241 = fmul float %202, %215
  %242 = tail call float @llvm.fmuladd.f32(float %217, float %199, float %241)
  %243 = tail call float @llvm.fmuladd.f32(float %134, float %205, float %242)
  %244 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7
  store <2 x float> %214, ptr %244, align 8
  %245 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 0, i32 0, i64 2
  store float %219, ptr %245, align 8, !tbaa.struct !164
  %246 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 0, i32 0, i64 3
  store float 0.000000e+00, ptr %246, align 4, !tbaa.struct !318
  %247 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 1
  store <2 x float> %228, ptr %247, align 8
  %248 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 1, i32 0, i64 2
  store float %231, ptr %248, align 8, !tbaa.struct !164
  %249 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %249, align 4, !tbaa.struct !318
  %250 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 2
  store <2 x float> %240, ptr %250, align 8
  %251 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 2, i32 0, i64 2
  store float %243, ptr %251, align 8, !tbaa.struct !164
  %252 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 5, i32 7, i32 0, i64 2, i32 0, i64 3
  store float 0.000000e+00, ptr %252, align 4, !tbaa.struct !318
  %253 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 19
  %254 = load float, ptr %253, align 4, !tbaa !449
  %255 = fcmp ogt float %254, 1.000000e+00
  br i1 %255, label %297, label %332

256:                                              ; preds = %109, %256
  %257 = phi i64 [ 0, %109 ], [ %295, %256 ]
  %258 = phi float [ 0x3E98000000000000, %109 ], [ %294, %256 ]
  %259 = phi <2 x float> [ zeroinitializer, %109 ], [ %293, %256 ]
  %260 = phi <2 x float> [ %125, %109 ], [ %285, %256 ]
  %261 = phi <2 x float> [ %126, %109 ], [ %288, %256 ]
  %262 = phi <2 x float> [ %127, %109 ], [ %281, %256 ]
  %263 = getelementptr inbounds float, ptr %111, i64 %257
  %264 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %113, i64 %257, i32 1
  %265 = getelementptr inbounds [4 x float], ptr %264, i64 0, i64 2
  %266 = load float, ptr %265, align 4, !tbaa !137
  %267 = fsub float %266, %114
  %268 = load float, ptr %263, align 4, !tbaa !137
  %269 = fmul float %268, %267
  %270 = getelementptr inbounds %class.btVector3, ptr %116, i64 %257
  %271 = getelementptr inbounds [4 x float], ptr %270, i64 0, i64 2
  %272 = load float, ptr %271, align 4, !tbaa !137
  %273 = load <2 x float>, ptr %264, align 4, !tbaa !137
  %274 = fsub <2 x float> %273, %89
  %275 = insertelement <2 x float> poison, float %268, i64 0
  %276 = shufflevector <2 x float> %275, <2 x float> poison, <2 x i32> zeroinitializer
  %277 = fmul <2 x float> %274, %276
  %278 = insertelement <2 x float> poison, float %272, i64 0
  %279 = shufflevector <2 x float> %278, <2 x float> poison, <2 x i32> zeroinitializer
  %280 = fmul <2 x float> %277, %279
  %281 = fadd <2 x float> %280, %262
  %282 = load <2 x float>, ptr %270, align 4, !tbaa !137
  %283 = shufflevector <2 x float> %277, <2 x float> poison, <2 x i32> zeroinitializer
  %284 = fmul <2 x float> %283, %282
  %285 = fadd <2 x float> %284, %260
  %286 = shufflevector <2 x float> %277, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %287 = fmul <2 x float> %286, %282
  %288 = fadd <2 x float> %287, %261
  %289 = insertelement <2 x float> poison, float %269, i64 0
  %290 = shufflevector <2 x float> %289, <2 x float> poison, <2 x i32> zeroinitializer
  %291 = fmul <2 x float> %290, %282
  %292 = fmul float %269, %272
  %293 = fadd <2 x float> %291, %259
  %294 = fadd float %292, %258
  %295 = add nuw nsw i64 %257, 1
  %296 = icmp eq i64 %295, %124
  br i1 %296, label %128, label %256

297:                                              ; preds = %133
  %298 = fneg float %231
  %299 = extractelement <2 x float> %240, i64 1
  %300 = fmul float %299, %298
  %301 = extractelement <2 x float> %228, i64 1
  %302 = tail call float @llvm.fmuladd.f32(float %301, float %243, float %300)
  %303 = extractelement <2 x float> %228, i64 0
  %304 = fneg float %303
  %305 = fmul float %243, %304
  %306 = extractelement <2 x float> %240, i64 0
  %307 = tail call float @llvm.fmuladd.f32(float %231, float %306, float %305)
  %308 = extractelement <2 x float> %214, i64 1
  %309 = fmul float %307, %308
  %310 = extractelement <2 x float> %214, i64 0
  %311 = tail call float @llvm.fmuladd.f32(float %310, float %302, float %309)
  %312 = fneg float %301
  %313 = fmul float %306, %312
  %314 = tail call float @llvm.fmuladd.f32(float %303, float %299, float %313)
  %315 = tail call float @llvm.fmuladd.f32(float %219, float %314, float %311)
  %316 = fdiv float 1.000000e+00, %315
  %317 = fcmp olt float %316, 1.000000e+00
  %318 = fcmp ogt float %316, %254
  %319 = select i1 %318, float %254, float %316
  %320 = select i1 %317, float 1.000000e+00, float %319
  %321 = insertelement <2 x float> poison, float %320, i64 0
  %322 = shufflevector <2 x float> %321, <2 x float> poison, <2 x i32> zeroinitializer
  %323 = fmul <2 x float> %214, %322
  %324 = fmul float %219, %320
  %325 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %324, i64 0
  %326 = fmul <2 x float> %228, %322
  %327 = fmul float %231, %320
  %328 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %327, i64 0
  %329 = fmul <2 x float> %240, %322
  %330 = fmul float %243, %320
  %331 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %330, i64 0
  store <2 x float> %323, ptr %244, align 8, !tbaa.struct !162
  store <2 x float> %325, ptr %245, align 8, !tbaa.struct !164
  store <2 x float> %326, ptr %247, align 8, !tbaa.struct !162
  store <2 x float> %328, ptr %248, align 8, !tbaa.struct !164
  store <2 x float> %329, ptr %250, align 8, !tbaa.struct !162
  store <2 x float> %331, ptr %251, align 8, !tbaa.struct !164
  br label %332

332:                                              ; preds = %297, %133
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %4) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %2) #38
  br label %333

333:                                              ; preds = %332, %1
  ret void
}

declare void @_ZN6btDbvt19optimizeIncrementalEi(ptr noundef nonnull align 8 dereferenceable(64), i32 noundef) local_unnamed_addr #1

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody16solveConstraintsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.btVector3, align 8
  %3 = alloca %class.btMatrix3x3, align 4
  tail call void @_ZN10btSoftBody13applyClustersEb(ptr noundef nonnull align 8 dereferenceable(1496) %0, i1 noundef zeroext false)
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !92
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %42

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %9 = zext i32 %5 to i64
  br label %10

10:                                               ; preds = %7, %10
  %11 = phi i64 [ 0, %7 ], [ %40, %10 ]
  %12 = load ptr, ptr %8, align 8, !tbaa !91
  %13 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %11, i32 1
  %14 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %11, i32 1, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !219
  %16 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %15, i64 0, i32 2
  %17 = load ptr, ptr %13, align 8, !tbaa !219
  %18 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 0, i32 2
  %19 = load <2 x float>, ptr %16, align 4, !tbaa !137
  %20 = load <2 x float>, ptr %18, align 4, !tbaa !137
  %21 = fsub <2 x float> %19, %20
  %22 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %15, i64 0, i32 2, i32 0, i64 2
  %23 = load float, ptr %22, align 4, !tbaa !137
  %24 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %17, i64 0, i32 2, i32 0, i64 2
  %25 = load float, ptr %24, align 4, !tbaa !137
  %26 = fsub float %23, %25
  %27 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %26, i64 0
  %28 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %11, i32 8
  store <2 x float> %21, ptr %28, align 4, !tbaa.struct !162
  %29 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %11, i32 8, i32 0, i64 2
  store <2 x float> %27, ptr %29, align 4, !tbaa.struct !164
  %30 = fmul <2 x float> %21, %21
  %31 = extractelement <2 x float> %30, i64 1
  %32 = extractelement <2 x float> %21, i64 0
  %33 = tail call float @llvm.fmuladd.f32(float %32, float %32, float %31)
  %34 = tail call float @llvm.fmuladd.f32(float %26, float %26, float %33)
  %35 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %11, i32 5
  %36 = load float, ptr %35, align 8, !tbaa !301
  %37 = fmul float %36, %34
  %38 = fdiv float 1.000000e+00, %37
  %39 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %12, i64 %11, i32 7
  store float %38, ptr %39, align 8, !tbaa !450
  %40 = add nuw nsw i64 %11, 1
  %41 = icmp eq i64 %40, %9
  br i1 %41, label %42, label %10

42:                                               ; preds = %10, %1
  %43 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 2
  %44 = load i32, ptr %43, align 4, !tbaa !104
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %119

46:                                               ; preds = %42
  %47 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 5
  %48 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %2, i64 0, i32 1
  %49 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %50 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1
  %51 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2
  %52 = zext i32 %44 to i64
  br label %53

53:                                               ; preds = %46, %53
  %54 = phi i64 [ 0, %46 ], [ %117, %53 ]
  %55 = load ptr, ptr %47, align 8, !tbaa !103
  %56 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %55, i64 %54
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #38
  %57 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %55, i64 %54, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !245
  %59 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1
  %60 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %55, i64 %54, i32 1
  %61 = load float, ptr %60, align 4, !tbaa !137
  %62 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 0, i32 0, i64 1
  %63 = getelementptr inbounds [4 x float], ptr %60, i64 0, i64 1
  %64 = load float, ptr %63, align 4, !tbaa !137
  %65 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 0, i32 0, i64 2
  %66 = getelementptr inbounds [4 x float], ptr %60, i64 0, i64 2
  %67 = load float, ptr %66, align 4, !tbaa !137
  %68 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 1
  %69 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 1, i32 0, i64 1
  %70 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 1, i32 0, i64 2
  %71 = load float, ptr %59, align 4, !tbaa !137
  %72 = load float, ptr %62, align 4, !tbaa !137
  %73 = load float, ptr %65, align 4, !tbaa !137
  %74 = load float, ptr %68, align 4, !tbaa !137
  %75 = load float, ptr %69, align 4, !tbaa !137
  %76 = insertelement <2 x float> poison, float %64, i64 0
  %77 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> zeroinitializer
  %78 = insertelement <2 x float> poison, float %72, i64 0
  %79 = insertelement <2 x float> %78, float %75, i64 1
  %80 = fmul <2 x float> %77, %79
  %81 = insertelement <2 x float> poison, float %71, i64 0
  %82 = insertelement <2 x float> %81, float %74, i64 1
  %83 = insertelement <2 x float> poison, float %61, i64 0
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer
  %85 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %82, <2 x float> %84, <2 x float> %80)
  %86 = load float, ptr %70, align 4, !tbaa !137
  %87 = insertelement <2 x float> poison, float %73, i64 0
  %88 = insertelement <2 x float> %87, float %86, i64 1
  %89 = insertelement <2 x float> poison, float %67, i64 0
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> zeroinitializer
  %91 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %88, <2 x float> %90, <2 x float> %85)
  %92 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 2
  %93 = load float, ptr %92, align 4, !tbaa !137
  %94 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 2, i32 0, i64 1
  %95 = load float, ptr %94, align 4, !tbaa !137
  %96 = fmul float %64, %95
  %97 = tail call float @llvm.fmuladd.f32(float %93, float %61, float %96)
  %98 = getelementptr inbounds %class.btCollisionObject, ptr %58, i64 0, i32 1, i32 0, i32 0, i64 2, i32 0, i64 2
  %99 = load float, ptr %98, align 4, !tbaa !137
  %100 = tail call float @llvm.fmuladd.f32(float %99, float %67, float %97)
  %101 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %100, i64 0
  store <2 x float> %91, ptr %2, align 8
  store <2 x float> %101, ptr %48, align 8
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %3) #38
  %102 = load float, ptr %49, align 8, !tbaa !418
  %103 = load ptr, ptr %56, align 8, !tbaa !234
  %104 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %103, i64 0, i32 6
  %105 = load float, ptr %104, align 8, !tbaa !174
  %106 = getelementptr inbounds %class.btRigidBody, ptr %58, i64 0, i32 4
  %107 = load float, ptr %106, align 8, !tbaa !451
  %108 = getelementptr inbounds %class.btRigidBody, ptr %58, i64 0, i32 1
  call fastcc void @_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3(ptr noalias nonnull align 4 %3, float noundef %102, float noundef %105, float noundef %107, ptr noundef nonnull align 4 dereferenceable(48) %108, ptr noundef nonnull align 4 dereferenceable(16) %2)
  %109 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %55, i64 %54, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %109, ptr noundef nonnull align 4 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !162
  %110 = getelementptr inbounds [3 x %class.btVector3], ptr %109, i64 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %110, ptr noundef nonnull align 4 dereferenceable(16) %50, i64 16, i1 false), !tbaa.struct !162
  %111 = getelementptr inbounds [3 x %class.btVector3], ptr %109, i64 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %111, ptr noundef nonnull align 4 dereferenceable(16) %51, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #38
  %112 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %55, i64 %54, i32 4
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %112, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !162
  %113 = load float, ptr %49, align 8, !tbaa !418
  %114 = load float, ptr %104, align 8, !tbaa !174
  %115 = fmul float %113, %114
  %116 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %55, i64 %54, i32 5
  store float %115, ptr %116, align 8, !tbaa !455
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %58, i1 noundef zeroext false)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #38
  %117 = add nuw nsw i64 %54, 1
  %118 = icmp eq i64 %117, %52
  br i1 %118, label %119, label %53

119:                                              ; preds = %53, %42
  %120 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 21
  %121 = load i32, ptr %120, align 4, !tbaa !456
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %123, label %182

123:                                              ; preds = %119
  %124 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 2
  %125 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 26, i32 5
  %126 = load i32, ptr %124, align 4, !tbaa !22
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %128, label %133

128:                                              ; preds = %123, %143
  %129 = phi i32 [ %144, %143 ], [ %121, %123 ]
  %130 = phi i32 [ %145, %143 ], [ %126, %123 ]
  %131 = phi i32 [ %146, %143 ], [ 0, %123 ]
  %132 = icmp sgt i32 %130, 0
  br i1 %132, label %148, label %143

133:                                              ; preds = %143, %123
  %134 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %135 = load i32, ptr %134, align 4, !tbaa !88
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %137, label %182

137:                                              ; preds = %133
  %138 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %139 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %140 = zext i32 %135 to i64
  br label %159

141:                                              ; preds = %148
  %142 = load i32, ptr %120, align 4, !tbaa !456
  br label %143

143:                                              ; preds = %141, %128
  %144 = phi i32 [ %142, %141 ], [ %129, %128 ]
  %145 = phi i32 [ %156, %141 ], [ %130, %128 ]
  %146 = add nuw nsw i32 %131, 1
  %147 = icmp slt i32 %146, %144
  br i1 %147, label %128, label %133, !llvm.loop !457

148:                                              ; preds = %128, %148
  %149 = phi i64 [ %155, %148 ], [ 0, %128 ]
  %150 = load ptr, ptr %125, align 8, !tbaa !21
  %151 = getelementptr inbounds i32, ptr %150, i64 %149
  %152 = load i32, ptr %151, align 4, !tbaa !202
  %153 = icmp eq i32 %152, 0
  %154 = select i1 %153, ptr @_ZN10btSoftBody12VSolve_LinksEPS_f, ptr null
  tail call void %154(ptr noundef nonnull %0, float noundef 1.000000e+00), !callees !459
  %155 = add nuw nsw i64 %149, 1
  %156 = load i32, ptr %124, align 4, !tbaa !22
  %157 = sext i32 %156 to i64
  %158 = icmp slt i64 %155, %157
  br i1 %158, label %148, label %141

159:                                              ; preds = %137, %159
  %160 = phi i64 [ 0, %137 ], [ %180, %159 ]
  %161 = load ptr, ptr %138, align 8, !tbaa !87
  %162 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %161, i64 %160, i32 2
  %163 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %161, i64 %160, i32 3
  %164 = load float, ptr %139, align 8, !tbaa !137
  %165 = getelementptr inbounds [4 x float], ptr %163, i64 0, i64 2
  %166 = load float, ptr %165, align 4, !tbaa !137
  %167 = fmul float %164, %166
  %168 = load <2 x float>, ptr %163, align 4, !tbaa !137
  %169 = insertelement <2 x float> poison, float %164, i64 0
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = fmul <2 x float> %170, %168
  %172 = load <2 x float>, ptr %162, align 4, !tbaa !137
  %173 = fadd <2 x float> %171, %172
  %174 = getelementptr inbounds [4 x float], ptr %162, i64 0, i64 2
  %175 = load float, ptr %174, align 4, !tbaa !137
  %176 = fadd float %167, %175
  %177 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %176, i64 0
  %178 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %161, i64 %160, i32 1
  store <2 x float> %173, ptr %178, align 8, !tbaa.struct !162
  %179 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %161, i64 %160, i32 1, i32 0, i64 2
  store <2 x float> %177, ptr %179, align 8, !tbaa.struct !164
  %180 = add nuw nsw i64 %160, 1
  %181 = icmp eq i64 %180, %140
  br i1 %181, label %182, label %159

182:                                              ; preds = %159, %133, %119
  %183 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 22
  %184 = load i32, ptr %183, align 8, !tbaa !460
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %186, label %253

186:                                              ; preds = %182
  %187 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 2
  %188 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 5
  %189 = load i32, ptr %187, align 4, !tbaa !28
  br label %205

190:                                              ; preds = %215
  %191 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 1
  %192 = load float, ptr %191, align 4, !tbaa !419
  %193 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 2
  %194 = load float, ptr %193, align 8, !tbaa !461
  %195 = fsub float 1.000000e+00, %194
  %196 = fmul float %192, %195
  %197 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %198 = load i32, ptr %197, align 4, !tbaa !88
  %199 = icmp sgt i32 %198, 0
  br i1 %199, label %200, label %253

200:                                              ; preds = %190
  %201 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %202 = zext i32 %198 to i64
  %203 = insertelement <2 x float> poison, float %196, i64 0
  %204 = shufflevector <2 x float> %203, <2 x float> poison, <2 x i32> zeroinitializer
  br label %232

205:                                              ; preds = %186, %215
  %206 = phi i32 [ %184, %186 ], [ %216, %215 ]
  %207 = phi i32 [ %189, %186 ], [ %217, %215 ]
  %208 = phi i32 [ 0, %186 ], [ %218, %215 ]
  %209 = sitofp i32 %208 to float
  %210 = sitofp i32 %206 to float
  %211 = fdiv float %209, %210
  %212 = icmp sgt i32 %207, 0
  br i1 %212, label %220, label %215

213:                                              ; preds = %220
  %214 = load i32, ptr %183, align 8, !tbaa !460
  br label %215

215:                                              ; preds = %213, %205
  %216 = phi i32 [ %214, %213 ], [ %206, %205 ]
  %217 = phi i32 [ %229, %213 ], [ %207, %205 ]
  %218 = add nuw nsw i32 %208, 1
  %219 = icmp slt i32 %218, %216
  br i1 %219, label %205, label %190

220:                                              ; preds = %205, %220
  %221 = phi i64 [ %228, %220 ], [ 0, %205 ]
  %222 = load ptr, ptr %188, align 8, !tbaa !27
  %223 = getelementptr inbounds i32, ptr %222, i64 %221
  %224 = load i32, ptr %223, align 4, !tbaa !184
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [4 x ptr], ptr @switch.table._ZN10btSoftBody11staticSolveEi, i64 0, i64 %225
  %227 = load ptr, ptr %226, align 8
  tail call void %227(ptr noundef nonnull %0, float noundef 1.000000e+00, float noundef %211), !callees !462
  %228 = add nuw nsw i64 %221, 1
  %229 = load i32, ptr %187, align 4, !tbaa !28
  %230 = sext i32 %229 to i64
  %231 = icmp slt i64 %228, %230
  br i1 %231, label %220, label %213

232:                                              ; preds = %200, %232
  %233 = phi i64 [ 0, %200 ], [ %251, %232 ]
  %234 = load ptr, ptr %201, align 8, !tbaa !87
  %235 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %234, i64 %233, i32 1
  %236 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %234, i64 %233, i32 2
  %237 = getelementptr inbounds [4 x float], ptr %235, i64 0, i64 2
  %238 = load float, ptr %237, align 4, !tbaa !137
  %239 = getelementptr inbounds [4 x float], ptr %236, i64 0, i64 2
  %240 = load float, ptr %239, align 4, !tbaa !137
  %241 = fsub float %238, %240
  %242 = load <2 x float>, ptr %235, align 4, !tbaa !137
  %243 = load <2 x float>, ptr %236, align 4, !tbaa !137
  %244 = fsub <2 x float> %242, %243
  %245 = fmul <2 x float> %204, %244
  %246 = fmul float %196, %241
  %247 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %246, i64 0
  %248 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %234, i64 %233, i32 3
  store <2 x float> %245, ptr %248, align 8, !tbaa.struct !162
  %249 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %234, i64 %233, i32 3, i32 0, i64 2
  store <2 x float> %247, ptr %249, align 8, !tbaa.struct !164
  %250 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %234, i64 %233, i32 4
  %251 = add nuw nsw i64 %233, 1
  %252 = icmp eq i64 %251, %202
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %250, i8 0, i64 16, i1 false)
  br i1 %252, label %253, label %232

253:                                              ; preds = %232, %190, %182
  %254 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 23
  %255 = load i32, ptr %254, align 4, !tbaa !463
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %357

257:                                              ; preds = %253
  %258 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 1
  %259 = load float, ptr %258, align 4, !tbaa !136
  %260 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 1
  %261 = load float, ptr %260, align 4, !tbaa !419
  %262 = fmul float %259, %261
  %263 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %264 = load i32, ptr %263, align 4, !tbaa !88
  %265 = icmp sgt i32 %264, 0
  br i1 %265, label %266, label %283

266:                                              ; preds = %257
  %267 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %268 = zext i32 %264 to i64
  %269 = and i64 %268, 1
  %270 = icmp eq i32 %264, 1
  br i1 %270, label %273, label %271

271:                                              ; preds = %266
  %272 = and i64 %268, 4294967294
  br label %289

273:                                              ; preds = %289, %266
  %274 = phi i64 [ 0, %266 ], [ %299, %289 ]
  %275 = icmp eq i64 %269, 0
  br i1 %275, label %280, label %276

276:                                              ; preds = %273
  %277 = load ptr, ptr %267, align 8, !tbaa !87
  %278 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %277, i64 %274, i32 1
  %279 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %277, i64 %274, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %279, ptr noundef nonnull align 8 dereferenceable(16) %278, i64 16, i1 false), !tbaa.struct !162
  br label %280

280:                                              ; preds = %273, %276
  %281 = load i32, ptr %254, align 4, !tbaa !463
  %282 = icmp sgt i32 %281, 0
  br i1 %282, label %283, label %307

283:                                              ; preds = %257, %280
  %284 = phi i32 [ %281, %280 ], [ %255, %257 ]
  %285 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 2
  %286 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 28, i32 5
  %287 = load i32, ptr %285, align 4, !tbaa !28
  %288 = icmp sgt i32 %287, 0
  br i1 %288, label %302, label %307

289:                                              ; preds = %289, %271
  %290 = phi i64 [ 0, %271 ], [ %299, %289 ]
  %291 = phi i64 [ 0, %271 ], [ %300, %289 ]
  %292 = load ptr, ptr %267, align 8, !tbaa !87
  %293 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %292, i64 %290, i32 1
  %294 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %292, i64 %290, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %294, ptr noundef nonnull align 8 dereferenceable(16) %293, i64 16, i1 false), !tbaa.struct !162
  %295 = or i64 %290, 1
  %296 = load ptr, ptr %267, align 8, !tbaa !87
  %297 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %296, i64 %295, i32 1
  %298 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %296, i64 %295, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %298, ptr noundef nonnull align 8 dereferenceable(16) %297, i64 16, i1 false), !tbaa.struct !162
  %299 = add nuw nsw i64 %290, 2
  %300 = add i64 %291, 2
  %301 = icmp eq i64 %300, %272
  br i1 %301, label %273, label %289

302:                                              ; preds = %283, %318
  %303 = phi i32 [ %319, %318 ], [ %284, %283 ]
  %304 = phi i32 [ %320, %318 ], [ %287, %283 ]
  %305 = phi i32 [ %321, %318 ], [ 0, %283 ]
  %306 = icmp sgt i32 %304, 0
  br i1 %306, label %323, label %318

307:                                              ; preds = %318, %283, %280
  %308 = load i32, ptr %263, align 4, !tbaa !88
  %309 = icmp sgt i32 %308, 0
  br i1 %309, label %310, label %357

310:                                              ; preds = %307
  %311 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %312 = load ptr, ptr %311, align 8, !tbaa !87
  %313 = zext i32 %308 to i64
  %314 = insertelement <2 x float> poison, float %262, i64 0
  %315 = shufflevector <2 x float> %314, <2 x float> poison, <2 x i32> zeroinitializer
  br label %335

316:                                              ; preds = %323
  %317 = load i32, ptr %254, align 4, !tbaa !463
  br label %318

318:                                              ; preds = %316, %302
  %319 = phi i32 [ %317, %316 ], [ %303, %302 ]
  %320 = phi i32 [ %332, %316 ], [ %304, %302 ]
  %321 = add nuw nsw i32 %305, 1
  %322 = icmp slt i32 %321, %319
  br i1 %322, label %302, label %307, !llvm.loop !464

323:                                              ; preds = %302, %323
  %324 = phi i64 [ %331, %323 ], [ 0, %302 ]
  %325 = load ptr, ptr %286, align 8, !tbaa !27
  %326 = getelementptr inbounds i32, ptr %325, i64 %324
  %327 = load i32, ptr %326, align 4, !tbaa !184
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds [4 x ptr], ptr @switch.table._ZN10btSoftBody11staticSolveEi, i64 0, i64 %328
  %330 = load ptr, ptr %329, align 8
  tail call void %330(ptr noundef nonnull %0, float noundef 1.000000e+00, float noundef 0.000000e+00), !callees !462
  %331 = add nuw nsw i64 %324, 1
  %332 = load i32, ptr %285, align 4, !tbaa !28
  %333 = sext i32 %332 to i64
  %334 = icmp slt i64 %331, %333
  br i1 %334, label %323, label %316

335:                                              ; preds = %310, %335
  %336 = phi i64 [ 0, %310 ], [ %355, %335 ]
  %337 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %312, i64 %336, i32 1
  %338 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %312, i64 %336, i32 2
  %339 = getelementptr inbounds [4 x float], ptr %337, i64 0, i64 2
  %340 = load float, ptr %339, align 4, !tbaa !137
  %341 = getelementptr inbounds [4 x float], ptr %338, i64 0, i64 2
  %342 = load float, ptr %341, align 4, !tbaa !137
  %343 = fsub float %340, %342
  %344 = fmul float %262, %343
  %345 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %312, i64 %336, i32 3
  %346 = load <2 x float>, ptr %337, align 4, !tbaa !137
  %347 = load <2 x float>, ptr %338, align 4, !tbaa !137
  %348 = fsub <2 x float> %346, %347
  %349 = fmul <2 x float> %315, %348
  %350 = load <2 x float>, ptr %345, align 4, !tbaa !137
  %351 = fadd <2 x float> %349, %350
  store <2 x float> %351, ptr %345, align 4, !tbaa !137
  %352 = getelementptr inbounds [4 x float], ptr %345, i64 0, i64 2
  %353 = load float, ptr %352, align 4, !tbaa !137
  %354 = fadd float %344, %353
  store float %354, ptr %352, align 4, !tbaa !137
  %355 = add nuw nsw i64 %336, 1
  %356 = icmp eq i64 %355, %313
  br i1 %356, label %357, label %335

357:                                              ; preds = %335, %307, %253
  tail call void @_ZN10btSoftBody12dampClustersEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  tail call void @_ZN10btSoftBody13applyClustersEb(ptr noundef nonnull align 8 dereferenceable(1496) %0, i1 noundef zeroext true)
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody13applyClustersEb(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, i1 noundef zeroext %1) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZN15CProfileManager13Start_ProfileEPKc(ptr noundef nonnull @.str.1)
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !88
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %19

7:                                                ; preds = %2
  %8 = zext i32 %5 to i64
  %9 = shl nuw nsw i64 %8, 4
  %10 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %9, i32 noundef 16)
          to label %11 unwind label %58

11:                                               ; preds = %7
  tail call void @llvm.memset.p0.i64(ptr align 4 %10, i8 0, i64 %9, i1 false)
  %12 = load i32, ptr %4, align 4, !tbaa !88
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %11
  %15 = zext i32 %12 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %16, i32 noundef 16)
          to label %18 unwind label %60

18:                                               ; preds = %14
  tail call void @llvm.memset.p0.i64(ptr align 4 %17, i8 0, i64 %16, i1 false), !tbaa !137
  br label %19

19:                                               ; preds = %2, %18, %11
  %20 = phi ptr [ %10, %11 ], [ %10, %18 ], [ null, %2 ]
  %21 = phi ptr [ null, %11 ], [ %17, %18 ], [ null, %2 ]
  %22 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %23 = load i32, ptr %22, align 4, !tbaa !124
  br i1 %1, label %24, label %65

24:                                               ; preds = %19
  %25 = icmp sgt i32 %23, 0
  br i1 %25, label %26, label %74

26:                                               ; preds = %24
  %27 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !123
  %29 = zext i32 %23 to i64
  br label %30

30:                                               ; preds = %26, %62
  %31 = phi i64 [ 0, %26 ], [ %63, %62 ]
  %32 = getelementptr inbounds ptr, ptr %28, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !219
  %34 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %33, i64 0, i32 12
  %35 = load i32, ptr %34, align 4, !tbaa !322
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %62, label %37

37:                                               ; preds = %30
  %38 = sitofp i32 %35 to float
  %39 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %33, i64 0, i32 10
  %40 = fdiv float 1.000000e+00, %38
  %41 = load <2 x float>, ptr %39, align 4, !tbaa !137
  %42 = insertelement <2 x float> poison, float %40, i64 0
  %43 = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> zeroinitializer
  %44 = fmul <2 x float> %43, %41
  store <2 x float> %44, ptr %39, align 4, !tbaa !137
  %45 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %33, i64 0, i32 10, i64 0, i32 0, i64 2
  %46 = load float, ptr %45, align 4, !tbaa !137
  %47 = fmul float %40, %46
  store float %47, ptr %45, align 4, !tbaa !137
  %48 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %33, i64 0, i32 10, i64 1
  %49 = load <2 x float>, ptr %48, align 4, !tbaa !137
  %50 = fmul <2 x float> %43, %49
  store <2 x float> %50, ptr %48, align 4, !tbaa !137
  %51 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %33, i64 0, i32 10, i64 1, i32 0, i64 2
  %52 = load float, ptr %51, align 4, !tbaa !137
  %53 = fmul float %40, %52
  store float %53, ptr %51, align 4, !tbaa !137
  br label %62

54:                                               ; preds = %207
  %55 = landingpad { ptr, i32 }
          cleanup
  br label %214

56:                                               ; preds = %204
  %57 = landingpad { ptr, i32 }
          cleanup
  br label %209

58:                                               ; preds = %7
  %59 = landingpad { ptr, i32 }
          cleanup
  br label %214

60:                                               ; preds = %14
  %61 = landingpad { ptr, i32 }
          cleanup
  br label %209

62:                                               ; preds = %37, %30
  %63 = add nuw nsw i64 %31, 1
  %64 = icmp eq i64 %63, %29
  br i1 %64, label %65, label %30

65:                                               ; preds = %62, %19
  %66 = icmp sgt i32 %23, 0
  br i1 %66, label %67, label %74

67:                                               ; preds = %65
  %68 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %69 = load ptr, ptr %68, align 8, !tbaa !123
  %70 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %71 = load ptr, ptr %70, align 8
  %72 = ptrtoint ptr %71 to i64
  %73 = zext i32 %23 to i64
  br label %79

74:                                               ; preds = %175, %24, %65
  br i1 %6, label %75, label %202

75:                                               ; preds = %74
  %76 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 9, i32 5
  %77 = load ptr, ptr %76, align 8
  %78 = zext i32 %5 to i64
  br label %178

79:                                               ; preds = %67, %175
  %80 = phi i64 [ 0, %67 ], [ %176, %175 ]
  %81 = getelementptr inbounds ptr, ptr %69, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !219
  %83 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 12
  %84 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 11
  %85 = select i1 %1, ptr %83, ptr %84
  %86 = load i32, ptr %85, align 4, !tbaa !140
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %175

88:                                               ; preds = %79
  %89 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 10
  %90 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 9
  %91 = select i1 %1, ptr %89, ptr %90
  %92 = load float, ptr %3, align 8, !tbaa !137
  %93 = getelementptr inbounds [4 x float], ptr %91, i64 0, i64 2
  %94 = load float, ptr %93, align 4, !tbaa !137
  %95 = fmul float %92, %94
  %96 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 10, i64 1
  %97 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 9, i64 1
  %98 = select i1 %1, ptr %96, ptr %97
  %99 = load float, ptr %98, align 4, !tbaa !137
  %100 = fmul float %92, %99
  %101 = getelementptr inbounds [4 x float], ptr %98, i64 0, i64 1
  %102 = load <2 x float>, ptr %91, align 4, !tbaa !137
  %103 = insertelement <2 x float> poison, float %92, i64 0
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> zeroinitializer
  %105 = fmul <2 x float> %104, %102
  %106 = load <2 x float>, ptr %101, align 4, !tbaa !137
  %107 = fmul <2 x float> %104, %106
  %108 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %82, i64 0, i32 2
  %109 = load i32, ptr %108, align 4, !tbaa !319
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %175

111:                                              ; preds = %88
  %112 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %82, i64 0, i32 5
  %113 = load ptr, ptr %112, align 8, !tbaa !320
  %114 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 1, i32 5
  %115 = load ptr, ptr %114, align 8, !tbaa !39
  %116 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 8
  %117 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 8, i32 0, i64 1
  %118 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %82, i64 0, i32 8, i32 0, i64 2
  %119 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %120 = insertelement <2 x float> %119, float %100, i64 1
  %121 = fneg <2 x float> %120
  %122 = extractelement <2 x float> %107, i64 0
  %123 = fneg float %122
  %124 = zext i32 %109 to i64
  br label %125

125:                                              ; preds = %111, %125
  %126 = phi i64 [ 0, %111 ], [ %173, %125 ]
  %127 = getelementptr inbounds ptr, ptr %113, i64 %126
  %128 = load ptr, ptr %127, align 8, !tbaa !219
  %129 = ptrtoint ptr %128 to i64
  %130 = sub i64 %129, %72
  %131 = sdiv exact i64 %130, 120
  %132 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %128, i64 0, i32 1
  %133 = getelementptr inbounds float, ptr %115, i64 %126
  %134 = load float, ptr %133, align 4, !tbaa !137
  %135 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %128, i64 0, i32 1, i32 0, i64 1
  %136 = load float, ptr %135, align 4, !tbaa !137
  %137 = load float, ptr %117, align 4, !tbaa !137
  %138 = fsub float %136, %137
  %139 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %128, i64 0, i32 1, i32 0, i64 2
  %140 = shl i64 %131, 32
  %141 = ashr exact i64 %140, 32
  %142 = getelementptr inbounds %class.btVector3, ptr %20, i64 %141
  %143 = load float, ptr %132, align 4, !tbaa !137
  %144 = load float, ptr %116, align 4, !tbaa !137
  %145 = load float, ptr %139, align 4, !tbaa !137
  %146 = load float, ptr %118, align 4, !tbaa !137
  %147 = insertelement <2 x float> poison, float %145, i64 0
  %148 = insertelement <2 x float> %147, float %143, i64 1
  %149 = insertelement <2 x float> poison, float %146, i64 0
  %150 = insertelement <2 x float> %149, float %144, i64 1
  %151 = fsub <2 x float> %148, %150
  %152 = shufflevector <2 x float> %151, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %153 = insertelement <2 x float> %152, float %138, i64 0
  %154 = fmul <2 x float> %153, %121
  %155 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %107, <2 x float> %151, <2 x float> %154)
  %156 = extractelement <2 x float> %151, i64 1
  %157 = fmul float %156, %123
  %158 = tail call float @llvm.fmuladd.f32(float %100, float %138, float %157)
  %159 = fadd <2 x float> %105, %155
  %160 = fadd float %95, %158
  %161 = insertelement <2 x float> poison, float %134, i64 0
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer
  %163 = fmul <2 x float> %162, %159
  %164 = fmul float %134, %160
  %165 = load <2 x float>, ptr %142, align 4, !tbaa !137
  %166 = fadd <2 x float> %165, %163
  store <2 x float> %166, ptr %142, align 4, !tbaa !137
  %167 = getelementptr inbounds [4 x float], ptr %142, i64 0, i64 2
  %168 = load float, ptr %167, align 4, !tbaa !137
  %169 = fadd float %164, %168
  store float %169, ptr %167, align 4, !tbaa !137
  %170 = getelementptr inbounds float, ptr %21, i64 %141
  %171 = load float, ptr %170, align 4, !tbaa !137
  %172 = fadd float %134, %171
  store float %172, ptr %170, align 4, !tbaa !137
  %173 = add nuw nsw i64 %126, 1
  %174 = icmp eq i64 %173, %124
  br i1 %174, label %175, label %125

175:                                              ; preds = %125, %88, %79
  %176 = add nuw nsw i64 %80, 1
  %177 = icmp eq i64 %176, %73
  br i1 %177, label %74, label %79

178:                                              ; preds = %75, %199
  %179 = phi i64 [ 0, %75 ], [ %200, %199 ]
  %180 = getelementptr inbounds float, ptr %21, i64 %179
  %181 = load float, ptr %180, align 4, !tbaa !137
  %182 = fcmp ogt float %181, 0.000000e+00
  br i1 %182, label %183, label %199

183:                                              ; preds = %178
  %184 = getelementptr inbounds %class.btVector3, ptr %20, i64 %179
  %185 = fdiv float 1.000000e+00, %181
  %186 = getelementptr inbounds [4 x float], ptr %184, i64 0, i64 2
  %187 = load float, ptr %186, align 4, !tbaa !137
  %188 = fmul float %185, %187
  %189 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %77, i64 %179, i32 1
  %190 = load <2 x float>, ptr %184, align 4, !tbaa !137
  %191 = insertelement <2 x float> poison, float %185, i64 0
  %192 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> zeroinitializer
  %193 = fmul <2 x float> %192, %190
  %194 = load <2 x float>, ptr %189, align 4, !tbaa !137
  %195 = fadd <2 x float> %193, %194
  store <2 x float> %195, ptr %189, align 4, !tbaa !137
  %196 = getelementptr inbounds [4 x float], ptr %189, i64 0, i64 2
  %197 = load float, ptr %196, align 4, !tbaa !137
  %198 = fadd float %188, %197
  store float %198, ptr %196, align 4, !tbaa !137
  br label %199

199:                                              ; preds = %178, %183
  %200 = add nuw nsw i64 %179, 1
  %201 = icmp eq i64 %200, %78
  br i1 %201, label %204, label %178

202:                                              ; preds = %74
  %203 = icmp eq ptr %21, null
  br i1 %203, label %205, label %204

204:                                              ; preds = %199, %202
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %21)
          to label %205 unwind label %56

205:                                              ; preds = %202, %204
  %206 = icmp eq ptr %20, null
  br i1 %206, label %208, label %207

207:                                              ; preds = %205
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %20)
          to label %208 unwind label %54

208:                                              ; preds = %205, %207
  tail call void @_ZN15CProfileManager12Stop_ProfileEv()
  ret void

209:                                              ; preds = %60, %56
  %210 = phi ptr [ %20, %56 ], [ %10, %60 ]
  %211 = phi { ptr, i32 } [ %57, %56 ], [ %61, %60 ]
  %212 = icmp eq ptr %210, null
  br i1 %212, label %214, label %213

213:                                              ; preds = %209
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %210)
          to label %214 unwind label %217

214:                                              ; preds = %209, %58, %213, %54
  %215 = phi { ptr, i32 } [ %55, %54 ], [ %59, %58 ], [ %211, %209 ], [ %211, %213 ]
  invoke void @_ZN15CProfileManager12Stop_ProfileEv()
          to label %216 unwind label %217

216:                                              ; preds = %214
  resume { ptr, i32 } %215

217:                                              ; preds = %214, %213
  %218 = landingpad { ptr, i32 }
          catch ptr null
  %219 = extractvalue { ptr, i32 } %218, 0
  tail call void @__clang_call_terminate(ptr %219) #39
  unreachable
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define internal fastcc void @_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3(ptr noalias nocapture writeonly align 4 %0, float noundef %1, float noundef %2, float noundef %3, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %4, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %5) unnamed_addr #24 {
  %7 = fdiv float 1.000000e+00, %1
  %8 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %9 = load float, ptr %8, align 4, !tbaa !137, !noalias !465
  %10 = fneg float %9
  %11 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 1
  %12 = load float, ptr %11, align 4, !tbaa !137, !noalias !465
  %13 = load float, ptr %5, align 4, !tbaa !137, !noalias !465
  %14 = fneg float %13
  %15 = fneg float %12
  %16 = load float, ptr %4, align 4, !tbaa !137, !noalias !470
  %17 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1
  %18 = load float, ptr %17, align 4, !tbaa !137, !noalias !470
  %19 = fmul float %18, %10
  %20 = tail call float @llvm.fmuladd.f32(float %16, float 0.000000e+00, float %19)
  %21 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2
  %22 = load float, ptr %21, align 4, !tbaa !137, !noalias !470
  %23 = tail call float @llvm.fmuladd.f32(float %22, float %12, float %20)
  %24 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !137, !noalias !470
  %26 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1, i32 0, i64 1
  %27 = load float, ptr %26, align 4, !tbaa !137, !noalias !470
  %28 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2, i32 0, i64 1
  %29 = load float, ptr %28, align 4, !tbaa !137, !noalias !470
  %30 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 2
  %31 = load float, ptr %30, align 4, !tbaa !137, !noalias !470
  %32 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1, i32 0, i64 2
  %33 = load float, ptr %32, align 4, !tbaa !137, !noalias !470
  %34 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2, i32 0, i64 2
  %35 = load float, ptr %34, align 4, !tbaa !137, !noalias !470
  %36 = fmul float %18, 0.000000e+00
  %37 = tail call float @llvm.fmuladd.f32(float %16, float %9, float %36)
  %38 = tail call float @llvm.fmuladd.f32(float %22, float %14, float %37)
  %39 = fmul float %13, %18
  %40 = tail call float @llvm.fmuladd.f32(float %16, float %15, float %39)
  %41 = tail call float @llvm.fmuladd.f32(float %22, float 0.000000e+00, float %40)
  %42 = fmul float %13, %27
  %43 = tail call float @llvm.fmuladd.f32(float %25, float %15, float %42)
  %44 = tail call float @llvm.fmuladd.f32(float %29, float 0.000000e+00, float %43)
  %45 = fmul float %13, %33
  %46 = tail call float @llvm.fmuladd.f32(float %31, float %15, float %45)
  %47 = tail call float @llvm.fmuladd.f32(float %35, float 0.000000e+00, float %46)
  %48 = fmul float %44, %14
  %49 = tail call float @llvm.fmuladd.f32(float %12, float %41, float %48)
  %50 = tail call float @llvm.fmuladd.f32(float %47, float 0.000000e+00, float %49)
  %51 = fsub float %3, %50
  %52 = fadd float %51, %2
  %53 = insertelement <2 x float> poison, float %27, i64 0
  %54 = shufflevector <2 x float> %53, <2 x float> poison, <2 x i32> zeroinitializer
  %55 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %10, i64 1
  %56 = fmul <2 x float> %54, %55
  %57 = insertelement <2 x float> poison, float %25, i64 0
  %58 = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> zeroinitializer
  %59 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %9, i64 0
  %60 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %58, <2 x float> %59, <2 x float> %56)
  %61 = insertelement <2 x float> poison, float %29, i64 0
  %62 = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> zeroinitializer
  %63 = insertelement <2 x float> poison, float %14, i64 0
  %64 = insertelement <2 x float> %63, float %12, i64 1
  %65 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %62, <2 x float> %64, <2 x float> %60)
  %66 = insertelement <2 x float> poison, float %33, i64 0
  %67 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> zeroinitializer
  %68 = fmul <2 x float> %67, %55
  %69 = insertelement <2 x float> poison, float %31, i64 0
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> zeroinitializer
  %71 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %70, <2 x float> %59, <2 x float> %68)
  %72 = insertelement <2 x float> poison, float %35, i64 0
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer
  %74 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %73, <2 x float> %64, <2 x float> %71)
  %75 = extractelement <2 x float> %65, i64 1
  %76 = fmul float %75, %14
  %77 = tail call float @llvm.fmuladd.f32(float %12, float %23, float %76)
  %78 = extractelement <2 x float> %74, i64 1
  %79 = tail call float @llvm.fmuladd.f32(float %78, float 0.000000e+00, float %77)
  %80 = fmul <2 x float> %59, %65
  %81 = insertelement <2 x float> %55, float %38, i64 0
  %82 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %23, i64 1
  %83 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %81, <2 x float> %82, <2 x float> %80)
  %84 = insertelement <2 x float> poison, float %15, i64 0
  %85 = insertelement <2 x float> %84, float %13, i64 1
  %86 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %85, <2 x float> %74, <2 x float> %83)
  %87 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %9, i64 1
  %88 = fmul <2 x float> %87, %65
  %89 = insertelement <2 x float> %82, float %10, i64 0
  %90 = insertelement <2 x float> %81, float 0.000000e+00, i64 1
  %91 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %89, <2 x float> %90, <2 x float> %88)
  %92 = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %93 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %92, <2 x float> %74, <2 x float> %91)
  %94 = extractelement <2 x float> %65, i64 0
  %95 = fmul float %94, %14
  %96 = tail call float @llvm.fmuladd.f32(float %12, float %38, float %95)
  %97 = extractelement <2 x float> %74, i64 0
  %98 = tail call float @llvm.fmuladd.f32(float %97, float 0.000000e+00, float %96)
  %99 = insertelement <2 x float> poison, float %44, i64 0
  %100 = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> zeroinitializer
  %101 = fmul <2 x float> %87, %100
  %102 = insertelement <2 x float> poison, float %10, i64 0
  %103 = insertelement <2 x float> %102, float %41, i64 1
  %104 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %41, i64 0
  %105 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %103, <2 x float> %104, <2 x float> %101)
  %106 = insertelement <2 x float> poison, float %47, i64 0
  %107 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> zeroinitializer
  %108 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %92, <2 x float> %107, <2 x float> %105)
  %109 = fsub float 0.000000e+00, %79
  %110 = fsub <2 x float> zeroinitializer, %86
  %111 = insertelement <2 x float> poison, float %3, i64 0
  %112 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> zeroinitializer
  %113 = fsub <2 x float> %112, %93
  %114 = fsub float 0.000000e+00, %98
  %115 = fsub <2 x float> zeroinitializer, %108
  %116 = fadd float %109, 0.000000e+00
  %117 = fadd <2 x float> %110, zeroinitializer
  %118 = insertelement <2 x float> poison, float %2, i64 0
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> zeroinitializer
  %120 = fadd <2 x float> %113, %119
  %121 = fadd float %114, 0.000000e+00
  %122 = fadd <2 x float> %115, zeroinitializer
  %123 = insertelement <2 x float> %117, float %116, i64 1
  %124 = fneg <2 x float> %123
  %125 = insertelement <2 x float> %122, float %52, i64 0
  %126 = fmul <2 x float> %125, %124
  %127 = insertelement <2 x float> %120, float %121, i64 0
  %128 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %129 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %127, <2 x float> %128, <2 x float> %126)
  %130 = extractelement <2 x float> %117, i64 1
  %131 = extractelement <2 x float> %129, i64 0
  %132 = fmul float %130, %131
  %133 = insertelement <2 x float> %117, float %121, i64 0
  %134 = fneg <2 x float> %133
  %135 = shufflevector <2 x float> %122, <2 x float> %128, <2 x i32> <i32 0, i32 3>
  %136 = fmul <2 x float> %135, %134
  %137 = insertelement <2 x float> %120, float %116, i64 1
  %138 = shufflevector <2 x float> %135, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %139 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %137, <2 x float> %138, <2 x float> %136)
  %140 = extractelement <2 x float> %120, i64 1
  %141 = extractelement <2 x float> %139, i64 0
  %142 = tail call float @llvm.fmuladd.f32(float %140, float %141, float %132)
  %143 = fneg <2 x float> %120
  %144 = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %145 = fmul <2 x float> %144, %143
  %146 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %117, <2 x float> %122, <2 x float> %145)
  %147 = extractelement <2 x float> %146, i64 0
  %148 = tail call float @llvm.fmuladd.f32(float %116, float %147, float %142)
  %149 = fdiv float 1.000000e+00, %148
  %150 = insertelement <2 x float> poison, float %149, i64 0
  %151 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> zeroinitializer
  %152 = fmul <2 x float> %139, %151
  %153 = extractelement <2 x float> %120, i64 0
  %154 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %155 = fmul <2 x float> %120, %154
  %156 = extractelement <2 x float> %155, i64 0
  %157 = tail call float @llvm.fmuladd.f32(float %130, float %121, float %156)
  %158 = fmul float %157, %149
  %159 = fmul <2 x float> %129, %151
  %160 = extractelement <2 x float> %143, i64 1
  %161 = fmul float %121, %160
  %162 = extractelement <2 x float> %117, i64 0
  %163 = tail call float @llvm.fmuladd.f32(float %116, float %162, float %161)
  %164 = fmul float %163, %149
  %165 = fmul <2 x float> %146, %151
  %166 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %167 = fmul <2 x float> %117, %166
  %168 = extractelement <2 x float> %167, i64 0
  %169 = tail call float @llvm.fmuladd.f32(float %140, float %153, float %168)
  %170 = fmul float %169, %149
  %171 = fmul <2 x float> %159, zeroinitializer
  %172 = insertelement <2 x float> poison, float %7, i64 0
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> zeroinitializer
  %174 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> %173, <2 x float> %171)
  %175 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %165, <2 x float> zeroinitializer, <2 x float> %174)
  %176 = fmul float %164, 0.000000e+00
  %177 = tail call float @llvm.fmuladd.f32(float %158, float %7, float %176)
  %178 = tail call float @llvm.fmuladd.f32(float %170, float 0.000000e+00, float %177)
  %179 = fmul float %7, %164
  %180 = tail call float @llvm.fmuladd.f32(float %158, float 0.000000e+00, float %179)
  %181 = tail call float @llvm.fmuladd.f32(float %170, float 0.000000e+00, float %180)
  %182 = tail call float @llvm.fmuladd.f32(float %158, float 0.000000e+00, float %176)
  %183 = tail call float @llvm.fmuladd.f32(float %170, float %7, float %182)
  store <2 x float> %175, ptr %0, align 4, !tbaa !137, !alias.scope !473
  %184 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 2
  store float %178, ptr %184, align 4, !tbaa !137, !alias.scope !473
  %185 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 3
  store float 0.000000e+00, ptr %185, align 4, !tbaa !137, !alias.scope !473
  %186 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1
  %187 = fmul <2 x float> %173, %159
  %188 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> zeroinitializer, <2 x float> %187)
  %189 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %165, <2 x float> zeroinitializer, <2 x float> %188)
  store <2 x float> %189, ptr %186, align 4, !tbaa !137, !alias.scope !473
  %190 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1, i32 0, i64 2
  store float %181, ptr %190, align 4, !tbaa !137, !alias.scope !473
  %191 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %191, align 4, !tbaa !137, !alias.scope !473
  %192 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2
  %193 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> zeroinitializer, <2 x float> %171)
  %194 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %165, <2 x float> %173, <2 x float> %193)
  store <2 x float> %194, ptr %192, align 4, !tbaa !137, !alias.scope !473
  %195 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2, i32 0, i64 2
  store float %183, ptr %195, align 4, !tbaa !137, !alias.scope !473
  %196 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2, i32 0, i64 3
  store float 0.000000e+00, ptr %196, align 4, !tbaa !137, !alias.scope !473
  ret void
}

declare void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280), i1 noundef zeroext) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
define dso_local noundef ptr @_ZN10btSoftBody9getSolverENS_8eVSolver1_E(i32 noundef %0) local_unnamed_addr #25 align 2 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, ptr @_ZN10btSoftBody12VSolve_LinksEPS_f, ptr null
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
define dso_local noundef ptr @_ZN10btSoftBody9getSolverENS_8ePSolver1_E(i32 noundef %0) local_unnamed_addr #25 align 2 {
  %2 = icmp ult i32 %0, 4
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [4 x ptr], ptr @switch.table._ZN10btSoftBody11staticSolveEi, i64 0, i64 %4
  %6 = load ptr, ptr %5, align 8
  br label %7

7:                                                ; preds = %1, %3
  %8 = phi ptr [ %6, %3 ], [ null, %1 ]
  ret ptr %8
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody12dampClustersEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #16 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !124
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %101

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 24, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !123
  %8 = zext i32 %3 to i64
  br label %9

9:                                                ; preds = %5, %98
  %10 = phi i64 [ 0, %5 ], [ %99, %98 ]
  %11 = getelementptr inbounds ptr, ptr %7, i64 %10
  %12 = load ptr, ptr %11, align 8, !tbaa !219
  %13 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 16
  %14 = load float, ptr %13, align 8, !tbaa !476
  %15 = fcmp ogt float %14, 0.000000e+00
  br i1 %15, label %16, label %98

16:                                               ; preds = %9
  %17 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %12, i64 0, i32 2
  %18 = load i32, ptr %17, align 4, !tbaa !319
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %98

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %12, i64 0, i32 5
  %22 = load ptr, ptr %21, align 8, !tbaa !320
  %23 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 13
  %24 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 14
  %25 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 8
  %26 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 8, i32 0, i64 1
  %27 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 8, i32 0, i64 2
  %28 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 14, i32 0, i64 1
  %29 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 13, i32 0, i64 2
  %30 = zext i32 %18 to i64
  br label %31

31:                                               ; preds = %20, %95
  %32 = phi i64 [ 0, %20 ], [ %96, %95 ]
  %33 = getelementptr inbounds ptr, ptr %22, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !219
  %35 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %34, i64 0, i32 6
  %36 = load float, ptr %35, align 8, !tbaa !174
  %37 = fcmp ogt float %36, 0.000000e+00
  br i1 %37, label %38, label %95

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %34, i64 0, i32 2
  %40 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %34, i64 0, i32 2, i32 0, i64 1
  %41 = load float, ptr %40, align 4, !tbaa !137
  %42 = load float, ptr %26, align 4, !tbaa !137
  %43 = fsub float %41, %42
  %44 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %34, i64 0, i32 2, i32 0, i64 2
  %45 = load float, ptr %24, align 4, !tbaa !137
  %46 = load float, ptr %29, align 4, !tbaa !137
  %47 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %34, i64 0, i32 3
  %48 = load float, ptr %39, align 4, !tbaa !137
  %49 = load float, ptr %25, align 4, !tbaa !137
  %50 = load float, ptr %44, align 4, !tbaa !137
  %51 = load float, ptr %27, align 4, !tbaa !137
  %52 = insertelement <2 x float> poison, float %50, i64 0
  %53 = insertelement <2 x float> %52, float %48, i64 1
  %54 = insertelement <2 x float> poison, float %51, i64 0
  %55 = insertelement <2 x float> %54, float %49, i64 1
  %56 = fsub <2 x float> %53, %55
  %57 = load <2 x float>, ptr %28, align 4, !tbaa !137
  %58 = insertelement <2 x float> %57, float %45, i64 0
  %59 = fneg <2 x float> %58
  %60 = insertelement <2 x float> %56, float %43, i64 1
  %61 = fmul <2 x float> %60, %59
  %62 = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %63 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %57, <2 x float> %56, <2 x float> %62)
  %64 = extractelement <2 x float> %57, i64 0
  %65 = fneg float %64
  %66 = extractelement <2 x float> %56, i64 1
  %67 = fmul float %66, %65
  %68 = tail call float @llvm.fmuladd.f32(float %45, float %43, float %67)
  %69 = load <2 x float>, ptr %23, align 4, !tbaa !137
  %70 = fadd <2 x float> %69, %63
  %71 = fadd float %68, %46
  %72 = load <2 x float>, ptr %47, align 4, !tbaa !137
  %73 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %34, i64 0, i32 3, i32 0, i64 2
  %74 = load float, ptr %73, align 4, !tbaa !137
  %75 = shufflevector <2 x float> %70, <2 x float> %72, <2 x i32> <i32 1, i32 3>
  %76 = fmul <2 x float> %75, %75
  %77 = shufflevector <2 x float> %70, <2 x float> %72, <2 x i32> <i32 0, i32 2>
  %78 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %77, <2 x float> %77, <2 x float> %76)
  %79 = insertelement <2 x float> poison, float %71, i64 0
  %80 = insertelement <2 x float> %79, float %74, i64 1
  %81 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %80, <2 x float> %80, <2 x float> %78)
  %82 = extractelement <2 x float> %81, i64 0
  %83 = extractelement <2 x float> %81, i64 1
  %84 = fcmp ugt float %82, %83
  br i1 %84, label %95, label %85

85:                                               ; preds = %38
  %86 = fsub <2 x float> %70, %72
  %87 = fsub float %71, %74
  %88 = load float, ptr %13, align 4, !tbaa !137
  %89 = fmul float %87, %88
  %90 = insertelement <2 x float> poison, float %88, i64 0
  %91 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> zeroinitializer
  %92 = fmul <2 x float> %86, %91
  %93 = fadd <2 x float> %72, %92
  store <2 x float> %93, ptr %47, align 4, !tbaa !137
  %94 = fadd float %74, %89
  store float %94, ptr %73, align 4, !tbaa !137
  br label %95

95:                                               ; preds = %38, %85, %31
  %96 = add nuw nsw i64 %32, 1
  %97 = icmp eq i64 %96, %30
  br i1 %97, label %98, label %31

98:                                               ; preds = %95, %16, %9
  %99 = add nuw nsw i64 %10, 1
  %100 = icmp eq i64 %99, %8
  br i1 %100, label %101, label %9

101:                                              ; preds = %98, %1
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody11staticSolveEi(ptr noundef nonnull align 8 dereferenceable(1496) %0, i32 noundef %1) local_unnamed_addr #4 align 2 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 2
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 27, i32 5
  %7 = load i32, ptr %5, align 4, !tbaa !28
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %4, %14
  %10 = phi i32 [ %15, %14 ], [ %7, %4 ]
  %11 = phi i32 [ %16, %14 ], [ 0, %4 ]
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %18, label %14

13:                                               ; preds = %14, %4, %2
  ret void

14:                                               ; preds = %18, %9
  %15 = phi i32 [ %10, %9 ], [ %27, %18 ]
  %16 = add nuw nsw i32 %11, 1
  %17 = icmp eq i32 %16, %1
  br i1 %17, label %13, label %9, !llvm.loop !477

18:                                               ; preds = %9, %18
  %19 = phi i64 [ %26, %18 ], [ 0, %9 ]
  %20 = load ptr, ptr %6, align 8, !tbaa !27
  %21 = getelementptr inbounds i32, ptr %20, i64 %19
  %22 = load i32, ptr %21, align 4, !tbaa !184
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [4 x ptr], ptr @switch.table._ZN10btSoftBody11staticSolveEi, i64 0, i64 %23
  %25 = load ptr, ptr %24, align 8
  tail call void %25(ptr noundef nonnull %0, float noundef 1.000000e+00, float noundef 0.000000e+00), !callees !462
  %26 = add nuw nsw i64 %19, 1
  %27 = load i32, ptr %5, align 4, !tbaa !28
  %28 = sext i32 %27 to i64
  %29 = icmp slt i64 %26, %28
  br i1 %29, label %18, label %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
define dso_local void @_ZN10btSoftBody22solveCommonConstraintsEPPS_ii(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #25 align 2 {
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E(ptr nocapture noundef nonnull readonly align 8 dereferenceable(25) %0) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.88, ptr %0, i64 0, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !478
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %201

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btAlignedObjectArray.88, ptr %0, i64 0, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !481
  %8 = zext i32 %3 to i64
  %9 = and i64 %8, 3
  %10 = icmp ult i32 %3, 4
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = and i64 %8, 4294967292
  br label %35

13:                                               ; preds = %35, %5
  %14 = phi i32 [ undef, %5 ], [ %61, %35 ]
  %15 = phi i64 [ 0, %5 ], [ %62, %35 ]
  %16 = phi i32 [ 0, %5 ], [ %61, %35 ]
  %17 = icmp eq i64 %9, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %13, %18
  %19 = phi i64 [ %27, %18 ], [ %15, %13 ]
  %20 = phi i32 [ %26, %18 ], [ %16, %13 ]
  %21 = phi i64 [ %28, %18 ], [ 0, %13 ]
  %22 = getelementptr inbounds ptr, ptr %7, i64 %19
  %23 = load ptr, ptr %22, align 8, !tbaa !219
  %24 = getelementptr inbounds %class.btSoftBody, ptr %23, i64 0, i32 2, i32 24
  %25 = load i32, ptr %24, align 4, !tbaa !140
  %26 = tail call i32 @llvm.smax.i32(i32 %20, i32 %25)
  %27 = add nuw nsw i64 %19, 1
  %28 = add i64 %21, 1
  %29 = icmp eq i64 %28, %9
  br i1 %29, label %30, label %18, !llvm.loop !482

30:                                               ; preds = %18, %13
  %31 = phi i32 [ %14, %13 ], [ %26, %18 ]
  br i1 %4, label %32, label %201

32:                                               ; preds = %30
  %33 = getelementptr inbounds %class.btAlignedObjectArray.88, ptr %0, i64 0, i32 5
  %34 = zext i32 %3 to i64
  br label %102

35:                                               ; preds = %35, %11
  %36 = phi i64 [ 0, %11 ], [ %62, %35 ]
  %37 = phi i32 [ 0, %11 ], [ %61, %35 ]
  %38 = phi i64 [ 0, %11 ], [ %63, %35 ]
  %39 = getelementptr inbounds ptr, ptr %7, i64 %36
  %40 = load ptr, ptr %39, align 8, !tbaa !219
  %41 = getelementptr inbounds %class.btSoftBody, ptr %40, i64 0, i32 2, i32 24
  %42 = load i32, ptr %41, align 4, !tbaa !140
  %43 = tail call i32 @llvm.smax.i32(i32 %37, i32 %42)
  %44 = or i64 %36, 1
  %45 = getelementptr inbounds ptr, ptr %7, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !219
  %47 = getelementptr inbounds %class.btSoftBody, ptr %46, i64 0, i32 2, i32 24
  %48 = load i32, ptr %47, align 4, !tbaa !140
  %49 = tail call i32 @llvm.smax.i32(i32 %43, i32 %48)
  %50 = or i64 %36, 2
  %51 = getelementptr inbounds ptr, ptr %7, i64 %50
  %52 = load ptr, ptr %51, align 8, !tbaa !219
  %53 = getelementptr inbounds %class.btSoftBody, ptr %52, i64 0, i32 2, i32 24
  %54 = load i32, ptr %53, align 4, !tbaa !140
  %55 = tail call i32 @llvm.smax.i32(i32 %49, i32 %54)
  %56 = or i64 %36, 3
  %57 = getelementptr inbounds ptr, ptr %7, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !219
  %59 = getelementptr inbounds %class.btSoftBody, ptr %58, i64 0, i32 2, i32 24
  %60 = load i32, ptr %59, align 4, !tbaa !140
  %61 = tail call i32 @llvm.smax.i32(i32 %55, i32 %60)
  %62 = add nuw nsw i64 %36, 4
  %63 = add i64 %38, 4
  %64 = icmp eq i64 %63, %12
  br i1 %64, label %13, label %35

65:                                               ; preds = %126
  %66 = icmp sgt i32 %31, 0
  br i1 %66, label %67, label %129

67:                                               ; preds = %65
  %68 = getelementptr inbounds %class.btAlignedObjectArray.88, ptr %0, i64 0, i32 5
  br i1 %4, label %69, label %201

69:                                               ; preds = %67
  %70 = zext i32 %3 to i64
  br label %71

71:                                               ; preds = %69, %99
  %72 = phi i32 [ %100, %99 ], [ 0, %69 ]
  br label %73

73:                                               ; preds = %71, %96
  %74 = phi i64 [ 0, %71 ], [ %97, %96 ]
  %75 = load ptr, ptr %68, align 8, !tbaa !481
  %76 = getelementptr inbounds ptr, ptr %75, i64 %74
  %77 = load ptr, ptr %76, align 8, !tbaa !219
  %78 = getelementptr inbounds %class.btSoftBody, ptr %77, i64 0, i32 16, i32 2
  %79 = load i32, ptr %78, align 4, !tbaa !116
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %81, label %96

81:                                               ; preds = %73
  %82 = getelementptr inbounds %class.btSoftBody, ptr %77, i64 0, i32 16, i32 5
  %83 = getelementptr inbounds %class.btSoftBody, ptr %77, i64 0, i32 3
  %84 = zext i32 %79 to i64
  br label %85

85:                                               ; preds = %85, %81
  %86 = phi i64 [ 0, %81 ], [ %94, %85 ]
  %87 = load ptr, ptr %82, align 8, !tbaa !115
  %88 = getelementptr inbounds ptr, ptr %87, i64 %86
  %89 = load ptr, ptr %88, align 8, !tbaa !219
  %90 = load float, ptr %83, align 8, !tbaa !418
  %91 = load ptr, ptr %89, align 8, !tbaa !5
  %92 = getelementptr inbounds ptr, ptr %91, i64 3
  %93 = load ptr, ptr %92, align 8
  tail call void %93(ptr noundef nonnull align 8 dereferenceable(181) %89, float noundef %90, float noundef 1.000000e+00)
  %94 = add nuw nsw i64 %86, 1
  %95 = icmp eq i64 %94, %84
  br i1 %95, label %96, label %85

96:                                               ; preds = %85, %73
  %97 = add nuw nsw i64 %74, 1
  %98 = icmp eq i64 %97, %70
  br i1 %98, label %99, label %73

99:                                               ; preds = %96
  %100 = add nuw nsw i32 %72, 1
  %101 = icmp eq i32 %100, %31
  br i1 %101, label %129, label %71

102:                                              ; preds = %32, %126
  %103 = phi i64 [ 0, %32 ], [ %127, %126 ]
  %104 = load ptr, ptr %33, align 8, !tbaa !481
  %105 = getelementptr inbounds ptr, ptr %104, i64 %103
  %106 = load ptr, ptr %105, align 8, !tbaa !219
  %107 = getelementptr inbounds %class.btSoftBody, ptr %106, i64 0, i32 16, i32 2
  %108 = load i32, ptr %107, align 4, !tbaa !116
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %126

110:                                              ; preds = %102
  %111 = getelementptr inbounds %class.btSoftBody, ptr %106, i64 0, i32 16, i32 5
  %112 = getelementptr inbounds %class.btSoftBody, ptr %106, i64 0, i32 3
  br label %113

113:                                              ; preds = %113, %110
  %114 = phi i64 [ 0, %110 ], [ %122, %113 ]
  %115 = load ptr, ptr %111, align 8, !tbaa !115
  %116 = getelementptr inbounds ptr, ptr %115, i64 %114
  %117 = load ptr, ptr %116, align 8, !tbaa !219
  %118 = load float, ptr %112, align 8, !tbaa !418
  %119 = load ptr, ptr %117, align 8, !tbaa !5
  %120 = getelementptr inbounds ptr, ptr %119, i64 2
  %121 = load ptr, ptr %120, align 8
  tail call void %121(ptr noundef nonnull align 8 dereferenceable(181) %117, float noundef %118, i32 noundef %31)
  %122 = add nuw nsw i64 %114, 1
  %123 = load i32, ptr %107, align 4, !tbaa !116
  %124 = sext i32 %123 to i64
  %125 = icmp slt i64 %122, %124
  br i1 %125, label %113, label %126

126:                                              ; preds = %113, %102
  %127 = add nuw nsw i64 %103, 1
  %128 = icmp eq i64 %127, %34
  br i1 %128, label %65, label %102

129:                                              ; preds = %99, %65
  br i1 %4, label %130, label %201

130:                                              ; preds = %129
  %131 = getelementptr inbounds %class.btAlignedObjectArray.88, ptr %0, i64 0, i32 5
  %132 = zext i32 %3 to i64
  br label %133

133:                                              ; preds = %130, %198
  %134 = phi i64 [ 0, %130 ], [ %199, %198 ]
  %135 = load ptr, ptr %131, align 8, !tbaa !481
  %136 = getelementptr inbounds ptr, ptr %135, i64 %134
  %137 = load ptr, ptr %136, align 8, !tbaa !219
  %138 = getelementptr inbounds %class.btSoftBody, ptr %137, i64 0, i32 16, i32 2
  %139 = load i32, ptr %138, align 4, !tbaa !116
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %198

141:                                              ; preds = %133
  %142 = getelementptr inbounds %class.btSoftBody, ptr %137, i64 0, i32 16, i32 5
  %143 = getelementptr inbounds %class.btSoftBody, ptr %137, i64 0, i32 3
  br label %144

144:                                              ; preds = %193, %141
  %145 = phi i32 [ 0, %141 ], [ %196, %193 ]
  %146 = load ptr, ptr %142, align 8, !tbaa !115
  %147 = sext i32 %145 to i64
  %148 = getelementptr inbounds ptr, ptr %146, i64 %147
  %149 = load ptr, ptr %148, align 8, !tbaa !219
  %150 = load float, ptr %143, align 8, !tbaa !418
  %151 = load ptr, ptr %149, align 8, !tbaa !5
  %152 = getelementptr inbounds ptr, ptr %151, i64 4
  %153 = load ptr, ptr %152, align 8
  tail call void %153(ptr noundef nonnull align 8 dereferenceable(181) %149, float noundef %150)
  %154 = load ptr, ptr %142, align 8, !tbaa !115
  %155 = getelementptr inbounds ptr, ptr %154, i64 %147
  %156 = load ptr, ptr %155, align 8, !tbaa !219
  %157 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %156, i64 0, i32 9
  %158 = load i8, ptr %157, align 4, !tbaa !483, !range !191, !noundef !192
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %162

160:                                              ; preds = %144
  %161 = load i32, ptr %138, align 4, !tbaa !116
  br label %193

162:                                              ; preds = %144
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %156)
  %163 = add nsw i32 %145, -1
  %164 = load ptr, ptr %142, align 8, !tbaa !115
  %165 = load i32, ptr %138, align 4, !tbaa !116
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %193

167:                                              ; preds = %162
  %168 = getelementptr inbounds ptr, ptr %164, i64 %147
  %169 = load ptr, ptr %168, align 8, !tbaa !219
  %170 = zext i32 %165 to i64
  br label %171

171:                                              ; preds = %176, %167
  %172 = phi i64 [ 0, %167 ], [ %177, %176 ]
  %173 = getelementptr inbounds ptr, ptr %164, i64 %172
  %174 = load ptr, ptr %173, align 8, !tbaa !219
  %175 = icmp eq ptr %174, %169
  br i1 %175, label %179, label %176

176:                                              ; preds = %171
  %177 = add nuw nsw i64 %172, 1
  %178 = icmp eq i64 %177, %170
  br i1 %178, label %193, label %171

179:                                              ; preds = %171
  %180 = trunc i64 %172 to i32
  %181 = icmp sgt i32 %165, %180
  br i1 %181, label %182, label %193

182:                                              ; preds = %179
  %183 = add nsw i32 %165, -1
  %184 = shl i64 %172, 32
  %185 = ashr exact i64 %184, 32
  %186 = getelementptr inbounds ptr, ptr %164, i64 %185
  %187 = load ptr, ptr %186, align 8, !tbaa !219
  %188 = sext i32 %183 to i64
  %189 = getelementptr inbounds ptr, ptr %164, i64 %188
  %190 = load ptr, ptr %189, align 8, !tbaa !219
  store ptr %190, ptr %186, align 8, !tbaa !219
  %191 = load ptr, ptr %142, align 8, !tbaa !115
  %192 = getelementptr inbounds ptr, ptr %191, i64 %188
  store ptr %187, ptr %192, align 8, !tbaa !219
  store i32 %183, ptr %138, align 4, !tbaa !116
  br label %193

193:                                              ; preds = %176, %182, %179, %162, %160
  %194 = phi i32 [ %161, %160 ], [ %165, %162 ], [ %165, %179 ], [ %183, %182 ], [ %165, %176 ]
  %195 = phi i32 [ %145, %160 ], [ %163, %162 ], [ %163, %179 ], [ %163, %182 ], [ %163, %176 ]
  %196 = add nsw i32 %195, 1
  %197 = icmp slt i32 %196, %194
  br i1 %197, label %144, label %198

198:                                              ; preds = %193, %133
  %199 = add nuw nsw i64 %134, 1
  %200 = icmp eq i64 %199, %132
  br i1 %200, label %201, label %133

201:                                              ; preds = %198, %30, %1, %67, %129
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody15prepareClustersEi(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, i32 noundef %1) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !116
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  br label %10

9:                                                ; preds = %10, %2
  ret void

10:                                               ; preds = %6, %10
  %11 = phi i64 [ 0, %6 ], [ %19, %10 ]
  %12 = load ptr, ptr %7, align 8, !tbaa !115
  %13 = getelementptr inbounds ptr, ptr %12, i64 %11
  %14 = load ptr, ptr %13, align 8, !tbaa !219
  %15 = load float, ptr %8, align 8, !tbaa !418
  %16 = load ptr, ptr %14, align 8, !tbaa !5
  %17 = getelementptr inbounds ptr, ptr %16, i64 2
  %18 = load ptr, ptr %17, align 8
  tail call void %18(ptr noundef nonnull align 8 dereferenceable(181) %14, float noundef %15, i32 noundef %1)
  %19 = add nuw nsw i64 %11, 1
  %20 = load i32, ptr %3, align 4, !tbaa !116
  %21 = sext i32 %20 to i64
  %22 = icmp slt i64 %19, %21
  br i1 %22, label %10, label %9
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody13solveClustersEf(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, float noundef %1) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !116
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %9 = zext i32 %4 to i64
  br label %11

10:                                               ; preds = %11, %2
  ret void

11:                                               ; preds = %6, %11
  %12 = phi i64 [ 0, %6 ], [ %20, %11 ]
  %13 = load ptr, ptr %7, align 8, !tbaa !115
  %14 = getelementptr inbounds ptr, ptr %13, i64 %12
  %15 = load ptr, ptr %14, align 8, !tbaa !219
  %16 = load float, ptr %8, align 8, !tbaa !418
  %17 = load ptr, ptr %15, align 8, !tbaa !5
  %18 = getelementptr inbounds ptr, ptr %17, i64 3
  %19 = load ptr, ptr %18, align 8
  tail call void %19(ptr noundef nonnull align 8 dereferenceable(181) %15, float noundef %16, float noundef %1)
  %20 = add nuw nsw i64 %12, 1
  %21 = icmp eq i64 %20, %9
  br i1 %21, label %10, label %11
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody15cleanupClustersEv(ptr nocapture noundef nonnull align 8 dereferenceable(1496) %0) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !116
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 16, i32 5
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  br label %9

8:                                                ; preds = %58, %1
  ret void

9:                                                ; preds = %5, %58
  %10 = phi i32 [ 0, %5 ], [ %61, %58 ]
  %11 = load ptr, ptr %6, align 8, !tbaa !115
  %12 = sext i32 %10 to i64
  %13 = getelementptr inbounds ptr, ptr %11, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !219
  %15 = load float, ptr %7, align 8, !tbaa !418
  %16 = load ptr, ptr %14, align 8, !tbaa !5
  %17 = getelementptr inbounds ptr, ptr %16, i64 4
  %18 = load ptr, ptr %17, align 8
  tail call void %18(ptr noundef nonnull align 8 dereferenceable(181) %14, float noundef %15)
  %19 = load ptr, ptr %6, align 8, !tbaa !115
  %20 = getelementptr inbounds ptr, ptr %19, i64 %12
  %21 = load ptr, ptr %20, align 8, !tbaa !219
  %22 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %21, i64 0, i32 9
  %23 = load i8, ptr %22, align 4, !tbaa !483, !range !191, !noundef !192
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %9
  %26 = load i32, ptr %2, align 4, !tbaa !116
  br label %58

27:                                               ; preds = %9
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %21)
  %28 = add nsw i32 %10, -1
  %29 = load ptr, ptr %6, align 8, !tbaa !115
  %30 = load i32, ptr %2, align 4, !tbaa !116
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %58

32:                                               ; preds = %27
  %33 = getelementptr inbounds ptr, ptr %29, i64 %12
  %34 = load ptr, ptr %33, align 8, !tbaa !219
  %35 = zext i32 %30 to i64
  br label %36

36:                                               ; preds = %41, %32
  %37 = phi i64 [ 0, %32 ], [ %42, %41 ]
  %38 = getelementptr inbounds ptr, ptr %29, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !219
  %40 = icmp eq ptr %39, %34
  br i1 %40, label %44, label %41

41:                                               ; preds = %36
  %42 = add nuw nsw i64 %37, 1
  %43 = icmp eq i64 %42, %35
  br i1 %43, label %58, label %36

44:                                               ; preds = %36
  %45 = trunc i64 %37 to i32
  %46 = icmp sgt i32 %30, %45
  br i1 %46, label %47, label %58

47:                                               ; preds = %44
  %48 = add nsw i32 %30, -1
  %49 = shl i64 %37, 32
  %50 = ashr exact i64 %49, 32
  %51 = getelementptr inbounds ptr, ptr %29, i64 %50
  %52 = load ptr, ptr %51, align 8, !tbaa !219
  %53 = sext i32 %48 to i64
  %54 = getelementptr inbounds ptr, ptr %29, i64 %53
  %55 = load ptr, ptr %54, align 8, !tbaa !219
  store ptr %55, ptr %51, align 8, !tbaa !219
  %56 = load ptr, ptr %6, align 8, !tbaa !115
  %57 = getelementptr inbounds ptr, ptr %56, i64 %53
  store ptr %52, ptr %57, align 8, !tbaa !219
  store i32 %48, ptr %2, align 4, !tbaa !116
  br label %58

58:                                               ; preds = %41, %25, %47, %44, %27
  %59 = phi i32 [ %26, %25 ], [ %30, %27 ], [ %30, %44 ], [ %48, %47 ], [ %30, %41 ]
  %60 = phi i32 [ %10, %25 ], [ %28, %27 ], [ %28, %44 ], [ %28, %47 ], [ %28, %41 ]
  %61 = add nsw i32 %60, 1
  %62 = icmp slt i32 %61, %59
  br i1 %62, label %9, label %8
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody15integrateMotionEv(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0) local_unnamed_addr #10 align 2 {
  tail call void @_ZN10btSoftBody13updateNormalsEv(ptr noundef nonnull align 8 dereferenceable(1496) %0)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f(ptr nocapture noundef nonnull writeonly align 8 dereferenceable(76) %0, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2, float noundef %3) unnamed_addr #21 align 2 personality ptr @__gxx_personality_v0 {
  store ptr getelementptr inbounds ({ [9 x ptr] }, ptr @_ZTVN10btSoftBody15RayFromToCasterE, i64 0, inrange i32 0, i64 2), ptr %0, align 8, !tbaa !5
  %5 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5, ptr noundef nonnull align 4 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !162
  %8 = load <2 x float>, ptr %2, align 4, !tbaa !137
  %9 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %10 = fsub <2 x float> %8, %9
  %11 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %12 = load float, ptr %11, align 4, !tbaa !137
  %13 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %14 = load float, ptr %13, align 4, !tbaa !137
  %15 = fsub float %12, %14
  %16 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %15, i64 0
  store <2 x float> %10, ptr %7, align 8, !tbaa.struct !162
  %17 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 3, i32 0, i64 2
  store <2 x float> %16, ptr %17, align 8, !tbaa.struct !164
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, ptr noundef nonnull align 4 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !162
  %18 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 4
  store float %3, ptr %18, align 8, !tbaa !413
  %19 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 6
  store ptr null, ptr %19, align 8, !tbaa !416
  %20 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 7
  store i32 0, ptr %20, align 8, !tbaa !417
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(76) %0, ptr nocapture noundef readonly %1) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %struct.btDbvtNode, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !163
  %5 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 3
  %8 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %4, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !219
  %10 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %9, i64 0, i32 1
  %11 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %4, i64 0, i32 1, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !219
  %13 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %12, i64 0, i32 1
  %14 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %4, i64 0, i32 1, i64 2
  %15 = load ptr, ptr %14, align 8, !tbaa !219
  %16 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %15, i64 0, i32 1
  %17 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 4
  %18 = load float, ptr %17, align 8, !tbaa !413
  %19 = tail call noundef float @_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f(ptr noundef nonnull align 4 dereferenceable(16) %5, ptr noundef nonnull align 4 dereferenceable(16) %6, ptr noundef nonnull align 4 dereferenceable(16) %7, ptr noundef nonnull align 4 dereferenceable(16) %10, ptr noundef nonnull align 4 dereferenceable(16) %13, ptr noundef nonnull align 4 dereferenceable(16) %16, float noundef %18)
  %20 = fcmp ogt float %19, 0.000000e+00
  %21 = load float, ptr %17, align 8
  %22 = fcmp olt float %19, %21
  %23 = select i1 %20, i1 %22, i1 false
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  store float %19, ptr %17, align 8, !tbaa !413
  %25 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 6
  store ptr %4, ptr %25, align 8, !tbaa !416
  br label %26

26:                                               ; preds = %24, %2
  %27 = getelementptr inbounds %"struct.btSoftBody::RayFromToCaster", ptr %0, i64 0, i32 7
  %28 = load i32, ptr %27, align 8, !tbaa !417
  %29 = add nsw i32 %28, 1
  store i32 %29, ptr %27, align 8, !tbaa !417
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local noundef float @_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f(ptr noundef nonnull align 4 dereferenceable(16) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %3, ptr noundef nonnull align 4 dereferenceable(16) %4, ptr noundef nonnull align 4 dereferenceable(16) %5, float noundef %6) local_unnamed_addr #26 comdat align 2 {
  %8 = load float, ptr %4, align 4, !tbaa !137
  %9 = load float, ptr %3, align 4, !tbaa !137
  %10 = fsub float %8, %9
  %11 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 1
  %12 = load float, ptr %11, align 4, !tbaa !137
  %13 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %14 = load float, ptr %13, align 4, !tbaa !137
  %15 = fsub float %12, %14
  %16 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 2
  %17 = load float, ptr %16, align 4, !tbaa !137
  %18 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  %19 = load float, ptr %18, align 4, !tbaa !137
  %20 = fsub float %17, %19
  %21 = load float, ptr %5, align 4, !tbaa !137
  %22 = fsub float %21, %9
  %23 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 1
  %24 = load float, ptr %23, align 4, !tbaa !137
  %25 = fsub float %24, %14
  %26 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %27 = load float, ptr %26, align 4, !tbaa !137
  %28 = fsub float %27, %19
  %29 = fneg float %20
  %30 = fmul float %25, %29
  %31 = tail call float @llvm.fmuladd.f32(float %15, float %28, float %30)
  %32 = fneg float %10
  %33 = fmul float %28, %32
  %34 = tail call float @llvm.fmuladd.f32(float %20, float %22, float %33)
  %35 = fneg float %15
  %36 = fmul float %22, %35
  %37 = tail call float @llvm.fmuladd.f32(float %10, float %25, float %36)
  %38 = load float, ptr %2, align 4, !tbaa !137
  %39 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %40 = load float, ptr %39, align 4, !tbaa !137
  %41 = fmul float %40, %34
  %42 = tail call float @llvm.fmuladd.f32(float %38, float %31, float %41)
  %43 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %44 = load float, ptr %43, align 4, !tbaa !137
  %45 = tail call float @llvm.fmuladd.f32(float %44, float %37, float %42)
  %46 = tail call float @llvm.fabs.f32(float %45)
  %47 = fcmp olt float %46, 0x3E80000000000000
  br i1 %47, label %135, label %48

48:                                               ; preds = %7
  %49 = load float, ptr %0, align 4, !tbaa !137
  %50 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 1
  %51 = load float, ptr %50, align 4, !tbaa !137
  %52 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 2
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = insertelement <2 x float> poison, float %34, i64 0
  %55 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> zeroinitializer
  %56 = insertelement <2 x float> poison, float %51, i64 0
  %57 = insertelement <2 x float> %56, float %14, i64 1
  %58 = fmul <2 x float> %55, %57
  %59 = insertelement <2 x float> poison, float %49, i64 0
  %60 = insertelement <2 x float> %59, float %9, i64 1
  %61 = insertelement <2 x float> poison, float %31, i64 0
  %62 = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> zeroinitializer
  %63 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %60, <2 x float> %62, <2 x float> %58)
  %64 = insertelement <2 x float> poison, float %53, i64 0
  %65 = insertelement <2 x float> %64, float %19, i64 1
  %66 = insertelement <2 x float> poison, float %37, i64 0
  %67 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> zeroinitializer
  %68 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %65, <2 x float> %67, <2 x float> %63)
  %69 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %70 = fsub <2 x float> %68, %69
  %71 = extractelement <2 x float> %70, i64 0
  %72 = fneg float %71
  %73 = fdiv float %72, %45
  %74 = fcmp ogt float %73, 0x3EB4000000000000
  %75 = fcmp olt float %73, %6
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %134

77:                                               ; preds = %48
  %78 = fmul float %38, %73
  %79 = fmul float %40, %73
  %80 = fmul float %44, %73
  %81 = fadd float %49, %78
  %82 = fadd float %51, %79
  %83 = fadd float %53, %80
  %84 = fsub float %9, %81
  %85 = fsub float %14, %82
  %86 = fsub float %19, %83
  %87 = fsub float %8, %81
  %88 = fsub float %12, %82
  %89 = fsub float %17, %83
  %90 = fneg float %86
  %91 = fmul float %88, %90
  %92 = tail call float @llvm.fmuladd.f32(float %85, float %89, float %91)
  %93 = fneg float %84
  %94 = fmul float %89, %93
  %95 = tail call float @llvm.fmuladd.f32(float %86, float %87, float %94)
  %96 = fneg float %85
  %97 = fmul float %87, %96
  %98 = tail call float @llvm.fmuladd.f32(float %84, float %88, float %97)
  %99 = fmul float %34, %95
  %100 = tail call float @llvm.fmuladd.f32(float %31, float %92, float %99)
  %101 = tail call float @llvm.fmuladd.f32(float %37, float %98, float %100)
  %102 = fcmp ogt float %101, 0xBEB4000000000000
  br i1 %102, label %103, label %134

103:                                              ; preds = %77
  %104 = fsub float %21, %81
  %105 = fsub float %24, %82
  %106 = fsub float %27, %83
  %107 = fneg float %89
  %108 = fmul float %105, %107
  %109 = tail call float @llvm.fmuladd.f32(float %88, float %106, float %108)
  %110 = fneg float %87
  %111 = fmul float %106, %110
  %112 = tail call float @llvm.fmuladd.f32(float %89, float %104, float %111)
  %113 = fneg float %88
  %114 = fmul float %104, %113
  %115 = tail call float @llvm.fmuladd.f32(float %87, float %105, float %114)
  %116 = fmul float %34, %112
  %117 = tail call float @llvm.fmuladd.f32(float %31, float %109, float %116)
  %118 = tail call float @llvm.fmuladd.f32(float %37, float %115, float %117)
  %119 = fcmp ogt float %118, 0xBEB4000000000000
  br i1 %119, label %120, label %134

120:                                              ; preds = %103
  %121 = fneg float %106
  %122 = fmul float %85, %121
  %123 = tail call float @llvm.fmuladd.f32(float %105, float %86, float %122)
  %124 = fneg float %104
  %125 = fmul float %86, %124
  %126 = tail call float @llvm.fmuladd.f32(float %106, float %84, float %125)
  %127 = fneg float %105
  %128 = fmul float %84, %127
  %129 = tail call float @llvm.fmuladd.f32(float %104, float %85, float %128)
  %130 = fmul float %34, %126
  %131 = tail call float @llvm.fmuladd.f32(float %31, float %123, float %130)
  %132 = tail call float @llvm.fmuladd.f32(float %37, float %129, float %131)
  %133 = fcmp ogt float %132, 0xBEB4000000000000
  br i1 %133, label %135, label %134

134:                                              ; preds = %48, %120, %77, %103
  br label %135

135:                                              ; preds = %7, %134, %120
  %136 = phi float [ %73, %120 ], [ -1.000000e+00, %134 ], [ -1.000000e+00, %7 ]
  ret float %136
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE(ptr noundef %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #26 comdat align 2 personality ptr @__gxx_personality_v0 {
  %5 = alloca [2 x %class.btVector3], align 16
  %6 = icmp eq ptr %0, null
  br i1 %6, label %241, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %9 = load float, ptr %8, align 4, !tbaa !137
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %11 = load float, ptr %10, align 4, !tbaa !137
  %12 = fsub float %9, %11
  %13 = load <2 x float>, ptr %2, align 4, !tbaa !137
  %14 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %15 = fsub <2 x float> %13, %14
  %16 = extractelement <2 x float> %15, i64 1
  %17 = fmul float %16, %16
  %18 = extractelement <2 x float> %15, i64 0
  %19 = tail call float @llvm.fmuladd.f32(float %18, float %18, float %17)
  %20 = tail call float @llvm.fmuladd.f32(float %12, float %12, float %19)
  %21 = tail call float @llvm.sqrt.f32(float %20)
  %22 = fdiv float 1.000000e+00, %21
  %23 = insertelement <2 x float> poison, float %22, i64 0
  %24 = shufflevector <2 x float> %23, <2 x float> poison, <2 x i32> zeroinitializer
  %25 = fmul <2 x float> %15, %24
  %26 = fmul float %12, %22
  %27 = fdiv <2 x float> <float 1.000000e+00, float 1.000000e+00>, %25
  %28 = fcmp oeq float %26, 0.000000e+00
  %29 = fdiv float 1.000000e+00, %26
  %30 = select i1 %28, float 0x43ABC16D60000000, float %29
  %31 = fcmp oeq <2 x float> %25, zeroinitializer
  %32 = select <2 x i1> %31, <2 x float> <float 0x43ABC16D60000000, float 0x43ABC16D60000000>, <2 x float> %27
  %33 = extractelement <2 x float> %32, i64 1
  %34 = fcmp olt float %33, 0.000000e+00
  %35 = fmul <2 x float> %15, %25
  %36 = extractelement <2 x float> %35, i64 1
  %37 = extractelement <2 x float> %25, i64 0
  %38 = tail call float @llvm.fmuladd.f32(float %37, float %18, float %36)
  %39 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 1024, i32 noundef 16)
  %40 = getelementptr inbounds i8, ptr %39, i64 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1024) %40, i8 0, i64 1016, i1 false), !tbaa !219
  %41 = fcmp olt float %30, 0.000000e+00
  store ptr %0, ptr %39, align 8, !tbaa !219
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #38
  %42 = extractelement <2 x float> %32, i64 0
  %43 = fcmp olt float %42, 0.000000e+00
  %44 = tail call float @llvm.fmuladd.f32(float %26, float %12, float %38)
  %45 = getelementptr inbounds [2 x %class.btVector3], ptr %5, i64 0, i64 1
  %46 = zext i1 %43 to i64
  %47 = getelementptr inbounds %class.btVector3, ptr %5, i64 %46
  %48 = xor i1 %43, true
  %49 = zext i1 %48 to i64
  %50 = getelementptr inbounds %class.btVector3, ptr %5, i64 %49
  %51 = zext i1 %34 to i64
  %52 = getelementptr inbounds %class.btVector3, ptr %5, i64 %51, i32 0, i64 1
  %53 = xor i1 %34, true
  %54 = zext i1 %53 to i64
  %55 = getelementptr inbounds %class.btVector3, ptr %5, i64 %54, i32 0, i64 1
  %56 = zext i1 %41 to i64
  %57 = getelementptr inbounds %class.btVector3, ptr %5, i64 %56, i32 0, i64 2
  %58 = xor i1 %41, true
  %59 = zext i1 %58 to i64
  %60 = getelementptr inbounds %class.btVector3, ptr %5, i64 %59, i32 0, i64 2
  br label %61

61:                                               ; preds = %7, %230
  %62 = phi ptr [ %231, %230 ], [ %39, %7 ]
  %63 = phi i32 [ %232, %230 ], [ 128, %7 ]
  %64 = phi i32 [ %233, %230 ], [ 128, %7 ]
  %65 = phi i32 [ %234, %230 ], [ 126, %7 ]
  %66 = phi i32 [ %235, %230 ], [ 1, %7 ]
  %67 = ptrtoint ptr %62 to i64
  %68 = add nsw i32 %66, -1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds ptr, ptr %62, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !219
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %5, ptr noundef nonnull align 4 dereferenceable(16) %71, i64 16, i1 false), !tbaa.struct !162
  %72 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %71, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %45, ptr noundef nonnull align 4 dereferenceable(16) %72, i64 16, i1 false), !tbaa.struct !162
  %73 = load float, ptr %47, align 16, !tbaa !137
  %74 = load float, ptr %50, align 16, !tbaa !137
  %75 = load float, ptr %52, align 4, !tbaa !137
  %76 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %77 = insertelement <2 x float> poison, float %74, i64 0
  %78 = insertelement <2 x float> %77, float %75, i64 1
  %79 = fsub <2 x float> %78, %76
  %80 = fmul <2 x float> %32, %79
  %81 = load float, ptr %55, align 4, !tbaa !137
  %82 = insertelement <2 x float> poison, float %73, i64 0
  %83 = insertelement <2 x float> %82, float %81, i64 1
  %84 = fsub <2 x float> %83, %76
  %85 = fmul <2 x float> %32, %84
  %86 = extractelement <2 x float> %85, i64 0
  %87 = extractelement <2 x float> %85, i64 1
  %88 = fcmp ogt float %86, %87
  %89 = extractelement <2 x float> %80, i64 0
  %90 = extractelement <2 x float> %80, i64 1
  %91 = fcmp ogt float %90, %89
  %92 = select i1 %88, i1 true, i1 %91
  br i1 %92, label %230, label %93

93:                                               ; preds = %61
  %94 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %95 = fcmp olt <2 x float> %85, %94
  %96 = extractelement <2 x i1> %95, i64 0
  %97 = select i1 %96, float %90, float %86
  %98 = extractelement <2 x i1> %95, i64 1
  %99 = select i1 %98, float %87, float %89
  %100 = load float, ptr %57, align 8, !tbaa !137
  %101 = load float, ptr %10, align 4, !tbaa !137
  %102 = fsub float %100, %101
  %103 = fmul float %30, %102
  %104 = load float, ptr %60, align 8, !tbaa !137
  %105 = fsub float %104, %101
  %106 = fmul float %30, %105
  %107 = fcmp ogt float %97, %106
  %108 = fcmp ogt float %103, %99
  %109 = select i1 %107, i1 true, i1 %108
  br i1 %109, label %230, label %110

110:                                              ; preds = %93
  %111 = fcmp ogt float %103, %97
  %112 = select i1 %111, float %103, float %97
  %113 = fcmp olt float %106, %99
  %114 = select i1 %113, float %106, float %99
  %115 = fcmp olt float %112, %44
  %116 = fcmp ogt float %114, 0.000000e+00
  %117 = select i1 %115, i1 %116, i1 false
  br i1 %117, label %118, label %230

118:                                              ; preds = %110
  %119 = getelementptr inbounds %struct.btDbvtNode, ptr %71, i64 0, i32 2, i32 0, i64 1
  %120 = load ptr, ptr %119, align 8, !tbaa !163
  %121 = icmp eq ptr %120, null
  br i1 %121, label %226, label %122

122:                                              ; preds = %118
  %123 = icmp sgt i32 %68, %65
  br i1 %123, label %124, label %214

124:                                              ; preds = %122
  %125 = shl nsw i32 %64, 1
  %126 = icmp slt i32 %64, %125
  br i1 %126, label %127, label %206

127:                                              ; preds = %124
  %128 = icmp slt i32 %63, %125
  br i1 %128, label %129, label %197

129:                                              ; preds = %127
  %130 = icmp eq i32 %64, 0
  br i1 %130, label %195, label %131

131:                                              ; preds = %129
  %132 = sext i32 %125 to i64
  %133 = shl nsw i64 %132, 3
  %134 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %133, i32 noundef 16)
          to label %135 unwind label %212

135:                                              ; preds = %131
  %136 = icmp sgt i32 %64, 0
  br i1 %136, label %137, label %195

137:                                              ; preds = %135
  %138 = ptrtoint ptr %134 to i64
  %139 = zext i32 %64 to i64
  %140 = icmp ult i32 %64, 6
  %141 = sub i64 %138, %67
  %142 = icmp ult i64 %141, 32
  %143 = select i1 %140, i1 true, i1 %142
  br i1 %143, label %158, label %144

144:                                              ; preds = %137
  %145 = and i64 %139, 4294967292
  br label %146

146:                                              ; preds = %146, %144
  %147 = phi i64 [ 0, %144 ], [ %154, %146 ]
  %148 = getelementptr inbounds ptr, ptr %134, i64 %147
  %149 = getelementptr inbounds ptr, ptr %62, i64 %147
  %150 = load <2 x ptr>, ptr %149, align 8, !tbaa !219
  %151 = getelementptr inbounds ptr, ptr %149, i64 2
  %152 = load <2 x ptr>, ptr %151, align 8, !tbaa !219
  store <2 x ptr> %150, ptr %148, align 8, !tbaa !219
  %153 = getelementptr inbounds ptr, ptr %148, i64 2
  store <2 x ptr> %152, ptr %153, align 8, !tbaa !219
  %154 = add nuw i64 %147, 4
  %155 = icmp eq i64 %154, %145
  br i1 %155, label %156, label %146, !llvm.loop !484

156:                                              ; preds = %146
  %157 = icmp eq i64 %145, %139
  br i1 %157, label %195, label %158

158:                                              ; preds = %137, %156
  %159 = phi i64 [ 0, %137 ], [ %145, %156 ]
  %160 = xor i64 %159, -1
  %161 = add nsw i64 %160, %139
  %162 = and i64 %139, 3
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %173, label %164

164:                                              ; preds = %158, %164
  %165 = phi i64 [ %170, %164 ], [ %159, %158 ]
  %166 = phi i64 [ %171, %164 ], [ 0, %158 ]
  %167 = getelementptr inbounds ptr, ptr %134, i64 %165
  %168 = getelementptr inbounds ptr, ptr %62, i64 %165
  %169 = load ptr, ptr %168, align 8, !tbaa !219
  store ptr %169, ptr %167, align 8, !tbaa !219
  %170 = add nuw nsw i64 %165, 1
  %171 = add i64 %166, 1
  %172 = icmp eq i64 %171, %162
  br i1 %172, label %173, label %164, !llvm.loop !485

173:                                              ; preds = %164, %158
  %174 = phi i64 [ %159, %158 ], [ %170, %164 ]
  %175 = icmp ult i64 %161, 3
  br i1 %175, label %195, label %176

176:                                              ; preds = %173, %176
  %177 = phi i64 [ %193, %176 ], [ %174, %173 ]
  %178 = getelementptr inbounds ptr, ptr %134, i64 %177
  %179 = getelementptr inbounds ptr, ptr %62, i64 %177
  %180 = load ptr, ptr %179, align 8, !tbaa !219
  store ptr %180, ptr %178, align 8, !tbaa !219
  %181 = add nuw nsw i64 %177, 1
  %182 = getelementptr inbounds ptr, ptr %134, i64 %181
  %183 = getelementptr inbounds ptr, ptr %62, i64 %181
  %184 = load ptr, ptr %183, align 8, !tbaa !219
  store ptr %184, ptr %182, align 8, !tbaa !219
  %185 = add nuw nsw i64 %177, 2
  %186 = getelementptr inbounds ptr, ptr %134, i64 %185
  %187 = getelementptr inbounds ptr, ptr %62, i64 %185
  %188 = load ptr, ptr %187, align 8, !tbaa !219
  store ptr %188, ptr %186, align 8, !tbaa !219
  %189 = add nuw nsw i64 %177, 3
  %190 = getelementptr inbounds ptr, ptr %134, i64 %189
  %191 = getelementptr inbounds ptr, ptr %62, i64 %189
  %192 = load ptr, ptr %191, align 8, !tbaa !219
  store ptr %192, ptr %190, align 8, !tbaa !219
  %193 = add nuw nsw i64 %177, 4
  %194 = icmp eq i64 %193, %139
  br i1 %194, label %195, label %176, !llvm.loop !486

195:                                              ; preds = %173, %176, %156, %129, %135
  %196 = phi ptr [ %134, %135 ], [ null, %129 ], [ %134, %156 ], [ %134, %176 ], [ %134, %173 ]
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %62)
          to label %197 unwind label %212

197:                                              ; preds = %195, %127
  %198 = phi ptr [ %62, %127 ], [ %196, %195 ]
  %199 = phi i32 [ %63, %127 ], [ %125, %195 ]
  %200 = sext i32 %64 to i64
  %201 = sext i32 %125 to i64
  %202 = shl nsw i64 %200, 3
  %203 = getelementptr i8, ptr %198, i64 %202
  %204 = sub nsw i64 %201, %200
  %205 = shl nsw i64 %204, 3
  tail call void @llvm.memset.p0.i64(ptr align 8 %203, i8 0, i64 %205, i1 false), !tbaa !219
  br label %206

206:                                              ; preds = %197, %124
  %207 = phi ptr [ %62, %124 ], [ %198, %197 ]
  %208 = phi i32 [ %63, %124 ], [ %199, %197 ]
  %209 = add nsw i32 %125, -2
  br label %214

210:                                              ; preds = %226
  %211 = landingpad { ptr, i32 }
          cleanup
  br label %238

212:                                              ; preds = %195, %131
  %213 = landingpad { ptr, i32 }
          cleanup
  br label %238

214:                                              ; preds = %206, %122
  %215 = phi ptr [ %207, %206 ], [ %62, %122 ]
  %216 = phi i32 [ %208, %206 ], [ %63, %122 ]
  %217 = phi i32 [ %125, %206 ], [ %64, %122 ]
  %218 = phi i32 [ %209, %206 ], [ %65, %122 ]
  %219 = getelementptr inbounds %struct.btDbvtNode, ptr %71, i64 0, i32 2
  %220 = load ptr, ptr %219, align 8, !tbaa !163
  %221 = getelementptr inbounds ptr, ptr %215, i64 %69
  store ptr %220, ptr %221, align 8, !tbaa !219
  %222 = load ptr, ptr %119, align 8, !tbaa !163
  %223 = add nsw i32 %66, 1
  %224 = sext i32 %66 to i64
  %225 = getelementptr inbounds ptr, ptr %215, i64 %224
  store ptr %222, ptr %225, align 8, !tbaa !219
  br label %230

226:                                              ; preds = %118
  %227 = load ptr, ptr %3, align 8, !tbaa !5
  %228 = getelementptr inbounds ptr, ptr %227, i64 3
  %229 = load ptr, ptr %228, align 8
  invoke void %229(ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull %71)
          to label %230 unwind label %210

230:                                              ; preds = %93, %61, %214, %226, %110
  %231 = phi ptr [ %215, %214 ], [ %62, %226 ], [ %62, %110 ], [ %62, %61 ], [ %62, %93 ]
  %232 = phi i32 [ %216, %214 ], [ %63, %226 ], [ %63, %110 ], [ %63, %61 ], [ %63, %93 ]
  %233 = phi i32 [ %217, %214 ], [ %64, %226 ], [ %64, %110 ], [ %64, %61 ], [ %64, %93 ]
  %234 = phi i32 [ %218, %214 ], [ %65, %226 ], [ %65, %110 ], [ %65, %61 ], [ %65, %93 ]
  %235 = phi i32 [ %223, %214 ], [ %68, %226 ], [ %68, %110 ], [ %68, %61 ], [ %68, %93 ]
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %61

237:                                              ; preds = %230
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #38
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %231)
  br label %241

238:                                              ; preds = %210, %212
  %239 = phi { ptr, i32 } [ %213, %212 ], [ %211, %210 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #38
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %62)
          to label %240 unwind label %242

240:                                              ; preds = %238
  resume { ptr, i32 } %239

241:                                              ; preds = %237, %4
  ret void

242:                                              ; preds = %238
  %243 = landingpad { ptr, i32 }
          catch ptr null
  %244 = extractvalue { ptr, i32 } %243, 0
  tail call void @__clang_call_terminate(ptr %244) #39
  unreachable
}

; Function Attrs: uwtable
define dso_local noundef zeroext i1 @_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE(ptr nocapture noundef nonnull readonly align 8 dereferenceable(1496) %0, ptr noundef %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %2, float noundef %3, ptr nocapture noundef nonnull writeonly align 8 dereferenceable(28) %4) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.btVector3, align 4
  %7 = alloca %class.btVector3, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6) #38
  %8 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 9
  %9 = load ptr, ptr %8, align 8, !tbaa !157
  %10 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 19
  %11 = load i32, ptr %10, align 8, !tbaa !134
  %12 = icmp eq i32 %11, 2
  %13 = select i1 %12, ptr %1, ptr null
  %14 = icmp eq ptr %13, null
  %15 = getelementptr inbounds %class.btCollisionObject, ptr %13, i64 0, i32 2
  %16 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 1
  %17 = select i1 %14, ptr %16, ptr %15
  %18 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 7
  %19 = load ptr, ptr %18, align 8, !tbaa !42
  %20 = getelementptr inbounds %struct.btSoftBodyWorldInfo, ptr %19, i64 0, i32 7
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #38
  %21 = getelementptr inbounds %class.btTransform, ptr %17, i64 0, i32 1
  %22 = load float, ptr %2, align 4, !tbaa !137
  %23 = load float, ptr %21, align 4, !tbaa !137
  %24 = fsub float %22, %23
  %25 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %26 = load float, ptr %25, align 4, !tbaa !137
  %27 = getelementptr inbounds %class.btTransform, ptr %17, i64 0, i32 1, i32 0, i64 1
  %28 = load float, ptr %27, align 4, !tbaa !137
  %29 = fsub float %26, %28
  %30 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %31 = load float, ptr %30, align 4, !tbaa !137
  %32 = getelementptr inbounds %class.btTransform, ptr %17, i64 0, i32 1, i32 0, i64 2
  %33 = load float, ptr %32, align 4, !tbaa !137
  %34 = fsub float %31, %33
  %35 = getelementptr inbounds [3 x %class.btVector3], ptr %17, i64 0, i64 1
  %36 = getelementptr inbounds [3 x %class.btVector3], ptr %17, i64 0, i64 2
  %37 = getelementptr inbounds [4 x float], ptr %17, i64 0, i64 2
  %38 = getelementptr inbounds [3 x %class.btVector3], ptr %17, i64 0, i64 1, i32 0, i64 2
  %39 = getelementptr inbounds [3 x %class.btVector3], ptr %17, i64 0, i64 2, i32 0, i64 2
  %40 = load float, ptr %37, align 4, !tbaa !137, !noalias !487
  %41 = load float, ptr %38, align 4, !tbaa !137, !noalias !487
  %42 = load float, ptr %39, align 4, !tbaa !137, !noalias !487
  %43 = load <2 x float>, ptr %17, align 4, !tbaa !137, !noalias !487
  %44 = load <2 x float>, ptr %35, align 4, !tbaa !137, !noalias !487
  %45 = load <2 x float>, ptr %36, align 4, !tbaa !137, !noalias !487
  %46 = insertelement <2 x float> poison, float %29, i64 0
  %47 = shufflevector <2 x float> %46, <2 x float> poison, <2 x i32> zeroinitializer
  %48 = fmul <2 x float> %47, %44
  %49 = insertelement <2 x float> poison, float %24, i64 0
  %50 = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> zeroinitializer
  %51 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %43, <2 x float> %50, <2 x float> %48)
  %52 = insertelement <2 x float> poison, float %34, i64 0
  %53 = shufflevector <2 x float> %52, <2 x float> poison, <2 x i32> zeroinitializer
  %54 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %45, <2 x float> %53, <2 x float> %51)
  %55 = fmul float %29, %41
  %56 = tail call float @llvm.fmuladd.f32(float %40, float %24, float %55)
  %57 = tail call float @llvm.fmuladd.f32(float %42, float %34, float %56)
  %58 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %57, i64 0
  store <2 x float> %54, ptr %7, align 8
  %59 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %7, i64 0, i32 1
  store <2 x float> %58, ptr %59, align 8
  %60 = call noundef float @_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f(ptr noundef nonnull align 8 dereferenceable(52) %20, ptr noundef nonnull align 4 dereferenceable(16) %7, ptr noundef %9, ptr noundef nonnull align 4 dereferenceable(16) %6, float noundef %3)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #38
  %61 = fcmp olt float %60, 0.000000e+00
  br i1 %61, label %62, label %117

62:                                               ; preds = %5
  %63 = getelementptr inbounds [3 x %class.btVector3], ptr %17, i64 0, i64 2, i32 0, i64 1
  %64 = getelementptr inbounds [3 x %class.btVector3], ptr %17, i64 0, i64 1, i32 0, i64 1
  %65 = getelementptr inbounds [4 x float], ptr %17, i64 0, i64 1
  store ptr %1, ptr %4, align 8, !tbaa !490
  %66 = load float, ptr %6, align 4, !tbaa !137
  %67 = getelementptr inbounds [4 x float], ptr %6, i64 0, i64 1
  %68 = load float, ptr %67, align 4, !tbaa !137
  %69 = getelementptr inbounds [4 x float], ptr %6, i64 0, i64 2
  %70 = load float, ptr %69, align 4, !tbaa !137
  %71 = load float, ptr %17, align 4, !tbaa !137
  %72 = load float, ptr %65, align 4, !tbaa !137
  %73 = load float, ptr %37, align 4, !tbaa !137
  %74 = load float, ptr %35, align 4, !tbaa !137
  %75 = load float, ptr %64, align 4, !tbaa !137
  %76 = insertelement <2 x float> poison, float %68, i64 0
  %77 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> zeroinitializer
  %78 = insertelement <2 x float> poison, float %72, i64 0
  %79 = insertelement <2 x float> %78, float %75, i64 1
  %80 = fmul <2 x float> %77, %79
  %81 = insertelement <2 x float> poison, float %71, i64 0
  %82 = insertelement <2 x float> %81, float %74, i64 1
  %83 = insertelement <2 x float> poison, float %66, i64 0
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer
  %85 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %82, <2 x float> %84, <2 x float> %80)
  %86 = load float, ptr %38, align 4, !tbaa !137
  %87 = insertelement <2 x float> poison, float %73, i64 0
  %88 = insertelement <2 x float> %87, float %86, i64 1
  %89 = insertelement <2 x float> poison, float %70, i64 0
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> zeroinitializer
  %91 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %88, <2 x float> %90, <2 x float> %85)
  %92 = load float, ptr %36, align 4, !tbaa !137
  %93 = load float, ptr %63, align 4, !tbaa !137
  %94 = fmul float %68, %93
  %95 = call float @llvm.fmuladd.f32(float %92, float %66, float %94)
  %96 = load float, ptr %39, align 4, !tbaa !137
  %97 = call float @llvm.fmuladd.f32(float %96, float %70, float %95)
  %98 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %97, i64 0
  %99 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %4, i64 0, i32 1
  store <2 x float> %91, ptr %99, align 8, !tbaa.struct !162
  %100 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %4, i64 0, i32 1, i32 0, i64 2
  store <2 x float> %98, ptr %100, align 8, !tbaa.struct !164
  %101 = extractelement <2 x float> %91, i64 0
  %102 = fmul float %60, %101
  %103 = extractelement <2 x float> %91, i64 1
  %104 = fmul float %60, %103
  %105 = fmul float %60, %97
  %106 = load float, ptr %2, align 4, !tbaa !137
  %107 = fsub float %106, %102
  %108 = load float, ptr %25, align 4, !tbaa !137
  %109 = fsub float %108, %104
  %110 = load float, ptr %30, align 4, !tbaa !137
  %111 = fsub float %110, %105
  %112 = fmul float %103, %109
  %113 = call float @llvm.fmuladd.f32(float %101, float %107, float %112)
  %114 = call float @llvm.fmuladd.f32(float %97, float %111, float %113)
  %115 = fneg float %114
  %116 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %4, i64 0, i32 2
  store float %115, ptr %116, align 8, !tbaa !492
  br label %117

117:                                              ; preds = %5, %62
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #38
  ret i1 %61
}

; Function Attrs: uwtable
define linkonce_odr dso_local noundef float @_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f(ptr noundef nonnull align 8 dereferenceable(52) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef %2, ptr noundef nonnull align 4 dereferenceable(16) %3, float noundef %4) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %struct.btSparseSdf, ptr %0, i64 0, i32 1
  %7 = load float, ptr %6, align 8, !tbaa !137
  %8 = fdiv float 1.000000e+00, %7
  %9 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %10 = load float, ptr %9, align 4, !tbaa !137
  %11 = fmul float %8, %10
  %12 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %13 = insertelement <2 x float> poison, float %8, i64 0
  %14 = shufflevector <2 x float> %13, <2 x float> poison, <2 x i32> zeroinitializer
  %15 = fmul <2 x float> %14, %12
  %16 = fdiv <2 x float> %15, <float 3.000000e+00, float 3.000000e+00>
  %17 = shufflevector <2 x float> %16, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %18 = fcmp olt <2 x float> %17, zeroinitializer
  %19 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %17
  %20 = fptosi <2 x float> %19 to <2 x i32>
  %21 = select <2 x i1> %18, <2 x i32> %20, <2 x i32> zeroinitializer
  %22 = sitofp <2 x i32> %21 to <2 x float>
  %23 = fadd <2 x float> %17, %22
  %24 = fptosi <2 x float> %23 to <2 x i32>
  %25 = sub nsw <2 x i32> %24, %21
  %26 = fdiv float %11, 3.000000e+00
  %27 = fcmp olt float %26, 0.000000e+00
  %28 = fsub float 1.000000e+00, %26
  %29 = fptosi float %28 to i32
  %30 = select i1 %27, i32 %29, i32 0
  %31 = sitofp i32 %30 to float
  %32 = fadd float %26, %31
  %33 = fptosi float %32 to i32
  %34 = sub nsw i32 %33, %30
  %35 = extractelement <2 x i32> %25, i64 1
  %36 = and i32 %35, 65535
  %37 = add nuw nsw i32 %36, 24
  %38 = lshr i32 %35, 5
  %39 = and i32 %38, 134215680
  %40 = shl i32 %37, 16
  %41 = xor i32 %39, %40
  %42 = xor i32 %41, %37
  %43 = lshr i32 %42, 11
  %44 = extractelement <2 x i32> %25, i64 0
  %45 = and i32 %44, 65535
  %46 = add i32 %42, %45
  %47 = add i32 %46, %43
  %48 = lshr i32 %44, 5
  %49 = and i32 %48, 134215680
  %50 = shl i32 %47, 16
  %51 = xor i32 %49, %50
  %52 = xor i32 %51, %47
  %53 = lshr i32 %52, 11
  %54 = and i32 %34, 65535
  %55 = add i32 %52, %54
  %56 = add i32 %55, %53
  %57 = lshr i32 %34, 5
  %58 = and i32 %57, 134215680
  %59 = shl i32 %56, 16
  %60 = xor i32 %58, %59
  %61 = xor i32 %60, %56
  %62 = lshr i32 %61, 11
  %63 = add i32 %62, %61
  %64 = shl i32 %63, 16
  %65 = xor i32 %64, %63
  %66 = lshr i32 %65, 11
  %67 = ptrtoint ptr %2 to i64
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 65535
  %70 = add i32 %65, %69
  %71 = add i32 %70, %66
  %72 = lshr i32 %68, 5
  %73 = and i32 %72, 134215680
  %74 = shl i32 %71, 16
  %75 = xor i32 %73, %74
  %76 = xor i32 %75, %71
  %77 = lshr i32 %76, 11
  %78 = lshr i64 %67, 32
  %79 = trunc i64 %78 to i32
  %80 = and i32 %79, 65535
  %81 = add i32 %76, %80
  %82 = add i32 %81, %77
  %83 = lshr i64 %67, 37
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 134215680
  %86 = shl i32 %82, 16
  %87 = xor i32 %85, %86
  %88 = xor i32 %87, %82
  %89 = lshr i32 %88, 11
  %90 = add i32 %89, %88
  %91 = shl i32 %90, 3
  %92 = xor i32 %91, %90
  %93 = lshr i32 %92, 5
  %94 = add i32 %93, %92
  %95 = shl i32 %94, 4
  %96 = xor i32 %95, %94
  %97 = lshr i32 %96, 17
  %98 = add i32 %97, %96
  %99 = shl i32 %98, 25
  %100 = xor i32 %99, %98
  %101 = lshr i32 %100, 6
  %102 = add i32 %101, %100
  %103 = getelementptr inbounds %class.btAlignedObjectArray.16, ptr %0, i64 0, i32 2
  %104 = load i32, ptr %103, align 4, !tbaa !493
  %105 = urem i32 %102, %104
  %106 = getelementptr inbounds %class.btAlignedObjectArray.16, ptr %0, i64 0, i32 5
  %107 = load ptr, ptr %106, align 8, !tbaa !494
  %108 = sext i32 %105 to i64
  %109 = getelementptr inbounds ptr, ptr %107, i64 %108
  %110 = load ptr, ptr %109, align 8, !tbaa !219
  %111 = getelementptr inbounds %struct.btSparseSdf, ptr %0, i64 0, i32 5
  %112 = load i32, ptr %111, align 8, !tbaa !495
  %113 = add nsw i32 %112, 1
  store i32 %113, ptr %111, align 8, !tbaa !495
  %114 = icmp eq ptr %110, null
  %115 = getelementptr inbounds %struct.btSparseSdf, ptr %0, i64 0, i32 4
  %116 = load i32, ptr %115, align 4, !tbaa !496
  br i1 %114, label %144, label %117

117:                                              ; preds = %5, %140
  %118 = phi i32 [ %120, %140 ], [ %116, %5 ]
  %119 = phi ptr [ %142, %140 ], [ %110, %5 ]
  %120 = add nsw i32 %118, 1
  store i32 %120, ptr %115, align 4, !tbaa !496
  %121 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %119, i64 0, i32 3
  %122 = load i32, ptr %121, align 8, !tbaa !497
  %123 = icmp eq i32 %122, %102
  br i1 %123, label %124, label %140

124:                                              ; preds = %117
  %125 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %119, i64 0, i32 1
  %126 = load i32, ptr %125, align 8, !tbaa !140
  %127 = icmp eq i32 %126, %35
  br i1 %127, label %128, label %140

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %119, i64 0, i32 1, i64 1
  %130 = load i32, ptr %129, align 4, !tbaa !140
  %131 = icmp eq i32 %130, %44
  br i1 %131, label %132, label %140

132:                                              ; preds = %128
  %133 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %119, i64 0, i32 1, i64 2
  %134 = load i32, ptr %133, align 8, !tbaa !140
  %135 = icmp eq i32 %134, %34
  br i1 %135, label %136, label %140

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %119, i64 0, i32 4
  %138 = load ptr, ptr %137, align 8, !tbaa !499
  %139 = icmp eq ptr %138, %2
  br i1 %139, label %159, label %140

140:                                              ; preds = %136, %132, %128, %124, %117
  %141 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %119, i64 0, i32 5
  %142 = load ptr, ptr %141, align 8, !tbaa !500
  %143 = icmp eq ptr %142, null
  br i1 %143, label %144, label %117

144:                                              ; preds = %140, %5
  %145 = phi i32 [ %116, %5 ], [ %120, %140 ]
  %146 = getelementptr inbounds %struct.btSparseSdf, ptr %0, i64 0, i32 4
  %147 = add nsw i32 %145, 1
  store i32 %147, ptr %146, align 4, !tbaa !496
  %148 = getelementptr inbounds %struct.btSparseSdf, ptr %0, i64 0, i32 3
  %149 = load i32, ptr %148, align 8, !tbaa !501
  %150 = add nsw i32 %149, 1
  store i32 %150, ptr %148, align 8, !tbaa !501
  %151 = tail call noalias noundef nonnull dereferenceable(296) ptr @_Znwm(i64 noundef 296) #36
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(296) %151, i8 0, i64 288, i1 false)
  %152 = load ptr, ptr %109, align 8, !tbaa !219
  %153 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %151, i64 0, i32 5
  store ptr %152, ptr %153, align 8, !tbaa !500
  store ptr %151, ptr %109, align 8, !tbaa !219
  %154 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %151, i64 0, i32 4
  store ptr %2, ptr %154, align 8, !tbaa !499
  %155 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %151, i64 0, i32 3
  store i32 %102, ptr %155, align 8, !tbaa !497
  %156 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %151, i64 0, i32 1
  %157 = shufflevector <2 x i32> %25, <2 x i32> poison, <2 x i32> <i32 1, i32 0>
  store <2 x i32> %157, ptr %156, align 8, !tbaa !140
  %158 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %151, i64 0, i32 1, i64 2
  store i32 %34, ptr %158, align 8, !tbaa !140
  tail call void @_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE(ptr noundef nonnull align 8 dereferenceable(52) %0, ptr noundef nonnull align 8 dereferenceable(296) %151)
  br label %159

159:                                              ; preds = %136, %144
  %160 = phi ptr [ %151, %144 ], [ %119, %136 ]
  %161 = sitofp i32 %33 to float
  %162 = fsub float %32, %161
  %163 = fmul float %162, 3.000000e+00
  %164 = fptosi float %163 to i32
  %165 = zext i32 %164 to i64
  %166 = shl nuw i64 %165, 32
  %167 = sitofp <2 x i32> %24 to <2 x float>
  %168 = sitofp i32 %164 to float
  %169 = fsub float %163, %168
  %170 = getelementptr inbounds %struct.btSparseSdf, ptr %0, i64 0, i32 2
  %171 = load i32, ptr %170, align 4, !tbaa !502
  %172 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %160, i64 0, i32 2
  store i32 %171, ptr %172, align 4, !tbaa !503
  %173 = sext i32 %164 to i64
  %174 = add i64 %166, 4294967296
  %175 = ashr exact i64 %174, 32
  %176 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  %177 = fsub <2 x float> %23, %167
  %178 = fmul <2 x float> %177, <float 3.000000e+00, float 3.000000e+00>
  %179 = fptosi <2 x float> %178 to <2 x i32>
  %180 = extractelement <2 x i32> %179, i64 0
  %181 = zext i32 %180 to i64
  %182 = shl nuw i64 %181, 32
  %183 = extractelement <2 x i32> %179, i64 1
  %184 = zext i32 %183 to i64
  %185 = shl nuw i64 %184, 32
  %186 = sitofp <2 x i32> %179 to <2 x float>
  %187 = fsub <2 x float> %178, %186
  %188 = sext i32 %183 to i64
  %189 = sext i32 %180 to i64
  %190 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %188, i64 %189, i64 %173
  %191 = add i64 %185, 4294967296
  %192 = ashr exact i64 %191, 32
  %193 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %192, i64 %189, i64 %173
  %194 = add i64 %182, 4294967296
  %195 = ashr exact i64 %194, 32
  %196 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %192, i64 %195, i64 %173
  %197 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %188, i64 %195, i64 %173
  %198 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %188, i64 %189, i64 %175
  %199 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %192, i64 %189, i64 %175
  %200 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %192, i64 %195, i64 %175
  %201 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %160, i64 0, i64 %188, i64 %195, i64 %175
  %202 = insertelement <2 x float> poison, float %169, i64 0
  %203 = shufflevector <2 x float> %202, <2 x float> poison, <2 x i32> zeroinitializer
  %204 = load float, ptr %193, align 4, !tbaa !137
  %205 = load float, ptr %196, align 4, !tbaa !137
  %206 = load float, ptr %199, align 4, !tbaa !137
  %207 = load float, ptr %200, align 4, !tbaa !137
  %208 = insertelement <2 x float> poison, float %204, i64 0
  %209 = insertelement <2 x float> poison, float %205, i64 0
  %210 = shufflevector <2 x float> %209, <2 x float> poison, <2 x i32> zeroinitializer
  %211 = insertelement <2 x float> poison, float %206, i64 0
  %212 = insertelement <2 x float> poison, float %207, i64 0
  %213 = shufflevector <2 x float> %212, <2 x float> poison, <2 x i32> zeroinitializer
  %214 = insertelement <2 x float> %212, float %206, i64 1
  %215 = insertelement <2 x float> %209, float %204, i64 1
  %216 = fsub <2 x float> %214, %215
  %217 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %218 = extractelement <2 x float> %187, i64 0
  %219 = load float, ptr %190, align 4, !tbaa !137
  %220 = load float, ptr %197, align 4, !tbaa !137
  %221 = load float, ptr %198, align 4, !tbaa !137
  %222 = load float, ptr %201, align 4, !tbaa !137
  %223 = insertelement <2 x float> %208, float %220, i64 1
  %224 = insertelement <2 x float> poison, float %219, i64 0
  %225 = shufflevector <2 x float> %224, <2 x float> poison, <2 x i32> zeroinitializer
  %226 = fsub <2 x float> %223, %225
  %227 = insertelement <2 x float> poison, float %220, i64 0
  %228 = insertelement <2 x float> %227, float %204, i64 1
  %229 = fsub <2 x float> %210, %228
  %230 = insertelement <2 x float> %211, float %222, i64 1
  %231 = insertelement <2 x float> poison, float %221, i64 0
  %232 = shufflevector <2 x float> %231, <2 x float> poison, <2 x i32> zeroinitializer
  %233 = fsub <2 x float> %230, %232
  %234 = insertelement <2 x float> poison, float %222, i64 0
  %235 = insertelement <2 x float> %234, float %206, i64 1
  %236 = fsub <2 x float> %213, %235
  %237 = insertelement <2 x float> %234, float %221, i64 1
  %238 = insertelement <2 x float> %227, float %219, i64 1
  %239 = fsub <2 x float> %237, %238
  %240 = fsub <2 x float> %229, %226
  %241 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %240, <2 x float> %187, <2 x float> %226)
  %242 = fsub <2 x float> %236, %233
  %243 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %242, <2 x float> %187, <2 x float> %233)
  %244 = fsub <2 x float> %243, %241
  %245 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %244, <2 x float> %203, <2 x float> %241)
  %246 = fsub <2 x float> %216, %239
  %247 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %246, <2 x float> %217, <2 x float> %239)
  %248 = extractelement <2 x float> %247, i64 0
  %249 = extractelement <2 x float> %247, i64 1
  %250 = fsub float %248, %249
  %251 = tail call float @llvm.fmuladd.f32(float %250, float %218, float %249)
  %252 = fmul <2 x float> %245, %245
  %253 = extractelement <2 x float> %252, i64 1
  %254 = extractelement <2 x float> %245, i64 0
  %255 = tail call float @llvm.fmuladd.f32(float %254, float %254, float %253)
  %256 = tail call float @llvm.fmuladd.f32(float %251, float %251, float %255)
  %257 = tail call float @llvm.sqrt.f32(float %256)
  %258 = fdiv float 1.000000e+00, %257
  %259 = insertelement <2 x float> poison, float %258, i64 0
  %260 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> zeroinitializer
  %261 = fmul <2 x float> %245, %260
  %262 = fmul float %251, %258
  %263 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %262, i64 0
  store <2 x float> %261, ptr %3, align 4, !tbaa.struct !162
  store <2 x float> %263, ptr %176, align 4, !tbaa.struct !164
  %264 = shufflevector <2 x float> %233, <2 x float> %226, <2 x i32> <i32 0, i32 2>
  %265 = insertelement <2 x float> %231, float %219, i64 1
  %266 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %264, <2 x float> %217, <2 x float> %265)
  %267 = shufflevector <2 x float> %236, <2 x float> %229, <2 x i32> <i32 0, i32 2>
  %268 = insertelement <2 x float> %234, float %220, i64 1
  %269 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %267, <2 x float> %217, <2 x float> %268)
  %270 = fsub <2 x float> %269, %266
  %271 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> zeroinitializer
  %272 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %270, <2 x float> %271, <2 x float> %266)
  %273 = extractelement <2 x float> %272, i64 0
  %274 = extractelement <2 x float> %272, i64 1
  %275 = fsub float %273, %274
  %276 = tail call float @llvm.fmuladd.f32(float %275, float %169, float %274)
  %277 = fsub float %276, %4
  ret float %277
}

; Function Attrs: inlinehint nofree nosync nounwind memory(argmem: readwrite) uwtable
define internal fastcc void @_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_(ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %0, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(48) %1, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(48) %2) unnamed_addr #27 {
  %4 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1
  %5 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1, i32 0, i64 1
  %6 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2
  %7 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2, i32 0, i64 2
  %8 = load float, ptr %0, align 4, !tbaa !137
  %9 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 1
  %10 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 2
  %11 = load float, ptr %4, align 4, !tbaa !137, !noalias !504
  %12 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1, i32 0, i64 2
  %13 = load <4 x float>, ptr %12, align 4
  %14 = shufflevector <4 x float> %13, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %15 = load <2 x float>, ptr %9, align 4, !tbaa !137, !noalias !504
  %16 = insertelement <2 x float> %14, float %11, i64 1
  %17 = load <2 x float>, ptr %6, align 4, !tbaa !137, !noalias !504
  %18 = load float, ptr %5, align 4, !tbaa !137
  %19 = load float, ptr %7, align 4, !tbaa !137
  %20 = fmul float %18, %18
  %21 = tail call float @llvm.fmuladd.f32(float %8, float %8, float %20)
  %22 = tail call float @llvm.fmuladd.f32(float %19, float %19, float %21)
  %23 = tail call float @llvm.sqrt.f32(float %22)
  %24 = fdiv float 1.000000e+00, %23
  %25 = fmul float %8, %24
  %26 = insertelement <2 x float> poison, float %24, i64 0
  %27 = shufflevector <2 x float> %26, <2 x float> poison, <2 x i32> zeroinitializer
  %28 = fmul <2 x float> %15, %27
  %29 = fmul <2 x float> %27, %16
  %30 = fmul <2 x float> %27, %17
  %31 = insertelement <2 x float> poison, float %19, i64 0
  %32 = insertelement <2 x float> %31, float %18, i64 1
  %33 = fmul <2 x float> %27, %32
  %34 = getelementptr inbounds i8, ptr %1, i64 8
  %35 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1
  %36 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1, i32 0, i64 2
  %37 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2
  %38 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2, i32 0, i64 2
  %39 = extractelement <2 x float> %29, i64 0
  %40 = fneg float %39
  %41 = extractelement <2 x float> %30, i64 1
  %42 = fmul float %41, %40
  %43 = extractelement <2 x float> %33, i64 0
  %44 = extractelement <2 x float> %33, i64 1
  %45 = tail call float @llvm.fmuladd.f32(float %44, float %43, float %42)
  %46 = extractelement <2 x float> %29, i64 1
  %47 = fneg float %46
  %48 = fmul float %43, %47
  %49 = extractelement <2 x float> %30, i64 0
  %50 = tail call float @llvm.fmuladd.f32(float %39, float %49, float %48)
  %51 = extractelement <2 x float> %28, i64 0
  %52 = fmul float %51, %50
  %53 = tail call float @llvm.fmuladd.f32(float %25, float %45, float %52)
  %54 = fneg float %44
  %55 = fmul float %49, %54
  %56 = tail call float @llvm.fmuladd.f32(float %46, float %41, float %55)
  %57 = extractelement <2 x float> %28, i64 1
  %58 = tail call float @llvm.fmuladd.f32(float %57, float %56, float %53)
  %59 = tail call float @llvm.fabs.f32(float %58)
  %60 = fcmp olt float %59, 0x3E80000000000000
  br i1 %60, label %261, label %61

61:                                               ; preds = %3, %61
  %62 = phi float [ %85, %61 ], [ %25, %3 ]
  %63 = phi i32 [ %143, %61 ], [ 0, %3 ]
  %64 = phi float [ %139, %61 ], [ %58, %3 ]
  %65 = phi <2 x float> [ %95, %61 ], [ %28, %3 ]
  %66 = phi <2 x float> [ %117, %61 ], [ %29, %3 ]
  %67 = phi <2 x float> [ %118, %61 ], [ %30, %3 ]
  %68 = phi <2 x float> [ %119, %61 ], [ %33, %3 ]
  %69 = extractelement <2 x float> %66, i64 0
  %70 = fneg float %69
  %71 = extractelement <2 x float> %67, i64 1
  %72 = fmul float %71, %70
  %73 = extractelement <2 x float> %68, i64 0
  %74 = extractelement <2 x float> %68, i64 1
  %75 = tail call float @llvm.fmuladd.f32(float %74, float %73, float %72)
  %76 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %77 = shufflevector <2 x float> %76, <2 x float> %68, <2 x i32> <i32 0, i32 3>
  %78 = fneg <2 x float> %77
  %79 = fneg float %62
  %80 = fmul float %69, %79
  %81 = fmul float %71, %79
  %82 = fdiv float 1.000000e+00, %64
  %83 = fmul float %82, %75
  %84 = fadd float %83, %62
  %85 = fmul float %84, 5.000000e-01
  %86 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %87 = shufflevector <2 x float> %68, <2 x float> %86, <2 x i32> <i32 0, i32 3>
  %88 = fmul <2 x float> %87, %78
  %89 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %66, <2 x float> %67, <2 x float> %88)
  %90 = insertelement <2 x float> poison, float %81, i64 0
  %91 = insertelement <2 x float> poison, float %82, i64 0
  %92 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> zeroinitializer
  %93 = fmul <2 x float> %92, %89
  %94 = fadd <2 x float> %65, %93
  %95 = fmul <2 x float> %94, <float 5.000000e-01, float 5.000000e-01>
  %96 = fneg <2 x float> %65
  %97 = fmul <2 x float> %68, %96
  %98 = fmul <2 x float> %68, %96
  %99 = extractelement <2 x float> %98, i64 1
  %100 = shufflevector <2 x float> %66, <2 x float> %67, <2 x i32> <i32 1, i32 2>
  %101 = fmul <2 x float> %100, %96
  %102 = insertelement <2 x float> poison, float %62, i64 0
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> zeroinitializer
  %104 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %105 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %103, <2 x float> %104, <2 x float> %101)
  %106 = fmul <2 x float> %92, %105
  %107 = fadd <2 x float> %68, %106
  %108 = insertelement <2 x float> poison, float %99, i64 0
  %109 = insertelement <2 x float> %108, float %80, i64 1
  %110 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %65, <2 x float> %66, <2 x float> %109)
  %111 = shufflevector <2 x float> %90, <2 x float> %97, <2 x i32> <i32 0, i32 2>
  %112 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %65, <2 x float> %67, <2 x float> %111)
  %113 = fmul <2 x float> %92, %110
  %114 = fmul <2 x float> %92, %112
  %115 = fadd <2 x float> %66, %114
  %116 = fadd <2 x float> %67, %113
  %117 = fmul <2 x float> %115, <float 5.000000e-01, float 5.000000e-01>
  %118 = fmul <2 x float> %116, <float 5.000000e-01, float 5.000000e-01>
  %119 = fmul <2 x float> %107, <float 5.000000e-01, float 5.000000e-01>
  %120 = extractelement <2 x float> %117, i64 0
  %121 = fneg float %120
  %122 = extractelement <2 x float> %118, i64 1
  %123 = fmul float %122, %121
  %124 = extractelement <2 x float> %119, i64 0
  %125 = extractelement <2 x float> %119, i64 1
  %126 = tail call float @llvm.fmuladd.f32(float %125, float %124, float %123)
  %127 = extractelement <2 x float> %117, i64 1
  %128 = fneg float %127
  %129 = fmul float %124, %128
  %130 = extractelement <2 x float> %118, i64 0
  %131 = tail call float @llvm.fmuladd.f32(float %120, float %130, float %129)
  %132 = extractelement <2 x float> %95, i64 0
  %133 = fmul float %132, %131
  %134 = tail call float @llvm.fmuladd.f32(float %85, float %126, float %133)
  %135 = fneg float %125
  %136 = fmul float %130, %135
  %137 = tail call float @llvm.fmuladd.f32(float %127, float %122, float %136)
  %138 = extractelement <2 x float> %95, i64 1
  %139 = tail call float @llvm.fmuladd.f32(float %138, float %137, float %134)
  %140 = fsub float %139, %64
  %141 = fmul float %140, %140
  %142 = fcmp ule float %141, 0x3F1A36E2E0000000
  %143 = add nuw nsw i32 %63, 1
  %144 = icmp eq i32 %143, 16
  %145 = select i1 %142, i1 true, i1 %144
  br i1 %145, label %146, label %61

146:                                              ; preds = %61
  %147 = extractelement <2 x float> %95, i64 0
  %148 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %149 = insertelement <2 x float> %148, float %85, i64 1
  %150 = fneg <2 x float> %149
  %151 = fneg float %147
  %152 = fmul float %127, %151
  %153 = tail call float @llvm.fmuladd.f32(float %85, float %125, float %152)
  %154 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %155 = shufflevector <2 x float> %154, <2 x float> %119, <2 x i32> <i32 3, i32 1>
  %156 = fmul <2 x float> %155, %150
  %157 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %95, <2 x float> %117, <2 x float> %156)
  %158 = fmul <2 x float> %157, %157
  %159 = extractelement <2 x float> %158, i64 1
  %160 = extractelement <2 x float> %157, i64 0
  %161 = tail call float @llvm.fmuladd.f32(float %160, float %160, float %159)
  %162 = tail call float @llvm.fmuladd.f32(float %153, float %153, float %161)
  %163 = tail call float @llvm.sqrt.f32(float %162)
  %164 = fdiv float 1.000000e+00, %163
  %165 = insertelement <2 x float> poison, float %164, i64 0
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer
  %167 = fmul <2 x float> %157, %166
  %168 = fmul float %153, %164
  %169 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %168, i64 0
  store <2 x float> %167, ptr %37, align 4, !tbaa.struct !162
  store <2 x float> %169, ptr %38, align 4, !tbaa.struct !164
  %170 = extractelement <2 x float> %167, i64 1
  %171 = extractelement <2 x float> %167, i64 0
  %172 = fneg float %170
  %173 = fmul float %85, %172
  %174 = tail call float @llvm.fmuladd.f32(float %171, float %147, float %173)
  %175 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %176 = insertelement <2 x float> %175, float %168, i64 0
  %177 = fneg <2 x float> %176
  %178 = fmul <2 x float> %95, %177
  %179 = insertelement <2 x float> %175, float %168, i64 1
  %180 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %179, <2 x float> %149, <2 x float> %178)
  %181 = fmul <2 x float> %180, %180
  %182 = extractelement <2 x float> %181, i64 1
  %183 = extractelement <2 x float> %180, i64 0
  %184 = tail call float @llvm.fmuladd.f32(float %183, float %183, float %182)
  %185 = tail call float @llvm.fmuladd.f32(float %174, float %174, float %184)
  %186 = tail call float @llvm.sqrt.f32(float %185)
  %187 = fdiv float 1.000000e+00, %186
  %188 = insertelement <2 x float> poison, float %187, i64 0
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> zeroinitializer
  %190 = fmul <2 x float> %180, %189
  %191 = fmul float %174, %187
  %192 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %191, i64 0
  store <2 x float> %190, ptr %35, align 4, !tbaa.struct !162
  store <2 x float> %192, ptr %36, align 4, !tbaa.struct !164
  %193 = extractelement <2 x float> %190, i64 1
  %194 = extractelement <2 x float> %190, i64 0
  %195 = fneg float %193
  %196 = fmul float %171, %195
  %197 = tail call float @llvm.fmuladd.f32(float %194, float %170, float %196)
  %198 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %199 = insertelement <2 x float> %198, float %191, i64 0
  %200 = fneg <2 x float> %199
  %201 = fmul <2 x float> %179, %200
  %202 = insertelement <2 x float> %198, float %191, i64 1
  %203 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %202, <2 x float> %176, <2 x float> %201)
  %204 = fmul <2 x float> %203, %203
  %205 = extractelement <2 x float> %204, i64 1
  %206 = extractelement <2 x float> %203, i64 0
  %207 = tail call float @llvm.fmuladd.f32(float %206, float %206, float %205)
  %208 = tail call float @llvm.fmuladd.f32(float %197, float %197, float %207)
  %209 = tail call float @llvm.sqrt.f32(float %208)
  %210 = fdiv float 1.000000e+00, %209
  %211 = insertelement <2 x float> poison, float %210, i64 0
  %212 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> zeroinitializer
  %213 = fmul <2 x float> %203, %212
  %214 = fmul float %197, %210
  %215 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %214, i64 0
  store <2 x float> %213, ptr %1, align 4, !tbaa.struct !162
  store <2 x float> %215, ptr %34, align 4, !tbaa.struct !164
  %216 = load float, ptr %10, align 4, !tbaa !137, !noalias !507
  %217 = load float, ptr %12, align 4, !tbaa !137, !noalias !507
  %218 = fmul float %217, %194
  %219 = extractelement <2 x float> %213, i64 0
  %220 = tail call float @llvm.fmuladd.f32(float %216, float %219, float %218)
  %221 = load float, ptr %7, align 4, !tbaa !137, !noalias !507
  %222 = tail call float @llvm.fmuladd.f32(float %221, float %171, float %220)
  %223 = fmul float %193, %217
  %224 = extractelement <2 x float> %213, i64 1
  %225 = tail call float @llvm.fmuladd.f32(float %216, float %224, float %223)
  %226 = tail call float @llvm.fmuladd.f32(float %221, float %170, float %225)
  %227 = fmul float %191, %217
  %228 = tail call float @llvm.fmuladd.f32(float %216, float %214, float %227)
  %229 = tail call float @llvm.fmuladd.f32(float %221, float %168, float %228)
  %230 = load <2 x float>, ptr %0, align 4, !tbaa !137, !noalias !507
  %231 = load <2 x float>, ptr %4, align 4, !tbaa !137, !noalias !507
  %232 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> zeroinitializer
  %233 = fmul <2 x float> %231, %232
  %234 = shufflevector <2 x float> %213, <2 x float> poison, <2 x i32> zeroinitializer
  %235 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %230, <2 x float> %234, <2 x float> %233)
  %236 = load <2 x float>, ptr %6, align 4, !tbaa !137, !noalias !507
  %237 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer
  %238 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %236, <2 x float> %237, <2 x float> %235)
  store <2 x float> %238, ptr %2, align 4
  %239 = getelementptr inbounds i8, ptr %2, i64 8
  store float %222, ptr %239, align 4, !tbaa.struct !164
  %240 = getelementptr inbounds i8, ptr %2, i64 12
  store float 0.000000e+00, ptr %240, align 4, !tbaa.struct !318
  %241 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1
  %242 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %243 = fmul <2 x float> %242, %231
  %244 = shufflevector <2 x float> %213, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %245 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %230, <2 x float> %244, <2 x float> %243)
  %246 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %247 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %236, <2 x float> %246, <2 x float> %245)
  store <2 x float> %247, ptr %241, align 4
  %248 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 2
  store float %226, ptr %248, align 4, !tbaa.struct !164
  %249 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %249, align 4, !tbaa.struct !318
  %250 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2
  %251 = insertelement <2 x float> poison, float %191, i64 0
  %252 = shufflevector <2 x float> %251, <2 x float> poison, <2 x i32> zeroinitializer
  %253 = fmul <2 x float> %252, %231
  %254 = insertelement <2 x float> poison, float %214, i64 0
  %255 = shufflevector <2 x float> %254, <2 x float> poison, <2 x i32> zeroinitializer
  %256 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %230, <2 x float> %255, <2 x float> %253)
  %257 = insertelement <2 x float> poison, float %168, i64 0
  %258 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> zeroinitializer
  %259 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %236, <2 x float> %258, <2 x float> %256)
  store <2 x float> %259, ptr %250, align 4
  %260 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 2
  store float %229, ptr %260, align 4, !tbaa.struct !164
  br label %268

261:                                              ; preds = %3
  %262 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %263 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1, i32 0, i64 1
  store float 1.000000e+00, ptr %1, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %262, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %263, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %36, i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr %38, align 4, !tbaa !137
  store float 1.000000e+00, ptr %2, align 4, !tbaa !137
  %264 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %265 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %264, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %265, align 4, !tbaa !137
  %266 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 2
  %267 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %266, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %267, align 4, !tbaa !137
  br label %268

268:                                              ; preds = %261, %146
  %269 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 3
  store float 0.000000e+00, ptr %269, align 4
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #28

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody5Joint7PrepareEfi(ptr nocapture noundef nonnull readonly align 8 dereferenceable(181) %0, float %1, i32 %2) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !510
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %5, i1 noundef zeroext false)
  br label %8

8:                                                ; preds = %3, %7
  %9 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !510
  %11 = icmp eq ptr %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %10, i1 noundef zeroext false)
  br label %13

13:                                               ; preds = %8, %12
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6LJoint7PrepareEfi(ptr noundef nonnull align 8 dereferenceable(216) %0, float noundef %1, i32 noundef %2) unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca %class.btMatrix3x3, align 4
  %5 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !510
  %7 = icmp eq ptr %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %6, i1 noundef zeroext false)
  br label %9

9:                                                ; preds = %8, %3
  %10 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !510
  %12 = icmp eq ptr %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %11, i1 noundef zeroext false)
  br label %14

14:                                               ; preds = %9, %13
  %15 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  %16 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %39, !prof !172

18:                                               ; preds = %14
  %19 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %39, label %21

21:                                               ; preds = %18
  %22 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %37, !prof !172

24:                                               ; preds = %21
  %25 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %37, label %27

27:                                               ; preds = %24
  %28 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %35, !prof !172

30:                                               ; preds = %27
  %31 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %30
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %34 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %35

35:                                               ; preds = %33, %30, %27
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %36 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %37

37:                                               ; preds = %35, %24, %21
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %38 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %39

39:                                               ; preds = %14, %18, %37
  %40 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !253
  %42 = icmp eq ptr %41, null
  %43 = getelementptr inbounds %class.btCollisionObject, ptr %41, i64 0, i32 2
  %44 = load ptr, ptr %15, align 8
  %45 = icmp eq ptr %44, null
  %46 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %44, i64 0, i32 3
  %47 = select i1 %45, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %46
  %48 = select i1 %42, ptr %47, ptr %43
  %49 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2
  %50 = load float, ptr %49, align 8, !tbaa !137
  %51 = getelementptr inbounds [4 x float], ptr %48, i64 0, i64 1
  %52 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 0, i32 0, i64 1
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = getelementptr inbounds [4 x float], ptr %48, i64 0, i64 2
  %55 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 0, i32 0, i64 2
  %56 = load float, ptr %55, align 8, !tbaa !137
  %57 = getelementptr inbounds %class.btTransform, ptr %48, i64 0, i32 1
  %58 = getelementptr inbounds [3 x %class.btVector3], ptr %48, i64 0, i64 1
  %59 = getelementptr inbounds [3 x %class.btVector3], ptr %48, i64 0, i64 1, i32 0, i64 1
  %60 = getelementptr inbounds [3 x %class.btVector3], ptr %48, i64 0, i64 1, i32 0, i64 2
  %61 = load float, ptr %48, align 4, !tbaa !137
  %62 = load float, ptr %51, align 4, !tbaa !137
  %63 = load float, ptr %54, align 4, !tbaa !137
  %64 = load float, ptr %58, align 4, !tbaa !137
  %65 = load float, ptr %59, align 4, !tbaa !137
  %66 = insertelement <2 x float> poison, float %53, i64 0
  %67 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> zeroinitializer
  %68 = insertelement <2 x float> poison, float %62, i64 0
  %69 = insertelement <2 x float> %68, float %65, i64 1
  %70 = fmul <2 x float> %67, %69
  %71 = insertelement <2 x float> poison, float %61, i64 0
  %72 = insertelement <2 x float> %71, float %64, i64 1
  %73 = insertelement <2 x float> poison, float %50, i64 0
  %74 = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> zeroinitializer
  %75 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %72, <2 x float> %74, <2 x float> %70)
  %76 = load float, ptr %60, align 4, !tbaa !137
  %77 = insertelement <2 x float> poison, float %63, i64 0
  %78 = insertelement <2 x float> %77, float %76, i64 1
  %79 = insertelement <2 x float> poison, float %56, i64 0
  %80 = shufflevector <2 x float> %79, <2 x float> poison, <2 x i32> zeroinitializer
  %81 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %78, <2 x float> %80, <2 x float> %75)
  %82 = load <2 x float>, ptr %57, align 4, !tbaa !137
  %83 = fadd <2 x float> %81, %82
  %84 = getelementptr inbounds [3 x %class.btVector3], ptr %48, i64 0, i64 2
  %85 = load float, ptr %84, align 4, !tbaa !137
  %86 = getelementptr inbounds [3 x %class.btVector3], ptr %48, i64 0, i64 2, i32 0, i64 1
  %87 = load float, ptr %86, align 4, !tbaa !137
  %88 = fmul float %53, %87
  %89 = tail call float @llvm.fmuladd.f32(float %85, float %50, float %88)
  %90 = getelementptr inbounds [3 x %class.btVector3], ptr %48, i64 0, i64 2, i32 0, i64 2
  %91 = load float, ptr %90, align 4, !tbaa !137
  %92 = tail call float @llvm.fmuladd.f32(float %91, float %56, float %89)
  %93 = getelementptr inbounds %class.btTransform, ptr %48, i64 0, i32 1, i32 0, i64 2
  %94 = load float, ptr %93, align 4, !tbaa !137
  %95 = fadd float %94, %92
  %96 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %95, i64 0
  %97 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1
  store <2 x float> %83, ptr %97, align 8, !tbaa.struct !162
  %98 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 2
  store <2 x float> %96, ptr %98, align 8, !tbaa.struct !164
  %99 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  %100 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %102, label %123, !prof !172

102:                                              ; preds = %39
  %103 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %123, label %105

105:                                              ; preds = %102
  %106 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %121, !prof !172

108:                                              ; preds = %105
  %109 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %121, label %111

111:                                              ; preds = %108
  %112 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %114, label %119, !prof !172

114:                                              ; preds = %111
  %115 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %114
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %118 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %119

119:                                              ; preds = %117, %114, %111
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %120 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %121

121:                                              ; preds = %119, %108, %105
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %122 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %123

123:                                              ; preds = %39, %102, %121
  %124 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 2
  %125 = load ptr, ptr %124, align 8, !tbaa !253
  %126 = icmp eq ptr %125, null
  %127 = getelementptr inbounds %class.btCollisionObject, ptr %125, i64 0, i32 2
  %128 = load ptr, ptr %99, align 8
  %129 = icmp eq ptr %128, null
  %130 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %128, i64 0, i32 3
  %131 = select i1 %129, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %130
  %132 = select i1 %126, ptr %131, ptr %127
  %133 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 1
  %134 = load float, ptr %133, align 8, !tbaa !137
  %135 = getelementptr inbounds [4 x float], ptr %132, i64 0, i64 1
  %136 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 1, i32 0, i64 1
  %137 = load float, ptr %136, align 4, !tbaa !137
  %138 = getelementptr inbounds [4 x float], ptr %132, i64 0, i64 2
  %139 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 1, i32 0, i64 2
  %140 = load float, ptr %139, align 8, !tbaa !137
  %141 = getelementptr inbounds %class.btTransform, ptr %132, i64 0, i32 1
  %142 = getelementptr inbounds [3 x %class.btVector3], ptr %132, i64 0, i64 1
  %143 = getelementptr inbounds [3 x %class.btVector3], ptr %132, i64 0, i64 1, i32 0, i64 1
  %144 = getelementptr inbounds [3 x %class.btVector3], ptr %132, i64 0, i64 1, i32 0, i64 2
  %145 = getelementptr inbounds [3 x %class.btVector3], ptr %132, i64 0, i64 2
  %146 = load float, ptr %145, align 4, !tbaa !137
  %147 = getelementptr inbounds [3 x %class.btVector3], ptr %132, i64 0, i64 2, i32 0, i64 1
  %148 = load float, ptr %147, align 4, !tbaa !137
  %149 = fmul float %137, %148
  %150 = tail call float @llvm.fmuladd.f32(float %146, float %134, float %149)
  %151 = getelementptr inbounds [3 x %class.btVector3], ptr %132, i64 0, i64 2, i32 0, i64 2
  %152 = load float, ptr %151, align 4, !tbaa !137
  %153 = tail call float @llvm.fmuladd.f32(float %152, float %140, float %150)
  %154 = getelementptr inbounds %class.btTransform, ptr %132, i64 0, i32 1, i32 0, i64 2
  %155 = load float, ptr %154, align 4, !tbaa !137
  %156 = fadd float %155, %153
  %157 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %156, i64 0
  %158 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 1
  %159 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 1, i32 0, i64 2
  %160 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 1
  %161 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 1, i32 0, i64 1
  %162 = load float, ptr %132, align 4, !tbaa !137
  %163 = load float, ptr %135, align 4, !tbaa !137
  %164 = load float, ptr %138, align 4, !tbaa !137
  %165 = load float, ptr %142, align 4, !tbaa !137
  %166 = load float, ptr %143, align 4, !tbaa !137
  %167 = insertelement <2 x float> poison, float %137, i64 0
  %168 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer
  %169 = insertelement <2 x float> poison, float %163, i64 0
  %170 = insertelement <2 x float> %169, float %166, i64 1
  %171 = fmul <2 x float> %168, %170
  %172 = insertelement <2 x float> poison, float %162, i64 0
  %173 = insertelement <2 x float> %172, float %165, i64 1
  %174 = insertelement <2 x float> poison, float %134, i64 0
  %175 = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> zeroinitializer
  %176 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %173, <2 x float> %175, <2 x float> %171)
  %177 = load float, ptr %144, align 4, !tbaa !137
  %178 = insertelement <2 x float> poison, float %164, i64 0
  %179 = insertelement <2 x float> %178, float %177, i64 1
  %180 = insertelement <2 x float> poison, float %140, i64 0
  %181 = shufflevector <2 x float> %180, <2 x float> poison, <2 x i32> zeroinitializer
  %182 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %179, <2 x float> %181, <2 x float> %176)
  %183 = load <2 x float>, ptr %141, align 4, !tbaa !137
  %184 = fadd <2 x float> %182, %183
  store <2 x float> %184, ptr %158, align 8, !tbaa.struct !162
  store <2 x float> %157, ptr %159, align 8, !tbaa.struct !164
  %185 = load <2 x float>, ptr %97, align 8, !tbaa !137
  %186 = fsub <2 x float> %185, %184
  %187 = load float, ptr %98, align 8, !tbaa !137
  %188 = fsub float %187, %156
  %189 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %188, i64 0
  %190 = fmul <2 x float> %186, %186
  %191 = extractelement <2 x float> %190, i64 1
  %192 = extractelement <2 x float> %186, i64 0
  %193 = tail call float @llvm.fmuladd.f32(float %192, float %192, float %191)
  %194 = tail call float @llvm.fmuladd.f32(float %188, float %188, float %193)
  %195 = fcmp ogt float %194, 1.600000e+01
  br i1 %195, label %196, label %206

196:                                              ; preds = %123
  %197 = fmul <2 x float> %186, <float 4.000000e+00, float 4.000000e+00>
  %198 = fmul float %188, 4.000000e+00
  %199 = tail call float @llvm.sqrt.f32(float %194)
  %200 = fdiv float 1.000000e+00, %199
  %201 = insertelement <2 x float> poison, float %200, i64 0
  %202 = shufflevector <2 x float> %201, <2 x float> poison, <2 x i32> zeroinitializer
  %203 = fmul <2 x float> %197, %202
  %204 = fmul float %198, %200
  %205 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %204, i64 0
  br label %206

206:                                              ; preds = %123, %196
  %207 = phi <2 x float> [ %203, %196 ], [ %186, %123 ]
  %208 = phi <2 x float> [ %205, %196 ], [ %189, %123 ]
  %209 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 4
  %210 = load float, ptr %209, align 4, !tbaa !137
  %211 = extractelement <2 x float> %208, i64 0
  %212 = fmul float %210, %211
  %213 = fdiv float 1.000000e+00, %1
  %214 = insertelement <2 x float> poison, float %210, i64 0
  %215 = shufflevector <2 x float> %214, <2 x float> poison, <2 x i32> zeroinitializer
  %216 = fmul <2 x float> %207, %215
  %217 = insertelement <2 x float> poison, float %213, i64 0
  %218 = shufflevector <2 x float> %217, <2 x float> poison, <2 x i32> zeroinitializer
  %219 = fmul <2 x float> %218, %216
  %220 = fmul float %213, %212
  %221 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %220, i64 0
  %222 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6
  store <2 x float> %219, ptr %222, align 4, !tbaa.struct !162
  %223 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 2
  store <2 x float> %221, ptr %223, align 4, !tbaa.struct !164
  %224 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %226, label %247, !prof !172

226:                                              ; preds = %206
  %227 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %247, label %229

229:                                              ; preds = %226
  %230 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %231 = icmp eq i8 %230, 0
  br i1 %231, label %232, label %245, !prof !172

232:                                              ; preds = %229
  %233 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %245, label %235

235:                                              ; preds = %232
  %236 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %237 = icmp eq i8 %236, 0
  br i1 %237, label %238, label %243, !prof !172

238:                                              ; preds = %235
  %239 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %243, label %241

241:                                              ; preds = %238
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %242 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %243

243:                                              ; preds = %241, %238, %235
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %244 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %245

245:                                              ; preds = %243, %232, %229
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %246 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %247

247:                                              ; preds = %206, %226, %245
  %248 = load ptr, ptr %40, align 8, !tbaa !253
  %249 = icmp eq ptr %248, null
  %250 = getelementptr inbounds %class.btCollisionObject, ptr %248, i64 0, i32 2
  %251 = load ptr, ptr %15, align 8
  %252 = icmp eq ptr %251, null
  %253 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %251, i64 0, i32 3
  %254 = select i1 %252, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %253
  %255 = select i1 %249, ptr %254, ptr %250
  %256 = getelementptr inbounds %class.btTransform, ptr %255, i64 0, i32 1
  %257 = load float, ptr %256, align 4, !tbaa !137
  %258 = load float, ptr %97, align 8, !tbaa !137
  %259 = fsub float %258, %257
  store float %259, ptr %97, align 8, !tbaa !137
  %260 = getelementptr inbounds %class.btTransform, ptr %255, i64 0, i32 1, i32 0, i64 1
  %261 = load float, ptr %260, align 4, !tbaa !137
  %262 = load float, ptr %160, align 4, !tbaa !137
  %263 = fsub float %262, %261
  store float %263, ptr %160, align 4, !tbaa !137
  %264 = getelementptr inbounds %class.btTransform, ptr %255, i64 0, i32 1, i32 0, i64 2
  %265 = load float, ptr %264, align 4, !tbaa !137
  %266 = load float, ptr %98, align 8, !tbaa !137
  %267 = fsub float %266, %265
  store float %267, ptr %98, align 8, !tbaa !137
  %268 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %269 = icmp eq i8 %268, 0
  br i1 %269, label %270, label %291, !prof !172

270:                                              ; preds = %247
  %271 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %291, label %273

273:                                              ; preds = %270
  %274 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %275 = icmp eq i8 %274, 0
  br i1 %275, label %276, label %289, !prof !172

276:                                              ; preds = %273
  %277 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %289, label %279

279:                                              ; preds = %276
  %280 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %281 = icmp eq i8 %280, 0
  br i1 %281, label %282, label %287, !prof !172

282:                                              ; preds = %279
  %283 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %287, label %285

285:                                              ; preds = %282
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %286 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %287

287:                                              ; preds = %285, %282, %279
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %288 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %289

289:                                              ; preds = %287, %276, %273
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %290 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %291

291:                                              ; preds = %247, %270, %289
  %292 = load ptr, ptr %124, align 8, !tbaa !253
  %293 = icmp eq ptr %292, null
  %294 = getelementptr inbounds %class.btCollisionObject, ptr %292, i64 0, i32 2
  %295 = load ptr, ptr %99, align 8
  %296 = icmp eq ptr %295, null
  %297 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %295, i64 0, i32 3
  %298 = select i1 %296, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %297
  %299 = select i1 %293, ptr %298, ptr %294
  %300 = getelementptr inbounds %class.btTransform, ptr %299, i64 0, i32 1
  %301 = load float, ptr %300, align 4, !tbaa !137
  %302 = load float, ptr %158, align 8, !tbaa !137
  %303 = fsub float %302, %301
  store float %303, ptr %158, align 8, !tbaa !137
  %304 = getelementptr inbounds %class.btTransform, ptr %299, i64 0, i32 1, i32 0, i64 1
  %305 = load float, ptr %304, align 4, !tbaa !137
  %306 = load float, ptr %161, align 4, !tbaa !137
  %307 = fsub float %306, %305
  store float %307, ptr %161, align 4, !tbaa !137
  %308 = getelementptr inbounds %class.btTransform, ptr %299, i64 0, i32 1, i32 0, i64 2
  %309 = load float, ptr %308, align 4, !tbaa !137
  %310 = load float, ptr %159, align 8, !tbaa !137
  %311 = fsub float %310, %309
  store float %311, ptr %159, align 8, !tbaa !137
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %4) #38
  %312 = load ptr, ptr %5, align 8, !tbaa !510
  %313 = icmp eq ptr %312, null
  br i1 %313, label %317, label %314

314:                                              ; preds = %291
  %315 = getelementptr inbounds %class.btRigidBody, ptr %312, i64 0, i32 4
  %316 = load float, ptr %315, align 8, !tbaa !451
  br label %323

317:                                              ; preds = %291
  %318 = load ptr, ptr %15, align 8, !tbaa !272
  %319 = icmp eq ptr %318, null
  br i1 %319, label %323, label %320

320:                                              ; preds = %317
  %321 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %318, i64 0, i32 5
  %322 = load float, ptr %321, align 4, !tbaa !374
  br label %323

323:                                              ; preds = %314, %317, %320
  %324 = phi float [ %316, %314 ], [ %322, %320 ], [ 0.000000e+00, %317 ]
  %325 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi acquire, align 8
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %327, label %332, !prof !172

327:                                              ; preds = %323
  %328 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %332, label %330

330:                                              ; preds = %327
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, i8 0, i64 48, i1 false)
  %331 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  br label %332

332:                                              ; preds = %323, %327, %330
  %333 = load ptr, ptr %5, align 8, !tbaa !510
  %334 = icmp eq ptr %333, null
  %335 = getelementptr inbounds %class.btRigidBody, ptr %333, i64 0, i32 1
  %336 = load ptr, ptr %15, align 8
  %337 = icmp eq ptr %336, null
  %338 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %336, i64 0, i32 7
  %339 = select i1 %337, ptr @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, ptr %338
  %340 = select i1 %334, ptr %339, ptr %335
  %341 = load ptr, ptr %10, align 8, !tbaa !510
  %342 = icmp eq ptr %341, null
  br i1 %342, label %346, label %343

343:                                              ; preds = %332
  %344 = getelementptr inbounds %class.btRigidBody, ptr %341, i64 0, i32 4
  %345 = load float, ptr %344, align 8, !tbaa !451
  br label %352

346:                                              ; preds = %332
  %347 = load ptr, ptr %99, align 8, !tbaa !272
  %348 = icmp eq ptr %347, null
  br i1 %348, label %352, label %349

349:                                              ; preds = %346
  %350 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %347, i64 0, i32 5
  %351 = load float, ptr %350, align 4, !tbaa !374
  br label %352

352:                                              ; preds = %343, %346, %349
  %353 = phi float [ %345, %343 ], [ %351, %349 ], [ 0.000000e+00, %346 ]
  %354 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi acquire, align 8
  %355 = icmp eq i8 %354, 0
  br i1 %355, label %356, label %361, !prof !172

356:                                              ; preds = %352
  %357 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %361, label %359

359:                                              ; preds = %356
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, i8 0, i64 48, i1 false)
  %360 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  br label %361

361:                                              ; preds = %352, %356, %359
  %362 = load ptr, ptr %10, align 8, !tbaa !510
  %363 = icmp eq ptr %362, null
  %364 = getelementptr inbounds %class.btRigidBody, ptr %362, i64 0, i32 1
  %365 = load ptr, ptr %99, align 8
  %366 = icmp eq ptr %365, null
  %367 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %365, i64 0, i32 7
  %368 = select i1 %366, ptr @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, ptr %367
  %369 = select i1 %363, ptr %368, ptr %364
  call fastcc void @_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_(ptr noalias nonnull align 4 %4, float noundef %324, ptr noundef nonnull align 4 dereferenceable(48) %340, ptr noundef nonnull align 4 dereferenceable(16) %97, float noundef %353, ptr noundef nonnull align 4 dereferenceable(48) %369, ptr noundef nonnull align 4 dereferenceable(16) %158)
  %370 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %370, ptr noundef nonnull align 4 dereferenceable(16) %4, i64 16, i1 false), !tbaa.struct !162
  %371 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 1
  %372 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %372, ptr noundef nonnull align 4 dereferenceable(16) %371, i64 16, i1 false), !tbaa.struct !162
  %373 = getelementptr inbounds [3 x %class.btVector3], ptr %4, i64 0, i64 2
  %374 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %374, ptr noundef nonnull align 4 dereferenceable(16) %373, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %4) #38
  %375 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 5
  %376 = load float, ptr %375, align 8, !tbaa !269
  %377 = fcmp ogt float %376, 0.000000e+00
  %378 = load float, ptr %222, align 4, !tbaa !137
  br i1 %377, label %385, label %379

379:                                              ; preds = %361
  %380 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 1
  %381 = load float, ptr %380, align 8, !tbaa !137
  %382 = load float, ptr %223, align 4, !tbaa !137
  %383 = insertelement <2 x float> poison, float %378, i64 0
  %384 = insertelement <2 x float> %383, float %381, i64 1
  br label %435

385:                                              ; preds = %361
  %386 = fmul float %376, %378
  %387 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 1
  %388 = load float, ptr %387, align 8, !tbaa !137
  %389 = fmul float %376, %388
  %390 = load float, ptr %223, align 4, !tbaa !137
  %391 = fmul float %376, %390
  %392 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 1
  %393 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 2
  %394 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 1
  %395 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 2
  %396 = load <4 x float>, ptr %370, align 4
  %397 = shufflevector <4 x float> %396, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %398 = load <4 x float>, ptr %392, align 8
  %399 = shufflevector <4 x float> %398, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %400 = load <4 x float>, ptr %393, align 4
  %401 = shufflevector <4 x float> %400, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %402 = load float, ptr %372, align 4, !tbaa !137
  %403 = load float, ptr %394, align 8, !tbaa !137
  %404 = insertelement <2 x float> poison, float %389, i64 0
  %405 = shufflevector <2 x float> %404, <2 x float> poison, <2 x i32> zeroinitializer
  %406 = insertelement <2 x float> %399, float %403, i64 1
  %407 = fmul <2 x float> %405, %406
  %408 = insertelement <2 x float> %397, float %402, i64 1
  %409 = insertelement <2 x float> poison, float %386, i64 0
  %410 = shufflevector <2 x float> %409, <2 x float> poison, <2 x i32> zeroinitializer
  %411 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %408, <2 x float> %410, <2 x float> %407)
  %412 = load float, ptr %395, align 4, !tbaa !137
  %413 = insertelement <2 x float> %401, float %412, i64 1
  %414 = insertelement <2 x float> poison, float %391, i64 0
  %415 = shufflevector <2 x float> %414, <2 x float> poison, <2 x i32> zeroinitializer
  %416 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %413, <2 x float> %415, <2 x float> %411)
  %417 = load float, ptr %374, align 4, !tbaa !137
  %418 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 1
  %419 = load float, ptr %418, align 8, !tbaa !137
  %420 = fmul float %389, %419
  %421 = tail call float @llvm.fmuladd.f32(float %417, float %386, float %420)
  %422 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 2
  %423 = load float, ptr %422, align 4, !tbaa !137
  %424 = tail call float @llvm.fmuladd.f32(float %423, float %391, float %421)
  %425 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %424, i64 0
  %426 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7
  store <2 x float> %416, ptr %426, align 4, !tbaa.struct !162
  %427 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7, i32 0, i64 2
  store <2 x float> %425, ptr %427, align 4, !tbaa.struct !164
  %428 = fsub float 1.000000e+00, %376
  %429 = insertelement <2 x float> poison, float %428, i64 0
  %430 = shufflevector <2 x float> %429, <2 x float> poison, <2 x i32> zeroinitializer
  %431 = insertelement <2 x float> poison, float %378, i64 0
  %432 = insertelement <2 x float> %431, float %388, i64 1
  %433 = fmul <2 x float> %430, %432
  %434 = fmul float %428, %390
  br label %435

435:                                              ; preds = %379, %385
  %436 = phi float [ %382, %379 ], [ %434, %385 ]
  %437 = phi <2 x float> [ %384, %379 ], [ %433, %385 ]
  %438 = sitofp i32 %2 to float
  %439 = fdiv float 1.000000e+00, %438
  %440 = insertelement <2 x float> poison, float %439, i64 0
  %441 = shufflevector <2 x float> %440, <2 x float> poison, <2 x i32> zeroinitializer
  %442 = fmul <2 x float> %441, %437
  store <2 x float> %442, ptr %222, align 4, !tbaa !137
  %443 = fmul float %439, %436
  store float %443, ptr %223, align 4, !tbaa !137
  ret void
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define internal fastcc void @_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_(ptr noalias nocapture writeonly align 4 %0, float noundef %1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %2, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %3, float noundef %4, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %5, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %6) unnamed_addr #24 {
  %8 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 2
  %9 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %10 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1
  %11 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2
  %12 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %13 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 1
  %14 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 1
  %15 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %16 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 1, i32 0, i64 2
  %17 = getelementptr inbounds [3 x %class.btVector3], ptr %2, i64 0, i64 2, i32 0, i64 2
  %18 = getelementptr inbounds [4 x float], ptr %6, i64 0, i64 2
  %19 = getelementptr inbounds [4 x float], ptr %6, i64 0, i64 1
  %20 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 1
  %21 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 2
  %22 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 1
  %23 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 1, i32 0, i64 1
  %24 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 2, i32 0, i64 1
  %25 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %26 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 1, i32 0, i64 2
  %27 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 2, i32 0, i64 2
  %28 = load <4 x float>, ptr %2, align 4
  %29 = shufflevector <4 x float> %28, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %30 = load <4 x float>, ptr %10, align 4
  %31 = shufflevector <4 x float> %30, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %32 = load <4 x float>, ptr %11, align 4
  %33 = shufflevector <4 x float> %32, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %34 = load <4 x float>, ptr %12, align 4
  %35 = shufflevector <4 x float> %34, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %36 = load <4 x float>, ptr %13, align 4
  %37 = shufflevector <4 x float> %36, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %38 = load float, ptr %14, align 4, !tbaa !137, !noalias !511
  %39 = load float, ptr %5, align 4, !tbaa !137, !noalias !516
  %40 = load float, ptr %20, align 4, !tbaa !137, !noalias !516
  %41 = load float, ptr %21, align 4, !tbaa !137, !noalias !516
  %42 = load float, ptr %22, align 4, !tbaa !137, !noalias !516
  %43 = load float, ptr %23, align 4, !tbaa !137, !noalias !516
  %44 = load float, ptr %24, align 4, !tbaa !137, !noalias !516
  %45 = insertelement <2 x float> %31, float %40, i64 1
  %46 = insertelement <2 x float> %29, float %39, i64 1
  %47 = insertelement <2 x float> %33, float %41, i64 1
  %48 = insertelement <2 x float> %37, float %43, i64 1
  %49 = insertelement <2 x float> %35, float %42, i64 1
  %50 = insertelement <2 x float> poison, float %38, i64 0
  %51 = insertelement <2 x float> %50, float %44, i64 1
  %52 = shufflevector <4 x float> %30, <4 x float> poison, <2 x i32> zeroinitializer
  %53 = shufflevector <4 x float> %28, <4 x float> poison, <2 x i32> zeroinitializer
  %54 = shufflevector <4 x float> %32, <4 x float> poison, <2 x i32> zeroinitializer
  %55 = shufflevector <4 x float> %36, <4 x float> poison, <2 x i32> zeroinitializer
  %56 = shufflevector <4 x float> %34, <4 x float> poison, <2 x i32> zeroinitializer
  %57 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer
  %58 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %1, i64 0
  %59 = insertelement <2 x float> poison, float %40, i64 0
  %60 = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> zeroinitializer
  %61 = insertelement <2 x float> poison, float %39, i64 0
  %62 = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> zeroinitializer
  %63 = insertelement <2 x float> poison, float %41, i64 0
  %64 = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> zeroinitializer
  %65 = insertelement <2 x float> poison, float %43, i64 0
  %66 = shufflevector <2 x float> %65, <2 x float> poison, <2 x i32> zeroinitializer
  %67 = insertelement <2 x float> poison, float %42, i64 0
  %68 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> zeroinitializer
  %69 = insertelement <2 x float> poison, float %44, i64 0
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> zeroinitializer
  %71 = load float, ptr %9, align 4, !tbaa !137, !noalias !521
  %72 = load float, ptr %19, align 4, !tbaa !137, !noalias !524
  %73 = insertelement <2 x float> poison, float %71, i64 0
  %74 = insertelement <2 x float> %73, float %72, i64 1
  %75 = fneg <2 x float> %74
  %76 = insertelement <2 x float> poison, float %1, i64 0
  %77 = insertelement <2 x float> %76, float %4, i64 1
  %78 = load <4 x float>, ptr %3, align 4
  %79 = shufflevector <4 x float> %78, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %80 = load float, ptr %6, align 4, !tbaa !137, !noalias !524
  %81 = insertelement <2 x float> %79, float %80, i64 1
  %82 = fneg <2 x float> %81
  %83 = fmul <2 x float> %81, %45
  %84 = fmul <2 x float> %81, %48
  %85 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %86 = load float, ptr %8, align 4, !tbaa !137, !noalias !521
  %87 = load <4 x float>, ptr %15, align 4
  %88 = shufflevector <4 x float> %87, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %89 = load <4 x float>, ptr %16, align 4
  %90 = shufflevector <4 x float> %89, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %91 = load float, ptr %17, align 4, !tbaa !137, !noalias !511
  %92 = load float, ptr %18, align 4, !tbaa !137, !noalias !524
  %93 = insertelement <2 x float> poison, float %86, i64 0
  %94 = insertelement <2 x float> %93, float %92, i64 1
  %95 = fneg <2 x float> %94
  %96 = load float, ptr %25, align 4, !tbaa !137, !noalias !516
  %97 = load float, ptr %26, align 4, !tbaa !137, !noalias !516
  %98 = insertelement <2 x float> %90, float %97, i64 1
  %99 = fmul <2 x float> %98, %95
  %100 = insertelement <2 x float> %88, float %96, i64 1
  %101 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %100, <2 x float> zeroinitializer, <2 x float> %99)
  %102 = load float, ptr %27, align 4, !tbaa !137, !noalias !516
  %103 = insertelement <2 x float> poison, float %91, i64 0
  %104 = insertelement <2 x float> %103, float %102, i64 1
  %105 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %104, <2 x float> %74, <2 x float> %101)
  %106 = fmul <2 x float> %98, zeroinitializer
  %107 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %100, <2 x float> %94, <2 x float> %106)
  %108 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %104, <2 x float> %82, <2 x float> %107)
  %109 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %46, <2 x float> %75, <2 x float> %83)
  %110 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %47, <2 x float> zeroinitializer, <2 x float> %109)
  %111 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %49, <2 x float> %75, <2 x float> %84)
  %112 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %51, <2 x float> zeroinitializer, <2 x float> %111)
  %113 = fmul <2 x float> %81, %98
  %114 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %100, <2 x float> %75, <2 x float> %113)
  %115 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %104, <2 x float> zeroinitializer, <2 x float> %114)
  %116 = fmul <2 x float> %94, %112
  %117 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %110, <2 x float> zeroinitializer, <2 x float> %116)
  %118 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %75, <2 x float> %115, <2 x float> %117)
  %119 = fsub <2 x float> zeroinitializer, %118
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %121 = fadd <2 x float> %119, %120
  %122 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %95, <2 x i32> <i32 0, i32 2>
  %123 = fmul <2 x float> %52, %122
  %124 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %86, i64 0
  %125 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %53, <2 x float> %124, <2 x float> %123)
  %126 = insertelement <2 x float> %82, float %71, i64 1
  %127 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %54, <2 x float> %126, <2 x float> %125)
  %128 = fmul <2 x float> %55, %122
  %129 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %56, <2 x float> %124, <2 x float> %128)
  %130 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %57, <2 x float> %126, <2 x float> %129)
  %131 = shufflevector <2 x float> %82, <2 x float> <float 0.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>
  %132 = fmul <2 x float> %130, %131
  %133 = shufflevector <2 x float> %122, <2 x float> %126, <2 x i32> <i32 1, i32 3>
  %134 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %133, <2 x float> %127, <2 x float> %132)
  %135 = shufflevector <2 x float> %79, <2 x float> %105, <2 x i32> <i32 0, i32 2>
  %136 = insertelement <2 x float> %108, float 0.000000e+00, i64 1
  %137 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %135, <2 x float> %136, <2 x float> %134)
  %138 = insertelement <2 x float> %126, float 0.000000e+00, i64 1
  %139 = fmul <2 x float> %130, %138
  %140 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %141 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %140, <2 x float> %127, <2 x float> %139)
  %142 = shufflevector <2 x float> %108, <2 x float> %135, <2 x i32> <i32 0, i32 2>
  %143 = insertelement <2 x float> %135, float 0.000000e+00, i64 0
  %144 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %142, <2 x float> %143, <2 x float> %141)
  %145 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> zeroinitializer
  %146 = fmul <2 x float> %145, %138
  %147 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> zeroinitializer
  %148 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %140, <2 x float> %147, <2 x float> %146)
  %149 = shufflevector <4 x float> %78, <4 x float> poison, <2 x i32> <i32 undef, i32 0>
  %150 = shufflevector <2 x float> %115, <2 x float> %149, <2 x i32> <i32 0, i32 3>
  %151 = shufflevector <2 x float> %150, <2 x float> <float 0.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>
  %152 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %150, <2 x float> %151, <2 x float> %148)
  %153 = fsub <2 x float> %58, %137
  %154 = fsub <2 x float> zeroinitializer, %144
  %155 = fsub <2 x float> %58, %152
  %156 = insertelement <2 x float> %95, float 0.000000e+00, i64 0
  %157 = fmul <2 x float> %60, %156
  %158 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %92, i64 0
  %159 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %62, <2 x float> %158, <2 x float> %157)
  %160 = insertelement <2 x float> %85, float %72, i64 1
  %161 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %64, <2 x float> %160, <2 x float> %159)
  %162 = fmul <2 x float> %66, %156
  %163 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %68, <2 x float> %158, <2 x float> %162)
  %164 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %70, <2 x float> %160, <2 x float> %163)
  %165 = shufflevector <2 x float> %130, <2 x float> %164, <2 x i32> <i32 1, i32 3>
  %166 = fmul <2 x float> %94, %165
  %167 = shufflevector <2 x float> %127, <2 x float> %161, <2 x i32> <i32 1, i32 3>
  %168 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %167, <2 x float> zeroinitializer, <2 x float> %166)
  %169 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %75, <2 x float> %105, <2 x float> %168)
  %170 = shufflevector <2 x float> %130, <2 x float> %164, <2 x i32> <i32 0, i32 2>
  %171 = fmul <2 x float> %94, %170
  %172 = shufflevector <2 x float> %127, <2 x float> %161, <2 x i32> <i32 0, i32 2>
  %173 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %172, <2 x float> zeroinitializer, <2 x float> %171)
  %174 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %75, <2 x float> %108, <2 x float> %173)
  %175 = shufflevector <2 x float> %85, <2 x float> <float 0.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>
  %176 = fmul <2 x float> %164, %175
  %177 = shufflevector <2 x float> %95, <2 x float> %160, <2 x i32> <i32 1, i32 3>
  %178 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %177, <2 x float> %161, <2 x float> %176)
  %179 = insertelement <2 x float> %105, float %80, i64 0
  %180 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %108, <2 x i32> <i32 3, i32 1>
  %181 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %179, <2 x float> %180, <2 x float> %178)
  %182 = insertelement <2 x float> %160, float 0.000000e+00, i64 1
  %183 = fmul <2 x float> %164, %182
  %184 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %185 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %184, <2 x float> %161, <2 x float> %183)
  %186 = insertelement <2 x float> %180, float %80, i64 1
  %187 = insertelement <2 x float> %179, float 0.000000e+00, i64 0
  %188 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %186, <2 x float> %187, <2 x float> %185)
  %189 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %190 = fmul <2 x float> %189, %182
  %191 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %192 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %184, <2 x float> %191, <2 x float> %190)
  %193 = insertelement <2 x float> poison, float %80, i64 1
  %194 = shufflevector <2 x float> %193, <2 x float> %115, <2 x i32> <i32 3, i32 1>
  %195 = shufflevector <2 x float> %194, <2 x float> <float 0.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>
  %196 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %194, <2 x float> %195, <2 x float> %192)
  %197 = fsub <2 x float> %77, %169
  %198 = fsub <2 x float> zeroinitializer, %174
  %199 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %4, i64 0
  %200 = fsub <2 x float> %199, %181
  %201 = fsub <2 x float> zeroinitializer, %188
  %202 = fsub <2 x float> %199, %196
  %203 = shufflevector <2 x float> %197, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %204 = fadd <2 x float> %197, %203
  %205 = extractelement <2 x float> %204, i64 0
  %206 = shufflevector <2 x float> %198, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %207 = fadd <2 x float> %198, %206
  %208 = extractelement <2 x float> %207, i64 0
  %209 = fadd <2 x float> %153, %200
  %210 = fadd <2 x float> %154, %201
  %211 = fadd <2 x float> %155, %202
  %212 = extractelement <2 x float> %210, i64 0
  %213 = extractelement <2 x float> %209, i64 0
  %214 = extractelement <2 x float> %210, i64 1
  %215 = fneg <2 x float> %210
  %216 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %217 = fmul <2 x float> %216, %215
  %218 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %209, <2 x float> %211, <2 x float> %217)
  %219 = extractelement <2 x float> %218, i64 0
  %220 = extractelement <2 x float> %209, i64 1
  %221 = shufflevector <2 x float> %215, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %222 = fmul <2 x float> %207, %221
  %223 = extractelement <2 x float> %222, i64 0
  %224 = tail call float @llvm.fmuladd.f32(float %205, float %213, float %223)
  %225 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 2
  %226 = getelementptr inbounds [4 x float], ptr %0, i64 0, i64 3
  store float 0.000000e+00, ptr %226, align 4, !tbaa !137, !alias.scope !527
  %227 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1
  %228 = shufflevector <2 x float> %207, <2 x float> %209, <2 x i32> <i32 0, i32 3>
  %229 = fneg <2 x float> %228
  %230 = shufflevector <2 x float> %211, <2 x float> %121, <2 x i32> <i32 0, i32 2>
  %231 = fmul <2 x float> %230, %229
  %232 = shufflevector <2 x float> %210, <2 x float> %204, <2 x i32> <i32 0, i32 2>
  %233 = shufflevector <2 x float> %121, <2 x float> %216, <2 x i32> <i32 0, i32 3>
  %234 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %232, <2 x float> %233, <2 x float> %231)
  %235 = extractelement <2 x float> %234, i64 0
  %236 = fmul float %214, %235
  %237 = tail call float @llvm.fmuladd.f32(float %205, float %219, float %236)
  %238 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %239 = fmul <2 x float> %209, %238
  %240 = extractelement <2 x float> %239, i64 0
  %241 = tail call float @llvm.fmuladd.f32(float %214, float %212, float %240)
  %242 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1, i32 0, i64 2
  %243 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %243, align 4, !tbaa !137, !alias.scope !527
  %244 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2
  %245 = shufflevector <2 x float> %209, <2 x float> %204, <2 x i32> <i32 0, i32 2>
  %246 = fneg <2 x float> %245
  %247 = shufflevector <2 x float> %246, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %248 = fmul <2 x float> %210, %247
  %249 = extractelement <2 x float> %248, i64 0
  %250 = tail call float @llvm.fmuladd.f32(float %220, float %208, float %249)
  %251 = shufflevector <2 x float> %121, <2 x float> %211, <2 x i32> <i32 0, i32 3>
  %252 = fmul <2 x float> %251, %246
  %253 = shufflevector <2 x float> %207, <2 x float> %210, <2 x i32> <i32 0, i32 3>
  %254 = shufflevector <2 x float> %216, <2 x float> %121, <2 x i32> <i32 0, i32 2>
  %255 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %253, <2 x float> %254, <2 x float> %252)
  %256 = extractelement <2 x float> %255, i64 0
  %257 = tail call float @llvm.fmuladd.f32(float %220, float %256, float %237)
  %258 = fdiv float 1.000000e+00, %257
  %259 = insertelement <2 x float> poison, float %258, i64 0
  %260 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> zeroinitializer
  %261 = fmul <2 x float> %218, %260
  %262 = fmul float %241, %258
  %263 = fmul <2 x float> %234, %260
  %264 = fmul float %250, %258
  %265 = fmul <2 x float> %255, %260
  %266 = fmul float %224, %258
  store <2 x float> %261, ptr %0, align 4, !tbaa !137, !alias.scope !527
  store float %262, ptr %225, align 4, !tbaa !137, !alias.scope !527
  store <2 x float> %263, ptr %227, align 4, !tbaa !137, !alias.scope !527
  store float %264, ptr %242, align 4, !tbaa !137, !alias.scope !527
  store <2 x float> %265, ptr %244, align 4, !tbaa !137, !alias.scope !527
  %267 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2, i32 0, i64 2
  store float %266, ptr %267, align 4, !tbaa !137, !alias.scope !527
  %268 = getelementptr inbounds [3 x %class.btVector3], ptr %0, i64 0, i64 2, i32 0, i64 3
  store float 0.000000e+00, ptr %268, align 4, !tbaa !137, !alias.scope !527
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6LJoint5SolveEff(ptr noundef nonnull align 8 dereferenceable(216) %0, float %1, float noundef %2) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.btSoftBody::Impulse", align 8
  %5 = alloca %"struct.btSoftBody::Impulse", align 8
  %6 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1
  %8 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !510
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %14

11:                                               ; preds = %3
  %12 = load ptr, ptr %6, align 8, !tbaa !272
  %13 = icmp eq ptr %12, null
  br i1 %13, label %64, label %39

14:                                               ; preds = %3
  %15 = getelementptr inbounds %class.btRigidBody, ptr %9, i64 0, i32 2
  %16 = load <2 x float>, ptr %15, align 4, !tbaa.struct !162
  %17 = getelementptr inbounds %class.btRigidBody, ptr %9, i64 0, i32 2, i32 0, i64 2
  %18 = load <2 x float>, ptr %17, align 4, !tbaa.struct !164
  %19 = getelementptr inbounds %class.btRigidBody, ptr %9, i64 0, i32 3
  %20 = getelementptr inbounds %class.btRigidBody, ptr %9, i64 0, i32 3, i32 0, i64 1
  %21 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 1
  %22 = load float, ptr %19, align 4, !tbaa !137
  %23 = load <2 x float>, ptr %20, align 4, !tbaa !137
  %24 = load <2 x float>, ptr %21, align 4, !tbaa !137
  %25 = load float, ptr %7, align 8, !tbaa !137
  %26 = insertelement <2 x float> %23, float %22, i64 0
  %27 = shufflevector <2 x float> %26, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %28 = fneg <2 x float> %27
  %29 = fmul <2 x float> %24, %28
  %30 = shufflevector <2 x float> %24, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %31 = insertelement <2 x float> %30, float %25, i64 1
  %32 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %23, <2 x float> %31, <2 x float> %29)
  %33 = extractelement <2 x float> %23, i64 0
  %34 = fneg float %33
  %35 = fmul float %25, %34
  %36 = extractelement <2 x float> %24, i64 0
  %37 = tail call float @llvm.fmuladd.f32(float %22, float %36, float %35)
  %38 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %37, i64 0
  br label %64

39:                                               ; preds = %11
  %40 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 13, i32 0, i64 2
  %41 = load <2 x float>, ptr %40, align 8, !tbaa.struct !164
  %42 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 13
  %43 = load <2 x float>, ptr %42, align 8, !tbaa.struct !162
  %44 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 14
  %45 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 14, i32 0, i64 1
  %46 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 1
  %47 = load float, ptr %44, align 4, !tbaa !137
  %48 = load <2 x float>, ptr %45, align 4, !tbaa !137
  %49 = load <2 x float>, ptr %46, align 4, !tbaa !137
  %50 = load float, ptr %7, align 8, !tbaa !137
  %51 = insertelement <2 x float> %48, float %47, i64 0
  %52 = shufflevector <2 x float> %51, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %53 = fneg <2 x float> %52
  %54 = fmul <2 x float> %49, %53
  %55 = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %56 = insertelement <2 x float> %55, float %50, i64 1
  %57 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %48, <2 x float> %56, <2 x float> %54)
  %58 = extractelement <2 x float> %48, i64 0
  %59 = fneg float %58
  %60 = fmul float %50, %59
  %61 = extractelement <2 x float> %49, i64 0
  %62 = tail call float @llvm.fmuladd.f32(float %47, float %61, float %60)
  %63 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %62, i64 0
  br label %64

64:                                               ; preds = %11, %14, %39
  %65 = phi <2 x float> [ %41, %39 ], [ %18, %14 ], [ zeroinitializer, %11 ]
  %66 = phi <2 x float> [ %43, %39 ], [ %16, %14 ], [ zeroinitializer, %11 ]
  %67 = phi <2 x float> [ %57, %39 ], [ %32, %14 ], [ zeroinitializer, %11 ]
  %68 = phi <2 x float> [ %63, %39 ], [ %38, %14 ], [ zeroinitializer, %11 ]
  %69 = fadd <2 x float> %66, %67
  %70 = fadd <2 x float> %66, %67
  %71 = fadd <2 x float> %65, %68
  %72 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  %73 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 1
  %74 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 1
  %75 = load ptr, ptr %74, align 8, !tbaa !510
  %76 = icmp eq ptr %75, null
  br i1 %76, label %77, label %80

77:                                               ; preds = %64
  %78 = load ptr, ptr %72, align 8, !tbaa !272
  %79 = icmp eq ptr %78, null
  br i1 %79, label %130, label %105

80:                                               ; preds = %64
  %81 = getelementptr inbounds %class.btRigidBody, ptr %75, i64 0, i32 2
  %82 = load <2 x float>, ptr %81, align 4, !tbaa.struct !162
  %83 = getelementptr inbounds %class.btRigidBody, ptr %75, i64 0, i32 2, i32 0, i64 2
  %84 = load <2 x float>, ptr %83, align 4, !tbaa.struct !164
  %85 = getelementptr inbounds %class.btRigidBody, ptr %75, i64 0, i32 3
  %86 = getelementptr inbounds %class.btRigidBody, ptr %75, i64 0, i32 3, i32 0, i64 1
  %87 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 1, i32 0, i64 1
  %88 = load float, ptr %85, align 4, !tbaa !137
  %89 = load <2 x float>, ptr %86, align 4, !tbaa !137
  %90 = load <2 x float>, ptr %87, align 4, !tbaa !137
  %91 = load float, ptr %73, align 8, !tbaa !137
  %92 = insertelement <2 x float> %89, float %88, i64 0
  %93 = shufflevector <2 x float> %92, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %94 = fneg <2 x float> %93
  %95 = fmul <2 x float> %90, %94
  %96 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %97 = insertelement <2 x float> %96, float %91, i64 1
  %98 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %89, <2 x float> %97, <2 x float> %95)
  %99 = extractelement <2 x float> %89, i64 0
  %100 = fneg float %99
  %101 = fmul float %91, %100
  %102 = extractelement <2 x float> %90, i64 0
  %103 = tail call float @llvm.fmuladd.f32(float %88, float %102, float %101)
  %104 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %103, i64 0
  br label %130

105:                                              ; preds = %77
  %106 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %78, i64 0, i32 13, i32 0, i64 2
  %107 = load <2 x float>, ptr %106, align 8, !tbaa.struct !164
  %108 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %78, i64 0, i32 13
  %109 = load <2 x float>, ptr %108, align 8, !tbaa.struct !162
  %110 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %78, i64 0, i32 14
  %111 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %78, i64 0, i32 14, i32 0, i64 1
  %112 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 1, i32 0, i64 1
  %113 = load float, ptr %110, align 4, !tbaa !137
  %114 = load <2 x float>, ptr %111, align 4, !tbaa !137
  %115 = load <2 x float>, ptr %112, align 4, !tbaa !137
  %116 = load float, ptr %73, align 8, !tbaa !137
  %117 = insertelement <2 x float> %114, float %113, i64 0
  %118 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %119 = fneg <2 x float> %118
  %120 = fmul <2 x float> %115, %119
  %121 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %122 = insertelement <2 x float> %121, float %116, i64 1
  %123 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %114, <2 x float> %122, <2 x float> %120)
  %124 = extractelement <2 x float> %114, i64 0
  %125 = fneg float %124
  %126 = fmul float %116, %125
  %127 = extractelement <2 x float> %115, i64 0
  %128 = tail call float @llvm.fmuladd.f32(float %113, float %127, float %126)
  %129 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %128, i64 0
  br label %130

130:                                              ; preds = %77, %80, %105
  %131 = phi <2 x float> [ %107, %105 ], [ %84, %80 ], [ zeroinitializer, %77 ]
  %132 = phi <2 x float> [ %109, %105 ], [ %82, %80 ], [ zeroinitializer, %77 ]
  %133 = phi <2 x float> [ %123, %105 ], [ %98, %80 ], [ zeroinitializer, %77 ]
  %134 = phi <2 x float> [ %129, %105 ], [ %104, %80 ], [ zeroinitializer, %77 ]
  %135 = fadd <2 x float> %132, %133
  %136 = fadd <2 x float> %132, %133
  %137 = fadd <2 x float> %131, %134
  %138 = fsub <2 x float> %69, %135
  %139 = extractelement <2 x float> %138, i64 0
  %140 = fsub <2 x float> %70, %136
  %141 = extractelement <2 x float> %140, i64 1
  %142 = fsub <2 x float> %71, %137
  %143 = extractelement <2 x float> %142, i64 0
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %4) #38
  %144 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %4, i64 0, i32 2
  %145 = getelementptr inbounds i8, ptr %4, i64 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %145, i8 0, i64 16, i1 false)
  store i8 1, ptr %144, align 8
  %146 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8
  %147 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6
  %148 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 3
  %149 = load float, ptr %148, align 8, !tbaa !137
  %150 = fmul float %139, %149
  %151 = fmul float %141, %149
  %152 = fmul float %143, %149
  %153 = load float, ptr %147, align 4, !tbaa !137
  %154 = fadd float %153, %150
  %155 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 1
  %156 = load float, ptr %155, align 8, !tbaa !137
  %157 = fadd float %151, %156
  %158 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 2
  %159 = load float, ptr %158, align 4, !tbaa !137
  %160 = fadd float %152, %159
  %161 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 1
  %162 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 2
  %163 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1
  %164 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 1
  %165 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 2
  %166 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2
  %167 = load float, ptr %166, align 4, !tbaa !137
  %168 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 1
  %169 = load float, ptr %168, align 8, !tbaa !137
  %170 = fmul float %157, %169
  %171 = tail call float @llvm.fmuladd.f32(float %167, float %154, float %170)
  %172 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 2
  %173 = load float, ptr %172, align 4, !tbaa !137
  %174 = tail call float @llvm.fmuladd.f32(float %173, float %160, float %171)
  %175 = load <4 x float>, ptr %146, align 4
  %176 = shufflevector <4 x float> %175, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %177 = load <4 x float>, ptr %161, align 8
  %178 = shufflevector <4 x float> %177, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %179 = load <4 x float>, ptr %162, align 4
  %180 = shufflevector <4 x float> %179, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %181 = load float, ptr %163, align 4, !tbaa !137
  %182 = load float, ptr %164, align 8, !tbaa !137
  %183 = insertelement <2 x float> poison, float %157, i64 0
  %184 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer
  %185 = insertelement <2 x float> %178, float %182, i64 1
  %186 = fmul <2 x float> %184, %185
  %187 = insertelement <2 x float> %176, float %181, i64 1
  %188 = insertelement <2 x float> poison, float %154, i64 0
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> zeroinitializer
  %190 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %187, <2 x float> %189, <2 x float> %186)
  %191 = load float, ptr %165, align 4, !tbaa !137
  %192 = insertelement <2 x float> %180, float %191, i64 1
  %193 = insertelement <2 x float> poison, float %160, i64 0
  %194 = shufflevector <2 x float> %193, <2 x float> poison, <2 x i32> zeroinitializer
  %195 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %192, <2 x float> %194, <2 x float> %190)
  %196 = insertelement <2 x float> poison, float %2, i64 0
  %197 = shufflevector <2 x float> %196, <2 x float> poison, <2 x i32> zeroinitializer
  %198 = fmul <2 x float> %195, %197
  %199 = fmul float %174, %2
  %200 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %199, i64 0
  store <2 x float> %198, ptr %4, align 8, !tbaa.struct !162
  %201 = getelementptr inbounds i8, ptr %4, i64 8
  store <2 x float> %200, ptr %201, align 8, !tbaa.struct !164
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %5) #38
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(36) %5, ptr noundef nonnull align 8 dereferenceable(36) %4, i64 36, i1 false), !tbaa.struct !530
  %202 = load <2 x float>, ptr %5, align 8, !tbaa !137, !alias.scope !531
  %203 = fneg <2 x float> %202
  %204 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %205 = load float, ptr %204, align 8, !tbaa !137, !alias.scope !531
  %206 = fneg float %205
  %207 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %206, i64 0
  store <2 x float> %203, ptr %5, align 8, !tbaa.struct !162, !alias.scope !531
  store <2 x float> %207, ptr %204, align 8, !tbaa.struct !164, !alias.scope !531
  %208 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %5, i64 0, i32 1
  %209 = load <2 x float>, ptr %208, align 8, !tbaa !137, !alias.scope !531
  %210 = fneg <2 x float> %209
  %211 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %5, i64 0, i32 1, i32 0, i64 2
  %212 = load float, ptr %211, align 8, !tbaa !137, !alias.scope !531
  %213 = fneg float %212
  %214 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %213, i64 0
  store <2 x float> %210, ptr %208, align 8, !tbaa.struct !162, !alias.scope !531
  store <2 x float> %214, ptr %211, align 8, !tbaa.struct !164, !alias.scope !531
  %215 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %5, i64 0, i32 2
  %216 = load i8, ptr %215, align 8
  %217 = and i8 %216, 1
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %221, label %219

219:                                              ; preds = %130
  call void @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %6, ptr noundef nonnull align 4 dereferenceable(16) %5, ptr noundef nonnull align 4 dereferenceable(16) %7)
  %220 = load i8, ptr %215, align 8
  br label %221

221:                                              ; preds = %219, %130
  %222 = phi i8 [ %220, %219 ], [ %216, %130 ]
  %223 = and i8 %222, 2
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %226, label %225

225:                                              ; preds = %221
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %6, ptr noundef nonnull align 4 dereferenceable(16) %208, ptr noundef nonnull align 4 dereferenceable(16) %7)
  br label %226

226:                                              ; preds = %221, %225
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %5) #38
  call void @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %72, ptr noundef nonnull align 4 dereferenceable(16) %4, ptr noundef nonnull align 4 dereferenceable(16) %73)
  %227 = load i8, ptr %144, align 8
  %228 = and i8 %227, 2
  %229 = icmp eq i8 %228, 0
  br i1 %229, label %232, label %230

230:                                              ; preds = %226
  %231 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %4, i64 0, i32 1
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %72, ptr noundef nonnull align 4 dereferenceable(16) %231, ptr noundef nonnull align 4 dereferenceable(16) %73)
  br label %232

232:                                              ; preds = %226, %230
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %4) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6LJoint9TerminateEf(ptr noundef nonnull align 8 dereferenceable(216) %0, float %1) unnamed_addr #0 align 2 {
  %3 = alloca %class.btVector3, align 8
  %4 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 5
  %5 = load float, ptr %4, align 8, !tbaa !269
  %6 = fcmp ogt float %5, 0.000000e+00
  br i1 %6, label %7, label %20

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #38
  %9 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7
  %10 = load <2 x float>, ptr %9, align 4, !tbaa !137
  %11 = fneg <2 x float> %10
  %12 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7, i32 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = fneg float %13
  %15 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %14, i64 0
  store <2 x float> %11, ptr %3, align 8
  %16 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %3, i64 0, i32 1
  store <2 x float> %15, ptr %16, align 8
  %17 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 4 dereferenceable(16) %3, ptr noundef nonnull align 4 dereferenceable(16) %17)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #38
  %18 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  %19 = getelementptr inbounds %"struct.btSoftBody::LJoint", ptr %0, i64 0, i32 1, i64 1
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %18, ptr noundef nonnull align 4 dereferenceable(16) %9, ptr noundef nonnull align 4 dereferenceable(16) %19)
  br label %20

20:                                               ; preds = %7, %2
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !510
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @_ZN11btRigidBody12applyImpulseERK9btVector3S2_(ptr noundef nonnull align 8 dereferenceable(564) %5, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2)
  br label %8

8:                                                ; preds = %7, %3
  %9 = load ptr, ptr %0, align 8, !tbaa !272
  %10 = icmp eq ptr %9, null
  br i1 %10, label %88, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 5
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %15 = load float, ptr %14, align 4, !tbaa !137
  %16 = fmul float %13, %15
  %17 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7
  %18 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %19 = load float, ptr %18, align 4, !tbaa !137
  %20 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = fneg float %21
  %23 = load float, ptr %2, align 4, !tbaa !137
  %24 = fneg float %23
  %25 = fmul float %15, %24
  %26 = fneg float %19
  %27 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %28 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %29 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 1
  %30 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %31 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %32 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 2
  %33 = load float, ptr %32, align 4, !tbaa !137
  %34 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %35 = load float, ptr %34, align 4, !tbaa !137
  %36 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %37 = load float, ptr %36, align 4, !tbaa !137
  %38 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 10
  %39 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %40 = insertelement <2 x float> poison, float %13, i64 0
  %41 = shufflevector <2 x float> %40, <2 x float> poison, <2 x i32> zeroinitializer
  %42 = fmul <2 x float> %41, %39
  %43 = extractelement <2 x float> %39, i64 1
  %44 = fmul float %43, %22
  %45 = tail call float @llvm.fmuladd.f32(float %19, float %15, float %44)
  %46 = extractelement <2 x float> %39, i64 0
  %47 = tail call float @llvm.fmuladd.f32(float %21, float %46, float %25)
  %48 = fmul float %46, %26
  %49 = tail call float @llvm.fmuladd.f32(float %23, float %43, float %48)
  %50 = fmul float %47, %35
  %51 = tail call float @llvm.fmuladd.f32(float %33, float %45, float %50)
  %52 = tail call float @llvm.fmuladd.f32(float %37, float %49, float %51)
  %53 = load <2 x float>, ptr %38, align 4, !tbaa !137
  %54 = fadd <2 x float> %42, %53
  store <2 x float> %54, ptr %38, align 4, !tbaa !137
  %55 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 10, i64 0, i32 0, i64 2
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = fadd float %16, %56
  store float %57, ptr %55, align 4, !tbaa !137
  %58 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 10, i64 1
  %59 = load float, ptr %17, align 4, !tbaa !137
  %60 = load float, ptr %27, align 4, !tbaa !137
  %61 = load float, ptr %28, align 4, !tbaa !137
  %62 = load float, ptr %29, align 4, !tbaa !137
  %63 = load float, ptr %30, align 4, !tbaa !137
  %64 = load float, ptr %31, align 4, !tbaa !137
  %65 = insertelement <2 x float> poison, float %60, i64 0
  %66 = insertelement <2 x float> %65, float %63, i64 1
  %67 = insertelement <2 x float> poison, float %47, i64 0
  %68 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> zeroinitializer
  %69 = fmul <2 x float> %66, %68
  %70 = insertelement <2 x float> poison, float %59, i64 0
  %71 = insertelement <2 x float> %70, float %62, i64 1
  %72 = insertelement <2 x float> poison, float %45, i64 0
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer
  %74 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %71, <2 x float> %73, <2 x float> %69)
  %75 = insertelement <2 x float> poison, float %61, i64 0
  %76 = insertelement <2 x float> %75, float %64, i64 1
  %77 = insertelement <2 x float> poison, float %49, i64 0
  %78 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> zeroinitializer
  %79 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %76, <2 x float> %78, <2 x float> %74)
  %80 = load <2 x float>, ptr %58, align 4, !tbaa !137
  %81 = fadd <2 x float> %79, %80
  store <2 x float> %81, ptr %58, align 4, !tbaa !137
  %82 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 10, i64 1, i32 0, i64 2
  %83 = load float, ptr %82, align 4, !tbaa !137
  %84 = fadd float %52, %83
  store float %84, ptr %82, align 4, !tbaa !137
  %85 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 12
  %86 = load i32, ptr %85, align 4, !tbaa !322
  %87 = add nsw i32 %86, 1
  store i32 %87, ptr %85, align 4, !tbaa !322
  br label %88

88:                                               ; preds = %11, %8
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6AJoint7PrepareEfi(ptr noundef nonnull align 8 dereferenceable(224) %0, float noundef %1, i32 noundef %2) unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !285
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = load ptr, ptr %6, align 8
  tail call void %7(ptr noundef nonnull align 8 dereferenceable(8) %5, ptr noundef nonnull %0)
  %8 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !510
  %10 = icmp eq ptr %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %3
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %9, i1 noundef zeroext false)
  br label %12

12:                                               ; preds = %11, %3
  %13 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !510
  %15 = icmp eq ptr %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %14, i1 noundef zeroext false)
  br label %17

17:                                               ; preds = %12, %16
  %18 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  %19 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %42, !prof !172

21:                                               ; preds = %17
  %22 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %42, label %24

24:                                               ; preds = %21
  %25 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %40, !prof !172

27:                                               ; preds = %24
  %28 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %38, !prof !172

33:                                               ; preds = %30
  %34 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %37 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %38

38:                                               ; preds = %36, %33, %30
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %39 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %40

40:                                               ; preds = %38, %27, %24
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %41 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %42

42:                                               ; preds = %17, %21, %40
  %43 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !253
  %45 = icmp eq ptr %44, null
  %46 = getelementptr inbounds %class.btCollisionObject, ptr %44, i64 0, i32 2
  %47 = load ptr, ptr %18, align 8
  %48 = icmp eq ptr %47, null
  %49 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %47, i64 0, i32 3
  %50 = select i1 %48, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %49
  %51 = select i1 %45, ptr %50, ptr %46
  %52 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2
  %53 = load float, ptr %52, align 8, !tbaa !137
  %54 = getelementptr inbounds [4 x float], ptr %51, i64 0, i64 1
  %55 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 0, i32 0, i64 1
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = getelementptr inbounds [4 x float], ptr %51, i64 0, i64 2
  %58 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 0, i32 0, i64 2
  %59 = load float, ptr %58, align 8, !tbaa !137
  %60 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 1
  %61 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 1, i32 0, i64 1
  %62 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 1, i32 0, i64 2
  %63 = load float, ptr %51, align 4, !tbaa !137
  %64 = load float, ptr %54, align 4, !tbaa !137
  %65 = load float, ptr %57, align 4, !tbaa !137
  %66 = load float, ptr %60, align 4, !tbaa !137
  %67 = load float, ptr %61, align 4, !tbaa !137
  %68 = insertelement <2 x float> poison, float %56, i64 0
  %69 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> zeroinitializer
  %70 = insertelement <2 x float> poison, float %64, i64 0
  %71 = insertelement <2 x float> %70, float %67, i64 1
  %72 = fmul <2 x float> %69, %71
  %73 = insertelement <2 x float> poison, float %63, i64 0
  %74 = insertelement <2 x float> %73, float %66, i64 1
  %75 = insertelement <2 x float> poison, float %53, i64 0
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer
  %77 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %74, <2 x float> %76, <2 x float> %72)
  %78 = load float, ptr %62, align 4, !tbaa !137
  %79 = insertelement <2 x float> poison, float %65, i64 0
  %80 = insertelement <2 x float> %79, float %78, i64 1
  %81 = insertelement <2 x float> poison, float %59, i64 0
  %82 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> zeroinitializer
  %83 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %80, <2 x float> %82, <2 x float> %77)
  %84 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 2
  %85 = load float, ptr %84, align 4, !tbaa !137
  %86 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 2, i32 0, i64 1
  %87 = load float, ptr %86, align 4, !tbaa !137
  %88 = fmul float %56, %87
  %89 = tail call float @llvm.fmuladd.f32(float %85, float %53, float %88)
  %90 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 2, i32 0, i64 2
  %91 = load float, ptr %90, align 4, !tbaa !137
  %92 = tail call float @llvm.fmuladd.f32(float %91, float %59, float %89)
  %93 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %92, i64 0
  %94 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1
  store <2 x float> %83, ptr %94, align 8, !tbaa.struct !162
  %95 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 2
  store <2 x float> %93, ptr %95, align 8, !tbaa.struct !164
  %96 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  %97 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %120, !prof !172

99:                                               ; preds = %42
  %100 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %120, label %102

102:                                              ; preds = %99
  %103 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %105, label %118, !prof !172

105:                                              ; preds = %102
  %106 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %118, label %108

108:                                              ; preds = %105
  %109 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %116, !prof !172

111:                                              ; preds = %108
  %112 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %116, label %114

114:                                              ; preds = %111
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %115 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %116

116:                                              ; preds = %114, %111, %108
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %117 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %118

118:                                              ; preds = %116, %105, %102
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %119 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %120

120:                                              ; preds = %42, %99, %118
  %121 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 2
  %122 = load ptr, ptr %121, align 8, !tbaa !253
  %123 = icmp eq ptr %122, null
  %124 = getelementptr inbounds %class.btCollisionObject, ptr %122, i64 0, i32 2
  %125 = load ptr, ptr %96, align 8
  %126 = icmp eq ptr %125, null
  %127 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %125, i64 0, i32 3
  %128 = select i1 %126, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %127
  %129 = select i1 %123, ptr %128, ptr %124
  %130 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 1
  %131 = load float, ptr %129, align 4, !tbaa !137
  %132 = load float, ptr %130, align 8, !tbaa !137
  %133 = getelementptr inbounds [4 x float], ptr %129, i64 0, i64 1
  %134 = load float, ptr %133, align 4, !tbaa !137
  %135 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 1, i32 0, i64 1
  %136 = load float, ptr %135, align 4, !tbaa !137
  %137 = fmul float %134, %136
  %138 = tail call float @llvm.fmuladd.f32(float %131, float %132, float %137)
  %139 = getelementptr inbounds [4 x float], ptr %129, i64 0, i64 2
  %140 = load float, ptr %139, align 4, !tbaa !137
  %141 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 2, i64 1, i32 0, i64 2
  %142 = load float, ptr %141, align 8, !tbaa !137
  %143 = tail call float @llvm.fmuladd.f32(float %140, float %142, float %138)
  %144 = getelementptr inbounds [3 x %class.btVector3], ptr %129, i64 0, i64 1
  %145 = getelementptr inbounds [3 x %class.btVector3], ptr %129, i64 0, i64 1, i32 0, i64 1
  %146 = getelementptr inbounds [3 x %class.btVector3], ptr %129, i64 0, i64 1, i32 0, i64 2
  %147 = getelementptr inbounds [3 x %class.btVector3], ptr %129, i64 0, i64 2
  %148 = getelementptr inbounds [3 x %class.btVector3], ptr %129, i64 0, i64 2, i32 0, i64 1
  %149 = getelementptr inbounds [3 x %class.btVector3], ptr %129, i64 0, i64 2, i32 0, i64 2
  %150 = insertelement <2 x float> undef, float %143, i64 0
  %151 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1, i64 1
  %152 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1, i64 1, i32 0, i64 2
  %153 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 1
  %154 = load float, ptr %144, align 4, !tbaa !137
  %155 = load float, ptr %145, align 4, !tbaa !137
  %156 = load float, ptr %146, align 4, !tbaa !137
  %157 = load float, ptr %147, align 4, !tbaa !137
  %158 = load float, ptr %148, align 4, !tbaa !137
  %159 = insertelement <2 x float> poison, float %136, i64 0
  %160 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> zeroinitializer
  %161 = insertelement <2 x float> poison, float %155, i64 0
  %162 = insertelement <2 x float> %161, float %158, i64 1
  %163 = fmul <2 x float> %160, %162
  %164 = insertelement <2 x float> poison, float %154, i64 0
  %165 = insertelement <2 x float> %164, float %157, i64 1
  %166 = insertelement <2 x float> poison, float %132, i64 0
  %167 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> zeroinitializer
  %168 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %165, <2 x float> %167, <2 x float> %163)
  %169 = load float, ptr %149, align 4, !tbaa !137
  %170 = insertelement <2 x float> poison, float %156, i64 0
  %171 = insertelement <2 x float> %170, float %169, i64 1
  %172 = insertelement <2 x float> poison, float %142, i64 0
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> zeroinitializer
  %174 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %171, <2 x float> %173, <2 x float> %168)
  %175 = shufflevector <2 x float> %150, <2 x float> %174, <2 x i32> <i32 0, i32 2>
  %176 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %174, <2 x i32> <i32 3, i32 1>
  store <2 x float> %175, ptr %151, align 8, !tbaa.struct !162
  store <2 x float> %176, ptr %152, align 8, !tbaa.struct !164
  %177 = load <2 x float>, ptr %153, align 4, !tbaa !137
  %178 = load float, ptr %94, align 8, !tbaa !137
  %179 = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %180 = insertelement <2 x float> %179, float %143, i64 1
  %181 = fneg <2 x float> %180
  %182 = fmul <2 x float> %177, %181
  %183 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %184 = insertelement <2 x float> %183, float %178, i64 1
  %185 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %174, <2 x float> %184, <2 x float> %182)
  %186 = extractelement <2 x float> %174, i64 0
  %187 = fneg float %186
  %188 = fmul float %178, %187
  %189 = extractelement <2 x float> %177, i64 0
  %190 = tail call float @llvm.fmuladd.f32(float %143, float %189, float %188)
  %191 = fmul <2 x float> %185, %185
  %192 = extractelement <2 x float> %191, i64 1
  %193 = extractelement <2 x float> %185, i64 0
  %194 = tail call float @llvm.fmuladd.f32(float %193, float %193, float %192)
  %195 = tail call float @llvm.fmuladd.f32(float %190, float %190, float %194)
  %196 = tail call float @llvm.sqrt.f32(float %195)
  %197 = fcmp ogt float %196, 0x3E80000000000000
  %198 = fdiv float 1.000000e+00, %196
  %199 = insertelement <2 x float> poison, float %198, i64 0
  %200 = shufflevector <2 x float> %199, <2 x float> poison, <2 x i32> zeroinitializer
  %201 = fmul <2 x float> %185, %200
  %202 = fmul float %190, %198
  %203 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %202, i64 0
  %204 = select i1 %197, <2 x float> %201, <2 x float> zeroinitializer
  %205 = select i1 %197, <2 x float> %203, <2 x float> zeroinitializer
  %206 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6
  store <2 x float> %204, ptr %206, align 4, !tbaa.struct !162
  %207 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 2
  store <2 x float> %205, ptr %207, align 4, !tbaa.struct !164
  %208 = fmul <2 x float> %174, %177
  %209 = extractelement <2 x float> %208, i64 0
  %210 = tail call float @llvm.fmuladd.f32(float %178, float %143, float %209)
  %211 = extractelement <2 x float> %174, i64 1
  %212 = extractelement <2 x float> %177, i64 1
  %213 = tail call float @llvm.fmuladd.f32(float %212, float %211, float %210)
  %214 = fcmp olt float %213, -1.000000e+00
  %215 = fcmp ogt float %213, 1.000000e+00
  %216 = select i1 %215, float 1.000000e+00, float %213
  %217 = select i1 %214, float -1.000000e+00, float %216
  %218 = tail call float @acosf(float noundef %217) #38
  %219 = fcmp ogt float %218, 0x3FC921FB60000000
  %220 = select i1 %219, float 0x3FC921FB60000000, float %218
  %221 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 1
  %222 = load float, ptr %207, align 4, !tbaa !137
  %223 = fmul float %220, %222
  %224 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 4
  %225 = load float, ptr %224, align 4, !tbaa !534
  %226 = fdiv float %225, %1
  %227 = load <2 x float>, ptr %206, align 4, !tbaa !137
  %228 = insertelement <2 x float> poison, float %220, i64 0
  %229 = shufflevector <2 x float> %228, <2 x float> poison, <2 x i32> zeroinitializer
  %230 = fmul <2 x float> %227, %229
  %231 = insertelement <2 x float> poison, float %226, i64 0
  %232 = shufflevector <2 x float> %231, <2 x float> poison, <2 x i32> zeroinitializer
  %233 = fmul <2 x float> %230, %232
  store <2 x float> %233, ptr %206, align 4, !tbaa !137
  %234 = fmul float %223, %226
  store float %234, ptr %207, align 4, !tbaa !137
  %235 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi acquire, align 8
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %237, label %242, !prof !172

237:                                              ; preds = %120
  %238 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %242, label %240

240:                                              ; preds = %237
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, i8 0, i64 48, i1 false)
  %241 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  br label %242

242:                                              ; preds = %120, %237, %240
  %243 = load ptr, ptr %8, align 8, !tbaa !510
  %244 = icmp eq ptr %243, null
  %245 = getelementptr inbounds %class.btRigidBody, ptr %243, i64 0, i32 1
  %246 = load ptr, ptr %18, align 8
  %247 = icmp eq ptr %246, null
  %248 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %246, i64 0, i32 7
  %249 = select i1 %247, ptr @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, ptr %248
  %250 = select i1 %244, ptr %249, ptr %245
  %251 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi acquire, align 8
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %253, label %258, !prof !172

253:                                              ; preds = %242
  %254 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %258, label %256

256:                                              ; preds = %253
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, i8 0, i64 48, i1 false)
  %257 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  br label %258

258:                                              ; preds = %242, %253, %256
  %259 = load ptr, ptr %13, align 8, !tbaa !510
  %260 = icmp eq ptr %259, null
  %261 = getelementptr inbounds %class.btRigidBody, ptr %259, i64 0, i32 1
  %262 = load ptr, ptr %96, align 8
  %263 = icmp eq ptr %262, null
  %264 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %262, i64 0, i32 7
  %265 = select i1 %263, ptr @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, ptr %264
  %266 = select i1 %260, ptr %265, ptr %261
  %267 = load float, ptr %250, align 4, !tbaa !137, !noalias !535
  %268 = load float, ptr %266, align 4, !tbaa !137, !noalias !535
  %269 = fadd float %267, %268
  %270 = getelementptr inbounds [4 x float], ptr %250, i64 0, i64 1
  %271 = getelementptr inbounds [4 x float], ptr %266, i64 0, i64 1
  %272 = getelementptr inbounds [3 x %class.btVector3], ptr %250, i64 0, i64 1
  %273 = getelementptr inbounds [3 x %class.btVector3], ptr %266, i64 0, i64 1
  %274 = getelementptr inbounds [3 x %class.btVector3], ptr %250, i64 0, i64 1, i32 0, i64 1
  %275 = load float, ptr %274, align 4, !tbaa !137, !noalias !535
  %276 = getelementptr inbounds [3 x %class.btVector3], ptr %266, i64 0, i64 1, i32 0, i64 1
  %277 = load float, ptr %276, align 4, !tbaa !137, !noalias !535
  %278 = fadd float %275, %277
  %279 = getelementptr inbounds [3 x %class.btVector3], ptr %250, i64 0, i64 1, i32 0, i64 2
  %280 = getelementptr inbounds [3 x %class.btVector3], ptr %266, i64 0, i64 1, i32 0, i64 2
  %281 = getelementptr inbounds [3 x %class.btVector3], ptr %250, i64 0, i64 2
  %282 = getelementptr inbounds [3 x %class.btVector3], ptr %266, i64 0, i64 2
  %283 = getelementptr inbounds [3 x %class.btVector3], ptr %250, i64 0, i64 2, i32 0, i64 1
  %284 = load float, ptr %283, align 4, !tbaa !137, !noalias !535
  %285 = getelementptr inbounds [3 x %class.btVector3], ptr %266, i64 0, i64 2, i32 0, i64 1
  %286 = load float, ptr %285, align 4, !tbaa !137, !noalias !535
  %287 = fadd float %284, %286
  %288 = getelementptr inbounds [3 x %class.btVector3], ptr %250, i64 0, i64 2, i32 0, i64 2
  %289 = getelementptr inbounds [3 x %class.btVector3], ptr %266, i64 0, i64 2, i32 0, i64 2
  %290 = fneg float %278
  %291 = load <2 x float>, ptr %270, align 4, !tbaa !137, !noalias !535
  %292 = load <2 x float>, ptr %271, align 4, !tbaa !137, !noalias !535
  %293 = fadd <2 x float> %291, %292
  %294 = load float, ptr %272, align 4, !tbaa !137, !noalias !535
  %295 = load float, ptr %273, align 4, !tbaa !137, !noalias !535
  %296 = load float, ptr %279, align 4, !tbaa !137, !noalias !535
  %297 = load float, ptr %280, align 4, !tbaa !137, !noalias !535
  %298 = insertelement <2 x float> poison, float %296, i64 0
  %299 = insertelement <2 x float> %298, float %294, i64 1
  %300 = insertelement <2 x float> poison, float %297, i64 0
  %301 = insertelement <2 x float> %300, float %295, i64 1
  %302 = fadd <2 x float> %299, %301
  %303 = load float, ptr %281, align 4, !tbaa !137, !noalias !535
  %304 = load float, ptr %282, align 4, !tbaa !137, !noalias !535
  %305 = load float, ptr %288, align 4, !tbaa !137, !noalias !535
  %306 = load float, ptr %289, align 4, !tbaa !137, !noalias !535
  %307 = insertelement <2 x float> poison, float %305, i64 0
  %308 = insertelement <2 x float> %307, float %303, i64 1
  %309 = insertelement <2 x float> poison, float %306, i64 0
  %310 = insertelement <2 x float> %309, float %304, i64 1
  %311 = fadd <2 x float> %308, %310
  %312 = fneg <2 x float> %302
  %313 = shufflevector <2 x float> %311, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %314 = insertelement <2 x float> %313, float %287, i64 0
  %315 = fmul <2 x float> %314, %312
  %316 = shufflevector <2 x float> %302, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %317 = insertelement <2 x float> %316, float %278, i64 0
  %318 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %317, <2 x float> %311, <2 x float> %315)
  %319 = extractelement <2 x float> %302, i64 1
  %320 = extractelement <2 x float> %293, i64 0
  %321 = shufflevector <2 x float> %318, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %322 = fmul <2 x float> %293, %321
  %323 = extractelement <2 x float> %322, i64 0
  %324 = extractelement <2 x float> %318, i64 0
  %325 = tail call float @llvm.fmuladd.f32(float %269, float %324, float %323)
  %326 = extractelement <2 x float> %293, i64 1
  %327 = fneg float %320
  %328 = shufflevector <2 x float> %293, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %329 = insertelement <2 x float> %328, float %269, i64 1
  %330 = fneg <2 x float> %329
  %331 = shufflevector <2 x float> %330, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %332 = insertelement <2 x float> %331, float %327, i64 0
  %333 = fmul <2 x float> %311, %332
  %334 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %329, <2 x float> %314, <2 x float> %333)
  %335 = fmul <2 x float> %317, %330
  %336 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %293, <2 x float> %302, <2 x float> %335)
  %337 = fmul float %319, %327
  %338 = tail call float @llvm.fmuladd.f32(float %269, float %278, float %337)
  %339 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8
  %340 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 1
  %341 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 2
  %342 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 3
  store float 0.000000e+00, ptr %342, align 8, !tbaa.struct !318
  %343 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1
  %344 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 2
  %345 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 3
  store float 0.000000e+00, ptr %345, align 8, !tbaa.struct !318
  %346 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2
  %347 = shufflevector <2 x float> %311, <2 x float> %330, <2 x i32> <i32 1, i32 3>
  %348 = insertelement <2 x float> poison, float %290, i64 0
  %349 = insertelement <2 x float> %348, float %287, i64 1
  %350 = fmul <2 x float> %347, %349
  %351 = shufflevector <2 x float> %302, <2 x float> %293, <2 x i32> <i32 1, i32 2>
  %352 = insertelement <2 x float> %311, float %287, i64 0
  %353 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %351, <2 x float> %352, <2 x float> %350)
  %354 = extractelement <2 x float> %353, i64 0
  %355 = tail call float @llvm.fmuladd.f32(float %326, float %354, float %325)
  %356 = fdiv float 1.000000e+00, %355
  %357 = insertelement <2 x float> poison, float %356, i64 0
  %358 = shufflevector <2 x float> %357, <2 x float> poison, <2 x i32> zeroinitializer
  %359 = fmul <2 x float> %318, %358
  %360 = fmul <2 x float> %334, %358
  %361 = fmul <2 x float> %336, %358
  %362 = fmul <2 x float> %353, %358
  %363 = fmul float %338, %356
  %364 = extractelement <2 x float> %359, i64 0
  store float %364, ptr %339, align 4, !tbaa.struct !162
  %365 = extractelement <2 x float> %360, i64 0
  store float %365, ptr %340, align 8, !tbaa.struct !293
  %366 = extractelement <2 x float> %361, i64 0
  store float %366, ptr %341, align 4, !tbaa.struct !164
  %367 = shufflevector <2 x float> %359, <2 x float> %360, <2 x i32> <i32 1, i32 3>
  store <2 x float> %367, ptr %343, align 4
  %368 = extractelement <2 x float> %361, i64 1
  store float %368, ptr %344, align 4, !tbaa.struct !164
  store <2 x float> %362, ptr %346, align 4
  %369 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 2
  store float %363, ptr %369, align 4, !tbaa.struct !164
  %370 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 3
  store float 0.000000e+00, ptr %370, align 8, !tbaa.struct !318
  %371 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 5
  %372 = load float, ptr %371, align 8, !tbaa !269
  %373 = fcmp ogt float %372, 0.000000e+00
  %374 = load float, ptr %206, align 4, !tbaa !137
  br i1 %373, label %380, label %375

375:                                              ; preds = %258
  %376 = load float, ptr %221, align 8, !tbaa !137
  %377 = load float, ptr %207, align 4, !tbaa !137
  %378 = insertelement <2 x float> poison, float %374, i64 0
  %379 = insertelement <2 x float> %378, float %376, i64 1
  br label %410

380:                                              ; preds = %258
  %381 = fmul float %372, %374
  %382 = load float, ptr %221, align 8, !tbaa !137
  %383 = fmul float %372, %382
  %384 = load float, ptr %207, align 4, !tbaa !137
  %385 = fmul float %372, %384
  %386 = insertelement <2 x float> poison, float %383, i64 0
  %387 = shufflevector <2 x float> %386, <2 x float> poison, <2 x i32> zeroinitializer
  %388 = fmul <2 x float> %387, %360
  %389 = insertelement <2 x float> poison, float %381, i64 0
  %390 = shufflevector <2 x float> %389, <2 x float> poison, <2 x i32> zeroinitializer
  %391 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %359, <2 x float> %390, <2 x float> %388)
  %392 = insertelement <2 x float> poison, float %385, i64 0
  %393 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> zeroinitializer
  %394 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %361, <2 x float> %393, <2 x float> %391)
  %395 = extractelement <2 x float> %362, i64 1
  %396 = fmul float %383, %395
  %397 = extractelement <2 x float> %362, i64 0
  %398 = tail call float @llvm.fmuladd.f32(float %397, float %381, float %396)
  %399 = tail call float @llvm.fmuladd.f32(float %363, float %385, float %398)
  %400 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %399, i64 0
  %401 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7
  store <2 x float> %394, ptr %401, align 4, !tbaa.struct !162
  %402 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7, i32 0, i64 2
  store <2 x float> %400, ptr %402, align 4, !tbaa.struct !164
  %403 = fsub float 1.000000e+00, %372
  %404 = insertelement <2 x float> poison, float %403, i64 0
  %405 = shufflevector <2 x float> %404, <2 x float> poison, <2 x i32> zeroinitializer
  %406 = insertelement <2 x float> poison, float %374, i64 0
  %407 = insertelement <2 x float> %406, float %382, i64 1
  %408 = fmul <2 x float> %405, %407
  %409 = fmul float %403, %384
  br label %410

410:                                              ; preds = %375, %380
  %411 = phi float [ %377, %375 ], [ %409, %380 ]
  %412 = phi <2 x float> [ %379, %375 ], [ %408, %380 ]
  %413 = sitofp i32 %2 to float
  %414 = fdiv float 1.000000e+00, %413
  %415 = insertelement <2 x float> poison, float %414, i64 0
  %416 = shufflevector <2 x float> %415, <2 x float> poison, <2 x i32> zeroinitializer
  %417 = fmul <2 x float> %416, %412
  store <2 x float> %417, ptr %206, align 4, !tbaa !137
  %418 = fmul float %414, %411
  store float %418, ptr %207, align 4, !tbaa !137
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6AJoint5SolveEff(ptr noundef nonnull align 8 dereferenceable(224) %0, float %1, float noundef %2) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.btSoftBody::Impulse", align 8
  %5 = alloca %"struct.btSoftBody::Impulse", align 8
  %6 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !510
  %9 = icmp eq ptr %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.btRigidBody, ptr %8, i64 0, i32 3
  %12 = load <2 x float>, ptr %11, align 4, !tbaa.struct !162
  %13 = getelementptr inbounds %class.btRigidBody, ptr %8, i64 0, i32 3, i32 0, i64 2
  %14 = load <2 x float>, ptr %13, align 4, !tbaa.struct !164
  br label %23

15:                                               ; preds = %3
  %16 = load ptr, ptr %6, align 8, !tbaa !272
  %17 = icmp eq ptr %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %16, i64 0, i32 14
  %20 = load <2 x float>, ptr %19, align 8, !tbaa.struct !162
  %21 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %16, i64 0, i32 14, i32 0, i64 2
  %22 = load <2 x float>, ptr %21, align 8, !tbaa.struct !164
  br label %23

23:                                               ; preds = %10, %15, %18
  %24 = phi <2 x float> [ %20, %18 ], [ %12, %10 ], [ zeroinitializer, %15 ]
  %25 = phi <2 x float> [ %22, %18 ], [ %14, %10 ], [ zeroinitializer, %15 ]
  %26 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  %27 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !510
  %29 = icmp eq ptr %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %class.btRigidBody, ptr %28, i64 0, i32 3
  %32 = load <2 x float>, ptr %31, align 4, !tbaa.struct !162
  %33 = getelementptr inbounds %class.btRigidBody, ptr %28, i64 0, i32 3, i32 0, i64 2
  %34 = load <2 x float>, ptr %33, align 4, !tbaa.struct !164
  br label %43

35:                                               ; preds = %23
  %36 = load ptr, ptr %26, align 8, !tbaa !272
  %37 = icmp eq ptr %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %36, i64 0, i32 14
  %40 = load <2 x float>, ptr %39, align 8, !tbaa.struct !162
  %41 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %36, i64 0, i32 14, i32 0, i64 2
  %42 = load <2 x float>, ptr %41, align 8, !tbaa.struct !164
  br label %43

43:                                               ; preds = %30, %35, %38
  %44 = phi <2 x float> [ %40, %38 ], [ %32, %30 ], [ zeroinitializer, %35 ]
  %45 = phi <2 x float> [ %42, %38 ], [ %34, %30 ], [ zeroinitializer, %35 ]
  %46 = fsub <2 x float> %24, %44
  %47 = extractelement <2 x float> %46, i64 0
  %48 = fsub <2 x float> %24, %44
  %49 = extractelement <2 x float> %48, i64 1
  %50 = fsub <2 x float> %25, %45
  %51 = extractelement <2 x float> %50, i64 0
  %52 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1
  %53 = load float, ptr %52, align 8, !tbaa !137
  %54 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 1
  %55 = load float, ptr %54, align 4, !tbaa !137
  %56 = fmul float %49, %55
  %57 = tail call float @llvm.fmuladd.f32(float %47, float %53, float %56)
  %58 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 1, i64 0, i32 0, i64 2
  %59 = load float, ptr %58, align 8, !tbaa !137
  %60 = tail call float @llvm.fmuladd.f32(float %51, float %59, float %57)
  %61 = getelementptr inbounds %"struct.btSoftBody::AJoint", ptr %0, i64 0, i32 2
  %62 = load ptr, ptr %61, align 8, !tbaa !285
  %63 = load ptr, ptr %62, align 8, !tbaa !5
  %64 = getelementptr inbounds ptr, ptr %63, i64 1
  %65 = load ptr, ptr %64, align 8
  %66 = tail call noundef float %65(ptr noundef nonnull align 8 dereferenceable(8) %62, ptr noundef nonnull %0, float noundef %60)
  %67 = load float, ptr %52, align 8, !tbaa !137
  %68 = fmul float %66, %67
  %69 = load float, ptr %54, align 4, !tbaa !137
  %70 = fmul float %66, %69
  %71 = load float, ptr %58, align 8, !tbaa !137
  %72 = fmul float %66, %71
  %73 = fsub float %47, %68
  %74 = fsub float %49, %70
  %75 = fsub float %51, %72
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %4) #38
  %76 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %4, i64 0, i32 2
  %77 = getelementptr inbounds i8, ptr %4, i64 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %77, i8 0, i64 16, i1 false)
  store i8 1, ptr %76, align 8
  %78 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8
  %79 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6
  %80 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 3
  %81 = load float, ptr %80, align 8, !tbaa !137
  %82 = fmul float %73, %81
  %83 = fmul float %74, %81
  %84 = fmul float %75, %81
  %85 = load float, ptr %79, align 4, !tbaa !137
  %86 = fadd float %85, %82
  %87 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 1
  %88 = load float, ptr %87, align 8, !tbaa !137
  %89 = fadd float %83, %88
  %90 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 2
  %91 = load float, ptr %90, align 4, !tbaa !137
  %92 = fadd float %84, %91
  %93 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 1
  %94 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 2
  %95 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1
  %96 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 1
  %97 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 2
  %98 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2
  %99 = load float, ptr %98, align 4, !tbaa !137
  %100 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 1
  %101 = load float, ptr %100, align 8, !tbaa !137
  %102 = fmul float %89, %101
  %103 = tail call float @llvm.fmuladd.f32(float %99, float %86, float %102)
  %104 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 2
  %105 = load float, ptr %104, align 4, !tbaa !137
  %106 = tail call float @llvm.fmuladd.f32(float %105, float %92, float %103)
  %107 = load <4 x float>, ptr %78, align 4
  %108 = shufflevector <4 x float> %107, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %109 = load <4 x float>, ptr %93, align 8
  %110 = shufflevector <4 x float> %109, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %111 = load <4 x float>, ptr %94, align 4
  %112 = shufflevector <4 x float> %111, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %113 = load float, ptr %95, align 4, !tbaa !137
  %114 = load float, ptr %96, align 8, !tbaa !137
  %115 = insertelement <2 x float> poison, float %89, i64 0
  %116 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> zeroinitializer
  %117 = insertelement <2 x float> %110, float %114, i64 1
  %118 = fmul <2 x float> %116, %117
  %119 = insertelement <2 x float> %108, float %113, i64 1
  %120 = insertelement <2 x float> poison, float %86, i64 0
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <2 x i32> zeroinitializer
  %122 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %119, <2 x float> %121, <2 x float> %118)
  %123 = load float, ptr %97, align 4, !tbaa !137
  %124 = insertelement <2 x float> %112, float %123, i64 1
  %125 = insertelement <2 x float> poison, float %92, i64 0
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> zeroinitializer
  %127 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %124, <2 x float> %126, <2 x float> %122)
  %128 = insertelement <2 x float> poison, float %2, i64 0
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer
  %130 = fmul <2 x float> %127, %129
  %131 = fmul float %106, %2
  %132 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %131, i64 0
  store <2 x float> %130, ptr %4, align 8, !tbaa.struct !162
  %133 = getelementptr inbounds i8, ptr %4, i64 8
  store <2 x float> %132, ptr %133, align 8, !tbaa.struct !164
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %5) #38
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(36) %5, ptr noundef nonnull align 8 dereferenceable(36) %4, i64 36, i1 false), !tbaa.struct !530
  %134 = load <2 x float>, ptr %5, align 8, !tbaa !137, !alias.scope !540
  %135 = fneg <2 x float> %134
  %136 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %137 = load float, ptr %136, align 8, !tbaa !137, !alias.scope !540
  %138 = fneg float %137
  %139 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %138, i64 0
  store <2 x float> %135, ptr %5, align 8, !tbaa.struct !162, !alias.scope !540
  store <2 x float> %139, ptr %136, align 8, !tbaa.struct !164, !alias.scope !540
  %140 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %5, i64 0, i32 1
  %141 = load <2 x float>, ptr %140, align 8, !tbaa !137, !alias.scope !540
  %142 = fneg <2 x float> %141
  %143 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %5, i64 0, i32 1, i32 0, i64 2
  %144 = load float, ptr %143, align 8, !tbaa !137, !alias.scope !540
  %145 = fneg float %144
  %146 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %145, i64 0
  store <2 x float> %142, ptr %140, align 8, !tbaa.struct !162, !alias.scope !540
  store <2 x float> %146, ptr %143, align 8, !tbaa.struct !164, !alias.scope !540
  %147 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %5, i64 0, i32 2
  %148 = load i8, ptr %147, align 8
  %149 = and i8 %148, 1
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %153, label %151

151:                                              ; preds = %43
  call void @_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %6, ptr noundef nonnull align 4 dereferenceable(16) %5)
  %152 = load i8, ptr %147, align 8
  br label %153

153:                                              ; preds = %151, %43
  %154 = phi i8 [ %152, %151 ], [ %148, %43 ]
  %155 = and i8 %154, 2
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %158, label %157

157:                                              ; preds = %153
  call void @_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %6, ptr noundef nonnull align 4 dereferenceable(16) %140)
  br label %158

158:                                              ; preds = %153, %157
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %5) #38
  call void @_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %26, ptr noundef nonnull align 4 dereferenceable(16) %4)
  %159 = load i8, ptr %76, align 8
  %160 = and i8 %159, 2
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %158
  %163 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %4, i64 0, i32 1
  call void @_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %26, ptr noundef nonnull align 4 dereferenceable(16) %163)
  br label %164

164:                                              ; preds = %158, %162
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %4) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6AJoint9TerminateEf(ptr noundef nonnull align 8 dereferenceable(224) %0, float %1) unnamed_addr #0 align 2 {
  %3 = alloca %class.btVector3, align 8
  %4 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 5
  %5 = load float, ptr %4, align 8, !tbaa !269
  %6 = fcmp ogt float %5, 0.000000e+00
  br i1 %6, label %7, label %18

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #38
  %9 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7
  %10 = load <2 x float>, ptr %9, align 4, !tbaa !137
  %11 = fneg <2 x float> %10
  %12 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7, i32 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = fneg float %13
  %15 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %14, i64 0
  store <2 x float> %11, ptr %3, align 8
  %16 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %3, i64 0, i32 1
  store <2 x float> %15, ptr %16, align 8
  call void @_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 4 dereferenceable(16) %3)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #38
  %17 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  call void @_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %17, ptr noundef nonnull align 4 dereferenceable(16) %9)
  br label %18

18:                                               ; preds = %7, %2
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 4 dereferenceable(16) %1) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !510
  %5 = icmp eq ptr %4, null
  br i1 %5, label %60, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1
  %8 = load float, ptr %1, align 4, !tbaa !137
  %9 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 0, i32 0, i64 1
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %11 = load float, ptr %10, align 4, !tbaa !137
  %12 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 0, i32 0, i64 2
  %13 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %14 = load float, ptr %13, align 4, !tbaa !137
  %15 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 1
  %16 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 1, i32 0, i64 1
  %17 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 1, i32 0, i64 2
  %18 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 2
  %19 = load float, ptr %18, align 8, !tbaa !137
  %20 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 2, i32 0, i64 1
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = fmul float %11, %21
  %23 = tail call float @llvm.fmuladd.f32(float %19, float %8, float %22)
  %24 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 2, i32 0, i64 2
  %25 = load float, ptr %24, align 8, !tbaa !137
  %26 = tail call float @llvm.fmuladd.f32(float %25, float %14, float %23)
  %27 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 5
  %28 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 5, i32 0, i64 2
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = fmul float %26, %29
  %31 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 3
  %32 = load float, ptr %7, align 8, !tbaa !137
  %33 = load float, ptr %9, align 4, !tbaa !137
  %34 = load float, ptr %12, align 8, !tbaa !137
  %35 = load float, ptr %15, align 8, !tbaa !137
  %36 = load float, ptr %16, align 4, !tbaa !137
  %37 = insertelement <2 x float> poison, float %11, i64 0
  %38 = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> zeroinitializer
  %39 = insertelement <2 x float> poison, float %33, i64 0
  %40 = insertelement <2 x float> %39, float %36, i64 1
  %41 = fmul <2 x float> %38, %40
  %42 = insertelement <2 x float> poison, float %32, i64 0
  %43 = insertelement <2 x float> %42, float %35, i64 1
  %44 = insertelement <2 x float> poison, float %8, i64 0
  %45 = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> zeroinitializer
  %46 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %43, <2 x float> %45, <2 x float> %41)
  %47 = load float, ptr %17, align 8, !tbaa !137
  %48 = insertelement <2 x float> poison, float %34, i64 0
  %49 = insertelement <2 x float> %48, float %47, i64 1
  %50 = insertelement <2 x float> poison, float %14, i64 0
  %51 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer
  %52 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %49, <2 x float> %51, <2 x float> %46)
  %53 = load <2 x float>, ptr %27, align 4, !tbaa !137
  %54 = fmul <2 x float> %52, %53
  %55 = load <2 x float>, ptr %31, align 8, !tbaa !137
  %56 = fadd <2 x float> %54, %55
  store <2 x float> %56, ptr %31, align 8, !tbaa !137
  %57 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 3, i32 0, i64 2
  %58 = load float, ptr %57, align 8, !tbaa !137
  %59 = fadd float %30, %58
  store float %59, ptr %57, align 8, !tbaa !137
  br label %60

60:                                               ; preds = %6, %2
  %61 = load ptr, ptr %0, align 8, !tbaa !272
  %62 = icmp eq ptr %61, null
  br i1 %62, label %114, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7
  %65 = load float, ptr %1, align 4, !tbaa !137
  %66 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %67 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %68 = load float, ptr %67, align 4, !tbaa !137
  %69 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %70 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %71 = load float, ptr %70, align 4, !tbaa !137
  %72 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 1
  %73 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %74 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %75 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !137
  %77 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %78 = load float, ptr %77, align 4, !tbaa !137
  %79 = fmul float %68, %78
  %80 = tail call float @llvm.fmuladd.f32(float %76, float %65, float %79)
  %81 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %82 = load float, ptr %81, align 4, !tbaa !137
  %83 = tail call float @llvm.fmuladd.f32(float %82, float %71, float %80)
  %84 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 10, i64 1
  %85 = load float, ptr %64, align 4, !tbaa !137
  %86 = load float, ptr %66, align 4, !tbaa !137
  %87 = load float, ptr %69, align 4, !tbaa !137
  %88 = load float, ptr %72, align 4, !tbaa !137
  %89 = load float, ptr %73, align 4, !tbaa !137
  %90 = insertelement <2 x float> poison, float %68, i64 0
  %91 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> zeroinitializer
  %92 = insertelement <2 x float> poison, float %86, i64 0
  %93 = insertelement <2 x float> %92, float %89, i64 1
  %94 = fmul <2 x float> %91, %93
  %95 = insertelement <2 x float> poison, float %85, i64 0
  %96 = insertelement <2 x float> %95, float %88, i64 1
  %97 = insertelement <2 x float> poison, float %65, i64 0
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> zeroinitializer
  %99 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %96, <2 x float> %98, <2 x float> %94)
  %100 = load float, ptr %74, align 4, !tbaa !137
  %101 = insertelement <2 x float> poison, float %87, i64 0
  %102 = insertelement <2 x float> %101, float %100, i64 1
  %103 = insertelement <2 x float> poison, float %71, i64 0
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> zeroinitializer
  %105 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %102, <2 x float> %104, <2 x float> %99)
  %106 = load <2 x float>, ptr %84, align 4, !tbaa !137
  %107 = fadd <2 x float> %105, %106
  store <2 x float> %107, ptr %84, align 4, !tbaa !137
  %108 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 10, i64 1, i32 0, i64 2
  %109 = load float, ptr %108, align 4, !tbaa !137
  %110 = fadd float %83, %109
  store float %110, ptr %108, align 4, !tbaa !137
  %111 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 12
  %112 = load i32, ptr %111, align 4, !tbaa !322
  %113 = add nsw i32 %112, 1
  store i32 %113, ptr %111, align 4, !tbaa !322
  br label %114

114:                                              ; preds = %63, %60
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6CJoint7PrepareEfi(ptr nocapture noundef nonnull align 8 dereferenceable(244) %0, float noundef %1, i32 noundef %2) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !510
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %5, i1 noundef zeroext false)
  br label %8

8:                                                ; preds = %7, %3
  %9 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !510
  %11 = icmp eq ptr %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %10, i1 noundef zeroext false)
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !543
  %16 = icmp eq i32 %15, 0
  %17 = add nsw i32 %15, 1
  store i32 %17, ptr %14, align 8, !tbaa !543
  %18 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 2
  %19 = load i32, ptr %18, align 4, !tbaa !545
  %20 = icmp sge i32 %15, %19
  %21 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 9
  %22 = zext i1 %20 to i8
  store i8 %22, ptr %21, align 4, !tbaa !483
  %23 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6
  br i1 %16, label %24, label %106

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 4
  %26 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 1
  %27 = load <4 x float>, ptr %23, align 4
  %28 = shufflevector <4 x float> %27, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %29 = load float, ptr %25, align 4, !tbaa !137
  %30 = load float, ptr %26, align 8, !tbaa !137
  %31 = insertelement <2 x float> %28, float %29, i64 1
  %32 = insertelement <2 x float> poison, float %29, i64 0
  %33 = insertelement <2 x float> %32, float %30, i64 1
  %34 = fmul <2 x float> %31, %33
  %35 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6, i32 0, i64 2
  %36 = load float, ptr %35, align 4, !tbaa !137
  %37 = fmul float %29, %36
  %38 = fdiv float 1.000000e+00, %1
  %39 = insertelement <2 x float> poison, float %38, i64 0
  %40 = shufflevector <2 x float> %39, <2 x float> poison, <2 x i32> zeroinitializer
  %41 = fmul <2 x float> %40, %34
  %42 = fmul float %38, %37
  %43 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %42, i64 0
  store <2 x float> %43, ptr %35, align 4, !tbaa.struct !164
  %44 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 5
  %45 = load float, ptr %44, align 8, !tbaa !269
  %46 = fcmp ogt float %45, 0.000000e+00
  br i1 %46, label %47, label %97

47:                                               ; preds = %24
  %48 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8
  %49 = extractelement <2 x float> %41, i64 0
  %50 = fmul float %45, %49
  %51 = extractelement <2 x float> %41, i64 1
  %52 = fmul float %45, %51
  %53 = fmul float %45, %42
  %54 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 1
  %55 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 2
  %56 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1
  %57 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 1
  %58 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 2
  %59 = load <4 x float>, ptr %48, align 4
  %60 = shufflevector <4 x float> %59, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %61 = load <4 x float>, ptr %54, align 8
  %62 = shufflevector <4 x float> %61, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %63 = load <4 x float>, ptr %55, align 4
  %64 = shufflevector <4 x float> %63, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %65 = load float, ptr %56, align 4, !tbaa !137
  %66 = load float, ptr %57, align 8, !tbaa !137
  %67 = insertelement <2 x float> poison, float %52, i64 0
  %68 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> zeroinitializer
  %69 = insertelement <2 x float> %62, float %66, i64 1
  %70 = fmul <2 x float> %68, %69
  %71 = insertelement <2 x float> %60, float %65, i64 1
  %72 = insertelement <2 x float> poison, float %50, i64 0
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer
  %74 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %71, <2 x float> %73, <2 x float> %70)
  %75 = load float, ptr %58, align 4, !tbaa !137
  %76 = insertelement <2 x float> %64, float %75, i64 1
  %77 = insertelement <2 x float> poison, float %53, i64 0
  %78 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> zeroinitializer
  %79 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %76, <2 x float> %78, <2 x float> %74)
  %80 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2
  %81 = load float, ptr %80, align 4, !tbaa !137
  %82 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 1
  %83 = load float, ptr %82, align 8, !tbaa !137
  %84 = fmul float %52, %83
  %85 = tail call float @llvm.fmuladd.f32(float %81, float %50, float %84)
  %86 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 2
  %87 = load float, ptr %86, align 4, !tbaa !137
  %88 = tail call float @llvm.fmuladd.f32(float %87, float %53, float %85)
  %89 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %88, i64 0
  %90 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7
  store <2 x float> %79, ptr %90, align 4, !tbaa.struct !162
  %91 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7, i32 0, i64 2
  store <2 x float> %89, ptr %91, align 4, !tbaa.struct !164
  %92 = fsub float 1.000000e+00, %45
  %93 = insertelement <2 x float> poison, float %92, i64 0
  %94 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> zeroinitializer
  %95 = fmul <2 x float> %94, %41
  %96 = fmul float %92, %42
  br label %97

97:                                               ; preds = %47, %24
  %98 = phi float [ %96, %47 ], [ %42, %24 ]
  %99 = phi <2 x float> [ %95, %47 ], [ %41, %24 ]
  %100 = sitofp i32 %2 to float
  %101 = fdiv float 1.000000e+00, %100
  %102 = insertelement <2 x float> poison, float %101, i64 0
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> zeroinitializer
  %104 = fmul <2 x float> %103, %99
  store <2 x float> %104, ptr %23, align 4, !tbaa !137
  %105 = fmul float %101, %98
  store float %105, ptr %35, align 4, !tbaa !137
  br label %107

106:                                              ; preds = %13
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %23, i8 0, i64 32, i1 false)
  br label %107

107:                                              ; preds = %106, %97
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6CJoint5SolveEff(ptr noundef nonnull align 8 dereferenceable(244) %0, float %1, float noundef %2) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.btSoftBody::Impulse", align 8
  %5 = alloca %"struct.btSoftBody::Impulse", align 8
  %6 = alloca %"struct.btSoftBody::Impulse", align 8
  %7 = alloca %"struct.btSoftBody::Impulse", align 8
  %8 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3
  %10 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !510
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = load ptr, ptr %8, align 8, !tbaa !272
  %15 = icmp eq ptr %14, null
  br i1 %15, label %66, label %41

16:                                               ; preds = %3
  %17 = getelementptr inbounds %class.btRigidBody, ptr %11, i64 0, i32 2
  %18 = load <2 x float>, ptr %17, align 4, !tbaa.struct !162
  %19 = getelementptr inbounds %class.btRigidBody, ptr %11, i64 0, i32 2, i32 0, i64 2
  %20 = load <2 x float>, ptr %19, align 4, !tbaa.struct !164
  %21 = getelementptr inbounds %class.btRigidBody, ptr %11, i64 0, i32 3
  %22 = getelementptr inbounds %class.btRigidBody, ptr %11, i64 0, i32 3, i32 0, i64 1
  %23 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3, i64 0, i32 0, i64 1
  %24 = load float, ptr %21, align 4, !tbaa !137
  %25 = load <2 x float>, ptr %22, align 4, !tbaa !137
  %26 = load <2 x float>, ptr %23, align 4, !tbaa !137
  %27 = load float, ptr %9, align 8, !tbaa !137
  %28 = insertelement <2 x float> %25, float %24, i64 0
  %29 = shufflevector <2 x float> %28, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %30 = fneg <2 x float> %29
  %31 = fmul <2 x float> %26, %30
  %32 = shufflevector <2 x float> %26, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %33 = insertelement <2 x float> %32, float %27, i64 1
  %34 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %25, <2 x float> %33, <2 x float> %31)
  %35 = extractelement <2 x float> %25, i64 0
  %36 = fneg float %35
  %37 = fmul float %27, %36
  %38 = extractelement <2 x float> %26, i64 0
  %39 = tail call float @llvm.fmuladd.f32(float %24, float %38, float %37)
  %40 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %39, i64 0
  br label %66

41:                                               ; preds = %13
  %42 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %14, i64 0, i32 13, i32 0, i64 2
  %43 = load <2 x float>, ptr %42, align 8, !tbaa.struct !164
  %44 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %14, i64 0, i32 13
  %45 = load <2 x float>, ptr %44, align 8, !tbaa.struct !162
  %46 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %14, i64 0, i32 14
  %47 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %14, i64 0, i32 14, i32 0, i64 1
  %48 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3, i64 0, i32 0, i64 1
  %49 = load float, ptr %46, align 4, !tbaa !137
  %50 = load <2 x float>, ptr %47, align 4, !tbaa !137
  %51 = load <2 x float>, ptr %48, align 4, !tbaa !137
  %52 = load float, ptr %9, align 8, !tbaa !137
  %53 = insertelement <2 x float> %50, float %49, i64 0
  %54 = shufflevector <2 x float> %53, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %55 = fneg <2 x float> %54
  %56 = fmul <2 x float> %51, %55
  %57 = shufflevector <2 x float> %51, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %58 = insertelement <2 x float> %57, float %52, i64 1
  %59 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %50, <2 x float> %58, <2 x float> %56)
  %60 = extractelement <2 x float> %50, i64 0
  %61 = fneg float %60
  %62 = fmul float %52, %61
  %63 = extractelement <2 x float> %51, i64 0
  %64 = tail call float @llvm.fmuladd.f32(float %49, float %63, float %62)
  %65 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %64, i64 0
  br label %66

66:                                               ; preds = %13, %16, %41
  %67 = phi <2 x float> [ %43, %41 ], [ %20, %16 ], [ zeroinitializer, %13 ]
  %68 = phi <2 x float> [ %45, %41 ], [ %18, %16 ], [ zeroinitializer, %13 ]
  %69 = phi <2 x float> [ %59, %41 ], [ %34, %16 ], [ zeroinitializer, %13 ]
  %70 = phi <2 x float> [ %65, %41 ], [ %40, %16 ], [ zeroinitializer, %13 ]
  %71 = fadd <2 x float> %68, %69
  %72 = fadd <2 x float> %67, %70
  %73 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  %74 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3, i64 1
  %75 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !510
  %77 = icmp eq ptr %76, null
  br i1 %77, label %78, label %81

78:                                               ; preds = %66
  %79 = load ptr, ptr %73, align 8, !tbaa !272
  %80 = icmp eq ptr %79, null
  br i1 %80, label %131, label %106

81:                                               ; preds = %66
  %82 = getelementptr inbounds %class.btRigidBody, ptr %76, i64 0, i32 2
  %83 = load <2 x float>, ptr %82, align 4, !tbaa.struct !162
  %84 = getelementptr inbounds %class.btRigidBody, ptr %76, i64 0, i32 2, i32 0, i64 2
  %85 = load <2 x float>, ptr %84, align 4, !tbaa.struct !164
  %86 = getelementptr inbounds %class.btRigidBody, ptr %76, i64 0, i32 3
  %87 = getelementptr inbounds %class.btRigidBody, ptr %76, i64 0, i32 3, i32 0, i64 1
  %88 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3, i64 1, i32 0, i64 1
  %89 = load float, ptr %86, align 4, !tbaa !137
  %90 = load <2 x float>, ptr %87, align 4, !tbaa !137
  %91 = load <2 x float>, ptr %88, align 4, !tbaa !137
  %92 = load float, ptr %74, align 8, !tbaa !137
  %93 = insertelement <2 x float> %90, float %89, i64 0
  %94 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %95 = fneg <2 x float> %94
  %96 = fmul <2 x float> %91, %95
  %97 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %98 = insertelement <2 x float> %97, float %92, i64 1
  %99 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %90, <2 x float> %98, <2 x float> %96)
  %100 = extractelement <2 x float> %90, i64 0
  %101 = fneg float %100
  %102 = fmul float %92, %101
  %103 = extractelement <2 x float> %91, i64 0
  %104 = tail call float @llvm.fmuladd.f32(float %89, float %103, float %102)
  %105 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %104, i64 0
  br label %131

106:                                              ; preds = %78
  %107 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %79, i64 0, i32 13, i32 0, i64 2
  %108 = load <2 x float>, ptr %107, align 8, !tbaa.struct !164
  %109 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %79, i64 0, i32 13
  %110 = load <2 x float>, ptr %109, align 8, !tbaa.struct !162
  %111 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %79, i64 0, i32 14
  %112 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %79, i64 0, i32 14, i32 0, i64 1
  %113 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3, i64 1, i32 0, i64 1
  %114 = load float, ptr %111, align 4, !tbaa !137
  %115 = load <2 x float>, ptr %112, align 4, !tbaa !137
  %116 = load <2 x float>, ptr %113, align 4, !tbaa !137
  %117 = load float, ptr %74, align 8, !tbaa !137
  %118 = insertelement <2 x float> %115, float %114, i64 0
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %120 = fneg <2 x float> %119
  %121 = fmul <2 x float> %116, %120
  %122 = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %123 = insertelement <2 x float> %122, float %117, i64 1
  %124 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %115, <2 x float> %123, <2 x float> %121)
  %125 = extractelement <2 x float> %115, i64 0
  %126 = fneg float %125
  %127 = fmul float %117, %126
  %128 = extractelement <2 x float> %116, i64 0
  %129 = tail call float @llvm.fmuladd.f32(float %114, float %128, float %127)
  %130 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %129, i64 0
  br label %131

131:                                              ; preds = %78, %81, %106
  %132 = phi <2 x float> [ %108, %106 ], [ %85, %81 ], [ zeroinitializer, %78 ]
  %133 = phi <2 x float> [ %110, %106 ], [ %83, %81 ], [ zeroinitializer, %78 ]
  %134 = phi <2 x float> [ %124, %106 ], [ %99, %81 ], [ zeroinitializer, %78 ]
  %135 = phi <2 x float> [ %130, %106 ], [ %105, %81 ], [ zeroinitializer, %78 ]
  %136 = fadd <2 x float> %132, %135
  %137 = fsub <2 x float> %72, %136
  %138 = extractelement <2 x float> %137, i64 0
  %139 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 4
  %140 = fadd <2 x float> %133, %134
  %141 = fsub <2 x float> %71, %140
  %142 = load <2 x float>, ptr %139, align 8, !tbaa !137
  %143 = fmul <2 x float> %141, %142
  %144 = extractelement <2 x float> %143, i64 1
  %145 = extractelement <2 x float> %142, i64 0
  %146 = extractelement <2 x float> %141, i64 0
  %147 = tail call float @llvm.fmuladd.f32(float %146, float %145, float %144)
  %148 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 4, i32 0, i64 2
  %149 = load float, ptr %148, align 8, !tbaa !137
  %150 = tail call float @llvm.fmuladd.f32(float %138, float %149, float %147)
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %4) #38
  %151 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %4, i64 0, i32 2
  store i8 1, ptr %151, align 8
  %152 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 6
  %153 = getelementptr inbounds i8, ptr %4, i64 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %153, i8 0, i64 16, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, ptr noundef nonnull align 4 dereferenceable(16) %152, i64 16, i1 false), !tbaa.struct !162
  %154 = fcmp olt float %150, 0.000000e+00
  br i1 %154, label %159, label %155

155:                                              ; preds = %131
  %156 = load <2 x float>, ptr %4, align 8, !tbaa !137
  %157 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 2
  %158 = load float, ptr %157, align 8, !tbaa !137
  br label %179

159:                                              ; preds = %131
  %160 = insertelement <2 x float> poison, float %150, i64 0
  %161 = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> zeroinitializer
  %162 = fmul <2 x float> %142, %161
  %163 = fmul float %149, %150
  %164 = fsub float %138, %163
  %165 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 5
  %166 = load float, ptr %165, align 8, !tbaa !137
  %167 = fmul float %164, %166
  %168 = fadd float %163, %167
  %169 = fsub <2 x float> %141, %162
  %170 = insertelement <2 x float> poison, float %166, i64 0
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <2 x i32> zeroinitializer
  %172 = fmul <2 x float> %169, %171
  %173 = fadd <2 x float> %162, %172
  %174 = load <2 x float>, ptr %4, align 8, !tbaa !137
  %175 = fadd <2 x float> %173, %174
  %176 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 2
  %177 = load float, ptr %176, align 8, !tbaa !137
  %178 = fadd float %168, %177
  br label %179

179:                                              ; preds = %155, %159
  %180 = phi float [ %158, %155 ], [ %178, %159 ]
  %181 = phi <2 x float> [ %156, %155 ], [ %175, %159 ]
  %182 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8
  %183 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 1
  %184 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 0, i32 0, i64 2
  %185 = getelementptr inbounds [4 x float], ptr %4, i64 0, i64 2
  %186 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1
  %187 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 1
  %188 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 1, i32 0, i64 2
  %189 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2
  %190 = load float, ptr %189, align 4, !tbaa !137
  %191 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 1
  %192 = load float, ptr %191, align 8, !tbaa !137
  %193 = extractelement <2 x float> %181, i64 1
  %194 = fmul float %193, %192
  %195 = extractelement <2 x float> %181, i64 0
  %196 = tail call float @llvm.fmuladd.f32(float %190, float %195, float %194)
  %197 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 8, i32 0, i64 2, i32 0, i64 2
  %198 = load float, ptr %197, align 4, !tbaa !137
  %199 = tail call float @llvm.fmuladd.f32(float %198, float %180, float %196)
  %200 = load <4 x float>, ptr %182, align 4
  %201 = shufflevector <4 x float> %200, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %202 = load <4 x float>, ptr %183, align 8
  %203 = shufflevector <4 x float> %202, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %204 = load <4 x float>, ptr %184, align 4
  %205 = shufflevector <4 x float> %204, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %206 = load float, ptr %186, align 4, !tbaa !137
  %207 = load float, ptr %187, align 8, !tbaa !137
  %208 = insertelement <2 x float> %203, float %207, i64 1
  %209 = shufflevector <2 x float> %181, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %210 = fmul <2 x float> %208, %209
  %211 = insertelement <2 x float> %201, float %206, i64 1
  %212 = shufflevector <2 x float> %181, <2 x float> poison, <2 x i32> zeroinitializer
  %213 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %211, <2 x float> %212, <2 x float> %210)
  %214 = load float, ptr %188, align 4, !tbaa !137
  %215 = insertelement <2 x float> %205, float %214, i64 1
  %216 = insertelement <2 x float> poison, float %180, i64 0
  %217 = shufflevector <2 x float> %216, <2 x float> poison, <2 x i32> zeroinitializer
  %218 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %215, <2 x float> %217, <2 x float> %213)
  %219 = insertelement <2 x float> poison, float %2, i64 0
  %220 = shufflevector <2 x float> %219, <2 x float> poison, <2 x i32> zeroinitializer
  %221 = fmul <2 x float> %218, %220
  %222 = fmul float %199, %2
  %223 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %222, i64 0
  store <2 x float> %221, ptr %4, align 8, !tbaa.struct !162
  store <2 x float> %223, ptr %185, align 8, !tbaa.struct !164
  %224 = load ptr, ptr %8, align 8, !tbaa !272
  %225 = load ptr, ptr %73, align 8, !tbaa !272
  %226 = icmp eq ptr %224, %225
  br i1 %226, label %227, label %299

227:                                              ; preds = %179
  %228 = extractelement <2 x float> %221, i64 0
  %229 = fcmp ord float %228, 0.000000e+00
  %230 = extractelement <2 x float> %221, i64 1
  %231 = fcmp ord float %230, 0.000000e+00
  %232 = select i1 %229, i1 %231, i1 false
  %233 = fcmp ord float %222, 0.000000e+00
  %234 = select i1 %232, i1 %233, i1 false
  br i1 %234, label %235, label %330

235:                                              ; preds = %227
  %236 = fmul float %230, %230
  %237 = tail call float @llvm.fmuladd.f32(float %228, float %228, float %236)
  %238 = tail call float @llvm.fmuladd.f32(float %222, float %222, float %237)
  %239 = tail call float @llvm.sqrt.f32(float %238)
  %240 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %224, i64 0, i32 20
  %241 = load float, ptr %240, align 8, !tbaa !546
  %242 = fcmp olt float %239, %241
  br i1 %242, label %330, label %243

243:                                              ; preds = %235
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %5) #38
  %244 = load i32, ptr %151, align 8
  %245 = fneg <2 x float> %221
  %246 = fneg float %222
  %247 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %246, i64 0
  %248 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %224, i64 0, i32 21
  %249 = load float, ptr %248, align 4, !tbaa !547
  %250 = getelementptr inbounds i8, ptr %5, i64 8
  store <2 x float> %247, ptr %250, align 8, !tbaa.struct !548
  %251 = getelementptr inbounds i8, ptr %5, i64 16
  %252 = getelementptr inbounds i8, ptr %5, i64 24
  store <2 x float> <float -0.000000e+00, float 0.000000e+00>, ptr %252, align 8, !tbaa.struct !549
  %253 = getelementptr inbounds i8, ptr %5, i64 32
  store i32 %244, ptr %253, align 8
  %254 = insertelement <2 x float> poison, float %249, i64 0
  %255 = shufflevector <2 x float> %254, <2 x float> poison, <2 x i32> zeroinitializer
  %256 = fmul <2 x float> %255, %245
  store <2 x float> %256, ptr %5, align 8, !tbaa !137, !alias.scope !550
  %257 = fmul float %249, %246
  store float %257, ptr %250, align 8, !tbaa !137, !alias.scope !550
  %258 = fmul float %249, -0.000000e+00
  store float %258, ptr %251, align 8, !tbaa !137, !alias.scope !550
  %259 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %5, i64 0, i32 1, i32 0, i64 1
  store float %258, ptr %259, align 4, !tbaa !137, !alias.scope !550
  store float %258, ptr %252, align 8, !tbaa !137, !alias.scope !550
  %260 = trunc i32 %244 to i8
  %261 = and i8 %260, 1
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %265, label %263

263:                                              ; preds = %243
  call void @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 4 dereferenceable(16) %5, ptr noundef nonnull align 4 dereferenceable(16) %9)
  %264 = load i8, ptr %253, align 8
  br label %265

265:                                              ; preds = %263, %243
  %266 = phi i8 [ %264, %263 ], [ %260, %243 ]
  %267 = and i8 %266, 2
  %268 = icmp eq i8 %267, 0
  br i1 %268, label %270, label %269

269:                                              ; preds = %265
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 4 dereferenceable(16) %251, ptr noundef nonnull align 4 dereferenceable(16) %9)
  br label %270

270:                                              ; preds = %265, %269
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %5) #38
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %6) #38
  %271 = load ptr, ptr %8, align 8, !tbaa !272
  %272 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %271, i64 0, i32 21
  %273 = load float, ptr %272, align 4, !tbaa !547
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(36) %6, ptr noundef nonnull align 8 dereferenceable(36) %4, i64 36, i1 false), !tbaa.struct !530
  %274 = load <2 x float>, ptr %6, align 8, !tbaa !137, !alias.scope !553
  %275 = insertelement <2 x float> poison, float %273, i64 0
  %276 = shufflevector <2 x float> %275, <2 x float> poison, <2 x i32> zeroinitializer
  %277 = fmul <2 x float> %276, %274
  store <2 x float> %277, ptr %6, align 8, !tbaa !137, !alias.scope !553
  %278 = getelementptr inbounds [4 x float], ptr %6, i64 0, i64 2
  %279 = load float, ptr %278, align 8, !tbaa !137, !alias.scope !553
  %280 = fmul float %273, %279
  store float %280, ptr %278, align 8, !tbaa !137, !alias.scope !553
  %281 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %6, i64 0, i32 1
  %282 = load <2 x float>, ptr %281, align 8, !tbaa !137, !alias.scope !553
  %283 = fmul <2 x float> %276, %282
  store <2 x float> %283, ptr %281, align 8, !tbaa !137, !alias.scope !553
  %284 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %6, i64 0, i32 1, i32 0, i64 2
  %285 = load float, ptr %284, align 8, !tbaa !137, !alias.scope !553
  %286 = fmul float %273, %285
  store float %286, ptr %284, align 8, !tbaa !137, !alias.scope !553
  %287 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %6, i64 0, i32 2
  %288 = load i8, ptr %287, align 8
  %289 = and i8 %288, 1
  %290 = icmp eq i8 %289, 0
  br i1 %290, label %293, label %291

291:                                              ; preds = %270
  call void @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %73, ptr noundef nonnull align 4 dereferenceable(16) %6, ptr noundef nonnull align 4 dereferenceable(16) %74)
  %292 = load i8, ptr %287, align 8
  br label %293

293:                                              ; preds = %291, %270
  %294 = phi i8 [ %292, %291 ], [ %288, %270 ]
  %295 = and i8 %294, 2
  %296 = icmp eq i8 %295, 0
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %73, ptr noundef nonnull align 4 dereferenceable(16) %281, ptr noundef nonnull align 4 dereferenceable(16) %74)
  br label %298

298:                                              ; preds = %293, %297
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %6) #38
  br label %330

299:                                              ; preds = %179
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %7) #38
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(36) %7, ptr noundef nonnull align 8 dereferenceable(36) %4, i64 36, i1 false), !tbaa.struct !530
  %300 = load <2 x float>, ptr %7, align 8, !tbaa !137, !alias.scope !556
  %301 = fneg <2 x float> %300
  %302 = getelementptr inbounds [4 x float], ptr %7, i64 0, i64 2
  %303 = load float, ptr %302, align 8, !tbaa !137, !alias.scope !556
  %304 = fneg float %303
  %305 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %304, i64 0
  store <2 x float> %301, ptr %7, align 8, !tbaa.struct !162, !alias.scope !556
  store <2 x float> %305, ptr %302, align 8, !tbaa.struct !164, !alias.scope !556
  %306 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %7, i64 0, i32 1
  %307 = load <2 x float>, ptr %306, align 8, !tbaa !137, !alias.scope !556
  %308 = fneg <2 x float> %307
  %309 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %7, i64 0, i32 1, i32 0, i64 2
  %310 = load float, ptr %309, align 8, !tbaa !137, !alias.scope !556
  %311 = fneg float %310
  %312 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %311, i64 0
  store <2 x float> %308, ptr %306, align 8, !tbaa.struct !162, !alias.scope !556
  store <2 x float> %312, ptr %309, align 8, !tbaa.struct !164, !alias.scope !556
  %313 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %7, i64 0, i32 2
  %314 = load i8, ptr %313, align 8
  %315 = and i8 %314, 1
  %316 = icmp eq i8 %315, 0
  br i1 %316, label %319, label %317

317:                                              ; preds = %299
  call void @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 4 dereferenceable(16) %7, ptr noundef nonnull align 4 dereferenceable(16) %9)
  %318 = load i8, ptr %313, align 8
  br label %319

319:                                              ; preds = %317, %299
  %320 = phi i8 [ %318, %317 ], [ %314, %299 ]
  %321 = and i8 %320, 2
  %322 = icmp eq i8 %321, 0
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 4 dereferenceable(16) %306, ptr noundef nonnull align 4 dereferenceable(16) %9)
  br label %324

324:                                              ; preds = %319, %323
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %7) #38
  call void @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %73, ptr noundef nonnull align 4 dereferenceable(16) %4, ptr noundef nonnull align 4 dereferenceable(16) %74)
  %325 = load i8, ptr %151, align 8
  %326 = and i8 %325, 2
  %327 = icmp eq i8 %326, 0
  br i1 %327, label %330, label %328

328:                                              ; preds = %324
  %329 = getelementptr inbounds %"struct.btSoftBody::Impulse", ptr %4, i64 0, i32 1
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %73, ptr noundef nonnull align 4 dereferenceable(16) %329, ptr noundef nonnull align 4 dereferenceable(16) %74)
  br label %330

330:                                              ; preds = %328, %324, %227, %298, %235
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %4) #38
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody6CJoint9TerminateEf(ptr noundef nonnull align 8 dereferenceable(244) %0, float %1) unnamed_addr #0 align 2 {
  %3 = alloca %class.btVector3, align 8
  %4 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 5
  %5 = load float, ptr %4, align 8, !tbaa !269
  %6 = fcmp ogt float %5, 0.000000e+00
  br i1 %6, label %7, label %20

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #38
  %9 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7
  %10 = load <2 x float>, ptr %9, align 4, !tbaa !137
  %11 = fneg <2 x float> %10
  %12 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 7, i32 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = fneg float %13
  %15 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %14, i64 0
  store <2 x float> %11, ptr %3, align 8
  %16 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %3, i64 0, i32 1
  store <2 x float> %15, ptr %16, align 8
  %17 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 4 dereferenceable(16) %3, ptr noundef nonnull align 4 dereferenceable(16) %17)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #38
  %18 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %0, i64 0, i32 1, i64 1
  %19 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %0, i64 0, i32 3, i64 1
  call void @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %18, ptr noundef nonnull align 4 dereferenceable(16) %9, ptr noundef nonnull align 4 dereferenceable(16) %19)
  br label %20

20:                                               ; preds = %7, %2
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody14PSolve_AnchorsEPS_ff(ptr nocapture noundef readonly %0, float noundef %1, float %2) #0 align 2 {
  %4 = alloca %class.btVector3, align 8
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 12
  %6 = load float, ptr %5, align 8, !tbaa !559
  %7 = fmul float %6, %1
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %9 = load float, ptr %8, align 8, !tbaa !418
  %10 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 2
  %11 = load i32, ptr %10, align 4, !tbaa !104
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 13, i32 5
  %15 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %4, i64 0, i32 1
  %16 = zext i32 %11 to i64
  br label %18

17:                                               ; preds = %18, %3
  ret void

18:                                               ; preds = %13, %18
  %19 = phi i64 [ 0, %13 ], [ %174, %18 ]
  %20 = load ptr, ptr %14, align 8, !tbaa !103
  %21 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %20, i64 %19
  %22 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %20, i64 %19, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !245
  %24 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2
  %25 = load ptr, ptr %21, align 8, !tbaa !234
  %26 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %20, i64 %19, i32 1
  %27 = load float, ptr %24, align 4, !tbaa !137
  %28 = load float, ptr %26, align 4, !tbaa !137
  %29 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 0, i32 0, i64 1
  %30 = load float, ptr %29, align 4, !tbaa !137
  %31 = getelementptr inbounds [4 x float], ptr %26, i64 0, i64 1
  %32 = load float, ptr %31, align 4, !tbaa !137
  %33 = fmul float %30, %32
  %34 = call float @llvm.fmuladd.f32(float %27, float %28, float %33)
  %35 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 0, i32 0, i64 2
  %36 = load float, ptr %35, align 4, !tbaa !137
  %37 = getelementptr inbounds [4 x float], ptr %26, i64 0, i64 2
  %38 = load float, ptr %37, align 4, !tbaa !137
  %39 = call float @llvm.fmuladd.f32(float %36, float %38, float %34)
  %40 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 1
  %41 = load float, ptr %40, align 4, !tbaa !137
  %42 = fadd float %39, %41
  %43 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 1
  %44 = load float, ptr %43, align 4, !tbaa !137
  %45 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 1, i32 0, i64 1
  %46 = load float, ptr %45, align 4, !tbaa !137
  %47 = fmul float %32, %46
  %48 = call float @llvm.fmuladd.f32(float %44, float %28, float %47)
  %49 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 1, i32 0, i64 2
  %50 = load float, ptr %49, align 4, !tbaa !137
  %51 = call float @llvm.fmuladd.f32(float %50, float %38, float %48)
  %52 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 1, i32 0, i64 1
  %53 = load float, ptr %52, align 4, !tbaa !137
  %54 = fadd float %53, %51
  %55 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 2
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 2, i32 0, i64 1
  %58 = load float, ptr %57, align 4, !tbaa !137
  %59 = fmul float %32, %58
  %60 = call float @llvm.fmuladd.f32(float %56, float %28, float %59)
  %61 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 0, i32 0, i64 2, i32 0, i64 2
  %62 = load float, ptr %61, align 4, !tbaa !137
  %63 = call float @llvm.fmuladd.f32(float %62, float %38, float %60)
  %64 = getelementptr inbounds %class.btCollisionObject, ptr %23, i64 0, i32 2, i32 1, i32 0, i64 2
  %65 = load float, ptr %64, align 4, !tbaa !137
  %66 = fadd float %65, %63
  %67 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %20, i64 %19, i32 4
  %68 = getelementptr inbounds %class.btRigidBody, ptr %23, i64 0, i32 2
  %69 = getelementptr inbounds %class.btRigidBody, ptr %23, i64 0, i32 3
  %70 = getelementptr inbounds %class.btRigidBody, ptr %23, i64 0, i32 3, i32 0, i64 1
  %71 = load float, ptr %70, align 4, !tbaa !137
  %72 = getelementptr inbounds [4 x float], ptr %67, i64 0, i64 2
  %73 = load float, ptr %72, align 4, !tbaa !137
  %74 = getelementptr inbounds %class.btRigidBody, ptr %23, i64 0, i32 3, i32 0, i64 2
  %75 = load float, ptr %74, align 8, !tbaa !137
  %76 = getelementptr inbounds [4 x float], ptr %67, i64 0, i64 1
  %77 = load float, ptr %76, align 4, !tbaa !137
  %78 = fneg float %75
  %79 = fmul float %77, %78
  %80 = call float @llvm.fmuladd.f32(float %71, float %73, float %79)
  %81 = load float, ptr %67, align 4, !tbaa !137
  %82 = load float, ptr %69, align 8, !tbaa !137
  %83 = fneg float %82
  %84 = fmul float %73, %83
  %85 = call float @llvm.fmuladd.f32(float %75, float %81, float %84)
  %86 = fneg float %71
  %87 = fmul float %81, %86
  %88 = call float @llvm.fmuladd.f32(float %82, float %77, float %87)
  %89 = load float, ptr %68, align 8, !tbaa !137
  %90 = fadd float %80, %89
  %91 = getelementptr inbounds %class.btRigidBody, ptr %23, i64 0, i32 2, i32 0, i64 1
  %92 = load float, ptr %91, align 4, !tbaa !137
  %93 = fadd float %92, %85
  %94 = getelementptr inbounds %class.btRigidBody, ptr %23, i64 0, i32 2, i32 0, i64 2
  %95 = load float, ptr %94, align 8, !tbaa !137
  %96 = fadd float %88, %95
  %97 = fmul float %9, %90
  %98 = fmul float %9, %93
  %99 = fmul float %9, %96
  %100 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1
  %101 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 2
  %102 = load float, ptr %101, align 4, !tbaa !137
  %103 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 2, i32 0, i64 1
  %104 = load float, ptr %103, align 4, !tbaa !137
  %105 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 1, i32 0, i64 2
  %106 = load float, ptr %105, align 4, !tbaa !137
  %107 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %25, i64 0, i32 2, i32 0, i64 2
  %108 = load float, ptr %107, align 4, !tbaa !137
  %109 = fsub float %106, %108
  %110 = fsub float %99, %109
  %111 = fsub float %66, %106
  %112 = fmul float %7, %111
  %113 = fadd float %112, %110
  %114 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %20, i64 %19, i32 3
  %115 = getelementptr inbounds [4 x float], ptr %114, i64 0, i64 1
  %116 = getelementptr inbounds [4 x float], ptr %114, i64 0, i64 2
  %117 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 1
  %118 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 1, i32 0, i64 1
  %119 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 1, i32 0, i64 2
  %120 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 2
  %121 = load float, ptr %120, align 4, !tbaa !137
  %122 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 2, i32 0, i64 1
  %123 = load float, ptr %122, align 4, !tbaa !137
  %124 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 2, i32 0, i64 2
  %125 = load float, ptr %124, align 4, !tbaa !137
  %126 = getelementptr inbounds %"struct.btSoftBody::Anchor", ptr %20, i64 %19, i32 5
  %127 = load float, ptr %126, align 4, !tbaa !137
  %128 = load <2 x float>, ptr %100, align 4, !tbaa !137
  %129 = extractelement <2 x float> %128, i64 0
  %130 = fsub float %129, %102
  %131 = extractelement <2 x float> %128, i64 1
  %132 = fsub float %131, %104
  %133 = fsub float %97, %130
  %134 = fsub float %98, %132
  %135 = fsub float %42, %129
  %136 = fsub float %54, %131
  %137 = fmul float %7, %135
  %138 = fmul float %7, %136
  %139 = fadd float %137, %133
  %140 = fadd float %138, %134
  %141 = load float, ptr %114, align 4, !tbaa !137
  %142 = load float, ptr %115, align 4, !tbaa !137
  %143 = load float, ptr %116, align 4, !tbaa !137
  %144 = load float, ptr %117, align 4, !tbaa !137
  %145 = load float, ptr %118, align 4, !tbaa !137
  %146 = insertelement <2 x float> poison, float %140, i64 0
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> zeroinitializer
  %148 = insertelement <2 x float> poison, float %142, i64 0
  %149 = insertelement <2 x float> %148, float %145, i64 1
  %150 = fmul <2 x float> %147, %149
  %151 = insertelement <2 x float> poison, float %141, i64 0
  %152 = insertelement <2 x float> %151, float %144, i64 1
  %153 = insertelement <2 x float> poison, float %139, i64 0
  %154 = shufflevector <2 x float> %153, <2 x float> poison, <2 x i32> zeroinitializer
  %155 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> %154, <2 x float> %150)
  %156 = load float, ptr %119, align 4, !tbaa !137
  %157 = insertelement <2 x float> poison, float %143, i64 0
  %158 = insertelement <2 x float> %157, float %156, i64 1
  %159 = insertelement <2 x float> poison, float %113, i64 0
  %160 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> zeroinitializer
  %161 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %158, <2 x float> %160, <2 x float> %155)
  %162 = fmul float %140, %123
  %163 = call float @llvm.fmuladd.f32(float %121, float %139, float %162)
  %164 = call float @llvm.fmuladd.f32(float %125, float %113, float %163)
  %165 = insertelement <2 x float> poison, float %127, i64 0
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer
  %167 = fmul <2 x float> %161, %166
  %168 = fmul float %127, %164
  %169 = fadd <2 x float> %128, %167
  store <2 x float> %169, ptr %100, align 4, !tbaa !137
  %170 = fadd float %106, %168
  store float %170, ptr %105, align 4, !tbaa !137
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #38
  %171 = fneg <2 x float> %161
  %172 = fneg float %164
  %173 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %172, i64 0
  store <2 x float> %171, ptr %4, align 8
  store <2 x float> %173, ptr %15, align 8
  call void @_ZN11btRigidBody12applyImpulseERK9btVector3S2_(ptr noundef nonnull align 8 dereferenceable(564) %23, ptr noundef nonnull align 4 dereferenceable(16) %4, ptr noundef nonnull align 4 dereferenceable(16) %67)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #38
  %174 = add nuw nsw i64 %19, 1
  %175 = icmp eq i64 %174, %16
  br i1 %175, label %17, label %18
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN11btRigidBody12applyImpulseERK9btVector3S2_(ptr noundef nonnull align 8 dereferenceable(564) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 4
  %5 = load float, ptr %4, align 8, !tbaa !451
  %6 = fcmp une float %5, 0.000000e+00
  br i1 %6, label %7, label %98

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 6
  %9 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %11 = load float, ptr %10, align 4, !tbaa !137
  %12 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 6, i32 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = fmul float %11, %13
  %15 = fmul float %5, %14
  %16 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 2
  %17 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %18 = load <2 x float>, ptr %8, align 4, !tbaa !137
  %19 = fmul <2 x float> %17, %18
  %20 = insertelement <2 x float> poison, float %5, i64 0
  %21 = shufflevector <2 x float> %20, <2 x float> poison, <2 x i32> zeroinitializer
  %22 = fmul <2 x float> %21, %19
  %23 = load <2 x float>, ptr %16, align 8, !tbaa !137
  %24 = fadd <2 x float> %22, %23
  store <2 x float> %24, ptr %16, align 8, !tbaa !137
  %25 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 2, i32 0, i64 2
  %26 = load float, ptr %25, align 8, !tbaa !137
  %27 = fadd float %15, %26
  store float %27, ptr %25, align 8, !tbaa !137
  %28 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 5
  %29 = load float, ptr %1, align 4, !tbaa !137
  %30 = extractelement <2 x float> %18, i64 0
  %31 = fmul float %30, %29
  %32 = load float, ptr %9, align 4, !tbaa !137
  %33 = extractelement <2 x float> %18, i64 1
  %34 = fmul float %32, %33
  %35 = load float, ptr %10, align 4, !tbaa !137
  %36 = fmul float %35, %13
  %37 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %38 = load float, ptr %37, align 4, !tbaa !137
  %39 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %40 = load float, ptr %39, align 4, !tbaa !137
  %41 = fneg float %40
  %42 = fmul float %34, %41
  %43 = tail call float @llvm.fmuladd.f32(float %38, float %36, float %42)
  %44 = load float, ptr %2, align 4, !tbaa !137
  %45 = fneg float %44
  %46 = fmul float %36, %45
  %47 = tail call float @llvm.fmuladd.f32(float %40, float %31, float %46)
  %48 = fneg float %38
  %49 = fmul float %31, %48
  %50 = tail call float @llvm.fmuladd.f32(float %44, float %34, float %49)
  %51 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1
  %52 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 0, i32 0, i64 1
  %53 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 0, i32 0, i64 2
  %54 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 1
  %55 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 1, i32 0, i64 1
  %56 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 1, i32 0, i64 2
  %57 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 2
  %58 = load float, ptr %57, align 8, !tbaa !137
  %59 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 2, i32 0, i64 1
  %60 = load float, ptr %59, align 4, !tbaa !137
  %61 = fmul float %47, %60
  %62 = tail call float @llvm.fmuladd.f32(float %58, float %43, float %61)
  %63 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 1, i32 0, i64 2, i32 0, i64 2
  %64 = load float, ptr %63, align 8, !tbaa !137
  %65 = tail call float @llvm.fmuladd.f32(float %64, float %50, float %62)
  %66 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 5, i32 0, i64 2
  %67 = load float, ptr %66, align 4, !tbaa !137
  %68 = fmul float %65, %67
  %69 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 3
  %70 = load <4 x float>, ptr %51, align 8
  %71 = shufflevector <4 x float> %70, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %72 = load <4 x float>, ptr %52, align 4
  %73 = shufflevector <4 x float> %72, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %74 = load <4 x float>, ptr %53, align 8
  %75 = shufflevector <4 x float> %74, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %76 = load float, ptr %54, align 8, !tbaa !137
  %77 = load float, ptr %55, align 4, !tbaa !137
  %78 = insertelement <2 x float> %73, float %77, i64 1
  %79 = insertelement <2 x float> poison, float %47, i64 0
  %80 = shufflevector <2 x float> %79, <2 x float> poison, <2 x i32> zeroinitializer
  %81 = fmul <2 x float> %78, %80
  %82 = insertelement <2 x float> %71, float %76, i64 1
  %83 = insertelement <2 x float> poison, float %43, i64 0
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer
  %85 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %82, <2 x float> %84, <2 x float> %81)
  %86 = load float, ptr %56, align 8, !tbaa !137
  %87 = insertelement <2 x float> %75, float %86, i64 1
  %88 = insertelement <2 x float> poison, float %50, i64 0
  %89 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> zeroinitializer
  %90 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %87, <2 x float> %89, <2 x float> %85)
  %91 = load <2 x float>, ptr %28, align 4, !tbaa !137
  %92 = fmul <2 x float> %90, %91
  %93 = load <2 x float>, ptr %69, align 8, !tbaa !137
  %94 = fadd <2 x float> %92, %93
  store <2 x float> %94, ptr %69, align 8, !tbaa !137
  %95 = getelementptr inbounds %class.btRigidBody, ptr %0, i64 0, i32 3, i32 0, i64 2
  %96 = load float, ptr %95, align 8, !tbaa !137
  %97 = fadd float %68, %96
  store float %97, ptr %95, align 8, !tbaa !137
  br label %98

98:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody16PSolve_RContactsEPS_ff(ptr nocapture noundef readonly %0, float noundef %1, float %2) #0 align 2 {
  %4 = alloca %class.btVector3, align 8
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3
  %6 = load float, ptr %5, align 8, !tbaa !418
  %7 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %8 = load ptr, ptr %7, align 8, !tbaa !157
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = getelementptr inbounds ptr, ptr %9, i64 11
  %11 = load ptr, ptr %10, align 8
  %12 = tail call noundef float %11(ptr noundef nonnull align 8 dereferenceable(24) %8)
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 2
  %14 = load i32, ptr %13, align 4, !tbaa !108
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %3
  %17 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 14, i32 5
  %18 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %4, i64 0, i32 1
  %19 = zext i32 %14 to i64
  %20 = insertelement <2 x float> poison, float %6, i64 0
  %21 = shufflevector <2 x float> %20, <2 x float> poison, <2 x i32> zeroinitializer
  br label %23

22:                                               ; preds = %187, %3
  ret void

23:                                               ; preds = %16, %187
  %24 = phi i64 [ 0, %16 ], [ %188, %187 ]
  %25 = load ptr, ptr %17, align 8, !tbaa !107
  %26 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24
  %27 = load ptr, ptr %26, align 8, !tbaa !490
  %28 = getelementptr inbounds %class.btCollisionObject, ptr %27, i64 0, i32 19
  %29 = load i32, ptr %28, align 8, !tbaa !134
  %30 = icmp eq i32 %29, 2
  %31 = select i1 %30, ptr %27, ptr null
  %32 = icmp eq ptr %31, null
  br i1 %32, label %63, label %33

33:                                               ; preds = %23
  %34 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24, i32 3
  %35 = getelementptr inbounds %class.btRigidBody, ptr %31, i64 0, i32 2
  %36 = getelementptr inbounds %class.btRigidBody, ptr %31, i64 0, i32 3
  %37 = getelementptr inbounds %class.btRigidBody, ptr %31, i64 0, i32 3, i32 0, i64 1
  %38 = getelementptr inbounds [4 x float], ptr %34, i64 0, i64 1
  %39 = load float, ptr %36, align 8, !tbaa !137
  %40 = getelementptr inbounds %class.btRigidBody, ptr %31, i64 0, i32 2, i32 0, i64 2
  %41 = load float, ptr %40, align 8, !tbaa !137
  %42 = load <2 x float>, ptr %37, align 4, !tbaa !137
  %43 = load <2 x float>, ptr %38, align 4, !tbaa !137
  %44 = load float, ptr %34, align 4, !tbaa !137
  %45 = insertelement <2 x float> %42, float %39, i64 0
  %46 = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %47 = fneg <2 x float> %46
  %48 = fmul <2 x float> %43, %47
  %49 = shufflevector <2 x float> %43, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %50 = insertelement <2 x float> %49, float %44, i64 1
  %51 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %42, <2 x float> %50, <2 x float> %48)
  %52 = extractelement <2 x float> %42, i64 0
  %53 = fneg float %52
  %54 = fmul float %44, %53
  %55 = extractelement <2 x float> %43, i64 0
  %56 = call float @llvm.fmuladd.f32(float %39, float %55, float %54)
  %57 = load <2 x float>, ptr %35, align 8, !tbaa !137
  %58 = fadd <2 x float> %51, %57
  %59 = fadd float %56, %41
  %60 = fmul <2 x float> %21, %58
  %61 = fmul float %6, %59
  %62 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %61, i64 0
  br label %63

63:                                               ; preds = %23, %33
  %64 = phi <2 x float> [ %60, %33 ], [ zeroinitializer, %23 ]
  %65 = phi <2 x float> [ %62, %33 ], [ zeroinitializer, %23 ]
  %66 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !560
  %68 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1
  %69 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 2
  %70 = load float, ptr %68, align 4, !tbaa !137
  %71 = load float, ptr %69, align 4, !tbaa !137
  %72 = fsub float %70, %71
  %73 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1, i32 0, i64 1
  %74 = load float, ptr %73, align 4, !tbaa !137
  %75 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 2, i32 0, i64 1
  %76 = load float, ptr %75, align 4, !tbaa !137
  %77 = fsub float %74, %76
  %78 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 1, i32 0, i64 2
  %79 = load float, ptr %78, align 4, !tbaa !137
  %80 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %67, i64 0, i32 2, i32 0, i64 2
  %81 = load float, ptr %80, align 4, !tbaa !137
  %82 = fsub float %79, %81
  %83 = extractelement <2 x float> %64, i64 0
  %84 = fsub float %72, %83
  %85 = extractelement <2 x float> %64, i64 1
  %86 = fsub float %77, %85
  %87 = extractelement <2 x float> %65, i64 0
  %88 = fsub float %82, %87
  %89 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %26, i64 0, i32 1
  %90 = load float, ptr %89, align 4, !tbaa !137
  %91 = getelementptr inbounds [4 x float], ptr %89, i64 0, i64 1
  %92 = load float, ptr %91, align 4, !tbaa !137
  %93 = fmul float %86, %92
  %94 = call float @llvm.fmuladd.f32(float %84, float %90, float %93)
  %95 = getelementptr inbounds [4 x float], ptr %89, i64 0, i64 2
  %96 = load float, ptr %95, align 4, !tbaa !137
  %97 = call float @llvm.fmuladd.f32(float %88, float %96, float %94)
  %98 = fcmp ugt float %97, 0x3E80000000000000
  br i1 %98, label %187, label %99

99:                                               ; preds = %63
  %100 = fmul float %74, %92
  %101 = call float @llvm.fmuladd.f32(float %70, float %90, float %100)
  %102 = call float @llvm.fmuladd.f32(float %79, float %96, float %101)
  %103 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %26, i64 0, i32 2
  %104 = load float, ptr %103, align 8, !tbaa !492
  %105 = fadd float %102, %104
  %106 = fcmp olt float %105, %12
  %107 = select i1 %106, float %105, float %12
  %108 = fmul float %90, %97
  %109 = fmul float %92, %97
  %110 = fmul float %96, %97
  %111 = fsub float %84, %108
  %112 = fsub float %86, %109
  %113 = fsub float %88, %110
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #38
  %114 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24, i32 2
  %115 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24, i32 5
  %116 = load float, ptr %115, align 4, !tbaa !137
  %117 = fmul float %111, %116
  %118 = fmul float %112, %116
  %119 = fmul float %113, %116
  %120 = fsub float %84, %117
  %121 = fsub float %86, %118
  %122 = fsub float %88, %119
  %123 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24, i32 6
  %124 = load float, ptr %123, align 8, !tbaa !562
  %125 = fmul float %107, %124
  %126 = fmul float %90, %125
  %127 = fmul float %125, %92
  %128 = fmul float %125, %96
  %129 = fadd float %120, %126
  %130 = fadd float %121, %127
  %131 = fadd float %122, %128
  %132 = fmul float %129, %1
  %133 = fmul float %130, %1
  %134 = fmul float %131, %1
  %135 = getelementptr inbounds [4 x float], ptr %114, i64 0, i64 1
  %136 = getelementptr inbounds [4 x float], ptr %114, i64 0, i64 2
  %137 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 1
  %138 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 1, i32 0, i64 1
  %139 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 1, i32 0, i64 2
  %140 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 2
  %141 = load float, ptr %140, align 4, !tbaa !137
  %142 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 2, i32 0, i64 1
  %143 = load float, ptr %142, align 4, !tbaa !137
  %144 = fmul float %133, %143
  %145 = call float @llvm.fmuladd.f32(float %141, float %132, float %144)
  %146 = getelementptr inbounds [3 x %class.btVector3], ptr %114, i64 0, i64 2, i32 0, i64 2
  %147 = load float, ptr %146, align 4, !tbaa !137
  %148 = call float @llvm.fmuladd.f32(float %147, float %134, float %145)
  %149 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %148, i64 0
  %150 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24, i32 4
  %151 = load float, ptr %114, align 4, !tbaa !137
  %152 = load float, ptr %135, align 4, !tbaa !137
  %153 = load float, ptr %136, align 4, !tbaa !137
  %154 = load float, ptr %137, align 4, !tbaa !137
  %155 = load float, ptr %138, align 4, !tbaa !137
  %156 = insertelement <2 x float> poison, float %152, i64 0
  %157 = insertelement <2 x float> %156, float %155, i64 1
  %158 = insertelement <2 x float> poison, float %133, i64 0
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> zeroinitializer
  %160 = fmul <2 x float> %157, %159
  %161 = insertelement <2 x float> poison, float %151, i64 0
  %162 = insertelement <2 x float> %161, float %154, i64 1
  %163 = insertelement <2 x float> poison, float %132, i64 0
  %164 = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> zeroinitializer
  %165 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %162, <2 x float> %164, <2 x float> %160)
  %166 = load float, ptr %139, align 4, !tbaa !137
  %167 = insertelement <2 x float> poison, float %153, i64 0
  %168 = insertelement <2 x float> %167, float %166, i64 1
  %169 = insertelement <2 x float> poison, float %134, i64 0
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %168, <2 x float> %170, <2 x float> %165)
  store <2 x float> %171, ptr %4, align 8
  store <2 x float> %149, ptr %18, align 8
  %172 = load float, ptr %150, align 4, !tbaa !137
  %173 = insertelement <2 x float> poison, float %172, i64 0
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer
  %175 = fmul <2 x float> %174, %171
  %176 = fmul float %172, %148
  %177 = load ptr, ptr %66, align 8, !tbaa !560
  %178 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %177, i64 0, i32 1
  %179 = load <2 x float>, ptr %178, align 4, !tbaa !137
  %180 = fsub <2 x float> %179, %175
  store <2 x float> %180, ptr %178, align 4, !tbaa !137
  %181 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %177, i64 0, i32 1, i32 0, i64 2
  %182 = load float, ptr %181, align 4, !tbaa !137
  %183 = fsub float %182, %176
  store float %183, ptr %181, align 4, !tbaa !137
  br i1 %32, label %186, label %184

184:                                              ; preds = %99
  %185 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %25, i64 %24, i32 3
  call void @_ZN11btRigidBody12applyImpulseERK9btVector3S2_(ptr noundef nonnull align 8 dereferenceable(564) %31, ptr noundef nonnull align 4 dereferenceable(16) %4, ptr noundef nonnull align 4 dereferenceable(16) %185)
  br label %186

186:                                              ; preds = %184, %99
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #38
  br label %187

187:                                              ; preds = %186, %63
  %188 = add nuw nsw i64 %24, 1
  %189 = icmp eq i64 %188, %19
  br i1 %189, label %22, label %23
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody16PSolve_SContactsEPS_ff(ptr nocapture noundef readonly %0, float %1, float %2) #16 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !112
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 15, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !111
  %10 = zext i32 %5 to i64
  br label %12

11:                                               ; preds = %130, %3
  ret void

12:                                               ; preds = %7, %130
  %13 = phi i64 [ 0, %7 ], [ %189, %130 ]
  %14 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13
  %15 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13, i32 3
  %16 = load ptr, ptr %14, align 8, !tbaa !563
  %17 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !565
  %19 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !219
  %21 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %20, i64 0, i32 1
  %22 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %18, i64 0, i32 1, i64 1
  %23 = load ptr, ptr %22, align 8, !tbaa !219
  %24 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %23, i64 0, i32 1
  %25 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %18, i64 0, i32 1, i64 2
  %26 = load ptr, ptr %25, align 8, !tbaa !219
  %27 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 0, i32 1
  %28 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13, i32 2
  %29 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %20, i64 0, i32 1, i32 0, i64 2
  %30 = getelementptr inbounds [4 x float], ptr %28, i64 0, i64 1
  %31 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %23, i64 0, i32 1, i32 0, i64 2
  %32 = getelementptr inbounds [4 x float], ptr %28, i64 0, i64 2
  %33 = load float, ptr %32, align 4, !tbaa !137
  %34 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 0, i32 1, i32 0, i64 2
  %35 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %20, i64 0, i32 2
  %36 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %23, i64 0, i32 2
  %37 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 0, i32 2
  %38 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %20, i64 0, i32 2, i32 0, i64 2
  %39 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %23, i64 0, i32 2, i32 0, i64 2
  %40 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %26, i64 0, i32 2, i32 0, i64 2
  %41 = load float, ptr %29, align 4, !tbaa !137
  %42 = load <2 x float>, ptr %28, align 4, !tbaa !137
  %43 = load float, ptr %31, align 4, !tbaa !137
  %44 = load float, ptr %34, align 4, !tbaa !137
  %45 = load float, ptr %38, align 4, !tbaa !137
  %46 = insertelement <2 x float> poison, float %45, i64 0
  %47 = insertelement <2 x float> %46, float %43, i64 1
  %48 = fmul <2 x float> %42, %47
  %49 = shufflevector <2 x float> %48, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %50 = load float, ptr %39, align 4, !tbaa !137
  %51 = insertelement <2 x float> poison, float %41, i64 0
  %52 = insertelement <2 x float> %51, float %50, i64 1
  %53 = fmul <2 x float> %42, %52
  %54 = fadd <2 x float> %49, %53
  %55 = load float, ptr %40, align 4, !tbaa !137
  %56 = insertelement <2 x float> poison, float %33, i64 0
  %57 = shufflevector <2 x float> %56, <2 x float> poison, <2 x i32> zeroinitializer
  %58 = insertelement <2 x float> poison, float %44, i64 0
  %59 = insertelement <2 x float> %58, float %55, i64 1
  %60 = fmul <2 x float> %57, %59
  %61 = fadd <2 x float> %54, %60
  %62 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %16, i64 0, i32 1
  %63 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %16, i64 0, i32 2
  %64 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %16, i64 0, i32 1, i32 0, i64 2
  %65 = load float, ptr %64, align 4, !tbaa !137
  %66 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %16, i64 0, i32 2, i32 0, i64 2
  %67 = load float, ptr %66, align 4, !tbaa !137
  %68 = fsub float %65, %67
  %69 = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %70 = fsub <2 x float> %61, %69
  %71 = extractelement <2 x float> %70, i64 0
  %72 = fsub float %68, %71
  %73 = load <2 x float>, ptr %21, align 4, !tbaa !137
  %74 = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> zeroinitializer
  %75 = fmul <2 x float> %74, %73
  %76 = load <2 x float>, ptr %24, align 4, !tbaa !137
  %77 = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %78 = fmul <2 x float> %77, %76
  %79 = fadd <2 x float> %75, %78
  %80 = load <2 x float>, ptr %27, align 4, !tbaa !137
  %81 = fmul <2 x float> %57, %80
  %82 = fadd <2 x float> %79, %81
  %83 = load <2 x float>, ptr %35, align 4, !tbaa !137
  %84 = fmul <2 x float> %74, %83
  %85 = load <2 x float>, ptr %36, align 4, !tbaa !137
  %86 = fmul <2 x float> %77, %85
  %87 = fadd <2 x float> %84, %86
  %88 = load <2 x float>, ptr %37, align 4, !tbaa !137
  %89 = fmul <2 x float> %57, %88
  %90 = fadd <2 x float> %87, %89
  %91 = load <2 x float>, ptr %62, align 4, !tbaa !137
  %92 = load <2 x float>, ptr %63, align 4, !tbaa !137
  %93 = fsub <2 x float> %91, %92
  %94 = fsub <2 x float> %82, %90
  %95 = fsub <2 x float> %93, %94
  %96 = load <2 x float>, ptr %15, align 4, !tbaa !137
  %97 = fmul <2 x float> %95, %96
  %98 = extractelement <2 x float> %97, i64 1
  %99 = extractelement <2 x float> %96, i64 0
  %100 = extractelement <2 x float> %95, i64 0
  %101 = tail call float @llvm.fmuladd.f32(float %100, float %99, float %98)
  %102 = getelementptr inbounds [4 x float], ptr %15, i64 0, i64 2
  %103 = load float, ptr %102, align 4, !tbaa !137
  %104 = tail call float @llvm.fmuladd.f32(float %72, float %103, float %101)
  %105 = fcmp olt float %104, 0.000000e+00
  br i1 %105, label %106, label %130

106:                                              ; preds = %12
  %107 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13, i32 4
  %108 = load float, ptr %107, align 8, !tbaa !566
  %109 = shufflevector <2 x float> %91, <2 x float> %82, <2 x i32> <i32 1, i32 3>
  %110 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %111 = fmul <2 x float> %109, %110
  %112 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> zeroinitializer
  %113 = shufflevector <2 x float> %91, <2 x float> %82, <2 x i32> <i32 0, i32 2>
  %114 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %112, <2 x float> %113, <2 x float> %111)
  %115 = insertelement <2 x float> poison, float %103, i64 0
  %116 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> zeroinitializer
  %117 = insertelement <2 x float> poison, float %65, i64 0
  %118 = shufflevector <2 x float> %117, <2 x float> %61, <2 x i32> <i32 0, i32 2>
  %119 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %116, <2 x float> %118, <2 x float> %114)
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %121 = fsub <2 x float> %119, %120
  %122 = extractelement <2 x float> %121, i64 0
  %123 = fsub float %108, %122
  %124 = insertelement <2 x float> poison, float %123, i64 0
  %125 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> zeroinitializer
  %126 = fmul <2 x float> %96, %125
  %127 = fmul float %103, %123
  %128 = fadd <2 x float> %126, zeroinitializer
  %129 = fadd float %127, 0.000000e+00
  br label %130

130:                                              ; preds = %106, %12
  %131 = phi float [ %129, %106 ], [ 0.000000e+00, %12 ]
  %132 = phi <2 x float> [ %128, %106 ], [ zeroinitializer, %12 ]
  %133 = insertelement <2 x float> poison, float %104, i64 0
  %134 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> zeroinitializer
  %135 = fmul <2 x float> %96, %134
  %136 = fmul float %103, %104
  %137 = fsub float %72, %136
  %138 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13, i32 5
  %139 = load float, ptr %138, align 4, !tbaa !137
  %140 = fmul float %137, %139
  %141 = fsub float %131, %140
  %142 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13, i32 6
  %143 = load float, ptr %142, align 4, !tbaa !137
  %144 = fmul float %143, %141
  %145 = fsub <2 x float> %95, %135
  %146 = insertelement <2 x float> poison, float %139, i64 0
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> zeroinitializer
  %148 = fmul <2 x float> %145, %147
  %149 = fsub <2 x float> %132, %148
  %150 = insertelement <2 x float> poison, float %143, i64 0
  %151 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> zeroinitializer
  %152 = fmul <2 x float> %151, %149
  %153 = fadd <2 x float> %91, %152
  store <2 x float> %153, ptr %62, align 4, !tbaa !137
  %154 = fadd float %65, %144
  store float %154, ptr %64, align 4, !tbaa !137
  %155 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %9, i64 %13, i32 6, i64 1
  %156 = load float, ptr %155, align 4, !tbaa !137
  %157 = load float, ptr %28, align 4, !tbaa !137
  %158 = fmul float %156, %157
  %159 = fmul float %141, %158
  %160 = insertelement <2 x float> poison, float %158, i64 0
  %161 = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> zeroinitializer
  %162 = fmul <2 x float> %149, %161
  %163 = load <2 x float>, ptr %21, align 4, !tbaa !137
  %164 = fsub <2 x float> %163, %162
  store <2 x float> %164, ptr %21, align 4, !tbaa !137
  %165 = load float, ptr %29, align 4, !tbaa !137
  %166 = fsub float %165, %159
  store float %166, ptr %29, align 4, !tbaa !137
  %167 = load float, ptr %155, align 4, !tbaa !137
  %168 = load float, ptr %30, align 4, !tbaa !137
  %169 = fmul float %167, %168
  %170 = fmul float %141, %169
  %171 = insertelement <2 x float> poison, float %169, i64 0
  %172 = shufflevector <2 x float> %171, <2 x float> poison, <2 x i32> zeroinitializer
  %173 = fmul <2 x float> %149, %172
  %174 = load <2 x float>, ptr %24, align 4, !tbaa !137
  %175 = fsub <2 x float> %174, %173
  store <2 x float> %175, ptr %24, align 4, !tbaa !137
  %176 = load float, ptr %31, align 4, !tbaa !137
  %177 = fsub float %176, %170
  store float %177, ptr %31, align 4, !tbaa !137
  %178 = load float, ptr %155, align 4, !tbaa !137
  %179 = load float, ptr %32, align 4, !tbaa !137
  %180 = fmul float %178, %179
  %181 = fmul float %141, %180
  %182 = insertelement <2 x float> poison, float %180, i64 0
  %183 = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> zeroinitializer
  %184 = fmul <2 x float> %149, %183
  %185 = load <2 x float>, ptr %27, align 4, !tbaa !137
  %186 = fsub <2 x float> %185, %184
  store <2 x float> %186, ptr %27, align 4, !tbaa !137
  %187 = load float, ptr %34, align 4, !tbaa !137
  %188 = fsub float %187, %181
  store float %188, ptr %34, align 4, !tbaa !137
  %189 = add nuw nsw i64 %13, 1
  %190 = icmp eq i64 %189, %10
  br i1 %190, label %11, label %12
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody12PSolve_LinksEPS_ff(ptr nocapture noundef readonly %0, float noundef %1, float %2) #16 align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !92
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !91
  %10 = zext i32 %5 to i64
  br label %12

11:                                               ; preds = %64, %3
  ret void

12:                                               ; preds = %7, %64
  %13 = phi i64 [ 0, %7 ], [ %65, %64 ]
  %14 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 %13, i32 5
  %15 = load float, ptr %14, align 8, !tbaa !301
  %16 = fcmp ogt float %15, 0.000000e+00
  br i1 %16, label %17, label %64

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 %13, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !219
  %20 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 %13, i32 1, i64 1
  %21 = load ptr, ptr %20, align 8, !tbaa !219
  %22 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %21, i64 0, i32 1
  %23 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %21, i64 0, i32 1, i32 0, i64 2
  %25 = load float, ptr %24, align 4, !tbaa !137
  %26 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 0, i32 1, i32 0, i64 2
  %27 = load float, ptr %26, align 4, !tbaa !137
  %28 = fsub float %25, %27
  %29 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %9, i64 %13, i32 6
  %30 = load float, ptr %29, align 4, !tbaa !302
  %31 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %19, i64 0, i32 6
  %32 = load float, ptr %31, align 8, !tbaa !174
  %33 = load <2 x float>, ptr %22, align 4, !tbaa !137
  %34 = load <2 x float>, ptr %23, align 4, !tbaa !137
  %35 = fsub <2 x float> %33, %34
  %36 = fmul <2 x float> %35, %35
  %37 = extractelement <2 x float> %36, i64 1
  %38 = extractelement <2 x float> %35, i64 0
  %39 = tail call float @llvm.fmuladd.f32(float %38, float %38, float %37)
  %40 = tail call float @llvm.fmuladd.f32(float %28, float %28, float %39)
  %41 = fsub float %30, %40
  %42 = fadd float %30, %40
  %43 = fmul float %15, %42
  %44 = fdiv float %41, %43
  %45 = fmul float %44, %1
  %46 = fmul float %32, %45
  %47 = insertelement <2 x float> poison, float %46, i64 0
  %48 = shufflevector <2 x float> %47, <2 x float> poison, <2 x i32> zeroinitializer
  %49 = fmul <2 x float> %35, %48
  %50 = fmul float %28, %46
  %51 = fsub <2 x float> %34, %49
  store <2 x float> %51, ptr %23, align 4, !tbaa !137
  %52 = fsub float %27, %50
  store float %52, ptr %26, align 4, !tbaa !137
  %53 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %21, i64 0, i32 6
  %54 = load float, ptr %53, align 8, !tbaa !174
  %55 = fmul float %45, %54
  %56 = fmul float %28, %55
  %57 = insertelement <2 x float> poison, float %55, i64 0
  %58 = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> zeroinitializer
  %59 = fmul <2 x float> %35, %58
  %60 = load <2 x float>, ptr %22, align 4, !tbaa !137
  %61 = fadd <2 x float> %60, %59
  store <2 x float> %61, ptr %22, align 4, !tbaa !137
  %62 = load float, ptr %24, align 4, !tbaa !137
  %63 = fadd float %56, %62
  store float %63, ptr %24, align 4, !tbaa !137
  br label %64

64:                                               ; preds = %17, %12
  %65 = add nuw nsw i64 %13, 1
  %66 = icmp eq i64 %65, %10
  br i1 %66, label %11, label %12
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @_ZN10btSoftBody12VSolve_LinksEPS_f(ptr nocapture noundef readonly %0, float noundef %1) #16 align 2 {
  %3 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !92
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 10, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !91
  %9 = zext i32 %4 to i64
  br label %11

10:                                               ; preds = %11, %2
  ret void

11:                                               ; preds = %6, %11
  %12 = phi i64 [ 0, %6 ], [ %68, %11 ]
  %13 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %8, i64 %12, i32 1
  %14 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %8, i64 %12, i32 8
  %15 = load ptr, ptr %13, align 8, !tbaa !219
  %16 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %15, i64 0, i32 3
  %17 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %8, i64 %12, i32 1, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !219
  %19 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %18, i64 0, i32 3
  %20 = load float, ptr %19, align 4, !tbaa !137
  %21 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %18, i64 0, i32 3, i32 0, i64 1
  %22 = load float, ptr %21, align 4, !tbaa !137
  %23 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %15, i64 0, i32 3, i32 0, i64 2
  %24 = load float, ptr %23, align 4, !tbaa !137
  %25 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %18, i64 0, i32 3, i32 0, i64 2
  %26 = load float, ptr %25, align 4, !tbaa !137
  %27 = fsub float %24, %26
  %28 = getelementptr inbounds [4 x float], ptr %14, i64 0, i64 2
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = getelementptr inbounds %"struct.btSoftBody::Link", ptr %8, i64 %12, i32 7
  %31 = load float, ptr %30, align 8, !tbaa !450
  %32 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %15, i64 0, i32 6
  %33 = load float, ptr %32, align 8, !tbaa !174
  %34 = load <2 x float>, ptr %16, align 4, !tbaa !137
  %35 = extractelement <2 x float> %34, i64 0
  %36 = fsub float %35, %20
  %37 = extractelement <2 x float> %34, i64 1
  %38 = fsub float %37, %22
  %39 = load <2 x float>, ptr %14, align 4, !tbaa !137
  %40 = extractelement <2 x float> %39, i64 1
  %41 = fmul float %38, %40
  %42 = extractelement <2 x float> %39, i64 0
  %43 = tail call float @llvm.fmuladd.f32(float %42, float %36, float %41)
  %44 = tail call float @llvm.fmuladd.f32(float %29, float %27, float %43)
  %45 = fneg float %44
  %46 = fmul float %31, %45
  %47 = fmul float %46, %1
  %48 = fmul float %33, %47
  %49 = insertelement <2 x float> poison, float %48, i64 0
  %50 = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> zeroinitializer
  %51 = fmul <2 x float> %39, %50
  %52 = fmul float %29, %48
  %53 = fadd <2 x float> %34, %51
  store <2 x float> %53, ptr %16, align 4, !tbaa !137
  %54 = fadd float %24, %52
  store float %54, ptr %23, align 4, !tbaa !137
  %55 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %18, i64 0, i32 6
  %56 = load float, ptr %55, align 8, !tbaa !174
  %57 = fmul float %47, %56
  %58 = load float, ptr %28, align 4, !tbaa !137
  %59 = fmul float %57, %58
  %60 = load <2 x float>, ptr %14, align 4, !tbaa !137
  %61 = insertelement <2 x float> poison, float %57, i64 0
  %62 = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> zeroinitializer
  %63 = fmul <2 x float> %60, %62
  %64 = load <2 x float>, ptr %19, align 4, !tbaa !137
  %65 = fsub <2 x float> %64, %63
  store <2 x float> %65, ptr %19, align 4, !tbaa !137
  %66 = load float, ptr %25, align 4, !tbaa !137
  %67 = fsub float %66, %59
  store float %67, ptr %25, align 4, !tbaa !137
  %68 = add nuw nsw i64 %12, 1
  %69 = icmp eq i64 %68, %9
  br i1 %69, label %10, label %11
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  %3 = alloca %class.btVector3, align 4
  %4 = alloca %class.btVector3, align 4
  %5 = alloca %struct.btDbvtAabbMm, align 8
  %6 = alloca %struct.btDbvtAabbMm, align 4
  %7 = alloca %"struct.btSoftColliders::CollideSDF_RS", align 8
  %8 = alloca %class.btVector3, align 4
  %9 = alloca %class.btVector3, align 4
  %10 = alloca %struct.btDbvtAabbMm, align 8
  %11 = alloca %struct.btDbvtAabbMm, align 4
  %12 = alloca %"struct.btSoftColliders::CollideCL_RS", align 8
  %13 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 25
  %14 = load i32, ptr %13, align 4, !tbaa !141
  %15 = and i32 %14, 15
  switch i32 %15, label %128 [
    i32 1, label %16
    i32 2, label %78
  ]

16:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %7) #38
  store ptr getelementptr inbounds ({ [9 x ptr] }, ptr @_ZTVN15btSoftColliders13CollideSDF_RSE, i64 0, inrange i32 0, i64 2), ptr %7, align 8, !tbaa !5
  %17 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 19
  %18 = load i32, ptr %17, align 8, !tbaa !134
  %19 = icmp eq i32 %18, 2
  %20 = select i1 %19, ptr %1, ptr null
  %21 = icmp eq ptr %20, null
  %22 = getelementptr inbounds %class.btCollisionObject, ptr %20, i64 0, i32 2
  %23 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 1
  %24 = select i1 %21, ptr %23, ptr %22
  %25 = getelementptr inbounds %class.btTransform, ptr %24, i64 0, i32 1
  %26 = load float, ptr %25, align 4, !tbaa.struct !162
  %27 = getelementptr inbounds %class.btTransform, ptr %24, i64 0, i32 1, i32 0, i64 1
  %28 = load float, ptr %27, align 4, !tbaa.struct !293
  %29 = getelementptr inbounds %class.btTransform, ptr %24, i64 0, i32 1, i32 0, i64 2
  %30 = load float, ptr %29, align 4, !tbaa.struct !164
  %31 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 1, i32 1
  %32 = load float, ptr %31, align 4, !tbaa.struct !162
  %33 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 1, i32 1, i32 0, i64 1
  %34 = load float, ptr %33, align 4, !tbaa.struct !293
  %35 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 1, i32 1, i32 0, i64 2
  %36 = load float, ptr %35, align 4, !tbaa.struct !164
  %37 = fsub float %26, %32
  %38 = fsub float %28, %34
  %39 = fsub float %30, %36
  %40 = fmul float %38, %38
  %41 = tail call float @llvm.fmuladd.f32(float %37, float %37, float %40)
  %42 = tail call float @llvm.fmuladd.f32(float %39, float %39, float %41)
  %43 = tail call float @llvm.sqrt.f32(float %42)
  %44 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %45 = load ptr, ptr %44, align 8, !tbaa !157
  %46 = load ptr, ptr %45, align 8, !tbaa !5
  %47 = getelementptr inbounds ptr, ptr %46, i64 11
  %48 = load ptr, ptr %47, align 8
  %49 = tail call noundef float %48(ptr noundef nonnull align 8 dereferenceable(24) %45)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #38
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9) #38
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %10) #38
  %50 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !157
  %52 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 2
  %53 = load ptr, ptr %51, align 8, !tbaa !5
  %54 = getelementptr inbounds ptr, ptr %53, i64 2
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr noundef nonnull align 8 dereferenceable(24) %51, ptr noundef nonnull align 4 dereferenceable(64) %52, ptr noundef nonnull align 4 dereferenceable(16) %8, ptr noundef nonnull align 4 dereferenceable(16) %9)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %11, ptr noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false), !tbaa.struct !162
  %56 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %11, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %56, ptr noundef nonnull align 4 dereferenceable(16) %9, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 4 dereferenceable(32) %11, i64 32, i1 false), !tbaa.struct !297
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %11)
  %57 = load <2 x float>, ptr %10, align 8, !tbaa !137
  %58 = insertelement <2 x float> poison, float %49, i64 0
  %59 = shufflevector <2 x float> %58, <2 x float> poison, <2 x i32> zeroinitializer
  %60 = fsub <2 x float> %57, %59
  store <2 x float> %60, ptr %10, align 8, !tbaa !137
  %61 = getelementptr inbounds [4 x float], ptr %10, i64 0, i64 2
  %62 = load float, ptr %61, align 8, !tbaa !137
  %63 = fsub float %62, %49
  store float %63, ptr %61, align 8, !tbaa !137
  %64 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %10, i64 0, i32 1
  %65 = load <2 x float>, ptr %64, align 8, !tbaa !137
  %66 = fadd <2 x float> %59, %65
  store <2 x float> %66, ptr %64, align 8, !tbaa !137
  %67 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %10, i64 0, i32 1, i32 0, i64 2
  %68 = load float, ptr %67, align 8, !tbaa !137
  %69 = fadd float %49, %68
  store float %69, ptr %67, align 8, !tbaa !137
  %70 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %7, i64 0, i32 1
  store ptr %0, ptr %70, align 8, !tbaa !567
  %71 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %7, i64 0, i32 2
  store ptr %1, ptr %71, align 8, !tbaa !569
  %72 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %7, i64 0, i32 3
  store ptr %20, ptr %72, align 8, !tbaa !570
  %73 = fadd float %49, %43
  %74 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %7, i64 0, i32 4
  store float %73, ptr %74, align 8, !tbaa !571
  %75 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %7, i64 0, i32 5
  store float %49, ptr %75, align 4, !tbaa !572
  %76 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %77 = load ptr, ptr %76, align 8, !tbaa !161
  call void @_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(ptr noundef nonnull align 8 dereferenceable(64) %76, ptr noundef %77, ptr noundef nonnull align 4 dereferenceable(32) %10, ptr noundef nonnull align 8 dereferenceable(8) %7)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %10) #38
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #38
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #38
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %7) #38
  br label %128

78:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %12) #38
  %79 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %12, i64 0, i32 1
  store float 1.000000e+00, ptr %79, align 8, !tbaa !573
  %80 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %12, i64 0, i32 2
  %81 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %12, i64 0, i32 5
  store i32 0, ptr %81, align 8
  store ptr getelementptr inbounds ({ [9 x ptr] }, ptr @_ZTVN15btSoftColliders12CollideCL_RSE, i64 0, inrange i32 0, i64 2), ptr %12, align 8, !tbaa !5
  %82 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_RS", ptr %12, i64 0, i32 1
  store ptr %0, ptr %82, align 8, !tbaa !575
  %83 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_RS", ptr %12, i64 0, i32 2
  store ptr %1, ptr %83, align 8, !tbaa !577
  %84 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 1
  %85 = load float, ptr %84, align 4, !tbaa !419
  store float %85, ptr %80, align 4, !tbaa !578
  %86 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 9
  %87 = load ptr, ptr %86, align 8, !tbaa !157
  %88 = load ptr, ptr %87, align 8, !tbaa !5
  %89 = getelementptr inbounds ptr, ptr %88, i64 11
  %90 = load ptr, ptr %89, align 8
  %91 = tail call noundef float %90(ptr noundef nonnull align 8 dereferenceable(24) %87)
  %92 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %93 = load ptr, ptr %92, align 8, !tbaa !157
  %94 = load ptr, ptr %93, align 8, !tbaa !5
  %95 = getelementptr inbounds ptr, ptr %94, i64 11
  %96 = load ptr, ptr %95, align 8
  %97 = tail call noundef float %96(ptr noundef nonnull align 8 dereferenceable(24) %93)
  %98 = fadd float %91, %97
  %99 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %12, i64 0, i32 3
  store float %98, ptr %99, align 8, !tbaa !579
  %100 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 7
  %101 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 16
  %102 = load float, ptr %101, align 4, !tbaa !580
  %103 = load float, ptr %100, align 4, !tbaa !137
  %104 = fcmp olt float %103, %102
  %105 = select i1 %104, float %103, float %102
  %106 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %12, i64 0, i32 4
  store float %105, ptr %106, align 4, !tbaa !581
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #38
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #38
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #38
  %107 = load ptr, ptr %86, align 8, !tbaa !157
  %108 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 2
  %109 = load ptr, ptr %107, align 8, !tbaa !5
  %110 = getelementptr inbounds ptr, ptr %109, i64 2
  %111 = load ptr, ptr %110, align 8
  call void %111(ptr noundef nonnull align 8 dereferenceable(24) %107, ptr noundef nonnull align 4 dereferenceable(64) %108, ptr noundef nonnull align 4 dereferenceable(16) %3, ptr noundef nonnull align 4 dereferenceable(16) %4)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %6, ptr noundef nonnull align 4 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !162
  %112 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %6, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %112, ptr noundef nonnull align 4 dereferenceable(16) %4, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 4 dereferenceable(32) %6, i64 32, i1 false), !tbaa.struct !297
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6)
  %113 = load <2 x float>, ptr %5, align 8, !tbaa !137
  %114 = insertelement <2 x float> poison, float %98, i64 0
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer
  %116 = fsub <2 x float> %113, %115
  store <2 x float> %116, ptr %5, align 8, !tbaa !137
  %117 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %118 = load float, ptr %117, align 8, !tbaa !137
  %119 = fsub float %118, %98
  store float %119, ptr %117, align 8, !tbaa !137
  %120 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %5, i64 0, i32 1
  %121 = load <2 x float>, ptr %120, align 8, !tbaa !137
  %122 = fadd <2 x float> %115, %121
  store <2 x float> %122, ptr %120, align 8, !tbaa !137
  %123 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %5, i64 0, i32 1, i32 0, i64 2
  %124 = load float, ptr %123, align 8, !tbaa !137
  %125 = fadd float %98, %124
  store float %125, ptr %123, align 8, !tbaa !137
  %126 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  %127 = load ptr, ptr %126, align 8, !tbaa !582
  call void @_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(ptr noundef nonnull align 8 dereferenceable(64) %126, ptr noundef %127, ptr noundef nonnull align 4 dereferenceable(32) %5, ptr noundef nonnull align 8 dereferenceable(8) %12)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #38
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #38
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #38
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %12) #38
  br label %128

128:                                              ; preds = %2, %78, %16
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(ptr noundef nonnull align 8 dereferenceable(64) %0, ptr noundef %1, ptr noundef nonnull align 4 dereferenceable(32) %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  %5 = icmp eq ptr %1, null
  br i1 %5, label %230, label %6

6:                                                ; preds = %4
  %7 = load float, ptr %2, align 4, !tbaa.struct !297
  %8 = getelementptr inbounds i8, ptr %2, i64 4
  %9 = load float, ptr %8, align 4, !tbaa.struct !583
  %10 = getelementptr inbounds i8, ptr %2, i64 8
  %11 = load float, ptr %10, align 4, !tbaa.struct !298
  %12 = getelementptr inbounds i8, ptr %2, i64 16
  %13 = load float, ptr %12, align 4, !tbaa.struct !162
  %14 = getelementptr inbounds i8, ptr %2, i64 20
  %15 = load float, ptr %14, align 4, !tbaa.struct !293
  %16 = getelementptr inbounds i8, ptr %2, i64 24
  %17 = load float, ptr %16, align 4, !tbaa.struct !164
  %18 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 512, i32 noundef 16)
  store ptr %1, ptr %18, align 8, !tbaa !219
  br label %19

19:                                               ; preds = %6, %220
  %20 = phi i32 [ 64, %6 ], [ %221, %220 ]
  %21 = phi i32 [ 1, %6 ], [ %222, %220 ]
  %22 = phi ptr [ %18, %6 ], [ %223, %220 ]
  %23 = ptrtoint ptr %22 to i64
  %24 = add nsw i32 %21, -1
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !219
  %28 = load float, ptr %27, align 4, !tbaa !137
  %29 = fcmp ugt float %28, %13
  br i1 %29, label %220, label %30

30:                                               ; preds = %19
  %31 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %27, i64 0, i32 1
  %32 = load float, ptr %31, align 4, !tbaa !137
  %33 = fcmp ult float %32, %7
  br i1 %33, label %220, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds [4 x float], ptr %27, i64 0, i64 1
  %36 = load float, ptr %35, align 4, !tbaa !137
  %37 = fcmp ugt float %36, %15
  br i1 %37, label %220, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %27, i64 0, i32 1, i32 0, i64 1
  %40 = load float, ptr %39, align 4, !tbaa !137
  %41 = fcmp ult float %40, %9
  br i1 %41, label %220, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds [4 x float], ptr %27, i64 0, i64 2
  %44 = load float, ptr %43, align 4, !tbaa !137
  %45 = fcmp ugt float %44, %17
  br i1 %45, label %220, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %27, i64 0, i32 1, i32 0, i64 2
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fcmp ult float %48, %11
  br i1 %49, label %220, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.btDbvtNode, ptr %27, i64 0, i32 2, i32 0, i64 1
  %52 = load ptr, ptr %51, align 8, !tbaa !163
  %53 = icmp eq ptr %52, null
  br i1 %53, label %216, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.btDbvtNode, ptr %27, i64 0, i32 2
  %56 = icmp eq i32 %24, %20
  br i1 %56, label %57, label %129

57:                                               ; preds = %54
  %58 = icmp eq i32 %20, 0
  %59 = shl nuw nsw i32 %20, 1
  %60 = select i1 %58, i32 1, i32 %59
  %61 = icmp sgt i32 %21, %60
  br i1 %61, label %129, label %62

62:                                               ; preds = %57
  %63 = icmp eq i32 %60, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %62
  %65 = sext i32 %60 to i64
  %66 = shl nsw i64 %65, 3
  %67 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %66, i32 noundef 16)
          to label %68 unwind label %226

68:                                               ; preds = %64, %62
  %69 = phi ptr [ null, %62 ], [ %67, %64 ]
  br i1 %58, label %128, label %70

70:                                               ; preds = %68
  %71 = ptrtoint ptr %69 to i64
  %72 = zext i32 %20 to i64
  %73 = icmp ult i32 %20, 6
  %74 = sub i64 %71, %23
  %75 = icmp ult i64 %74, 32
  %76 = select i1 %73, i1 true, i1 %75
  br i1 %76, label %91, label %77

77:                                               ; preds = %70
  %78 = and i64 %72, 4294967292
  br label %79

79:                                               ; preds = %79, %77
  %80 = phi i64 [ 0, %77 ], [ %87, %79 ]
  %81 = getelementptr inbounds ptr, ptr %69, i64 %80
  %82 = getelementptr inbounds ptr, ptr %22, i64 %80
  %83 = load <2 x ptr>, ptr %82, align 8, !tbaa !219
  %84 = getelementptr inbounds ptr, ptr %82, i64 2
  %85 = load <2 x ptr>, ptr %84, align 8, !tbaa !219
  store <2 x ptr> %83, ptr %81, align 8, !tbaa !219
  %86 = getelementptr inbounds ptr, ptr %81, i64 2
  store <2 x ptr> %85, ptr %86, align 8, !tbaa !219
  %87 = add nuw i64 %80, 4
  %88 = icmp eq i64 %87, %78
  br i1 %88, label %89, label %79, !llvm.loop !584

89:                                               ; preds = %79
  %90 = icmp eq i64 %78, %72
  br i1 %90, label %128, label %91

91:                                               ; preds = %70, %89
  %92 = phi i64 [ 0, %70 ], [ %78, %89 ]
  %93 = xor i64 %92, -1
  %94 = add nsw i64 %93, %72
  %95 = and i64 %72, 3
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %106, label %97

97:                                               ; preds = %91, %97
  %98 = phi i64 [ %103, %97 ], [ %92, %91 ]
  %99 = phi i64 [ %104, %97 ], [ 0, %91 ]
  %100 = getelementptr inbounds ptr, ptr %69, i64 %98
  %101 = getelementptr inbounds ptr, ptr %22, i64 %98
  %102 = load ptr, ptr %101, align 8, !tbaa !219
  store ptr %102, ptr %100, align 8, !tbaa !219
  %103 = add nuw nsw i64 %98, 1
  %104 = add i64 %99, 1
  %105 = icmp eq i64 %104, %95
  br i1 %105, label %106, label %97, !llvm.loop !585

106:                                              ; preds = %97, %91
  %107 = phi i64 [ %92, %91 ], [ %103, %97 ]
  %108 = icmp ult i64 %94, 3
  br i1 %108, label %128, label %109

109:                                              ; preds = %106, %109
  %110 = phi i64 [ %126, %109 ], [ %107, %106 ]
  %111 = getelementptr inbounds ptr, ptr %69, i64 %110
  %112 = getelementptr inbounds ptr, ptr %22, i64 %110
  %113 = load ptr, ptr %112, align 8, !tbaa !219
  store ptr %113, ptr %111, align 8, !tbaa !219
  %114 = add nuw nsw i64 %110, 1
  %115 = getelementptr inbounds ptr, ptr %69, i64 %114
  %116 = getelementptr inbounds ptr, ptr %22, i64 %114
  %117 = load ptr, ptr %116, align 8, !tbaa !219
  store ptr %117, ptr %115, align 8, !tbaa !219
  %118 = add nuw nsw i64 %110, 2
  %119 = getelementptr inbounds ptr, ptr %69, i64 %118
  %120 = getelementptr inbounds ptr, ptr %22, i64 %118
  %121 = load ptr, ptr %120, align 8, !tbaa !219
  store ptr %121, ptr %119, align 8, !tbaa !219
  %122 = add nuw nsw i64 %110, 3
  %123 = getelementptr inbounds ptr, ptr %69, i64 %122
  %124 = getelementptr inbounds ptr, ptr %22, i64 %122
  %125 = load ptr, ptr %124, align 8, !tbaa !219
  store ptr %125, ptr %123, align 8, !tbaa !219
  %126 = add nuw nsw i64 %110, 4
  %127 = icmp eq i64 %126, %72
  br i1 %127, label %128, label %109, !llvm.loop !586

128:                                              ; preds = %106, %109, %89, %68
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %22)
          to label %129 unwind label %226

129:                                              ; preds = %57, %54, %128
  %130 = phi i32 [ %20, %57 ], [ %20, %54 ], [ %60, %128 ]
  %131 = phi ptr [ %22, %57 ], [ %22, %54 ], [ %69, %128 ]
  %132 = ptrtoint ptr %131 to i64
  %133 = getelementptr inbounds ptr, ptr %131, i64 %25
  %134 = load ptr, ptr %55, align 8, !tbaa !219
  store ptr %134, ptr %133, align 8, !tbaa !219
  %135 = icmp eq i32 %21, %130
  br i1 %135, label %136, label %209

136:                                              ; preds = %129
  %137 = icmp eq i32 %21, 0
  %138 = shl nsw i32 %21, 1
  %139 = select i1 %137, i32 1, i32 %138
  %140 = icmp slt i32 %21, %139
  br i1 %140, label %141, label %209

141:                                              ; preds = %136
  %142 = icmp eq i32 %139, 0
  br i1 %142, label %147, label %143

143:                                              ; preds = %141
  %144 = sext i32 %139 to i64
  %145 = shl nsw i64 %144, 3
  %146 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %145, i32 noundef 16)
          to label %147 unwind label %226

147:                                              ; preds = %143, %141
  %148 = phi ptr [ null, %141 ], [ %146, %143 ]
  %149 = icmp sgt i32 %21, 0
  br i1 %149, label %150, label %208

150:                                              ; preds = %147
  %151 = ptrtoint ptr %148 to i64
  %152 = zext i32 %21 to i64
  %153 = icmp ult i32 %21, 6
  %154 = sub i64 %151, %132
  %155 = icmp ult i64 %154, 32
  %156 = select i1 %153, i1 true, i1 %155
  br i1 %156, label %171, label %157

157:                                              ; preds = %150
  %158 = and i64 %152, 4294967292
  br label %159

159:                                              ; preds = %159, %157
  %160 = phi i64 [ 0, %157 ], [ %167, %159 ]
  %161 = getelementptr inbounds ptr, ptr %148, i64 %160
  %162 = getelementptr inbounds ptr, ptr %131, i64 %160
  %163 = load <2 x ptr>, ptr %162, align 8, !tbaa !219
  %164 = getelementptr inbounds ptr, ptr %162, i64 2
  %165 = load <2 x ptr>, ptr %164, align 8, !tbaa !219
  store <2 x ptr> %163, ptr %161, align 8, !tbaa !219
  %166 = getelementptr inbounds ptr, ptr %161, i64 2
  store <2 x ptr> %165, ptr %166, align 8, !tbaa !219
  %167 = add nuw i64 %160, 4
  %168 = icmp eq i64 %167, %158
  br i1 %168, label %169, label %159, !llvm.loop !587

169:                                              ; preds = %159
  %170 = icmp eq i64 %158, %152
  br i1 %170, label %208, label %171

171:                                              ; preds = %150, %169
  %172 = phi i64 [ 0, %150 ], [ %158, %169 ]
  %173 = xor i64 %172, -1
  %174 = add nsw i64 %173, %152
  %175 = and i64 %152, 3
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %186, label %177

177:                                              ; preds = %171, %177
  %178 = phi i64 [ %183, %177 ], [ %172, %171 ]
  %179 = phi i64 [ %184, %177 ], [ 0, %171 ]
  %180 = getelementptr inbounds ptr, ptr %148, i64 %178
  %181 = getelementptr inbounds ptr, ptr %131, i64 %178
  %182 = load ptr, ptr %181, align 8, !tbaa !219
  store ptr %182, ptr %180, align 8, !tbaa !219
  %183 = add nuw nsw i64 %178, 1
  %184 = add i64 %179, 1
  %185 = icmp eq i64 %184, %175
  br i1 %185, label %186, label %177, !llvm.loop !588

186:                                              ; preds = %177, %171
  %187 = phi i64 [ %172, %171 ], [ %183, %177 ]
  %188 = icmp ult i64 %174, 3
  br i1 %188, label %208, label %189

189:                                              ; preds = %186, %189
  %190 = phi i64 [ %206, %189 ], [ %187, %186 ]
  %191 = getelementptr inbounds ptr, ptr %148, i64 %190
  %192 = getelementptr inbounds ptr, ptr %131, i64 %190
  %193 = load ptr, ptr %192, align 8, !tbaa !219
  store ptr %193, ptr %191, align 8, !tbaa !219
  %194 = add nuw nsw i64 %190, 1
  %195 = getelementptr inbounds ptr, ptr %148, i64 %194
  %196 = getelementptr inbounds ptr, ptr %131, i64 %194
  %197 = load ptr, ptr %196, align 8, !tbaa !219
  store ptr %197, ptr %195, align 8, !tbaa !219
  %198 = add nuw nsw i64 %190, 2
  %199 = getelementptr inbounds ptr, ptr %148, i64 %198
  %200 = getelementptr inbounds ptr, ptr %131, i64 %198
  %201 = load ptr, ptr %200, align 8, !tbaa !219
  store ptr %201, ptr %199, align 8, !tbaa !219
  %202 = add nuw nsw i64 %190, 3
  %203 = getelementptr inbounds ptr, ptr %148, i64 %202
  %204 = getelementptr inbounds ptr, ptr %131, i64 %202
  %205 = load ptr, ptr %204, align 8, !tbaa !219
  store ptr %205, ptr %203, align 8, !tbaa !219
  %206 = add nuw nsw i64 %190, 4
  %207 = icmp eq i64 %206, %152
  br i1 %207, label %208, label %189, !llvm.loop !589

208:                                              ; preds = %186, %189, %169, %147
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %131)
          to label %209 unwind label %226

209:                                              ; preds = %208, %129, %136
  %210 = phi i32 [ %21, %136 ], [ %130, %129 ], [ %139, %208 ]
  %211 = phi ptr [ %131, %136 ], [ %131, %129 ], [ %148, %208 ]
  %212 = sext i32 %21 to i64
  %213 = getelementptr inbounds ptr, ptr %211, i64 %212
  %214 = load ptr, ptr %51, align 8, !tbaa !219
  store ptr %214, ptr %213, align 8, !tbaa !219
  %215 = add nsw i32 %21, 1
  br label %220

216:                                              ; preds = %50
  %217 = load ptr, ptr %3, align 8, !tbaa !5
  %218 = getelementptr inbounds ptr, ptr %217, i64 3
  %219 = load ptr, ptr %218, align 8
  invoke void %219(ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull %27)
          to label %220 unwind label %226

220:                                              ; preds = %19, %30, %34, %38, %42, %209, %216, %46
  %221 = phi i32 [ %210, %209 ], [ %20, %216 ], [ %20, %46 ], [ %20, %42 ], [ %20, %38 ], [ %20, %34 ], [ %20, %30 ], [ %20, %19 ]
  %222 = phi i32 [ %215, %209 ], [ %24, %216 ], [ %24, %46 ], [ %24, %42 ], [ %24, %38 ], [ %24, %34 ], [ %24, %30 ], [ %24, %19 ]
  %223 = phi ptr [ %211, %209 ], [ %22, %216 ], [ %22, %46 ], [ %22, %42 ], [ %22, %38 ], [ %22, %34 ], [ %22, %30 ], [ %22, %19 ]
  %224 = icmp sgt i32 %222, 0
  br i1 %224, label %19, label %225

225:                                              ; preds = %220
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %223)
  br label %230

226:                                              ; preds = %208, %143, %128, %64, %216
  %227 = phi ptr [ %131, %208 ], [ %131, %143 ], [ %22, %128 ], [ %22, %64 ], [ %22, %216 ]
  %228 = landingpad { ptr, i32 }
          cleanup
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %227)
          to label %229 unwind label %231

229:                                              ; preds = %226
  resume { ptr, i32 } %228

230:                                              ; preds = %225, %4
  ret void

231:                                              ; preds = %226
  %232 = landingpad { ptr, i32 }
          catch ptr null
  %233 = extractvalue { ptr, i32 } %232, 0
  tail call void @__clang_call_terminate(ptr %233) #39
  unreachable
}

; Function Attrs: uwtable
define dso_local void @_ZN10btSoftBody23defaultCollisionHandlerEPS_(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1) local_unnamed_addr #4 align 2 personality ptr @__gxx_personality_v0 {
  %3 = alloca %"struct.btSoftColliders::CollideCL_SS", align 8
  %4 = alloca %"struct.btSoftColliders::CollideVF_SS", align 8
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 25
  %6 = load i32, ptr %5, align 4, !tbaa !141
  %7 = getelementptr inbounds %class.btSoftBody, ptr %1, i64 0, i32 2, i32 25
  %8 = load i32, ptr %7, align 4, !tbaa !141
  %9 = and i32 %6, 48
  %10 = and i32 %9, %8
  switch i32 %10, label %76 [
    i32 32, label %11
    i32 16, label %49
  ]

11:                                               ; preds = %2
  %12 = icmp eq ptr %0, %1
  %13 = and i32 %8, 64
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %12, i1 %14, i1 false
  br i1 %15, label %76, label %16

16:                                               ; preds = %11
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %3) #38
  %17 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %3, i64 0, i32 1
  store float 1.000000e+00, ptr %17, align 8, !tbaa !573
  %18 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %3, i64 0, i32 2
  %19 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %3, i64 0, i32 5
  store i32 0, ptr %19, align 8
  store ptr getelementptr inbounds ({ [9 x ptr] }, ptr @_ZTVN15btSoftColliders12CollideCL_SSE, i64 0, inrange i32 0, i64 2), ptr %3, align 8, !tbaa !5
  %20 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 3, i32 1
  %21 = load float, ptr %20, align 4, !tbaa !419
  store float %21, ptr %18, align 4, !tbaa !578
  %22 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %23 = load ptr, ptr %22, align 8, !tbaa !157
  %24 = load ptr, ptr %23, align 8, !tbaa !5
  %25 = getelementptr inbounds ptr, ptr %24, i64 11
  %26 = load ptr, ptr %25, align 8
  %27 = tail call noundef float %26(ptr noundef nonnull align 8 dereferenceable(24) %23)
  %28 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 9
  %29 = load ptr, ptr %28, align 8, !tbaa !157
  %30 = load ptr, ptr %29, align 8, !tbaa !5
  %31 = getelementptr inbounds ptr, ptr %30, i64 11
  %32 = load ptr, ptr %31, align 8
  %33 = tail call noundef float %32(ptr noundef nonnull align 8 dereferenceable(24) %29)
  %34 = fadd float %27, %33
  %35 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %3, i64 0, i32 3
  store float %34, ptr %35, align 8, !tbaa !579
  %36 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %class.btSoftBody, ptr %1, i64 0, i32 2, i32 7
  %38 = load float, ptr %36, align 4
  %39 = load float, ptr %37, align 4
  %40 = fcmp olt float %38, %39
  %41 = select i1 %40, float %38, float %39
  %42 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %3, i64 0, i32 4
  store float %41, ptr %42, align 4, !tbaa !581
  %43 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_SS", ptr %3, i64 0, i32 1
  store ptr %0, ptr %43, align 8, !tbaa !219
  %44 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_SS", ptr %3, i64 0, i32 1, i64 1
  store ptr %1, ptr %44, align 8, !tbaa !219
  %45 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 23
  %46 = load ptr, ptr %45, align 8, !tbaa !582
  %47 = getelementptr inbounds %class.btSoftBody, ptr %1, i64 0, i32 23
  %48 = load ptr, ptr %47, align 8, !tbaa !582
  call void @_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE(ptr noundef nonnull align 8 dereferenceable(64) %45, ptr noundef %46, ptr noundef %48, ptr noundef nonnull align 8 dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #38
  br label %76

49:                                               ; preds = %2
  %50 = icmp eq ptr %0, %1
  br i1 %50, label %76, label %51

51:                                               ; preds = %49
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #38
  store ptr getelementptr inbounds ({ [9 x ptr] }, ptr @_ZTVN15btSoftColliders12CollideVF_SSE, i64 0, inrange i32 0, i64 2), ptr %4, align 8, !tbaa !5
  %52 = getelementptr inbounds %class.btCollisionObject, ptr %0, i64 0, i32 9
  %53 = load ptr, ptr %52, align 8, !tbaa !157
  %54 = load ptr, ptr %53, align 8, !tbaa !5
  %55 = getelementptr inbounds ptr, ptr %54, i64 11
  %56 = load ptr, ptr %55, align 8
  %57 = tail call noundef float %56(ptr noundef nonnull align 8 dereferenceable(24) %53)
  %58 = getelementptr inbounds %class.btCollisionObject, ptr %1, i64 0, i32 9
  %59 = load ptr, ptr %58, align 8, !tbaa !157
  %60 = load ptr, ptr %59, align 8, !tbaa !5
  %61 = getelementptr inbounds ptr, ptr %60, i64 11
  %62 = load ptr, ptr %61, align 8
  %63 = tail call noundef float %62(ptr noundef nonnull align 8 dereferenceable(24) %59)
  %64 = fadd float %57, %63
  %65 = getelementptr inbounds %"struct.btSoftColliders::CollideVF_SS", ptr %4, i64 0, i32 2
  store float %64, ptr %65, align 8, !tbaa !590
  %66 = getelementptr inbounds %"struct.btSoftColliders::CollideVF_SS", ptr %4, i64 0, i32 1
  store ptr %0, ptr %66, align 8, !tbaa !219
  %67 = getelementptr inbounds %"struct.btSoftColliders::CollideVF_SS", ptr %4, i64 0, i32 1, i64 1
  store ptr %1, ptr %67, align 8, !tbaa !219
  %68 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 21
  %69 = load ptr, ptr %68, align 8, !tbaa !161
  %70 = getelementptr inbounds %class.btSoftBody, ptr %1, i64 0, i32 22
  %71 = load ptr, ptr %70, align 8, !tbaa !592
  call void @_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE(ptr noundef nonnull align 8 dereferenceable(64) %68, ptr noundef %69, ptr noundef %71, ptr noundef nonnull align 8 dereferenceable(8) %4)
  store ptr %1, ptr %66, align 8, !tbaa !219
  store ptr %0, ptr %67, align 8, !tbaa !219
  %72 = getelementptr inbounds %class.btSoftBody, ptr %1, i64 0, i32 21
  %73 = load ptr, ptr %72, align 8, !tbaa !161
  %74 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 22
  %75 = load ptr, ptr %74, align 8, !tbaa !592
  call void @_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE(ptr noundef nonnull align 8 dereferenceable(64) %72, ptr noundef %73, ptr noundef %75, ptr noundef nonnull align 8 dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #38
  br label %76

76:                                               ; preds = %11, %2, %49, %51, %16
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE(ptr noundef nonnull align 8 dereferenceable(64) %0, ptr noundef %1, ptr noundef %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  %5 = alloca %"struct.btDbvt::sStkNN", align 8
  %6 = icmp ne ptr %1, null
  %7 = icmp ne ptr %2, null
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %227

9:                                                ; preds = %4
  %10 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 2048, i32 noundef 16)
  store ptr %1, ptr %10, align 8, !tbaa.struct !593
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %2, ptr %11, align 8, !tbaa.struct !594
  br label %12

12:                                               ; preds = %219, %9
  %13 = phi i32 [ 128, %9 ], [ %103, %219 ]
  %14 = phi i32 [ 128, %9 ], [ %104, %219 ]
  %15 = phi ptr [ %10, %9 ], [ %105, %219 ]
  %16 = phi i32 [ 124, %9 ], [ %106, %219 ]
  %17 = phi i32 [ 1, %9 ], [ %220, %219 ]
  %18 = add nsw i32 %17, -1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %15, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa.struct !593
  %22 = getelementptr inbounds i8, ptr %20, i64 8
  %23 = load ptr, ptr %22, align 8, !tbaa.struct !594
  %24 = icmp sgt i32 %18, %16
  br i1 %24, label %25, label %102

25:                                               ; preds = %12
  %26 = shl nsw i32 %13, 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  %27 = icmp slt i32 %13, %26
  br i1 %27, label %28, label %94

28:                                               ; preds = %25
  %29 = icmp slt i32 %14, %26
  br i1 %29, label %30, label %63

30:                                               ; preds = %28
  %31 = icmp eq i32 %13, 0
  br i1 %31, label %61, label %32

32:                                               ; preds = %30
  %33 = sext i32 %26 to i64
  %34 = shl nsw i64 %33, 4
  %35 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %34, i32 noundef 16)
          to label %36 unwind label %100

36:                                               ; preds = %32
  %37 = icmp sgt i32 %13, 0
  br i1 %37, label %38, label %61

38:                                               ; preds = %36
  %39 = zext i32 %13 to i64
  %40 = and i64 %39, 1
  %41 = icmp eq i32 %13, 1
  br i1 %41, label %55, label %42

42:                                               ; preds = %38
  %43 = and i64 %39, 4294967294
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi i64 [ 0, %42 ], [ %52, %44 ]
  %46 = phi i64 [ 0, %42 ], [ %53, %44 ]
  %47 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %35, i64 %45
  %48 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %15, i64 %45
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %47, ptr noundef nonnull align 8 dereferenceable(16) %48, i64 16, i1 false), !tbaa.struct !593
  %49 = or i64 %45, 1
  %50 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %35, i64 %49
  %51 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %15, i64 %49
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %50, ptr noundef nonnull align 8 dereferenceable(16) %51, i64 16, i1 false), !tbaa.struct !593
  %52 = add nuw nsw i64 %45, 2
  %53 = add i64 %46, 2
  %54 = icmp eq i64 %53, %43
  br i1 %54, label %55, label %44

55:                                               ; preds = %44, %38
  %56 = phi i64 [ 0, %38 ], [ %52, %44 ]
  %57 = icmp eq i64 %40, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %35, i64 %56
  %60 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %15, i64 %56
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %59, ptr noundef nonnull align 8 dereferenceable(16) %60, i64 16, i1 false), !tbaa.struct !593
  br label %61

61:                                               ; preds = %58, %55, %30, %36
  %62 = phi ptr [ %35, %36 ], [ null, %30 ], [ %35, %55 ], [ %35, %58 ]
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %15)
          to label %63 unwind label %100

63:                                               ; preds = %61, %28
  %64 = phi i32 [ %14, %28 ], [ %26, %61 ]
  %65 = phi ptr [ %15, %28 ], [ %62, %61 ]
  %66 = sext i32 %13 to i64
  %67 = sext i32 %26 to i64
  %68 = sub nsw i64 %67, %66
  %69 = xor i64 %66, -1
  %70 = add nsw i64 %69, %67
  %71 = and i64 %68, 3
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %63, %73
  %74 = phi i64 [ %77, %73 ], [ %66, %63 ]
  %75 = phi i64 [ %78, %73 ], [ 0, %63 ]
  %76 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %65, i64 %74
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %76, ptr noundef nonnull align 8 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !593
  %77 = add nsw i64 %74, 1
  %78 = add i64 %75, 1
  %79 = icmp eq i64 %78, %71
  br i1 %79, label %80, label %73, !llvm.loop !595

80:                                               ; preds = %73, %63
  %81 = phi i64 [ %66, %63 ], [ %77, %73 ]
  %82 = icmp ult i64 %70, 3
  br i1 %82, label %94, label %83

83:                                               ; preds = %80, %83
  %84 = phi i64 [ %92, %83 ], [ %81, %80 ]
  %85 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %65, i64 %84
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %85, ptr noundef nonnull align 8 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !593
  %86 = add nsw i64 %84, 1
  %87 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %65, i64 %86
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %87, ptr noundef nonnull align 8 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !593
  %88 = add nsw i64 %84, 2
  %89 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %65, i64 %88
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %89, ptr noundef nonnull align 8 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !593
  %90 = add nsw i64 %84, 3
  %91 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %65, i64 %90
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %91, ptr noundef nonnull align 8 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !593
  %92 = add nsw i64 %84, 4
  %93 = icmp eq i64 %92, %67
  br i1 %93, label %94, label %83

94:                                               ; preds = %80, %83, %25
  %95 = phi i32 [ %14, %25 ], [ %64, %83 ], [ %64, %80 ]
  %96 = phi ptr [ %15, %25 ], [ %65, %83 ], [ %65, %80 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  %97 = add nsw i32 %26, -4
  br label %102

98:                                               ; preds = %210
  %99 = landingpad { ptr, i32 }
          cleanup
  br label %223

100:                                              ; preds = %61, %32
  %101 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  br label %223

102:                                              ; preds = %94, %12
  %103 = phi i32 [ %26, %94 ], [ %13, %12 ]
  %104 = phi i32 [ %95, %94 ], [ %14, %12 ]
  %105 = phi ptr [ %96, %94 ], [ %15, %12 ]
  %106 = phi i32 [ %97, %94 ], [ %16, %12 ]
  %107 = icmp eq ptr %21, %23
  br i1 %107, label %108, label %127

108:                                              ; preds = %102
  %109 = getelementptr inbounds %struct.btDbvtNode, ptr %21, i64 0, i32 2, i32 0, i64 1
  %110 = load ptr, ptr %109, align 8, !tbaa !163
  %111 = icmp eq ptr %110, null
  br i1 %111, label %219, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.btDbvtNode, ptr %21, i64 0, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !163
  %115 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %19
  store ptr %114, ptr %115, align 8, !tbaa.struct !593
  %116 = getelementptr inbounds i8, ptr %115, i64 8
  store ptr %114, ptr %116, align 8, !tbaa.struct !594
  %117 = load ptr, ptr %109, align 8, !tbaa !163
  %118 = add nsw i32 %17, 1
  %119 = sext i32 %17 to i64
  %120 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %119
  store ptr %117, ptr %120, align 8, !tbaa.struct !593
  %121 = getelementptr inbounds i8, ptr %120, i64 8
  store ptr %117, ptr %121, align 8, !tbaa.struct !594
  %122 = load ptr, ptr %113, align 8, !tbaa !163
  %123 = load ptr, ptr %109, align 8, !tbaa !163
  %124 = add nsw i32 %17, 2
  %125 = sext i32 %118 to i64
  %126 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %125
  store ptr %122, ptr %126, align 8, !tbaa.struct !593
  br label %214

127:                                              ; preds = %102
  %128 = load float, ptr %21, align 4, !tbaa !137
  %129 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %23, i64 0, i32 1
  %130 = load float, ptr %129, align 4, !tbaa !137
  %131 = fcmp ugt float %128, %130
  br i1 %131, label %219, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %21, i64 0, i32 1
  %134 = load float, ptr %133, align 4, !tbaa !137
  %135 = load float, ptr %23, align 4, !tbaa !137
  %136 = fcmp ult float %134, %135
  br i1 %136, label %219, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds [4 x float], ptr %21, i64 0, i64 1
  %139 = load float, ptr %138, align 4, !tbaa !137
  %140 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %23, i64 0, i32 1, i32 0, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !137
  %142 = fcmp ugt float %139, %141
  br i1 %142, label %219, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %21, i64 0, i32 1, i32 0, i64 1
  %145 = load float, ptr %144, align 4, !tbaa !137
  %146 = getelementptr inbounds [4 x float], ptr %23, i64 0, i64 1
  %147 = load float, ptr %146, align 4, !tbaa !137
  %148 = fcmp ult float %145, %147
  br i1 %148, label %219, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds [4 x float], ptr %21, i64 0, i64 2
  %151 = load float, ptr %150, align 4, !tbaa !137
  %152 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %23, i64 0, i32 1, i32 0, i64 2
  %153 = load float, ptr %152, align 4, !tbaa !137
  %154 = fcmp ugt float %151, %153
  br i1 %154, label %219, label %155

155:                                              ; preds = %149
  %156 = getelementptr inbounds %struct.btDbvtAabbMm, ptr %21, i64 0, i32 1, i32 0, i64 2
  %157 = load float, ptr %156, align 4, !tbaa !137
  %158 = getelementptr inbounds [4 x float], ptr %23, i64 0, i64 2
  %159 = load float, ptr %158, align 4, !tbaa !137
  %160 = fcmp ult float %157, %159
  br i1 %160, label %219, label %161

161:                                              ; preds = %155
  %162 = getelementptr inbounds %struct.btDbvtNode, ptr %21, i64 0, i32 2, i32 0, i64 1
  %163 = load ptr, ptr %162, align 8, !tbaa !163
  %164 = icmp eq ptr %163, null
  %165 = getelementptr inbounds %struct.btDbvtNode, ptr %23, i64 0, i32 2, i32 0, i64 1
  %166 = load ptr, ptr %165, align 8, !tbaa !163
  %167 = icmp eq ptr %166, null
  br i1 %164, label %200, label %168

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.btDbvtNode, ptr %21, i64 0, i32 2
  %170 = load ptr, ptr %169, align 8, !tbaa !163
  br i1 %167, label %193, label %171

171:                                              ; preds = %168
  %172 = getelementptr inbounds %struct.btDbvtNode, ptr %23, i64 0, i32 2
  %173 = load ptr, ptr %172, align 8, !tbaa !163
  %174 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %19
  store ptr %170, ptr %174, align 8, !tbaa.struct !593
  %175 = getelementptr inbounds i8, ptr %174, i64 8
  store ptr %173, ptr %175, align 8, !tbaa.struct !594
  %176 = load ptr, ptr %162, align 8, !tbaa !163
  %177 = load ptr, ptr %172, align 8, !tbaa !163
  %178 = add nsw i32 %17, 1
  %179 = sext i32 %17 to i64
  %180 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %179
  store ptr %176, ptr %180, align 8, !tbaa.struct !593
  %181 = getelementptr inbounds i8, ptr %180, i64 8
  store ptr %177, ptr %181, align 8, !tbaa.struct !594
  %182 = load ptr, ptr %169, align 8, !tbaa !163
  %183 = load ptr, ptr %165, align 8, !tbaa !163
  %184 = add nsw i32 %17, 2
  %185 = sext i32 %178 to i64
  %186 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %185
  store ptr %182, ptr %186, align 8, !tbaa.struct !593
  %187 = getelementptr inbounds i8, ptr %186, i64 8
  store ptr %183, ptr %187, align 8, !tbaa.struct !594
  %188 = load ptr, ptr %162, align 8, !tbaa !163
  %189 = load ptr, ptr %165, align 8, !tbaa !163
  %190 = add nsw i32 %17, 3
  %191 = sext i32 %184 to i64
  %192 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %191
  store ptr %188, ptr %192, align 8, !tbaa.struct !593
  br label %214

193:                                              ; preds = %168
  %194 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %19
  store ptr %170, ptr %194, align 8, !tbaa.struct !593
  %195 = getelementptr inbounds i8, ptr %194, i64 8
  store ptr %23, ptr %195, align 8, !tbaa.struct !594
  %196 = load ptr, ptr %162, align 8, !tbaa !163
  %197 = add nsw i32 %17, 1
  %198 = sext i32 %17 to i64
  %199 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %198
  store ptr %196, ptr %199, align 8, !tbaa.struct !593
  br label %214

200:                                              ; preds = %161
  br i1 %167, label %210, label %201

201:                                              ; preds = %200
  %202 = getelementptr inbounds %struct.btDbvtNode, ptr %23, i64 0, i32 2
  %203 = load ptr, ptr %202, align 8, !tbaa !163
  %204 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %19
  store ptr %21, ptr %204, align 8, !tbaa.struct !593
  %205 = getelementptr inbounds i8, ptr %204, i64 8
  store ptr %203, ptr %205, align 8, !tbaa.struct !594
  %206 = load ptr, ptr %165, align 8, !tbaa !163
  %207 = add nsw i32 %17, 1
  %208 = sext i32 %17 to i64
  %209 = getelementptr inbounds %"struct.btDbvt::sStkNN", ptr %105, i64 %208
  store ptr %21, ptr %209, align 8, !tbaa.struct !593
  br label %214

210:                                              ; preds = %200
  %211 = load ptr, ptr %3, align 8, !tbaa !5
  %212 = getelementptr inbounds ptr, ptr %211, i64 2
  %213 = load ptr, ptr %212, align 8
  invoke void %213(ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull %21, ptr noundef nonnull %23)
          to label %219 unwind label %98

214:                                              ; preds = %112, %193, %171, %201
  %215 = phi ptr [ %209, %201 ], [ %192, %171 ], [ %199, %193 ], [ %126, %112 ]
  %216 = phi ptr [ %206, %201 ], [ %189, %171 ], [ %23, %193 ], [ %123, %112 ]
  %217 = phi i32 [ %207, %201 ], [ %190, %171 ], [ %197, %193 ], [ %124, %112 ]
  %218 = getelementptr inbounds i8, ptr %215, i64 8
  store ptr %216, ptr %218, align 8
  br label %219

219:                                              ; preds = %214, %127, %132, %137, %143, %149, %155, %210, %108
  %220 = phi i32 [ %18, %108 ], [ %18, %210 ], [ %18, %155 ], [ %18, %149 ], [ %18, %143 ], [ %18, %137 ], [ %18, %132 ], [ %18, %127 ], [ %217, %214 ]
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %12

222:                                              ; preds = %219
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %105)
  br label %227

223:                                              ; preds = %100, %98
  %224 = phi ptr [ %105, %98 ], [ %15, %100 ]
  %225 = phi { ptr, i32 } [ %99, %98 ], [ %101, %100 ]
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %224)
          to label %226 unwind label %228

226:                                              ; preds = %223
  resume { ptr, i32 } %225

227:                                              ; preds = %222, %4
  ret void

228:                                              ; preds = %223
  %229 = landingpad { ptr, i32 }
          catch ptr null
  %230 = extractvalue { ptr, i32 } %229, 0
  tail call void @__clang_call_terminate(ptr %230) #39
  unreachable
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody5JointD0Ev(ptr noundef nonnull align 8 dereferenceable(181) %0) unnamed_addr #29 comdat align 2 {
  tail call void @llvm.trap() #39
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody5JointD2Ev(ptr noundef nonnull align 8 dereferenceable(181) %0) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody6CJointD0Ev(ptr noundef nonnull align 8 dereferenceable(244) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef i32 @_ZNK10btSoftBody6CJoint4TypeEv(ptr noundef nonnull align 8 dereferenceable(244) %0) unnamed_addr #29 comdat align 2 {
  ret i32 2
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN17btCollisionObject24checkCollideWithOverrideEPS_(ptr noundef nonnull align 8 dereferenceable(280) %0, ptr noundef %1) unnamed_addr #29 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef %1) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNK10btSoftBody7getAabbER9btVector3S1_(ptr noundef nonnull align 8 dereferenceable(1496) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2) unnamed_addr #29 comdat align 2 {
  %4 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %4, i64 16, i1 false), !tbaa.struct !162
  %5 = getelementptr inbounds %class.btSoftBody, ptr %0, i64 0, i32 19, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !162
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody6LJointD0Ev(ptr noundef nonnull align 8 dereferenceable(216) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef i32 @_ZNK10btSoftBody6LJoint4TypeEv(ptr noundef nonnull align 8 dereferenceable(216) %0) unnamed_addr #29 comdat align 2 {
  ret i32 0
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody6AJointD0Ev(ptr noundef nonnull align 8 dereferenceable(224) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef i32 @_ZNK10btSoftBody6AJoint4TypeEv(ptr noundef nonnull align 8 dereferenceable(224) %0) unnamed_addr #29 comdat align 2 {
  ret i32 1
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN10btSoftBody15RayFromToCasterD0Ev(ptr noundef nonnull align 8 dereferenceable(76) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1, ptr noundef %2) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1, float noundef %2) unnamed_addr #4 comdat align 2 {
  %4 = load ptr, ptr %0, align 8, !tbaa !5
  %5 = getelementptr inbounds ptr, ptr %4, i64 3
  %6 = load ptr, ptr %5, align 8
  tail call void %6(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1) unnamed_addr #29 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1) unnamed_addr #29 comdat align 2 {
  ret i1 true
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.4, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !27
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.4, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.4, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !24
  store ptr null, ptr %2, align 8, !tbaa !27
  store i32 0, ptr %11, align 4, !tbaa !28
  %12 = getelementptr inbounds %class.btAlignedObjectArray.4, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !29
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.0, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !21
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.0, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.0, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !18
  store ptr null, ptr %2, align 8, !tbaa !21
  store i32 0, ptr %11, align 4, !tbaa !22
  %12 = getelementptr inbounds %class.btAlignedObjectArray.0, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !23
  ret void
}

declare void @_ZN14btConcaveShapeC2Ev(ptr noundef nonnull align 8 dereferenceable(28)) unnamed_addr #1

declare void @_ZN14btConcaveShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(28)) unnamed_addr #1

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN24btSoftBodyCollisionShapeD0Ev(ptr noundef nonnull align 8 dereferenceable(40) %0) unnamed_addr #4 comdat align 2 personality ptr @__gxx_personality_v0 {
  invoke void @_ZN14btConcaveShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(40) %0)
          to label %2 unwind label %3

2:                                                ; preds = %1
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void

3:                                                ; preds = %1
  %4 = landingpad { ptr, i32 }
          cleanup
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  resume { ptr, i32 } %4
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_(ptr noundef nonnull align 8 dereferenceable(40) %0, ptr noundef nonnull align 4 dereferenceable(64) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %3) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %class.btSoftBodyCollisionShape, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !154
  %7 = getelementptr inbounds %class.btSoftBody, ptr %6, i64 0, i32 19
  %8 = load float, ptr %7, align 4, !tbaa.struct !162
  %9 = getelementptr inbounds %class.btSoftBody, ptr %6, i64 0, i32 19, i64 0, i32 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa.struct !293
  %11 = getelementptr inbounds %class.btSoftBody, ptr %6, i64 0, i32 19, i64 0, i32 0, i64 2
  %12 = load float, ptr %11, align 4, !tbaa.struct !164
  %13 = getelementptr inbounds %class.btSoftBody, ptr %6, i64 0, i32 19, i64 1
  %14 = load float, ptr %13, align 4, !tbaa.struct !162
  %15 = getelementptr inbounds %class.btSoftBody, ptr %6, i64 0, i32 19, i64 1, i32 0, i64 1
  %16 = load float, ptr %15, align 4, !tbaa.struct !293
  %17 = getelementptr inbounds %class.btSoftBody, ptr %6, i64 0, i32 19, i64 1, i32 0, i64 2
  %18 = load float, ptr %17, align 4, !tbaa.struct !164
  %19 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %20 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %21 = getelementptr inbounds %class.btTransform, ptr %1, i64 0, i32 1
  %22 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1
  %23 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1, i32 0, i64 1
  %24 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 1, i32 0, i64 2
  %25 = load float, ptr %1, align 4, !tbaa !137
  %26 = load float, ptr %19, align 4, !tbaa !137
  %27 = load float, ptr %20, align 4, !tbaa !137
  %28 = load float, ptr %22, align 4, !tbaa !137
  %29 = load float, ptr %23, align 4, !tbaa !137
  %30 = insertelement <2 x float> poison, float %10, i64 0
  %31 = shufflevector <2 x float> %30, <2 x float> poison, <2 x i32> zeroinitializer
  %32 = insertelement <2 x float> poison, float %26, i64 0
  %33 = insertelement <2 x float> %32, float %29, i64 1
  %34 = fmul <2 x float> %31, %33
  %35 = insertelement <2 x float> poison, float %25, i64 0
  %36 = insertelement <2 x float> %35, float %28, i64 1
  %37 = insertelement <2 x float> poison, float %8, i64 0
  %38 = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> zeroinitializer
  %39 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %36, <2 x float> %38, <2 x float> %34)
  %40 = load float, ptr %24, align 4, !tbaa !137
  %41 = insertelement <2 x float> poison, float %27, i64 0
  %42 = insertelement <2 x float> %41, float %40, i64 1
  %43 = insertelement <2 x float> poison, float %12, i64 0
  %44 = shufflevector <2 x float> %43, <2 x float> poison, <2 x i32> zeroinitializer
  %45 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %42, <2 x float> %44, <2 x float> %39)
  %46 = load <2 x float>, ptr %21, align 4, !tbaa !137
  %47 = fadd <2 x float> %46, %45
  %48 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2
  %49 = load float, ptr %48, align 4, !tbaa !137
  %50 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2, i32 0, i64 1
  %51 = load float, ptr %50, align 4, !tbaa !137
  %52 = fmul float %10, %51
  %53 = tail call float @llvm.fmuladd.f32(float %49, float %8, float %52)
  %54 = getelementptr inbounds [3 x %class.btVector3], ptr %1, i64 0, i64 2, i32 0, i64 2
  %55 = load float, ptr %54, align 4, !tbaa !137
  %56 = tail call float @llvm.fmuladd.f32(float %55, float %12, float %53)
  %57 = getelementptr inbounds %class.btTransform, ptr %1, i64 0, i32 1, i32 0, i64 2
  %58 = load float, ptr %57, align 4, !tbaa !137
  %59 = fadd float %58, %56
  %60 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %59, i64 0
  %61 = extractelement <2 x float> %34, i64 0
  %62 = tail call float @llvm.fmuladd.f32(float %25, float %14, float %61)
  %63 = tail call float @llvm.fmuladd.f32(float %27, float %12, float %62)
  %64 = extractelement <2 x float> %46, i64 0
  %65 = fadd float %64, %63
  %66 = extractelement <2 x float> %34, i64 1
  %67 = tail call float @llvm.fmuladd.f32(float %28, float %14, float %66)
  %68 = tail call float @llvm.fmuladd.f32(float %40, float %12, float %67)
  %69 = extractelement <2 x float> %46, i64 1
  %70 = fadd float %69, %68
  %71 = tail call float @llvm.fmuladd.f32(float %49, float %14, float %52)
  %72 = tail call float @llvm.fmuladd.f32(float %55, float %12, float %71)
  %73 = fadd float %58, %72
  %74 = fmul float %16, %26
  %75 = tail call float @llvm.fmuladd.f32(float %25, float %14, float %74)
  %76 = tail call float @llvm.fmuladd.f32(float %27, float %12, float %75)
  %77 = fadd float %64, %76
  %78 = fmul float %16, %29
  %79 = tail call float @llvm.fmuladd.f32(float %28, float %14, float %78)
  %80 = tail call float @llvm.fmuladd.f32(float %40, float %12, float %79)
  %81 = fadd float %69, %80
  %82 = fmul float %16, %51
  %83 = tail call float @llvm.fmuladd.f32(float %49, float %14, float %82)
  %84 = tail call float @llvm.fmuladd.f32(float %55, float %12, float %83)
  %85 = fadd float %58, %84
  %86 = tail call float @llvm.fmuladd.f32(float %25, float %8, float %74)
  %87 = tail call float @llvm.fmuladd.f32(float %27, float %12, float %86)
  %88 = fadd float %64, %87
  %89 = tail call float @llvm.fmuladd.f32(float %28, float %8, float %78)
  %90 = tail call float @llvm.fmuladd.f32(float %40, float %12, float %89)
  %91 = fadd float %69, %90
  %92 = tail call float @llvm.fmuladd.f32(float %49, float %8, float %82)
  %93 = tail call float @llvm.fmuladd.f32(float %55, float %12, float %92)
  %94 = fadd float %58, %93
  %95 = extractelement <2 x float> %39, i64 0
  %96 = tail call float @llvm.fmuladd.f32(float %27, float %18, float %95)
  %97 = fadd float %64, %96
  %98 = extractelement <2 x float> %39, i64 1
  %99 = tail call float @llvm.fmuladd.f32(float %40, float %18, float %98)
  %100 = fadd float %69, %99
  %101 = tail call float @llvm.fmuladd.f32(float %55, float %18, float %53)
  %102 = fadd float %58, %101
  %103 = tail call float @llvm.fmuladd.f32(float %27, float %18, float %62)
  %104 = fadd float %64, %103
  %105 = tail call float @llvm.fmuladd.f32(float %40, float %18, float %67)
  %106 = fadd float %69, %105
  %107 = tail call float @llvm.fmuladd.f32(float %55, float %18, float %71)
  %108 = fadd float %58, %107
  %109 = tail call float @llvm.fmuladd.f32(float %27, float %18, float %75)
  %110 = fadd float %64, %109
  %111 = tail call float @llvm.fmuladd.f32(float %40, float %18, float %79)
  %112 = fadd float %69, %111
  %113 = tail call float @llvm.fmuladd.f32(float %55, float %18, float %83)
  %114 = fadd float %58, %113
  %115 = tail call float @llvm.fmuladd.f32(float %27, float %18, float %86)
  %116 = fadd float %64, %115
  %117 = tail call float @llvm.fmuladd.f32(float %40, float %18, float %89)
  %118 = fadd float %69, %117
  %119 = tail call float @llvm.fmuladd.f32(float %55, float %18, float %92)
  %120 = fadd float %58, %119
  store <2 x float> %47, ptr %3, align 4, !tbaa.struct !162
  %121 = getelementptr inbounds i8, ptr %3, i64 8
  store <2 x float> %60, ptr %121, align 4, !tbaa.struct !164
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !162
  %122 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %123 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %124 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 3
  %125 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %126 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 3
  %127 = load float, ptr %2, align 4, !tbaa !137
  %128 = fcmp olt float %65, %127
  br i1 %128, label %129, label %130

129:                                              ; preds = %4
  store float %65, ptr %2, align 4, !tbaa !137
  br label %130

130:                                              ; preds = %129, %4
  %131 = load float, ptr %122, align 4, !tbaa !137
  %132 = fcmp olt float %70, %131
  br i1 %132, label %133, label %134

133:                                              ; preds = %130
  store float %70, ptr %122, align 4, !tbaa !137
  br label %134

134:                                              ; preds = %133, %130
  %135 = load float, ptr %123, align 4, !tbaa !137
  %136 = fcmp olt float %73, %135
  br i1 %136, label %137, label %138

137:                                              ; preds = %134
  store float %73, ptr %123, align 4, !tbaa !137
  br label %138

138:                                              ; preds = %137, %134
  %139 = load float, ptr %124, align 4, !tbaa !137
  %140 = fcmp ogt float %139, 0.000000e+00
  br i1 %140, label %141, label %142

141:                                              ; preds = %138
  store float 0.000000e+00, ptr %124, align 4, !tbaa !137
  br label %142

142:                                              ; preds = %138, %141
  %143 = load float, ptr %3, align 4, !tbaa !137
  %144 = fcmp olt float %143, %65
  br i1 %144, label %145, label %146

145:                                              ; preds = %142
  store float %65, ptr %3, align 4, !tbaa !137
  br label %146

146:                                              ; preds = %145, %142
  %147 = load float, ptr %125, align 4, !tbaa !137
  %148 = fcmp olt float %147, %70
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  store float %70, ptr %125, align 4, !tbaa !137
  br label %150

150:                                              ; preds = %149, %146
  %151 = load float, ptr %121, align 4, !tbaa !137
  %152 = fcmp olt float %151, %73
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  store float %73, ptr %121, align 4, !tbaa !137
  br label %154

154:                                              ; preds = %153, %150
  %155 = load float, ptr %126, align 4, !tbaa !137
  %156 = fcmp olt float %155, 0.000000e+00
  br i1 %156, label %157, label %158

157:                                              ; preds = %154
  store float 0.000000e+00, ptr %126, align 4, !tbaa !137
  br label %158

158:                                              ; preds = %154, %157
  %159 = load float, ptr %2, align 4, !tbaa !137
  %160 = fcmp olt float %77, %159
  br i1 %160, label %161, label %162

161:                                              ; preds = %158
  store float %77, ptr %2, align 4, !tbaa !137
  br label %162

162:                                              ; preds = %161, %158
  %163 = load float, ptr %122, align 4, !tbaa !137
  %164 = fcmp olt float %81, %163
  br i1 %164, label %165, label %166

165:                                              ; preds = %162
  store float %81, ptr %122, align 4, !tbaa !137
  br label %166

166:                                              ; preds = %165, %162
  %167 = load float, ptr %123, align 4, !tbaa !137
  %168 = fcmp olt float %85, %167
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  store float %85, ptr %123, align 4, !tbaa !137
  br label %170

170:                                              ; preds = %169, %166
  %171 = load float, ptr %124, align 4, !tbaa !137
  %172 = fcmp ogt float %171, 0.000000e+00
  br i1 %172, label %173, label %174

173:                                              ; preds = %170
  store float 0.000000e+00, ptr %124, align 4, !tbaa !137
  br label %174

174:                                              ; preds = %173, %170
  %175 = load float, ptr %3, align 4, !tbaa !137
  %176 = fcmp olt float %175, %77
  br i1 %176, label %177, label %178

177:                                              ; preds = %174
  store float %77, ptr %3, align 4, !tbaa !137
  br label %178

178:                                              ; preds = %177, %174
  %179 = load float, ptr %125, align 4, !tbaa !137
  %180 = fcmp olt float %179, %81
  br i1 %180, label %181, label %182

181:                                              ; preds = %178
  store float %81, ptr %125, align 4, !tbaa !137
  br label %182

182:                                              ; preds = %181, %178
  %183 = load float, ptr %121, align 4, !tbaa !137
  %184 = fcmp olt float %183, %85
  br i1 %184, label %185, label %186

185:                                              ; preds = %182
  store float %85, ptr %121, align 4, !tbaa !137
  br label %186

186:                                              ; preds = %185, %182
  %187 = load float, ptr %126, align 4, !tbaa !137
  %188 = fcmp olt float %187, 0.000000e+00
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  store float 0.000000e+00, ptr %126, align 4, !tbaa !137
  br label %190

190:                                              ; preds = %189, %186
  %191 = load float, ptr %2, align 4, !tbaa !137
  %192 = fcmp olt float %88, %191
  br i1 %192, label %193, label %194

193:                                              ; preds = %190
  store float %88, ptr %2, align 4, !tbaa !137
  br label %194

194:                                              ; preds = %193, %190
  %195 = load float, ptr %122, align 4, !tbaa !137
  %196 = fcmp olt float %91, %195
  br i1 %196, label %197, label %198

197:                                              ; preds = %194
  store float %91, ptr %122, align 4, !tbaa !137
  br label %198

198:                                              ; preds = %197, %194
  %199 = load float, ptr %123, align 4, !tbaa !137
  %200 = fcmp olt float %94, %199
  br i1 %200, label %201, label %202

201:                                              ; preds = %198
  store float %94, ptr %123, align 4, !tbaa !137
  br label %202

202:                                              ; preds = %201, %198
  %203 = load float, ptr %124, align 4, !tbaa !137
  %204 = fcmp ogt float %203, 0.000000e+00
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  store float 0.000000e+00, ptr %124, align 4, !tbaa !137
  br label %206

206:                                              ; preds = %205, %202
  %207 = load float, ptr %3, align 4, !tbaa !137
  %208 = fcmp olt float %207, %88
  br i1 %208, label %209, label %210

209:                                              ; preds = %206
  store float %88, ptr %3, align 4, !tbaa !137
  br label %210

210:                                              ; preds = %209, %206
  %211 = load float, ptr %125, align 4, !tbaa !137
  %212 = fcmp olt float %211, %91
  br i1 %212, label %213, label %214

213:                                              ; preds = %210
  store float %91, ptr %125, align 4, !tbaa !137
  br label %214

214:                                              ; preds = %213, %210
  %215 = load float, ptr %121, align 4, !tbaa !137
  %216 = fcmp olt float %215, %94
  br i1 %216, label %217, label %218

217:                                              ; preds = %214
  store float %94, ptr %121, align 4, !tbaa !137
  br label %218

218:                                              ; preds = %217, %214
  %219 = load float, ptr %126, align 4, !tbaa !137
  %220 = fcmp olt float %219, 0.000000e+00
  br i1 %220, label %221, label %222

221:                                              ; preds = %218
  store float 0.000000e+00, ptr %126, align 4, !tbaa !137
  br label %222

222:                                              ; preds = %221, %218
  %223 = load float, ptr %2, align 4, !tbaa !137
  %224 = fcmp olt float %97, %223
  br i1 %224, label %225, label %226

225:                                              ; preds = %222
  store float %97, ptr %2, align 4, !tbaa !137
  br label %226

226:                                              ; preds = %225, %222
  %227 = load float, ptr %122, align 4, !tbaa !137
  %228 = fcmp olt float %100, %227
  br i1 %228, label %229, label %230

229:                                              ; preds = %226
  store float %100, ptr %122, align 4, !tbaa !137
  br label %230

230:                                              ; preds = %229, %226
  %231 = load float, ptr %123, align 4, !tbaa !137
  %232 = fcmp olt float %102, %231
  br i1 %232, label %233, label %234

233:                                              ; preds = %230
  store float %102, ptr %123, align 4, !tbaa !137
  br label %234

234:                                              ; preds = %233, %230
  %235 = load float, ptr %124, align 4, !tbaa !137
  %236 = fcmp ogt float %235, 0.000000e+00
  br i1 %236, label %237, label %238

237:                                              ; preds = %234
  store float 0.000000e+00, ptr %124, align 4, !tbaa !137
  br label %238

238:                                              ; preds = %237, %234
  %239 = load float, ptr %3, align 4, !tbaa !137
  %240 = fcmp olt float %239, %97
  br i1 %240, label %241, label %242

241:                                              ; preds = %238
  store float %97, ptr %3, align 4, !tbaa !137
  br label %242

242:                                              ; preds = %241, %238
  %243 = load float, ptr %125, align 4, !tbaa !137
  %244 = fcmp olt float %243, %100
  br i1 %244, label %245, label %246

245:                                              ; preds = %242
  store float %100, ptr %125, align 4, !tbaa !137
  br label %246

246:                                              ; preds = %245, %242
  %247 = load float, ptr %121, align 4, !tbaa !137
  %248 = fcmp olt float %247, %102
  br i1 %248, label %249, label %250

249:                                              ; preds = %246
  store float %102, ptr %121, align 4, !tbaa !137
  br label %250

250:                                              ; preds = %249, %246
  %251 = load float, ptr %126, align 4, !tbaa !137
  %252 = fcmp olt float %251, 0.000000e+00
  br i1 %252, label %253, label %254

253:                                              ; preds = %250
  store float 0.000000e+00, ptr %126, align 4, !tbaa !137
  br label %254

254:                                              ; preds = %253, %250
  %255 = load float, ptr %2, align 4, !tbaa !137
  %256 = fcmp olt float %104, %255
  br i1 %256, label %257, label %258

257:                                              ; preds = %254
  store float %104, ptr %2, align 4, !tbaa !137
  br label %258

258:                                              ; preds = %257, %254
  %259 = load float, ptr %122, align 4, !tbaa !137
  %260 = fcmp olt float %106, %259
  br i1 %260, label %261, label %262

261:                                              ; preds = %258
  store float %106, ptr %122, align 4, !tbaa !137
  br label %262

262:                                              ; preds = %261, %258
  %263 = load float, ptr %123, align 4, !tbaa !137
  %264 = fcmp olt float %108, %263
  br i1 %264, label %265, label %266

265:                                              ; preds = %262
  store float %108, ptr %123, align 4, !tbaa !137
  br label %266

266:                                              ; preds = %265, %262
  %267 = load float, ptr %124, align 4, !tbaa !137
  %268 = fcmp ogt float %267, 0.000000e+00
  br i1 %268, label %269, label %270

269:                                              ; preds = %266
  store float 0.000000e+00, ptr %124, align 4, !tbaa !137
  br label %270

270:                                              ; preds = %269, %266
  %271 = load float, ptr %3, align 4, !tbaa !137
  %272 = fcmp olt float %271, %104
  br i1 %272, label %273, label %274

273:                                              ; preds = %270
  store float %104, ptr %3, align 4, !tbaa !137
  br label %274

274:                                              ; preds = %273, %270
  %275 = load float, ptr %125, align 4, !tbaa !137
  %276 = fcmp olt float %275, %106
  br i1 %276, label %277, label %278

277:                                              ; preds = %274
  store float %106, ptr %125, align 4, !tbaa !137
  br label %278

278:                                              ; preds = %277, %274
  %279 = load float, ptr %121, align 4, !tbaa !137
  %280 = fcmp olt float %279, %108
  br i1 %280, label %281, label %282

281:                                              ; preds = %278
  store float %108, ptr %121, align 4, !tbaa !137
  br label %282

282:                                              ; preds = %281, %278
  %283 = load float, ptr %126, align 4, !tbaa !137
  %284 = fcmp olt float %283, 0.000000e+00
  br i1 %284, label %285, label %286

285:                                              ; preds = %282
  store float 0.000000e+00, ptr %126, align 4, !tbaa !137
  br label %286

286:                                              ; preds = %285, %282
  %287 = load float, ptr %2, align 4, !tbaa !137
  %288 = fcmp olt float %110, %287
  br i1 %288, label %289, label %290

289:                                              ; preds = %286
  store float %110, ptr %2, align 4, !tbaa !137
  br label %290

290:                                              ; preds = %289, %286
  %291 = load float, ptr %122, align 4, !tbaa !137
  %292 = fcmp olt float %112, %291
  br i1 %292, label %293, label %294

293:                                              ; preds = %290
  store float %112, ptr %122, align 4, !tbaa !137
  br label %294

294:                                              ; preds = %293, %290
  %295 = load float, ptr %123, align 4, !tbaa !137
  %296 = fcmp olt float %114, %295
  br i1 %296, label %297, label %298

297:                                              ; preds = %294
  store float %114, ptr %123, align 4, !tbaa !137
  br label %298

298:                                              ; preds = %297, %294
  %299 = load float, ptr %124, align 4, !tbaa !137
  %300 = fcmp ogt float %299, 0.000000e+00
  br i1 %300, label %301, label %302

301:                                              ; preds = %298
  store float 0.000000e+00, ptr %124, align 4, !tbaa !137
  br label %302

302:                                              ; preds = %301, %298
  %303 = load float, ptr %3, align 4, !tbaa !137
  %304 = fcmp olt float %303, %110
  br i1 %304, label %305, label %306

305:                                              ; preds = %302
  store float %110, ptr %3, align 4, !tbaa !137
  br label %306

306:                                              ; preds = %305, %302
  %307 = load float, ptr %125, align 4, !tbaa !137
  %308 = fcmp olt float %307, %112
  br i1 %308, label %309, label %310

309:                                              ; preds = %306
  store float %112, ptr %125, align 4, !tbaa !137
  br label %310

310:                                              ; preds = %309, %306
  %311 = load float, ptr %121, align 4, !tbaa !137
  %312 = fcmp olt float %311, %114
  br i1 %312, label %313, label %314

313:                                              ; preds = %310
  store float %114, ptr %121, align 4, !tbaa !137
  br label %314

314:                                              ; preds = %313, %310
  %315 = load float, ptr %126, align 4, !tbaa !137
  %316 = fcmp olt float %315, 0.000000e+00
  br i1 %316, label %317, label %318

317:                                              ; preds = %314
  store float 0.000000e+00, ptr %126, align 4, !tbaa !137
  br label %318

318:                                              ; preds = %317, %314
  %319 = load float, ptr %2, align 4, !tbaa !137
  %320 = fcmp olt float %116, %319
  br i1 %320, label %321, label %322

321:                                              ; preds = %318
  store float %116, ptr %2, align 4, !tbaa !137
  br label %322

322:                                              ; preds = %321, %318
  %323 = load float, ptr %122, align 4, !tbaa !137
  %324 = fcmp olt float %118, %323
  br i1 %324, label %325, label %326

325:                                              ; preds = %322
  store float %118, ptr %122, align 4, !tbaa !137
  br label %326

326:                                              ; preds = %325, %322
  %327 = load float, ptr %123, align 4, !tbaa !137
  %328 = fcmp olt float %120, %327
  br i1 %328, label %329, label %330

329:                                              ; preds = %326
  store float %120, ptr %123, align 4, !tbaa !137
  br label %330

330:                                              ; preds = %329, %326
  %331 = load float, ptr %124, align 4, !tbaa !137
  %332 = fcmp ogt float %331, 0.000000e+00
  br i1 %332, label %333, label %334

333:                                              ; preds = %330
  store float 0.000000e+00, ptr %124, align 4, !tbaa !137
  br label %334

334:                                              ; preds = %333, %330
  %335 = load float, ptr %3, align 4, !tbaa !137
  %336 = fcmp olt float %335, %116
  br i1 %336, label %337, label %338

337:                                              ; preds = %334
  store float %116, ptr %3, align 4, !tbaa !137
  br label %338

338:                                              ; preds = %337, %334
  %339 = load float, ptr %125, align 4, !tbaa !137
  %340 = fcmp olt float %339, %118
  br i1 %340, label %341, label %342

341:                                              ; preds = %338
  store float %118, ptr %125, align 4, !tbaa !137
  br label %342

342:                                              ; preds = %341, %338
  %343 = load float, ptr %121, align 4, !tbaa !137
  %344 = fcmp olt float %343, %120
  br i1 %344, label %345, label %346

345:                                              ; preds = %342
  store float %120, ptr %121, align 4, !tbaa !137
  br label %346

346:                                              ; preds = %345, %342
  %347 = load float, ptr %126, align 4, !tbaa !137
  %348 = fcmp olt float %347, 0.000000e+00
  br i1 %348, label %349, label %350

349:                                              ; preds = %346
  store float 0.000000e+00, ptr %126, align 4, !tbaa !137
  br label %350

350:                                              ; preds = %349, %346
  ret void
}

declare void @_ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf(ptr noundef nonnull align 8 dereferenceable(24), ptr noundef nonnull align 4 dereferenceable(16), ptr noundef nonnull align 4 dereferenceable(4)) unnamed_addr #1

declare noundef float @_ZNK16btCollisionShape20getAngularMotionDiscEv(ptr noundef nonnull align 8 dereferenceable(24)) unnamed_addr #1

declare noundef float @_ZNK16btCollisionShape27getContactBreakingThresholdEv(ptr noundef nonnull align 8 dereferenceable(24)) unnamed_addr #1

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3(ptr noundef nonnull align 8 dereferenceable(40) %0, ptr noundef nonnull align 4 dereferenceable(16) %1) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local noundef nonnull align 4 dereferenceable(16) ptr @_ZNK24btSoftBodyCollisionShape15getLocalScalingEv(ptr noundef nonnull align 8 dereferenceable(40) %0) unnamed_addr #4 comdat align 2 personality ptr @__gxx_personality_v0 {
  %2 = load atomic i8, ptr @_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %9, !prof !172

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy) #38
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, ptr @_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy, align 4, !tbaa !137
  %8 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy) #38
  br label %9

9:                                                ; preds = %7, %4, %1
  ret ptr @_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3(ptr noundef nonnull align 8 dereferenceable(40) %0, float noundef %1, ptr noundef nonnull align 4 dereferenceable(16) %2) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef ptr @_ZNK24btSoftBodyCollisionShape7getNameEv(ptr noundef nonnull align 8 dereferenceable(40) %0) unnamed_addr #29 comdat align 2 {
  ret ptr @.str.3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN14btConcaveShape9setMarginEf(ptr noundef nonnull align 8 dereferenceable(28) %0, float noundef %1) unnamed_addr #29 comdat align 2 {
  %3 = getelementptr inbounds %class.btConcaveShape, ptr %0, i64 0, i32 1
  store float %1, ptr %3, align 8, !tbaa !158
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef float @_ZNK14btConcaveShape9getMarginEv(ptr noundef nonnull align 8 dereferenceable(28) %0) unnamed_addr #29 comdat align 2 {
  %2 = getelementptr inbounds %class.btConcaveShape, ptr %0, i64 0, i32 1
  %3 = load float, ptr %2, align 8, !tbaa !158
  ret float %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_(ptr noundef nonnull align 8 dereferenceable(40) %0, ptr noundef %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %3) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(ptr) local_unnamed_addr #30

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_abort(ptr) local_unnamed_addr #30

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(ptr) local_unnamed_addr #30

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare float @sqrtf(float noundef) local_unnamed_addr #31

; Function Attrs: uwtable
define linkonce_odr dso_local noundef nonnull align 4 dereferenceable(48) ptr @_ZN11btMatrix3x311getIdentityEv() local_unnamed_addr #4 comdat align 2 personality ptr @__gxx_personality_v0 {
  %1 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %8, !prof !172

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %7 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %8

8:                                                ; preds = %6, %3, %0
  ret ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #28

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev(ptr noundef nonnull align 8 dereferenceable(25) %0) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !320
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 6
  %6 = load i8, ptr %5, align 8
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %4, i1 true, i1 %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %3)
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 2
  store i8 1, ptr %5, align 8, !tbaa !341
  store ptr null, ptr %2, align 8, !tbaa !320
  store i32 0, ptr %11, align 4, !tbaa !319
  %12 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %0, i64 0, i32 3
  store i32 0, ptr %12, align 8, !tbaa !342
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN6btDbvt8ICollideD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1) unnamed_addr #29 comdat align 2 {
  ret void
}

declare void @_ZN15CProfileManager13Start_ProfileEPKc(ptr noundef) local_unnamed_addr #1

declare void @_ZN15CProfileManager12Stop_ProfileEv() local_unnamed_addr #1

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !510
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @_ZN11btRigidBody12applyImpulseERK9btVector3S2_(ptr noundef nonnull align 8 dereferenceable(564) %5, ptr noundef nonnull align 4 dereferenceable(16) %1, ptr noundef nonnull align 4 dereferenceable(16) %2)
  br label %8

8:                                                ; preds = %7, %3
  %9 = load ptr, ptr %0, align 8, !tbaa !272
  %10 = icmp eq ptr %9, null
  br i1 %10, label %100, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 5
  %13 = load float, ptr %12, align 4, !tbaa !137
  %14 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %15 = load float, ptr %14, align 4, !tbaa !137
  %16 = fmul float %13, %15
  %17 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7
  %18 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %19 = load float, ptr %18, align 4, !tbaa !137
  %20 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = fneg float %21
  %23 = load float, ptr %2, align 4, !tbaa !137
  %24 = fneg float %23
  %25 = fmul float %15, %24
  %26 = fneg float %19
  %27 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %28 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %29 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 1
  %30 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %31 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %32 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 2
  %33 = load float, ptr %32, align 4, !tbaa !137
  %34 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %35 = load float, ptr %34, align 4, !tbaa !137
  %36 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %37 = load float, ptr %36, align 4, !tbaa !137
  %38 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 9
  %39 = load <2 x float>, ptr %1, align 4, !tbaa !137
  %40 = insertelement <2 x float> poison, float %13, i64 0
  %41 = shufflevector <2 x float> %40, <2 x float> poison, <2 x i32> zeroinitializer
  %42 = fmul <2 x float> %41, %39
  %43 = extractelement <2 x float> %39, i64 1
  %44 = fmul float %43, %22
  %45 = tail call float @llvm.fmuladd.f32(float %19, float %15, float %44)
  %46 = extractelement <2 x float> %39, i64 0
  %47 = tail call float @llvm.fmuladd.f32(float %21, float %46, float %25)
  %48 = fmul float %46, %26
  %49 = tail call float @llvm.fmuladd.f32(float %23, float %43, float %48)
  %50 = fmul float %47, %35
  %51 = tail call float @llvm.fmuladd.f32(float %33, float %45, float %50)
  %52 = tail call float @llvm.fmuladd.f32(float %37, float %49, float %51)
  %53 = load <2 x float>, ptr %38, align 4, !tbaa !137
  %54 = fadd <2 x float> %42, %53
  store <2 x float> %54, ptr %38, align 4, !tbaa !137
  %55 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 9, i64 0, i32 0, i64 2
  %56 = load float, ptr %55, align 4, !tbaa !137
  %57 = fadd float %16, %56
  store float %57, ptr %55, align 4, !tbaa !137
  %58 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 13
  %59 = load <2 x float>, ptr %58, align 4, !tbaa !137
  %60 = fadd <2 x float> %42, %59
  store <2 x float> %60, ptr %58, align 4, !tbaa !137
  %61 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 13, i32 0, i64 2
  %62 = load float, ptr %61, align 4, !tbaa !137
  %63 = fadd float %16, %62
  store float %63, ptr %61, align 4, !tbaa !137
  %64 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 9, i64 1
  %65 = load float, ptr %17, align 4, !tbaa !137
  %66 = load float, ptr %27, align 4, !tbaa !137
  %67 = load float, ptr %28, align 4, !tbaa !137
  %68 = load float, ptr %29, align 4, !tbaa !137
  %69 = load float, ptr %30, align 4, !tbaa !137
  %70 = load float, ptr %31, align 4, !tbaa !137
  %71 = insertelement <2 x float> poison, float %66, i64 0
  %72 = insertelement <2 x float> %71, float %69, i64 1
  %73 = insertelement <2 x float> poison, float %47, i64 0
  %74 = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> zeroinitializer
  %75 = fmul <2 x float> %72, %74
  %76 = insertelement <2 x float> poison, float %65, i64 0
  %77 = insertelement <2 x float> %76, float %68, i64 1
  %78 = insertelement <2 x float> poison, float %45, i64 0
  %79 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> zeroinitializer
  %80 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %77, <2 x float> %79, <2 x float> %75)
  %81 = insertelement <2 x float> poison, float %67, i64 0
  %82 = insertelement <2 x float> %81, float %70, i64 1
  %83 = insertelement <2 x float> poison, float %49, i64 0
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer
  %85 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %82, <2 x float> %84, <2 x float> %80)
  %86 = load <2 x float>, ptr %64, align 4, !tbaa !137
  %87 = fadd <2 x float> %85, %86
  store <2 x float> %87, ptr %64, align 4, !tbaa !137
  %88 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 9, i64 1, i32 0, i64 2
  %89 = load float, ptr %88, align 4, !tbaa !137
  %90 = fadd float %52, %89
  store float %90, ptr %88, align 4, !tbaa !137
  %91 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 14
  %92 = load <2 x float>, ptr %91, align 4, !tbaa !137
  %93 = fadd <2 x float> %85, %92
  store <2 x float> %93, ptr %91, align 4, !tbaa !137
  %94 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 14, i32 0, i64 2
  %95 = load float, ptr %94, align 4, !tbaa !137
  %96 = fadd float %52, %95
  store float %96, ptr %94, align 4, !tbaa !137
  %97 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %9, i64 0, i32 11
  %98 = load i32, ptr %97, align 8, !tbaa !321
  %99 = add nsw i32 %98, 1
  store i32 %99, ptr %97, align 8, !tbaa !321
  br label %100

100:                                              ; preds = %11, %8
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare float @acosf(float noundef) local_unnamed_addr #31

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 4 dereferenceable(16) %1) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !510
  %5 = icmp eq ptr %4, null
  br i1 %5, label %60, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1
  %8 = load float, ptr %1, align 4, !tbaa !137
  %9 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 0, i32 0, i64 1
  %10 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %11 = load float, ptr %10, align 4, !tbaa !137
  %12 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 0, i32 0, i64 2
  %13 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %14 = load float, ptr %13, align 4, !tbaa !137
  %15 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 1
  %16 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 1, i32 0, i64 1
  %17 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 1, i32 0, i64 2
  %18 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 2
  %19 = load float, ptr %18, align 8, !tbaa !137
  %20 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 2, i32 0, i64 1
  %21 = load float, ptr %20, align 4, !tbaa !137
  %22 = fmul float %11, %21
  %23 = tail call float @llvm.fmuladd.f32(float %19, float %8, float %22)
  %24 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 1, i32 0, i64 2, i32 0, i64 2
  %25 = load float, ptr %24, align 8, !tbaa !137
  %26 = tail call float @llvm.fmuladd.f32(float %25, float %14, float %23)
  %27 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 5
  %28 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 5, i32 0, i64 2
  %29 = load float, ptr %28, align 4, !tbaa !137
  %30 = fmul float %26, %29
  %31 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 3
  %32 = load float, ptr %7, align 8, !tbaa !137
  %33 = load float, ptr %9, align 4, !tbaa !137
  %34 = load float, ptr %12, align 8, !tbaa !137
  %35 = load float, ptr %15, align 8, !tbaa !137
  %36 = load float, ptr %16, align 4, !tbaa !137
  %37 = insertelement <2 x float> poison, float %11, i64 0
  %38 = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> zeroinitializer
  %39 = insertelement <2 x float> poison, float %33, i64 0
  %40 = insertelement <2 x float> %39, float %36, i64 1
  %41 = fmul <2 x float> %38, %40
  %42 = insertelement <2 x float> poison, float %32, i64 0
  %43 = insertelement <2 x float> %42, float %35, i64 1
  %44 = insertelement <2 x float> poison, float %8, i64 0
  %45 = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> zeroinitializer
  %46 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %43, <2 x float> %45, <2 x float> %41)
  %47 = load float, ptr %17, align 8, !tbaa !137
  %48 = insertelement <2 x float> poison, float %34, i64 0
  %49 = insertelement <2 x float> %48, float %47, i64 1
  %50 = insertelement <2 x float> poison, float %14, i64 0
  %51 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer
  %52 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %49, <2 x float> %51, <2 x float> %46)
  %53 = load <2 x float>, ptr %27, align 4, !tbaa !137
  %54 = fmul <2 x float> %52, %53
  %55 = load <2 x float>, ptr %31, align 8, !tbaa !137
  %56 = fadd <2 x float> %54, %55
  store <2 x float> %56, ptr %31, align 8, !tbaa !137
  %57 = getelementptr inbounds %class.btRigidBody, ptr %4, i64 0, i32 3, i32 0, i64 2
  %58 = load float, ptr %57, align 8, !tbaa !137
  %59 = fadd float %30, %58
  store float %59, ptr %57, align 8, !tbaa !137
  br label %60

60:                                               ; preds = %6, %2
  %61 = load ptr, ptr %0, align 8, !tbaa !272
  %62 = icmp eq ptr %61, null
  br i1 %62, label %120, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7
  %65 = load float, ptr %1, align 4, !tbaa !137
  %66 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 0, i32 0, i64 1
  %67 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %68 = load float, ptr %67, align 4, !tbaa !137
  %69 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 0, i32 0, i64 2
  %70 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %71 = load float, ptr %70, align 4, !tbaa !137
  %72 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 1
  %73 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 1, i32 0, i64 1
  %74 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 1, i32 0, i64 2
  %75 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !137
  %77 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 2, i32 0, i64 1
  %78 = load float, ptr %77, align 4, !tbaa !137
  %79 = fmul float %68, %78
  %80 = tail call float @llvm.fmuladd.f32(float %76, float %65, float %79)
  %81 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 7, i32 0, i64 2, i32 0, i64 2
  %82 = load float, ptr %81, align 4, !tbaa !137
  %83 = tail call float @llvm.fmuladd.f32(float %82, float %71, float %80)
  %84 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 9, i64 1
  %85 = load float, ptr %64, align 4, !tbaa !137
  %86 = load float, ptr %66, align 4, !tbaa !137
  %87 = load float, ptr %69, align 4, !tbaa !137
  %88 = load float, ptr %72, align 4, !tbaa !137
  %89 = load float, ptr %73, align 4, !tbaa !137
  %90 = insertelement <2 x float> poison, float %68, i64 0
  %91 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> zeroinitializer
  %92 = insertelement <2 x float> poison, float %86, i64 0
  %93 = insertelement <2 x float> %92, float %89, i64 1
  %94 = fmul <2 x float> %91, %93
  %95 = insertelement <2 x float> poison, float %85, i64 0
  %96 = insertelement <2 x float> %95, float %88, i64 1
  %97 = insertelement <2 x float> poison, float %65, i64 0
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> zeroinitializer
  %99 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %96, <2 x float> %98, <2 x float> %94)
  %100 = load float, ptr %74, align 4, !tbaa !137
  %101 = insertelement <2 x float> poison, float %87, i64 0
  %102 = insertelement <2 x float> %101, float %100, i64 1
  %103 = insertelement <2 x float> poison, float %71, i64 0
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> zeroinitializer
  %105 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %102, <2 x float> %104, <2 x float> %99)
  %106 = load <2 x float>, ptr %84, align 4, !tbaa !137
  %107 = fadd <2 x float> %105, %106
  store <2 x float> %107, ptr %84, align 4, !tbaa !137
  %108 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 9, i64 1, i32 0, i64 2
  %109 = load float, ptr %108, align 4, !tbaa !137
  %110 = fadd float %83, %109
  store float %110, ptr %108, align 4, !tbaa !137
  %111 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 14
  %112 = load <2 x float>, ptr %111, align 4, !tbaa !137
  %113 = fadd <2 x float> %105, %112
  store <2 x float> %113, ptr %111, align 4, !tbaa !137
  %114 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 14, i32 0, i64 2
  %115 = load float, ptr %114, align 4, !tbaa !137
  %116 = fadd float %83, %115
  store float %116, ptr %114, align 4, !tbaa !137
  %117 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %61, i64 0, i32 11
  %118 = load i32, ptr %117, align 8, !tbaa !321
  %119 = add nsw i32 %118, 1
  store i32 %119, ptr %117, align 8, !tbaa !321
  br label %120

120:                                              ; preds = %63, %60
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders13CollideSDF_RSD0Ev(ptr noundef nonnull align 8 dereferenceable(40) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(40) %0, ptr noundef %1) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %struct.btDbvtNode, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !163
  tail call void @_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE(ptr noundef nonnull align 8 dereferenceable(40) %0, ptr noundef nonnull align 8 dereferenceable(113) %4)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE(ptr noundef nonnull align 8 dereferenceable(40) %0, ptr noundef nonnull align 8 dereferenceable(113) %1) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  %3 = alloca %"struct.btSoftBody::RContact", align 8
  %4 = alloca %class.btVector3, align 8
  %5 = alloca %class.btMatrix3x3, align 4
  %6 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 6
  %7 = load float, ptr %6, align 8, !tbaa !174
  %8 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %0, i64 0, i32 4
  %9 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %0, i64 0, i32 5
  %10 = load float, ptr %8, align 8
  %11 = load float, ptr %9, align 4
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %3) #38
  %12 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 9
  %13 = load i8, ptr %12, align 8
  %14 = and i8 %13, 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %186

16:                                               ; preds = %2
  %17 = fcmp ogt float %7, 0.000000e+00
  %18 = select i1 %17, float %10, float %11
  %19 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %0, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !567
  %21 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %0, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !569
  %23 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 1
  %24 = call noundef zeroext i1 @_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE(ptr noundef nonnull align 8 dereferenceable(1496) %20, ptr noundef %22, ptr noundef nonnull align 4 dereferenceable(16) %23, float noundef %18, ptr noundef nonnull align 8 dereferenceable(28) %3)
  br i1 %24, label %25, label %186

25:                                               ; preds = %16
  %26 = load float, ptr %6, align 8, !tbaa !174
  %27 = getelementptr inbounds %"struct.btSoftColliders::CollideSDF_RS", ptr %0, i64 0, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !570
  %29 = icmp eq ptr %28, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = fadd float %26, 0.000000e+00
  %32 = fcmp ogt float %31, 0.000000e+00
  br i1 %32, label %40, label %186

33:                                               ; preds = %25
  %34 = getelementptr inbounds %class.btRigidBody, ptr %28, i64 0, i32 4
  %35 = load float, ptr %34, align 8, !tbaa !451
  %36 = fadd float %26, %35
  %37 = fcmp ogt float %36, 0.000000e+00
  br i1 %37, label %38, label %186

38:                                               ; preds = %33
  %39 = getelementptr inbounds %class.btCollisionObject, ptr %28, i64 0, i32 2
  br label %43

40:                                               ; preds = %30
  %41 = load ptr, ptr %21, align 8, !tbaa !569
  %42 = getelementptr inbounds %class.btCollisionObject, ptr %41, i64 0, i32 1
  br label %43

43:                                               ; preds = %40, %38
  %44 = phi float [ %35, %38 ], [ 0.000000e+00, %40 ]
  %45 = phi ptr [ %39, %38 ], [ %42, %40 ]
  %46 = load atomic i8, ptr @_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic acquire, align 8
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %53, !prof !172

48:                                               ; preds = %43
  %49 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic) #38
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %48
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) @_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic, i8 0, i64 48, i1 false)
  %52 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic) #38
  br label %53

53:                                               ; preds = %51, %48, %43
  %54 = load ptr, ptr %27, align 8, !tbaa !570
  %55 = icmp eq ptr %54, null
  %56 = getelementptr inbounds %class.btRigidBody, ptr %54, i64 0, i32 1
  %57 = select i1 %55, ptr @_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic, ptr %56
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #38
  %58 = getelementptr inbounds %class.btTransform, ptr %45, i64 0, i32 1
  %59 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 1, i32 0, i64 1
  %60 = load float, ptr %59, align 4, !tbaa !137
  %61 = getelementptr inbounds %class.btTransform, ptr %45, i64 0, i32 1, i32 0, i64 1
  %62 = load float, ptr %61, align 4, !tbaa !137
  %63 = fsub float %60, %62
  %64 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 1, i32 0, i64 2
  %65 = getelementptr inbounds %class.btTransform, ptr %45, i64 0, i32 1, i32 0, i64 2
  %66 = load float, ptr %23, align 8, !tbaa !137
  %67 = load float, ptr %58, align 4, !tbaa !137
  %68 = load float, ptr %64, align 8, !tbaa !137
  %69 = load float, ptr %65, align 4, !tbaa !137
  %70 = insertelement <2 x float> poison, float %68, i64 0
  %71 = insertelement <2 x float> %70, float %66, i64 1
  %72 = insertelement <2 x float> poison, float %69, i64 0
  %73 = insertelement <2 x float> %72, float %67, i64 1
  %74 = fsub <2 x float> %71, %73
  %75 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %76 = insertelement <2 x float> %75, float %63, i64 1
  %77 = insertelement <2 x float> %74, float 0.000000e+00, i64 1
  store <2 x float> %76, ptr %4, align 8
  %78 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %4, i64 0, i32 1
  store <2 x float> %77, ptr %78, align 8
  br i1 %55, label %79, label %83

79:                                               ; preds = %53
  %80 = load ptr, ptr %19, align 8, !tbaa !567
  %81 = getelementptr inbounds %class.btSoftBody, ptr %80, i64 0, i32 3
  %82 = load float, ptr %81, align 8, !tbaa !418
  br label %113

83:                                               ; preds = %53
  %84 = getelementptr inbounds %class.btRigidBody, ptr %54, i64 0, i32 2
  %85 = getelementptr inbounds %class.btRigidBody, ptr %54, i64 0, i32 3
  %86 = getelementptr inbounds %class.btRigidBody, ptr %54, i64 0, i32 3, i32 0, i64 1
  %87 = load float, ptr %85, align 8, !tbaa !137
  %88 = getelementptr inbounds %class.btRigidBody, ptr %54, i64 0, i32 2, i32 0, i64 2
  %89 = load float, ptr %88, align 8, !tbaa !137
  %90 = load ptr, ptr %19, align 8, !tbaa !567
  %91 = getelementptr inbounds %class.btSoftBody, ptr %90, i64 0, i32 3
  %92 = load float, ptr %91, align 4, !tbaa !137
  %93 = load <2 x float>, ptr %86, align 4, !tbaa !137
  %94 = insertelement <2 x float> %93, float %87, i64 0
  %95 = fneg <2 x float> %94
  %96 = insertelement <2 x float> %74, float %63, i64 1
  %97 = fmul <2 x float> %96, %95
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %99 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %93, <2 x float> %74, <2 x float> %98)
  %100 = extractelement <2 x float> %93, i64 0
  %101 = fneg float %100
  %102 = extractelement <2 x float> %74, i64 1
  %103 = fmul float %102, %101
  %104 = tail call float @llvm.fmuladd.f32(float %87, float %63, float %103)
  %105 = load <2 x float>, ptr %84, align 8, !tbaa !137
  %106 = fadd <2 x float> %99, %105
  %107 = fadd float %104, %89
  %108 = insertelement <2 x float> poison, float %92, i64 0
  %109 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> zeroinitializer
  %110 = fmul <2 x float> %106, %109
  %111 = fmul float %107, %92
  %112 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %111, i64 0
  br label %113

113:                                              ; preds = %79, %83
  %114 = phi float [ %92, %83 ], [ %82, %79 ]
  %115 = phi ptr [ %90, %83 ], [ %80, %79 ]
  %116 = phi <2 x float> [ %110, %83 ], [ zeroinitializer, %79 ]
  %117 = phi <2 x float> [ %112, %83 ], [ zeroinitializer, %79 ]
  %118 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 2
  %119 = load float, ptr %118, align 8, !tbaa !137
  %120 = fsub float %66, %119
  %121 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 2, i32 0, i64 1
  %122 = load float, ptr %121, align 4, !tbaa !137
  %123 = fsub float %60, %122
  %124 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %1, i64 0, i32 2, i32 0, i64 2
  %125 = load float, ptr %124, align 8, !tbaa !137
  %126 = fsub float %68, %125
  %127 = extractelement <2 x float> %116, i64 0
  %128 = fsub float %120, %127
  %129 = extractelement <2 x float> %116, i64 1
  %130 = fsub float %123, %129
  %131 = extractelement <2 x float> %117, i64 0
  %132 = fsub float %126, %131
  %133 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %3, i64 0, i32 1
  %134 = load float, ptr %133, align 8, !tbaa !137
  %135 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %3, i64 0, i32 1, i32 0, i64 1
  %136 = load float, ptr %135, align 4, !tbaa !137
  %137 = fmul float %130, %136
  %138 = tail call float @llvm.fmuladd.f32(float %128, float %134, float %137)
  %139 = getelementptr inbounds %"struct.btSoftBody::sCti", ptr %3, i64 0, i32 1, i32 0, i64 2
  %140 = load float, ptr %139, align 8, !tbaa !137
  %141 = tail call float @llvm.fmuladd.f32(float %132, float %140, float %138)
  %142 = fmul float %134, %141
  %143 = fmul float %136, %141
  %144 = fmul float %140, %141
  %145 = fsub float %128, %142
  %146 = fsub float %130, %143
  %147 = fsub float %132, %144
  %148 = getelementptr inbounds %class.btSoftBody, ptr %115, i64 0, i32 2, i32 7
  %149 = load float, ptr %148, align 4, !tbaa !596
  %150 = load ptr, ptr %21, align 8, !tbaa !569
  %151 = getelementptr inbounds %class.btCollisionObject, ptr %150, i64 0, i32 16
  %152 = load float, ptr %151, align 4, !tbaa !580
  %153 = fmul float %149, %152
  %154 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 1
  store ptr %1, ptr %154, align 8, !tbaa !560
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %5) #38
  call fastcc void @_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3(ptr noalias nonnull align 4 %5, float noundef %114, float noundef %26, float noundef %44, ptr noundef nonnull align 4 dereferenceable(48) %57, ptr noundef nonnull align 4 dereferenceable(16) %4)
  %155 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %155, ptr noundef nonnull align 4 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !162
  %156 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 1
  %157 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 2, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %157, ptr noundef nonnull align 4 dereferenceable(16) %156, i64 16, i1 false), !tbaa.struct !162
  %158 = getelementptr inbounds [3 x %class.btVector3], ptr %5, i64 0, i64 2
  %159 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 2, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %159, ptr noundef nonnull align 4 dereferenceable(16) %158, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %5) #38
  %160 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %160, ptr noundef nonnull align 8 dereferenceable(16) %4, i64 16, i1 false), !tbaa.struct !162
  %161 = fmul float %26, %114
  %162 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 4
  store float %161, ptr %162, align 8, !tbaa !597
  %163 = fmul float %146, %146
  %164 = tail call float @llvm.fmuladd.f32(float %145, float %145, float %163)
  %165 = tail call float @llvm.fmuladd.f32(float %147, float %147, float %164)
  %166 = tail call float @llvm.fabs.f32(float %141)
  %167 = fmul float %166, %153
  %168 = fcmp olt float %165, %167
  %169 = fsub float 1.000000e+00, %153
  %170 = select i1 %168, float 0.000000e+00, float %169
  %171 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 5
  store float %170, ptr %171, align 4, !tbaa !598
  %172 = getelementptr inbounds %class.btCollisionObject, ptr %150, i64 0, i32 11
  %173 = load i32, ptr %172, align 8, !tbaa !599
  %174 = and i32 %173, 3
  %175 = icmp eq i32 %174, 0
  %176 = getelementptr inbounds %class.btSoftBody, ptr %115, i64 0, i32 2, i32 10
  %177 = getelementptr inbounds %class.btSoftBody, ptr %115, i64 0, i32 2, i32 9
  %178 = select i1 %175, ptr %177, ptr %176
  %179 = load float, ptr %178, align 4, !tbaa !137
  %180 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %3, i64 0, i32 6
  store float %179, ptr %180, align 8, !tbaa !562
  %181 = getelementptr inbounds %class.btSoftBody, ptr %115, i64 0, i32 14
  call void @_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE9push_backERKS1_(ptr noundef nonnull align 8 dereferenceable(25) %181, ptr noundef nonnull align 8 dereferenceable(116) %3)
  %182 = load ptr, ptr %27, align 8, !tbaa !570
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %113
  call void @_ZN17btCollisionObject8activateEb(ptr noundef nonnull align 8 dereferenceable(280) %182, i1 noundef zeroext false)
  br label %185

185:                                              ; preds = %184, %113
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #38
  br label %186

186:                                              ; preds = %33, %30, %185, %16, %2
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %3) #38
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE9push_backERKS1_(ptr noundef nonnull align 8 dereferenceable(25) %0, ptr noundef nonnull align 8 dereferenceable(116) %1) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !108
  %5 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !109
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %53

8:                                                ; preds = %2
  %9 = icmp eq i32 %4, 0
  %10 = shl nsw i32 %4, 1
  %11 = select i1 %9, i32 1, i32 %10
  %12 = icmp slt i32 %4, %11
  br i1 %12, label %13, label %53

13:                                               ; preds = %8
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %13
  %16 = sext i32 %11 to i64
  %17 = mul nsw i64 %16, 120
  %18 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %17, i32 noundef 16)
  %19 = load i32, ptr %3, align 4, !tbaa !108
  br label %20

20:                                               ; preds = %15, %13
  %21 = phi i32 [ %19, %15 ], [ %4, %13 ]
  %22 = phi ptr [ %18, %15 ], [ null, %13 ]
  %23 = icmp sgt i32 %21, 0
  br i1 %23, label %24, label %42

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 5
  %26 = zext i32 %21 to i64
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi i64 [ 0, %24 ], [ %40, %27 ]
  %29 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %22, i64 %28
  %30 = load ptr, ptr %25, align 8, !tbaa !107
  %31 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %30, i64 %28
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %29, ptr noundef nonnull align 8 dereferenceable(40) %31, i64 40, i1 false)
  %32 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %22, i64 %28, i32 2
  %33 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %30, i64 %28, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %32, ptr noundef nonnull align 8 dereferenceable(16) %33, i64 16, i1 false), !tbaa.struct !162
  %34 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %30, i64 %28, i32 2, i32 0, i64 1
  %35 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %22, i64 %28, i32 2, i32 0, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %35, ptr noundef nonnull align 8 dereferenceable(16) %34, i64 16, i1 false), !tbaa.struct !162
  %36 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %30, i64 %28, i32 2, i32 0, i64 2
  %37 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %22, i64 %28, i32 2, i32 0, i64 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %37, ptr noundef nonnull align 8 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !162
  %38 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %22, i64 %28, i32 3
  %39 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %30, i64 %28, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %38, ptr noundef nonnull align 8 dereferenceable(28) %39, i64 28, i1 false)
  %40 = add nuw nsw i64 %28, 1
  %41 = icmp eq i64 %40, %26
  br i1 %41, label %42, label %27

42:                                               ; preds = %27, %20
  %43 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 5
  %44 = load ptr, ptr %43, align 8, !tbaa !107
  %45 = icmp eq ptr %44, null
  %46 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 6
  %47 = load i8, ptr %46, align 8
  %48 = icmp eq i8 %47, 0
  %49 = select i1 %45, i1 true, i1 %48
  br i1 %49, label %51, label %50

50:                                               ; preds = %42
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %44)
  br label %51

51:                                               ; preds = %50, %42
  store i8 1, ptr %46, align 8, !tbaa !106
  store ptr %22, ptr %43, align 8, !tbaa !107
  store i32 %11, ptr %5, align 8, !tbaa !109
  %52 = load i32, ptr %3, align 4, !tbaa !108
  br label %53

53:                                               ; preds = %51, %8, %2
  %54 = phi i32 [ %52, %51 ], [ %4, %8 ], [ %4, %2 ]
  %55 = getelementptr inbounds %class.btAlignedObjectArray.48, ptr %0, i64 0, i32 5
  %56 = load ptr, ptr %55, align 8, !tbaa !107
  %57 = sext i32 %54 to i64
  %58 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %56, i64 %57
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %58, ptr noundef nonnull align 8 dereferenceable(40) %1, i64 40, i1 false)
  %59 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %56, i64 %57, i32 2
  %60 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %1, i64 0, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %59, ptr noundef nonnull align 8 dereferenceable(16) %60, i64 16, i1 false), !tbaa.struct !162
  %61 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %1, i64 0, i32 2, i32 0, i64 1
  %62 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %56, i64 %57, i32 2, i32 0, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %62, ptr noundef nonnull align 8 dereferenceable(16) %61, i64 16, i1 false), !tbaa.struct !162
  %63 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %1, i64 0, i32 2, i32 0, i64 2
  %64 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %56, i64 %57, i32 2, i32 0, i64 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %64, ptr noundef nonnull align 8 dereferenceable(16) %63, i64 16, i1 false), !tbaa.struct !162
  %65 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %56, i64 %57, i32 3
  %66 = getelementptr inbounds %"struct.btSoftBody::RContact", ptr %1, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %65, ptr noundef nonnull align 8 dereferenceable(28) %66, i64 28, i1 false)
  %67 = load i32, ptr %3, align 4, !tbaa !108
  %68 = add nsw i32 %67, 1
  store i32 %68, ptr %3, align 4, !tbaa !108
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders12CollideCL_RSD0Ev(ptr noundef nonnull align 8 dereferenceable(48) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode(ptr noundef nonnull align 8 dereferenceable(48) %0, ptr noundef %1) unnamed_addr #4 comdat align 2 personality ptr @__gxx_personality_v0 {
  %3 = alloca %class.btSoftClusterCollisionShape, align 8
  %4 = alloca %"struct.btGjkEpaSolver2::sResults", align 4
  %5 = alloca %class.btVector3, align 16
  %6 = alloca %"struct.btSoftBody::CJoint", align 8
  %7 = alloca %"struct.btSoftBody::Body", align 8
  %8 = alloca %"struct.btSoftBody::Body", align 8
  %9 = getelementptr inbounds %struct.btDbvtNode, ptr %1, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !163
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %3) #38
  call void @_ZN21btConvexInternalShapeC2Ev(ptr noundef nonnull align 8 dereferenceable(64) %3)
  store ptr getelementptr inbounds ({ [21 x ptr] }, ptr @_ZTV27btSoftClusterCollisionShape, i64 0, inrange i32 0, i64 2), ptr %3, align 8, !tbaa !5
  %11 = getelementptr inbounds %class.btSoftClusterCollisionShape, ptr %3, i64 0, i32 1
  store ptr %10, ptr %11, align 8, !tbaa !600
  %12 = getelementptr inbounds %class.btConvexInternalShape, ptr %3, i64 0, i32 3
  store float 0.000000e+00, ptr %12, align 8, !tbaa !604
  %13 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_RS", ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !577
  %15 = getelementptr inbounds %class.btCollisionObject, ptr %14, i64 0, i32 9
  %16 = load ptr, ptr %15, align 8, !tbaa !157
  %17 = getelementptr inbounds %class.btCollisionObject, ptr %14, i64 0, i32 11
  %18 = load i32, ptr %17, align 8, !tbaa !599
  %19 = and i32 %18, 3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %10, i64 0, i32 22
  %23 = load i8, ptr %22, align 8, !tbaa !345, !range !191, !noundef !192
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %197

25:                                               ; preds = %2, %21
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4) #38
  %26 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %39, !prof !172

28:                                               ; preds = %25
  %29 = call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %39, label %31

31:                                               ; preds = %28
  %32 = invoke noundef nonnull align 4 dereferenceable(48) ptr @_ZN11btMatrix3x311getIdentityEv()
          to label %33 unwind label %37

33:                                               ; preds = %31
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) %32, i64 16, i1 false), !tbaa.struct !162
  %34 = getelementptr inbounds [3 x %class.btVector3], ptr %32, i64 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) %34, i64 16, i1 false), !tbaa.struct !162
  %35 = getelementptr inbounds [3 x %class.btVector3], ptr %32, i64 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %36 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %39

37:                                               ; preds = %31
  %38 = landingpad { ptr, i32 }
          cleanup
  call void @__cxa_guard_abort(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %198

39:                                               ; preds = %33, %28, %25
  %40 = load ptr, ptr %13, align 8, !tbaa !577
  %41 = getelementptr inbounds %class.btCollisionObject, ptr %40, i64 0, i32 2
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, ptr %5, align 16, !tbaa !137
  %42 = invoke noundef zeroext i1 @_ZN15btGjkEpaSolver214SignedDistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE(ptr noundef nonnull %3, ptr noundef nonnull align 4 dereferenceable(64) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef %16, ptr noundef nonnull align 4 dereferenceable(64) %41, ptr noundef nonnull align 4 dereferenceable(16) %5, ptr noundef nonnull align 4 dereferenceable(56) %4)
          to label %43 unwind label %175

43:                                               ; preds = %39
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  br i1 %42, label %44, label %196

44:                                               ; preds = %43
  call void @llvm.lifetime.start.p0(i64 248, ptr nonnull %6) #38
  %45 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %6, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %45, i8 0, i64 48, i1 false)
  %46 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %6, i64 0, i32 9
  store i8 0, ptr %46, align 4, !tbaa !483
  store ptr getelementptr inbounds ({ [8 x ptr] }, ptr @_ZTVN10btSoftBody6CJointE, i64 0, inrange i32 0, i64 2), ptr %6, align 8, !tbaa !5
  store ptr %10, ptr %7, align 8, !tbaa !272
  %47 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %7, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %47, i8 0, i64 16, i1 false)
  %48 = load ptr, ptr %13, align 8, !tbaa !577
  store ptr null, ptr %8, align 8, !tbaa !272
  %49 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %8, i64 0, i32 2
  store ptr %48, ptr %49, align 8, !tbaa !253
  %50 = getelementptr inbounds %class.btCollisionObject, ptr %48, i64 0, i32 19
  %51 = load i32, ptr %50, align 8, !tbaa !134
  %52 = icmp eq i32 %51, 2
  %53 = select i1 %52, ptr %48, ptr null
  %54 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %8, i64 0, i32 1
  store ptr %53, ptr %54, align 8, !tbaa !510
  %55 = invoke noundef zeroext i1 @_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE(ptr noundef nonnull align 8 dereferenceable(28) %0, ptr noundef nonnull align 4 dereferenceable(56) %4, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %7, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %8, ptr noundef nonnull align 8 dereferenceable(244) %6)
          to label %56 unwind label %177

56:                                               ; preds = %44
  br i1 %55, label %57, label %193

57:                                               ; preds = %56
  %58 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 248, i32 noundef 16)
          to label %59 unwind label %179

59:                                               ; preds = %57
  %60 = getelementptr %"struct.btSoftBody::Joint", ptr %58, i64 0, i32 1
  %61 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %58, i64 0, i32 9
  %62 = getelementptr inbounds i8, ptr %58, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(240) %62, i8 0, i64 240, i1 false)
  store ptr getelementptr inbounds ({ [8 x ptr] }, ptr @_ZTVN10btSoftBody6CJointE, i64 0, inrange i32 0, i64 2), ptr %58, align 8, !tbaa !5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(124) %60, ptr noundef nonnull align 8 dereferenceable(124) %45, i64 124, i1 false)
  %63 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %58, i64 0, i32 8
  %64 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %6, i64 0, i32 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %63, ptr noundef nonnull align 4 dereferenceable(16) %64, i64 16, i1 false), !tbaa.struct !162
  %65 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %6, i64 0, i32 8, i32 0, i64 1
  %66 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %58, i64 0, i32 8, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %66, ptr noundef nonnull align 4 dereferenceable(16) %65, i64 16, i1 false), !tbaa.struct !162
  %67 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %6, i64 0, i32 8, i32 0, i64 2
  %68 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %58, i64 0, i32 8, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %68, ptr noundef nonnull align 4 dereferenceable(16) %67, i64 16, i1 false), !tbaa.struct !162
  %69 = load i8, ptr %46, align 4, !tbaa !483, !range !191, !noundef !192
  store i8 %69, ptr %61, align 4, !tbaa !483
  %70 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %58, i64 0, i32 1
  %71 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %6, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(60) %70, ptr noundef nonnull align 8 dereferenceable(60) %71, i64 60, i1 false)
  %72 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_RS", ptr %0, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !575
  %74 = getelementptr inbounds %class.btSoftBody, ptr %73, i64 0, i32 16, i32 2
  %75 = load i32, ptr %74, align 4, !tbaa !116
  %76 = getelementptr inbounds %class.btSoftBody, ptr %73, i64 0, i32 16, i32 3
  %77 = load i32, ptr %76, align 8, !tbaa !117
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %154

79:                                               ; preds = %59
  %80 = icmp eq i32 %75, 0
  %81 = shl nsw i32 %75, 1
  %82 = select i1 %80, i32 1, i32 %81
  %83 = icmp slt i32 %75, %82
  br i1 %83, label %84, label %154

84:                                               ; preds = %79
  %85 = icmp eq i32 %82, 0
  br i1 %85, label %92, label %86

86:                                               ; preds = %84
  %87 = sext i32 %82 to i64
  %88 = shl nsw i64 %87, 3
  %89 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %88, i32 noundef 16)
          to label %90 unwind label %181

90:                                               ; preds = %86
  %91 = load i32, ptr %74, align 4, !tbaa !116
  br label %92

92:                                               ; preds = %90, %84
  %93 = phi i32 [ %91, %90 ], [ %75, %84 ]
  %94 = phi ptr [ %89, %90 ], [ null, %84 ]
  %95 = icmp sgt i32 %93, 0
  br i1 %95, label %96, label %141

96:                                               ; preds = %92
  %97 = getelementptr inbounds %class.btSoftBody, ptr %73, i64 0, i32 16, i32 5
  %98 = zext i32 %93 to i64
  %99 = and i64 %98, 3
  %100 = icmp ult i32 %93, 4
  br i1 %100, label %128, label %101

101:                                              ; preds = %96
  %102 = and i64 %98, 4294967292
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i64 [ 0, %101 ], [ %125, %103 ]
  %105 = phi i64 [ 0, %101 ], [ %126, %103 ]
  %106 = getelementptr inbounds ptr, ptr %94, i64 %104
  %107 = load ptr, ptr %97, align 8, !tbaa !115
  %108 = getelementptr inbounds ptr, ptr %107, i64 %104
  %109 = load ptr, ptr %108, align 8, !tbaa !219
  store ptr %109, ptr %106, align 8, !tbaa !219
  %110 = or i64 %104, 1
  %111 = getelementptr inbounds ptr, ptr %94, i64 %110
  %112 = load ptr, ptr %97, align 8, !tbaa !115
  %113 = getelementptr inbounds ptr, ptr %112, i64 %110
  %114 = load ptr, ptr %113, align 8, !tbaa !219
  store ptr %114, ptr %111, align 8, !tbaa !219
  %115 = or i64 %104, 2
  %116 = getelementptr inbounds ptr, ptr %94, i64 %115
  %117 = load ptr, ptr %97, align 8, !tbaa !115
  %118 = getelementptr inbounds ptr, ptr %117, i64 %115
  %119 = load ptr, ptr %118, align 8, !tbaa !219
  store ptr %119, ptr %116, align 8, !tbaa !219
  %120 = or i64 %104, 3
  %121 = getelementptr inbounds ptr, ptr %94, i64 %120
  %122 = load ptr, ptr %97, align 8, !tbaa !115
  %123 = getelementptr inbounds ptr, ptr %122, i64 %120
  %124 = load ptr, ptr %123, align 8, !tbaa !219
  store ptr %124, ptr %121, align 8, !tbaa !219
  %125 = add nuw nsw i64 %104, 4
  %126 = add i64 %105, 4
  %127 = icmp eq i64 %126, %102
  br i1 %127, label %128, label %103

128:                                              ; preds = %103, %96
  %129 = phi i64 [ 0, %96 ], [ %125, %103 ]
  %130 = icmp eq i64 %99, 0
  br i1 %130, label %141, label %131

131:                                              ; preds = %128, %131
  %132 = phi i64 [ %138, %131 ], [ %129, %128 ]
  %133 = phi i64 [ %139, %131 ], [ 0, %128 ]
  %134 = getelementptr inbounds ptr, ptr %94, i64 %132
  %135 = load ptr, ptr %97, align 8, !tbaa !115
  %136 = getelementptr inbounds ptr, ptr %135, i64 %132
  %137 = load ptr, ptr %136, align 8, !tbaa !219
  store ptr %137, ptr %134, align 8, !tbaa !219
  %138 = add nuw nsw i64 %132, 1
  %139 = add i64 %133, 1
  %140 = icmp eq i64 %139, %99
  br i1 %140, label %141, label %131, !llvm.loop !605

141:                                              ; preds = %128, %131, %92
  %142 = getelementptr inbounds %class.btSoftBody, ptr %73, i64 0, i32 16, i32 5
  %143 = load ptr, ptr %142, align 8, !tbaa !115
  %144 = icmp eq ptr %143, null
  %145 = getelementptr inbounds %class.btSoftBody, ptr %73, i64 0, i32 16, i32 6
  %146 = load i8, ptr %145, align 8
  %147 = icmp eq i8 %146, 0
  %148 = select i1 %144, i1 true, i1 %147
  br i1 %148, label %152, label %149

149:                                              ; preds = %141
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %143)
          to label %150 unwind label %181

150:                                              ; preds = %149
  %151 = load i32, ptr %74, align 4, !tbaa !116
  br label %152

152:                                              ; preds = %150, %141
  %153 = phi i32 [ %151, %150 ], [ %93, %141 ]
  store i8 1, ptr %145, align 8, !tbaa !114
  store ptr %94, ptr %142, align 8, !tbaa !115
  store i32 %82, ptr %76, align 8, !tbaa !117
  br label %154

154:                                              ; preds = %152, %79, %59
  %155 = phi i32 [ %153, %152 ], [ %75, %79 ], [ %75, %59 ]
  %156 = getelementptr inbounds %class.btSoftBody, ptr %73, i64 0, i32 16, i32 5
  %157 = load ptr, ptr %156, align 8, !tbaa !115
  %158 = sext i32 %155 to i64
  %159 = getelementptr inbounds ptr, ptr %157, i64 %158
  store ptr %58, ptr %159, align 8, !tbaa !219
  %160 = add nsw i32 %155, 1
  store i32 %160, ptr %74, align 4, !tbaa !116
  %161 = load ptr, ptr %13, align 8, !tbaa !577
  %162 = getelementptr inbounds %class.btCollisionObject, ptr %161, i64 0, i32 11
  %163 = load i32, ptr %162, align 8, !tbaa !599
  %164 = and i32 %163, 3
  %165 = icmp eq i32 %164, 0
  %166 = load ptr, ptr %72, align 8, !tbaa !575
  %167 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %58, i64 0, i32 4
  %168 = load float, ptr %167, align 4, !tbaa !534
  %169 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %58, i64 0, i32 5
  br i1 %165, label %183, label %170

170:                                              ; preds = %154
  %171 = getelementptr inbounds %class.btSoftBody, ptr %166, i64 0, i32 2, i32 14
  %172 = load float, ptr %171, align 8, !tbaa !606
  %173 = fmul float %172, %168
  store float %173, ptr %167, align 4, !tbaa !534
  %174 = getelementptr inbounds %class.btSoftBody, ptr %166, i64 0, i32 2, i32 17
  br label %188

175:                                              ; preds = %39
  %176 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  br label %198

177:                                              ; preds = %44
  %178 = landingpad { ptr, i32 }
          cleanup
  br label %194

179:                                              ; preds = %57
  %180 = landingpad { ptr, i32 }
          cleanup
  br label %194

181:                                              ; preds = %149, %86
  %182 = landingpad { ptr, i32 }
          cleanup
  br label %194

183:                                              ; preds = %154
  %184 = getelementptr inbounds %class.btSoftBody, ptr %166, i64 0, i32 2, i32 13
  %185 = load float, ptr %184, align 4, !tbaa !607
  %186 = fmul float %185, %168
  store float %186, ptr %167, align 4, !tbaa !534
  %187 = getelementptr inbounds %class.btSoftBody, ptr %166, i64 0, i32 2, i32 16
  br label %188

188:                                              ; preds = %183, %170
  %189 = phi ptr [ %174, %170 ], [ %187, %183 ]
  %190 = load float, ptr %189, align 4, !tbaa !137
  %191 = load float, ptr %169, align 8, !tbaa !269
  %192 = fmul float %190, %191
  store float %192, ptr %169, align 8, !tbaa !269
  br label %193

193:                                              ; preds = %188, %56
  call void @llvm.lifetime.end.p0(i64 248, ptr nonnull %6) #38
  br label %196

194:                                              ; preds = %177, %181, %179
  %195 = phi { ptr, i32 } [ %178, %177 ], [ %182, %181 ], [ %180, %179 ]
  call void @llvm.lifetime.end.p0(i64 248, ptr nonnull %6) #38
  br label %198

196:                                              ; preds = %193, %43
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #38
  br label %197

197:                                              ; preds = %21, %196
  call void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(72) %3)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %3) #38
  ret void

198:                                              ; preds = %37, %194, %175
  %199 = phi { ptr, i32 } [ %195, %194 ], [ %176, %175 ], [ %38, %37 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #38
  invoke void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(72) %3)
          to label %200 unwind label %201

200:                                              ; preds = %198
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %3) #38
  resume { ptr, i32 } %199

201:                                              ; preds = %198
  %202 = landingpad { ptr, i32 }
          catch ptr null
  %203 = extractvalue { ptr, i32 } %202, 0
  call void @__clang_call_terminate(ptr %203) #39
  unreachable
}

declare noundef zeroext i1 @_ZN15btGjkEpaSolver214SignedDistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE(ptr noundef, ptr noundef nonnull align 4 dereferenceable(64), ptr noundef, ptr noundef nonnull align 4 dereferenceable(64), ptr noundef nonnull align 4 dereferenceable(16), ptr noundef nonnull align 4 dereferenceable(56)) local_unnamed_addr #1

; Function Attrs: uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE(ptr noundef nonnull align 8 dereferenceable(28) %0, ptr noundef nonnull align 4 dereferenceable(56) %1, ptr noundef byval(%"struct.btSoftBody::Body") align 8 %2, ptr noundef byval(%"struct.btSoftBody::Body") align 8 %3, ptr noundef nonnull align 8 dereferenceable(244) %4) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  %6 = alloca %class.btMatrix3x3, align 4
  %7 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 3
  %8 = load float, ptr %7, align 4, !tbaa !608
  %9 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %0, i64 0, i32 3
  %10 = load float, ptr %9, align 8, !tbaa !579
  %11 = fcmp olt float %8, %10
  br i1 %11, label %12, label %478

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 2
  %14 = load <2 x float>, ptr %13, align 4
  %15 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 2, i32 0, i64 2
  %16 = load float, ptr %15, align 4, !tbaa.struct !164
  %17 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 2, i32 0, i64 3
  %18 = load float, ptr %17, align 4, !tbaa.struct !318
  %19 = fmul <2 x float> %14, %14
  %20 = extractelement <2 x float> %19, i64 1
  %21 = extractelement <2 x float> %14, i64 0
  %22 = tail call float @llvm.fmuladd.f32(float %21, float %21, float %20)
  %23 = tail call float @llvm.fmuladd.f32(float %16, float %16, float %22)
  %24 = tail call float @llvm.sqrt.f32(float %23)
  %25 = fdiv float 1.000000e+00, %24
  %26 = insertelement <2 x float> poison, float %25, i64 0
  %27 = shufflevector <2 x float> %26, <2 x float> poison, <2 x i32> zeroinitializer
  %28 = fmul <2 x float> %14, %27
  %29 = fmul float %16, %25
  %30 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 1
  %31 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %54, !prof !172

33:                                               ; preds = %12
  %34 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %54, label %36

36:                                               ; preds = %33
  %37 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %52, !prof !172

39:                                               ; preds = %36
  %40 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %39
  %43 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %50, !prof !172

45:                                               ; preds = %42
  %46 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %45
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %49 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %50

50:                                               ; preds = %48, %45, %42
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %51 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %52

52:                                               ; preds = %50, %39, %36
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %53 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %54

54:                                               ; preds = %12, %33, %52
  %55 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %2, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !253
  %57 = icmp eq ptr %56, null
  %58 = getelementptr inbounds %class.btCollisionObject, ptr %56, i64 0, i32 2
  %59 = load ptr, ptr %2, align 8
  %60 = icmp eq ptr %59, null
  %61 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %59, i64 0, i32 3
  %62 = select i1 %60, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %61
  %63 = select i1 %57, ptr %62, ptr %58
  %64 = getelementptr inbounds %class.btTransform, ptr %63, i64 0, i32 1
  %65 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 1, i64 0, i32 0, i64 1
  %66 = load float, ptr %65, align 4, !tbaa !137
  %67 = getelementptr inbounds %class.btTransform, ptr %63, i64 0, i32 1, i32 0, i64 1
  %68 = load float, ptr %67, align 4, !tbaa !137
  %69 = fsub float %66, %68
  %70 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 1, i64 0, i32 0, i64 2
  %71 = getelementptr inbounds %class.btTransform, ptr %63, i64 0, i32 1, i32 0, i64 2
  %72 = load float, ptr %30, align 4, !tbaa !137
  %73 = load float, ptr %64, align 4, !tbaa !137
  %74 = load <4 x float>, ptr %70, align 4
  %75 = shufflevector <4 x float> %74, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %76 = load float, ptr %71, align 4, !tbaa !137
  %77 = insertelement <2 x float> %75, float %72, i64 1
  %78 = insertelement <2 x float> poison, float %76, i64 0
  %79 = insertelement <2 x float> %78, float %73, i64 1
  %80 = fsub <2 x float> %77, %79
  %81 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %82 = insertelement <2 x float> %81, float %69, i64 1
  %83 = insertelement <2 x float> %80, float 0.000000e+00, i64 1
  %84 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 1, i64 1
  %85 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %108, !prof !172

87:                                               ; preds = %54
  %88 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %108, label %90

90:                                               ; preds = %87
  %91 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %106, !prof !172

93:                                               ; preds = %90
  %94 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %104, !prof !172

99:                                               ; preds = %96
  %100 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %99
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %103 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %104

104:                                              ; preds = %102, %99, %96
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %105 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %106

106:                                              ; preds = %104, %93, %90
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %107 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %108

108:                                              ; preds = %54, %87, %106
  %109 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %3, i64 0, i32 2
  %110 = load ptr, ptr %109, align 8, !tbaa !253
  %111 = icmp eq ptr %110, null
  %112 = getelementptr inbounds %class.btCollisionObject, ptr %110, i64 0, i32 2
  %113 = load ptr, ptr %3, align 8
  %114 = icmp eq ptr %113, null
  %115 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %113, i64 0, i32 3
  %116 = select i1 %114, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %115
  %117 = select i1 %111, ptr %116, ptr %112
  %118 = getelementptr inbounds %class.btTransform, ptr %117, i64 0, i32 1
  %119 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 1, i64 1, i32 0, i64 1
  %120 = load float, ptr %119, align 4, !tbaa !137
  %121 = getelementptr inbounds %class.btTransform, ptr %117, i64 0, i32 1, i32 0, i64 1
  %122 = load float, ptr %121, align 4, !tbaa !137
  %123 = fsub float %120, %122
  %124 = getelementptr inbounds %"struct.btGjkEpaSolver2::sResults", ptr %1, i64 0, i32 1, i64 1, i32 0, i64 2
  %125 = getelementptr inbounds %class.btTransform, ptr %117, i64 0, i32 1, i32 0, i64 2
  %126 = load float, ptr %84, align 4, !tbaa !137
  %127 = load float, ptr %118, align 4, !tbaa !137
  %128 = load <4 x float>, ptr %124, align 4
  %129 = shufflevector <4 x float> %128, <4 x float> poison, <2 x i32> <i32 0, i32 undef>
  %130 = load float, ptr %125, align 4, !tbaa !137
  %131 = insertelement <2 x float> %129, float %126, i64 1
  %132 = insertelement <2 x float> poison, float %130, i64 0
  %133 = insertelement <2 x float> %132, float %127, i64 1
  %134 = fsub <2 x float> %131, %133
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %136 = insertelement <2 x float> %135, float %123, i64 1
  %137 = insertelement <2 x float> %134, float 0.000000e+00, i64 1
  %138 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %2, i64 0, i32 1
  %139 = load ptr, ptr %138, align 8, !tbaa !510
  %140 = icmp eq ptr %139, null
  br i1 %140, label %141, label %144

141:                                              ; preds = %108
  %142 = load ptr, ptr %2, align 8, !tbaa !272
  %143 = icmp eq ptr %142, null
  br i1 %143, label %186, label %165

144:                                              ; preds = %108
  %145 = getelementptr inbounds %class.btRigidBody, ptr %139, i64 0, i32 2
  %146 = load <2 x float>, ptr %145, align 4, !tbaa.struct !162
  %147 = getelementptr inbounds %class.btRigidBody, ptr %139, i64 0, i32 2, i32 0, i64 2
  %148 = load <2 x float>, ptr %147, align 4, !tbaa.struct !164
  %149 = getelementptr inbounds %class.btRigidBody, ptr %139, i64 0, i32 3
  %150 = getelementptr inbounds %class.btRigidBody, ptr %139, i64 0, i32 3, i32 0, i64 1
  %151 = load float, ptr %149, align 4, !tbaa !137
  %152 = load <2 x float>, ptr %150, align 4, !tbaa !137
  %153 = insertelement <2 x float> %152, float %151, i64 0
  %154 = fneg <2 x float> %153
  %155 = insertelement <2 x float> %80, float %69, i64 1
  %156 = fmul <2 x float> %155, %154
  %157 = shufflevector <2 x float> %156, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %158 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> %80, <2 x float> %157)
  %159 = extractelement <2 x float> %152, i64 0
  %160 = fneg float %159
  %161 = extractelement <2 x float> %80, i64 1
  %162 = fmul float %161, %160
  %163 = tail call float @llvm.fmuladd.f32(float %151, float %69, float %162)
  %164 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %163, i64 0
  br label %186

165:                                              ; preds = %141
  %166 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %142, i64 0, i32 13, i32 0, i64 2
  %167 = load <2 x float>, ptr %166, align 8, !tbaa.struct !164
  %168 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %142, i64 0, i32 13
  %169 = load <2 x float>, ptr %168, align 8, !tbaa.struct !162
  %170 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %142, i64 0, i32 14
  %171 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %142, i64 0, i32 14, i32 0, i64 1
  %172 = load float, ptr %170, align 4, !tbaa !137
  %173 = load <2 x float>, ptr %171, align 4, !tbaa !137
  %174 = insertelement <2 x float> %173, float %172, i64 0
  %175 = fneg <2 x float> %174
  %176 = insertelement <2 x float> %80, float %69, i64 1
  %177 = fmul <2 x float> %176, %175
  %178 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %179 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %173, <2 x float> %80, <2 x float> %178)
  %180 = extractelement <2 x float> %173, i64 0
  %181 = fneg float %180
  %182 = extractelement <2 x float> %80, i64 1
  %183 = fmul float %182, %181
  %184 = tail call float @llvm.fmuladd.f32(float %172, float %69, float %183)
  %185 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %184, i64 0
  br label %186

186:                                              ; preds = %141, %144, %165
  %187 = phi <2 x float> [ %167, %165 ], [ %148, %144 ], [ zeroinitializer, %141 ]
  %188 = phi <2 x float> [ %169, %165 ], [ %146, %144 ], [ zeroinitializer, %141 ]
  %189 = phi <2 x float> [ %179, %165 ], [ %158, %144 ], [ zeroinitializer, %141 ]
  %190 = phi <2 x float> [ %185, %165 ], [ %164, %144 ], [ zeroinitializer, %141 ]
  %191 = fadd <2 x float> %188, %189
  %192 = fadd <2 x float> %188, %189
  %193 = fadd <2 x float> %187, %190
  %194 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %3, i64 0, i32 1
  %195 = load ptr, ptr %194, align 8, !tbaa !510
  %196 = icmp eq ptr %195, null
  br i1 %196, label %197, label %198

197:                                              ; preds = %186
  br i1 %114, label %240, label %219

198:                                              ; preds = %186
  %199 = getelementptr inbounds %class.btRigidBody, ptr %195, i64 0, i32 2
  %200 = load <2 x float>, ptr %199, align 4, !tbaa.struct !162
  %201 = getelementptr inbounds %class.btRigidBody, ptr %195, i64 0, i32 2, i32 0, i64 2
  %202 = load <2 x float>, ptr %201, align 4, !tbaa.struct !164
  %203 = getelementptr inbounds %class.btRigidBody, ptr %195, i64 0, i32 3
  %204 = getelementptr inbounds %class.btRigidBody, ptr %195, i64 0, i32 3, i32 0, i64 1
  %205 = load float, ptr %203, align 4, !tbaa !137
  %206 = load <2 x float>, ptr %204, align 4, !tbaa !137
  %207 = insertelement <2 x float> %206, float %205, i64 0
  %208 = fneg <2 x float> %207
  %209 = insertelement <2 x float> %134, float %123, i64 1
  %210 = fmul <2 x float> %209, %208
  %211 = shufflevector <2 x float> %210, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %212 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %206, <2 x float> %134, <2 x float> %211)
  %213 = extractelement <2 x float> %206, i64 0
  %214 = fneg float %213
  %215 = extractelement <2 x float> %134, i64 1
  %216 = fmul float %215, %214
  %217 = tail call float @llvm.fmuladd.f32(float %205, float %123, float %216)
  %218 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %217, i64 0
  br label %240

219:                                              ; preds = %197
  %220 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %113, i64 0, i32 13, i32 0, i64 2
  %221 = load <2 x float>, ptr %220, align 8, !tbaa.struct !164
  %222 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %113, i64 0, i32 13
  %223 = load <2 x float>, ptr %222, align 8, !tbaa.struct !162
  %224 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %113, i64 0, i32 14
  %225 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %113, i64 0, i32 14, i32 0, i64 1
  %226 = load float, ptr %224, align 4, !tbaa !137
  %227 = load <2 x float>, ptr %225, align 4, !tbaa !137
  %228 = insertelement <2 x float> %227, float %226, i64 0
  %229 = fneg <2 x float> %228
  %230 = insertelement <2 x float> %134, float %123, i64 1
  %231 = fmul <2 x float> %230, %229
  %232 = shufflevector <2 x float> %231, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %233 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %227, <2 x float> %134, <2 x float> %232)
  %234 = extractelement <2 x float> %227, i64 0
  %235 = fneg float %234
  %236 = extractelement <2 x float> %134, i64 1
  %237 = fmul float %236, %235
  %238 = tail call float @llvm.fmuladd.f32(float %226, float %123, float %237)
  %239 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %238, i64 0
  br label %240

240:                                              ; preds = %197, %198, %219
  %241 = phi <2 x float> [ %221, %219 ], [ %202, %198 ], [ zeroinitializer, %197 ]
  %242 = phi <2 x float> [ %223, %219 ], [ %200, %198 ], [ zeroinitializer, %197 ]
  %243 = phi <2 x float> [ %233, %219 ], [ %212, %198 ], [ zeroinitializer, %197 ]
  %244 = phi <2 x float> [ %239, %219 ], [ %218, %198 ], [ zeroinitializer, %197 ]
  %245 = fadd <2 x float> %242, %243
  %246 = fadd <2 x float> %242, %243
  %247 = fadd <2 x float> %241, %244
  %248 = fsub <2 x float> %191, %245
  %249 = extractelement <2 x float> %248, i64 0
  %250 = fsub <2 x float> %192, %246
  %251 = extractelement <2 x float> %250, i64 1
  %252 = fsub <2 x float> %193, %247
  %253 = extractelement <2 x float> %252, i64 0
  %254 = extractelement <2 x float> %28, i64 1
  %255 = fmul float %254, %251
  %256 = extractelement <2 x float> %28, i64 0
  %257 = tail call float @llvm.fmuladd.f32(float %249, float %256, float %255)
  %258 = tail call float @llvm.fmuladd.f32(float %253, float %29, float %257)
  %259 = load float, ptr %7, align 4, !tbaa !608
  %260 = load float, ptr %9, align 8, !tbaa !579
  %261 = fsub float %259, %260
  %262 = fmul float %256, %258
  %263 = fmul float %254, %258
  %264 = fmul float %29, %258
  %265 = fsub float %249, %262
  %266 = fsub float %251, %263
  %267 = fsub float %253, %264
  %268 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %268, ptr noundef nonnull align 8 dereferenceable(24) %2, i64 24, i1 false), !tbaa.struct !252
  %269 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 1, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %269, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false), !tbaa.struct !252
  %270 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %271 = icmp eq i8 %270, 0
  br i1 %271, label %272, label %293, !prof !172

272:                                              ; preds = %240
  %273 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %293, label %275

275:                                              ; preds = %272
  %276 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %277 = icmp eq i8 %276, 0
  br i1 %277, label %278, label %291, !prof !172

278:                                              ; preds = %275
  %279 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %291, label %281

281:                                              ; preds = %278
  %282 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %283 = icmp eq i8 %282, 0
  br i1 %283, label %284, label %289, !prof !172

284:                                              ; preds = %281
  %285 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %289, label %287

287:                                              ; preds = %284
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %288 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %289

289:                                              ; preds = %287, %284, %281
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %290 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %291

291:                                              ; preds = %289, %278, %275
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %292 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %293

293:                                              ; preds = %240, %272, %291
  %294 = load ptr, ptr %55, align 8, !tbaa !253
  %295 = icmp eq ptr %294, null
  %296 = getelementptr inbounds %class.btCollisionObject, ptr %294, i64 0, i32 2
  %297 = load ptr, ptr %2, align 8
  %298 = icmp eq ptr %297, null
  %299 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %297, i64 0, i32 3
  %300 = select i1 %298, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %299
  %301 = select i1 %295, ptr %300, ptr %296
  %302 = getelementptr inbounds [3 x %class.btVector3], ptr %301, i64 0, i64 1
  %303 = getelementptr inbounds [3 x %class.btVector3], ptr %301, i64 0, i64 2
  %304 = load <2 x float>, ptr %301, align 4, !tbaa !137
  %305 = load <2 x float>, ptr %302, align 4, !tbaa !137
  %306 = insertelement <2 x float> poison, float %69, i64 0
  %307 = shufflevector <2 x float> %306, <2 x float> poison, <2 x i32> zeroinitializer
  %308 = fmul <2 x float> %307, %305
  %309 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %310 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %304, <2 x float> %309, <2 x float> %308)
  %311 = load <2 x float>, ptr %303, align 4, !tbaa !137
  %312 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> zeroinitializer
  %313 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %311, <2 x float> %312, <2 x float> %310)
  %314 = getelementptr inbounds [4 x float], ptr %301, i64 0, i64 2
  %315 = load float, ptr %314, align 4, !tbaa !137
  %316 = getelementptr inbounds [3 x %class.btVector3], ptr %301, i64 0, i64 1, i32 0, i64 2
  %317 = load float, ptr %316, align 4, !tbaa !137
  %318 = fmul float %69, %317
  %319 = extractelement <2 x float> %80, i64 1
  %320 = tail call float @llvm.fmuladd.f32(float %315, float %319, float %318)
  %321 = getelementptr inbounds [3 x %class.btVector3], ptr %301, i64 0, i64 2, i32 0, i64 2
  %322 = load float, ptr %321, align 4, !tbaa !137
  %323 = extractelement <2 x float> %80, i64 0
  %324 = tail call float @llvm.fmuladd.f32(float %322, float %323, float %320)
  %325 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %324, i64 0
  %326 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 2
  store <2 x float> %313, ptr %326, align 8, !tbaa.struct !162
  %327 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 2, i64 0, i32 0, i64 2
  store <2 x float> %325, ptr %327, align 8, !tbaa.struct !164
  %328 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body5xformEvE8identity acquire, align 8
  %329 = icmp eq i8 %328, 0
  br i1 %329, label %330, label %351, !prof !172

330:                                              ; preds = %293
  %331 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %351, label %333

333:                                              ; preds = %330
  %334 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %335 = icmp eq i8 %334, 0
  br i1 %335, label %336, label %349, !prof !172

336:                                              ; preds = %333
  %337 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %349, label %339

339:                                              ; preds = %336
  %340 = load atomic i8, ptr @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix acquire, align 8
  %341 = icmp eq i8 %340, 0
  br i1 %341, label %342, label %347, !prof !172

342:                                              ; preds = %339
  %343 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %347, label %345

345:                                              ; preds = %342
  store float 1.000000e+00, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 0, i32 0, i64 1), i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 1), align 4, !tbaa !137
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1, i32 0, i64 2), i8 0, i64 16, i1 false)
  store <2 x float> <float 1.000000e+00, float 0.000000e+00>, ptr getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2, i32 0, i64 2), align 4, !tbaa !137
  %346 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix) #38
  br label %347

347:                                              ; preds = %345, %342, %339
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btMatrix3x3, ptr @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, i64 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %348 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %349

349:                                              ; preds = %347, %336, %333
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), i64 16, i1 false), !tbaa.struct !162
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, i64 0, i32 1), ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !162
  %350 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZNK10btSoftBody4Body5xformEvE8identity)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body5xformEvE8identity) #38
  br label %351

351:                                              ; preds = %293, %330, %349
  %352 = load ptr, ptr %109, align 8, !tbaa !253
  %353 = icmp eq ptr %352, null
  %354 = getelementptr inbounds %class.btCollisionObject, ptr %352, i64 0, i32 2
  %355 = load ptr, ptr %3, align 8
  %356 = icmp eq ptr %355, null
  %357 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %355, i64 0, i32 3
  %358 = select i1 %356, ptr @_ZZNK10btSoftBody4Body5xformEvE8identity, ptr %357
  %359 = select i1 %353, ptr %358, ptr %354
  %360 = getelementptr inbounds [3 x %class.btVector3], ptr %359, i64 0, i64 1
  %361 = getelementptr inbounds [3 x %class.btVector3], ptr %359, i64 0, i64 2
  %362 = load <2 x float>, ptr %359, align 4, !tbaa !137
  %363 = load <2 x float>, ptr %360, align 4, !tbaa !137
  %364 = insertelement <2 x float> poison, float %123, i64 0
  %365 = shufflevector <2 x float> %364, <2 x float> poison, <2 x i32> zeroinitializer
  %366 = fmul <2 x float> %365, %363
  %367 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %368 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %362, <2 x float> %367, <2 x float> %366)
  %369 = load <2 x float>, ptr %361, align 4, !tbaa !137
  %370 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> zeroinitializer
  %371 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %369, <2 x float> %370, <2 x float> %368)
  %372 = getelementptr inbounds [4 x float], ptr %359, i64 0, i64 2
  %373 = load float, ptr %372, align 4, !tbaa !137
  %374 = getelementptr inbounds [3 x %class.btVector3], ptr %359, i64 0, i64 1, i32 0, i64 2
  %375 = load float, ptr %374, align 4, !tbaa !137
  %376 = fmul float %123, %375
  %377 = extractelement <2 x float> %134, i64 1
  %378 = tail call float @llvm.fmuladd.f32(float %373, float %377, float %376)
  %379 = getelementptr inbounds [3 x %class.btVector3], ptr %359, i64 0, i64 2, i32 0, i64 2
  %380 = load float, ptr %379, align 4, !tbaa !137
  %381 = extractelement <2 x float> %134, i64 0
  %382 = tail call float @llvm.fmuladd.f32(float %380, float %381, float %378)
  %383 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %382, i64 0
  %384 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 2, i64 1
  store <2 x float> %371, ptr %384, align 8, !tbaa.struct !162
  %385 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 2, i64 1, i32 0, i64 2
  store <2 x float> %383, ptr %385, align 8, !tbaa.struct !164
  %386 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 3
  store <2 x float> %82, ptr %386, align 8, !tbaa.struct !162
  %387 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 3, i64 0, i32 0, i64 2
  store <2 x float> %83, ptr %387, align 8, !tbaa.struct !164
  %388 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 3, i64 1
  store <2 x float> %136, ptr %388, align 8, !tbaa.struct !162
  %389 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 3, i64 1, i32 0, i64 2
  store <2 x float> %137, ptr %389, align 8, !tbaa.struct !164
  %390 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 3
  store <2 x float> <float 1.000000e+00, float 1.000000e+00>, ptr %390, align 8, !tbaa !137
  %391 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 1
  store i32 0, ptr %391, align 8, !tbaa !543
  %392 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 2
  store i32 0, ptr %392, align 4, !tbaa !545
  %393 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 5
  store float 1.000000e+00, ptr %393, align 8, !tbaa !269
  %394 = insertelement <2 x float> poison, float %261, i64 0
  %395 = shufflevector <2 x float> %394, <2 x float> poison, <2 x i32> zeroinitializer
  %396 = fmul <2 x float> %28, %395
  %397 = fmul float %29, %261
  %398 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %397, i64 0
  %399 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 6
  store <2 x float> %396, ptr %399, align 4, !tbaa.struct !162
  %400 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 6, i32 0, i64 2
  store <2 x float> %398, ptr %400, align 4, !tbaa.struct !164
  %401 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 4
  store <2 x float> %28, ptr %401, align 8
  %402 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 4, i32 0, i64 2
  store float %29, ptr %402, align 8, !tbaa.struct !164
  %403 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 4, i32 0, i64 3
  store float %18, ptr %403, align 4, !tbaa.struct !318
  %404 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 9
  store i8 0, ptr %404, align 4, !tbaa !483
  %405 = fmul float %266, %266
  %406 = tail call float @llvm.fmuladd.f32(float %265, float %265, float %405)
  %407 = tail call float @llvm.fmuladd.f32(float %267, float %267, float %406)
  %408 = fneg float %258
  %409 = getelementptr inbounds %"struct.btSoftColliders::ClusterBase", ptr %0, i64 0, i32 4
  %410 = load float, ptr %409, align 4, !tbaa !581
  %411 = fmul float %410, %408
  %412 = fcmp olt float %407, %411
  %413 = select i1 %412, float 1.000000e+00, float %410
  %414 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %4, i64 0, i32 5
  store float %413, ptr %414, align 8, !tbaa !611
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %6) #38
  %415 = load ptr, ptr %138, align 8, !tbaa !510
  %416 = icmp eq ptr %415, null
  br i1 %416, label %420, label %417

417:                                              ; preds = %351
  %418 = getelementptr inbounds %class.btRigidBody, ptr %415, i64 0, i32 4
  %419 = load float, ptr %418, align 8, !tbaa !451
  br label %426

420:                                              ; preds = %351
  %421 = load ptr, ptr %2, align 8, !tbaa !272
  %422 = icmp eq ptr %421, null
  br i1 %422, label %426, label %423

423:                                              ; preds = %420
  %424 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %421, i64 0, i32 5
  %425 = load float, ptr %424, align 4, !tbaa !374
  br label %426

426:                                              ; preds = %417, %420, %423
  %427 = phi float [ %419, %417 ], [ %425, %423 ], [ 0.000000e+00, %420 ]
  %428 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi acquire, align 8
  %429 = icmp eq i8 %428, 0
  br i1 %429, label %430, label %435, !prof !172

430:                                              ; preds = %426
  %431 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %435, label %433

433:                                              ; preds = %430
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, i8 0, i64 48, i1 false)
  %434 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  br label %435

435:                                              ; preds = %426, %430, %433
  %436 = load ptr, ptr %138, align 8, !tbaa !510
  %437 = icmp eq ptr %436, null
  %438 = getelementptr inbounds %class.btRigidBody, ptr %436, i64 0, i32 1
  %439 = load ptr, ptr %2, align 8
  %440 = icmp eq ptr %439, null
  %441 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %439, i64 0, i32 7
  %442 = select i1 %440, ptr @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, ptr %441
  %443 = select i1 %437, ptr %442, ptr %438
  %444 = load ptr, ptr %194, align 8, !tbaa !510
  %445 = icmp eq ptr %444, null
  br i1 %445, label %449, label %446

446:                                              ; preds = %435
  %447 = getelementptr inbounds %class.btRigidBody, ptr %444, i64 0, i32 4
  %448 = load float, ptr %447, align 8, !tbaa !451
  br label %455

449:                                              ; preds = %435
  %450 = load ptr, ptr %3, align 8, !tbaa !272
  %451 = icmp eq ptr %450, null
  br i1 %451, label %455, label %452

452:                                              ; preds = %449
  %453 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %450, i64 0, i32 5
  %454 = load float, ptr %453, align 4, !tbaa !374
  br label %455

455:                                              ; preds = %446, %449, %452
  %456 = phi float [ %448, %446 ], [ %454, %452 ], [ 0.000000e+00, %449 ]
  %457 = load atomic i8, ptr @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi acquire, align 8
  %458 = icmp eq i8 %457, 0
  br i1 %458, label %459, label %464, !prof !172

459:                                              ; preds = %455
  %460 = tail call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %464, label %462

462:                                              ; preds = %459
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, i8 0, i64 48, i1 false)
  %463 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
  tail call void @__cxa_guard_release(ptr nonnull @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi) #38
  br label %464

464:                                              ; preds = %455, %459, %462
  %465 = load ptr, ptr %194, align 8, !tbaa !510
  %466 = icmp eq ptr %465, null
  %467 = getelementptr inbounds %class.btRigidBody, ptr %465, i64 0, i32 1
  %468 = load ptr, ptr %3, align 8
  %469 = icmp eq ptr %468, null
  %470 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %468, i64 0, i32 7
  %471 = select i1 %469, ptr @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, ptr %470
  %472 = select i1 %466, ptr %471, ptr %467
  call fastcc void @_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_(ptr noalias nonnull align 4 %6, float noundef %427, ptr noundef nonnull align 4 dereferenceable(48) %443, ptr noundef nonnull align 4 dereferenceable(16) %386, float noundef %456, ptr noundef nonnull align 4 dereferenceable(48) %472, ptr noundef nonnull align 4 dereferenceable(16) %388)
  %473 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %473, ptr noundef nonnull align 4 dereferenceable(16) %6, i64 16, i1 false), !tbaa.struct !162
  %474 = getelementptr inbounds [3 x %class.btVector3], ptr %6, i64 0, i64 1
  %475 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 8, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %475, ptr noundef nonnull align 4 dereferenceable(16) %474, i64 16, i1 false), !tbaa.struct !162
  %476 = getelementptr inbounds [3 x %class.btVector3], ptr %6, i64 0, i64 2
  %477 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %4, i64 0, i32 8, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %477, ptr noundef nonnull align 4 dereferenceable(16) %476, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %6) #38
  br label %478

478:                                              ; preds = %5, %464
  ret i1 %11
}

declare void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(24)) unnamed_addr #1

declare void @_ZN21btConvexInternalShapeC2Ev(ptr noundef nonnull align 8 dereferenceable(64)) unnamed_addr #1

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN27btSoftClusterCollisionShapeD0Ev(ptr noundef nonnull align 8 dereferenceable(72) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  invoke void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(72) %0)
          to label %2 unwind label %3

2:                                                ; preds = %1
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %0)
  ret void

3:                                                ; preds = %1
  %4 = landingpad { ptr, i32 }
          cleanup
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %0)
          to label %5 unwind label %6

5:                                                ; preds = %3
  resume { ptr, i32 } %4

6:                                                ; preds = %3
  %7 = landingpad { ptr, i32 }
          catch ptr null
  %8 = extractvalue { ptr, i32 } %7, 0
  tail call void @__clang_call_terminate(ptr %8) #39
  unreachable
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_(ptr noundef nonnull align 8 dereferenceable(72) %0, ptr noundef nonnull align 4 dereferenceable(64) %1, ptr noundef nonnull align 4 dereferenceable(16) %2, ptr noundef nonnull align 4 dereferenceable(16) %3) unnamed_addr #29 comdat align 2 {
  ret void
}

declare void @_ZN21btConvexInternalShape15setLocalScalingERK9btVector3(ptr noundef nonnull align 8 dereferenceable(64), ptr noundef nonnull align 4 dereferenceable(16)) unnamed_addr #1

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef nonnull align 4 dereferenceable(16) ptr @_ZNK21btConvexInternalShape15getLocalScalingEv(ptr noundef nonnull align 8 dereferenceable(64) %0) unnamed_addr #29 comdat align 2 {
  %2 = getelementptr inbounds %class.btConvexInternalShape, ptr %0, i64 0, i32 1
  ret ptr %2
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3(ptr noundef nonnull align 8 dereferenceable(72) %0, float noundef %1, ptr noundef nonnull align 4 dereferenceable(16) %2) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef ptr @_ZNK27btSoftClusterCollisionShape7getNameEv(ptr noundef nonnull align 8 dereferenceable(72) %0) unnamed_addr #29 comdat align 2 {
  ret ptr @.str.4
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN27btSoftClusterCollisionShape9setMarginEf(ptr noundef nonnull align 8 dereferenceable(72) %0, float noundef %1) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %class.btConvexInternalShape, ptr %0, i64 0, i32 3
  store float %1, ptr %3, align 8, !tbaa !604
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local noundef float @_ZNK27btSoftClusterCollisionShape9getMarginEv(ptr noundef nonnull align 8 dereferenceable(72) %0) unnamed_addr #4 comdat align 2 {
  %2 = load ptr, ptr %0, align 8, !tbaa !5
  %3 = getelementptr inbounds ptr, ptr %2, i64 11
  %4 = load ptr, ptr %3, align 8
  %5 = tail call noundef float %4(ptr noundef nonnull align 8 dereferenceable(72) %0)
  ret float %5
}

; Function Attrs: uwtable
define linkonce_odr dso_local { <2 x float>, <2 x float> } @_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3(ptr noundef nonnull align 8 dereferenceable(72) %0, ptr noundef nonnull align 4 dereferenceable(16) %1) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %class.btSoftClusterCollisionShape, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !600
  %5 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %4, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !320
  %7 = load ptr, ptr %6, align 8, !tbaa !219
  %8 = load float, ptr %1, align 4, !tbaa !137
  %9 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !137
  %11 = getelementptr inbounds [4 x float], ptr %1, i64 0, i64 2
  %12 = load float, ptr %11, align 4, !tbaa !137
  %13 = getelementptr inbounds %class.btAlignedObjectArray.59, ptr %4, i64 0, i32 2
  %14 = load i32, ptr %13, align 4, !tbaa !319
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %16, label %31

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 0, i32 1, i32 0, i64 2
  %18 = load float, ptr %17, align 4, !tbaa !137
  %19 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 0, i32 1
  %20 = load float, ptr %19, align 4, !tbaa !137
  %21 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %7, i64 0, i32 1, i32 0, i64 1
  %22 = load float, ptr %21, align 4, !tbaa !137
  %23 = fmul float %10, %22
  %24 = tail call float @llvm.fmuladd.f32(float %8, float %20, float %23)
  %25 = tail call float @llvm.fmuladd.f32(float %12, float %18, float %24)
  %26 = zext i32 %14 to i64
  br label %39

27:                                               ; preds = %39
  %28 = sext i32 %56 to i64
  %29 = getelementptr inbounds ptr, ptr %6, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !219
  br label %31

31:                                               ; preds = %2, %27
  %32 = phi ptr [ %30, %27 ], [ %7, %2 ]
  %33 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %32, i64 0, i32 1
  %34 = load <2 x float>, ptr %33, align 8, !tbaa.struct !162
  %35 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %32, i64 0, i32 1, i32 0, i64 2
  %36 = load <2 x float>, ptr %35, align 8, !tbaa.struct !164
  %37 = insertvalue { <2 x float>, <2 x float> } poison, <2 x float> %34, 0
  %38 = insertvalue { <2 x float>, <2 x float> } %37, <2 x float> %36, 1
  ret { <2 x float>, <2 x float> } %38

39:                                               ; preds = %16, %39
  %40 = phi i64 [ 1, %16 ], [ %58, %39 ]
  %41 = phi float [ %25, %16 ], [ %57, %39 ]
  %42 = phi i32 [ 0, %16 ], [ %56, %39 ]
  %43 = getelementptr inbounds ptr, ptr %6, i64 %40
  %44 = load ptr, ptr %43, align 8, !tbaa !219
  %45 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %44, i64 0, i32 1
  %46 = load float, ptr %45, align 4, !tbaa !137
  %47 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %44, i64 0, i32 1, i32 0, i64 1
  %48 = load float, ptr %47, align 4, !tbaa !137
  %49 = fmul float %10, %48
  %50 = tail call float @llvm.fmuladd.f32(float %8, float %46, float %49)
  %51 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %44, i64 0, i32 1, i32 0, i64 2
  %52 = load float, ptr %51, align 4, !tbaa !137
  %53 = tail call float @llvm.fmuladd.f32(float %12, float %52, float %50)
  %54 = fcmp ogt float %53, %41
  %55 = trunc i64 %40 to i32
  %56 = select i1 %54, i32 %55, i32 %42
  %57 = select i1 %54, float %53, float %41
  %58 = add nuw nsw i64 %40, 1
  %59 = icmp eq i64 %58, %26
  br i1 %59, label %27, label %39
}

; Function Attrs: uwtable
define linkonce_odr dso_local { <2 x float>, <2 x float> } @_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3(ptr noundef nonnull align 8 dereferenceable(72) %0, ptr noundef nonnull align 4 dereferenceable(16) %1) unnamed_addr #0 comdat align 2 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = getelementptr inbounds ptr, ptr %3, i64 12
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { <2 x float>, <2 x float> } %5(ptr noundef nonnull align 8 dereferenceable(72) %0, ptr noundef nonnull align 4 dereferenceable(16) %1)
  ret { <2 x float>, <2 x float> } %6
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(ptr noundef nonnull align 8 dereferenceable(72) %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) unnamed_addr #29 comdat align 2 {
  ret void
}

declare void @_ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_(ptr noundef nonnull align 8 dereferenceable(64), ptr noundef nonnull align 4 dereferenceable(64), ptr noundef nonnull align 4 dereferenceable(16), ptr noundef nonnull align 4 dereferenceable(16)) unnamed_addr #1

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef i32 @_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv(ptr noundef nonnull align 8 dereferenceable(64) %0) unnamed_addr #29 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3(ptr noundef nonnull align 8 dereferenceable(64) %0, i32 noundef %1, ptr noundef nonnull align 4 dereferenceable(16) %2) unnamed_addr #29 comdat align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef i32 @_ZNK27btSoftClusterCollisionShape12getShapeTypeEv(ptr noundef nonnull align 8 dereferenceable(72) %0) unnamed_addr #29 comdat align 2 {
  ret i32 32
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders12CollideCL_SSD0Ev(ptr noundef nonnull align 8 dereferenceable(48) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_(ptr noundef nonnull align 8 dereferenceable(48) %0, ptr noundef %1, ptr noundef %2) unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  %4 = alloca %class.btSoftClusterCollisionShape, align 8
  %5 = alloca %class.btSoftClusterCollisionShape, align 8
  %6 = alloca %"struct.btGjkEpaSolver2::sResults", align 4
  %7 = alloca %class.btVector3, align 8
  %8 = alloca %"struct.btSoftBody::CJoint", align 8
  %9 = alloca %"struct.btSoftBody::Body", align 8
  %10 = alloca %"struct.btSoftBody::Body", align 8
  %11 = getelementptr inbounds %struct.btDbvtNode, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !163
  %13 = getelementptr inbounds %struct.btDbvtNode, ptr %2, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !163
  %15 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_SS", ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !219
  %17 = getelementptr inbounds %"struct.btSoftColliders::CollideCL_SS", ptr %0, i64 0, i32 1, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !219
  %19 = icmp eq ptr %16, %18
  br i1 %19, label %20, label %39

20:                                               ; preds = %3
  %21 = getelementptr inbounds %class.btSoftBody, ptr %16, i64 0, i32 25, i32 2
  %22 = load i32, ptr %21, align 4, !tbaa !128
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %39, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 24
  %26 = load i32, ptr %25, align 4, !tbaa !373
  %27 = getelementptr inbounds %class.btSoftBody, ptr %16, i64 0, i32 24, i32 2
  %28 = load i32, ptr %27, align 4, !tbaa !124
  %29 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %14, i64 0, i32 24
  %30 = load i32, ptr %29, align 4, !tbaa !373
  %31 = mul nsw i32 %30, %28
  %32 = add nsw i32 %31, %26
  %33 = getelementptr inbounds %class.btSoftBody, ptr %16, i64 0, i32 25, i32 5
  %34 = load ptr, ptr %33, align 8, !tbaa !127
  %35 = sext i32 %32 to i64
  %36 = getelementptr inbounds i8, ptr %34, i64 %35
  %37 = load i8, ptr %36, align 1, !tbaa !368, !range !191, !noundef !192
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %236

39:                                               ; preds = %20, %3, %24
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %4) #38
  call void @_ZN21btConvexInternalShapeC2Ev(ptr noundef nonnull align 8 dereferenceable(64) %4)
  store ptr getelementptr inbounds ({ [21 x ptr] }, ptr @_ZTV27btSoftClusterCollisionShape, i64 0, inrange i32 0, i64 2), ptr %4, align 8, !tbaa !5
  %40 = getelementptr inbounds %class.btSoftClusterCollisionShape, ptr %4, i64 0, i32 1
  store ptr %12, ptr %40, align 8, !tbaa !600
  %41 = getelementptr inbounds %class.btConvexInternalShape, ptr %4, i64 0, i32 3
  store float 0.000000e+00, ptr %41, align 8, !tbaa !604
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %5) #38
  invoke void @_ZN21btConvexInternalShapeC2Ev(ptr noundef nonnull align 8 dereferenceable(64) %5)
          to label %42 unwind label %216

42:                                               ; preds = %39
  store ptr getelementptr inbounds ({ [21 x ptr] }, ptr @_ZTV27btSoftClusterCollisionShape, i64 0, inrange i32 0, i64 2), ptr %5, align 8, !tbaa !5
  %43 = getelementptr inbounds %class.btSoftClusterCollisionShape, ptr %5, i64 0, i32 1
  store ptr %14, ptr %43, align 8, !tbaa !600
  %44 = getelementptr inbounds %class.btConvexInternalShape, ptr %5, i64 0, i32 3
  store float 0.000000e+00, ptr %44, align 8, !tbaa !604
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %6) #38
  %45 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %58, !prof !172

47:                                               ; preds = %42
  %48 = call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %47
  %51 = invoke noundef nonnull align 4 dereferenceable(48) ptr @_ZN11btMatrix3x311getIdentityEv()
          to label %52 unwind label %56

52:                                               ; preds = %50
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) %51, i64 16, i1 false), !tbaa.struct !162
  %53 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) %53, i64 16, i1 false), !tbaa.struct !162
  %54 = getelementptr inbounds [3 x %class.btVector3], ptr %51, i64 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) %54, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %55 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %58

56:                                               ; preds = %50
  %57 = landingpad { ptr, i32 }
          cleanup
  call void @__cxa_guard_abort(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %231

58:                                               ; preds = %52, %47, %42
  %59 = load atomic i8, ptr @_ZGVZN11btTransform11getIdentityEvE17identityTransform acquire, align 8
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %72, !prof !172

61:                                               ; preds = %58
  %62 = call i32 @__cxa_guard_acquire(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %61
  %65 = invoke noundef nonnull align 4 dereferenceable(48) ptr @_ZN11btMatrix3x311getIdentityEv()
          to label %66 unwind label %70

66:                                               ; preds = %64
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) %65, i64 16, i1 false), !tbaa.struct !162
  %67 = getelementptr inbounds [3 x %class.btVector3], ptr %65, i64 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 1), ptr noundef nonnull align 4 dereferenceable(16) %67, i64 16, i1 false), !tbaa.struct !162
  %68 = getelementptr inbounds [3 x %class.btVector3], ptr %65, i64 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 0, i32 0, i64 2), ptr noundef nonnull align 4 dereferenceable(16) %68, i64 16, i1 false), !tbaa.struct !162
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) getelementptr inbounds (%class.btTransform, ptr @_ZZN11btTransform11getIdentityEvE17identityTransform, i64 0, i32 1), i8 0, i64 16, i1 false)
  %69 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @_ZZN11btTransform11getIdentityEvE17identityTransform)
  call void @__cxa_guard_release(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %72

70:                                               ; preds = %64
  %71 = landingpad { ptr, i32 }
          cleanup
  call void @__cxa_guard_abort(ptr nonnull @_ZGVZN11btTransform11getIdentityEvE17identityTransform) #38
  br label %231

72:                                               ; preds = %58, %61, %66
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #38
  %73 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 8
  %74 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %14, i64 0, i32 8
  %75 = load <2 x float>, ptr %73, align 4, !tbaa !137
  %76 = load <2 x float>, ptr %74, align 4, !tbaa !137
  %77 = fsub <2 x float> %75, %76
  %78 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %12, i64 0, i32 8, i32 0, i64 2
  %79 = load float, ptr %78, align 4, !tbaa !137
  %80 = getelementptr inbounds %"struct.btSoftBody::Cluster", ptr %14, i64 0, i32 8, i32 0, i64 2
  %81 = load float, ptr %80, align 4, !tbaa !137
  %82 = fsub float %79, %81
  %83 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %82, i64 0
  store <2 x float> %77, ptr %7, align 8
  %84 = getelementptr inbounds { <2 x float>, <2 x float> }, ptr %7, i64 0, i32 1
  store <2 x float> %83, ptr %84, align 8
  %85 = invoke noundef zeroext i1 @_ZN15btGjkEpaSolver214SignedDistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE(ptr noundef nonnull %4, ptr noundef nonnull align 4 dereferenceable(64) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull %5, ptr noundef nonnull align 4 dereferenceable(64) @_ZZN11btTransform11getIdentityEvE17identityTransform, ptr noundef nonnull align 4 dereferenceable(16) %7, ptr noundef nonnull align 4 dereferenceable(56) %6)
          to label %86 unwind label %218

86:                                               ; preds = %72
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #38
  br i1 %85, label %87, label %229

87:                                               ; preds = %86
  call void @llvm.lifetime.start.p0(i64 248, ptr nonnull %8) #38
  %88 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %8, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %88, i8 0, i64 48, i1 false)
  %89 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %8, i64 0, i32 9
  store i8 0, ptr %89, align 4, !tbaa !483
  store ptr getelementptr inbounds ({ [8 x ptr] }, ptr @_ZTVN10btSoftBody6CJointE, i64 0, inrange i32 0, i64 2), ptr %8, align 8, !tbaa !5
  store ptr %12, ptr %9, align 8, !tbaa !272
  %90 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %9, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %90, i8 0, i64 16, i1 false)
  store ptr %14, ptr %10, align 8, !tbaa !272
  %91 = getelementptr inbounds %"struct.btSoftBody::Body", ptr %10, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %91, i8 0, i64 16, i1 false)
  %92 = invoke noundef zeroext i1 @_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE(ptr noundef nonnull align 8 dereferenceable(28) %0, ptr noundef nonnull align 4 dereferenceable(56) %6, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %9, ptr noundef nonnull byval(%"struct.btSoftBody::Body") align 8 %10, ptr noundef nonnull align 8 dereferenceable(244) %8)
          to label %93 unwind label %220

93:                                               ; preds = %87
  br i1 %92, label %94, label %226

94:                                               ; preds = %93
  %95 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef 248, i32 noundef 16)
          to label %96 unwind label %222

96:                                               ; preds = %94
  %97 = getelementptr %"struct.btSoftBody::Joint", ptr %95, i64 0, i32 1
  %98 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %95, i64 0, i32 9
  %99 = getelementptr inbounds i8, ptr %95, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(240) %99, i8 0, i64 240, i1 false)
  store ptr getelementptr inbounds ({ [8 x ptr] }, ptr @_ZTVN10btSoftBody6CJointE, i64 0, inrange i32 0, i64 2), ptr %95, align 8, !tbaa !5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(124) %97, ptr noundef nonnull align 8 dereferenceable(124) %88, i64 124, i1 false)
  %100 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %95, i64 0, i32 8
  %101 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %8, i64 0, i32 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %100, ptr noundef nonnull align 4 dereferenceable(16) %101, i64 16, i1 false), !tbaa.struct !162
  %102 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %8, i64 0, i32 8, i32 0, i64 1
  %103 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %95, i64 0, i32 8, i32 0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %103, ptr noundef nonnull align 4 dereferenceable(16) %102, i64 16, i1 false), !tbaa.struct !162
  %104 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %8, i64 0, i32 8, i32 0, i64 2
  %105 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %95, i64 0, i32 8, i32 0, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %105, ptr noundef nonnull align 4 dereferenceable(16) %104, i64 16, i1 false), !tbaa.struct !162
  %106 = load i8, ptr %89, align 4, !tbaa !483, !range !191, !noundef !192
  store i8 %106, ptr %98, align 4, !tbaa !483
  %107 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %95, i64 0, i32 1
  %108 = getelementptr inbounds %"struct.btSoftBody::CJoint", ptr %8, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(60) %107, ptr noundef nonnull align 8 dereferenceable(60) %108, i64 60, i1 false)
  %109 = load ptr, ptr %15, align 8, !tbaa !219
  %110 = getelementptr inbounds %class.btSoftBody, ptr %109, i64 0, i32 16, i32 2
  %111 = load i32, ptr %110, align 4, !tbaa !116
  %112 = getelementptr inbounds %class.btSoftBody, ptr %109, i64 0, i32 16, i32 3
  %113 = load i32, ptr %112, align 8, !tbaa !117
  %114 = icmp eq i32 %111, %113
  br i1 %114, label %115, label %190

115:                                              ; preds = %96
  %116 = icmp eq i32 %111, 0
  %117 = shl nsw i32 %111, 1
  %118 = select i1 %116, i32 1, i32 %117
  %119 = icmp slt i32 %111, %118
  br i1 %119, label %120, label %190

120:                                              ; preds = %115
  %121 = icmp eq i32 %118, 0
  br i1 %121, label %128, label %122

122:                                              ; preds = %120
  %123 = sext i32 %118 to i64
  %124 = shl nsw i64 %123, 3
  %125 = invoke noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %124, i32 noundef 16)
          to label %126 unwind label %224

126:                                              ; preds = %122
  %127 = load i32, ptr %110, align 4, !tbaa !116
  br label %128

128:                                              ; preds = %126, %120
  %129 = phi i32 [ %127, %126 ], [ %111, %120 ]
  %130 = phi ptr [ %125, %126 ], [ null, %120 ]
  %131 = icmp sgt i32 %129, 0
  br i1 %131, label %132, label %177

132:                                              ; preds = %128
  %133 = getelementptr inbounds %class.btSoftBody, ptr %109, i64 0, i32 16, i32 5
  %134 = zext i32 %129 to i64
  %135 = and i64 %134, 3
  %136 = icmp ult i32 %129, 4
  br i1 %136, label %164, label %137

137:                                              ; preds = %132
  %138 = and i64 %134, 4294967292
  br label %139

139:                                              ; preds = %139, %137
  %140 = phi i64 [ 0, %137 ], [ %161, %139 ]
  %141 = phi i64 [ 0, %137 ], [ %162, %139 ]
  %142 = getelementptr inbounds ptr, ptr %130, i64 %140
  %143 = load ptr, ptr %133, align 8, !tbaa !115
  %144 = getelementptr inbounds ptr, ptr %143, i64 %140
  %145 = load ptr, ptr %144, align 8, !tbaa !219
  store ptr %145, ptr %142, align 8, !tbaa !219
  %146 = or i64 %140, 1
  %147 = getelementptr inbounds ptr, ptr %130, i64 %146
  %148 = load ptr, ptr %133, align 8, !tbaa !115
  %149 = getelementptr inbounds ptr, ptr %148, i64 %146
  %150 = load ptr, ptr %149, align 8, !tbaa !219
  store ptr %150, ptr %147, align 8, !tbaa !219
  %151 = or i64 %140, 2
  %152 = getelementptr inbounds ptr, ptr %130, i64 %151
  %153 = load ptr, ptr %133, align 8, !tbaa !115
  %154 = getelementptr inbounds ptr, ptr %153, i64 %151
  %155 = load ptr, ptr %154, align 8, !tbaa !219
  store ptr %155, ptr %152, align 8, !tbaa !219
  %156 = or i64 %140, 3
  %157 = getelementptr inbounds ptr, ptr %130, i64 %156
  %158 = load ptr, ptr %133, align 8, !tbaa !115
  %159 = getelementptr inbounds ptr, ptr %158, i64 %156
  %160 = load ptr, ptr %159, align 8, !tbaa !219
  store ptr %160, ptr %157, align 8, !tbaa !219
  %161 = add nuw nsw i64 %140, 4
  %162 = add i64 %141, 4
  %163 = icmp eq i64 %162, %138
  br i1 %163, label %164, label %139

164:                                              ; preds = %139, %132
  %165 = phi i64 [ 0, %132 ], [ %161, %139 ]
  %166 = icmp eq i64 %135, 0
  br i1 %166, label %177, label %167

167:                                              ; preds = %164, %167
  %168 = phi i64 [ %174, %167 ], [ %165, %164 ]
  %169 = phi i64 [ %175, %167 ], [ 0, %164 ]
  %170 = getelementptr inbounds ptr, ptr %130, i64 %168
  %171 = load ptr, ptr %133, align 8, !tbaa !115
  %172 = getelementptr inbounds ptr, ptr %171, i64 %168
  %173 = load ptr, ptr %172, align 8, !tbaa !219
  store ptr %173, ptr %170, align 8, !tbaa !219
  %174 = add nuw nsw i64 %168, 1
  %175 = add i64 %169, 1
  %176 = icmp eq i64 %175, %135
  br i1 %176, label %177, label %167, !llvm.loop !612

177:                                              ; preds = %164, %167, %128
  %178 = getelementptr inbounds %class.btSoftBody, ptr %109, i64 0, i32 16, i32 5
  %179 = load ptr, ptr %178, align 8, !tbaa !115
  %180 = icmp eq ptr %179, null
  %181 = getelementptr inbounds %class.btSoftBody, ptr %109, i64 0, i32 16, i32 6
  %182 = load i8, ptr %181, align 8
  %183 = icmp eq i8 %182, 0
  %184 = select i1 %180, i1 true, i1 %183
  br i1 %184, label %188, label %185

185:                                              ; preds = %177
  invoke void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %179)
          to label %186 unwind label %224

186:                                              ; preds = %185
  %187 = load i32, ptr %110, align 4, !tbaa !116
  br label %188

188:                                              ; preds = %186, %177
  %189 = phi i32 [ %187, %186 ], [ %129, %177 ]
  store i8 1, ptr %181, align 8, !tbaa !114
  store ptr %130, ptr %178, align 8, !tbaa !115
  store i32 %118, ptr %112, align 8, !tbaa !117
  br label %190

190:                                              ; preds = %188, %115, %96
  %191 = phi i32 [ %189, %188 ], [ %111, %115 ], [ %111, %96 ]
  %192 = getelementptr inbounds %class.btSoftBody, ptr %109, i64 0, i32 16, i32 5
  %193 = load ptr, ptr %192, align 8, !tbaa !115
  %194 = sext i32 %191 to i64
  %195 = getelementptr inbounds ptr, ptr %193, i64 %194
  store ptr %95, ptr %195, align 8, !tbaa !219
  %196 = add nsw i32 %191, 1
  store i32 %196, ptr %110, align 4, !tbaa !116
  %197 = load ptr, ptr %15, align 8, !tbaa !219
  %198 = getelementptr inbounds %class.btSoftBody, ptr %197, i64 0, i32 2, i32 15
  %199 = load ptr, ptr %17, align 8, !tbaa !219
  %200 = getelementptr inbounds %class.btSoftBody, ptr %199, i64 0, i32 2, i32 15
  %201 = load float, ptr %198, align 4
  %202 = load float, ptr %200, align 4
  %203 = fcmp ogt float %201, %202
  %204 = select i1 %203, float %201, float %202
  %205 = getelementptr inbounds %"struct.btSoftBody::Joint", ptr %95, i64 0, i32 4
  %206 = getelementptr inbounds %class.btSoftBody, ptr %197, i64 0, i32 2, i32 18
  %207 = load float, ptr %206, align 8, !tbaa !613
  %208 = getelementptr inbounds %class.btSoftBody, ptr %199, i64 0, i32 2, i32 18
  %209 = load float, ptr %208, align 8, !tbaa !613
  %210 = fadd float %207, %209
  %211 = fmul float %210, 5.000000e-01
  %212 = load <2 x float>, ptr %205, align 4, !tbaa !137
  %213 = insertelement <2 x float> poison, float %204, i64 0
  %214 = insertelement <2 x float> %213, float %211, i64 1
  %215 = fmul <2 x float> %212, %214
  store <2 x float> %215, ptr %205, align 4, !tbaa !137
  br label %226

216:                                              ; preds = %39, %229
  %217 = landingpad { ptr, i32 }
          cleanup
  br label %233

218:                                              ; preds = %72
  %219 = landingpad { ptr, i32 }
          cleanup
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #38
  br label %231

220:                                              ; preds = %87
  %221 = landingpad { ptr, i32 }
          cleanup
  br label %227

222:                                              ; preds = %94
  %223 = landingpad { ptr, i32 }
          cleanup
  br label %227

224:                                              ; preds = %185, %122
  %225 = landingpad { ptr, i32 }
          cleanup
  br label %227

226:                                              ; preds = %190, %93
  call void @llvm.lifetime.end.p0(i64 248, ptr nonnull %8) #38
  br label %229

227:                                              ; preds = %220, %224, %222
  %228 = phi { ptr, i32 } [ %221, %220 ], [ %225, %224 ], [ %223, %222 ]
  call void @llvm.lifetime.end.p0(i64 248, ptr nonnull %8) #38
  br label %231

229:                                              ; preds = %226, %86
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %6) #38
  invoke void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(72) %5)
          to label %230 unwind label %216

230:                                              ; preds = %229
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %5) #38
  call void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(72) %4)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %4) #38
  br label %239

231:                                              ; preds = %56, %70, %227, %218
  %232 = phi { ptr, i32 } [ %228, %227 ], [ %219, %218 ], [ %57, %56 ], [ %71, %70 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %6) #38
  invoke void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(72) %5)
          to label %233 unwind label %240

233:                                              ; preds = %231, %216
  %234 = phi { ptr, i32 } [ %217, %216 ], [ %232, %231 ]
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %5) #38
  invoke void @_ZN13btConvexShapeD2Ev(ptr noundef nonnull align 8 dereferenceable(72) %4)
          to label %235 unwind label %240

235:                                              ; preds = %233
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %4) #38
  resume { ptr, i32 } %234

236:                                              ; preds = %24
  %237 = load i32, ptr @_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count, align 4, !tbaa !140
  %238 = add nsw i32 %237, 1
  store i32 %238, ptr @_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count, align 4, !tbaa !140
  br label %239

239:                                              ; preds = %236, %230
  ret void

240:                                              ; preds = %233, %231
  %241 = landingpad { ptr, i32 }
          catch ptr null
  %242 = extractvalue { ptr, i32 } %241, 0
  call void @__clang_call_terminate(ptr %242) #39
  unreachable
}

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders12CollideVF_SSD0Ev(ptr noundef nonnull align 8 dereferenceable(28) %0) unnamed_addr #8 comdat align 2 personality ptr @__gxx_personality_v0 {
  tail call void @_ZdlPv(ptr noundef nonnull %0) #37
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_(ptr noundef nonnull align 8 dereferenceable(28) %0, ptr noundef %1, ptr noundef %2) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %struct.btDbvtNode, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !163
  %6 = getelementptr inbounds %struct.btDbvtNode, ptr %2, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !163
  %8 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 0, i32 1, i32 0, i64 2
  %10 = load float, ptr %9, align 8, !tbaa.struct !164
  %11 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %7, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !219
  %13 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %12, i64 0, i32 1
  %14 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %12, i64 0, i32 1, i32 0, i64 2
  %15 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %7, i64 0, i32 1, i64 1
  %16 = load ptr, ptr %15, align 8, !tbaa !219
  %17 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %16, i64 0, i32 1
  %18 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %16, i64 0, i32 1, i32 0, i64 2
  %19 = load float, ptr %18, align 4, !tbaa !137
  %20 = fsub float %19, %10
  %21 = getelementptr inbounds %"struct.btSoftBody::Face", ptr %7, i64 0, i32 1, i64 2
  %22 = load ptr, ptr %21, align 8, !tbaa !219
  %23 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %22, i64 0, i32 1
  %24 = load <2 x float>, ptr %8, align 8
  %25 = load <2 x float>, ptr %13, align 4, !tbaa !137
  %26 = fsub <2 x float> %25, %24
  %27 = load <2 x float>, ptr %17, align 4, !tbaa !137
  %28 = fsub <2 x float> %27, %24
  %29 = load <2 x float>, ptr %23, align 4, !tbaa !137
  %30 = fsub <2 x float> %29, %24
  %31 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %22, i64 0, i32 1, i32 0, i64 2
  %32 = load float, ptr %14, align 4, !tbaa !137
  %33 = fsub float %32, %10
  %34 = load float, ptr %31, align 4, !tbaa !137
  %35 = fsub float %34, %10
  %36 = fsub <2 x float> %28, %26
  %37 = fsub float %20, %33
  %38 = extractelement <2 x float> %30, i64 0
  %39 = extractelement <2 x float> %26, i64 0
  %40 = extractelement <2 x float> %30, i64 1
  %41 = extractelement <2 x float> %26, i64 1
  %42 = fsub float %40, %41
  %43 = extractelement <2 x float> %36, i64 1
  %44 = extractelement <2 x float> %36, i64 0
  %45 = shufflevector <2 x float> %30, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %46 = insertelement <2 x float> %45, float %35, i64 0
  %47 = shufflevector <2 x float> %26, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %48 = insertelement <2 x float> %47, float %33, i64 0
  %49 = fsub <2 x float> %46, %48
  %50 = shufflevector <2 x float> %36, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %51 = insertelement <2 x float> %50, float %37, i64 0
  %52 = fneg <2 x float> %51
  %53 = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %54 = insertelement <2 x float> %53, float %42, i64 0
  %55 = fmul <2 x float> %54, %52
  %56 = insertelement <2 x float> %50, float %37, i64 1
  %57 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %56, <2 x float> %49, <2 x float> %55)
  %58 = fneg float %43
  %59 = extractelement <2 x float> %49, i64 1
  %60 = fmul float %59, %58
  %61 = tail call float @llvm.fmuladd.f32(float %44, float %42, float %60)
  %62 = extractelement <2 x float> %57, i64 1
  %63 = fmul float %62, %62
  %64 = extractelement <2 x float> %57, i64 0
  %65 = tail call float @llvm.fmuladd.f32(float %64, float %64, float %63)
  %66 = tail call float @llvm.fmuladd.f32(float %61, float %61, float %65)
  %67 = fcmp ogt float %66, 0x3E80000000000000
  br i1 %67, label %68, label %245

68:                                               ; preds = %3
  %69 = tail call float @llvm.sqrt.f32(float %66)
  %70 = fdiv float 1.000000e+00, %69
  %71 = insertelement <2 x float> poison, float %70, i64 0
  %72 = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> zeroinitializer
  %73 = fmul <2 x float> %57, %72
  %74 = fmul float %61, %70
  %75 = fmul <2 x float> %26, %73
  %76 = extractelement <2 x float> %75, i64 1
  %77 = extractelement <2 x float> %73, i64 0
  %78 = tail call float @llvm.fmuladd.f32(float %39, float %77, float %76)
  %79 = tail call float @llvm.fmuladd.f32(float %33, float %74, float %78)
  %80 = fmul float %79, %79
  %81 = fcmp olt float %80, 0x47EFFFFFE0000000
  br i1 %81, label %82, label %245

82:                                               ; preds = %68
  %83 = insertelement <2 x float> poison, float %79, i64 0
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer
  %85 = fmul <2 x float> %73, %84
  %86 = fmul float %74, %79
  %87 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %86, i64 0
  %88 = fsub <2 x float> %26, %85
  %89 = extractelement <2 x float> %88, i64 0
  %90 = extractelement <2 x float> %85, i64 1
  %91 = fsub float %41, %90
  %92 = fsub float %33, %86
  %93 = extractelement <2 x float> %28, i64 0
  %94 = fsub <2 x float> %28, %85
  %95 = extractelement <2 x float> %94, i64 0
  %96 = extractelement <2 x float> %28, i64 1
  %97 = fsub float %96, %90
  %98 = fsub float %20, %86
  %99 = fneg float %92
  %100 = fmul float %97, %99
  %101 = tail call float @llvm.fmuladd.f32(float %91, float %98, float %100)
  %102 = fneg float %89
  %103 = fmul float %98, %102
  %104 = tail call float @llvm.fmuladd.f32(float %92, float %95, float %103)
  %105 = fneg float %91
  %106 = fmul float %95, %105
  %107 = tail call float @llvm.fmuladd.f32(float %89, float %97, float %106)
  %108 = fmul float %62, %104
  %109 = tail call float @llvm.fmuladd.f32(float %101, float %64, float %108)
  %110 = tail call float @llvm.fmuladd.f32(float %107, float %61, float %109)
  %111 = fcmp ogt float %110, 0.000000e+00
  br i1 %111, label %112, label %144

112:                                              ; preds = %82
  %113 = fsub <2 x float> %30, %85
  %114 = extractelement <2 x float> %113, i64 0
  %115 = fsub float %40, %90
  %116 = fsub float %35, %86
  %117 = fneg float %98
  %118 = fmul float %115, %117
  %119 = tail call float @llvm.fmuladd.f32(float %97, float %116, float %118)
  %120 = fneg float %95
  %121 = fmul float %116, %120
  %122 = tail call float @llvm.fmuladd.f32(float %98, float %114, float %121)
  %123 = fneg float %97
  %124 = fmul float %114, %123
  %125 = tail call float @llvm.fmuladd.f32(float %95, float %115, float %124)
  %126 = fmul float %62, %122
  %127 = tail call float @llvm.fmuladd.f32(float %119, float %64, float %126)
  %128 = tail call float @llvm.fmuladd.f32(float %125, float %61, float %127)
  %129 = fcmp ogt float %128, 0.000000e+00
  br i1 %129, label %130, label %144

130:                                              ; preds = %112
  %131 = fneg float %116
  %132 = fmul float %91, %131
  %133 = tail call float @llvm.fmuladd.f32(float %115, float %92, float %132)
  %134 = fneg float %114
  %135 = fmul float %92, %134
  %136 = tail call float @llvm.fmuladd.f32(float %116, float %89, float %135)
  %137 = fneg float %115
  %138 = fmul float %89, %137
  %139 = tail call float @llvm.fmuladd.f32(float %114, float %91, float %138)
  %140 = fmul float %62, %136
  %141 = tail call float @llvm.fmuladd.f32(float %133, float %64, float %140)
  %142 = tail call float @llvm.fmuladd.f32(float %139, float %61, float %141)
  %143 = fcmp ogt float %142, 0.000000e+00
  br i1 %143, label %245, label %144

144:                                              ; preds = %130, %112, %82
  %145 = fmul float %43, %43
  %146 = tail call float @llvm.fmuladd.f32(float %44, float %44, float %145)
  %147 = tail call float @llvm.fmuladd.f32(float %37, float %37, float %146)
  %148 = fcmp ogt float %147, 0x3E80000000000000
  br i1 %148, label %149, label %173

149:                                              ; preds = %144
  %150 = fmul float %41, %43
  %151 = tail call float @llvm.fmuladd.f32(float %39, float %44, float %150)
  %152 = tail call float @llvm.fmuladd.f32(float %33, float %37, float %151)
  %153 = fneg float %152
  %154 = fdiv float %153, %147
  %155 = fcmp olt float %154, 0.000000e+00
  %156 = fcmp ogt float %154, 1.000000e+00
  %157 = select i1 %156, float 1.000000e+00, float %154
  %158 = select i1 %155, float 0.000000e+00, float %157
  %159 = fmul float %37, %158
  %160 = insertelement <2 x float> poison, float %158, i64 0
  %161 = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> zeroinitializer
  %162 = fmul <2 x float> %36, %161
  %163 = fadd <2 x float> %26, %162
  %164 = fadd float %33, %159
  %165 = fmul <2 x float> %163, %163
  %166 = extractelement <2 x float> %165, i64 1
  %167 = extractelement <2 x float> %163, i64 0
  %168 = tail call float @llvm.fmuladd.f32(float %167, float %167, float %166)
  %169 = tail call float @llvm.fmuladd.f32(float %164, float %164, float %168)
  %170 = fcmp olt float %169, 0x47EFFFFFE0000000
  br i1 %170, label %171, label %173

171:                                              ; preds = %149
  %172 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %164, i64 0
  br label %173

173:                                              ; preds = %171, %149, %144
  %174 = phi float [ %169, %171 ], [ 0x47EFFFFFE0000000, %149 ], [ 0x47EFFFFFE0000000, %144 ]
  %175 = phi <2 x float> [ %163, %171 ], [ undef, %149 ], [ undef, %144 ]
  %176 = phi <2 x float> [ %172, %171 ], [ undef, %149 ], [ undef, %144 ]
  %177 = fsub <2 x float> %30, %28
  %178 = fsub float %35, %20
  %179 = extractelement <2 x float> %177, i64 1
  %180 = fmul float %179, %179
  %181 = extractelement <2 x float> %177, i64 0
  %182 = tail call float @llvm.fmuladd.f32(float %181, float %181, float %180)
  %183 = tail call float @llvm.fmuladd.f32(float %178, float %178, float %182)
  %184 = fcmp ogt float %183, 0x3E80000000000000
  br i1 %184, label %185, label %209

185:                                              ; preds = %173
  %186 = fmul float %96, %179
  %187 = tail call float @llvm.fmuladd.f32(float %93, float %181, float %186)
  %188 = tail call float @llvm.fmuladd.f32(float %20, float %178, float %187)
  %189 = fneg float %188
  %190 = fdiv float %189, %183
  %191 = fcmp olt float %190, 0.000000e+00
  %192 = fcmp ogt float %190, 1.000000e+00
  %193 = select i1 %192, float 1.000000e+00, float %190
  %194 = select i1 %191, float 0.000000e+00, float %193
  %195 = fmul float %178, %194
  %196 = insertelement <2 x float> poison, float %194, i64 0
  %197 = shufflevector <2 x float> %196, <2 x float> poison, <2 x i32> zeroinitializer
  %198 = fmul <2 x float> %177, %197
  %199 = fadd <2 x float> %28, %198
  %200 = fadd float %20, %195
  %201 = fmul <2 x float> %199, %199
  %202 = extractelement <2 x float> %201, i64 1
  %203 = extractelement <2 x float> %199, i64 0
  %204 = tail call float @llvm.fmuladd.f32(float %203, float %203, float %202)
  %205 = tail call float @llvm.fmuladd.f32(float %200, float %200, float %204)
  %206 = fcmp olt float %205, %174
  br i1 %206, label %207, label %209

207:                                              ; preds = %185
  %208 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %200, i64 0
  br label %209

209:                                              ; preds = %207, %185, %173
  %210 = phi float [ %205, %207 ], [ %174, %185 ], [ %174, %173 ]
  %211 = phi <2 x float> [ %199, %207 ], [ %175, %185 ], [ %175, %173 ]
  %212 = phi <2 x float> [ %208, %207 ], [ %176, %185 ], [ %176, %173 ]
  %213 = fsub <2 x float> %26, %30
  %214 = fsub float %33, %35
  %215 = extractelement <2 x float> %213, i64 1
  %216 = fmul float %215, %215
  %217 = extractelement <2 x float> %213, i64 0
  %218 = tail call float @llvm.fmuladd.f32(float %217, float %217, float %216)
  %219 = tail call float @llvm.fmuladd.f32(float %214, float %214, float %218)
  %220 = fcmp ogt float %219, 0x3E80000000000000
  br i1 %220, label %221, label %245

221:                                              ; preds = %209
  %222 = fmul float %40, %215
  %223 = tail call float @llvm.fmuladd.f32(float %38, float %217, float %222)
  %224 = tail call float @llvm.fmuladd.f32(float %35, float %214, float %223)
  %225 = fneg float %224
  %226 = fdiv float %225, %219
  %227 = fcmp olt float %226, 0.000000e+00
  %228 = fcmp ogt float %226, 1.000000e+00
  %229 = select i1 %228, float 1.000000e+00, float %226
  %230 = select i1 %227, float 0.000000e+00, float %229
  %231 = fmul float %214, %230
  %232 = insertelement <2 x float> poison, float %230, i64 0
  %233 = shufflevector <2 x float> %232, <2 x float> poison, <2 x i32> zeroinitializer
  %234 = fmul <2 x float> %213, %233
  %235 = fadd <2 x float> %30, %234
  %236 = fadd float %35, %231
  %237 = fmul <2 x float> %235, %235
  %238 = extractelement <2 x float> %237, i64 1
  %239 = extractelement <2 x float> %235, i64 0
  %240 = tail call float @llvm.fmuladd.f32(float %239, float %239, float %238)
  %241 = tail call float @llvm.fmuladd.f32(float %236, float %236, float %240)
  %242 = fcmp olt float %241, %210
  br i1 %242, label %243, label %245

243:                                              ; preds = %221
  %244 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %236, i64 0
  br label %245

245:                                              ; preds = %130, %243, %3, %68, %209, %221
  %246 = phi float [ %210, %221 ], [ %210, %209 ], [ 0x47EFFFFFE0000000, %68 ], [ 0x47EFFFFFE0000000, %3 ], [ %241, %243 ], [ %80, %130 ]
  %247 = phi <2 x float> [ %211, %221 ], [ %211, %209 ], [ undef, %68 ], [ undef, %3 ], [ %235, %243 ], [ %85, %130 ]
  %248 = phi <2 x float> [ %212, %221 ], [ %212, %209 ], [ undef, %68 ], [ undef, %3 ], [ %244, %243 ], [ %87, %130 ]
  %249 = getelementptr inbounds %"struct.btSoftColliders::CollideVF_SS", ptr %0, i64 0, i32 2
  %250 = load float, ptr %249, align 8, !tbaa !590
  %251 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 0, i32 2
  %252 = load float, ptr %251, align 4, !tbaa !137
  %253 = extractelement <2 x float> %24, i64 0
  %254 = fsub float %253, %252
  %255 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 0, i32 2, i32 0, i64 1
  %256 = load float, ptr %255, align 4, !tbaa !137
  %257 = extractelement <2 x float> %24, i64 1
  %258 = fsub float %257, %256
  %259 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 0, i32 2, i32 0, i64 2
  %260 = load float, ptr %259, align 4, !tbaa !137
  %261 = fsub float %10, %260
  %262 = fmul float %258, %258
  %263 = tail call float @llvm.fmuladd.f32(float %254, float %254, float %262)
  %264 = tail call float @llvm.fmuladd.f32(float %261, float %261, float %263)
  %265 = tail call float @llvm.sqrt.f32(float %264)
  %266 = tail call float @llvm.fmuladd.f32(float %265, float 2.000000e+00, float %250)
  %267 = fmul float %266, %266
  %268 = fcmp olt float %246, %267
  br i1 %268, label %269, label %461

269:                                              ; preds = %245
  %270 = fadd <2 x float> %24, %247
  %271 = fadd <2 x float> %24, %247
  %272 = extractelement <2 x float> %248, i64 0
  %273 = fadd float %10, %272
  %274 = fsub <2 x float> %25, %270
  %275 = extractelement <2 x float> %274, i64 0
  %276 = fsub <2 x float> %27, %271
  %277 = extractelement <2 x float> %276, i64 1
  %278 = fsub float %19, %273
  %279 = fneg float %275
  %280 = fmul float %278, %279
  %281 = insertelement <2 x float> poison, float %34, i64 0
  %282 = insertelement <2 x float> %281, float %32, i64 1
  %283 = insertelement <2 x float> poison, float %273, i64 0
  %284 = shufflevector <2 x float> %283, <2 x float> poison, <2 x i32> zeroinitializer
  %285 = fsub <2 x float> %282, %284
  %286 = extractelement <2 x float> %285, i64 1
  %287 = fneg float %286
  %288 = fmul float %277, %287
  %289 = shufflevector <2 x float> %29, <2 x float> %25, <2 x i32> <i32 1, i32 3>
  %290 = shufflevector <2 x float> %271, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %291 = fsub <2 x float> %289, %290
  %292 = extractelement <2 x float> %291, i64 1
  %293 = tail call float @llvm.fmuladd.f32(float %292, float %278, float %288)
  %294 = shufflevector <2 x float> %27, <2 x float> %29, <2 x i32> <i32 0, i32 2>
  %295 = shufflevector <2 x float> %270, <2 x float> poison, <2 x i32> zeroinitializer
  %296 = fsub <2 x float> %294, %295
  %297 = extractelement <2 x float> %296, i64 0
  %298 = tail call float @llvm.fmuladd.f32(float %286, float %297, float %280)
  %299 = fneg float %292
  %300 = fmul float %297, %299
  %301 = tail call float @llvm.fmuladd.f32(float %275, float %277, float %300)
  %302 = fmul float %298, %298
  %303 = tail call float @llvm.fmuladd.f32(float %293, float %293, float %302)
  %304 = tail call float @llvm.fmuladd.f32(float %301, float %301, float %303)
  %305 = tail call float @llvm.sqrt.f32(float %304)
  %306 = shufflevector <2 x float> %285, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %307 = insertelement <2 x float> %306, float %278, i64 0
  %308 = fneg <2 x float> %307
  %309 = fmul <2 x float> %291, %308
  %310 = shufflevector <2 x float> %291, <2 x float> poison, <2 x i32> <i32 undef, i32 0>
  %311 = shufflevector <2 x float> %310, <2 x float> %276, <2 x i32> <i32 3, i32 1>
  %312 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %311, <2 x float> %285, <2 x float> %309)
  %313 = fneg <2 x float> %296
  %314 = fmul <2 x float> %285, %313
  %315 = shufflevector <2 x float> %296, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %316 = shufflevector <2 x float> %315, <2 x float> %274, <2 x i32> <i32 0, i32 2>
  %317 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %307, <2 x float> %316, <2 x float> %314)
  %318 = fneg <2 x float> %311
  %319 = fmul <2 x float> %316, %318
  %320 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %296, <2 x float> %291, <2 x float> %319)
  %321 = fmul <2 x float> %317, %317
  %322 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %312, <2 x float> %312, <2 x float> %321)
  %323 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %320, <2 x float> %320, <2 x float> %322)
  %324 = tail call <2 x float> @llvm.sqrt.v2f32(<2 x float> %323)
  %325 = extractelement <2 x float> %324, i64 0
  %326 = fadd float %305, %325
  %327 = extractelement <2 x float> %324, i64 1
  %328 = fadd float %327, %326
  %329 = fdiv float 1.000000e+00, %328
  %330 = insertelement <2 x float> poison, float %329, i64 0
  %331 = shufflevector <2 x float> %330, <2 x float> poison, <2 x i32> zeroinitializer
  %332 = fmul <2 x float> %324, %331
  %333 = fmul float %305, %329
  %334 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %333, i64 0
  %335 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %5, i64 0, i32 6
  %336 = load float, ptr %335, align 8, !tbaa !174
  %337 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %12, i64 0, i32 6
  %338 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %16, i64 0, i32 6
  %339 = getelementptr inbounds %"struct.btSoftBody::Node", ptr %22, i64 0, i32 6
  %340 = load float, ptr %337, align 4, !tbaa !137
  %341 = load float, ptr %338, align 4, !tbaa !137
  %342 = load float, ptr %339, align 4, !tbaa !137
  %343 = extractelement <2 x float> %332, i64 1
  %344 = fmul float %343, %341
  %345 = extractelement <2 x float> %332, i64 0
  %346 = tail call float @llvm.fmuladd.f32(float %340, float %345, float %344)
  %347 = tail call float @llvm.fmuladd.f32(float %342, float %333, float %346)
  %348 = fcmp ugt float %340, 0.000000e+00
  %349 = fcmp ugt float %341, 0.000000e+00
  %350 = select i1 %348, i1 %349, i1 false
  %351 = fcmp ugt float %342, 0.000000e+00
  %352 = select i1 %350, i1 %351, i1 false
  %353 = select i1 %352, float %347, float 0.000000e+00
  %354 = fadd float %336, %353
  %355 = fcmp ogt float %354, 0.000000e+00
  br i1 %355, label %356, label %461

356:                                              ; preds = %269
  %357 = tail call float @sqrtf(float noundef %246) #38
  %358 = fdiv float -1.000000e+00, %357
  %359 = insertelement <2 x float> poison, float %358, i64 0
  %360 = shufflevector <2 x float> %359, <2 x float> poison, <2 x i32> zeroinitializer
  %361 = fmul <2 x float> %247, %360
  %362 = fmul float %272, %358
  %363 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %362, i64 0
  %364 = getelementptr inbounds %"struct.btSoftColliders::CollideVF_SS", ptr %0, i64 0, i32 1
  %365 = load ptr, ptr %364, align 8, !tbaa !219
  %366 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 2, i32 7
  %367 = getelementptr inbounds %"struct.btSoftColliders::CollideVF_SS", ptr %0, i64 0, i32 1, i64 1
  %368 = load ptr, ptr %367, align 8, !tbaa !219
  %369 = getelementptr inbounds %class.btSoftBody, ptr %368, i64 0, i32 2, i32 7
  %370 = load float, ptr %366, align 4
  %371 = load float, ptr %369, align 4
  %372 = fcmp ogt float %370, %371
  %373 = select i1 %372, float %370, float %371
  %374 = insertelement <2 x float> poison, float %336, i64 0
  %375 = insertelement <2 x float> %374, float %353, i64 1
  %376 = insertelement <2 x float> poison, float %354, i64 0
  %377 = shufflevector <2 x float> %376, <2 x float> poison, <2 x i32> zeroinitializer
  %378 = fdiv <2 x float> %375, %377
  %379 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 2, i32 11
  %380 = getelementptr inbounds %class.btSoftBody, ptr %368, i64 0, i32 2, i32 11
  %381 = load float, ptr %379, align 4, !tbaa !614
  %382 = load float, ptr %380, align 4, !tbaa !614
  %383 = insertelement <2 x float> poison, float %381, i64 0
  %384 = insertelement <2 x float> %383, float %382, i64 1
  %385 = fmul <2 x float> %378, %384
  %386 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 15, i32 2
  %387 = load i32, ptr %386, align 4, !tbaa !112
  %388 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 15, i32 3
  %389 = load i32, ptr %388, align 8, !tbaa !113
  %390 = icmp eq i32 %387, %389
  br i1 %390, label %391, label %445

391:                                              ; preds = %356
  %392 = icmp eq i32 %387, 0
  %393 = shl nsw i32 %387, 1
  %394 = select i1 %392, i32 1, i32 %393
  %395 = icmp slt i32 %387, %394
  br i1 %395, label %396, label %445

396:                                              ; preds = %391
  %397 = icmp eq i32 %394, 0
  br i1 %397, label %403, label %398

398:                                              ; preds = %396
  %399 = sext i32 %394 to i64
  %400 = shl nsw i64 %399, 6
  %401 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %400, i32 noundef 16)
  %402 = load i32, ptr %386, align 4, !tbaa !112
  br label %403

403:                                              ; preds = %398, %396
  %404 = phi i32 [ %402, %398 ], [ %387, %396 ]
  %405 = phi ptr [ %401, %398 ], [ null, %396 ]
  %406 = icmp sgt i32 %404, 0
  br i1 %406, label %407, label %434

407:                                              ; preds = %403
  %408 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 15, i32 5
  %409 = zext i32 %404 to i64
  %410 = and i64 %409, 1
  %411 = icmp eq i32 %404, 1
  br i1 %411, label %427, label %412

412:                                              ; preds = %407
  %413 = and i64 %409, 4294967294
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %424, %414 ]
  %416 = phi i64 [ 0, %412 ], [ %425, %414 ]
  %417 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %405, i64 %415
  %418 = load ptr, ptr %408, align 8, !tbaa !111
  %419 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %418, i64 %415
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %417, ptr noundef nonnull align 8 dereferenceable(64) %419, i64 64, i1 false), !tbaa.struct !615
  %420 = or i64 %415, 1
  %421 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %405, i64 %420
  %422 = load ptr, ptr %408, align 8, !tbaa !111
  %423 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %422, i64 %420
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %421, ptr noundef nonnull align 8 dereferenceable(64) %423, i64 64, i1 false), !tbaa.struct !615
  %424 = add nuw nsw i64 %415, 2
  %425 = add i64 %416, 2
  %426 = icmp eq i64 %425, %413
  br i1 %426, label %427, label %414

427:                                              ; preds = %414, %407
  %428 = phi i64 [ 0, %407 ], [ %424, %414 ]
  %429 = icmp eq i64 %410, 0
  br i1 %429, label %434, label %430

430:                                              ; preds = %427
  %431 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %405, i64 %428
  %432 = load ptr, ptr %408, align 8, !tbaa !111
  %433 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %432, i64 %428
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %431, ptr noundef nonnull align 8 dereferenceable(64) %433, i64 64, i1 false), !tbaa.struct !615
  br label %434

434:                                              ; preds = %430, %427, %403
  %435 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 15, i32 5
  %436 = load ptr, ptr %435, align 8, !tbaa !111
  %437 = icmp eq ptr %436, null
  %438 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 15, i32 6
  %439 = load i8, ptr %438, align 8
  %440 = icmp eq i8 %439, 0
  %441 = select i1 %437, i1 true, i1 %440
  br i1 %441, label %443, label %442

442:                                              ; preds = %434
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %436)
  br label %443

443:                                              ; preds = %442, %434
  store i8 1, ptr %438, align 8, !tbaa !110
  store ptr %405, ptr %435, align 8, !tbaa !111
  store i32 %394, ptr %388, align 8, !tbaa !113
  %444 = load i32, ptr %386, align 4, !tbaa !112
  br label %445

445:                                              ; preds = %356, %391, %443
  %446 = phi i32 [ %444, %443 ], [ %387, %391 ], [ %387, %356 ]
  %447 = getelementptr inbounds %class.btSoftBody, ptr %365, i64 0, i32 15, i32 5
  %448 = load ptr, ptr %447, align 8, !tbaa !111
  %449 = sext i32 %446 to i64
  %450 = getelementptr inbounds %"struct.btSoftBody::SContact", ptr %448, i64 %449
  store ptr %5, ptr %450, align 8, !tbaa.struct !615
  %451 = getelementptr inbounds i8, ptr %450, i64 8
  store ptr %7, ptr %451, align 8, !tbaa.struct !616
  %452 = getelementptr inbounds i8, ptr %450, i64 16
  store <2 x float> %332, ptr %452, align 8, !tbaa.struct !617
  %453 = getelementptr inbounds i8, ptr %452, i64 8
  store <2 x float> %334, ptr %453, align 8, !tbaa.struct !618
  %454 = getelementptr inbounds i8, ptr %450, i64 32
  store <2 x float> %361, ptr %454, align 8, !tbaa.struct !619
  %455 = getelementptr inbounds i8, ptr %450, i64 40
  store <2 x float> %363, ptr %455, align 8, !tbaa.struct !620
  %456 = getelementptr inbounds i8, ptr %450, i64 48
  store float %266, ptr %456, align 8, !tbaa.struct !621
  %457 = getelementptr inbounds i8, ptr %450, i64 52
  store float %373, ptr %457, align 4, !tbaa.struct !622
  %458 = getelementptr inbounds i8, ptr %450, i64 56
  store <2 x float> %385, ptr %458, align 8
  %459 = load i32, ptr %386, align 4, !tbaa !112
  %460 = add nsw i32 %459, 1
  store i32 %460, ptr %386, align 4, !tbaa !112
  br label %461

461:                                              ; preds = %269, %445, %245
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #32

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZN20btAlignedObjectArrayI9NodeLinksE7reserveEi(ptr noundef nonnull align 8 dereferenceable(25) %0, i32 noundef %1) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 8, !tbaa !328
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %6, label %206

6:                                                ; preds = %2
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %6
  %9 = sext i32 %1 to i64
  %10 = shl nsw i64 %9, 5
  %11 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %10, i32 noundef 16)
  br label %12

12:                                               ; preds = %6, %8
  %13 = phi ptr [ %11, %8 ], [ null, %6 ]
  %14 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 2
  %15 = load i32, ptr %14, align 4, !tbaa !327
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %195

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 5
  %19 = zext i32 %15 to i64
  br label %20

20:                                               ; preds = %169, %17
  %21 = phi i64 [ 0, %17 ], [ %170, %169 ]
  %22 = getelementptr inbounds %struct.NodeLinks, ptr %13, i64 %21
  %23 = load ptr, ptr %18, align 8, !tbaa !326
  %24 = getelementptr inbounds %struct.NodeLinks, ptr %23, i64 %21
  %25 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %22, i64 0, i32 6
  store i8 1, ptr %25, align 8, !tbaa !130
  %26 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %22, i64 0, i32 5
  store ptr null, ptr %26, align 8, !tbaa !131
  %27 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %22, i64 0, i32 2
  store i32 0, ptr %27, align 4, !tbaa !132
  %28 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %22, i64 0, i32 3
  store i32 0, ptr %28, align 8, !tbaa !133
  %29 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %24, i64 0, i32 2
  %30 = load i32, ptr %29, align 4, !tbaa !132
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %20
  store i32 %30, ptr %27, align 4, !tbaa !132
  br label %169

33:                                               ; preds = %20
  %34 = zext i32 %30 to i64
  %35 = shl nuw nsw i64 %34, 2
  %36 = tail call noundef ptr @_Z22btAlignedAllocInternalmi(i64 noundef %35, i32 noundef 16)
  %37 = ptrtoint ptr %36 to i64
  %38 = load i32, ptr %27, align 4, !tbaa !132
  %39 = icmp sgt i32 %38, 0
  %40 = load ptr, ptr %26, align 8, !tbaa !131
  br i1 %39, label %41, label %99

41:                                               ; preds = %33
  %42 = ptrtoint ptr %40 to i64
  %43 = zext i32 %38 to i64
  %44 = icmp ult i32 %38, 8
  %45 = sub i64 %37, %42
  %46 = icmp ult i64 %45, 32
  %47 = select i1 %44, i1 true, i1 %46
  br i1 %47, label %62, label %48

48:                                               ; preds = %41
  %49 = and i64 %43, 4294967288
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %58, %50 ]
  %52 = getelementptr inbounds i32, ptr %36, i64 %51
  %53 = getelementptr inbounds i32, ptr %40, i64 %51
  %54 = load <4 x i32>, ptr %53, align 4, !tbaa !140
  %55 = getelementptr inbounds i32, ptr %53, i64 4
  %56 = load <4 x i32>, ptr %55, align 4, !tbaa !140
  store <4 x i32> %54, ptr %52, align 4, !tbaa !140
  %57 = getelementptr inbounds i32, ptr %52, i64 4
  store <4 x i32> %56, ptr %57, align 4, !tbaa !140
  %58 = add nuw i64 %51, 8
  %59 = icmp eq i64 %58, %49
  br i1 %59, label %60, label %50, !llvm.loop !623

60:                                               ; preds = %50
  %61 = icmp eq i64 %49, %43
  br i1 %61, label %104, label %62

62:                                               ; preds = %41, %60
  %63 = phi i64 [ 0, %41 ], [ %49, %60 ]
  %64 = xor i64 %63, -1
  %65 = add nsw i64 %64, %43
  %66 = and i64 %43, 3
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %77, label %68

68:                                               ; preds = %62, %68
  %69 = phi i64 [ %74, %68 ], [ %63, %62 ]
  %70 = phi i64 [ %75, %68 ], [ 0, %62 ]
  %71 = getelementptr inbounds i32, ptr %36, i64 %69
  %72 = getelementptr inbounds i32, ptr %40, i64 %69
  %73 = load i32, ptr %72, align 4, !tbaa !140
  store i32 %73, ptr %71, align 4, !tbaa !140
  %74 = add nuw nsw i64 %69, 1
  %75 = add i64 %70, 1
  %76 = icmp eq i64 %75, %66
  br i1 %76, label %77, label %68, !llvm.loop !624

77:                                               ; preds = %68, %62
  %78 = phi i64 [ %63, %62 ], [ %74, %68 ]
  %79 = icmp ult i64 %65, 3
  br i1 %79, label %104, label %80

80:                                               ; preds = %77, %80
  %81 = phi i64 [ %97, %80 ], [ %78, %77 ]
  %82 = getelementptr inbounds i32, ptr %36, i64 %81
  %83 = getelementptr inbounds i32, ptr %40, i64 %81
  %84 = load i32, ptr %83, align 4, !tbaa !140
  store i32 %84, ptr %82, align 4, !tbaa !140
  %85 = add nuw nsw i64 %81, 1
  %86 = getelementptr inbounds i32, ptr %36, i64 %85
  %87 = getelementptr inbounds i32, ptr %40, i64 %85
  %88 = load i32, ptr %87, align 4, !tbaa !140
  store i32 %88, ptr %86, align 4, !tbaa !140
  %89 = add nuw nsw i64 %81, 2
  %90 = getelementptr inbounds i32, ptr %36, i64 %89
  %91 = getelementptr inbounds i32, ptr %40, i64 %89
  %92 = load i32, ptr %91, align 4, !tbaa !140
  store i32 %92, ptr %90, align 4, !tbaa !140
  %93 = add nuw nsw i64 %81, 3
  %94 = getelementptr inbounds i32, ptr %36, i64 %93
  %95 = getelementptr inbounds i32, ptr %40, i64 %93
  %96 = load i32, ptr %95, align 4, !tbaa !140
  store i32 %96, ptr %94, align 4, !tbaa !140
  %97 = add nuw nsw i64 %81, 4
  %98 = icmp eq i64 %97, %43
  br i1 %98, label %104, label %80, !llvm.loop !625

99:                                               ; preds = %33
  %100 = icmp eq ptr %40, null
  %101 = load i8, ptr %25, align 8
  %102 = icmp eq i8 %101, 0
  %103 = select i1 %100, i1 true, i1 %102
  br i1 %103, label %108, label %107

104:                                              ; preds = %77, %80, %60
  %105 = load i8, ptr %25, align 8, !tbaa !130, !range !191, !noundef !192
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %108, label %107

107:                                              ; preds = %104, %99
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %40)
  br label %108

108:                                              ; preds = %107, %104, %99
  store i8 1, ptr %25, align 8, !tbaa !130
  store ptr %36, ptr %26, align 8, !tbaa !131
  store i32 %30, ptr %28, align 8, !tbaa !133
  %109 = sext i32 %30 to i64
  %110 = shl nuw nsw i64 %109, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %36, i8 0, i64 %110, i1 false), !tbaa !140
  store i32 %30, ptr %27, align 4, !tbaa !132
  %111 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %24, i64 0, i32 5
  %112 = load ptr, ptr %111, align 8, !tbaa !131
  %113 = icmp ult i32 %30, 8
  %114 = ptrtoint ptr %112 to i64
  %115 = sub i64 %37, %114
  %116 = icmp ult i64 %115, 32
  %117 = select i1 %113, i1 true, i1 %116
  br i1 %117, label %132, label %118

118:                                              ; preds = %108
  %119 = and i64 %34, 4294967288
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i64 [ 0, %118 ], [ %128, %120 ]
  %122 = getelementptr inbounds i32, ptr %36, i64 %121
  %123 = getelementptr inbounds i32, ptr %112, i64 %121
  %124 = load <4 x i32>, ptr %123, align 4, !tbaa !140
  %125 = getelementptr inbounds i32, ptr %123, i64 4
  %126 = load <4 x i32>, ptr %125, align 4, !tbaa !140
  store <4 x i32> %124, ptr %122, align 4, !tbaa !140
  %127 = getelementptr inbounds i32, ptr %122, i64 4
  store <4 x i32> %126, ptr %127, align 4, !tbaa !140
  %128 = add nuw i64 %121, 8
  %129 = icmp eq i64 %128, %119
  br i1 %129, label %130, label %120, !llvm.loop !626

130:                                              ; preds = %120
  %131 = icmp eq i64 %119, %34
  br i1 %131, label %169, label %132

132:                                              ; preds = %108, %130
  %133 = phi i64 [ 0, %108 ], [ %119, %130 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %134, %34
  %136 = and i64 %34, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %147, label %138

138:                                              ; preds = %132, %138
  %139 = phi i64 [ %144, %138 ], [ %133, %132 ]
  %140 = phi i64 [ %145, %138 ], [ 0, %132 ]
  %141 = getelementptr inbounds i32, ptr %36, i64 %139
  %142 = getelementptr inbounds i32, ptr %112, i64 %139
  %143 = load i32, ptr %142, align 4, !tbaa !140
  store i32 %143, ptr %141, align 4, !tbaa !140
  %144 = add nuw nsw i64 %139, 1
  %145 = add i64 %140, 1
  %146 = icmp eq i64 %145, %136
  br i1 %146, label %147, label %138, !llvm.loop !627

147:                                              ; preds = %138, %132
  %148 = phi i64 [ %133, %132 ], [ %144, %138 ]
  %149 = icmp ult i64 %135, 3
  br i1 %149, label %169, label %150

150:                                              ; preds = %147, %150
  %151 = phi i64 [ %167, %150 ], [ %148, %147 ]
  %152 = getelementptr inbounds i32, ptr %36, i64 %151
  %153 = getelementptr inbounds i32, ptr %112, i64 %151
  %154 = load i32, ptr %153, align 4, !tbaa !140
  store i32 %154, ptr %152, align 4, !tbaa !140
  %155 = add nuw nsw i64 %151, 1
  %156 = getelementptr inbounds i32, ptr %36, i64 %155
  %157 = getelementptr inbounds i32, ptr %112, i64 %155
  %158 = load i32, ptr %157, align 4, !tbaa !140
  store i32 %158, ptr %156, align 4, !tbaa !140
  %159 = add nuw nsw i64 %151, 2
  %160 = getelementptr inbounds i32, ptr %36, i64 %159
  %161 = getelementptr inbounds i32, ptr %112, i64 %159
  %162 = load i32, ptr %161, align 4, !tbaa !140
  store i32 %162, ptr %160, align 4, !tbaa !140
  %163 = add nuw nsw i64 %151, 3
  %164 = getelementptr inbounds i32, ptr %36, i64 %163
  %165 = getelementptr inbounds i32, ptr %112, i64 %163
  %166 = load i32, ptr %165, align 4, !tbaa !140
  store i32 %166, ptr %164, align 4, !tbaa !140
  %167 = add nuw nsw i64 %151, 4
  %168 = icmp eq i64 %167, %34
  br i1 %168, label %169, label %150, !llvm.loop !628

169:                                              ; preds = %147, %150, %130, %32
  %170 = add nuw nsw i64 %21, 1
  %171 = icmp eq i64 %170, %19
  br i1 %171, label %172, label %20

172:                                              ; preds = %169
  %173 = load i32, ptr %14, align 4, !tbaa !327
  %174 = icmp sgt i32 %173, 0
  br i1 %174, label %175, label %195

175:                                              ; preds = %172
  %176 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 5
  %177 = zext i32 %173 to i64
  br label %178

178:                                              ; preds = %190, %175
  %179 = phi i64 [ 0, %175 ], [ %193, %190 ]
  %180 = load ptr, ptr %176, align 8, !tbaa !326
  %181 = getelementptr inbounds %struct.NodeLinks, ptr %180, i64 %179
  %182 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %181, i64 0, i32 5
  %183 = load ptr, ptr %182, align 8, !tbaa !131
  %184 = icmp eq ptr %183, null
  %185 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %181, i64 0, i32 6
  %186 = load i8, ptr %185, align 8
  %187 = icmp eq i8 %186, 0
  %188 = select i1 %184, i1 true, i1 %187
  br i1 %188, label %190, label %189

189:                                              ; preds = %178
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %183)
  br label %190

190:                                              ; preds = %189, %178
  %191 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %181, i64 0, i32 2
  store i8 1, ptr %185, align 8, !tbaa !130
  store ptr null, ptr %182, align 8, !tbaa !131
  store i32 0, ptr %191, align 4, !tbaa !132
  %192 = getelementptr inbounds %class.btAlignedObjectArray.80, ptr %181, i64 0, i32 3
  store i32 0, ptr %192, align 8, !tbaa !133
  %193 = add nuw nsw i64 %179, 1
  %194 = icmp eq i64 %193, %177
  br i1 %194, label %195, label %178

195:                                              ; preds = %190, %12, %172
  %196 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 5
  %197 = load ptr, ptr %196, align 8, !tbaa !326
  %198 = icmp eq ptr %197, null
  %199 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 6
  %200 = load i8, ptr %199, align 8
  %201 = icmp eq i8 %200, 0
  %202 = select i1 %198, i1 true, i1 %201
  br i1 %202, label %204, label %203

203:                                              ; preds = %195
  tail call void @_Z21btAlignedFreeInternalPv(ptr noundef nonnull %197)
  br label %204

204:                                              ; preds = %203, %195
  %205 = getelementptr inbounds %class.btAlignedObjectArray.84, ptr %0, i64 0, i32 6
  store i8 1, ptr %205, align 8, !tbaa !323
  store ptr %13, ptr %196, align 8, !tbaa !326
  store i32 %1, ptr %3, align 8, !tbaa !328
  br label %206

206:                                              ; preds = %204, %2
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE(ptr noundef nonnull align 8 dereferenceable(52) %0, ptr noundef nonnull align 8 dereferenceable(296) %1) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.btTransform, align 4
  %4 = alloca %"struct.btGjkEpaSolver2::sResults", align 4
  %5 = alloca %class.btVector3, align 8
  %6 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %1, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %1, i64 0, i32 1, i64 2
  %8 = load i32, ptr %7, align 8, !tbaa !140
  %9 = sitofp i32 %8 to float
  %10 = load <2 x i32>, ptr %6, align 8, !tbaa !140
  %11 = sitofp <2 x i32> %10 to <2 x float>
  %12 = fmul <2 x float> %11, <float 3.000000e+00, float 3.000000e+00>
  %13 = fmul float %9, 3.000000e+00
  %14 = getelementptr inbounds %struct.btSparseSdf, ptr %0, i64 0, i32 1
  %15 = load float, ptr %14, align 8, !tbaa !137
  %16 = insertelement <2 x float> poison, float %15, i64 0
  %17 = shufflevector <2 x float> %16, <2 x float> poison, <2 x i32> zeroinitializer
  %18 = fmul <2 x float> %12, %17
  %19 = fmul float %15, %13
  %20 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 1
  %21 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 2
  %22 = getelementptr inbounds [4 x float], ptr %5, i64 0, i64 3
  %23 = getelementptr inbounds %"struct.btSparseSdf<3>::Cell", ptr %1, i64 0, i32 4
  %24 = getelementptr inbounds [4 x float], ptr %3, i64 0, i64 1
  %25 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 1
  %26 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 1, i32 0, i64 2
  %27 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 2
  %28 = getelementptr inbounds [3 x %class.btVector3], ptr %3, i64 0, i64 2, i32 0, i64 3
  %29 = extractelement <2 x float> %18, i64 0
  br label %31

30:                                               ; preds = %37
  ret void

31:                                               ; preds = %2, %37
  %32 = phi i64 [ 0, %2 ], [ %38, %37 ]
  %33 = load float, ptr %14, align 8, !tbaa !629
  %34 = trunc i64 %32 to i32
  %35 = sitofp i32 %34 to float
  %36 = call float @llvm.fmuladd.f32(float %33, float %35, float %19)
  br label %40

37:                                               ; preds = %91
  %38 = add nuw nsw i64 %32, 1
  %39 = icmp eq i64 %38, 4
  br i1 %39, label %30, label %31

40:                                               ; preds = %31, %91
  %41 = phi i64 [ 0, %31 ], [ %94, %91 ]
  %42 = load <4 x float>, ptr %14, align 8
  %43 = trunc i64 %41 to i32
  %44 = sitofp i32 %43 to float
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  %45 = shufflevector <4 x float> %42, <4 x float> poison, <2 x i32> zeroinitializer
  %46 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %44, i64 1
  %47 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %45, <2 x float> %46, <2 x float> %18)
  store <2 x float> %47, ptr %5, align 8, !tbaa !137
  store float %36, ptr %21, align 8, !tbaa !137
  store float 0.000000e+00, ptr %22, align 4, !tbaa !137
  %48 = load ptr, ptr %23, align 8, !tbaa !499
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #38
  store float 1.000000e+00, ptr %3, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %24, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %25, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %26, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %27, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %28, i8 0, i64 20, i1 false)
  %49 = getelementptr inbounds %class.btCollisionShape, ptr %48, i64 0, i32 1
  %50 = load i32, ptr %49, align 8, !tbaa !152
  %51 = icmp slt i32 %50, 20
  br i1 %51, label %52, label %55

52:                                               ; preds = %40
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4) #38
  %53 = call noundef float @_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE(ptr noundef nonnull align 4 dereferenceable(16) %5, float noundef 0.000000e+00, ptr noundef nonnull %48, ptr noundef nonnull align 4 dereferenceable(64) %3, ptr noundef nonnull align 4 dereferenceable(56) %4)
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #38
  %54 = load ptr, ptr %23, align 8, !tbaa !499
  br label %55

55:                                               ; preds = %40, %52
  %56 = phi ptr [ %54, %52 ], [ %48, %40 ]
  %57 = phi float [ %53, %52 ], [ 0.000000e+00, %40 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #38
  %58 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %1, i64 0, i64 0, i64 %41, i64 %32
  store float %57, ptr %58, align 4, !tbaa !137
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  %59 = load float, ptr %14, align 8, !tbaa !629
  %60 = fadd float %59, %29
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  store float %60, ptr %5, align 8, !tbaa !137
  %61 = extractelement <2 x float> %47, i64 1
  store float %61, ptr %20, align 4, !tbaa !137
  store float %36, ptr %21, align 8, !tbaa !137
  store float 0.000000e+00, ptr %22, align 4, !tbaa !137
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #38
  store float 1.000000e+00, ptr %3, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %24, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %25, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %26, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %27, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %28, i8 0, i64 20, i1 false)
  %62 = getelementptr inbounds %class.btCollisionShape, ptr %56, i64 0, i32 1
  %63 = load i32, ptr %62, align 8, !tbaa !152
  %64 = icmp slt i32 %63, 20
  br i1 %64, label %65, label %68

65:                                               ; preds = %55
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4) #38
  %66 = call noundef float @_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE(ptr noundef nonnull align 4 dereferenceable(16) %5, float noundef 0.000000e+00, ptr noundef nonnull %56, ptr noundef nonnull align 4 dereferenceable(64) %3, ptr noundef nonnull align 4 dereferenceable(56) %4)
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #38
  %67 = load ptr, ptr %23, align 8, !tbaa !499
  br label %68

68:                                               ; preds = %65, %55
  %69 = phi ptr [ %67, %65 ], [ %56, %55 ]
  %70 = phi float [ %66, %65 ], [ 0.000000e+00, %55 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #38
  %71 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %1, i64 0, i64 1, i64 %41, i64 %32
  store float %70, ptr %71, align 4, !tbaa !137
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  %72 = load float, ptr %14, align 8, !tbaa !629
  %73 = call float @llvm.fmuladd.f32(float %72, float 2.000000e+00, float %29)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  store float %73, ptr %5, align 8, !tbaa !137
  store float %61, ptr %20, align 4, !tbaa !137
  store float %36, ptr %21, align 8, !tbaa !137
  store float 0.000000e+00, ptr %22, align 4, !tbaa !137
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #38
  store float 1.000000e+00, ptr %3, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %24, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %25, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %26, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %27, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %28, i8 0, i64 20, i1 false)
  %74 = getelementptr inbounds %class.btCollisionShape, ptr %69, i64 0, i32 1
  %75 = load i32, ptr %74, align 8, !tbaa !152
  %76 = icmp slt i32 %75, 20
  br i1 %76, label %77, label %80

77:                                               ; preds = %68
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4) #38
  %78 = call noundef float @_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE(ptr noundef nonnull align 4 dereferenceable(16) %5, float noundef 0.000000e+00, ptr noundef nonnull %69, ptr noundef nonnull align 4 dereferenceable(64) %3, ptr noundef nonnull align 4 dereferenceable(56) %4)
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #38
  %79 = load ptr, ptr %23, align 8, !tbaa !499
  br label %80

80:                                               ; preds = %77, %68
  %81 = phi ptr [ %79, %77 ], [ %69, %68 ]
  %82 = phi float [ %78, %77 ], [ 0.000000e+00, %68 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #38
  %83 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %1, i64 0, i64 2, i64 %41, i64 %32
  store float %82, ptr %83, align 4, !tbaa !137
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  %84 = load float, ptr %14, align 8, !tbaa !629
  %85 = call float @llvm.fmuladd.f32(float %84, float 3.000000e+00, float %29)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #38
  store float %85, ptr %5, align 8, !tbaa !137
  store float %61, ptr %20, align 4, !tbaa !137
  store float %36, ptr %21, align 8, !tbaa !137
  store float 0.000000e+00, ptr %22, align 4, !tbaa !137
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #38
  store float 1.000000e+00, ptr %3, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %24, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %25, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %26, i8 0, i64 16, i1 false)
  store float 1.000000e+00, ptr %27, align 4, !tbaa !137
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %28, i8 0, i64 20, i1 false)
  %86 = getelementptr inbounds %class.btCollisionShape, ptr %81, i64 0, i32 1
  %87 = load i32, ptr %86, align 8, !tbaa !152
  %88 = icmp slt i32 %87, 20
  br i1 %88, label %89, label %91

89:                                               ; preds = %80
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4) #38
  %90 = call noundef float @_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE(ptr noundef nonnull align 4 dereferenceable(16) %5, float noundef 0.000000e+00, ptr noundef nonnull %81, ptr noundef nonnull align 4 dereferenceable(64) %3, ptr noundef nonnull align 4 dereferenceable(56) %4)
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #38
  br label %91

91:                                               ; preds = %89, %80
  %92 = phi float [ %90, %89 ], [ 0.000000e+00, %80 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #38
  %93 = getelementptr inbounds [4 x [4 x [4 x float]]], ptr %1, i64 0, i64 3, i64 %41, i64 %32
  store float %92, ptr %93, align 4, !tbaa !137
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #38
  %94 = add nuw nsw i64 %41, 1
  %95 = icmp eq i64 %94, 4
  br i1 %95, label %37, label %40
}

declare noundef float @_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE(ptr noundef nonnull align 4 dereferenceable(16), float noundef, ptr noundef, ptr noundef nonnull align 4 dereferenceable(64), ptr noundef nonnull align 4 dereferenceable(56)) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.experimental.noalias.scope.decl(metadata) #33

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #34

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.sqrt.f32(float) #35

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #35

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #35

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fmuladd.v2f32(<2 x float>, <2 x float>, <2 x float>) #35

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #35

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.sqrt.v2f32(<2 x float>) #35

attributes #0 = { uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nobuiltin nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noinline noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { inlinehint uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #13 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { nofree nosync nounwind memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { inlinehint mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { inlinehint uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { inlinehint nofree nosync nounwind memory(argmem: readwrite) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #29 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { nofree nounwind }
attributes #31 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #32 = { cold noreturn nounwind }
attributes #33 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #34 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #35 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #36 = { builtin allocsize(0) }
attributes #37 = { builtin nounwind }
attributes #38 = { nounwind }
attributes #39 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"vtable pointer", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !14, i64 24}
!9 = !{!"_ZTS20btAlignedObjectArrayIP17btCollisionObjectE", !10, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!10 = !{!"_ZTS18btAlignedAllocatorIP17btCollisionObjectLj16EE"}
!11 = !{!"int", !12, i64 0}
!12 = !{!"omnipotent char", !7, i64 0}
!13 = !{!"any pointer", !12, i64 0}
!14 = !{!"bool", !12, i64 0}
!15 = !{!9, !13, i64 16}
!16 = !{!9, !11, i64 4}
!17 = !{!9, !11, i64 8}
!18 = !{!19, !14, i64 24}
!19 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE", !20, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!20 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody8eVSolver1_ELj16EE"}
!21 = !{!19, !13, i64 16}
!22 = !{!19, !11, i64 4}
!23 = !{!19, !11, i64 8}
!24 = !{!25, !14, i64 24}
!25 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE", !26, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!26 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody8ePSolver1_ELj16EE"}
!27 = !{!25, !13, i64 16}
!28 = !{!25, !11, i64 4}
!29 = !{!25, !11, i64 8}
!30 = !{!31, !14, i64 24}
!31 = !{!"_ZTS20btAlignedObjectArrayI9btVector3E", !32, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!32 = !{!"_ZTS18btAlignedAllocatorI9btVector3Lj16EE"}
!33 = !{!31, !13, i64 16}
!34 = !{!31, !11, i64 4}
!35 = !{!31, !11, i64 8}
!36 = !{!37, !14, i64 24}
!37 = !{!"_ZTS20btAlignedObjectArrayIfE", !38, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!38 = !{!"_ZTS18btAlignedAllocatorIfLj16EE"}
!39 = !{!37, !13, i64 16}
!40 = !{!37, !11, i64 4}
!41 = !{!37, !11, i64 8}
!42 = !{!43, !13, i64 776}
!43 = !{!"_ZTS10btSoftBody", !44, i64 0, !9, i64 280, !49, i64 312, !51, i64 512, !52, i64 536, !13, i64 768, !13, i64 776, !53, i64 784, !55, i64 816, !57, i64 848, !59, i64 880, !61, i64 912, !63, i64 944, !65, i64 976, !67, i64 1008, !69, i64 1040, !71, i64 1072, !48, i64 1104, !12, i64 1108, !14, i64 1140, !73, i64 1144, !73, i64 1208, !73, i64 1272, !76, i64 1336, !78, i64 1368, !45, i64 1400, !80, i64 1464}
!44 = !{!"_ZTS17btCollisionObject", !45, i64 8, !45, i64 72, !47, i64 136, !47, i64 152, !47, i64 168, !14, i64 184, !48, i64 188, !13, i64 192, !13, i64 200, !13, i64 208, !11, i64 216, !11, i64 220, !11, i64 224, !11, i64 228, !48, i64 232, !48, i64 236, !48, i64 240, !13, i64 248, !11, i64 256, !48, i64 260, !48, i64 264, !48, i64 268, !14, i64 272, !12, i64 273}
!45 = !{!"_ZTS11btTransform", !46, i64 0, !47, i64 48}
!46 = !{!"_ZTS11btMatrix3x3", !12, i64 0}
!47 = !{!"_ZTS9btVector3", !12, i64 0}
!48 = !{!"float", !12, i64 0}
!49 = !{!"_ZTSN10btSoftBody6ConfigE", !50, i64 0, !48, i64 4, !48, i64 8, !48, i64 12, !48, i64 16, !48, i64 20, !48, i64 24, !48, i64 28, !48, i64 32, !48, i64 36, !48, i64 40, !48, i64 44, !48, i64 48, !48, i64 52, !48, i64 56, !48, i64 60, !48, i64 64, !48, i64 68, !48, i64 72, !48, i64 76, !48, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96, !11, i64 100, !19, i64 104, !25, i64 136, !25, i64 168}
!50 = !{!"_ZTSN10btSoftBody10eAeroModel1_E", !12, i64 0}
!51 = !{!"_ZTSN10btSoftBody11SolverStateE", !48, i64 0, !48, i64 4, !48, i64 8, !48, i64 12, !48, i64 16}
!52 = !{!"_ZTSN10btSoftBody4PoseE", !14, i64 0, !14, i64 1, !48, i64 4, !31, i64 8, !37, i64 40, !47, i64 72, !46, i64 88, !46, i64 136, !46, i64 184}
!53 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody4NoteEE", !54, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!54 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody4NoteELj16EE"}
!55 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody4NodeEE", !56, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!56 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody4NodeELj16EE"}
!57 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody4LinkEE", !58, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!58 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody4LinkELj16EE"}
!59 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody4FaceEE", !60, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!60 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody4FaceELj16EE"}
!61 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody5TetraEE", !62, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!62 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody5TetraELj16EE"}
!63 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody6AnchorEE", !64, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!64 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody6AnchorELj16EE"}
!65 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody8RContactEE", !66, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!66 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody8RContactELj16EE"}
!67 = !{!"_ZTS20btAlignedObjectArrayIN10btSoftBody8SContactEE", !68, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!68 = !{!"_ZTS18btAlignedAllocatorIN10btSoftBody8SContactELj16EE"}
!69 = !{!"_ZTS20btAlignedObjectArrayIPN10btSoftBody5JointEE", !70, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!70 = !{!"_ZTS18btAlignedAllocatorIPN10btSoftBody5JointELj16EE"}
!71 = !{!"_ZTS20btAlignedObjectArrayIPN10btSoftBody8MaterialEE", !72, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!72 = !{!"_ZTS18btAlignedAllocatorIPN10btSoftBody8MaterialELj16EE"}
!73 = !{!"_ZTS6btDbvt", !13, i64 0, !13, i64 8, !11, i64 16, !11, i64 20, !11, i64 24, !74, i64 32}
!74 = !{!"_ZTS20btAlignedObjectArrayIN6btDbvt6sStkNNEE", !75, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!75 = !{!"_ZTS18btAlignedAllocatorIN6btDbvt6sStkNNELj16EE"}
!76 = !{!"_ZTS20btAlignedObjectArrayIPN10btSoftBody7ClusterEE", !77, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!77 = !{!"_ZTS18btAlignedAllocatorIPN10btSoftBody7ClusterELj16EE"}
!78 = !{!"_ZTS20btAlignedObjectArrayIbE", !79, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!79 = !{!"_ZTS18btAlignedAllocatorIbLj16EE"}
!80 = !{!"_ZTS20btAlignedObjectArrayIiE", !81, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!81 = !{!"_ZTS18btAlignedAllocatorIiLj16EE"}
!82 = !{!53, !14, i64 24}
!83 = !{!53, !13, i64 16}
!84 = !{!53, !11, i64 4}
!85 = !{!53, !11, i64 8}
!86 = !{!55, !14, i64 24}
!87 = !{!55, !13, i64 16}
!88 = !{!55, !11, i64 4}
!89 = !{!55, !11, i64 8}
!90 = !{!57, !14, i64 24}
!91 = !{!57, !13, i64 16}
!92 = !{!57, !11, i64 4}
!93 = !{!57, !11, i64 8}
!94 = !{!59, !14, i64 24}
!95 = !{!59, !13, i64 16}
!96 = !{!59, !11, i64 4}
!97 = !{!59, !11, i64 8}
!98 = !{!61, !14, i64 24}
!99 = !{!61, !13, i64 16}
!100 = !{!61, !11, i64 4}
!101 = !{!61, !11, i64 8}
!102 = !{!63, !14, i64 24}
!103 = !{!63, !13, i64 16}
!104 = !{!63, !11, i64 4}
!105 = !{!63, !11, i64 8}
!106 = !{!65, !14, i64 24}
!107 = !{!65, !13, i64 16}
!108 = !{!65, !11, i64 4}
!109 = !{!65, !11, i64 8}
!110 = !{!67, !14, i64 24}
!111 = !{!67, !13, i64 16}
!112 = !{!67, !11, i64 4}
!113 = !{!67, !11, i64 8}
!114 = !{!69, !14, i64 24}
!115 = !{!69, !13, i64 16}
!116 = !{!69, !11, i64 4}
!117 = !{!69, !11, i64 8}
!118 = !{!71, !14, i64 24}
!119 = !{!71, !13, i64 16}
!120 = !{!71, !11, i64 4}
!121 = !{!71, !11, i64 8}
!122 = !{!76, !14, i64 24}
!123 = !{!76, !13, i64 16}
!124 = !{!76, !11, i64 4}
!125 = !{!76, !11, i64 8}
!126 = !{!78, !14, i64 24}
!127 = !{!78, !13, i64 16}
!128 = !{!78, !11, i64 4}
!129 = !{!78, !11, i64 8}
!130 = !{!80, !14, i64 24}
!131 = !{!80, !13, i64 16}
!132 = !{!80, !11, i64 4}
!133 = !{!80, !11, i64 8}
!134 = !{!44, !11, i64 256}
!135 = !{!43, !50, i64 312}
!136 = !{!43, !48, i64 316}
!137 = !{!48, !48, i64 0}
!138 = !{!43, !48, i64 348}
!139 = !{!43, !48, i64 392}
!140 = !{!11, !11, i64 0}
!141 = !{!43, !11, i64 412}
!142 = !{!43, !14, i64 536}
!143 = !{!43, !14, i64 537}
!144 = !{!43, !48, i64 540}
!145 = !{!43, !13, i64 768}
!146 = !{!43, !48, i64 1104}
!147 = !{!43, !14, i64 1140}
!148 = !{!149, !48, i64 16}
!149 = !{!"_ZTSN10btSoftBody8MaterialE", !150, i64 0, !48, i64 8, !48, i64 12, !48, i64 16, !11, i64 20}
!150 = !{!"_ZTSN10btSoftBody7ElementE", !13, i64 0}
!151 = !{!149, !11, i64 20}
!152 = !{!153, !11, i64 8}
!153 = !{!"_ZTS16btCollisionShape", !11, i64 8, !13, i64 16}
!154 = !{!155, !13, i64 32}
!155 = !{!"_ZTS24btSoftBodyCollisionShape", !156, i64 0, !13, i64 32}
!156 = !{!"_ZTS14btConcaveShape", !153, i64 0, !48, i64 24}
!157 = !{!44, !13, i64 200}
!158 = !{!156, !48, i64 24}
!159 = distinct !{!159, !160}
!160 = !{!"llvm.loop.unroll.disable"}
!161 = !{!43, !13, i64 1144}
!162 = !{i64 0, i64 16, !163}
!163 = !{!12, !12, i64 0}
!164 = !{i64 0, i64 8, !163}
!165 = !{!44, !13, i64 192}
!166 = !{!167, !13, i64 32}
!167 = !{!"_ZTS19btSoftBodyWorldInfo", !48, i64 0, !48, i64 4, !48, i64 8, !47, i64 12, !13, i64 32, !13, i64 40, !47, i64 48, !168, i64 64}
!168 = !{!"_ZTS11btSparseSdfILi3EE", !169, i64 0, !48, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48}
!169 = !{!"_ZTS20btAlignedObjectArrayIPN11btSparseSdfILi3EE4CellEE", !170, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!170 = !{!"_ZTS18btAlignedAllocatorIPN11btSparseSdfILi3EE4CellELj16EE"}
!171 = !{!167, !13, i64 40}
!172 = !{!"branch_weights", i32 1, i32 1048575}
!173 = !{!150, !13, i64 0}
!174 = !{!175, !48, i64 96}
!175 = !{!"_ZTSN10btSoftBody4NodeE", !176, i64 0, !47, i64 16, !47, i64 32, !47, i64 48, !47, i64 64, !47, i64 80, !48, i64 96, !48, i64 100, !13, i64 104, !11, i64 112}
!176 = !{!"_ZTSN10btSoftBody7FeatureE", !150, i64 0, !13, i64 8}
!177 = !{!178, !180}
!178 = distinct !{!178, !179, !"_ZN12btDbvtAabbMm6FromCEERK9btVector3S2_: argument 0"}
!179 = distinct !{!179, !"_ZN12btDbvtAabbMm6FromCEERK9btVector3S2_"}
!180 = distinct !{!180, !181, !"_ZN12btDbvtAabbMm6FromCRERK9btVector3f: argument 0"}
!181 = distinct !{!181, !"_ZN12btDbvtAabbMm6FromCRERK9btVector3f"}
!182 = !{!175, !13, i64 104}
!183 = !{!176, !13, i64 8}
!184 = !{!185, !185, i64 0}
!185 = !{!"_ZTSN10btSoftBody8ePSolver1_E", !12, i64 0}
!186 = distinct !{!186, !187, !188}
!187 = !{!"llvm.loop.isvectorized", i32 1}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = distinct !{!189, !160}
!190 = distinct !{!190, !187}
!191 = !{i8 0, i8 2}
!192 = !{}
!193 = distinct !{!193, !187, !188}
!194 = distinct !{!194, !160}
!195 = distinct !{!195, !187}
!196 = distinct !{!196, !187, !188}
!197 = distinct !{!197, !160}
!198 = distinct !{!198, !187}
!199 = distinct !{!199, !187, !188}
!200 = distinct !{!200, !160}
!201 = distinct !{!201, !187}
!202 = !{!203, !203, i64 0}
!203 = !{!"_ZTSN10btSoftBody8eVSolver1_E", !12, i64 0}
!204 = distinct !{!204, !187, !188}
!205 = distinct !{!205, !160}
!206 = distinct !{!206, !187}
!207 = distinct !{!207, !187, !188}
!208 = distinct !{!208, !160}
!209 = distinct !{!209, !187}
!210 = distinct !{!210, !187, !188}
!211 = distinct !{!211, !160}
!212 = distinct !{!212, !187}
!213 = distinct !{!213, !187, !188}
!214 = distinct !{!214, !160}
!215 = distinct !{!215, !187}
!216 = distinct !{!216, !187, !188}
!217 = distinct !{!217, !160}
!218 = distinct !{!218, !187}
!219 = !{!13, !13, i64 0}
!220 = distinct !{!220, !160}
!221 = !{!222, !13, i64 384}
!222 = !{!"_ZTSN10btSoftBody7ClusterE", !223, i64 0, !37, i64 32, !31, i64 64, !45, i64 96, !48, i64 160, !48, i64 164, !46, i64 168, !46, i64 216, !47, i64 264, !12, i64 280, !12, i64 312, !11, i64 344, !11, i64 348, !47, i64 352, !47, i64 368, !13, i64 384, !48, i64 392, !48, i64 396, !48, i64 400, !48, i64 404, !48, i64 408, !48, i64 412, !14, i64 416, !14, i64 417, !11, i64 420}
!223 = !{!"_ZTS20btAlignedObjectArrayIPN10btSoftBody4NodeEE", !224, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!224 = !{!"_ZTS18btAlignedAllocatorIPN10btSoftBody4NodeELj16EE"}
!225 = !{!226}
!226 = distinct !{!226, !227, !"_ZN12btDbvtAabbMm6FromCRERK9btVector3f: argument 0"}
!227 = distinct !{!227, !"_ZN12btDbvtAabbMm6FromCRERK9btVector3f"}
!228 = !{!229}
!229 = distinct !{!229, !230, !"_ZN12btDbvtAabbMm6FromCEERK9btVector3S2_: argument 0"}
!230 = distinct !{!230, !"_ZN12btDbvtAabbMm6FromCEERK9btVector3S2_"}
!231 = !{!229, !226}
!232 = !{!233, !13, i64 64}
!233 = !{!"_ZTSN10btSoftBody4FaceE", !176, i64 0, !12, i64 16, !47, i64 40, !48, i64 56, !13, i64 64}
!234 = !{!235, !13, i64 0}
!235 = !{!"_ZTSN10btSoftBody6AnchorE", !13, i64 0, !47, i64 8, !13, i64 24, !46, i64 32, !47, i64 80, !48, i64 96}
!236 = !{!237, !11, i64 32}
!237 = !{!"_ZTSN10btSoftBody4NoteE", !150, i64 0, !13, i64 8, !47, i64 16, !11, i64 32, !12, i64 40, !12, i64 72}
!238 = distinct !{!238, !160}
!239 = !{!240, !48, i64 32}
!240 = !{!"_ZTSN10btSoftBody4LinkE", !176, i64 0, !12, i64 16, !48, i64 32, !11, i64 36, !48, i64 40, !48, i64 44, !48, i64 48, !47, i64 52}
!241 = !{!233, !48, i64 56}
!242 = !{!243, !48, i64 48}
!243 = !{!"_ZTSN10btSoftBody5TetraE", !176, i64 0, !12, i64 16, !48, i64 48, !13, i64 56, !12, i64 64, !48, i64 128, !48, i64 132}
!244 = distinct !{!244, !160}
!245 = !{!235, !13, i64 24}
!246 = !{!247, !249}
!247 = distinct !{!247, !248, !"_ZNK11btMatrix3x39transposeEv: argument 0"}
!248 = distinct !{!248, !"_ZNK11btMatrix3x39transposeEv"}
!249 = distinct !{!249, !250, !"_ZNK11btTransform7inverseEv: argument 0"}
!250 = distinct !{!250, !"_ZNK11btTransform7inverseEv"}
!251 = !{!249}
!252 = !{i64 0, i64 8, !219, i64 8, i64 8, !219, i64 16, i64 8, !219}
!253 = !{!254, !13, i64 16}
!254 = !{!"_ZTSN10btSoftBody4BodyE", !13, i64 0, !13, i64 8, !13, i64 16}
!255 = !{!256, !258}
!256 = distinct !{!256, !257, !"_ZNK11btMatrix3x39transposeEv: argument 0"}
!257 = distinct !{!257, !"_ZNK11btMatrix3x39transposeEv"}
!258 = distinct !{!258, !259, !"_ZNK11btTransform7inverseEv: argument 0"}
!259 = distinct !{!259, !"_ZNK11btTransform7inverseEv"}
!260 = !{!258}
!261 = !{!262, !264}
!262 = distinct !{!262, !263, !"_ZNK11btMatrix3x39transposeEv: argument 0"}
!263 = distinct !{!263, !"_ZNK11btMatrix3x39transposeEv"}
!264 = distinct !{!264, !265, !"_ZNK11btTransform7inverseEv: argument 0"}
!265 = distinct !{!265, !"_ZNK11btTransform7inverseEv"}
!266 = !{!264}
!267 = !{!268, !48, i64 8}
!268 = !{!"_ZTSN10btSoftBody5Joint5SpecsE", !48, i64 0, !48, i64 4, !48, i64 8}
!269 = !{!270, !48, i64 96}
!270 = !{!"_ZTSN10btSoftBody5JointE", !12, i64 8, !12, i64 56, !48, i64 88, !48, i64 92, !48, i64 96, !47, i64 100, !47, i64 116, !46, i64 132, !14, i64 180}
!271 = distinct !{!271, !160}
!272 = !{!254, !13, i64 0}
!273 = !{!274, !276}
!274 = distinct !{!274, !275, !"_ZNK11btMatrix3x39transposeEv: argument 0"}
!275 = distinct !{!275, !"_ZNK11btMatrix3x39transposeEv"}
!276 = distinct !{!276, !277, !"_ZNK11btTransform7inverseEv: argument 0"}
!277 = distinct !{!277, !"_ZNK11btTransform7inverseEv"}
!278 = !{!279, !281}
!279 = distinct !{!279, !280, !"_ZNK11btMatrix3x39transposeEv: argument 0"}
!280 = distinct !{!280, !"_ZNK11btMatrix3x39transposeEv"}
!281 = distinct !{!281, !282, !"_ZNK11btTransform7inverseEv: argument 0"}
!282 = distinct !{!282, !"_ZNK11btTransform7inverseEv"}
!283 = !{!284, !13, i64 32}
!284 = !{!"_ZTSN10btSoftBody6AJoint5SpecsE", !268, i64 0, !47, i64 12, !13, i64 32}
!285 = !{!286, !13, i64 216}
!286 = !{!"_ZTSN10btSoftBody6AJointE", !270, i64 0, !12, i64 184, !13, i64 216}
!287 = distinct !{!287, !160}
!288 = distinct !{!288, !160}
!289 = distinct !{!289, !187, !188}
!290 = distinct !{!290, !188, !187}
!291 = distinct !{!291, !187, !188}
!292 = distinct !{!292, !188, !187}
!293 = !{i64 0, i64 12, !163}
!294 = distinct !{!294, !160}
!295 = distinct !{!295, !187, !188}
!296 = distinct !{!296, !188, !187}
!297 = !{i64 0, i64 16, !163, i64 16, i64 16, !163}
!298 = !{i64 0, i64 8, !163, i64 8, i64 16, !163}
!299 = distinct !{!299, !160}
!300 = !{!149, !48, i64 8}
!301 = !{!240, !48, i64 40}
!302 = !{!240, !48, i64 44}
!303 = !{!175, !48, i64 100}
!304 = distinct !{!304, !160}
!305 = distinct !{!305, !187, !188}
!306 = distinct !{!306, !160}
!307 = distinct !{!307, !187}
!308 = !{!309}
!309 = distinct !{!309, !310}
!310 = distinct !{!310, !"LVerDomain"}
!311 = !{!312}
!312 = distinct !{!312, !310}
!313 = distinct !{!313, !187, !188}
!314 = distinct !{!314, !187}
!315 = !{!316}
!316 = distinct !{!316, !317, !"_ZNK11btMatrix3x37inverseEv: argument 0"}
!317 = distinct !{!317, !"_ZNK11btMatrix3x37inverseEv"}
!318 = !{i64 0, i64 4, !163}
!319 = !{!223, !11, i64 4}
!320 = !{!223, !13, i64 16}
!321 = !{!222, !11, i64 344}
!322 = !{!222, !11, i64 348}
!323 = !{!324, !14, i64 24}
!324 = !{!"_ZTS20btAlignedObjectArrayI9NodeLinksE", !325, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!325 = !{!"_ZTS18btAlignedAllocatorI9NodeLinksLj16EE"}
!326 = !{!324, !13, i64 16}
!327 = !{!324, !11, i64 4}
!328 = !{!324, !11, i64 8}
!329 = distinct !{!329, !187, !188}
!330 = distinct !{!330, !160}
!331 = distinct !{!331, !187}
!332 = distinct !{!332, !187, !188}
!333 = distinct !{!333, !160}
!334 = distinct !{!334, !187}
!335 = distinct !{!335, !187, !188}
!336 = distinct !{!336, !160}
!337 = distinct !{!337, !187}
!338 = distinct !{!338, !187, !188}
!339 = distinct !{!339, !160}
!340 = distinct !{!340, !187}
!341 = !{!223, !14, i64 24}
!342 = !{!223, !11, i64 8}
!343 = distinct !{!343, !160}
!344 = distinct !{!344, !160}
!345 = !{!222, !14, i64 416}
!346 = !{!222, !14, i64 417}
!347 = distinct !{!347, !160}
!348 = distinct !{!348, !160}
!349 = distinct !{!349, !160}
!350 = distinct !{!350, !160}
!351 = distinct !{!351, !160}
!352 = distinct !{!352, !160}
!353 = distinct !{!353, !160}
!354 = distinct !{!354, !160}
!355 = distinct !{!355, !160}
!356 = distinct !{!356, !160}
!357 = distinct !{!357, !160}
!358 = distinct !{!358, !160}
!359 = distinct !{!359, !160}
!360 = distinct !{!360, !160}
!361 = distinct !{!361, !160}
!362 = distinct !{!362, !160}
!363 = distinct !{!363, !160}
!364 = distinct !{!364, !160}
!365 = distinct !{!365, !160}
!366 = distinct !{!366, !160}
!367 = distinct !{!367, !160}
!368 = !{!14, !14, i64 0}
!369 = distinct !{!369, !187, !188}
!370 = distinct !{!370, !187, !188}
!371 = distinct !{!371, !160}
!372 = distinct !{!372, !187}
!373 = !{!222, !11, i64 420}
!374 = !{!222, !48, i64 164}
!375 = distinct !{!375, !187, !188}
!376 = distinct !{!376, !160}
!377 = distinct !{!377, !187}
!378 = !{!379}
!379 = distinct !{!379, !380, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!380 = distinct !{!380, !"_ZmlRK11btMatrix3x3S1_"}
!381 = !{!222, !48, i64 396}
!382 = !{!222, !48, i64 400}
!383 = !{!222, !48, i64 404}
!384 = !{!43, !48, i64 524}
!385 = !{!386, !11, i64 32}
!386 = !{!"_ZTS11btSymMatrixIiE", !80, i64 0, !11, i64 32}
!387 = distinct !{!387, !187, !188}
!388 = distinct !{!388, !160}
!389 = distinct !{!389, !187}
!390 = !{!391}
!391 = distinct !{!391, !392}
!392 = distinct !{!392, !"LVerDomain"}
!393 = !{!394}
!394 = distinct !{!394, !392}
!395 = distinct !{!395, !187, !188}
!396 = distinct !{!396, !160}
!397 = distinct !{!397, !187}
!398 = !{!399, !13, i64 0}
!399 = !{!"_ZTSN10btSoftBody8sRayCastE", !13, i64 0, !400, i64 8, !11, i64 12, !48, i64 16}
!400 = !{!"_ZTSN10btSoftBody8eFeature1_E", !12, i64 0}
!401 = !{!399, !48, i64 16}
!402 = !{!399, !400, i64 8}
!403 = !{!399, !11, i64 12}
!404 = !{!405}
!405 = distinct !{!405, !406, !"_ZL8VolumeOfRKN10btSoftBody4FaceEf: argument 0"}
!406 = distinct !{!406, !"_ZL8VolumeOfRKN10btSoftBody4FaceEf"}
!407 = !{!408}
!408 = distinct !{!408, !409, !"_ZN12btDbvtAabbMm10FromPointsEPPK9btVector3i: argument 0"}
!409 = distinct !{!409, !"_ZN12btDbvtAabbMm10FromPointsEPPK9btVector3i"}
!410 = !{!408, !405}
!411 = !{!73, !13, i64 0}
!412 = !{!400, !400, i64 0}
!413 = !{!414, !48, i64 56}
!414 = !{!"_ZTSN10btSoftBody15RayFromToCasterE", !415, i64 0, !47, i64 8, !47, i64 24, !47, i64 40, !48, i64 56, !13, i64 64, !11, i64 72}
!415 = !{!"_ZTSN6btDbvt8ICollideE"}
!416 = !{!414, !13, i64 64}
!417 = !{!414, !11, i64 72}
!418 = !{!43, !48, i64 512}
!419 = !{!43, !48, i64 516}
!420 = !{!43, !48, i64 520}
!421 = !{!43, !48, i64 528}
!422 = !{!423, !425}
!423 = distinct !{!423, !424, !"_ZN12btDbvtAabbMm6FromCEERK9btVector3S2_: argument 0"}
!424 = distinct !{!424, !"_ZN12btDbvtAabbMm6FromCEERK9btVector3S2_"}
!425 = distinct !{!425, !426, !"_ZN12btDbvtAabbMm6FromCRERK9btVector3f: argument 0"}
!426 = distinct !{!426, !"_ZN12btDbvtAabbMm6FromCRERK9btVector3f"}
!427 = !{!428, !430}
!428 = distinct !{!428, !429, !"_ZN12btDbvtAabbMm10FromPointsEPPK9btVector3i: argument 0"}
!429 = distinct !{!429, !"_ZN12btDbvtAabbMm10FromPointsEPPK9btVector3i"}
!430 = distinct !{!430, !431, !"_ZL8VolumeOfRKN10btSoftBody4FaceEf: argument 0"}
!431 = distinct !{!431, !"_ZL8VolumeOfRKN10btSoftBody4FaceEf"}
!432 = !{i64 0, i64 4, !163, i64 4, i64 16, !163}
!433 = !{!43, !48, i64 344}
!434 = distinct !{!434, !160}
!435 = !{!43, !48, i64 332}
!436 = !{!43, !48, i64 336}
!437 = !{!167, !48, i64 0}
!438 = !{!167, !48, i64 4}
!439 = !{!167, !48, i64 8}
!440 = !{!441}
!441 = distinct !{!441, !442, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!442 = distinct !{!442, !"_ZmlRK11btMatrix3x3S1_"}
!443 = !{!444}
!444 = distinct !{!444, !445, !"_ZNK11btMatrix3x39transposeEv: argument 0"}
!445 = distinct !{!445, !"_ZNK11btMatrix3x39transposeEv"}
!446 = !{!447}
!447 = distinct !{!447, !448, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!448 = distinct !{!448, !"_ZmlRK11btMatrix3x3S1_"}
!449 = !{!43, !48, i64 388}
!450 = !{!240, !48, i64 48}
!451 = !{!452, !48, i64 360}
!452 = !{!"_ZTS11btRigidBody", !44, i64 0, !46, i64 280, !47, i64 328, !47, i64 344, !48, i64 360, !47, i64 364, !47, i64 380, !47, i64 396, !47, i64 412, !47, i64 428, !47, i64 444, !47, i64 460, !48, i64 476, !48, i64 480, !14, i64 484, !48, i64 488, !48, i64 492, !48, i64 496, !48, i64 500, !48, i64 504, !48, i64 508, !13, i64 512, !453, i64 520, !11, i64 552, !11, i64 556, !11, i64 560}
!453 = !{!"_ZTS20btAlignedObjectArrayIP17btTypedConstraintE", !454, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!454 = !{!"_ZTS18btAlignedAllocatorIP17btTypedConstraintLj16EE"}
!455 = !{!235, !48, i64 96}
!456 = !{!43, !11, i64 396}
!457 = distinct !{!457, !458}
!458 = !{!"llvm.loop.unswitch.partial.disable"}
!459 = !{ptr @_ZN10btSoftBody12VSolve_LinksEPS_f}
!460 = !{!43, !11, i64 400}
!461 = !{!43, !48, i64 320}
!462 = !{ptr @_ZN10btSoftBody12PSolve_LinksEPS_ff, ptr @_ZN10btSoftBody14PSolve_AnchorsEPS_ff, ptr @_ZN10btSoftBody16PSolve_RContactsEPS_ff, ptr @_ZN10btSoftBody16PSolve_SContactsEPS_ff}
!463 = !{!43, !11, i64 404}
!464 = distinct !{!464, !458}
!465 = !{!466, !468}
!466 = distinct !{!466, !467, !"_ZL5CrossRK9btVector3: argument 0"}
!467 = distinct !{!467, !"_ZL5CrossRK9btVector3"}
!468 = distinct !{!468, !469, !"_ZL10MassMatrixfRK11btMatrix3x3RK9btVector3: argument 0"}
!469 = distinct !{!469, !"_ZL10MassMatrixfRK11btMatrix3x3RK9btVector3"}
!470 = !{!471, !468}
!471 = distinct !{!471, !472, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!472 = distinct !{!472, !"_ZmlRK11btMatrix3x3S1_"}
!473 = !{!474}
!474 = distinct !{!474, !475, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!475 = distinct !{!475, !"_ZmlRK11btMatrix3x3S1_"}
!476 = !{!222, !48, i64 392}
!477 = distinct !{!477, !458}
!478 = !{!479, !11, i64 4}
!479 = !{!"_ZTS20btAlignedObjectArrayIP10btSoftBodyE", !480, i64 0, !11, i64 4, !11, i64 8, !13, i64 16, !14, i64 24}
!480 = !{!"_ZTS18btAlignedAllocatorIP10btSoftBodyLj16EE"}
!481 = !{!479, !13, i64 16}
!482 = distinct !{!482, !160}
!483 = !{!270, !14, i64 180}
!484 = distinct !{!484, !187, !188}
!485 = distinct !{!485, !160}
!486 = distinct !{!486, !187}
!487 = !{!488}
!488 = distinct !{!488, !489, !"_ZNK11btMatrix3x39transposeEv: argument 0"}
!489 = distinct !{!489, !"_ZNK11btMatrix3x39transposeEv"}
!490 = !{!491, !13, i64 0}
!491 = !{!"_ZTSN10btSoftBody4sCtiE", !13, i64 0, !47, i64 8, !48, i64 24}
!492 = !{!491, !48, i64 24}
!493 = !{!169, !11, i64 4}
!494 = !{!169, !13, i64 16}
!495 = !{!168, !11, i64 48}
!496 = !{!168, !11, i64 44}
!497 = !{!498, !11, i64 272}
!498 = !{!"_ZTSN11btSparseSdfILi3EE4CellE", !12, i64 0, !12, i64 256, !11, i64 268, !11, i64 272, !13, i64 280, !13, i64 288}
!499 = !{!498, !13, i64 280}
!500 = !{!498, !13, i64 288}
!501 = !{!168, !11, i64 40}
!502 = !{!168, !11, i64 36}
!503 = !{!498, !11, i64 268}
!504 = !{!505}
!505 = distinct !{!505, !506, !"_ZL3MulRK11btMatrix3x3f: argument 0"}
!506 = distinct !{!506, !"_ZL3MulRK11btMatrix3x3f"}
!507 = !{!508}
!508 = distinct !{!508, !509, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!509 = distinct !{!509, !"_ZmlRK11btMatrix3x3S1_"}
!510 = !{!254, !13, i64 8}
!511 = !{!512, !514}
!512 = distinct !{!512, !513, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!513 = distinct !{!513, !"_ZmlRK11btMatrix3x3S1_"}
!514 = distinct !{!514, !515, !"_ZL10MassMatrixfRK11btMatrix3x3RK9btVector3: argument 0"}
!515 = distinct !{!515, !"_ZL10MassMatrixfRK11btMatrix3x3RK9btVector3"}
!516 = !{!517, !519}
!517 = distinct !{!517, !518, !"_ZmlRK11btMatrix3x3S1_: argument 0"}
!518 = distinct !{!518, !"_ZmlRK11btMatrix3x3S1_"}
!519 = distinct !{!519, !520, !"_ZL10MassMatrixfRK11btMatrix3x3RK9btVector3: argument 0"}
!520 = distinct !{!520, !"_ZL10MassMatrixfRK11btMatrix3x3RK9btVector3"}
!521 = !{!522, !514}
!522 = distinct !{!522, !523, !"_ZL5CrossRK9btVector3: argument 0"}
!523 = distinct !{!523, !"_ZL5CrossRK9btVector3"}
!524 = !{!525, !519}
!525 = distinct !{!525, !526, !"_ZL5CrossRK9btVector3: argument 0"}
!526 = distinct !{!526, !"_ZL5CrossRK9btVector3"}
!527 = !{!528}
!528 = distinct !{!528, !529, !"_ZNK11btMatrix3x37inverseEv: argument 0"}
!529 = distinct !{!529, !"_ZNK11btMatrix3x37inverseEv"}
!530 = !{i64 0, i64 16, !163, i64 16, i64 16, !163, i64 32, i64 4, !140, i64 32, i64 4, !140}
!531 = !{!532}
!532 = distinct !{!532, !533, !"_ZNK10btSoftBody7ImpulsengEv: argument 0"}
!533 = distinct !{!533, !"_ZNK10btSoftBody7ImpulsengEv"}
!534 = !{!270, !48, i64 92}
!535 = !{!536, !538}
!536 = distinct !{!536, !537, !"_ZL3AddRK11btMatrix3x3S1_: argument 0"}
!537 = distinct !{!537, !"_ZL3AddRK11btMatrix3x3S1_"}
!538 = distinct !{!538, !539, !"_ZL20AngularImpulseMatrixRK11btMatrix3x3S1_: argument 0"}
!539 = distinct !{!539, !"_ZL20AngularImpulseMatrixRK11btMatrix3x3S1_"}
!540 = !{!541}
!541 = distinct !{!541, !542, !"_ZNK10btSoftBody7ImpulsengEv: argument 0"}
!542 = distinct !{!542, !"_ZNK10btSoftBody7ImpulsengEv"}
!543 = !{!544, !11, i64 184}
!544 = !{!"_ZTSN10btSoftBody6CJointE", !270, i64 0, !11, i64 184, !11, i64 188, !12, i64 192, !47, i64 224, !48, i64 240}
!545 = !{!544, !11, i64 188}
!546 = !{!222, !48, i64 408}
!547 = !{!222, !48, i64 412}
!548 = !{i64 0, i64 8, !163, i64 8, i64 16, !163, i64 24, i64 4, !140, i64 24, i64 4, !140}
!549 = !{i64 0, i64 8, !163, i64 8, i64 4, !140, i64 8, i64 4, !140}
!550 = !{!551}
!551 = distinct !{!551, !552, !"_ZNK10btSoftBody7ImpulsemlEf: argument 0"}
!552 = distinct !{!552, !"_ZNK10btSoftBody7ImpulsemlEf"}
!553 = !{!554}
!554 = distinct !{!554, !555, !"_ZNK10btSoftBody7ImpulsemlEf: argument 0"}
!555 = distinct !{!555, !"_ZNK10btSoftBody7ImpulsemlEf"}
!556 = !{!557}
!557 = distinct !{!557, !558, !"_ZNK10btSoftBody7ImpulsengEv: argument 0"}
!558 = distinct !{!558, !"_ZNK10btSoftBody7ImpulsengEv"}
!559 = !{!43, !48, i64 360}
!560 = !{!561, !13, i64 32}
!561 = !{!"_ZTSN10btSoftBody8RContactE", !491, i64 0, !13, i64 32, !46, i64 40, !47, i64 88, !48, i64 104, !48, i64 108, !48, i64 112}
!562 = !{!561, !48, i64 112}
!563 = !{!564, !13, i64 0}
!564 = !{!"_ZTSN10btSoftBody8SContactE", !13, i64 0, !13, i64 8, !47, i64 16, !47, i64 32, !48, i64 48, !48, i64 52, !12, i64 56}
!565 = !{!564, !13, i64 8}
!566 = !{!564, !48, i64 48}
!567 = !{!568, !13, i64 8}
!568 = !{!"_ZTSN15btSoftColliders13CollideSDF_RSE", !415, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !48, i64 32, !48, i64 36}
!569 = !{!568, !13, i64 16}
!570 = !{!568, !13, i64 24}
!571 = !{!568, !48, i64 32}
!572 = !{!568, !48, i64 36}
!573 = !{!574, !48, i64 8}
!574 = !{!"_ZTSN15btSoftColliders11ClusterBaseE", !415, i64 0, !48, i64 8, !48, i64 12, !48, i64 16, !48, i64 20, !48, i64 24}
!575 = !{!576, !13, i64 32}
!576 = !{!"_ZTSN15btSoftColliders12CollideCL_RSE", !574, i64 0, !13, i64 32, !13, i64 40}
!577 = !{!576, !13, i64 40}
!578 = !{!574, !48, i64 12}
!579 = !{!574, !48, i64 16}
!580 = !{!44, !48, i64 236}
!581 = !{!574, !48, i64 20}
!582 = !{!43, !13, i64 1272}
!583 = !{i64 0, i64 12, !163, i64 12, i64 16, !163}
!584 = distinct !{!584, !187, !188}
!585 = distinct !{!585, !160}
!586 = distinct !{!586, !187}
!587 = distinct !{!587, !187, !188}
!588 = distinct !{!588, !160}
!589 = distinct !{!589, !187}
!590 = !{!591, !48, i64 24}
!591 = !{!"_ZTSN15btSoftColliders12CollideVF_SSE", !415, i64 0, !12, i64 8, !48, i64 24}
!592 = !{!43, !13, i64 1208}
!593 = !{i64 0, i64 8, !219, i64 8, i64 8, !219}
!594 = !{i64 0, i64 8, !219}
!595 = distinct !{!595, !160}
!596 = !{!43, !48, i64 340}
!597 = !{!561, !48, i64 104}
!598 = !{!561, !48, i64 108}
!599 = !{!44, !11, i64 216}
!600 = !{!601, !13, i64 64}
!601 = !{!"_ZTS27btSoftClusterCollisionShape", !602, i64 0, !13, i64 64}
!602 = !{!"_ZTS21btConvexInternalShape", !603, i64 0, !47, i64 24, !47, i64 40, !48, i64 56, !48, i64 60}
!603 = !{!"_ZTS13btConvexShape", !153, i64 0}
!604 = !{!602, !48, i64 56}
!605 = distinct !{!605, !160}
!606 = !{!43, !48, i64 368}
!607 = !{!43, !48, i64 364}
!608 = !{!609, !48, i64 52}
!609 = !{!"_ZTSN15btGjkEpaSolver28sResultsE", !610, i64 0, !12, i64 4, !47, i64 36, !48, i64 52}
!610 = !{!"_ZTSN15btGjkEpaSolver28sResults7eStatusE", !12, i64 0}
!611 = !{!544, !48, i64 240}
!612 = distinct !{!612, !160}
!613 = !{!43, !48, i64 384}
!614 = !{!43, !48, i64 356}
!615 = !{i64 0, i64 8, !219, i64 8, i64 8, !219, i64 16, i64 16, !163, i64 32, i64 16, !163, i64 48, i64 4, !137, i64 52, i64 4, !137, i64 56, i64 8, !163}
!616 = !{i64 0, i64 8, !219, i64 8, i64 16, !163, i64 24, i64 16, !163, i64 40, i64 4, !137, i64 44, i64 4, !137, i64 48, i64 8, !163}
!617 = !{i64 0, i64 16, !163, i64 16, i64 16, !163, i64 32, i64 4, !137, i64 36, i64 4, !137, i64 40, i64 8, !163}
!618 = !{i64 0, i64 8, !163, i64 8, i64 16, !163, i64 24, i64 4, !137, i64 28, i64 4, !137, i64 32, i64 8, !163}
!619 = !{i64 0, i64 16, !163, i64 16, i64 4, !137, i64 20, i64 4, !137, i64 24, i64 8, !163}
!620 = !{i64 0, i64 8, !163, i64 8, i64 4, !137, i64 12, i64 4, !137, i64 16, i64 8, !163}
!621 = !{i64 0, i64 4, !137, i64 4, i64 4, !137, i64 8, i64 8, !163}
!622 = !{i64 0, i64 4, !137, i64 4, i64 8, !163}
!623 = distinct !{!623, !187, !188}
!624 = distinct !{!624, !160}
!625 = distinct !{!625, !187}
!626 = distinct !{!626, !187, !188}
!627 = distinct !{!627, !160}
!628 = distinct !{!628, !187}
!629 = !{!168, !48, i64 32}
