; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Applications/SPASS/doc-proof.c'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Applications/SPASS/doc-proof.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.MEMORY_RESOURCEHELP = type { ptr, ptr, ptr, ptr, i32, i32, i32 }
%struct.LIST_HELP = type { ptr, ptr }
%struct.MEMORY_BIGBLOCKHEADERHELP = type { ptr, ptr }

@dp_DEPTH = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [59 x i8] c"\0ANOTE: clauses with following numbers have not been found:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [70 x i8] c"NOTE: Following clauses in reduced proof have incomplete parent sets:\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"\0A\0AHere is a proof with depth %d, length %d :\0A\00", align 1
@stdout = external local_unnamed_addr global ptr, align 8
@memory_OFFSET = external local_unnamed_addr global i32, align 4
@memory_BIGBLOCKS = external local_unnamed_addr global ptr, align 8
@memory_MARKSIZE = external local_unnamed_addr global i32, align 4
@memory_FREEDBYTES = external local_unnamed_addr global i64, align 8
@memory_MAXMEM = external local_unnamed_addr global i64, align 8
@memory_ARRAY = external local_unnamed_addr global [0 x ptr], align 8
@memory_ALIGN = external local_unnamed_addr constant i32, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"%s.prf\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"begin_problem(Unknown).\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"list_of_descriptions.\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"name({*\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"*}).\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"author({*SPASS \00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"V 2.1\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"status(unsatisfiable).\0A\00", align 1
@.str.13 = private unnamed_addr constant [63 x i8] c"description({*File generated by SPASS containing a proof.*}).\0A\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"end_of_list.\0A\0A\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"list_of_symbols.\0A\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"\0Alist_of_proof(SPASS).\0A\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"end_problem.\0A\0A\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"\0ADFG Proof printed to: \00", align 1

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable
define dso_local void @dp_Init() local_unnamed_addr #0 {
entry:
  store i32 0, ptr @dp_DEPTH, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local ptr @dp_PrintProof(ptr noundef %Search, ptr noundef %Clauses, ptr noundef %FilePrefix) local_unnamed_addr #1 {
entry:
  %0 = getelementptr i8, ptr %Search, i64 112
  %Search.val = load ptr, ptr %0, align 8
  %call1 = tail call ptr @pcheck_ConvertParentsInSPASSProof(ptr noundef %Search, ptr noundef %Clauses) #7
  %cmp.i = icmp eq ptr %call1, null
  br i1 %cmp.i, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call3 = tail call i32 @puts(ptr noundef nonnull dereferenceable(1) @.str)
  br label %for.body

for.body:                                         ; preds = %if.then, %for.body
  %Missing.0246 = phi ptr [ %call1, %if.then ], [ %L.val.i, %for.body ]
  %1 = getelementptr i8, ptr %Missing.0246, i64 8
  %Missing.0.val = load ptr, ptr %1, align 8
  %2 = ptrtoint ptr %Missing.0.val to i64
  %3 = trunc i64 %2 to i32
  %call7 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %3)
  %L.val.i = load ptr, ptr %Missing.0246, align 8
  %4 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %4, i64 0, i32 4
  %5 = load i32, ptr %total_size.i.i.i, align 8
  %conv26.i.i.i = sext i32 %5 to i64
  %6 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i = add i64 %6, %conv26.i.i.i
  store i64 %add27.i.i.i, ptr @memory_FREEDBYTES, align 8
  %7 = load ptr, ptr %4, align 8
  store ptr %7, ptr %Missing.0246, align 8
  %8 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Missing.0246, ptr %8, align 8
  %cmp.i158.not = icmp eq ptr %L.val.i, null
  br i1 %cmp.i158.not, label %for.end, label %for.body, !llvm.loop !5

for.end:                                          ; preds = %for.body
  %9 = load ptr, ptr @stdout, align 8
  %call.i = tail call i32 @putc(i32 noundef 10, ptr noundef %9)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %call10 = tail call ptr @list_Copy(ptr noundef %Clauses) #7
  %10 = getelementptr i8, ptr %Search, i64 96
  %Search.val154 = load ptr, ptr %10, align 8
  %call13 = tail call ptr @list_Copy(ptr noundef %Search.val154) #7
  %11 = getelementptr i8, ptr %Search, i64 56
  %Search.val155 = load ptr, ptr %11, align 8
  %call15 = tail call ptr @list_Copy(ptr noundef %Search.val155) #7
  %12 = getelementptr i8, ptr %Search, i64 40
  %Search.val156 = load ptr, ptr %12, align 8
  %call17 = tail call ptr @list_Copy(ptr noundef %Search.val156) #7
  %cmp.i.i = icmp eq ptr %call15, null
  br i1 %cmp.i.i, label %list_Nconc.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end
  %cmp.i18.i = icmp eq ptr %call17, null
  br i1 %cmp.i18.i, label %list_Nconc.exit, label %for.cond.i

for.cond.i:                                       ; preds = %if.end.i, %for.cond.i
  %List1.addr.0.i = phi ptr [ %List1.addr.0.val17.i, %for.cond.i ], [ %call15, %if.end.i ]
  %List1.addr.0.val17.i = load ptr, ptr %List1.addr.0.i, align 8
  %cmp.i20.not.i = icmp eq ptr %List1.addr.0.val17.i, null
  br i1 %cmp.i20.not.i, label %for.end.i, label %for.cond.i, !llvm.loop !7

for.end.i:                                        ; preds = %for.cond.i
  store ptr %call17, ptr %List1.addr.0.i, align 8
  br label %list_Nconc.exit

list_Nconc.exit:                                  ; preds = %if.end, %if.end.i, %for.end.i
  %retval.0.i = phi ptr [ %call15, %for.end.i ], [ %call17, %if.end ], [ %call15, %if.end.i ]
  %cmp.i.i160 = icmp eq ptr %call13, null
  br i1 %cmp.i.i160, label %list_Nconc.exit169, label %if.end.i162

if.end.i162:                                      ; preds = %list_Nconc.exit
  %cmp.i18.i161 = icmp eq ptr %retval.0.i, null
  br i1 %cmp.i18.i161, label %for.body25.preheader, label %for.cond.i166

for.cond.i166:                                    ; preds = %if.end.i162, %for.cond.i166
  %List1.addr.0.i163 = phi ptr [ %List1.addr.0.val17.i164, %for.cond.i166 ], [ %call13, %if.end.i162 ]
  %List1.addr.0.val17.i164 = load ptr, ptr %List1.addr.0.i163, align 8
  %cmp.i20.not.i165 = icmp eq ptr %List1.addr.0.val17.i164, null
  br i1 %cmp.i20.not.i165, label %for.end.i167, label %for.cond.i166, !llvm.loop !7

for.end.i167:                                     ; preds = %for.cond.i166
  store ptr %retval.0.i, ptr %List1.addr.0.i163, align 8
  br label %list_Nconc.exit169

list_Nconc.exit169:                               ; preds = %list_Nconc.exit, %for.end.i167
  %retval.0.i168 = phi ptr [ %call13, %for.end.i167 ], [ %retval.0.i, %list_Nconc.exit ]
  %cmp.i170.not247 = icmp eq ptr %retval.0.i168, null
  br i1 %cmp.i170.not247, label %for.end35, label %for.body25.preheader

for.body25.preheader:                             ; preds = %if.end.i162, %list_Nconc.exit169
  %retval.0.i168262 = phi ptr [ %retval.0.i168, %list_Nconc.exit169 ], [ %call13, %if.end.i162 ]
  br label %for.body25

for.body25:                                       ; preds = %for.body25.preheader, %for.inc33
  %SplitClauses.0249 = phi ptr [ %SplitClauses.1, %for.inc33 ], [ null, %for.body25.preheader ]
  %Scan.0248 = phi ptr [ %Scan.0.val153, %for.inc33 ], [ %retval.0.i168262, %for.body25.preheader ]
  %13 = getelementptr i8, ptr %Scan.0248, i64 8
  %Scan.0.val149 = load ptr, ptr %13, align 8
  %14 = getelementptr i8, ptr %Scan.0.val149, i64 76
  %call26.val = load i32, ptr %14, align 4
  %cmp.i172 = icmp eq i32 %call26.val, 15
  br i1 %cmp.i172, label %if.then29, label %for.inc33

if.then29:                                        ; preds = %for.body25
  %call.i174 = tail call ptr @memory_Malloc(i32 noundef 16) #7
  %car.i = getelementptr inbounds %struct.LIST_HELP, ptr %call.i174, i64 0, i32 1
  store ptr %Scan.0.val149, ptr %car.i, align 8
  store ptr %SplitClauses.0249, ptr %call.i174, align 8
  br label %for.inc33

for.inc33:                                        ; preds = %for.body25, %if.then29
  %SplitClauses.1 = phi ptr [ %call.i174, %if.then29 ], [ %SplitClauses.0249, %for.body25 ]
  %Scan.0.val153 = load ptr, ptr %Scan.0248, align 8
  %cmp.i170.not = icmp eq ptr %Scan.0.val153, null
  br i1 %cmp.i170.not, label %for.end35, label %for.body25, !llvm.loop !8

for.end35:                                        ; preds = %for.inc33, %list_Nconc.exit169
  %cmp.i170.not247265 = phi i1 [ true, %list_Nconc.exit169 ], [ false, %for.inc33 ]
  %retval.0.i168263 = phi ptr [ null, %list_Nconc.exit169 ], [ %retval.0.i168262, %for.inc33 ]
  %SplitClauses.0.lcssa = phi ptr [ null, %list_Nconc.exit169 ], [ %SplitClauses.1, %for.inc33 ]
  tail call void @pcheck_ClauseListRemoveFlag(ptr noundef %call10, i32 noundef 64) #7
  tail call void @pcheck_ClauseListRemoveFlag(ptr noundef %retval.0.i168263, i32 noundef 64) #7
  tail call void @pcheck_MarkRecursive(ptr noundef %call10) #7
  tail call void @pcheck_MarkRecursive(ptr noundef %SplitClauses.0.lcssa) #7
  br i1 %cmp.i170.not247265, label %for.end51.thread, label %for.body41

for.end51.thread:                                 ; preds = %for.end35
  %call52267 = tail call ptr @list_Copy(ptr noundef %call10) #7
  br label %list_Nconc.exit190

for.body41:                                       ; preds = %for.end35, %for.inc49
  %ProofClauses.0252 = phi ptr [ %ProofClauses.1, %for.inc49 ], [ null, %for.end35 ]
  %Scan.1251 = phi ptr [ %Scan.1.val152, %for.inc49 ], [ %retval.0.i168263, %for.end35 ]
  %15 = getelementptr i8, ptr %Scan.1251, i64 8
  %Scan.1.val148 = load ptr, ptr %15, align 8
  %16 = getelementptr i8, ptr %Scan.1.val148, i64 48
  %call42.val = load i32, ptr %16, align 8
  %17 = and i32 %call42.val, 64
  %tobool44.not = icmp eq i32 %17, 0
  br i1 %tobool44.not, label %for.inc49, label %if.then45

if.then45:                                        ; preds = %for.body41
  %call.i179 = tail call ptr @memory_Malloc(i32 noundef 16) #7
  %car.i180 = getelementptr inbounds %struct.LIST_HELP, ptr %call.i179, i64 0, i32 1
  store ptr %Scan.1.val148, ptr %car.i180, align 8
  store ptr %ProofClauses.0252, ptr %call.i179, align 8
  br label %for.inc49

for.inc49:                                        ; preds = %for.body41, %if.then45
  %ProofClauses.1 = phi ptr [ %call.i179, %if.then45 ], [ %ProofClauses.0252, %for.body41 ]
  %Scan.1.val152 = load ptr, ptr %Scan.1251, align 8
  %cmp.i175.not = icmp eq ptr %Scan.1.val152, null
  br i1 %cmp.i175.not, label %for.end51, label %for.body41, !llvm.loop !9

for.end51:                                        ; preds = %for.inc49
  %call52 = tail call ptr @list_Copy(ptr noundef %call10) #7
  %cmp.i.i181 = icmp eq ptr %ProofClauses.1, null
  br i1 %cmp.i.i181, label %list_Nconc.exit190, label %if.end.i183

if.end.i183:                                      ; preds = %for.end51
  %cmp.i18.i182 = icmp eq ptr %call52, null
  br i1 %cmp.i18.i182, label %list_Nconc.exit190, label %for.cond.i187

for.cond.i187:                                    ; preds = %if.end.i183, %for.cond.i187
  %List1.addr.0.i184 = phi ptr [ %List1.addr.0.val17.i185, %for.cond.i187 ], [ %ProofClauses.1, %if.end.i183 ]
  %List1.addr.0.val17.i185 = load ptr, ptr %List1.addr.0.i184, align 8
  %cmp.i20.not.i186 = icmp eq ptr %List1.addr.0.val17.i185, null
  br i1 %cmp.i20.not.i186, label %for.end.i188, label %for.cond.i187, !llvm.loop !7

for.end.i188:                                     ; preds = %for.cond.i187
  store ptr %call52, ptr %List1.addr.0.i184, align 8
  br label %list_Nconc.exit190

list_Nconc.exit190:                               ; preds = %for.end51.thread, %for.end51, %if.end.i183, %for.end.i188
  %retval.0.i189 = phi ptr [ %ProofClauses.1, %for.end.i188 ], [ %call52, %for.end51 ], [ %ProofClauses.1, %if.end.i183 ], [ %call52267, %for.end51.thread ]
  %call54 = tail call ptr @pcheck_ClauseNumberMergeSort(ptr noundef %retval.0.i189) #7
  %call55 = tail call ptr @pcheck_ReduceSPASSProof(ptr noundef %call54) #7
  %call56 = tail call i32 @pcheck_SeqProofDepth(ptr noundef %call55) #7
  store i32 %call56, ptr @dp_DEPTH, align 4
  %call57 = tail call ptr @pcheck_ParentPointersToParentNumbers(ptr noundef %retval.0.i168263) #7
  %call58 = tail call ptr @pcheck_ParentPointersToParentNumbers(ptr noundef %Clauses) #7
  %cmp.i191.not254 = icmp eq ptr %call55, null
  br i1 %cmp.i191.not254, label %if.end91, label %for.body64

for.body64:                                       ; preds = %list_Nconc.exit190, %for.inc72
  %Incomplete.0256 = phi ptr [ %Incomplete.1, %for.inc72 ], [ null, %list_Nconc.exit190 ]
  %Scan.2255 = phi ptr [ %Scan.2.val151, %for.inc72 ], [ %call55, %list_Nconc.exit190 ]
  %18 = getelementptr i8, ptr %Scan.2255, i64 8
  %Scan.2.val147 = load ptr, ptr %18, align 8
  %19 = getelementptr i8, ptr %Scan.2.val147, i64 48
  %call65.val = load i32, ptr %19, align 8
  %20 = and i32 %call65.val, 128
  %tobool67.not = icmp eq i32 %20, 0
  br i1 %tobool67.not, label %for.inc72, label %if.then68

if.then68:                                        ; preds = %for.body64
  %call.i196 = tail call ptr @memory_Malloc(i32 noundef 16) #7
  %car.i197 = getelementptr inbounds %struct.LIST_HELP, ptr %call.i196, i64 0, i32 1
  store ptr %Scan.2.val147, ptr %car.i197, align 8
  store ptr %Incomplete.0256, ptr %call.i196, align 8
  br label %for.inc72

for.inc72:                                        ; preds = %for.body64, %if.then68
  %Incomplete.1 = phi ptr [ %call.i196, %if.then68 ], [ %Incomplete.0256, %for.body64 ]
  %Scan.2.val151 = load ptr, ptr %Scan.2255, align 8
  %cmp.i191.not = icmp eq ptr %Scan.2.val151, null
  br i1 %cmp.i191.not, label %for.end74, label %for.body64, !llvm.loop !10

for.end74:                                        ; preds = %for.inc72
  %cmp.i198 = icmp eq ptr %Incomplete.1, null
  br i1 %cmp.i198, label %if.end91, label %if.then77

if.then77:                                        ; preds = %for.end74
  %call78 = tail call i32 @puts(ptr noundef nonnull dereferenceable(1) @.str.2)
  br label %for.body83

for.body83:                                       ; preds = %if.then77, %for.body83
  %Scan.3259 = phi ptr [ %Incomplete.1, %if.then77 ], [ %Scan.3.val150, %for.body83 ]
  %21 = getelementptr i8, ptr %Scan.3259, i64 8
  %Scan.3.val = load ptr, ptr %21, align 8
  %call84.val = load i32, ptr %Scan.3.val, align 8
  %call86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %call84.val)
  %Scan.3.val150 = load ptr, ptr %Scan.3259, align 8
  %cmp.i200.not = icmp eq ptr %Scan.3.val150, null
  br i1 %cmp.i200.not, label %for.end89, label %for.body83, !llvm.loop !11

for.end89:                                        ; preds = %for.body83
  %22 = load ptr, ptr @stdout, align 8
  %call.i202 = tail call i32 @putc(i32 noundef 10, ptr noundef %22)
  br label %if.end91

if.end91:                                         ; preds = %list_Nconc.exit190, %for.end89, %for.end74
  %cmp.i198272 = phi i1 [ %cmp.i198, %for.end89 ], [ true, %for.end74 ], [ true, %list_Nconc.exit190 ]
  %Incomplete.0.lcssa271 = phi ptr [ %Incomplete.1, %for.end89 ], [ null, %for.end74 ], [ null, %list_Nconc.exit190 ]
  %23 = load i32, ptr @dp_DEPTH, align 4
  %call93 = tail call i32 @list_Length(ptr noundef %call55) #7
  %call94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef %23, i32 noundef %call93)
  tail call void @clause_ListPrint(ptr noundef %call55) #7
  %24 = getelementptr i8, ptr %Search.val, i64 124
  %call.val = load i32, ptr %24, align 4
  %tobool96.not = icmp eq i32 %call.val, 0
  br i1 %tobool96.not, label %if.end99, label %if.then97

if.then97:                                        ; preds = %if.end91
  %25 = getelementptr i8, ptr %Search, i64 104
  %Search.val157 = load ptr, ptr %25, align 8
  %call1.i = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %FilePrefix) #8
  %26 = trunc i64 %call1.i to i32
  %conv.i203 = add i32 %26, 5
  %call2.i = tail call ptr @memory_Malloc(i32 noundef %conv.i203) #7
  %call3.i = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %call2.i, ptr noundef nonnull dereferenceable(1) @.str.4, ptr noundef %FilePrefix) #7
  %call4.i = tail call ptr @misc_OpenFile(ptr noundef %call2.i, ptr noundef nonnull @.str.5) #7
  %27 = tail call i64 @fwrite(ptr nonnull @.str.6, i64 25, i64 1, ptr %call4.i)
  %28 = tail call i64 @fwrite(ptr nonnull @.str.7, i64 22, i64 1, ptr %call4.i)
  %29 = tail call i64 @fwrite(ptr nonnull @.str.8, i64 7, i64 1, ptr %call4.i)
  %call8.i = tail call i32 @fputs(ptr noundef %FilePrefix, ptr noundef %call4.i)
  %30 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 5, i64 1, ptr %call4.i)
  %31 = tail call i64 @fwrite(ptr nonnull @.str.10, i64 15, i64 1, ptr %call4.i)
  %32 = tail call i64 @fwrite(ptr nonnull @.str.11, i64 5, i64 1, ptr %call4.i)
  %33 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 5, i64 1, ptr %call4.i)
  %34 = tail call i64 @fwrite(ptr nonnull @.str.12, i64 23, i64 1, ptr %call4.i)
  %35 = tail call i64 @fwrite(ptr nonnull @.str.13, i64 62, i64 1, ptr %call4.i)
  %36 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 14, i64 1, ptr %call4.i)
  %37 = tail call i64 @fwrite(ptr nonnull @.str.15, i64 17, i64 1, ptr %call4.i)
  tail call void @fol_FPrintDFGSignature(ptr noundef %call4.i) #7
  %38 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 14, i64 1, ptr %call4.i)
  br i1 %cmp.i191.not254, label %for.end.i204, label %for.body.i

for.body.i:                                       ; preds = %if.then97, %for.inc.i
  %AxClauses.0132.i = phi ptr [ %AxClauses.1.i, %for.inc.i ], [ null, %if.then97 ]
  %Scan.0131.i = phi ptr [ %Scan.0.val97.i, %for.inc.i ], [ %call55, %if.then97 ]
  %ProofClauses.0130.i = phi ptr [ %ProofClauses.1.i, %for.inc.i ], [ null, %if.then97 ]
  %ConClauses.0129.i = phi ptr [ %ConClauses.1.i, %for.inc.i ], [ null, %if.then97 ]
  %39 = getelementptr i8, ptr %Scan.0131.i, i64 8
  %Scan.0.val.i = load ptr, ptr %39, align 8
  %40 = getelementptr i8, ptr %Scan.0.val.i, i64 76
  %call19.val98.i = load i32, ptr %40, align 4
  %cmp.i99.i = icmp eq i32 %call19.val98.i, 16
  br i1 %cmp.i99.i, label %if.then.i, label %if.else27.i

if.then.i:                                        ; preds = %for.body.i
  %41 = getelementptr i8, ptr %Scan.0.val.i, i64 48
  %call19.val.i = load i32, ptr %41, align 8
  %42 = and i32 %call19.val.i, 8
  %tobool23.not.i = icmp eq i32 %42, 0
  %call.i103.i = tail call ptr @memory_Malloc(i32 noundef 16) #7
  %car.i104.i = getelementptr inbounds %struct.LIST_HELP, ptr %call.i103.i, i64 0, i32 1
  store ptr %Scan.0.val.i, ptr %car.i104.i, align 8
  br i1 %tobool23.not.i, label %if.else.i, label %if.then24.i

if.then24.i:                                      ; preds = %if.then.i
  store ptr %ConClauses.0129.i, ptr %call.i103.i, align 8
  br label %for.inc.i

if.else.i:                                        ; preds = %if.then.i
  store ptr %AxClauses.0132.i, ptr %call.i103.i, align 8
  br label %for.inc.i

if.else27.i:                                      ; preds = %for.body.i
  %call.i105.i = tail call ptr @memory_Malloc(i32 noundef 16) #7
  %car.i106.i = getelementptr inbounds %struct.LIST_HELP, ptr %call.i105.i, i64 0, i32 1
  store ptr %Scan.0.val.i, ptr %car.i106.i, align 8
  store ptr %ProofClauses.0130.i, ptr %call.i105.i, align 8
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else27.i, %if.else.i, %if.then24.i
  %ConClauses.1.i = phi ptr [ %call.i103.i, %if.then24.i ], [ %ConClauses.0129.i, %if.else.i ], [ %ConClauses.0129.i, %if.else27.i ]
  %ProofClauses.1.i = phi ptr [ %ProofClauses.0130.i, %if.then24.i ], [ %ProofClauses.0130.i, %if.else.i ], [ %call.i105.i, %if.else27.i ]
  %AxClauses.1.i = phi ptr [ %AxClauses.0132.i, %if.then24.i ], [ %call.i103.i, %if.else.i ], [ %AxClauses.0132.i, %if.else27.i ]
  %Scan.0.val97.i = load ptr, ptr %Scan.0131.i, align 8
  %cmp.i.not.i = icmp eq ptr %Scan.0.val97.i, null
  br i1 %cmp.i.not.i, label %for.end.i204, label %for.body.i, !llvm.loop !12

for.end.i204:                                     ; preds = %for.inc.i, %if.then97
  %ConClauses.0.lcssa.i = phi ptr [ null, %if.then97 ], [ %ConClauses.1.i, %for.inc.i ]
  %ProofClauses.0.lcssa.i = phi ptr [ null, %if.then97 ], [ %ProofClauses.1.i, %for.inc.i ]
  %AxClauses.0.lcssa.i = phi ptr [ null, %if.then97 ], [ %AxClauses.1.i, %for.inc.i ]
  %call31.i = tail call ptr @list_NReverse(ptr noundef %ConClauses.0.lcssa.i) #7
  %call32.i = tail call ptr @list_NReverse(ptr noundef %AxClauses.0.lcssa.i) #7
  %call33.i = tail call ptr @list_NReverse(ptr noundef %ProofClauses.0.lcssa.i) #7
  tail call void @clause_FPrintCnfDFG(ptr noundef %call4.i, i32 noundef 0, ptr noundef %call32.i, ptr noundef %call31.i, ptr noundef %Search.val, ptr noundef %Search.val157) #7
  %43 = tail call i64 @fwrite(ptr nonnull @.str.16, i64 23, i64 1, ptr %call4.i)
  %cmp.i107.not135.i = icmp eq ptr %call33.i, null
  br i1 %cmp.i107.not135.i, label %for.end43.i, label %for.body39.i

for.body39.i:                                     ; preds = %for.end.i204, %for.body39.i
  %Scan.1136.i = phi ptr [ %Scan.1.val96.i, %for.body39.i ], [ %call33.i, %for.end.i204 ]
  %44 = getelementptr i8, ptr %Scan.1136.i, i64 8
  %Scan.1.val.i = load ptr, ptr %44, align 8
  tail call void @clause_FPrintDFGStep(ptr noundef %call4.i, ptr noundef %Scan.1.val.i, i32 noundef 1) #7
  %Scan.1.val96.i = load ptr, ptr %Scan.1136.i, align 8
  %cmp.i107.not.i = icmp eq ptr %Scan.1.val96.i, null
  br i1 %cmp.i107.not.i, label %for.end43.i, label %for.body39.i, !llvm.loop !13

for.end43.i:                                      ; preds = %for.body39.i, %for.end.i204
  %45 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 14, i64 1, ptr %call4.i)
  %46 = tail call i64 @fwrite(ptr nonnull @.str.17, i64 14, i64 1, ptr %call4.i)
  tail call void @misc_CloseFile(ptr noundef %call4.i, ptr noundef %call2.i) #7
  %47 = load ptr, ptr @stdout, align 8
  %48 = tail call i64 @fwrite(ptr nonnull @.str.18, i64 23, i64 1, ptr %47)
  %call47.i = tail call i32 @puts(ptr noundef nonnull dereferenceable(1) %call2.i)
  %cmp.i.not5.i.i = icmp eq ptr %call31.i, null
  br i1 %cmp.i.not5.i.i, label %list_Delete.exit.i, label %while.body.i.i

while.body.i.i:                                   ; preds = %for.end43.i, %while.body.i.i
  %Current.06.i.i = phi ptr [ %L.addr.0.val.i.i, %while.body.i.i ], [ %call31.i, %for.end43.i ]
  %L.addr.0.val.i.i = load ptr, ptr %Current.06.i.i, align 8
  %49 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i.i = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %49, i64 0, i32 4
  %50 = load i32, ptr %total_size.i.i.i.i, align 8
  %conv26.i.i.i.i = sext i32 %50 to i64
  %51 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i.i = add i64 %51, %conv26.i.i.i.i
  store i64 %add27.i.i.i.i, ptr @memory_FREEDBYTES, align 8
  %52 = load ptr, ptr %49, align 8
  store ptr %52, ptr %Current.06.i.i, align 8
  %53 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i.i, ptr %53, align 8
  %cmp.i.not.i.i = icmp eq ptr %L.addr.0.val.i.i, null
  br i1 %cmp.i.not.i.i, label %list_Delete.exit.i, label %while.body.i.i, !llvm.loop !14

list_Delete.exit.i:                               ; preds = %while.body.i.i, %for.end43.i
  %cmp.i.not5.i109.i = icmp eq ptr %call32.i, null
  br i1 %cmp.i.not5.i109.i, label %list_Delete.exit117.i, label %while.body.i116.i

while.body.i116.i:                                ; preds = %list_Delete.exit.i, %while.body.i116.i
  %Current.06.i110.i = phi ptr [ %L.addr.0.val.i111.i, %while.body.i116.i ], [ %call32.i, %list_Delete.exit.i ]
  %L.addr.0.val.i111.i = load ptr, ptr %Current.06.i110.i, align 8
  %54 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i112.i = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %54, i64 0, i32 4
  %55 = load i32, ptr %total_size.i.i.i112.i, align 8
  %conv26.i.i.i113.i = sext i32 %55 to i64
  %56 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i114.i = add i64 %56, %conv26.i.i.i113.i
  store i64 %add27.i.i.i114.i, ptr @memory_FREEDBYTES, align 8
  %57 = load ptr, ptr %54, align 8
  store ptr %57, ptr %Current.06.i110.i, align 8
  %58 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i110.i, ptr %58, align 8
  %cmp.i.not.i115.i = icmp eq ptr %L.addr.0.val.i111.i, null
  br i1 %cmp.i.not.i115.i, label %list_Delete.exit117.i, label %while.body.i116.i, !llvm.loop !14

list_Delete.exit117.i:                            ; preds = %while.body.i116.i, %list_Delete.exit.i
  br i1 %cmp.i107.not135.i, label %list_Delete.exit126.i, label %while.body.i125.i

while.body.i125.i:                                ; preds = %list_Delete.exit117.i, %while.body.i125.i
  %Current.06.i119.i = phi ptr [ %L.addr.0.val.i120.i, %while.body.i125.i ], [ %call33.i, %list_Delete.exit117.i ]
  %L.addr.0.val.i120.i = load ptr, ptr %Current.06.i119.i, align 8
  %59 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i121.i = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %59, i64 0, i32 4
  %60 = load i32, ptr %total_size.i.i.i121.i, align 8
  %conv26.i.i.i122.i = sext i32 %60 to i64
  %61 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i123.i = add i64 %61, %conv26.i.i.i122.i
  store i64 %add27.i.i.i123.i, ptr @memory_FREEDBYTES, align 8
  %62 = load ptr, ptr %59, align 8
  store ptr %62, ptr %Current.06.i119.i, align 8
  %63 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i119.i, ptr %63, align 8
  %cmp.i.not.i124.i = icmp eq ptr %L.addr.0.val.i120.i, null
  br i1 %cmp.i.not.i124.i, label %list_Delete.exit126.i, label %while.body.i125.i, !llvm.loop !14

list_Delete.exit126.i:                            ; preds = %while.body.i125.i, %list_Delete.exit117.i
  %call48.i = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %FilePrefix) #8
  %64 = trunc i64 %call48.i to i32
  %conv51.i = add i32 %64, 5
  %cmp.i.i.i = icmp ult i32 %conv51.i, 1024
  br i1 %cmp.i.i.i, label %if.else25.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %list_Delete.exit126.i
  %65 = load i32, ptr @memory_ALIGN, align 4
  %rem2.i.i.i.i = urem i32 %conv51.i, %65
  %tobool3.not.i.i.i.i = icmp eq i32 %rem2.i.i.i.i, 0
  %sub6.i.i.i.i = add i32 %65, %conv51.i
  %add7.i.i.i.i = sub i32 %sub6.i.i.i.i, %rem2.i.i.i.i
  %RealSize.1.i.i.i.i = select i1 %tobool3.not.i.i.i.i, i32 %conv51.i, i32 %add7.i.i.i.i
  %66 = load i32, ptr @memory_OFFSET, align 4
  %idx.ext.i.i = zext i32 %66 to i64
  %idx.neg.i.i = sub nsw i64 0, %idx.ext.i.i
  %add.ptr.i.i = getelementptr inbounds i8, ptr %call2.i, i64 %idx.neg.i.i
  %add.ptr1.i.i = getelementptr inbounds i8, ptr %add.ptr.i.i, i64 -16
  %67 = load ptr, ptr %add.ptr1.i.i, align 8
  %cmp2.not.i.i = icmp eq ptr %67, null
  %next6.i.i = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, ptr %add.ptr1.i.i, i64 0, i32 1
  %68 = load ptr, ptr %next6.i.i, align 8
  %next5.i.i = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, ptr %67, i64 0, i32 1
  %memory_BIGBLOCKS.sink.i.i = select i1 %cmp2.not.i.i, ptr @memory_BIGBLOCKS, ptr %next5.i.i
  store ptr %68, ptr %memory_BIGBLOCKS.sink.i.i, align 8
  %69 = load ptr, ptr %next6.i.i, align 8
  %cmp8.not.i.i = icmp eq ptr %69, null
  br i1 %cmp8.not.i.i, label %if.end13.i.i, label %if.then9.i.i

if.then9.i.i:                                     ; preds = %if.then.i.i
  %70 = load ptr, ptr %add.ptr1.i.i, align 8
  store ptr %70, ptr %69, align 8
  br label %if.end13.i.i

if.end13.i.i:                                     ; preds = %if.then9.i.i, %if.then.i.i
  %71 = load i32, ptr @memory_MARKSIZE, align 4
  %add.i.i = add i32 %71, %RealSize.1.i.i.i.i
  %conv.i127.i = zext i32 %add.i.i to i64
  %add14.i.i = add nuw nsw i64 %conv.i127.i, 16
  %72 = load i64, ptr @memory_FREEDBYTES, align 8
  %add15.i.i = add i64 %add14.i.i, %72
  store i64 %add15.i.i, ptr @memory_FREEDBYTES, align 8
  %73 = load i64, ptr @memory_MAXMEM, align 8
  %cmp16.i.i = icmp sgt i64 %73, -1
  br i1 %cmp16.i.i, label %if.then18.i.i, label %if.end23.i.i

if.then18.i.i:                                    ; preds = %if.end13.i.i
  %add22.i.i = add nuw i64 %73, %add14.i.i
  store i64 %add22.i.i, ptr @memory_MAXMEM, align 8
  br label %if.end23.i.i

if.end23.i.i:                                     ; preds = %if.then18.i.i, %if.end13.i.i
  %add.ptr24.i.i = getelementptr inbounds i8, ptr %call2.i, i64 -16
  tail call void @free(ptr noundef nonnull %add.ptr24.i.i) #7
  br label %if.end99

if.else25.i.i:                                    ; preds = %list_Delete.exit126.i
  %idxprom.i.i = zext i32 %conv51.i to i64
  %arrayidx.i.i = getelementptr inbounds [0 x ptr], ptr @memory_ARRAY, i64 0, i64 %idxprom.i.i
  %74 = load ptr, ptr %arrayidx.i.i, align 8
  %total_size.i.i = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %74, i64 0, i32 4
  %75 = load i32, ptr %total_size.i.i, align 8
  %conv26.i.i = sext i32 %75 to i64
  %76 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i = add i64 %76, %conv26.i.i
  store i64 %add27.i.i, ptr @memory_FREEDBYTES, align 8
  %77 = load ptr, ptr %74, align 8
  store ptr %77, ptr %call2.i, align 8
  %78 = load ptr, ptr %arrayidx.i.i, align 8
  store ptr %call2.i, ptr %78, align 8
  br label %if.end99

if.end99:                                         ; preds = %if.else25.i.i, %if.end23.i.i, %if.end91
  %79 = load ptr, ptr @stdout, align 8
  %call100 = tail call i32 @fflush(ptr noundef %79)
  %cmp.i.not5.i = icmp eq ptr %call10, null
  br i1 %cmp.i.not5.i, label %list_Delete.exit, label %while.body.i

while.body.i:                                     ; preds = %if.end99, %while.body.i
  %Current.06.i = phi ptr [ %L.addr.0.val.i, %while.body.i ], [ %call10, %if.end99 ]
  %L.addr.0.val.i = load ptr, ptr %Current.06.i, align 8
  %80 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i205 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %80, i64 0, i32 4
  %81 = load i32, ptr %total_size.i.i.i205, align 8
  %conv26.i.i.i206 = sext i32 %81 to i64
  %82 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i207 = add i64 %82, %conv26.i.i.i206
  store i64 %add27.i.i.i207, ptr @memory_FREEDBYTES, align 8
  %83 = load ptr, ptr %80, align 8
  store ptr %83, ptr %Current.06.i, align 8
  %84 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i, ptr %84, align 8
  %cmp.i.not.i208 = icmp eq ptr %L.addr.0.val.i, null
  br i1 %cmp.i.not.i208, label %list_Delete.exit, label %while.body.i, !llvm.loop !14

list_Delete.exit:                                 ; preds = %while.body.i, %if.end99
  br i1 %cmp.i170.not247265, label %list_Delete.exit217, label %while.body.i216

while.body.i216:                                  ; preds = %list_Delete.exit, %while.body.i216
  %Current.06.i210 = phi ptr [ %L.addr.0.val.i211, %while.body.i216 ], [ %retval.0.i168263, %list_Delete.exit ]
  %L.addr.0.val.i211 = load ptr, ptr %Current.06.i210, align 8
  %85 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i212 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %85, i64 0, i32 4
  %86 = load i32, ptr %total_size.i.i.i212, align 8
  %conv26.i.i.i213 = sext i32 %86 to i64
  %87 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i214 = add i64 %87, %conv26.i.i.i213
  store i64 %add27.i.i.i214, ptr @memory_FREEDBYTES, align 8
  %88 = load ptr, ptr %85, align 8
  store ptr %88, ptr %Current.06.i210, align 8
  %89 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i210, ptr %89, align 8
  %cmp.i.not.i215 = icmp eq ptr %L.addr.0.val.i211, null
  br i1 %cmp.i.not.i215, label %list_Delete.exit217, label %while.body.i216, !llvm.loop !14

list_Delete.exit217:                              ; preds = %while.body.i216, %list_Delete.exit
  %cmp.i.not5.i218 = icmp eq ptr %call54, null
  br i1 %cmp.i.not5.i218, label %list_Delete.exit226, label %while.body.i225

while.body.i225:                                  ; preds = %list_Delete.exit217, %while.body.i225
  %Current.06.i219 = phi ptr [ %L.addr.0.val.i220, %while.body.i225 ], [ %call54, %list_Delete.exit217 ]
  %L.addr.0.val.i220 = load ptr, ptr %Current.06.i219, align 8
  %90 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i221 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %90, i64 0, i32 4
  %91 = load i32, ptr %total_size.i.i.i221, align 8
  %conv26.i.i.i222 = sext i32 %91 to i64
  %92 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i223 = add i64 %92, %conv26.i.i.i222
  store i64 %add27.i.i.i223, ptr @memory_FREEDBYTES, align 8
  %93 = load ptr, ptr %90, align 8
  store ptr %93, ptr %Current.06.i219, align 8
  %94 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i219, ptr %94, align 8
  %cmp.i.not.i224 = icmp eq ptr %L.addr.0.val.i220, null
  br i1 %cmp.i.not.i224, label %list_Delete.exit226, label %while.body.i225, !llvm.loop !14

list_Delete.exit226:                              ; preds = %while.body.i225, %list_Delete.exit217
  %cmp.i.not5.i227 = icmp eq ptr %SplitClauses.0.lcssa, null
  br i1 %cmp.i.not5.i227, label %list_Delete.exit235, label %while.body.i234

while.body.i234:                                  ; preds = %list_Delete.exit226, %while.body.i234
  %Current.06.i228 = phi ptr [ %L.addr.0.val.i229, %while.body.i234 ], [ %SplitClauses.0.lcssa, %list_Delete.exit226 ]
  %L.addr.0.val.i229 = load ptr, ptr %Current.06.i228, align 8
  %95 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i230 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %95, i64 0, i32 4
  %96 = load i32, ptr %total_size.i.i.i230, align 8
  %conv26.i.i.i231 = sext i32 %96 to i64
  %97 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i232 = add i64 %97, %conv26.i.i.i231
  store i64 %add27.i.i.i232, ptr @memory_FREEDBYTES, align 8
  %98 = load ptr, ptr %95, align 8
  store ptr %98, ptr %Current.06.i228, align 8
  %99 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i228, ptr %99, align 8
  %cmp.i.not.i233 = icmp eq ptr %L.addr.0.val.i229, null
  br i1 %cmp.i.not.i233, label %list_Delete.exit235, label %while.body.i234, !llvm.loop !14

list_Delete.exit235:                              ; preds = %while.body.i234, %list_Delete.exit226
  br i1 %cmp.i198272, label %list_Delete.exit244, label %while.body.i243

while.body.i243:                                  ; preds = %list_Delete.exit235, %while.body.i243
  %Current.06.i237 = phi ptr [ %L.addr.0.val.i238, %while.body.i243 ], [ %Incomplete.0.lcssa271, %list_Delete.exit235 ]
  %L.addr.0.val.i238 = load ptr, ptr %Current.06.i237, align 8
  %100 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  %total_size.i.i.i239 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, ptr %100, i64 0, i32 4
  %101 = load i32, ptr %total_size.i.i.i239, align 8
  %conv26.i.i.i240 = sext i32 %101 to i64
  %102 = load i64, ptr @memory_FREEDBYTES, align 8
  %add27.i.i.i241 = add i64 %102, %conv26.i.i.i240
  store i64 %add27.i.i.i241, ptr @memory_FREEDBYTES, align 8
  %103 = load ptr, ptr %100, align 8
  store ptr %103, ptr %Current.06.i237, align 8
  %104 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @memory_ARRAY, i64 0, i64 16), align 8
  store ptr %Current.06.i237, ptr %104, align 8
  %cmp.i.not.i242 = icmp eq ptr %L.addr.0.val.i238, null
  br i1 %cmp.i.not.i242, label %list_Delete.exit244, label %while.body.i243, !llvm.loop !14

list_Delete.exit244:                              ; preds = %while.body.i243, %list_Delete.exit235
  ret ptr %call55
}

declare ptr @pcheck_ConvertParentsInSPASSProof(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #3

declare ptr @list_Copy(ptr noundef) local_unnamed_addr #2

declare void @pcheck_ClauseListRemoveFlag(ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @pcheck_MarkRecursive(ptr noundef) local_unnamed_addr #2

declare ptr @pcheck_ClauseNumberMergeSort(ptr noundef) local_unnamed_addr #2

declare ptr @pcheck_ReduceSPASSProof(ptr noundef) local_unnamed_addr #2

declare i32 @pcheck_SeqProofDepth(ptr noundef) local_unnamed_addr #2

declare ptr @pcheck_ParentPointersToParentNumbers(ptr noundef) local_unnamed_addr #2

declare i32 @list_Length(ptr noundef) local_unnamed_addr #2

declare void @clause_ListPrint(ptr noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #3

declare ptr @memory_Malloc(i32 noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #3

declare ptr @misc_OpenFile(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @fputs(ptr nocapture noundef readonly, ptr nocapture noundef) local_unnamed_addr #3

declare void @fol_FPrintDFGSignature(ptr noundef) local_unnamed_addr #2

declare ptr @list_NReverse(ptr noundef) local_unnamed_addr #2

declare void @clause_FPrintCnfDFG(ptr noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @clause_FPrintDFGStep(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @misc_CloseFile(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #6

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nounwind willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nounwind }
attributes #7 = { nounwind }
attributes #8 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !6}
!10 = distinct !{!10, !6}
!11 = distinct !{!11, !6}
!12 = distinct !{!12, !6}
!13 = distinct !{!13, !6}
!14 = distinct !{!14, !6}
