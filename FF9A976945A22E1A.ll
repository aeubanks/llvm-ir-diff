; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_constant_folding.cpp'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_constant_folding.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.one_result = type { double, ptr }

$_Z13test_constantIa10custom_twoIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc = comdat any

$_Z13test_constantIh10custom_twoIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc = comdat any

$_Z13test_constantIs10custom_twoIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc = comdat any

$_Z13test_constantIt10custom_twoItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt18custom_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc = comdat any

$_Z13test_constantIi10custom_twoIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc = comdat any

$_Z13test_constantIj10custom_twoIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc = comdat any

$_Z13test_constantIl10custom_twoIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc = comdat any

$_Z13test_constantIm10custom_twoImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm18custom_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc = comdat any

$_Z13test_constantIf10custom_twoIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc = comdat any

$_Z13test_constantId10custom_twoIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc = comdat any

$_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc = comdat any

$_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc = comdat any

@results = dso_local local_unnamed_addr global ptr null, align 8
@current_test = dso_local local_unnamed_addr global i32 0, align 4
@allocated_results = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"Could not allocate %d results\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"number %*s time       per second   test0\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"\0Atest %*s description   absolute\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"number %*s time\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", align 1
@start_time = dso_local local_unnamed_addr global i64 0, align 8
@end_time = dso_local local_unnamed_addr global i64 0, align 8
@base_iterations = dso_local local_unnamed_addr global i32 5000, align 4
@iterations = dso_local local_unnamed_addr global i32 5000, align 4
@init_value = dso_local local_unnamed_addr global double 1.000000e+00, align 8
@dataDouble = dso_local global [8000 x double] zeroinitializer, align 16
@dataFloat = dso_local global [8000 x float] zeroinitializer, align 16
@data64unsigned = dso_local global [8000 x i64] zeroinitializer, align 16
@data64 = dso_local global [8000 x i64] zeroinitializer, align 16
@data32unsigned = dso_local global [8000 x i32] zeroinitializer, align 16
@data32 = dso_local global [8000 x i32] zeroinitializer, align 16
@data16unsigned = dso_local global [8000 x i16] zeroinitializer, align 16
@data16 = dso_local global [8000 x i16] zeroinitializer, align 16
@data8unsigned = dso_local global [8000 x i8] zeroinitializer, align 16
@data8 = dso_local global [8000 x i8] zeroinitializer, align 16
@.str.11 = private unnamed_addr constant [16 x i8] c"int8_t constant\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"int8_t add constants\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"int8_t subtract constants\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"int8_t multiply constants\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"int8_t divide constants\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"int8_t mod constants\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"int8_t equal constants\00", align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"int8_t notequal constants\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"int8_t greater than constants\00", align 1
@.str.20 = private unnamed_addr constant [27 x i8] c"int8_t less than constants\00", align 1
@.str.21 = private unnamed_addr constant [36 x i8] c"int8_t greater than equal constants\00", align 1
@.str.22 = private unnamed_addr constant [33 x i8] c"int8_t less than equal constants\00", align 1
@.str.23 = private unnamed_addr constant [21 x i8] c"int8_t and constants\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"int8_t or constants\00", align 1
@.str.25 = private unnamed_addr constant [21 x i8] c"int8_t xor constants\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"int8_t constant add\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"int8_t multiple constant adds\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"int8_t constant subtract\00", align 1
@.str.29 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant subtracts\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"int8_t constant multiply\00", align 1
@.str.31 = private unnamed_addr constant [36 x i8] c"int8_t multiple constant multiplies\00", align 1
@.str.32 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant multiply2\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"int8_t constant divide\00", align 1
@.str.34 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divides\00", align 1
@.str.35 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divide2\00", align 1
@.str.36 = private unnamed_addr constant [31 x i8] c"int8_t multiple constant mixed\00", align 1
@.str.37 = private unnamed_addr constant [20 x i8] c"int8_t constant and\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant and\00", align 1
@.str.39 = private unnamed_addr constant [19 x i8] c"int8_t constant or\00", align 1
@.str.40 = private unnamed_addr constant [28 x i8] c"int8_t multiple constant or\00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"int8_t constant xor\00", align 1
@.str.42 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant xor\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"uint8_t constant\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"uint8_t add constants\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"uint8_t subtract constants\00", align 1
@.str.46 = private unnamed_addr constant [27 x i8] c"uint8_t multiply constants\00", align 1
@.str.47 = private unnamed_addr constant [25 x i8] c"uint8_t divide constants\00", align 1
@.str.48 = private unnamed_addr constant [22 x i8] c"uint8_t mod constants\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"uint8_t equal constants\00", align 1
@.str.50 = private unnamed_addr constant [27 x i8] c"uint8_t notequal constants\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"uint8_t greater than constants\00", align 1
@.str.52 = private unnamed_addr constant [28 x i8] c"uint8_t less than constants\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"uint8_t greater than equal constants\00", align 1
@.str.54 = private unnamed_addr constant [34 x i8] c"uint8_t less than equal constants\00", align 1
@.str.55 = private unnamed_addr constant [22 x i8] c"uint8_t and constants\00", align 1
@.str.56 = private unnamed_addr constant [21 x i8] c"uint8_t or constants\00", align 1
@.str.57 = private unnamed_addr constant [22 x i8] c"uint8_t xor constants\00", align 1
@.str.58 = private unnamed_addr constant [21 x i8] c"uint8_t constant add\00", align 1
@.str.59 = private unnamed_addr constant [31 x i8] c"uint8_t multiple constant adds\00", align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"uint8_t constant subtract\00", align 1
@.str.61 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant subtracts\00", align 1
@.str.62 = private unnamed_addr constant [26 x i8] c"uint8_t constant multiply\00", align 1
@.str.63 = private unnamed_addr constant [37 x i8] c"uint8_t multiple constant multiplies\00", align 1
@.str.64 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant multiply2\00", align 1
@.str.65 = private unnamed_addr constant [24 x i8] c"uint8_t constant divide\00", align 1
@.str.66 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divides\00", align 1
@.str.67 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divide2\00", align 1
@.str.68 = private unnamed_addr constant [32 x i8] c"uint8_t multiple constant mixed\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"uint8_t constant and\00", align 1
@.str.70 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant and\00", align 1
@.str.71 = private unnamed_addr constant [20 x i8] c"uint8_t constant or\00", align 1
@.str.72 = private unnamed_addr constant [29 x i8] c"uint8_t multiple constant or\00", align 1
@.str.73 = private unnamed_addr constant [21 x i8] c"uint8_t constant xor\00", align 1
@.str.74 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant xor\00", align 1
@.str.75 = private unnamed_addr constant [17 x i8] c"int16_t constant\00", align 1
@.str.76 = private unnamed_addr constant [22 x i8] c"int16_t add constants\00", align 1
@.str.77 = private unnamed_addr constant [27 x i8] c"int16_t subtract constants\00", align 1
@.str.78 = private unnamed_addr constant [27 x i8] c"int16_t multiply constants\00", align 1
@.str.79 = private unnamed_addr constant [25 x i8] c"int16_t divide constants\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"int16_t mod constants\00", align 1
@.str.81 = private unnamed_addr constant [24 x i8] c"int16_t equal constants\00", align 1
@.str.82 = private unnamed_addr constant [27 x i8] c"int16_t notequal constants\00", align 1
@.str.83 = private unnamed_addr constant [31 x i8] c"int16_t greater than constants\00", align 1
@.str.84 = private unnamed_addr constant [28 x i8] c"int16_t less than constants\00", align 1
@.str.85 = private unnamed_addr constant [37 x i8] c"int16_t greater than equal constants\00", align 1
@.str.86 = private unnamed_addr constant [34 x i8] c"int16_t less than equal constants\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"int16_t and constants\00", align 1
@.str.88 = private unnamed_addr constant [21 x i8] c"int16_t or constants\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"int16_t xor constants\00", align 1
@.str.90 = private unnamed_addr constant [21 x i8] c"int16_t constant add\00", align 1
@.str.91 = private unnamed_addr constant [31 x i8] c"int16_t multiple constant adds\00", align 1
@.str.92 = private unnamed_addr constant [26 x i8] c"int16_t constant subtract\00", align 1
@.str.93 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant subtracts\00", align 1
@.str.94 = private unnamed_addr constant [26 x i8] c"int16_t constant multiply\00", align 1
@.str.95 = private unnamed_addr constant [37 x i8] c"int16_t multiple constant multiplies\00", align 1
@.str.96 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant multiply2\00", align 1
@.str.97 = private unnamed_addr constant [24 x i8] c"int16_t constant divide\00", align 1
@.str.98 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divides\00", align 1
@.str.99 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divide2\00", align 1
@.str.100 = private unnamed_addr constant [32 x i8] c"int16_t multiple constant mixed\00", align 1
@.str.101 = private unnamed_addr constant [21 x i8] c"int16_t constant and\00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant and\00", align 1
@.str.103 = private unnamed_addr constant [20 x i8] c"int16_t constant or\00", align 1
@.str.104 = private unnamed_addr constant [29 x i8] c"int16_t multiple constant or\00", align 1
@.str.105 = private unnamed_addr constant [21 x i8] c"int16_t constant xor\00", align 1
@.str.106 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant xor\00", align 1
@.str.107 = private unnamed_addr constant [18 x i8] c"uint16_t constant\00", align 1
@.str.108 = private unnamed_addr constant [23 x i8] c"uint16_t add constants\00", align 1
@.str.109 = private unnamed_addr constant [28 x i8] c"uint16_t subtract constants\00", align 1
@.str.110 = private unnamed_addr constant [28 x i8] c"uint16_t multiply constants\00", align 1
@.str.111 = private unnamed_addr constant [26 x i8] c"uint16_t divide constants\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"uint16_t mod constants\00", align 1
@.str.113 = private unnamed_addr constant [25 x i8] c"uint16_t equal constants\00", align 1
@.str.114 = private unnamed_addr constant [28 x i8] c"uint16_t notequal constants\00", align 1
@.str.115 = private unnamed_addr constant [32 x i8] c"uint16_t greater than constants\00", align 1
@.str.116 = private unnamed_addr constant [29 x i8] c"uint16_t less than constants\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"uint16_t greater than equal constants\00", align 1
@.str.118 = private unnamed_addr constant [35 x i8] c"uint16_t less than equal constants\00", align 1
@.str.119 = private unnamed_addr constant [23 x i8] c"uint16_t and constants\00", align 1
@.str.120 = private unnamed_addr constant [22 x i8] c"uint16_t or constants\00", align 1
@.str.121 = private unnamed_addr constant [23 x i8] c"uint16_t xor constants\00", align 1
@.str.122 = private unnamed_addr constant [22 x i8] c"uint16_t constant add\00", align 1
@.str.123 = private unnamed_addr constant [32 x i8] c"uint16_t multiple constant adds\00", align 1
@.str.124 = private unnamed_addr constant [27 x i8] c"uint16_t constant subtract\00", align 1
@.str.125 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant subtracts\00", align 1
@.str.126 = private unnamed_addr constant [27 x i8] c"uint16_t constant multiply\00", align 1
@.str.127 = private unnamed_addr constant [38 x i8] c"uint16_t multiple constant multiplies\00", align 1
@.str.128 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant multiply2\00", align 1
@.str.129 = private unnamed_addr constant [25 x i8] c"uint16_t constant divide\00", align 1
@.str.130 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divides\00", align 1
@.str.131 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divide2\00", align 1
@.str.132 = private unnamed_addr constant [33 x i8] c"uint16_t multiple constant mixed\00", align 1
@.str.133 = private unnamed_addr constant [22 x i8] c"uint16_t constant and\00", align 1
@.str.134 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant and\00", align 1
@.str.135 = private unnamed_addr constant [21 x i8] c"uint16_t constant or\00", align 1
@.str.136 = private unnamed_addr constant [30 x i8] c"uint16_t multiple constant or\00", align 1
@.str.137 = private unnamed_addr constant [22 x i8] c"uint16_t constant xor\00", align 1
@.str.138 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant xor\00", align 1
@.str.139 = private unnamed_addr constant [17 x i8] c"int32_t constant\00", align 1
@.str.140 = private unnamed_addr constant [22 x i8] c"int32_t add constants\00", align 1
@.str.141 = private unnamed_addr constant [27 x i8] c"int32_t subtract constants\00", align 1
@.str.142 = private unnamed_addr constant [27 x i8] c"int32_t multiply constants\00", align 1
@.str.143 = private unnamed_addr constant [25 x i8] c"int32_t divide constants\00", align 1
@.str.144 = private unnamed_addr constant [22 x i8] c"int32_t mod constants\00", align 1
@.str.145 = private unnamed_addr constant [24 x i8] c"int32_t equal constants\00", align 1
@.str.146 = private unnamed_addr constant [27 x i8] c"int32_t notequal constants\00", align 1
@.str.147 = private unnamed_addr constant [31 x i8] c"int32_t greater than constants\00", align 1
@.str.148 = private unnamed_addr constant [28 x i8] c"int32_t less than constants\00", align 1
@.str.149 = private unnamed_addr constant [37 x i8] c"int32_t greater than equal constants\00", align 1
@.str.150 = private unnamed_addr constant [34 x i8] c"int32_t less than equal constants\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"int32_t and constants\00", align 1
@.str.152 = private unnamed_addr constant [21 x i8] c"int32_t or constants\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"int32_t xor constants\00", align 1
@.str.154 = private unnamed_addr constant [21 x i8] c"int32_t constant add\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"int32_t multiple constant adds\00", align 1
@.str.156 = private unnamed_addr constant [26 x i8] c"int32_t constant subtract\00", align 1
@.str.157 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant subtracts\00", align 1
@.str.158 = private unnamed_addr constant [26 x i8] c"int32_t constant multiply\00", align 1
@.str.159 = private unnamed_addr constant [37 x i8] c"int32_t multiple constant multiplies\00", align 1
@.str.160 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant multiply2\00", align 1
@.str.161 = private unnamed_addr constant [24 x i8] c"int32_t constant divide\00", align 1
@.str.162 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divides\00", align 1
@.str.163 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divide2\00", align 1
@.str.164 = private unnamed_addr constant [32 x i8] c"int32_t multiple constant mixed\00", align 1
@.str.165 = private unnamed_addr constant [21 x i8] c"int32_t constant and\00", align 1
@.str.166 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant and\00", align 1
@.str.167 = private unnamed_addr constant [20 x i8] c"int32_t constant or\00", align 1
@.str.168 = private unnamed_addr constant [29 x i8] c"int32_t multiple constant or\00", align 1
@.str.169 = private unnamed_addr constant [21 x i8] c"int32_t constant xor\00", align 1
@.str.170 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant xor\00", align 1
@.str.171 = private unnamed_addr constant [18 x i8] c"uint32_t constant\00", align 1
@.str.172 = private unnamed_addr constant [23 x i8] c"uint32_t add constants\00", align 1
@.str.173 = private unnamed_addr constant [28 x i8] c"uint32_t subtract constants\00", align 1
@.str.174 = private unnamed_addr constant [28 x i8] c"uint32_t multiply constants\00", align 1
@.str.175 = private unnamed_addr constant [26 x i8] c"uint32_t divide constants\00", align 1
@.str.176 = private unnamed_addr constant [23 x i8] c"uint32_t mod constants\00", align 1
@.str.177 = private unnamed_addr constant [25 x i8] c"uint32_t equal constants\00", align 1
@.str.178 = private unnamed_addr constant [28 x i8] c"uint32_t notequal constants\00", align 1
@.str.179 = private unnamed_addr constant [32 x i8] c"uint32_t greater than constants\00", align 1
@.str.180 = private unnamed_addr constant [29 x i8] c"uint32_t less than constants\00", align 1
@.str.181 = private unnamed_addr constant [38 x i8] c"uint32_t greater than equal constants\00", align 1
@.str.182 = private unnamed_addr constant [35 x i8] c"uint32_t less than equal constants\00", align 1
@.str.183 = private unnamed_addr constant [23 x i8] c"uint32_t and constants\00", align 1
@.str.184 = private unnamed_addr constant [22 x i8] c"uint32_t or constants\00", align 1
@.str.185 = private unnamed_addr constant [23 x i8] c"uint32_t xor constants\00", align 1
@.str.186 = private unnamed_addr constant [22 x i8] c"uint32_t constant add\00", align 1
@.str.187 = private unnamed_addr constant [32 x i8] c"uint32_t multiple constant adds\00", align 1
@.str.188 = private unnamed_addr constant [27 x i8] c"uint32_t constant subtract\00", align 1
@.str.189 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant subtracts\00", align 1
@.str.190 = private unnamed_addr constant [27 x i8] c"uint32_t constant multiply\00", align 1
@.str.191 = private unnamed_addr constant [38 x i8] c"uint32_t multiple constant multiplies\00", align 1
@.str.192 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant multiply2\00", align 1
@.str.193 = private unnamed_addr constant [25 x i8] c"uint32_t constant divide\00", align 1
@.str.194 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divides\00", align 1
@.str.195 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divide2\00", align 1
@.str.196 = private unnamed_addr constant [33 x i8] c"uint32_t multiple constant mixed\00", align 1
@.str.197 = private unnamed_addr constant [22 x i8] c"uint32_t constant and\00", align 1
@.str.198 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant and\00", align 1
@.str.199 = private unnamed_addr constant [21 x i8] c"uint32_t constant or\00", align 1
@.str.200 = private unnamed_addr constant [30 x i8] c"uint32_t multiple constant or\00", align 1
@.str.201 = private unnamed_addr constant [22 x i8] c"uint32_t constant xor\00", align 1
@.str.202 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant xor\00", align 1
@.str.203 = private unnamed_addr constant [17 x i8] c"int64_t constant\00", align 1
@.str.204 = private unnamed_addr constant [22 x i8] c"int64_t add constants\00", align 1
@.str.205 = private unnamed_addr constant [27 x i8] c"int64_t subtract constants\00", align 1
@.str.206 = private unnamed_addr constant [27 x i8] c"int64_t multiply constants\00", align 1
@.str.207 = private unnamed_addr constant [25 x i8] c"int64_t divide constants\00", align 1
@.str.208 = private unnamed_addr constant [22 x i8] c"int64_t mod constants\00", align 1
@.str.209 = private unnamed_addr constant [24 x i8] c"int64_t equal constants\00", align 1
@.str.210 = private unnamed_addr constant [27 x i8] c"int64_t notequal constants\00", align 1
@.str.211 = private unnamed_addr constant [31 x i8] c"int64_t greater than constants\00", align 1
@.str.212 = private unnamed_addr constant [28 x i8] c"int64_t less than constants\00", align 1
@.str.213 = private unnamed_addr constant [37 x i8] c"int64_t greater than equal constants\00", align 1
@.str.214 = private unnamed_addr constant [34 x i8] c"int64_t less than equal constants\00", align 1
@.str.215 = private unnamed_addr constant [22 x i8] c"int64_t and constants\00", align 1
@.str.216 = private unnamed_addr constant [21 x i8] c"int64_t or constants\00", align 1
@.str.217 = private unnamed_addr constant [22 x i8] c"int64_t xor constants\00", align 1
@.str.218 = private unnamed_addr constant [21 x i8] c"int64_t constant add\00", align 1
@.str.219 = private unnamed_addr constant [31 x i8] c"int64_t multiple constant adds\00", align 1
@.str.220 = private unnamed_addr constant [26 x i8] c"int64_t constant subtract\00", align 1
@.str.221 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant subtracts\00", align 1
@.str.222 = private unnamed_addr constant [26 x i8] c"int64_t constant multiply\00", align 1
@.str.223 = private unnamed_addr constant [37 x i8] c"int64_t multiple constant multiplies\00", align 1
@.str.224 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant multiply2\00", align 1
@.str.225 = private unnamed_addr constant [24 x i8] c"int64_t constant divide\00", align 1
@.str.226 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divides\00", align 1
@.str.227 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divide2\00", align 1
@.str.228 = private unnamed_addr constant [32 x i8] c"int64_t multiple constant mixed\00", align 1
@.str.229 = private unnamed_addr constant [21 x i8] c"int64_t constant and\00", align 1
@.str.230 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant and\00", align 1
@.str.231 = private unnamed_addr constant [20 x i8] c"int64_t constant or\00", align 1
@.str.232 = private unnamed_addr constant [29 x i8] c"int64_t multiple constant or\00", align 1
@.str.233 = private unnamed_addr constant [21 x i8] c"int64_t constant xor\00", align 1
@.str.234 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant xor\00", align 1
@.str.235 = private unnamed_addr constant [18 x i8] c"uint64_t constant\00", align 1
@.str.236 = private unnamed_addr constant [23 x i8] c"uint64_t add constants\00", align 1
@.str.237 = private unnamed_addr constant [28 x i8] c"uint64_t subtract constants\00", align 1
@.str.238 = private unnamed_addr constant [28 x i8] c"uint64_t multiply constants\00", align 1
@.str.239 = private unnamed_addr constant [26 x i8] c"uint64_t divide constants\00", align 1
@.str.240 = private unnamed_addr constant [23 x i8] c"uint64_t mod constants\00", align 1
@.str.241 = private unnamed_addr constant [25 x i8] c"uint64_t equal constants\00", align 1
@.str.242 = private unnamed_addr constant [28 x i8] c"uint64_t notequal constants\00", align 1
@.str.243 = private unnamed_addr constant [32 x i8] c"uint64_t greater than constants\00", align 1
@.str.244 = private unnamed_addr constant [29 x i8] c"uint64_t less than constants\00", align 1
@.str.245 = private unnamed_addr constant [38 x i8] c"uint64_t greater than equal constants\00", align 1
@.str.246 = private unnamed_addr constant [35 x i8] c"uint64_t less than equal constants\00", align 1
@.str.247 = private unnamed_addr constant [23 x i8] c"uint64_t and constants\00", align 1
@.str.248 = private unnamed_addr constant [22 x i8] c"uint64_t or constants\00", align 1
@.str.249 = private unnamed_addr constant [23 x i8] c"uint64_t xor constants\00", align 1
@.str.250 = private unnamed_addr constant [22 x i8] c"uint64_t constant add\00", align 1
@.str.251 = private unnamed_addr constant [32 x i8] c"uint64_t multiple constant adds\00", align 1
@.str.252 = private unnamed_addr constant [27 x i8] c"uint64_t constant subtract\00", align 1
@.str.253 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant subtracts\00", align 1
@.str.254 = private unnamed_addr constant [27 x i8] c"uint64_t constant multiply\00", align 1
@.str.255 = private unnamed_addr constant [38 x i8] c"uint64_t multiple constant multiplies\00", align 1
@.str.256 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant multiply2\00", align 1
@.str.257 = private unnamed_addr constant [25 x i8] c"uint64_t constant divide\00", align 1
@.str.258 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divides\00", align 1
@.str.259 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divide2\00", align 1
@.str.260 = private unnamed_addr constant [33 x i8] c"uint64_t multiple constant mixed\00", align 1
@.str.261 = private unnamed_addr constant [22 x i8] c"uint64_t constant and\00", align 1
@.str.262 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant and\00", align 1
@.str.263 = private unnamed_addr constant [21 x i8] c"uint64_t constant or\00", align 1
@.str.264 = private unnamed_addr constant [30 x i8] c"uint64_t multiple constant or\00", align 1
@.str.265 = private unnamed_addr constant [22 x i8] c"uint64_t constant xor\00", align 1
@.str.266 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant xor\00", align 1
@.str.267 = private unnamed_addr constant [15 x i8] c"float constant\00", align 1
@.str.268 = private unnamed_addr constant [20 x i8] c"float add constants\00", align 1
@.str.269 = private unnamed_addr constant [25 x i8] c"float subtract constants\00", align 1
@.str.270 = private unnamed_addr constant [25 x i8] c"float multiply constants\00", align 1
@.str.271 = private unnamed_addr constant [23 x i8] c"float divide constants\00", align 1
@.str.272 = private unnamed_addr constant [19 x i8] c"float constant add\00", align 1
@.str.273 = private unnamed_addr constant [29 x i8] c"float multiple constant adds\00", align 1
@.str.274 = private unnamed_addr constant [24 x i8] c"float constant subtract\00", align 1
@.str.275 = private unnamed_addr constant [34 x i8] c"float multiple constant subtracts\00", align 1
@.str.276 = private unnamed_addr constant [24 x i8] c"float constant multiply\00", align 1
@.str.277 = private unnamed_addr constant [35 x i8] c"float multiple constant multiplies\00", align 1
@.str.278 = private unnamed_addr constant [34 x i8] c"float multiple constant multiply2\00", align 1
@.str.279 = private unnamed_addr constant [22 x i8] c"float constant divide\00", align 1
@.str.280 = private unnamed_addr constant [32 x i8] c"float multiple constant divides\00", align 1
@.str.281 = private unnamed_addr constant [32 x i8] c"float multiple constant divide2\00", align 1
@.str.282 = private unnamed_addr constant [30 x i8] c"float multiple constant mixed\00", align 1
@.str.283 = private unnamed_addr constant [16 x i8] c"double constant\00", align 1
@.str.284 = private unnamed_addr constant [21 x i8] c"double add constants\00", align 1
@.str.285 = private unnamed_addr constant [26 x i8] c"double subtract constants\00", align 1
@.str.286 = private unnamed_addr constant [26 x i8] c"double multiply constants\00", align 1
@.str.287 = private unnamed_addr constant [24 x i8] c"double divide constants\00", align 1
@.str.288 = private unnamed_addr constant [20 x i8] c"double constant add\00", align 1
@.str.289 = private unnamed_addr constant [30 x i8] c"double multiple constant adds\00", align 1
@.str.290 = private unnamed_addr constant [25 x i8] c"double constant subtract\00", align 1
@.str.291 = private unnamed_addr constant [35 x i8] c"double multiple constant subtracts\00", align 1
@.str.292 = private unnamed_addr constant [25 x i8] c"double constant multiply\00", align 1
@.str.293 = private unnamed_addr constant [36 x i8] c"double multiple constant multiplies\00", align 1
@.str.294 = private unnamed_addr constant [35 x i8] c"double multiple constant multiply2\00", align 1
@.str.295 = private unnamed_addr constant [23 x i8] c"double constant divide\00", align 1
@.str.296 = private unnamed_addr constant [33 x i8] c"double multiple constant divides\00", align 1
@.str.297 = private unnamed_addr constant [33 x i8] c"double multiple constant divide2\00", align 1
@.str.298 = private unnamed_addr constant [31 x i8] c"double multiple constant mixed\00", align 1
@.str.299 = private unnamed_addr constant [16 x i8] c"test %i failed\0A\00", align 1
@llvm.global_ctors = appending global [0 x { i32, ptr, ptr }] zeroinitializer

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z13record_resultdPKc(double noundef %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @results, align 8, !tbaa !5
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %11

7:                                                ; preds = %2
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %23, label %11

11:                                               ; preds = %5, %7
  %12 = phi i32 [ %6, %5 ], [ %9, %7 ]
  %13 = add nsw i32 %12, 10
  store i32 %13, ptr @allocated_results, align 4, !tbaa !9
  %14 = sext i32 %13 to i64
  %15 = shl nsw i64 %14, 4
  %16 = tail call ptr @realloc(ptr noundef %3, i64 noundef %15) #14
  store ptr %16, ptr @results, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %11
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %23

20:                                               ; preds = %11
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

23:                                               ; preds = %18, %7
  %24 = phi i32 [ %19, %18 ], [ %8, %7 ]
  %25 = phi ptr [ %16, %18 ], [ %3, %7 ]
  %26 = sext i32 %24 to i64
  %27 = getelementptr inbounds %struct.one_result, ptr %25, i64 %26
  store double %0, ptr %27, align 8, !tbaa !11
  %28 = getelementptr inbounds %struct.one_result, ptr %25, i64 %26, i32 1
  store ptr %1, ptr %28, align 8, !tbaa !14
  %29 = add nsw i32 %24, 1
  store i32 %29, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z9summarizePKciiii(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) local_unnamed_addr #4 {
  %6 = sitofp i32 %1 to double
  %7 = sitofp i32 %2 to double
  %8 = fmul double %6, %7
  %9 = fdiv double %8, 1.000000e+06
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %25

12:                                               ; preds = %5
  %13 = load ptr, ptr @results, align 8, !tbaa !5
  %14 = zext i32 %10 to i64
  br label %15

15:                                               ; preds = %12, %15
  %16 = phi i64 [ 0, %12 ], [ %23, %15 ]
  %17 = phi i32 [ 12, %12 ], [ %22, %15 ]
  %18 = getelementptr inbounds %struct.one_result, ptr %13, i64 %16, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !14
  %20 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %19) #16
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.smax.i32(i32 %17, i32 %21)
  %23 = add nuw nsw i64 %16, 1
  %24 = icmp eq i64 %23, %14
  br i1 %24, label %25, label %15, !llvm.loop !15

25:                                               ; preds = %15, %5
  %26 = phi i32 [ 12, %5 ], [ %22, %15 ]
  %27 = add nsw i32 %26, -12
  %28 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %27, ptr noundef nonnull @.str.2)
  %29 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef %26, ptr noundef nonnull @.str.2)
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %41, label %97

32:                                               ; preds = %41
  %33 = icmp sgt i32 %57, 0
  br i1 %33, label %34, label %97

34:                                               ; preds = %32
  %35 = load ptr, ptr @results, align 8, !tbaa !5
  %36 = zext i32 %57 to i64
  %37 = and i64 %36, 3
  %38 = icmp ult i32 %57, 4
  br i1 %38, label %82, label %39

39:                                               ; preds = %34
  %40 = and i64 %36, 4294967292
  br label %60

41:                                               ; preds = %25, %41
  %42 = phi i64 [ %56, %41 ], [ 0, %25 ]
  %43 = load ptr, ptr @results, align 8, !tbaa !5
  %44 = getelementptr inbounds %struct.one_result, ptr %43, i64 %42
  %45 = getelementptr inbounds %struct.one_result, ptr %43, i64 %42, i32 1
  %46 = load ptr, ptr %45, align 8, !tbaa !14
  %47 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %46) #16
  %48 = trunc i64 %47 to i32
  %49 = sub i32 %26, %48
  %50 = load double, ptr %44, align 8, !tbaa !11
  %51 = fdiv double %9, %50
  %52 = load double, ptr %43, align 8, !tbaa !11
  %53 = fdiv double %50, %52
  %54 = trunc i64 %42 to i32
  %55 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4, i32 noundef %54, i32 noundef %49, ptr noundef nonnull @.str.5, ptr noundef %46, double noundef %50, double noundef %51, double noundef %53)
  %56 = add nuw nsw i64 %42, 1
  %57 = load i32, ptr @current_test, align 4, !tbaa !9
  %58 = sext i32 %57 to i64
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %41, label %32, !llvm.loop !17

60:                                               ; preds = %60, %39
  %61 = phi i64 [ 0, %39 ], [ %79, %60 ]
  %62 = phi double [ 0.000000e+00, %39 ], [ %78, %60 ]
  %63 = phi i64 [ 0, %39 ], [ %80, %60 ]
  %64 = getelementptr inbounds %struct.one_result, ptr %35, i64 %61
  %65 = load double, ptr %64, align 8, !tbaa !11
  %66 = fadd double %62, %65
  %67 = or i64 %61, 1
  %68 = getelementptr inbounds %struct.one_result, ptr %35, i64 %67
  %69 = load double, ptr %68, align 8, !tbaa !11
  %70 = fadd double %66, %69
  %71 = or i64 %61, 2
  %72 = getelementptr inbounds %struct.one_result, ptr %35, i64 %71
  %73 = load double, ptr %72, align 8, !tbaa !11
  %74 = fadd double %70, %73
  %75 = or i64 %61, 3
  %76 = getelementptr inbounds %struct.one_result, ptr %35, i64 %75
  %77 = load double, ptr %76, align 8, !tbaa !11
  %78 = fadd double %74, %77
  %79 = add nuw nsw i64 %61, 4
  %80 = add i64 %63, 4
  %81 = icmp eq i64 %80, %40
  br i1 %81, label %82, label %60, !llvm.loop !18

82:                                               ; preds = %60, %34
  %83 = phi double [ undef, %34 ], [ %78, %60 ]
  %84 = phi i64 [ 0, %34 ], [ %79, %60 ]
  %85 = phi double [ 0.000000e+00, %34 ], [ %78, %60 ]
  %86 = icmp eq i64 %37, 0
  br i1 %86, label %97, label %87

87:                                               ; preds = %82, %87
  %88 = phi i64 [ %94, %87 ], [ %84, %82 ]
  %89 = phi double [ %93, %87 ], [ %85, %82 ]
  %90 = phi i64 [ %95, %87 ], [ 0, %82 ]
  %91 = getelementptr inbounds %struct.one_result, ptr %35, i64 %88
  %92 = load double, ptr %91, align 8, !tbaa !11
  %93 = fadd double %89, %92
  %94 = add nuw nsw i64 %88, 1
  %95 = add i64 %90, 1
  %96 = icmp eq i64 %95, %37
  br i1 %96, label %97, label %87, !llvm.loop !19

97:                                               ; preds = %82, %87, %25, %32
  %98 = phi double [ 0.000000e+00, %32 ], [ 0.000000e+00, %25 ], [ %83, %82 ], [ %93, %87 ]
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6, ptr noundef %0, double noundef %98)
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  %101 = icmp sgt i32 %100, 1
  %102 = icmp ne i32 %4, 0
  %103 = and i1 %102, %101
  br i1 %103, label %104, label %124

104:                                              ; preds = %97, %104
  %105 = phi i64 [ %114, %104 ], [ 1, %97 ]
  %106 = phi double [ %113, %104 ], [ 0.000000e+00, %97 ]
  %107 = load ptr, ptr @results, align 8, !tbaa !5
  %108 = getelementptr inbounds %struct.one_result, ptr %107, i64 %105
  %109 = load double, ptr %108, align 8, !tbaa !11
  %110 = load double, ptr %107, align 8, !tbaa !11
  %111 = fdiv double %109, %110
  %112 = tail call double @log(double noundef %111) #17
  %113 = fadd double %106, %112
  %114 = add nuw nsw i64 %105, 1
  %115 = load i32, ptr @current_test, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = icmp slt i64 %114, %116
  br i1 %117, label %104, label %118, !llvm.loop !21

118:                                              ; preds = %104
  %119 = add nsw i32 %115, -1
  %120 = sitofp i32 %119 to double
  %121 = fdiv double %113, %120
  %122 = tail call double @exp(double noundef %121) #17
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, ptr noundef %0, double noundef %122)
  br label %124

124:                                              ; preds = %118, %97
  store i32 0, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @log(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @exp(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z17summarize_simplefP8_IO_FILEPKc(ptr nocapture noundef %0, ptr noundef %1) local_unnamed_addr #4 {
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %2
  %6 = load ptr, ptr @results, align 8, !tbaa !5
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %5, %8
  %9 = phi i64 [ 0, %5 ], [ %16, %8 ]
  %10 = phi i32 [ 12, %5 ], [ %15, %8 ]
  %11 = getelementptr inbounds %struct.one_result, ptr %6, i64 %9, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %12) #16
  %14 = trunc i64 %13 to i32
  %15 = tail call i32 @llvm.smax.i32(i32 %10, i32 %14)
  %16 = add nuw nsw i64 %9, 1
  %17 = icmp eq i64 %16, %7
  br i1 %17, label %18, label %8, !llvm.loop !22

18:                                               ; preds = %8, %2
  %19 = phi i32 [ 12, %2 ], [ %15, %8 ]
  %20 = add nsw i32 %19, -12
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.8, i32 noundef %20, ptr noundef nonnull @.str.2)
  %22 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.9, i32 noundef %19, ptr noundef nonnull @.str.2)
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %34, label %87

25:                                               ; preds = %34
  %26 = icmp sgt i32 %47, 0
  br i1 %26, label %27, label %87

27:                                               ; preds = %25
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %29 = zext i32 %47 to i64
  %30 = and i64 %29, 3
  %31 = icmp ult i32 %47, 4
  br i1 %31, label %72, label %32

32:                                               ; preds = %27
  %33 = and i64 %29, 4294967292
  br label %50

34:                                               ; preds = %18, %34
  %35 = phi i64 [ %46, %34 ], [ 0, %18 ]
  %36 = load ptr, ptr @results, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.one_result, ptr %36, i64 %35
  %38 = getelementptr inbounds %struct.one_result, ptr %36, i64 %35, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %39) #16
  %41 = trunc i64 %40 to i32
  %42 = sub i32 %19, %41
  %43 = load double, ptr %37, align 8, !tbaa !11
  %44 = trunc i64 %35 to i32
  %45 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.10, i32 noundef %44, i32 noundef %42, ptr noundef nonnull @.str.5, ptr noundef %39, double noundef %43)
  %46 = add nuw nsw i64 %35, 1
  %47 = load i32, ptr @current_test, align 4, !tbaa !9
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %46, %48
  br i1 %49, label %34, label %25, !llvm.loop !23

50:                                               ; preds = %50, %32
  %51 = phi i64 [ 0, %32 ], [ %69, %50 ]
  %52 = phi double [ 0.000000e+00, %32 ], [ %68, %50 ]
  %53 = phi i64 [ 0, %32 ], [ %70, %50 ]
  %54 = getelementptr inbounds %struct.one_result, ptr %28, i64 %51
  %55 = load double, ptr %54, align 8, !tbaa !11
  %56 = fadd double %52, %55
  %57 = or i64 %51, 1
  %58 = getelementptr inbounds %struct.one_result, ptr %28, i64 %57
  %59 = load double, ptr %58, align 8, !tbaa !11
  %60 = fadd double %56, %59
  %61 = or i64 %51, 2
  %62 = getelementptr inbounds %struct.one_result, ptr %28, i64 %61
  %63 = load double, ptr %62, align 8, !tbaa !11
  %64 = fadd double %60, %63
  %65 = or i64 %51, 3
  %66 = getelementptr inbounds %struct.one_result, ptr %28, i64 %65
  %67 = load double, ptr %66, align 8, !tbaa !11
  %68 = fadd double %64, %67
  %69 = add nuw nsw i64 %51, 4
  %70 = add i64 %53, 4
  %71 = icmp eq i64 %70, %33
  br i1 %71, label %72, label %50, !llvm.loop !24

72:                                               ; preds = %50, %27
  %73 = phi double [ undef, %27 ], [ %68, %50 ]
  %74 = phi i64 [ 0, %27 ], [ %69, %50 ]
  %75 = phi double [ 0.000000e+00, %27 ], [ %68, %50 ]
  %76 = icmp eq i64 %30, 0
  br i1 %76, label %87, label %77

77:                                               ; preds = %72, %77
  %78 = phi i64 [ %84, %77 ], [ %74, %72 ]
  %79 = phi double [ %83, %77 ], [ %75, %72 ]
  %80 = phi i64 [ %85, %77 ], [ 0, %72 ]
  %81 = getelementptr inbounds %struct.one_result, ptr %28, i64 %78
  %82 = load double, ptr %81, align 8, !tbaa !11
  %83 = fadd double %79, %82
  %84 = add nuw nsw i64 %78, 1
  %85 = add i64 %80, 1
  %86 = icmp eq i64 %85, %30
  br i1 %86, label %87, label %77, !llvm.loop !25

87:                                               ; preds = %72, %77, %18, %25
  %88 = phi double [ 0.000000e+00, %25 ], [ 0.000000e+00, %18 ], [ %73, %72 ], [ %83, %77 ]
  %89 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.6, ptr noundef %1, double noundef %88)
  store i32 0, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z11start_timerv() local_unnamed_addr #0 {
  %1 = tail call i64 @clock() #17
  store i64 %1, ptr @start_time, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind
declare i64 @clock() local_unnamed_addr #7

; Function Attrs: mustprogress nounwind uwtable
define dso_local noundef double @_Z5timerv() local_unnamed_addr #0 {
  %1 = tail call i64 @clock() #17
  store i64 %1, ptr @end_time, align 8, !tbaa !26
  %2 = load i64, ptr @start_time, align 8, !tbaa !26
  %3 = sub nsw i64 %1, %2
  %4 = sitofp i64 %3 to double
  %5 = fdiv double %4, 1.000000e+06
  ret double %5
}

; Function Attrs: mustprogress norecurse uwtable
define dso_local noundef i32 @main(i32 noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #8 {
  %3 = icmp sgt i32 %0, 1
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds ptr, ptr %1, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = tail call i64 @strtol(ptr nocapture noundef nonnull %6, ptr noundef null, i32 noundef 10) #17
  %8 = trunc i64 %7 to i32
  store i32 %8, ptr @base_iterations, align 4, !tbaa !9
  %9 = icmp eq i32 %0, 2
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds ptr, ptr %1, i64 2
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = tail call double @strtod(ptr nocapture noundef nonnull %12, ptr noundef null) #17
  store double %13, ptr @init_value, align 8, !tbaa !28
  br label %14

14:                                               ; preds = %2, %10, %4
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %16 = fptosi double %15 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(8000) @data8, i8 %16, i64 8000, i1 false), !tbaa !29
  %17 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %17, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.11)
  tail call void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.12)
  tail call void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.13)
  tail call void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.14)
  tail call void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.15)
  tail call void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.16)
  tail call void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.17)
  tail call void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.18)
  tail call void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.19)
  tail call void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.20)
  tail call void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.21)
  tail call void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.22)
  tail call void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.23)
  tail call void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.24)
  tail call void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.25)
  %18 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %19 = sdiv i32 %18, 10
  store i32 %19, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.26)
  tail call void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.27)
  tail call void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.28)
  tail call void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.29)
  tail call void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.30)
  tail call void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.31)
  tail call void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.32)
  tail call void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.33)
  tail call void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.34)
  tail call void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.35)
  tail call void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.36)
  tail call void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.37)
  tail call void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.38)
  tail call void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.39)
  tail call void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.40)
  tail call void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.41)
  tail call void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.42)
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %21 = fptoui double %20 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(8000) @data8unsigned, i8 %21, i64 8000, i1 false), !tbaa !29
  %22 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %22, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.43)
  tail call void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.44)
  tail call void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.45)
  tail call void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.46)
  tail call void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.47)
  tail call void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.48)
  tail call void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.49)
  tail call void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.50)
  tail call void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.51)
  tail call void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.52)
  tail call void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.53)
  tail call void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.54)
  tail call void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.55)
  tail call void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.56)
  tail call void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.57)
  %23 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %24 = sdiv i32 %23, 10
  store i32 %24, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.58)
  tail call void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.59)
  tail call void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.60)
  tail call void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.61)
  tail call void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.62)
  tail call void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.63)
  tail call void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.64)
  tail call void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.65)
  tail call void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.66)
  tail call void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.67)
  tail call void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.68)
  tail call void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.69)
  tail call void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.70)
  tail call void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.71)
  tail call void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.72)
  tail call void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.73)
  tail call void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.74)
  %25 = load double, ptr @init_value, align 8, !tbaa !28
  %26 = fptosi double %25 to i16
  %27 = insertelement <8 x i16> poison, i16 %26, i64 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> poison, <8 x i32> zeroinitializer
  %29 = insertelement <8 x i16> poison, i16 %26, i64 0
  %30 = shufflevector <8 x i16> %29, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %31

31:                                               ; preds = %31, %14
  %32 = phi i64 [ 0, %14 ], [ %52, %31 ]
  %33 = shl nuw i64 %32, 1
  %34 = getelementptr i8, ptr @data16, i64 %33
  store <8 x i16> %28, ptr %34, align 16, !tbaa !30
  %35 = getelementptr i16, ptr %34, i64 8
  store <8 x i16> %30, ptr %35, align 16, !tbaa !30
  %36 = shl nuw i64 %32, 1
  %37 = add i64 %36, 32
  %38 = getelementptr i8, ptr @data16, i64 %37
  store <8 x i16> %28, ptr %38, align 16, !tbaa !30
  %39 = getelementptr i16, ptr %38, i64 8
  store <8 x i16> %30, ptr %39, align 16, !tbaa !30
  %40 = shl nuw i64 %32, 1
  %41 = add i64 %40, 64
  %42 = getelementptr i8, ptr @data16, i64 %41
  store <8 x i16> %28, ptr %42, align 16, !tbaa !30
  %43 = getelementptr i16, ptr %42, i64 8
  store <8 x i16> %30, ptr %43, align 16, !tbaa !30
  %44 = shl nuw i64 %32, 1
  %45 = add i64 %44, 96
  %46 = getelementptr i8, ptr @data16, i64 %45
  store <8 x i16> %28, ptr %46, align 16, !tbaa !30
  %47 = getelementptr i16, ptr %46, i64 8
  store <8 x i16> %30, ptr %47, align 16, !tbaa !30
  %48 = shl nuw i64 %32, 1
  %49 = add i64 %48, 128
  %50 = getelementptr i8, ptr @data16, i64 %49
  store <8 x i16> %28, ptr %50, align 16, !tbaa !30
  %51 = getelementptr i16, ptr %50, i64 8
  store <8 x i16> %30, ptr %51, align 16, !tbaa !30
  %52 = add nuw nsw i64 %32, 80
  %53 = icmp eq i64 %52, 8000
  br i1 %53, label %54, label %31, !llvm.loop !32

54:                                               ; preds = %31
  %55 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %55, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.75)
  tail call void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.76)
  tail call void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.77)
  tail call void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.78)
  tail call void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.79)
  tail call void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.80)
  tail call void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.81)
  tail call void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.82)
  tail call void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.83)
  tail call void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.84)
  tail call void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.85)
  tail call void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.86)
  tail call void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.87)
  tail call void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.88)
  tail call void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.89)
  %56 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %57 = sdiv i32 %56, 10
  store i32 %57, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.90)
  tail call void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.91)
  tail call void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.92)
  tail call void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.93)
  tail call void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.94)
  tail call void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.95)
  tail call void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.96)
  tail call void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.97)
  tail call void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.98)
  tail call void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.99)
  tail call void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.100)
  tail call void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.101)
  tail call void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.102)
  tail call void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.103)
  tail call void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.104)
  tail call void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.105)
  tail call void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.106)
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = insertelement <8 x i16> poison, i16 %59, i64 0
  %61 = shufflevector <8 x i16> %60, <8 x i16> poison, <8 x i32> zeroinitializer
  %62 = insertelement <8 x i16> poison, i16 %59, i64 0
  %63 = shufflevector <8 x i16> %62, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %85, %64 ]
  %66 = shl nuw i64 %65, 1
  %67 = getelementptr i8, ptr @data16unsigned, i64 %66
  store <8 x i16> %61, ptr %67, align 16, !tbaa !30
  %68 = getelementptr i16, ptr %67, i64 8
  store <8 x i16> %63, ptr %68, align 16, !tbaa !30
  %69 = shl nuw i64 %65, 1
  %70 = add i64 %69, 32
  %71 = getelementptr i8, ptr @data16unsigned, i64 %70
  store <8 x i16> %61, ptr %71, align 16, !tbaa !30
  %72 = getelementptr i16, ptr %71, i64 8
  store <8 x i16> %63, ptr %72, align 16, !tbaa !30
  %73 = shl nuw i64 %65, 1
  %74 = add i64 %73, 64
  %75 = getelementptr i8, ptr @data16unsigned, i64 %74
  store <8 x i16> %61, ptr %75, align 16, !tbaa !30
  %76 = getelementptr i16, ptr %75, i64 8
  store <8 x i16> %63, ptr %76, align 16, !tbaa !30
  %77 = shl nuw i64 %65, 1
  %78 = add i64 %77, 96
  %79 = getelementptr i8, ptr @data16unsigned, i64 %78
  store <8 x i16> %61, ptr %79, align 16, !tbaa !30
  %80 = getelementptr i16, ptr %79, i64 8
  store <8 x i16> %63, ptr %80, align 16, !tbaa !30
  %81 = shl nuw i64 %65, 1
  %82 = add i64 %81, 128
  %83 = getelementptr i8, ptr @data16unsigned, i64 %82
  store <8 x i16> %61, ptr %83, align 16, !tbaa !30
  %84 = getelementptr i16, ptr %83, i64 8
  store <8 x i16> %63, ptr %84, align 16, !tbaa !30
  %85 = add nuw nsw i64 %65, 80
  %86 = icmp eq i64 %85, 8000
  br i1 %86, label %87, label %64, !llvm.loop !35

87:                                               ; preds = %64
  %88 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %88, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.107)
  tail call void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.108)
  tail call void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.109)
  tail call void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.110)
  tail call void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.111)
  tail call void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.112)
  tail call void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.113)
  tail call void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.114)
  tail call void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.115)
  tail call void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.116)
  tail call void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.117)
  tail call void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.118)
  tail call void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.119)
  tail call void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.120)
  tail call void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.121)
  %89 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %90 = sdiv i32 %89, 10
  store i32 %90, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.122)
  tail call void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.123)
  tail call void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.124)
  tail call void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.125)
  tail call void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.126)
  tail call void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.127)
  tail call void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.128)
  tail call void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.129)
  tail call void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.130)
  tail call void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.131)
  tail call void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.132)
  tail call void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.133)
  tail call void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.134)
  tail call void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.135)
  tail call void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.136)
  tail call void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.137)
  tail call void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.138)
  %91 = load double, ptr @init_value, align 8, !tbaa !28
  %92 = fptosi double %91 to i32
  %93 = insertelement <4 x i32> poison, i32 %92, i64 0
  %94 = shufflevector <4 x i32> %93, <4 x i32> poison, <4 x i32> zeroinitializer
  %95 = insertelement <4 x i32> poison, i32 %92, i64 0
  %96 = shufflevector <4 x i32> %95, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %97

97:                                               ; preds = %97, %87
  %98 = phi i64 [ 0, %87 ], [ %118, %97 ]
  %99 = shl i64 %98, 2
  %100 = getelementptr i8, ptr @data32, i64 %99
  store <4 x i32> %94, ptr %100, align 16, !tbaa !9
  %101 = getelementptr i32, ptr %100, i64 4
  store <4 x i32> %96, ptr %101, align 16, !tbaa !9
  %102 = shl i64 %98, 2
  %103 = add i64 %102, 32
  %104 = getelementptr i8, ptr @data32, i64 %103
  store <4 x i32> %94, ptr %104, align 16, !tbaa !9
  %105 = getelementptr i32, ptr %104, i64 4
  store <4 x i32> %96, ptr %105, align 16, !tbaa !9
  %106 = shl i64 %98, 2
  %107 = add i64 %106, 64
  %108 = getelementptr i8, ptr @data32, i64 %107
  store <4 x i32> %94, ptr %108, align 16, !tbaa !9
  %109 = getelementptr i32, ptr %108, i64 4
  store <4 x i32> %96, ptr %109, align 16, !tbaa !9
  %110 = shl i64 %98, 2
  %111 = add i64 %110, 96
  %112 = getelementptr i8, ptr @data32, i64 %111
  store <4 x i32> %94, ptr %112, align 16, !tbaa !9
  %113 = getelementptr i32, ptr %112, i64 4
  store <4 x i32> %96, ptr %113, align 16, !tbaa !9
  %114 = shl i64 %98, 2
  %115 = add i64 %114, 128
  %116 = getelementptr i8, ptr @data32, i64 %115
  store <4 x i32> %94, ptr %116, align 16, !tbaa !9
  %117 = getelementptr i32, ptr %116, i64 4
  store <4 x i32> %96, ptr %117, align 16, !tbaa !9
  %118 = add nuw nsw i64 %98, 40
  %119 = icmp eq i64 %118, 8000
  br i1 %119, label %120, label %97, !llvm.loop !36

120:                                              ; preds = %97
  %121 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %121, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.139)
  tail call void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.140)
  tail call void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.141)
  tail call void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.142)
  tail call void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.143)
  tail call void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.144)
  tail call void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.145)
  tail call void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.146)
  tail call void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.147)
  tail call void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.148)
  tail call void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.149)
  tail call void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.150)
  tail call void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.151)
  tail call void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.152)
  tail call void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.153)
  %122 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %123 = sdiv i32 %122, 10
  store i32 %123, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.154)
  tail call void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.155)
  tail call void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.156)
  tail call void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.157)
  tail call void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.158)
  tail call void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.159)
  tail call void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.160)
  tail call void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.161)
  tail call void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.162)
  tail call void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.163)
  tail call void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.164)
  tail call void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.165)
  tail call void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.166)
  tail call void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.167)
  tail call void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.168)
  tail call void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.169)
  tail call void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.170)
  %124 = load double, ptr @init_value, align 8, !tbaa !28
  %125 = fptoui double %124 to i32
  %126 = insertelement <4 x i32> poison, i32 %125, i64 0
  %127 = shufflevector <4 x i32> %126, <4 x i32> poison, <4 x i32> zeroinitializer
  %128 = insertelement <4 x i32> poison, i32 %125, i64 0
  %129 = shufflevector <4 x i32> %128, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %130

130:                                              ; preds = %130, %120
  %131 = phi i64 [ 0, %120 ], [ %151, %130 ]
  %132 = shl i64 %131, 2
  %133 = getelementptr i8, ptr @data32unsigned, i64 %132
  store <4 x i32> %127, ptr %133, align 16, !tbaa !9
  %134 = getelementptr i32, ptr %133, i64 4
  store <4 x i32> %129, ptr %134, align 16, !tbaa !9
  %135 = shl i64 %131, 2
  %136 = add i64 %135, 32
  %137 = getelementptr i8, ptr @data32unsigned, i64 %136
  store <4 x i32> %127, ptr %137, align 16, !tbaa !9
  %138 = getelementptr i32, ptr %137, i64 4
  store <4 x i32> %129, ptr %138, align 16, !tbaa !9
  %139 = shl i64 %131, 2
  %140 = add i64 %139, 64
  %141 = getelementptr i8, ptr @data32unsigned, i64 %140
  store <4 x i32> %127, ptr %141, align 16, !tbaa !9
  %142 = getelementptr i32, ptr %141, i64 4
  store <4 x i32> %129, ptr %142, align 16, !tbaa !9
  %143 = shl i64 %131, 2
  %144 = add i64 %143, 96
  %145 = getelementptr i8, ptr @data32unsigned, i64 %144
  store <4 x i32> %127, ptr %145, align 16, !tbaa !9
  %146 = getelementptr i32, ptr %145, i64 4
  store <4 x i32> %129, ptr %146, align 16, !tbaa !9
  %147 = shl i64 %131, 2
  %148 = add i64 %147, 128
  %149 = getelementptr i8, ptr @data32unsigned, i64 %148
  store <4 x i32> %127, ptr %149, align 16, !tbaa !9
  %150 = getelementptr i32, ptr %149, i64 4
  store <4 x i32> %129, ptr %150, align 16, !tbaa !9
  %151 = add nuw nsw i64 %131, 40
  %152 = icmp eq i64 %151, 8000
  br i1 %152, label %153, label %130, !llvm.loop !37

153:                                              ; preds = %130
  %154 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %154, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.171)
  tail call void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.172)
  tail call void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.173)
  tail call void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.174)
  tail call void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.175)
  tail call void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.176)
  tail call void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.177)
  tail call void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.178)
  tail call void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.179)
  tail call void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.180)
  tail call void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.181)
  tail call void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.182)
  tail call void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.183)
  tail call void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.184)
  tail call void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.185)
  %155 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %156 = sdiv i32 %155, 10
  store i32 %156, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.186)
  tail call void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.187)
  tail call void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.188)
  tail call void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.189)
  tail call void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.190)
  tail call void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.191)
  tail call void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.192)
  tail call void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.193)
  tail call void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.194)
  tail call void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.195)
  tail call void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.196)
  tail call void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.197)
  tail call void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.198)
  tail call void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.199)
  tail call void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.200)
  tail call void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.201)
  tail call void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.202)
  %157 = load double, ptr @init_value, align 8, !tbaa !28
  %158 = fptosi double %157 to i64
  %159 = insertelement <2 x i64> poison, i64 %158, i64 0
  %160 = shufflevector <2 x i64> %159, <2 x i64> poison, <2 x i32> zeroinitializer
  %161 = insertelement <2 x i64> poison, i64 %158, i64 0
  %162 = shufflevector <2 x i64> %161, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %163

163:                                              ; preds = %163, %153
  %164 = phi i64 [ 0, %153 ], [ %184, %163 ]
  %165 = shl i64 %164, 3
  %166 = getelementptr i8, ptr @data64, i64 %165
  store <2 x i64> %160, ptr %166, align 16, !tbaa !26
  %167 = getelementptr i64, ptr %166, i64 2
  store <2 x i64> %162, ptr %167, align 16, !tbaa !26
  %168 = shl i64 %164, 3
  %169 = add i64 %168, 32
  %170 = getelementptr i8, ptr @data64, i64 %169
  store <2 x i64> %160, ptr %170, align 16, !tbaa !26
  %171 = getelementptr i64, ptr %170, i64 2
  store <2 x i64> %162, ptr %171, align 16, !tbaa !26
  %172 = shl i64 %164, 3
  %173 = add i64 %172, 64
  %174 = getelementptr i8, ptr @data64, i64 %173
  store <2 x i64> %160, ptr %174, align 16, !tbaa !26
  %175 = getelementptr i64, ptr %174, i64 2
  store <2 x i64> %162, ptr %175, align 16, !tbaa !26
  %176 = shl i64 %164, 3
  %177 = add i64 %176, 96
  %178 = getelementptr i8, ptr @data64, i64 %177
  store <2 x i64> %160, ptr %178, align 16, !tbaa !26
  %179 = getelementptr i64, ptr %178, i64 2
  store <2 x i64> %162, ptr %179, align 16, !tbaa !26
  %180 = shl i64 %164, 3
  %181 = add i64 %180, 128
  %182 = getelementptr i8, ptr @data64, i64 %181
  store <2 x i64> %160, ptr %182, align 16, !tbaa !26
  %183 = getelementptr i64, ptr %182, i64 2
  store <2 x i64> %162, ptr %183, align 16, !tbaa !26
  %184 = add nuw nsw i64 %164, 20
  %185 = icmp eq i64 %184, 8000
  br i1 %185, label %186, label %163, !llvm.loop !38

186:                                              ; preds = %163
  %187 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %187, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.203)
  tail call void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.204)
  tail call void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.205)
  tail call void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.206)
  tail call void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.207)
  tail call void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.208)
  tail call void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.209)
  tail call void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.210)
  tail call void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.211)
  tail call void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.212)
  tail call void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.213)
  tail call void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.214)
  tail call void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.215)
  tail call void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.216)
  tail call void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.217)
  %188 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %189 = sdiv i32 %188, 10
  store i32 %189, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.218)
  tail call void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.219)
  tail call void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.220)
  tail call void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.221)
  tail call void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.222)
  tail call void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.223)
  tail call void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.224)
  tail call void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.225)
  tail call void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.226)
  tail call void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.227)
  tail call void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.228)
  tail call void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.229)
  tail call void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.230)
  tail call void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.231)
  tail call void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.232)
  tail call void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.233)
  tail call void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.234)
  %190 = load double, ptr @init_value, align 8, !tbaa !28
  %191 = fptoui double %190 to i64
  %192 = insertelement <2 x i64> poison, i64 %191, i64 0
  %193 = shufflevector <2 x i64> %192, <2 x i64> poison, <2 x i32> zeroinitializer
  %194 = insertelement <2 x i64> poison, i64 %191, i64 0
  %195 = shufflevector <2 x i64> %194, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %196

196:                                              ; preds = %196, %186
  %197 = phi i64 [ 0, %186 ], [ %217, %196 ]
  %198 = shl i64 %197, 3
  %199 = getelementptr i8, ptr @data64unsigned, i64 %198
  store <2 x i64> %193, ptr %199, align 16, !tbaa !26
  %200 = getelementptr i64, ptr %199, i64 2
  store <2 x i64> %195, ptr %200, align 16, !tbaa !26
  %201 = shl i64 %197, 3
  %202 = add i64 %201, 32
  %203 = getelementptr i8, ptr @data64unsigned, i64 %202
  store <2 x i64> %193, ptr %203, align 16, !tbaa !26
  %204 = getelementptr i64, ptr %203, i64 2
  store <2 x i64> %195, ptr %204, align 16, !tbaa !26
  %205 = shl i64 %197, 3
  %206 = add i64 %205, 64
  %207 = getelementptr i8, ptr @data64unsigned, i64 %206
  store <2 x i64> %193, ptr %207, align 16, !tbaa !26
  %208 = getelementptr i64, ptr %207, i64 2
  store <2 x i64> %195, ptr %208, align 16, !tbaa !26
  %209 = shl i64 %197, 3
  %210 = add i64 %209, 96
  %211 = getelementptr i8, ptr @data64unsigned, i64 %210
  store <2 x i64> %193, ptr %211, align 16, !tbaa !26
  %212 = getelementptr i64, ptr %211, i64 2
  store <2 x i64> %195, ptr %212, align 16, !tbaa !26
  %213 = shl i64 %197, 3
  %214 = add i64 %213, 128
  %215 = getelementptr i8, ptr @data64unsigned, i64 %214
  store <2 x i64> %193, ptr %215, align 16, !tbaa !26
  %216 = getelementptr i64, ptr %215, i64 2
  store <2 x i64> %195, ptr %216, align 16, !tbaa !26
  %217 = add nuw nsw i64 %197, 20
  %218 = icmp eq i64 %217, 8000
  br i1 %218, label %219, label %196, !llvm.loop !39

219:                                              ; preds = %196
  %220 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %220, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.235)
  tail call void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.236)
  tail call void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.237)
  tail call void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.238)
  tail call void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.239)
  tail call void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.240)
  tail call void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.241)
  tail call void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.242)
  tail call void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.243)
  tail call void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.244)
  tail call void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.245)
  tail call void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.246)
  tail call void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.247)
  tail call void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.248)
  tail call void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.249)
  %221 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %222 = sdiv i32 %221, 10
  store i32 %222, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.250)
  tail call void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.251)
  tail call void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.252)
  tail call void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.253)
  tail call void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.254)
  tail call void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.255)
  tail call void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.256)
  tail call void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.257)
  tail call void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.258)
  tail call void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.259)
  tail call void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.260)
  tail call void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.261)
  tail call void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.262)
  tail call void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.263)
  tail call void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.264)
  tail call void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.265)
  tail call void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.266)
  %223 = load double, ptr @init_value, align 8, !tbaa !28
  %224 = fptrunc double %223 to float
  %225 = insertelement <4 x float> poison, float %224, i64 0
  %226 = shufflevector <4 x float> %225, <4 x float> poison, <4 x i32> zeroinitializer
  %227 = insertelement <4 x float> poison, float %224, i64 0
  %228 = shufflevector <4 x float> %227, <4 x float> poison, <4 x i32> zeroinitializer
  br label %229

229:                                              ; preds = %229, %219
  %230 = phi i64 [ 0, %219 ], [ %250, %229 ]
  %231 = shl i64 %230, 2
  %232 = getelementptr i8, ptr @dataFloat, i64 %231
  store <4 x float> %226, ptr %232, align 16, !tbaa !40
  %233 = getelementptr float, ptr %232, i64 4
  store <4 x float> %228, ptr %233, align 16, !tbaa !40
  %234 = shl i64 %230, 2
  %235 = add i64 %234, 32
  %236 = getelementptr i8, ptr @dataFloat, i64 %235
  store <4 x float> %226, ptr %236, align 16, !tbaa !40
  %237 = getelementptr float, ptr %236, i64 4
  store <4 x float> %228, ptr %237, align 16, !tbaa !40
  %238 = shl i64 %230, 2
  %239 = add i64 %238, 64
  %240 = getelementptr i8, ptr @dataFloat, i64 %239
  store <4 x float> %226, ptr %240, align 16, !tbaa !40
  %241 = getelementptr float, ptr %240, i64 4
  store <4 x float> %228, ptr %241, align 16, !tbaa !40
  %242 = shl i64 %230, 2
  %243 = add i64 %242, 96
  %244 = getelementptr i8, ptr @dataFloat, i64 %243
  store <4 x float> %226, ptr %244, align 16, !tbaa !40
  %245 = getelementptr float, ptr %244, i64 4
  store <4 x float> %228, ptr %245, align 16, !tbaa !40
  %246 = shl i64 %230, 2
  %247 = add i64 %246, 128
  %248 = getelementptr i8, ptr @dataFloat, i64 %247
  store <4 x float> %226, ptr %248, align 16, !tbaa !40
  %249 = getelementptr float, ptr %248, i64 4
  store <4 x float> %228, ptr %249, align 16, !tbaa !40
  %250 = add nuw nsw i64 %230, 40
  %251 = icmp eq i64 %250, 8000
  br i1 %251, label %252, label %229, !llvm.loop !42

252:                                              ; preds = %229
  %253 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %253, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.267)
  tail call void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.268)
  tail call void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.269)
  tail call void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.270)
  tail call void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.271)
  %254 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %255 = sdiv i32 %254, 10
  store i32 %255, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.272)
  tail call void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.273)
  tail call void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.274)
  tail call void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.275)
  tail call void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.276)
  tail call void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.277)
  tail call void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.278)
  tail call void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.279)
  tail call void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.280)
  tail call void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.281)
  tail call void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.282)
  %256 = load double, ptr @init_value, align 8, !tbaa !28
  %257 = insertelement <2 x double> poison, double %256, i64 0
  %258 = shufflevector <2 x double> %257, <2 x double> poison, <2 x i32> zeroinitializer
  %259 = insertelement <2 x double> poison, double %256, i64 0
  %260 = shufflevector <2 x double> %259, <2 x double> poison, <2 x i32> zeroinitializer
  br label %261

261:                                              ; preds = %261, %252
  %262 = phi i64 [ 0, %252 ], [ %282, %261 ]
  %263 = shl i64 %262, 3
  %264 = getelementptr i8, ptr @dataDouble, i64 %263
  store <2 x double> %258, ptr %264, align 16, !tbaa !28
  %265 = getelementptr double, ptr %264, i64 2
  store <2 x double> %260, ptr %265, align 16, !tbaa !28
  %266 = shl i64 %262, 3
  %267 = add i64 %266, 32
  %268 = getelementptr i8, ptr @dataDouble, i64 %267
  store <2 x double> %258, ptr %268, align 16, !tbaa !28
  %269 = getelementptr double, ptr %268, i64 2
  store <2 x double> %260, ptr %269, align 16, !tbaa !28
  %270 = shl i64 %262, 3
  %271 = add i64 %270, 64
  %272 = getelementptr i8, ptr @dataDouble, i64 %271
  store <2 x double> %258, ptr %272, align 16, !tbaa !28
  %273 = getelementptr double, ptr %272, i64 2
  store <2 x double> %260, ptr %273, align 16, !tbaa !28
  %274 = shl i64 %262, 3
  %275 = add i64 %274, 96
  %276 = getelementptr i8, ptr @dataDouble, i64 %275
  store <2 x double> %258, ptr %276, align 16, !tbaa !28
  %277 = getelementptr double, ptr %276, i64 2
  store <2 x double> %260, ptr %277, align 16, !tbaa !28
  %278 = shl i64 %262, 3
  %279 = add i64 %278, 128
  %280 = getelementptr i8, ptr @dataDouble, i64 %279
  store <2 x double> %258, ptr %280, align 16, !tbaa !28
  %281 = getelementptr double, ptr %280, i64 2
  store <2 x double> %260, ptr %281, align 16, !tbaa !28
  %282 = add nuw nsw i64 %262, 20
  %283 = icmp eq i64 %282, 8000
  br i1 %283, label %284, label %261, !llvm.loop !43

284:                                              ; preds = %261
  %285 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %285, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.283)
  tail call void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.284)
  tail call void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.285)
  tail call void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.286)
  tail call void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.287)
  %286 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %287 = sdiv i32 %286, 10
  store i32 %287, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.288)
  tail call void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.289)
  tail call void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.290)
  tail call void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.291)
  tail call void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.292)
  tail call void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.293)
  tail call void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.294)
  tail call void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.295)
  tail call void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.296)
  tail call void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.297)
  tail call void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.298)
  ret i32 0
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !44

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !44

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !45

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !45

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !46

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !46

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 6
  %12 = icmp eq i8 %11, -128
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !47

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !47

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !48

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !48

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !49

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !49

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !50

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !50

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !51

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !51

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !52

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !52

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !53

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !53

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 31
  %12 = icmp eq i8 %11, -64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !54

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !54

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 29
  %12 = icmp eq i8 %11, 64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !55

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !55

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = add <16 x i8> %28, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !56

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !57

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !58

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !59

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !58

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = add <16 x i8> %28, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !60

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !61

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !62

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !63

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !62

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %34 = add <16 x i8> %28, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !64

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !65

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !66

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !67

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !66

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %34 = add <16 x i8> %28, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !68

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !69

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !70

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !71

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !70

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = mul <16 x i8> %28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %32 = mul <16 x i8> %30, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !72

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = mul <8 x i8> %49, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !73

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !74

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !75

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = mul <16 x i8> %28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %32 = mul <16 x i8> %30, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !76

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = mul <8 x i8> %49, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !77

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !78

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !79

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %34 = add <16 x i8> %28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !80

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !81

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !82

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 120
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !83

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = icmp eq i8 %82, %79
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptosi double %86 to i8
  %89 = and i8 %88, 3
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !9
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !28
  %95 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !82

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !26
  %103 = load i64, ptr @start_time, align 8, !tbaa !26
  %104 = load ptr, ptr @results, align 8, !tbaa !5
  %105 = icmp eq ptr %104, null
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %112

108:                                              ; preds = %101
  %109 = load i32, ptr @current_test, align 4, !tbaa !9
  %110 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %111 = icmp slt i32 %109, %110
  br i1 %111, label %124, label %112

112:                                              ; preds = %108, %106
  %113 = phi i32 [ %107, %106 ], [ %110, %108 ]
  %114 = add nsw i32 %113, 10
  store i32 %114, ptr @allocated_results, align 4, !tbaa !9
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 4
  %117 = tail call ptr @realloc(ptr noundef %104, i64 noundef %116) #14
  store ptr %117, ptr @results, align 8, !tbaa !5
  %118 = icmp eq ptr %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %112
  %120 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %124

121:                                              ; preds = %112
  %122 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %122)
  tail call void @exit(i32 noundef -1) #15
  unreachable

124:                                              ; preds = %108, %119
  %125 = phi i32 [ %120, %119 ], [ %109, %108 ]
  %126 = phi ptr [ %117, %119 ], [ %104, %108 ]
  %127 = sub nsw i64 %102, %103
  %128 = sitofp i64 %127 to double
  %129 = fdiv double %128, 1.000000e+06
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130
  store double %129, ptr %131, align 8, !tbaa !11
  %132 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130, i32 1
  store ptr %2, ptr %132, align 8, !tbaa !14
  %133 = add nsw i32 %125, 1
  store i32 %133, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = sdiv <16 x i8> %30, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %34 = sdiv <16 x i8> %32, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !84

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = sdiv <8 x i8> %51, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !85

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !86

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = sdiv i8 %73, 5
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !87

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = sdiv i8 %81, 5
  %83 = shl i8 %82, 6
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = sdiv i8 %89, 5
  %91 = and i8 %90, 3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !9
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !28
  %97 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !86

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !26
  %105 = load i64, ptr @start_time, align 8, !tbaa !26
  %106 = load ptr, ptr @results, align 8, !tbaa !5
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %110

108:                                              ; preds = %103
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %114

110:                                              ; preds = %103
  %111 = load i32, ptr @current_test, align 4, !tbaa !9
  %112 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %113 = icmp slt i32 %111, %112
  br i1 %113, label %126, label %114

114:                                              ; preds = %110, %108
  %115 = phi i32 [ %109, %108 ], [ %112, %110 ]
  %116 = add nsw i32 %115, 10
  store i32 %116, ptr @allocated_results, align 4, !tbaa !9
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 4
  %119 = tail call ptr @realloc(ptr noundef %106, i64 noundef %118) #14
  store ptr %119, ptr @results, align 8, !tbaa !5
  %120 = icmp eq ptr %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %114
  %122 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %126

123:                                              ; preds = %114
  %124 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %125 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %124)
  tail call void @exit(i32 noundef -1) #15
  unreachable

126:                                              ; preds = %110, %121
  %127 = phi i32 [ %122, %121 ], [ %111, %110 ]
  %128 = phi ptr [ %119, %121 ], [ %106, %110 ]
  %129 = sub nsw i64 %104, %105
  %130 = sitofp i64 %129 to double
  %131 = fdiv double %130, 1.000000e+06
  %132 = sext i32 %127 to i64
  %133 = getelementptr inbounds %struct.one_result, ptr %128, i64 %132
  store double %131, ptr %133, align 8, !tbaa !11
  %134 = getelementptr inbounds %struct.one_result, ptr %128, i64 %132, i32 1
  store ptr %2, ptr %134, align 8, !tbaa !14
  %135 = add nsw i32 %127, 1
  store i32 %135, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = sdiv <16 x i8> %30, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %34 = sdiv <16 x i8> %32, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !88

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = sdiv <8 x i8> %51, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !89

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !90

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = sdiv i8 %73, 120
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !91

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = sdiv i8 %81, 120
  %83 = shl nsw i8 %82, 6
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = add i8 %89, 119
  %91 = icmp ult i8 %90, -17
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !90

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %34 = add <16 x i8> %28, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !92

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !93

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !94

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 2
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !95

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !94

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %97

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %80

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %62
  %22 = phi i32 [ %63, %62 ], [ %5, %11 ]
  %23 = phi i32 [ %64, %62 ], [ 0, %11 ]
  br i1 %13, label %55, label %24

24:                                               ; preds = %21
  br i1 %14, label %41, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %35, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %33, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %34, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %30, %27
  %34 = add <16 x i8> %32, %28
  %35 = add nuw i64 %26, 32
  %36 = icmp eq i64 %35, %15
  br i1 %36, label %37, label %25, !llvm.loop !96

37:                                               ; preds = %25
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %16, label %74, label %40

40:                                               ; preds = %37
  br i1 %18, label %55, label %41

41:                                               ; preds = %24, %40
  %42 = phi i8 [ 0, %24 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %24 ], [ %15, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %51, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %50, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = add <8 x i8> %49, %47
  %51 = add nuw i64 %46, 8
  %52 = icmp eq i64 %51, %19
  br i1 %52, label %53, label %45, !llvm.loop !97

53:                                               ; preds = %45
  %54 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %50)
  br i1 %20, label %74, label %55

55:                                               ; preds = %21, %40, %53
  %56 = phi i64 [ 0, %21 ], [ %15, %40 ], [ %19, %53 ]
  %57 = phi i8 [ 0, %21 ], [ %39, %40 ], [ %54, %53 ]
  br label %66

58:                                               ; preds = %74
  %59 = load i32, ptr @current_test, align 4, !tbaa !9
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %59)
  %61 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %62

62:                                               ; preds = %58, %74
  %63 = phi i32 [ %61, %58 ], [ %22, %74 ]
  %64 = add nuw nsw i32 %23, 1
  %65 = icmp slt i32 %64, %63
  br i1 %65, label %21, label %97, !llvm.loop !98

66:                                               ; preds = %55, %66
  %67 = phi i64 [ %72, %66 ], [ %56, %55 ]
  %68 = phi i8 [ %71, %66 ], [ %57, %55 ]
  %69 = getelementptr inbounds i8, ptr %0, i64 %67
  %70 = load i8, ptr %69, align 1, !tbaa !29
  %71 = add i8 %70, %68
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, %12
  br i1 %73, label %74, label %66, !llvm.loop !99

74:                                               ; preds = %66, %53, %37
  %75 = phi i8 [ %39, %37 ], [ %54, %53 ], [ %71, %66 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !28
  %77 = fptosi double %76 to i8
  %78 = shl i8 %77, 6
  %79 = icmp eq i8 %78, %75
  br i1 %79, label %62, label %58

80:                                               ; preds = %9, %92
  %81 = phi i32 [ %93, %92 ], [ %5, %9 ]
  %82 = phi double [ %94, %92 ], [ %10, %9 ]
  %83 = phi i32 [ %95, %92 ], [ 0, %9 ]
  %84 = fptosi double %82 to i8
  %85 = and i8 %84, 3
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %88)
  %90 = load double, ptr @init_value, align 8, !tbaa !28
  %91 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %92

92:                                               ; preds = %80, %87
  %93 = phi i32 [ %81, %80 ], [ %91, %87 ]
  %94 = phi double [ %82, %80 ], [ %90, %87 ]
  %95 = add nuw nsw i32 %83, 1
  %96 = icmp slt i32 %95, %93
  br i1 %96, label %80, label %97, !llvm.loop !98

97:                                               ; preds = %92, %62, %3
  %98 = tail call i64 @clock() #17
  store i64 %98, ptr @end_time, align 8, !tbaa !26
  %99 = load i64, ptr @start_time, align 8, !tbaa !26
  %100 = load ptr, ptr @results, align 8, !tbaa !5
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %104

102:                                              ; preds = %97
  %103 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %108

104:                                              ; preds = %97
  %105 = load i32, ptr @current_test, align 4, !tbaa !9
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %107 = icmp slt i32 %105, %106
  br i1 %107, label %120, label %108

108:                                              ; preds = %104, %102
  %109 = phi i32 [ %103, %102 ], [ %106, %104 ]
  %110 = add nsw i32 %109, 10
  store i32 %110, ptr @allocated_results, align 4, !tbaa !9
  %111 = sext i32 %110 to i64
  %112 = shl nsw i64 %111, 4
  %113 = tail call ptr @realloc(ptr noundef %100, i64 noundef %112) #14
  store ptr %113, ptr @results, align 8, !tbaa !5
  %114 = icmp eq ptr %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %108
  %116 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %120

117:                                              ; preds = %108
  %118 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %119 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %118)
  tail call void @exit(i32 noundef -1) #15
  unreachable

120:                                              ; preds = %104, %115
  %121 = phi i32 [ %116, %115 ], [ %105, %104 ]
  %122 = phi ptr [ %113, %115 ], [ %100, %104 ]
  %123 = sub nsw i64 %98, %99
  %124 = sitofp i64 %123 to double
  %125 = fdiv double %124, 1.000000e+06
  %126 = sext i32 %121 to i64
  %127 = getelementptr inbounds %struct.one_result, ptr %122, i64 %126
  store double %125, ptr %127, align 8, !tbaa !11
  %128 = getelementptr inbounds %struct.one_result, ptr %122, i64 %126, i32 1
  store ptr %2, ptr %128, align 8, !tbaa !14
  %129 = add nsw i32 %121, 1
  store i32 %129, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = and <16 x i8> %30, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = and <16 x i8> %32, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !100

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = and <8 x i8> %51, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !101

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !102

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = and i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !103

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !102

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = and <16 x i8> %30, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %34 = and <16 x i8> %32, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !104

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = and <8 x i8> %51, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !105

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !106

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = and i8 %73, 14
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !107

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !106

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = or <16 x i8> %28, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %32 = or <16 x i8> %30, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !108

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = or <8 x i8> %49, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !109

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !110

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = or i8 %71, 10
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !111

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !28
  %79 = fptosi double %78 to i8
  %80 = shl i8 %79, 6
  %81 = or i8 %80, -128
  %82 = icmp eq i8 %81, %77
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !9
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !110

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !26
  %92 = load i64, ptr @start_time, align 8, !tbaa !26
  %93 = load ptr, ptr @results, align 8, !tbaa !5
  %94 = icmp eq ptr %93, null
  br i1 %94, label %95, label %97

95:                                               ; preds = %90
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %101

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %113, label %101

101:                                              ; preds = %97, %95
  %102 = phi i32 [ %96, %95 ], [ %99, %97 ]
  %103 = add nsw i32 %102, 10
  store i32 %103, ptr @allocated_results, align 4, !tbaa !9
  %104 = sext i32 %103 to i64
  %105 = shl nsw i64 %104, 4
  %106 = tail call ptr @realloc(ptr noundef %93, i64 noundef %105) #14
  store ptr %106, ptr @results, align 8, !tbaa !5
  %107 = icmp eq ptr %106, null
  br i1 %107, label %110, label %108

108:                                              ; preds = %101
  %109 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %113

110:                                              ; preds = %101
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %111)
  tail call void @exit(i32 noundef -1) #15
  unreachable

113:                                              ; preds = %97, %108
  %114 = phi i32 [ %109, %108 ], [ %98, %97 ]
  %115 = phi ptr [ %106, %108 ], [ %93, %97 ]
  %116 = sub nsw i64 %91, %92
  %117 = sitofp i64 %116 to double
  %118 = fdiv double %117, 1.000000e+06
  %119 = sext i32 %114 to i64
  %120 = getelementptr inbounds %struct.one_result, ptr %115, i64 %119
  store double %118, ptr %120, align 8, !tbaa !11
  %121 = getelementptr inbounds %struct.one_result, ptr %115, i64 %119, i32 1
  store ptr %2, ptr %121, align 8, !tbaa !14
  %122 = add nsw i32 %114, 1
  store i32 %122, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %79

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = or <16 x i8> %28, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %32 = or <16 x i8> %30, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !112

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = or <8 x i8> %49, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !113

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %86, !llvm.loop !114

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = or i8 %71, 63
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !115

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, -64
  br i1 %78, label %63, label %59

79:                                               ; preds = %7, %79
  %80 = phi i32 [ %83, %79 ], [ 0, %7 ]
  %81 = load i32, ptr @current_test, align 4, !tbaa !9
  %82 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %81)
  %83 = add nuw nsw i32 %80, 1
  %84 = load i32, ptr @iterations, align 4, !tbaa !9
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %79, label %86, !llvm.loop !114

86:                                               ; preds = %79, %63, %3
  %87 = tail call i64 @clock() #17
  store i64 %87, ptr @end_time, align 8, !tbaa !26
  %88 = load i64, ptr @start_time, align 8, !tbaa !26
  %89 = load ptr, ptr @results, align 8, !tbaa !5
  %90 = icmp eq ptr %89, null
  br i1 %90, label %91, label %93

91:                                               ; preds = %86
  %92 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %97

93:                                               ; preds = %86
  %94 = load i32, ptr @current_test, align 4, !tbaa !9
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %96 = icmp slt i32 %94, %95
  br i1 %96, label %109, label %97

97:                                               ; preds = %93, %91
  %98 = phi i32 [ %92, %91 ], [ %95, %93 ]
  %99 = add nsw i32 %98, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !9
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %89, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !5
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %97
  %105 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %109

106:                                              ; preds = %97
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %93, %104
  %110 = phi i32 [ %105, %104 ], [ %94, %93 ]
  %111 = phi ptr [ %102, %104 ], [ %89, %93 ]
  %112 = sub nsw i64 %87, %88
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !11
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !14
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = xor <16 x i8> %30, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = xor <16 x i8> %32, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !116

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = xor <8 x i8> %51, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !117

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !118

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = xor i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !119

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !118

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = xor <16 x i8> %30, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %34 = xor <16 x i8> %32, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !120

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = xor <8 x i8> %51, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !121

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !122

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = xor i8 %73, 49
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !123

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, 64
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 1
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !122

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !124

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !124

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !125

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !125

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !126

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !126

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 6
  %12 = icmp eq i8 %11, -128
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !127

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !127

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !128

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !128

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !129

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !129

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !130

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !130

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !131

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !131

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !132

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !132

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !133

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !133

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 31
  %12 = icmp eq i8 %11, -64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !134

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !134

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 29
  %12 = icmp eq i8 %11, 64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !135

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !135

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = add <16 x i8> %28, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !136

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !137

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !138

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !139

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !138

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = add <16 x i8> %28, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !140

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !141

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !142

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !143

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !142

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %34 = add <16 x i8> %28, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !144

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !145

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !146

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !147

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !146

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %34 = add <16 x i8> %28, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !148

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !149

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !150

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !151

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !150

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = mul <16 x i8> %28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %32 = mul <16 x i8> %30, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !152

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = mul <8 x i8> %49, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !153

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !154

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !155

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = mul <16 x i8> %28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %32 = mul <16 x i8> %30, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !156

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = mul <8 x i8> %49, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !157

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !158

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !159

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %34 = add <16 x i8> %28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !160

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !161

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !162

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 120
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !163

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = icmp eq i8 %82, %79
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptoui double %86 to i8
  %89 = and i8 %88, 3
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !9
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !28
  %95 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !162

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !26
  %103 = load i64, ptr @start_time, align 8, !tbaa !26
  %104 = load ptr, ptr @results, align 8, !tbaa !5
  %105 = icmp eq ptr %104, null
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %112

108:                                              ; preds = %101
  %109 = load i32, ptr @current_test, align 4, !tbaa !9
  %110 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %111 = icmp slt i32 %109, %110
  br i1 %111, label %124, label %112

112:                                              ; preds = %108, %106
  %113 = phi i32 [ %107, %106 ], [ %110, %108 ]
  %114 = add nsw i32 %113, 10
  store i32 %114, ptr @allocated_results, align 4, !tbaa !9
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 4
  %117 = tail call ptr @realloc(ptr noundef %104, i64 noundef %116) #14
  store ptr %117, ptr @results, align 8, !tbaa !5
  %118 = icmp eq ptr %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %112
  %120 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %124

121:                                              ; preds = %112
  %122 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %122)
  tail call void @exit(i32 noundef -1) #15
  unreachable

124:                                              ; preds = %108, %119
  %125 = phi i32 [ %120, %119 ], [ %109, %108 ]
  %126 = phi ptr [ %117, %119 ], [ %104, %108 ]
  %127 = sub nsw i64 %102, %103
  %128 = sitofp i64 %127 to double
  %129 = fdiv double %128, 1.000000e+06
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130
  store double %129, ptr %131, align 8, !tbaa !11
  %132 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130, i32 1
  store ptr %2, ptr %132, align 8, !tbaa !14
  %133 = add nsw i32 %125, 1
  store i32 %133, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = udiv <16 x i8> %30, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %34 = udiv <16 x i8> %32, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !164

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = udiv <8 x i8> %51, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !165

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !166

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = udiv i8 %73, 5
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !167

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = udiv i8 %81, 5
  %83 = shl i8 %82, 6
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = udiv i8 %89, 5
  %91 = and i8 %90, 3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !9
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !28
  %97 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !166

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !26
  %105 = load i64, ptr @start_time, align 8, !tbaa !26
  %106 = load ptr, ptr @results, align 8, !tbaa !5
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %110

108:                                              ; preds = %103
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %114

110:                                              ; preds = %103
  %111 = load i32, ptr @current_test, align 4, !tbaa !9
  %112 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %113 = icmp slt i32 %111, %112
  br i1 %113, label %126, label %114

114:                                              ; preds = %110, %108
  %115 = phi i32 [ %109, %108 ], [ %112, %110 ]
  %116 = add nsw i32 %115, 10
  store i32 %116, ptr @allocated_results, align 4, !tbaa !9
  %117 = sext i32 %116 to i64
  %118 = shl nsw i64 %117, 4
  %119 = tail call ptr @realloc(ptr noundef %106, i64 noundef %118) #14
  store ptr %119, ptr @results, align 8, !tbaa !5
  %120 = icmp eq ptr %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %114
  %122 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %126

123:                                              ; preds = %114
  %124 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %125 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %124)
  tail call void @exit(i32 noundef -1) #15
  unreachable

126:                                              ; preds = %110, %121
  %127 = phi i32 [ %122, %121 ], [ %111, %110 ]
  %128 = phi ptr [ %119, %121 ], [ %106, %110 ]
  %129 = sub nsw i64 %104, %105
  %130 = sitofp i64 %129 to double
  %131 = fdiv double %130, 1.000000e+06
  %132 = sext i32 %127 to i64
  %133 = getelementptr inbounds %struct.one_result, ptr %128, i64 %132
  store double %131, ptr %133, align 8, !tbaa !11
  %134 = getelementptr inbounds %struct.one_result, ptr %128, i64 %132, i32 1
  store ptr %2, ptr %134, align 8, !tbaa !14
  %135 = add nsw i32 %127, 1
  store i32 %135, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = udiv <16 x i8> %30, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %34 = udiv <16 x i8> %32, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !168

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = udiv <8 x i8> %51, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !169

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !170

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = udiv i8 %73, 120
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !171

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = udiv i8 %81, 120
  %83 = shl nuw i8 %82, 6
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %96
  %86 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %87 = phi double [ %98, %96 ], [ %10, %9 ]
  %88 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = icmp ult i8 %89, 120
  br i1 %90, label %96, label %91

91:                                               ; preds = %85
  %92 = load i32, ptr @current_test, align 4, !tbaa !9
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !28
  %95 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %96

96:                                               ; preds = %85, %91
  %97 = phi i32 [ %86, %85 ], [ %95, %91 ]
  %98 = phi double [ %87, %85 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %88, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %85, label %101, !llvm.loop !170

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !26
  %103 = load i64, ptr @start_time, align 8, !tbaa !26
  %104 = load ptr, ptr @results, align 8, !tbaa !5
  %105 = icmp eq ptr %104, null
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %112

108:                                              ; preds = %101
  %109 = load i32, ptr @current_test, align 4, !tbaa !9
  %110 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %111 = icmp slt i32 %109, %110
  br i1 %111, label %124, label %112

112:                                              ; preds = %108, %106
  %113 = phi i32 [ %107, %106 ], [ %110, %108 ]
  %114 = add nsw i32 %113, 10
  store i32 %114, ptr @allocated_results, align 4, !tbaa !9
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 4
  %117 = tail call ptr @realloc(ptr noundef %104, i64 noundef %116) #14
  store ptr %117, ptr @results, align 8, !tbaa !5
  %118 = icmp eq ptr %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %112
  %120 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %124

121:                                              ; preds = %112
  %122 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %122)
  tail call void @exit(i32 noundef -1) #15
  unreachable

124:                                              ; preds = %108, %119
  %125 = phi i32 [ %120, %119 ], [ %109, %108 ]
  %126 = phi ptr [ %117, %119 ], [ %104, %108 ]
  %127 = sub nsw i64 %102, %103
  %128 = sitofp i64 %127 to double
  %129 = fdiv double %128, 1.000000e+06
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130
  store double %129, ptr %131, align 8, !tbaa !11
  %132 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130, i32 1
  store ptr %2, ptr %132, align 8, !tbaa !14
  %133 = add nsw i32 %125, 1
  store i32 %133, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %27, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %34 = add <16 x i8> %28, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %35 = add <16 x i8> %33, %30
  %36 = add <16 x i8> %34, %32
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !172

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = add <8 x i8> %49, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %53 = add <8 x i8> %52, %51
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !173

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !174

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = add i8 %71, 2
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !175

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !174

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %97

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %80

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %62
  %22 = phi i32 [ %63, %62 ], [ %5, %11 ]
  %23 = phi i32 [ %64, %62 ], [ 0, %11 ]
  br i1 %13, label %55, label %24

24:                                               ; preds = %21
  br i1 %14, label %41, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %35, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %33, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %34, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = add <16 x i8> %30, %27
  %34 = add <16 x i8> %32, %28
  %35 = add nuw i64 %26, 32
  %36 = icmp eq i64 %35, %15
  br i1 %36, label %37, label %25, !llvm.loop !176

37:                                               ; preds = %25
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %16, label %74, label %40

40:                                               ; preds = %37
  br i1 %18, label %55, label %41

41:                                               ; preds = %24, %40
  %42 = phi i8 [ 0, %24 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %24 ], [ %15, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %51, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %50, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = add <8 x i8> %49, %47
  %51 = add nuw i64 %46, 8
  %52 = icmp eq i64 %51, %19
  br i1 %52, label %53, label %45, !llvm.loop !177

53:                                               ; preds = %45
  %54 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %50)
  br i1 %20, label %74, label %55

55:                                               ; preds = %21, %40, %53
  %56 = phi i64 [ 0, %21 ], [ %15, %40 ], [ %19, %53 ]
  %57 = phi i8 [ 0, %21 ], [ %39, %40 ], [ %54, %53 ]
  br label %66

58:                                               ; preds = %74
  %59 = load i32, ptr @current_test, align 4, !tbaa !9
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %59)
  %61 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %62

62:                                               ; preds = %58, %74
  %63 = phi i32 [ %61, %58 ], [ %22, %74 ]
  %64 = add nuw nsw i32 %23, 1
  %65 = icmp slt i32 %64, %63
  br i1 %65, label %21, label %97, !llvm.loop !178

66:                                               ; preds = %55, %66
  %67 = phi i64 [ %72, %66 ], [ %56, %55 ]
  %68 = phi i8 [ %71, %66 ], [ %57, %55 ]
  %69 = getelementptr inbounds i8, ptr %0, i64 %67
  %70 = load i8, ptr %69, align 1, !tbaa !29
  %71 = add i8 %70, %68
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, %12
  br i1 %73, label %74, label %66, !llvm.loop !179

74:                                               ; preds = %66, %53, %37
  %75 = phi i8 [ %39, %37 ], [ %54, %53 ], [ %71, %66 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !28
  %77 = fptoui double %76 to i8
  %78 = shl i8 %77, 6
  %79 = icmp eq i8 %78, %75
  br i1 %79, label %62, label %58

80:                                               ; preds = %9, %92
  %81 = phi i32 [ %93, %92 ], [ %5, %9 ]
  %82 = phi double [ %94, %92 ], [ %10, %9 ]
  %83 = phi i32 [ %95, %92 ], [ 0, %9 ]
  %84 = fptoui double %82 to i8
  %85 = and i8 %84, 3
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %88)
  %90 = load double, ptr @init_value, align 8, !tbaa !28
  %91 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %92

92:                                               ; preds = %80, %87
  %93 = phi i32 [ %81, %80 ], [ %91, %87 ]
  %94 = phi double [ %82, %80 ], [ %90, %87 ]
  %95 = add nuw nsw i32 %83, 1
  %96 = icmp slt i32 %95, %93
  br i1 %96, label %80, label %97, !llvm.loop !178

97:                                               ; preds = %92, %62, %3
  %98 = tail call i64 @clock() #17
  store i64 %98, ptr @end_time, align 8, !tbaa !26
  %99 = load i64, ptr @start_time, align 8, !tbaa !26
  %100 = load ptr, ptr @results, align 8, !tbaa !5
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %104

102:                                              ; preds = %97
  %103 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %108

104:                                              ; preds = %97
  %105 = load i32, ptr @current_test, align 4, !tbaa !9
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %107 = icmp slt i32 %105, %106
  br i1 %107, label %120, label %108

108:                                              ; preds = %104, %102
  %109 = phi i32 [ %103, %102 ], [ %106, %104 ]
  %110 = add nsw i32 %109, 10
  store i32 %110, ptr @allocated_results, align 4, !tbaa !9
  %111 = sext i32 %110 to i64
  %112 = shl nsw i64 %111, 4
  %113 = tail call ptr @realloc(ptr noundef %100, i64 noundef %112) #14
  store ptr %113, ptr @results, align 8, !tbaa !5
  %114 = icmp eq ptr %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %108
  %116 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %120

117:                                              ; preds = %108
  %118 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %119 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %118)
  tail call void @exit(i32 noundef -1) #15
  unreachable

120:                                              ; preds = %104, %115
  %121 = phi i32 [ %116, %115 ], [ %105, %104 ]
  %122 = phi ptr [ %113, %115 ], [ %100, %104 ]
  %123 = sub nsw i64 %98, %99
  %124 = sitofp i64 %123 to double
  %125 = fdiv double %124, 1.000000e+06
  %126 = sext i32 %121 to i64
  %127 = getelementptr inbounds %struct.one_result, ptr %122, i64 %126
  store double %125, ptr %127, align 8, !tbaa !11
  %128 = getelementptr inbounds %struct.one_result, ptr %122, i64 %126, i32 1
  store ptr %2, ptr %128, align 8, !tbaa !14
  %129 = add nsw i32 %121, 1
  store i32 %129, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = and <16 x i8> %30, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = and <16 x i8> %32, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !180

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = and <8 x i8> %51, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !181

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !182

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = and i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !183

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !182

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = and <16 x i8> %30, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %34 = and <16 x i8> %32, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !184

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = and <8 x i8> %51, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !185

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !186

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = and i8 %73, 14
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !187

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !186

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = or <16 x i8> %28, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %32 = or <16 x i8> %30, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !188

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = or <8 x i8> %49, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !189

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !190

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = or i8 %71, 10
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !191

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !28
  %79 = fptoui double %78 to i8
  %80 = shl i8 %79, 6
  %81 = or i8 %80, -128
  %82 = icmp eq i8 %81, %77
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !9
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !190

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !26
  %92 = load i64, ptr @start_time, align 8, !tbaa !26
  %93 = load ptr, ptr @results, align 8, !tbaa !5
  %94 = icmp eq ptr %93, null
  br i1 %94, label %95, label %97

95:                                               ; preds = %90
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %101

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %113, label %101

101:                                              ; preds = %97, %95
  %102 = phi i32 [ %96, %95 ], [ %99, %97 ]
  %103 = add nsw i32 %102, 10
  store i32 %103, ptr @allocated_results, align 4, !tbaa !9
  %104 = sext i32 %103 to i64
  %105 = shl nsw i64 %104, 4
  %106 = tail call ptr @realloc(ptr noundef %93, i64 noundef %105) #14
  store ptr %106, ptr @results, align 8, !tbaa !5
  %107 = icmp eq ptr %106, null
  br i1 %107, label %110, label %108

108:                                              ; preds = %101
  %109 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %113

110:                                              ; preds = %101
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %111)
  tail call void @exit(i32 noundef -1) #15
  unreachable

113:                                              ; preds = %97, %108
  %114 = phi i32 [ %109, %108 ], [ %98, %97 ]
  %115 = phi ptr [ %106, %108 ], [ %93, %97 ]
  %116 = sub nsw i64 %91, %92
  %117 = sitofp i64 %116 to double
  %118 = fdiv double %117, 1.000000e+06
  %119 = sext i32 %114 to i64
  %120 = getelementptr inbounds %struct.one_result, ptr %115, i64 %119
  store double %118, ptr %120, align 8, !tbaa !11
  %121 = getelementptr inbounds %struct.one_result, ptr %115, i64 %119, i32 1
  store ptr %2, ptr %121, align 8, !tbaa !14
  %122 = add nsw i32 %114, 1
  store i32 %122, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %79

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 4294967264
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 4294967288
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %56, label %22

22:                                               ; preds = %19
  br i1 %12, label %41, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %35, %23 ], [ 0, %22 ]
  %25 = phi <16 x i8> [ %33, %23 ], [ zeroinitializer, %22 ]
  %26 = phi <16 x i8> [ %34, %23 ], [ zeroinitializer, %22 ]
  %27 = getelementptr inbounds i8, ptr %0, i64 %24
  %28 = load <16 x i8>, ptr %27, align 1, !tbaa !29
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = or <16 x i8> %28, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %32 = or <16 x i8> %30, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %33 = add <16 x i8> %31, %25
  %34 = add <16 x i8> %32, %26
  %35 = add nuw i64 %24, 32
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %23, !llvm.loop !192

37:                                               ; preds = %23
  %38 = add <16 x i8> %34, %33
  %39 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %38)
  br i1 %14, label %76, label %40

40:                                               ; preds = %37
  br i1 %16, label %56, label %41

41:                                               ; preds = %22, %40
  %42 = phi i8 [ 0, %22 ], [ %39, %40 ]
  %43 = phi i64 [ 0, %22 ], [ %13, %40 ]
  %44 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %42, i64 0
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %43, %41 ], [ %52, %45 ]
  %47 = phi <8 x i8> [ %44, %41 ], [ %51, %45 ]
  %48 = getelementptr inbounds i8, ptr %0, i64 %46
  %49 = load <8 x i8>, ptr %48, align 1, !tbaa !29
  %50 = or <8 x i8> %49, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %51 = add <8 x i8> %50, %47
  %52 = add nuw i64 %46, 8
  %53 = icmp eq i64 %52, %17
  br i1 %53, label %54, label %45, !llvm.loop !193

54:                                               ; preds = %45
  %55 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %51)
  br i1 %18, label %76, label %56

56:                                               ; preds = %19, %40, %54
  %57 = phi i64 [ 0, %19 ], [ %13, %40 ], [ %17, %54 ]
  %58 = phi i8 [ 0, %19 ], [ %39, %40 ], [ %55, %54 ]
  br label %67

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %86, !llvm.loop !194

67:                                               ; preds = %56, %67
  %68 = phi i64 [ %74, %67 ], [ %57, %56 ]
  %69 = phi i8 [ %73, %67 ], [ %58, %56 ]
  %70 = getelementptr inbounds i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !29
  %72 = or i8 %71, 63
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !195

76:                                               ; preds = %67, %54, %37
  %77 = phi i8 [ %39, %37 ], [ %55, %54 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, -64
  br i1 %78, label %63, label %59

79:                                               ; preds = %7, %79
  %80 = phi i32 [ %83, %79 ], [ 0, %7 ]
  %81 = load i32, ptr @current_test, align 4, !tbaa !9
  %82 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %81)
  %83 = add nuw nsw i32 %80, 1
  %84 = load i32, ptr @iterations, align 4, !tbaa !9
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %79, label %86, !llvm.loop !194

86:                                               ; preds = %79, %63, %3
  %87 = tail call i64 @clock() #17
  store i64 %87, ptr @end_time, align 8, !tbaa !26
  %88 = load i64, ptr @start_time, align 8, !tbaa !26
  %89 = load ptr, ptr @results, align 8, !tbaa !5
  %90 = icmp eq ptr %89, null
  br i1 %90, label %91, label %93

91:                                               ; preds = %86
  %92 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %97

93:                                               ; preds = %86
  %94 = load i32, ptr @current_test, align 4, !tbaa !9
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %96 = icmp slt i32 %94, %95
  br i1 %96, label %109, label %97

97:                                               ; preds = %93, %91
  %98 = phi i32 [ %92, %91 ], [ %95, %93 ]
  %99 = add nsw i32 %98, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !9
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %89, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !5
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %97
  %105 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %109

106:                                              ; preds = %97
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %93, %104
  %110 = phi i32 [ %105, %104 ], [ %94, %93 ]
  %111 = phi ptr [ %102, %104 ], [ %89, %93 ]
  %112 = sub nsw i64 %87, %88
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !11
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !14
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = xor <16 x i8> %30, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %34 = xor <16 x i8> %32, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !196

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = xor <8 x i8> %51, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !197

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !198

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = xor i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !199

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, -128
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !198

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %85

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 4294967264
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 4294967288
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %58, label %24

24:                                               ; preds = %21
  br i1 %14, label %43, label %25

25:                                               ; preds = %24, %25
  %26 = phi i64 [ %37, %25 ], [ 0, %24 ]
  %27 = phi <16 x i8> [ %35, %25 ], [ zeroinitializer, %24 ]
  %28 = phi <16 x i8> [ %36, %25 ], [ zeroinitializer, %24 ]
  %29 = getelementptr inbounds i8, ptr %0, i64 %26
  %30 = load <16 x i8>, ptr %29, align 1, !tbaa !29
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = load <16 x i8>, ptr %31, align 1, !tbaa !29
  %33 = xor <16 x i8> %30, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %34 = xor <16 x i8> %32, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %35 = add <16 x i8> %33, %27
  %36 = add <16 x i8> %34, %28
  %37 = add nuw i64 %26, 32
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %25, !llvm.loop !200

39:                                               ; preds = %25
  %40 = add <16 x i8> %36, %35
  %41 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %40)
  br i1 %16, label %78, label %42

42:                                               ; preds = %39
  br i1 %18, label %58, label %43

43:                                               ; preds = %24, %42
  %44 = phi i8 [ 0, %24 ], [ %41, %42 ]
  %45 = phi i64 [ 0, %24 ], [ %15, %42 ]
  %46 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %44, i64 0
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %45, %43 ], [ %54, %47 ]
  %49 = phi <8 x i8> [ %46, %43 ], [ %53, %47 ]
  %50 = getelementptr inbounds i8, ptr %0, i64 %48
  %51 = load <8 x i8>, ptr %50, align 1, !tbaa !29
  %52 = xor <8 x i8> %51, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %53 = add <8 x i8> %52, %49
  %54 = add nuw i64 %48, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %47, !llvm.loop !201

56:                                               ; preds = %47
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %78, label %58

58:                                               ; preds = %21, %42, %56
  %59 = phi i64 [ 0, %21 ], [ %15, %42 ], [ %19, %56 ]
  %60 = phi i8 [ 0, %21 ], [ %41, %42 ], [ %57, %56 ]
  br label %69

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !9
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !202

69:                                               ; preds = %58, %69
  %70 = phi i64 [ %76, %69 ], [ %59, %58 ]
  %71 = phi i8 [ %75, %69 ], [ %60, %58 ]
  %72 = getelementptr inbounds i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !29
  %74 = xor i8 %73, 49
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !203

78:                                               ; preds = %69, %56, %39
  %79 = phi i8 [ %41, %39 ], [ %57, %56 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !28
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, 64
  %84 = icmp eq i8 %83, %79
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 1
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !9
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !28
  %96 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !202

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !26
  %104 = load i64, ptr @start_time, align 8, !tbaa !26
  %105 = load ptr, ptr @results, align 8, !tbaa !5
  %106 = icmp eq ptr %105, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %113

109:                                              ; preds = %102
  %110 = load i32, ptr @current_test, align 4, !tbaa !9
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %112 = icmp slt i32 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %109, %107
  %114 = phi i32 [ %108, %107 ], [ %111, %109 ]
  %115 = add nsw i32 %114, 10
  store i32 %115, ptr @allocated_results, align 4, !tbaa !9
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 4
  %118 = tail call ptr @realloc(ptr noundef %105, i64 noundef %117) #14
  store ptr %118, ptr @results, align 8, !tbaa !5
  %119 = icmp eq ptr %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %125

122:                                              ; preds = %113
  %123 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %123)
  tail call void @exit(i32 noundef -1) #15
  unreachable

125:                                              ; preds = %109, %120
  %126 = phi i32 [ %121, %120 ], [ %110, %109 ]
  %127 = phi ptr [ %118, %120 ], [ %105, %109 ]
  %128 = sub nsw i64 %103, %104
  %129 = sitofp i64 %128 to double
  %130 = fdiv double %129, 1.000000e+06
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131
  store double %130, ptr %132, align 8, !tbaa !11
  %133 = getelementptr inbounds %struct.one_result, ptr %127, i64 %131, i32 1
  store ptr %2, ptr %133, align 8, !tbaa !14
  %134 = add nsw i32 %126, 1
  store i32 %134, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !204

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !204

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !205

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !205

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !206

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !206

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 6
  %12 = icmp eq i16 %11, -17536
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !207

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !207

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !208

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !208

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !209

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !209

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !210

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !210

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !211

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !211

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !212

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !212

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !213

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !213

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 31
  %12 = icmp eq i16 %11, -14144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !214

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !214

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 29
  %12 = icmp eq i16 %11, -30144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !215

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !215

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = add <8 x i16> %22, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !216

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !217

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !218

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, 14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, -14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !217

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = add <8 x i16> %22, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !219

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !220

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !221

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, 14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, -14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !220

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %28 = add <8 x i16> %22, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !222

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !223

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, -10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !224

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, -14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, 14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !223

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %28 = add <8 x i16> %22, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !225

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !226

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, -10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !227

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, -14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, 14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !226

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = mul <8 x i16> %24, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = mul <8 x i16> %26, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !228

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !229

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = mul i16 %51, 120
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !230

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, -23040
  %61 = icmp eq i16 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptosi double %64 to i16
  %67 = mul i16 %66, -23040
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !229

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = mul <8 x i16> %24, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = mul <8 x i16> %26, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !231

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !232

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = mul i16 %51, 120
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !233

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, -23040
  %61 = icmp eq i16 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptosi double %64 to i16
  %67 = mul i16 %66, -23040
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !232

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = add <8 x i16> %22, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !234

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !235

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 120
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !236

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, -23040
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, 23040
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !235

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = sdiv <8 x i16> %24, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28 = sdiv <8 x i16> %26, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !237

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !238

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = sdiv i16 %51, 5
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !239

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = sdiv i16 %59, 5
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = sdiv i16 %67, 5
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !238

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = sdiv <8 x i16> %24, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = sdiv <8 x i16> %26, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !240

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !241

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = sdiv i16 %51, 120
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !242

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = sdiv i16 %59, 120
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = sdiv i16 %67, 120
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !241

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28 = add <8 x i16> %22, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !243

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !244

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 2
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !245

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, 16000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !244

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %76

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %59

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %24, %21
  %28 = add <8 x i16> %26, %22
  %29 = add nuw i64 %20, 16
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !246

31:                                               ; preds = %19
  %32 = add <8 x i16> %28, %27
  %33 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i16 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %76, !llvm.loop !247

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i16 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i16, ptr %0, i64 %46
  %49 = load i16, ptr %48, align 2, !tbaa !30
  %50 = add i16 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !248

53:                                               ; preds = %45, %31
  %54 = phi i16 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptosi double %55 to i16
  %57 = mul i16 %56, 8000
  %58 = icmp eq i16 %57, %54
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %71
  %60 = phi i32 [ %72, %71 ], [ %5, %9 ]
  %61 = phi double [ %73, %71 ], [ %10, %9 ]
  %62 = phi i32 [ %74, %71 ], [ 0, %9 ]
  %63 = fptosi double %61 to i16
  %64 = mul i16 %63, 8000
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr @current_test, align 4, !tbaa !9
  %68 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %67)
  %69 = load double, ptr @init_value, align 8, !tbaa !28
  %70 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %71

71:                                               ; preds = %59, %66
  %72 = phi i32 [ %60, %59 ], [ %70, %66 ]
  %73 = phi double [ %61, %59 ], [ %69, %66 ]
  %74 = add nuw nsw i32 %62, 1
  %75 = icmp slt i32 %74, %72
  br i1 %75, label %59, label %76, !llvm.loop !247

76:                                               ; preds = %71, %41, %3
  %77 = tail call i64 @clock() #17
  store i64 %77, ptr @end_time, align 8, !tbaa !26
  %78 = load i64, ptr @start_time, align 8, !tbaa !26
  %79 = load ptr, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  %82 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %87

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %99, label %87

87:                                               ; preds = %83, %81
  %88 = phi i32 [ %82, %81 ], [ %85, %83 ]
  %89 = add nsw i32 %88, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !9
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %79, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !5
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %87
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %99

96:                                               ; preds = %87
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %83, %94
  %100 = phi i32 [ %95, %94 ], [ %84, %83 ]
  %101 = phi ptr [ %92, %94 ], [ %79, %83 ]
  %102 = sub nsw i64 %77, %78
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !11
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !14
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = and <8 x i16> %24, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = and <8 x i16> %26, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !249

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !250

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = and i16 %51, 10
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !251

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = and i16 %59, 10
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = and i16 %67, 10
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !250

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = and <8 x i16> %24, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %28 = and <8 x i16> %26, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !252

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !253

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = and i16 %51, 14
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !254

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = and i16 %59, 14
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = and i16 %67, 14
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !253

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = or <8 x i16> %24, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = or <8 x i16> %26, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !255

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !256

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = or i16 %51, 10
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !257

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = or i16 %59, 10
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = or i16 %67, 10
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !256

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 16
  %12 = and i64 %10, 4294967280
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <8 x i16> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <8 x i16> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i16, ptr %0, i64 %18
  %22 = load <8 x i16>, ptr %21, align 2, !tbaa !30
  %23 = getelementptr inbounds i16, ptr %21, i64 8
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = or <8 x i16> %22, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %26 = or <8 x i16> %24, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %27 = add <8 x i16> %25, %19
  %28 = add <8 x i16> %26, %20
  %29 = add nuw i64 %18, 16
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !258

31:                                               ; preds = %17
  %32 = add <8 x i16> %28, %27
  %33 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i16 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !259

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i16 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i16, ptr %0, i64 %46
  %49 = load i16, ptr %48, align 2, !tbaa !30
  %50 = or i16 %49, 63
  %51 = add i16 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !260

54:                                               ; preds = %45, %31
  %55 = phi i16 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptosi double %56 to i16
  %58 = or i16 %57, 63
  %59 = mul i16 %58, 8000
  %60 = icmp eq i16 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !259

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = xor <8 x i16> %24, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = xor <8 x i16> %26, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !261

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !262

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = xor i16 %51, 10
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !263

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = xor i16 %59, 10
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = xor i16 %67, 10
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !262

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = xor <8 x i16> %24, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %28 = xor <8 x i16> %26, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !264

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !265

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = xor i16 %51, 49
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !266

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i16
  %60 = xor i16 %59, 49
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptosi double %65 to i16
  %68 = xor i16 %67, 49
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !265

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !267

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !267

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !268

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !268

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !269

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !269

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 6
  %12 = icmp eq i16 %11, -17536
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !270

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !270

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !271

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !271

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !272

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !272

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !273

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !273

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !274

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !274

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !275

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !275

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !276

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !276

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 31
  %12 = icmp eq i16 %11, -14144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !277

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !277

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 29
  %12 = icmp eq i16 %11, -30144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !278

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !9
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !278

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !26
  %33 = load i64, ptr @start_time, align 8, !tbaa !26
  %34 = load ptr, ptr @results, align 8, !tbaa !5
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %42

38:                                               ; preds = %31
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %44 = add nsw i32 %43, 10
  store i32 %44, ptr @allocated_results, align 4, !tbaa !9
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 4
  %47 = tail call ptr @realloc(ptr noundef %34, i64 noundef %46) #14
  store ptr %47, ptr @results, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %42
  %50 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %54

51:                                               ; preds = %42
  %52 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %52)
  tail call void @exit(i32 noundef -1) #15
  unreachable

54:                                               ; preds = %38, %49
  %55 = phi i32 [ %50, %49 ], [ %39, %38 ]
  %56 = phi ptr [ %47, %49 ], [ %34, %38 ]
  %57 = sub nsw i64 %32, %33
  %58 = sitofp i64 %57 to double
  %59 = fdiv double %58, 1.000000e+06
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60
  store double %59, ptr %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %struct.one_result, ptr %56, i64 %60, i32 1
  store ptr %2, ptr %62, align 8, !tbaa !14
  %63 = add nsw i32 %55, 1
  store i32 %63, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = add <8 x i16> %22, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !279

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !280

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !281

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, 14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, -14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !280

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = add <8 x i16> %22, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !282

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !283

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !284

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, 14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, -14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !283

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %28 = add <8 x i16> %22, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !285

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !286

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, -10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !287

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, -14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, 14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !286

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %28 = add <8 x i16> %22, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !288

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !289

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, -10
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !290

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, -14464
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, 14464
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !289

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = mul <8 x i16> %24, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = mul <8 x i16> %26, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !291

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !292

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = mul i16 %51, 120
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !293

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, -23040
  %61 = icmp eq i16 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i16
  %67 = mul i16 %66, -23040
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !292

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = mul <8 x i16> %24, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = mul <8 x i16> %26, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !294

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !295

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = mul i16 %51, 120
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !296

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, -23040
  %61 = icmp eq i16 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i16
  %67 = mul i16 %66, -23040
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !295

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = add <8 x i16> %22, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !297

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !298

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 120
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !299

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, -23040
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, 23040
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !298

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = udiv <8 x i16> %24, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28 = udiv <8 x i16> %26, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !300

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !301

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = udiv i16 %51, 5
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !302

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = udiv i16 %59, 5
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = udiv i16 %67, 5
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !301

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = udiv <8 x i16> %24, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %28 = udiv <8 x i16> %26, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !303

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !304

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = udiv i16 %51, 120
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !305

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = udiv i16 %59, 120
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = udiv i16 %67, 120
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !304

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %21, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28 = add <8 x i16> %22, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29 = add <8 x i16> %27, %24
  %30 = add <8 x i16> %28, %26
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !306

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !307

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = add i16 %49, 2
  %53 = add i16 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !308

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = mul i16 %59, 8000
  %61 = add i16 %60, 16000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = mul i16 %67, 8000
  %69 = icmp eq i16 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !307

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %76

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %59

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = add <8 x i16> %24, %21
  %28 = add <8 x i16> %26, %22
  %29 = add nuw i64 %20, 16
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !309

31:                                               ; preds = %19
  %32 = add <8 x i16> %28, %27
  %33 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i16 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %76, !llvm.loop !310

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i16 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i16, ptr %0, i64 %46
  %49 = load i16, ptr %48, align 2, !tbaa !30
  %50 = add i16 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !311

53:                                               ; preds = %45, %31
  %54 = phi i16 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptoui double %55 to i16
  %57 = mul i16 %56, 8000
  %58 = icmp eq i16 %57, %54
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %71
  %60 = phi i32 [ %72, %71 ], [ %5, %9 ]
  %61 = phi double [ %73, %71 ], [ %10, %9 ]
  %62 = phi i32 [ %74, %71 ], [ 0, %9 ]
  %63 = fptoui double %61 to i16
  %64 = mul i16 %63, 8000
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr @current_test, align 4, !tbaa !9
  %68 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %67)
  %69 = load double, ptr @init_value, align 8, !tbaa !28
  %70 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %71

71:                                               ; preds = %59, %66
  %72 = phi i32 [ %60, %59 ], [ %70, %66 ]
  %73 = phi double [ %61, %59 ], [ %69, %66 ]
  %74 = add nuw nsw i32 %62, 1
  %75 = icmp slt i32 %74, %72
  br i1 %75, label %59, label %76, !llvm.loop !310

76:                                               ; preds = %71, %41, %3
  %77 = tail call i64 @clock() #17
  store i64 %77, ptr @end_time, align 8, !tbaa !26
  %78 = load i64, ptr @start_time, align 8, !tbaa !26
  %79 = load ptr, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  %82 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %87

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %99, label %87

87:                                               ; preds = %83, %81
  %88 = phi i32 [ %82, %81 ], [ %85, %83 ]
  %89 = add nsw i32 %88, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !9
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %79, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !5
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %87
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %99

96:                                               ; preds = %87
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %83, %94
  %100 = phi i32 [ %95, %94 ], [ %84, %83 ]
  %101 = phi ptr [ %92, %94 ], [ %79, %83 ]
  %102 = sub nsw i64 %77, %78
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !11
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !14
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = and <8 x i16> %24, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = and <8 x i16> %26, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !312

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !313

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = and i16 %51, 10
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !314

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = and i16 %59, 10
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = and i16 %67, 10
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !313

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = and <8 x i16> %24, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %28 = and <8 x i16> %26, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !315

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !316

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = and i16 %51, 14
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !317

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = and i16 %59, 14
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = and i16 %67, 14
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !316

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = or <8 x i16> %24, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = or <8 x i16> %26, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !318

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !319

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = or i16 %51, 10
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !320

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = or i16 %59, 10
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = or i16 %67, 10
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !319

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 16
  %12 = and i64 %10, 4294967280
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <8 x i16> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <8 x i16> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i16, ptr %0, i64 %18
  %22 = load <8 x i16>, ptr %21, align 2, !tbaa !30
  %23 = getelementptr inbounds i16, ptr %21, i64 8
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = or <8 x i16> %22, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %26 = or <8 x i16> %24, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %27 = add <8 x i16> %25, %19
  %28 = add <8 x i16> %26, %20
  %29 = add nuw i64 %18, 16
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !321

31:                                               ; preds = %17
  %32 = add <8 x i16> %28, %27
  %33 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i16 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !322

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i16 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i16, ptr %0, i64 %46
  %49 = load i16, ptr %48, align 2, !tbaa !30
  %50 = or i16 %49, 63
  %51 = add i16 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !323

54:                                               ; preds = %45, %31
  %55 = phi i16 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptoui double %56 to i16
  %58 = or i16 %57, 63
  %59 = mul i16 %58, 8000
  %60 = icmp eq i16 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !322

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = xor <8 x i16> %24, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %28 = xor <8 x i16> %26, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !324

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !325

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = xor i16 %51, 10
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !326

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = xor i16 %59, 10
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = xor i16 %67, 10
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !325

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <8 x i16> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <8 x i16> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i16, ptr %0, i64 %20
  %24 = load <8 x i16>, ptr %23, align 2, !tbaa !30
  %25 = getelementptr inbounds i16, ptr %23, i64 8
  %26 = load <8 x i16>, ptr %25, align 2, !tbaa !30
  %27 = xor <8 x i16> %24, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %28 = xor <8 x i16> %26, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = add nuw i64 %20, 16
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !327

33:                                               ; preds = %19
  %34 = add <8 x i16> %30, %29
  %35 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i16 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !328

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i16 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i16, ptr %0, i64 %48
  %51 = load i16, ptr %50, align 2, !tbaa !30
  %52 = xor i16 %51, 49
  %53 = add i16 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !329

56:                                               ; preds = %47, %33
  %57 = phi i16 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i16
  %60 = xor i16 %59, 49
  %61 = mul i16 %60, 8000
  %62 = icmp eq i16 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i16
  %68 = xor i16 %67, 49
  %69 = mul i16 %68, 8000
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !328

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !330

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !330

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !331

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !331

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !332

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !332

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = mul i32 %1, 6
  %11 = icmp eq i32 %10, 48000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !333

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !333

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !334

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !334

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !335

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !335

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !336

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !336

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !337

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !337

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !338

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !338

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !339

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !339

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !340

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !340

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !341

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !341

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 10, i32 10, i32 10, i32 10>
  %28 = add <4 x i32> %22, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !342

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !343

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !344

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !343

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 10, i32 10, i32 10, i32 10>
  %28 = add <4 x i32> %22, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !345

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !346

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !347

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !346

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 -10, i32 -10, i32 -10, i32 -10>
  %28 = add <4 x i32> %22, <i32 -10, i32 -10, i32 -10, i32 -10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !348

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !349

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !350

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !349

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 -10, i32 -10, i32 -10, i32 -10>
  %28 = add <4 x i32> %22, <i32 -10, i32 -10, i32 -10, i32 -10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !351

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !352

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !353

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !352

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = mul nsw <4 x i32> %24, <i32 120, i32 120, i32 120, i32 120>
  %28 = mul nsw <4 x i32> %26, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !354

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !355

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = mul nsw i32 %51, 120
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !356

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 960000
  %61 = icmp eq i32 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptosi double %64 to i32
  %67 = mul i32 %66, 960000
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !355

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = mul <4 x i32> %24, <i32 120, i32 120, i32 120, i32 120>
  %28 = mul <4 x i32> %26, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !357

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !358

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = mul i32 %51, 120
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !359

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 960000
  %61 = icmp eq i32 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptosi double %64 to i32
  %67 = mul i32 %66, 960000
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !358

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 120, i32 120, i32 120, i32 120>
  %28 = add <4 x i32> %22, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !360

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !361

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 120
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !362

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 960000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !361

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = sdiv <4 x i32> %24, <i32 5, i32 5, i32 5, i32 5>
  %28 = sdiv <4 x i32> %26, <i32 5, i32 5, i32 5, i32 5>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !363

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !364

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = sdiv i32 %51, 5
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !365

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = sdiv i32 %59, 5
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = add i32 %67, 4
  %69 = icmp ult i32 %68, 9
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !364

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = sdiv <4 x i32> %24, <i32 120, i32 120, i32 120, i32 120>
  %28 = sdiv <4 x i32> %26, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !366

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !367

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = sdiv i32 %51, 120
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !368

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = sdiv i32 %59, 120
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = add i32 %67, 119
  %69 = icmp ult i32 %68, 239
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !367

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 2, i32 2, i32 2, i32 2>
  %28 = add <4 x i32> %22, <i32 2, i32 2, i32 2, i32 2>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !369

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !370

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 2
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !371

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 16000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !370

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %59

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %24, %21
  %28 = add <4 x i32> %26, %22
  %29 = add nuw i64 %20, 8
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !372

31:                                               ; preds = %19
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i32 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %75, !llvm.loop !373

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !9
  %50 = add nsw i32 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !374

53:                                               ; preds = %45, %31
  %54 = phi i32 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptosi double %55 to i32
  %57 = mul nsw i32 %56, 8000
  %58 = icmp eq i32 %57, %54
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %70
  %60 = phi i32 [ %71, %70 ], [ %5, %9 ]
  %61 = phi double [ %72, %70 ], [ %10, %9 ]
  %62 = phi i32 [ %73, %70 ], [ 0, %9 ]
  %63 = fptosi double %61 to i32
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = load i32, ptr @current_test, align 4, !tbaa !9
  %67 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %66)
  %68 = load double, ptr @init_value, align 8, !tbaa !28
  %69 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %70

70:                                               ; preds = %59, %65
  %71 = phi i32 [ %60, %59 ], [ %69, %65 ]
  %72 = phi double [ %61, %59 ], [ %68, %65 ]
  %73 = add nuw nsw i32 %62, 1
  %74 = icmp slt i32 %73, %71
  br i1 %74, label %59, label %75, !llvm.loop !373

75:                                               ; preds = %70, %41, %3
  %76 = tail call i64 @clock() #17
  store i64 %76, ptr @end_time, align 8, !tbaa !26
  %77 = load i64, ptr @start_time, align 8, !tbaa !26
  %78 = load ptr, ptr @results, align 8, !tbaa !5
  %79 = icmp eq ptr %78, null
  br i1 %79, label %80, label %82

80:                                               ; preds = %75
  %81 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %86

82:                                               ; preds = %75
  %83 = load i32, ptr @current_test, align 4, !tbaa !9
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %98, label %86

86:                                               ; preds = %82, %80
  %87 = phi i32 [ %81, %80 ], [ %84, %82 ]
  %88 = add nsw i32 %87, 10
  store i32 %88, ptr @allocated_results, align 4, !tbaa !9
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 4
  %91 = tail call ptr @realloc(ptr noundef %78, i64 noundef %90) #14
  store ptr %91, ptr @results, align 8, !tbaa !5
  %92 = icmp eq ptr %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %86
  %94 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %98

95:                                               ; preds = %86
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %96)
  tail call void @exit(i32 noundef -1) #15
  unreachable

98:                                               ; preds = %82, %93
  %99 = phi i32 [ %94, %93 ], [ %83, %82 ]
  %100 = phi ptr [ %91, %93 ], [ %78, %82 ]
  %101 = sub nsw i64 %76, %77
  %102 = sitofp i64 %101 to double
  %103 = fdiv double %102, 1.000000e+06
  %104 = sext i32 %99 to i64
  %105 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104
  store double %103, ptr %105, align 8, !tbaa !11
  %106 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104, i32 1
  store ptr %2, ptr %106, align 8, !tbaa !14
  %107 = add nsw i32 %99, 1
  store i32 %107, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = and <4 x i32> %24, <i32 10, i32 10, i32 10, i32 10>
  %28 = and <4 x i32> %26, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !375

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !376

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = and i32 %51, 10
  %53 = add nuw nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !377

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = and i32 %59, 10
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = and i32 %67, 10
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !376

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = and <4 x i32> %24, <i32 14, i32 14, i32 14, i32 14>
  %28 = and <4 x i32> %26, <i32 14, i32 14, i32 14, i32 14>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !378

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !379

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = and i32 %51, 14
  %53 = add nuw nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !380

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = and i32 %59, 14
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = and i32 %67, 14
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !379

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = and i64 %10, 4294967288
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <4 x i32> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <4 x i32> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i32, ptr %0, i64 %18
  %22 = load <4 x i32>, ptr %21, align 4, !tbaa !9
  %23 = getelementptr inbounds i32, ptr %21, i64 4
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = or <4 x i32> %22, <i32 10, i32 10, i32 10, i32 10>
  %26 = or <4 x i32> %24, <i32 10, i32 10, i32 10, i32 10>
  %27 = add <4 x i32> %25, %19
  %28 = add <4 x i32> %26, %20
  %29 = add nuw i64 %18, 8
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !381

31:                                               ; preds = %17
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i32 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !382

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !9
  %50 = or i32 %49, 10
  %51 = add nsw i32 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !383

54:                                               ; preds = %45, %31
  %55 = phi i32 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptosi double %56 to i32
  %58 = or i32 %57, 10
  %59 = mul nsw i32 %58, 8000
  %60 = icmp eq i32 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !382

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = and i64 %10, 4294967288
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <4 x i32> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <4 x i32> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i32, ptr %0, i64 %18
  %22 = load <4 x i32>, ptr %21, align 4, !tbaa !9
  %23 = getelementptr inbounds i32, ptr %21, i64 4
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = or <4 x i32> %22, <i32 63, i32 63, i32 63, i32 63>
  %26 = or <4 x i32> %24, <i32 63, i32 63, i32 63, i32 63>
  %27 = add <4 x i32> %25, %19
  %28 = add <4 x i32> %26, %20
  %29 = add nuw i64 %18, 8
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !384

31:                                               ; preds = %17
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i32 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !385

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !9
  %50 = or i32 %49, 63
  %51 = add nsw i32 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !386

54:                                               ; preds = %45, %31
  %55 = phi i32 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptosi double %56 to i32
  %58 = or i32 %57, 63
  %59 = mul nsw i32 %58, 8000
  %60 = icmp eq i32 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !385

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = xor <4 x i32> %24, <i32 10, i32 10, i32 10, i32 10>
  %28 = xor <4 x i32> %26, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !387

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !388

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = xor i32 %51, 10
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !389

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = xor i32 %59, 10
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = icmp eq i32 %67, 10
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !388

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = xor <4 x i32> %24, <i32 49, i32 49, i32 49, i32 49>
  %28 = xor <4 x i32> %26, <i32 49, i32 49, i32 49, i32 49>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !390

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !391

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = xor i32 %51, 49
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !392

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i32
  %60 = xor i32 %59, 49
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = icmp eq i32 %67, 49
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !391

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !393

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !393

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !394

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !394

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !395

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !395

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = mul i32 %1, 6
  %11 = icmp eq i32 %10, 48000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !396

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !396

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !397

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !397

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !398

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !398

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !399

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !399

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !400

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !400

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !401

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !401

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !402

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !9
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !402

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !26
  %32 = load i64, ptr @start_time, align 8, !tbaa !26
  %33 = load ptr, ptr @results, align 8, !tbaa !5
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %41

37:                                               ; preds = %30
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %53, label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %39, %37 ]
  %43 = add nsw i32 %42, 10
  store i32 %43, ptr @allocated_results, align 4, !tbaa !9
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call ptr @realloc(ptr noundef %33, i64 noundef %45) #14
  store ptr %46, ptr @results, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %53

50:                                               ; preds = %41
  %51 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %51)
  tail call void @exit(i32 noundef -1) #15
  unreachable

53:                                               ; preds = %37, %48
  %54 = phi i32 [ %49, %48 ], [ %38, %37 ]
  %55 = phi ptr [ %46, %48 ], [ %33, %37 ]
  %56 = sub nsw i64 %31, %32
  %57 = sitofp i64 %56 to double
  %58 = fdiv double %57, 1.000000e+06
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59
  store double %58, ptr %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.one_result, ptr %55, i64 %59, i32 1
  store ptr %2, ptr %61, align 8, !tbaa !14
  %62 = add nsw i32 %54, 1
  store i32 %62, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !403

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !403

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !404

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !404

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 10, i32 10, i32 10, i32 10>
  %28 = add <4 x i32> %22, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !405

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !406

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !407

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !406

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 10, i32 10, i32 10, i32 10>
  %28 = add <4 x i32> %22, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !408

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !409

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !410

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !409

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 -10, i32 -10, i32 -10, i32 -10>
  %28 = add <4 x i32> %22, <i32 -10, i32 -10, i32 -10, i32 -10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !411

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !412

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !413

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !412

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 -10, i32 -10, i32 -10, i32 -10>
  %28 = add <4 x i32> %22, <i32 -10, i32 -10, i32 -10, i32 -10>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !414

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !415

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !416

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !415

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = mul <4 x i32> %24, <i32 120, i32 120, i32 120, i32 120>
  %28 = mul <4 x i32> %26, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !417

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !418

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = mul i32 %51, 120
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !419

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 960000
  %61 = icmp eq i32 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i32
  %67 = mul i32 %66, 960000
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !418

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %62

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = mul <4 x i32> %24, <i32 120, i32 120, i32 120, i32 120>
  %28 = mul <4 x i32> %26, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !420

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !421

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = mul i32 %51, 120
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !422

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 960000
  %61 = icmp eq i32 %60, %57
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i32
  %67 = mul i32 %66, 960000
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !421

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 120, i32 120, i32 120, i32 120>
  %28 = add <4 x i32> %22, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !423

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !424

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 120
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !425

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 960000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !424

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = udiv <4 x i32> %24, <i32 5, i32 5, i32 5, i32 5>
  %28 = udiv <4 x i32> %26, <i32 5, i32 5, i32 5, i32 5>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !426

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !427

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = udiv i32 %51, 5
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !428

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = udiv i32 %59, 5
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = udiv i32 %67, 5
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !427

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = udiv <4 x i32> %24, <i32 120, i32 120, i32 120, i32 120>
  %28 = udiv <4 x i32> %26, <i32 120, i32 120, i32 120, i32 120>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !429

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !430

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = udiv i32 %51, 120
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !431

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = udiv i32 %59, 120
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = udiv i32 %67, 120
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !430

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %21, <i32 2, i32 2, i32 2, i32 2>
  %28 = add <4 x i32> %22, <i32 2, i32 2, i32 2, i32 2>
  %29 = add <4 x i32> %27, %24
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !432

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !433

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = add i32 %49, 2
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !434

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 16000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !433

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %76

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %59

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = add <4 x i32> %24, %21
  %28 = add <4 x i32> %26, %22
  %29 = add nuw i64 %20, 8
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !435

31:                                               ; preds = %19
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i32 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %76, !llvm.loop !436

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !9
  %50 = add i32 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !437

53:                                               ; preds = %45, %31
  %54 = phi i32 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptoui double %55 to i32
  %57 = mul i32 %56, 8000
  %58 = icmp eq i32 %57, %54
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %71
  %60 = phi i32 [ %72, %71 ], [ %5, %9 ]
  %61 = phi double [ %73, %71 ], [ %10, %9 ]
  %62 = phi i32 [ %74, %71 ], [ 0, %9 ]
  %63 = fptoui double %61 to i32
  %64 = mul i32 %63, 8000
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr @current_test, align 4, !tbaa !9
  %68 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %67)
  %69 = load double, ptr @init_value, align 8, !tbaa !28
  %70 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %71

71:                                               ; preds = %59, %66
  %72 = phi i32 [ %60, %59 ], [ %70, %66 ]
  %73 = phi double [ %61, %59 ], [ %69, %66 ]
  %74 = add nuw nsw i32 %62, 1
  %75 = icmp slt i32 %74, %72
  br i1 %75, label %59, label %76, !llvm.loop !436

76:                                               ; preds = %71, %41, %3
  %77 = tail call i64 @clock() #17
  store i64 %77, ptr @end_time, align 8, !tbaa !26
  %78 = load i64, ptr @start_time, align 8, !tbaa !26
  %79 = load ptr, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  %82 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %87

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %99, label %87

87:                                               ; preds = %83, %81
  %88 = phi i32 [ %82, %81 ], [ %85, %83 ]
  %89 = add nsw i32 %88, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !9
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %79, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !5
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %87
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %99

96:                                               ; preds = %87
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %83, %94
  %100 = phi i32 [ %95, %94 ], [ %84, %83 ]
  %101 = phi ptr [ %92, %94 ], [ %79, %83 ]
  %102 = sub nsw i64 %77, %78
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !11
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !14
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = and <4 x i32> %24, <i32 10, i32 10, i32 10, i32 10>
  %28 = and <4 x i32> %26, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !438

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !439

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = and i32 %51, 10
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !440

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = and i32 %59, 10
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = and i32 %67, 10
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !439

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = and <4 x i32> %24, <i32 14, i32 14, i32 14, i32 14>
  %28 = and <4 x i32> %26, <i32 14, i32 14, i32 14, i32 14>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !441

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !442

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = and i32 %51, 14
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !443

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = and i32 %59, 14
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = and i32 %67, 14
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !442

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = or <4 x i32> %24, <i32 10, i32 10, i32 10, i32 10>
  %28 = or <4 x i32> %26, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !444

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !445

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = or i32 %51, 10
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !446

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = or i32 %59, 10
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = or i32 %67, 10
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !445

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = and i64 %10, 4294967288
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <4 x i32> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <4 x i32> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i32, ptr %0, i64 %18
  %22 = load <4 x i32>, ptr %21, align 4, !tbaa !9
  %23 = getelementptr inbounds i32, ptr %21, i64 4
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = or <4 x i32> %22, <i32 63, i32 63, i32 63, i32 63>
  %26 = or <4 x i32> %24, <i32 63, i32 63, i32 63, i32 63>
  %27 = add <4 x i32> %25, %19
  %28 = add <4 x i32> %26, %20
  %29 = add nuw i64 %18, 8
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !447

31:                                               ; preds = %17
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i32 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !448

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !9
  %50 = or i32 %49, 63
  %51 = add i32 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !449

54:                                               ; preds = %45, %31
  %55 = phi i32 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptoui double %56 to i32
  %58 = or i32 %57, 63
  %59 = mul i32 %58, 8000
  %60 = icmp eq i32 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !448

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = xor <4 x i32> %24, <i32 10, i32 10, i32 10, i32 10>
  %28 = xor <4 x i32> %26, <i32 10, i32 10, i32 10, i32 10>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !450

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !451

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = xor i32 %51, 10
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !452

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = xor i32 %59, 10
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = xor i32 %67, 10
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !451

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 4294967288
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i32, ptr %0, i64 %20
  %24 = load <4 x i32>, ptr %23, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, ptr %23, i64 4
  %26 = load <4 x i32>, ptr %25, align 4, !tbaa !9
  %27 = xor <4 x i32> %24, <i32 49, i32 49, i32 49, i32 49>
  %28 = xor <4 x i32> %26, <i32 49, i32 49, i32 49, i32 49>
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !453

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !454

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !9
  %52 = xor i32 %51, 49
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !455

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i32
  %60 = xor i32 %59, 49
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = xor i32 %67, 49
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !454

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !456

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !456

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !457

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !457

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !458

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !458

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !459

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !459

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !460

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !460

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !461

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !461

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !462

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !462

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !463

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !463

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !464

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !464

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !465

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !465

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !466

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !466

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !467

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !467

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 10, i64 10>
  %28 = add <2 x i64> %22, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !468

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !469

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !470

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !469

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 10, i64 10>
  %28 = add <2 x i64> %22, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !471

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !472

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !473

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !472

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 -10, i64 -10>
  %28 = add <2 x i64> %22, <i64 -10, i64 -10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !474

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !475

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !476

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !475

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 -10, i64 -10>
  %28 = add <2 x i64> %22, <i64 -10, i64 -10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !477

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !478

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !479

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !478

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %92

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %75

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %92, !llvm.loop !480

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %50, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = mul nsw i64 %33, 120
  %35 = add nsw i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = mul nsw i64 %38, 120
  %40 = add nsw i64 %39, %35
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds i64, ptr %0, i64 %41
  %43 = load i64, ptr %42, align 8, !tbaa !26
  %44 = mul nsw i64 %43, 120
  %45 = add nsw i64 %44, %40
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds i64, ptr %0, i64 %46
  %48 = load i64, ptr %47, align 8, !tbaa !26
  %49 = mul nsw i64 %48, 120
  %50 = add nsw i64 %49, %45
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !481

54:                                               ; preds = %28, %17
  %55 = phi i64 [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi i64 [ 0, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi i64 [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds i64, ptr %0, i64 %59
  %63 = load i64, ptr %62, align 8, !tbaa !26
  %64 = mul nsw i64 %63, 120
  %65 = add nsw i64 %64, %60
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !482

69:                                               ; preds = %58, %54
  %70 = phi i64 [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptosi double %71 to i64
  %73 = mul i64 %72, 960000
  %74 = icmp eq i64 %73, %70
  br i1 %74, label %24, label %20

75:                                               ; preds = %9, %87
  %76 = phi i32 [ %88, %87 ], [ %5, %9 ]
  %77 = phi double [ %89, %87 ], [ %10, %9 ]
  %78 = phi i32 [ %90, %87 ], [ 0, %9 ]
  %79 = fptosi double %77 to i64
  %80 = mul i64 %79, 960000
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %75
  %83 = load i32, ptr @current_test, align 4, !tbaa !9
  %84 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %83)
  %85 = load double, ptr @init_value, align 8, !tbaa !28
  %86 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %87

87:                                               ; preds = %75, %82
  %88 = phi i32 [ %76, %75 ], [ %86, %82 ]
  %89 = phi double [ %77, %75 ], [ %85, %82 ]
  %90 = add nuw nsw i32 %78, 1
  %91 = icmp slt i32 %90, %88
  br i1 %91, label %75, label %92, !llvm.loop !480

92:                                               ; preds = %87, %24, %3
  %93 = tail call i64 @clock() #17
  store i64 %93, ptr @end_time, align 8, !tbaa !26
  %94 = load i64, ptr @start_time, align 8, !tbaa !26
  %95 = load ptr, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %103

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %115, label %103

103:                                              ; preds = %99, %97
  %104 = phi i32 [ %98, %97 ], [ %101, %99 ]
  %105 = add nsw i32 %104, 10
  store i32 %105, ptr @allocated_results, align 4, !tbaa !9
  %106 = sext i32 %105 to i64
  %107 = shl nsw i64 %106, 4
  %108 = tail call ptr @realloc(ptr noundef %95, i64 noundef %107) #14
  store ptr %108, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %112, label %110

110:                                              ; preds = %103
  %111 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %115

112:                                              ; preds = %103
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %113)
  tail call void @exit(i32 noundef -1) #15
  unreachable

115:                                              ; preds = %99, %110
  %116 = phi i32 [ %111, %110 ], [ %100, %99 ]
  %117 = phi ptr [ %108, %110 ], [ %95, %99 ]
  %118 = sub nsw i64 %93, %94
  %119 = sitofp i64 %118 to double
  %120 = fdiv double %119, 1.000000e+06
  %121 = sext i32 %116 to i64
  %122 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121
  store double %120, ptr %122, align 8, !tbaa !11
  %123 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121, i32 1
  store ptr %2, ptr %123, align 8, !tbaa !14
  %124 = add nsw i32 %116, 1
  store i32 %124, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %92

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %75

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %92, !llvm.loop !483

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %50, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = mul i64 %33, 120
  %35 = add nsw i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = mul i64 %38, 120
  %40 = add nsw i64 %39, %35
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds i64, ptr %0, i64 %41
  %43 = load i64, ptr %42, align 8, !tbaa !26
  %44 = mul i64 %43, 120
  %45 = add nsw i64 %44, %40
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds i64, ptr %0, i64 %46
  %48 = load i64, ptr %47, align 8, !tbaa !26
  %49 = mul i64 %48, 120
  %50 = add nsw i64 %49, %45
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !484

54:                                               ; preds = %28, %17
  %55 = phi i64 [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi i64 [ 0, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi i64 [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds i64, ptr %0, i64 %59
  %63 = load i64, ptr %62, align 8, !tbaa !26
  %64 = mul i64 %63, 120
  %65 = add nsw i64 %64, %60
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !485

69:                                               ; preds = %58, %54
  %70 = phi i64 [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptosi double %71 to i64
  %73 = mul i64 %72, 960000
  %74 = icmp eq i64 %73, %70
  br i1 %74, label %24, label %20

75:                                               ; preds = %9, %87
  %76 = phi i32 [ %88, %87 ], [ %5, %9 ]
  %77 = phi double [ %89, %87 ], [ %10, %9 ]
  %78 = phi i32 [ %90, %87 ], [ 0, %9 ]
  %79 = fptosi double %77 to i64
  %80 = mul i64 %79, 960000
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %75
  %83 = load i32, ptr @current_test, align 4, !tbaa !9
  %84 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %83)
  %85 = load double, ptr @init_value, align 8, !tbaa !28
  %86 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %87

87:                                               ; preds = %75, %82
  %88 = phi i32 [ %76, %75 ], [ %86, %82 ]
  %89 = phi double [ %77, %75 ], [ %85, %82 ]
  %90 = add nuw nsw i32 %78, 1
  %91 = icmp slt i32 %90, %88
  br i1 %91, label %75, label %92, !llvm.loop !483

92:                                               ; preds = %87, %24, %3
  %93 = tail call i64 @clock() #17
  store i64 %93, ptr @end_time, align 8, !tbaa !26
  %94 = load i64, ptr @start_time, align 8, !tbaa !26
  %95 = load ptr, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %103

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %115, label %103

103:                                              ; preds = %99, %97
  %104 = phi i32 [ %98, %97 ], [ %101, %99 ]
  %105 = add nsw i32 %104, 10
  store i32 %105, ptr @allocated_results, align 4, !tbaa !9
  %106 = sext i32 %105 to i64
  %107 = shl nsw i64 %106, 4
  %108 = tail call ptr @realloc(ptr noundef %95, i64 noundef %107) #14
  store ptr %108, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %112, label %110

110:                                              ; preds = %103
  %111 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %115

112:                                              ; preds = %103
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %113)
  tail call void @exit(i32 noundef -1) #15
  unreachable

115:                                              ; preds = %99, %110
  %116 = phi i32 [ %111, %110 ], [ %100, %99 ]
  %117 = phi ptr [ %108, %110 ], [ %95, %99 ]
  %118 = sub nsw i64 %93, %94
  %119 = sitofp i64 %118 to double
  %120 = fdiv double %119, 1.000000e+06
  %121 = sext i32 %116 to i64
  %122 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121
  store double %120, ptr %122, align 8, !tbaa !11
  %123 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121, i32 1
  store ptr %2, ptr %123, align 8, !tbaa !14
  %124 = add nsw i32 %116, 1
  store i32 %124, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 120, i64 120>
  %28 = add <2 x i64> %22, <i64 120, i64 120>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !486

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !487

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 120
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !488

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 960000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !487

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %77

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %60

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %44, label %28

20:                                               ; preds = %53
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %53
  %25 = phi i32 [ %23, %20 ], [ %18, %53 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %77, !llvm.loop !489

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %41, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %40, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %42, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = sdiv i64 %33, 5
  %35 = add nsw i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = sdiv i64 %38, 5
  %40 = add nsw i64 %39, %35
  %41 = add nuw nsw i64 %29, 2
  %42 = add i64 %31, 2
  %43 = icmp eq i64 %42, %15
  br i1 %43, label %44, label %28, !llvm.loop !490

44:                                               ; preds = %28, %17
  %45 = phi i64 [ undef, %17 ], [ %40, %28 ]
  %46 = phi i64 [ 0, %17 ], [ %41, %28 ]
  %47 = phi i64 [ 0, %17 ], [ %40, %28 ]
  br i1 %16, label %53, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i64, ptr %0, i64 %46
  %50 = load i64, ptr %49, align 8, !tbaa !26
  %51 = sdiv i64 %50, 5
  %52 = add nsw i64 %51, %47
  br label %53

53:                                               ; preds = %44, %48
  %54 = phi i64 [ %45, %44 ], [ %52, %48 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptosi double %55 to i64
  %57 = sdiv i64 %56, 5
  %58 = mul nsw i64 %57, 8000
  %59 = icmp eq i64 %58, %54
  br i1 %59, label %24, label %20

60:                                               ; preds = %9, %72
  %61 = phi i32 [ %73, %72 ], [ %5, %9 ]
  %62 = phi double [ %74, %72 ], [ %10, %9 ]
  %63 = phi i32 [ %75, %72 ], [ 0, %9 ]
  %64 = fptosi double %62 to i64
  %65 = add i64 %64, 4
  %66 = icmp ult i64 %65, 9
  br i1 %66, label %72, label %67

67:                                               ; preds = %60
  %68 = load i32, ptr @current_test, align 4, !tbaa !9
  %69 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %68)
  %70 = load double, ptr @init_value, align 8, !tbaa !28
  %71 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %72

72:                                               ; preds = %60, %67
  %73 = phi i32 [ %61, %60 ], [ %71, %67 ]
  %74 = phi double [ %62, %60 ], [ %70, %67 ]
  %75 = add nuw nsw i32 %63, 1
  %76 = icmp slt i32 %75, %73
  br i1 %76, label %60, label %77, !llvm.loop !489

77:                                               ; preds = %72, %24, %3
  %78 = tail call i64 @clock() #17
  store i64 %78, ptr @end_time, align 8, !tbaa !26
  %79 = load i64, ptr @start_time, align 8, !tbaa !26
  %80 = load ptr, ptr @results, align 8, !tbaa !5
  %81 = icmp eq ptr %80, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %88

84:                                               ; preds = %77
  %85 = load i32, ptr @current_test, align 4, !tbaa !9
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %100, label %88

88:                                               ; preds = %84, %82
  %89 = phi i32 [ %83, %82 ], [ %86, %84 ]
  %90 = add nsw i32 %89, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !9
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %80, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !5
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %88
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %100

97:                                               ; preds = %88
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %96, %95 ], [ %85, %84 ]
  %102 = phi ptr [ %93, %95 ], [ %80, %84 ]
  %103 = sub nsw i64 %78, %79
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !11
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !14
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %77

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %60

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %44, label %28

20:                                               ; preds = %53
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %53
  %25 = phi i32 [ %23, %20 ], [ %18, %53 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %77, !llvm.loop !491

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %41, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %40, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %42, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = sdiv i64 %33, 120
  %35 = add nsw i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = sdiv i64 %38, 120
  %40 = add nsw i64 %39, %35
  %41 = add nuw nsw i64 %29, 2
  %42 = add i64 %31, 2
  %43 = icmp eq i64 %42, %15
  br i1 %43, label %44, label %28, !llvm.loop !492

44:                                               ; preds = %28, %17
  %45 = phi i64 [ undef, %17 ], [ %40, %28 ]
  %46 = phi i64 [ 0, %17 ], [ %41, %28 ]
  %47 = phi i64 [ 0, %17 ], [ %40, %28 ]
  br i1 %16, label %53, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i64, ptr %0, i64 %46
  %50 = load i64, ptr %49, align 8, !tbaa !26
  %51 = sdiv i64 %50, 120
  %52 = add nsw i64 %51, %47
  br label %53

53:                                               ; preds = %44, %48
  %54 = phi i64 [ %45, %44 ], [ %52, %48 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptosi double %55 to i64
  %57 = sdiv i64 %56, 120
  %58 = mul nsw i64 %57, 8000
  %59 = icmp eq i64 %58, %54
  br i1 %59, label %24, label %20

60:                                               ; preds = %9, %72
  %61 = phi i32 [ %73, %72 ], [ %5, %9 ]
  %62 = phi double [ %74, %72 ], [ %10, %9 ]
  %63 = phi i32 [ %75, %72 ], [ 0, %9 ]
  %64 = fptosi double %62 to i64
  %65 = add i64 %64, 119
  %66 = icmp ult i64 %65, 239
  br i1 %66, label %72, label %67

67:                                               ; preds = %60
  %68 = load i32, ptr @current_test, align 4, !tbaa !9
  %69 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %68)
  %70 = load double, ptr @init_value, align 8, !tbaa !28
  %71 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %72

72:                                               ; preds = %60, %67
  %73 = phi i32 [ %61, %60 ], [ %71, %67 ]
  %74 = phi double [ %62, %60 ], [ %70, %67 ]
  %75 = add nuw nsw i32 %63, 1
  %76 = icmp slt i32 %75, %73
  br i1 %76, label %60, label %77, !llvm.loop !491

77:                                               ; preds = %72, %24, %3
  %78 = tail call i64 @clock() #17
  store i64 %78, ptr @end_time, align 8, !tbaa !26
  %79 = load i64, ptr @start_time, align 8, !tbaa !26
  %80 = load ptr, ptr @results, align 8, !tbaa !5
  %81 = icmp eq ptr %80, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %88

84:                                               ; preds = %77
  %85 = load i32, ptr @current_test, align 4, !tbaa !9
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %100, label %88

88:                                               ; preds = %84, %82
  %89 = phi i32 [ %83, %82 ], [ %86, %84 ]
  %90 = add nsw i32 %89, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !9
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %80, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !5
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %88
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %100

97:                                               ; preds = %88
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %96, %95 ], [ %85, %84 ]
  %102 = phi ptr [ %93, %95 ], [ %80, %84 ]
  %103 = sub nsw i64 %78, %79
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !11
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !14
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 2, i64 2>
  %28 = add <2 x i64> %22, <i64 2, i64 2>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !493

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !494

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 2
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !495

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 16000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !494

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %59

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %24, %21
  %28 = add <2 x i64> %26, %22
  %29 = add nuw i64 %20, 4
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !496

31:                                               ; preds = %19
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i64 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %75, !llvm.loop !497

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !26
  %50 = add nsw i64 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !498

53:                                               ; preds = %45, %31
  %54 = phi i64 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptosi double %55 to i64
  %57 = mul nsw i64 %56, 8000
  %58 = icmp eq i64 %57, %54
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %70
  %60 = phi i32 [ %71, %70 ], [ %5, %9 ]
  %61 = phi double [ %72, %70 ], [ %10, %9 ]
  %62 = phi i32 [ %73, %70 ], [ 0, %9 ]
  %63 = fptosi double %61 to i64
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = load i32, ptr @current_test, align 4, !tbaa !9
  %67 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %66)
  %68 = load double, ptr @init_value, align 8, !tbaa !28
  %69 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %70

70:                                               ; preds = %59, %65
  %71 = phi i32 [ %60, %59 ], [ %69, %65 ]
  %72 = phi double [ %61, %59 ], [ %68, %65 ]
  %73 = add nuw nsw i32 %62, 1
  %74 = icmp slt i32 %73, %71
  br i1 %74, label %59, label %75, !llvm.loop !497

75:                                               ; preds = %70, %41, %3
  %76 = tail call i64 @clock() #17
  store i64 %76, ptr @end_time, align 8, !tbaa !26
  %77 = load i64, ptr @start_time, align 8, !tbaa !26
  %78 = load ptr, ptr @results, align 8, !tbaa !5
  %79 = icmp eq ptr %78, null
  br i1 %79, label %80, label %82

80:                                               ; preds = %75
  %81 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %86

82:                                               ; preds = %75
  %83 = load i32, ptr @current_test, align 4, !tbaa !9
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %98, label %86

86:                                               ; preds = %82, %80
  %87 = phi i32 [ %81, %80 ], [ %84, %82 ]
  %88 = add nsw i32 %87, 10
  store i32 %88, ptr @allocated_results, align 4, !tbaa !9
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 4
  %91 = tail call ptr @realloc(ptr noundef %78, i64 noundef %90) #14
  store ptr %91, ptr @results, align 8, !tbaa !5
  %92 = icmp eq ptr %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %86
  %94 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %98

95:                                               ; preds = %86
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %96)
  tail call void @exit(i32 noundef -1) #15
  unreachable

98:                                               ; preds = %82, %93
  %99 = phi i32 [ %94, %93 ], [ %83, %82 ]
  %100 = phi ptr [ %91, %93 ], [ %78, %82 ]
  %101 = sub nsw i64 %76, %77
  %102 = sitofp i64 %101 to double
  %103 = fdiv double %102, 1.000000e+06
  %104 = sext i32 %99 to i64
  %105 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104
  store double %103, ptr %105, align 8, !tbaa !11
  %106 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104, i32 1
  store ptr %2, ptr %106, align 8, !tbaa !14
  %107 = add nsw i32 %99, 1
  store i32 %107, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = and <2 x i64> %24, <i64 10, i64 10>
  %28 = and <2 x i64> %26, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !499

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !500

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = and i64 %51, 10
  %53 = add nuw nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !501

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = and i64 %59, 10
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = and i64 %67, 10
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !500

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = and <2 x i64> %24, <i64 14, i64 14>
  %28 = and <2 x i64> %26, <i64 14, i64 14>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !502

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !503

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = and i64 %51, 14
  %53 = add nuw nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !504

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = and i64 %59, 14
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = and i64 %67, 14
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !503

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = and i64 %10, 4294967292
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <2 x i64> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <2 x i64> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i64, ptr %0, i64 %18
  %22 = load <2 x i64>, ptr %21, align 8, !tbaa !26
  %23 = getelementptr inbounds i64, ptr %21, i64 2
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = or <2 x i64> %22, <i64 10, i64 10>
  %26 = or <2 x i64> %24, <i64 10, i64 10>
  %27 = add <2 x i64> %25, %19
  %28 = add <2 x i64> %26, %20
  %29 = add nuw i64 %18, 4
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !505

31:                                               ; preds = %17
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i64 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !506

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !26
  %50 = or i64 %49, 10
  %51 = add nsw i64 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !507

54:                                               ; preds = %45, %31
  %55 = phi i64 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptosi double %56 to i64
  %58 = or i64 %57, 10
  %59 = mul nsw i64 %58, 8000
  %60 = icmp eq i64 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !506

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = and i64 %10, 4294967292
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <2 x i64> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <2 x i64> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i64, ptr %0, i64 %18
  %22 = load <2 x i64>, ptr %21, align 8, !tbaa !26
  %23 = getelementptr inbounds i64, ptr %21, i64 2
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = or <2 x i64> %22, <i64 63, i64 63>
  %26 = or <2 x i64> %24, <i64 63, i64 63>
  %27 = add <2 x i64> %25, %19
  %28 = add <2 x i64> %26, %20
  %29 = add nuw i64 %18, 4
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !508

31:                                               ; preds = %17
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i64 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !509

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !26
  %50 = or i64 %49, 63
  %51 = add nsw i64 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !510

54:                                               ; preds = %45, %31
  %55 = phi i64 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptosi double %56 to i64
  %58 = or i64 %57, 63
  %59 = mul nsw i64 %58, 8000
  %60 = icmp eq i64 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !509

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = xor <2 x i64> %24, <i64 10, i64 10>
  %28 = xor <2 x i64> %26, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !511

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !512

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = xor i64 %51, 10
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !513

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = xor i64 %59, 10
  %61 = mul nsw i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = icmp eq i64 %67, 10
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !512

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = xor <2 x i64> %24, <i64 49, i64 49>
  %28 = xor <2 x i64> %26, <i64 49, i64 49>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !514

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !515

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = xor i64 %51, 49
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !516

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptosi double %58 to i64
  %60 = xor i64 %59, 49
  %61 = mul nsw i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = icmp eq i64 %67, 49
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !9
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !28
  %73 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !515

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !26
  %81 = load i64, ptr @start_time, align 8, !tbaa !26
  %82 = load ptr, ptr @results, align 8, !tbaa !5
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %90

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  %88 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %85, %84 ], [ %88, %86 ]
  %92 = add nsw i32 %91, 10
  store i32 %92, ptr @allocated_results, align 4, !tbaa !9
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 4
  %95 = tail call ptr @realloc(ptr noundef %82, i64 noundef %94) #14
  store ptr %95, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %102

99:                                               ; preds = %90
  %100 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %100)
  tail call void @exit(i32 noundef -1) #15
  unreachable

102:                                              ; preds = %86, %97
  %103 = phi i32 [ %98, %97 ], [ %87, %86 ]
  %104 = phi ptr [ %95, %97 ], [ %82, %86 ]
  %105 = sub nsw i64 %80, %81
  %106 = sitofp i64 %105 to double
  %107 = fdiv double %106, 1.000000e+06
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108
  store double %107, ptr %109, align 8, !tbaa !11
  %110 = getelementptr inbounds %struct.one_result, ptr %104, i64 %108, i32 1
  store ptr %2, ptr %110, align 8, !tbaa !14
  %111 = add nsw i32 %103, 1
  store i32 %111, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !517

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !517

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !518

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !518

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !519

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !519

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !520

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !520

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !521

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !521

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !522

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !522

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !523

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !523

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !524

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !524

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !525

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !525

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %15

11:                                               ; preds = %3
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %9
  %16 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %17 = add nsw i32 %16, 10
  store i32 %17, ptr @allocated_results, align 4, !tbaa !9
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef %7, i64 noundef %19) #14
  store ptr %20, ptr @results, align 8, !tbaa !5
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %27

24:                                               ; preds = %15
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

27:                                               ; preds = %11, %22
  %28 = phi i32 [ %23, %22 ], [ %12, %11 ]
  %29 = phi ptr [ %20, %22 ], [ %7, %11 ]
  %30 = sub nsw i64 %5, %6
  %31 = sitofp i64 %30 to double
  %32 = fdiv double %31, 1.000000e+06
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33
  store double %32, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds %struct.one_result, ptr %29, i64 %33, i32 1
  store ptr %2, ptr %35, align 8, !tbaa !14
  %36 = add nsw i32 %28, 1
  store i32 %36, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !526

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !526

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !527

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !527

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !528

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !9
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !528

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !26
  %31 = load i64, ptr @start_time, align 8, !tbaa !26
  %32 = load ptr, ptr @results, align 8, !tbaa !5
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %40

36:                                               ; preds = %29
  %37 = load i32, ptr @current_test, align 4, !tbaa !9
  %38 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %52, label %40

40:                                               ; preds = %36, %34
  %41 = phi i32 [ %35, %34 ], [ %38, %36 ]
  %42 = add nsw i32 %41, 10
  store i32 %42, ptr @allocated_results, align 4, !tbaa !9
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 4
  %45 = tail call ptr @realloc(ptr noundef %32, i64 noundef %44) #14
  store ptr %45, ptr @results, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %52

49:                                               ; preds = %40
  %50 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %50)
  tail call void @exit(i32 noundef -1) #15
  unreachable

52:                                               ; preds = %36, %47
  %53 = phi i32 [ %48, %47 ], [ %37, %36 ]
  %54 = phi ptr [ %45, %47 ], [ %32, %36 ]
  %55 = sub nsw i64 %30, %31
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %56, 1.000000e+06
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58
  store double %57, ptr %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.one_result, ptr %54, i64 %58, i32 1
  store ptr %2, ptr %60, align 8, !tbaa !14
  %61 = add nsw i32 %53, 1
  store i32 %61, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 10, i64 10>
  %28 = add <2 x i64> %22, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !529

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !530

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !531

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !530

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 10, i64 10>
  %28 = add <2 x i64> %22, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !532

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !533

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !534

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !533

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 -10, i64 -10>
  %28 = add <2 x i64> %22, <i64 -10, i64 -10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !535

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !536

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !537

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !536

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 -10, i64 -10>
  %28 = add <2 x i64> %22, <i64 -10, i64 -10>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !538

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !539

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !540

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !539

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %92

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %75

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %92, !llvm.loop !541

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %50, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = mul i64 %33, 120
  %35 = add i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = mul i64 %38, 120
  %40 = add i64 %39, %35
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds i64, ptr %0, i64 %41
  %43 = load i64, ptr %42, align 8, !tbaa !26
  %44 = mul i64 %43, 120
  %45 = add i64 %44, %40
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds i64, ptr %0, i64 %46
  %48 = load i64, ptr %47, align 8, !tbaa !26
  %49 = mul i64 %48, 120
  %50 = add i64 %49, %45
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !542

54:                                               ; preds = %28, %17
  %55 = phi i64 [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi i64 [ 0, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi i64 [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds i64, ptr %0, i64 %59
  %63 = load i64, ptr %62, align 8, !tbaa !26
  %64 = mul i64 %63, 120
  %65 = add i64 %64, %60
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !543

69:                                               ; preds = %58, %54
  %70 = phi i64 [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptoui double %71 to i64
  %73 = mul i64 %72, 960000
  %74 = icmp eq i64 %73, %70
  br i1 %74, label %24, label %20

75:                                               ; preds = %9, %87
  %76 = phi i32 [ %88, %87 ], [ %5, %9 ]
  %77 = phi double [ %89, %87 ], [ %10, %9 ]
  %78 = phi i32 [ %90, %87 ], [ 0, %9 ]
  %79 = fptoui double %77 to i64
  %80 = mul i64 %79, 960000
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %75
  %83 = load i32, ptr @current_test, align 4, !tbaa !9
  %84 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %83)
  %85 = load double, ptr @init_value, align 8, !tbaa !28
  %86 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %87

87:                                               ; preds = %75, %82
  %88 = phi i32 [ %76, %75 ], [ %86, %82 ]
  %89 = phi double [ %77, %75 ], [ %85, %82 ]
  %90 = add nuw nsw i32 %78, 1
  %91 = icmp slt i32 %90, %88
  br i1 %91, label %75, label %92, !llvm.loop !541

92:                                               ; preds = %87, %24, %3
  %93 = tail call i64 @clock() #17
  store i64 %93, ptr @end_time, align 8, !tbaa !26
  %94 = load i64, ptr @start_time, align 8, !tbaa !26
  %95 = load ptr, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %103

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %115, label %103

103:                                              ; preds = %99, %97
  %104 = phi i32 [ %98, %97 ], [ %101, %99 ]
  %105 = add nsw i32 %104, 10
  store i32 %105, ptr @allocated_results, align 4, !tbaa !9
  %106 = sext i32 %105 to i64
  %107 = shl nsw i64 %106, 4
  %108 = tail call ptr @realloc(ptr noundef %95, i64 noundef %107) #14
  store ptr %108, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %112, label %110

110:                                              ; preds = %103
  %111 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %115

112:                                              ; preds = %103
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %113)
  tail call void @exit(i32 noundef -1) #15
  unreachable

115:                                              ; preds = %99, %110
  %116 = phi i32 [ %111, %110 ], [ %100, %99 ]
  %117 = phi ptr [ %108, %110 ], [ %95, %99 ]
  %118 = sub nsw i64 %93, %94
  %119 = sitofp i64 %118 to double
  %120 = fdiv double %119, 1.000000e+06
  %121 = sext i32 %116 to i64
  %122 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121
  store double %120, ptr %122, align 8, !tbaa !11
  %123 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121, i32 1
  store ptr %2, ptr %123, align 8, !tbaa !14
  %124 = add nsw i32 %116, 1
  store i32 %124, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %92

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %75

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %92, !llvm.loop !544

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %50, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = mul i64 %33, 120
  %35 = add i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = mul i64 %38, 120
  %40 = add i64 %39, %35
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds i64, ptr %0, i64 %41
  %43 = load i64, ptr %42, align 8, !tbaa !26
  %44 = mul i64 %43, 120
  %45 = add i64 %44, %40
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds i64, ptr %0, i64 %46
  %48 = load i64, ptr %47, align 8, !tbaa !26
  %49 = mul i64 %48, 120
  %50 = add i64 %49, %45
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !545

54:                                               ; preds = %28, %17
  %55 = phi i64 [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi i64 [ 0, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi i64 [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds i64, ptr %0, i64 %59
  %63 = load i64, ptr %62, align 8, !tbaa !26
  %64 = mul i64 %63, 120
  %65 = add i64 %64, %60
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !546

69:                                               ; preds = %58, %54
  %70 = phi i64 [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptoui double %71 to i64
  %73 = mul i64 %72, 960000
  %74 = icmp eq i64 %73, %70
  br i1 %74, label %24, label %20

75:                                               ; preds = %9, %87
  %76 = phi i32 [ %88, %87 ], [ %5, %9 ]
  %77 = phi double [ %89, %87 ], [ %10, %9 ]
  %78 = phi i32 [ %90, %87 ], [ 0, %9 ]
  %79 = fptoui double %77 to i64
  %80 = mul i64 %79, 960000
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %75
  %83 = load i32, ptr @current_test, align 4, !tbaa !9
  %84 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %83)
  %85 = load double, ptr @init_value, align 8, !tbaa !28
  %86 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %87

87:                                               ; preds = %75, %82
  %88 = phi i32 [ %76, %75 ], [ %86, %82 ]
  %89 = phi double [ %77, %75 ], [ %85, %82 ]
  %90 = add nuw nsw i32 %78, 1
  %91 = icmp slt i32 %90, %88
  br i1 %91, label %75, label %92, !llvm.loop !544

92:                                               ; preds = %87, %24, %3
  %93 = tail call i64 @clock() #17
  store i64 %93, ptr @end_time, align 8, !tbaa !26
  %94 = load i64, ptr @start_time, align 8, !tbaa !26
  %95 = load ptr, ptr @results, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %103

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %115, label %103

103:                                              ; preds = %99, %97
  %104 = phi i32 [ %98, %97 ], [ %101, %99 ]
  %105 = add nsw i32 %104, 10
  store i32 %105, ptr @allocated_results, align 4, !tbaa !9
  %106 = sext i32 %105 to i64
  %107 = shl nsw i64 %106, 4
  %108 = tail call ptr @realloc(ptr noundef %95, i64 noundef %107) #14
  store ptr %108, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %112, label %110

110:                                              ; preds = %103
  %111 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %115

112:                                              ; preds = %103
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %113)
  tail call void @exit(i32 noundef -1) #15
  unreachable

115:                                              ; preds = %99, %110
  %116 = phi i32 [ %111, %110 ], [ %100, %99 ]
  %117 = phi ptr [ %108, %110 ], [ %95, %99 ]
  %118 = sub nsw i64 %93, %94
  %119 = sitofp i64 %118 to double
  %120 = fdiv double %119, 1.000000e+06
  %121 = sext i32 %116 to i64
  %122 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121
  store double %120, ptr %122, align 8, !tbaa !11
  %123 = getelementptr inbounds %struct.one_result, ptr %117, i64 %121, i32 1
  store ptr %2, ptr %123, align 8, !tbaa !14
  %124 = add nsw i32 %116, 1
  store i32 %124, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 120, i64 120>
  %28 = add <2 x i64> %22, <i64 120, i64 120>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !547

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !548

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 120
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !549

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 960000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !548

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %60

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %44, label %28

20:                                               ; preds = %53
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %53
  %25 = phi i32 [ %23, %20 ], [ %18, %53 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %78, !llvm.loop !550

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %41, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %40, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %42, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = udiv i64 %33, 5
  %35 = add i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = udiv i64 %38, 5
  %40 = add i64 %39, %35
  %41 = add nuw nsw i64 %29, 2
  %42 = add i64 %31, 2
  %43 = icmp eq i64 %42, %15
  br i1 %43, label %44, label %28, !llvm.loop !551

44:                                               ; preds = %28, %17
  %45 = phi i64 [ undef, %17 ], [ %40, %28 ]
  %46 = phi i64 [ 0, %17 ], [ %41, %28 ]
  %47 = phi i64 [ 0, %17 ], [ %40, %28 ]
  br i1 %16, label %53, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i64, ptr %0, i64 %46
  %50 = load i64, ptr %49, align 8, !tbaa !26
  %51 = udiv i64 %50, 5
  %52 = add i64 %51, %47
  br label %53

53:                                               ; preds = %44, %48
  %54 = phi i64 [ %45, %44 ], [ %52, %48 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptoui double %55 to i64
  %57 = udiv i64 %56, 5
  %58 = mul i64 %57, 8000
  %59 = icmp eq i64 %58, %54
  br i1 %59, label %24, label %20

60:                                               ; preds = %9, %73
  %61 = phi i32 [ %74, %73 ], [ %5, %9 ]
  %62 = phi double [ %75, %73 ], [ %10, %9 ]
  %63 = phi i32 [ %76, %73 ], [ 0, %9 ]
  %64 = fptoui double %62 to i64
  %65 = udiv i64 %64, 5
  %66 = mul i64 %65, 8000
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %60
  %69 = load i32, ptr @current_test, align 4, !tbaa !9
  %70 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %69)
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %73

73:                                               ; preds = %60, %68
  %74 = phi i32 [ %61, %60 ], [ %72, %68 ]
  %75 = phi double [ %62, %60 ], [ %71, %68 ]
  %76 = add nuw nsw i32 %63, 1
  %77 = icmp slt i32 %76, %74
  br i1 %77, label %60, label %78, !llvm.loop !550

78:                                               ; preds = %73, %24, %3
  %79 = tail call i64 @clock() #17
  store i64 %79, ptr @end_time, align 8, !tbaa !26
  %80 = load i64, ptr @start_time, align 8, !tbaa !26
  %81 = load ptr, ptr @results, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %89

85:                                               ; preds = %78
  %86 = load i32, ptr @current_test, align 4, !tbaa !9
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %101, label %89

89:                                               ; preds = %85, %83
  %90 = phi i32 [ %84, %83 ], [ %87, %85 ]
  %91 = add nsw i32 %90, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !9
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %81, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !5
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %89
  %97 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %101

98:                                               ; preds = %89
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %85, %96
  %102 = phi i32 [ %97, %96 ], [ %86, %85 ]
  %103 = phi ptr [ %94, %96 ], [ %81, %85 ]
  %104 = sub nsw i64 %79, %80
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !11
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !14
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %60

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %44, label %28

20:                                               ; preds = %53
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %53
  %25 = phi i32 [ %23, %20 ], [ %18, %53 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %78, !llvm.loop !552

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %41, %28 ], [ 0, %17 ]
  %30 = phi i64 [ %40, %28 ], [ 0, %17 ]
  %31 = phi i64 [ %42, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds i64, ptr %0, i64 %29
  %33 = load i64, ptr %32, align 8, !tbaa !26
  %34 = udiv i64 %33, 120
  %35 = add i64 %34, %30
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i64, ptr %0, i64 %36
  %38 = load i64, ptr %37, align 8, !tbaa !26
  %39 = udiv i64 %38, 120
  %40 = add i64 %39, %35
  %41 = add nuw nsw i64 %29, 2
  %42 = add i64 %31, 2
  %43 = icmp eq i64 %42, %15
  br i1 %43, label %44, label %28, !llvm.loop !553

44:                                               ; preds = %28, %17
  %45 = phi i64 [ undef, %17 ], [ %40, %28 ]
  %46 = phi i64 [ 0, %17 ], [ %41, %28 ]
  %47 = phi i64 [ 0, %17 ], [ %40, %28 ]
  br i1 %16, label %53, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i64, ptr %0, i64 %46
  %50 = load i64, ptr %49, align 8, !tbaa !26
  %51 = udiv i64 %50, 120
  %52 = add i64 %51, %47
  br label %53

53:                                               ; preds = %44, %48
  %54 = phi i64 [ %45, %44 ], [ %52, %48 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptoui double %55 to i64
  %57 = udiv i64 %56, 120
  %58 = mul i64 %57, 8000
  %59 = icmp eq i64 %58, %54
  br i1 %59, label %24, label %20

60:                                               ; preds = %9, %73
  %61 = phi i32 [ %74, %73 ], [ %5, %9 ]
  %62 = phi double [ %75, %73 ], [ %10, %9 ]
  %63 = phi i32 [ %76, %73 ], [ 0, %9 ]
  %64 = fptoui double %62 to i64
  %65 = udiv i64 %64, 120
  %66 = mul i64 %65, 8000
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %60
  %69 = load i32, ptr @current_test, align 4, !tbaa !9
  %70 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %69)
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %73

73:                                               ; preds = %60, %68
  %74 = phi i32 [ %61, %60 ], [ %72, %68 ]
  %75 = phi double [ %62, %60 ], [ %71, %68 ]
  %76 = add nuw nsw i32 %63, 1
  %77 = icmp slt i32 %76, %74
  br i1 %77, label %60, label %78, !llvm.loop !552

78:                                               ; preds = %73, %24, %3
  %79 = tail call i64 @clock() #17
  store i64 %79, ptr @end_time, align 8, !tbaa !26
  %80 = load i64, ptr @start_time, align 8, !tbaa !26
  %81 = load ptr, ptr @results, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %89

85:                                               ; preds = %78
  %86 = load i32, ptr @current_test, align 4, !tbaa !9
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %101, label %89

89:                                               ; preds = %85, %83
  %90 = phi i32 [ %84, %83 ], [ %87, %85 ]
  %91 = add nsw i32 %90, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !9
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %81, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !5
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %89
  %97 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %101

98:                                               ; preds = %89
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %85, %96
  %102 = phi i32 [ %97, %96 ], [ %86, %85 ]
  %103 = phi ptr [ %94, %96 ], [ %81, %85 ]
  %104 = sub nsw i64 %79, %80
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !11
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !14
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %21, <i64 2, i64 2>
  %28 = add <2 x i64> %22, <i64 2, i64 2>
  %29 = add <2 x i64> %27, %24
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !554

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !555

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = add i64 %49, 2
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !556

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 16000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !555

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %76

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %59

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = add <2 x i64> %24, %21
  %28 = add <2 x i64> %26, %22
  %29 = add nuw i64 %20, 4
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !557

31:                                               ; preds = %19
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i64 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %76, !llvm.loop !558

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !26
  %50 = add i64 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !559

53:                                               ; preds = %45, %31
  %54 = phi i64 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !28
  %56 = fptoui double %55 to i64
  %57 = mul i64 %56, 8000
  %58 = icmp eq i64 %57, %54
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %71
  %60 = phi i32 [ %72, %71 ], [ %5, %9 ]
  %61 = phi double [ %73, %71 ], [ %10, %9 ]
  %62 = phi i32 [ %74, %71 ], [ 0, %9 ]
  %63 = fptoui double %61 to i64
  %64 = mul i64 %63, 8000
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr @current_test, align 4, !tbaa !9
  %68 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %67)
  %69 = load double, ptr @init_value, align 8, !tbaa !28
  %70 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %71

71:                                               ; preds = %59, %66
  %72 = phi i32 [ %60, %59 ], [ %70, %66 ]
  %73 = phi double [ %61, %59 ], [ %69, %66 ]
  %74 = add nuw nsw i32 %62, 1
  %75 = icmp slt i32 %74, %72
  br i1 %75, label %59, label %76, !llvm.loop !558

76:                                               ; preds = %71, %41, %3
  %77 = tail call i64 @clock() #17
  store i64 %77, ptr @end_time, align 8, !tbaa !26
  %78 = load i64, ptr @start_time, align 8, !tbaa !26
  %79 = load ptr, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  %82 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %87

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %99, label %87

87:                                               ; preds = %83, %81
  %88 = phi i32 [ %82, %81 ], [ %85, %83 ]
  %89 = add nsw i32 %88, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !9
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %79, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !5
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %87
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %99

96:                                               ; preds = %87
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %83, %94
  %100 = phi i32 [ %95, %94 ], [ %84, %83 ]
  %101 = phi ptr [ %92, %94 ], [ %79, %83 ]
  %102 = sub nsw i64 %77, %78
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !11
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !14
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = and <2 x i64> %24, <i64 10, i64 10>
  %28 = and <2 x i64> %26, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !560

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !561

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = and i64 %51, 10
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !562

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = and i64 %59, 10
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = and i64 %67, 10
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !561

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = and <2 x i64> %24, <i64 14, i64 14>
  %28 = and <2 x i64> %26, <i64 14, i64 14>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !563

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !564

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = and i64 %51, 14
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !565

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = and i64 %59, 14
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = and i64 %67, 14
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !28
  %74 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !564

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !26
  %82 = load i64, ptr @start_time, align 8, !tbaa !26
  %83 = load ptr, ptr @results, align 8, !tbaa !5
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %91

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !9
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87, %85
  %92 = phi i32 [ %86, %85 ], [ %89, %87 ]
  %93 = add nsw i32 %92, 10
  store i32 %93, ptr @allocated_results, align 4, !tbaa !9
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 4
  %96 = tail call ptr @realloc(ptr noundef %83, i64 noundef %95) #14
  store ptr %96, ptr @results, align 8, !tbaa !5
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %103

100:                                              ; preds = %91
  %101 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %101)
  tail call void @exit(i32 noundef -1) #15
  unreachable

103:                                              ; preds = %87, %98
  %104 = phi i32 [ %99, %98 ], [ %88, %87 ]
  %105 = phi ptr [ %96, %98 ], [ %83, %87 ]
  %106 = sub nsw i64 %81, %82
  %107 = sitofp i64 %106 to double
  %108 = fdiv double %107, 1.000000e+06
  %109 = sext i32 %104 to i64
  %110 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109
  store double %108, ptr %110, align 8, !tbaa !11
  %111 = getelementptr inbounds %struct.one_result, ptr %105, i64 %109, i32 1
  store ptr %2, ptr %111, align 8, !tbaa !14
  %112 = add nsw i32 %104, 1
  store i32 %112, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = or <2 x i64> %24, <i64 10, i64 10>
  %28 = or <2 x i64> %26, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !566

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !567

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = or i64 %51, 10
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !568

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = or i64 %59, 10
  %61 = mul i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = or i64 %67, 10
  %69 = mul i64 %68, 8000
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !567

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = and i64 %10, 4294967292
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <2 x i64> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <2 x i64> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds i64, ptr %0, i64 %18
  %22 = load <2 x i64>, ptr %21, align 8, !tbaa !26
  %23 = getelementptr inbounds i64, ptr %21, i64 2
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = or <2 x i64> %22, <i64 63, i64 63>
  %26 = or <2 x i64> %24, <i64 63, i64 63>
  %27 = add <2 x i64> %25, %19
  %28 = add <2 x i64> %26, %20
  %29 = add nuw i64 %18, 4
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !569

31:                                               ; preds = %17
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i64 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !9
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !570

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !26
  %50 = or i64 %49, 63
  %51 = add i64 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !571

54:                                               ; preds = %45, %31
  %55 = phi i64 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !28
  %57 = fptoui double %56 to i64
  %58 = or i64 %57, 63
  %59 = mul i64 %58, 8000
  %60 = icmp eq i64 %59, %55
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !9
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !9
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !570

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !26
  %70 = load i64, ptr @start_time, align 8, !tbaa !26
  %71 = load ptr, ptr @results, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %79

75:                                               ; preds = %68
  %76 = load i32, ptr @current_test, align 4, !tbaa !9
  %77 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %77, %75 ]
  %81 = add nsw i32 %80, 10
  store i32 %81, ptr @allocated_results, align 4, !tbaa !9
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = tail call ptr @realloc(ptr noundef %71, i64 noundef %83) #14
  store ptr %84, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %79
  %87 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %91

88:                                               ; preds = %79
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %89)
  tail call void @exit(i32 noundef -1) #15
  unreachable

91:                                               ; preds = %75, %86
  %92 = phi i32 [ %87, %86 ], [ %76, %75 ]
  %93 = phi ptr [ %84, %86 ], [ %71, %75 ]
  %94 = sub nsw i64 %69, %70
  %95 = sitofp i64 %94 to double
  %96 = fdiv double %95, 1.000000e+06
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97
  store double %96, ptr %98, align 8, !tbaa !11
  %99 = getelementptr inbounds %struct.one_result, ptr %93, i64 %97, i32 1
  store ptr %2, ptr %99, align 8, !tbaa !14
  %100 = add nsw i32 %92, 1
  store i32 %100, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = xor <2 x i64> %24, <i64 10, i64 10>
  %28 = xor <2 x i64> %26, <i64 10, i64 10>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !572

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !573

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = xor i64 %51, 10
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !574

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = xor i64 %59, 10
  %61 = mul i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = xor i64 %67, 10
  %69 = mul i64 %68, 8000
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !573

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %63

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 4294967292
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds i64, ptr %0, i64 %20
  %24 = load <2 x i64>, ptr %23, align 8, !tbaa !26
  %25 = getelementptr inbounds i64, ptr %23, i64 2
  %26 = load <2 x i64>, ptr %25, align 8, !tbaa !26
  %27 = xor <2 x i64> %24, <i64 49, i64 49>
  %28 = xor <2 x i64> %26, <i64 49, i64 49>
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !575

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !9
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !576

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !26
  %52 = xor i64 %51, 49
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !577

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !28
  %59 = fptoui double %58 to i64
  %60 = xor i64 %59, 49
  %61 = mul i64 %60, 8000
  %62 = icmp eq i64 %61, %57
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = xor i64 %67, 49
  %69 = mul i64 %68, 8000
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !9
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !28
  %75 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !576

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !26
  %83 = load i64, ptr @start_time, align 8, !tbaa !26
  %84 = load ptr, ptr @results, align 8, !tbaa !5
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %92

88:                                               ; preds = %81
  %89 = load i32, ptr @current_test, align 4, !tbaa !9
  %90 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %87, %86 ], [ %90, %88 ]
  %94 = add nsw i32 %93, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !9
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %84, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %92
  %100 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %104

101:                                              ; preds = %92
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %88, %99
  %105 = phi i32 [ %100, %99 ], [ %89, %88 ]
  %106 = phi ptr [ %97, %99 ], [ %84, %88 ]
  %107 = sub nsw i64 %82, %83
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !11
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !14
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %58

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %65, !llvm.loop !578

25:                                               ; preds = %14, %25
  %26 = phi float [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd float %26, 2.000000e+00
  %29 = fadd float %28, 2.000000e+00
  %30 = fadd float %29, 2.000000e+00
  %31 = fadd float %30, 2.000000e+00
  %32 = fadd float %31, 2.000000e+00
  %33 = fadd float %32, 2.000000e+00
  %34 = fadd float %33, 2.000000e+00
  %35 = fadd float %34, 2.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !579

38:                                               ; preds = %25, %14
  %39 = phi float [ undef, %14 ], [ %35, %25 ]
  %40 = phi float [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi float [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd float %42, 2.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !580

47:                                               ; preds = %41, %38
  %48 = phi float [ %39, %38 ], [ %44, %41 ]
  %49 = fadd float %48, -1.600000e+04
  %50 = tail call float @llvm.fabs.f32(float %48)
  %51 = fpext float %50 to double
  %52 = fcmp ogt double %51, 1.000000e-04
  %53 = select i1 %52, float %48, float 1.000000e+00
  %54 = fdiv float %49, %53
  %55 = tail call float @llvm.fabs.f32(float %54)
  %56 = fpext float %55 to double
  %57 = fcmp olt double %56, 1.000000e-03
  br i1 %57, label %21, label %17

58:                                               ; preds = %7, %58
  %59 = phi i32 [ %62, %58 ], [ 0, %7 ]
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = add nuw nsw i32 %59, 1
  %63 = load i32, ptr @iterations, align 4, !tbaa !9
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %58, label %65, !llvm.loop !578

65:                                               ; preds = %58, %21, %3
  %66 = tail call i64 @clock() #17
  store i64 %66, ptr @end_time, align 8, !tbaa !26
  %67 = load i64, ptr @start_time, align 8, !tbaa !26
  %68 = load ptr, ptr @results, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %65
  %71 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %76

72:                                               ; preds = %65
  %73 = load i32, ptr @current_test, align 4, !tbaa !9
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %88, label %76

76:                                               ; preds = %72, %70
  %77 = phi i32 [ %71, %70 ], [ %74, %72 ]
  %78 = add nsw i32 %77, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !9
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %68, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %88

85:                                               ; preds = %76
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %72, %83
  %89 = phi i32 [ %84, %83 ], [ %73, %72 ]
  %90 = phi ptr [ %81, %83 ], [ %68, %72 ]
  %91 = sub nsw i64 %66, %67
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !11
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !14
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %58

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %65, !llvm.loop !581

25:                                               ; preds = %14, %25
  %26 = phi float [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd float %26, 3.000000e+00
  %29 = fadd float %28, 3.000000e+00
  %30 = fadd float %29, 3.000000e+00
  %31 = fadd float %30, 3.000000e+00
  %32 = fadd float %31, 3.000000e+00
  %33 = fadd float %32, 3.000000e+00
  %34 = fadd float %33, 3.000000e+00
  %35 = fadd float %34, 3.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !582

38:                                               ; preds = %25, %14
  %39 = phi float [ undef, %14 ], [ %35, %25 ]
  %40 = phi float [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi float [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd float %42, 3.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !583

47:                                               ; preds = %41, %38
  %48 = phi float [ %39, %38 ], [ %44, %41 ]
  %49 = fadd float %48, -2.400000e+04
  %50 = tail call float @llvm.fabs.f32(float %48)
  %51 = fpext float %50 to double
  %52 = fcmp ogt double %51, 1.000000e-04
  %53 = select i1 %52, float %48, float 1.000000e+00
  %54 = fdiv float %49, %53
  %55 = tail call float @llvm.fabs.f32(float %54)
  %56 = fpext float %55 to double
  %57 = fcmp olt double %56, 1.000000e-03
  br i1 %57, label %21, label %17

58:                                               ; preds = %7, %58
  %59 = phi i32 [ %62, %58 ], [ 0, %7 ]
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = add nuw nsw i32 %59, 1
  %63 = load i32, ptr @iterations, align 4, !tbaa !9
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %58, label %65, !llvm.loop !581

65:                                               ; preds = %58, %21, %3
  %66 = tail call i64 @clock() #17
  store i64 %66, ptr @end_time, align 8, !tbaa !26
  %67 = load i64, ptr @start_time, align 8, !tbaa !26
  %68 = load ptr, ptr @results, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %65
  %71 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %76

72:                                               ; preds = %65
  %73 = load i32, ptr @current_test, align 4, !tbaa !9
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %88, label %76

76:                                               ; preds = %72, %70
  %77 = phi i32 [ %71, %70 ], [ %74, %72 ]
  %78 = add nsw i32 %77, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !9
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %68, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %88

85:                                               ; preds = %76
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %72, %83
  %89 = phi i32 [ %84, %83 ], [ %73, %72 ]
  %90 = phi ptr [ %81, %83 ], [ %68, %72 ]
  %91 = sub nsw i64 %66, %67
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !11
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !14
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %58

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %65, !llvm.loop !584

25:                                               ; preds = %14, %25
  %26 = phi float [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd float %26, 1.000000e+00
  %29 = fadd float %28, 1.000000e+00
  %30 = fadd float %29, 1.000000e+00
  %31 = fadd float %30, 1.000000e+00
  %32 = fadd float %31, 1.000000e+00
  %33 = fadd float %32, 1.000000e+00
  %34 = fadd float %33, 1.000000e+00
  %35 = fadd float %34, 1.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !585

38:                                               ; preds = %25, %14
  %39 = phi float [ undef, %14 ], [ %35, %25 ]
  %40 = phi float [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi float [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd float %42, 1.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !586

47:                                               ; preds = %41, %38
  %48 = phi float [ %39, %38 ], [ %44, %41 ]
  %49 = fadd float %48, -8.000000e+03
  %50 = tail call float @llvm.fabs.f32(float %48)
  %51 = fpext float %50 to double
  %52 = fcmp ogt double %51, 1.000000e-04
  %53 = select i1 %52, float %48, float 1.000000e+00
  %54 = fdiv float %49, %53
  %55 = tail call float @llvm.fabs.f32(float %54)
  %56 = fpext float %55 to double
  %57 = fcmp olt double %56, 1.000000e-03
  br i1 %57, label %21, label %17

58:                                               ; preds = %7, %58
  %59 = phi i32 [ %62, %58 ], [ 0, %7 ]
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = add nuw nsw i32 %59, 1
  %63 = load i32, ptr @iterations, align 4, !tbaa !9
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %58, label %65, !llvm.loop !584

65:                                               ; preds = %58, %21, %3
  %66 = tail call i64 @clock() #17
  store i64 %66, ptr @end_time, align 8, !tbaa !26
  %67 = load i64, ptr @start_time, align 8, !tbaa !26
  %68 = load ptr, ptr @results, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %65
  %71 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %76

72:                                               ; preds = %65
  %73 = load i32, ptr @current_test, align 4, !tbaa !9
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %88, label %76

76:                                               ; preds = %72, %70
  %77 = phi i32 [ %71, %70 ], [ %74, %72 ]
  %78 = add nsw i32 %77, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !9
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %68, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %88

85:                                               ; preds = %76
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %72, %83
  %89 = phi i32 [ %84, %83 ], [ %73, %72 ]
  %90 = phi ptr [ %81, %83 ], [ %68, %72 ]
  %91 = sub nsw i64 %66, %67
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !11
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !14
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %58

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %65, !llvm.loop !587

25:                                               ; preds = %14, %25
  %26 = phi float [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd float %26, 6.000000e+00
  %29 = fadd float %28, 6.000000e+00
  %30 = fadd float %29, 6.000000e+00
  %31 = fadd float %30, 6.000000e+00
  %32 = fadd float %31, 6.000000e+00
  %33 = fadd float %32, 6.000000e+00
  %34 = fadd float %33, 6.000000e+00
  %35 = fadd float %34, 6.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !588

38:                                               ; preds = %25, %14
  %39 = phi float [ undef, %14 ], [ %35, %25 ]
  %40 = phi float [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi float [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd float %42, 6.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !589

47:                                               ; preds = %41, %38
  %48 = phi float [ %39, %38 ], [ %44, %41 ]
  %49 = fadd float %48, -4.800000e+04
  %50 = tail call float @llvm.fabs.f32(float %48)
  %51 = fpext float %50 to double
  %52 = fcmp ogt double %51, 1.000000e-04
  %53 = select i1 %52, float %48, float 1.000000e+00
  %54 = fdiv float %49, %53
  %55 = tail call float @llvm.fabs.f32(float %54)
  %56 = fpext float %55 to double
  %57 = fcmp olt double %56, 1.000000e-03
  br i1 %57, label %21, label %17

58:                                               ; preds = %7, %58
  %59 = phi i32 [ %62, %58 ], [ 0, %7 ]
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = add nuw nsw i32 %59, 1
  %63 = load i32, ptr @iterations, align 4, !tbaa !9
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %58, label %65, !llvm.loop !587

65:                                               ; preds = %58, %21, %3
  %66 = tail call i64 @clock() #17
  store i64 %66, ptr @end_time, align 8, !tbaa !26
  %67 = load i64, ptr @start_time, align 8, !tbaa !26
  %68 = load ptr, ptr @results, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %65
  %71 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %76

72:                                               ; preds = %65
  %73 = load i32, ptr @current_test, align 4, !tbaa !9
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %88, label %76

76:                                               ; preds = %72, %70
  %77 = phi i32 [ %71, %70 ], [ %74, %72 ]
  %78 = add nsw i32 %77, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !9
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %68, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %88

85:                                               ; preds = %76
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %72, %83
  %89 = phi i32 [ %84, %83 ], [ %73, %72 ]
  %90 = phi ptr [ %81, %83 ], [ %68, %72 ]
  %91 = sub nsw i64 %66, %67
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !11
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !14
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %58

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %65, !llvm.loop !590

25:                                               ; preds = %14, %25
  %26 = phi float [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd float %26, 2.000000e+00
  %29 = fadd float %28, 2.000000e+00
  %30 = fadd float %29, 2.000000e+00
  %31 = fadd float %30, 2.000000e+00
  %32 = fadd float %31, 2.000000e+00
  %33 = fadd float %32, 2.000000e+00
  %34 = fadd float %33, 2.000000e+00
  %35 = fadd float %34, 2.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !591

38:                                               ; preds = %25, %14
  %39 = phi float [ undef, %14 ], [ %35, %25 ]
  %40 = phi float [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi float [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd float %42, 2.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !592

47:                                               ; preds = %41, %38
  %48 = phi float [ %39, %38 ], [ %44, %41 ]
  %49 = fadd float %48, -1.600000e+04
  %50 = tail call float @llvm.fabs.f32(float %48)
  %51 = fpext float %50 to double
  %52 = fcmp ogt double %51, 1.000000e-04
  %53 = select i1 %52, float %48, float 1.000000e+00
  %54 = fdiv float %49, %53
  %55 = tail call float @llvm.fabs.f32(float %54)
  %56 = fpext float %55 to double
  %57 = fcmp olt double %56, 1.000000e-03
  br i1 %57, label %21, label %17

58:                                               ; preds = %7, %58
  %59 = phi i32 [ %62, %58 ], [ 0, %7 ]
  %60 = load i32, ptr @current_test, align 4, !tbaa !9
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = add nuw nsw i32 %59, 1
  %63 = load i32, ptr @iterations, align 4, !tbaa !9
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %58, label %65, !llvm.loop !590

65:                                               ; preds = %58, %21, %3
  %66 = tail call i64 @clock() #17
  store i64 %66, ptr @end_time, align 8, !tbaa !26
  %67 = load i64, ptr @start_time, align 8, !tbaa !26
  %68 = load ptr, ptr @results, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %65
  %71 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %76

72:                                               ; preds = %65
  %73 = load i32, ptr @current_test, align 4, !tbaa !9
  %74 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %88, label %76

76:                                               ; preds = %72, %70
  %77 = phi i32 [ %71, %70 ], [ %74, %72 ]
  %78 = add nsw i32 %77, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !9
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %68, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %76
  %84 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %88

85:                                               ; preds = %76
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %72, %83
  %89 = phi i32 [ %84, %83 ], [ %73, %72 ]
  %90 = phi ptr [ %81, %83 ], [ %68, %72 ]
  %91 = sub nsw i64 %66, %67
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !11
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !14
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %105, !llvm.loop !593

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi float [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fadd float %33, 1.000000e+01
  %35 = fadd float %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds float, ptr %0, i64 %36
  %38 = load float, ptr %37, align 4, !tbaa !40
  %39 = fadd float %38, 1.000000e+01
  %40 = fadd float %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds float, ptr %0, i64 %41
  %43 = load float, ptr %42, align 4, !tbaa !40
  %44 = fadd float %43, 1.000000e+01
  %45 = fadd float %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds float, ptr %0, i64 %46
  %48 = load float, ptr %47, align 4, !tbaa !40
  %49 = fadd float %48, 1.000000e+01
  %50 = fadd float %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !594

54:                                               ; preds = %28, %17
  %55 = phi float [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi float [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi float [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds float, ptr %0, i64 %59
  %63 = load float, ptr %62, align 4, !tbaa !40
  %64 = fadd float %63, 1.000000e+01
  %65 = fadd float %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !595

69:                                               ; preds = %58, %54
  %70 = phi float [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptrunc double %71 to float
  %73 = fadd float %72, 1.000000e+01
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float %70, %74
  %76 = tail call float @llvm.fabs.f32(float %70)
  %77 = fpext float %76 to double
  %78 = fcmp ogt double %77, 1.000000e-04
  %79 = select i1 %78, float %70, float 1.000000e+00
  %80 = fdiv float %75, %79
  %81 = tail call float @llvm.fabs.f32(float %80)
  %82 = fpext float %81 to double
  %83 = fcmp olt double %82, 1.000000e-03
  br i1 %83, label %24, label %20

84:                                               ; preds = %9, %100
  %85 = phi i32 [ %101, %100 ], [ %5, %9 ]
  %86 = phi double [ %102, %100 ], [ %10, %9 ]
  %87 = phi i32 [ %103, %100 ], [ 0, %9 ]
  %88 = fptrunc double %86 to float
  %89 = fadd float %88, 1.000000e+01
  %90 = fmul float %89, 8.000000e+03
  %91 = fsub float 0.000000e+00, %90
  %92 = tail call float @llvm.fabs.f32(float %91)
  %93 = fpext float %92 to double
  %94 = fcmp olt double %93, 1.000000e-03
  br i1 %94, label %100, label %95

95:                                               ; preds = %84
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %96)
  %98 = load double, ptr @init_value, align 8, !tbaa !28
  %99 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %100

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %85, %84 ], [ %99, %95 ]
  %102 = phi double [ %86, %84 ], [ %98, %95 ]
  %103 = add nuw nsw i32 %87, 1
  %104 = icmp slt i32 %103, %101
  br i1 %104, label %84, label %105, !llvm.loop !593

105:                                              ; preds = %100, %24, %3
  %106 = tail call i64 @clock() #17
  store i64 %106, ptr @end_time, align 8, !tbaa !26
  %107 = load i64, ptr @start_time, align 8, !tbaa !26
  %108 = load ptr, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %116

112:                                              ; preds = %105
  %113 = load i32, ptr @current_test, align 4, !tbaa !9
  %114 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %128, label %116

116:                                              ; preds = %112, %110
  %117 = phi i32 [ %111, %110 ], [ %114, %112 ]
  %118 = add nsw i32 %117, 10
  store i32 %118, ptr @allocated_results, align 4, !tbaa !9
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 4
  %121 = tail call ptr @realloc(ptr noundef %108, i64 noundef %120) #14
  store ptr %121, ptr @results, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %128

125:                                              ; preds = %116
  %126 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %127 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %126)
  tail call void @exit(i32 noundef -1) #15
  unreachable

128:                                              ; preds = %112, %123
  %129 = phi i32 [ %124, %123 ], [ %113, %112 ]
  %130 = phi ptr [ %121, %123 ], [ %108, %112 ]
  %131 = sub nsw i64 %106, %107
  %132 = sitofp i64 %131 to double
  %133 = fdiv double %132, 1.000000e+06
  %134 = sext i32 %129 to i64
  %135 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134
  store double %133, ptr %135, align 8, !tbaa !11
  %136 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134, i32 1
  store ptr %2, ptr %136, align 8, !tbaa !14
  %137 = add nsw i32 %129, 1
  store i32 %137, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %80

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %104, !llvm.loop !596

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi float [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fadd float %33, 1.000000e+00
  %35 = fadd float %34, 2.000000e+00
  %36 = fadd float %35, 3.000000e+00
  %37 = fadd float %36, 4.000000e+00
  %38 = fadd float %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds float, ptr %0, i64 %39
  %41 = load float, ptr %40, align 4, !tbaa !40
  %42 = fadd float %41, 1.000000e+00
  %43 = fadd float %42, 2.000000e+00
  %44 = fadd float %43, 3.000000e+00
  %45 = fadd float %44, 4.000000e+00
  %46 = fadd float %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !597

50:                                               ; preds = %28, %17
  %51 = phi float [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi float [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds float, ptr %0, i64 %52
  %56 = load float, ptr %55, align 4, !tbaa !40
  %57 = fadd float %56, 1.000000e+00
  %58 = fadd float %57, 2.000000e+00
  %59 = fadd float %58, 3.000000e+00
  %60 = fadd float %59, 4.000000e+00
  %61 = fadd float %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi float [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fptrunc double %64 to float
  %66 = fadd float %65, 1.000000e+00
  %67 = fadd float %66, 2.000000e+00
  %68 = fadd float %67, 3.000000e+00
  %69 = fadd float %68, 4.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = select i1 %74, float %63, float 1.000000e+00
  %76 = fdiv float %71, %75
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %24, label %20

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fadd float %84, 1.000000e+00
  %86 = fadd float %85, 2.000000e+00
  %87 = fadd float %86, 3.000000e+00
  %88 = fadd float %87, 4.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !28
  %98 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !596

104:                                              ; preds = %99, %24, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !26
  %106 = load i64, ptr @start_time, align 8, !tbaa !26
  %107 = load ptr, ptr @results, align 8, !tbaa !5
  %108 = icmp eq ptr %107, null
  br i1 %108, label %109, label %111

109:                                              ; preds = %104
  %110 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %115

111:                                              ; preds = %104
  %112 = load i32, ptr @current_test, align 4, !tbaa !9
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = icmp slt i32 %112, %113
  br i1 %114, label %127, label %115

115:                                              ; preds = %111, %109
  %116 = phi i32 [ %110, %109 ], [ %113, %111 ]
  %117 = add nsw i32 %116, 10
  store i32 %117, ptr @allocated_results, align 4, !tbaa !9
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 4
  %120 = tail call ptr @realloc(ptr noundef %107, i64 noundef %119) #14
  store ptr %120, ptr @results, align 8, !tbaa !5
  %121 = icmp eq ptr %120, null
  br i1 %121, label %124, label %122

122:                                              ; preds = %115
  %123 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %127

124:                                              ; preds = %115
  %125 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %126 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %125)
  tail call void @exit(i32 noundef -1) #15
  unreachable

127:                                              ; preds = %111, %122
  %128 = phi i32 [ %123, %122 ], [ %112, %111 ]
  %129 = phi ptr [ %120, %122 ], [ %107, %111 ]
  %130 = sub nsw i64 %105, %106
  %131 = sitofp i64 %130 to double
  %132 = fdiv double %131, 1.000000e+06
  %133 = sext i32 %128 to i64
  %134 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133
  store double %132, ptr %134, align 8, !tbaa !11
  %135 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133, i32 1
  store ptr %2, ptr %135, align 8, !tbaa !14
  %136 = add nsw i32 %128, 1
  store i32 %136, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %105, !llvm.loop !598

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi float [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fadd float %33, -1.000000e+01
  %35 = fadd float %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds float, ptr %0, i64 %36
  %38 = load float, ptr %37, align 4, !tbaa !40
  %39 = fadd float %38, -1.000000e+01
  %40 = fadd float %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds float, ptr %0, i64 %41
  %43 = load float, ptr %42, align 4, !tbaa !40
  %44 = fadd float %43, -1.000000e+01
  %45 = fadd float %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds float, ptr %0, i64 %46
  %48 = load float, ptr %47, align 4, !tbaa !40
  %49 = fadd float %48, -1.000000e+01
  %50 = fadd float %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !599

54:                                               ; preds = %28, %17
  %55 = phi float [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi float [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi float [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds float, ptr %0, i64 %59
  %63 = load float, ptr %62, align 4, !tbaa !40
  %64 = fadd float %63, -1.000000e+01
  %65 = fadd float %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !600

69:                                               ; preds = %58, %54
  %70 = phi float [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptrunc double %71 to float
  %73 = fadd float %72, -1.000000e+01
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float %70, %74
  %76 = tail call float @llvm.fabs.f32(float %70)
  %77 = fpext float %76 to double
  %78 = fcmp ogt double %77, 1.000000e-04
  %79 = select i1 %78, float %70, float 1.000000e+00
  %80 = fdiv float %75, %79
  %81 = tail call float @llvm.fabs.f32(float %80)
  %82 = fpext float %81 to double
  %83 = fcmp olt double %82, 1.000000e-03
  br i1 %83, label %24, label %20

84:                                               ; preds = %9, %100
  %85 = phi i32 [ %101, %100 ], [ %5, %9 ]
  %86 = phi double [ %102, %100 ], [ %10, %9 ]
  %87 = phi i32 [ %103, %100 ], [ 0, %9 ]
  %88 = fptrunc double %86 to float
  %89 = fadd float %88, -1.000000e+01
  %90 = fmul float %89, 8.000000e+03
  %91 = fsub float 0.000000e+00, %90
  %92 = tail call float @llvm.fabs.f32(float %91)
  %93 = fpext float %92 to double
  %94 = fcmp olt double %93, 1.000000e-03
  br i1 %94, label %100, label %95

95:                                               ; preds = %84
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %96)
  %98 = load double, ptr @init_value, align 8, !tbaa !28
  %99 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %100

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %85, %84 ], [ %99, %95 ]
  %102 = phi double [ %86, %84 ], [ %98, %95 ]
  %103 = add nuw nsw i32 %87, 1
  %104 = icmp slt i32 %103, %101
  br i1 %104, label %84, label %105, !llvm.loop !598

105:                                              ; preds = %100, %24, %3
  %106 = tail call i64 @clock() #17
  store i64 %106, ptr @end_time, align 8, !tbaa !26
  %107 = load i64, ptr @start_time, align 8, !tbaa !26
  %108 = load ptr, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %116

112:                                              ; preds = %105
  %113 = load i32, ptr @current_test, align 4, !tbaa !9
  %114 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %128, label %116

116:                                              ; preds = %112, %110
  %117 = phi i32 [ %111, %110 ], [ %114, %112 ]
  %118 = add nsw i32 %117, 10
  store i32 %118, ptr @allocated_results, align 4, !tbaa !9
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 4
  %121 = tail call ptr @realloc(ptr noundef %108, i64 noundef %120) #14
  store ptr %121, ptr @results, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %128

125:                                              ; preds = %116
  %126 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %127 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %126)
  tail call void @exit(i32 noundef -1) #15
  unreachable

128:                                              ; preds = %112, %123
  %129 = phi i32 [ %124, %123 ], [ %113, %112 ]
  %130 = phi ptr [ %121, %123 ], [ %108, %112 ]
  %131 = sub nsw i64 %106, %107
  %132 = sitofp i64 %131 to double
  %133 = fdiv double %132, 1.000000e+06
  %134 = sext i32 %129 to i64
  %135 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134
  store double %133, ptr %135, align 8, !tbaa !11
  %136 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134, i32 1
  store ptr %2, ptr %136, align 8, !tbaa !14
  %137 = add nsw i32 %129, 1
  store i32 %137, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %80

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %104, !llvm.loop !601

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi float [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fadd float %33, -1.000000e+00
  %35 = fadd float %34, -2.000000e+00
  %36 = fadd float %35, -3.000000e+00
  %37 = fadd float %36, -4.000000e+00
  %38 = fadd float %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds float, ptr %0, i64 %39
  %41 = load float, ptr %40, align 4, !tbaa !40
  %42 = fadd float %41, -1.000000e+00
  %43 = fadd float %42, -2.000000e+00
  %44 = fadd float %43, -3.000000e+00
  %45 = fadd float %44, -4.000000e+00
  %46 = fadd float %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !602

50:                                               ; preds = %28, %17
  %51 = phi float [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi float [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds float, ptr %0, i64 %52
  %56 = load float, ptr %55, align 4, !tbaa !40
  %57 = fadd float %56, -1.000000e+00
  %58 = fadd float %57, -2.000000e+00
  %59 = fadd float %58, -3.000000e+00
  %60 = fadd float %59, -4.000000e+00
  %61 = fadd float %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi float [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fptrunc double %64 to float
  %66 = fadd float %65, -1.000000e+00
  %67 = fadd float %66, -2.000000e+00
  %68 = fadd float %67, -3.000000e+00
  %69 = fadd float %68, -4.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = select i1 %74, float %63, float 1.000000e+00
  %76 = fdiv float %71, %75
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %24, label %20

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fadd float %84, -1.000000e+00
  %86 = fadd float %85, -2.000000e+00
  %87 = fadd float %86, -3.000000e+00
  %88 = fadd float %87, -4.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !28
  %98 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !601

104:                                              ; preds = %99, %24, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !26
  %106 = load i64, ptr @start_time, align 8, !tbaa !26
  %107 = load ptr, ptr @results, align 8, !tbaa !5
  %108 = icmp eq ptr %107, null
  br i1 %108, label %109, label %111

109:                                              ; preds = %104
  %110 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %115

111:                                              ; preds = %104
  %112 = load i32, ptr @current_test, align 4, !tbaa !9
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = icmp slt i32 %112, %113
  br i1 %114, label %127, label %115

115:                                              ; preds = %111, %109
  %116 = phi i32 [ %110, %109 ], [ %113, %111 ]
  %117 = add nsw i32 %116, 10
  store i32 %117, ptr @allocated_results, align 4, !tbaa !9
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 4
  %120 = tail call ptr @realloc(ptr noundef %107, i64 noundef %119) #14
  store ptr %120, ptr @results, align 8, !tbaa !5
  %121 = icmp eq ptr %120, null
  br i1 %121, label %124, label %122

122:                                              ; preds = %115
  %123 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %127

124:                                              ; preds = %115
  %125 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %126 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %125)
  tail call void @exit(i32 noundef -1) #15
  unreachable

127:                                              ; preds = %111, %122
  %128 = phi i32 [ %123, %122 ], [ %112, %111 ]
  %129 = phi ptr [ %120, %122 ], [ %107, %111 ]
  %130 = sub nsw i64 %105, %106
  %131 = sitofp i64 %130 to double
  %132 = fdiv double %131, 1.000000e+06
  %133 = sext i32 %128 to i64
  %134 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133
  store double %132, ptr %134, align 8, !tbaa !11
  %135 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133, i32 1
  store ptr %2, ptr %135, align 8, !tbaa !14
  %136 = add nsw i32 %128, 1
  store i32 %136, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %105, !llvm.loop !603

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi float [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fmul float %33, 1.200000e+02
  %35 = fadd float %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds float, ptr %0, i64 %36
  %38 = load float, ptr %37, align 4, !tbaa !40
  %39 = fmul float %38, 1.200000e+02
  %40 = fadd float %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds float, ptr %0, i64 %41
  %43 = load float, ptr %42, align 4, !tbaa !40
  %44 = fmul float %43, 1.200000e+02
  %45 = fadd float %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds float, ptr %0, i64 %46
  %48 = load float, ptr %47, align 4, !tbaa !40
  %49 = fmul float %48, 1.200000e+02
  %50 = fadd float %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !604

54:                                               ; preds = %28, %17
  %55 = phi float [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi float [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi float [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds float, ptr %0, i64 %59
  %63 = load float, ptr %62, align 4, !tbaa !40
  %64 = fmul float %63, 1.200000e+02
  %65 = fadd float %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !605

69:                                               ; preds = %58, %54
  %70 = phi float [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptrunc double %71 to float
  %73 = fmul float %72, 1.200000e+02
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float %70, %74
  %76 = tail call float @llvm.fabs.f32(float %70)
  %77 = fpext float %76 to double
  %78 = fcmp ogt double %77, 1.000000e-04
  %79 = select i1 %78, float %70, float 1.000000e+00
  %80 = fdiv float %75, %79
  %81 = tail call float @llvm.fabs.f32(float %80)
  %82 = fpext float %81 to double
  %83 = fcmp olt double %82, 1.000000e-03
  br i1 %83, label %24, label %20

84:                                               ; preds = %9, %100
  %85 = phi i32 [ %101, %100 ], [ %5, %9 ]
  %86 = phi double [ %102, %100 ], [ %10, %9 ]
  %87 = phi i32 [ %103, %100 ], [ 0, %9 ]
  %88 = fptrunc double %86 to float
  %89 = fmul float %88, 1.200000e+02
  %90 = fmul float %89, 8.000000e+03
  %91 = fsub float 0.000000e+00, %90
  %92 = tail call float @llvm.fabs.f32(float %91)
  %93 = fpext float %92 to double
  %94 = fcmp olt double %93, 1.000000e-03
  br i1 %94, label %100, label %95

95:                                               ; preds = %84
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %96)
  %98 = load double, ptr @init_value, align 8, !tbaa !28
  %99 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %100

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %85, %84 ], [ %99, %95 ]
  %102 = phi double [ %86, %84 ], [ %98, %95 ]
  %103 = add nuw nsw i32 %87, 1
  %104 = icmp slt i32 %103, %101
  br i1 %104, label %84, label %105, !llvm.loop !603

105:                                              ; preds = %100, %24, %3
  %106 = tail call i64 @clock() #17
  store i64 %106, ptr @end_time, align 8, !tbaa !26
  %107 = load i64, ptr @start_time, align 8, !tbaa !26
  %108 = load ptr, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %116

112:                                              ; preds = %105
  %113 = load i32, ptr @current_test, align 4, !tbaa !9
  %114 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %128, label %116

116:                                              ; preds = %112, %110
  %117 = phi i32 [ %111, %110 ], [ %114, %112 ]
  %118 = add nsw i32 %117, 10
  store i32 %118, ptr @allocated_results, align 4, !tbaa !9
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 4
  %121 = tail call ptr @realloc(ptr noundef %108, i64 noundef %120) #14
  store ptr %121, ptr @results, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %128

125:                                              ; preds = %116
  %126 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %127 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %126)
  tail call void @exit(i32 noundef -1) #15
  unreachable

128:                                              ; preds = %112, %123
  %129 = phi i32 [ %124, %123 ], [ %113, %112 ]
  %130 = phi ptr [ %121, %123 ], [ %108, %112 ]
  %131 = sub nsw i64 %106, %107
  %132 = sitofp i64 %131 to double
  %133 = fdiv double %132, 1.000000e+06
  %134 = sext i32 %129 to i64
  %135 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134
  store double %133, ptr %135, align 8, !tbaa !11
  %136 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134, i32 1
  store ptr %2, ptr %136, align 8, !tbaa !14
  %137 = add nsw i32 %129, 1
  store i32 %137, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %80

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %104, !llvm.loop !606

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi float [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fmul float %33, 2.000000e+00
  %35 = fmul float %34, 3.000000e+00
  %36 = fmul float %35, 4.000000e+00
  %37 = fmul float %36, 5.000000e+00
  %38 = fadd float %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds float, ptr %0, i64 %39
  %41 = load float, ptr %40, align 4, !tbaa !40
  %42 = fmul float %41, 2.000000e+00
  %43 = fmul float %42, 3.000000e+00
  %44 = fmul float %43, 4.000000e+00
  %45 = fmul float %44, 5.000000e+00
  %46 = fadd float %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !607

50:                                               ; preds = %28, %17
  %51 = phi float [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi float [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds float, ptr %0, i64 %52
  %56 = load float, ptr %55, align 4, !tbaa !40
  %57 = fmul float %56, 2.000000e+00
  %58 = fmul float %57, 3.000000e+00
  %59 = fmul float %58, 4.000000e+00
  %60 = fmul float %59, 5.000000e+00
  %61 = fadd float %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi float [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fptrunc double %64 to float
  %66 = fmul float %65, 2.000000e+00
  %67 = fmul float %66, 3.000000e+00
  %68 = fmul float %67, 4.000000e+00
  %69 = fmul float %68, 5.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = select i1 %74, float %63, float 1.000000e+00
  %76 = fdiv float %71, %75
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %24, label %20

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fmul float %84, 2.000000e+00
  %86 = fmul float %85, 3.000000e+00
  %87 = fmul float %86, 4.000000e+00
  %88 = fmul float %87, 5.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !28
  %98 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !606

104:                                              ; preds = %99, %24, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !26
  %106 = load i64, ptr @start_time, align 8, !tbaa !26
  %107 = load ptr, ptr @results, align 8, !tbaa !5
  %108 = icmp eq ptr %107, null
  br i1 %108, label %109, label %111

109:                                              ; preds = %104
  %110 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %115

111:                                              ; preds = %104
  %112 = load i32, ptr @current_test, align 4, !tbaa !9
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = icmp slt i32 %112, %113
  br i1 %114, label %127, label %115

115:                                              ; preds = %111, %109
  %116 = phi i32 [ %110, %109 ], [ %113, %111 ]
  %117 = add nsw i32 %116, 10
  store i32 %117, ptr @allocated_results, align 4, !tbaa !9
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 4
  %120 = tail call ptr @realloc(ptr noundef %107, i64 noundef %119) #14
  store ptr %120, ptr @results, align 8, !tbaa !5
  %121 = icmp eq ptr %120, null
  br i1 %121, label %124, label %122

122:                                              ; preds = %115
  %123 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %127

124:                                              ; preds = %115
  %125 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %126 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %125)
  tail call void @exit(i32 noundef -1) #15
  unreachable

127:                                              ; preds = %111, %122
  %128 = phi i32 [ %123, %122 ], [ %112, %111 ]
  %129 = phi ptr [ %120, %122 ], [ %107, %111 ]
  %130 = sub nsw i64 %105, %106
  %131 = sitofp i64 %130 to double
  %132 = fdiv double %131, 1.000000e+06
  %133 = sext i32 %128 to i64
  %134 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133
  store double %132, ptr %134, align 8, !tbaa !11
  %135 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133, i32 1
  store ptr %2, ptr %135, align 8, !tbaa !14
  %136 = add nsw i32 %128, 1
  store i32 %136, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %105, !llvm.loop !608

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi float [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fadd float %33, 1.200000e+02
  %35 = fadd float %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds float, ptr %0, i64 %36
  %38 = load float, ptr %37, align 4, !tbaa !40
  %39 = fadd float %38, 1.200000e+02
  %40 = fadd float %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds float, ptr %0, i64 %41
  %43 = load float, ptr %42, align 4, !tbaa !40
  %44 = fadd float %43, 1.200000e+02
  %45 = fadd float %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds float, ptr %0, i64 %46
  %48 = load float, ptr %47, align 4, !tbaa !40
  %49 = fadd float %48, 1.200000e+02
  %50 = fadd float %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !609

54:                                               ; preds = %28, %17
  %55 = phi float [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi float [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi float [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds float, ptr %0, i64 %59
  %63 = load float, ptr %62, align 4, !tbaa !40
  %64 = fadd float %63, 1.200000e+02
  %65 = fadd float %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !610

69:                                               ; preds = %58, %54
  %70 = phi float [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptrunc double %71 to float
  %73 = fadd float %72, 1.200000e+02
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float %70, %74
  %76 = tail call float @llvm.fabs.f32(float %70)
  %77 = fpext float %76 to double
  %78 = fcmp ogt double %77, 1.000000e-04
  %79 = select i1 %78, float %70, float 1.000000e+00
  %80 = fdiv float %75, %79
  %81 = tail call float @llvm.fabs.f32(float %80)
  %82 = fpext float %81 to double
  %83 = fcmp olt double %82, 1.000000e-03
  br i1 %83, label %24, label %20

84:                                               ; preds = %9, %100
  %85 = phi i32 [ %101, %100 ], [ %5, %9 ]
  %86 = phi double [ %102, %100 ], [ %10, %9 ]
  %87 = phi i32 [ %103, %100 ], [ 0, %9 ]
  %88 = fptrunc double %86 to float
  %89 = fadd float %88, 1.200000e+02
  %90 = fmul float %89, 8.000000e+03
  %91 = fsub float 0.000000e+00, %90
  %92 = tail call float @llvm.fabs.f32(float %91)
  %93 = fpext float %92 to double
  %94 = fcmp olt double %93, 1.000000e-03
  br i1 %94, label %100, label %95

95:                                               ; preds = %84
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %96)
  %98 = load double, ptr @init_value, align 8, !tbaa !28
  %99 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %100

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %85, %84 ], [ %99, %95 ]
  %102 = phi double [ %86, %84 ], [ %98, %95 ]
  %103 = add nuw nsw i32 %87, 1
  %104 = icmp slt i32 %103, %101
  br i1 %104, label %84, label %105, !llvm.loop !608

105:                                              ; preds = %100, %24, %3
  %106 = tail call i64 @clock() #17
  store i64 %106, ptr @end_time, align 8, !tbaa !26
  %107 = load i64, ptr @start_time, align 8, !tbaa !26
  %108 = load ptr, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %116

112:                                              ; preds = %105
  %113 = load i32, ptr @current_test, align 4, !tbaa !9
  %114 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %128, label %116

116:                                              ; preds = %112, %110
  %117 = phi i32 [ %111, %110 ], [ %114, %112 ]
  %118 = add nsw i32 %117, 10
  store i32 %118, ptr @allocated_results, align 4, !tbaa !9
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 4
  %121 = tail call ptr @realloc(ptr noundef %108, i64 noundef %120) #14
  store ptr %121, ptr @results, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %128

125:                                              ; preds = %116
  %126 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %127 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %126)
  tail call void @exit(i32 noundef -1) #15
  unreachable

128:                                              ; preds = %112, %123
  %129 = phi i32 [ %124, %123 ], [ %113, %112 ]
  %130 = phi ptr [ %121, %123 ], [ %108, %112 ]
  %131 = sub nsw i64 %106, %107
  %132 = sitofp i64 %131 to double
  %133 = fdiv double %132, 1.000000e+06
  %134 = sext i32 %129 to i64
  %135 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134
  store double %133, ptr %135, align 8, !tbaa !11
  %136 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134, i32 1
  store ptr %2, ptr %136, align 8, !tbaa !14
  %137 = add nsw i32 %129, 1
  store i32 %137, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %105, !llvm.loop !611

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi float [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fdiv float %33, 5.000000e+00
  %35 = fadd float %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds float, ptr %0, i64 %36
  %38 = load float, ptr %37, align 4, !tbaa !40
  %39 = fdiv float %38, 5.000000e+00
  %40 = fadd float %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds float, ptr %0, i64 %41
  %43 = load float, ptr %42, align 4, !tbaa !40
  %44 = fdiv float %43, 5.000000e+00
  %45 = fadd float %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds float, ptr %0, i64 %46
  %48 = load float, ptr %47, align 4, !tbaa !40
  %49 = fdiv float %48, 5.000000e+00
  %50 = fadd float %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !612

54:                                               ; preds = %28, %17
  %55 = phi float [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi float [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi float [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds float, ptr %0, i64 %59
  %63 = load float, ptr %62, align 4, !tbaa !40
  %64 = fdiv float %63, 5.000000e+00
  %65 = fadd float %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !613

69:                                               ; preds = %58, %54
  %70 = phi float [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptrunc double %71 to float
  %73 = fdiv float %72, 5.000000e+00
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float %70, %74
  %76 = tail call float @llvm.fabs.f32(float %70)
  %77 = fpext float %76 to double
  %78 = fcmp ogt double %77, 1.000000e-04
  %79 = select i1 %78, float %70, float 1.000000e+00
  %80 = fdiv float %75, %79
  %81 = tail call float @llvm.fabs.f32(float %80)
  %82 = fpext float %81 to double
  %83 = fcmp olt double %82, 1.000000e-03
  br i1 %83, label %24, label %20

84:                                               ; preds = %9, %100
  %85 = phi i32 [ %101, %100 ], [ %5, %9 ]
  %86 = phi double [ %102, %100 ], [ %10, %9 ]
  %87 = phi i32 [ %103, %100 ], [ 0, %9 ]
  %88 = fptrunc double %86 to float
  %89 = fdiv float %88, 5.000000e+00
  %90 = fmul float %89, 8.000000e+03
  %91 = fsub float 0.000000e+00, %90
  %92 = tail call float @llvm.fabs.f32(float %91)
  %93 = fpext float %92 to double
  %94 = fcmp olt double %93, 1.000000e-03
  br i1 %94, label %100, label %95

95:                                               ; preds = %84
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %96)
  %98 = load double, ptr @init_value, align 8, !tbaa !28
  %99 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %100

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %85, %84 ], [ %99, %95 ]
  %102 = phi double [ %86, %84 ], [ %98, %95 ]
  %103 = add nuw nsw i32 %87, 1
  %104 = icmp slt i32 %103, %101
  br i1 %104, label %84, label %105, !llvm.loop !611

105:                                              ; preds = %100, %24, %3
  %106 = tail call i64 @clock() #17
  store i64 %106, ptr @end_time, align 8, !tbaa !26
  %107 = load i64, ptr @start_time, align 8, !tbaa !26
  %108 = load ptr, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %116

112:                                              ; preds = %105
  %113 = load i32, ptr @current_test, align 4, !tbaa !9
  %114 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %128, label %116

116:                                              ; preds = %112, %110
  %117 = phi i32 [ %111, %110 ], [ %114, %112 ]
  %118 = add nsw i32 %117, 10
  store i32 %118, ptr @allocated_results, align 4, !tbaa !9
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 4
  %121 = tail call ptr @realloc(ptr noundef %108, i64 noundef %120) #14
  store ptr %121, ptr @results, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %128

125:                                              ; preds = %116
  %126 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %127 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %126)
  tail call void @exit(i32 noundef -1) #15
  unreachable

128:                                              ; preds = %112, %123
  %129 = phi i32 [ %124, %123 ], [ %113, %112 ]
  %130 = phi ptr [ %121, %123 ], [ %108, %112 ]
  %131 = sub nsw i64 %106, %107
  %132 = sitofp i64 %131 to double
  %133 = fdiv double %132, 1.000000e+06
  %134 = sext i32 %129 to i64
  %135 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134
  store double %133, ptr %135, align 8, !tbaa !11
  %136 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134, i32 1
  store ptr %2, ptr %136, align 8, !tbaa !14
  %137 = add nsw i32 %129, 1
  store i32 %137, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %80

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %104, !llvm.loop !614

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi float [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fmul float %33, 5.000000e-01
  %35 = fdiv float %34, 3.000000e+00
  %36 = fmul float %35, 2.500000e-01
  %37 = fdiv float %36, 5.000000e+00
  %38 = fadd float %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds float, ptr %0, i64 %39
  %41 = load float, ptr %40, align 4, !tbaa !40
  %42 = fmul float %41, 5.000000e-01
  %43 = fdiv float %42, 3.000000e+00
  %44 = fmul float %43, 2.500000e-01
  %45 = fdiv float %44, 5.000000e+00
  %46 = fadd float %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !615

50:                                               ; preds = %28, %17
  %51 = phi float [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi float [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds float, ptr %0, i64 %52
  %56 = load float, ptr %55, align 4, !tbaa !40
  %57 = fmul float %56, 5.000000e-01
  %58 = fdiv float %57, 3.000000e+00
  %59 = fmul float %58, 2.500000e-01
  %60 = fdiv float %59, 5.000000e+00
  %61 = fadd float %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi float [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fptrunc double %64 to float
  %66 = fmul float %65, 5.000000e-01
  %67 = fdiv float %66, 3.000000e+00
  %68 = fmul float %67, 2.500000e-01
  %69 = fdiv float %68, 5.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = select i1 %74, float %63, float 1.000000e+00
  %76 = fdiv float %71, %75
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %24, label %20

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fmul float %84, 5.000000e-01
  %86 = fdiv float %85, 3.000000e+00
  %87 = fmul float %86, 2.500000e-01
  %88 = fdiv float %87, 5.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !9
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !28
  %98 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !614

104:                                              ; preds = %99, %24, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !26
  %106 = load i64, ptr @start_time, align 8, !tbaa !26
  %107 = load ptr, ptr @results, align 8, !tbaa !5
  %108 = icmp eq ptr %107, null
  br i1 %108, label %109, label %111

109:                                              ; preds = %104
  %110 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %115

111:                                              ; preds = %104
  %112 = load i32, ptr @current_test, align 4, !tbaa !9
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %114 = icmp slt i32 %112, %113
  br i1 %114, label %127, label %115

115:                                              ; preds = %111, %109
  %116 = phi i32 [ %110, %109 ], [ %113, %111 ]
  %117 = add nsw i32 %116, 10
  store i32 %117, ptr @allocated_results, align 4, !tbaa !9
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 4
  %120 = tail call ptr @realloc(ptr noundef %107, i64 noundef %119) #14
  store ptr %120, ptr @results, align 8, !tbaa !5
  %121 = icmp eq ptr %120, null
  br i1 %121, label %124, label %122

122:                                              ; preds = %115
  %123 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %127

124:                                              ; preds = %115
  %125 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %126 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %125)
  tail call void @exit(i32 noundef -1) #15
  unreachable

127:                                              ; preds = %111, %122
  %128 = phi i32 [ %123, %122 ], [ %112, %111 ]
  %129 = phi ptr [ %120, %122 ], [ %107, %111 ]
  %130 = sub nsw i64 %105, %106
  %131 = sitofp i64 %130 to double
  %132 = fdiv double %131, 1.000000e+06
  %133 = sext i32 %128 to i64
  %134 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133
  store double %132, ptr %134, align 8, !tbaa !11
  %135 = getelementptr inbounds %struct.one_result, ptr %129, i64 %133, i32 1
  store ptr %2, ptr %135, align 8, !tbaa !14
  %136 = add nsw i32 %128, 1
  store i32 %136, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %84

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %105, !llvm.loop !616

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi float [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fadd float %33, 2.000000e+00
  %35 = fadd float %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds float, ptr %0, i64 %36
  %38 = load float, ptr %37, align 4, !tbaa !40
  %39 = fadd float %38, 2.000000e+00
  %40 = fadd float %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds float, ptr %0, i64 %41
  %43 = load float, ptr %42, align 4, !tbaa !40
  %44 = fadd float %43, 2.000000e+00
  %45 = fadd float %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds float, ptr %0, i64 %46
  %48 = load float, ptr %47, align 4, !tbaa !40
  %49 = fadd float %48, 2.000000e+00
  %50 = fadd float %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !617

54:                                               ; preds = %28, %17
  %55 = phi float [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi float [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi float [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds float, ptr %0, i64 %59
  %63 = load float, ptr %62, align 4, !tbaa !40
  %64 = fadd float %63, 2.000000e+00
  %65 = fadd float %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !618

69:                                               ; preds = %58, %54
  %70 = phi float [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fptrunc double %71 to float
  %73 = fadd float %72, 2.000000e+00
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float %70, %74
  %76 = tail call float @llvm.fabs.f32(float %70)
  %77 = fpext float %76 to double
  %78 = fcmp ogt double %77, 1.000000e-04
  %79 = select i1 %78, float %70, float 1.000000e+00
  %80 = fdiv float %75, %79
  %81 = tail call float @llvm.fabs.f32(float %80)
  %82 = fpext float %81 to double
  %83 = fcmp olt double %82, 1.000000e-03
  br i1 %83, label %24, label %20

84:                                               ; preds = %9, %100
  %85 = phi i32 [ %101, %100 ], [ %5, %9 ]
  %86 = phi double [ %102, %100 ], [ %10, %9 ]
  %87 = phi i32 [ %103, %100 ], [ 0, %9 ]
  %88 = fptrunc double %86 to float
  %89 = fadd float %88, 2.000000e+00
  %90 = fmul float %89, 8.000000e+03
  %91 = fsub float 0.000000e+00, %90
  %92 = tail call float @llvm.fabs.f32(float %91)
  %93 = fpext float %92 to double
  %94 = fcmp olt double %93, 1.000000e-03
  br i1 %94, label %100, label %95

95:                                               ; preds = %84
  %96 = load i32, ptr @current_test, align 4, !tbaa !9
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %96)
  %98 = load double, ptr @init_value, align 8, !tbaa !28
  %99 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %100

100:                                              ; preds = %84, %95
  %101 = phi i32 [ %85, %84 ], [ %99, %95 ]
  %102 = phi double [ %86, %84 ], [ %98, %95 ]
  %103 = add nuw nsw i32 %87, 1
  %104 = icmp slt i32 %103, %101
  br i1 %104, label %84, label %105, !llvm.loop !616

105:                                              ; preds = %100, %24, %3
  %106 = tail call i64 @clock() #17
  store i64 %106, ptr @end_time, align 8, !tbaa !26
  %107 = load i64, ptr @start_time, align 8, !tbaa !26
  %108 = load ptr, ptr @results, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %116

112:                                              ; preds = %105
  %113 = load i32, ptr @current_test, align 4, !tbaa !9
  %114 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %128, label %116

116:                                              ; preds = %112, %110
  %117 = phi i32 [ %111, %110 ], [ %114, %112 ]
  %118 = add nsw i32 %117, 10
  store i32 %118, ptr @allocated_results, align 4, !tbaa !9
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 4
  %121 = tail call ptr @realloc(ptr noundef %108, i64 noundef %120) #14
  store ptr %121, ptr @results, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %128

125:                                              ; preds = %116
  %126 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %127 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %126)
  tail call void @exit(i32 noundef -1) #15
  unreachable

128:                                              ; preds = %112, %123
  %129 = phi i32 [ %124, %123 ], [ %113, %112 ]
  %130 = phi ptr [ %121, %123 ], [ %108, %112 ]
  %131 = sub nsw i64 %106, %107
  %132 = sitofp i64 %131 to double
  %133 = fdiv double %132, 1.000000e+06
  %134 = sext i32 %129 to i64
  %135 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134
  store double %133, ptr %135, align 8, !tbaa !11
  %136 = getelementptr inbounds %struct.one_result, ptr %130, i64 %134, i32 1
  store ptr %2, ptr %136, align 8, !tbaa !14
  %137 = add nsw i32 %129, 1
  store i32 %137, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %112

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %90

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %58, label %28

20:                                               ; preds = %74
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %74
  %25 = phi i32 [ %23, %20 ], [ %18, %74 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %112, !llvm.loop !619

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %55, %28 ], [ 0, %17 ]
  %30 = phi float [ %54, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %56, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds float, ptr %0, i64 %29
  %33 = load float, ptr %32, align 4, !tbaa !40
  %34 = fadd float %33, 2.000000e+00
  %35 = fadd float %34, 0xC003333340000000
  %36 = fadd float %30, %35
  %37 = or i64 %29, 1
  %38 = getelementptr inbounds float, ptr %0, i64 %37
  %39 = load float, ptr %38, align 4, !tbaa !40
  %40 = fadd float %39, 2.000000e+00
  %41 = fadd float %40, 0xC003333340000000
  %42 = fadd float %36, %41
  %43 = or i64 %29, 2
  %44 = getelementptr inbounds float, ptr %0, i64 %43
  %45 = load float, ptr %44, align 4, !tbaa !40
  %46 = fadd float %45, 2.000000e+00
  %47 = fadd float %46, 0xC003333340000000
  %48 = fadd float %42, %47
  %49 = or i64 %29, 3
  %50 = getelementptr inbounds float, ptr %0, i64 %49
  %51 = load float, ptr %50, align 4, !tbaa !40
  %52 = fadd float %51, 2.000000e+00
  %53 = fadd float %52, 0xC003333340000000
  %54 = fadd float %48, %53
  %55 = add nuw nsw i64 %29, 4
  %56 = add i64 %31, 4
  %57 = icmp eq i64 %56, %15
  br i1 %57, label %58, label %28, !llvm.loop !620

58:                                               ; preds = %28, %17
  %59 = phi float [ undef, %17 ], [ %54, %28 ]
  %60 = phi i64 [ 0, %17 ], [ %55, %28 ]
  %61 = phi float [ 0.000000e+00, %17 ], [ %54, %28 ]
  br i1 %16, label %74, label %62

62:                                               ; preds = %58, %62
  %63 = phi i64 [ %71, %62 ], [ %60, %58 ]
  %64 = phi float [ %70, %62 ], [ %61, %58 ]
  %65 = phi i64 [ %72, %62 ], [ 0, %58 ]
  %66 = getelementptr inbounds float, ptr %0, i64 %63
  %67 = load float, ptr %66, align 4, !tbaa !40
  %68 = fadd float %67, 2.000000e+00
  %69 = fadd float %68, 0xC003333340000000
  %70 = fadd float %64, %69
  %71 = add nuw nsw i64 %63, 1
  %72 = add i64 %65, 1
  %73 = icmp eq i64 %72, %13
  br i1 %73, label %74, label %62, !llvm.loop !621

74:                                               ; preds = %62, %58
  %75 = phi float [ %59, %58 ], [ %70, %62 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !28
  %77 = fptrunc double %76 to float
  %78 = fadd float %77, 2.000000e+00
  %79 = fadd float %78, 0xC003333340000000
  %80 = fmul float %79, 8.000000e+03
  %81 = fsub float %75, %80
  %82 = tail call float @llvm.fabs.f32(float %75)
  %83 = fpext float %82 to double
  %84 = fcmp ogt double %83, 1.000000e-04
  %85 = select i1 %84, float %75, float 1.000000e+00
  %86 = fdiv float %81, %85
  %87 = tail call float @llvm.fabs.f32(float %86)
  %88 = fpext float %87 to double
  %89 = fcmp olt double %88, 1.000000e-03
  br i1 %89, label %24, label %20

90:                                               ; preds = %9, %107
  %91 = phi i32 [ %108, %107 ], [ %5, %9 ]
  %92 = phi double [ %109, %107 ], [ %10, %9 ]
  %93 = phi i32 [ %110, %107 ], [ 0, %9 ]
  %94 = fptrunc double %92 to float
  %95 = fadd float %94, 2.000000e+00
  %96 = fadd float %95, 0xC003333340000000
  %97 = fmul float %96, 8.000000e+03
  %98 = fsub float 0.000000e+00, %97
  %99 = tail call float @llvm.fabs.f32(float %98)
  %100 = fpext float %99 to double
  %101 = fcmp olt double %100, 1.000000e-03
  br i1 %101, label %107, label %102

102:                                              ; preds = %90
  %103 = load i32, ptr @current_test, align 4, !tbaa !9
  %104 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %103)
  %105 = load double, ptr @init_value, align 8, !tbaa !28
  %106 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %107

107:                                              ; preds = %90, %102
  %108 = phi i32 [ %91, %90 ], [ %106, %102 ]
  %109 = phi double [ %92, %90 ], [ %105, %102 ]
  %110 = add nuw nsw i32 %93, 1
  %111 = icmp slt i32 %110, %108
  br i1 %111, label %90, label %112, !llvm.loop !619

112:                                              ; preds = %107, %24, %3
  %113 = tail call i64 @clock() #17
  store i64 %113, ptr @end_time, align 8, !tbaa !26
  %114 = load i64, ptr @start_time, align 8, !tbaa !26
  %115 = load ptr, ptr @results, align 8, !tbaa !5
  %116 = icmp eq ptr %115, null
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  %118 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %123

119:                                              ; preds = %112
  %120 = load i32, ptr @current_test, align 4, !tbaa !9
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %122 = icmp slt i32 %120, %121
  br i1 %122, label %135, label %123

123:                                              ; preds = %119, %117
  %124 = phi i32 [ %118, %117 ], [ %121, %119 ]
  %125 = add nsw i32 %124, 10
  store i32 %125, ptr @allocated_results, align 4, !tbaa !9
  %126 = sext i32 %125 to i64
  %127 = shl nsw i64 %126, 4
  %128 = tail call ptr @realloc(ptr noundef %115, i64 noundef %127) #14
  store ptr %128, ptr @results, align 8, !tbaa !5
  %129 = icmp eq ptr %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %123
  %131 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %135

132:                                              ; preds = %123
  %133 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %134 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %133)
  tail call void @exit(i32 noundef -1) #15
  unreachable

135:                                              ; preds = %119, %130
  %136 = phi i32 [ %131, %130 ], [ %120, %119 ]
  %137 = phi ptr [ %128, %130 ], [ %115, %119 ]
  %138 = sub nsw i64 %113, %114
  %139 = sitofp i64 %138 to double
  %140 = fdiv double %139, 1.000000e+06
  %141 = sext i32 %136 to i64
  %142 = getelementptr inbounds %struct.one_result, ptr %137, i64 %141
  store double %140, ptr %142, align 8, !tbaa !11
  %143 = getelementptr inbounds %struct.one_result, ptr %137, i64 %141, i32 1
  store ptr %2, ptr %143, align 8, !tbaa !14
  %144 = add nsw i32 %136, 1
  store i32 %144, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %63

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %56

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %63, !llvm.loop !622

25:                                               ; preds = %14, %25
  %26 = phi double [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd double %26, 2.000000e+00
  %29 = fadd double %28, 2.000000e+00
  %30 = fadd double %29, 2.000000e+00
  %31 = fadd double %30, 2.000000e+00
  %32 = fadd double %31, 2.000000e+00
  %33 = fadd double %32, 2.000000e+00
  %34 = fadd double %33, 2.000000e+00
  %35 = fadd double %34, 2.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !623

38:                                               ; preds = %25, %14
  %39 = phi double [ undef, %14 ], [ %35, %25 ]
  %40 = phi double [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi double [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd double %42, 2.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !624

47:                                               ; preds = %41, %38
  %48 = phi double [ %39, %38 ], [ %44, %41 ]
  %49 = fadd double %48, -1.600000e+04
  %50 = tail call double @llvm.fabs.f64(double %48)
  %51 = fcmp ogt double %50, 1.000000e-08
  %52 = select i1 %51, double %48, double 1.000000e+00
  %53 = fdiv double %49, %52
  %54 = tail call double @llvm.fabs.f64(double %53)
  %55 = fcmp olt double %54, 0x3EB0C6F7A0B5ED8D
  br i1 %55, label %21, label %17

56:                                               ; preds = %7, %56
  %57 = phi i32 [ %60, %56 ], [ 0, %7 ]
  %58 = load i32, ptr @current_test, align 4, !tbaa !9
  %59 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %58)
  %60 = add nuw nsw i32 %57, 1
  %61 = load i32, ptr @iterations, align 4, !tbaa !9
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %56, label %63, !llvm.loop !622

63:                                               ; preds = %56, %21, %3
  %64 = tail call i64 @clock() #17
  store i64 %64, ptr @end_time, align 8, !tbaa !26
  %65 = load i64, ptr @start_time, align 8, !tbaa !26
  %66 = load ptr, ptr @results, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %74

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %86, label %74

74:                                               ; preds = %70, %68
  %75 = phi i32 [ %69, %68 ], [ %72, %70 ]
  %76 = add nsw i32 %75, 10
  store i32 %76, ptr @allocated_results, align 4, !tbaa !9
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 4
  %79 = tail call ptr @realloc(ptr noundef %66, i64 noundef %78) #14
  store ptr %79, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %74
  %82 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %86

83:                                               ; preds = %74
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %85 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %84)
  tail call void @exit(i32 noundef -1) #15
  unreachable

86:                                               ; preds = %70, %81
  %87 = phi i32 [ %82, %81 ], [ %71, %70 ]
  %88 = phi ptr [ %79, %81 ], [ %66, %70 ]
  %89 = sub nsw i64 %64, %65
  %90 = sitofp i64 %89 to double
  %91 = fdiv double %90, 1.000000e+06
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92
  store double %91, ptr %93, align 8, !tbaa !11
  %94 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92, i32 1
  store ptr %2, ptr %94, align 8, !tbaa !14
  %95 = add nsw i32 %87, 1
  store i32 %95, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %63

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %56

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %63, !llvm.loop !625

25:                                               ; preds = %14, %25
  %26 = phi double [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd double %26, 3.000000e+00
  %29 = fadd double %28, 3.000000e+00
  %30 = fadd double %29, 3.000000e+00
  %31 = fadd double %30, 3.000000e+00
  %32 = fadd double %31, 3.000000e+00
  %33 = fadd double %32, 3.000000e+00
  %34 = fadd double %33, 3.000000e+00
  %35 = fadd double %34, 3.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !626

38:                                               ; preds = %25, %14
  %39 = phi double [ undef, %14 ], [ %35, %25 ]
  %40 = phi double [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi double [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd double %42, 3.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !627

47:                                               ; preds = %41, %38
  %48 = phi double [ %39, %38 ], [ %44, %41 ]
  %49 = fadd double %48, -2.400000e+04
  %50 = tail call double @llvm.fabs.f64(double %48)
  %51 = fcmp ogt double %50, 1.000000e-08
  %52 = select i1 %51, double %48, double 1.000000e+00
  %53 = fdiv double %49, %52
  %54 = tail call double @llvm.fabs.f64(double %53)
  %55 = fcmp olt double %54, 0x3EB0C6F7A0B5ED8D
  br i1 %55, label %21, label %17

56:                                               ; preds = %7, %56
  %57 = phi i32 [ %60, %56 ], [ 0, %7 ]
  %58 = load i32, ptr @current_test, align 4, !tbaa !9
  %59 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %58)
  %60 = add nuw nsw i32 %57, 1
  %61 = load i32, ptr @iterations, align 4, !tbaa !9
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %56, label %63, !llvm.loop !625

63:                                               ; preds = %56, %21, %3
  %64 = tail call i64 @clock() #17
  store i64 %64, ptr @end_time, align 8, !tbaa !26
  %65 = load i64, ptr @start_time, align 8, !tbaa !26
  %66 = load ptr, ptr @results, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %74

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %86, label %74

74:                                               ; preds = %70, %68
  %75 = phi i32 [ %69, %68 ], [ %72, %70 ]
  %76 = add nsw i32 %75, 10
  store i32 %76, ptr @allocated_results, align 4, !tbaa !9
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 4
  %79 = tail call ptr @realloc(ptr noundef %66, i64 noundef %78) #14
  store ptr %79, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %74
  %82 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %86

83:                                               ; preds = %74
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %85 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %84)
  tail call void @exit(i32 noundef -1) #15
  unreachable

86:                                               ; preds = %70, %81
  %87 = phi i32 [ %82, %81 ], [ %71, %70 ]
  %88 = phi ptr [ %79, %81 ], [ %66, %70 ]
  %89 = sub nsw i64 %64, %65
  %90 = sitofp i64 %89 to double
  %91 = fdiv double %90, 1.000000e+06
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92
  store double %91, ptr %93, align 8, !tbaa !11
  %94 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92, i32 1
  store ptr %2, ptr %94, align 8, !tbaa !14
  %95 = add nsw i32 %87, 1
  store i32 %95, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %63

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %56

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %63, !llvm.loop !628

25:                                               ; preds = %14, %25
  %26 = phi double [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd double %26, 1.000000e+00
  %29 = fadd double %28, 1.000000e+00
  %30 = fadd double %29, 1.000000e+00
  %31 = fadd double %30, 1.000000e+00
  %32 = fadd double %31, 1.000000e+00
  %33 = fadd double %32, 1.000000e+00
  %34 = fadd double %33, 1.000000e+00
  %35 = fadd double %34, 1.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !629

38:                                               ; preds = %25, %14
  %39 = phi double [ undef, %14 ], [ %35, %25 ]
  %40 = phi double [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi double [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd double %42, 1.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !630

47:                                               ; preds = %41, %38
  %48 = phi double [ %39, %38 ], [ %44, %41 ]
  %49 = fadd double %48, -8.000000e+03
  %50 = tail call double @llvm.fabs.f64(double %48)
  %51 = fcmp ogt double %50, 1.000000e-08
  %52 = select i1 %51, double %48, double 1.000000e+00
  %53 = fdiv double %49, %52
  %54 = tail call double @llvm.fabs.f64(double %53)
  %55 = fcmp olt double %54, 0x3EB0C6F7A0B5ED8D
  br i1 %55, label %21, label %17

56:                                               ; preds = %7, %56
  %57 = phi i32 [ %60, %56 ], [ 0, %7 ]
  %58 = load i32, ptr @current_test, align 4, !tbaa !9
  %59 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %58)
  %60 = add nuw nsw i32 %57, 1
  %61 = load i32, ptr @iterations, align 4, !tbaa !9
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %56, label %63, !llvm.loop !628

63:                                               ; preds = %56, %21, %3
  %64 = tail call i64 @clock() #17
  store i64 %64, ptr @end_time, align 8, !tbaa !26
  %65 = load i64, ptr @start_time, align 8, !tbaa !26
  %66 = load ptr, ptr @results, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %74

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %86, label %74

74:                                               ; preds = %70, %68
  %75 = phi i32 [ %69, %68 ], [ %72, %70 ]
  %76 = add nsw i32 %75, 10
  store i32 %76, ptr @allocated_results, align 4, !tbaa !9
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 4
  %79 = tail call ptr @realloc(ptr noundef %66, i64 noundef %78) #14
  store ptr %79, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %74
  %82 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %86

83:                                               ; preds = %74
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %85 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %84)
  tail call void @exit(i32 noundef -1) #15
  unreachable

86:                                               ; preds = %70, %81
  %87 = phi i32 [ %82, %81 ], [ %71, %70 ]
  %88 = phi ptr [ %79, %81 ], [ %66, %70 ]
  %89 = sub nsw i64 %64, %65
  %90 = sitofp i64 %89 to double
  %91 = fdiv double %90, 1.000000e+06
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92
  store double %91, ptr %93, align 8, !tbaa !11
  %94 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92, i32 1
  store ptr %2, ptr %94, align 8, !tbaa !14
  %95 = add nsw i32 %87, 1
  store i32 %95, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %63

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %56

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %63, !llvm.loop !631

25:                                               ; preds = %14, %25
  %26 = phi double [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd double %26, 6.000000e+00
  %29 = fadd double %28, 6.000000e+00
  %30 = fadd double %29, 6.000000e+00
  %31 = fadd double %30, 6.000000e+00
  %32 = fadd double %31, 6.000000e+00
  %33 = fadd double %32, 6.000000e+00
  %34 = fadd double %33, 6.000000e+00
  %35 = fadd double %34, 6.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !632

38:                                               ; preds = %25, %14
  %39 = phi double [ undef, %14 ], [ %35, %25 ]
  %40 = phi double [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi double [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd double %42, 6.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !633

47:                                               ; preds = %41, %38
  %48 = phi double [ %39, %38 ], [ %44, %41 ]
  %49 = fadd double %48, -4.800000e+04
  %50 = tail call double @llvm.fabs.f64(double %48)
  %51 = fcmp ogt double %50, 1.000000e-08
  %52 = select i1 %51, double %48, double 1.000000e+00
  %53 = fdiv double %49, %52
  %54 = tail call double @llvm.fabs.f64(double %53)
  %55 = fcmp olt double %54, 0x3EB0C6F7A0B5ED8D
  br i1 %55, label %21, label %17

56:                                               ; preds = %7, %56
  %57 = phi i32 [ %60, %56 ], [ 0, %7 ]
  %58 = load i32, ptr @current_test, align 4, !tbaa !9
  %59 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %58)
  %60 = add nuw nsw i32 %57, 1
  %61 = load i32, ptr @iterations, align 4, !tbaa !9
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %56, label %63, !llvm.loop !631

63:                                               ; preds = %56, %21, %3
  %64 = tail call i64 @clock() #17
  store i64 %64, ptr @end_time, align 8, !tbaa !26
  %65 = load i64, ptr @start_time, align 8, !tbaa !26
  %66 = load ptr, ptr @results, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %74

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %86, label %74

74:                                               ; preds = %70, %68
  %75 = phi i32 [ %69, %68 ], [ %72, %70 ]
  %76 = add nsw i32 %75, 10
  store i32 %76, ptr @allocated_results, align 4, !tbaa !9
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 4
  %79 = tail call ptr @realloc(ptr noundef %66, i64 noundef %78) #14
  store ptr %79, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %74
  %82 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %86

83:                                               ; preds = %74
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %85 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %84)
  tail call void @exit(i32 noundef -1) #15
  unreachable

86:                                               ; preds = %70, %81
  %87 = phi i32 [ %82, %81 ], [ %71, %70 ]
  %88 = phi ptr [ %79, %81 ], [ %66, %70 ]
  %89 = sub nsw i64 %64, %65
  %90 = sitofp i64 %89 to double
  %91 = fdiv double %90, 1.000000e+06
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92
  store double %91, ptr %93, align 8, !tbaa !11
  %94 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92, i32 1
  store ptr %2, ptr %94, align 8, !tbaa !14
  %95 = add nsw i32 %87, 1
  store i32 %95, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %63

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %56

9:                                                ; preds = %7
  %10 = and i32 %1, 7
  %11 = icmp ult i32 %1, 8
  %12 = and i32 %1, -8
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %9, %21
  %15 = phi i32 [ %22, %21 ], [ %5, %9 ]
  %16 = phi i32 [ %23, %21 ], [ 0, %9 ]
  br i1 %11, label %38, label %25

17:                                               ; preds = %47
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %20 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %21

21:                                               ; preds = %17, %47
  %22 = phi i32 [ %20, %17 ], [ %15, %47 ]
  %23 = add nuw nsw i32 %16, 1
  %24 = icmp slt i32 %23, %22
  br i1 %24, label %14, label %63, !llvm.loop !634

25:                                               ; preds = %14, %25
  %26 = phi double [ %35, %25 ], [ 0.000000e+00, %14 ]
  %27 = phi i32 [ %36, %25 ], [ 0, %14 ]
  %28 = fadd double %26, 2.000000e+00
  %29 = fadd double %28, 2.000000e+00
  %30 = fadd double %29, 2.000000e+00
  %31 = fadd double %30, 2.000000e+00
  %32 = fadd double %31, 2.000000e+00
  %33 = fadd double %32, 2.000000e+00
  %34 = fadd double %33, 2.000000e+00
  %35 = fadd double %34, 2.000000e+00
  %36 = add i32 %27, 8
  %37 = icmp eq i32 %36, %12
  br i1 %37, label %38, label %25, !llvm.loop !635

38:                                               ; preds = %25, %14
  %39 = phi double [ undef, %14 ], [ %35, %25 ]
  %40 = phi double [ 0.000000e+00, %14 ], [ %35, %25 ]
  br i1 %13, label %47, label %41

41:                                               ; preds = %38, %41
  %42 = phi double [ %44, %41 ], [ %40, %38 ]
  %43 = phi i32 [ %45, %41 ], [ 0, %38 ]
  %44 = fadd double %42, 2.000000e+00
  %45 = add i32 %43, 1
  %46 = icmp eq i32 %45, %10
  br i1 %46, label %47, label %41, !llvm.loop !636

47:                                               ; preds = %41, %38
  %48 = phi double [ %39, %38 ], [ %44, %41 ]
  %49 = fadd double %48, -1.600000e+04
  %50 = tail call double @llvm.fabs.f64(double %48)
  %51 = fcmp ogt double %50, 1.000000e-08
  %52 = select i1 %51, double %48, double 1.000000e+00
  %53 = fdiv double %49, %52
  %54 = tail call double @llvm.fabs.f64(double %53)
  %55 = fcmp olt double %54, 0x3EB0C6F7A0B5ED8D
  br i1 %55, label %21, label %17

56:                                               ; preds = %7, %56
  %57 = phi i32 [ %60, %56 ], [ 0, %7 ]
  %58 = load i32, ptr @current_test, align 4, !tbaa !9
  %59 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %58)
  %60 = add nuw nsw i32 %57, 1
  %61 = load i32, ptr @iterations, align 4, !tbaa !9
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %56, label %63, !llvm.loop !634

63:                                               ; preds = %56, %21, %3
  %64 = tail call i64 @clock() #17
  store i64 %64, ptr @end_time, align 8, !tbaa !26
  %65 = load i64, ptr @start_time, align 8, !tbaa !26
  %66 = load ptr, ptr @results, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %74

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !9
  %72 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %86, label %74

74:                                               ; preds = %70, %68
  %75 = phi i32 [ %69, %68 ], [ %72, %70 ]
  %76 = add nsw i32 %75, 10
  store i32 %76, ptr @allocated_results, align 4, !tbaa !9
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 4
  %79 = tail call ptr @realloc(ptr noundef %66, i64 noundef %78) #14
  store ptr %79, ptr @results, align 8, !tbaa !5
  %80 = icmp eq ptr %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %74
  %82 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %86

83:                                               ; preds = %74
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %85 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %84)
  tail call void @exit(i32 noundef -1) #15
  unreachable

86:                                               ; preds = %70, %81
  %87 = phi i32 [ %82, %81 ], [ %71, %70 ]
  %88 = phi ptr [ %79, %81 ], [ %66, %70 ]
  %89 = sub nsw i64 %64, %65
  %90 = sitofp i64 %89 to double
  %91 = fdiv double %90, 1.000000e+06
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92
  store double %91, ptr %93, align 8, !tbaa !11
  %94 = getelementptr inbounds %struct.one_result, ptr %88, i64 %92, i32 1
  store ptr %2, ptr %94, align 8, !tbaa !14
  %95 = add nsw i32 %87, 1
  store i32 %95, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %100

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %81

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %100, !llvm.loop !637

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi double [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fadd double %33, 1.000000e+01
  %35 = fadd double %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds double, ptr %0, i64 %36
  %38 = load double, ptr %37, align 8, !tbaa !28
  %39 = fadd double %38, 1.000000e+01
  %40 = fadd double %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds double, ptr %0, i64 %41
  %43 = load double, ptr %42, align 8, !tbaa !28
  %44 = fadd double %43, 1.000000e+01
  %45 = fadd double %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds double, ptr %0, i64 %46
  %48 = load double, ptr %47, align 8, !tbaa !28
  %49 = fadd double %48, 1.000000e+01
  %50 = fadd double %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !638

54:                                               ; preds = %28, %17
  %55 = phi double [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi double [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi double [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds double, ptr %0, i64 %59
  %63 = load double, ptr %62, align 8, !tbaa !28
  %64 = fadd double %63, 1.000000e+01
  %65 = fadd double %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !639

69:                                               ; preds = %58, %54
  %70 = phi double [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fadd double %71, 1.000000e+01
  %73 = fmul double %72, 8.000000e+03
  %74 = fsub double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %70)
  %76 = fcmp ogt double %75, 1.000000e-08
  %77 = select i1 %76, double %70, double 1.000000e+00
  %78 = fdiv double %74, %77
  %79 = tail call double @llvm.fabs.f64(double %78)
  %80 = fcmp olt double %79, 0x3EB0C6F7A0B5ED8D
  br i1 %80, label %24, label %20

81:                                               ; preds = %9, %95
  %82 = phi i32 [ %96, %95 ], [ %5, %9 ]
  %83 = phi double [ %97, %95 ], [ %10, %9 ]
  %84 = phi i32 [ %98, %95 ], [ 0, %9 ]
  %85 = fadd double %83, 1.000000e+01
  %86 = fmul double %85, 8.000000e+03
  %87 = fsub double 0.000000e+00, %86
  %88 = tail call double @llvm.fabs.f64(double %87)
  %89 = fcmp olt double %88, 0x3EB0C6F7A0B5ED8D
  br i1 %89, label %95, label %90

90:                                               ; preds = %81
  %91 = load i32, ptr @current_test, align 4, !tbaa !9
  %92 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %91)
  %93 = load double, ptr @init_value, align 8, !tbaa !28
  %94 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %95

95:                                               ; preds = %81, %90
  %96 = phi i32 [ %82, %81 ], [ %94, %90 ]
  %97 = phi double [ %83, %81 ], [ %93, %90 ]
  %98 = add nuw nsw i32 %84, 1
  %99 = icmp slt i32 %98, %96
  br i1 %99, label %81, label %100, !llvm.loop !637

100:                                              ; preds = %95, %24, %3
  %101 = tail call i64 @clock() #17
  store i64 %101, ptr @end_time, align 8, !tbaa !26
  %102 = load i64, ptr @start_time, align 8, !tbaa !26
  %103 = load ptr, ptr @results, align 8, !tbaa !5
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %111

107:                                              ; preds = %100
  %108 = load i32, ptr @current_test, align 4, !tbaa !9
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %107, %105
  %112 = phi i32 [ %106, %105 ], [ %109, %107 ]
  %113 = add nsw i32 %112, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !9
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %103, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !5
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %111
  %119 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %123

120:                                              ; preds = %111
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %107, %118
  %124 = phi i32 [ %119, %118 ], [ %108, %107 ]
  %125 = phi ptr [ %116, %118 ], [ %103, %107 ]
  %126 = sub nsw i64 %101, %102
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !11
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !14
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %77

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %99, !llvm.loop !640

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi double [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fadd double %33, 1.000000e+00
  %35 = fadd double %34, 2.000000e+00
  %36 = fadd double %35, 3.000000e+00
  %37 = fadd double %36, 4.000000e+00
  %38 = fadd double %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds double, ptr %0, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !28
  %42 = fadd double %41, 1.000000e+00
  %43 = fadd double %42, 2.000000e+00
  %44 = fadd double %43, 3.000000e+00
  %45 = fadd double %44, 4.000000e+00
  %46 = fadd double %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !641

50:                                               ; preds = %28, %17
  %51 = phi double [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi double [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds double, ptr %0, i64 %52
  %56 = load double, ptr %55, align 8, !tbaa !28
  %57 = fadd double %56, 1.000000e+00
  %58 = fadd double %57, 2.000000e+00
  %59 = fadd double %58, 3.000000e+00
  %60 = fadd double %59, 4.000000e+00
  %61 = fadd double %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi double [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fadd double %64, 1.000000e+00
  %66 = fadd double %65, 2.000000e+00
  %67 = fadd double %66, 3.000000e+00
  %68 = fadd double %67, 4.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = select i1 %72, double %63, double 1.000000e+00
  %74 = fdiv double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %24, label %20

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fadd double %79, 1.000000e+00
  %82 = fadd double %81, 2.000000e+00
  %83 = fadd double %82, 3.000000e+00
  %84 = fadd double %83, 4.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !9
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !28
  %93 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !640

99:                                               ; preds = %94, %24, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !26
  %101 = load i64, ptr @start_time, align 8, !tbaa !26
  %102 = load ptr, ptr @results, align 8, !tbaa !5
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %110

106:                                              ; preds = %99
  %107 = load i32, ptr @current_test, align 4, !tbaa !9
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %122, label %110

110:                                              ; preds = %106, %104
  %111 = phi i32 [ %105, %104 ], [ %108, %106 ]
  %112 = add nsw i32 %111, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !9
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %102, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !5
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %110
  %118 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %122

119:                                              ; preds = %110
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %106, %117
  %123 = phi i32 [ %118, %117 ], [ %107, %106 ]
  %124 = phi ptr [ %115, %117 ], [ %102, %106 ]
  %125 = sub nsw i64 %100, %101
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !11
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !14
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %100

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %81

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %100, !llvm.loop !642

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi double [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fadd double %33, -1.000000e+01
  %35 = fadd double %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds double, ptr %0, i64 %36
  %38 = load double, ptr %37, align 8, !tbaa !28
  %39 = fadd double %38, -1.000000e+01
  %40 = fadd double %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds double, ptr %0, i64 %41
  %43 = load double, ptr %42, align 8, !tbaa !28
  %44 = fadd double %43, -1.000000e+01
  %45 = fadd double %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds double, ptr %0, i64 %46
  %48 = load double, ptr %47, align 8, !tbaa !28
  %49 = fadd double %48, -1.000000e+01
  %50 = fadd double %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !643

54:                                               ; preds = %28, %17
  %55 = phi double [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi double [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi double [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds double, ptr %0, i64 %59
  %63 = load double, ptr %62, align 8, !tbaa !28
  %64 = fadd double %63, -1.000000e+01
  %65 = fadd double %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !644

69:                                               ; preds = %58, %54
  %70 = phi double [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fadd double %71, -1.000000e+01
  %73 = fmul double %72, 8.000000e+03
  %74 = fsub double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %70)
  %76 = fcmp ogt double %75, 1.000000e-08
  %77 = select i1 %76, double %70, double 1.000000e+00
  %78 = fdiv double %74, %77
  %79 = tail call double @llvm.fabs.f64(double %78)
  %80 = fcmp olt double %79, 0x3EB0C6F7A0B5ED8D
  br i1 %80, label %24, label %20

81:                                               ; preds = %9, %95
  %82 = phi i32 [ %96, %95 ], [ %5, %9 ]
  %83 = phi double [ %97, %95 ], [ %10, %9 ]
  %84 = phi i32 [ %98, %95 ], [ 0, %9 ]
  %85 = fadd double %83, -1.000000e+01
  %86 = fmul double %85, 8.000000e+03
  %87 = fsub double 0.000000e+00, %86
  %88 = tail call double @llvm.fabs.f64(double %87)
  %89 = fcmp olt double %88, 0x3EB0C6F7A0B5ED8D
  br i1 %89, label %95, label %90

90:                                               ; preds = %81
  %91 = load i32, ptr @current_test, align 4, !tbaa !9
  %92 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %91)
  %93 = load double, ptr @init_value, align 8, !tbaa !28
  %94 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %95

95:                                               ; preds = %81, %90
  %96 = phi i32 [ %82, %81 ], [ %94, %90 ]
  %97 = phi double [ %83, %81 ], [ %93, %90 ]
  %98 = add nuw nsw i32 %84, 1
  %99 = icmp slt i32 %98, %96
  br i1 %99, label %81, label %100, !llvm.loop !642

100:                                              ; preds = %95, %24, %3
  %101 = tail call i64 @clock() #17
  store i64 %101, ptr @end_time, align 8, !tbaa !26
  %102 = load i64, ptr @start_time, align 8, !tbaa !26
  %103 = load ptr, ptr @results, align 8, !tbaa !5
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %111

107:                                              ; preds = %100
  %108 = load i32, ptr @current_test, align 4, !tbaa !9
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %107, %105
  %112 = phi i32 [ %106, %105 ], [ %109, %107 ]
  %113 = add nsw i32 %112, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !9
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %103, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !5
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %111
  %119 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %123

120:                                              ; preds = %111
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %107, %118
  %124 = phi i32 [ %119, %118 ], [ %108, %107 ]
  %125 = phi ptr [ %116, %118 ], [ %103, %107 ]
  %126 = sub nsw i64 %101, %102
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !11
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !14
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %77

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %99, !llvm.loop !645

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi double [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fadd double %33, -1.000000e+00
  %35 = fadd double %34, -2.000000e+00
  %36 = fadd double %35, -3.000000e+00
  %37 = fadd double %36, -4.000000e+00
  %38 = fadd double %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds double, ptr %0, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !28
  %42 = fadd double %41, -1.000000e+00
  %43 = fadd double %42, -2.000000e+00
  %44 = fadd double %43, -3.000000e+00
  %45 = fadd double %44, -4.000000e+00
  %46 = fadd double %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !646

50:                                               ; preds = %28, %17
  %51 = phi double [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi double [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds double, ptr %0, i64 %52
  %56 = load double, ptr %55, align 8, !tbaa !28
  %57 = fadd double %56, -1.000000e+00
  %58 = fadd double %57, -2.000000e+00
  %59 = fadd double %58, -3.000000e+00
  %60 = fadd double %59, -4.000000e+00
  %61 = fadd double %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi double [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fadd double %64, -1.000000e+00
  %66 = fadd double %65, -2.000000e+00
  %67 = fadd double %66, -3.000000e+00
  %68 = fadd double %67, -4.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = select i1 %72, double %63, double 1.000000e+00
  %74 = fdiv double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %24, label %20

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fadd double %79, -1.000000e+00
  %82 = fadd double %81, -2.000000e+00
  %83 = fadd double %82, -3.000000e+00
  %84 = fadd double %83, -4.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !9
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !28
  %93 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !645

99:                                               ; preds = %94, %24, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !26
  %101 = load i64, ptr @start_time, align 8, !tbaa !26
  %102 = load ptr, ptr @results, align 8, !tbaa !5
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %110

106:                                              ; preds = %99
  %107 = load i32, ptr @current_test, align 4, !tbaa !9
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %122, label %110

110:                                              ; preds = %106, %104
  %111 = phi i32 [ %105, %104 ], [ %108, %106 ]
  %112 = add nsw i32 %111, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !9
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %102, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !5
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %110
  %118 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %122

119:                                              ; preds = %110
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %106, %117
  %123 = phi i32 [ %118, %117 ], [ %107, %106 ]
  %124 = phi ptr [ %115, %117 ], [ %102, %106 ]
  %125 = sub nsw i64 %100, %101
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !11
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !14
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %100

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %81

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %100, !llvm.loop !647

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi double [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fmul double %33, 1.200000e+02
  %35 = fadd double %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds double, ptr %0, i64 %36
  %38 = load double, ptr %37, align 8, !tbaa !28
  %39 = fmul double %38, 1.200000e+02
  %40 = fadd double %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds double, ptr %0, i64 %41
  %43 = load double, ptr %42, align 8, !tbaa !28
  %44 = fmul double %43, 1.200000e+02
  %45 = fadd double %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds double, ptr %0, i64 %46
  %48 = load double, ptr %47, align 8, !tbaa !28
  %49 = fmul double %48, 1.200000e+02
  %50 = fadd double %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !648

54:                                               ; preds = %28, %17
  %55 = phi double [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi double [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi double [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds double, ptr %0, i64 %59
  %63 = load double, ptr %62, align 8, !tbaa !28
  %64 = fmul double %63, 1.200000e+02
  %65 = fadd double %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !649

69:                                               ; preds = %58, %54
  %70 = phi double [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fmul double %71, 1.200000e+02
  %73 = fmul double %72, 8.000000e+03
  %74 = fsub double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %70)
  %76 = fcmp ogt double %75, 1.000000e-08
  %77 = select i1 %76, double %70, double 1.000000e+00
  %78 = fdiv double %74, %77
  %79 = tail call double @llvm.fabs.f64(double %78)
  %80 = fcmp olt double %79, 0x3EB0C6F7A0B5ED8D
  br i1 %80, label %24, label %20

81:                                               ; preds = %9, %95
  %82 = phi i32 [ %96, %95 ], [ %5, %9 ]
  %83 = phi double [ %97, %95 ], [ %10, %9 ]
  %84 = phi i32 [ %98, %95 ], [ 0, %9 ]
  %85 = fmul double %83, 1.200000e+02
  %86 = fmul double %85, 8.000000e+03
  %87 = fsub double 0.000000e+00, %86
  %88 = tail call double @llvm.fabs.f64(double %87)
  %89 = fcmp olt double %88, 0x3EB0C6F7A0B5ED8D
  br i1 %89, label %95, label %90

90:                                               ; preds = %81
  %91 = load i32, ptr @current_test, align 4, !tbaa !9
  %92 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %91)
  %93 = load double, ptr @init_value, align 8, !tbaa !28
  %94 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %95

95:                                               ; preds = %81, %90
  %96 = phi i32 [ %82, %81 ], [ %94, %90 ]
  %97 = phi double [ %83, %81 ], [ %93, %90 ]
  %98 = add nuw nsw i32 %84, 1
  %99 = icmp slt i32 %98, %96
  br i1 %99, label %81, label %100, !llvm.loop !647

100:                                              ; preds = %95, %24, %3
  %101 = tail call i64 @clock() #17
  store i64 %101, ptr @end_time, align 8, !tbaa !26
  %102 = load i64, ptr @start_time, align 8, !tbaa !26
  %103 = load ptr, ptr @results, align 8, !tbaa !5
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %111

107:                                              ; preds = %100
  %108 = load i32, ptr @current_test, align 4, !tbaa !9
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %107, %105
  %112 = phi i32 [ %106, %105 ], [ %109, %107 ]
  %113 = add nsw i32 %112, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !9
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %103, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !5
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %111
  %119 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %123

120:                                              ; preds = %111
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %107, %118
  %124 = phi i32 [ %119, %118 ], [ %108, %107 ]
  %125 = phi ptr [ %116, %118 ], [ %103, %107 ]
  %126 = sub nsw i64 %101, %102
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !11
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !14
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %77

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %99, !llvm.loop !650

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi double [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fmul double %33, 2.000000e+00
  %35 = fmul double %34, 3.000000e+00
  %36 = fmul double %35, 4.000000e+00
  %37 = fmul double %36, 5.000000e+00
  %38 = fadd double %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds double, ptr %0, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !28
  %42 = fmul double %41, 2.000000e+00
  %43 = fmul double %42, 3.000000e+00
  %44 = fmul double %43, 4.000000e+00
  %45 = fmul double %44, 5.000000e+00
  %46 = fadd double %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !651

50:                                               ; preds = %28, %17
  %51 = phi double [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi double [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds double, ptr %0, i64 %52
  %56 = load double, ptr %55, align 8, !tbaa !28
  %57 = fmul double %56, 2.000000e+00
  %58 = fmul double %57, 3.000000e+00
  %59 = fmul double %58, 4.000000e+00
  %60 = fmul double %59, 5.000000e+00
  %61 = fadd double %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi double [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fmul double %64, 2.000000e+00
  %66 = fmul double %65, 3.000000e+00
  %67 = fmul double %66, 4.000000e+00
  %68 = fmul double %67, 5.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = select i1 %72, double %63, double 1.000000e+00
  %74 = fdiv double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %24, label %20

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fmul double %79, 2.000000e+00
  %82 = fmul double %81, 3.000000e+00
  %83 = fmul double %82, 4.000000e+00
  %84 = fmul double %83, 5.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !9
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !28
  %93 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !650

99:                                               ; preds = %94, %24, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !26
  %101 = load i64, ptr @start_time, align 8, !tbaa !26
  %102 = load ptr, ptr @results, align 8, !tbaa !5
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %110

106:                                              ; preds = %99
  %107 = load i32, ptr @current_test, align 4, !tbaa !9
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %122, label %110

110:                                              ; preds = %106, %104
  %111 = phi i32 [ %105, %104 ], [ %108, %106 ]
  %112 = add nsw i32 %111, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !9
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %102, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !5
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %110
  %118 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %122

119:                                              ; preds = %110
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %106, %117
  %123 = phi i32 [ %118, %117 ], [ %107, %106 ]
  %124 = phi ptr [ %115, %117 ], [ %102, %106 ]
  %125 = sub nsw i64 %100, %101
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !11
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !14
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %100

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %81

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %100, !llvm.loop !652

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi double [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fadd double %33, 1.200000e+02
  %35 = fadd double %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds double, ptr %0, i64 %36
  %38 = load double, ptr %37, align 8, !tbaa !28
  %39 = fadd double %38, 1.200000e+02
  %40 = fadd double %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds double, ptr %0, i64 %41
  %43 = load double, ptr %42, align 8, !tbaa !28
  %44 = fadd double %43, 1.200000e+02
  %45 = fadd double %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds double, ptr %0, i64 %46
  %48 = load double, ptr %47, align 8, !tbaa !28
  %49 = fadd double %48, 1.200000e+02
  %50 = fadd double %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !653

54:                                               ; preds = %28, %17
  %55 = phi double [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi double [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi double [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds double, ptr %0, i64 %59
  %63 = load double, ptr %62, align 8, !tbaa !28
  %64 = fadd double %63, 1.200000e+02
  %65 = fadd double %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !654

69:                                               ; preds = %58, %54
  %70 = phi double [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fadd double %71, 1.200000e+02
  %73 = fmul double %72, 8.000000e+03
  %74 = fsub double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %70)
  %76 = fcmp ogt double %75, 1.000000e-08
  %77 = select i1 %76, double %70, double 1.000000e+00
  %78 = fdiv double %74, %77
  %79 = tail call double @llvm.fabs.f64(double %78)
  %80 = fcmp olt double %79, 0x3EB0C6F7A0B5ED8D
  br i1 %80, label %24, label %20

81:                                               ; preds = %9, %95
  %82 = phi i32 [ %96, %95 ], [ %5, %9 ]
  %83 = phi double [ %97, %95 ], [ %10, %9 ]
  %84 = phi i32 [ %98, %95 ], [ 0, %9 ]
  %85 = fadd double %83, 1.200000e+02
  %86 = fmul double %85, 8.000000e+03
  %87 = fsub double 0.000000e+00, %86
  %88 = tail call double @llvm.fabs.f64(double %87)
  %89 = fcmp olt double %88, 0x3EB0C6F7A0B5ED8D
  br i1 %89, label %95, label %90

90:                                               ; preds = %81
  %91 = load i32, ptr @current_test, align 4, !tbaa !9
  %92 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %91)
  %93 = load double, ptr @init_value, align 8, !tbaa !28
  %94 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %95

95:                                               ; preds = %81, %90
  %96 = phi i32 [ %82, %81 ], [ %94, %90 ]
  %97 = phi double [ %83, %81 ], [ %93, %90 ]
  %98 = add nuw nsw i32 %84, 1
  %99 = icmp slt i32 %98, %96
  br i1 %99, label %81, label %100, !llvm.loop !652

100:                                              ; preds = %95, %24, %3
  %101 = tail call i64 @clock() #17
  store i64 %101, ptr @end_time, align 8, !tbaa !26
  %102 = load i64, ptr @start_time, align 8, !tbaa !26
  %103 = load ptr, ptr @results, align 8, !tbaa !5
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %111

107:                                              ; preds = %100
  %108 = load i32, ptr @current_test, align 4, !tbaa !9
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %107, %105
  %112 = phi i32 [ %106, %105 ], [ %109, %107 ]
  %113 = add nsw i32 %112, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !9
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %103, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !5
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %111
  %119 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %123

120:                                              ; preds = %111
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %107, %118
  %124 = phi i32 [ %119, %118 ], [ %108, %107 ]
  %125 = phi ptr [ %116, %118 ], [ %103, %107 ]
  %126 = sub nsw i64 %101, %102
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !11
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !14
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %100

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %81

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %100, !llvm.loop !655

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi double [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fdiv double %33, 5.000000e+00
  %35 = fadd double %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds double, ptr %0, i64 %36
  %38 = load double, ptr %37, align 8, !tbaa !28
  %39 = fdiv double %38, 5.000000e+00
  %40 = fadd double %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds double, ptr %0, i64 %41
  %43 = load double, ptr %42, align 8, !tbaa !28
  %44 = fdiv double %43, 5.000000e+00
  %45 = fadd double %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds double, ptr %0, i64 %46
  %48 = load double, ptr %47, align 8, !tbaa !28
  %49 = fdiv double %48, 5.000000e+00
  %50 = fadd double %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !656

54:                                               ; preds = %28, %17
  %55 = phi double [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi double [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi double [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds double, ptr %0, i64 %59
  %63 = load double, ptr %62, align 8, !tbaa !28
  %64 = fdiv double %63, 5.000000e+00
  %65 = fadd double %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !657

69:                                               ; preds = %58, %54
  %70 = phi double [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fdiv double %71, 5.000000e+00
  %73 = fmul double %72, 8.000000e+03
  %74 = fsub double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %70)
  %76 = fcmp ogt double %75, 1.000000e-08
  %77 = select i1 %76, double %70, double 1.000000e+00
  %78 = fdiv double %74, %77
  %79 = tail call double @llvm.fabs.f64(double %78)
  %80 = fcmp olt double %79, 0x3EB0C6F7A0B5ED8D
  br i1 %80, label %24, label %20

81:                                               ; preds = %9, %95
  %82 = phi i32 [ %96, %95 ], [ %5, %9 ]
  %83 = phi double [ %97, %95 ], [ %10, %9 ]
  %84 = phi i32 [ %98, %95 ], [ 0, %9 ]
  %85 = fdiv double %83, 5.000000e+00
  %86 = fmul double %85, 8.000000e+03
  %87 = fsub double 0.000000e+00, %86
  %88 = tail call double @llvm.fabs.f64(double %87)
  %89 = fcmp olt double %88, 0x3EB0C6F7A0B5ED8D
  br i1 %89, label %95, label %90

90:                                               ; preds = %81
  %91 = load i32, ptr @current_test, align 4, !tbaa !9
  %92 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %91)
  %93 = load double, ptr @init_value, align 8, !tbaa !28
  %94 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %95

95:                                               ; preds = %81, %90
  %96 = phi i32 [ %82, %81 ], [ %94, %90 ]
  %97 = phi double [ %83, %81 ], [ %93, %90 ]
  %98 = add nuw nsw i32 %84, 1
  %99 = icmp slt i32 %98, %96
  br i1 %99, label %81, label %100, !llvm.loop !655

100:                                              ; preds = %95, %24, %3
  %101 = tail call i64 @clock() #17
  store i64 %101, ptr @end_time, align 8, !tbaa !26
  %102 = load i64, ptr @start_time, align 8, !tbaa !26
  %103 = load ptr, ptr @results, align 8, !tbaa !5
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %111

107:                                              ; preds = %100
  %108 = load i32, ptr @current_test, align 4, !tbaa !9
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %107, %105
  %112 = phi i32 [ %106, %105 ], [ %109, %107 ]
  %113 = add nsw i32 %112, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !9
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %103, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !5
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %111
  %119 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %123

120:                                              ; preds = %111
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %107, %118
  %124 = phi i32 [ %119, %118 ], [ %108, %107 ]
  %125 = phi ptr [ %116, %118 ], [ %103, %107 ]
  %126 = sub nsw i64 %101, %102
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !11
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !14
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %77

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 1
  %15 = and i64 %12, 4294967294
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %50, label %28

20:                                               ; preds = %62
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %62
  %25 = phi i32 [ %23, %20 ], [ %18, %62 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %99, !llvm.loop !658

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %47, %28 ], [ 0, %17 ]
  %30 = phi double [ %46, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %48, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fmul double %33, 5.000000e-01
  %35 = fdiv double %34, 3.000000e+00
  %36 = fmul double %35, 2.500000e-01
  %37 = fdiv double %36, 5.000000e+00
  %38 = fadd double %30, %37
  %39 = or i64 %29, 1
  %40 = getelementptr inbounds double, ptr %0, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !28
  %42 = fmul double %41, 5.000000e-01
  %43 = fdiv double %42, 3.000000e+00
  %44 = fmul double %43, 2.500000e-01
  %45 = fdiv double %44, 5.000000e+00
  %46 = fadd double %38, %45
  %47 = add nuw nsw i64 %29, 2
  %48 = add i64 %31, 2
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %50, label %28, !llvm.loop !659

50:                                               ; preds = %28, %17
  %51 = phi double [ undef, %17 ], [ %46, %28 ]
  %52 = phi i64 [ 0, %17 ], [ %47, %28 ]
  %53 = phi double [ 0.000000e+00, %17 ], [ %46, %28 ]
  br i1 %16, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds double, ptr %0, i64 %52
  %56 = load double, ptr %55, align 8, !tbaa !28
  %57 = fmul double %56, 5.000000e-01
  %58 = fdiv double %57, 3.000000e+00
  %59 = fmul double %58, 2.500000e-01
  %60 = fdiv double %59, 5.000000e+00
  %61 = fadd double %53, %60
  br label %62

62:                                               ; preds = %50, %54
  %63 = phi double [ %51, %50 ], [ %61, %54 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %65 = fmul double %64, 5.000000e-01
  %66 = fdiv double %65, 3.000000e+00
  %67 = fmul double %66, 2.500000e-01
  %68 = fdiv double %67, 5.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = select i1 %72, double %63, double 1.000000e+00
  %74 = fdiv double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %24, label %20

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fmul double %79, 5.000000e-01
  %82 = fdiv double %81, 3.000000e+00
  %83 = fmul double %82, 2.500000e-01
  %84 = fdiv double %83, 5.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !9
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !28
  %93 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !658

99:                                               ; preds = %94, %24, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !26
  %101 = load i64, ptr @start_time, align 8, !tbaa !26
  %102 = load ptr, ptr @results, align 8, !tbaa !5
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %110

106:                                              ; preds = %99
  %107 = load i32, ptr @current_test, align 4, !tbaa !9
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %122, label %110

110:                                              ; preds = %106, %104
  %111 = phi i32 [ %105, %104 ], [ %108, %106 ]
  %112 = add nsw i32 %111, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !9
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %102, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !5
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %110
  %118 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %122

119:                                              ; preds = %110
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %106, %117
  %123 = phi i32 [ %118, %117 ], [ %107, %106 ]
  %124 = phi ptr [ %115, %117 ], [ %102, %106 ]
  %125 = sub nsw i64 %100, %101
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !11
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !14
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %100

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %81

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %54, label %28

20:                                               ; preds = %69
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %69
  %25 = phi i32 [ %23, %20 ], [ %18, %69 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %100, !llvm.loop !660

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %51, %28 ], [ 0, %17 ]
  %30 = phi double [ %50, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %52, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fadd double %33, 2.000000e+00
  %35 = fadd double %30, %34
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds double, ptr %0, i64 %36
  %38 = load double, ptr %37, align 8, !tbaa !28
  %39 = fadd double %38, 2.000000e+00
  %40 = fadd double %35, %39
  %41 = or i64 %29, 2
  %42 = getelementptr inbounds double, ptr %0, i64 %41
  %43 = load double, ptr %42, align 8, !tbaa !28
  %44 = fadd double %43, 2.000000e+00
  %45 = fadd double %40, %44
  %46 = or i64 %29, 3
  %47 = getelementptr inbounds double, ptr %0, i64 %46
  %48 = load double, ptr %47, align 8, !tbaa !28
  %49 = fadd double %48, 2.000000e+00
  %50 = fadd double %45, %49
  %51 = add nuw nsw i64 %29, 4
  %52 = add i64 %31, 4
  %53 = icmp eq i64 %52, %15
  br i1 %53, label %54, label %28, !llvm.loop !661

54:                                               ; preds = %28, %17
  %55 = phi double [ undef, %17 ], [ %50, %28 ]
  %56 = phi i64 [ 0, %17 ], [ %51, %28 ]
  %57 = phi double [ 0.000000e+00, %17 ], [ %50, %28 ]
  br i1 %16, label %69, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %66, %58 ], [ %56, %54 ]
  %60 = phi double [ %65, %58 ], [ %57, %54 ]
  %61 = phi i64 [ %67, %58 ], [ 0, %54 ]
  %62 = getelementptr inbounds double, ptr %0, i64 %59
  %63 = load double, ptr %62, align 8, !tbaa !28
  %64 = fadd double %63, 2.000000e+00
  %65 = fadd double %60, %64
  %66 = add nuw nsw i64 %59, 1
  %67 = add i64 %61, 1
  %68 = icmp eq i64 %67, %13
  br i1 %68, label %69, label %58, !llvm.loop !662

69:                                               ; preds = %58, %54
  %70 = phi double [ %55, %54 ], [ %65, %58 ]
  %71 = load double, ptr @init_value, align 8, !tbaa !28
  %72 = fadd double %71, 2.000000e+00
  %73 = fmul double %72, 8.000000e+03
  %74 = fsub double %70, %73
  %75 = tail call double @llvm.fabs.f64(double %70)
  %76 = fcmp ogt double %75, 1.000000e-08
  %77 = select i1 %76, double %70, double 1.000000e+00
  %78 = fdiv double %74, %77
  %79 = tail call double @llvm.fabs.f64(double %78)
  %80 = fcmp olt double %79, 0x3EB0C6F7A0B5ED8D
  br i1 %80, label %24, label %20

81:                                               ; preds = %9, %95
  %82 = phi i32 [ %96, %95 ], [ %5, %9 ]
  %83 = phi double [ %97, %95 ], [ %10, %9 ]
  %84 = phi i32 [ %98, %95 ], [ 0, %9 ]
  %85 = fadd double %83, 2.000000e+00
  %86 = fmul double %85, 8.000000e+03
  %87 = fsub double 0.000000e+00, %86
  %88 = tail call double @llvm.fabs.f64(double %87)
  %89 = fcmp olt double %88, 0x3EB0C6F7A0B5ED8D
  br i1 %89, label %95, label %90

90:                                               ; preds = %81
  %91 = load i32, ptr @current_test, align 4, !tbaa !9
  %92 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %91)
  %93 = load double, ptr @init_value, align 8, !tbaa !28
  %94 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %95

95:                                               ; preds = %81, %90
  %96 = phi i32 [ %82, %81 ], [ %94, %90 ]
  %97 = phi double [ %83, %81 ], [ %93, %90 ]
  %98 = add nuw nsw i32 %84, 1
  %99 = icmp slt i32 %98, %96
  br i1 %99, label %81, label %100, !llvm.loop !660

100:                                              ; preds = %95, %24, %3
  %101 = tail call i64 @clock() #17
  store i64 %101, ptr @end_time, align 8, !tbaa !26
  %102 = load i64, ptr @start_time, align 8, !tbaa !26
  %103 = load ptr, ptr @results, align 8, !tbaa !5
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %111

107:                                              ; preds = %100
  %108 = load i32, ptr @current_test, align 4, !tbaa !9
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %107, %105
  %112 = phi i32 [ %106, %105 ], [ %109, %107 ]
  %113 = add nsw i32 %112, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !9
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %103, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !5
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %111
  %119 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %123

120:                                              ; preds = %111
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %107, %118
  %124 = phi i32 [ %119, %118 ], [ %108, %107 ]
  %125 = phi ptr [ %116, %118 ], [ %103, %107 ]
  %126 = sub nsw i64 %101, %102
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !11
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !14
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !26
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %107

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  br label %87

11:                                               ; preds = %7
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 3
  %14 = icmp ult i32 %1, 4
  %15 = and i64 %12, 4294967292
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %11, %24
  %18 = phi i32 [ %25, %24 ], [ %5, %11 ]
  %19 = phi i32 [ %26, %24 ], [ 0, %11 ]
  br i1 %14, label %58, label %28

20:                                               ; preds = %74
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %21)
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %24

24:                                               ; preds = %20, %74
  %25 = phi i32 [ %23, %20 ], [ %18, %74 ]
  %26 = add nuw nsw i32 %19, 1
  %27 = icmp slt i32 %26, %25
  br i1 %27, label %17, label %107, !llvm.loop !663

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %55, %28 ], [ 0, %17 ]
  %30 = phi double [ %54, %28 ], [ 0.000000e+00, %17 ]
  %31 = phi i64 [ %56, %28 ], [ 0, %17 ]
  %32 = getelementptr inbounds double, ptr %0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !28
  %34 = fadd double %33, 2.000000e+00
  %35 = fadd double %34, -2.400000e+00
  %36 = fadd double %30, %35
  %37 = or i64 %29, 1
  %38 = getelementptr inbounds double, ptr %0, i64 %37
  %39 = load double, ptr %38, align 8, !tbaa !28
  %40 = fadd double %39, 2.000000e+00
  %41 = fadd double %40, -2.400000e+00
  %42 = fadd double %36, %41
  %43 = or i64 %29, 2
  %44 = getelementptr inbounds double, ptr %0, i64 %43
  %45 = load double, ptr %44, align 8, !tbaa !28
  %46 = fadd double %45, 2.000000e+00
  %47 = fadd double %46, -2.400000e+00
  %48 = fadd double %42, %47
  %49 = or i64 %29, 3
  %50 = getelementptr inbounds double, ptr %0, i64 %49
  %51 = load double, ptr %50, align 8, !tbaa !28
  %52 = fadd double %51, 2.000000e+00
  %53 = fadd double %52, -2.400000e+00
  %54 = fadd double %48, %53
  %55 = add nuw nsw i64 %29, 4
  %56 = add i64 %31, 4
  %57 = icmp eq i64 %56, %15
  br i1 %57, label %58, label %28, !llvm.loop !664

58:                                               ; preds = %28, %17
  %59 = phi double [ undef, %17 ], [ %54, %28 ]
  %60 = phi i64 [ 0, %17 ], [ %55, %28 ]
  %61 = phi double [ 0.000000e+00, %17 ], [ %54, %28 ]
  br i1 %16, label %74, label %62

62:                                               ; preds = %58, %62
  %63 = phi i64 [ %71, %62 ], [ %60, %58 ]
  %64 = phi double [ %70, %62 ], [ %61, %58 ]
  %65 = phi i64 [ %72, %62 ], [ 0, %58 ]
  %66 = getelementptr inbounds double, ptr %0, i64 %63
  %67 = load double, ptr %66, align 8, !tbaa !28
  %68 = fadd double %67, 2.000000e+00
  %69 = fadd double %68, -2.400000e+00
  %70 = fadd double %64, %69
  %71 = add nuw nsw i64 %63, 1
  %72 = add i64 %65, 1
  %73 = icmp eq i64 %72, %13
  br i1 %73, label %74, label %62, !llvm.loop !665

74:                                               ; preds = %62, %58
  %75 = phi double [ %59, %58 ], [ %70, %62 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !28
  %77 = fadd double %76, 2.000000e+00
  %78 = fadd double %77, -2.400000e+00
  %79 = fmul double %78, 8.000000e+03
  %80 = fsub double %75, %79
  %81 = tail call double @llvm.fabs.f64(double %75)
  %82 = fcmp ogt double %81, 1.000000e-08
  %83 = select i1 %82, double %75, double 1.000000e+00
  %84 = fdiv double %80, %83
  %85 = tail call double @llvm.fabs.f64(double %84)
  %86 = fcmp olt double %85, 0x3EB0C6F7A0B5ED8D
  br i1 %86, label %24, label %20

87:                                               ; preds = %9, %102
  %88 = phi i32 [ %103, %102 ], [ %5, %9 ]
  %89 = phi double [ %104, %102 ], [ %10, %9 ]
  %90 = phi i32 [ %105, %102 ], [ 0, %9 ]
  %91 = fadd double %89, 2.000000e+00
  %92 = fadd double %91, -2.400000e+00
  %93 = fmul double %92, 8.000000e+03
  %94 = fsub double 0.000000e+00, %93
  %95 = tail call double @llvm.fabs.f64(double %94)
  %96 = fcmp olt double %95, 0x3EB0C6F7A0B5ED8D
  br i1 %96, label %102, label %97

97:                                               ; preds = %87
  %98 = load i32, ptr @current_test, align 4, !tbaa !9
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %98)
  %100 = load double, ptr @init_value, align 8, !tbaa !28
  %101 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %102

102:                                              ; preds = %87, %97
  %103 = phi i32 [ %88, %87 ], [ %101, %97 ]
  %104 = phi double [ %89, %87 ], [ %100, %97 ]
  %105 = add nuw nsw i32 %90, 1
  %106 = icmp slt i32 %105, %103
  br i1 %106, label %87, label %107, !llvm.loop !663

107:                                              ; preds = %102, %24, %3
  %108 = tail call i64 @clock() #17
  store i64 %108, ptr @end_time, align 8, !tbaa !26
  %109 = load i64, ptr @start_time, align 8, !tbaa !26
  %110 = load ptr, ptr @results, align 8, !tbaa !5
  %111 = icmp eq ptr %110, null
  br i1 %111, label %112, label %114

112:                                              ; preds = %107
  %113 = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %118

114:                                              ; preds = %107
  %115 = load i32, ptr @current_test, align 4, !tbaa !9
  %116 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %117 = icmp slt i32 %115, %116
  br i1 %117, label %130, label %118

118:                                              ; preds = %114, %112
  %119 = phi i32 [ %113, %112 ], [ %116, %114 ]
  %120 = add nsw i32 %119, 10
  store i32 %120, ptr @allocated_results, align 4, !tbaa !9
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 4
  %123 = tail call ptr @realloc(ptr noundef %110, i64 noundef %122) #14
  store ptr %123, ptr @results, align 8, !tbaa !5
  %124 = icmp eq ptr %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %118
  %126 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %130

127:                                              ; preds = %118
  %128 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %129 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %128)
  tail call void @exit(i32 noundef -1) #15
  unreachable

130:                                              ; preds = %114, %125
  %131 = phi i32 [ %126, %125 ], [ %115, %114 ]
  %132 = phi ptr [ %123, %125 ], [ %110, %114 ]
  %133 = sub nsw i64 %108, %109
  %134 = sitofp i64 %133 to double
  %135 = fdiv double %134, 1.000000e+06
  %136 = sext i32 %131 to i64
  %137 = getelementptr inbounds %struct.one_result, ptr %132, i64 %136
  store double %135, ptr %137, align 8, !tbaa !11
  %138 = getelementptr inbounds %struct.one_result, ptr %132, i64 %136, i32 1
  store ptr %2, ptr %138, align 8, !tbaa !14
  %139 = add nsw i32 %131, 1
  store i32 %139, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #11

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #12

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v16i8(<16 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v8i8(<8 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.add.v8i16(<8 x i16>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #12

attributes #0 = { mustprogress nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nounwind willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { mustprogress norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress nofree nounwind willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #13 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #14 = { nounwind allocsize(1) }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind willreturn memory(read) }
attributes #17 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{!12, !13, i64 0}
!12 = !{!"_ZTS10one_result", !13, i64 0, !6, i64 8}
!13 = !{!"double", !7, i64 0}
!14 = !{!12, !6, i64 8}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.mustprogress"}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.unroll.disable"}
!21 = distinct !{!21, !16}
!22 = distinct !{!22, !16}
!23 = distinct !{!23, !16}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !20}
!26 = !{!27, !27, i64 0}
!27 = !{!"long", !7, i64 0}
!28 = !{!13, !13, i64 0}
!29 = !{!7, !7, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"short", !7, i64 0}
!32 = distinct !{!32, !16, !33, !34}
!33 = !{!"llvm.loop.isvectorized", i32 1}
!34 = !{!"llvm.loop.unroll.runtime.disable"}
!35 = distinct !{!35, !16, !33, !34}
!36 = distinct !{!36, !16, !33, !34}
!37 = distinct !{!37, !16, !33, !34}
!38 = distinct !{!38, !16, !33, !34}
!39 = distinct !{!39, !16, !33, !34}
!40 = !{!41, !41, i64 0}
!41 = !{!"float", !7, i64 0}
!42 = distinct !{!42, !16, !33, !34}
!43 = distinct !{!43, !16, !33, !34}
!44 = distinct !{!44, !16}
!45 = distinct !{!45, !16}
!46 = distinct !{!46, !16}
!47 = distinct !{!47, !16}
!48 = distinct !{!48, !16}
!49 = distinct !{!49, !16}
!50 = distinct !{!50, !16}
!51 = distinct !{!51, !16}
!52 = distinct !{!52, !16}
!53 = distinct !{!53, !16}
!54 = distinct !{!54, !16}
!55 = distinct !{!55, !16}
!56 = distinct !{!56, !16, !33, !34}
!57 = distinct !{!57, !16, !33, !34}
!58 = distinct !{!58, !16}
!59 = distinct !{!59, !16, !34, !33}
!60 = distinct !{!60, !16, !33, !34}
!61 = distinct !{!61, !16, !33, !34}
!62 = distinct !{!62, !16}
!63 = distinct !{!63, !16, !34, !33}
!64 = distinct !{!64, !16, !33, !34}
!65 = distinct !{!65, !16, !33, !34}
!66 = distinct !{!66, !16}
!67 = distinct !{!67, !16, !34, !33}
!68 = distinct !{!68, !16, !33, !34}
!69 = distinct !{!69, !16, !33, !34}
!70 = distinct !{!70, !16}
!71 = distinct !{!71, !16, !34, !33}
!72 = distinct !{!72, !16, !33, !34}
!73 = distinct !{!73, !16, !33, !34}
!74 = distinct !{!74, !16}
!75 = distinct !{!75, !16, !34, !33}
!76 = distinct !{!76, !16, !33, !34}
!77 = distinct !{!77, !16, !33, !34}
!78 = distinct !{!78, !16}
!79 = distinct !{!79, !16, !34, !33}
!80 = distinct !{!80, !16, !33, !34}
!81 = distinct !{!81, !16, !33, !34}
!82 = distinct !{!82, !16}
!83 = distinct !{!83, !16, !34, !33}
!84 = distinct !{!84, !16, !33, !34}
!85 = distinct !{!85, !16, !33, !34}
!86 = distinct !{!86, !16}
!87 = distinct !{!87, !16, !34, !33}
!88 = distinct !{!88, !16, !33, !34}
!89 = distinct !{!89, !16, !33, !34}
!90 = distinct !{!90, !16}
!91 = distinct !{!91, !16, !34, !33}
!92 = distinct !{!92, !16, !33, !34}
!93 = distinct !{!93, !16, !33, !34}
!94 = distinct !{!94, !16}
!95 = distinct !{!95, !16, !34, !33}
!96 = distinct !{!96, !16, !33, !34}
!97 = distinct !{!97, !16, !33, !34}
!98 = distinct !{!98, !16}
!99 = distinct !{!99, !16, !34, !33}
!100 = distinct !{!100, !16, !33, !34}
!101 = distinct !{!101, !16, !33, !34}
!102 = distinct !{!102, !16}
!103 = distinct !{!103, !16, !34, !33}
!104 = distinct !{!104, !16, !33, !34}
!105 = distinct !{!105, !16, !33, !34}
!106 = distinct !{!106, !16}
!107 = distinct !{!107, !16, !34, !33}
!108 = distinct !{!108, !16, !33, !34}
!109 = distinct !{!109, !16, !33, !34}
!110 = distinct !{!110, !16}
!111 = distinct !{!111, !16, !34, !33}
!112 = distinct !{!112, !16, !33, !34}
!113 = distinct !{!113, !16, !33, !34}
!114 = distinct !{!114, !16}
!115 = distinct !{!115, !16, !34, !33}
!116 = distinct !{!116, !16, !33, !34}
!117 = distinct !{!117, !16, !33, !34}
!118 = distinct !{!118, !16}
!119 = distinct !{!119, !16, !34, !33}
!120 = distinct !{!120, !16, !33, !34}
!121 = distinct !{!121, !16, !33, !34}
!122 = distinct !{!122, !16}
!123 = distinct !{!123, !16, !34, !33}
!124 = distinct !{!124, !16}
!125 = distinct !{!125, !16}
!126 = distinct !{!126, !16}
!127 = distinct !{!127, !16}
!128 = distinct !{!128, !16}
!129 = distinct !{!129, !16}
!130 = distinct !{!130, !16}
!131 = distinct !{!131, !16}
!132 = distinct !{!132, !16}
!133 = distinct !{!133, !16}
!134 = distinct !{!134, !16}
!135 = distinct !{!135, !16}
!136 = distinct !{!136, !16, !33, !34}
!137 = distinct !{!137, !16, !33, !34}
!138 = distinct !{!138, !16}
!139 = distinct !{!139, !16, !34, !33}
!140 = distinct !{!140, !16, !33, !34}
!141 = distinct !{!141, !16, !33, !34}
!142 = distinct !{!142, !16}
!143 = distinct !{!143, !16, !34, !33}
!144 = distinct !{!144, !16, !33, !34}
!145 = distinct !{!145, !16, !33, !34}
!146 = distinct !{!146, !16}
!147 = distinct !{!147, !16, !34, !33}
!148 = distinct !{!148, !16, !33, !34}
!149 = distinct !{!149, !16, !33, !34}
!150 = distinct !{!150, !16}
!151 = distinct !{!151, !16, !34, !33}
!152 = distinct !{!152, !16, !33, !34}
!153 = distinct !{!153, !16, !33, !34}
!154 = distinct !{!154, !16}
!155 = distinct !{!155, !16, !34, !33}
!156 = distinct !{!156, !16, !33, !34}
!157 = distinct !{!157, !16, !33, !34}
!158 = distinct !{!158, !16}
!159 = distinct !{!159, !16, !34, !33}
!160 = distinct !{!160, !16, !33, !34}
!161 = distinct !{!161, !16, !33, !34}
!162 = distinct !{!162, !16}
!163 = distinct !{!163, !16, !34, !33}
!164 = distinct !{!164, !16, !33, !34}
!165 = distinct !{!165, !16, !33, !34}
!166 = distinct !{!166, !16}
!167 = distinct !{!167, !16, !34, !33}
!168 = distinct !{!168, !16, !33, !34}
!169 = distinct !{!169, !16, !33, !34}
!170 = distinct !{!170, !16}
!171 = distinct !{!171, !16, !34, !33}
!172 = distinct !{!172, !16, !33, !34}
!173 = distinct !{!173, !16, !33, !34}
!174 = distinct !{!174, !16}
!175 = distinct !{!175, !16, !34, !33}
!176 = distinct !{!176, !16, !33, !34}
!177 = distinct !{!177, !16, !33, !34}
!178 = distinct !{!178, !16}
!179 = distinct !{!179, !16, !34, !33}
!180 = distinct !{!180, !16, !33, !34}
!181 = distinct !{!181, !16, !33, !34}
!182 = distinct !{!182, !16}
!183 = distinct !{!183, !16, !34, !33}
!184 = distinct !{!184, !16, !33, !34}
!185 = distinct !{!185, !16, !33, !34}
!186 = distinct !{!186, !16}
!187 = distinct !{!187, !16, !34, !33}
!188 = distinct !{!188, !16, !33, !34}
!189 = distinct !{!189, !16, !33, !34}
!190 = distinct !{!190, !16}
!191 = distinct !{!191, !16, !34, !33}
!192 = distinct !{!192, !16, !33, !34}
!193 = distinct !{!193, !16, !33, !34}
!194 = distinct !{!194, !16}
!195 = distinct !{!195, !16, !34, !33}
!196 = distinct !{!196, !16, !33, !34}
!197 = distinct !{!197, !16, !33, !34}
!198 = distinct !{!198, !16}
!199 = distinct !{!199, !16, !34, !33}
!200 = distinct !{!200, !16, !33, !34}
!201 = distinct !{!201, !16, !33, !34}
!202 = distinct !{!202, !16}
!203 = distinct !{!203, !16, !34, !33}
!204 = distinct !{!204, !16}
!205 = distinct !{!205, !16}
!206 = distinct !{!206, !16}
!207 = distinct !{!207, !16}
!208 = distinct !{!208, !16}
!209 = distinct !{!209, !16}
!210 = distinct !{!210, !16}
!211 = distinct !{!211, !16}
!212 = distinct !{!212, !16}
!213 = distinct !{!213, !16}
!214 = distinct !{!214, !16}
!215 = distinct !{!215, !16}
!216 = distinct !{!216, !16, !33, !34}
!217 = distinct !{!217, !16}
!218 = distinct !{!218, !16, !34, !33}
!219 = distinct !{!219, !16, !33, !34}
!220 = distinct !{!220, !16}
!221 = distinct !{!221, !16, !34, !33}
!222 = distinct !{!222, !16, !33, !34}
!223 = distinct !{!223, !16}
!224 = distinct !{!224, !16, !34, !33}
!225 = distinct !{!225, !16, !33, !34}
!226 = distinct !{!226, !16}
!227 = distinct !{!227, !16, !34, !33}
!228 = distinct !{!228, !16, !33, !34}
!229 = distinct !{!229, !16}
!230 = distinct !{!230, !16, !34, !33}
!231 = distinct !{!231, !16, !33, !34}
!232 = distinct !{!232, !16}
!233 = distinct !{!233, !16, !34, !33}
!234 = distinct !{!234, !16, !33, !34}
!235 = distinct !{!235, !16}
!236 = distinct !{!236, !16, !34, !33}
!237 = distinct !{!237, !16, !33, !34}
!238 = distinct !{!238, !16}
!239 = distinct !{!239, !16, !34, !33}
!240 = distinct !{!240, !16, !33, !34}
!241 = distinct !{!241, !16}
!242 = distinct !{!242, !16, !34, !33}
!243 = distinct !{!243, !16, !33, !34}
!244 = distinct !{!244, !16}
!245 = distinct !{!245, !16, !34, !33}
!246 = distinct !{!246, !16, !33, !34}
!247 = distinct !{!247, !16}
!248 = distinct !{!248, !16, !34, !33}
!249 = distinct !{!249, !16, !33, !34}
!250 = distinct !{!250, !16}
!251 = distinct !{!251, !16, !34, !33}
!252 = distinct !{!252, !16, !33, !34}
!253 = distinct !{!253, !16}
!254 = distinct !{!254, !16, !34, !33}
!255 = distinct !{!255, !16, !33, !34}
!256 = distinct !{!256, !16}
!257 = distinct !{!257, !16, !34, !33}
!258 = distinct !{!258, !16, !33, !34}
!259 = distinct !{!259, !16}
!260 = distinct !{!260, !16, !34, !33}
!261 = distinct !{!261, !16, !33, !34}
!262 = distinct !{!262, !16}
!263 = distinct !{!263, !16, !34, !33}
!264 = distinct !{!264, !16, !33, !34}
!265 = distinct !{!265, !16}
!266 = distinct !{!266, !16, !34, !33}
!267 = distinct !{!267, !16}
!268 = distinct !{!268, !16}
!269 = distinct !{!269, !16}
!270 = distinct !{!270, !16}
!271 = distinct !{!271, !16}
!272 = distinct !{!272, !16}
!273 = distinct !{!273, !16}
!274 = distinct !{!274, !16}
!275 = distinct !{!275, !16}
!276 = distinct !{!276, !16}
!277 = distinct !{!277, !16}
!278 = distinct !{!278, !16}
!279 = distinct !{!279, !16, !33, !34}
!280 = distinct !{!280, !16}
!281 = distinct !{!281, !16, !34, !33}
!282 = distinct !{!282, !16, !33, !34}
!283 = distinct !{!283, !16}
!284 = distinct !{!284, !16, !34, !33}
!285 = distinct !{!285, !16, !33, !34}
!286 = distinct !{!286, !16}
!287 = distinct !{!287, !16, !34, !33}
!288 = distinct !{!288, !16, !33, !34}
!289 = distinct !{!289, !16}
!290 = distinct !{!290, !16, !34, !33}
!291 = distinct !{!291, !16, !33, !34}
!292 = distinct !{!292, !16}
!293 = distinct !{!293, !16, !34, !33}
!294 = distinct !{!294, !16, !33, !34}
!295 = distinct !{!295, !16}
!296 = distinct !{!296, !16, !34, !33}
!297 = distinct !{!297, !16, !33, !34}
!298 = distinct !{!298, !16}
!299 = distinct !{!299, !16, !34, !33}
!300 = distinct !{!300, !16, !33, !34}
!301 = distinct !{!301, !16}
!302 = distinct !{!302, !16, !34, !33}
!303 = distinct !{!303, !16, !33, !34}
!304 = distinct !{!304, !16}
!305 = distinct !{!305, !16, !34, !33}
!306 = distinct !{!306, !16, !33, !34}
!307 = distinct !{!307, !16}
!308 = distinct !{!308, !16, !34, !33}
!309 = distinct !{!309, !16, !33, !34}
!310 = distinct !{!310, !16}
!311 = distinct !{!311, !16, !34, !33}
!312 = distinct !{!312, !16, !33, !34}
!313 = distinct !{!313, !16}
!314 = distinct !{!314, !16, !34, !33}
!315 = distinct !{!315, !16, !33, !34}
!316 = distinct !{!316, !16}
!317 = distinct !{!317, !16, !34, !33}
!318 = distinct !{!318, !16, !33, !34}
!319 = distinct !{!319, !16}
!320 = distinct !{!320, !16, !34, !33}
!321 = distinct !{!321, !16, !33, !34}
!322 = distinct !{!322, !16}
!323 = distinct !{!323, !16, !34, !33}
!324 = distinct !{!324, !16, !33, !34}
!325 = distinct !{!325, !16}
!326 = distinct !{!326, !16, !34, !33}
!327 = distinct !{!327, !16, !33, !34}
!328 = distinct !{!328, !16}
!329 = distinct !{!329, !16, !34, !33}
!330 = distinct !{!330, !16}
!331 = distinct !{!331, !16}
!332 = distinct !{!332, !16}
!333 = distinct !{!333, !16}
!334 = distinct !{!334, !16}
!335 = distinct !{!335, !16}
!336 = distinct !{!336, !16}
!337 = distinct !{!337, !16}
!338 = distinct !{!338, !16}
!339 = distinct !{!339, !16}
!340 = distinct !{!340, !16}
!341 = distinct !{!341, !16}
!342 = distinct !{!342, !16, !33, !34}
!343 = distinct !{!343, !16}
!344 = distinct !{!344, !16, !34, !33}
!345 = distinct !{!345, !16, !33, !34}
!346 = distinct !{!346, !16}
!347 = distinct !{!347, !16, !34, !33}
!348 = distinct !{!348, !16, !33, !34}
!349 = distinct !{!349, !16}
!350 = distinct !{!350, !16, !34, !33}
!351 = distinct !{!351, !16, !33, !34}
!352 = distinct !{!352, !16}
!353 = distinct !{!353, !16, !34, !33}
!354 = distinct !{!354, !16, !33, !34}
!355 = distinct !{!355, !16}
!356 = distinct !{!356, !16, !34, !33}
!357 = distinct !{!357, !16, !33, !34}
!358 = distinct !{!358, !16}
!359 = distinct !{!359, !16, !34, !33}
!360 = distinct !{!360, !16, !33, !34}
!361 = distinct !{!361, !16}
!362 = distinct !{!362, !16, !34, !33}
!363 = distinct !{!363, !16, !33, !34}
!364 = distinct !{!364, !16}
!365 = distinct !{!365, !16, !34, !33}
!366 = distinct !{!366, !16, !33, !34}
!367 = distinct !{!367, !16}
!368 = distinct !{!368, !16, !34, !33}
!369 = distinct !{!369, !16, !33, !34}
!370 = distinct !{!370, !16}
!371 = distinct !{!371, !16, !34, !33}
!372 = distinct !{!372, !16, !33, !34}
!373 = distinct !{!373, !16}
!374 = distinct !{!374, !16, !34, !33}
!375 = distinct !{!375, !16, !33, !34}
!376 = distinct !{!376, !16}
!377 = distinct !{!377, !16, !34, !33}
!378 = distinct !{!378, !16, !33, !34}
!379 = distinct !{!379, !16}
!380 = distinct !{!380, !16, !34, !33}
!381 = distinct !{!381, !16, !33, !34}
!382 = distinct !{!382, !16}
!383 = distinct !{!383, !16, !34, !33}
!384 = distinct !{!384, !16, !33, !34}
!385 = distinct !{!385, !16}
!386 = distinct !{!386, !16, !34, !33}
!387 = distinct !{!387, !16, !33, !34}
!388 = distinct !{!388, !16}
!389 = distinct !{!389, !16, !34, !33}
!390 = distinct !{!390, !16, !33, !34}
!391 = distinct !{!391, !16}
!392 = distinct !{!392, !16, !34, !33}
!393 = distinct !{!393, !16}
!394 = distinct !{!394, !16}
!395 = distinct !{!395, !16}
!396 = distinct !{!396, !16}
!397 = distinct !{!397, !16}
!398 = distinct !{!398, !16}
!399 = distinct !{!399, !16}
!400 = distinct !{!400, !16}
!401 = distinct !{!401, !16}
!402 = distinct !{!402, !16}
!403 = distinct !{!403, !16}
!404 = distinct !{!404, !16}
!405 = distinct !{!405, !16, !33, !34}
!406 = distinct !{!406, !16}
!407 = distinct !{!407, !16, !34, !33}
!408 = distinct !{!408, !16, !33, !34}
!409 = distinct !{!409, !16}
!410 = distinct !{!410, !16, !34, !33}
!411 = distinct !{!411, !16, !33, !34}
!412 = distinct !{!412, !16}
!413 = distinct !{!413, !16, !34, !33}
!414 = distinct !{!414, !16, !33, !34}
!415 = distinct !{!415, !16}
!416 = distinct !{!416, !16, !34, !33}
!417 = distinct !{!417, !16, !33, !34}
!418 = distinct !{!418, !16}
!419 = distinct !{!419, !16, !34, !33}
!420 = distinct !{!420, !16, !33, !34}
!421 = distinct !{!421, !16}
!422 = distinct !{!422, !16, !34, !33}
!423 = distinct !{!423, !16, !33, !34}
!424 = distinct !{!424, !16}
!425 = distinct !{!425, !16, !34, !33}
!426 = distinct !{!426, !16, !33, !34}
!427 = distinct !{!427, !16}
!428 = distinct !{!428, !16, !34, !33}
!429 = distinct !{!429, !16, !33, !34}
!430 = distinct !{!430, !16}
!431 = distinct !{!431, !16, !34, !33}
!432 = distinct !{!432, !16, !33, !34}
!433 = distinct !{!433, !16}
!434 = distinct !{!434, !16, !34, !33}
!435 = distinct !{!435, !16, !33, !34}
!436 = distinct !{!436, !16}
!437 = distinct !{!437, !16, !34, !33}
!438 = distinct !{!438, !16, !33, !34}
!439 = distinct !{!439, !16}
!440 = distinct !{!440, !16, !34, !33}
!441 = distinct !{!441, !16, !33, !34}
!442 = distinct !{!442, !16}
!443 = distinct !{!443, !16, !34, !33}
!444 = distinct !{!444, !16, !33, !34}
!445 = distinct !{!445, !16}
!446 = distinct !{!446, !16, !34, !33}
!447 = distinct !{!447, !16, !33, !34}
!448 = distinct !{!448, !16}
!449 = distinct !{!449, !16, !34, !33}
!450 = distinct !{!450, !16, !33, !34}
!451 = distinct !{!451, !16}
!452 = distinct !{!452, !16, !34, !33}
!453 = distinct !{!453, !16, !33, !34}
!454 = distinct !{!454, !16}
!455 = distinct !{!455, !16, !34, !33}
!456 = distinct !{!456, !16}
!457 = distinct !{!457, !16}
!458 = distinct !{!458, !16}
!459 = distinct !{!459, !16}
!460 = distinct !{!460, !16}
!461 = distinct !{!461, !16}
!462 = distinct !{!462, !16}
!463 = distinct !{!463, !16}
!464 = distinct !{!464, !16}
!465 = distinct !{!465, !16}
!466 = distinct !{!466, !16}
!467 = distinct !{!467, !16}
!468 = distinct !{!468, !16, !33, !34}
!469 = distinct !{!469, !16}
!470 = distinct !{!470, !16, !34, !33}
!471 = distinct !{!471, !16, !33, !34}
!472 = distinct !{!472, !16}
!473 = distinct !{!473, !16, !34, !33}
!474 = distinct !{!474, !16, !33, !34}
!475 = distinct !{!475, !16}
!476 = distinct !{!476, !16, !34, !33}
!477 = distinct !{!477, !16, !33, !34}
!478 = distinct !{!478, !16}
!479 = distinct !{!479, !16, !34, !33}
!480 = distinct !{!480, !16}
!481 = distinct !{!481, !16}
!482 = distinct !{!482, !20}
!483 = distinct !{!483, !16}
!484 = distinct !{!484, !16}
!485 = distinct !{!485, !20}
!486 = distinct !{!486, !16, !33, !34}
!487 = distinct !{!487, !16}
!488 = distinct !{!488, !16, !34, !33}
!489 = distinct !{!489, !16}
!490 = distinct !{!490, !16}
!491 = distinct !{!491, !16}
!492 = distinct !{!492, !16}
!493 = distinct !{!493, !16, !33, !34}
!494 = distinct !{!494, !16}
!495 = distinct !{!495, !16, !34, !33}
!496 = distinct !{!496, !16, !33, !34}
!497 = distinct !{!497, !16}
!498 = distinct !{!498, !16, !34, !33}
!499 = distinct !{!499, !16, !33, !34}
!500 = distinct !{!500, !16}
!501 = distinct !{!501, !16, !34, !33}
!502 = distinct !{!502, !16, !33, !34}
!503 = distinct !{!503, !16}
!504 = distinct !{!504, !16, !34, !33}
!505 = distinct !{!505, !16, !33, !34}
!506 = distinct !{!506, !16}
!507 = distinct !{!507, !16, !34, !33}
!508 = distinct !{!508, !16, !33, !34}
!509 = distinct !{!509, !16}
!510 = distinct !{!510, !16, !34, !33}
!511 = distinct !{!511, !16, !33, !34}
!512 = distinct !{!512, !16}
!513 = distinct !{!513, !16, !34, !33}
!514 = distinct !{!514, !16, !33, !34}
!515 = distinct !{!515, !16}
!516 = distinct !{!516, !16, !34, !33}
!517 = distinct !{!517, !16}
!518 = distinct !{!518, !16}
!519 = distinct !{!519, !16}
!520 = distinct !{!520, !16}
!521 = distinct !{!521, !16}
!522 = distinct !{!522, !16}
!523 = distinct !{!523, !16}
!524 = distinct !{!524, !16}
!525 = distinct !{!525, !16}
!526 = distinct !{!526, !16}
!527 = distinct !{!527, !16}
!528 = distinct !{!528, !16}
!529 = distinct !{!529, !16, !33, !34}
!530 = distinct !{!530, !16}
!531 = distinct !{!531, !16, !34, !33}
!532 = distinct !{!532, !16, !33, !34}
!533 = distinct !{!533, !16}
!534 = distinct !{!534, !16, !34, !33}
!535 = distinct !{!535, !16, !33, !34}
!536 = distinct !{!536, !16}
!537 = distinct !{!537, !16, !34, !33}
!538 = distinct !{!538, !16, !33, !34}
!539 = distinct !{!539, !16}
!540 = distinct !{!540, !16, !34, !33}
!541 = distinct !{!541, !16}
!542 = distinct !{!542, !16}
!543 = distinct !{!543, !20}
!544 = distinct !{!544, !16}
!545 = distinct !{!545, !16}
!546 = distinct !{!546, !20}
!547 = distinct !{!547, !16, !33, !34}
!548 = distinct !{!548, !16}
!549 = distinct !{!549, !16, !34, !33}
!550 = distinct !{!550, !16}
!551 = distinct !{!551, !16}
!552 = distinct !{!552, !16}
!553 = distinct !{!553, !16}
!554 = distinct !{!554, !16, !33, !34}
!555 = distinct !{!555, !16}
!556 = distinct !{!556, !16, !34, !33}
!557 = distinct !{!557, !16, !33, !34}
!558 = distinct !{!558, !16}
!559 = distinct !{!559, !16, !34, !33}
!560 = distinct !{!560, !16, !33, !34}
!561 = distinct !{!561, !16}
!562 = distinct !{!562, !16, !34, !33}
!563 = distinct !{!563, !16, !33, !34}
!564 = distinct !{!564, !16}
!565 = distinct !{!565, !16, !34, !33}
!566 = distinct !{!566, !16, !33, !34}
!567 = distinct !{!567, !16}
!568 = distinct !{!568, !16, !34, !33}
!569 = distinct !{!569, !16, !33, !34}
!570 = distinct !{!570, !16}
!571 = distinct !{!571, !16, !34, !33}
!572 = distinct !{!572, !16, !33, !34}
!573 = distinct !{!573, !16}
!574 = distinct !{!574, !16, !34, !33}
!575 = distinct !{!575, !16, !33, !34}
!576 = distinct !{!576, !16}
!577 = distinct !{!577, !16, !34, !33}
!578 = distinct !{!578, !16}
!579 = distinct !{!579, !16}
!580 = distinct !{!580, !20}
!581 = distinct !{!581, !16}
!582 = distinct !{!582, !16}
!583 = distinct !{!583, !20}
!584 = distinct !{!584, !16}
!585 = distinct !{!585, !16}
!586 = distinct !{!586, !20}
!587 = distinct !{!587, !16}
!588 = distinct !{!588, !16}
!589 = distinct !{!589, !20}
!590 = distinct !{!590, !16}
!591 = distinct !{!591, !16}
!592 = distinct !{!592, !20}
!593 = distinct !{!593, !16}
!594 = distinct !{!594, !16}
!595 = distinct !{!595, !20}
!596 = distinct !{!596, !16}
!597 = distinct !{!597, !16}
!598 = distinct !{!598, !16}
!599 = distinct !{!599, !16}
!600 = distinct !{!600, !20}
!601 = distinct !{!601, !16}
!602 = distinct !{!602, !16}
!603 = distinct !{!603, !16}
!604 = distinct !{!604, !16}
!605 = distinct !{!605, !20}
!606 = distinct !{!606, !16}
!607 = distinct !{!607, !16}
!608 = distinct !{!608, !16}
!609 = distinct !{!609, !16}
!610 = distinct !{!610, !20}
!611 = distinct !{!611, !16}
!612 = distinct !{!612, !16}
!613 = distinct !{!613, !20}
!614 = distinct !{!614, !16}
!615 = distinct !{!615, !16}
!616 = distinct !{!616, !16}
!617 = distinct !{!617, !16}
!618 = distinct !{!618, !20}
!619 = distinct !{!619, !16}
!620 = distinct !{!620, !16}
!621 = distinct !{!621, !20}
!622 = distinct !{!622, !16}
!623 = distinct !{!623, !16}
!624 = distinct !{!624, !20}
!625 = distinct !{!625, !16}
!626 = distinct !{!626, !16}
!627 = distinct !{!627, !20}
!628 = distinct !{!628, !16}
!629 = distinct !{!629, !16}
!630 = distinct !{!630, !20}
!631 = distinct !{!631, !16}
!632 = distinct !{!632, !16}
!633 = distinct !{!633, !20}
!634 = distinct !{!634, !16}
!635 = distinct !{!635, !16}
!636 = distinct !{!636, !20}
!637 = distinct !{!637, !16}
!638 = distinct !{!638, !16}
!639 = distinct !{!639, !20}
!640 = distinct !{!640, !16}
!641 = distinct !{!641, !16}
!642 = distinct !{!642, !16}
!643 = distinct !{!643, !16}
!644 = distinct !{!644, !20}
!645 = distinct !{!645, !16}
!646 = distinct !{!646, !16}
!647 = distinct !{!647, !16}
!648 = distinct !{!648, !16}
!649 = distinct !{!649, !20}
!650 = distinct !{!650, !16}
!651 = distinct !{!651, !16}
!652 = distinct !{!652, !16}
!653 = distinct !{!653, !16}
!654 = distinct !{!654, !20}
!655 = distinct !{!655, !16}
!656 = distinct !{!656, !16}
!657 = distinct !{!657, !20}
!658 = distinct !{!658, !16}
!659 = distinct !{!659, !16}
!660 = distinct !{!660, !16}
!661 = distinct !{!661, !16}
!662 = distinct !{!662, !20}
!663 = distinct !{!663, !16}
!664 = distinct !{!664, !16}
!665 = distinct !{!665, !20}
