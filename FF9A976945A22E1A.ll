; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_constant_folding.cpp'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_constant_folding.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.one_result = type { double, ptr }

$_Z13test_constantIa10custom_twoIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc = comdat any

$_Z13test_constantIh10custom_twoIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc = comdat any

$_Z13test_constantIs10custom_twoIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc = comdat any

$_Z13test_constantIt10custom_twoItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt18custom_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc = comdat any

$_Z13test_constantIi10custom_twoIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc = comdat any

$_Z13test_constantIj10custom_twoIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc = comdat any

$_Z13test_constantIl10custom_twoIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc = comdat any

$_Z13test_constantIm10custom_twoImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm18custom_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc = comdat any

$_Z13test_constantIf10custom_twoIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc = comdat any

$_Z13test_constantId10custom_twoIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc = comdat any

$_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc = comdat any

$_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc = comdat any

@results = dso_local local_unnamed_addr global ptr null, align 8
@current_test = dso_local local_unnamed_addr global i32 0, align 4
@allocated_results = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"Could not allocate %d results\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"number %*s time       per second   test0\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"\0Atest %*s description   absolute\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"number %*s time\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", align 1
@start_time = dso_local local_unnamed_addr global i64 0, align 8
@end_time = dso_local local_unnamed_addr global i64 0, align 8
@base_iterations = dso_local local_unnamed_addr global i32 5000, align 4
@iterations = dso_local local_unnamed_addr global i32 5000, align 4
@init_value = dso_local local_unnamed_addr global double 1.000000e+00, align 8
@dataDouble = dso_local global [8000 x double] zeroinitializer, align 16
@dataFloat = dso_local global [8000 x float] zeroinitializer, align 16
@data64unsigned = dso_local global [8000 x i64] zeroinitializer, align 16
@data64 = dso_local global [8000 x i64] zeroinitializer, align 16
@data32unsigned = dso_local global [8000 x i32] zeroinitializer, align 16
@data32 = dso_local global [8000 x i32] zeroinitializer, align 16
@data16unsigned = dso_local global [8000 x i16] zeroinitializer, align 16
@data16 = dso_local global [8000 x i16] zeroinitializer, align 16
@data8unsigned = dso_local global [8000 x i8] zeroinitializer, align 16
@data8 = dso_local global [8000 x i8] zeroinitializer, align 16
@.str.11 = private unnamed_addr constant [16 x i8] c"int8_t constant\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"int8_t add constants\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"int8_t subtract constants\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"int8_t multiply constants\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"int8_t divide constants\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"int8_t mod constants\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"int8_t equal constants\00", align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"int8_t notequal constants\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"int8_t greater than constants\00", align 1
@.str.20 = private unnamed_addr constant [27 x i8] c"int8_t less than constants\00", align 1
@.str.21 = private unnamed_addr constant [36 x i8] c"int8_t greater than equal constants\00", align 1
@.str.22 = private unnamed_addr constant [33 x i8] c"int8_t less than equal constants\00", align 1
@.str.23 = private unnamed_addr constant [21 x i8] c"int8_t and constants\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"int8_t or constants\00", align 1
@.str.25 = private unnamed_addr constant [21 x i8] c"int8_t xor constants\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"int8_t constant add\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"int8_t multiple constant adds\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"int8_t constant subtract\00", align 1
@.str.29 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant subtracts\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"int8_t constant multiply\00", align 1
@.str.31 = private unnamed_addr constant [36 x i8] c"int8_t multiple constant multiplies\00", align 1
@.str.32 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant multiply2\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"int8_t constant divide\00", align 1
@.str.34 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divides\00", align 1
@.str.35 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divide2\00", align 1
@.str.36 = private unnamed_addr constant [31 x i8] c"int8_t multiple constant mixed\00", align 1
@.str.37 = private unnamed_addr constant [20 x i8] c"int8_t constant and\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant and\00", align 1
@.str.39 = private unnamed_addr constant [19 x i8] c"int8_t constant or\00", align 1
@.str.40 = private unnamed_addr constant [28 x i8] c"int8_t multiple constant or\00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"int8_t constant xor\00", align 1
@.str.42 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant xor\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"uint8_t constant\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"uint8_t add constants\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"uint8_t subtract constants\00", align 1
@.str.46 = private unnamed_addr constant [27 x i8] c"uint8_t multiply constants\00", align 1
@.str.47 = private unnamed_addr constant [25 x i8] c"uint8_t divide constants\00", align 1
@.str.48 = private unnamed_addr constant [22 x i8] c"uint8_t mod constants\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"uint8_t equal constants\00", align 1
@.str.50 = private unnamed_addr constant [27 x i8] c"uint8_t notequal constants\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"uint8_t greater than constants\00", align 1
@.str.52 = private unnamed_addr constant [28 x i8] c"uint8_t less than constants\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"uint8_t greater than equal constants\00", align 1
@.str.54 = private unnamed_addr constant [34 x i8] c"uint8_t less than equal constants\00", align 1
@.str.55 = private unnamed_addr constant [22 x i8] c"uint8_t and constants\00", align 1
@.str.56 = private unnamed_addr constant [21 x i8] c"uint8_t or constants\00", align 1
@.str.57 = private unnamed_addr constant [22 x i8] c"uint8_t xor constants\00", align 1
@.str.58 = private unnamed_addr constant [21 x i8] c"uint8_t constant add\00", align 1
@.str.59 = private unnamed_addr constant [31 x i8] c"uint8_t multiple constant adds\00", align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"uint8_t constant subtract\00", align 1
@.str.61 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant subtracts\00", align 1
@.str.62 = private unnamed_addr constant [26 x i8] c"uint8_t constant multiply\00", align 1
@.str.63 = private unnamed_addr constant [37 x i8] c"uint8_t multiple constant multiplies\00", align 1
@.str.64 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant multiply2\00", align 1
@.str.65 = private unnamed_addr constant [24 x i8] c"uint8_t constant divide\00", align 1
@.str.66 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divides\00", align 1
@.str.67 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divide2\00", align 1
@.str.68 = private unnamed_addr constant [32 x i8] c"uint8_t multiple constant mixed\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"uint8_t constant and\00", align 1
@.str.70 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant and\00", align 1
@.str.71 = private unnamed_addr constant [20 x i8] c"uint8_t constant or\00", align 1
@.str.72 = private unnamed_addr constant [29 x i8] c"uint8_t multiple constant or\00", align 1
@.str.73 = private unnamed_addr constant [21 x i8] c"uint8_t constant xor\00", align 1
@.str.74 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant xor\00", align 1
@.str.75 = private unnamed_addr constant [17 x i8] c"int16_t constant\00", align 1
@.str.76 = private unnamed_addr constant [22 x i8] c"int16_t add constants\00", align 1
@.str.77 = private unnamed_addr constant [27 x i8] c"int16_t subtract constants\00", align 1
@.str.78 = private unnamed_addr constant [27 x i8] c"int16_t multiply constants\00", align 1
@.str.79 = private unnamed_addr constant [25 x i8] c"int16_t divide constants\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"int16_t mod constants\00", align 1
@.str.81 = private unnamed_addr constant [24 x i8] c"int16_t equal constants\00", align 1
@.str.82 = private unnamed_addr constant [27 x i8] c"int16_t notequal constants\00", align 1
@.str.83 = private unnamed_addr constant [31 x i8] c"int16_t greater than constants\00", align 1
@.str.84 = private unnamed_addr constant [28 x i8] c"int16_t less than constants\00", align 1
@.str.85 = private unnamed_addr constant [37 x i8] c"int16_t greater than equal constants\00", align 1
@.str.86 = private unnamed_addr constant [34 x i8] c"int16_t less than equal constants\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"int16_t and constants\00", align 1
@.str.88 = private unnamed_addr constant [21 x i8] c"int16_t or constants\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"int16_t xor constants\00", align 1
@.str.90 = private unnamed_addr constant [21 x i8] c"int16_t constant add\00", align 1
@.str.91 = private unnamed_addr constant [31 x i8] c"int16_t multiple constant adds\00", align 1
@.str.92 = private unnamed_addr constant [26 x i8] c"int16_t constant subtract\00", align 1
@.str.93 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant subtracts\00", align 1
@.str.94 = private unnamed_addr constant [26 x i8] c"int16_t constant multiply\00", align 1
@.str.95 = private unnamed_addr constant [37 x i8] c"int16_t multiple constant multiplies\00", align 1
@.str.96 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant multiply2\00", align 1
@.str.97 = private unnamed_addr constant [24 x i8] c"int16_t constant divide\00", align 1
@.str.98 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divides\00", align 1
@.str.99 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divide2\00", align 1
@.str.100 = private unnamed_addr constant [32 x i8] c"int16_t multiple constant mixed\00", align 1
@.str.101 = private unnamed_addr constant [21 x i8] c"int16_t constant and\00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant and\00", align 1
@.str.103 = private unnamed_addr constant [20 x i8] c"int16_t constant or\00", align 1
@.str.104 = private unnamed_addr constant [29 x i8] c"int16_t multiple constant or\00", align 1
@.str.105 = private unnamed_addr constant [21 x i8] c"int16_t constant xor\00", align 1
@.str.106 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant xor\00", align 1
@.str.107 = private unnamed_addr constant [18 x i8] c"uint16_t constant\00", align 1
@.str.108 = private unnamed_addr constant [23 x i8] c"uint16_t add constants\00", align 1
@.str.109 = private unnamed_addr constant [28 x i8] c"uint16_t subtract constants\00", align 1
@.str.110 = private unnamed_addr constant [28 x i8] c"uint16_t multiply constants\00", align 1
@.str.111 = private unnamed_addr constant [26 x i8] c"uint16_t divide constants\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"uint16_t mod constants\00", align 1
@.str.113 = private unnamed_addr constant [25 x i8] c"uint16_t equal constants\00", align 1
@.str.114 = private unnamed_addr constant [28 x i8] c"uint16_t notequal constants\00", align 1
@.str.115 = private unnamed_addr constant [32 x i8] c"uint16_t greater than constants\00", align 1
@.str.116 = private unnamed_addr constant [29 x i8] c"uint16_t less than constants\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"uint16_t greater than equal constants\00", align 1
@.str.118 = private unnamed_addr constant [35 x i8] c"uint16_t less than equal constants\00", align 1
@.str.119 = private unnamed_addr constant [23 x i8] c"uint16_t and constants\00", align 1
@.str.120 = private unnamed_addr constant [22 x i8] c"uint16_t or constants\00", align 1
@.str.121 = private unnamed_addr constant [23 x i8] c"uint16_t xor constants\00", align 1
@.str.122 = private unnamed_addr constant [22 x i8] c"uint16_t constant add\00", align 1
@.str.123 = private unnamed_addr constant [32 x i8] c"uint16_t multiple constant adds\00", align 1
@.str.124 = private unnamed_addr constant [27 x i8] c"uint16_t constant subtract\00", align 1
@.str.125 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant subtracts\00", align 1
@.str.126 = private unnamed_addr constant [27 x i8] c"uint16_t constant multiply\00", align 1
@.str.127 = private unnamed_addr constant [38 x i8] c"uint16_t multiple constant multiplies\00", align 1
@.str.128 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant multiply2\00", align 1
@.str.129 = private unnamed_addr constant [25 x i8] c"uint16_t constant divide\00", align 1
@.str.130 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divides\00", align 1
@.str.131 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divide2\00", align 1
@.str.132 = private unnamed_addr constant [33 x i8] c"uint16_t multiple constant mixed\00", align 1
@.str.133 = private unnamed_addr constant [22 x i8] c"uint16_t constant and\00", align 1
@.str.134 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant and\00", align 1
@.str.135 = private unnamed_addr constant [21 x i8] c"uint16_t constant or\00", align 1
@.str.136 = private unnamed_addr constant [30 x i8] c"uint16_t multiple constant or\00", align 1
@.str.137 = private unnamed_addr constant [22 x i8] c"uint16_t constant xor\00", align 1
@.str.138 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant xor\00", align 1
@.str.139 = private unnamed_addr constant [17 x i8] c"int32_t constant\00", align 1
@.str.140 = private unnamed_addr constant [22 x i8] c"int32_t add constants\00", align 1
@.str.141 = private unnamed_addr constant [27 x i8] c"int32_t subtract constants\00", align 1
@.str.142 = private unnamed_addr constant [27 x i8] c"int32_t multiply constants\00", align 1
@.str.143 = private unnamed_addr constant [25 x i8] c"int32_t divide constants\00", align 1
@.str.144 = private unnamed_addr constant [22 x i8] c"int32_t mod constants\00", align 1
@.str.145 = private unnamed_addr constant [24 x i8] c"int32_t equal constants\00", align 1
@.str.146 = private unnamed_addr constant [27 x i8] c"int32_t notequal constants\00", align 1
@.str.147 = private unnamed_addr constant [31 x i8] c"int32_t greater than constants\00", align 1
@.str.148 = private unnamed_addr constant [28 x i8] c"int32_t less than constants\00", align 1
@.str.149 = private unnamed_addr constant [37 x i8] c"int32_t greater than equal constants\00", align 1
@.str.150 = private unnamed_addr constant [34 x i8] c"int32_t less than equal constants\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"int32_t and constants\00", align 1
@.str.152 = private unnamed_addr constant [21 x i8] c"int32_t or constants\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"int32_t xor constants\00", align 1
@.str.154 = private unnamed_addr constant [21 x i8] c"int32_t constant add\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"int32_t multiple constant adds\00", align 1
@.str.156 = private unnamed_addr constant [26 x i8] c"int32_t constant subtract\00", align 1
@.str.157 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant subtracts\00", align 1
@.str.158 = private unnamed_addr constant [26 x i8] c"int32_t constant multiply\00", align 1
@.str.159 = private unnamed_addr constant [37 x i8] c"int32_t multiple constant multiplies\00", align 1
@.str.160 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant multiply2\00", align 1
@.str.161 = private unnamed_addr constant [24 x i8] c"int32_t constant divide\00", align 1
@.str.162 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divides\00", align 1
@.str.163 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divide2\00", align 1
@.str.164 = private unnamed_addr constant [32 x i8] c"int32_t multiple constant mixed\00", align 1
@.str.165 = private unnamed_addr constant [21 x i8] c"int32_t constant and\00", align 1
@.str.166 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant and\00", align 1
@.str.167 = private unnamed_addr constant [20 x i8] c"int32_t constant or\00", align 1
@.str.168 = private unnamed_addr constant [29 x i8] c"int32_t multiple constant or\00", align 1
@.str.169 = private unnamed_addr constant [21 x i8] c"int32_t constant xor\00", align 1
@.str.170 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant xor\00", align 1
@.str.171 = private unnamed_addr constant [18 x i8] c"uint32_t constant\00", align 1
@.str.172 = private unnamed_addr constant [23 x i8] c"uint32_t add constants\00", align 1
@.str.173 = private unnamed_addr constant [28 x i8] c"uint32_t subtract constants\00", align 1
@.str.174 = private unnamed_addr constant [28 x i8] c"uint32_t multiply constants\00", align 1
@.str.175 = private unnamed_addr constant [26 x i8] c"uint32_t divide constants\00", align 1
@.str.176 = private unnamed_addr constant [23 x i8] c"uint32_t mod constants\00", align 1
@.str.177 = private unnamed_addr constant [25 x i8] c"uint32_t equal constants\00", align 1
@.str.178 = private unnamed_addr constant [28 x i8] c"uint32_t notequal constants\00", align 1
@.str.179 = private unnamed_addr constant [32 x i8] c"uint32_t greater than constants\00", align 1
@.str.180 = private unnamed_addr constant [29 x i8] c"uint32_t less than constants\00", align 1
@.str.181 = private unnamed_addr constant [38 x i8] c"uint32_t greater than equal constants\00", align 1
@.str.182 = private unnamed_addr constant [35 x i8] c"uint32_t less than equal constants\00", align 1
@.str.183 = private unnamed_addr constant [23 x i8] c"uint32_t and constants\00", align 1
@.str.184 = private unnamed_addr constant [22 x i8] c"uint32_t or constants\00", align 1
@.str.185 = private unnamed_addr constant [23 x i8] c"uint32_t xor constants\00", align 1
@.str.186 = private unnamed_addr constant [22 x i8] c"uint32_t constant add\00", align 1
@.str.187 = private unnamed_addr constant [32 x i8] c"uint32_t multiple constant adds\00", align 1
@.str.188 = private unnamed_addr constant [27 x i8] c"uint32_t constant subtract\00", align 1
@.str.189 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant subtracts\00", align 1
@.str.190 = private unnamed_addr constant [27 x i8] c"uint32_t constant multiply\00", align 1
@.str.191 = private unnamed_addr constant [38 x i8] c"uint32_t multiple constant multiplies\00", align 1
@.str.192 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant multiply2\00", align 1
@.str.193 = private unnamed_addr constant [25 x i8] c"uint32_t constant divide\00", align 1
@.str.194 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divides\00", align 1
@.str.195 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divide2\00", align 1
@.str.196 = private unnamed_addr constant [33 x i8] c"uint32_t multiple constant mixed\00", align 1
@.str.197 = private unnamed_addr constant [22 x i8] c"uint32_t constant and\00", align 1
@.str.198 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant and\00", align 1
@.str.199 = private unnamed_addr constant [21 x i8] c"uint32_t constant or\00", align 1
@.str.200 = private unnamed_addr constant [30 x i8] c"uint32_t multiple constant or\00", align 1
@.str.201 = private unnamed_addr constant [22 x i8] c"uint32_t constant xor\00", align 1
@.str.202 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant xor\00", align 1
@.str.203 = private unnamed_addr constant [17 x i8] c"int64_t constant\00", align 1
@.str.204 = private unnamed_addr constant [22 x i8] c"int64_t add constants\00", align 1
@.str.205 = private unnamed_addr constant [27 x i8] c"int64_t subtract constants\00", align 1
@.str.206 = private unnamed_addr constant [27 x i8] c"int64_t multiply constants\00", align 1
@.str.207 = private unnamed_addr constant [25 x i8] c"int64_t divide constants\00", align 1
@.str.208 = private unnamed_addr constant [22 x i8] c"int64_t mod constants\00", align 1
@.str.209 = private unnamed_addr constant [24 x i8] c"int64_t equal constants\00", align 1
@.str.210 = private unnamed_addr constant [27 x i8] c"int64_t notequal constants\00", align 1
@.str.211 = private unnamed_addr constant [31 x i8] c"int64_t greater than constants\00", align 1
@.str.212 = private unnamed_addr constant [28 x i8] c"int64_t less than constants\00", align 1
@.str.213 = private unnamed_addr constant [37 x i8] c"int64_t greater than equal constants\00", align 1
@.str.214 = private unnamed_addr constant [34 x i8] c"int64_t less than equal constants\00", align 1
@.str.215 = private unnamed_addr constant [22 x i8] c"int64_t and constants\00", align 1
@.str.216 = private unnamed_addr constant [21 x i8] c"int64_t or constants\00", align 1
@.str.217 = private unnamed_addr constant [22 x i8] c"int64_t xor constants\00", align 1
@.str.218 = private unnamed_addr constant [21 x i8] c"int64_t constant add\00", align 1
@.str.219 = private unnamed_addr constant [31 x i8] c"int64_t multiple constant adds\00", align 1
@.str.220 = private unnamed_addr constant [26 x i8] c"int64_t constant subtract\00", align 1
@.str.221 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant subtracts\00", align 1
@.str.222 = private unnamed_addr constant [26 x i8] c"int64_t constant multiply\00", align 1
@.str.223 = private unnamed_addr constant [37 x i8] c"int64_t multiple constant multiplies\00", align 1
@.str.224 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant multiply2\00", align 1
@.str.225 = private unnamed_addr constant [24 x i8] c"int64_t constant divide\00", align 1
@.str.226 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divides\00", align 1
@.str.227 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divide2\00", align 1
@.str.228 = private unnamed_addr constant [32 x i8] c"int64_t multiple constant mixed\00", align 1
@.str.229 = private unnamed_addr constant [21 x i8] c"int64_t constant and\00", align 1
@.str.230 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant and\00", align 1
@.str.231 = private unnamed_addr constant [20 x i8] c"int64_t constant or\00", align 1
@.str.232 = private unnamed_addr constant [29 x i8] c"int64_t multiple constant or\00", align 1
@.str.233 = private unnamed_addr constant [21 x i8] c"int64_t constant xor\00", align 1
@.str.234 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant xor\00", align 1
@.str.235 = private unnamed_addr constant [18 x i8] c"uint64_t constant\00", align 1
@.str.236 = private unnamed_addr constant [23 x i8] c"uint64_t add constants\00", align 1
@.str.237 = private unnamed_addr constant [28 x i8] c"uint64_t subtract constants\00", align 1
@.str.238 = private unnamed_addr constant [28 x i8] c"uint64_t multiply constants\00", align 1
@.str.239 = private unnamed_addr constant [26 x i8] c"uint64_t divide constants\00", align 1
@.str.240 = private unnamed_addr constant [23 x i8] c"uint64_t mod constants\00", align 1
@.str.241 = private unnamed_addr constant [25 x i8] c"uint64_t equal constants\00", align 1
@.str.242 = private unnamed_addr constant [28 x i8] c"uint64_t notequal constants\00", align 1
@.str.243 = private unnamed_addr constant [32 x i8] c"uint64_t greater than constants\00", align 1
@.str.244 = private unnamed_addr constant [29 x i8] c"uint64_t less than constants\00", align 1
@.str.245 = private unnamed_addr constant [38 x i8] c"uint64_t greater than equal constants\00", align 1
@.str.246 = private unnamed_addr constant [35 x i8] c"uint64_t less than equal constants\00", align 1
@.str.247 = private unnamed_addr constant [23 x i8] c"uint64_t and constants\00", align 1
@.str.248 = private unnamed_addr constant [22 x i8] c"uint64_t or constants\00", align 1
@.str.249 = private unnamed_addr constant [23 x i8] c"uint64_t xor constants\00", align 1
@.str.250 = private unnamed_addr constant [22 x i8] c"uint64_t constant add\00", align 1
@.str.251 = private unnamed_addr constant [32 x i8] c"uint64_t multiple constant adds\00", align 1
@.str.252 = private unnamed_addr constant [27 x i8] c"uint64_t constant subtract\00", align 1
@.str.253 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant subtracts\00", align 1
@.str.254 = private unnamed_addr constant [27 x i8] c"uint64_t constant multiply\00", align 1
@.str.255 = private unnamed_addr constant [38 x i8] c"uint64_t multiple constant multiplies\00", align 1
@.str.256 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant multiply2\00", align 1
@.str.257 = private unnamed_addr constant [25 x i8] c"uint64_t constant divide\00", align 1
@.str.258 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divides\00", align 1
@.str.259 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divide2\00", align 1
@.str.260 = private unnamed_addr constant [33 x i8] c"uint64_t multiple constant mixed\00", align 1
@.str.261 = private unnamed_addr constant [22 x i8] c"uint64_t constant and\00", align 1
@.str.262 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant and\00", align 1
@.str.263 = private unnamed_addr constant [21 x i8] c"uint64_t constant or\00", align 1
@.str.264 = private unnamed_addr constant [30 x i8] c"uint64_t multiple constant or\00", align 1
@.str.265 = private unnamed_addr constant [22 x i8] c"uint64_t constant xor\00", align 1
@.str.266 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant xor\00", align 1
@.str.267 = private unnamed_addr constant [15 x i8] c"float constant\00", align 1
@.str.268 = private unnamed_addr constant [20 x i8] c"float add constants\00", align 1
@.str.269 = private unnamed_addr constant [25 x i8] c"float subtract constants\00", align 1
@.str.270 = private unnamed_addr constant [25 x i8] c"float multiply constants\00", align 1
@.str.271 = private unnamed_addr constant [23 x i8] c"float divide constants\00", align 1
@.str.272 = private unnamed_addr constant [19 x i8] c"float constant add\00", align 1
@.str.273 = private unnamed_addr constant [29 x i8] c"float multiple constant adds\00", align 1
@.str.274 = private unnamed_addr constant [24 x i8] c"float constant subtract\00", align 1
@.str.275 = private unnamed_addr constant [34 x i8] c"float multiple constant subtracts\00", align 1
@.str.276 = private unnamed_addr constant [24 x i8] c"float constant multiply\00", align 1
@.str.277 = private unnamed_addr constant [35 x i8] c"float multiple constant multiplies\00", align 1
@.str.278 = private unnamed_addr constant [34 x i8] c"float multiple constant multiply2\00", align 1
@.str.279 = private unnamed_addr constant [22 x i8] c"float constant divide\00", align 1
@.str.280 = private unnamed_addr constant [32 x i8] c"float multiple constant divides\00", align 1
@.str.281 = private unnamed_addr constant [32 x i8] c"float multiple constant divide2\00", align 1
@.str.282 = private unnamed_addr constant [30 x i8] c"float multiple constant mixed\00", align 1
@.str.283 = private unnamed_addr constant [16 x i8] c"double constant\00", align 1
@.str.284 = private unnamed_addr constant [21 x i8] c"double add constants\00", align 1
@.str.285 = private unnamed_addr constant [26 x i8] c"double subtract constants\00", align 1
@.str.286 = private unnamed_addr constant [26 x i8] c"double multiply constants\00", align 1
@.str.287 = private unnamed_addr constant [24 x i8] c"double divide constants\00", align 1
@.str.288 = private unnamed_addr constant [20 x i8] c"double constant add\00", align 1
@.str.289 = private unnamed_addr constant [30 x i8] c"double multiple constant adds\00", align 1
@.str.290 = private unnamed_addr constant [25 x i8] c"double constant subtract\00", align 1
@.str.291 = private unnamed_addr constant [35 x i8] c"double multiple constant subtracts\00", align 1
@.str.292 = private unnamed_addr constant [25 x i8] c"double constant multiply\00", align 1
@.str.293 = private unnamed_addr constant [36 x i8] c"double multiple constant multiplies\00", align 1
@.str.294 = private unnamed_addr constant [35 x i8] c"double multiple constant multiply2\00", align 1
@.str.295 = private unnamed_addr constant [23 x i8] c"double constant divide\00", align 1
@.str.296 = private unnamed_addr constant [33 x i8] c"double multiple constant divides\00", align 1
@.str.297 = private unnamed_addr constant [33 x i8] c"double multiple constant divide2\00", align 1
@.str.298 = private unnamed_addr constant [31 x i8] c"double multiple constant mixed\00", align 1
@.str.299 = private unnamed_addr constant [16 x i8] c"test %i failed\0A\00", align 1
@llvm.global_ctors = appending global [0 x { i32, ptr, ptr }] zeroinitializer

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z13record_resultdPKc(double noundef %time, ptr noundef %label) local_unnamed_addr #0 {
entry:
  %0 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %entry.if.then_crit_edge, label %lor.lhs.false

entry.if.then_crit_edge:                          ; preds = %entry
  %.pre = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, ptr @current_test, align 4, !tbaa !9
  %2 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not = icmp slt i32 %1, %2
  br i1 %cmp1.not, label %if.end5, label %if.then

if.then:                                          ; preds = %entry.if.then_crit_edge, %lor.lhs.false
  %3 = phi i32 [ %.pre, %entry.if.then_crit_edge ], [ %2, %lor.lhs.false ]
  %add = add nsw i32 %3, 10
  store i32 %add, ptr @allocated_results, align 4, !tbaa !9
  %conv = sext i32 %add to i64
  %mul = shl nsw i64 %conv, 4
  %call = tail call ptr @realloc(ptr noundef %0, i64 noundef %mul) #14
  store ptr %call, ptr @results, align 8, !tbaa !5
  %cmp2 = icmp eq ptr %call, null
  br i1 %cmp2, label %if.then3, label %if.then.if.end5_crit_edge

if.then.if.end5_crit_edge:                        ; preds = %if.then
  %.pre10 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %if.end5

if.then3:                                         ; preds = %if.then
  %4 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %4)
  tail call void @exit(i32 noundef -1) #15
  unreachable

if.end5:                                          ; preds = %if.then.if.end5_crit_edge, %lor.lhs.false
  %5 = phi i32 [ %.pre10, %if.then.if.end5_crit_edge ], [ %1, %lor.lhs.false ]
  %6 = phi ptr [ %call, %if.then.if.end5_crit_edge ], [ %0, %lor.lhs.false ]
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.one_result, ptr %6, i64 %idxprom
  store double %time, ptr %arrayidx, align 8, !tbaa !11
  %label9 = getelementptr inbounds %struct.one_result, ptr %6, i64 %idxprom, i32 1
  store ptr %label, ptr %label9, align 8, !tbaa !14
  %inc = add nsw i32 %5, 1
  store i32 %inc, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z9summarizePKciiii(ptr noundef %name, i32 noundef %size, i32 noundef %iterations, i32 noundef %show_gmeans, i32 noundef %show_penalty) local_unnamed_addr #4 {
entry:
  %conv = sitofp i32 %size to double
  %conv1 = sitofp i32 %iterations to double
  %mul = fmul double %conv, %conv1
  %div = fdiv double %mul, 1.000000e+06
  %0 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp91 = icmp sgt i32 %0, 0
  br i1 %cmp91, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count = zext i32 %0 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %longest_label_len.092 = phi i32 [ 12, %for.body.lr.ph ], [ %spec.select, %for.body ]
  %label = getelementptr inbounds %struct.one_result, ptr %1, i64 %indvars.iv, i32 1
  %2 = load ptr, ptr %label, align 8, !tbaa !14
  %call = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #16
  %conv2 = trunc i64 %call to i32
  %spec.select = tail call i32 @llvm.smax.i32(i32 %longest_label_len.092, i32 %conv2)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !15

for.end:                                          ; preds = %for.body, %entry
  %longest_label_len.0.lcssa = phi i32 [ 12, %entry ], [ %spec.select, %for.body ]
  %sub = add nsw i32 %longest_label_len.0.lcssa, -12
  %call4 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %sub, ptr noundef nonnull @.str.2)
  %call5 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef %longest_label_len.0.lcssa, ptr noundef nonnull @.str.2)
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp794 = icmp sgt i32 %3, 0
  br i1 %cmp794, label %for.body8, label %for.end43

for.cond35.preheader:                             ; preds = %for.body8
  %cmp3697 = icmp sgt i32 %12, 0
  br i1 %cmp3697, label %for.body37.lr.ph, label %for.end43

for.body37.lr.ph:                                 ; preds = %for.cond35.preheader
  %4 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count115 = zext i32 %12 to i64
  %xtraiter = and i64 %wide.trip.count115, 3
  %5 = icmp ult i32 %12, 4
  br i1 %5, label %for.end43.loopexit.unr-lcssa, label %for.body37.lr.ph.new

for.body37.lr.ph.new:                             ; preds = %for.body37.lr.ph
  %unroll_iter = and i64 %wide.trip.count115, 4294967292
  br label %for.body37

for.body8:                                        ; preds = %for.end, %for.body8
  %indvars.iv109 = phi i64 [ %indvars.iv.next110, %for.body8 ], [ 0, %for.end ]
  %6 = load ptr, ptr @results, align 8, !tbaa !5
  %arrayidx11 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv109
  %label12 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv109, i32 1
  %7 = load ptr, ptr %label12, align 8, !tbaa !14
  %call13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %7) #16
  %8 = trunc i64 %call13 to i32
  %conv15 = sub i32 %longest_label_len.0.lcssa, %8
  %9 = load double, ptr %arrayidx11, align 8, !tbaa !11
  %div24 = fdiv double %div, %9
  %10 = load double, ptr %6, align 8, !tbaa !11
  %div30 = fdiv double %9, %10
  %11 = trunc i64 %indvars.iv109 to i32
  %call31 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4, i32 noundef %11, i32 noundef %conv15, ptr noundef nonnull @.str.5, ptr noundef %7, double noundef %9, double noundef %div24, double noundef %div30)
  %indvars.iv.next110 = add nuw nsw i64 %indvars.iv109, 1
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = sext i32 %12 to i64
  %cmp7 = icmp slt i64 %indvars.iv.next110, %13
  br i1 %cmp7, label %for.body8, label %for.cond35.preheader, !llvm.loop !17

for.body37:                                       ; preds = %for.body37, %for.body37.lr.ph.new
  %indvars.iv112 = phi i64 [ 0, %for.body37.lr.ph.new ], [ %indvars.iv.next113.3, %for.body37 ]
  %total_absolute_times.098 = phi double [ 0.000000e+00, %for.body37.lr.ph.new ], [ %add.3, %for.body37 ]
  %niter = phi i64 [ 0, %for.body37.lr.ph.new ], [ %niter.next.3, %for.body37 ]
  %arrayidx39 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv112
  %14 = load double, ptr %arrayidx39, align 8, !tbaa !11
  %add = fadd double %total_absolute_times.098, %14
  %indvars.iv.next113 = or i64 %indvars.iv112, 1
  %arrayidx39.1 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next113
  %15 = load double, ptr %arrayidx39.1, align 8, !tbaa !11
  %add.1 = fadd double %add, %15
  %indvars.iv.next113.1 = or i64 %indvars.iv112, 2
  %arrayidx39.2 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next113.1
  %16 = load double, ptr %arrayidx39.2, align 8, !tbaa !11
  %add.2 = fadd double %add.1, %16
  %indvars.iv.next113.2 = or i64 %indvars.iv112, 3
  %arrayidx39.3 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next113.2
  %17 = load double, ptr %arrayidx39.3, align 8, !tbaa !11
  %add.3 = fadd double %add.2, %17
  %indvars.iv.next113.3 = add nuw nsw i64 %indvars.iv112, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.end43.loopexit.unr-lcssa, label %for.body37, !llvm.loop !18

for.end43.loopexit.unr-lcssa:                     ; preds = %for.body37, %for.body37.lr.ph
  %add.lcssa.ph = phi double [ undef, %for.body37.lr.ph ], [ %add.3, %for.body37 ]
  %indvars.iv112.unr = phi i64 [ 0, %for.body37.lr.ph ], [ %indvars.iv.next113.3, %for.body37 ]
  %total_absolute_times.098.unr = phi double [ 0.000000e+00, %for.body37.lr.ph ], [ %add.3, %for.body37 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.end43, label %for.body37.epil

for.body37.epil:                                  ; preds = %for.end43.loopexit.unr-lcssa, %for.body37.epil
  %indvars.iv112.epil = phi i64 [ %indvars.iv.next113.epil, %for.body37.epil ], [ %indvars.iv112.unr, %for.end43.loopexit.unr-lcssa ]
  %total_absolute_times.098.epil = phi double [ %add.epil, %for.body37.epil ], [ %total_absolute_times.098.unr, %for.end43.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body37.epil ], [ 0, %for.end43.loopexit.unr-lcssa ]
  %arrayidx39.epil = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv112.epil
  %18 = load double, ptr %arrayidx39.epil, align 8, !tbaa !11
  %add.epil = fadd double %total_absolute_times.098.epil, %18
  %indvars.iv.next113.epil = add nuw nsw i64 %indvars.iv112.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.end43, label %for.body37.epil, !llvm.loop !19

for.end43:                                        ; preds = %for.end43.loopexit.unr-lcssa, %for.body37.epil, %for.end, %for.cond35.preheader
  %total_absolute_times.0.lcssa = phi double [ 0.000000e+00, %for.cond35.preheader ], [ 0.000000e+00, %for.end ], [ %add.lcssa.ph, %for.end43.loopexit.unr-lcssa ], [ %add.epil, %for.body37.epil ]
  %call44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6, ptr noundef %name, double noundef %total_absolute_times.0.lcssa)
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp45 = icmp sgt i32 %19, 1
  %tobool = icmp ne i32 %show_penalty, 0
  %or.cond = and i1 %tobool, %cmp45
  br i1 %or.cond, label %for.body49, label %if.end66

for.body49:                                       ; preds = %for.end43, %for.body49
  %indvars.iv117 = phi i64 [ %indvars.iv.next118, %for.body49 ], [ 1, %for.end43 ]
  %gmean_ratio.0102 = phi double [ %add57, %for.body49 ], [ 0.000000e+00, %for.end43 ]
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %arrayidx51 = getelementptr inbounds %struct.one_result, ptr %20, i64 %indvars.iv117
  %21 = load double, ptr %arrayidx51, align 8, !tbaa !11
  %22 = load double, ptr %20, align 8, !tbaa !11
  %div55 = fdiv double %21, %22
  %call56 = tail call double @log(double noundef %div55) #17
  %add57 = fadd double %gmean_ratio.0102, %call56
  %indvars.iv.next118 = add nuw nsw i64 %indvars.iv117, 1
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = sext i32 %23 to i64
  %cmp48 = icmp slt i64 %indvars.iv.next118, %24
  br i1 %cmp48, label %for.body49, label %for.end60, !llvm.loop !21

for.end60:                                        ; preds = %for.body49
  %sub61 = add nsw i32 %23, -1
  %conv62 = sitofp i32 %sub61 to double
  %div63 = fdiv double %add57, %conv62
  %call64 = tail call double @exp(double noundef %div63) #17
  %call65 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, ptr noundef %name, double noundef %call64)
  br label %if.end66

if.end66:                                         ; preds = %for.end60, %for.end43
  store i32 0, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @log(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @exp(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z17summarize_simplefP8_IO_FILEPKc(ptr nocapture noundef %output, ptr noundef %name) local_unnamed_addr #4 {
entry:
  %0 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp52 = icmp sgt i32 %0, 0
  br i1 %cmp52, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count = zext i32 %0 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %longest_label_len.053 = phi i32 [ 12, %for.body.lr.ph ], [ %spec.select, %for.body ]
  %label = getelementptr inbounds %struct.one_result, ptr %1, i64 %indvars.iv, i32 1
  %2 = load ptr, ptr %label, align 8, !tbaa !14
  %call = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #16
  %conv = trunc i64 %call to i32
  %spec.select = tail call i32 @llvm.smax.i32(i32 %longest_label_len.053, i32 %conv)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !22

for.end:                                          ; preds = %for.body, %entry
  %longest_label_len.0.lcssa = phi i32 [ 12, %entry ], [ %spec.select, %for.body ]
  %sub = add nsw i32 %longest_label_len.0.lcssa, -12
  %call2 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.8, i32 noundef %sub, ptr noundef nonnull @.str.2)
  %call3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.9, i32 noundef %longest_label_len.0.lcssa, ptr noundef nonnull @.str.2)
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp555 = icmp sgt i32 %3, 0
  br i1 %cmp555, label %for.body6, label %for.end31

for.cond23.preheader:                             ; preds = %for.body6
  %cmp2458 = icmp sgt i32 %11, 0
  br i1 %cmp2458, label %for.body25.lr.ph, label %for.end31

for.body25.lr.ph:                                 ; preds = %for.cond23.preheader
  %4 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count70 = zext i32 %11 to i64
  %xtraiter = and i64 %wide.trip.count70, 3
  %5 = icmp ult i32 %11, 4
  br i1 %5, label %for.end31.loopexit.unr-lcssa, label %for.body25.lr.ph.new

for.body25.lr.ph.new:                             ; preds = %for.body25.lr.ph
  %unroll_iter = and i64 %wide.trip.count70, 4294967292
  br label %for.body25

for.body6:                                        ; preds = %for.end, %for.body6
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %for.body6 ], [ 0, %for.end ]
  %6 = load ptr, ptr @results, align 8, !tbaa !5
  %arrayidx9 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv64
  %label10 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv64, i32 1
  %7 = load ptr, ptr %label10, align 8, !tbaa !14
  %call11 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %7) #16
  %8 = trunc i64 %call11 to i32
  %conv13 = sub i32 %longest_label_len.0.lcssa, %8
  %9 = load double, ptr %arrayidx9, align 8, !tbaa !11
  %10 = trunc i64 %indvars.iv64 to i32
  %call19 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.10, i32 noundef %10, i32 noundef %conv13, ptr noundef nonnull @.str.5, ptr noundef %7, double noundef %9)
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %12 = sext i32 %11 to i64
  %cmp5 = icmp slt i64 %indvars.iv.next65, %12
  br i1 %cmp5, label %for.body6, label %for.cond23.preheader, !llvm.loop !23

for.body25:                                       ; preds = %for.body25, %for.body25.lr.ph.new
  %indvars.iv67 = phi i64 [ 0, %for.body25.lr.ph.new ], [ %indvars.iv.next68.3, %for.body25 ]
  %total_absolute_times.059 = phi double [ 0.000000e+00, %for.body25.lr.ph.new ], [ %add.3, %for.body25 ]
  %niter = phi i64 [ 0, %for.body25.lr.ph.new ], [ %niter.next.3, %for.body25 ]
  %arrayidx27 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv67
  %13 = load double, ptr %arrayidx27, align 8, !tbaa !11
  %add = fadd double %total_absolute_times.059, %13
  %indvars.iv.next68 = or i64 %indvars.iv67, 1
  %arrayidx27.1 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next68
  %14 = load double, ptr %arrayidx27.1, align 8, !tbaa !11
  %add.1 = fadd double %add, %14
  %indvars.iv.next68.1 = or i64 %indvars.iv67, 2
  %arrayidx27.2 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next68.1
  %15 = load double, ptr %arrayidx27.2, align 8, !tbaa !11
  %add.2 = fadd double %add.1, %15
  %indvars.iv.next68.2 = or i64 %indvars.iv67, 3
  %arrayidx27.3 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next68.2
  %16 = load double, ptr %arrayidx27.3, align 8, !tbaa !11
  %add.3 = fadd double %add.2, %16
  %indvars.iv.next68.3 = add nuw nsw i64 %indvars.iv67, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.end31.loopexit.unr-lcssa, label %for.body25, !llvm.loop !24

for.end31.loopexit.unr-lcssa:                     ; preds = %for.body25, %for.body25.lr.ph
  %add.lcssa.ph = phi double [ undef, %for.body25.lr.ph ], [ %add.3, %for.body25 ]
  %indvars.iv67.unr = phi i64 [ 0, %for.body25.lr.ph ], [ %indvars.iv.next68.3, %for.body25 ]
  %total_absolute_times.059.unr = phi double [ 0.000000e+00, %for.body25.lr.ph ], [ %add.3, %for.body25 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.end31, label %for.body25.epil

for.body25.epil:                                  ; preds = %for.end31.loopexit.unr-lcssa, %for.body25.epil
  %indvars.iv67.epil = phi i64 [ %indvars.iv.next68.epil, %for.body25.epil ], [ %indvars.iv67.unr, %for.end31.loopexit.unr-lcssa ]
  %total_absolute_times.059.epil = phi double [ %add.epil, %for.body25.epil ], [ %total_absolute_times.059.unr, %for.end31.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body25.epil ], [ 0, %for.end31.loopexit.unr-lcssa ]
  %arrayidx27.epil = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv67.epil
  %17 = load double, ptr %arrayidx27.epil, align 8, !tbaa !11
  %add.epil = fadd double %total_absolute_times.059.epil, %17
  %indvars.iv.next68.epil = add nuw nsw i64 %indvars.iv67.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.end31, label %for.body25.epil, !llvm.loop !25

for.end31:                                        ; preds = %for.end31.loopexit.unr-lcssa, %for.body25.epil, %for.end, %for.cond23.preheader
  %total_absolute_times.0.lcssa = phi double [ 0.000000e+00, %for.cond23.preheader ], [ 0.000000e+00, %for.end ], [ %add.lcssa.ph, %for.end31.loopexit.unr-lcssa ], [ %add.epil, %for.body25.epil ]
  %call32 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.6, ptr noundef %name, double noundef %total_absolute_times.0.lcssa)
  store i32 0, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z11start_timerv() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @clock() #17
  store i64 %call, ptr @start_time, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind
declare i64 @clock() local_unnamed_addr #7

; Function Attrs: mustprogress nounwind uwtable
define dso_local noundef double @_Z5timerv() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @clock() #17
  store i64 %call, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %sub = sub nsw i64 %call, %0
  %conv = sitofp i64 %sub to double
  %div = fdiv double %conv, 1.000000e+06
  ret double %div
}

; Function Attrs: mustprogress norecurse uwtable
define dso_local noundef i32 @main(i32 noundef %argc, ptr nocapture noundef readonly %argv) local_unnamed_addr #8 {
entry:
  %cmp = icmp sgt i32 %argc, 1
  br i1 %cmp, label %if.end, label %if.end5

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds ptr, ptr %argv, i64 1
  %0 = load ptr, ptr %arrayidx, align 8, !tbaa !5
  %call.i = tail call i64 @strtol(ptr nocapture noundef nonnull %0, ptr noundef null, i32 noundef 10) #17
  %conv.i = trunc i64 %call.i to i32
  store i32 %conv.i, ptr @base_iterations, align 4, !tbaa !9
  %cmp1.not = icmp eq i32 %argc, 2
  br i1 %cmp1.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  %arrayidx3 = getelementptr inbounds ptr, ptr %argv, i64 2
  %1 = load ptr, ptr %arrayidx3, align 8, !tbaa !5
  %call.i25 = tail call double @strtod(ptr nocapture noundef nonnull %1, ptr noundef null) #17
  store double %call.i25, ptr @init_value, align 8, !tbaa !28
  br label %if.end5

if.end5:                                          ; preds = %entry, %if.then2, %if.end
  %2 = load double, ptr @init_value, align 8, !tbaa !28
  %conv = fptosi double %2 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(8000) @data8, i8 %conv, i64 8000, i1 false), !tbaa !29
  %3 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %3, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.11)
  tail call void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.12)
  tail call void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.13)
  tail call void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.14)
  tail call void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.15)
  tail call void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.16)
  tail call void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.17)
  tail call void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.18)
  tail call void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.19)
  tail call void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.20)
  tail call void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.21)
  tail call void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.22)
  tail call void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.23)
  tail call void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.24)
  tail call void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.25)
  %4 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div = sdiv i32 %4, 10
  store i32 %div, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.26)
  tail call void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.27)
  tail call void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.28)
  tail call void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.29)
  tail call void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.30)
  tail call void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.31)
  tail call void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.32)
  tail call void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.33)
  tail call void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.34)
  tail call void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.35)
  tail call void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.36)
  tail call void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.37)
  tail call void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.38)
  tail call void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.39)
  tail call void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.40)
  tail call void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.41)
  tail call void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.42)
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv6 = fptoui double %5 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(8000) @data8unsigned, i8 %conv6, i64 8000, i1 false), !tbaa !29
  %6 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %6, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.43)
  tail call void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.44)
  tail call void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.45)
  tail call void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.46)
  tail call void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.47)
  tail call void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.48)
  tail call void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.49)
  tail call void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.50)
  tail call void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.51)
  tail call void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.52)
  tail call void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.53)
  tail call void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.54)
  tail call void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.55)
  tail call void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.56)
  tail call void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.57)
  %7 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div7 = sdiv i32 %7, 10
  store i32 %div7, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.58)
  tail call void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.59)
  tail call void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.60)
  tail call void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.61)
  tail call void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.62)
  tail call void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.63)
  tail call void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.64)
  tail call void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.65)
  tail call void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.66)
  tail call void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.67)
  tail call void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.68)
  tail call void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.69)
  tail call void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.70)
  tail call void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.71)
  tail call void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.72)
  tail call void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.73)
  tail call void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.74)
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv8 = fptosi double %8 to i16
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %conv8, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert56 = insertelement <8 x i16> poison, i16 %conv8, i64 0
  %broadcast.splat57 = shufflevector <8 x i16> %broadcast.splatinsert56, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %if.end5
  %index = phi i64 [ 0, %if.end5 ], [ %index.next.4, %vector.body ]
  %9 = shl nuw i64 %index, 1
  %next.gep = getelementptr i8, ptr @data16, i64 %9
  store <8 x i16> %broadcast.splat, ptr %next.gep, align 16, !tbaa !30
  %10 = getelementptr i16, ptr %next.gep, i64 8
  store <8 x i16> %broadcast.splat57, ptr %10, align 16, !tbaa !30
  %index.next = shl nuw i64 %index, 1
  %11 = add i64 %index.next, 32
  %next.gep.1 = getelementptr i8, ptr @data16, i64 %11
  store <8 x i16> %broadcast.splat, ptr %next.gep.1, align 16, !tbaa !30
  %12 = getelementptr i16, ptr %next.gep.1, i64 8
  store <8 x i16> %broadcast.splat57, ptr %12, align 16, !tbaa !30
  %index.next.1 = shl nuw i64 %index, 1
  %13 = add i64 %index.next.1, 64
  %next.gep.2 = getelementptr i8, ptr @data16, i64 %13
  store <8 x i16> %broadcast.splat, ptr %next.gep.2, align 16, !tbaa !30
  %14 = getelementptr i16, ptr %next.gep.2, i64 8
  store <8 x i16> %broadcast.splat57, ptr %14, align 16, !tbaa !30
  %index.next.2 = shl nuw i64 %index, 1
  %15 = add i64 %index.next.2, 96
  %next.gep.3 = getelementptr i8, ptr @data16, i64 %15
  store <8 x i16> %broadcast.splat, ptr %next.gep.3, align 16, !tbaa !30
  %16 = getelementptr i16, ptr %next.gep.3, i64 8
  store <8 x i16> %broadcast.splat57, ptr %16, align 16, !tbaa !30
  %index.next.3 = shl nuw i64 %index, 1
  %17 = add i64 %index.next.3, 128
  %next.gep.4 = getelementptr i8, ptr @data16, i64 %17
  store <8 x i16> %broadcast.splat, ptr %next.gep.4, align 16, !tbaa !30
  %18 = getelementptr i16, ptr %next.gep.4, i64 8
  store <8 x i16> %broadcast.splat57, ptr %18, align 16, !tbaa !30
  %index.next.4 = add nuw nsw i64 %index, 80
  %19 = icmp eq i64 %index.next.4, 8000
  br i1 %19, label %_Z4fillIPssEvT_S1_T0_.exit, label %vector.body, !llvm.loop !32

_Z4fillIPssEvT_S1_T0_.exit:                       ; preds = %vector.body
  %20 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %20, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.75)
  tail call void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.76)
  tail call void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.77)
  tail call void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.78)
  tail call void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.79)
  tail call void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.80)
  tail call void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.81)
  tail call void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.82)
  tail call void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.83)
  tail call void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.84)
  tail call void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.85)
  tail call void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.86)
  tail call void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.87)
  tail call void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.88)
  tail call void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.89)
  %21 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div9 = sdiv i32 %21, 10
  store i32 %div9, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.90)
  tail call void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.91)
  tail call void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.92)
  tail call void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.93)
  tail call void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.94)
  tail call void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.95)
  tail call void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.96)
  tail call void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.97)
  tail call void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.98)
  tail call void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.99)
  tail call void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.100)
  tail call void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.101)
  tail call void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.102)
  tail call void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.103)
  tail call void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.104)
  tail call void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.105)
  tail call void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.106)
  %22 = load double, ptr @init_value, align 8, !tbaa !28
  %conv10 = fptoui double %22 to i16
  %broadcast.splatinsert67 = insertelement <8 x i16> poison, i16 %conv10, i64 0
  %broadcast.splat68 = shufflevector <8 x i16> %broadcast.splatinsert67, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert69 = insertelement <8 x i16> poison, i16 %conv10, i64 0
  %broadcast.splat70 = shufflevector <8 x i16> %broadcast.splatinsert69, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %_Z4fillIPssEvT_S1_T0_.exit
  %index64 = phi i64 [ 0, %_Z4fillIPssEvT_S1_T0_.exit ], [ %index.next71.4, %vector.body63 ]
  %23 = shl nuw i64 %index64, 1
  %next.gep65 = getelementptr i8, ptr @data16unsigned, i64 %23
  store <8 x i16> %broadcast.splat68, ptr %next.gep65, align 16, !tbaa !30
  %24 = getelementptr i16, ptr %next.gep65, i64 8
  store <8 x i16> %broadcast.splat70, ptr %24, align 16, !tbaa !30
  %index.next71 = shl nuw i64 %index64, 1
  %25 = add i64 %index.next71, 32
  %next.gep65.1 = getelementptr i8, ptr @data16unsigned, i64 %25
  store <8 x i16> %broadcast.splat68, ptr %next.gep65.1, align 16, !tbaa !30
  %26 = getelementptr i16, ptr %next.gep65.1, i64 8
  store <8 x i16> %broadcast.splat70, ptr %26, align 16, !tbaa !30
  %index.next71.1 = shl nuw i64 %index64, 1
  %27 = add i64 %index.next71.1, 64
  %next.gep65.2 = getelementptr i8, ptr @data16unsigned, i64 %27
  store <8 x i16> %broadcast.splat68, ptr %next.gep65.2, align 16, !tbaa !30
  %28 = getelementptr i16, ptr %next.gep65.2, i64 8
  store <8 x i16> %broadcast.splat70, ptr %28, align 16, !tbaa !30
  %index.next71.2 = shl nuw i64 %index64, 1
  %29 = add i64 %index.next71.2, 96
  %next.gep65.3 = getelementptr i8, ptr @data16unsigned, i64 %29
  store <8 x i16> %broadcast.splat68, ptr %next.gep65.3, align 16, !tbaa !30
  %30 = getelementptr i16, ptr %next.gep65.3, i64 8
  store <8 x i16> %broadcast.splat70, ptr %30, align 16, !tbaa !30
  %index.next71.3 = shl nuw i64 %index64, 1
  %31 = add i64 %index.next71.3, 128
  %next.gep65.4 = getelementptr i8, ptr @data16unsigned, i64 %31
  store <8 x i16> %broadcast.splat68, ptr %next.gep65.4, align 16, !tbaa !30
  %32 = getelementptr i16, ptr %next.gep65.4, i64 8
  store <8 x i16> %broadcast.splat70, ptr %32, align 16, !tbaa !30
  %index.next71.4 = add nuw nsw i64 %index64, 80
  %33 = icmp eq i64 %index.next71.4, 8000
  br i1 %33, label %_Z4fillIPttEvT_S1_T0_.exit, label %vector.body63, !llvm.loop !35

_Z4fillIPttEvT_S1_T0_.exit:                       ; preds = %vector.body63
  %34 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %34, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.107)
  tail call void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.108)
  tail call void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.109)
  tail call void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.110)
  tail call void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.111)
  tail call void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.112)
  tail call void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.113)
  tail call void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.114)
  tail call void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.115)
  tail call void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.116)
  tail call void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.117)
  tail call void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.118)
  tail call void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.119)
  tail call void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.120)
  tail call void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.121)
  %35 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div11 = sdiv i32 %35, 10
  store i32 %div11, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.122)
  tail call void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.123)
  tail call void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.124)
  tail call void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.125)
  tail call void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.126)
  tail call void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.127)
  tail call void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.128)
  tail call void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.129)
  tail call void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.130)
  tail call void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.131)
  tail call void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.132)
  tail call void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.133)
  tail call void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.134)
  tail call void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.135)
  tail call void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.136)
  tail call void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.137)
  tail call void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.138)
  %36 = load double, ptr @init_value, align 8, !tbaa !28
  %conv12 = fptosi double %36 to i32
  %broadcast.splatinsert81 = insertelement <4 x i32> poison, i32 %conv12, i64 0
  %broadcast.splat82 = shufflevector <4 x i32> %broadcast.splatinsert81, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert83 = insertelement <4 x i32> poison, i32 %conv12, i64 0
  %broadcast.splat84 = shufflevector <4 x i32> %broadcast.splatinsert83, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %vector.body77

vector.body77:                                    ; preds = %vector.body77, %_Z4fillIPttEvT_S1_T0_.exit
  %index78 = phi i64 [ 0, %_Z4fillIPttEvT_S1_T0_.exit ], [ %index.next85.4, %vector.body77 ]
  %37 = shl i64 %index78, 2
  %next.gep79 = getelementptr i8, ptr @data32, i64 %37
  store <4 x i32> %broadcast.splat82, ptr %next.gep79, align 16, !tbaa !9
  %38 = getelementptr i32, ptr %next.gep79, i64 4
  store <4 x i32> %broadcast.splat84, ptr %38, align 16, !tbaa !9
  %index.next85 = shl i64 %index78, 2
  %39 = add i64 %index.next85, 32
  %next.gep79.1 = getelementptr i8, ptr @data32, i64 %39
  store <4 x i32> %broadcast.splat82, ptr %next.gep79.1, align 16, !tbaa !9
  %40 = getelementptr i32, ptr %next.gep79.1, i64 4
  store <4 x i32> %broadcast.splat84, ptr %40, align 16, !tbaa !9
  %index.next85.1 = shl i64 %index78, 2
  %41 = add i64 %index.next85.1, 64
  %next.gep79.2 = getelementptr i8, ptr @data32, i64 %41
  store <4 x i32> %broadcast.splat82, ptr %next.gep79.2, align 16, !tbaa !9
  %42 = getelementptr i32, ptr %next.gep79.2, i64 4
  store <4 x i32> %broadcast.splat84, ptr %42, align 16, !tbaa !9
  %index.next85.2 = shl i64 %index78, 2
  %43 = add i64 %index.next85.2, 96
  %next.gep79.3 = getelementptr i8, ptr @data32, i64 %43
  store <4 x i32> %broadcast.splat82, ptr %next.gep79.3, align 16, !tbaa !9
  %44 = getelementptr i32, ptr %next.gep79.3, i64 4
  store <4 x i32> %broadcast.splat84, ptr %44, align 16, !tbaa !9
  %index.next85.3 = shl i64 %index78, 2
  %45 = add i64 %index.next85.3, 128
  %next.gep79.4 = getelementptr i8, ptr @data32, i64 %45
  store <4 x i32> %broadcast.splat82, ptr %next.gep79.4, align 16, !tbaa !9
  %46 = getelementptr i32, ptr %next.gep79.4, i64 4
  store <4 x i32> %broadcast.splat84, ptr %46, align 16, !tbaa !9
  %index.next85.4 = add nuw nsw i64 %index78, 40
  %47 = icmp eq i64 %index.next85.4, 8000
  br i1 %47, label %_Z4fillIPiiEvT_S1_T0_.exit, label %vector.body77, !llvm.loop !36

_Z4fillIPiiEvT_S1_T0_.exit:                       ; preds = %vector.body77
  %48 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %48, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.139)
  tail call void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.140)
  tail call void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.141)
  tail call void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.142)
  tail call void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.143)
  tail call void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.144)
  tail call void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.145)
  tail call void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.146)
  tail call void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.147)
  tail call void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.148)
  tail call void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.149)
  tail call void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.150)
  tail call void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.151)
  tail call void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.152)
  tail call void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.153)
  %49 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div13 = sdiv i32 %49, 10
  store i32 %div13, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.154)
  tail call void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.155)
  tail call void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.156)
  tail call void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.157)
  tail call void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.158)
  tail call void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.159)
  tail call void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.160)
  tail call void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.161)
  tail call void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.162)
  tail call void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.163)
  tail call void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.164)
  tail call void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.165)
  tail call void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.166)
  tail call void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.167)
  tail call void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.168)
  tail call void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.169)
  tail call void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.170)
  %50 = load double, ptr @init_value, align 8, !tbaa !28
  %conv14 = fptoui double %50 to i32
  %broadcast.splatinsert95 = insertelement <4 x i32> poison, i32 %conv14, i64 0
  %broadcast.splat96 = shufflevector <4 x i32> %broadcast.splatinsert95, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert97 = insertelement <4 x i32> poison, i32 %conv14, i64 0
  %broadcast.splat98 = shufflevector <4 x i32> %broadcast.splatinsert97, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %vector.body91

vector.body91:                                    ; preds = %vector.body91, %_Z4fillIPiiEvT_S1_T0_.exit
  %index92 = phi i64 [ 0, %_Z4fillIPiiEvT_S1_T0_.exit ], [ %index.next99.4, %vector.body91 ]
  %51 = shl i64 %index92, 2
  %next.gep93 = getelementptr i8, ptr @data32unsigned, i64 %51
  store <4 x i32> %broadcast.splat96, ptr %next.gep93, align 16, !tbaa !9
  %52 = getelementptr i32, ptr %next.gep93, i64 4
  store <4 x i32> %broadcast.splat98, ptr %52, align 16, !tbaa !9
  %index.next99 = shl i64 %index92, 2
  %53 = add i64 %index.next99, 32
  %next.gep93.1 = getelementptr i8, ptr @data32unsigned, i64 %53
  store <4 x i32> %broadcast.splat96, ptr %next.gep93.1, align 16, !tbaa !9
  %54 = getelementptr i32, ptr %next.gep93.1, i64 4
  store <4 x i32> %broadcast.splat98, ptr %54, align 16, !tbaa !9
  %index.next99.1 = shl i64 %index92, 2
  %55 = add i64 %index.next99.1, 64
  %next.gep93.2 = getelementptr i8, ptr @data32unsigned, i64 %55
  store <4 x i32> %broadcast.splat96, ptr %next.gep93.2, align 16, !tbaa !9
  %56 = getelementptr i32, ptr %next.gep93.2, i64 4
  store <4 x i32> %broadcast.splat98, ptr %56, align 16, !tbaa !9
  %index.next99.2 = shl i64 %index92, 2
  %57 = add i64 %index.next99.2, 96
  %next.gep93.3 = getelementptr i8, ptr @data32unsigned, i64 %57
  store <4 x i32> %broadcast.splat96, ptr %next.gep93.3, align 16, !tbaa !9
  %58 = getelementptr i32, ptr %next.gep93.3, i64 4
  store <4 x i32> %broadcast.splat98, ptr %58, align 16, !tbaa !9
  %index.next99.3 = shl i64 %index92, 2
  %59 = add i64 %index.next99.3, 128
  %next.gep93.4 = getelementptr i8, ptr @data32unsigned, i64 %59
  store <4 x i32> %broadcast.splat96, ptr %next.gep93.4, align 16, !tbaa !9
  %60 = getelementptr i32, ptr %next.gep93.4, i64 4
  store <4 x i32> %broadcast.splat98, ptr %60, align 16, !tbaa !9
  %index.next99.4 = add nuw nsw i64 %index92, 40
  %61 = icmp eq i64 %index.next99.4, 8000
  br i1 %61, label %_Z4fillIPjjEvT_S1_T0_.exit, label %vector.body91, !llvm.loop !37

_Z4fillIPjjEvT_S1_T0_.exit:                       ; preds = %vector.body91
  %62 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %62, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.171)
  tail call void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.172)
  tail call void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.173)
  tail call void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.174)
  tail call void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.175)
  tail call void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.176)
  tail call void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.177)
  tail call void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.178)
  tail call void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.179)
  tail call void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.180)
  tail call void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.181)
  tail call void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.182)
  tail call void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.183)
  tail call void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.184)
  tail call void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.185)
  %63 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div15 = sdiv i32 %63, 10
  store i32 %div15, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.186)
  tail call void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.187)
  tail call void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.188)
  tail call void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.189)
  tail call void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.190)
  tail call void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.191)
  tail call void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.192)
  tail call void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.193)
  tail call void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.194)
  tail call void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.195)
  tail call void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.196)
  tail call void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.197)
  tail call void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.198)
  tail call void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.199)
  tail call void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.200)
  tail call void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.201)
  tail call void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.202)
  %64 = load double, ptr @init_value, align 8, !tbaa !28
  %conv16 = fptosi double %64 to i64
  %broadcast.splatinsert109 = insertelement <2 x i64> poison, i64 %conv16, i64 0
  %broadcast.splat110 = shufflevector <2 x i64> %broadcast.splatinsert109, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert111 = insertelement <2 x i64> poison, i64 %conv16, i64 0
  %broadcast.splat112 = shufflevector <2 x i64> %broadcast.splatinsert111, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %vector.body105

vector.body105:                                   ; preds = %vector.body105, %_Z4fillIPjjEvT_S1_T0_.exit
  %index106 = phi i64 [ 0, %_Z4fillIPjjEvT_S1_T0_.exit ], [ %index.next113.4, %vector.body105 ]
  %65 = shl i64 %index106, 3
  %next.gep107 = getelementptr i8, ptr @data64, i64 %65
  store <2 x i64> %broadcast.splat110, ptr %next.gep107, align 16, !tbaa !26
  %66 = getelementptr i64, ptr %next.gep107, i64 2
  store <2 x i64> %broadcast.splat112, ptr %66, align 16, !tbaa !26
  %index.next113 = shl i64 %index106, 3
  %67 = add i64 %index.next113, 32
  %next.gep107.1 = getelementptr i8, ptr @data64, i64 %67
  store <2 x i64> %broadcast.splat110, ptr %next.gep107.1, align 16, !tbaa !26
  %68 = getelementptr i64, ptr %next.gep107.1, i64 2
  store <2 x i64> %broadcast.splat112, ptr %68, align 16, !tbaa !26
  %index.next113.1 = shl i64 %index106, 3
  %69 = add i64 %index.next113.1, 64
  %next.gep107.2 = getelementptr i8, ptr @data64, i64 %69
  store <2 x i64> %broadcast.splat110, ptr %next.gep107.2, align 16, !tbaa !26
  %70 = getelementptr i64, ptr %next.gep107.2, i64 2
  store <2 x i64> %broadcast.splat112, ptr %70, align 16, !tbaa !26
  %index.next113.2 = shl i64 %index106, 3
  %71 = add i64 %index.next113.2, 96
  %next.gep107.3 = getelementptr i8, ptr @data64, i64 %71
  store <2 x i64> %broadcast.splat110, ptr %next.gep107.3, align 16, !tbaa !26
  %72 = getelementptr i64, ptr %next.gep107.3, i64 2
  store <2 x i64> %broadcast.splat112, ptr %72, align 16, !tbaa !26
  %index.next113.3 = shl i64 %index106, 3
  %73 = add i64 %index.next113.3, 128
  %next.gep107.4 = getelementptr i8, ptr @data64, i64 %73
  store <2 x i64> %broadcast.splat110, ptr %next.gep107.4, align 16, !tbaa !26
  %74 = getelementptr i64, ptr %next.gep107.4, i64 2
  store <2 x i64> %broadcast.splat112, ptr %74, align 16, !tbaa !26
  %index.next113.4 = add nuw nsw i64 %index106, 20
  %75 = icmp eq i64 %index.next113.4, 8000
  br i1 %75, label %_Z4fillIPllEvT_S1_T0_.exit, label %vector.body105, !llvm.loop !38

_Z4fillIPllEvT_S1_T0_.exit:                       ; preds = %vector.body105
  %76 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %76, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.203)
  tail call void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.204)
  tail call void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.205)
  tail call void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.206)
  tail call void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.207)
  tail call void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.208)
  tail call void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.209)
  tail call void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.210)
  tail call void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.211)
  tail call void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.212)
  tail call void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.213)
  tail call void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.214)
  tail call void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.215)
  tail call void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.216)
  tail call void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.217)
  %77 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div17 = sdiv i32 %77, 10
  store i32 %div17, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.218)
  tail call void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.219)
  tail call void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.220)
  tail call void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.221)
  tail call void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.222)
  tail call void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.223)
  tail call void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.224)
  tail call void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.225)
  tail call void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.226)
  tail call void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.227)
  tail call void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.228)
  tail call void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.229)
  tail call void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.230)
  tail call void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.231)
  tail call void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.232)
  tail call void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.233)
  tail call void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.234)
  %78 = load double, ptr @init_value, align 8, !tbaa !28
  %conv18 = fptoui double %78 to i64
  %broadcast.splatinsert123 = insertelement <2 x i64> poison, i64 %conv18, i64 0
  %broadcast.splat124 = shufflevector <2 x i64> %broadcast.splatinsert123, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert125 = insertelement <2 x i64> poison, i64 %conv18, i64 0
  %broadcast.splat126 = shufflevector <2 x i64> %broadcast.splatinsert125, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %vector.body119

vector.body119:                                   ; preds = %vector.body119, %_Z4fillIPllEvT_S1_T0_.exit
  %index120 = phi i64 [ 0, %_Z4fillIPllEvT_S1_T0_.exit ], [ %index.next127.4, %vector.body119 ]
  %79 = shl i64 %index120, 3
  %next.gep121 = getelementptr i8, ptr @data64unsigned, i64 %79
  store <2 x i64> %broadcast.splat124, ptr %next.gep121, align 16, !tbaa !26
  %80 = getelementptr i64, ptr %next.gep121, i64 2
  store <2 x i64> %broadcast.splat126, ptr %80, align 16, !tbaa !26
  %index.next127 = shl i64 %index120, 3
  %81 = add i64 %index.next127, 32
  %next.gep121.1 = getelementptr i8, ptr @data64unsigned, i64 %81
  store <2 x i64> %broadcast.splat124, ptr %next.gep121.1, align 16, !tbaa !26
  %82 = getelementptr i64, ptr %next.gep121.1, i64 2
  store <2 x i64> %broadcast.splat126, ptr %82, align 16, !tbaa !26
  %index.next127.1 = shl i64 %index120, 3
  %83 = add i64 %index.next127.1, 64
  %next.gep121.2 = getelementptr i8, ptr @data64unsigned, i64 %83
  store <2 x i64> %broadcast.splat124, ptr %next.gep121.2, align 16, !tbaa !26
  %84 = getelementptr i64, ptr %next.gep121.2, i64 2
  store <2 x i64> %broadcast.splat126, ptr %84, align 16, !tbaa !26
  %index.next127.2 = shl i64 %index120, 3
  %85 = add i64 %index.next127.2, 96
  %next.gep121.3 = getelementptr i8, ptr @data64unsigned, i64 %85
  store <2 x i64> %broadcast.splat124, ptr %next.gep121.3, align 16, !tbaa !26
  %86 = getelementptr i64, ptr %next.gep121.3, i64 2
  store <2 x i64> %broadcast.splat126, ptr %86, align 16, !tbaa !26
  %index.next127.3 = shl i64 %index120, 3
  %87 = add i64 %index.next127.3, 128
  %next.gep121.4 = getelementptr i8, ptr @data64unsigned, i64 %87
  store <2 x i64> %broadcast.splat124, ptr %next.gep121.4, align 16, !tbaa !26
  %88 = getelementptr i64, ptr %next.gep121.4, i64 2
  store <2 x i64> %broadcast.splat126, ptr %88, align 16, !tbaa !26
  %index.next127.4 = add nuw nsw i64 %index120, 20
  %89 = icmp eq i64 %index.next127.4, 8000
  br i1 %89, label %_Z4fillIPmmEvT_S1_T0_.exit, label %vector.body119, !llvm.loop !39

_Z4fillIPmmEvT_S1_T0_.exit:                       ; preds = %vector.body119
  %90 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %90, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.235)
  tail call void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.236)
  tail call void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.237)
  tail call void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.238)
  tail call void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.239)
  tail call void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.240)
  tail call void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.241)
  tail call void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.242)
  tail call void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.243)
  tail call void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.244)
  tail call void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.245)
  tail call void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.246)
  tail call void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.247)
  tail call void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.248)
  tail call void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.249)
  %91 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div19 = sdiv i32 %91, 10
  store i32 %div19, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.250)
  tail call void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.251)
  tail call void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.252)
  tail call void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.253)
  tail call void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.254)
  tail call void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.255)
  tail call void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.256)
  tail call void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.257)
  tail call void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.258)
  tail call void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.259)
  tail call void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.260)
  tail call void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.261)
  tail call void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.262)
  tail call void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.263)
  tail call void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.264)
  tail call void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.265)
  tail call void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.266)
  %92 = load double, ptr @init_value, align 8, !tbaa !28
  %conv20 = fptrunc double %92 to float
  %broadcast.splatinsert137 = insertelement <4 x float> poison, float %conv20, i64 0
  %broadcast.splat138 = shufflevector <4 x float> %broadcast.splatinsert137, <4 x float> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert139 = insertelement <4 x float> poison, float %conv20, i64 0
  %broadcast.splat140 = shufflevector <4 x float> %broadcast.splatinsert139, <4 x float> poison, <4 x i32> zeroinitializer
  br label %vector.body133

vector.body133:                                   ; preds = %vector.body133, %_Z4fillIPmmEvT_S1_T0_.exit
  %index134 = phi i64 [ 0, %_Z4fillIPmmEvT_S1_T0_.exit ], [ %index.next141.4, %vector.body133 ]
  %93 = shl i64 %index134, 2
  %next.gep135 = getelementptr i8, ptr @dataFloat, i64 %93
  store <4 x float> %broadcast.splat138, ptr %next.gep135, align 16, !tbaa !40
  %94 = getelementptr float, ptr %next.gep135, i64 4
  store <4 x float> %broadcast.splat140, ptr %94, align 16, !tbaa !40
  %index.next141 = shl i64 %index134, 2
  %95 = add i64 %index.next141, 32
  %next.gep135.1 = getelementptr i8, ptr @dataFloat, i64 %95
  store <4 x float> %broadcast.splat138, ptr %next.gep135.1, align 16, !tbaa !40
  %96 = getelementptr float, ptr %next.gep135.1, i64 4
  store <4 x float> %broadcast.splat140, ptr %96, align 16, !tbaa !40
  %index.next141.1 = shl i64 %index134, 2
  %97 = add i64 %index.next141.1, 64
  %next.gep135.2 = getelementptr i8, ptr @dataFloat, i64 %97
  store <4 x float> %broadcast.splat138, ptr %next.gep135.2, align 16, !tbaa !40
  %98 = getelementptr float, ptr %next.gep135.2, i64 4
  store <4 x float> %broadcast.splat140, ptr %98, align 16, !tbaa !40
  %index.next141.2 = shl i64 %index134, 2
  %99 = add i64 %index.next141.2, 96
  %next.gep135.3 = getelementptr i8, ptr @dataFloat, i64 %99
  store <4 x float> %broadcast.splat138, ptr %next.gep135.3, align 16, !tbaa !40
  %100 = getelementptr float, ptr %next.gep135.3, i64 4
  store <4 x float> %broadcast.splat140, ptr %100, align 16, !tbaa !40
  %index.next141.3 = shl i64 %index134, 2
  %101 = add i64 %index.next141.3, 128
  %next.gep135.4 = getelementptr i8, ptr @dataFloat, i64 %101
  store <4 x float> %broadcast.splat138, ptr %next.gep135.4, align 16, !tbaa !40
  %102 = getelementptr float, ptr %next.gep135.4, i64 4
  store <4 x float> %broadcast.splat140, ptr %102, align 16, !tbaa !40
  %index.next141.4 = add nuw nsw i64 %index134, 40
  %103 = icmp eq i64 %index.next141.4, 8000
  br i1 %103, label %_Z4fillIPffEvT_S1_T0_.exit, label %vector.body133, !llvm.loop !42

_Z4fillIPffEvT_S1_T0_.exit:                       ; preds = %vector.body133
  %104 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %104, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.267)
  tail call void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.268)
  tail call void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.269)
  tail call void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.270)
  tail call void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.271)
  %105 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div21 = sdiv i32 %105, 10
  store i32 %div21, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.272)
  tail call void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.273)
  tail call void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.274)
  tail call void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.275)
  tail call void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.276)
  tail call void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.277)
  tail call void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.278)
  tail call void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.279)
  tail call void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.280)
  tail call void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.281)
  tail call void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.282)
  %106 = load double, ptr @init_value, align 8, !tbaa !28
  %broadcast.splatinsert151 = insertelement <2 x double> poison, double %106, i64 0
  %broadcast.splat152 = shufflevector <2 x double> %broadcast.splatinsert151, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert153 = insertelement <2 x double> poison, double %106, i64 0
  %broadcast.splat154 = shufflevector <2 x double> %broadcast.splatinsert153, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body147

vector.body147:                                   ; preds = %vector.body147, %_Z4fillIPffEvT_S1_T0_.exit
  %index148 = phi i64 [ 0, %_Z4fillIPffEvT_S1_T0_.exit ], [ %index.next155.4, %vector.body147 ]
  %107 = shl i64 %index148, 3
  %next.gep149 = getelementptr i8, ptr @dataDouble, i64 %107
  store <2 x double> %broadcast.splat152, ptr %next.gep149, align 16, !tbaa !28
  %108 = getelementptr double, ptr %next.gep149, i64 2
  store <2 x double> %broadcast.splat154, ptr %108, align 16, !tbaa !28
  %index.next155 = shl i64 %index148, 3
  %109 = add i64 %index.next155, 32
  %next.gep149.1 = getelementptr i8, ptr @dataDouble, i64 %109
  store <2 x double> %broadcast.splat152, ptr %next.gep149.1, align 16, !tbaa !28
  %110 = getelementptr double, ptr %next.gep149.1, i64 2
  store <2 x double> %broadcast.splat154, ptr %110, align 16, !tbaa !28
  %index.next155.1 = shl i64 %index148, 3
  %111 = add i64 %index.next155.1, 64
  %next.gep149.2 = getelementptr i8, ptr @dataDouble, i64 %111
  store <2 x double> %broadcast.splat152, ptr %next.gep149.2, align 16, !tbaa !28
  %112 = getelementptr double, ptr %next.gep149.2, i64 2
  store <2 x double> %broadcast.splat154, ptr %112, align 16, !tbaa !28
  %index.next155.2 = shl i64 %index148, 3
  %113 = add i64 %index.next155.2, 96
  %next.gep149.3 = getelementptr i8, ptr @dataDouble, i64 %113
  store <2 x double> %broadcast.splat152, ptr %next.gep149.3, align 16, !tbaa !28
  %114 = getelementptr double, ptr %next.gep149.3, i64 2
  store <2 x double> %broadcast.splat154, ptr %114, align 16, !tbaa !28
  %index.next155.3 = shl i64 %index148, 3
  %115 = add i64 %index.next155.3, 128
  %next.gep149.4 = getelementptr i8, ptr @dataDouble, i64 %115
  store <2 x double> %broadcast.splat152, ptr %next.gep149.4, align 16, !tbaa !28
  %116 = getelementptr double, ptr %next.gep149.4, i64 2
  store <2 x double> %broadcast.splat154, ptr %116, align 16, !tbaa !28
  %index.next155.4 = add nuw nsw i64 %index148, 20
  %117 = icmp eq i64 %index.next155.4, 8000
  br i1 %117, label %_Z4fillIPddEvT_S1_T0_.exit, label %vector.body147, !llvm.loop !43

_Z4fillIPddEvT_S1_T0_.exit:                       ; preds = %vector.body147
  %118 = load i32, ptr @base_iterations, align 4, !tbaa !9
  store i32 %118, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.283)
  tail call void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.284)
  tail call void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.285)
  tail call void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.286)
  tail call void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.287)
  %119 = load i32, ptr @base_iterations, align 4, !tbaa !9
  %div22 = sdiv i32 %119, 10
  store i32 %div22, ptr @iterations, align 4, !tbaa !9
  tail call void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.288)
  tail call void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.289)
  tail call void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.290)
  tail call void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.291)
  tail call void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.292)
  tail call void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.293)
  tail call void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.294)
  tail call void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.295)
  tail call void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.296)
  tail call void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.297)
  tail call void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.298)
  ret i32 0
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 127
  %cmp.i.i.us = icmp eq i32 %.mask25, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us

_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !44

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !44

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !45

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !45

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !46

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !46

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, 6
  %cmp.i.i.us = icmp eq i8 %2, -128
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !47

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !47

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 127
  %cmp.i.i.us = icmp eq i32 %.mask25, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !48

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !48

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !49

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !49

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !50

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !50

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !51

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !51

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !52

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !52

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 127
  %cmp.i.i.us = icmp eq i32 %.mask25, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !53

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !53

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, 31
  %cmp.i.i.us = icmp eq i8 %2, -64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !54

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !54

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, 29
  %cmp.i.i.us = icmp eq i8 %2, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us

_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !55

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !55

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = add <16 x i8> %vec.phi34, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !56

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !57

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us

_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !58

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.023.us, 10
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !59

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %add.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %add.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %add.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %add.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit

_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !58

for.end8:                                         ; preds = %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit, %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %29, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = add <16 x i8> %vec.phi33, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !60

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi39, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %wide.load40
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !61

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us

_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !62

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add3.i.us = add i8 %result.022.us, 10
  %add.us = add i8 %add3.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !63

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %add3.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %add3.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %add3.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %add3.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit

_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !62

for.end8:                                         ; preds = %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit, %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %5 = add <16 x i8> %vec.phi34, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !64

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !65

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us

_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !66

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub.i.us = add i8 %result.023.us, -10
  %add.us = add i8 %sub.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !67

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %sub.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %sub.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %sub.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %sub.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit

_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !66

for.end8:                                         ; preds = %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit, %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i15 = sub nsw i64 %call.i14, %25
  %conv.i16 = sitofp i64 %sub.i15 to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %5 = add <16 x i8> %vec.phi33, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !68

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi39, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %13 = add <8 x i8> %12, %wide.load40
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !69

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us

_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !70

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub3.i.us = add i8 %result.022.us, -10
  %add.us = add i8 %sub3.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !71

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %sub3.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %sub3.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %sub3.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %sub3.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit

_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !70

for.end8:                                         ; preds = %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit, %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  %cmp220 = icmp sgt i32 %count, 0
  %or.cond = and i1 %cmp23, %cmp220
  br i1 %or.cond, label %for.cond1.preheader.us.preheader, label %for.end8

for.cond1.preheader.us.preheader:                 ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check26 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec30 = and i64 %wide.trip.count, 4294967288
  %cmp.n31 = icmp eq i64 %n.vec30, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check26, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi27 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load28 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %wide.load, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = mul <16 x i8> %wide.load28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi27
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !72

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index32 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next35, %vec.epilog.vector.body ]
  %vec.phi33 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index32
  %wide.load34 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %wide.load34, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %vec.phi33
  %index.next35 = add nuw i64 %index32, 8
  %14 = icmp eq i64 %index.next35, %n.vec30
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !73

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n31, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec30, %vec.epilog.middle.block ]
  %result.021.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us

_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !74

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i8 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul.i.us = mul i8 %18, 120
  %add.us = add i8 %mul.i.us, %result.021.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !75

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %cmp.i.i.us = icmp eq i8 %add.us.lcssa, 0
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us, label %if.then.i.us

for.end8:                                         ; preds = %_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  %cmp219 = icmp sgt i32 %count, 0
  %or.cond = and i1 %cmp22, %cmp219
  br i1 %or.cond, label %for.cond1.preheader.us.preheader, label %for.end8

for.cond1.preheader.us.preheader:                 ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check25 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec29 = and i64 %wide.trip.count, 4294967288
  %cmp.n30 = icmp eq i64 %n.vec29, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check25, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi26 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load27 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %wide.load, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = mul <16 x i8> %wide.load27, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi26
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !76

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index31 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next34, %vec.epilog.vector.body ]
  %vec.phi32 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index31
  %wide.load33 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %wide.load33, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %vec.phi32
  %index.next34 = add nuw i64 %index31, 8
  %14 = icmp eq i64 %index.next34, %n.vec29
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !77

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n30, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec29, %vec.epilog.middle.block ]
  %result.020.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us

_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !78

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i8 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul3.i.us = mul i8 %18, 120
  %add.us = add i8 %mul3.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !79

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %cmp.i.i.us = icmp eq i8 %add.us.lcssa, 0
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us, label %if.then.i.us

for.end8:                                         ; preds = %_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = add <16 x i8> %vec.phi34, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !80

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !81

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us

_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !82

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.023.us, 120
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !83

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %mul.i.us = shl i8 %conv.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %mul.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit

_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !82

for.end8:                                         ; preds = %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit, %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %29, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = sdiv <16 x i8> %wide.load, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %5 = sdiv <16 x i8> %wide.load34, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !84

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = sdiv <8 x i8> %wide.load40, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !85

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us

_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !86

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = sdiv i8 %18, 5
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !87

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %21 = sdiv i8 %conv.i.us, 5
  %mul.i.us = shl i8 %21, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit
  %22 = phi i32 [ %26, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %27, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %23 to i8
  %24 = sdiv i8 %conv.i, 5
  %mul.i.mask = and i8 %24, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit

_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %27 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !86

for.end8:                                         ; preds = %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit, %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i = add nsw i32 %32, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %28
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = sdiv <16 x i8> %wide.load, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = sdiv <16 x i8> %wide.load34, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !88

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = sdiv <8 x i8> %wide.load40, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !89

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us

_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !90

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = sdiv i8 %18, 120
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !91

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %21 = sdiv i8 %conv.i.us, 120
  %mul.i.us = shl nsw i8 %21, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %23 to i8
  %conv.i.off = add i8 %conv.i, 119
  %cmp.i.i = icmp ult i8 %conv.i.off, -17
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit

_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !90

for.end8:                                         ; preds = %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit, %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %5 = add <16 x i8> %vec.phi34, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !92

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !93

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us

_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !94

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.023.us, 2
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !95

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %add.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %add.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %add.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %add.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit

_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !94

for.end8:                                         ; preds = %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit, %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %29, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us
  %1 = phi i32 [ %14, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %4, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %5, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %wide.load, %vec.phi
  %5 = add <16 x i8> %wide.load34, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !96

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %5, %4
  %7 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %7, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %8 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %8, %vec.epilog.ph ], [ %10, %vec.epilog.vector.body ]
  %9 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %9, align 1, !tbaa !29
  %10 = add <8 x i8> %wide.load40, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %11 = icmp eq i64 %index.next41, %n.vec36
  br i1 %11, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !97

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %12 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %10)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %7, %vec.epilog.iter.check ], [ %12, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us

_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %14
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !98

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %15 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.us = add i8 %15, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !99

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %7, %middle.block ], [ %12, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %16 to i8
  %mul.i.us = shl i8 %conv.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit
  %17 = phi i32 [ %20, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %18 to i8
  %mul.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit

_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !98

for.end8:                                         ; preds = %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit, %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = and <16 x i8> %wide.load, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = and <16 x i8> %wide.load34, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !100

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = and <8 x i8> %wide.load40, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !101

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us

_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !102

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = and i8 %18, 10
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !103

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = and i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %23 to i8
  %.mask = and i8 %conv.i, 2
  %cmp.i.i = icmp eq i8 %.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit

_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !102

for.end8:                                         ; preds = %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit, %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = and <16 x i8> %wide.load, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %5 = and <16 x i8> %wide.load34, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !104

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = and <8 x i8> %wide.load40, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !105

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us

_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !106

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = and i8 %18, 14
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !107

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = and i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %23 to i8
  %.mask = and i8 %conv.i, 2
  %cmp.i.i = icmp eq i8 %.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit

_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !106

for.end8:                                         ; preds = %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit, %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check29 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec33 = and i64 %wide.trip.count, 4294967288
  %cmp.n34 = icmp eq i64 %n.vec33, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check29, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi30 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load31 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = or <16 x i8> %wide.load, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = or <16 x i8> %wide.load31, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi30
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !108

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index35 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next38, %vec.epilog.vector.body ]
  %vec.phi36 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index35
  %wide.load37 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = or <8 x i8> %wide.load37, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %vec.phi36
  %index.next38 = add nuw i64 %index35, 8
  %14 = icmp eq i64 %index.next38, %n.vec33
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !109

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n34, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec33, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us

_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !110

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = or i8 %18, 10
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !111

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = or i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.025 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %inc7 = add nuw nsw i32 %i.025, 1
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !110

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %24 = load i64, ptr @start_time, align 8, !tbaa !26
  %25 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %25, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %26, %27
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %28 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %add.i = add nsw i32 %28, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %25, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %29 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %29)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %30 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %31 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %24
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %30 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %30, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check27 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec31 = and i64 %wide.trip.count, 4294967288
  %cmp.n32 = icmp eq i64 %n.vec31, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check27, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi28 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load29 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = or <16 x i8> %wide.load, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %5 = or <16 x i8> %wide.load29, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi28
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !112

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index33 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next36, %vec.epilog.vector.body ]
  %vec.phi34 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index33
  %wide.load35 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = or <8 x i8> %wide.load35, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %13 = add <8 x i8> %12, %vec.phi34
  %index.next36 = add nuw i64 %index33, 8
  %14 = icmp eq i64 %index.next36, %n.vec31
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !113

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n32, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec31, %vec.epilog.middle.block ]
  %result.020.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us

_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !114

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i8 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = or i8 %18, 63
  %add.us = add i8 %19, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !115

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %cmp.i.i.us = icmp eq i8 %add.us.lcssa, -64
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %20 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %20)
  %inc7 = add nuw nsw i32 %i.023, 1
  %21 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %21
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !114

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = xor <16 x i8> %wide.load, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = xor <16 x i8> %wide.load34, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !116

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = xor <8 x i8> %wide.load40, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !117

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us

_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !118

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = xor i8 %18, 10
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !119

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %23 to i8
  %.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit

_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !118

for.end8:                                         ; preds = %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit, %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = xor <16 x i8> %wide.load, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %5 = xor <16 x i8> %wide.load34, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !120

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = xor <8 x i8> %wide.load40, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !121

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us

_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !122

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = xor i8 %18, 49
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !123

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %21, 64
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %23 to i8
  %.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %.mask, 1
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit

_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !122

for.end8:                                         ; preds = %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit, %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 127
  %cmp.i.i.us = icmp eq i32 %.mask25, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us

_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !124

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !124

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !125

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !125

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !126

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !126

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, 6
  %cmp.i.i.us = icmp eq i8 %2, -128
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !127

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !127

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 127
  %cmp.i.i.us = icmp eq i32 %.mask25, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !128

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !128

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !129

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !129

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !130

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !130

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !131

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !131

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 255
  %cmp.i.i.us = icmp eq i32 %1, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !132

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !132

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 127
  %cmp.i.i.us = icmp eq i32 %.mask25, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !133

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !133

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, 31
  %cmp.i.i.us = icmp eq i8 %2, -64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !134

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !134

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, 29
  %cmp.i.i.us = icmp eq i8 %2, 64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us

_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !135

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !135

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = add <16 x i8> %vec.phi34, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !136

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !137

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us

_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !138

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.023.us, 10
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !139

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %add.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %add.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %add.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %add.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit

_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !138

for.end8:                                         ; preds = %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit, %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %29, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = add <16 x i8> %vec.phi33, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !140

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi39, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %wide.load40
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !141

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us

_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !142

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add3.i.us = add i8 %result.022.us, 10
  %add.us = add i8 %add3.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !143

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %add3.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %add3.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %add3.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %add3.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit

_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !142

for.end8:                                         ; preds = %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit, %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %5 = add <16 x i8> %vec.phi34, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !144

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !145

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us

_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !146

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub.i.us = add i8 %result.023.us, -10
  %add.us = add i8 %sub.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !147

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %sub.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %sub.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %sub.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %sub.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit

_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !146

for.end8:                                         ; preds = %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit, %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i15 = sub nsw i64 %call.i14, %25
  %conv.i16 = sitofp i64 %sub.i15 to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %5 = add <16 x i8> %vec.phi33, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !148

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi39, <i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10, i8 -10>
  %13 = add <8 x i8> %12, %wide.load40
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !149

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us

_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !150

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub3.i.us = add i8 %result.022.us, -10
  %add.us = add i8 %sub3.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !151

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %sub3.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %sub3.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %sub3.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %sub3.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit

_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !150

for.end8:                                         ; preds = %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit, %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  %cmp220 = icmp sgt i32 %count, 0
  %or.cond = and i1 %cmp23, %cmp220
  br i1 %or.cond, label %for.cond1.preheader.us.preheader, label %for.end8

for.cond1.preheader.us.preheader:                 ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check26 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec30 = and i64 %wide.trip.count, 4294967288
  %cmp.n31 = icmp eq i64 %n.vec30, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check26, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi27 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load28 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %wide.load, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = mul <16 x i8> %wide.load28, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi27
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !152

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index32 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next35, %vec.epilog.vector.body ]
  %vec.phi33 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index32
  %wide.load34 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %wide.load34, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %vec.phi33
  %index.next35 = add nuw i64 %index32, 8
  %14 = icmp eq i64 %index.next35, %n.vec30
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !153

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n31, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec30, %vec.epilog.middle.block ]
  %result.021.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us

_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !154

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i8 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul.i.us = mul i8 %18, 120
  %add.us = add i8 %mul.i.us, %result.021.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !155

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %cmp.i.i.us = icmp eq i8 %add.us.lcssa, 0
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us, label %if.then.i.us

for.end8:                                         ; preds = %_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  %cmp219 = icmp sgt i32 %count, 0
  %or.cond = and i1 %cmp22, %cmp219
  br i1 %or.cond, label %for.cond1.preheader.us.preheader, label %for.end8

for.cond1.preheader.us.preheader:                 ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check25 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec29 = and i64 %wide.trip.count, 4294967288
  %cmp.n30 = icmp eq i64 %n.vec29, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check25, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi26 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load27 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %wide.load, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = mul <16 x i8> %wide.load27, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi26
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !156

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index31 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next34, %vec.epilog.vector.body ]
  %vec.phi32 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index31
  %wide.load33 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %wide.load33, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %vec.phi32
  %index.next34 = add nuw i64 %index31, 8
  %14 = icmp eq i64 %index.next34, %n.vec29
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !157

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n30, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec29, %vec.epilog.middle.block ]
  %result.020.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us

_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !158

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i8 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul3.i.us = mul i8 %18, 120
  %add.us = add i8 %mul3.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !159

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %cmp.i.i.us = icmp eq i8 %add.us.lcssa, 0
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us, label %if.then.i.us

for.end8:                                         ; preds = %_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = add <16 x i8> %vec.phi34, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !160

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !161

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us

_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !162

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.023.us, 120
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !163

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %mul.i.us = shl i8 %conv.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %mul.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit

_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !162

for.end8:                                         ; preds = %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit, %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %29, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = udiv <16 x i8> %wide.load, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %5 = udiv <16 x i8> %wide.load34, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !164

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = udiv <8 x i8> %wide.load40, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !165

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us

_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !166

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = udiv i8 %18, 5
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !167

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i8
  %21 = udiv i8 %conv.i.us, 5
  %mul.i.us = shl i8 %21, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit
  %22 = phi i32 [ %26, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %27, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %23 to i8
  %24 = udiv i8 %conv.i, 5
  %mul.i.mask = and i8 %24, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit

_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %27 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !166

for.end8:                                         ; preds = %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit, %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i = add nsw i32 %32, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %28
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check31 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec35 = and i64 %wide.trip.count, 4294967288
  %cmp.n36 = icmp eq i64 %n.vec35, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check31, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi32 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load33 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = udiv <16 x i8> %wide.load, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %5 = udiv <16 x i8> %wide.load33, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi32
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !168

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index37 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next40, %vec.epilog.vector.body ]
  %vec.phi38 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index37
  %wide.load39 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = udiv <8 x i8> %wide.load39, <i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120, i8 120>
  %13 = add <8 x i8> %12, %vec.phi38
  %index.next40 = add nuw i64 %index37, 8
  %14 = icmp eq i64 %index.next40, %n.vec35
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !169

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n36, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec35, %vec.epilog.middle.block ]
  %result.021.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us

_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !170

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i8 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = udiv i8 %18, 120
  %add.us = add i8 %19, %result.021.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !171

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i8
  %21 = udiv i8 %conv.i.us, 120
  %22 = shl nuw i8 %21, 6
  %cmp.i.i.us = icmp eq i8 %22, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit
  %23 = phi i32 [ %26, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %24 = phi double [ %27, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc7, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %24 to i8
  %cmp.i.i = icmp ult i8 %conv.i, 120
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit

_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %23, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %27 = phi double [ %24, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !170

for.end8:                                         ; preds = %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit, %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i = add nsw i32 %32, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i16, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %28
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec37 = and i64 %wide.trip.count, 4294967288
  %cmp.n38 = icmp eq i64 %n.vec37, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %5 = add <16 x i8> %vec.phi34, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !172

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index39 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next42, %vec.epilog.vector.body ]
  %vec.phi40 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index39
  %wide.load41 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi40, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %13 = add <8 x i8> %12, %wide.load41
  %index.next42 = add nuw i64 %index39, 8
  %14 = icmp eq i64 %index.next42, %n.vec37
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !173

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n38, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec37, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us

_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !174

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.023.us, 2
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !175

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %add.i.i.us = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %add.i.i.us, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit
  %20 = phi i32 [ %23, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %add.i.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %add.i.i.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit

_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !174

for.end8:                                         ; preds = %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit, %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %29, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %25
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us
  %1 = phi i32 [ %14, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %4, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %5, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %wide.load, %vec.phi
  %5 = add <16 x i8> %wide.load34, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !176

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %5, %4
  %7 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %7, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %8 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %8, %vec.epilog.ph ], [ %10, %vec.epilog.vector.body ]
  %9 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %9, align 1, !tbaa !29
  %10 = add <8 x i8> %wide.load40, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %11 = icmp eq i64 %index.next41, %n.vec36
  br i1 %11, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !177

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %12 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %10)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %7, %vec.epilog.iter.check ], [ %12, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us

_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %14
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !178

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %15 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.us = add i8 %15, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !179

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %7, %middle.block ], [ %12, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %16 to i8
  %mul.i.us = shl i8 %conv.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit
  %17 = phi i32 [ %20, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %18 to i8
  %mul.i.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit

_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !178

for.end8:                                         ; preds = %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit, %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = and <16 x i8> %wide.load, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = and <16 x i8> %wide.load34, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !180

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = and <8 x i8> %wide.load40, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !181

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us

_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !182

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = and i8 %18, 10
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !183

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = and i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %23 to i8
  %.mask = and i8 %conv.i, 2
  %cmp.i.i = icmp eq i8 %.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit

_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !182

for.end8:                                         ; preds = %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit, %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = and <16 x i8> %wide.load, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %5 = and <16 x i8> %wide.load34, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !184

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = and <8 x i8> %wide.load40, <i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14, i8 14>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !185

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us

_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !186

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = and i8 %18, 14
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !187

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = and i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %23 to i8
  %.mask = and i8 %conv.i, 2
  %cmp.i.i = icmp eq i8 %.mask, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit

_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !186

for.end8:                                         ; preds = %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit, %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check29 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec33 = and i64 %wide.trip.count, 4294967288
  %cmp.n34 = icmp eq i64 %n.vec33, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check29, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi30 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load31 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = or <16 x i8> %wide.load, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = or <16 x i8> %wide.load31, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi30
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !188

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index35 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next38, %vec.epilog.vector.body ]
  %vec.phi36 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index35
  %wide.load37 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = or <8 x i8> %wide.load37, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %vec.phi36
  %index.next38 = add nuw i64 %index35, 8
  %14 = icmp eq i64 %index.next38, %n.vec33
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !189

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n34, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec33, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us

_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !190

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = or i8 %18, 10
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !191

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = or i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.025 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %22)
  %inc7 = add nuw nsw i32 %i.025, 1
  %23 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !190

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %24 = load i64, ptr @start_time, align 8, !tbaa !26
  %25 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %25, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %26, %27
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %28 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %add.i = add nsw i32 %28, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %25, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %29 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %29)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %30 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %31 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %24
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %30 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %30, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check27 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec31 = and i64 %wide.trip.count, 4294967288
  %cmp.n32 = icmp eq i64 %n.vec31, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check27, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi28 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load29 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = or <16 x i8> %wide.load, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %5 = or <16 x i8> %wide.load29, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi28
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !192

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index33 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next36, %vec.epilog.vector.body ]
  %vec.phi34 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index33
  %wide.load35 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = or <8 x i8> %wide.load35, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %13 = add <8 x i8> %12, %vec.phi34
  %index.next36 = add nuw i64 %index33, 8
  %14 = icmp eq i64 %index.next36, %n.vec31
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !193

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n32, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec31, %vec.epilog.middle.block ]
  %result.020.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us

_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !194

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i8 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = or i8 %18, 63
  %add.us = add i8 %19, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !195

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %cmp.i.i.us = icmp eq i8 %add.us.lcssa, -64
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %20 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %20)
  %inc7 = add nuw nsw i32 %i.023, 1
  %21 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %21
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !194

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = xor <16 x i8> %wide.load, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %5 = xor <16 x i8> %wide.load34, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !196

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = xor <8 x i8> %wide.load40, <i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10, i8 10>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !197

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us

_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !198

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = xor i8 %18, 10
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !199

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %21, -128
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %23 to i8
  %.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %.mask, 2
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit

_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !198

for.end8:                                         ; preds = %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit, %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check32 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec36 = and i64 %wide.trip.count, 4294967288
  %cmp.n37 = icmp eq i64 %n.vec36, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us
  %1 = phi i32 [ %17, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check32, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi33 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load34 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = xor <16 x i8> %wide.load, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %5 = xor <16 x i8> %wide.load34, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi33
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !200

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index38 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next41, %vec.epilog.vector.body ]
  %vec.phi39 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index38
  %wide.load40 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = xor <8 x i8> %wide.load40, <i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49, i8 49>
  %13 = add <8 x i8> %12, %vec.phi39
  %index.next41 = add nuw i64 %index38, 8
  %14 = icmp eq i64 %index.next41, %n.vec36
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !201

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n37, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec36, %vec.epilog.middle.block ]
  %result.022.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us

_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !202

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i8 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %19 = xor i8 %18, 49
  %add.us = add i8 %19, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !203

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i8
  %21 = shl i8 %conv.i.us, 6
  %mul.i.us = xor i8 %21, 64
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit
  %22 = phi i32 [ %25, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %26, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %23 to i8
  %.mask = and i8 %conv.i, 3
  %cmp.i.i = icmp eq i8 %.mask, 1
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit

_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %25 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %26 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %25
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !202

for.end8:                                         ; preds = %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit, %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %27 = load i64, ptr @start_time, align 8, !tbaa !26
  %28 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %28, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %29 = load i32, ptr @current_test, align 4, !tbaa !9
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %29, %30
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %31 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %add.i = add nsw i32 %31, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %28, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %32)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %33 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %34 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %27
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %33 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %34, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %33, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 32767
  %cmp.i.i.us = icmp eq i32 %.mask25, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us

_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !204

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !204

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !205

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !205

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !206

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !206

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, 6
  %cmp.i.i.us = icmp eq i16 %2, -17536
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !207

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !207

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 32767
  %cmp.i.i.us = icmp eq i32 %.mask25, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !208

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !208

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !209

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !209

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !210

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !210

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !211

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !211

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !212

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !212

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 32767
  %cmp.i.i.us = icmp eq i32 %.mask25, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !213

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !213

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, 31
  %cmp.i.i.us = icmp eq i16 %2, -14144
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !214

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !214

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, 29
  %cmp.i.i.us = icmp eq i16 %2, -30144
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us

_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !215

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !215

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = add <8 x i16> %vec.phi33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !216

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us

_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !217

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.023.us, 10
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !218

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, 14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, -14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit

_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !217

for.end8:                                         ; preds = %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit, %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %25, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = add <8 x i16> %vec.phi32, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !219

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us

_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !220

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add3.i.us = add i16 %result.022.us, 10
  %add.us = add i16 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !221

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, 14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, -14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit

_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !220

for.end8:                                         ; preds = %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit, %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %5 = add <8 x i16> %vec.phi33, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !222

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us

_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !223

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub.i.us = add i16 %result.023.us, -10
  %add.us = add i16 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !224

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, -14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, 14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit

_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !223

for.end8:                                         ; preds = %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit, %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i15 = sub nsw i64 %call.i14, %21
  %conv.i16 = sitofp i64 %sub.i15 to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %5 = add <8 x i16> %vec.phi32, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !225

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us

_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !226

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub3.i.us = add i16 %result.022.us, -10
  %add.us = add i16 %sub3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !227

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, -14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, 14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit

_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !226

for.end8:                                         ; preds = %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit, %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %wide.load, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = mul <8 x i16> %wide.load34, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !228

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us

_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !229

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul.i14.us = mul i16 %12, 120
  %add.us = add i16 %mul.i14.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !230

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %mul.i.us = mul i16 %conv.i.us, -23040
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %mul.i = mul i16 %conv.i, -23040
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit

_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !229

for.end8:                                         ; preds = %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit, %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %wide.load, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = mul <8 x i16> %wide.load33, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !231

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us

_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !232

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul3.i.us = mul i16 %12, 120
  %add.us = add i16 %mul3.i.us, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !233

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %mul.i.us = mul i16 %conv.i.us, -23040
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %mul.i = mul i16 %conv.i, -23040
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit

_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !232

for.end8:                                         ; preds = %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit, %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = add <8 x i16> %vec.phi33, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !234

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us

_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !235

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.023.us, 120
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !236

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, -23040
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, 23040
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit

_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !235

for.end8:                                         ; preds = %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit, %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %25, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = sdiv <8 x i16> %wide.load, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5 = sdiv <8 x i16> %wide.load33, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !237

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us

_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !238

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = sdiv i16 %12, 5
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !239

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = sdiv i16 %conv.i.us, 5
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i16
  %18 = sdiv i16 %conv.i, 5
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit

_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !238

for.end8:                                         ; preds = %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit, %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = sdiv <8 x i16> %wide.load, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = sdiv <8 x i16> %wide.load33, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !240

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us

_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !241

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = sdiv i16 %12, 120
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !242

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = sdiv i16 %conv.i.us, 120
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i16
  %18 = sdiv i16 %conv.i, 120
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit

_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !241

for.end8:                                         ; preds = %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit, %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5 = add <8 x i16> %vec.phi33, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !243

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us

_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !244

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.023.us, 2
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !245

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, 16000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, -16000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit

_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !244

for.end8:                                         ; preds = %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit, %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %25, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us
  %1 = phi i32 [ %9, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %wide.load, %vec.phi
  %5 = add <8 x i16> %wide.load33, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !246

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %5, %4
  %7 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us

_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !247

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %10 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.us = add i16 %10, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !248

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %11 to i16
  %mul.i.us = mul i16 %conv.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit
  %12 = phi i32 [ %15, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %13 to i16
  %mul.i = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit

_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !247

for.end8:                                         ; preds = %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit, %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %17
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = and <8 x i16> %wide.load, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = and <8 x i16> %wide.load33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !249

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us

_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !250

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = and i16 %12, 10
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !251

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = and i16 %conv.i.us, 10
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i16
  %18 = and i16 %conv.i, 10
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit

_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !250

for.end8:                                         ; preds = %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit, %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = and <8 x i16> %wide.load, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %5 = and <8 x i16> %wide.load33, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !252

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us

_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !253

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = and i16 %12, 14
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !254

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = and i16 %conv.i.us, 14
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i16
  %18 = and i16 %conv.i, 14
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit

_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !253

for.end8:                                         ; preds = %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit, %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = or <8 x i16> %wide.load, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = or <8 x i16> %wide.load33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !255

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us

_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !256

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = or i16 %12, 10
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !257

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = or i16 %conv.i.us, 10
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i16
  %18 = or i16 %conv.i, 10
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit

_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !256

for.end8:                                         ; preds = %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit, %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi29 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load30 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = or <8 x i16> %wide.load, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %5 = or <8 x i16> %wide.load30, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi29
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !258

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us

_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !259

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = or i16 %12, 63
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !260

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = or i16 %conv.i.us, 63
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.025 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %inc7 = add nuw nsw i32 %i.025, 1
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !259

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %18 = load i64, ptr @start_time, align 8, !tbaa !26
  %19 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %19, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %20 = load i32, ptr @current_test, align 4, !tbaa !9
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %20, %21
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %22 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %add.i = add nsw i32 %22, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %19, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %23 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %23)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %24 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %25 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %18
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %24 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %25, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %25, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %24, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = xor <8 x i16> %wide.load, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = xor <8 x i16> %wide.load33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !261

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us

_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !262

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = xor i16 %12, 10
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !263

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = xor i16 %conv.i.us, 10
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i16
  %18 = xor i16 %conv.i, 10
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit

_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !262

for.end8:                                         ; preds = %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit, %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = xor <8 x i16> %wide.load, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %5 = xor <8 x i16> %wide.load33, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !264

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us

_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !265

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = xor i16 %12, 49
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !266

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %15 = xor i16 %conv.i.us, 49
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i16
  %18 = xor i16 %conv.i, 49
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit

_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !265

for.end8:                                         ; preds = %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit, %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 32767
  %cmp.i.i.us = icmp eq i32 %.mask25, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us

_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !267

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !267

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !268

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !268

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !269

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !269

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, 6
  %cmp.i.i.us = icmp eq i16 %2, -17536
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !270

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !270

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 32767
  %cmp.i.i.us = icmp eq i32 %.mask25, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !271

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !271

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !272

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !272

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !273

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !273

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !274

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !274

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = and i32 %count, 65535
  %cmp.i.i.us = icmp eq i32 %1, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !275

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc7 = add nuw nsw i32 %i.023, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !275

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask25 = and i32 %count, 32767
  %cmp.i.i.us = icmp eq i32 %.mask25, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !276

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc7 = add nuw nsw i32 %i.023, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !276

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, 31
  %cmp.i.i.us = icmp eq i16 %2, -14144
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !277

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !277

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, 29
  %cmp.i.i.us = icmp eq i16 %2, -30144
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us
  %3 = phi i32 [ %5, %_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us

_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %5 = phi i32 [ %.pre, %if.then.i.us ], [ %3, %for.cond1.preheader.us ]
  %inc7.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %5
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !278

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.023 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %6 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %6)
  %inc7 = add nuw nsw i32 %i.023, 1
  %7 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %7
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !278

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %8 = load i64, ptr @start_time, align 8, !tbaa !26
  %9 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %9, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end8
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %10, %11
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %12 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %add.i = add nsw i32 %12, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i15, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %9, i64 noundef %mul.i) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %13)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %14 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %15 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %8
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %14 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %15, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %14, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = add <8 x i16> %vec.phi33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !279

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us

_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !280

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.023.us, 10
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !281

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, 14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, -14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit

_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !280

for.end8:                                         ; preds = %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit, %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %25, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = add <8 x i16> %vec.phi32, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !282

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us

_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !283

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add3.i.us = add i16 %result.022.us, 10
  %add.us = add i16 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !284

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, 14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, -14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit

_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !283

for.end8:                                         ; preds = %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit, %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %5 = add <8 x i16> %vec.phi33, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !285

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us

_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !286

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub.i.us = add i16 %result.023.us, -10
  %add.us = add i16 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !287

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, -14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, 14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit

_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !286

for.end8:                                         ; preds = %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit, %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i15 = sub nsw i64 %call.i14, %21
  %conv.i16 = sitofp i64 %sub.i15 to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %5 = add <8 x i16> %vec.phi32, <i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !288

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us

_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !289

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub3.i.us = add i16 %result.022.us, -10
  %add.us = add i16 %sub3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !290

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, -14464
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, 14464
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit

_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !289

for.end8:                                         ; preds = %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit, %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %wide.load, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = mul <8 x i16> %wide.load34, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !291

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us

_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !292

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul.i14.us = mul i16 %12, 120
  %add.us = add i16 %mul.i14.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !293

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %mul.i.us = mul i16 %conv.i.us, -23040
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %mul.i = mul i16 %conv.i, -23040
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit

_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !292

for.end8:                                         ; preds = %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit, %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %wide.load, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = mul <8 x i16> %wide.load33, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us

_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !295

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul3.i.us = mul i16 %12, 120
  %add.us = add i16 %mul3.i.us, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !296

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %mul.i.us = mul i16 %conv.i.us, -23040
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %mul.i = mul i16 %conv.i, -23040
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit

_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !295

for.end8:                                         ; preds = %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit, %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = add <8 x i16> %vec.phi33, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !297

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us

_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !298

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.023.us, 120
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !299

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, -23040
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, 23040
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit

_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !298

for.end8:                                         ; preds = %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit, %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %25, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = udiv <8 x i16> %wide.load, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5 = udiv <8 x i16> %wide.load33, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !300

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us

_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !301

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = udiv i16 %12, 5
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !302

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = udiv i16 %conv.i.us, 5
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i16
  %18 = udiv i16 %conv.i, 5
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit

_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !301

for.end8:                                         ; preds = %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit, %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = udiv <8 x i16> %wide.load, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %5 = udiv <8 x i16> %wide.load33, <i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !303

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us

_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !304

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = udiv i16 %12, 120
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !305

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = udiv i16 %conv.i.us, 120
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i16
  %18 = udiv i16 %conv.i, 120
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit

_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !304

for.end8:                                         ; preds = %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit, %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5 = add <8 x i16> %vec.phi33, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !306

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us

_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !307

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.023.us, 2
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !308

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %14 = mul i16 %conv.i.us, 8000
  %mul.i.us = add i16 %14, 16000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i16
  %17 = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %17, -16000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit

_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !307

for.end8:                                         ; preds = %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit, %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i16 = add nsw i32 %25, 10
  store i32 %add.i16, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i16 to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us
  %1 = phi i32 [ %9, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %wide.load, %vec.phi
  %5 = add <8 x i16> %wide.load33, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !309

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %5, %4
  %7 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us

_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !310

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %10 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.us = add i16 %10, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !311

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %11 to i16
  %mul.i.us = mul i16 %conv.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit
  %12 = phi i32 [ %15, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %13 to i16
  %mul.i = mul i16 %conv.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit

_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !310

for.end8:                                         ; preds = %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit, %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %17
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = and <8 x i16> %wide.load, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = and <8 x i16> %wide.load33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !312

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us

_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !313

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = and i16 %12, 10
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !314

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = and i16 %conv.i.us, 10
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i16
  %18 = and i16 %conv.i, 10
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit

_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !313

for.end8:                                         ; preds = %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit, %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = and <8 x i16> %wide.load, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %5 = and <8 x i16> %wide.load33, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !315

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us

_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !316

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = and i16 %12, 14
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !317

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = and i16 %conv.i.us, 14
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i16
  %18 = and i16 %conv.i, 14
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit

_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !316

for.end8:                                         ; preds = %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit, %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = or <8 x i16> %wide.load, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = or <8 x i16> %wide.load33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !318

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us

_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !319

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = or i16 %12, 10
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !320

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = or i16 %conv.i.us, 10
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i16
  %18 = or i16 %conv.i, 10
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit

_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !319

for.end8:                                         ; preds = %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit, %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi29 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load30 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = or <8 x i16> %wide.load, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %5 = or <8 x i16> %wide.load30, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi29
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !321

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us

_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !322

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = or i16 %12, 63
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !323

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = or i16 %conv.i.us, 63
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.025 = phi i32 [ %inc7, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %inc7 = add nuw nsw i32 %i.025, 1
  %17 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !322

for.end8:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %18 = load i64, ptr @start_time, align 8, !tbaa !26
  %19 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %19, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %20 = load i32, ptr @current_test, align 4, !tbaa !9
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %20, %21
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %22 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %add.i = add nsw i32 %22, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %19, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %23 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %23)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %24 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %25 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %18
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %24 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %25, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %25, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %24, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = xor <8 x i16> %wide.load, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %5 = xor <8 x i16> %wide.load33, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !324

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us

_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !325

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = xor i16 %12, 10
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !326

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = xor i16 %conv.i.us, 10
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i16
  %18 = xor i16 %conv.i, 10
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit

_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !325

for.end8:                                         ; preds = %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit, %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc7.us, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load33 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = xor <8 x i16> %wide.load, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %5 = xor <8 x i16> %wide.load33, <i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49>
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi32
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us

_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !328

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i16 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %13 = xor i16 %12, 49
  %add.us = add i16 %13, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !329

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %14 to i16
  %15 = xor i16 %conv.i.us, 49
  %mul.i.us = mul i16 %15, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit
  %16 = phi i32 [ %20, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %21, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc7, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i16
  %18 = xor i16 %conv.i, 49
  %mul.i = mul i16 %18, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit

_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %21 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !328

for.end8:                                         ; preds = %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit, %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %22
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask = and i32 %count, 2147483647
  %cmp.i.i.us = icmp eq i32 %.mask, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us

_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !330

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !330

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !331

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !331

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !332

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !332

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = mul i32 %count, 6
  %cmp.i.i.us = icmp eq i32 %1, 48000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !333

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc5 = add nuw nsw i32 %i.020, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !333

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask = and i32 %count, 2147483647
  %cmp.i.i.us = icmp eq i32 %.mask, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !334

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !334

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !335

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !335

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !336

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !336

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !337

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !337

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !338

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !338

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask = and i32 %count, 2147483647
  %cmp.i.i.us = icmp eq i32 %.mask, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !339

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !339

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !340

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !340

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us

_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !341

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !341

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 10, i32 10, i32 10, i32 10>
  %5 = add <4 x i32> %vec.phi31, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !342

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us

_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !343

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.020.us, 10
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !344

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit

_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !343

for.end6:                                         ; preds = %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit, %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 10, i32 10, i32 10, i32 10>
  %5 = add <4 x i32> %vec.phi30, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !345

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us

_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !346

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add3.i.us = add i32 %result.019.us, 10
  %add.us = add i32 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !347

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit

_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !346

for.end6:                                         ; preds = %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit, %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 -10, i32 -10, i32 -10, i32 -10>
  %5 = add <4 x i32> %vec.phi31, <i32 -10, i32 -10, i32 -10, i32 -10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !348

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us

_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !349

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub.i.us = add i32 %result.020.us, -10
  %add.us = add i32 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !350

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, -80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit

_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !349

for.end6:                                         ; preds = %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit, %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %21
  %conv.i14 = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 -10, i32 -10, i32 -10, i32 -10>
  %5 = add <4 x i32> %vec.phi30, <i32 -10, i32 -10, i32 -10, i32 -10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !351

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us

_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !352

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub3.i.us = add i32 %result.019.us, -10
  %add.us = add i32 %sub3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !353

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, -80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit

_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !352

for.end6:                                         ; preds = %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit, %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul nsw <4 x i32> %wide.load, <i32 120, i32 120, i32 120, i32 120>
  %5 = mul nsw <4 x i32> %wide.load32, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !354

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us

_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !355

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul.i12.us = mul nsw i32 %12, 120
  %add.us = add nsw i32 %mul.i12.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !356

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %mul.i.us = mul i32 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %mul.i = mul i32 %conv.i, 960000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit

_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !355

for.end6:                                         ; preds = %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit, %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul <4 x i32> %wide.load, <i32 120, i32 120, i32 120, i32 120>
  %5 = mul <4 x i32> %wide.load31, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !357

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us

_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !358

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul3.i.us = mul i32 %12, 120
  %add.us = add nsw i32 %mul3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !359

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %mul.i.us = mul i32 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %mul.i = mul i32 %conv.i, 960000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit

_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !358

for.end6:                                         ; preds = %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit, %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 120, i32 120, i32 120, i32 120>
  %5 = add <4 x i32> %vec.phi31, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !360

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us

_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !361

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.020.us, 120
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !362

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 960000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -960000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit

_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !361

for.end6:                                         ; preds = %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit, %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = sdiv <4 x i32> %wide.load, <i32 5, i32 5, i32 5, i32 5>
  %5 = sdiv <4 x i32> %wide.load32, <i32 5, i32 5, i32 5, i32 5>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !363

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us

_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !364

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div.i.us = sdiv i32 %12, 5
  %add.us = add nsw i32 %div.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !365

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %div.i.i.us = sdiv i32 %conv.i.us, 5
  %mul.i.us = mul nsw i32 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %conv.i.off = add i32 %conv.i, 4
  %cmp.i.i = icmp ult i32 %conv.i.off, 9
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit

_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !364

for.end6:                                         ; preds = %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit, %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i14 = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i14, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = sdiv <4 x i32> %wide.load, <i32 120, i32 120, i32 120, i32 120>
  %5 = sdiv <4 x i32> %wide.load31, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !366

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us

_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !367

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div3.i.us = sdiv i32 %12, 120
  %add.us = add nsw i32 %div3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !368

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %div3.i.i.us = sdiv i32 %conv.i.us, 120
  %mul.i.us = mul nsw i32 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %conv.i.off = add i32 %conv.i, 119
  %cmp.i.i = icmp ult i32 %conv.i.off, 239
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit

_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !367

for.end6:                                         ; preds = %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit, %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 2, i32 2, i32 2, i32 2>
  %5 = add <4 x i32> %vec.phi31, <i32 2, i32 2, i32 2, i32 2>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !369

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us

_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !370

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.020.us, 2
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !371

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 16000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -16000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit

_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !370

for.end6:                                         ; preds = %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit, %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us
  %1 = phi i32 [ %9, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %wide.load, %vec.phi
  %5 = add <4 x i32> %wide.load31, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !372

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %5, %4
  %7 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us

_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !373

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %10 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.us = add nsw i32 %10, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !374

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %11 to i32
  %mul.i.us = mul nsw i32 %conv.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit
  %12 = phi i32 [ %15, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %13 to i32
  %cmp.i.i = icmp eq i32 %conv.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit

_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !373

for.end6:                                         ; preds = %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit, %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %17
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = and <4 x i32> %wide.load, <i32 10, i32 10, i32 10, i32 10>
  %5 = and <4 x i32> %wide.load31, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !375

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us

_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !376

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %and.i.us = and i32 %12, 10
  %add.us = add nuw nsw i32 %and.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !377

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %and.i.i.us = and i32 %conv.i.us, 10
  %mul.i.us = mul nuw nsw i32 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %and.i.i = and i32 %conv.i, 10
  %cmp.i.i = icmp eq i32 %and.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit

_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !376

for.end6:                                         ; preds = %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit, %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = and <4 x i32> %wide.load, <i32 14, i32 14, i32 14, i32 14>
  %5 = and <4 x i32> %wide.load31, <i32 14, i32 14, i32 14, i32 14>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !378

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us

_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !379

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %and1.i.us = and i32 %12, 14
  %add.us = add nuw nsw i32 %and1.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !380

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %and1.i.i.us = and i32 %conv.i.us, 14
  %mul.i.us = mul nuw nsw i32 %and1.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %and1.i.i = and i32 %conv.i, 14
  %cmp.i.i = icmp eq i32 %and1.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit

_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !379

for.end6:                                         ; preds = %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit, %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi27 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load28 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = or <4 x i32> %wide.load, <i32 10, i32 10, i32 10, i32 10>
  %5 = or <4 x i32> %wide.load28, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi27
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !381

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us

_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !382

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %or.i.us = or i32 %12, 10
  %add.us = add nsw i32 %or.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !383

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %or.i.i.us = or i32 %conv.i.us, 10
  %mul.i.us = mul nsw i32 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.022 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %inc5 = add nuw nsw i32 %i.022, 1
  %15 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !382

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi27 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load28 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = or <4 x i32> %wide.load, <i32 63, i32 63, i32 63, i32 63>
  %5 = or <4 x i32> %wide.load28, <i32 63, i32 63, i32 63, i32 63>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi27
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !384

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us

_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !385

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %or3.i.us = or i32 %12, 63
  %add.us = add nsw i32 %or3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !386

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %or3.i.i.us = or i32 %conv.i.us, 63
  %mul.i.us = mul nsw i32 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.022 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %inc5 = add nuw nsw i32 %i.022, 1
  %15 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !385

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = xor <4 x i32> %wide.load, <i32 10, i32 10, i32 10, i32 10>
  %5 = xor <4 x i32> %wide.load31, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !387

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us

_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !388

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %xor.i.us = xor i32 %12, 10
  %add.us = add nsw i32 %xor.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !389

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %xor.i.i.us = xor i32 %conv.i.us, 10
  %mul.i.us = mul nsw i32 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %cmp.i.i = icmp eq i32 %conv.i, 10
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit

_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !388

for.end6:                                         ; preds = %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit, %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = xor <4 x i32> %wide.load, <i32 49, i32 49, i32 49, i32 49>
  %5 = xor <4 x i32> %wide.load31, <i32 49, i32 49, i32 49, i32 49>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !390

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us

_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !391

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %xor3.i.us = xor i32 %12, 49
  %add.us = add nsw i32 %xor3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !392

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %xor3.i.i.us = xor i32 %conv.i.us, 49
  %mul.i.us = mul nsw i32 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %cmp.i.i = icmp eq i32 %conv.i, 49
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit

_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !391

for.end6:                                         ; preds = %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit, %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask = and i32 %count, 2147483647
  %cmp.i.i.us = icmp eq i32 %.mask, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us

_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !393

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !393

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !394

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !394

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !395

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !395

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %1 = mul i32 %count, 6
  %cmp.i.i.us = icmp eq i32 %1, 48000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !396

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %5 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %5)
  %inc5 = add nuw nsw i32 %i.020, 1
  %6 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %6
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !396

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %7 = load i64, ptr @start_time, align 8, !tbaa !26
  %8 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %8, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %9 = load i32, ptr @current_test, align 4, !tbaa !9
  %10 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %9, %10
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %11 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %add.i = add nsw i32 %11, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %8, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %13 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %14 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %7
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %13 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %14, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask = and i32 %count, 2147483647
  %cmp.i.i.us = icmp eq i32 %.mask, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !397

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !397

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !398

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !398

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !399

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !399

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !400

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !400

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !401

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !401

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %.mask = and i32 %count, 2147483647
  %cmp.i.i.us = icmp eq i32 %.mask, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !402

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !402

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !403

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !403

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us

_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !404

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !404

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 10, i32 10, i32 10, i32 10>
  %5 = add <4 x i32> %vec.phi31, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !405

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us

_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !406

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.020.us, 10
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !407

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit

_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !406

for.end6:                                         ; preds = %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit, %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 10, i32 10, i32 10, i32 10>
  %5 = add <4 x i32> %vec.phi30, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !408

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us

_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !409

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add3.i.us = add i32 %result.019.us, 10
  %add.us = add i32 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !410

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit

_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !409

for.end6:                                         ; preds = %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit, %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 -10, i32 -10, i32 -10, i32 -10>
  %5 = add <4 x i32> %vec.phi31, <i32 -10, i32 -10, i32 -10, i32 -10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !411

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us

_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !412

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub.i.us = add i32 %result.020.us, -10
  %add.us = add i32 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !413

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, -80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit

_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !412

for.end6:                                         ; preds = %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit, %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %21
  %conv.i14 = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 -10, i32 -10, i32 -10, i32 -10>
  %5 = add <4 x i32> %vec.phi30, <i32 -10, i32 -10, i32 -10, i32 -10>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !414

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us

_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !415

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub3.i.us = add i32 %result.019.us, -10
  %add.us = add i32 %sub3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !416

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, -80000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit

_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !415

for.end6:                                         ; preds = %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit, %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul <4 x i32> %wide.load, <i32 120, i32 120, i32 120, i32 120>
  %5 = mul <4 x i32> %wide.load32, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !417

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us

_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !418

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul.i12.us = mul i32 %12, 120
  %add.us = add i32 %mul.i12.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !419

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %mul.i.us = mul i32 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %mul.i = mul i32 %conv.i, 960000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit

_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !418

for.end6:                                         ; preds = %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit, %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul <4 x i32> %wide.load, <i32 120, i32 120, i32 120, i32 120>
  %5 = mul <4 x i32> %wide.load31, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !420

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us

_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !421

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul3.i.us = mul i32 %12, 120
  %add.us = add i32 %mul3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !422

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %mul.i.us = mul i32 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %mul.i = mul i32 %conv.i, 960000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit

_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !421

for.end6:                                         ; preds = %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit, %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 120, i32 120, i32 120, i32 120>
  %5 = add <4 x i32> %vec.phi31, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !423

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us

_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !424

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.020.us, 120
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !425

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 960000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -960000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit

_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !424

for.end6:                                         ; preds = %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit, %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = udiv <4 x i32> %wide.load, <i32 5, i32 5, i32 5, i32 5>
  %5 = udiv <4 x i32> %wide.load32, <i32 5, i32 5, i32 5, i32 5>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !426

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us

_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !427

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div.i.us = udiv i32 %12, 5
  %add.us = add i32 %div.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !428

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %div.i.i.us = udiv i32 %conv.i.us, 5
  %mul.i.us = mul i32 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %div.i.i = udiv i32 %conv.i, 5
  %mul.i = mul i32 %div.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit

_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !427

for.end6:                                         ; preds = %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit, %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i14 = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i14, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = udiv <4 x i32> %wide.load, <i32 120, i32 120, i32 120, i32 120>
  %5 = udiv <4 x i32> %wide.load31, <i32 120, i32 120, i32 120, i32 120>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !429

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us

_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !430

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div3.i.us = udiv i32 %12, 120
  %add.us = add i32 %div3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !431

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %div3.i.i.us = udiv i32 %conv.i.us, 120
  %mul.i.us = mul i32 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %div3.i.i = udiv i32 %conv.i, 120
  %mul.i = mul i32 %div3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit

_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !430

for.end6:                                         ; preds = %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit, %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, <i32 2, i32 2, i32 2, i32 2>
  %5 = add <4 x i32> %vec.phi31, <i32 2, i32 2, i32 2, i32 2>
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !432

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us

_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !433

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.020.us, 2
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !434

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %14 = mul i32 %conv.i.us, 8000
  %mul.i.us = add i32 %14, 16000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i32
  %17 = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %17, -16000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit

_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !433

for.end6:                                         ; preds = %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit, %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us
  %1 = phi i32 [ %9, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %wide.load, %vec.phi
  %5 = add <4 x i32> %wide.load31, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !435

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %5, %4
  %7 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us

_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !436

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %10 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.us = add i32 %10, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !437

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %11 to i32
  %mul.i.us = mul i32 %conv.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit
  %12 = phi i32 [ %15, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %13 to i32
  %mul.i = mul i32 %conv.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit

_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !436

for.end6:                                         ; preds = %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit, %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %17
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = and <4 x i32> %wide.load, <i32 10, i32 10, i32 10, i32 10>
  %5 = and <4 x i32> %wide.load31, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !438

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us

_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !439

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %and.i.us = and i32 %12, 10
  %add.us = add i32 %and.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !440

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %and.i.i.us = and i32 %conv.i.us, 10
  %mul.i.us = mul nuw nsw i32 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %and.i.i = and i32 %conv.i, 10
  %cmp.i.i = icmp eq i32 %and.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit

_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !439

for.end6:                                         ; preds = %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit, %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = and <4 x i32> %wide.load, <i32 14, i32 14, i32 14, i32 14>
  %5 = and <4 x i32> %wide.load31, <i32 14, i32 14, i32 14, i32 14>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !441

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us

_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !442

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %and1.i.us = and i32 %12, 14
  %add.us = add i32 %and1.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !443

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %and1.i.i.us = and i32 %conv.i.us, 14
  %mul.i.us = mul nuw nsw i32 %and1.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %and1.i.i = and i32 %conv.i, 14
  %cmp.i.i = icmp eq i32 %and1.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit

_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !442

for.end6:                                         ; preds = %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit, %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = or <4 x i32> %wide.load, <i32 10, i32 10, i32 10, i32 10>
  %5 = or <4 x i32> %wide.load31, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !444

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us

_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !445

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %or.i.us = or i32 %12, 10
  %add.us = add i32 %or.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !446

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %or.i.i.us = or i32 %conv.i.us, 10
  %mul.i.us = mul i32 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %or.i.i = or i32 %conv.i, 10
  %mul.i = mul i32 %or.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit

_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !445

for.end6:                                         ; preds = %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit, %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi27 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load28 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = or <4 x i32> %wide.load, <i32 63, i32 63, i32 63, i32 63>
  %5 = or <4 x i32> %wide.load28, <i32 63, i32 63, i32 63, i32 63>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi27
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !447

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us

_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !448

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %or3.i.us = or i32 %12, 63
  %add.us = add i32 %or3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !449

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %or3.i.i.us = or i32 %conv.i.us, 63
  %mul.i.us = mul i32 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.022 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %inc5 = add nuw nsw i32 %i.022, 1
  %15 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !448

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = xor <4 x i32> %wide.load, <i32 10, i32 10, i32 10, i32 10>
  %5 = xor <4 x i32> %wide.load31, <i32 10, i32 10, i32 10, i32 10>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !450

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us

_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !451

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %xor.i.us = xor i32 %12, 10
  %add.us = add i32 %xor.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !452

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %xor.i.i.us = xor i32 %conv.i.us, 10
  %mul.i.us = mul i32 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %xor.i.i = xor i32 %conv.i, 10
  %mul.i = mul i32 %xor.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit

_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !451

for.end6:                                         ; preds = %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit, %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load31 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = xor <4 x i32> %wide.load, <i32 49, i32 49, i32 49, i32 49>
  %5 = xor <4 x i32> %wide.load31, <i32 49, i32 49, i32 49, i32 49>
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi30
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !453

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us

_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !454

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i32 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %xor3.i.us = xor i32 %12, 49
  %add.us = add i32 %xor3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !455

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %xor3.i.i.us = xor i32 %conv.i.us, 49
  %mul.i.us = mul i32 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %xor3.i.i = xor i32 %conv.i, 49
  %mul.i = mul i32 %xor3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit

_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !454

for.end6:                                         ; preds = %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit, %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us

_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !456

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !456

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !457

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !457

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !458

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !458

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !459

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !459

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !460

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !460

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !461

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !461

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !462

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !462

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !463

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !463

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !464

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !464

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !465

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !465

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !466

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !466

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us

_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !467

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !467

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 10, i64 10>
  %5 = add <2 x i64> %vec.phi31, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !468

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us

_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !469

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.020.us, 10
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !470

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit

_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !469

for.end6:                                         ; preds = %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit, %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 10, i64 10>
  %5 = add <2 x i64> %vec.phi30, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !471

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us

_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !472

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add3.i.us = add i64 %result.019.us, 10
  %add.us = add i64 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !473

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit

_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !472

for.end6:                                         ; preds = %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit, %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 -10, i64 -10>
  %5 = add <2 x i64> %vec.phi31, <i64 -10, i64 -10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !474

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us

_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !475

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub.i.us = add i64 %result.020.us, -10
  %add.us = add i64 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !476

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, -80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit

_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !475

for.end6:                                         ; preds = %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit, %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %21
  %conv.i14 = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 -10, i64 -10>
  %5 = add <2 x i64> %vec.phi30, <i64 -10, i64 -10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !477

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us

_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !478

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub3.i.us = add i64 %result.019.us, -10
  %add.us = add i64 %sub3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !479

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, -80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit

_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !478

for.end6:                                         ; preds = %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit, %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us

_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !480

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul.i12.us = mul nsw i64 %5, 120
  %add.us = add nsw i64 %mul.i12.us, %result.020.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul.i12.us.1 = mul nsw i64 %6, 120
  %add.us.1 = add nsw i64 %mul.i12.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul.i12.us.2 = mul nsw i64 %7, 120
  %add.us.2 = add nsw i64 %mul.i12.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul.i12.us.3 = mul nsw i64 %8, 120
  %add.us.3 = add nsw i64 %mul.i12.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !481

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul.i12.us.epil = mul nsw i64 %9, 120
  %add.us.epil = add nsw i64 %mul.i12.us.epil, %result.020.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !482

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %10 to i64
  %mul.i.us = mul i64 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit
  %11 = phi i32 [ %14, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %12 to i64
  %mul.i = mul i64 %conv.i, 960000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit

_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !480

for.end6:                                         ; preds = %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit, %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %16
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us

_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !483

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul3.i.us = mul i64 %5, 120
  %add.us = add nsw i64 %mul3.i.us, %result.019.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul3.i.us.1 = mul i64 %6, 120
  %add.us.1 = add nsw i64 %mul3.i.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul3.i.us.2 = mul i64 %7, 120
  %add.us.2 = add nsw i64 %mul3.i.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul3.i.us.3 = mul i64 %8, 120
  %add.us.3 = add nsw i64 %mul3.i.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !484

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul3.i.us.epil = mul i64 %9, 120
  %add.us.epil = add nsw i64 %mul3.i.us.epil, %result.019.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !485

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %10 to i64
  %mul.i.us = mul i64 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit
  %11 = phi i32 [ %14, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %12 to i64
  %mul.i = mul i64 %conv.i, 960000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit

_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !483

for.end6:                                         ; preds = %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit, %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 120, i64 120>
  %5 = add <2 x i64> %vec.phi31, <i64 120, i64 120>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !486

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us

_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !487

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.020.us, 120
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !488

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 960000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -960000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit

_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !487

for.end6:                                         ; preds = %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit, %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us

_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !489

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi i64 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div.i.us = sdiv i64 %5, 5
  %add.us = add nsw i64 %div.i.us, %result.020.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %div.i.us.1 = sdiv i64 %6, 5
  %add.us.1 = add nsw i64 %div.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !490

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.020.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.unr
  %7 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %div.i.us.epil = sdiv i64 %7, 5
  %add.us.epil = add nsw i64 %div.i.us.epil, %result.020.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %8 to i64
  %div.i.i.us = sdiv i64 %conv.i.us, 5
  %mul.i.us = mul nsw i64 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit
  %9 = phi i32 [ %12, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %10 to i64
  %conv.i.off = add i64 %conv.i, 4
  %cmp.i.i = icmp ult i64 %conv.i.off, 9
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit

_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !489

for.end6:                                         ; preds = %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit, %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %14
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i14 = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i14, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us

_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !491

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi i64 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div3.i.us = sdiv i64 %5, 120
  %add.us = add nsw i64 %div3.i.us, %result.019.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %div3.i.us.1 = sdiv i64 %6, 120
  %add.us.1 = add nsw i64 %div3.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !492

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.019.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.unr
  %7 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %div3.i.us.epil = sdiv i64 %7, 120
  %add.us.epil = add nsw i64 %div3.i.us.epil, %result.019.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %8 to i64
  %div3.i.i.us = sdiv i64 %conv.i.us, 120
  %mul.i.us = mul nsw i64 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit
  %9 = phi i32 [ %12, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %10 to i64
  %conv.i.off = add i64 %conv.i, 119
  %cmp.i.i = icmp ult i64 %conv.i.off, 239
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit

_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !491

for.end6:                                         ; preds = %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit, %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %14
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 2, i64 2>
  %5 = add <2 x i64> %vec.phi31, <i64 2, i64 2>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !493

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us

_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !494

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.020.us, 2
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !495

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 16000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -16000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit

_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !494

for.end6:                                         ; preds = %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit, %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us
  %1 = phi i32 [ %9, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %wide.load, %vec.phi
  %5 = add <2 x i64> %wide.load31, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !496

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %5, %4
  %7 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us

_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !497

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %10 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.us = add nsw i64 %10, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !498

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %11 to i64
  %mul.i.us = mul nsw i64 %conv.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit
  %12 = phi i32 [ %15, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %13 to i64
  %cmp.i.i = icmp eq i64 %conv.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit

_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !497

for.end6:                                         ; preds = %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit, %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %17
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = and <2 x i64> %wide.load, <i64 10, i64 10>
  %5 = and <2 x i64> %wide.load31, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !499

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us

_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !500

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %and.i.us = and i64 %12, 10
  %add.us = add nuw nsw i64 %and.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !501

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %and.i.i.us = and i64 %conv.i.us, 10
  %mul.i.us = mul nuw nsw i64 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %and.i.i = and i64 %conv.i, 10
  %cmp.i.i = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit

_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !500

for.end6:                                         ; preds = %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit, %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = and <2 x i64> %wide.load, <i64 14, i64 14>
  %5 = and <2 x i64> %wide.load31, <i64 14, i64 14>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !502

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us

_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !503

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %and1.i.us = and i64 %12, 14
  %add.us = add nuw nsw i64 %and1.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !504

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %and1.i.i.us = and i64 %conv.i.us, 14
  %mul.i.us = mul nuw nsw i64 %and1.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %and1.i.i = and i64 %conv.i, 14
  %cmp.i.i = icmp eq i64 %and1.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit

_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !503

for.end6:                                         ; preds = %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit, %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi27 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load28 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = or <2 x i64> %wide.load, <i64 10, i64 10>
  %5 = or <2 x i64> %wide.load28, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi27
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !505

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us

_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !506

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %or.i.us = or i64 %12, 10
  %add.us = add nsw i64 %or.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !507

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %or.i.i.us = or i64 %conv.i.us, 10
  %mul.i.us = mul nsw i64 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.022 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %inc5 = add nuw nsw i32 %i.022, 1
  %15 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !506

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi27 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load28 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = or <2 x i64> %wide.load, <i64 63, i64 63>
  %5 = or <2 x i64> %wide.load28, <i64 63, i64 63>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi27
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !508

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us

_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !509

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %or3.i.us = or i64 %12, 63
  %add.us = add nsw i64 %or3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !510

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %or3.i.i.us = or i64 %conv.i.us, 63
  %mul.i.us = mul nsw i64 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.022 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %inc5 = add nuw nsw i32 %i.022, 1
  %15 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !509

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = xor <2 x i64> %wide.load, <i64 10, i64 10>
  %5 = xor <2 x i64> %wide.load31, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !511

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us

_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !512

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %xor.i.us = xor i64 %12, 10
  %add.us = add nsw i64 %xor.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !513

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %xor.i.i.us = xor i64 %conv.i.us, 10
  %mul.i.us = mul nsw i64 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %cmp.i.i = icmp eq i64 %conv.i, 10
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit

_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !512

for.end6:                                         ; preds = %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit, %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = xor <2 x i64> %wide.load, <i64 49, i64 49>
  %5 = xor <2 x i64> %wide.load31, <i64 49, i64 49>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !514

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us

_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !515

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %xor3.i.us = xor i64 %12, 49
  %add.us = add nsw i64 %xor3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !516

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %xor3.i.i.us = xor i64 %conv.i.us, 49
  %mul.i.us = mul nsw i64 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %cmp.i.i = icmp eq i64 %conv.i, 49
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit

_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !515

for.end6:                                         ; preds = %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit, %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us

_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !517

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !517

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !518

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !518

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !519

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !519

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !520

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !520

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !521

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !521

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !522

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !522

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !523

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !523

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !524

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !524

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !525

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !525

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %1, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %entry
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %entry
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %3 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %2, %3
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %4 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %3, %lor.lhs.false.i ]
  %add.i = add nsw i32 %4, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %1, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %6 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %2, %lor.lhs.false.i ]
  %7 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %1, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %0
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %6 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %7, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %6, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !526

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !526

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !527

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !527

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %cmp.i.i.us = icmp eq i32 %count, 8000
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us
  %1 = phi i32 [ %3, %_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us, label %if.then.i.us

if.then.i.us:                                     ; preds = %for.cond1.preheader.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %2)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us

_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.preheader.us
  %3 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.preheader.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !528

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %4 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %4)
  %inc5 = add nuw nsw i32 %i.020, 1
  %5 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !528

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %6 = load i64, ptr @start_time, align 8, !tbaa !26
  %7 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %7, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %8, %9
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %10 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %9, %lor.lhs.false.i ]
  %add.i = add nsw i32 %10, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %7, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %11 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %11)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %12 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %8, %lor.lhs.false.i ]
  %13 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %7, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %6
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %12 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %13, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %12, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 10, i64 10>
  %5 = add <2 x i64> %vec.phi31, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !529

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us

_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !530

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.020.us, 10
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !531

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit

_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !530

for.end6:                                         ; preds = %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit, %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 10, i64 10>
  %5 = add <2 x i64> %vec.phi30, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !532

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us

_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !533

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add3.i.us = add i64 %result.019.us, 10
  %add.us = add i64 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !534

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit

_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !533

for.end6:                                         ; preds = %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit, %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 -10, i64 -10>
  %5 = add <2 x i64> %vec.phi31, <i64 -10, i64 -10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !535

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us

_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !536

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub.i.us = add i64 %result.020.us, -10
  %add.us = add i64 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !537

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, -80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit

_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !536

for.end6:                                         ; preds = %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit, %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %21
  %conv.i14 = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 -10, i64 -10>
  %5 = add <2 x i64> %vec.phi30, <i64 -10, i64 -10>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !538

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us

_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !539

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub3.i.us = add i64 %result.019.us, -10
  %add.us = add i64 %sub3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !540

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, -80000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, 80000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit

_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !539

for.end6:                                         ; preds = %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit, %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us

_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !541

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul.i12.us = mul i64 %5, 120
  %add.us = add i64 %mul.i12.us, %result.020.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul.i12.us.1 = mul i64 %6, 120
  %add.us.1 = add i64 %mul.i12.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul.i12.us.2 = mul i64 %7, 120
  %add.us.2 = add i64 %mul.i12.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul.i12.us.3 = mul i64 %8, 120
  %add.us.3 = add i64 %mul.i12.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !542

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul.i12.us.epil = mul i64 %9, 120
  %add.us.epil = add i64 %mul.i12.us.epil, %result.020.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !543

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %10 to i64
  %mul.i.us = mul i64 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit
  %11 = phi i32 [ %14, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %12 to i64
  %mul.i = mul i64 %conv.i, 960000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit

_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !541

for.end6:                                         ; preds = %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit, %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %16
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us

_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !544

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul3.i.us = mul i64 %5, 120
  %add.us = add i64 %mul3.i.us, %result.019.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul3.i.us.1 = mul i64 %6, 120
  %add.us.1 = add i64 %mul3.i.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul3.i.us.2 = mul i64 %7, 120
  %add.us.2 = add i64 %mul3.i.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul3.i.us.3 = mul i64 %8, 120
  %add.us.3 = add i64 %mul3.i.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !545

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul3.i.us.epil = mul i64 %9, 120
  %add.us.epil = add i64 %mul3.i.us.epil, %result.019.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !546

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %10 to i64
  %mul.i.us = mul i64 %conv.i.us, 960000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit
  %11 = phi i32 [ %14, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %12 to i64
  %mul.i = mul i64 %conv.i, 960000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit

_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !544

for.end6:                                         ; preds = %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit, %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 120, i64 120>
  %5 = add <2 x i64> %vec.phi31, <i64 120, i64 120>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !547

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us

_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !548

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.020.us, 120
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !549

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 960000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -960000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit

_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !548

for.end6:                                         ; preds = %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit, %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us

_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !550

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi i64 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div.i.us = udiv i64 %5, 5
  %add.us = add i64 %div.i.us, %result.020.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %div.i.us.1 = udiv i64 %6, 5
  %add.us.1 = add i64 %div.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !551

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.020.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.unr
  %7 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %div.i.us.epil = udiv i64 %7, 5
  %add.us.epil = add i64 %div.i.us.epil, %result.020.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %8 to i64
  %div.i.i.us = udiv i64 %conv.i.us, 5
  %mul.i.us = mul i64 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit
  %9 = phi i32 [ %12, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %10 to i64
  %div.i.i = udiv i64 %conv.i, 5
  %mul.i = mul i64 %div.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit

_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !550

for.end6:                                         ; preds = %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit, %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %14
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i14 = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i14, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us

_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !552

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi i64 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div3.i.us = udiv i64 %5, 120
  %add.us = add i64 %div3.i.us, %result.019.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %div3.i.us.1 = udiv i64 %6, 120
  %add.us.1 = add i64 %div3.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !553

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.019.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.unr
  %7 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %div3.i.us.epil = udiv i64 %7, 120
  %add.us.epil = add i64 %div3.i.us.epil, %result.019.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %8 to i64
  %div3.i.i.us = udiv i64 %conv.i.us, 120
  %mul.i.us = mul i64 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit
  %9 = phi i32 [ %12, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %10 to i64
  %div3.i.i = udiv i64 %conv.i, 120
  %mul.i = mul i64 %div3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit

_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !552

for.end6:                                         ; preds = %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit, %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %14
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, <i64 2, i64 2>
  %5 = add <2 x i64> %vec.phi31, <i64 2, i64 2>
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load32
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !554

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us

_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !555

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.020.us, 2
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !556

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %14 = mul i64 %conv.i.us, 8000
  %mul.i.us = add i64 %14, 16000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit
  %15 = phi i32 [ %19, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %20, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %16 to i64
  %17 = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %17, -16000
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit

_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !555

for.end6:                                         ; preds = %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit, %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us
  %1 = phi i32 [ %9, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %wide.load, %vec.phi
  %5 = add <2 x i64> %wide.load31, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !557

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %5, %4
  %7 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us

_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !558

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %10 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.us = add i64 %10, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !559

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %11 to i64
  %mul.i.us = mul i64 %conv.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit
  %12 = phi i32 [ %15, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %13 to i64
  %mul.i = mul i64 %conv.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit

_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !558

for.end6:                                         ; preds = %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit, %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %17
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = and <2 x i64> %wide.load, <i64 10, i64 10>
  %5 = and <2 x i64> %wide.load31, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !560

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us

_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !561

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %and.i.us = and i64 %12, 10
  %add.us = add i64 %and.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !562

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %and.i.i.us = and i64 %conv.i.us, 10
  %mul.i.us = mul nuw nsw i64 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %and.i.i = and i64 %conv.i, 10
  %cmp.i.i = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit

_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !561

for.end6:                                         ; preds = %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit, %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = and <2 x i64> %wide.load, <i64 14, i64 14>
  %5 = and <2 x i64> %wide.load31, <i64 14, i64 14>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !563

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us

_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !564

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %and1.i.us = and i64 %12, 14
  %add.us = add i64 %and1.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !565

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %and1.i.i.us = and i64 %conv.i.us, 14
  %mul.i.us = mul nuw nsw i64 %and1.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %and1.i.i = and i64 %conv.i, 14
  %cmp.i.i = icmp eq i64 %and1.i.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit

_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !564

for.end6:                                         ; preds = %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit, %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = or <2 x i64> %wide.load, <i64 10, i64 10>
  %5 = or <2 x i64> %wide.load31, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !566

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us

_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !567

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %or.i.us = or i64 %12, 10
  %add.us = add i64 %or.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !568

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %or.i.i.us = or i64 %conv.i.us, 10
  %mul.i.us = mul i64 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %or.i.i = or i64 %conv.i, 10
  %mul.i = mul i64 %or.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit

_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !567

for.end6:                                         ; preds = %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit, %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi27 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load28 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = or <2 x i64> %wide.load, <i64 63, i64 63>
  %5 = or <2 x i64> %wide.load28, <i64 63, i64 63>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi27
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !569

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us

_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !570

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %or3.i.us = or i64 %12, 63
  %add.us = add i64 %or3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !571

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %or3.i.i.us = or i64 %conv.i.us, 63
  %mul.i.us = mul i64 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.022 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %inc5 = add nuw nsw i32 %i.022, 1
  %15 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !570

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %16
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = xor <2 x i64> %wide.load, <i64 10, i64 10>
  %5 = xor <2 x i64> %wide.load31, <i64 10, i64 10>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !572

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us

_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !573

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %xor.i.us = xor i64 %12, 10
  %add.us = add i64 %xor.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !574

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %xor.i.i.us = xor i64 %conv.i.us, 10
  %mul.i.us = mul i64 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %xor.i.i = xor i64 %conv.i, 10
  %mul.i = mul i64 %xor.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit

_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !573

for.end6:                                         ; preds = %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit, %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us
  %1 = phi i32 [ %11, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi30 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load31 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = xor <2 x i64> %wide.load, <i64 49, i64 49>
  %5 = xor <2 x i64> %wide.load31, <i64 49, i64 49>
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi30
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !575

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.019.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %10)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us

_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre27, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !576

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.019.us = phi i64 [ %add.us, %for.body3.us ], [ %result.019.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %xor3.i.us = xor i64 %12, 49
  %add.us = add i64 %xor3.i.us, %result.019.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !577

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %xor3.i.i.us = xor i64 %conv.i.us, 49
  %mul.i.us = mul i64 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit
  %14 = phi i32 [ %17, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %xor3.i.i = xor i64 %conv.i, 49
  %mul.i = mul i64 %xor3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit

_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !576

for.end6:                                         ; preds = %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit, %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us

_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !578

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi float [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd float %result.017.us, 2.000000e+00
  %add.us.1 = fadd float %add.us, 2.000000e+00
  %add.us.2 = fadd float %add.us.1, 2.000000e+00
  %add.us.3 = fadd float %add.us.2, 2.000000e+00
  %add.us.4 = fadd float %add.us.3, 2.000000e+00
  %add.us.5 = fadd float %add.us.4, 2.000000e+00
  %add.us.6 = fadd float %add.us.5, 2.000000e+00
  %add.us.7 = fadd float %add.us.6, 2.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !579

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd float %result.017.us.epil, 2.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !580

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd float %add.us.lcssa, -1.600000e+04
  %5 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %5 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %6 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %7 = fpext float %6 to double
  %cmp3.i.i.us = fcmp olt double %7, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %inc5 = add nuw nsw i32 %i.020, 1
  %9 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !578

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %10 = load i64, ptr @start_time, align 8, !tbaa !26
  %11 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %11, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %12, %13
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %14 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %add.i = add nsw i32 %14, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %11, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %15 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %15)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %16 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %17 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %10
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %16 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %16, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us

_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !581

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi float [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd float %result.017.us, 3.000000e+00
  %add.us.1 = fadd float %add.us, 3.000000e+00
  %add.us.2 = fadd float %add.us.1, 3.000000e+00
  %add.us.3 = fadd float %add.us.2, 3.000000e+00
  %add.us.4 = fadd float %add.us.3, 3.000000e+00
  %add.us.5 = fadd float %add.us.4, 3.000000e+00
  %add.us.6 = fadd float %add.us.5, 3.000000e+00
  %add.us.7 = fadd float %add.us.6, 3.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !582

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd float %result.017.us.epil, 3.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !583

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd float %add.us.lcssa, -2.400000e+04
  %5 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %5 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %6 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %7 = fpext float %6 to double
  %cmp3.i.i.us = fcmp olt double %7, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %inc5 = add nuw nsw i32 %i.020, 1
  %9 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !581

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %10 = load i64, ptr @start_time, align 8, !tbaa !26
  %11 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %11, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %12, %13
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %14 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %add.i = add nsw i32 %14, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %11, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %15 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %15)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %16 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %17 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %10
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %16 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %16, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us

_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !584

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi float [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd float %result.017.us, 1.000000e+00
  %add.us.1 = fadd float %add.us, 1.000000e+00
  %add.us.2 = fadd float %add.us.1, 1.000000e+00
  %add.us.3 = fadd float %add.us.2, 1.000000e+00
  %add.us.4 = fadd float %add.us.3, 1.000000e+00
  %add.us.5 = fadd float %add.us.4, 1.000000e+00
  %add.us.6 = fadd float %add.us.5, 1.000000e+00
  %add.us.7 = fadd float %add.us.6, 1.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !585

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd float %result.017.us.epil, 1.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !586

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd float %add.us.lcssa, -8.000000e+03
  %5 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %5 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %6 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %7 = fpext float %6 to double
  %cmp3.i.i.us = fcmp olt double %7, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %inc5 = add nuw nsw i32 %i.020, 1
  %9 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !584

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %10 = load i64, ptr @start_time, align 8, !tbaa !26
  %11 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %11, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %12, %13
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %14 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %add.i = add nsw i32 %14, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %11, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %15 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %15)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %16 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %17 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %10
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %16 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %16, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us

_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !587

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi float [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd float %result.017.us, 6.000000e+00
  %add.us.1 = fadd float %add.us, 6.000000e+00
  %add.us.2 = fadd float %add.us.1, 6.000000e+00
  %add.us.3 = fadd float %add.us.2, 6.000000e+00
  %add.us.4 = fadd float %add.us.3, 6.000000e+00
  %add.us.5 = fadd float %add.us.4, 6.000000e+00
  %add.us.6 = fadd float %add.us.5, 6.000000e+00
  %add.us.7 = fadd float %add.us.6, 6.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !588

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd float %result.017.us.epil, 6.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !589

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd float %add.us.lcssa, -4.800000e+04
  %5 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %5 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %6 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %7 = fpext float %6 to double
  %cmp3.i.i.us = fcmp olt double %7, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %inc5 = add nuw nsw i32 %i.020, 1
  %9 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !587

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %10 = load i64, ptr @start_time, align 8, !tbaa !26
  %11 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %11, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %12, %13
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %14 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %add.i = add nsw i32 %14, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %11, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %15 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %15)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %16 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %17 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %10
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %16 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %16, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us

_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !590

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi float [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd float %result.017.us, 2.000000e+00
  %add.us.1 = fadd float %add.us, 2.000000e+00
  %add.us.2 = fadd float %add.us.1, 2.000000e+00
  %add.us.3 = fadd float %add.us.2, 2.000000e+00
  %add.us.4 = fadd float %add.us.3, 2.000000e+00
  %add.us.5 = fadd float %add.us.4, 2.000000e+00
  %add.us.6 = fadd float %add.us.5, 2.000000e+00
  %add.us.7 = fadd float %add.us.6, 2.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !591

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd float %result.017.us.epil, 2.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !592

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd float %add.us.lcssa, -1.600000e+04
  %5 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %5 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %6 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %7 = fpext float %6 to double
  %cmp3.i.i.us = fcmp olt double %7, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %8)
  %inc5 = add nuw nsw i32 %i.020, 1
  %9 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !590

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %10 = load i64, ptr @start_time, align 8, !tbaa !26
  %11 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %11, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %12, %13
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %14 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %add.i = add nsw i32 %14, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %11, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %15 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %15)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %16 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %17 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %10
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %16 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %17, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %16, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us

_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !593

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, 1.000000e+01
  %add.us = fadd float %result.020.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, 1.000000e+01
  %add.us.1 = fadd float %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.i.us.2 = fadd float %7, 1.000000e+01
  %add.us.2 = fadd float %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.i.us.3 = fadd float %8, 1.000000e+01
  %add.us.3 = fadd float %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !594

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %9, 1.000000e+01
  %add.us.epil = fadd float %result.020.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !595

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %add.i.i.us = fadd float %conv.i.us, 1.000000e+01
  %mul.i.us = fmul float %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit
  %14 = phi i32 [ %19, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %add.i.i = fadd float %conv.i, 1.000000e+01
  %mul.i = fmul float %add.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit

_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !593

for.end6:                                         ; preds = %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit, %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us

_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !596

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, 1.000000e+00
  %add1.i.us = fadd float %add.i.us, 2.000000e+00
  %add2.i.us = fadd float %add1.i.us, 3.000000e+00
  %add3.i.us = fadd float %add2.i.us, 4.000000e+00
  %add.us = fadd float %result.020.us, %add3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, 1.000000e+00
  %add1.i.us.1 = fadd float %add.i.us.1, 2.000000e+00
  %add2.i.us.1 = fadd float %add1.i.us.1, 3.000000e+00
  %add3.i.us.1 = fadd float %add2.i.us.1, 4.000000e+00
  %add.us.1 = fadd float %add.us, %add3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !597

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %7, 1.000000e+00
  %add1.i.us.epil = fadd float %add.i.us.epil, 2.000000e+00
  %add2.i.us.epil = fadd float %add1.i.us.epil, 3.000000e+00
  %add3.i.us.epil = fadd float %add2.i.us.epil, 4.000000e+00
  %add.us.epil = fadd float %result.020.us.unr, %add3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %add.i.i.us = fadd float %conv.i.us, 1.000000e+00
  %add1.i.i.us = fadd float %add.i.i.us, 2.000000e+00
  %add2.i.i.us = fadd float %add1.i.i.us, 3.000000e+00
  %add3.i.i.us = fadd float %add2.i.i.us, 4.000000e+00
  %mul.i.us = fmul float %add3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit
  %12 = phi i32 [ %17, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %add.i.i = fadd float %conv.i, 1.000000e+00
  %add1.i.i = fadd float %add.i.i, 2.000000e+00
  %add2.i.i = fadd float %add1.i.i, 3.000000e+00
  %add3.i.i = fadd float %add2.i.i, 4.000000e+00
  %mul.i = fmul float %add3.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit

_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !596

for.end6:                                         ; preds = %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit, %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %23, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us

_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !598

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %sub.i.us = fadd float %5, -1.000000e+01
  %add.us = fadd float %result.020.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %sub.i.us.1 = fadd float %6, -1.000000e+01
  %add.us.1 = fadd float %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %sub.i.us.2 = fadd float %7, -1.000000e+01
  %add.us.2 = fadd float %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %sub.i.us.3 = fadd float %8, -1.000000e+01
  %add.us.3 = fadd float %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !599

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %sub.i.us.epil = fadd float %9, -1.000000e+01
  %add.us.epil = fadd float %result.020.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !600

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %sub.i.i.us = fadd float %conv.i.us, -1.000000e+01
  %mul.i.us = fmul float %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i3.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit
  %14 = phi i32 [ %19, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %sub.i.i = fadd float %conv.i, -1.000000e+01
  %mul.i = fmul float %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i3.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit

_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !598

for.end6:                                         ; preds = %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit, %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %21
  %conv.i14 = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us

_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !601

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %sub.i.us = fadd float %5, -1.000000e+00
  %sub1.i.us = fadd float %sub.i.us, -2.000000e+00
  %sub2.i.us = fadd float %sub1.i.us, -3.000000e+00
  %sub3.i.us = fadd float %sub2.i.us, -4.000000e+00
  %add.us = fadd float %result.020.us, %sub3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %sub.i.us.1 = fadd float %6, -1.000000e+00
  %sub1.i.us.1 = fadd float %sub.i.us.1, -2.000000e+00
  %sub2.i.us.1 = fadd float %sub1.i.us.1, -3.000000e+00
  %sub3.i.us.1 = fadd float %sub2.i.us.1, -4.000000e+00
  %add.us.1 = fadd float %add.us, %sub3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !602

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %sub.i.us.epil = fadd float %7, -1.000000e+00
  %sub1.i.us.epil = fadd float %sub.i.us.epil, -2.000000e+00
  %sub2.i.us.epil = fadd float %sub1.i.us.epil, -3.000000e+00
  %sub3.i.us.epil = fadd float %sub2.i.us.epil, -4.000000e+00
  %add.us.epil = fadd float %result.020.us.unr, %sub3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %sub.i.i.us = fadd float %conv.i.us, -1.000000e+00
  %sub1.i.i.us = fadd float %sub.i.i.us, -2.000000e+00
  %sub2.i.i.us = fadd float %sub1.i.i.us, -3.000000e+00
  %sub3.i.i.us = fadd float %sub2.i.i.us, -4.000000e+00
  %mul.i.us = fmul float %sub3.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i3.i.us, %div.i.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit
  %12 = phi i32 [ %17, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %sub.i.i = fadd float %conv.i, -1.000000e+00
  %sub1.i.i = fadd float %sub.i.i, -2.000000e+00
  %sub2.i.i = fadd float %sub1.i.i, -3.000000e+00
  %sub3.i.i = fadd float %sub2.i.i, -4.000000e+00
  %mul.i = fmul float %sub3.i.i, 8.000000e+03
  %sub.i3.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i3.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit

_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !601

for.end6:                                         ; preds = %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit, %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %19
  %conv.i14 = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us

_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !603

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %mul.i12.us = fmul float %5, 1.200000e+02
  %add.us = fadd float %result.020.us, %mul.i12.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %mul.i12.us.1 = fmul float %6, 1.200000e+02
  %add.us.1 = fadd float %add.us, %mul.i12.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %mul.i12.us.2 = fmul float %7, 1.200000e+02
  %add.us.2 = fadd float %add.us.1, %mul.i12.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %mul.i12.us.3 = fmul float %8, 1.200000e+02
  %add.us.3 = fadd float %add.us.2, %mul.i12.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !604

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %mul.i12.us.epil = fmul float %9, 1.200000e+02
  %add.us.epil = fadd float %result.020.us.epil, %mul.i12.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !605

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %mul.i.i.us = fmul float %conv.i.us, 1.200000e+02
  %mul.i.us = fmul float %mul.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit
  %14 = phi i32 [ %19, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %mul.i.i = fmul float %conv.i, 1.200000e+02
  %mul.i = fmul float %mul.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit

_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !603

for.end6:                                         ; preds = %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit, %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %21
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us

_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !606

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %mul.i12.us = fmul float %5, 2.000000e+00
  %mul1.i.us = fmul float %mul.i12.us, 3.000000e+00
  %mul2.i.us = fmul float %mul1.i.us, 4.000000e+00
  %mul3.i.us = fmul float %mul2.i.us, 5.000000e+00
  %add.us = fadd float %result.020.us, %mul3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %mul.i12.us.1 = fmul float %6, 2.000000e+00
  %mul1.i.us.1 = fmul float %mul.i12.us.1, 3.000000e+00
  %mul2.i.us.1 = fmul float %mul1.i.us.1, 4.000000e+00
  %mul3.i.us.1 = fmul float %mul2.i.us.1, 5.000000e+00
  %add.us.1 = fadd float %add.us, %mul3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !607

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %mul.i12.us.epil = fmul float %7, 2.000000e+00
  %mul1.i.us.epil = fmul float %mul.i12.us.epil, 3.000000e+00
  %mul2.i.us.epil = fmul float %mul1.i.us.epil, 4.000000e+00
  %mul3.i.us.epil = fmul float %mul2.i.us.epil, 5.000000e+00
  %add.us.epil = fadd float %result.020.us.unr, %mul3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %mul.i.i.us = fmul float %conv.i.us, 2.000000e+00
  %mul1.i.i.us = fmul float %mul.i.i.us, 3.000000e+00
  %mul2.i.i.us = fmul float %mul1.i.i.us, 4.000000e+00
  %mul3.i.i.us = fmul float %mul2.i.i.us, 5.000000e+00
  %mul.i.us = fmul float %mul3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit
  %12 = phi i32 [ %17, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %mul.i.i = fmul float %conv.i, 2.000000e+00
  %mul1.i.i = fmul float %mul.i.i, 3.000000e+00
  %mul2.i.i = fmul float %mul1.i.i, 4.000000e+00
  %mul3.i.i = fmul float %mul2.i.i, 5.000000e+00
  %mul.i = fmul float %mul3.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit

_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !606

for.end6:                                         ; preds = %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit, %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us

_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !608

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, 1.200000e+02
  %add.us = fadd float %result.020.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, 1.200000e+02
  %add.us.1 = fadd float %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.i.us.2 = fadd float %7, 1.200000e+02
  %add.us.2 = fadd float %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.i.us.3 = fadd float %8, 1.200000e+02
  %add.us.3 = fadd float %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !609

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %9, 1.200000e+02
  %add.us.epil = fadd float %result.020.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !610

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %add.i.i.us = fadd float %conv.i.us, 1.200000e+02
  %mul.i.us = fmul float %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit
  %14 = phi i32 [ %19, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %add.i.i = fadd float %conv.i, 1.200000e+02
  %mul.i = fmul float %add.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit

_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !608

for.end6:                                         ; preds = %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit, %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us

_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !611

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %div.i.us = fdiv float %5, 5.000000e+00
  %add.us = fadd float %result.020.us, %div.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %div.i.us.1 = fdiv float %6, 5.000000e+00
  %add.us.1 = fadd float %add.us, %div.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %div.i.us.2 = fdiv float %7, 5.000000e+00
  %add.us.2 = fadd float %add.us.1, %div.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %div.i.us.3 = fdiv float %8, 5.000000e+00
  %add.us.3 = fadd float %add.us.2, %div.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !612

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %div.i.us.epil = fdiv float %9, 5.000000e+00
  %add.us.epil = fadd float %result.020.us.epil, %div.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !613

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %div.i.i.us = fdiv float %conv.i.us, 5.000000e+00
  %mul.i.us = fmul float %div.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i3.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i3.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit
  %14 = phi i32 [ %19, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %div.i.i = fdiv float %conv.i, 5.000000e+00
  %mul.i = fmul float %div.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit

_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !611

for.end6:                                         ; preds = %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit, %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i14 = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i14, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us

_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !614

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %div.i.us = fmul float %5, 5.000000e-01
  %div1.i.us = fdiv float %div.i.us, 3.000000e+00
  %div2.i.us = fmul float %div1.i.us, 2.500000e-01
  %div3.i.us = fdiv float %div2.i.us, 5.000000e+00
  %add.us = fadd float %result.020.us, %div3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %div.i.us.1 = fmul float %6, 5.000000e-01
  %div1.i.us.1 = fdiv float %div.i.us.1, 3.000000e+00
  %div2.i.us.1 = fmul float %div1.i.us.1, 2.500000e-01
  %div3.i.us.1 = fdiv float %div2.i.us.1, 5.000000e+00
  %add.us.1 = fadd float %add.us, %div3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !615

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %div.i.us.epil = fmul float %7, 5.000000e-01
  %div1.i.us.epil = fdiv float %div.i.us.epil, 3.000000e+00
  %div2.i.us.epil = fmul float %div1.i.us.epil, 2.500000e-01
  %div3.i.us.epil = fdiv float %div2.i.us.epil, 5.000000e+00
  %add.us.epil = fadd float %result.020.us.unr, %div3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %div.i.i.us = fmul float %conv.i.us, 5.000000e-01
  %div1.i.i.us = fdiv float %div.i.i.us, 3.000000e+00
  %div2.i.i.us = fmul float %div1.i.i.us, 2.500000e-01
  %div3.i.i.us = fdiv float %div2.i.i.us, 5.000000e+00
  %mul.i.us = fmul float %div3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i3.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i3.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit
  %12 = phi i32 [ %17, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %div.i.i = fmul float %conv.i, 5.000000e-01
  %div1.i.i = fdiv float %div.i.i, 3.000000e+00
  %div2.i.i = fmul float %div1.i.i, 2.500000e-01
  %div3.i.i = fdiv float %div2.i.i, 5.000000e+00
  %mul.i = fmul float %div3.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit

_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !614

for.end6:                                         ; preds = %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit, %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i14 = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i14, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us

_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !616

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, 2.000000e+00
  %add.us = fadd float %result.020.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, 2.000000e+00
  %add.us.1 = fadd float %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.i.us.2 = fadd float %7, 2.000000e+00
  %add.us.2 = fadd float %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.i.us.3 = fadd float %8, 2.000000e+00
  %add.us.3 = fadd float %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !617

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %9, 2.000000e+00
  %add.us.epil = fadd float %result.020.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !618

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %add.i.i.us = fadd float %conv.i.us, 2.000000e+00
  %mul.i.us = fmul float %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit
  %14 = phi i32 [ %19, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %add.i.i = fadd float %conv.i, 2.000000e+00
  %mul.i = fmul float %add.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit

_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !616

for.end6:                                         ; preds = %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit, %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %25, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %21
  %conv.i13 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i13, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us

_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !619

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, 2.000000e+00
  %sub.i.us = fadd float %add.i.us, 0xC003333340000000
  %add.us = fadd float %result.021.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, 2.000000e+00
  %sub.i.us.1 = fadd float %add.i.us.1, 0xC003333340000000
  %add.us.1 = fadd float %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.i.us.2 = fadd float %7, 2.000000e+00
  %sub.i.us.2 = fadd float %add.i.us.2, 0xC003333340000000
  %add.us.2 = fadd float %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.i.us.3 = fadd float %8, 2.000000e+00
  %sub.i.us.3 = fadd float %add.i.us.3, 0xC003333340000000
  %add.us.3 = fadd float %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !620

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.021.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %9, 2.000000e+00
  %sub.i.us.epil = fadd float %add.i.us.epil, 0xC003333340000000
  %add.us.epil = fadd float %result.021.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !621

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %add.i.i.us = fadd float %conv.i.us, 2.000000e+00
  %sub.i.i.us = fadd float %add.i.i.us, 0xC003333340000000
  %mul.i.us = fmul float %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i3.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit
  %14 = phi i32 [ %19, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %add.i.i = fadd float %conv.i, 2.000000e+00
  %sub.i.i = fadd float %add.i.i, 0xC003333340000000
  %mul.i = fmul float %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i3.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit

_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !619

for.end6:                                         ; preds = %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit, %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i15 = add nsw i32 %25, 10
  store i32 %add.i15, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i15 to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %21
  %conv.i14 = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us

_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !622

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi double [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd double %result.017.us, 2.000000e+00
  %add.us.1 = fadd double %add.us, 2.000000e+00
  %add.us.2 = fadd double %add.us.1, 2.000000e+00
  %add.us.3 = fadd double %add.us.2, 2.000000e+00
  %add.us.4 = fadd double %add.us.3, 2.000000e+00
  %add.us.5 = fadd double %add.us.4, 2.000000e+00
  %add.us.6 = fadd double %add.us.5, 2.000000e+00
  %add.us.7 = fadd double %add.us.6, 2.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !623

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd double %result.017.us.epil, 2.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !624

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd double %add.us.lcssa, -1.600000e+04
  %5 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %5, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %6 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %6, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %7 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %7)
  %inc5 = add nuw nsw i32 %i.020, 1
  %8 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %8
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !622

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %9 = load i64, ptr @start_time, align 8, !tbaa !26
  %10 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %10, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %11, %12
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %13 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %add.i = add nsw i32 %13, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %10, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %14)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %15 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %16 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %9
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %15, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us

_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !625

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi double [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd double %result.017.us, 3.000000e+00
  %add.us.1 = fadd double %add.us, 3.000000e+00
  %add.us.2 = fadd double %add.us.1, 3.000000e+00
  %add.us.3 = fadd double %add.us.2, 3.000000e+00
  %add.us.4 = fadd double %add.us.3, 3.000000e+00
  %add.us.5 = fadd double %add.us.4, 3.000000e+00
  %add.us.6 = fadd double %add.us.5, 3.000000e+00
  %add.us.7 = fadd double %add.us.6, 3.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !626

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd double %result.017.us.epil, 3.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !627

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd double %add.us.lcssa, -2.400000e+04
  %5 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %5, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %6 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %6, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %7 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %7)
  %inc5 = add nuw nsw i32 %i.020, 1
  %8 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %8
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !625

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %9 = load i64, ptr @start_time, align 8, !tbaa !26
  %10 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %10, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %11, %12
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %13 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %add.i = add nsw i32 %13, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %10, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %14)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %15 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %16 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %9
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %15, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us

_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !628

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi double [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd double %result.017.us, 1.000000e+00
  %add.us.1 = fadd double %add.us, 1.000000e+00
  %add.us.2 = fadd double %add.us.1, 1.000000e+00
  %add.us.3 = fadd double %add.us.2, 1.000000e+00
  %add.us.4 = fadd double %add.us.3, 1.000000e+00
  %add.us.5 = fadd double %add.us.4, 1.000000e+00
  %add.us.6 = fadd double %add.us.5, 1.000000e+00
  %add.us.7 = fadd double %add.us.6, 1.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !629

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd double %result.017.us.epil, 1.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !630

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd double %add.us.lcssa, -8.000000e+03
  %5 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %5, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %6 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %6, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %7 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %7)
  %inc5 = add nuw nsw i32 %i.020, 1
  %8 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %8
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !628

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %9 = load i64, ptr @start_time, align 8, !tbaa !26
  %10 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %10, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %11, %12
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %13 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %add.i = add nsw i32 %13, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %10, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %14)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %15 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %16 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %9
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %15, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us

_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !631

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi double [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd double %result.017.us, 6.000000e+00
  %add.us.1 = fadd double %add.us, 6.000000e+00
  %add.us.2 = fadd double %add.us.1, 6.000000e+00
  %add.us.3 = fadd double %add.us.2, 6.000000e+00
  %add.us.4 = fadd double %add.us.3, 6.000000e+00
  %add.us.5 = fadd double %add.us.4, 6.000000e+00
  %add.us.6 = fadd double %add.us.5, 6.000000e+00
  %add.us.7 = fadd double %add.us.6, 6.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !632

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd double %result.017.us.epil, 6.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !633

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd double %add.us.lcssa, -4.800000e+04
  %5 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %5, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %6 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %6, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %7 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %7)
  %inc5 = add nuw nsw i32 %i.020, 1
  %8 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %8
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !631

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %9 = load i64, ptr @start_time, align 8, !tbaa !26
  %10 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %10, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %11, %12
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %13 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %add.i = add nsw i32 %13, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %10, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %14)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %15 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %16 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %9
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %15, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp19 = icmp sgt i32 %0, 0
  br i1 %cmp19, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp216 = icmp sgt i32 %count, 0
  br i1 %cmp216, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %xtraiter = and i32 %count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i32 %count, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.020.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us

_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.020.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !634

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %result.017.us = phi double [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i32 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %add.us = fadd double %result.017.us, 2.000000e+00
  %add.us.1 = fadd double %add.us, 2.000000e+00
  %add.us.2 = fadd double %add.us.1, 2.000000e+00
  %add.us.3 = fadd double %add.us.2, 2.000000e+00
  %add.us.4 = fadd double %add.us.3, 2.000000e+00
  %add.us.5 = fadd double %add.us.4, 2.000000e+00
  %add.us.6 = fadd double %add.us.5, 2.000000e+00
  %add.us.7 = fadd double %add.us.6, 2.000000e+00
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !635

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %result.017.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %result.017.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.017.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %add.us.epil = fadd double %result.017.us.epil, 2.000000e+00
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !636

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %sub.i.i.us = fadd double %add.us.lcssa, -1.600000e+04
  %5 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %5, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %6 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %6, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.preheader
  %i.020 = phi i32 [ %inc5, %for.cond1.preheader ], [ 0, %for.cond1.preheader.lr.ph ]
  %7 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %7)
  %inc5 = add nuw nsw i32 %i.020, 1
  %8 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp = icmp slt i32 %inc5, %8
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !634

for.end6:                                         ; preds = %for.cond1.preheader, %_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %9 = load i64, ptr @start_time, align 8, !tbaa !26
  %10 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %10, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i15

lor.lhs.false.i:                                  ; preds = %for.end6
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %12 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %11, %12
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i15

if.then.i15:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %13 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %add.i = add nsw i32 %13, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i13 = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv.i13, 4
  %call.i14 = tail call ptr @realloc(ptr noundef %10, i64 noundef %mul.i) #14
  store ptr %call.i14, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i14, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i15
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i15
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %14)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %15 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %11, %lor.lhs.false.i ]
  %16 = phi ptr [ %call.i14, %if.then.if.end5_crit_edge.i ], [ %10, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %9
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %16, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %15, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us

_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !637

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, 1.000000e+01
  %add.us = fadd double %result.019.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, 1.000000e+01
  %add.us.1 = fadd double %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.i.us.2 = fadd double %7, 1.000000e+01
  %add.us.2 = fadd double %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.i.us.3 = fadd double %8, 1.000000e+01
  %add.us.3 = fadd double %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !638

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %9, 1.000000e+01
  %add.us.epil = fadd double %result.019.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !639

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %10, 1.000000e+01
  %mul.i.us = fmul double %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit
  %13 = phi i32 [ %17, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %14, 1.000000e+01
  %mul.i = fmul double %add.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit

_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !637

for.end6:                                         ; preds = %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit, %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i13 = add nsw i32 %23, 10
  store i32 %add.i13, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i13 to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us

_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !640

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, 1.000000e+00
  %add1.i.us = fadd double %add.i.us, 2.000000e+00
  %add2.i.us = fadd double %add1.i.us, 3.000000e+00
  %add3.i.us = fadd double %add2.i.us, 4.000000e+00
  %add.us = fadd double %result.019.us, %add3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, 1.000000e+00
  %add1.i.us.1 = fadd double %add.i.us.1, 2.000000e+00
  %add2.i.us.1 = fadd double %add1.i.us.1, 3.000000e+00
  %add3.i.us.1 = fadd double %add2.i.us.1, 4.000000e+00
  %add.us.1 = fadd double %add.us, %add3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !641

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %7, 1.000000e+00
  %add1.i.us.epil = fadd double %add.i.us.epil, 2.000000e+00
  %add2.i.us.epil = fadd double %add1.i.us.epil, 3.000000e+00
  %add3.i.us.epil = fadd double %add2.i.us.epil, 4.000000e+00
  %add.us.epil = fadd double %result.019.us.unr, %add3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %8, 1.000000e+00
  %add1.i.i.us = fadd double %add.i.i.us, 2.000000e+00
  %add2.i.i.us = fadd double %add1.i.i.us, 3.000000e+00
  %add3.i.i.us = fadd double %add2.i.i.us, 4.000000e+00
  %mul.i.us = fmul double %add3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit
  %11 = phi i32 [ %15, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %12, 1.000000e+00
  %add1.i.i = fadd double %add.i.i, 2.000000e+00
  %add2.i.i = fadd double %add1.i.i, 3.000000e+00
  %add3.i.i = fadd double %add2.i.i, 4.000000e+00
  %mul.i = fmul double %add3.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit

_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !640

for.end6:                                         ; preds = %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit, %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i13 = add nsw i32 %21, 10
  store i32 %add.i13, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i13 to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %17
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us

_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !642

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %sub.i.us = fadd double %5, -1.000000e+01
  %add.us = fadd double %result.019.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %sub.i.us.1 = fadd double %6, -1.000000e+01
  %add.us.1 = fadd double %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %sub.i.us.2 = fadd double %7, -1.000000e+01
  %add.us.2 = fadd double %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %sub.i.us.3 = fadd double %8, -1.000000e+01
  %add.us.3 = fadd double %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !643

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %sub.i.us.epil = fadd double %9, -1.000000e+01
  %add.us.epil = fadd double %result.019.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !644

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %sub.i.i.us = fadd double %10, -1.000000e+01
  %mul.i.us = fmul double %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i3.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit
  %13 = phi i32 [ %17, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %sub.i.i = fadd double %14, -1.000000e+01
  %mul.i = fmul double %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i3.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit

_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !642

for.end6:                                         ; preds = %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit, %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %19
  %conv.i = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us

_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !645

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %sub.i.us = fadd double %5, -1.000000e+00
  %sub1.i.us = fadd double %sub.i.us, -2.000000e+00
  %sub2.i.us = fadd double %sub1.i.us, -3.000000e+00
  %sub3.i.us = fadd double %sub2.i.us, -4.000000e+00
  %add.us = fadd double %result.019.us, %sub3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %sub.i.us.1 = fadd double %6, -1.000000e+00
  %sub1.i.us.1 = fadd double %sub.i.us.1, -2.000000e+00
  %sub2.i.us.1 = fadd double %sub1.i.us.1, -3.000000e+00
  %sub3.i.us.1 = fadd double %sub2.i.us.1, -4.000000e+00
  %add.us.1 = fadd double %add.us, %sub3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !646

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %sub.i.us.epil = fadd double %7, -1.000000e+00
  %sub1.i.us.epil = fadd double %sub.i.us.epil, -2.000000e+00
  %sub2.i.us.epil = fadd double %sub1.i.us.epil, -3.000000e+00
  %sub3.i.us.epil = fadd double %sub2.i.us.epil, -4.000000e+00
  %add.us.epil = fadd double %result.019.us.unr, %sub3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %sub.i.i.us = fadd double %8, -1.000000e+00
  %sub1.i.i.us = fadd double %sub.i.i.us, -2.000000e+00
  %sub2.i.i.us = fadd double %sub1.i.i.us, -3.000000e+00
  %sub3.i.i.us = fadd double %sub2.i.i.us, -4.000000e+00
  %mul.i.us = fmul double %sub3.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i3.i.us, %div.i.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit
  %11 = phi i32 [ %15, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %sub.i.i = fadd double %12, -1.000000e+00
  %sub1.i.i = fadd double %sub.i.i, -2.000000e+00
  %sub2.i.i = fadd double %sub1.i.i, -3.000000e+00
  %sub3.i.i = fadd double %sub2.i.i, -4.000000e+00
  %mul.i = fmul double %sub3.i.i, 8.000000e+03
  %sub.i3.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i3.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit

_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !645

for.end6:                                         ; preds = %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit, %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %17
  %conv.i = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us

_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !647

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %mul.i12.us = fmul double %5, 1.200000e+02
  %add.us = fadd double %result.019.us, %mul.i12.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %mul.i12.us.1 = fmul double %6, 1.200000e+02
  %add.us.1 = fadd double %add.us, %mul.i12.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %mul.i12.us.2 = fmul double %7, 1.200000e+02
  %add.us.2 = fadd double %add.us.1, %mul.i12.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %mul.i12.us.3 = fmul double %8, 1.200000e+02
  %add.us.3 = fadd double %add.us.2, %mul.i12.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !648

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %mul.i12.us.epil = fmul double %9, 1.200000e+02
  %add.us.epil = fadd double %result.019.us.epil, %mul.i12.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !649

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %mul.i.i.us = fmul double %10, 1.200000e+02
  %mul.i.us = fmul double %mul.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit
  %13 = phi i32 [ %17, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %mul.i.i = fmul double %14, 1.200000e+02
  %mul.i = fmul double %mul.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit

_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !647

for.end6:                                         ; preds = %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit, %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us

_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !650

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %mul.i12.us = fmul double %5, 2.000000e+00
  %mul1.i.us = fmul double %mul.i12.us, 3.000000e+00
  %mul2.i.us = fmul double %mul1.i.us, 4.000000e+00
  %mul3.i.us = fmul double %mul2.i.us, 5.000000e+00
  %add.us = fadd double %result.019.us, %mul3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %mul.i12.us.1 = fmul double %6, 2.000000e+00
  %mul1.i.us.1 = fmul double %mul.i12.us.1, 3.000000e+00
  %mul2.i.us.1 = fmul double %mul1.i.us.1, 4.000000e+00
  %mul3.i.us.1 = fmul double %mul2.i.us.1, 5.000000e+00
  %add.us.1 = fadd double %add.us, %mul3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !651

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %mul.i12.us.epil = fmul double %7, 2.000000e+00
  %mul1.i.us.epil = fmul double %mul.i12.us.epil, 3.000000e+00
  %mul2.i.us.epil = fmul double %mul1.i.us.epil, 4.000000e+00
  %mul3.i.us.epil = fmul double %mul2.i.us.epil, 5.000000e+00
  %add.us.epil = fadd double %result.019.us.unr, %mul3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %mul.i.i.us = fmul double %8, 2.000000e+00
  %mul1.i.i.us = fmul double %mul.i.i.us, 3.000000e+00
  %mul2.i.i.us = fmul double %mul1.i.i.us, 4.000000e+00
  %mul3.i.i.us = fmul double %mul2.i.i.us, 5.000000e+00
  %mul.i.us = fmul double %mul3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit
  %11 = phi i32 [ %15, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %mul.i.i = fmul double %12, 2.000000e+00
  %mul1.i.i = fmul double %mul.i.i, 3.000000e+00
  %mul2.i.i = fmul double %mul1.i.i, 4.000000e+00
  %mul3.i.i = fmul double %mul2.i.i, 5.000000e+00
  %mul.i = fmul double %mul3.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit

_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !650

for.end6:                                         ; preds = %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit, %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %17
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us

_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !652

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, 1.200000e+02
  %add.us = fadd double %result.019.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, 1.200000e+02
  %add.us.1 = fadd double %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.i.us.2 = fadd double %7, 1.200000e+02
  %add.us.2 = fadd double %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.i.us.3 = fadd double %8, 1.200000e+02
  %add.us.3 = fadd double %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !653

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %9, 1.200000e+02
  %add.us.epil = fadd double %result.019.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !654

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %10, 1.200000e+02
  %mul.i.us = fmul double %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit
  %13 = phi i32 [ %17, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %14, 1.200000e+02
  %mul.i = fmul double %add.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit

_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !652

for.end6:                                         ; preds = %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit, %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i13 = add nsw i32 %23, 10
  store i32 %add.i13, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i13 to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us

_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !655

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %div.i.us = fdiv double %5, 5.000000e+00
  %add.us = fadd double %result.019.us, %div.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %div.i.us.1 = fdiv double %6, 5.000000e+00
  %add.us.1 = fadd double %add.us, %div.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %div.i.us.2 = fdiv double %7, 5.000000e+00
  %add.us.2 = fadd double %add.us.1, %div.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %div.i.us.3 = fdiv double %8, 5.000000e+00
  %add.us.3 = fadd double %add.us.2, %div.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !656

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %div.i.us.epil = fdiv double %9, 5.000000e+00
  %add.us.epil = fadd double %result.019.us.epil, %div.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !657

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %div.i.i.us = fdiv double %10, 5.000000e+00
  %mul.i.us = fmul double %div.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i3.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i3.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit
  %13 = phi i32 [ %17, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %div.i.i = fdiv double %14, 5.000000e+00
  %mul.i = fmul double %div.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit

_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !655

for.end6:                                         ; preds = %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit, %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i13 = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i13, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us

_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !658

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %div.i.us = fmul double %5, 5.000000e-01
  %div1.i.us = fdiv double %div.i.us, 3.000000e+00
  %div2.i.us = fmul double %div1.i.us, 2.500000e-01
  %div3.i.us = fdiv double %div2.i.us, 5.000000e+00
  %add.us = fadd double %result.019.us, %div3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %div.i.us.1 = fmul double %6, 5.000000e-01
  %div1.i.us.1 = fdiv double %div.i.us.1, 3.000000e+00
  %div2.i.us.1 = fmul double %div1.i.us.1, 2.500000e-01
  %div3.i.us.1 = fdiv double %div2.i.us.1, 5.000000e+00
  %add.us.1 = fadd double %add.us, %div3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !659

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %div.i.us.epil = fmul double %7, 5.000000e-01
  %div1.i.us.epil = fdiv double %div.i.us.epil, 3.000000e+00
  %div2.i.us.epil = fmul double %div1.i.us.epil, 2.500000e-01
  %div3.i.us.epil = fdiv double %div2.i.us.epil, 5.000000e+00
  %add.us.epil = fadd double %result.019.us.unr, %div3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %div.i.i.us = fmul double %8, 5.000000e-01
  %div1.i.i.us = fdiv double %div.i.i.us, 3.000000e+00
  %div2.i.i.us = fmul double %div1.i.i.us, 2.500000e-01
  %div3.i.i.us = fdiv double %div2.i.i.us, 5.000000e+00
  %mul.i.us = fmul double %div3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i3.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i3.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit
  %11 = phi i32 [ %15, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %div.i.i = fmul double %12, 5.000000e-01
  %div1.i.i = fdiv double %div.i.i, 3.000000e+00
  %div2.i.i = fmul double %div1.i.i, 2.500000e-01
  %div3.i.i = fdiv double %div2.i.i, 5.000000e+00
  %mul.i = fmul double %div3.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit

_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !658

for.end6:                                         ; preds = %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit, %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %17
  %conv.i = sitofp i64 %sub.i to double
  %div.i13 = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i13, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp21 = icmp sgt i32 %0, 0
  br i1 %cmp21, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp218 = icmp sgt i32 %count, 0
  br i1 %cmp218, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre25 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.022.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us

_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre27, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.022.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !660

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.019.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, 2.000000e+00
  %add.us = fadd double %result.019.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, 2.000000e+00
  %add.us.1 = fadd double %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.i.us.2 = fadd double %7, 2.000000e+00
  %add.us.2 = fadd double %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.i.us.3 = fadd double %8, 2.000000e+00
  %add.us.3 = fadd double %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !661

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.019.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.019.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.019.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %9, 2.000000e+00
  %add.us.epil = fadd double %result.019.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !662

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %10, 2.000000e+00
  %mul.i.us = fmul double %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit
  %13 = phi i32 [ %17, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit ], [ %.pre25, %for.cond1.preheader.preheader ]
  %i.022 = phi i32 [ %inc5, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %14, 2.000000e+00
  %mul.i = fmul double %add.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre26 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit

_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre26, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !660

for.end6:                                         ; preds = %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit, %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i17

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i17

if.then.i17:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i13 = add nsw i32 %23, 10
  store i32 %add.i13, ptr @allocated_results, align 4, !tbaa !9
  %conv.i14 = sext i32 %add.i13 to i64
  %mul.i15 = shl nsw i64 %conv.i14, 4
  %call.i16 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i15) #14
  store ptr %call.i16, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i16, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i17
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i17
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i16, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i12, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(ptr noundef %first, i32 noundef %count, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us
  %2 = phi i32 [ %4, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us

_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !663

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, 2.000000e+00
  %sub.i.us = fadd double %add.i.us, -2.400000e+00
  %add.us = fadd double %result.020.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, 2.000000e+00
  %sub.i.us.1 = fadd double %add.i.us.1, -2.400000e+00
  %add.us.1 = fadd double %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.i.us.2 = fadd double %7, 2.000000e+00
  %sub.i.us.2 = fadd double %add.i.us.2, -2.400000e+00
  %add.us.2 = fadd double %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.i.us.3 = fadd double %8, 2.000000e+00
  %sub.i.us.3 = fadd double %add.i.us.3, -2.400000e+00
  %add.us.3 = fadd double %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !664

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %9, 2.000000e+00
  %sub.i.us.epil = fadd double %add.i.us.epil, -2.400000e+00
  %add.us.epil = fadd double %result.020.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !665

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %10, 2.000000e+00
  %sub.i.i.us = fadd double %add.i.i.us, -2.400000e+00
  %mul.i.us = fmul double %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i3.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit
  %13 = phi i32 [ %17, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %14, 2.000000e+00
  %sub.i.i = fadd double %add.i.i, -2.400000e+00
  %mul.i = fmul double %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i3.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit

_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !663

for.end6:                                         ; preds = %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit, %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us, %entry
  %call.i12 = tail call i64 @clock() #17
  store i64 %call.i12, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %23, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i13 = sub nsw i64 %call.i12, %19
  %conv.i = sitofp i64 %sub.i13 to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #11

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #12

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v16i8(<16 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v8i8(<8 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.add.v8i16(<8 x i16>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #12

attributes #0 = { mustprogress nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nounwind willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { mustprogress norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress nofree nounwind willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #13 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #14 = { nounwind allocsize(1) }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind willreturn memory(read) }
attributes #17 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{!12, !13, i64 0}
!12 = !{!"_ZTS10one_result", !13, i64 0, !6, i64 8}
!13 = !{!"double", !7, i64 0}
!14 = !{!12, !6, i64 8}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.mustprogress"}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.unroll.disable"}
!21 = distinct !{!21, !16}
!22 = distinct !{!22, !16}
!23 = distinct !{!23, !16}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !20}
!26 = !{!27, !27, i64 0}
!27 = !{!"long", !7, i64 0}
!28 = !{!13, !13, i64 0}
!29 = !{!7, !7, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"short", !7, i64 0}
!32 = distinct !{!32, !16, !33, !34}
!33 = !{!"llvm.loop.isvectorized", i32 1}
!34 = !{!"llvm.loop.unroll.runtime.disable"}
!35 = distinct !{!35, !16, !33, !34}
!36 = distinct !{!36, !16, !33, !34}
!37 = distinct !{!37, !16, !33, !34}
!38 = distinct !{!38, !16, !33, !34}
!39 = distinct !{!39, !16, !33, !34}
!40 = !{!41, !41, i64 0}
!41 = !{!"float", !7, i64 0}
!42 = distinct !{!42, !16, !33, !34}
!43 = distinct !{!43, !16, !33, !34}
!44 = distinct !{!44, !16}
!45 = distinct !{!45, !16}
!46 = distinct !{!46, !16}
!47 = distinct !{!47, !16}
!48 = distinct !{!48, !16}
!49 = distinct !{!49, !16}
!50 = distinct !{!50, !16}
!51 = distinct !{!51, !16}
!52 = distinct !{!52, !16}
!53 = distinct !{!53, !16}
!54 = distinct !{!54, !16}
!55 = distinct !{!55, !16}
!56 = distinct !{!56, !16, !33, !34}
!57 = distinct !{!57, !16, !33, !34}
!58 = distinct !{!58, !16}
!59 = distinct !{!59, !16, !34, !33}
!60 = distinct !{!60, !16, !33, !34}
!61 = distinct !{!61, !16, !33, !34}
!62 = distinct !{!62, !16}
!63 = distinct !{!63, !16, !34, !33}
!64 = distinct !{!64, !16, !33, !34}
!65 = distinct !{!65, !16, !33, !34}
!66 = distinct !{!66, !16}
!67 = distinct !{!67, !16, !34, !33}
!68 = distinct !{!68, !16, !33, !34}
!69 = distinct !{!69, !16, !33, !34}
!70 = distinct !{!70, !16}
!71 = distinct !{!71, !16, !34, !33}
!72 = distinct !{!72, !16, !33, !34}
!73 = distinct !{!73, !16, !33, !34}
!74 = distinct !{!74, !16}
!75 = distinct !{!75, !16, !34, !33}
!76 = distinct !{!76, !16, !33, !34}
!77 = distinct !{!77, !16, !33, !34}
!78 = distinct !{!78, !16}
!79 = distinct !{!79, !16, !34, !33}
!80 = distinct !{!80, !16, !33, !34}
!81 = distinct !{!81, !16, !33, !34}
!82 = distinct !{!82, !16}
!83 = distinct !{!83, !16, !34, !33}
!84 = distinct !{!84, !16, !33, !34}
!85 = distinct !{!85, !16, !33, !34}
!86 = distinct !{!86, !16}
!87 = distinct !{!87, !16, !34, !33}
!88 = distinct !{!88, !16, !33, !34}
!89 = distinct !{!89, !16, !33, !34}
!90 = distinct !{!90, !16}
!91 = distinct !{!91, !16, !34, !33}
!92 = distinct !{!92, !16, !33, !34}
!93 = distinct !{!93, !16, !33, !34}
!94 = distinct !{!94, !16}
!95 = distinct !{!95, !16, !34, !33}
!96 = distinct !{!96, !16, !33, !34}
!97 = distinct !{!97, !16, !33, !34}
!98 = distinct !{!98, !16}
!99 = distinct !{!99, !16, !34, !33}
!100 = distinct !{!100, !16, !33, !34}
!101 = distinct !{!101, !16, !33, !34}
!102 = distinct !{!102, !16}
!103 = distinct !{!103, !16, !34, !33}
!104 = distinct !{!104, !16, !33, !34}
!105 = distinct !{!105, !16, !33, !34}
!106 = distinct !{!106, !16}
!107 = distinct !{!107, !16, !34, !33}
!108 = distinct !{!108, !16, !33, !34}
!109 = distinct !{!109, !16, !33, !34}
!110 = distinct !{!110, !16}
!111 = distinct !{!111, !16, !34, !33}
!112 = distinct !{!112, !16, !33, !34}
!113 = distinct !{!113, !16, !33, !34}
!114 = distinct !{!114, !16}
!115 = distinct !{!115, !16, !34, !33}
!116 = distinct !{!116, !16, !33, !34}
!117 = distinct !{!117, !16, !33, !34}
!118 = distinct !{!118, !16}
!119 = distinct !{!119, !16, !34, !33}
!120 = distinct !{!120, !16, !33, !34}
!121 = distinct !{!121, !16, !33, !34}
!122 = distinct !{!122, !16}
!123 = distinct !{!123, !16, !34, !33}
!124 = distinct !{!124, !16}
!125 = distinct !{!125, !16}
!126 = distinct !{!126, !16}
!127 = distinct !{!127, !16}
!128 = distinct !{!128, !16}
!129 = distinct !{!129, !16}
!130 = distinct !{!130, !16}
!131 = distinct !{!131, !16}
!132 = distinct !{!132, !16}
!133 = distinct !{!133, !16}
!134 = distinct !{!134, !16}
!135 = distinct !{!135, !16}
!136 = distinct !{!136, !16, !33, !34}
!137 = distinct !{!137, !16, !33, !34}
!138 = distinct !{!138, !16}
!139 = distinct !{!139, !16, !34, !33}
!140 = distinct !{!140, !16, !33, !34}
!141 = distinct !{!141, !16, !33, !34}
!142 = distinct !{!142, !16}
!143 = distinct !{!143, !16, !34, !33}
!144 = distinct !{!144, !16, !33, !34}
!145 = distinct !{!145, !16, !33, !34}
!146 = distinct !{!146, !16}
!147 = distinct !{!147, !16, !34, !33}
!148 = distinct !{!148, !16, !33, !34}
!149 = distinct !{!149, !16, !33, !34}
!150 = distinct !{!150, !16}
!151 = distinct !{!151, !16, !34, !33}
!152 = distinct !{!152, !16, !33, !34}
!153 = distinct !{!153, !16, !33, !34}
!154 = distinct !{!154, !16}
!155 = distinct !{!155, !16, !34, !33}
!156 = distinct !{!156, !16, !33, !34}
!157 = distinct !{!157, !16, !33, !34}
!158 = distinct !{!158, !16}
!159 = distinct !{!159, !16, !34, !33}
!160 = distinct !{!160, !16, !33, !34}
!161 = distinct !{!161, !16, !33, !34}
!162 = distinct !{!162, !16}
!163 = distinct !{!163, !16, !34, !33}
!164 = distinct !{!164, !16, !33, !34}
!165 = distinct !{!165, !16, !33, !34}
!166 = distinct !{!166, !16}
!167 = distinct !{!167, !16, !34, !33}
!168 = distinct !{!168, !16, !33, !34}
!169 = distinct !{!169, !16, !33, !34}
!170 = distinct !{!170, !16}
!171 = distinct !{!171, !16, !34, !33}
!172 = distinct !{!172, !16, !33, !34}
!173 = distinct !{!173, !16, !33, !34}
!174 = distinct !{!174, !16}
!175 = distinct !{!175, !16, !34, !33}
!176 = distinct !{!176, !16, !33, !34}
!177 = distinct !{!177, !16, !33, !34}
!178 = distinct !{!178, !16}
!179 = distinct !{!179, !16, !34, !33}
!180 = distinct !{!180, !16, !33, !34}
!181 = distinct !{!181, !16, !33, !34}
!182 = distinct !{!182, !16}
!183 = distinct !{!183, !16, !34, !33}
!184 = distinct !{!184, !16, !33, !34}
!185 = distinct !{!185, !16, !33, !34}
!186 = distinct !{!186, !16}
!187 = distinct !{!187, !16, !34, !33}
!188 = distinct !{!188, !16, !33, !34}
!189 = distinct !{!189, !16, !33, !34}
!190 = distinct !{!190, !16}
!191 = distinct !{!191, !16, !34, !33}
!192 = distinct !{!192, !16, !33, !34}
!193 = distinct !{!193, !16, !33, !34}
!194 = distinct !{!194, !16}
!195 = distinct !{!195, !16, !34, !33}
!196 = distinct !{!196, !16, !33, !34}
!197 = distinct !{!197, !16, !33, !34}
!198 = distinct !{!198, !16}
!199 = distinct !{!199, !16, !34, !33}
!200 = distinct !{!200, !16, !33, !34}
!201 = distinct !{!201, !16, !33, !34}
!202 = distinct !{!202, !16}
!203 = distinct !{!203, !16, !34, !33}
!204 = distinct !{!204, !16}
!205 = distinct !{!205, !16}
!206 = distinct !{!206, !16}
!207 = distinct !{!207, !16}
!208 = distinct !{!208, !16}
!209 = distinct !{!209, !16}
!210 = distinct !{!210, !16}
!211 = distinct !{!211, !16}
!212 = distinct !{!212, !16}
!213 = distinct !{!213, !16}
!214 = distinct !{!214, !16}
!215 = distinct !{!215, !16}
!216 = distinct !{!216, !16, !33, !34}
!217 = distinct !{!217, !16}
!218 = distinct !{!218, !16, !34, !33}
!219 = distinct !{!219, !16, !33, !34}
!220 = distinct !{!220, !16}
!221 = distinct !{!221, !16, !34, !33}
!222 = distinct !{!222, !16, !33, !34}
!223 = distinct !{!223, !16}
!224 = distinct !{!224, !16, !34, !33}
!225 = distinct !{!225, !16, !33, !34}
!226 = distinct !{!226, !16}
!227 = distinct !{!227, !16, !34, !33}
!228 = distinct !{!228, !16, !33, !34}
!229 = distinct !{!229, !16}
!230 = distinct !{!230, !16, !34, !33}
!231 = distinct !{!231, !16, !33, !34}
!232 = distinct !{!232, !16}
!233 = distinct !{!233, !16, !34, !33}
!234 = distinct !{!234, !16, !33, !34}
!235 = distinct !{!235, !16}
!236 = distinct !{!236, !16, !34, !33}
!237 = distinct !{!237, !16, !33, !34}
!238 = distinct !{!238, !16}
!239 = distinct !{!239, !16, !34, !33}
!240 = distinct !{!240, !16, !33, !34}
!241 = distinct !{!241, !16}
!242 = distinct !{!242, !16, !34, !33}
!243 = distinct !{!243, !16, !33, !34}
!244 = distinct !{!244, !16}
!245 = distinct !{!245, !16, !34, !33}
!246 = distinct !{!246, !16, !33, !34}
!247 = distinct !{!247, !16}
!248 = distinct !{!248, !16, !34, !33}
!249 = distinct !{!249, !16, !33, !34}
!250 = distinct !{!250, !16}
!251 = distinct !{!251, !16, !34, !33}
!252 = distinct !{!252, !16, !33, !34}
!253 = distinct !{!253, !16}
!254 = distinct !{!254, !16, !34, !33}
!255 = distinct !{!255, !16, !33, !34}
!256 = distinct !{!256, !16}
!257 = distinct !{!257, !16, !34, !33}
!258 = distinct !{!258, !16, !33, !34}
!259 = distinct !{!259, !16}
!260 = distinct !{!260, !16, !34, !33}
!261 = distinct !{!261, !16, !33, !34}
!262 = distinct !{!262, !16}
!263 = distinct !{!263, !16, !34, !33}
!264 = distinct !{!264, !16, !33, !34}
!265 = distinct !{!265, !16}
!266 = distinct !{!266, !16, !34, !33}
!267 = distinct !{!267, !16}
!268 = distinct !{!268, !16}
!269 = distinct !{!269, !16}
!270 = distinct !{!270, !16}
!271 = distinct !{!271, !16}
!272 = distinct !{!272, !16}
!273 = distinct !{!273, !16}
!274 = distinct !{!274, !16}
!275 = distinct !{!275, !16}
!276 = distinct !{!276, !16}
!277 = distinct !{!277, !16}
!278 = distinct !{!278, !16}
!279 = distinct !{!279, !16, !33, !34}
!280 = distinct !{!280, !16}
!281 = distinct !{!281, !16, !34, !33}
!282 = distinct !{!282, !16, !33, !34}
!283 = distinct !{!283, !16}
!284 = distinct !{!284, !16, !34, !33}
!285 = distinct !{!285, !16, !33, !34}
!286 = distinct !{!286, !16}
!287 = distinct !{!287, !16, !34, !33}
!288 = distinct !{!288, !16, !33, !34}
!289 = distinct !{!289, !16}
!290 = distinct !{!290, !16, !34, !33}
!291 = distinct !{!291, !16, !33, !34}
!292 = distinct !{!292, !16}
!293 = distinct !{!293, !16, !34, !33}
!294 = distinct !{!294, !16, !33, !34}
!295 = distinct !{!295, !16}
!296 = distinct !{!296, !16, !34, !33}
!297 = distinct !{!297, !16, !33, !34}
!298 = distinct !{!298, !16}
!299 = distinct !{!299, !16, !34, !33}
!300 = distinct !{!300, !16, !33, !34}
!301 = distinct !{!301, !16}
!302 = distinct !{!302, !16, !34, !33}
!303 = distinct !{!303, !16, !33, !34}
!304 = distinct !{!304, !16}
!305 = distinct !{!305, !16, !34, !33}
!306 = distinct !{!306, !16, !33, !34}
!307 = distinct !{!307, !16}
!308 = distinct !{!308, !16, !34, !33}
!309 = distinct !{!309, !16, !33, !34}
!310 = distinct !{!310, !16}
!311 = distinct !{!311, !16, !34, !33}
!312 = distinct !{!312, !16, !33, !34}
!313 = distinct !{!313, !16}
!314 = distinct !{!314, !16, !34, !33}
!315 = distinct !{!315, !16, !33, !34}
!316 = distinct !{!316, !16}
!317 = distinct !{!317, !16, !34, !33}
!318 = distinct !{!318, !16, !33, !34}
!319 = distinct !{!319, !16}
!320 = distinct !{!320, !16, !34, !33}
!321 = distinct !{!321, !16, !33, !34}
!322 = distinct !{!322, !16}
!323 = distinct !{!323, !16, !34, !33}
!324 = distinct !{!324, !16, !33, !34}
!325 = distinct !{!325, !16}
!326 = distinct !{!326, !16, !34, !33}
!327 = distinct !{!327, !16, !33, !34}
!328 = distinct !{!328, !16}
!329 = distinct !{!329, !16, !34, !33}
!330 = distinct !{!330, !16}
!331 = distinct !{!331, !16}
!332 = distinct !{!332, !16}
!333 = distinct !{!333, !16}
!334 = distinct !{!334, !16}
!335 = distinct !{!335, !16}
!336 = distinct !{!336, !16}
!337 = distinct !{!337, !16}
!338 = distinct !{!338, !16}
!339 = distinct !{!339, !16}
!340 = distinct !{!340, !16}
!341 = distinct !{!341, !16}
!342 = distinct !{!342, !16, !33, !34}
!343 = distinct !{!343, !16}
!344 = distinct !{!344, !16, !34, !33}
!345 = distinct !{!345, !16, !33, !34}
!346 = distinct !{!346, !16}
!347 = distinct !{!347, !16, !34, !33}
!348 = distinct !{!348, !16, !33, !34}
!349 = distinct !{!349, !16}
!350 = distinct !{!350, !16, !34, !33}
!351 = distinct !{!351, !16, !33, !34}
!352 = distinct !{!352, !16}
!353 = distinct !{!353, !16, !34, !33}
!354 = distinct !{!354, !16, !33, !34}
!355 = distinct !{!355, !16}
!356 = distinct !{!356, !16, !34, !33}
!357 = distinct !{!357, !16, !33, !34}
!358 = distinct !{!358, !16}
!359 = distinct !{!359, !16, !34, !33}
!360 = distinct !{!360, !16, !33, !34}
!361 = distinct !{!361, !16}
!362 = distinct !{!362, !16, !34, !33}
!363 = distinct !{!363, !16, !33, !34}
!364 = distinct !{!364, !16}
!365 = distinct !{!365, !16, !34, !33}
!366 = distinct !{!366, !16, !33, !34}
!367 = distinct !{!367, !16}
!368 = distinct !{!368, !16, !34, !33}
!369 = distinct !{!369, !16, !33, !34}
!370 = distinct !{!370, !16}
!371 = distinct !{!371, !16, !34, !33}
!372 = distinct !{!372, !16, !33, !34}
!373 = distinct !{!373, !16}
!374 = distinct !{!374, !16, !34, !33}
!375 = distinct !{!375, !16, !33, !34}
!376 = distinct !{!376, !16}
!377 = distinct !{!377, !16, !34, !33}
!378 = distinct !{!378, !16, !33, !34}
!379 = distinct !{!379, !16}
!380 = distinct !{!380, !16, !34, !33}
!381 = distinct !{!381, !16, !33, !34}
!382 = distinct !{!382, !16}
!383 = distinct !{!383, !16, !34, !33}
!384 = distinct !{!384, !16, !33, !34}
!385 = distinct !{!385, !16}
!386 = distinct !{!386, !16, !34, !33}
!387 = distinct !{!387, !16, !33, !34}
!388 = distinct !{!388, !16}
!389 = distinct !{!389, !16, !34, !33}
!390 = distinct !{!390, !16, !33, !34}
!391 = distinct !{!391, !16}
!392 = distinct !{!392, !16, !34, !33}
!393 = distinct !{!393, !16}
!394 = distinct !{!394, !16}
!395 = distinct !{!395, !16}
!396 = distinct !{!396, !16}
!397 = distinct !{!397, !16}
!398 = distinct !{!398, !16}
!399 = distinct !{!399, !16}
!400 = distinct !{!400, !16}
!401 = distinct !{!401, !16}
!402 = distinct !{!402, !16}
!403 = distinct !{!403, !16}
!404 = distinct !{!404, !16}
!405 = distinct !{!405, !16, !33, !34}
!406 = distinct !{!406, !16}
!407 = distinct !{!407, !16, !34, !33}
!408 = distinct !{!408, !16, !33, !34}
!409 = distinct !{!409, !16}
!410 = distinct !{!410, !16, !34, !33}
!411 = distinct !{!411, !16, !33, !34}
!412 = distinct !{!412, !16}
!413 = distinct !{!413, !16, !34, !33}
!414 = distinct !{!414, !16, !33, !34}
!415 = distinct !{!415, !16}
!416 = distinct !{!416, !16, !34, !33}
!417 = distinct !{!417, !16, !33, !34}
!418 = distinct !{!418, !16}
!419 = distinct !{!419, !16, !34, !33}
!420 = distinct !{!420, !16, !33, !34}
!421 = distinct !{!421, !16}
!422 = distinct !{!422, !16, !34, !33}
!423 = distinct !{!423, !16, !33, !34}
!424 = distinct !{!424, !16}
!425 = distinct !{!425, !16, !34, !33}
!426 = distinct !{!426, !16, !33, !34}
!427 = distinct !{!427, !16}
!428 = distinct !{!428, !16, !34, !33}
!429 = distinct !{!429, !16, !33, !34}
!430 = distinct !{!430, !16}
!431 = distinct !{!431, !16, !34, !33}
!432 = distinct !{!432, !16, !33, !34}
!433 = distinct !{!433, !16}
!434 = distinct !{!434, !16, !34, !33}
!435 = distinct !{!435, !16, !33, !34}
!436 = distinct !{!436, !16}
!437 = distinct !{!437, !16, !34, !33}
!438 = distinct !{!438, !16, !33, !34}
!439 = distinct !{!439, !16}
!440 = distinct !{!440, !16, !34, !33}
!441 = distinct !{!441, !16, !33, !34}
!442 = distinct !{!442, !16}
!443 = distinct !{!443, !16, !34, !33}
!444 = distinct !{!444, !16, !33, !34}
!445 = distinct !{!445, !16}
!446 = distinct !{!446, !16, !34, !33}
!447 = distinct !{!447, !16, !33, !34}
!448 = distinct !{!448, !16}
!449 = distinct !{!449, !16, !34, !33}
!450 = distinct !{!450, !16, !33, !34}
!451 = distinct !{!451, !16}
!452 = distinct !{!452, !16, !34, !33}
!453 = distinct !{!453, !16, !33, !34}
!454 = distinct !{!454, !16}
!455 = distinct !{!455, !16, !34, !33}
!456 = distinct !{!456, !16}
!457 = distinct !{!457, !16}
!458 = distinct !{!458, !16}
!459 = distinct !{!459, !16}
!460 = distinct !{!460, !16}
!461 = distinct !{!461, !16}
!462 = distinct !{!462, !16}
!463 = distinct !{!463, !16}
!464 = distinct !{!464, !16}
!465 = distinct !{!465, !16}
!466 = distinct !{!466, !16}
!467 = distinct !{!467, !16}
!468 = distinct !{!468, !16, !33, !34}
!469 = distinct !{!469, !16}
!470 = distinct !{!470, !16, !34, !33}
!471 = distinct !{!471, !16, !33, !34}
!472 = distinct !{!472, !16}
!473 = distinct !{!473, !16, !34, !33}
!474 = distinct !{!474, !16, !33, !34}
!475 = distinct !{!475, !16}
!476 = distinct !{!476, !16, !34, !33}
!477 = distinct !{!477, !16, !33, !34}
!478 = distinct !{!478, !16}
!479 = distinct !{!479, !16, !34, !33}
!480 = distinct !{!480, !16}
!481 = distinct !{!481, !16}
!482 = distinct !{!482, !20}
!483 = distinct !{!483, !16}
!484 = distinct !{!484, !16}
!485 = distinct !{!485, !20}
!486 = distinct !{!486, !16, !33, !34}
!487 = distinct !{!487, !16}
!488 = distinct !{!488, !16, !34, !33}
!489 = distinct !{!489, !16}
!490 = distinct !{!490, !16}
!491 = distinct !{!491, !16}
!492 = distinct !{!492, !16}
!493 = distinct !{!493, !16, !33, !34}
!494 = distinct !{!494, !16}
!495 = distinct !{!495, !16, !34, !33}
!496 = distinct !{!496, !16, !33, !34}
!497 = distinct !{!497, !16}
!498 = distinct !{!498, !16, !34, !33}
!499 = distinct !{!499, !16, !33, !34}
!500 = distinct !{!500, !16}
!501 = distinct !{!501, !16, !34, !33}
!502 = distinct !{!502, !16, !33, !34}
!503 = distinct !{!503, !16}
!504 = distinct !{!504, !16, !34, !33}
!505 = distinct !{!505, !16, !33, !34}
!506 = distinct !{!506, !16}
!507 = distinct !{!507, !16, !34, !33}
!508 = distinct !{!508, !16, !33, !34}
!509 = distinct !{!509, !16}
!510 = distinct !{!510, !16, !34, !33}
!511 = distinct !{!511, !16, !33, !34}
!512 = distinct !{!512, !16}
!513 = distinct !{!513, !16, !34, !33}
!514 = distinct !{!514, !16, !33, !34}
!515 = distinct !{!515, !16}
!516 = distinct !{!516, !16, !34, !33}
!517 = distinct !{!517, !16}
!518 = distinct !{!518, !16}
!519 = distinct !{!519, !16}
!520 = distinct !{!520, !16}
!521 = distinct !{!521, !16}
!522 = distinct !{!522, !16}
!523 = distinct !{!523, !16}
!524 = distinct !{!524, !16}
!525 = distinct !{!525, !16}
!526 = distinct !{!526, !16}
!527 = distinct !{!527, !16}
!528 = distinct !{!528, !16}
!529 = distinct !{!529, !16, !33, !34}
!530 = distinct !{!530, !16}
!531 = distinct !{!531, !16, !34, !33}
!532 = distinct !{!532, !16, !33, !34}
!533 = distinct !{!533, !16}
!534 = distinct !{!534, !16, !34, !33}
!535 = distinct !{!535, !16, !33, !34}
!536 = distinct !{!536, !16}
!537 = distinct !{!537, !16, !34, !33}
!538 = distinct !{!538, !16, !33, !34}
!539 = distinct !{!539, !16}
!540 = distinct !{!540, !16, !34, !33}
!541 = distinct !{!541, !16}
!542 = distinct !{!542, !16}
!543 = distinct !{!543, !20}
!544 = distinct !{!544, !16}
!545 = distinct !{!545, !16}
!546 = distinct !{!546, !20}
!547 = distinct !{!547, !16, !33, !34}
!548 = distinct !{!548, !16}
!549 = distinct !{!549, !16, !34, !33}
!550 = distinct !{!550, !16}
!551 = distinct !{!551, !16}
!552 = distinct !{!552, !16}
!553 = distinct !{!553, !16}
!554 = distinct !{!554, !16, !33, !34}
!555 = distinct !{!555, !16}
!556 = distinct !{!556, !16, !34, !33}
!557 = distinct !{!557, !16, !33, !34}
!558 = distinct !{!558, !16}
!559 = distinct !{!559, !16, !34, !33}
!560 = distinct !{!560, !16, !33, !34}
!561 = distinct !{!561, !16}
!562 = distinct !{!562, !16, !34, !33}
!563 = distinct !{!563, !16, !33, !34}
!564 = distinct !{!564, !16}
!565 = distinct !{!565, !16, !34, !33}
!566 = distinct !{!566, !16, !33, !34}
!567 = distinct !{!567, !16}
!568 = distinct !{!568, !16, !34, !33}
!569 = distinct !{!569, !16, !33, !34}
!570 = distinct !{!570, !16}
!571 = distinct !{!571, !16, !34, !33}
!572 = distinct !{!572, !16, !33, !34}
!573 = distinct !{!573, !16}
!574 = distinct !{!574, !16, !34, !33}
!575 = distinct !{!575, !16, !33, !34}
!576 = distinct !{!576, !16}
!577 = distinct !{!577, !16, !34, !33}
!578 = distinct !{!578, !16}
!579 = distinct !{!579, !16}
!580 = distinct !{!580, !20}
!581 = distinct !{!581, !16}
!582 = distinct !{!582, !16}
!583 = distinct !{!583, !20}
!584 = distinct !{!584, !16}
!585 = distinct !{!585, !16}
!586 = distinct !{!586, !20}
!587 = distinct !{!587, !16}
!588 = distinct !{!588, !16}
!589 = distinct !{!589, !20}
!590 = distinct !{!590, !16}
!591 = distinct !{!591, !16}
!592 = distinct !{!592, !20}
!593 = distinct !{!593, !16}
!594 = distinct !{!594, !16}
!595 = distinct !{!595, !20}
!596 = distinct !{!596, !16}
!597 = distinct !{!597, !16}
!598 = distinct !{!598, !16}
!599 = distinct !{!599, !16}
!600 = distinct !{!600, !20}
!601 = distinct !{!601, !16}
!602 = distinct !{!602, !16}
!603 = distinct !{!603, !16}
!604 = distinct !{!604, !16}
!605 = distinct !{!605, !20}
!606 = distinct !{!606, !16}
!607 = distinct !{!607, !16}
!608 = distinct !{!608, !16}
!609 = distinct !{!609, !16}
!610 = distinct !{!610, !20}
!611 = distinct !{!611, !16}
!612 = distinct !{!612, !16}
!613 = distinct !{!613, !20}
!614 = distinct !{!614, !16}
!615 = distinct !{!615, !16}
!616 = distinct !{!616, !16}
!617 = distinct !{!617, !16}
!618 = distinct !{!618, !20}
!619 = distinct !{!619, !16}
!620 = distinct !{!620, !16}
!621 = distinct !{!621, !20}
!622 = distinct !{!622, !16}
!623 = distinct !{!623, !16}
!624 = distinct !{!624, !20}
!625 = distinct !{!625, !16}
!626 = distinct !{!626, !16}
!627 = distinct !{!627, !20}
!628 = distinct !{!628, !16}
!629 = distinct !{!629, !16}
!630 = distinct !{!630, !20}
!631 = distinct !{!631, !16}
!632 = distinct !{!632, !16}
!633 = distinct !{!633, !20}
!634 = distinct !{!634, !16}
!635 = distinct !{!635, !16}
!636 = distinct !{!636, !20}
!637 = distinct !{!637, !16}
!638 = distinct !{!638, !16}
!639 = distinct !{!639, !20}
!640 = distinct !{!640, !16}
!641 = distinct !{!641, !16}
!642 = distinct !{!642, !16}
!643 = distinct !{!643, !16}
!644 = distinct !{!644, !20}
!645 = distinct !{!645, !16}
!646 = distinct !{!646, !16}
!647 = distinct !{!647, !16}
!648 = distinct !{!648, !16}
!649 = distinct !{!649, !20}
!650 = distinct !{!650, !16}
!651 = distinct !{!651, !16}
!652 = distinct !{!652, !16}
!653 = distinct !{!653, !16}
!654 = distinct !{!654, !20}
!655 = distinct !{!655, !16}
!656 = distinct !{!656, !16}
!657 = distinct !{!657, !20}
!658 = distinct !{!658, !16}
!659 = distinct !{!659, !16}
!660 = distinct !{!660, !16}
!661 = distinct !{!661, !16}
!662 = distinct !{!662, !20}
!663 = distinct !{!663, !16}
!664 = distinct !{!664, !16}
!665 = distinct !{!665, !20}
