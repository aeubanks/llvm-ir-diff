; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Applications/SPASS/dfgscanner.c'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Applications/SPASS/dfgscanner.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.yystype = type { ptr }
%struct.yy_buffer_state = type { ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, i32 }

@dfg_in = dso_local local_unnamed_addr global ptr null, align 8
@dfg_out = dso_local local_unnamed_addr global ptr null, align 8
@yy_init = internal unnamed_addr global i1 false, align 4
@yy_start = internal unnamed_addr global i32 0, align 4
@stdin = external local_unnamed_addr global ptr, align 8
@stdout = external local_unnamed_addr global ptr, align 8
@yy_current_buffer = internal unnamed_addr global ptr null, align 8
@yy_more_len = internal unnamed_addr global i32 0, align 4
@yy_more_flag = internal unnamed_addr global i1 false, align 4
@yy_c_buf_p = internal unnamed_addr global ptr null, align 8
@dfg_text = dso_local local_unnamed_addr global ptr null, align 8
@yy_hold_char = internal unnamed_addr global i8 0, align 1
@yy_nxt = internal unnamed_addr constant [380 x [41 x i16]] [[41 x i16] zeroinitializer, [41 x i16] [i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 13, i16 14, i16 14, i16 14, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 14, i16 14, i16 24, i16 14, i16 25, i16 26, i16 27, i16 28, i16 14, i16 29, i16 30, i16 31, i16 32, i16 14, i16 14, i16 14, i16 33, i16 6], [41 x i16] [i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 13, i16 14, i16 14, i16 14, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 14, i16 14, i16 24, i16 14, i16 25, i16 26, i16 27, i16 28, i16 14, i16 29, i16 30, i16 31, i16 32, i16 14, i16 14, i16 14, i16 33, i16 6], [41 x i16] [i16 5, i16 34, i16 34, i16 34, i16 34, i16 34, i16 35, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34], [41 x i16] [i16 5, i16 34, i16 34, i16 34, i16 34, i16 34, i16 35, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34], [41 x i16] [i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5], [41 x i16] [i16 5, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6], [41 x i16] [i16 5, i16 -7, i16 36, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7], [41 x i16] [i16 5, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8], [41 x i16] [i16 5, i16 37, i16 37, i16 -9, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37], [41 x i16] [i16 5, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10], [41 x i16] [i16 5, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 38], [41 x i16] [i16 5, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 39, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12], [41 x i16] [i16 5, i16 -13, i16 -13, i16 -13, i16 -13, i16 -13, i16 -13, i16 -13, i16 40, i16 40, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -13, i16 -13], [41 x i16] [i16 5, i16 -14, i16 -14, i16 -14, i16 -14, i16 -14, i16 -14, i16 -14, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -14, i16 -14], [41 x i16] [i16 5, i16 -15, i16 -15, i16 -15, i16 -15, i16 -15, i16 -15, i16 -15, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 42, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 43, i16 41, i16 41, i16 44, i16 41, i16 -15, i16 -15], [41 x i16] [i16 5, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 45, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 46, i16 -16, i16 -16], [41 x i16] [i16 5, i16 -17, i16 -17, i16 -17, i16 -17, i16 -17, i16 -17, i16 -17, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 47, i16 41, i16 48, i16 49, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -17, i16 -17], [41 x i16] [i16 5, i16 -18, i16 -18, i16 -18, i16 -18, i16 -18, i16 -18, i16 -18, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 50, i16 41, i16 41, i16 41, i16 51, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 52, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -18, i16 -18], [41 x i16] [i16 5, i16 -19, i16 -19, i16 -19, i16 -19, i16 -19, i16 -19, i16 -19, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 53, i16 41, i16 41, i16 54, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 55, i16 41, i16 -19, i16 -19], [41 x i16] [i16 5, i16 -20, i16 -20, i16 -20, i16 -20, i16 -20, i16 -20, i16 -20, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 56, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 57, i16 41, i16 41, i16 58, i16 41, i16 41, i16 59, i16 41, i16 41, i16 41, i16 41, i16 -20, i16 -20], [41 x i16] [i16 5, i16 -21, i16 -21, i16 -21, i16 -21, i16 -21, i16 -21, i16 -21, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 60, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -21, i16 -21], [41 x i16] [i16 5, i16 -22, i16 -22, i16 -22, i16 -22, i16 -22, i16 -22, i16 -22, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 61, i16 -22, i16 -22], [41 x i16] [i16 5, i16 -23, i16 -23, i16 -23, i16 -23, i16 -23, i16 -23, i16 -23, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 62, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -23, i16 -23], [41 x i16] [i16 5, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 63, i16 41, i16 41, i16 41, i16 41, i16 41, i16 64, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -24, i16 -24], [41 x i16] [i16 5, i16 -25, i16 -25, i16 -25, i16 -25, i16 -25, i16 -25, i16 -25, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 65, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 66, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -25, i16 -25], [41 x i16] [i16 5, i16 -26, i16 -26, i16 -26, i16 -26, i16 -26, i16 -26, i16 -26, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 67, i16 41, i16 68, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -26, i16 -26], [41 x i16] [i16 5, i16 -27, i16 -27, i16 -27, i16 -27, i16 -27, i16 -27, i16 -27, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 69, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -27, i16 -27], [41 x i16] [i16 5, i16 -28, i16 -28, i16 -28, i16 -28, i16 -28, i16 -28, i16 -28, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 70, i16 41, i16 41, i16 41, i16 41, i16 -28, i16 -28], [41 x i16] [i16 5, i16 -29, i16 -29, i16 -29, i16 -29, i16 -29, i16 -29, i16 -29, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 71, i16 41, i16 41, i16 41, i16 72, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 73, i16 41, i16 41, i16 41, i16 41, i16 74, i16 75, i16 41, i16 41, i16 41, i16 41, i16 -29, i16 -29], [41 x i16] [i16 5, i16 -30, i16 -30, i16 -30, i16 -30, i16 -30, i16 -30, i16 -30, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 76, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -30, i16 -30], [41 x i16] [i16 5, i16 -31, i16 -31, i16 -31, i16 -31, i16 -31, i16 -31, i16 -31, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 77, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -31, i16 -31], [41 x i16] [i16 5, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 78, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -32, i16 -32], [41 x i16] [i16 5, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 79, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33], [41 x i16] [i16 5, i16 80, i16 80, i16 80, i16 80, i16 80, i16 -34, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80], [41 x i16] [i16 5, i16 81, i16 81, i16 81, i16 81, i16 81, i16 82, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 83], [41 x i16] [i16 5, i16 -36, i16 36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36], [41 x i16] [i16 5, i16 37, i16 37, i16 -37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37], [41 x i16] [i16 5, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38], [41 x i16] [i16 5, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39], [41 x i16] [i16 5, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 40, i16 40, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -40, i16 -40], [41 x i16] [i16 5, i16 -41, i16 -41, i16 -41, i16 -41, i16 -41, i16 -41, i16 -41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -41, i16 -41], [41 x i16] [i16 5, i16 -42, i16 -42, i16 -42, i16 -42, i16 -42, i16 -42, i16 -42, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 84, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -42, i16 -42], [41 x i16] [i16 5, i16 -43, i16 -43, i16 -43, i16 -43, i16 -43, i16 -43, i16 -43, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 85, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -43, i16 -43], [41 x i16] [i16 5, i16 -44, i16 -44, i16 -44, i16 -44, i16 -44, i16 -44, i16 -44, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 86, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -44, i16 -44], [41 x i16] [i16 5, i16 -45, i16 -45, i16 -45, i16 -45, i16 -45, i16 -45, i16 -45, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 87, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -45, i16 -45], [41 x i16] [i16 5, i16 -46, i16 -46, i16 -46, i16 -46, i16 -46, i16 -46, i16 -46, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -46, i16 -46], [41 x i16] [i16 5, i16 -47, i16 -47, i16 -47, i16 -47, i16 -47, i16 -47, i16 -47, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 88, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -47, i16 -47], [41 x i16] [i16 5, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 89, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -48, i16 -48], [41 x i16] [i16 5, i16 -49, i16 -49, i16 -49, i16 -49, i16 -49, i16 -49, i16 -49, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 90, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -49, i16 -49], [41 x i16] [i16 5, i16 -50, i16 -50, i16 -50, i16 -50, i16 -50, i16 -50, i16 -50, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 91, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -50, i16 -50], [41 x i16] [i16 5, i16 -51, i16 -51, i16 -51, i16 -51, i16 -51, i16 -51, i16 -51, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 92, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -51, i16 -51], [41 x i16] [i16 5, i16 -52, i16 -52, i16 -52, i16 -52, i16 -52, i16 -52, i16 -52, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 93, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -52, i16 -52], [41 x i16] [i16 5, i16 -53, i16 -53, i16 -53, i16 -53, i16 -53, i16 -53, i16 -53, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 94, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -53, i16 -53], [41 x i16] [i16 5, i16 -54, i16 -54, i16 -54, i16 -54, i16 -54, i16 -54, i16 -54, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 95, i16 41, i16 41, i16 41, i16 41, i16 -54, i16 -54], [41 x i16] [i16 5, i16 -55, i16 -55, i16 -55, i16 -55, i16 -55, i16 -55, i16 -55, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 96, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -55, i16 -55], [41 x i16] [i16 5, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 97, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -56, i16 -56], [41 x i16] [i16 5, i16 -57, i16 -57, i16 -57, i16 -57, i16 -57, i16 -57, i16 -57, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 98, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -57, i16 -57], [41 x i16] [i16 5, i16 -58, i16 -58, i16 -58, i16 -58, i16 -58, i16 -58, i16 -58, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 99, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -58, i16 -58], [41 x i16] [i16 5, i16 -59, i16 -59, i16 -59, i16 -59, i16 -59, i16 -59, i16 -59, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 100, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -59, i16 -59], [41 x i16] [i16 5, i16 -60, i16 -60, i16 -60, i16 -60, i16 -60, i16 -60, i16 -60, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 101, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -60, i16 -60], [41 x i16] [i16 5, i16 -61, i16 -61, i16 -61, i16 -61, i16 -61, i16 -61, i16 -61, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 102, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -61, i16 -61], [41 x i16] [i16 5, i16 -62, i16 -62, i16 -62, i16 -62, i16 -62, i16 -62, i16 -62, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 103, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -62, i16 -62], [41 x i16] [i16 5, i16 -63, i16 -63, i16 -63, i16 -63, i16 -63, i16 -63, i16 -63, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 104, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -63, i16 -63], [41 x i16] [i16 5, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 105, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -64, i16 -64], [41 x i16] [i16 5, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 106, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -65, i16 -65], [41 x i16] [i16 5, i16 -66, i16 -66, i16 -66, i16 -66, i16 -66, i16 -66, i16 -66, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 107, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -66, i16 -66], [41 x i16] [i16 5, i16 -67, i16 -67, i16 -67, i16 -67, i16 -67, i16 -67, i16 -67, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 108, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -67, i16 -67], [41 x i16] [i16 5, i16 -68, i16 -68, i16 -68, i16 -68, i16 -68, i16 -68, i16 -68, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -68, i16 -68], [41 x i16] [i16 5, i16 -69, i16 -69, i16 -69, i16 -69, i16 -69, i16 -69, i16 -69, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 109, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -69, i16 -69], [41 x i16] [i16 5, i16 -70, i16 -70, i16 -70, i16 -70, i16 -70, i16 -70, i16 -70, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 110, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -70, i16 -70], [41 x i16] [i16 5, i16 -71, i16 -71, i16 -71, i16 -71, i16 -71, i16 -71, i16 -71, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 111, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -71, i16 -71], [41 x i16] [i16 5, i16 -72, i16 -72, i16 -72, i16 -72, i16 -72, i16 -72, i16 -72, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 112, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -72, i16 -72], [41 x i16] [i16 5, i16 -73, i16 -73, i16 -73, i16 -73, i16 -73, i16 -73, i16 -73, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 113, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -73, i16 -73], [41 x i16] [i16 5, i16 -74, i16 -74, i16 -74, i16 -74, i16 -74, i16 -74, i16 -74, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 114, i16 41, i16 41, i16 41, i16 115, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -74, i16 -74], [41 x i16] [i16 5, i16 -75, i16 -75, i16 -75, i16 -75, i16 -75, i16 -75, i16 -75, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 116, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -75, i16 -75], [41 x i16] [i16 5, i16 -76, i16 -76, i16 -76, i16 -76, i16 -76, i16 -76, i16 -76, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 117, i16 41, i16 41, i16 41, i16 41, i16 -76, i16 -76], [41 x i16] [i16 5, i16 -77, i16 -77, i16 -77, i16 -77, i16 -77, i16 -77, i16 -77, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 118, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 119, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -77, i16 -77], [41 x i16] [i16 5, i16 -78, i16 -78, i16 -78, i16 -78, i16 -78, i16 -78, i16 -78, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 120, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -78, i16 -78], [41 x i16] [i16 5, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79], [41 x i16] [i16 5, i16 80, i16 80, i16 80, i16 80, i16 80, i16 -80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80], [41 x i16] [i16 5, i16 81, i16 81, i16 81, i16 81, i16 81, i16 -81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 -81], [41 x i16] [i16 5, i16 81, i16 81, i16 81, i16 81, i16 81, i16 82, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 83], [41 x i16] [i16 5, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83], [41 x i16] [i16 5, i16 -84, i16 -84, i16 -84, i16 -84, i16 -84, i16 -84, i16 -84, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -84, i16 -84], [41 x i16] [i16 5, i16 -85, i16 -85, i16 -85, i16 -85, i16 -85, i16 -85, i16 -85, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 121, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -85, i16 -85], [41 x i16] [i16 5, i16 -86, i16 -86, i16 -86, i16 -86, i16 -86, i16 -86, i16 -86, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 122, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -86, i16 -86], [41 x i16] [i16 5, i16 -87, i16 -87, i16 -87, i16 -87, i16 -87, i16 -87, i16 -87, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 123, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -87, i16 -87], [41 x i16] [i16 5, i16 -88, i16 -88, i16 -88, i16 -88, i16 -88, i16 -88, i16 -88, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 124, i16 41, i16 41, i16 41, i16 41, i16 -88, i16 -88], [41 x i16] [i16 5, i16 -89, i16 -89, i16 -89, i16 -89, i16 -89, i16 -89, i16 -89, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -89, i16 -89], [41 x i16] [i16 5, i16 -90, i16 -90, i16 -90, i16 -90, i16 -90, i16 -90, i16 -90, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 125, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -90, i16 -90], [41 x i16] [i16 5, i16 -91, i16 -91, i16 -91, i16 -91, i16 -91, i16 -91, i16 -91, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 126, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -91, i16 -91], [41 x i16] [i16 5, i16 -92, i16 -92, i16 -92, i16 -92, i16 -92, i16 -92, i16 -92, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 127, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -92, i16 -92], [41 x i16] [i16 5, i16 -93, i16 -93, i16 -93, i16 -93, i16 -93, i16 -93, i16 -93, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -93, i16 -93], [41 x i16] [i16 5, i16 -94, i16 -94, i16 -94, i16 -94, i16 -94, i16 -94, i16 -94, i16 41, i16 41, i16 41, i16 41, i16 41, i16 128, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -94, i16 -94], [41 x i16] [i16 5, i16 -95, i16 -95, i16 -95, i16 -95, i16 -95, i16 -95, i16 -95, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 129, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 130, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -95, i16 -95], [41 x i16] [i16 5, i16 -96, i16 -96, i16 -96, i16 -96, i16 -96, i16 -96, i16 -96, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 131, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -96, i16 -96], [41 x i16] [i16 5, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 132, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -97, i16 -97], [41 x i16] [i16 5, i16 -98, i16 -98, i16 -98, i16 -98, i16 -98, i16 -98, i16 -98, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 133, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 134, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -98, i16 -98], [41 x i16] [i16 5, i16 -99, i16 -99, i16 -99, i16 -99, i16 -99, i16 -99, i16 -99, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 135, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -99, i16 -99], [41 x i16] [i16 5, i16 -100, i16 -100, i16 -100, i16 -100, i16 -100, i16 -100, i16 -100, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 136, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -100, i16 -100], [41 x i16] [i16 5, i16 -101, i16 -101, i16 -101, i16 -101, i16 -101, i16 -101, i16 -101, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 137, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -101, i16 -101], [41 x i16] [i16 5, i16 -102, i16 -102, i16 -102, i16 -102, i16 -102, i16 -102, i16 -102, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 138, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -102, i16 -102], [41 x i16] [i16 5, i16 -103, i16 -103, i16 -103, i16 -103, i16 -103, i16 -103, i16 -103, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 139, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -103, i16 -103], [41 x i16] [i16 5, i16 -104, i16 -104, i16 -104, i16 -104, i16 -104, i16 -104, i16 -104, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 140, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -104, i16 -104], [41 x i16] [i16 5, i16 -105, i16 -105, i16 -105, i16 -105, i16 -105, i16 -105, i16 -105, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 141, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -105, i16 -105], [41 x i16] [i16 5, i16 -106, i16 -106, i16 -106, i16 -106, i16 -106, i16 -106, i16 -106, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 142, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -106, i16 -106], [41 x i16] [i16 5, i16 -107, i16 -107, i16 -107, i16 -107, i16 -107, i16 -107, i16 -107, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -107, i16 -107], [41 x i16] [i16 5, i16 -108, i16 -108, i16 -108, i16 -108, i16 -108, i16 -108, i16 -108, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 143, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -108, i16 -108], [41 x i16] [i16 5, i16 -109, i16 -109, i16 -109, i16 -109, i16 -109, i16 -109, i16 -109, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 144, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -109, i16 -109], [41 x i16] [i16 5, i16 -110, i16 -110, i16 -110, i16 -110, i16 -110, i16 -110, i16 -110, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 145, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -110, i16 -110], [41 x i16] [i16 5, i16 -111, i16 -111, i16 -111, i16 -111, i16 -111, i16 -111, i16 -111, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 146, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -111, i16 -111], [41 x i16] [i16 5, i16 -112, i16 -112, i16 -112, i16 -112, i16 -112, i16 -112, i16 -112, i16 41, i16 41, i16 41, i16 41, i16 41, i16 147, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -112, i16 -112], [41 x i16] [i16 5, i16 -113, i16 -113, i16 -113, i16 -113, i16 -113, i16 -113, i16 -113, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 148, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -113, i16 -113], [41 x i16] [i16 5, i16 -114, i16 -114, i16 -114, i16 -114, i16 -114, i16 -114, i16 -114, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 149, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -114, i16 -114], [41 x i16] [i16 5, i16 -115, i16 -115, i16 -115, i16 -115, i16 -115, i16 -115, i16 -115, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 150, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -115, i16 -115], [41 x i16] [i16 5, i16 -116, i16 -116, i16 -116, i16 -116, i16 -116, i16 -116, i16 -116, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 151, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -116, i16 -116], [41 x i16] [i16 5, i16 -117, i16 -117, i16 -117, i16 -117, i16 -117, i16 -117, i16 -117, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 152, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -117, i16 -117], [41 x i16] [i16 5, i16 -118, i16 -118, i16 -118, i16 -118, i16 -118, i16 -118, i16 -118, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 153, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -118, i16 -118], [41 x i16] [i16 5, i16 -119, i16 -119, i16 -119, i16 -119, i16 -119, i16 -119, i16 -119, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 154, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -119, i16 -119], [41 x i16] [i16 5, i16 -120, i16 -120, i16 -120, i16 -120, i16 -120, i16 -120, i16 -120, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 155, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -120, i16 -120], [41 x i16] [i16 5, i16 -121, i16 -121, i16 -121, i16 -121, i16 -121, i16 -121, i16 -121, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 156, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -121, i16 -121], [41 x i16] [i16 5, i16 -122, i16 -122, i16 -122, i16 -122, i16 -122, i16 -122, i16 -122, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 157, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -122, i16 -122], [41 x i16] [i16 5, i16 -123, i16 -123, i16 -123, i16 -123, i16 -123, i16 -123, i16 -123, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 158, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -123, i16 -123], [41 x i16] [i16 5, i16 -124, i16 -124, i16 -124, i16 -124, i16 -124, i16 -124, i16 -124, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 159, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -124, i16 -124], [41 x i16] [i16 5, i16 -125, i16 -125, i16 -125, i16 -125, i16 -125, i16 -125, i16 -125, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 160, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -125, i16 -125], [41 x i16] [i16 5, i16 -126, i16 -126, i16 -126, i16 -126, i16 -126, i16 -126, i16 -126, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -126, i16 -126], [41 x i16] [i16 5, i16 -127, i16 -127, i16 -127, i16 -127, i16 -127, i16 -127, i16 -127, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 161, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -127, i16 -127], [41 x i16] [i16 5, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 162, i16 163, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -128, i16 -128], [41 x i16] [i16 5, i16 -129, i16 -129, i16 -129, i16 -129, i16 -129, i16 -129, i16 -129, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 164, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -129, i16 -129], [41 x i16] [i16 5, i16 -130, i16 -130, i16 -130, i16 -130, i16 -130, i16 -130, i16 -130, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 165, i16 41, i16 41, i16 41, i16 -130, i16 -130], [41 x i16] [i16 5, i16 -131, i16 -131, i16 -131, i16 -131, i16 -131, i16 -131, i16 -131, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 166, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -131, i16 -131], [41 x i16] [i16 5, i16 -132, i16 -132, i16 -132, i16 -132, i16 -132, i16 -132, i16 -132, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 167, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -132, i16 -132], [41 x i16] [i16 5, i16 -133, i16 -133, i16 -133, i16 -133, i16 -133, i16 -133, i16 -133, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 168, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -133, i16 -133], [41 x i16] [i16 5, i16 -134, i16 -134, i16 -134, i16 -134, i16 -134, i16 -134, i16 -134, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 169, i16 41, i16 41, i16 41, i16 41, i16 -134, i16 -134], [41 x i16] [i16 5, i16 -135, i16 -135, i16 -135, i16 -135, i16 -135, i16 -135, i16 -135, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 170, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -135, i16 -135], [41 x i16] [i16 5, i16 -136, i16 -136, i16 -136, i16 -136, i16 -136, i16 -136, i16 -136, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 171, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -136, i16 -136], [41 x i16] [i16 5, i16 -137, i16 -137, i16 -137, i16 -137, i16 -137, i16 -137, i16 -137, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 172, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -137, i16 -137], [41 x i16] [i16 5, i16 -138, i16 -138, i16 -138, i16 -138, i16 -138, i16 -138, i16 -138, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 173, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -138, i16 -138], [41 x i16] [i16 5, i16 -139, i16 -139, i16 -139, i16 -139, i16 -139, i16 -139, i16 -139, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 174, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -139, i16 -139], [41 x i16] [i16 5, i16 -140, i16 -140, i16 -140, i16 -140, i16 -140, i16 -140, i16 -140, i16 41, i16 41, i16 41, i16 41, i16 41, i16 175, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -140, i16 -140], [41 x i16] [i16 5, i16 -141, i16 -141, i16 -141, i16 -141, i16 -141, i16 -141, i16 -141, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 176, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -141, i16 -141], [41 x i16] [i16 5, i16 -142, i16 -142, i16 -142, i16 -142, i16 -142, i16 -142, i16 -142, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -142, i16 -142], [41 x i16] [i16 5, i16 -143, i16 -143, i16 -143, i16 -143, i16 -143, i16 -143, i16 -143, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 177, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -143, i16 -143], [41 x i16] [i16 5, i16 -144, i16 -144, i16 -144, i16 -144, i16 -144, i16 -144, i16 -144, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 178, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -144, i16 -144], [41 x i16] [i16 5, i16 -145, i16 -145, i16 -145, i16 -145, i16 -145, i16 -145, i16 -145, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 179, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -145, i16 -145], [41 x i16] [i16 5, i16 -146, i16 -146, i16 -146, i16 -146, i16 -146, i16 -146, i16 -146, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 180, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -146, i16 -146], [41 x i16] [i16 5, i16 -147, i16 -147, i16 -147, i16 -147, i16 -147, i16 -147, i16 -147, i16 41, i16 41, i16 41, i16 181, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 182, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 183, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -147, i16 -147], [41 x i16] [i16 5, i16 -148, i16 -148, i16 -148, i16 -148, i16 -148, i16 -148, i16 -148, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 184, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -148, i16 -148], [41 x i16] [i16 5, i16 -149, i16 -149, i16 -149, i16 -149, i16 -149, i16 -149, i16 -149, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 185, i16 41, i16 41, i16 41, i16 41, i16 -149, i16 -149], [41 x i16] [i16 5, i16 -150, i16 -150, i16 -150, i16 -150, i16 -150, i16 -150, i16 -150, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -150, i16 -150], [41 x i16] [i16 5, i16 -151, i16 -151, i16 -151, i16 -151, i16 -151, i16 -151, i16 -151, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 186, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -151, i16 -151], [41 x i16] [i16 5, i16 -152, i16 -152, i16 -152, i16 -152, i16 -152, i16 -152, i16 -152, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -152, i16 -152], [41 x i16] [i16 5, i16 -153, i16 -153, i16 -153, i16 -153, i16 -153, i16 -153, i16 -153, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 187, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -153, i16 -153], [41 x i16] [i16 5, i16 -154, i16 -154, i16 -154, i16 -154, i16 -154, i16 -154, i16 -154, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 188, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -154, i16 -154], [41 x i16] [i16 5, i16 -155, i16 -155, i16 -155, i16 -155, i16 -155, i16 -155, i16 -155, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 189, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -155, i16 -155], [41 x i16] [i16 5, i16 -156, i16 -156, i16 -156, i16 -156, i16 -156, i16 -156, i16 -156, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 190, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -156, i16 -156], [41 x i16] [i16 5, i16 -157, i16 -157, i16 -157, i16 -157, i16 -157, i16 -157, i16 -157, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 191, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -157, i16 -157], [41 x i16] [i16 5, i16 -158, i16 -158, i16 -158, i16 -158, i16 -158, i16 -158, i16 -158, i16 41, i16 41, i16 41, i16 41, i16 41, i16 192, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -158, i16 -158], [41 x i16] [i16 5, i16 -159, i16 -159, i16 -159, i16 -159, i16 -159, i16 -159, i16 -159, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 193, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -159, i16 -159], [41 x i16] [i16 5, i16 -160, i16 -160, i16 -160, i16 -160, i16 -160, i16 -160, i16 -160, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 194, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -160, i16 -160], [41 x i16] [i16 5, i16 -161, i16 -161, i16 -161, i16 -161, i16 -161, i16 -161, i16 -161, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 195, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -161, i16 -161], [41 x i16] [i16 5, i16 -162, i16 -162, i16 -162, i16 -162, i16 -162, i16 -162, i16 -162, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 196, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -162, i16 -162], [41 x i16] [i16 5, i16 -163, i16 -163, i16 -163, i16 -163, i16 -163, i16 -163, i16 -163, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 197, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -163, i16 -163], [41 x i16] [i16 5, i16 -164, i16 -164, i16 -164, i16 -164, i16 -164, i16 -164, i16 -164, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -164, i16 -164], [41 x i16] [i16 5, i16 -165, i16 -165, i16 -165, i16 -165, i16 -165, i16 -165, i16 -165, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -165, i16 -165], [41 x i16] [i16 5, i16 -166, i16 -166, i16 -166, i16 -166, i16 -166, i16 -166, i16 -166, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 198, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -166, i16 -166], [41 x i16] [i16 5, i16 -167, i16 -167, i16 -167, i16 -167, i16 -167, i16 -167, i16 -167, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -167, i16 -167], [41 x i16] [i16 5, i16 -168, i16 -168, i16 -168, i16 -168, i16 -168, i16 -168, i16 -168, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 199, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -168, i16 -168], [41 x i16] [i16 5, i16 -169, i16 -169, i16 -169, i16 -169, i16 -169, i16 -169, i16 -169, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 200, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -169, i16 -169], [41 x i16] [i16 5, i16 -170, i16 -170, i16 -170, i16 -170, i16 -170, i16 -170, i16 -170, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 201, i16 -170, i16 -170], [41 x i16] [i16 5, i16 -171, i16 -171, i16 -171, i16 -171, i16 -171, i16 -171, i16 -171, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 202, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -171, i16 -171], [41 x i16] [i16 5, i16 -172, i16 -172, i16 -172, i16 -172, i16 -172, i16 -172, i16 -172, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 203, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -172, i16 -172], [41 x i16] [i16 5, i16 -173, i16 -173, i16 -173, i16 -173, i16 -173, i16 -173, i16 -173, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 204, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -173, i16 -173], [41 x i16] [i16 5, i16 -174, i16 -174, i16 -174, i16 -174, i16 -174, i16 -174, i16 -174, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 205, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -174, i16 -174], [41 x i16] [i16 5, i16 -175, i16 -175, i16 -175, i16 -175, i16 -175, i16 -175, i16 -175, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 206, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -175, i16 -175], [41 x i16] [i16 5, i16 -176, i16 -176, i16 -176, i16 -176, i16 -176, i16 -176, i16 -176, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -176, i16 -176], [41 x i16] [i16 5, i16 -177, i16 -177, i16 -177, i16 -177, i16 -177, i16 -177, i16 -177, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 207, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -177, i16 -177], [41 x i16] [i16 5, i16 -178, i16 -178, i16 -178, i16 -178, i16 -178, i16 -178, i16 -178, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 208, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -178, i16 -178], [41 x i16] [i16 5, i16 -179, i16 -179, i16 -179, i16 -179, i16 -179, i16 -179, i16 -179, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 209, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -179, i16 -179], [41 x i16] [i16 5, i16 -180, i16 -180, i16 -180, i16 -180, i16 -180, i16 -180, i16 -180, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 210, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -180, i16 -180], [41 x i16] [i16 5, i16 -181, i16 -181, i16 -181, i16 -181, i16 -181, i16 -181, i16 -181, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 211, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -181, i16 -181], [41 x i16] [i16 5, i16 -182, i16 -182, i16 -182, i16 -182, i16 -182, i16 -182, i16 -182, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 212, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -182, i16 -182], [41 x i16] [i16 5, i16 -183, i16 -183, i16 -183, i16 -183, i16 -183, i16 -183, i16 -183, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 213, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -183, i16 -183], [41 x i16] [i16 5, i16 -184, i16 -184, i16 -184, i16 -184, i16 -184, i16 -184, i16 -184, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -184, i16 -184], [41 x i16] [i16 5, i16 -185, i16 -185, i16 -185, i16 -185, i16 -185, i16 -185, i16 -185, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 214, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -185, i16 -185], [41 x i16] [i16 5, i16 -186, i16 -186, i16 -186, i16 -186, i16 -186, i16 -186, i16 -186, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 215, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -186, i16 -186], [41 x i16] [i16 5, i16 -187, i16 -187, i16 -187, i16 -187, i16 -187, i16 -187, i16 -187, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 216, i16 41, i16 41, i16 -187, i16 -187], [41 x i16] [i16 5, i16 -188, i16 -188, i16 -188, i16 -188, i16 -188, i16 -188, i16 -188, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 217, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -188, i16 -188], [41 x i16] [i16 5, i16 -189, i16 -189, i16 -189, i16 -189, i16 -189, i16 -189, i16 -189, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 218, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -189, i16 -189], [41 x i16] [i16 5, i16 -190, i16 -190, i16 -190, i16 -190, i16 -190, i16 -190, i16 -190, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -190, i16 -190], [41 x i16] [i16 5, i16 -191, i16 -191, i16 -191, i16 -191, i16 -191, i16 -191, i16 -191, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -191, i16 -191], [41 x i16] [i16 5, i16 -192, i16 -192, i16 -192, i16 -192, i16 -192, i16 -192, i16 -192, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 219, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -192, i16 -192], [41 x i16] [i16 5, i16 -193, i16 -193, i16 -193, i16 -193, i16 -193, i16 -193, i16 -193, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -193, i16 -193], [41 x i16] [i16 5, i16 -194, i16 -194, i16 -194, i16 -194, i16 -194, i16 -194, i16 -194, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 220, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -194, i16 -194], [41 x i16] [i16 5, i16 -195, i16 -195, i16 -195, i16 -195, i16 -195, i16 -195, i16 -195, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 221, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -195, i16 -195], [41 x i16] [i16 5, i16 -196, i16 -196, i16 -196, i16 -196, i16 -196, i16 -196, i16 -196, i16 41, i16 41, i16 41, i16 41, i16 41, i16 222, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -196, i16 -196], [41 x i16] [i16 5, i16 -197, i16 -197, i16 -197, i16 -197, i16 -197, i16 -197, i16 -197, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 223, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -197, i16 -197], [41 x i16] [i16 5, i16 -198, i16 -198, i16 -198, i16 -198, i16 -198, i16 -198, i16 -198, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -198, i16 -198], [41 x i16] [i16 5, i16 -199, i16 -199, i16 -199, i16 -199, i16 -199, i16 -199, i16 -199, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -199, i16 -199], [41 x i16] [i16 5, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 224, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -200, i16 -200], [41 x i16] [i16 5, i16 -201, i16 -201, i16 -201, i16 -201, i16 -201, i16 -201, i16 -201, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -201, i16 -201], [41 x i16] [i16 5, i16 -202, i16 -202, i16 -202, i16 -202, i16 -202, i16 -202, i16 -202, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 225, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -202, i16 -202], [41 x i16] [i16 5, i16 -203, i16 -203, i16 -203, i16 -203, i16 -203, i16 -203, i16 -203, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 226, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -203, i16 -203], [41 x i16] [i16 5, i16 -204, i16 -204, i16 -204, i16 -204, i16 -204, i16 -204, i16 -204, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 227, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -204, i16 -204], [41 x i16] [i16 5, i16 -205, i16 -205, i16 -205, i16 -205, i16 -205, i16 -205, i16 -205, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 228, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 229, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -205, i16 -205], [41 x i16] [i16 5, i16 -206, i16 -206, i16 -206, i16 -206, i16 -206, i16 -206, i16 -206, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 230, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -206, i16 -206], [41 x i16] [i16 5, i16 -207, i16 -207, i16 -207, i16 -207, i16 -207, i16 -207, i16 -207, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 231, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -207, i16 -207], [41 x i16] [i16 5, i16 -208, i16 -208, i16 -208, i16 -208, i16 -208, i16 -208, i16 -208, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 232, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -208, i16 -208], [41 x i16] [i16 5, i16 -209, i16 -209, i16 -209, i16 -209, i16 -209, i16 -209, i16 -209, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 233, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -209, i16 -209], [41 x i16] [i16 5, i16 -210, i16 -210, i16 -210, i16 -210, i16 -210, i16 -210, i16 -210, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 234, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -210, i16 -210], [41 x i16] [i16 5, i16 -211, i16 -211, i16 -211, i16 -211, i16 -211, i16 -211, i16 -211, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 235, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -211, i16 -211], [41 x i16] [i16 5, i16 -212, i16 -212, i16 -212, i16 -212, i16 -212, i16 -212, i16 -212, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 236, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -212, i16 -212], [41 x i16] [i16 5, i16 -213, i16 -213, i16 -213, i16 -213, i16 -213, i16 -213, i16 -213, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 237, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -213, i16 -213], [41 x i16] [i16 5, i16 -214, i16 -214, i16 -214, i16 -214, i16 -214, i16 -214, i16 -214, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -214, i16 -214], [41 x i16] [i16 5, i16 -215, i16 -215, i16 -215, i16 -215, i16 -215, i16 -215, i16 -215, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 238, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -215, i16 -215], [41 x i16] [i16 5, i16 -216, i16 -216, i16 -216, i16 -216, i16 -216, i16 -216, i16 -216, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 239, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -216, i16 -216], [41 x i16] [i16 5, i16 -217, i16 -217, i16 -217, i16 -217, i16 -217, i16 -217, i16 -217, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 240, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -217, i16 -217], [41 x i16] [i16 5, i16 -218, i16 -218, i16 -218, i16 -218, i16 -218, i16 -218, i16 -218, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 241, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -218, i16 -218], [41 x i16] [i16 5, i16 -219, i16 -219, i16 -219, i16 -219, i16 -219, i16 -219, i16 -219, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 242, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -219, i16 -219], [41 x i16] [i16 5, i16 -220, i16 -220, i16 -220, i16 -220, i16 -220, i16 -220, i16 -220, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 243, i16 41, i16 41, i16 41, i16 41, i16 -220, i16 -220], [41 x i16] [i16 5, i16 -221, i16 -221, i16 -221, i16 -221, i16 -221, i16 -221, i16 -221, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 244, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -221, i16 -221], [41 x i16] [i16 5, i16 -222, i16 -222, i16 -222, i16 -222, i16 -222, i16 -222, i16 -222, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 245, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -222, i16 -222], [41 x i16] [i16 5, i16 -223, i16 -223, i16 -223, i16 -223, i16 -223, i16 -223, i16 -223, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 246, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -223, i16 -223], [41 x i16] [i16 5, i16 -224, i16 -224, i16 -224, i16 -224, i16 -224, i16 -224, i16 -224, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -224, i16 -224], [41 x i16] [i16 5, i16 -225, i16 -225, i16 -225, i16 -225, i16 -225, i16 -225, i16 -225, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 247, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -225, i16 -225], [41 x i16] [i16 5, i16 -226, i16 -226, i16 -226, i16 -226, i16 -226, i16 -226, i16 -226, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 248, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -226, i16 -226], [41 x i16] [i16 5, i16 -227, i16 -227, i16 -227, i16 -227, i16 -227, i16 -227, i16 -227, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 249, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -227, i16 -227], [41 x i16] [i16 5, i16 -228, i16 -228, i16 -228, i16 -228, i16 -228, i16 -228, i16 -228, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -228, i16 -228], [41 x i16] [i16 5, i16 -229, i16 -229, i16 -229, i16 -229, i16 -229, i16 -229, i16 -229, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -229, i16 -229], [41 x i16] [i16 5, i16 -230, i16 -230, i16 -230, i16 -230, i16 -230, i16 -230, i16 -230, i16 41, i16 41, i16 41, i16 41, i16 41, i16 250, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -230, i16 -230], [41 x i16] [i16 5, i16 -231, i16 -231, i16 -231, i16 -231, i16 -231, i16 -231, i16 -231, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 251, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -231, i16 -231], [41 x i16] [i16 5, i16 -232, i16 -232, i16 -232, i16 -232, i16 -232, i16 -232, i16 -232, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 252, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -232, i16 -232], [41 x i16] [i16 5, i16 -233, i16 -233, i16 -233, i16 -233, i16 -233, i16 -233, i16 -233, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 253, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -233, i16 -233], [41 x i16] [i16 5, i16 -234, i16 -234, i16 -234, i16 -234, i16 -234, i16 -234, i16 -234, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 254, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -234, i16 -234], [41 x i16] [i16 5, i16 -235, i16 -235, i16 -235, i16 -235, i16 -235, i16 -235, i16 -235, i16 41, i16 41, i16 41, i16 41, i16 255, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -235, i16 -235], [41 x i16] [i16 5, i16 -236, i16 -236, i16 -236, i16 -236, i16 -236, i16 -236, i16 -236, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 256, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -236, i16 -236], [41 x i16] [i16 5, i16 -237, i16 -237, i16 -237, i16 -237, i16 -237, i16 -237, i16 -237, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 257, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -237, i16 -237], [41 x i16] [i16 5, i16 -238, i16 -238, i16 -238, i16 -238, i16 -238, i16 -238, i16 -238, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -238, i16 -238], [41 x i16] [i16 5, i16 -239, i16 -239, i16 -239, i16 -239, i16 -239, i16 -239, i16 -239, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -239, i16 -239], [41 x i16] [i16 5, i16 -240, i16 -240, i16 -240, i16 -240, i16 -240, i16 -240, i16 -240, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 258, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -240, i16 -240], [41 x i16] [i16 5, i16 -241, i16 -241, i16 -241, i16 -241, i16 -241, i16 -241, i16 -241, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -241, i16 -241], [41 x i16] [i16 5, i16 -242, i16 -242, i16 -242, i16 -242, i16 -242, i16 -242, i16 -242, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 259, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -242, i16 -242], [41 x i16] [i16 5, i16 -243, i16 -243, i16 -243, i16 -243, i16 -243, i16 -243, i16 -243, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 260, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -243, i16 -243], [41 x i16] [i16 5, i16 -244, i16 -244, i16 -244, i16 -244, i16 -244, i16 -244, i16 -244, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 261, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -244, i16 -244], [41 x i16] [i16 5, i16 -245, i16 -245, i16 -245, i16 -245, i16 -245, i16 -245, i16 -245, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 262, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -245, i16 -245], [41 x i16] [i16 5, i16 -246, i16 -246, i16 -246, i16 -246, i16 -246, i16 -246, i16 -246, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 263, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -246, i16 -246], [41 x i16] [i16 5, i16 -247, i16 -247, i16 -247, i16 -247, i16 -247, i16 -247, i16 -247, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 264, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -247, i16 -247], [41 x i16] [i16 5, i16 -248, i16 -248, i16 -248, i16 -248, i16 -248, i16 -248, i16 -248, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 265, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -248, i16 -248], [41 x i16] [i16 5, i16 -249, i16 -249, i16 -249, i16 -249, i16 -249, i16 -249, i16 -249, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 266, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -249, i16 -249], [41 x i16] [i16 5, i16 -250, i16 -250, i16 -250, i16 -250, i16 -250, i16 -250, i16 -250, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 267, i16 268, i16 41, i16 269, i16 270, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 271, i16 41, i16 41, i16 272, i16 273, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -250, i16 -250], [41 x i16] [i16 5, i16 -251, i16 -251, i16 -251, i16 -251, i16 -251, i16 -251, i16 -251, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 274, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -251, i16 -251], [41 x i16] [i16 5, i16 -252, i16 -252, i16 -252, i16 -252, i16 -252, i16 -252, i16 -252, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 275, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -252, i16 -252], [41 x i16] [i16 5, i16 -253, i16 -253, i16 -253, i16 -253, i16 -253, i16 -253, i16 -253, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 276, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -253, i16 -253], [41 x i16] [i16 5, i16 -254, i16 -254, i16 -254, i16 -254, i16 -254, i16 -254, i16 -254, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 277, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -254, i16 -254], [41 x i16] [i16 5, i16 -255, i16 -255, i16 -255, i16 -255, i16 -255, i16 -255, i16 -255, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 278, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -255, i16 -255], [41 x i16] [i16 5, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -256, i16 -256], [41 x i16] [i16 5, i16 -257, i16 -257, i16 -257, i16 -257, i16 -257, i16 -257, i16 -257, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 279, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -257, i16 -257], [41 x i16] [i16 5, i16 -258, i16 -258, i16 -258, i16 -258, i16 -258, i16 -258, i16 -258, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 280, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -258, i16 -258], [41 x i16] [i16 5, i16 -259, i16 -259, i16 -259, i16 -259, i16 -259, i16 -259, i16 -259, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 281, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -259, i16 -259], [41 x i16] [i16 5, i16 -260, i16 -260, i16 -260, i16 -260, i16 -260, i16 -260, i16 -260, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 282, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -260, i16 -260], [41 x i16] [i16 5, i16 -261, i16 -261, i16 -261, i16 -261, i16 -261, i16 -261, i16 -261, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 283, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -261, i16 -261], [41 x i16] [i16 5, i16 -262, i16 -262, i16 -262, i16 -262, i16 -262, i16 -262, i16 -262, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 284, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -262, i16 -262], [41 x i16] [i16 5, i16 -263, i16 -263, i16 -263, i16 -263, i16 -263, i16 -263, i16 -263, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 285, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -263, i16 -263], [41 x i16] [i16 5, i16 -264, i16 -264, i16 -264, i16 -264, i16 -264, i16 -264, i16 -264, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -264, i16 -264], [41 x i16] [i16 5, i16 -265, i16 -265, i16 -265, i16 -265, i16 -265, i16 -265, i16 -265, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -265, i16 -265], [41 x i16] [i16 5, i16 -266, i16 -266, i16 -266, i16 -266, i16 -266, i16 -266, i16 -266, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 286, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -266, i16 -266], [41 x i16] [i16 5, i16 -267, i16 -267, i16 -267, i16 -267, i16 -267, i16 -267, i16 -267, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 287, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -267, i16 -267], [41 x i16] [i16 5, i16 -268, i16 -268, i16 -268, i16 -268, i16 -268, i16 -268, i16 -268, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 288, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -268, i16 -268], [41 x i16] [i16 5, i16 -269, i16 -269, i16 -269, i16 -269, i16 -269, i16 -269, i16 -269, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 289, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -269, i16 -269], [41 x i16] [i16 5, i16 -270, i16 -270, i16 -270, i16 -270, i16 -270, i16 -270, i16 -270, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 290, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -270, i16 -270], [41 x i16] [i16 5, i16 -271, i16 -271, i16 -271, i16 -271, i16 -271, i16 -271, i16 -271, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 291, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -271, i16 -271], [41 x i16] [i16 5, i16 -272, i16 -272, i16 -272, i16 -272, i16 -272, i16 -272, i16 -272, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 292, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 293, i16 -272, i16 -272], [41 x i16] [i16 5, i16 -273, i16 -273, i16 -273, i16 -273, i16 -273, i16 -273, i16 -273, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 294, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -273, i16 -273], [41 x i16] [i16 5, i16 -274, i16 -274, i16 -274, i16 -274, i16 -274, i16 -274, i16 -274, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -274, i16 -274], [41 x i16] [i16 5, i16 -275, i16 -275, i16 -275, i16 -275, i16 -275, i16 -275, i16 -275, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 295, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -275, i16 -275], [41 x i16] [i16 5, i16 -276, i16 -276, i16 -276, i16 -276, i16 -276, i16 -276, i16 -276, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 296, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -276, i16 -276], [41 x i16] [i16 5, i16 -277, i16 -277, i16 -277, i16 -277, i16 -277, i16 -277, i16 -277, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 297, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -277, i16 -277], [41 x i16] [i16 5, i16 -278, i16 -278, i16 -278, i16 -278, i16 -278, i16 -278, i16 -278, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 298, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -278, i16 -278], [41 x i16] [i16 5, i16 -279, i16 -279, i16 -279, i16 -279, i16 -279, i16 -279, i16 -279, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 299, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -279, i16 -279], [41 x i16] [i16 5, i16 -280, i16 -280, i16 -280, i16 -280, i16 -280, i16 -280, i16 -280, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 300, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -280, i16 -280], [41 x i16] [i16 5, i16 -281, i16 -281, i16 -281, i16 -281, i16 -281, i16 -281, i16 -281, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 301, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -281, i16 -281], [41 x i16] [i16 5, i16 -282, i16 -282, i16 -282, i16 -282, i16 -282, i16 -282, i16 -282, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 302, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -282, i16 -282], [41 x i16] [i16 5, i16 -283, i16 -283, i16 -283, i16 -283, i16 -283, i16 -283, i16 -283, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 303, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -283, i16 -283], [41 x i16] [i16 5, i16 -284, i16 -284, i16 -284, i16 -284, i16 -284, i16 -284, i16 -284, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 304, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -284, i16 -284], [41 x i16] [i16 5, i16 -285, i16 -285, i16 -285, i16 -285, i16 -285, i16 -285, i16 -285, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 305, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -285, i16 -285], [41 x i16] [i16 5, i16 -286, i16 -286, i16 -286, i16 -286, i16 -286, i16 -286, i16 -286, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -286, i16 -286], [41 x i16] [i16 5, i16 -287, i16 -287, i16 -287, i16 -287, i16 -287, i16 -287, i16 -287, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 306, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -287, i16 -287], [41 x i16] [i16 5, i16 -288, i16 -288, i16 -288, i16 -288, i16 -288, i16 -288, i16 -288, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 307, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 308, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -288, i16 -288], [41 x i16] [i16 5, i16 -289, i16 -289, i16 -289, i16 -289, i16 -289, i16 -289, i16 -289, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 309, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -289, i16 -289], [41 x i16] [i16 5, i16 -290, i16 -290, i16 -290, i16 -290, i16 -290, i16 -290, i16 -290, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 310, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -290, i16 -290], [41 x i16] [i16 5, i16 -291, i16 -291, i16 -291, i16 -291, i16 -291, i16 -291, i16 -291, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 311, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -291, i16 -291], [41 x i16] [i16 5, i16 -292, i16 -292, i16 -292, i16 -292, i16 -292, i16 -292, i16 -292, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 312, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -292, i16 -292], [41 x i16] [i16 5, i16 -293, i16 -293, i16 -293, i16 -293, i16 -293, i16 -293, i16 -293, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 313, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -293, i16 -293], [41 x i16] [i16 5, i16 -294, i16 -294, i16 -294, i16 -294, i16 -294, i16 -294, i16 -294, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 314, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -294, i16 -294], [41 x i16] [i16 5, i16 -295, i16 -295, i16 -295, i16 -295, i16 -295, i16 -295, i16 -295, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -295, i16 -295], [41 x i16] [i16 5, i16 -296, i16 -296, i16 -296, i16 -296, i16 -296, i16 -296, i16 -296, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 315, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -296, i16 -296], [41 x i16] [i16 5, i16 -297, i16 -297, i16 -297, i16 -297, i16 -297, i16 -297, i16 -297, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 316, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -297, i16 -297], [41 x i16] [i16 5, i16 -298, i16 -298, i16 -298, i16 -298, i16 -298, i16 -298, i16 -298, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 317, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -298, i16 -298], [41 x i16] [i16 5, i16 -299, i16 -299, i16 -299, i16 -299, i16 -299, i16 -299, i16 -299, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 318, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -299, i16 -299], [41 x i16] [i16 5, i16 -300, i16 -300, i16 -300, i16 -300, i16 -300, i16 -300, i16 -300, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 319, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -300, i16 -300], [41 x i16] [i16 5, i16 -301, i16 -301, i16 -301, i16 -301, i16 -301, i16 -301, i16 -301, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 320, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -301, i16 -301], [41 x i16] [i16 5, i16 -302, i16 -302, i16 -302, i16 -302, i16 -302, i16 -302, i16 -302, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -302, i16 -302], [41 x i16] [i16 5, i16 -303, i16 -303, i16 -303, i16 -303, i16 -303, i16 -303, i16 -303, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -303, i16 -303], [41 x i16] [i16 5, i16 -304, i16 -304, i16 -304, i16 -304, i16 -304, i16 -304, i16 -304, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -304, i16 -304], [41 x i16] [i16 5, i16 -305, i16 -305, i16 -305, i16 -305, i16 -305, i16 -305, i16 -305, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -305, i16 -305], [41 x i16] [i16 5, i16 -306, i16 -306, i16 -306, i16 -306, i16 -306, i16 -306, i16 -306, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 321, i16 41, i16 41, i16 41, i16 41, i16 -306, i16 -306], [41 x i16] [i16 5, i16 -307, i16 -307, i16 -307, i16 -307, i16 -307, i16 -307, i16 -307, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 322, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -307, i16 -307], [41 x i16] [i16 5, i16 -308, i16 -308, i16 -308, i16 -308, i16 -308, i16 -308, i16 -308, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 323, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -308, i16 -308], [41 x i16] [i16 5, i16 -309, i16 -309, i16 -309, i16 -309, i16 -309, i16 -309, i16 -309, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 324, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -309, i16 -309], [41 x i16] [i16 5, i16 -310, i16 -310, i16 -310, i16 -310, i16 -310, i16 -310, i16 -310, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 325, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -310, i16 -310], [41 x i16] [i16 5, i16 -311, i16 -311, i16 -311, i16 -311, i16 -311, i16 -311, i16 -311, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 326, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -311, i16 -311], [41 x i16] [i16 5, i16 -312, i16 -312, i16 -312, i16 -312, i16 -312, i16 -312, i16 -312, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 327, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -312, i16 -312], [41 x i16] [i16 5, i16 -313, i16 -313, i16 -313, i16 -313, i16 -313, i16 -313, i16 -313, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 328, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -313, i16 -313], [41 x i16] [i16 5, i16 -314, i16 -314, i16 -314, i16 -314, i16 -314, i16 -314, i16 -314, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 329, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -314, i16 -314], [41 x i16] [i16 5, i16 -315, i16 -315, i16 -315, i16 -315, i16 -315, i16 -315, i16 -315, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -315, i16 -315], [41 x i16] [i16 5, i16 -316, i16 -316, i16 -316, i16 -316, i16 -316, i16 -316, i16 -316, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -316, i16 -316], [41 x i16] [i16 5, i16 -317, i16 -317, i16 -317, i16 -317, i16 -317, i16 -317, i16 -317, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -317, i16 -317], [41 x i16] [i16 5, i16 -318, i16 -318, i16 -318, i16 -318, i16 -318, i16 -318, i16 -318, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 330, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -318, i16 -318], [41 x i16] [i16 5, i16 -319, i16 -319, i16 -319, i16 -319, i16 -319, i16 -319, i16 -319, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 331, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -319, i16 -319], [41 x i16] [i16 5, i16 -320, i16 -320, i16 -320, i16 -320, i16 -320, i16 -320, i16 -320, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 332, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -320, i16 -320], [41 x i16] [i16 5, i16 -321, i16 -321, i16 -321, i16 -321, i16 -321, i16 -321, i16 -321, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 333, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -321, i16 -321], [41 x i16] [i16 5, i16 -322, i16 -322, i16 -322, i16 -322, i16 -322, i16 -322, i16 -322, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 334, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -322, i16 -322], [41 x i16] [i16 5, i16 -323, i16 -323, i16 -323, i16 -323, i16 -323, i16 -323, i16 -323, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 335, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -323, i16 -323], [41 x i16] [i16 5, i16 -324, i16 -324, i16 -324, i16 -324, i16 -324, i16 -324, i16 -324, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 336, i16 41, i16 41, i16 41, i16 41, i16 -324, i16 -324], [41 x i16] [i16 5, i16 -325, i16 -325, i16 -325, i16 -325, i16 -325, i16 -325, i16 -325, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 337, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -325, i16 -325], [41 x i16] [i16 5, i16 -326, i16 -326, i16 -326, i16 -326, i16 -326, i16 -326, i16 -326, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 338, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -326, i16 -326], [41 x i16] [i16 5, i16 -327, i16 -327, i16 -327, i16 -327, i16 -327, i16 -327, i16 -327, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 339, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -327, i16 -327], [41 x i16] [i16 5, i16 -328, i16 -328, i16 -328, i16 -328, i16 -328, i16 -328, i16 -328, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 340, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -328, i16 -328], [41 x i16] [i16 5, i16 -329, i16 -329, i16 -329, i16 -329, i16 -329, i16 -329, i16 -329, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 341, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -329, i16 -329], [41 x i16] [i16 5, i16 -330, i16 -330, i16 -330, i16 -330, i16 -330, i16 -330, i16 -330, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 342, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -330, i16 -330], [41 x i16] [i16 5, i16 -331, i16 -331, i16 -331, i16 -331, i16 -331, i16 -331, i16 -331, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 343, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -331, i16 -331], [41 x i16] [i16 5, i16 -332, i16 -332, i16 -332, i16 -332, i16 -332, i16 -332, i16 -332, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -332, i16 -332], [41 x i16] [i16 5, i16 -333, i16 -333, i16 -333, i16 -333, i16 -333, i16 -333, i16 -333, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 344, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -333, i16 -333], [41 x i16] [i16 5, i16 -334, i16 -334, i16 -334, i16 -334, i16 -334, i16 -334, i16 -334, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 345, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -334, i16 -334], [41 x i16] [i16 5, i16 -335, i16 -335, i16 -335, i16 -335, i16 -335, i16 -335, i16 -335, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 346, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -335, i16 -335], [41 x i16] [i16 5, i16 -336, i16 -336, i16 -336, i16 -336, i16 -336, i16 -336, i16 -336, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 347, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -336, i16 -336], [41 x i16] [i16 5, i16 -337, i16 -337, i16 -337, i16 -337, i16 -337, i16 -337, i16 -337, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 348, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -337, i16 -337], [41 x i16] [i16 5, i16 -338, i16 -338, i16 -338, i16 -338, i16 -338, i16 -338, i16 -338, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -338, i16 -338], [41 x i16] [i16 5, i16 -339, i16 -339, i16 -339, i16 -339, i16 -339, i16 -339, i16 -339, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 349, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -339, i16 -339], [41 x i16] [i16 5, i16 -340, i16 -340, i16 -340, i16 -340, i16 -340, i16 -340, i16 -340, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 350, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -340, i16 -340], [41 x i16] [i16 5, i16 -341, i16 -341, i16 -341, i16 -341, i16 -341, i16 -341, i16 -341, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -341, i16 -341], [41 x i16] [i16 5, i16 -342, i16 -342, i16 -342, i16 -342, i16 -342, i16 -342, i16 -342, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 351, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -342, i16 -342], [41 x i16] [i16 5, i16 -343, i16 -343, i16 -343, i16 -343, i16 -343, i16 -343, i16 -343, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -343, i16 -343], [41 x i16] [i16 5, i16 -344, i16 -344, i16 -344, i16 -344, i16 -344, i16 -344, i16 -344, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 352, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -344, i16 -344], [41 x i16] [i16 5, i16 -345, i16 -345, i16 -345, i16 -345, i16 -345, i16 -345, i16 -345, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 353, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -345, i16 -345], [41 x i16] [i16 5, i16 -346, i16 -346, i16 -346, i16 -346, i16 -346, i16 -346, i16 -346, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 354, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -346, i16 -346], [41 x i16] [i16 5, i16 -347, i16 -347, i16 -347, i16 -347, i16 -347, i16 -347, i16 -347, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 355, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -347, i16 -347], [41 x i16] [i16 5, i16 -348, i16 -348, i16 -348, i16 -348, i16 -348, i16 -348, i16 -348, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 356, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -348, i16 -348], [41 x i16] [i16 5, i16 -349, i16 -349, i16 -349, i16 -349, i16 -349, i16 -349, i16 -349, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 357, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -349, i16 -349], [41 x i16] [i16 5, i16 -350, i16 -350, i16 -350, i16 -350, i16 -350, i16 -350, i16 -350, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 358, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -350, i16 -350], [41 x i16] [i16 5, i16 -351, i16 -351, i16 -351, i16 -351, i16 -351, i16 -351, i16 -351, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -351, i16 -351], [41 x i16] [i16 5, i16 -352, i16 -352, i16 -352, i16 -352, i16 -352, i16 -352, i16 -352, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -352, i16 -352], [41 x i16] [i16 5, i16 -353, i16 -353, i16 -353, i16 -353, i16 -353, i16 -353, i16 -353, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 359, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -353, i16 -353], [41 x i16] [i16 5, i16 -354, i16 -354, i16 -354, i16 -354, i16 -354, i16 -354, i16 -354, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 360, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -354, i16 -354], [41 x i16] [i16 5, i16 -355, i16 -355, i16 -355, i16 -355, i16 -355, i16 -355, i16 -355, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 361, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -355, i16 -355], [41 x i16] [i16 5, i16 -356, i16 -356, i16 -356, i16 -356, i16 -356, i16 -356, i16 -356, i16 41, i16 41, i16 41, i16 41, i16 41, i16 362, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -356, i16 -356], [41 x i16] [i16 5, i16 -357, i16 -357, i16 -357, i16 -357, i16 -357, i16 -357, i16 -357, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 363, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -357, i16 -357], [41 x i16] [i16 5, i16 -358, i16 -358, i16 -358, i16 -358, i16 -358, i16 -358, i16 -358, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -358, i16 -358], [41 x i16] [i16 5, i16 -359, i16 -359, i16 -359, i16 -359, i16 -359, i16 -359, i16 -359, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 364, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -359, i16 -359], [41 x i16] [i16 5, i16 -360, i16 -360, i16 -360, i16 -360, i16 -360, i16 -360, i16 -360, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 365, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -360, i16 -360], [41 x i16] [i16 5, i16 -361, i16 -361, i16 -361, i16 -361, i16 -361, i16 -361, i16 -361, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -361, i16 -361], [41 x i16] [i16 5, i16 -362, i16 -362, i16 -362, i16 -362, i16 -362, i16 -362, i16 -362, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 366, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -362, i16 -362], [41 x i16] [i16 5, i16 -363, i16 -363, i16 -363, i16 -363, i16 -363, i16 -363, i16 -363, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -363, i16 -363], [41 x i16] [i16 5, i16 -364, i16 -364, i16 -364, i16 -364, i16 -364, i16 -364, i16 -364, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 367, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -364, i16 -364], [41 x i16] [i16 5, i16 -365, i16 -365, i16 -365, i16 -365, i16 -365, i16 -365, i16 -365, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 368, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -365, i16 -365], [41 x i16] [i16 5, i16 -366, i16 -366, i16 -366, i16 -366, i16 -366, i16 -366, i16 -366, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 369, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -366, i16 -366], [41 x i16] [i16 5, i16 -367, i16 -367, i16 -367, i16 -367, i16 -367, i16 -367, i16 -367, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 370, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -367, i16 -367], [41 x i16] [i16 5, i16 -368, i16 -368, i16 -368, i16 -368, i16 -368, i16 -368, i16 -368, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 371, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -368, i16 -368], [41 x i16] [i16 5, i16 -369, i16 -369, i16 -369, i16 -369, i16 -369, i16 -369, i16 -369, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 372, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -369, i16 -369], [41 x i16] [i16 5, i16 -370, i16 -370, i16 -370, i16 -370, i16 -370, i16 -370, i16 -370, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 373, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -370, i16 -370], [41 x i16] [i16 5, i16 -371, i16 -371, i16 -371, i16 -371, i16 -371, i16 -371, i16 -371, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 374, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -371, i16 -371], [41 x i16] [i16 5, i16 -372, i16 -372, i16 -372, i16 -372, i16 -372, i16 -372, i16 -372, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 375, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -372, i16 -372], [41 x i16] [i16 5, i16 -373, i16 -373, i16 -373, i16 -373, i16 -373, i16 -373, i16 -373, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -373, i16 -373], [41 x i16] [i16 5, i16 -374, i16 -374, i16 -374, i16 -374, i16 -374, i16 -374, i16 -374, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -374, i16 -374], [41 x i16] [i16 5, i16 -375, i16 -375, i16 -375, i16 -375, i16 -375, i16 -375, i16 -375, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 376, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -375, i16 -375], [41 x i16] [i16 5, i16 -376, i16 -376, i16 -376, i16 -376, i16 -376, i16 -376, i16 -376, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 377, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -376, i16 -376], [41 x i16] [i16 5, i16 -377, i16 -377, i16 -377, i16 -377, i16 -377, i16 -377, i16 -377, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 378, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -377, i16 -377], [41 x i16] [i16 5, i16 -378, i16 -378, i16 -378, i16 -378, i16 -378, i16 -378, i16 -378, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 379, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -378, i16 -378], [41 x i16] [i16 5, i16 -379, i16 -379, i16 -379, i16 -379, i16 -379, i16 -379, i16 -379, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -379, i16 -379]], align 16
@yy_ec = internal unnamed_addr constant [256 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 1, i32 1, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 1, i32 1, i32 1, i32 4, i32 1, i32 1, i32 5, i32 5, i32 6, i32 1, i32 5, i32 7, i32 5, i32 1, i32 8, i32 9, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 5, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 10, i32 10, i32 10, i32 11, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 12, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 5, i32 1, i32 5, i32 1, i32 13, i32 1, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 10, i32 39, i32 1, i32 40, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@yy_accept = internal unnamed_addr constant [380 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 70, i16 68, i16 65, i16 66, i16 57, i16 67, i16 68, i16 67, i16 63, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 68, i16 60, i16 61, i16 65, i16 57, i16 59, i16 56, i16 63, i16 64, i16 64, i16 64, i16 64, i16 64, i16 5, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 39, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 58, i16 60, i16 61, i16 61, i16 62, i16 1, i16 64, i16 64, i16 64, i16 64, i16 7, i16 64, i16 64, i16 64, i16 11, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 37, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 9, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 36, i16 64, i16 64, i16 64, i16 64, i16 64, i16 47, i16 64, i16 50, i16 64, i16 52, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 14, i16 15, i16 64, i16 17, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 35, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 48, i16 64, i16 64, i16 64, i16 64, i16 64, i16 2, i16 3, i16 64, i16 6, i16 64, i16 64, i16 64, i16 64, i16 16, i16 18, i16 64, i16 20, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 49, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 19, i16 64, i16 64, i16 64, i16 24, i16 25, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 51, i16 53, i16 64, i16 55, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 45, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 21, i16 22, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 38, i16 40, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 23, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 41, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 8, i16 10, i16 12, i16 13, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 42, i16 43, i16 44, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 4, i16 64, i16 64, i16 64, i16 64, i16 64, i16 31, i16 64, i16 64, i16 34, i16 64, i16 54, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 46, i16 26, i16 64, i16 64, i16 64, i16 64, i16 64, i16 33, i16 64, i16 64, i16 29, i16 64, i16 32, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 27, i16 28, i16 64, i16 64, i16 64, i16 64, i16 30], align 16
@dfg_leng = dso_local local_unnamed_addr global i32 0, align 4
@dfg_IGNORETEXT = external local_unnamed_addr global i32, align 4
@dfg_lval = external local_unnamed_addr global %union.yystype, align 8
@dfg_LINENUMBER = external local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [30 x i8] c"\0A Number too big in line %d.\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"\0A Illegal character '\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"\\x%x\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"' in line %d.\0A\00", align 1
@yy_n_chars = internal unnamed_addr global i32 0, align 4
@.str.5 = private unnamed_addr constant [51 x i8] c"fatal flex scanner internal error--no action found\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"out of dynamic memory in yy_create_buffer()\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"out of dynamic memory in yy_scan_buffer()\00", align 1
@.str.8 = private unnamed_addr constant [41 x i8] c"out of dynamic memory in yy_scan_bytes()\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"bad buffer in yy_scan_bytes()\00", align 1
@stderr = external local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [56 x i8] c"fatal flex scanner internal error--end of buffer missed\00", align 1
@.str.11 = private unnamed_addr constant [44 x i8] c"fatal error - scanner input buffer overflow\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"input in flex scanner failed\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: nounwind uwtable
define dso_local i32 @dfg_lex() local_unnamed_addr #0 {
  %1 = load i1, ptr @yy_init, align 4
  br i1 %1, label %30, label %2

2:                                                ; preds = %0
  store i1 true, ptr @yy_init, align 4
  %3 = load i32, ptr @yy_start, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  store i32 1, ptr @yy_start, align 4
  br label %6

6:                                                ; preds = %5, %2
  %7 = load ptr, ptr @dfg_in, align 8
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = load ptr, ptr @stdin, align 8
  store ptr %10, ptr @dfg_in, align 8
  br label %11

11:                                               ; preds = %9, %6
  %12 = phi ptr [ %10, %9 ], [ %7, %6 ]
  %13 = load ptr, ptr @dfg_out, align 8
  %14 = icmp eq ptr %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = load ptr, ptr @stdout, align 8
  store ptr %16, ptr @dfg_out, align 8
  br label %17

17:                                               ; preds = %15, %11
  %18 = load ptr, ptr @yy_current_buffer, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = tail call ptr @dfg__create_buffer(ptr noundef %12, i32 noundef 16384)
  store ptr %21, ptr @yy_current_buffer, align 8
  br label %22

22:                                               ; preds = %20, %17
  %23 = phi ptr [ %21, %20 ], [ %18, %17 ]
  %24 = getelementptr inbounds %struct.yy_buffer_state, ptr %23, i64 0, i32 4
  %25 = load i32, ptr %24, align 4
  store i32 %25, ptr @yy_n_chars, align 4
  %26 = getelementptr inbounds %struct.yy_buffer_state, ptr %23, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8
  store ptr %27, ptr @yy_c_buf_p, align 8
  store ptr %27, ptr @dfg_text, align 8
  %28 = load ptr, ptr %23, align 8
  store ptr %28, ptr @dfg_in, align 8
  %29 = load i8, ptr %27, align 1
  store i8 %29, ptr @yy_hold_char, align 1
  br label %30

30:                                               ; preds = %22, %0
  br label %31

31:                                               ; preds = %219, %30
  store i32 0, ptr @yy_more_len, align 4
  %32 = load i1, ptr @yy_more_flag, align 4
  %33 = load ptr, ptr @yy_c_buf_p, align 8
  br i1 %32, label %34, label %40

34:                                               ; preds = %31
  %35 = load ptr, ptr @dfg_text, align 8
  %36 = ptrtoint ptr %33 to i64
  %37 = ptrtoint ptr %35 to i64
  %38 = sub i64 %36, %37
  %39 = trunc i64 %38 to i32
  store i32 %39, ptr @yy_more_len, align 4
  store i1 false, ptr @yy_more_flag, align 4
  br label %40

40:                                               ; preds = %31, %34
  %41 = phi i32 [ %39, %34 ], [ 0, %31 ]
  %42 = load i8, ptr @yy_hold_char, align 1
  store i8 %42, ptr %33, align 1
  %43 = load i32, ptr @yy_start, align 4
  br label %51

44:                                               ; preds = %577
  %45 = sext i16 %581 to i32
  br label %46

46:                                               ; preds = %44, %284, %543
  %47 = phi i32 [ %563, %543 ], [ %254, %284 ], [ %563, %44 ]
  %48 = phi ptr [ %565, %543 ], [ %256, %284 ], [ %565, %44 ]
  %49 = phi ptr [ %561, %543 ], [ %286, %284 ], [ %561, %44 ]
  %50 = phi i32 [ %562, %543 ], [ %285, %284 ], [ %45, %44 ]
  br label %51

51:                                               ; preds = %46, %40
  %52 = phi i32 [ %41, %40 ], [ %47, %46 ]
  %53 = phi ptr [ %33, %40 ], [ %48, %46 ]
  %54 = phi ptr [ %33, %40 ], [ %49, %46 ]
  %55 = phi i32 [ %43, %40 ], [ %50, %46 ]
  br label %56

56:                                               ; preds = %56, %51
  %57 = phi ptr [ %54, %51 ], [ %69, %56 ]
  %58 = phi i32 [ %55, %51 ], [ %67, %56 ]
  %59 = sext i32 %58 to i64
  %60 = load i8, ptr %57, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds [256 x i32], ptr @yy_ec, i64 0, i64 %61
  %63 = load i32, ptr %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [380 x [41 x i16]], ptr @yy_nxt, i64 0, i64 %59, i64 %64
  %66 = load i16, ptr %65, align 2
  %67 = sext i16 %66 to i32
  %68 = icmp sgt i16 %66, 0
  %69 = getelementptr inbounds i8, ptr %57, i64 1
  br i1 %68, label %56, label %70, !llvm.loop !5

70:                                               ; preds = %56
  %71 = sext i16 %66 to i32
  %72 = sub nsw i32 0, %71
  br label %80

73:                                               ; preds = %605
  %74 = sext i16 %609 to i32
  br label %75

75:                                               ; preds = %73, %278, %585
  %76 = phi i32 [ %586, %585 ], [ %254, %278 ], [ %586, %73 ]
  %77 = phi ptr [ %593, %585 ], [ %256, %278 ], [ %593, %73 ]
  %78 = phi ptr [ %591, %585 ], [ %252, %278 ], [ %591, %73 ]
  %79 = phi i32 [ %592, %585 ], [ %279, %278 ], [ %74, %73 ]
  br label %80

80:                                               ; preds = %75, %70
  %81 = phi i32 [ %52, %70 ], [ %76, %75 ]
  %82 = phi ptr [ %53, %70 ], [ %77, %75 ]
  %83 = phi ptr [ %57, %70 ], [ %78, %75 ]
  %84 = phi i32 [ %72, %70 ], [ %79, %75 ]
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [380 x i16], ptr @yy_accept, i64 0, i64 %85
  %87 = load i16, ptr %86, align 2
  %88 = sext i16 %87 to i32
  %89 = sext i32 %81 to i64
  %90 = sub nsw i64 0, %89
  %91 = getelementptr inbounds i8, ptr %82, i64 %90
  store ptr %91, ptr @dfg_text, align 8
  %92 = ptrtoint ptr %83 to i64
  %93 = ptrtoint ptr %91 to i64
  %94 = sub i64 %92, %93
  %95 = trunc i64 %94 to i32
  store i32 %95, ptr @dfg_leng, align 4
  %96 = load i8, ptr %83, align 1
  store i8 %96, ptr @yy_hold_char, align 1
  store i8 0, ptr %83, align 1
  store ptr %83, ptr @yy_c_buf_p, align 8
  br label %97

97:                                               ; preds = %613, %80
  %98 = phi i32 [ %88, %80 ], [ %620, %613 ]
  switch i32 %98, label %621 [
    i32 1, label %622
    i32 2, label %623
    i32 3, label %624
    i32 4, label %625
    i32 5, label %626
    i32 6, label %627
    i32 7, label %99
    i32 8, label %100
    i32 9, label %101
    i32 10, label %102
    i32 11, label %103
    i32 12, label %104
    i32 13, label %105
    i32 14, label %106
    i32 15, label %107
    i32 16, label %108
    i32 17, label %109
    i32 18, label %110
    i32 19, label %111
    i32 20, label %112
    i32 21, label %113
    i32 22, label %114
    i32 23, label %115
    i32 24, label %116
    i32 25, label %117
    i32 26, label %118
    i32 27, label %119
    i32 28, label %120
    i32 29, label %121
    i32 30, label %122
    i32 31, label %123
    i32 32, label %124
    i32 33, label %125
    i32 34, label %126
    i32 35, label %127
    i32 36, label %128
    i32 37, label %129
    i32 38, label %130
    i32 39, label %131
    i32 40, label %132
    i32 41, label %133
    i32 42, label %134
    i32 43, label %135
    i32 44, label %136
    i32 45, label %137
    i32 46, label %138
    i32 47, label %139
    i32 48, label %140
    i32 49, label %141
    i32 50, label %142
    i32 51, label %143
    i32 52, label %144
    i32 53, label %145
    i32 54, label %146
    i32 55, label %147
    i32 56, label %148
    i32 57, label %219
    i32 58, label %149
    i32 59, label %153
    i32 60, label %154
    i32 61, label %155
    i32 62, label %156
    i32 63, label %175
    i32 64, label %189
    i32 65, label %219
    i32 66, label %191
    i32 67, label %194
    i32 68, label %198
    i32 69, label %213
    i32 71, label %220
    i32 72, label %220
    i32 70, label %221
  ]

99:                                               ; preds = %97
  br label %627

100:                                              ; preds = %97
  br label %627

101:                                              ; preds = %97
  br label %627

102:                                              ; preds = %97
  br label %627

103:                                              ; preds = %97
  br label %627

104:                                              ; preds = %97
  br label %627

105:                                              ; preds = %97
  br label %627

106:                                              ; preds = %97
  br label %627

107:                                              ; preds = %97
  br label %627

108:                                              ; preds = %97
  br label %627

109:                                              ; preds = %97
  br label %627

110:                                              ; preds = %97
  br label %627

111:                                              ; preds = %97
  br label %627

112:                                              ; preds = %97
  br label %627

113:                                              ; preds = %97
  br label %627

114:                                              ; preds = %97
  br label %627

115:                                              ; preds = %97
  br label %627

116:                                              ; preds = %97
  br label %627

117:                                              ; preds = %97
  br label %627

118:                                              ; preds = %97
  br label %627

119:                                              ; preds = %97
  br label %627

120:                                              ; preds = %97
  br label %627

121:                                              ; preds = %97
  br label %627

122:                                              ; preds = %97
  br label %627

123:                                              ; preds = %97
  br label %627

124:                                              ; preds = %97
  br label %627

125:                                              ; preds = %97
  br label %627

126:                                              ; preds = %97
  br label %627

127:                                              ; preds = %97
  br label %627

128:                                              ; preds = %97
  br label %627

129:                                              ; preds = %97
  br label %627

130:                                              ; preds = %97
  br label %627

131:                                              ; preds = %97
  br label %627

132:                                              ; preds = %97
  br label %627

133:                                              ; preds = %97
  br label %627

134:                                              ; preds = %97
  br label %627

135:                                              ; preds = %97
  br label %627

136:                                              ; preds = %97
  br label %627

137:                                              ; preds = %97
  br label %627

138:                                              ; preds = %97
  br label %627

139:                                              ; preds = %97
  br label %627

140:                                              ; preds = %97
  br label %627

141:                                              ; preds = %97
  br label %627

142:                                              ; preds = %97
  br label %627

143:                                              ; preds = %97
  br label %627

144:                                              ; preds = %97
  br label %627

145:                                              ; preds = %97
  br label %627

146:                                              ; preds = %97
  br label %627

147:                                              ; preds = %97
  br label %627

148:                                              ; preds = %97
  br label %627

149:                                              ; preds = %97
  %150 = load i32, ptr @dfg_IGNORETEXT, align 4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %627, label %152

152:                                              ; preds = %149
  store i32 3, ptr @yy_start, align 4
  store i1 true, ptr @yy_more_flag, align 4
  br label %219

153:                                              ; preds = %97
  br label %627

154:                                              ; preds = %97
  store i1 true, ptr @yy_more_flag, align 4
  br label %219

155:                                              ; preds = %97
  store i1 true, ptr @yy_more_flag, align 4
  br label %219

156:                                              ; preds = %97
  store i32 1, ptr @yy_start, align 4
  %157 = tail call fastcc ptr @dfg_StringCopy()
  store ptr %157, ptr @dfg_lval, align 8
  %158 = load ptr, ptr @dfg_text, align 8
  %159 = load i8, ptr %158, align 1
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %171, label %161

161:                                              ; preds = %156, %161
  %162 = phi i8 [ %169, %161 ], [ %159, %156 ]
  %163 = phi i32 [ %168, %161 ], [ 0, %156 ]
  %164 = phi ptr [ %165, %161 ], [ %158, %156 ]
  %165 = getelementptr inbounds i8, ptr %164, i64 1
  %166 = icmp eq i8 %162, 10
  %167 = zext i1 %166 to i32
  %168 = add i32 %163, %167
  %169 = load i8, ptr %165, align 1
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %171, label %161, !llvm.loop !7

171:                                              ; preds = %161, %156
  %172 = phi i32 [ 0, %156 ], [ %168, %161 ]
  %173 = load i32, ptr @dfg_LINENUMBER, align 4
  %174 = add i32 %173, %172
  store i32 %174, ptr @dfg_LINENUMBER, align 4
  br label %627

175:                                              ; preds = %97
  %176 = tail call ptr @__errno_location() #20
  store i32 0, ptr %176, align 4
  %177 = load ptr, ptr @dfg_text, align 8
  %178 = tail call i64 @strtoul(ptr nocapture noundef %177, ptr noundef null, i32 noundef 10) #21
  %179 = load i32, ptr %176, align 4
  %180 = icmp ne i32 %179, 0
  %181 = icmp ugt i64 %178, 2147483647
  %182 = select i1 %180, i1 true, i1 %181
  br i1 %182, label %183, label %187

183:                                              ; preds = %175
  %184 = load ptr, ptr @stdout, align 8
  %185 = tail call i32 @fflush(ptr noundef %184)
  %186 = load i32, ptr @dfg_LINENUMBER, align 4
  tail call void (ptr, ...) @misc_UserErrorReport(ptr noundef nonnull @.str, i32 noundef %186) #21
  tail call fastcc void @misc_Error()
  unreachable

187:                                              ; preds = %175
  %188 = trunc i64 %178 to i32
  store i32 %188, ptr @dfg_lval, align 8
  br label %627

189:                                              ; preds = %97
  %190 = tail call fastcc ptr @dfg_StringCopy()
  store ptr %190, ptr @dfg_lval, align 8
  br label %627

191:                                              ; preds = %97
  %192 = load i32, ptr @dfg_LINENUMBER, align 4
  %193 = add i32 %192, 1
  store i32 %193, ptr @dfg_LINENUMBER, align 4
  br label %219

194:                                              ; preds = %97
  %195 = load ptr, ptr @dfg_text, align 8
  %196 = load i8, ptr %195, align 1
  %197 = sext i8 %196 to i32
  br label %627

198:                                              ; preds = %97
  %199 = load ptr, ptr @stdout, align 8
  %200 = tail call i32 @fflush(ptr noundef %199)
  tail call void (ptr, ...) @misc_UserErrorReport(ptr noundef nonnull @.str.1) #21
  %201 = tail call ptr @__ctype_b_loc() #20
  %202 = load ptr, ptr %201, align 8
  %203 = load ptr, ptr @dfg_text, align 8
  %204 = load i8, ptr %203, align 1
  %205 = sext i8 %204 to i32
  %206 = sext i8 %204 to i64
  %207 = getelementptr inbounds i16, ptr %202, i64 %206
  %208 = load i16, ptr %207, align 2
  %209 = and i16 %208, 16384
  %210 = icmp eq i16 %209, 0
  %211 = select i1 %210, ptr @.str.3, ptr @.str.2
  tail call void (ptr, ...) @misc_UserErrorReport(ptr noundef nonnull %211, i32 noundef %205) #21
  %212 = load i32, ptr @dfg_LINENUMBER, align 4
  tail call void (ptr, ...) @misc_UserErrorReport(ptr noundef nonnull @.str.4, i32 noundef %212) #21
  tail call fastcc void @misc_Error()
  unreachable

213:                                              ; preds = %97
  %214 = load ptr, ptr @dfg_text, align 8
  %215 = load i32, ptr @dfg_leng, align 4
  %216 = sext i32 %215 to i64
  %217 = load ptr, ptr @dfg_out, align 8
  %218 = tail call i64 @fwrite(ptr noundef %214, i64 noundef %216, i64 noundef 1, ptr noundef %217)
  br label %219

219:                                              ; preds = %97, %97, %213, %191, %155, %154, %152
  br label %31

220:                                              ; preds = %97, %97
  br label %627

221:                                              ; preds = %97
  %222 = load ptr, ptr @dfg_text, align 8
  %223 = load i8, ptr @yy_hold_char, align 1
  store i8 %223, ptr %83, align 1
  %224 = load ptr, ptr @yy_current_buffer, align 8
  %225 = getelementptr inbounds %struct.yy_buffer_state, ptr %224, i64 0, i32 9
  %226 = load i32, ptr %225, align 8
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %230, label %228

228:                                              ; preds = %221
  %229 = load i32, ptr @yy_n_chars, align 4
  br label %234

230:                                              ; preds = %221
  %231 = getelementptr inbounds %struct.yy_buffer_state, ptr %224, i64 0, i32 4
  %232 = load i32, ptr %231, align 4
  store i32 %232, ptr @yy_n_chars, align 4
  %233 = load ptr, ptr @dfg_in, align 8
  store ptr %233, ptr %224, align 8
  store i32 1, ptr %225, align 8
  br label %234

234:                                              ; preds = %228, %230
  %235 = phi i32 [ %226, %228 ], [ 1, %230 ]
  %236 = phi i32 [ %229, %228 ], [ %232, %230 ]
  %237 = load ptr, ptr @yy_c_buf_p, align 8
  %238 = getelementptr inbounds %struct.yy_buffer_state, ptr %224, i64 0, i32 1
  %239 = load ptr, ptr %238, align 8
  %240 = ptrtoint ptr %239 to i64
  %241 = sext i32 %236 to i64
  %242 = getelementptr inbounds i8, ptr %239, i64 %241
  %243 = icmp ugt ptr %237, %242
  br i1 %243, label %287, label %244

244:                                              ; preds = %234
  %245 = ptrtoint ptr %83 to i64
  %246 = ptrtoint ptr %222 to i64
  %247 = sub i64 %245, %246
  %248 = trunc i64 %247 to i32
  %249 = add nsw i32 %248, -1
  %250 = load ptr, ptr @dfg_text, align 8
  %251 = sext i32 %249 to i64
  %252 = getelementptr inbounds i8, ptr %250, i64 %251
  store ptr %252, ptr @yy_c_buf_p, align 8
  %253 = load i32, ptr @yy_start, align 4
  %254 = load i32, ptr @yy_more_len, align 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i8, ptr %250, i64 %255
  %257 = icmp slt i32 %254, %249
  br i1 %257, label %258, label %278

258:                                              ; preds = %244, %268
  %259 = phi ptr [ %274, %268 ], [ %256, %244 ]
  %260 = phi i32 [ %273, %268 ], [ %253, %244 ]
  %261 = sext i32 %260 to i64
  %262 = load i8, ptr %259, align 1
  %263 = icmp eq i8 %262, 0
  br i1 %263, label %268, label %264

264:                                              ; preds = %258
  %265 = zext i8 %262 to i64
  %266 = getelementptr inbounds [256 x i32], ptr @yy_ec, i64 0, i64 %265
  %267 = load i32, ptr %266, align 4
  br label %268

268:                                              ; preds = %264, %258
  %269 = phi i32 [ %267, %264 ], [ 1, %258 ]
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds [380 x [41 x i16]], ptr @yy_nxt, i64 0, i64 %261, i64 %270
  %272 = load i16, ptr %271, align 2
  %273 = sext i16 %272 to i32
  %274 = getelementptr inbounds i8, ptr %259, i64 1
  %275 = icmp ult ptr %274, %252
  br i1 %275, label %258, label %276, !llvm.loop !8

276:                                              ; preds = %268
  %277 = sext i16 %272 to i32
  br label %278

278:                                              ; preds = %276, %244
  %279 = phi i32 [ %253, %244 ], [ %277, %276 ]
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds [380 x [41 x i16]], ptr @yy_nxt, i64 0, i64 %280, i64 1
  %282 = load i16, ptr %281, align 2
  %283 = icmp slt i16 %282, 1
  br i1 %283, label %75, label %284

284:                                              ; preds = %278
  %285 = zext i16 %282 to i32
  %286 = getelementptr inbounds i8, ptr %252, i64 1
  store ptr %286, ptr @yy_c_buf_p, align 8
  br label %46

287:                                              ; preds = %234
  %288 = load ptr, ptr @dfg_text, align 8
  %289 = add nsw i32 %236, 1
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8, ptr %239, i64 %290
  %292 = icmp ugt ptr %237, %291
  br i1 %292, label %293, label %296

293:                                              ; preds = %287
  %294 = load ptr, ptr @stderr, align 8
  %295 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %294, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.10) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

296:                                              ; preds = %287
  %297 = getelementptr inbounds %struct.yy_buffer_state, ptr %224, i64 0, i32 8
  %298 = load i32, ptr %297, align 4
  %299 = icmp eq i32 %298, 0
  %300 = ptrtoint ptr %237 to i64
  %301 = ptrtoint ptr %288 to i64
  br i1 %299, label %302, label %308

302:                                              ; preds = %296
  %303 = load i32, ptr @yy_more_len, align 4
  %304 = sext i32 %303 to i64
  %305 = add i64 %301, %304
  %306 = sub i64 %300, %305
  %307 = icmp eq i64 %306, 1
  br i1 %307, label %613, label %585

308:                                              ; preds = %296
  %309 = sub i64 %300, %301
  %310 = trunc i64 %309 to i32
  %311 = add i32 %310, -1
  %312 = icmp sgt i32 %310, 1
  br i1 %312, label %313, label %374

313:                                              ; preds = %308
  %314 = add i64 %300, 4294967294
  %315 = sub i64 %314, %301
  %316 = and i64 %315, 4294967295
  %317 = add nuw nsw i64 %316, 1
  %318 = icmp ult i64 %316, 7
  %319 = sub i64 %240, %301
  %320 = icmp ult i64 %319, 32
  %321 = select i1 %318, i1 true, i1 %320
  br i1 %321, label %359, label %322

322:                                              ; preds = %313
  %323 = icmp ult i64 %316, 31
  br i1 %323, label %344, label %324

324:                                              ; preds = %322
  %325 = and i64 %317, -32
  br label %326

326:                                              ; preds = %326, %324
  %327 = phi i64 [ 0, %324 ], [ %334, %326 ]
  %328 = getelementptr i8, ptr %239, i64 %327
  %329 = getelementptr i8, ptr %288, i64 %327
  %330 = load <16 x i8>, ptr %329, align 1
  %331 = getelementptr i8, ptr %329, i64 16
  %332 = load <16 x i8>, ptr %331, align 1
  store <16 x i8> %330, ptr %328, align 1
  %333 = getelementptr i8, ptr %328, i64 16
  store <16 x i8> %332, ptr %333, align 1
  %334 = add nuw i64 %327, 32
  %335 = icmp eq i64 %334, %325
  br i1 %335, label %336, label %326, !llvm.loop !9

336:                                              ; preds = %326
  %337 = icmp eq i64 %317, %325
  br i1 %337, label %372, label %338

338:                                              ; preds = %336
  %339 = trunc i64 %325 to i32
  %340 = getelementptr i8, ptr %288, i64 %325
  %341 = getelementptr i8, ptr %239, i64 %325
  %342 = and i64 %317, 24
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %359, label %344

344:                                              ; preds = %322, %338
  %345 = phi i64 [ %325, %338 ], [ 0, %322 ]
  %346 = and i64 %317, -8
  %347 = getelementptr i8, ptr %239, i64 %346
  %348 = getelementptr i8, ptr %288, i64 %346
  %349 = trunc i64 %346 to i32
  br label %350

350:                                              ; preds = %350, %344
  %351 = phi i64 [ %345, %344 ], [ %355, %350 ]
  %352 = getelementptr i8, ptr %239, i64 %351
  %353 = getelementptr i8, ptr %288, i64 %351
  %354 = load <8 x i8>, ptr %353, align 1
  store <8 x i8> %354, ptr %352, align 1
  %355 = add nuw i64 %351, 8
  %356 = icmp eq i64 %355, %346
  br i1 %356, label %357, label %350, !llvm.loop !12

357:                                              ; preds = %350
  %358 = icmp eq i64 %317, %346
  br i1 %358, label %372, label %359

359:                                              ; preds = %313, %338, %357
  %360 = phi ptr [ %239, %313 ], [ %341, %338 ], [ %347, %357 ]
  %361 = phi ptr [ %288, %313 ], [ %340, %338 ], [ %348, %357 ]
  %362 = phi i32 [ 0, %313 ], [ %339, %338 ], [ %349, %357 ]
  br label %363

363:                                              ; preds = %359, %363
  %364 = phi ptr [ %369, %363 ], [ %360, %359 ]
  %365 = phi ptr [ %367, %363 ], [ %361, %359 ]
  %366 = phi i32 [ %370, %363 ], [ %362, %359 ]
  %367 = getelementptr inbounds i8, ptr %365, i64 1
  %368 = load i8, ptr %365, align 1
  %369 = getelementptr inbounds i8, ptr %364, i64 1
  store i8 %368, ptr %364, align 1
  %370 = add nuw nsw i32 %366, 1
  %371 = icmp eq i32 %370, %311
  br i1 %371, label %372, label %363, !llvm.loop !13

372:                                              ; preds = %363, %357, %336
  %373 = load i32, ptr %225, align 8
  br label %374

374:                                              ; preds = %372, %308
  %375 = phi i32 [ %373, %372 ], [ %235, %308 ]
  %376 = icmp eq i32 %375, 2
  br i1 %376, label %489, label %377

377:                                              ; preds = %374
  %378 = getelementptr inbounds %struct.yy_buffer_state, ptr %224, i64 0, i32 3
  %379 = load i32, ptr %378, align 8
  %380 = sub i32 %379, %310
  %381 = icmp slt i32 %380, 1
  br i1 %381, label %382, label %415

382:                                              ; preds = %377
  %383 = getelementptr inbounds %struct.yy_buffer_state, ptr %224, i64 0, i32 5
  %384 = load ptr, ptr %238, align 8
  br label %385

385:                                              ; preds = %408, %382
  %386 = phi i32 [ %379, %382 ], [ %412, %408 ]
  %387 = phi ptr [ %384, %382 ], [ %403, %408 ]
  %388 = phi ptr [ %237, %382 ], [ %411, %408 ]
  %389 = ptrtoint ptr %388 to i64
  %390 = ptrtoint ptr %387 to i64
  %391 = sub i64 %389, %390
  %392 = load i32, ptr %383, align 8
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %395

394:                                              ; preds = %385
  store ptr null, ptr %238, align 8
  br label %405

395:                                              ; preds = %385
  %396 = shl i32 %386, 1
  %397 = icmp slt i32 %396, 1
  %398 = lshr i32 %386, 3
  %399 = add i32 %398, %386
  %400 = select i1 %397, i32 %399, i32 %396
  store i32 %400, ptr %378, align 8
  %401 = add i32 %400, 2
  %402 = zext i32 %401 to i64
  %403 = tail call ptr @realloc(ptr noundef %387, i64 noundef %402) #24
  store ptr %403, ptr %238, align 8
  %404 = icmp eq ptr %403, null
  br i1 %404, label %405, label %408

405:                                              ; preds = %395, %394
  %406 = load ptr, ptr @stderr, align 8
  %407 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %406, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.11) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

408:                                              ; preds = %395
  %409 = shl i64 %391, 32
  %410 = ashr exact i64 %409, 32
  %411 = getelementptr inbounds i8, ptr %403, i64 %410
  store ptr %411, ptr @yy_c_buf_p, align 8
  %412 = load i32, ptr %378, align 8
  %413 = sub i32 %412, %310
  %414 = icmp slt i32 %413, 1
  br i1 %414, label %385, label %415, !llvm.loop !14

415:                                              ; preds = %408, %377
  %416 = phi i32 [ %380, %377 ], [ %413, %408 ]
  %417 = tail call i32 @llvm.smin.i32(i32 %416, i32 8192)
  %418 = getelementptr inbounds %struct.yy_buffer_state, ptr %224, i64 0, i32 6
  %419 = load i32, ptr %418, align 4
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %460, label %421

421:                                              ; preds = %415
  %422 = sext i32 %311 to i64
  %423 = zext i32 %417 to i64
  br label %424

424:                                              ; preds = %428, %421
  %425 = phi i64 [ 0, %421 ], [ %435, %428 ]
  %426 = load ptr, ptr @dfg_in, align 8
  %427 = tail call i32 @getc(ptr noundef %426)
  switch i32 %427, label %428 [
    i32 -1, label %437
    i32 10, label %437
  ]

428:                                              ; preds = %424
  %429 = trunc i32 %427 to i8
  %430 = load ptr, ptr @yy_current_buffer, align 8
  %431 = getelementptr inbounds %struct.yy_buffer_state, ptr %430, i64 0, i32 1
  %432 = load ptr, ptr %431, align 8
  %433 = getelementptr inbounds i8, ptr %432, i64 %422
  %434 = getelementptr inbounds i8, ptr %433, i64 %425
  store i8 %429, ptr %434, align 1
  %435 = add nuw nsw i64 %425, 1
  %436 = icmp eq i64 %435, %423
  br i1 %436, label %439, label %424, !llvm.loop !15

437:                                              ; preds = %424, %424
  %438 = trunc i64 %425 to i32
  br label %439

439:                                              ; preds = %428, %437
  %440 = phi i32 [ %438, %437 ], [ %417, %428 ]
  switch i32 %427, label %485 [
    i32 10, label %441
    i32 -1, label %453
  ]

441:                                              ; preds = %439
  %442 = ptrtoint ptr %83 to i64
  %443 = ptrtoint ptr %222 to i64
  %444 = sub i64 %442, %443
  %445 = load ptr, ptr @yy_current_buffer, align 8
  %446 = getelementptr inbounds %struct.yy_buffer_state, ptr %445, i64 0, i32 1
  %447 = load ptr, ptr %446, align 8
  %448 = getelementptr inbounds i8, ptr %447, i64 %422
  %449 = add nuw nsw i32 %440, 1
  %450 = zext i32 %440 to i64
  %451 = getelementptr inbounds i8, ptr %448, i64 %450
  store i8 10, ptr %451, align 1
  %452 = getelementptr inbounds %struct.yy_buffer_state, ptr %445, i64 0, i32 4
  store i32 %449, ptr %452, align 4
  br label %543

453:                                              ; preds = %439
  %454 = load ptr, ptr @dfg_in, align 8
  %455 = tail call i32 @ferror(ptr noundef %454) #21
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %485, label %457

457:                                              ; preds = %453
  %458 = load ptr, ptr @stderr, align 8
  %459 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %458, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.12) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

460:                                              ; preds = %415
  %461 = load ptr, ptr %238, align 8
  %462 = sext i32 %311 to i64
  %463 = getelementptr inbounds i8, ptr %461, i64 %462
  %464 = zext i32 %417 to i64
  %465 = load ptr, ptr @dfg_in, align 8
  %466 = tail call i64 @fread(ptr noundef %463, i64 noundef 1, i64 noundef %464, ptr noundef %465)
  %467 = trunc i64 %466 to i32
  store i32 %467, ptr @yy_n_chars, align 4
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %476, label %469

469:                                              ; preds = %460
  %470 = ptrtoint ptr %83 to i64
  %471 = ptrtoint ptr %222 to i64
  %472 = sub i64 %470, %471
  %473 = trunc i64 %466 to i32
  %474 = load ptr, ptr @yy_current_buffer, align 8
  %475 = getelementptr inbounds %struct.yy_buffer_state, ptr %474, i64 0, i32 4
  store i32 %473, ptr %475, align 4
  br label %543

476:                                              ; preds = %460
  %477 = load ptr, ptr @dfg_in, align 8
  %478 = tail call i32 @ferror(ptr noundef %477) #21
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %480, label %482

480:                                              ; preds = %476
  %481 = load ptr, ptr @yy_current_buffer, align 8
  br label %489

482:                                              ; preds = %476
  %483 = load ptr, ptr @stderr, align 8
  %484 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %483, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.12) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

485:                                              ; preds = %453, %439
  %486 = load ptr, ptr @yy_current_buffer, align 8
  %487 = getelementptr inbounds %struct.yy_buffer_state, ptr %486, i64 0, i32 4
  store i32 %440, ptr %487, align 4
  %488 = icmp eq i32 %440, 0
  br i1 %488, label %492, label %539

489:                                              ; preds = %480, %374
  %490 = phi ptr [ %481, %480 ], [ %224, %374 ]
  %491 = getelementptr inbounds %struct.yy_buffer_state, ptr %490, i64 0, i32 4
  store i32 0, ptr %491, align 4
  br label %492

492:                                              ; preds = %489, %485
  %493 = phi ptr [ %486, %485 ], [ %490, %489 ]
  %494 = load i32, ptr @yy_more_len, align 4
  %495 = icmp eq i32 %311, %494
  %496 = getelementptr inbounds %struct.yy_buffer_state, ptr %493, i64 0, i32 1
  br i1 %495, label %497, label %523

497:                                              ; preds = %492
  %498 = load ptr, ptr @dfg_in, align 8
  %499 = getelementptr inbounds %struct.yy_buffer_state, ptr %493, i64 0, i32 4
  store i32 0, ptr %499, align 4
  %500 = load ptr, ptr %496, align 8
  store i8 0, ptr %500, align 1
  %501 = load ptr, ptr %496, align 8
  %502 = getelementptr inbounds i8, ptr %501, i64 1
  store i8 0, ptr %502, align 1
  %503 = load ptr, ptr %496, align 8
  %504 = getelementptr inbounds %struct.yy_buffer_state, ptr %493, i64 0, i32 2
  store ptr %503, ptr %504, align 8
  %505 = load i32, ptr %499, align 4
  store ptr %503, ptr @dfg_text, align 8
  %506 = load ptr, ptr %493, align 8
  store ptr %506, ptr @dfg_in, align 8
  store ptr %498, ptr %493, align 8
  %507 = getelementptr inbounds %struct.yy_buffer_state, ptr %493, i64 0, i32 6
  store <4 x i32> <i32 1, i32 1, i32 1, i32 0>, ptr %507, align 4
  store i32 %505, ptr @yy_n_chars, align 4
  store ptr %503, ptr @yy_c_buf_p, align 8
  store ptr %503, ptr @dfg_text, align 8
  %508 = load ptr, ptr %493, align 8
  store ptr %508, ptr @dfg_in, align 8
  %509 = load i8, ptr %503, align 1
  store i8 %509, ptr @yy_hold_char, align 1
  %510 = load ptr, ptr @yy_current_buffer, align 8
  %511 = add nsw i32 %505, %311
  store i32 %511, ptr @yy_n_chars, align 4
  %512 = getelementptr inbounds %struct.yy_buffer_state, ptr %510, i64 0, i32 1
  %513 = load ptr, ptr %512, align 8
  %514 = sext i32 %511 to i64
  %515 = getelementptr inbounds i8, ptr %513, i64 %514
  store i8 0, ptr %515, align 1
  %516 = load ptr, ptr %512, align 8
  %517 = add i32 %505, %310
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds i8, ptr %516, i64 %518
  store i8 0, ptr %519, align 1
  %520 = load ptr, ptr %512, align 8
  store ptr %520, ptr @dfg_text, align 8
  %521 = load i32, ptr @yy_more_len, align 4
  %522 = sext i32 %521 to i64
  br label %613

523:                                              ; preds = %492
  %524 = getelementptr inbounds %struct.yy_buffer_state, ptr %493, i64 0, i32 9
  store i32 2, ptr %524, align 8
  store i32 %311, ptr @yy_n_chars, align 4
  %525 = load ptr, ptr %496, align 8
  %526 = sext i32 %311 to i64
  %527 = getelementptr inbounds i8, ptr %525, i64 %526
  store i8 0, ptr %527, align 1
  %528 = load ptr, ptr %496, align 8
  %529 = shl i64 %309, 32
  %530 = ashr exact i64 %529, 32
  %531 = getelementptr inbounds i8, ptr %528, i64 %530
  store i8 0, ptr %531, align 1
  %532 = load ptr, ptr %496, align 8
  store ptr %532, ptr @dfg_text, align 8
  %533 = load ptr, ptr @yy_current_buffer, align 8
  %534 = getelementptr inbounds %struct.yy_buffer_state, ptr %533, i64 0, i32 1
  %535 = load ptr, ptr %534, align 8
  %536 = load i32, ptr @yy_n_chars, align 4
  %537 = load i32, ptr @yy_more_len, align 4
  %538 = sext i32 %536 to i64
  br label %585

539:                                              ; preds = %485
  %540 = ptrtoint ptr %83 to i64
  %541 = ptrtoint ptr %222 to i64
  %542 = sub i64 %540, %541
  br label %543

543:                                              ; preds = %539, %469, %441
  %544 = phi i64 [ %444, %441 ], [ %472, %469 ], [ %542, %539 ]
  %545 = phi ptr [ %445, %441 ], [ %474, %469 ], [ %486, %539 ]
  %546 = phi i32 [ %449, %441 ], [ %473, %469 ], [ %440, %539 ]
  %547 = trunc i64 %309 to i32
  %548 = trunc i64 %544 to i32
  %549 = add nsw i32 %548, -1
  %550 = add nsw i32 %546, %311
  store i32 %550, ptr @yy_n_chars, align 4
  %551 = getelementptr inbounds %struct.yy_buffer_state, ptr %545, i64 0, i32 1
  %552 = load ptr, ptr %551, align 8
  %553 = sext i32 %550 to i64
  %554 = getelementptr inbounds i8, ptr %552, i64 %553
  store i8 0, ptr %554, align 1
  %555 = load ptr, ptr %551, align 8
  %556 = add i32 %546, %547
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds i8, ptr %555, i64 %557
  store i8 0, ptr %558, align 1
  %559 = load ptr, ptr %551, align 8
  store ptr %559, ptr @dfg_text, align 8
  %560 = sext i32 %549 to i64
  %561 = getelementptr inbounds i8, ptr %559, i64 %560
  store ptr %561, ptr @yy_c_buf_p, align 8
  %562 = load i32, ptr @yy_start, align 4
  %563 = load i32, ptr @yy_more_len, align 4
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds i8, ptr %559, i64 %564
  %566 = icmp slt i32 %563, %549
  br i1 %566, label %567, label %46

567:                                              ; preds = %543, %577
  %568 = phi ptr [ %583, %577 ], [ %565, %543 ]
  %569 = phi i32 [ %582, %577 ], [ %562, %543 ]
  %570 = sext i32 %569 to i64
  %571 = load i8, ptr %568, align 1
  %572 = icmp eq i8 %571, 0
  br i1 %572, label %577, label %573

573:                                              ; preds = %567
  %574 = zext i8 %571 to i64
  %575 = getelementptr inbounds [256 x i32], ptr @yy_ec, i64 0, i64 %574
  %576 = load i32, ptr %575, align 4
  br label %577

577:                                              ; preds = %573, %567
  %578 = phi i32 [ %576, %573 ], [ 1, %567 ]
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds [380 x [41 x i16]], ptr @yy_nxt, i64 0, i64 %570, i64 %579
  %581 = load i16, ptr %580, align 2
  %582 = sext i16 %581 to i32
  %583 = getelementptr inbounds i8, ptr %568, i64 1
  %584 = icmp ult ptr %583, %561
  br i1 %584, label %567, label %44, !llvm.loop !8

585:                                              ; preds = %302, %523
  %586 = phi i32 [ %537, %523 ], [ %303, %302 ]
  %587 = phi i64 [ %538, %523 ], [ %241, %302 ]
  %588 = phi ptr [ %532, %523 ], [ %288, %302 ]
  %589 = phi ptr [ %535, %523 ], [ %239, %302 ]
  %590 = sext i32 %586 to i64
  %591 = getelementptr inbounds i8, ptr %589, i64 %587
  store ptr %591, ptr @yy_c_buf_p, align 8
  %592 = load i32, ptr @yy_start, align 4
  %593 = getelementptr inbounds i8, ptr %588, i64 %590
  %594 = icmp ult ptr %593, %591
  br i1 %594, label %595, label %75

595:                                              ; preds = %585, %605
  %596 = phi ptr [ %611, %605 ], [ %593, %585 ]
  %597 = phi i32 [ %610, %605 ], [ %592, %585 ]
  %598 = sext i32 %597 to i64
  %599 = load i8, ptr %596, align 1
  %600 = icmp eq i8 %599, 0
  br i1 %600, label %605, label %601

601:                                              ; preds = %595
  %602 = zext i8 %599 to i64
  %603 = getelementptr inbounds [256 x i32], ptr @yy_ec, i64 0, i64 %602
  %604 = load i32, ptr %603, align 4
  br label %605

605:                                              ; preds = %601, %595
  %606 = phi i32 [ %604, %601 ], [ 1, %595 ]
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds [380 x [41 x i16]], ptr @yy_nxt, i64 0, i64 %598, i64 %607
  %609 = load i16, ptr %608, align 2
  %610 = sext i16 %609 to i32
  %611 = getelementptr inbounds i8, ptr %596, i64 1
  %612 = icmp ult ptr %611, %591
  br i1 %612, label %595, label %73, !llvm.loop !8

613:                                              ; preds = %497, %302
  %614 = phi i64 [ %304, %302 ], [ %522, %497 ]
  %615 = phi ptr [ %288, %302 ], [ %520, %497 ]
  %616 = getelementptr inbounds i8, ptr %615, i64 %614
  store ptr %616, ptr @yy_c_buf_p, align 8
  %617 = load i32, ptr @yy_start, align 4
  %618 = add nsw i32 %617, -1
  %619 = sdiv i32 %618, 2
  %620 = add nuw nsw i32 %619, 71
  br label %97

621:                                              ; preds = %97
  tail call fastcc void @yy_fatal_error(ptr noundef nonnull @.str.5)
  unreachable

622:                                              ; preds = %97
  br label %627

623:                                              ; preds = %97
  br label %627

624:                                              ; preds = %97
  br label %627

625:                                              ; preds = %97
  br label %627

626:                                              ; preds = %97
  br label %627

627:                                              ; preds = %149, %97, %626, %625, %624, %623, %622, %220, %194, %189, %187, %171, %153, %148, %147, %146, %145, %144, %143, %142, %141, %140, %139, %138, %137, %136, %135, %134, %133, %132, %131, %130, %129, %128, %127, %126, %125, %124, %123, %122, %121, %120, %119, %118, %117, %116, %115, %114, %113, %112, %111, %110, %109, %108, %107, %106, %105, %104, %103, %102, %101, %100, %99
  %628 = phi i32 [ 0, %220 ], [ %197, %194 ], [ 317, %189 ], [ 315, %187 ], [ 318, %171 ], [ 264, %153 ], [ 316, %148 ], [ 314, %147 ], [ 313, %146 ], [ 312, %145 ], [ 311, %144 ], [ 309, %143 ], [ 308, %142 ], [ 307, %141 ], [ 306, %140 ], [ 305, %139 ], [ 296, %138 ], [ 302, %137 ], [ 273, %136 ], [ 301, %135 ], [ 300, %134 ], [ 298, %133 ], [ 297, %132 ], [ 295, %131 ], [ 294, %130 ], [ 292, %129 ], [ 291, %128 ], [ 290, %127 ], [ 310, %126 ], [ 304, %125 ], [ 303, %124 ], [ 299, %123 ], [ 286, %122 ], [ 280, %121 ], [ 271, %120 ], [ 269, %119 ], [ 265, %118 ], [ 289, %117 ], [ 288, %116 ], [ 287, %115 ], [ 285, %114 ], [ 284, %113 ], [ 283, %112 ], [ 281, %111 ], [ 282, %110 ], [ 279, %109 ], [ 278, %108 ], [ 277, %107 ], [ 276, %106 ], [ 275, %105 ], [ 274, %104 ], [ 272, %103 ], [ 270, %102 ], [ 268, %101 ], [ 267, %100 ], [ 266, %99 ], [ 258, %622 ], [ 259, %623 ], [ 260, %624 ], [ 261, %625 ], [ 262, %626 ], [ 263, %97 ], [ 293, %149 ]
  ret i32 %628
}

; Function Attrs: nounwind uwtable
define dso_local ptr @dfg__create_buffer(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call noalias dereferenceable_or_null(56) ptr @malloc(i64 noundef 56) #25
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = load ptr, ptr @stderr, align 8
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.6) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 3
  store i32 %1, ptr %9, align 8
  %10 = add i32 %1, 2
  %11 = zext i32 %10 to i64
  %12 = tail call noalias ptr @malloc(i64 noundef %11) #25
  %13 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 1
  store ptr %12, ptr %13, align 8
  %14 = icmp eq ptr %12, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %8
  %16 = load ptr, ptr @stderr, align 8
  %17 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %16, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.6) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 5
  store i32 1, ptr %19, align 8
  %20 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 4
  store i32 0, ptr %20, align 4
  store i8 0, ptr %12, align 1
  %21 = getelementptr inbounds i8, ptr %12, i64 1
  store i8 0, ptr %21, align 1
  %22 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 2
  store ptr %12, ptr %22, align 8
  %23 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 7
  store i32 1, ptr %23, align 8
  %24 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 9
  store i32 0, ptr %24, align 8
  %25 = load ptr, ptr @yy_current_buffer, align 8
  %26 = icmp eq ptr %25, %3
  br i1 %26, label %27, label %28

27:                                               ; preds = %18
  store i32 0, ptr @yy_n_chars, align 4
  store ptr %12, ptr @yy_c_buf_p, align 8
  store ptr %12, ptr @dfg_text, align 8
  store i8 0, ptr @yy_hold_char, align 1
  br label %28

28:                                               ; preds = %18, %27
  store ptr %0, ptr %3, align 8
  %29 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 8
  store i32 1, ptr %29, align 4
  %30 = getelementptr inbounds %struct.yy_buffer_state, ptr %3, i64 0, i32 6
  store i32 1, ptr %30, align 4
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define dso_local void @dfg__load_buffer_state() local_unnamed_addr #1 {
  %1 = load ptr, ptr @yy_current_buffer, align 8
  %2 = getelementptr inbounds %struct.yy_buffer_state, ptr %1, i64 0, i32 4
  %3 = load i32, ptr %2, align 4
  store i32 %3, ptr @yy_n_chars, align 4
  %4 = getelementptr inbounds %struct.yy_buffer_state, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8
  store ptr %5, ptr @yy_c_buf_p, align 8
  store ptr %5, ptr @dfg_text, align 8
  %6 = load ptr, ptr %1, align 8
  store ptr %6, ptr @dfg_in, align 8
  %7 = load i8, ptr %5, align 1
  store i8 %7, ptr @yy_hold_char, align 1
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc ptr @dfg_StringCopy() unnamed_addr #2 {
  %1 = load i32, ptr @dfg_leng, align 4
  %2 = add nsw i32 %1, 1
  %3 = tail call ptr @memory_Malloc(i32 noundef %2) #21
  %4 = load ptr, ptr @dfg_text, align 8
  %5 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) %4) #21
  ret ptr %3
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare ptr @__errno_location() local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtoul(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #5

declare void @misc_UserErrorReport(ptr noundef, ...) local_unnamed_addr #6

; Function Attrs: inlinehint noreturn nounwind uwtable
define internal fastcc void @misc_Error() unnamed_addr #7 {
  %1 = load ptr, ptr @stderr, align 8
  %2 = tail call i32 @fflush(ptr noundef %1)
  %3 = load ptr, ptr @stdout, align 8
  %4 = tail call i32 @fflush(ptr noundef %3)
  %5 = load ptr, ptr @stderr, align 8
  %6 = tail call i32 @fflush(ptr noundef %5)
  tail call void @exit(i32 noundef 1) #23
  unreachable
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @yy_fatal_error(ptr noundef %0) unnamed_addr #8 {
  %2 = load ptr, ptr @stderr, align 8
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.13, ptr noundef %0) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local void @dfg_restart(ptr noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @yy_current_buffer, align 8
  %3 = icmp eq ptr %2, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = load ptr, ptr @dfg_in, align 8
  %6 = tail call ptr @dfg__create_buffer(ptr noundef %5, i32 noundef 16384)
  store ptr %6, ptr @yy_current_buffer, align 8
  %7 = icmp ne ptr %6, null
  tail call void @llvm.assume(i1 %7)
  br label %8

8:                                                ; preds = %4, %1
  %9 = phi ptr [ %6, %4 ], [ %2, %1 ]
  %10 = getelementptr inbounds %struct.yy_buffer_state, ptr %9, i64 0, i32 4
  store i32 0, ptr %10, align 4
  %11 = getelementptr inbounds %struct.yy_buffer_state, ptr %9, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8
  store i8 0, ptr %12, align 1
  %13 = load ptr, ptr %11, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 1
  store i8 0, ptr %14, align 1
  %15 = load ptr, ptr %11, align 8
  %16 = getelementptr inbounds %struct.yy_buffer_state, ptr %9, i64 0, i32 2
  store ptr %15, ptr %16, align 8
  %17 = load i32, ptr %10, align 4
  store ptr %15, ptr @dfg_text, align 8
  %18 = load ptr, ptr %9, align 8
  store ptr %18, ptr @dfg_in, align 8
  store ptr %0, ptr %9, align 8
  %19 = getelementptr inbounds %struct.yy_buffer_state, ptr %9, i64 0, i32 6
  store <4 x i32> <i32 1, i32 1, i32 1, i32 0>, ptr %19, align 4
  store i32 %17, ptr @yy_n_chars, align 4
  store ptr %15, ptr @yy_c_buf_p, align 8
  store ptr %15, ptr @dfg_text, align 8
  %20 = load ptr, ptr %9, align 8
  store ptr %20, ptr @dfg_in, align 8
  %21 = load i8, ptr %15, align 1
  store i8 %21, ptr @yy_hold_char, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @dfg__init_buffer(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 4
  store i32 0, ptr %5, align 4
  %6 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8
  store i8 0, ptr %7, align 1
  %8 = load ptr, ptr %6, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 1
  store i8 0, ptr %9, align 1
  %10 = load ptr, ptr %6, align 8
  %11 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 2
  store ptr %10, ptr %11, align 8
  %12 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 7
  store i32 1, ptr %12, align 8
  %13 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 9
  store i32 0, ptr %13, align 8
  %14 = load ptr, ptr @yy_current_buffer, align 8
  %15 = icmp eq ptr %14, %0
  br i1 %15, label %16, label %20

16:                                               ; preds = %4
  %17 = load i32, ptr %5, align 4
  store i32 %17, ptr @yy_n_chars, align 4
  store ptr %10, ptr @yy_c_buf_p, align 8
  store ptr %10, ptr @dfg_text, align 8
  %18 = load ptr, ptr %0, align 8
  store ptr %18, ptr @dfg_in, align 8
  %19 = load i8, ptr %10, align 1
  store i8 %19, ptr @yy_hold_char, align 1
  br label %20

20:                                               ; preds = %2, %4, %16
  store ptr %1, ptr %0, align 8
  %21 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 8
  store i32 1, ptr %21, align 4
  %22 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 6
  store i32 1, ptr %22, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @dfg__switch_to_buffer(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @yy_current_buffer, align 8
  %3 = icmp eq ptr %2, %0
  br i1 %3, label %19, label %4

4:                                                ; preds = %1
  %5 = icmp eq ptr %2, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %4
  %7 = load i8, ptr @yy_hold_char, align 1
  %8 = load ptr, ptr @yy_c_buf_p, align 8
  store i8 %7, ptr %8, align 1
  %9 = getelementptr inbounds %struct.yy_buffer_state, ptr %2, i64 0, i32 2
  store ptr %8, ptr %9, align 8
  %10 = load i32, ptr @yy_n_chars, align 4
  %11 = getelementptr inbounds %struct.yy_buffer_state, ptr %2, i64 0, i32 4
  store i32 %10, ptr %11, align 4
  br label %12

12:                                               ; preds = %6, %4
  store ptr %0, ptr @yy_current_buffer, align 8
  %13 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 4
  %14 = load i32, ptr %13, align 4
  store i32 %14, ptr @yy_n_chars, align 4
  %15 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8
  store ptr %16, ptr @yy_c_buf_p, align 8
  store ptr %16, ptr @dfg_text, align 8
  %17 = load ptr, ptr %0, align 8
  store ptr %17, ptr @dfg_in, align 8
  %18 = load i8, ptr %16, align 1
  store i8 %18, ptr @yy_hold_char, align 1
  br label %19

19:                                               ; preds = %1, %12
  ret void
}

; Function Attrs: mustprogress nounwind willreturn uwtable
define dso_local void @dfg__delete_buffer(ptr noundef %0) local_unnamed_addr #10 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr @yy_current_buffer, align 8
  %5 = icmp eq ptr %4, %0
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  store ptr null, ptr @yy_current_buffer, align 8
  br label %7

7:                                                ; preds = %6, %3
  %8 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 5
  %9 = load i32, ptr %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8
  tail call void @free(ptr noundef %13) #21
  br label %14

14:                                               ; preds = %11, %7
  tail call void @free(ptr noundef nonnull %0) #21
  br label %15

15:                                               ; preds = %1, %14
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @dfg__flush_buffer(ptr noundef %0) local_unnamed_addr #9 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 4
  store i32 0, ptr %4, align 4
  %5 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8
  store i8 0, ptr %6, align 1
  %7 = load ptr, ptr %5, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 1
  store i8 0, ptr %8, align 1
  %9 = load ptr, ptr %5, align 8
  %10 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 2
  store ptr %9, ptr %10, align 8
  %11 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 7
  store i32 1, ptr %11, align 8
  %12 = getelementptr inbounds %struct.yy_buffer_state, ptr %0, i64 0, i32 9
  store i32 0, ptr %12, align 8
  %13 = load ptr, ptr @yy_current_buffer, align 8
  %14 = icmp eq ptr %13, %0
  br i1 %14, label %15, label %19

15:                                               ; preds = %3
  %16 = load i32, ptr %4, align 4
  store i32 %16, ptr @yy_n_chars, align 4
  store ptr %9, ptr @yy_c_buf_p, align 8
  store ptr %9, ptr @dfg_text, align 8
  %17 = load ptr, ptr %0, align 8
  store ptr %17, ptr @dfg_in, align 8
  %18 = load i8, ptr %9, align 1
  store i8 %18, ptr @yy_hold_char, align 1
  br label %19

19:                                               ; preds = %1, %15, %3
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local ptr @dfg__scan_buffer(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = icmp ult i32 %1, 2
  br i1 %3, label %47, label %4

4:                                                ; preds = %2
  %5 = add i32 %1, -2
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = load i8, ptr %7, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %47

10:                                               ; preds = %4
  %11 = add i32 %1, -1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8, ptr %0, i64 %12
  %14 = load i8, ptr %13, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %47

16:                                               ; preds = %10
  %17 = tail call noalias dereferenceable_or_null(56) ptr @malloc(i64 noundef 56) #25
  %18 = icmp eq ptr %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  %20 = load ptr, ptr @stderr, align 8
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %20, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.7) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.yy_buffer_state, ptr %17, i64 0, i32 3
  store i32 %5, ptr %23, align 8
  %24 = getelementptr inbounds %struct.yy_buffer_state, ptr %17, i64 0, i32 1
  store ptr %0, ptr %24, align 8
  %25 = getelementptr inbounds %struct.yy_buffer_state, ptr %17, i64 0, i32 2
  store ptr %0, ptr %25, align 8
  %26 = getelementptr inbounds %struct.yy_buffer_state, ptr %17, i64 0, i32 5
  store ptr null, ptr %17, align 8
  %27 = getelementptr inbounds %struct.yy_buffer_state, ptr %17, i64 0, i32 4
  store i32 %5, ptr %27, align 4
  store <4 x i32> <i32 0, i32 0, i32 1, i32 0>, ptr %26, align 8
  %28 = getelementptr inbounds %struct.yy_buffer_state, ptr %17, i64 0, i32 9
  store i32 0, ptr %28, align 8
  %29 = load ptr, ptr @yy_current_buffer, align 8
  %30 = icmp eq ptr %29, %17
  br i1 %30, label %47, label %31

31:                                               ; preds = %22
  %32 = icmp eq ptr %29, null
  br i1 %32, label %42, label %33

33:                                               ; preds = %31
  %34 = load i8, ptr @yy_hold_char, align 1
  %35 = load ptr, ptr @yy_c_buf_p, align 8
  store i8 %34, ptr %35, align 1
  %36 = getelementptr inbounds %struct.yy_buffer_state, ptr %29, i64 0, i32 2
  store ptr %35, ptr %36, align 8
  %37 = load i32, ptr @yy_n_chars, align 4
  %38 = getelementptr inbounds %struct.yy_buffer_state, ptr %29, i64 0, i32 4
  store i32 %37, ptr %38, align 4
  %39 = load i32, ptr %27, align 4
  %40 = load ptr, ptr %25, align 8
  %41 = load ptr, ptr %17, align 8
  br label %42

42:                                               ; preds = %33, %31
  %43 = phi ptr [ %41, %33 ], [ null, %31 ]
  %44 = phi ptr [ %40, %33 ], [ %0, %31 ]
  %45 = phi i32 [ %39, %33 ], [ %5, %31 ]
  store ptr %17, ptr @yy_current_buffer, align 8
  store i32 %45, ptr @yy_n_chars, align 4
  store ptr %44, ptr @yy_c_buf_p, align 8
  store ptr %44, ptr @dfg_text, align 8
  store ptr %43, ptr @dfg_in, align 8
  %46 = load i8, ptr %44, align 1
  store i8 %46, ptr @yy_hold_char, align 1
  br label %47

47:                                               ; preds = %42, %22, %2, %4, %10
  %48 = phi ptr [ null, %10 ], [ null, %4 ], [ null, %2 ], [ %17, %22 ], [ %17, %42 ]
  ret ptr %48
}

; Function Attrs: nounwind uwtable
define dso_local ptr @dfg__scan_string(ptr nocapture noundef readonly %0) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i64 [ %7, %2 ], [ 0, %1 ]
  %4 = getelementptr inbounds i8, ptr %0, i64 %3
  %5 = load i8, ptr %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = add nuw i64 %3, 1
  br i1 %6, label %8, label %2, !llvm.loop !16

8:                                                ; preds = %2
  %9 = trunc i64 %3 to i32
  %10 = tail call ptr @dfg__scan_bytes(ptr noundef nonnull %0, i32 noundef %9)
  ret ptr %10
}

; Function Attrs: nounwind uwtable
define dso_local ptr @dfg__scan_bytes(ptr nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = add nsw i32 %1, 2
  %4 = zext i32 %3 to i64
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #25
  %6 = icmp eq ptr %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %5, ptr align 1 %0, i64 %10, i1 false)
  br label %14

11:                                               ; preds = %2
  %12 = load ptr, ptr @stderr, align 8
  %13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.8) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

14:                                               ; preds = %9, %7
  %15 = add nsw i32 %1, 1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, ptr %5, i64 %16
  store i8 0, ptr %17, align 1
  %18 = sext i32 %1 to i64
  %19 = getelementptr inbounds i8, ptr %5, i64 %18
  store i8 0, ptr %19, align 1
  %20 = tail call ptr @dfg__scan_buffer(ptr noundef nonnull %5, i32 noundef %3)
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %14
  %23 = load ptr, ptr @stderr, align 8
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %23, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.9) #22
  tail call void @exit(i32 noundef 2) #23
  unreachable

25:                                               ; preds = %14
  %26 = getelementptr inbounds %struct.yy_buffer_state, ptr %20, i64 0, i32 5
  store i32 1, ptr %26, align 8
  ret ptr %20
}

declare ptr @memory_Malloc(i32 noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #12

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind memory(read)
declare noundef i32 @ferror(ptr nocapture noundef) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #14

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #15

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #17

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #18

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #19

attributes #0 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { inlinehint nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nosync nounwind willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nounwind willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { inlinehint noreturn nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noreturn nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress nounwind willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { mustprogress nofree nounwind willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nofree nounwind memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #18 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #19 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #20 = { nounwind willreturn memory(none) }
attributes #21 = { nounwind }
attributes #22 = { cold }
attributes #23 = { noreturn nounwind }
attributes #24 = { nounwind allocsize(1) }
attributes #25 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !6, !10, !11}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !6, !10, !11}
!13 = distinct !{!13, !6, !10}
!14 = distinct !{!14, !6}
!15 = distinct !{!15, !6}
!16 = distinct !{!16, !6}
