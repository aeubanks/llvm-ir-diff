; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Benchmarks/MiBench/telecomm-gsm/long_term.c'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/MultiSource/Benchmarks/MiBench/telecomm-gsm/long_term.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gsm_state = type { [280 x i16], i16, i64, i32, [8 x i16], [2 x [8 x i16]], i16, i16, [9 x i16], i16, i8, i8 }

@gsm_QLB = external local_unnamed_addr global [4 x i16], align 2
@gsm_DLB = external local_unnamed_addr global [4 x i16], align 2

; Function Attrs: nounwind uwtable
define dso_local void @Gsm_Long_Term_Predictor(ptr nocapture noundef readnone %0, ptr nocapture noundef readonly %1, ptr noundef readonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef %5, ptr nocapture noundef writeonly %6) local_unnamed_addr #0 {
  %8 = ptrtoint ptr %1 to i64
  %9 = ptrtoint ptr %2 to i64
  %10 = ptrtoint ptr %4 to i64
  %11 = ptrtoint ptr %3 to i64
  %12 = ptrtoint ptr %1 to i64
  %13 = ptrtoint ptr %2 to i64
  %14 = ptrtoint ptr %4 to i64
  %15 = ptrtoint ptr %3 to i64
  %16 = ptrtoint ptr %1 to i64
  %17 = ptrtoint ptr %2 to i64
  %18 = ptrtoint ptr %4 to i64
  %19 = ptrtoint ptr %3 to i64
  %20 = ptrtoint ptr %1 to i64
  %21 = ptrtoint ptr %2 to i64
  %22 = ptrtoint ptr %4 to i64
  %23 = ptrtoint ptr %3 to i64
  %24 = load <8 x i16>, ptr %1, align 2, !tbaa !5
  %25 = icmp slt <8 x i16> %24, zeroinitializer
  %26 = icmp eq <8 x i16> %24, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %27 = sub <8 x i16> zeroinitializer, %24
  %28 = select <8 x i1> %26, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %27
  %29 = select <8 x i1> %25, <8 x i16> %28, <8 x i16> %24
  %30 = getelementptr inbounds i16, ptr %1, i64 8
  %31 = load <8 x i16>, ptr %30, align 2, !tbaa !5
  %32 = icmp slt <8 x i16> %31, zeroinitializer
  %33 = icmp eq <8 x i16> %31, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %34 = sub <8 x i16> zeroinitializer, %31
  %35 = select <8 x i1> %33, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %34
  %36 = select <8 x i1> %32, <8 x i16> %35, <8 x i16> %31
  %37 = tail call <8 x i16> @llvm.smax.v8i16(<8 x i16> %29, <8 x i16> %36)
  %38 = getelementptr inbounds i16, ptr %1, i64 16
  %39 = load <8 x i16>, ptr %38, align 2, !tbaa !5
  %40 = icmp slt <8 x i16> %39, zeroinitializer
  %41 = icmp eq <8 x i16> %39, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %42 = sub <8 x i16> zeroinitializer, %39
  %43 = select <8 x i1> %41, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %42
  %44 = select <8 x i1> %40, <8 x i16> %43, <8 x i16> %39
  %45 = tail call <8 x i16> @llvm.smax.v8i16(<8 x i16> %37, <8 x i16> %44)
  %46 = getelementptr inbounds i16, ptr %1, i64 24
  %47 = load <8 x i16>, ptr %46, align 2, !tbaa !5
  %48 = icmp slt <8 x i16> %47, zeroinitializer
  %49 = icmp eq <8 x i16> %47, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %50 = sub <8 x i16> zeroinitializer, %47
  %51 = select <8 x i1> %49, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %50
  %52 = select <8 x i1> %48, <8 x i16> %51, <8 x i16> %47
  %53 = tail call <8 x i16> @llvm.smax.v8i16(<8 x i16> %45, <8 x i16> %52)
  %54 = getelementptr inbounds i16, ptr %1, i64 32
  %55 = load <8 x i16>, ptr %54, align 2, !tbaa !5
  %56 = icmp slt <8 x i16> %55, zeroinitializer
  %57 = icmp eq <8 x i16> %55, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %58 = sub <8 x i16> zeroinitializer, %55
  %59 = select <8 x i1> %57, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %58
  %60 = select <8 x i1> %56, <8 x i16> %59, <8 x i16> %55
  %61 = tail call <8 x i16> @llvm.smax.v8i16(<8 x i16> %53, <8 x i16> %60)
  %62 = tail call <8 x i16> @llvm.smax.v8i16(<8 x i16> %61, <8 x i16> zeroinitializer)
  %63 = tail call i16 @llvm.vector.reduce.smax.v8i16(<8 x i16> %62)
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %7
  %66 = zext i16 %63 to i64
  %67 = shl nuw nsw i64 %66, 16
  %68 = tail call signext i16 @gsm_norm(i64 noundef %67) #5
  %69 = freeze i16 %68
  %70 = sext i16 %69 to i32
  %71 = icmp sgt i16 %69, 6
  %72 = shl nsw i32 %70, 16
  %73 = sub i32 393216, %72
  %74 = ashr exact i32 %73, 16
  %75 = select i1 %71, i32 0, i32 %74
  br label %76

76:                                               ; preds = %65, %7
  %77 = phi i32 [ 6, %7 ], [ %75, %65 ]
  %78 = load i16, ptr %1, align 2, !tbaa !5
  %79 = sext i16 %78 to i32
  %80 = ashr i32 %79, %77
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i16, ptr %1, i64 1
  %83 = load i16, ptr %82, align 2, !tbaa !5
  %84 = sext i16 %83 to i32
  %85 = ashr i32 %84, %77
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i16, ptr %1, i64 2
  %88 = load i16, ptr %87, align 2, !tbaa !5
  %89 = sext i16 %88 to i32
  %90 = ashr i32 %89, %77
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i16, ptr %1, i64 3
  %93 = load i16, ptr %92, align 2, !tbaa !5
  %94 = sext i16 %93 to i32
  %95 = ashr i32 %94, %77
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i16, ptr %1, i64 4
  %98 = load i16, ptr %97, align 2, !tbaa !5
  %99 = sext i16 %98 to i32
  %100 = ashr i32 %99, %77
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i16, ptr %1, i64 5
  %103 = load i16, ptr %102, align 2, !tbaa !5
  %104 = sext i16 %103 to i32
  %105 = ashr i32 %104, %77
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds i16, ptr %1, i64 6
  %108 = load i16, ptr %107, align 2, !tbaa !5
  %109 = sext i16 %108 to i32
  %110 = ashr i32 %109, %77
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i16, ptr %1, i64 7
  %113 = load i16, ptr %112, align 2, !tbaa !5
  %114 = sext i16 %113 to i32
  %115 = ashr i32 %114, %77
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds i16, ptr %1, i64 8
  %118 = load i16, ptr %117, align 2, !tbaa !5
  %119 = sext i16 %118 to i32
  %120 = ashr i32 %119, %77
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i16, ptr %1, i64 9
  %123 = load i16, ptr %122, align 2, !tbaa !5
  %124 = sext i16 %123 to i32
  %125 = ashr i32 %124, %77
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i16, ptr %1, i64 10
  %128 = load i16, ptr %127, align 2, !tbaa !5
  %129 = sext i16 %128 to i32
  %130 = ashr i32 %129, %77
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i16, ptr %1, i64 11
  %133 = load i16, ptr %132, align 2, !tbaa !5
  %134 = sext i16 %133 to i32
  %135 = ashr i32 %134, %77
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i16, ptr %1, i64 12
  %138 = load i16, ptr %137, align 2, !tbaa !5
  %139 = sext i16 %138 to i32
  %140 = ashr i32 %139, %77
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i16, ptr %1, i64 13
  %143 = load i16, ptr %142, align 2, !tbaa !5
  %144 = sext i16 %143 to i32
  %145 = ashr i32 %144, %77
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds i16, ptr %1, i64 14
  %148 = load i16, ptr %147, align 2, !tbaa !5
  %149 = sext i16 %148 to i32
  %150 = ashr i32 %149, %77
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds i16, ptr %1, i64 15
  %153 = load i16, ptr %152, align 2, !tbaa !5
  %154 = sext i16 %153 to i32
  %155 = ashr i32 %154, %77
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i16, ptr %1, i64 16
  %158 = load i16, ptr %157, align 2, !tbaa !5
  %159 = sext i16 %158 to i32
  %160 = ashr i32 %159, %77
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds i16, ptr %1, i64 17
  %163 = load i16, ptr %162, align 2, !tbaa !5
  %164 = sext i16 %163 to i32
  %165 = ashr i32 %164, %77
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i16, ptr %1, i64 18
  %168 = load i16, ptr %167, align 2, !tbaa !5
  %169 = sext i16 %168 to i32
  %170 = ashr i32 %169, %77
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds i16, ptr %1, i64 19
  %173 = load i16, ptr %172, align 2, !tbaa !5
  %174 = sext i16 %173 to i32
  %175 = ashr i32 %174, %77
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i16, ptr %1, i64 20
  %178 = load i16, ptr %177, align 2, !tbaa !5
  %179 = sext i16 %178 to i32
  %180 = ashr i32 %179, %77
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds i16, ptr %1, i64 21
  %183 = load i16, ptr %182, align 2, !tbaa !5
  %184 = sext i16 %183 to i32
  %185 = ashr i32 %184, %77
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i16, ptr %1, i64 22
  %188 = load i16, ptr %187, align 2, !tbaa !5
  %189 = sext i16 %188 to i32
  %190 = ashr i32 %189, %77
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds i16, ptr %1, i64 23
  %193 = load i16, ptr %192, align 2, !tbaa !5
  %194 = sext i16 %193 to i32
  %195 = ashr i32 %194, %77
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds i16, ptr %1, i64 24
  %198 = load i16, ptr %197, align 2, !tbaa !5
  %199 = sext i16 %198 to i32
  %200 = ashr i32 %199, %77
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds i16, ptr %1, i64 25
  %203 = load i16, ptr %202, align 2, !tbaa !5
  %204 = sext i16 %203 to i32
  %205 = ashr i32 %204, %77
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds i16, ptr %1, i64 26
  %208 = load i16, ptr %207, align 2, !tbaa !5
  %209 = sext i16 %208 to i32
  %210 = ashr i32 %209, %77
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds i16, ptr %1, i64 27
  %213 = load i16, ptr %212, align 2, !tbaa !5
  %214 = sext i16 %213 to i32
  %215 = ashr i32 %214, %77
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds i16, ptr %1, i64 28
  %218 = load i16, ptr %217, align 2, !tbaa !5
  %219 = sext i16 %218 to i32
  %220 = ashr i32 %219, %77
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds i16, ptr %1, i64 29
  %223 = load i16, ptr %222, align 2, !tbaa !5
  %224 = sext i16 %223 to i32
  %225 = ashr i32 %224, %77
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds i16, ptr %1, i64 30
  %228 = load i16, ptr %227, align 2, !tbaa !5
  %229 = sext i16 %228 to i32
  %230 = ashr i32 %229, %77
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds i16, ptr %1, i64 31
  %233 = load i16, ptr %232, align 2, !tbaa !5
  %234 = sext i16 %233 to i32
  %235 = ashr i32 %234, %77
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds i16, ptr %1, i64 32
  %238 = load i16, ptr %237, align 2, !tbaa !5
  %239 = sext i16 %238 to i32
  %240 = ashr i32 %239, %77
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds i16, ptr %1, i64 33
  %243 = load i16, ptr %242, align 2, !tbaa !5
  %244 = sext i16 %243 to i32
  %245 = ashr i32 %244, %77
  %246 = zext i32 %245 to i64
  %247 = getelementptr inbounds i16, ptr %1, i64 34
  %248 = load i16, ptr %247, align 2, !tbaa !5
  %249 = sext i16 %248 to i32
  %250 = ashr i32 %249, %77
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds i16, ptr %1, i64 35
  %253 = load i16, ptr %252, align 2, !tbaa !5
  %254 = sext i16 %253 to i32
  %255 = ashr i32 %254, %77
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds i16, ptr %1, i64 36
  %258 = load i16, ptr %257, align 2, !tbaa !5
  %259 = sext i16 %258 to i32
  %260 = ashr i32 %259, %77
  %261 = zext i32 %260 to i64
  %262 = getelementptr inbounds i16, ptr %1, i64 37
  %263 = load i16, ptr %262, align 2, !tbaa !5
  %264 = sext i16 %263 to i32
  %265 = ashr i32 %264, %77
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds i16, ptr %1, i64 38
  %268 = load i16, ptr %267, align 2, !tbaa !5
  %269 = sext i16 %268 to i32
  %270 = ashr i32 %269, %77
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds i16, ptr %1, i64 39
  %273 = load i16, ptr %272, align 2, !tbaa !5
  %274 = sext i16 %273 to i32
  %275 = ashr i32 %274, %77
  %276 = zext i32 %275 to i64
  %277 = shl i64 %81, 48
  %278 = ashr exact i64 %277, 48
  %279 = shl i64 %86, 48
  %280 = ashr exact i64 %279, 48
  %281 = shl i64 %91, 48
  %282 = ashr exact i64 %281, 48
  %283 = shl i64 %96, 48
  %284 = ashr exact i64 %283, 48
  %285 = shl i64 %101, 48
  %286 = ashr exact i64 %285, 48
  %287 = shl i64 %106, 48
  %288 = ashr exact i64 %287, 48
  %289 = shl i64 %111, 48
  %290 = ashr exact i64 %289, 48
  %291 = shl i64 %116, 48
  %292 = ashr exact i64 %291, 48
  %293 = shl i64 %121, 48
  %294 = ashr exact i64 %293, 48
  %295 = shl i64 %126, 48
  %296 = ashr exact i64 %295, 48
  %297 = shl i64 %131, 48
  %298 = ashr exact i64 %297, 48
  %299 = shl i64 %136, 48
  %300 = ashr exact i64 %299, 48
  %301 = shl i64 %141, 48
  %302 = ashr exact i64 %301, 48
  %303 = shl i64 %146, 48
  %304 = ashr exact i64 %303, 48
  %305 = shl i64 %151, 48
  %306 = ashr exact i64 %305, 48
  %307 = shl i64 %156, 48
  %308 = ashr exact i64 %307, 48
  %309 = shl i64 %161, 48
  %310 = ashr exact i64 %309, 48
  %311 = shl i64 %166, 48
  %312 = ashr exact i64 %311, 48
  %313 = shl i64 %171, 48
  %314 = ashr exact i64 %313, 48
  %315 = shl i64 %176, 48
  %316 = ashr exact i64 %315, 48
  %317 = shl i64 %181, 48
  %318 = ashr exact i64 %317, 48
  %319 = shl i64 %186, 48
  %320 = ashr exact i64 %319, 48
  %321 = shl i64 %191, 48
  %322 = ashr exact i64 %321, 48
  %323 = shl i64 %196, 48
  %324 = ashr exact i64 %323, 48
  %325 = shl i64 %201, 48
  %326 = ashr exact i64 %325, 48
  %327 = shl i64 %206, 48
  %328 = ashr exact i64 %327, 48
  %329 = shl i64 %211, 48
  %330 = ashr exact i64 %329, 48
  %331 = shl i64 %216, 48
  %332 = ashr exact i64 %331, 48
  %333 = shl i64 %221, 48
  %334 = ashr exact i64 %333, 48
  %335 = shl i64 %226, 48
  %336 = ashr exact i64 %335, 48
  %337 = shl i64 %231, 48
  %338 = ashr exact i64 %337, 48
  %339 = shl i64 %236, 48
  %340 = ashr exact i64 %339, 48
  %341 = shl i64 %241, 48
  %342 = ashr exact i64 %341, 48
  %343 = shl i64 %246, 48
  %344 = ashr exact i64 %343, 48
  %345 = shl i64 %251, 48
  %346 = ashr exact i64 %345, 48
  %347 = shl i64 %256, 48
  %348 = ashr exact i64 %347, 48
  %349 = shl i64 %261, 48
  %350 = ashr exact i64 %349, 48
  %351 = shl i64 %266, 48
  %352 = ashr exact i64 %351, 48
  %353 = shl i64 %271, 48
  %354 = ashr exact i64 %353, 48
  %355 = shl i64 %276, 48
  %356 = ashr exact i64 %355, 48
  br label %357

357:                                              ; preds = %357, %76
  %358 = phi i64 [ 40, %76 ], [ %604, %357 ]
  %359 = phi i16 [ 40, %76 ], [ %603, %357 ]
  %360 = phi i64 [ 0, %76 ], [ %602, %357 ]
  %361 = trunc i64 %358 to i16
  %362 = sub nsw i64 0, %358
  %363 = getelementptr inbounds i16, ptr %2, i64 %362
  %364 = load i16, ptr %363, align 2, !tbaa !5
  %365 = sext i16 %364 to i64
  %366 = mul nsw i64 %278, %365
  %367 = sub nsw i64 1, %358
  %368 = getelementptr inbounds i16, ptr %2, i64 %367
  %369 = load i16, ptr %368, align 2, !tbaa !5
  %370 = sext i16 %369 to i64
  %371 = mul nsw i64 %280, %370
  %372 = add nsw i64 %371, %366
  %373 = sub nsw i64 2, %358
  %374 = getelementptr inbounds i16, ptr %2, i64 %373
  %375 = load i16, ptr %374, align 2, !tbaa !5
  %376 = sext i16 %375 to i64
  %377 = mul nsw i64 %282, %376
  %378 = add nsw i64 %372, %377
  %379 = sub nsw i64 3, %358
  %380 = getelementptr inbounds i16, ptr %2, i64 %379
  %381 = load i16, ptr %380, align 2, !tbaa !5
  %382 = sext i16 %381 to i64
  %383 = mul nsw i64 %284, %382
  %384 = add nsw i64 %378, %383
  %385 = sub nsw i64 4, %358
  %386 = getelementptr inbounds i16, ptr %2, i64 %385
  %387 = load i16, ptr %386, align 2, !tbaa !5
  %388 = sext i16 %387 to i64
  %389 = mul nsw i64 %286, %388
  %390 = add nsw i64 %384, %389
  %391 = sub nsw i64 5, %358
  %392 = getelementptr inbounds i16, ptr %2, i64 %391
  %393 = load i16, ptr %392, align 2, !tbaa !5
  %394 = sext i16 %393 to i64
  %395 = mul nsw i64 %288, %394
  %396 = add nsw i64 %390, %395
  %397 = sub nsw i64 6, %358
  %398 = getelementptr inbounds i16, ptr %2, i64 %397
  %399 = load i16, ptr %398, align 2, !tbaa !5
  %400 = sext i16 %399 to i64
  %401 = mul nsw i64 %290, %400
  %402 = add nsw i64 %396, %401
  %403 = sub nsw i64 7, %358
  %404 = getelementptr inbounds i16, ptr %2, i64 %403
  %405 = load i16, ptr %404, align 2, !tbaa !5
  %406 = sext i16 %405 to i64
  %407 = mul nsw i64 %292, %406
  %408 = add nsw i64 %402, %407
  %409 = sub nsw i64 8, %358
  %410 = getelementptr inbounds i16, ptr %2, i64 %409
  %411 = load i16, ptr %410, align 2, !tbaa !5
  %412 = sext i16 %411 to i64
  %413 = mul nsw i64 %294, %412
  %414 = add nsw i64 %408, %413
  %415 = sub nsw i64 9, %358
  %416 = getelementptr inbounds i16, ptr %2, i64 %415
  %417 = load i16, ptr %416, align 2, !tbaa !5
  %418 = sext i16 %417 to i64
  %419 = mul nsw i64 %296, %418
  %420 = add nsw i64 %414, %419
  %421 = sub nsw i64 10, %358
  %422 = getelementptr inbounds i16, ptr %2, i64 %421
  %423 = load i16, ptr %422, align 2, !tbaa !5
  %424 = sext i16 %423 to i64
  %425 = mul nsw i64 %298, %424
  %426 = add nsw i64 %420, %425
  %427 = sub nsw i64 11, %358
  %428 = getelementptr inbounds i16, ptr %2, i64 %427
  %429 = load i16, ptr %428, align 2, !tbaa !5
  %430 = sext i16 %429 to i64
  %431 = mul nsw i64 %300, %430
  %432 = add nsw i64 %426, %431
  %433 = sub nsw i64 12, %358
  %434 = getelementptr inbounds i16, ptr %2, i64 %433
  %435 = load i16, ptr %434, align 2, !tbaa !5
  %436 = sext i16 %435 to i64
  %437 = mul nsw i64 %302, %436
  %438 = add nsw i64 %432, %437
  %439 = sub nsw i64 13, %358
  %440 = getelementptr inbounds i16, ptr %2, i64 %439
  %441 = load i16, ptr %440, align 2, !tbaa !5
  %442 = sext i16 %441 to i64
  %443 = mul nsw i64 %304, %442
  %444 = add nsw i64 %438, %443
  %445 = sub nsw i64 14, %358
  %446 = getelementptr inbounds i16, ptr %2, i64 %445
  %447 = load i16, ptr %446, align 2, !tbaa !5
  %448 = sext i16 %447 to i64
  %449 = mul nsw i64 %306, %448
  %450 = add nsw i64 %444, %449
  %451 = sub nsw i64 15, %358
  %452 = getelementptr inbounds i16, ptr %2, i64 %451
  %453 = load i16, ptr %452, align 2, !tbaa !5
  %454 = sext i16 %453 to i64
  %455 = mul nsw i64 %308, %454
  %456 = add nsw i64 %450, %455
  %457 = sub nsw i64 16, %358
  %458 = getelementptr inbounds i16, ptr %2, i64 %457
  %459 = load i16, ptr %458, align 2, !tbaa !5
  %460 = sext i16 %459 to i64
  %461 = mul nsw i64 %310, %460
  %462 = add nsw i64 %456, %461
  %463 = sub nsw i64 17, %358
  %464 = getelementptr inbounds i16, ptr %2, i64 %463
  %465 = load i16, ptr %464, align 2, !tbaa !5
  %466 = sext i16 %465 to i64
  %467 = mul nsw i64 %312, %466
  %468 = add nsw i64 %462, %467
  %469 = sub nsw i64 18, %358
  %470 = getelementptr inbounds i16, ptr %2, i64 %469
  %471 = load i16, ptr %470, align 2, !tbaa !5
  %472 = sext i16 %471 to i64
  %473 = mul nsw i64 %314, %472
  %474 = add nsw i64 %468, %473
  %475 = sub nsw i64 19, %358
  %476 = getelementptr inbounds i16, ptr %2, i64 %475
  %477 = load i16, ptr %476, align 2, !tbaa !5
  %478 = sext i16 %477 to i64
  %479 = mul nsw i64 %316, %478
  %480 = add nsw i64 %474, %479
  %481 = sub nsw i64 20, %358
  %482 = getelementptr inbounds i16, ptr %2, i64 %481
  %483 = load i16, ptr %482, align 2, !tbaa !5
  %484 = sext i16 %483 to i64
  %485 = mul nsw i64 %318, %484
  %486 = add nsw i64 %480, %485
  %487 = sub nsw i64 21, %358
  %488 = getelementptr inbounds i16, ptr %2, i64 %487
  %489 = load i16, ptr %488, align 2, !tbaa !5
  %490 = sext i16 %489 to i64
  %491 = mul nsw i64 %320, %490
  %492 = add nsw i64 %486, %491
  %493 = sub nsw i64 22, %358
  %494 = getelementptr inbounds i16, ptr %2, i64 %493
  %495 = load i16, ptr %494, align 2, !tbaa !5
  %496 = sext i16 %495 to i64
  %497 = mul nsw i64 %322, %496
  %498 = add nsw i64 %492, %497
  %499 = sub nsw i64 23, %358
  %500 = getelementptr inbounds i16, ptr %2, i64 %499
  %501 = load i16, ptr %500, align 2, !tbaa !5
  %502 = sext i16 %501 to i64
  %503 = mul nsw i64 %324, %502
  %504 = add nsw i64 %498, %503
  %505 = sub nsw i64 24, %358
  %506 = getelementptr inbounds i16, ptr %2, i64 %505
  %507 = load i16, ptr %506, align 2, !tbaa !5
  %508 = sext i16 %507 to i64
  %509 = mul nsw i64 %326, %508
  %510 = add nsw i64 %504, %509
  %511 = sub nsw i64 25, %358
  %512 = getelementptr inbounds i16, ptr %2, i64 %511
  %513 = load i16, ptr %512, align 2, !tbaa !5
  %514 = sext i16 %513 to i64
  %515 = mul nsw i64 %328, %514
  %516 = add nsw i64 %510, %515
  %517 = sub nsw i64 26, %358
  %518 = getelementptr inbounds i16, ptr %2, i64 %517
  %519 = load i16, ptr %518, align 2, !tbaa !5
  %520 = sext i16 %519 to i64
  %521 = mul nsw i64 %330, %520
  %522 = add nsw i64 %516, %521
  %523 = sub nsw i64 27, %358
  %524 = getelementptr inbounds i16, ptr %2, i64 %523
  %525 = load i16, ptr %524, align 2, !tbaa !5
  %526 = sext i16 %525 to i64
  %527 = mul nsw i64 %332, %526
  %528 = add nsw i64 %522, %527
  %529 = sub nsw i64 28, %358
  %530 = getelementptr inbounds i16, ptr %2, i64 %529
  %531 = load i16, ptr %530, align 2, !tbaa !5
  %532 = sext i16 %531 to i64
  %533 = mul nsw i64 %334, %532
  %534 = add nsw i64 %528, %533
  %535 = sub nsw i64 29, %358
  %536 = getelementptr inbounds i16, ptr %2, i64 %535
  %537 = load i16, ptr %536, align 2, !tbaa !5
  %538 = sext i16 %537 to i64
  %539 = mul nsw i64 %336, %538
  %540 = add nsw i64 %534, %539
  %541 = sub nsw i64 30, %358
  %542 = getelementptr inbounds i16, ptr %2, i64 %541
  %543 = load i16, ptr %542, align 2, !tbaa !5
  %544 = sext i16 %543 to i64
  %545 = mul nsw i64 %338, %544
  %546 = add nsw i64 %540, %545
  %547 = sub nsw i64 31, %358
  %548 = getelementptr inbounds i16, ptr %2, i64 %547
  %549 = load i16, ptr %548, align 2, !tbaa !5
  %550 = sext i16 %549 to i64
  %551 = mul nsw i64 %340, %550
  %552 = add nsw i64 %546, %551
  %553 = sub nsw i64 32, %358
  %554 = getelementptr inbounds i16, ptr %2, i64 %553
  %555 = load i16, ptr %554, align 2, !tbaa !5
  %556 = sext i16 %555 to i64
  %557 = mul nsw i64 %342, %556
  %558 = add nsw i64 %552, %557
  %559 = sub nsw i64 33, %358
  %560 = getelementptr inbounds i16, ptr %2, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !5
  %562 = sext i16 %561 to i64
  %563 = mul nsw i64 %344, %562
  %564 = add nsw i64 %558, %563
  %565 = sub nsw i64 34, %358
  %566 = getelementptr inbounds i16, ptr %2, i64 %565
  %567 = load i16, ptr %566, align 2, !tbaa !5
  %568 = sext i16 %567 to i64
  %569 = mul nsw i64 %346, %568
  %570 = add nsw i64 %564, %569
  %571 = sub nsw i64 35, %358
  %572 = getelementptr inbounds i16, ptr %2, i64 %571
  %573 = load i16, ptr %572, align 2, !tbaa !5
  %574 = sext i16 %573 to i64
  %575 = mul nsw i64 %348, %574
  %576 = add nsw i64 %570, %575
  %577 = sub nsw i64 36, %358
  %578 = getelementptr inbounds i16, ptr %2, i64 %577
  %579 = load i16, ptr %578, align 2, !tbaa !5
  %580 = sext i16 %579 to i64
  %581 = mul nsw i64 %350, %580
  %582 = add nsw i64 %576, %581
  %583 = sub nsw i64 37, %358
  %584 = getelementptr inbounds i16, ptr %2, i64 %583
  %585 = load i16, ptr %584, align 2, !tbaa !5
  %586 = sext i16 %585 to i64
  %587 = mul nsw i64 %352, %586
  %588 = add nsw i64 %582, %587
  %589 = sub nsw i64 38, %358
  %590 = getelementptr inbounds i16, ptr %2, i64 %589
  %591 = load i16, ptr %590, align 2, !tbaa !5
  %592 = sext i16 %591 to i64
  %593 = mul nsw i64 %354, %592
  %594 = add nsw i64 %588, %593
  %595 = sub nsw i64 39, %358
  %596 = getelementptr inbounds i16, ptr %2, i64 %595
  %597 = load i16, ptr %596, align 2, !tbaa !5
  %598 = sext i16 %597 to i64
  %599 = mul nsw i64 %356, %598
  %600 = add nsw i64 %594, %599
  %601 = icmp sgt i64 %600, %360
  %602 = tail call i64 @llvm.smax.i64(i64 %600, i64 %360)
  %603 = select i1 %601, i16 %361, i16 %359
  %604 = add nuw nsw i64 %358, 1
  %605 = icmp eq i64 %604, 121
  br i1 %605, label %606, label %357, !llvm.loop !9

606:                                              ; preds = %357
  store i16 %603, ptr %5, align 2, !tbaa !5
  %607 = sub nsw i32 6, %77
  %608 = zext i32 %607 to i64
  %609 = sext i16 %603 to i64
  %610 = sub nsw i64 0, %609
  %611 = getelementptr inbounds i16, ptr %2, i64 %610
  %612 = load i16, ptr %611, align 2, !tbaa !5
  %613 = ashr i16 %612, 3
  %614 = sext i16 %613 to i64
  %615 = mul nsw i64 %614, %614
  %616 = sub nsw i64 1, %609
  %617 = getelementptr inbounds i16, ptr %2, i64 %616
  %618 = load i16, ptr %617, align 2, !tbaa !5
  %619 = ashr i16 %618, 3
  %620 = sext i16 %619 to i64
  %621 = mul nsw i64 %620, %620
  %622 = add nuw nsw i64 %621, %615
  %623 = sub nsw i64 2, %609
  %624 = getelementptr inbounds i16, ptr %2, i64 %623
  %625 = load i16, ptr %624, align 2, !tbaa !5
  %626 = ashr i16 %625, 3
  %627 = sext i16 %626 to i64
  %628 = mul nsw i64 %627, %627
  %629 = add nuw nsw i64 %622, %628
  %630 = sub nsw i64 3, %609
  %631 = getelementptr inbounds i16, ptr %2, i64 %630
  %632 = load i16, ptr %631, align 2, !tbaa !5
  %633 = ashr i16 %632, 3
  %634 = sext i16 %633 to i64
  %635 = mul nsw i64 %634, %634
  %636 = add nuw nsw i64 %629, %635
  %637 = sub nsw i64 4, %609
  %638 = getelementptr inbounds i16, ptr %2, i64 %637
  %639 = load i16, ptr %638, align 2, !tbaa !5
  %640 = ashr i16 %639, 3
  %641 = sext i16 %640 to i64
  %642 = mul nsw i64 %641, %641
  %643 = add nuw nsw i64 %636, %642
  %644 = sub nsw i64 5, %609
  %645 = getelementptr inbounds i16, ptr %2, i64 %644
  %646 = load i16, ptr %645, align 2, !tbaa !5
  %647 = ashr i16 %646, 3
  %648 = sext i16 %647 to i64
  %649 = mul nsw i64 %648, %648
  %650 = add nuw nsw i64 %643, %649
  %651 = sub nsw i64 6, %609
  %652 = getelementptr inbounds i16, ptr %2, i64 %651
  %653 = load i16, ptr %652, align 2, !tbaa !5
  %654 = ashr i16 %653, 3
  %655 = sext i16 %654 to i64
  %656 = mul nsw i64 %655, %655
  %657 = add nuw nsw i64 %650, %656
  %658 = sub nsw i64 7, %609
  %659 = getelementptr inbounds i16, ptr %2, i64 %658
  %660 = load i16, ptr %659, align 2, !tbaa !5
  %661 = ashr i16 %660, 3
  %662 = sext i16 %661 to i64
  %663 = mul nsw i64 %662, %662
  %664 = add nuw nsw i64 %657, %663
  %665 = sub nsw i64 8, %609
  %666 = getelementptr inbounds i16, ptr %2, i64 %665
  %667 = load i16, ptr %666, align 2, !tbaa !5
  %668 = ashr i16 %667, 3
  %669 = sext i16 %668 to i64
  %670 = mul nsw i64 %669, %669
  %671 = add nuw nsw i64 %664, %670
  %672 = sub nsw i64 9, %609
  %673 = getelementptr inbounds i16, ptr %2, i64 %672
  %674 = load i16, ptr %673, align 2, !tbaa !5
  %675 = ashr i16 %674, 3
  %676 = sext i16 %675 to i64
  %677 = mul nsw i64 %676, %676
  %678 = add nuw nsw i64 %671, %677
  %679 = sub nsw i64 10, %609
  %680 = getelementptr inbounds i16, ptr %2, i64 %679
  %681 = load i16, ptr %680, align 2, !tbaa !5
  %682 = ashr i16 %681, 3
  %683 = sext i16 %682 to i64
  %684 = mul nsw i64 %683, %683
  %685 = add nuw nsw i64 %678, %684
  %686 = sub nsw i64 11, %609
  %687 = getelementptr inbounds i16, ptr %2, i64 %686
  %688 = load i16, ptr %687, align 2, !tbaa !5
  %689 = ashr i16 %688, 3
  %690 = sext i16 %689 to i64
  %691 = mul nsw i64 %690, %690
  %692 = add nuw nsw i64 %685, %691
  %693 = sub nsw i64 12, %609
  %694 = getelementptr inbounds i16, ptr %2, i64 %693
  %695 = load i16, ptr %694, align 2, !tbaa !5
  %696 = ashr i16 %695, 3
  %697 = sext i16 %696 to i64
  %698 = mul nsw i64 %697, %697
  %699 = add nuw nsw i64 %692, %698
  %700 = sub nsw i64 13, %609
  %701 = getelementptr inbounds i16, ptr %2, i64 %700
  %702 = load i16, ptr %701, align 2, !tbaa !5
  %703 = ashr i16 %702, 3
  %704 = sext i16 %703 to i64
  %705 = mul nsw i64 %704, %704
  %706 = add nuw nsw i64 %699, %705
  %707 = sub nsw i64 14, %609
  %708 = getelementptr inbounds i16, ptr %2, i64 %707
  %709 = load i16, ptr %708, align 2, !tbaa !5
  %710 = ashr i16 %709, 3
  %711 = sext i16 %710 to i64
  %712 = mul nsw i64 %711, %711
  %713 = add nuw nsw i64 %706, %712
  %714 = sub nsw i64 15, %609
  %715 = getelementptr inbounds i16, ptr %2, i64 %714
  %716 = load i16, ptr %715, align 2, !tbaa !5
  %717 = ashr i16 %716, 3
  %718 = sext i16 %717 to i64
  %719 = mul nsw i64 %718, %718
  %720 = add nuw nsw i64 %713, %719
  %721 = sub nsw i64 16, %609
  %722 = getelementptr inbounds i16, ptr %2, i64 %721
  %723 = load i16, ptr %722, align 2, !tbaa !5
  %724 = ashr i16 %723, 3
  %725 = sext i16 %724 to i64
  %726 = mul nsw i64 %725, %725
  %727 = add nuw nsw i64 %720, %726
  %728 = sub nsw i64 17, %609
  %729 = getelementptr inbounds i16, ptr %2, i64 %728
  %730 = load i16, ptr %729, align 2, !tbaa !5
  %731 = ashr i16 %730, 3
  %732 = sext i16 %731 to i64
  %733 = mul nsw i64 %732, %732
  %734 = add nuw nsw i64 %727, %733
  %735 = sub nsw i64 18, %609
  %736 = getelementptr inbounds i16, ptr %2, i64 %735
  %737 = load i16, ptr %736, align 2, !tbaa !5
  %738 = ashr i16 %737, 3
  %739 = sext i16 %738 to i64
  %740 = mul nsw i64 %739, %739
  %741 = add nuw nsw i64 %734, %740
  %742 = sub nsw i64 19, %609
  %743 = getelementptr inbounds i16, ptr %2, i64 %742
  %744 = load i16, ptr %743, align 2, !tbaa !5
  %745 = ashr i16 %744, 3
  %746 = sext i16 %745 to i64
  %747 = mul nsw i64 %746, %746
  %748 = add nuw nsw i64 %741, %747
  %749 = sub nsw i64 20, %609
  %750 = getelementptr inbounds i16, ptr %2, i64 %749
  %751 = load i16, ptr %750, align 2, !tbaa !5
  %752 = ashr i16 %751, 3
  %753 = sext i16 %752 to i64
  %754 = mul nsw i64 %753, %753
  %755 = add nuw nsw i64 %748, %754
  %756 = sub nsw i64 21, %609
  %757 = getelementptr inbounds i16, ptr %2, i64 %756
  %758 = load i16, ptr %757, align 2, !tbaa !5
  %759 = ashr i16 %758, 3
  %760 = sext i16 %759 to i64
  %761 = mul nsw i64 %760, %760
  %762 = add nuw nsw i64 %755, %761
  %763 = sub nsw i64 22, %609
  %764 = getelementptr inbounds i16, ptr %2, i64 %763
  %765 = load i16, ptr %764, align 2, !tbaa !5
  %766 = ashr i16 %765, 3
  %767 = sext i16 %766 to i64
  %768 = mul nsw i64 %767, %767
  %769 = add nuw nsw i64 %762, %768
  %770 = sub nsw i64 23, %609
  %771 = getelementptr inbounds i16, ptr %2, i64 %770
  %772 = load i16, ptr %771, align 2, !tbaa !5
  %773 = ashr i16 %772, 3
  %774 = sext i16 %773 to i64
  %775 = mul nsw i64 %774, %774
  %776 = add nuw nsw i64 %769, %775
  %777 = sub nsw i64 24, %609
  %778 = getelementptr inbounds i16, ptr %2, i64 %777
  %779 = load i16, ptr %778, align 2, !tbaa !5
  %780 = ashr i16 %779, 3
  %781 = sext i16 %780 to i64
  %782 = mul nsw i64 %781, %781
  %783 = add nuw nsw i64 %776, %782
  %784 = sub nsw i64 25, %609
  %785 = getelementptr inbounds i16, ptr %2, i64 %784
  %786 = load i16, ptr %785, align 2, !tbaa !5
  %787 = ashr i16 %786, 3
  %788 = sext i16 %787 to i64
  %789 = mul nsw i64 %788, %788
  %790 = add nuw nsw i64 %783, %789
  %791 = sub nsw i64 26, %609
  %792 = getelementptr inbounds i16, ptr %2, i64 %791
  %793 = load i16, ptr %792, align 2, !tbaa !5
  %794 = ashr i16 %793, 3
  %795 = sext i16 %794 to i64
  %796 = mul nsw i64 %795, %795
  %797 = add nuw nsw i64 %790, %796
  %798 = sub nsw i64 27, %609
  %799 = getelementptr inbounds i16, ptr %2, i64 %798
  %800 = load i16, ptr %799, align 2, !tbaa !5
  %801 = ashr i16 %800, 3
  %802 = sext i16 %801 to i64
  %803 = mul nsw i64 %802, %802
  %804 = add nuw nsw i64 %797, %803
  %805 = sub nsw i64 28, %609
  %806 = getelementptr inbounds i16, ptr %2, i64 %805
  %807 = load i16, ptr %806, align 2, !tbaa !5
  %808 = ashr i16 %807, 3
  %809 = sext i16 %808 to i64
  %810 = mul nsw i64 %809, %809
  %811 = add nuw nsw i64 %804, %810
  %812 = sub nsw i64 29, %609
  %813 = getelementptr inbounds i16, ptr %2, i64 %812
  %814 = load i16, ptr %813, align 2, !tbaa !5
  %815 = ashr i16 %814, 3
  %816 = sext i16 %815 to i64
  %817 = mul nsw i64 %816, %816
  %818 = add nuw nsw i64 %811, %817
  %819 = sub nsw i64 30, %609
  %820 = getelementptr inbounds i16, ptr %2, i64 %819
  %821 = load i16, ptr %820, align 2, !tbaa !5
  %822 = ashr i16 %821, 3
  %823 = sext i16 %822 to i64
  %824 = mul nsw i64 %823, %823
  %825 = add nuw nsw i64 %818, %824
  %826 = sub nsw i64 31, %609
  %827 = getelementptr inbounds i16, ptr %2, i64 %826
  %828 = load i16, ptr %827, align 2, !tbaa !5
  %829 = ashr i16 %828, 3
  %830 = sext i16 %829 to i64
  %831 = mul nsw i64 %830, %830
  %832 = add nuw nsw i64 %825, %831
  %833 = sub nsw i64 32, %609
  %834 = getelementptr inbounds i16, ptr %2, i64 %833
  %835 = load i16, ptr %834, align 2, !tbaa !5
  %836 = ashr i16 %835, 3
  %837 = sext i16 %836 to i64
  %838 = mul nsw i64 %837, %837
  %839 = add nuw nsw i64 %832, %838
  %840 = sub nsw i64 33, %609
  %841 = getelementptr inbounds i16, ptr %2, i64 %840
  %842 = load i16, ptr %841, align 2, !tbaa !5
  %843 = ashr i16 %842, 3
  %844 = sext i16 %843 to i64
  %845 = mul nsw i64 %844, %844
  %846 = add nuw nsw i64 %839, %845
  %847 = sub nsw i64 34, %609
  %848 = getelementptr inbounds i16, ptr %2, i64 %847
  %849 = load i16, ptr %848, align 2, !tbaa !5
  %850 = ashr i16 %849, 3
  %851 = sext i16 %850 to i64
  %852 = mul nsw i64 %851, %851
  %853 = add nuw nsw i64 %846, %852
  %854 = sub nsw i64 35, %609
  %855 = getelementptr inbounds i16, ptr %2, i64 %854
  %856 = load i16, ptr %855, align 2, !tbaa !5
  %857 = ashr i16 %856, 3
  %858 = sext i16 %857 to i64
  %859 = mul nsw i64 %858, %858
  %860 = add nuw nsw i64 %853, %859
  %861 = sub nsw i64 36, %609
  %862 = getelementptr inbounds i16, ptr %2, i64 %861
  %863 = load i16, ptr %862, align 2, !tbaa !5
  %864 = ashr i16 %863, 3
  %865 = sext i16 %864 to i64
  %866 = mul nsw i64 %865, %865
  %867 = add nuw nsw i64 %860, %866
  %868 = sub nsw i64 37, %609
  %869 = getelementptr inbounds i16, ptr %2, i64 %868
  %870 = load i16, ptr %869, align 2, !tbaa !5
  %871 = ashr i16 %870, 3
  %872 = sext i16 %871 to i64
  %873 = mul nsw i64 %872, %872
  %874 = add nuw nsw i64 %867, %873
  %875 = sub nsw i64 38, %609
  %876 = getelementptr inbounds i16, ptr %2, i64 %875
  %877 = load i16, ptr %876, align 2, !tbaa !5
  %878 = ashr i16 %877, 3
  %879 = sext i16 %878 to i64
  %880 = mul nsw i64 %879, %879
  %881 = add nuw nsw i64 %874, %880
  %882 = sub nsw i64 39, %609
  %883 = getelementptr inbounds i16, ptr %2, i64 %882
  %884 = load i16, ptr %883, align 2, !tbaa !5
  %885 = ashr i16 %884, 3
  %886 = sext i16 %885 to i64
  %887 = mul nsw i64 %886, %886
  %888 = add nuw nsw i64 %881, %887
  %889 = shl nuw nsw i64 %602, 1
  %890 = lshr i64 %889, %608
  %891 = shl nuw nsw i64 %888, 1
  %892 = icmp slt i64 %890, 1
  br i1 %892, label %998, label %893

893:                                              ; preds = %606
  %894 = icmp slt i64 %890, %891
  br i1 %894, label %897, label %895

895:                                              ; preds = %893
  store i16 3, ptr %6, align 2, !tbaa !5
  %896 = load i16, ptr %5, align 2, !tbaa !5
  br label %1087

897:                                              ; preds = %893
  %898 = tail call signext i16 @gsm_norm(i64 noundef %891) #5
  %899 = sext i16 %898 to i64
  %900 = and i64 %899, 4294967295
  %901 = shl i64 %890, %900
  %902 = trunc i64 %901 to i32
  %903 = shl i64 %891, %900
  %904 = lshr i64 %903, 16
  %905 = trunc i64 %904 to i16
  %906 = ashr i32 %902, 16
  %907 = load i16, ptr @gsm_DLB, align 2, !tbaa !5
  %908 = tail call signext i16 @gsm_mult(i16 noundef signext %905, i16 noundef signext %907) #5
  %909 = sext i16 %908 to i32
  %910 = icmp sgt i32 %906, %909
  br i1 %910, label %911, label %998

911:                                              ; preds = %897
  %912 = load i16, ptr getelementptr inbounds ([4 x i16], ptr @gsm_DLB, i64 0, i64 1), align 2, !tbaa !5
  %913 = tail call signext i16 @gsm_mult(i16 noundef signext %905, i16 noundef signext %912) #5
  %914 = sext i16 %913 to i32
  %915 = icmp sgt i32 %906, %914
  br i1 %915, label %1080, label %916

916:                                              ; preds = %911
  store i16 1, ptr %6, align 2, !tbaa !5
  %917 = load i16, ptr %5, align 2, !tbaa !5
  %918 = sext i16 %917 to i64
  %919 = sub i64 %23, %22
  %920 = icmp ult i64 %919, 16
  %921 = shl nsw i64 %918, 1
  %922 = sub i64 %21, %921
  %923 = sub i64 %22, %922
  %924 = icmp ult i64 %923, 16
  %925 = or i1 %920, %924
  %926 = sub i64 %20, %22
  %927 = icmp ult i64 %926, 16
  %928 = or i1 %925, %927
  %929 = sub i64 %23, %922
  %930 = icmp ult i64 %929, 16
  %931 = or i1 %928, %930
  %932 = sub i64 %23, %20
  %933 = icmp ult i64 %932, 16
  %934 = or i1 %931, %933
  br i1 %934, label %1175, label %935

935:                                              ; preds = %916
  %936 = sub nsw i64 0, %918
  %937 = getelementptr inbounds i16, ptr %2, i64 %936
  %938 = load <8 x i16>, ptr %937, align 2, !tbaa !5
  %939 = sext <8 x i16> %938 to <8 x i32>
  %940 = mul nsw <8 x i32> %939, <i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469>
  %941 = add nsw <8 x i32> %940, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %942 = lshr <8 x i32> %941, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %943 = trunc <8 x i32> %942 to <8 x i16>
  store <8 x i16> %943, ptr %4, align 2, !tbaa !5
  %944 = load <8 x i16>, ptr %1, align 2, !tbaa !5
  %945 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %944, <8 x i16> %943)
  store <8 x i16> %945, ptr %3, align 2, !tbaa !5
  %946 = sub nsw i64 8, %918
  %947 = getelementptr inbounds i16, ptr %2, i64 %946
  %948 = load <8 x i16>, ptr %947, align 2, !tbaa !5
  %949 = sext <8 x i16> %948 to <8 x i32>
  %950 = mul nsw <8 x i32> %949, <i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469>
  %951 = add nsw <8 x i32> %950, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %952 = lshr <8 x i32> %951, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %953 = trunc <8 x i32> %952 to <8 x i16>
  %954 = getelementptr inbounds i16, ptr %4, i64 8
  store <8 x i16> %953, ptr %954, align 2, !tbaa !5
  %955 = getelementptr inbounds i16, ptr %1, i64 8
  %956 = load <8 x i16>, ptr %955, align 2, !tbaa !5
  %957 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %956, <8 x i16> %953)
  %958 = getelementptr inbounds i16, ptr %3, i64 8
  store <8 x i16> %957, ptr %958, align 2, !tbaa !5
  %959 = sub nsw i64 16, %918
  %960 = getelementptr inbounds i16, ptr %2, i64 %959
  %961 = load <8 x i16>, ptr %960, align 2, !tbaa !5
  %962 = sext <8 x i16> %961 to <8 x i32>
  %963 = mul nsw <8 x i32> %962, <i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469>
  %964 = add nsw <8 x i32> %963, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %965 = lshr <8 x i32> %964, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %966 = trunc <8 x i32> %965 to <8 x i16>
  %967 = getelementptr inbounds i16, ptr %4, i64 16
  store <8 x i16> %966, ptr %967, align 2, !tbaa !5
  %968 = getelementptr inbounds i16, ptr %1, i64 16
  %969 = load <8 x i16>, ptr %968, align 2, !tbaa !5
  %970 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %969, <8 x i16> %966)
  %971 = getelementptr inbounds i16, ptr %3, i64 16
  store <8 x i16> %970, ptr %971, align 2, !tbaa !5
  %972 = sub nsw i64 24, %918
  %973 = getelementptr inbounds i16, ptr %2, i64 %972
  %974 = load <8 x i16>, ptr %973, align 2, !tbaa !5
  %975 = sext <8 x i16> %974 to <8 x i32>
  %976 = mul nsw <8 x i32> %975, <i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469>
  %977 = add nsw <8 x i32> %976, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %978 = lshr <8 x i32> %977, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %979 = trunc <8 x i32> %978 to <8 x i16>
  %980 = getelementptr inbounds i16, ptr %4, i64 24
  store <8 x i16> %979, ptr %980, align 2, !tbaa !5
  %981 = getelementptr inbounds i16, ptr %1, i64 24
  %982 = load <8 x i16>, ptr %981, align 2, !tbaa !5
  %983 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %982, <8 x i16> %979)
  %984 = getelementptr inbounds i16, ptr %3, i64 24
  store <8 x i16> %983, ptr %984, align 2, !tbaa !5
  %985 = sub nsw i64 32, %918
  %986 = getelementptr inbounds i16, ptr %2, i64 %985
  %987 = load <8 x i16>, ptr %986, align 2, !tbaa !5
  %988 = sext <8 x i16> %987 to <8 x i32>
  %989 = mul nsw <8 x i32> %988, <i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469, i32 11469>
  %990 = add nsw <8 x i32> %989, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %991 = lshr <8 x i32> %990, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %992 = trunc <8 x i32> %991 to <8 x i16>
  %993 = getelementptr inbounds i16, ptr %4, i64 32
  store <8 x i16> %992, ptr %993, align 2, !tbaa !5
  %994 = getelementptr inbounds i16, ptr %1, i64 32
  %995 = load <8 x i16>, ptr %994, align 2, !tbaa !5
  %996 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %995, <8 x i16> %992)
  %997 = getelementptr inbounds i16, ptr %3, i64 32
  store <8 x i16> %996, ptr %997, align 2, !tbaa !5
  br label %1226

998:                                              ; preds = %606, %897
  store i16 0, ptr %6, align 2, !tbaa !5
  %999 = load i16, ptr %5, align 2, !tbaa !5
  %1000 = sext i16 %999 to i64
  %1001 = sub i64 %11, %10
  %1002 = icmp ult i64 %1001, 16
  %1003 = shl nsw i64 %1000, 1
  %1004 = sub i64 %9, %1003
  %1005 = sub i64 %10, %1004
  %1006 = icmp ult i64 %1005, 16
  %1007 = or i1 %1002, %1006
  %1008 = sub i64 %8, %10
  %1009 = icmp ult i64 %1008, 16
  %1010 = or i1 %1007, %1009
  %1011 = sub i64 %11, %1004
  %1012 = icmp ult i64 %1011, 16
  %1013 = or i1 %1010, %1012
  %1014 = sub i64 %11, %8
  %1015 = icmp ult i64 %1014, 16
  %1016 = or i1 %1013, %1015
  br i1 %1016, label %1158, label %1017

1017:                                             ; preds = %998
  %1018 = sub nsw i64 0, %1000
  %1019 = getelementptr inbounds i16, ptr %2, i64 %1018
  %1020 = load <8 x i16>, ptr %1019, align 2, !tbaa !5
  %1021 = sext <8 x i16> %1020 to <8 x i32>
  %1022 = mul nsw <8 x i32> %1021, <i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277>
  %1023 = add nsw <8 x i32> %1022, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %1024 = ashr <8 x i32> %1023, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1025 = trunc <8 x i32> %1024 to <8 x i16>
  store <8 x i16> %1025, ptr %4, align 2, !tbaa !5
  %1026 = load <8 x i16>, ptr %1, align 2, !tbaa !5
  %1027 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %1026, <8 x i16> %1025)
  store <8 x i16> %1027, ptr %3, align 2, !tbaa !5
  %1028 = sub nsw i64 8, %1000
  %1029 = getelementptr inbounds i16, ptr %2, i64 %1028
  %1030 = load <8 x i16>, ptr %1029, align 2, !tbaa !5
  %1031 = sext <8 x i16> %1030 to <8 x i32>
  %1032 = mul nsw <8 x i32> %1031, <i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277>
  %1033 = add nsw <8 x i32> %1032, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %1034 = ashr <8 x i32> %1033, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1035 = trunc <8 x i32> %1034 to <8 x i16>
  %1036 = getelementptr inbounds i16, ptr %4, i64 8
  store <8 x i16> %1035, ptr %1036, align 2, !tbaa !5
  %1037 = getelementptr inbounds i16, ptr %1, i64 8
  %1038 = load <8 x i16>, ptr %1037, align 2, !tbaa !5
  %1039 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %1038, <8 x i16> %1035)
  %1040 = getelementptr inbounds i16, ptr %3, i64 8
  store <8 x i16> %1039, ptr %1040, align 2, !tbaa !5
  %1041 = sub nsw i64 16, %1000
  %1042 = getelementptr inbounds i16, ptr %2, i64 %1041
  %1043 = load <8 x i16>, ptr %1042, align 2, !tbaa !5
  %1044 = sext <8 x i16> %1043 to <8 x i32>
  %1045 = mul nsw <8 x i32> %1044, <i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277>
  %1046 = add nsw <8 x i32> %1045, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %1047 = ashr <8 x i32> %1046, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1048 = trunc <8 x i32> %1047 to <8 x i16>
  %1049 = getelementptr inbounds i16, ptr %4, i64 16
  store <8 x i16> %1048, ptr %1049, align 2, !tbaa !5
  %1050 = getelementptr inbounds i16, ptr %1, i64 16
  %1051 = load <8 x i16>, ptr %1050, align 2, !tbaa !5
  %1052 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %1051, <8 x i16> %1048)
  %1053 = getelementptr inbounds i16, ptr %3, i64 16
  store <8 x i16> %1052, ptr %1053, align 2, !tbaa !5
  %1054 = sub nsw i64 24, %1000
  %1055 = getelementptr inbounds i16, ptr %2, i64 %1054
  %1056 = load <8 x i16>, ptr %1055, align 2, !tbaa !5
  %1057 = sext <8 x i16> %1056 to <8 x i32>
  %1058 = mul nsw <8 x i32> %1057, <i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277>
  %1059 = add nsw <8 x i32> %1058, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %1060 = ashr <8 x i32> %1059, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1061 = trunc <8 x i32> %1060 to <8 x i16>
  %1062 = getelementptr inbounds i16, ptr %4, i64 24
  store <8 x i16> %1061, ptr %1062, align 2, !tbaa !5
  %1063 = getelementptr inbounds i16, ptr %1, i64 24
  %1064 = load <8 x i16>, ptr %1063, align 2, !tbaa !5
  %1065 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %1064, <8 x i16> %1061)
  %1066 = getelementptr inbounds i16, ptr %3, i64 24
  store <8 x i16> %1065, ptr %1066, align 2, !tbaa !5
  %1067 = sub nsw i64 32, %1000
  %1068 = getelementptr inbounds i16, ptr %2, i64 %1067
  %1069 = load <8 x i16>, ptr %1068, align 2, !tbaa !5
  %1070 = sext <8 x i16> %1069 to <8 x i32>
  %1071 = mul nsw <8 x i32> %1070, <i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277, i32 3277>
  %1072 = add nsw <8 x i32> %1071, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %1073 = ashr <8 x i32> %1072, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1074 = trunc <8 x i32> %1073 to <8 x i16>
  %1075 = getelementptr inbounds i16, ptr %4, i64 32
  store <8 x i16> %1074, ptr %1075, align 2, !tbaa !5
  %1076 = getelementptr inbounds i16, ptr %1, i64 32
  %1077 = load <8 x i16>, ptr %1076, align 2, !tbaa !5
  %1078 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %1077, <8 x i16> %1074)
  %1079 = getelementptr inbounds i16, ptr %3, i64 32
  store <8 x i16> %1078, ptr %1079, align 2, !tbaa !5
  br label %1226

1080:                                             ; preds = %911
  %1081 = load i16, ptr getelementptr inbounds ([4 x i16], ptr @gsm_DLB, i64 0, i64 2), align 2, !tbaa !5
  %1082 = tail call signext i16 @gsm_mult(i16 noundef signext %905, i16 noundef signext %1081) #5
  %1083 = sext i16 %1082 to i32
  %1084 = icmp sgt i32 %906, %1083
  %1085 = select i1 %1084, i16 3, i16 2
  store i16 %1085, ptr %6, align 2, !tbaa !5
  %1086 = load i16, ptr %5, align 2, !tbaa !5
  br i1 %1084, label %1087, label %1123

1087:                                             ; preds = %1080, %895
  %1088 = phi i16 [ %896, %895 ], [ %1086, %1080 ]
  %1089 = sext i16 %1088 to i64
  %1090 = sub i64 %15, %14
  %1091 = icmp ult i64 %1090, 16
  %1092 = shl nsw i64 %1089, 1
  %1093 = sub i64 %13, %1092
  %1094 = sub i64 %14, %1093
  %1095 = icmp ult i64 %1094, 16
  %1096 = or i1 %1091, %1095
  %1097 = sub i64 %12, %14
  %1098 = icmp ult i64 %1097, 16
  %1099 = or i1 %1096, %1098
  %1100 = sub i64 %15, %1093
  %1101 = icmp ult i64 %1100, 16
  %1102 = or i1 %1099, %1101
  %1103 = sub i64 %15, %12
  %1104 = icmp ult i64 %1103, 16
  %1105 = or i1 %1102, %1104
  br i1 %1105, label %1209, label %1106

1106:                                             ; preds = %1087, %1106
  %1107 = phi i64 [ %1121, %1106 ], [ 0, %1087 ]
  %1108 = sub nsw i64 %1107, %1089
  %1109 = getelementptr inbounds i16, ptr %2, i64 %1108
  %1110 = load <8 x i16>, ptr %1109, align 2, !tbaa !5
  %1111 = sext <8 x i16> %1110 to <8 x i64>
  %1112 = mul nsw <8 x i64> %1111, <i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767>
  %1113 = add nsw <8 x i64> %1112, <i64 16384, i64 16384, i64 16384, i64 16384, i64 16384, i64 16384, i64 16384, i64 16384>
  %1114 = lshr <8 x i64> %1113, <i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15>
  %1115 = trunc <8 x i64> %1114 to <8 x i16>
  %1116 = getelementptr inbounds i16, ptr %4, i64 %1107
  store <8 x i16> %1115, ptr %1116, align 2, !tbaa !5
  %1117 = getelementptr inbounds i16, ptr %1, i64 %1107
  %1118 = load <8 x i16>, ptr %1117, align 2, !tbaa !5
  %1119 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %1118, <8 x i16> %1115)
  %1120 = getelementptr inbounds i16, ptr %3, i64 %1107
  store <8 x i16> %1119, ptr %1120, align 2, !tbaa !5
  %1121 = add nuw i64 %1107, 8
  %1122 = icmp eq i64 %1121, 40
  br i1 %1122, label %1226, label %1106, !llvm.loop !11

1123:                                             ; preds = %1080
  %1124 = sext i16 %1086 to i64
  %1125 = sub i64 %19, %18
  %1126 = icmp ult i64 %1125, 16
  %1127 = shl nsw i64 %1124, 1
  %1128 = sub i64 %17, %1127
  %1129 = sub i64 %18, %1128
  %1130 = icmp ult i64 %1129, 16
  %1131 = or i1 %1126, %1130
  %1132 = sub i64 %16, %18
  %1133 = icmp ult i64 %1132, 16
  %1134 = or i1 %1131, %1133
  %1135 = sub i64 %19, %1128
  %1136 = icmp ult i64 %1135, 16
  %1137 = or i1 %1134, %1136
  %1138 = sub i64 %19, %16
  %1139 = icmp ult i64 %1138, 16
  %1140 = or i1 %1137, %1139
  br i1 %1140, label %1192, label %1141

1141:                                             ; preds = %1123, %1141
  %1142 = phi i64 [ %1156, %1141 ], [ 0, %1123 ]
  %1143 = sub nsw i64 %1142, %1124
  %1144 = getelementptr inbounds i16, ptr %2, i64 %1143
  %1145 = load <8 x i16>, ptr %1144, align 2, !tbaa !5
  %1146 = sext <8 x i16> %1145 to <8 x i64>
  %1147 = mul nsw <8 x i64> %1146, <i64 21299, i64 21299, i64 21299, i64 21299, i64 21299, i64 21299, i64 21299, i64 21299>
  %1148 = add nsw <8 x i64> %1147, <i64 16384, i64 16384, i64 16384, i64 16384, i64 16384, i64 16384, i64 16384, i64 16384>
  %1149 = lshr <8 x i64> %1148, <i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15>
  %1150 = trunc <8 x i64> %1149 to <8 x i16>
  %1151 = getelementptr inbounds i16, ptr %4, i64 %1142
  store <8 x i16> %1150, ptr %1151, align 2, !tbaa !5
  %1152 = getelementptr inbounds i16, ptr %1, i64 %1142
  %1153 = load <8 x i16>, ptr %1152, align 2, !tbaa !5
  %1154 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %1153, <8 x i16> %1150)
  %1155 = getelementptr inbounds i16, ptr %3, i64 %1142
  store <8 x i16> %1154, ptr %1155, align 2, !tbaa !5
  %1156 = add nuw i64 %1142, 8
  %1157 = icmp eq i64 %1156, 40
  br i1 %1157, label %1226, label %1141, !llvm.loop !14

1158:                                             ; preds = %998, %1158
  %1159 = phi i64 [ %1173, %1158 ], [ 0, %998 ]
  %1160 = sub nsw i64 %1159, %1000
  %1161 = getelementptr inbounds i16, ptr %2, i64 %1160
  %1162 = load i16, ptr %1161, align 2, !tbaa !5
  %1163 = sext i16 %1162 to i32
  %1164 = mul nsw i32 %1163, 3277
  %1165 = add nsw i32 %1164, 16384
  %1166 = ashr i32 %1165, 15
  %1167 = trunc i32 %1166 to i16
  %1168 = getelementptr inbounds i16, ptr %4, i64 %1159
  store i16 %1167, ptr %1168, align 2, !tbaa !5
  %1169 = getelementptr inbounds i16, ptr %1, i64 %1159
  %1170 = load i16, ptr %1169, align 2, !tbaa !5
  %1171 = tail call i16 @llvm.ssub.sat.i16(i16 %1170, i16 %1167)
  %1172 = getelementptr inbounds i16, ptr %3, i64 %1159
  store i16 %1171, ptr %1172, align 2, !tbaa !5
  %1173 = add nuw nsw i64 %1159, 1
  %1174 = icmp eq i64 %1173, 40
  br i1 %1174, label %1226, label %1158, !llvm.loop !15

1175:                                             ; preds = %916, %1175
  %1176 = phi i64 [ %1190, %1175 ], [ 0, %916 ]
  %1177 = sub nsw i64 %1176, %918
  %1178 = getelementptr inbounds i16, ptr %2, i64 %1177
  %1179 = load i16, ptr %1178, align 2, !tbaa !5
  %1180 = sext i16 %1179 to i32
  %1181 = mul nsw i32 %1180, 11469
  %1182 = add nsw i32 %1181, 16384
  %1183 = lshr i32 %1182, 15
  %1184 = trunc i32 %1183 to i16
  %1185 = getelementptr inbounds i16, ptr %4, i64 %1176
  store i16 %1184, ptr %1185, align 2, !tbaa !5
  %1186 = getelementptr inbounds i16, ptr %1, i64 %1176
  %1187 = load i16, ptr %1186, align 2, !tbaa !5
  %1188 = tail call i16 @llvm.ssub.sat.i16(i16 %1187, i16 %1184)
  %1189 = getelementptr inbounds i16, ptr %3, i64 %1176
  store i16 %1188, ptr %1189, align 2, !tbaa !5
  %1190 = add nuw nsw i64 %1176, 1
  %1191 = icmp eq i64 %1190, 40
  br i1 %1191, label %1226, label %1175, !llvm.loop !16

1192:                                             ; preds = %1123, %1192
  %1193 = phi i64 [ %1207, %1192 ], [ 0, %1123 ]
  %1194 = sub nsw i64 %1193, %1124
  %1195 = getelementptr inbounds i16, ptr %2, i64 %1194
  %1196 = load i16, ptr %1195, align 2, !tbaa !5
  %1197 = sext i16 %1196 to i64
  %1198 = mul nsw i64 %1197, 21299
  %1199 = add nsw i64 %1198, 16384
  %1200 = lshr i64 %1199, 15
  %1201 = trunc i64 %1200 to i16
  %1202 = getelementptr inbounds i16, ptr %4, i64 %1193
  store i16 %1201, ptr %1202, align 2, !tbaa !5
  %1203 = getelementptr inbounds i16, ptr %1, i64 %1193
  %1204 = load i16, ptr %1203, align 2, !tbaa !5
  %1205 = tail call i16 @llvm.ssub.sat.i16(i16 %1204, i16 %1201)
  %1206 = getelementptr inbounds i16, ptr %3, i64 %1193
  store i16 %1205, ptr %1206, align 2, !tbaa !5
  %1207 = add nuw nsw i64 %1193, 1
  %1208 = icmp eq i64 %1207, 40
  br i1 %1208, label %1226, label %1192, !llvm.loop !17

1209:                                             ; preds = %1087, %1209
  %1210 = phi i64 [ %1224, %1209 ], [ 0, %1087 ]
  %1211 = sub nsw i64 %1210, %1089
  %1212 = getelementptr inbounds i16, ptr %2, i64 %1211
  %1213 = load i16, ptr %1212, align 2, !tbaa !5
  %1214 = sext i16 %1213 to i64
  %1215 = mul nsw i64 %1214, 32767
  %1216 = add nsw i64 %1215, 16384
  %1217 = lshr i64 %1216, 15
  %1218 = trunc i64 %1217 to i16
  %1219 = getelementptr inbounds i16, ptr %4, i64 %1210
  store i16 %1218, ptr %1219, align 2, !tbaa !5
  %1220 = getelementptr inbounds i16, ptr %1, i64 %1210
  %1221 = load i16, ptr %1220, align 2, !tbaa !5
  %1222 = tail call i16 @llvm.ssub.sat.i16(i16 %1221, i16 %1218)
  %1223 = getelementptr inbounds i16, ptr %3, i64 %1210
  store i16 %1222, ptr %1223, align 2, !tbaa !5
  %1224 = add nuw nsw i64 %1210, 1
  %1225 = icmp eq i64 %1224, 40
  br i1 %1225, label %1226, label %1209, !llvm.loop !18

1226:                                             ; preds = %1175, %1141, %1192, %1106, %1209, %1158, %935, %1017
  ret void
}

; Function Attrs: nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define dso_local void @Gsm_Long_Term_Synthesis_Filtering(ptr nocapture noundef %0, i16 noundef signext %1, i16 noundef signext %2, ptr nocapture noundef readonly %3, ptr nocapture noundef %4) local_unnamed_addr #1 {
  %6 = ptrtoint ptr %3 to i64
  %7 = ptrtoint ptr %4 to i64
  %8 = add i16 %1, -121
  %9 = icmp ult i16 %8, -81
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 7
  %12 = load i16, ptr %11, align 2, !tbaa !19
  br label %13

13:                                               ; preds = %5, %10
  %14 = phi i16 [ %12, %10 ], [ %1, %5 ]
  %15 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 7
  store i16 %14, ptr %15, align 2, !tbaa !19
  %16 = sext i16 %2 to i64
  %17 = getelementptr inbounds [4 x i16], ptr @gsm_QLB, i64 0, i64 %16
  %18 = load i16, ptr %17, align 2, !tbaa !5
  %19 = sext i16 %18 to i64
  %20 = shl nsw i64 %19, 33
  %21 = sext i16 %14 to i64
  %22 = sub i64 %7, %6
  %23 = icmp ult i64 %22, 16
  %24 = and i64 %21, 9223372036854775800
  %25 = icmp eq i64 %24, 0
  %26 = or i1 %23, %25
  %27 = sub i64 %7, %6
  %28 = icmp ult i64 %27, 16
  %29 = or i1 %26, %28
  br i1 %29, label %91, label %30

30:                                               ; preds = %13
  %31 = insertelement <8 x i64> poison, i64 %20, i64 0
  %32 = shufflevector <8 x i64> %31, <8 x i64> poison, <8 x i32> zeroinitializer
  %33 = sub nsw i64 0, %21
  %34 = getelementptr inbounds i16, ptr %4, i64 %33
  %35 = load <8 x i16>, ptr %34, align 2, !tbaa !5
  %36 = sext <8 x i16> %35 to <8 x i64>
  %37 = load <8 x i16>, ptr %3, align 2, !tbaa !5
  %38 = mul <8 x i64> %32, %36
  %39 = add <8 x i64> %38, <i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328>
  %40 = lshr <8 x i64> %39, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %41 = trunc <8 x i64> %40 to <8 x i16>
  %42 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %41, <8 x i16> %37)
  store <8 x i16> %42, ptr %4, align 2, !tbaa !5
  %43 = sub nsw i64 8, %21
  %44 = getelementptr inbounds i16, ptr %4, i64 %43
  %45 = load <8 x i16>, ptr %44, align 2, !tbaa !5
  %46 = sext <8 x i16> %45 to <8 x i64>
  %47 = getelementptr inbounds i16, ptr %3, i64 8
  %48 = load <8 x i16>, ptr %47, align 2, !tbaa !5
  %49 = mul <8 x i64> %32, %46
  %50 = add <8 x i64> %49, <i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328>
  %51 = lshr <8 x i64> %50, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %52 = trunc <8 x i64> %51 to <8 x i16>
  %53 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %52, <8 x i16> %48)
  %54 = getelementptr inbounds i16, ptr %4, i64 8
  store <8 x i16> %53, ptr %54, align 2, !tbaa !5
  %55 = sub nsw i64 16, %21
  %56 = getelementptr inbounds i16, ptr %4, i64 %55
  %57 = load <8 x i16>, ptr %56, align 2, !tbaa !5
  %58 = sext <8 x i16> %57 to <8 x i64>
  %59 = getelementptr inbounds i16, ptr %3, i64 16
  %60 = load <8 x i16>, ptr %59, align 2, !tbaa !5
  %61 = mul <8 x i64> %32, %58
  %62 = add <8 x i64> %61, <i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328>
  %63 = lshr <8 x i64> %62, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %64 = trunc <8 x i64> %63 to <8 x i16>
  %65 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %64, <8 x i16> %60)
  %66 = getelementptr inbounds i16, ptr %4, i64 16
  store <8 x i16> %65, ptr %66, align 2, !tbaa !5
  %67 = sub nsw i64 24, %21
  %68 = getelementptr inbounds i16, ptr %4, i64 %67
  %69 = load <8 x i16>, ptr %68, align 2, !tbaa !5
  %70 = sext <8 x i16> %69 to <8 x i64>
  %71 = getelementptr inbounds i16, ptr %3, i64 24
  %72 = load <8 x i16>, ptr %71, align 2, !tbaa !5
  %73 = mul <8 x i64> %32, %70
  %74 = add <8 x i64> %73, <i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328>
  %75 = lshr <8 x i64> %74, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %76 = trunc <8 x i64> %75 to <8 x i16>
  %77 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %76, <8 x i16> %72)
  %78 = getelementptr inbounds i16, ptr %4, i64 24
  store <8 x i16> %77, ptr %78, align 2, !tbaa !5
  %79 = sub nsw i64 32, %21
  %80 = getelementptr inbounds i16, ptr %4, i64 %79
  %81 = load <8 x i16>, ptr %80, align 2, !tbaa !5
  %82 = sext <8 x i16> %81 to <8 x i64>
  %83 = getelementptr inbounds i16, ptr %3, i64 32
  %84 = load <8 x i16>, ptr %83, align 2, !tbaa !5
  %85 = mul <8 x i64> %32, %82
  %86 = add <8 x i64> %85, <i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328, i64 140737488355328>
  %87 = lshr <8 x i64> %86, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %88 = trunc <8 x i64> %87 to <8 x i16>
  %89 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %88, <8 x i16> %84)
  %90 = getelementptr inbounds i16, ptr %4, i64 32
  store <8 x i16> %89, ptr %90, align 2, !tbaa !5
  br label %107

91:                                               ; preds = %13, %91
  %92 = phi i64 [ %105, %91 ], [ 0, %13 ]
  %93 = sub nsw i64 %92, %21
  %94 = getelementptr inbounds i16, ptr %4, i64 %93
  %95 = load i16, ptr %94, align 2, !tbaa !5
  %96 = sext i16 %95 to i64
  %97 = getelementptr inbounds i16, ptr %3, i64 %92
  %98 = load i16, ptr %97, align 2, !tbaa !5
  %99 = mul i64 %20, %96
  %100 = add i64 %99, 140737488355328
  %101 = lshr i64 %100, 48
  %102 = trunc i64 %101 to i16
  %103 = tail call i16 @llvm.sadd.sat.i16(i16 %102, i16 %98)
  %104 = getelementptr inbounds i16, ptr %4, i64 %92
  store i16 %103, ptr %104, align 2, !tbaa !5
  %105 = add nuw nsw i64 %92, 1
  %106 = icmp eq i64 %105, 40
  br i1 %106, label %107, label %91, !llvm.loop !23

107:                                              ; preds = %91, %30
  %108 = getelementptr i8, ptr %4, i64 -240
  %109 = getelementptr i8, ptr %4, i64 -160
  tail call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(240) %108, ptr noundef nonnull align 2 dereferenceable(240) %109, i64 240, i1 false), !tbaa !5
  ret void
}

declare signext i16 @gsm_norm(i64 noundef) local_unnamed_addr #2

declare signext i16 @gsm_mult(i16 noundef signext, i16 noundef signext) local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.ssub.sat.i16(i16, i16) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.sadd.sat.i16(i16, i16) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i16> @llvm.smax.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.smax.v8i16(<8 x i16>) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"short", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = distinct !{!11, !10, !12, !13}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = distinct !{!14, !10, !12, !13}
!15 = distinct !{!15, !10, !12}
!16 = distinct !{!16, !10, !12}
!17 = distinct !{!17, !10, !12}
!18 = distinct !{!18, !10, !12}
!19 = !{!20, !6, i64 630}
!20 = !{!"gsm_state", !7, i64 0, !6, i64 560, !21, i64 568, !22, i64 576, !7, i64 580, !7, i64 596, !6, i64 628, !6, i64 630, !7, i64 632, !6, i64 650, !7, i64 652, !7, i64 653}
!21 = !{!"long", !7, i64 0}
!22 = !{!"int", !7, i64 0}
!23 = distinct !{!23, !10, !12}
