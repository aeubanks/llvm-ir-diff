; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/Bitcode/Benchmarks/Halide/local_laplacian/local_laplacian.bc'
source_filename = "/usr/local/google/home/asbirlea/Halide/Halide/src/runtime/destructors.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.halide_filter_argument_t = type { ptr, i32, i32, %struct.halide_type_t, ptr, ptr, ptr }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_filter_metadata_t = type { i32, i32, ptr, ptr, ptr }
%closure_t.11 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t.10 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.9 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.8 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.7 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.6 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.5 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.4 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.3 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.1 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.0 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%struct.buffer_t = type { i64, ptr, [4 x i32], [4 x i32], [4 x i32], i32, i8, i8, [2 x i8] }

@str = private constant [6 x i8] c"input\00", align 32
@str.2 = private constant [16 x i8] c"local_laplacian\00", align 32
@str.3 = private constant [19 x i8] c"Input buffer input\00", align 32
@str.4 = private constant [7 x i8] c"uint16\00", align 32
@str.5 = private constant [30 x i8] c"Output buffer local_laplacian\00", align 32
@str.6 = private constant [15 x i8] c"input.stride.0\00", align 32
@str.7 = private constant [2 x i8] c"1\00", align 32
@str.8 = private constant [25 x i8] c"local_laplacian.stride.0\00", align 32
@str.9 = private constant [3 x i8] c"f0\00", align 32
@str.10 = private constant [3 x i8] c"f2\00", align 32
@str.11 = private constant [3 x i8] c"f4\00", align 32
@str.12 = private constant [3 x i8] c"f5\00", align 32
@str.13 = private constant [4 x i8] c"f72\00", align 32
@str.14 = private constant [3 x i8] c"f6\00", align 32
@str.15 = private constant [4 x i8] c"f73\00", align 32
@str.16 = private constant [3 x i8] c"f7\00", align 32
@str.17 = private constant [4 x i8] c"f74\00", align 32
@str.18 = private constant [3 x i8] c"f8\00", align 32
@str.19 = private constant [4 x i8] c"f75\00", align 32
@str.20 = private constant [3 x i8] c"f9\00", align 32
@str.21 = private constant [4 x i8] c"f76\00", align 32
@str.22 = private constant [4 x i8] c"f10\00", align 32
@str.23 = private constant [4 x i8] c"f77\00", align 32
@str.24 = private constant [4 x i8] c"f78\00", align 32
@str.26 = private constant [5 x i8] c"f131\00", align 32
@str.27 = private constant [5 x i8] c"f130\00", align 32
@str.28 = private constant [5 x i8] c"f129\00", align 32
@str.29 = private constant [5 x i8] c"f128\00", align 32
@str.30 = private constant [5 x i8] c"f127\00", align 32
@str.31 = private constant [5 x i8] c"f126\00", align 32
@str.32 = private constant [5 x i8] c"f125\00", align 32
@str.33 = private constant [7 x i8] c"levels\00", align 32
@0 = private constant i32 0
@str.34 = private constant [6 x i8] c"alpha\00", align 32
@1 = private constant float 0.000000e+00
@str.35 = private constant [5 x i8] c"beta\00", align 32
@2 = private constant float 0.000000e+00
@3 = private constant [5 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { ptr @str.33, i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, ptr @0, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.34, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @1, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.35, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @2, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str, i32 1, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.2, i32 2, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }]
@str.36 = private constant [48 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_runtime-sse41\00", align 32
@local_laplacian_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 0, i32 5, ptr @3, ptr @str.36, ptr @str.2 }

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #0

declare i32 @halide_do_par_for(ptr, ptr, i32, i32, ptr noalias) local_unnamed_addr #1

declare i32 @halide_error_access_out_of_bounds(ptr, ptr, i32, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_bad_elem_size(ptr, ptr, ptr, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_buffer_allocation_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_buffer_argument_is_null(ptr, ptr) local_unnamed_addr #1

declare i32 @halide_error_buffer_extents_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_constraint_violated(ptr, ptr, i32, ptr, i32) local_unnamed_addr #1

declare i32 @halide_error_out_of_memory(ptr) local_unnamed_addr #1

declare void @halide_free(ptr, ptr) local_unnamed_addr #1

declare noalias ptr @halide_malloc(ptr, i64) local_unnamed_addr #1

define i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr {
entry:
  %0 = alloca %closure_t.11, align 8
  %1 = alloca %closure_t.10, align 8
  %2 = alloca %closure_t.9, align 8
  %3 = alloca %closure_t.8, align 8
  %4 = alloca %closure_t.7, align 8
  %5 = alloca %closure_t.6, align 8
  %6 = alloca %closure_t.5, align 8
  %7 = alloca %closure_t.4, align 8
  %8 = alloca %closure_t.3, align 8
  %9 = alloca %closure_t.2, align 8
  %10 = alloca %closure_t.1, align 8
  %11 = alloca %closure_t.0, align 8
  %12 = alloca %closure_t, align 8
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %13 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %call_destructor.exit210.thread374

"assert succeeded":                               ; preds = %entry
  %buf_host = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 1
  %input.host = load ptr, ptr %buf_host, align 8
  %buf_extent = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 0
  %input.extent.0 = load i32, ptr %buf_extent, align 4
  %x1 = sext i32 %input.extent.0 to i64
  %buf_extent1 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 1
  %buf_extent2 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 2
  %buf_extent3 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 3
  %buf_stride = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 0
  %input.stride.0 = load i32, ptr %buf_stride, align 4
  %buf_stride4 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 1
  %input.stride.1 = load i32, ptr %buf_stride4, align 4
  %14 = sext i32 %input.stride.1 to i64
  %buf_stride5 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 2
  %input.stride.2 = load i32, ptr %buf_stride5, align 4
  %15 = sext i32 %input.stride.2 to i64
  %buf_stride6 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 3
  %buf_min = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 0
  %buf_min7 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 1
  %16 = load <2 x i32>, ptr %buf_extent1, align 4
  %17 = extractelement <2 x i32> %16, i64 0
  %18 = sext i32 %17 to i64
  %19 = extractelement <2 x i32> %16, i64 1
  %20 = sext i32 %19 to i64
  %21 = load <2 x i32>, ptr %buf_min, align 4
  %buf_min8 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 2
  %b108 = load i32, ptr %buf_min8, align 4
  %buf_min9 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 3
  %buf_elem_size = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 5
  %input.elem_size = load i32, ptr %buf_elem_size, align 4
  %.not101 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not101, label %"assert failed10", label %"assert succeeded11", !prof !4

call_destructor.exit:                             ; preds = %"assert failed197", %"assert failed195"
  %.ph = phi i32 [ %1811, %"assert failed195" ], [ %1814, %"assert failed197" ]
  %.not100191 = icmp eq i32 %.ph, 0
  br i1 %.not100191, label %call_destructor.exit290, label %call_destructor.exit225.sink.split

call_destructor.exit205:                          ; preds = %"assert failed191", %"assert failed193"
  %.ph.ph = phi i32 [ %1660, %"assert failed193" ], [ %1657, %"assert failed191" ]
  %.not100191273 = icmp eq i32 %.ph.ph, 0
  br i1 %.not100191273, label %call_destructor.exit215, label %if.then.i209

if.then.i209:                                     ; preds = %call_destructor.exit205
  call void @halide_free(ptr null, ptr nonnull %1619) #7
  br label %call_destructor.exit215

call_destructor.exit210.thread374:                ; preds = %after_bb, %"assert failed", %"assert failed10", %"assert failed61", %"assert failed63", %"assert failed65", %"assert failed67", %"assert failed69", %"assert failed71", %"assert failed73", %"assert failed75", %"assert failed77", %"assert failed79", %"assert failed81", %"assert failed83", %"assert failed85", %"assert failed87", %"assert failed89", %"assert failed91", %"assert failed93", %"assert failed95", %"assert failed97", %"assert failed99", %"assert failed101", %"assert failed103", %"assert failed105", %"produce f2", %"assert failed109", %"assert failed111", %"produce f4", %"assert failed115", %"assert failed117", %"produce f5", %"assert failed121", %"assert failed123", %"produce f72", %"assert failed127", %"assert failed129", %"produce f6", %"assert failed133", %"assert failed135", %"produce f73", %"assert failed139", %"assert failed141", %"produce f7", %"assert failed145", %"assert failed147", %"produce f74", %"assert failed151", %"assert failed153", %"produce f8", %"assert failed157", %"assert failed159", %"produce f75", %"assert failed163", %"assert failed165", %"produce f9", %"assert failed169", %"assert failed171", %"assert failed173", %"assert failed175", %"produce f10", %"assert failed179", %"assert failed181", %"assert failed183", %"assert failed185", %if.then.i319, %after_bb44.thread
  %.051.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %1210, %"assert failed185" ], [ %1210, %"assert failed183" ], [ null, %"assert failed181" ], [ null, %"assert failed179" ], [ null, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.050.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %1176, %"assert failed185" ], [ %1176, %"assert failed183" ], [ %1176, %"assert failed181" ], [ %1176, %"assert failed179" ], [ %1176, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.049.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %955, %"assert failed185" ], [ %955, %"assert failed183" ], [ %955, %"assert failed181" ], [ %955, %"assert failed179" ], [ %955, %"produce f10" ], [ %955, %"assert failed175" ], [ %955, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.048.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %918, %"assert failed185" ], [ %918, %"assert failed183" ], [ %918, %"assert failed181" ], [ %918, %"assert failed179" ], [ %918, %"produce f10" ], [ %918, %"assert failed175" ], [ %918, %"assert failed173" ], [ %918, %"assert failed171" ], [ %918, %"assert failed169" ], [ %918, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.047.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %876, %"assert failed185" ], [ %876, %"assert failed183" ], [ %876, %"assert failed181" ], [ %876, %"assert failed179" ], [ %876, %"produce f10" ], [ %876, %"assert failed175" ], [ %876, %"assert failed173" ], [ %876, %"assert failed171" ], [ %876, %"assert failed169" ], [ %876, %"produce f9" ], [ %876, %"assert failed165" ], [ %876, %"assert failed163" ], [ %876, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.046.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %836, %"assert failed185" ], [ %836, %"assert failed183" ], [ %836, %"assert failed181" ], [ %836, %"assert failed179" ], [ %836, %"produce f10" ], [ %836, %"assert failed175" ], [ %836, %"assert failed173" ], [ %836, %"assert failed171" ], [ %836, %"assert failed169" ], [ %836, %"produce f9" ], [ %836, %"assert failed165" ], [ %836, %"assert failed163" ], [ %836, %"produce f75" ], [ %836, %"assert failed159" ], [ %836, %"assert failed157" ], [ %836, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.045.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %790, %"assert failed185" ], [ %790, %"assert failed183" ], [ %790, %"assert failed181" ], [ %790, %"assert failed179" ], [ %790, %"produce f10" ], [ %790, %"assert failed175" ], [ %790, %"assert failed173" ], [ %790, %"assert failed171" ], [ %790, %"assert failed169" ], [ %790, %"produce f9" ], [ %790, %"assert failed165" ], [ %790, %"assert failed163" ], [ %790, %"produce f75" ], [ %790, %"assert failed159" ], [ %790, %"assert failed157" ], [ %790, %"produce f8" ], [ %790, %"assert failed153" ], [ %790, %"assert failed151" ], [ %790, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.044.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %734, %"assert failed185" ], [ %734, %"assert failed183" ], [ %734, %"assert failed181" ], [ %734, %"assert failed179" ], [ %734, %"produce f10" ], [ %734, %"assert failed175" ], [ %734, %"assert failed173" ], [ %734, %"assert failed171" ], [ %734, %"assert failed169" ], [ %734, %"produce f9" ], [ %734, %"assert failed165" ], [ %734, %"assert failed163" ], [ %734, %"produce f75" ], [ %734, %"assert failed159" ], [ %734, %"assert failed157" ], [ %734, %"produce f8" ], [ %734, %"assert failed153" ], [ %734, %"assert failed151" ], [ %734, %"produce f74" ], [ %734, %"assert failed147" ], [ %734, %"assert failed145" ], [ %734, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.043.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %681, %"assert failed185" ], [ %681, %"assert failed183" ], [ %681, %"assert failed181" ], [ %681, %"assert failed179" ], [ %681, %"produce f10" ], [ %681, %"assert failed175" ], [ %681, %"assert failed173" ], [ %681, %"assert failed171" ], [ %681, %"assert failed169" ], [ %681, %"produce f9" ], [ %681, %"assert failed165" ], [ %681, %"assert failed163" ], [ %681, %"produce f75" ], [ %681, %"assert failed159" ], [ %681, %"assert failed157" ], [ %681, %"produce f8" ], [ %681, %"assert failed153" ], [ %681, %"assert failed151" ], [ %681, %"produce f74" ], [ %681, %"assert failed147" ], [ %681, %"assert failed145" ], [ %681, %"produce f7" ], [ %681, %"assert failed141" ], [ %681, %"assert failed139" ], [ %681, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.042.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %625, %"assert failed185" ], [ %625, %"assert failed183" ], [ %625, %"assert failed181" ], [ %625, %"assert failed179" ], [ %625, %"produce f10" ], [ %625, %"assert failed175" ], [ %625, %"assert failed173" ], [ %625, %"assert failed171" ], [ %625, %"assert failed169" ], [ %625, %"produce f9" ], [ %625, %"assert failed165" ], [ %625, %"assert failed163" ], [ %625, %"produce f75" ], [ %625, %"assert failed159" ], [ %625, %"assert failed157" ], [ %625, %"produce f8" ], [ %625, %"assert failed153" ], [ %625, %"assert failed151" ], [ %625, %"produce f74" ], [ %625, %"assert failed147" ], [ %625, %"assert failed145" ], [ %625, %"produce f7" ], [ %625, %"assert failed141" ], [ %625, %"assert failed139" ], [ %625, %"produce f73" ], [ %625, %"assert failed135" ], [ %625, %"assert failed133" ], [ %625, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.041.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %556, %"assert failed185" ], [ %556, %"assert failed183" ], [ %556, %"assert failed181" ], [ %556, %"assert failed179" ], [ %556, %"produce f10" ], [ %556, %"assert failed175" ], [ %556, %"assert failed173" ], [ %556, %"assert failed171" ], [ %556, %"assert failed169" ], [ %556, %"produce f9" ], [ %556, %"assert failed165" ], [ %556, %"assert failed163" ], [ %556, %"produce f75" ], [ %556, %"assert failed159" ], [ %556, %"assert failed157" ], [ %556, %"produce f8" ], [ %556, %"assert failed153" ], [ %556, %"assert failed151" ], [ %556, %"produce f74" ], [ %556, %"assert failed147" ], [ %556, %"assert failed145" ], [ %556, %"produce f7" ], [ %556, %"assert failed141" ], [ %556, %"assert failed139" ], [ %556, %"produce f73" ], [ %556, %"assert failed135" ], [ %556, %"assert failed133" ], [ %556, %"produce f6" ], [ %556, %"assert failed129" ], [ %556, %"assert failed127" ], [ %556, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.040.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %500, %"assert failed185" ], [ %500, %"assert failed183" ], [ %500, %"assert failed181" ], [ %500, %"assert failed179" ], [ %500, %"produce f10" ], [ %500, %"assert failed175" ], [ %500, %"assert failed173" ], [ %500, %"assert failed171" ], [ %500, %"assert failed169" ], [ %500, %"produce f9" ], [ %500, %"assert failed165" ], [ %500, %"assert failed163" ], [ %500, %"produce f75" ], [ %500, %"assert failed159" ], [ %500, %"assert failed157" ], [ %500, %"produce f8" ], [ %500, %"assert failed153" ], [ %500, %"assert failed151" ], [ %500, %"produce f74" ], [ %500, %"assert failed147" ], [ %500, %"assert failed145" ], [ %500, %"produce f7" ], [ %500, %"assert failed141" ], [ %500, %"assert failed139" ], [ %500, %"produce f73" ], [ %500, %"assert failed135" ], [ %500, %"assert failed133" ], [ %500, %"produce f6" ], [ %500, %"assert failed129" ], [ %500, %"assert failed127" ], [ %500, %"produce f72" ], [ %500, %"assert failed123" ], [ %500, %"assert failed121" ], [ %500, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.039.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %421, %"assert failed185" ], [ %421, %"assert failed183" ], [ %421, %"assert failed181" ], [ %421, %"assert failed179" ], [ %421, %"produce f10" ], [ %421, %"assert failed175" ], [ %421, %"assert failed173" ], [ %421, %"assert failed171" ], [ %421, %"assert failed169" ], [ %421, %"produce f9" ], [ %421, %"assert failed165" ], [ %421, %"assert failed163" ], [ %421, %"produce f75" ], [ %421, %"assert failed159" ], [ %421, %"assert failed157" ], [ %421, %"produce f8" ], [ %421, %"assert failed153" ], [ %421, %"assert failed151" ], [ %421, %"produce f74" ], [ %421, %"assert failed147" ], [ %421, %"assert failed145" ], [ %421, %"produce f7" ], [ %421, %"assert failed141" ], [ %421, %"assert failed139" ], [ %421, %"produce f73" ], [ %421, %"assert failed135" ], [ %421, %"assert failed133" ], [ %421, %"produce f6" ], [ %421, %"assert failed129" ], [ %421, %"assert failed127" ], [ %421, %"produce f72" ], [ %421, %"assert failed123" ], [ %421, %"assert failed121" ], [ %421, %"produce f5" ], [ %421, %"assert failed117" ], [ %421, %"assert failed115" ], [ %421, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.038.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %338, %"assert failed185" ], [ %338, %"assert failed183" ], [ %338, %"assert failed181" ], [ %338, %"assert failed179" ], [ %338, %"produce f10" ], [ %338, %"assert failed175" ], [ %338, %"assert failed173" ], [ %338, %"assert failed171" ], [ %338, %"assert failed169" ], [ %338, %"produce f9" ], [ %338, %"assert failed165" ], [ %338, %"assert failed163" ], [ %338, %"produce f75" ], [ %338, %"assert failed159" ], [ %338, %"assert failed157" ], [ %338, %"produce f8" ], [ %338, %"assert failed153" ], [ %338, %"assert failed151" ], [ %338, %"produce f74" ], [ %338, %"assert failed147" ], [ %338, %"assert failed145" ], [ %338, %"produce f7" ], [ %338, %"assert failed141" ], [ %338, %"assert failed139" ], [ %338, %"produce f73" ], [ %338, %"assert failed135" ], [ %338, %"assert failed133" ], [ %338, %"produce f6" ], [ %338, %"assert failed129" ], [ %338, %"assert failed127" ], [ %338, %"produce f72" ], [ %338, %"assert failed123" ], [ %338, %"assert failed121" ], [ %338, %"produce f5" ], [ %338, %"assert failed117" ], [ %338, %"assert failed115" ], [ %338, %"produce f4" ], [ %338, %"assert failed111" ], [ %338, %"assert failed109" ], [ %338, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.0.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %209, %"assert failed185" ], [ %209, %"assert failed183" ], [ %209, %"assert failed181" ], [ %209, %"assert failed179" ], [ %209, %"produce f10" ], [ %209, %"assert failed175" ], [ %209, %"assert failed173" ], [ %209, %"assert failed171" ], [ %209, %"assert failed169" ], [ %209, %"produce f9" ], [ %209, %"assert failed165" ], [ %209, %"assert failed163" ], [ %209, %"produce f75" ], [ %209, %"assert failed159" ], [ %209, %"assert failed157" ], [ %209, %"produce f8" ], [ %209, %"assert failed153" ], [ %209, %"assert failed151" ], [ %209, %"produce f74" ], [ %209, %"assert failed147" ], [ %209, %"assert failed145" ], [ %209, %"produce f7" ], [ %209, %"assert failed141" ], [ %209, %"assert failed139" ], [ %209, %"produce f73" ], [ %209, %"assert failed135" ], [ %209, %"assert failed133" ], [ %209, %"produce f6" ], [ %209, %"assert failed129" ], [ %209, %"assert failed127" ], [ %209, %"produce f72" ], [ %209, %"assert failed123" ], [ %209, %"assert failed121" ], [ %209, %"produce f5" ], [ %209, %"assert failed117" ], [ %209, %"assert failed115" ], [ %209, %"produce f4" ], [ %209, %"assert failed111" ], [ %209, %"assert failed109" ], [ %209, %"produce f2" ], [ %209, %"assert failed105" ], [ %209, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.ph.ph.ph.ph = phi i32 [ 0, %if.then.i319 ], [ %1411, %"assert failed185" ], [ %1408, %"assert failed183" ], [ %1211, %"assert failed181" ], [ %1208, %"assert failed179" ], [ %1191, %"produce f10" ], [ %1177, %"assert failed175" ], [ %1174, %"assert failed173" ], [ %956, %"assert failed171" ], [ %953, %"assert failed169" ], [ %936, %"produce f9" ], [ %919, %"assert failed165" ], [ %916, %"assert failed163" ], [ %892, %"produce f75" ], [ %877, %"assert failed159" ], [ %874, %"assert failed157" ], [ %855, %"produce f8" ], [ %837, %"assert failed153" ], [ %834, %"assert failed151" ], [ %806, %"produce f74" ], [ %791, %"assert failed147" ], [ %788, %"assert failed145" ], [ %754, %"produce f7" ], [ %735, %"assert failed141" ], [ %732, %"assert failed139" ], [ %697, %"produce f73" ], [ %682, %"assert failed135" ], [ %679, %"assert failed133" ], [ %645, %"produce f6" ], [ %626, %"assert failed129" ], [ %623, %"assert failed127" ], [ %573, %"produce f72" ], [ %557, %"assert failed123" ], [ %554, %"assert failed121" ], [ %520, %"produce f5" ], [ %501, %"assert failed117" ], [ %498, %"assert failed115" ], [ %446, %"produce f4" ], [ %422, %"assert failed111" ], [ %419, %"assert failed109" ], [ %367, %"produce f2" ], [ %339, %"assert failed105" ], [ %336, %"assert failed103" ], [ %210, %"assert failed101" ], [ %207, %"assert failed99" ], [ %200, %"assert failed97" ], [ %197, %"assert failed95" ], [ %194, %"assert failed93" ], [ %192, %"assert failed91" ], [ %189, %"assert failed89" ], [ %186, %"assert failed87" ], [ %183, %"assert failed85" ], [ %180, %"assert failed83" ], [ %178, %"assert failed81" ], [ %175, %"assert failed79" ], [ %172, %"assert failed77" ], [ %170, %"assert failed75" ], [ %168, %"assert failed73" ], [ %164, %"assert failed71" ], [ %160, %"assert failed69" ], [ %158, %"assert failed67" ], [ %156, %"assert failed65" ], [ %154, %"assert failed63" ], [ %152, %"assert failed61" ], [ %27, %"assert failed10" ], [ %13, %"assert failed" ], [ 0, %after_bb44.thread ], [ 0, %after_bb ]
  %.not100191273334392 = icmp eq i32 %.ph.ph.ph.ph, 0
  br label %call_destructor.exit215

call_destructor.exit210:                          ; preds = %"assert succeeded188.thread841", %"assert succeeded188.thread", %"assert succeeded188"
  %22 = call i32 @halide_error_out_of_memory(ptr null) #4
  %.not100191273334 = icmp eq i32 %22, 0
  br i1 %.not100191273334, label %call_destructor.exit290, label %if.then.i214

if.then.i214:                                     ; preds = %call_destructor.exit210
  call void @halide_free(ptr null, ptr nonnull %1410) #7
  br label %call_destructor.exit215

call_destructor.exit215:                          ; preds = %call_destructor.exit205, %if.then.i209, %call_destructor.exit210.thread374, %if.then.i214
  %.051197249298372 = phi ptr [ %1210, %if.then.i214 ], [ %.051.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1210, %call_destructor.exit205 ], [ %1210, %if.then.i209 ]
  %.050198248299371 = phi ptr [ %1176, %if.then.i214 ], [ %.050.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1176, %call_destructor.exit205 ], [ %1176, %if.then.i209 ]
  %.049199247300370 = phi ptr [ %955, %if.then.i214 ], [ %.049.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %955, %call_destructor.exit205 ], [ %955, %if.then.i209 ]
  %.048200246301369 = phi ptr [ %918, %if.then.i214 ], [ %.048.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %918, %call_destructor.exit205 ], [ %918, %if.then.i209 ]
  %.047201245302368 = phi ptr [ %876, %if.then.i214 ], [ %.047.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %876, %call_destructor.exit205 ], [ %876, %if.then.i209 ]
  %.046202244303367 = phi ptr [ %836, %if.then.i214 ], [ %.046.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %836, %call_destructor.exit205 ], [ %836, %if.then.i209 ]
  %.045203243304366 = phi ptr [ %790, %if.then.i214 ], [ %.045.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %790, %call_destructor.exit205 ], [ %790, %if.then.i209 ]
  %.044204242305365 = phi ptr [ %734, %if.then.i214 ], [ %.044.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %734, %call_destructor.exit205 ], [ %734, %if.then.i209 ]
  %.043205241306364 = phi ptr [ %681, %if.then.i214 ], [ %.043.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %681, %call_destructor.exit205 ], [ %681, %if.then.i209 ]
  %.042206240307363 = phi ptr [ %625, %if.then.i214 ], [ %.042.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %625, %call_destructor.exit205 ], [ %625, %if.then.i209 ]
  %.041207239308362 = phi ptr [ %556, %if.then.i214 ], [ %.041.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %556, %call_destructor.exit205 ], [ %556, %if.then.i209 ]
  %.040208238309361 = phi ptr [ %500, %if.then.i214 ], [ %.040.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %500, %call_destructor.exit205 ], [ %500, %if.then.i209 ]
  %.039209237310360 = phi ptr [ %421, %if.then.i214 ], [ %.039.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %421, %call_destructor.exit205 ], [ %421, %if.then.i209 ]
  %.038210236311359 = phi ptr [ %338, %if.then.i214 ], [ %.038.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %338, %call_destructor.exit205 ], [ %338, %if.then.i209 ]
  %.0211235312358 = phi ptr [ %209, %if.then.i214 ], [ %.0.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %209, %call_destructor.exit205 ], [ %209, %if.then.i209 ]
  %23 = phi i32 [ %22, %if.then.i214 ], [ %.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %.ph.ph, %call_destructor.exit205 ], [ %.ph.ph, %if.then.i209 ]
  %.not100212234313357 = phi i1 [ false, %if.then.i214 ], [ %.not100191273334392, %call_destructor.exit210.thread374 ], [ %.not100191273, %call_destructor.exit205 ], [ false, %if.then.i209 ]
  %tobool.i216 = icmp eq ptr %.051197249298372, null
  %brmerge.i218 = or i1 %tobool.i216, %.not100212234313357
  br i1 %brmerge.i218, label %call_destructor.exit220, label %if.then.i219

if.then.i219:                                     ; preds = %call_destructor.exit215
  call void @halide_free(ptr null, ptr nonnull %.051197249298372) #7
  br label %call_destructor.exit220

call_destructor.exit220:                          ; preds = %if.then.i219, %call_destructor.exit215
  %tobool.i221 = icmp eq ptr %.050198248299371, null
  %brmerge.i223 = or i1 %tobool.i221, %.not100212234313357
  br i1 %brmerge.i223, label %call_destructor.exit225, label %call_destructor.exit225.sink.split

call_destructor.exit225.sink.split:               ; preds = %call_destructor.exit220, %call_destructor.exit
  %.sink = phi ptr [ %1659, %call_destructor.exit ], [ %.050198248299371, %call_destructor.exit220 ]
  %.049199247300370415459.ph = phi ptr [ %955, %call_destructor.exit ], [ %.049199247300370, %call_destructor.exit220 ]
  %.048200246301369416458.ph = phi ptr [ %918, %call_destructor.exit ], [ %.048200246301369, %call_destructor.exit220 ]
  %.047201245302368417457.ph = phi ptr [ %876, %call_destructor.exit ], [ %.047201245302368, %call_destructor.exit220 ]
  %.046202244303367418456.ph = phi ptr [ %836, %call_destructor.exit ], [ %.046202244303367, %call_destructor.exit220 ]
  %.045203243304366419455.ph = phi ptr [ %790, %call_destructor.exit ], [ %.045203243304366, %call_destructor.exit220 ]
  %.044204242305365420454.ph = phi ptr [ %734, %call_destructor.exit ], [ %.044204242305365, %call_destructor.exit220 ]
  %.043205241306364421453.ph = phi ptr [ %681, %call_destructor.exit ], [ %.043205241306364, %call_destructor.exit220 ]
  %.042206240307363422452.ph = phi ptr [ %625, %call_destructor.exit ], [ %.042206240307363, %call_destructor.exit220 ]
  %.041207239308362423451.ph = phi ptr [ %556, %call_destructor.exit ], [ %.041207239308362, %call_destructor.exit220 ]
  %.040208238309361424450.ph = phi ptr [ %500, %call_destructor.exit ], [ %.040208238309361, %call_destructor.exit220 ]
  %.039209237310360425449.ph = phi ptr [ %421, %call_destructor.exit ], [ %.039209237310360, %call_destructor.exit220 ]
  %.038210236311359426448.ph = phi ptr [ %338, %call_destructor.exit ], [ %.038210236311359, %call_destructor.exit220 ]
  %.0211235312358427447.ph = phi ptr [ %209, %call_destructor.exit ], [ %.0211235312358, %call_destructor.exit220 ]
  %.ph843 = phi i32 [ %.ph, %call_destructor.exit ], [ %23, %call_destructor.exit220 ]
  call void @halide_free(ptr null, ptr nonnull %.sink) #7
  br label %call_destructor.exit225

call_destructor.exit225:                          ; preds = %call_destructor.exit225.sink.split, %call_destructor.exit220
  %.049199247300370415459 = phi ptr [ %.049199247300370, %call_destructor.exit220 ], [ %.049199247300370415459.ph, %call_destructor.exit225.sink.split ]
  %.048200246301369416458 = phi ptr [ %.048200246301369, %call_destructor.exit220 ], [ %.048200246301369416458.ph, %call_destructor.exit225.sink.split ]
  %.047201245302368417457 = phi ptr [ %.047201245302368, %call_destructor.exit220 ], [ %.047201245302368417457.ph, %call_destructor.exit225.sink.split ]
  %.046202244303367418456 = phi ptr [ %.046202244303367, %call_destructor.exit220 ], [ %.046202244303367418456.ph, %call_destructor.exit225.sink.split ]
  %.045203243304366419455 = phi ptr [ %.045203243304366, %call_destructor.exit220 ], [ %.045203243304366419455.ph, %call_destructor.exit225.sink.split ]
  %.044204242305365420454 = phi ptr [ %.044204242305365, %call_destructor.exit220 ], [ %.044204242305365420454.ph, %call_destructor.exit225.sink.split ]
  %.043205241306364421453 = phi ptr [ %.043205241306364, %call_destructor.exit220 ], [ %.043205241306364421453.ph, %call_destructor.exit225.sink.split ]
  %.042206240307363422452 = phi ptr [ %.042206240307363, %call_destructor.exit220 ], [ %.042206240307363422452.ph, %call_destructor.exit225.sink.split ]
  %.041207239308362423451 = phi ptr [ %.041207239308362, %call_destructor.exit220 ], [ %.041207239308362423451.ph, %call_destructor.exit225.sink.split ]
  %.040208238309361424450 = phi ptr [ %.040208238309361, %call_destructor.exit220 ], [ %.040208238309361424450.ph, %call_destructor.exit225.sink.split ]
  %.039209237310360425449 = phi ptr [ %.039209237310360, %call_destructor.exit220 ], [ %.039209237310360425449.ph, %call_destructor.exit225.sink.split ]
  %.038210236311359426448 = phi ptr [ %.038210236311359, %call_destructor.exit220 ], [ %.038210236311359426448.ph, %call_destructor.exit225.sink.split ]
  %.0211235312358427447 = phi ptr [ %.0211235312358, %call_destructor.exit220 ], [ %.0211235312358427447.ph, %call_destructor.exit225.sink.split ]
  %24 = phi i32 [ %23, %call_destructor.exit220 ], [ %.ph843, %call_destructor.exit225.sink.split ]
  %.not100212234313357428446 = phi i1 [ %.not100212234313357, %call_destructor.exit220 ], [ false, %call_destructor.exit225.sink.split ]
  %tobool.i226 = icmp eq ptr %.049199247300370415459, null
  %brmerge.i228 = or i1 %tobool.i226, %.not100212234313357428446
  br i1 %brmerge.i228, label %call_destructor.exit230, label %if.then.i229

if.then.i229:                                     ; preds = %call_destructor.exit225
  call void @halide_free(ptr null, ptr nonnull %.049199247300370415459) #7
  br label %call_destructor.exit230

call_destructor.exit230:                          ; preds = %if.then.i229, %call_destructor.exit225
  %tobool.i231 = icmp eq ptr %.048200246301369416458, null
  %brmerge.i233 = or i1 %tobool.i231, %.not100212234313357428446
  br i1 %brmerge.i233, label %call_destructor.exit235, label %call_destructor.exit235.sink.split

call_destructor.exit235.sink.split:               ; preds = %call_destructor.exit230, %"end for f130.s0.v4"
  %.sink845 = phi ptr [ %1813, %"end for f130.s0.v4" ], [ %.048200246301369416458, %call_destructor.exit230 ]
  %.047201245302368417457477515.ph = phi ptr [ %876, %"end for f130.s0.v4" ], [ %.047201245302368417457, %call_destructor.exit230 ]
  %.046202244303367418456478514.ph = phi ptr [ %836, %"end for f130.s0.v4" ], [ %.046202244303367418456, %call_destructor.exit230 ]
  %.045203243304366419455479513.ph = phi ptr [ %790, %"end for f130.s0.v4" ], [ %.045203243304366419455, %call_destructor.exit230 ]
  %.044204242305365420454480512.ph = phi ptr [ %734, %"end for f130.s0.v4" ], [ %.044204242305365420454, %call_destructor.exit230 ]
  %.043205241306364421453481511.ph = phi ptr [ %681, %"end for f130.s0.v4" ], [ %.043205241306364421453, %call_destructor.exit230 ]
  %.042206240307363422452482510.ph = phi ptr [ %625, %"end for f130.s0.v4" ], [ %.042206240307363422452, %call_destructor.exit230 ]
  %.041207239308362423451483509.ph = phi ptr [ %556, %"end for f130.s0.v4" ], [ %.041207239308362423451, %call_destructor.exit230 ]
  %.040208238309361424450484508.ph = phi ptr [ %500, %"end for f130.s0.v4" ], [ %.040208238309361424450, %call_destructor.exit230 ]
  %.039209237310360425449485507.ph = phi ptr [ %421, %"end for f130.s0.v4" ], [ %.039209237310360425449, %call_destructor.exit230 ]
  %.038210236311359426448486506.ph = phi ptr [ %338, %"end for f130.s0.v4" ], [ %.038210236311359426448, %call_destructor.exit230 ]
  %.0211235312358427447487505.ph = phi ptr [ %209, %"end for f130.s0.v4" ], [ %.0211235312358427447, %call_destructor.exit230 ]
  %.ph844 = phi i32 [ %1951, %"end for f130.s0.v4" ], [ %24, %call_destructor.exit230 ]
  call void @halide_free(ptr null, ptr nonnull %.sink845) #7
  br label %call_destructor.exit235

call_destructor.exit235:                          ; preds = %call_destructor.exit235.sink.split, %call_destructor.exit230
  %.047201245302368417457477515 = phi ptr [ %.047201245302368417457, %call_destructor.exit230 ], [ %.047201245302368417457477515.ph, %call_destructor.exit235.sink.split ]
  %.046202244303367418456478514 = phi ptr [ %.046202244303367418456, %call_destructor.exit230 ], [ %.046202244303367418456478514.ph, %call_destructor.exit235.sink.split ]
  %.045203243304366419455479513 = phi ptr [ %.045203243304366419455, %call_destructor.exit230 ], [ %.045203243304366419455479513.ph, %call_destructor.exit235.sink.split ]
  %.044204242305365420454480512 = phi ptr [ %.044204242305365420454, %call_destructor.exit230 ], [ %.044204242305365420454480512.ph, %call_destructor.exit235.sink.split ]
  %.043205241306364421453481511 = phi ptr [ %.043205241306364421453, %call_destructor.exit230 ], [ %.043205241306364421453481511.ph, %call_destructor.exit235.sink.split ]
  %.042206240307363422452482510 = phi ptr [ %.042206240307363422452, %call_destructor.exit230 ], [ %.042206240307363422452482510.ph, %call_destructor.exit235.sink.split ]
  %.041207239308362423451483509 = phi ptr [ %.041207239308362423451, %call_destructor.exit230 ], [ %.041207239308362423451483509.ph, %call_destructor.exit235.sink.split ]
  %.040208238309361424450484508 = phi ptr [ %.040208238309361424450, %call_destructor.exit230 ], [ %.040208238309361424450484508.ph, %call_destructor.exit235.sink.split ]
  %.039209237310360425449485507 = phi ptr [ %.039209237310360425449, %call_destructor.exit230 ], [ %.039209237310360425449485507.ph, %call_destructor.exit235.sink.split ]
  %.038210236311359426448486506 = phi ptr [ %.038210236311359426448, %call_destructor.exit230 ], [ %.038210236311359426448486506.ph, %call_destructor.exit235.sink.split ]
  %.0211235312358427447487505 = phi ptr [ %.0211235312358427447, %call_destructor.exit230 ], [ %.0211235312358427447487505.ph, %call_destructor.exit235.sink.split ]
  %25 = phi i32 [ %24, %call_destructor.exit230 ], [ %.ph844, %call_destructor.exit235.sink.split ]
  %.not100212234313357428446488504 = phi i1 [ %.not100212234313357428446, %call_destructor.exit230 ], [ false, %call_destructor.exit235.sink.split ]
  %tobool.i236 = icmp eq ptr %.047201245302368417457477515, null
  %brmerge.i238 = or i1 %tobool.i236, %.not100212234313357428446488504
  br i1 %brmerge.i238, label %call_destructor.exit240, label %if.then.i239

if.then.i239:                                     ; preds = %call_destructor.exit235
  call void @halide_free(ptr null, ptr nonnull %.047201245302368417457477515) #7
  br label %call_destructor.exit240

call_destructor.exit240:                          ; preds = %if.then.i239, %call_destructor.exit235
  %tobool.i241 = icmp eq ptr %.046202244303367418456478514, null
  %brmerge.i243 = or i1 %tobool.i241, %.not100212234313357428446488504
  br i1 %brmerge.i243, label %call_destructor.exit245, label %if.then.i244

if.then.i244:                                     ; preds = %call_destructor.exit240
  call void @halide_free(ptr null, ptr nonnull %.046202244303367418456478514) #7
  br label %call_destructor.exit245

call_destructor.exit245:                          ; preds = %if.then.i244, %call_destructor.exit240
  %tobool.i246 = icmp eq ptr %.045203243304366419455479513, null
  %brmerge.i248 = or i1 %tobool.i246, %.not100212234313357428446488504
  br i1 %brmerge.i248, label %call_destructor.exit250, label %if.then.i249

if.then.i249:                                     ; preds = %call_destructor.exit245
  call void @halide_free(ptr null, ptr nonnull %.045203243304366419455479513) #7
  br label %call_destructor.exit250

call_destructor.exit250:                          ; preds = %if.then.i249, %call_destructor.exit245
  %tobool.i251 = icmp eq ptr %.044204242305365420454480512, null
  %brmerge.i253 = or i1 %tobool.i251, %.not100212234313357428446488504
  br i1 %brmerge.i253, label %call_destructor.exit255, label %if.then.i254

if.then.i254:                                     ; preds = %call_destructor.exit250
  call void @halide_free(ptr null, ptr nonnull %.044204242305365420454480512) #7
  br label %call_destructor.exit255

call_destructor.exit255:                          ; preds = %if.then.i254, %call_destructor.exit250
  %tobool.i256 = icmp eq ptr %.043205241306364421453481511, null
  %brmerge.i258 = or i1 %tobool.i256, %.not100212234313357428446488504
  br i1 %brmerge.i258, label %call_destructor.exit260, label %if.then.i259

if.then.i259:                                     ; preds = %call_destructor.exit255
  call void @halide_free(ptr null, ptr nonnull %.043205241306364421453481511) #7
  br label %call_destructor.exit260

call_destructor.exit260:                          ; preds = %if.then.i259, %call_destructor.exit255
  %tobool.i261 = icmp eq ptr %.042206240307363422452482510, null
  %brmerge.i263 = or i1 %tobool.i261, %.not100212234313357428446488504
  br i1 %brmerge.i263, label %call_destructor.exit265, label %if.then.i264

if.then.i264:                                     ; preds = %call_destructor.exit260
  call void @halide_free(ptr null, ptr nonnull %.042206240307363422452482510) #7
  br label %call_destructor.exit265

call_destructor.exit265:                          ; preds = %if.then.i264, %call_destructor.exit260
  %tobool.i266 = icmp eq ptr %.041207239308362423451483509, null
  %brmerge.i268 = or i1 %tobool.i266, %.not100212234313357428446488504
  br i1 %brmerge.i268, label %call_destructor.exit270, label %if.then.i269

if.then.i269:                                     ; preds = %call_destructor.exit265
  call void @halide_free(ptr null, ptr nonnull %.041207239308362423451483509) #7
  br label %call_destructor.exit270

call_destructor.exit270:                          ; preds = %if.then.i269, %call_destructor.exit265
  %tobool.i271 = icmp eq ptr %.040208238309361424450484508, null
  %brmerge.i273 = or i1 %tobool.i271, %.not100212234313357428446488504
  br i1 %brmerge.i273, label %call_destructor.exit275, label %if.then.i274

if.then.i274:                                     ; preds = %call_destructor.exit270
  call void @halide_free(ptr null, ptr nonnull %.040208238309361424450484508) #7
  br label %call_destructor.exit275

call_destructor.exit275:                          ; preds = %if.then.i274, %call_destructor.exit270
  %tobool.i276 = icmp eq ptr %.039209237310360425449485507, null
  %brmerge.i278 = or i1 %tobool.i276, %.not100212234313357428446488504
  br i1 %brmerge.i278, label %call_destructor.exit280, label %if.then.i279

if.then.i279:                                     ; preds = %call_destructor.exit275
  call void @halide_free(ptr null, ptr nonnull %.039209237310360425449485507) #7
  br label %call_destructor.exit280

call_destructor.exit280:                          ; preds = %if.then.i279, %call_destructor.exit275
  %tobool.i281 = icmp eq ptr %.038210236311359426448486506, null
  %brmerge.i283 = or i1 %tobool.i281, %.not100212234313357428446488504
  br i1 %brmerge.i283, label %call_destructor.exit285, label %if.then.i284

if.then.i284:                                     ; preds = %call_destructor.exit280
  call void @halide_free(ptr null, ptr nonnull %.038210236311359426448486506) #7
  br label %call_destructor.exit285

call_destructor.exit285:                          ; preds = %if.then.i284, %call_destructor.exit280
  %tobool.i286 = icmp eq ptr %.0211235312358427447487505, null
  %brmerge.i288 = or i1 %tobool.i286, %.not100212234313357428446488504
  br i1 %brmerge.i288, label %call_destructor.exit290, label %if.then.i289

if.then.i289:                                     ; preds = %call_destructor.exit285
  call void @halide_free(ptr null, ptr nonnull %.0211235312358427447487505) #7
  br label %call_destructor.exit290

call_destructor.exit290:                          ; preds = %call_destructor.exit210, %call_destructor.exit, %if.then.i289, %call_destructor.exit285
  %26 = phi i32 [ %25, %if.then.i289 ], [ %25, %call_destructor.exit285 ], [ 0, %call_destructor.exit ], [ 0, %call_destructor.exit210 ]
  ret i32 %26

"assert failed10":                                ; preds = %"assert succeeded"
  %27 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded11":                             ; preds = %"assert succeeded"
  %28 = icmp eq ptr %input.host, null
  %input.dev = load i64, ptr %input.buffer, align 8
  %29 = icmp eq i64 %input.dev, 0
  %input.host_and_dev_are_null = and i1 %28, %29
  %buf_host12 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 1
  %local_laplacian.host = load ptr, ptr %buf_host12, align 8
  %local_laplacian.dev = load i64, ptr %local_laplacian.buffer, align 8
  %30 = icmp eq i64 %local_laplacian.dev, 0
  %31 = icmp eq ptr %local_laplacian.host, null
  %local_laplacian.host_and_dev_are_null = and i1 %31, %30
  %buf_extent16 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 0
  %local_laplacian.extent.0 = load i32, ptr %buf_extent16, align 4
  %x7 = sext i32 %local_laplacian.extent.0 to i64
  %buf_extent17 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 1
  %local_laplacian.extent.1 = load i32, ptr %buf_extent17, align 4
  %32 = sext i32 %local_laplacian.extent.1 to i64
  %buf_extent18 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 2
  %local_laplacian.extent.2 = load i32, ptr %buf_extent18, align 4
  %33 = sext i32 %local_laplacian.extent.2 to i64
  %buf_extent19 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 3
  %buf_stride20 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 0
  %local_laplacian.stride.0 = load i32, ptr %buf_stride20, align 4
  %buf_stride21 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 1
  %local_laplacian.stride.1 = load i32, ptr %buf_stride21, align 4
  %34 = sext i32 %local_laplacian.stride.1 to i64
  %buf_stride22 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 2
  %local_laplacian.stride.2 = load i32, ptr %buf_stride22, align 4
  %35 = sext i32 %local_laplacian.stride.2 to i64
  %buf_stride23 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 3
  %buf_min24 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 0
  %a286 = load i32, ptr %buf_min24, align 4
  %buf_min25 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 1
  %a114 = load i32, ptr %buf_min25, align 4
  %buf_min26 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 2
  %a108 = load i32, ptr %buf_min26, align 4
  %buf_min27 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 3
  %buf_elem_size28 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 5
  %local_laplacian.elem_size = load i32, ptr %buf_elem_size28, align 4
  %36 = add nsw i32 %a114, %local_laplacian.extent.1
  %37 = add nsw i32 %36, 125
  %a0 = ashr i32 %37, 6
  %38 = add nsw i32 %36, 253
  %39 = ashr i32 %38, 7
  %40 = shl nsw i32 %39, 1
  %b2 = add nsw i32 %40, 2
  %b750 = tail call i32 @llvm.smax.i32(i32 %a0, i32 %b2)
  %41 = add nsw i32 %a114, -126
  %a1 = ashr i32 %41, 6
  %42 = add nsw i32 %a114, -254
  %43 = ashr i32 %42, 7
  %44 = shl nsw i32 %43, 1
  %b3 = add nsw i32 %44, -1
  %b748 = tail call i32 @llvm.smin.i32(i32 %b3, i32 %a1)
  %45 = add nsw i32 %a286, %local_laplacian.extent.0
  %46 = add nsw i32 %45, 125
  %a2 = ashr i32 %46, 6
  %47 = add nsw i32 %45, 253
  %48 = ashr i32 %47, 7
  %49 = shl nsw i32 %48, 1
  %b4 = add nsw i32 %49, 2
  %b753 = tail call i32 @llvm.smax.i32(i32 %a2, i32 %b4)
  %50 = add nsw i32 %a286, -126
  %a3 = ashr i32 %50, 6
  %51 = add nsw i32 %a286, -254
  %52 = ashr i32 %51, 7
  %53 = shl nsw i32 %52, 1
  %b5 = add nsw i32 %53, -1
  %b751 = tail call i32 @llvm.smin.i32(i32 %b5, i32 %a3)
  %54 = add nsw i32 %levels, -1
  %55 = sitofp i32 %54 to float
  %56 = icmp slt i32 %levels, 1
  %57 = select i1 %56, float 0.000000e+00, float %55
  %a4 = fptosi float %57 to i32
  %b6 = add nsw i32 %levels, -2
  %a742 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a4)
  %58 = select i1 %56, float %55, float 0.000000e+00
  %a5 = fptosi float %58 to i32
  %a772 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a5)
  %59 = add nsw i32 %36, 61
  %a6 = ashr i32 %59, 5
  %60 = shl nsw i32 %b750, 1
  %b8 = add nsw i32 %60, 2
  %b735 = tail call i32 @llvm.smax.i32(i32 %a6, i32 %b8)
  %61 = add nsw i32 %a114, -62
  %a7 = ashr i32 %61, 5
  %62 = shl nsw i32 %b748, 1
  %b9 = add nsw i32 %62, -1
  %b733 = tail call i32 @llvm.smin.i32(i32 %b9, i32 %a7)
  %63 = add nsw i32 %45, 61
  %a8 = ashr i32 %63, 5
  %64 = shl nsw i32 %b753, 1
  %b10 = add nsw i32 %64, 2
  %b739 = tail call i32 @llvm.smax.i32(i32 %a8, i32 %b10)
  %65 = add nsw i32 %a286, -62
  %a9 = ashr i32 %65, 5
  %66 = shl i32 %b751, 1
  %b11 = add nsw i32 %66, -1
  %b737 = tail call i32 @llvm.smin.i32(i32 %b11, i32 %a9)
  %b14 = ashr i32 %61, 6
  %67 = tail call i32 @llvm.smin.i32(i32 %b14, i32 %44)
  %a11 = add nsw i32 %67, -1
  %.not133 = icmp slt i32 %a1, %67
  %b720 = select i1 %.not133, i32 %a1, i32 %a11
  %b17 = ashr i32 %65, 6
  %68 = tail call i32 @llvm.smin.i32(i32 %b17, i32 %53)
  %a14 = add nsw i32 %68, -1
  %.not134 = icmp slt i32 %a3, %68
  %b724 = select i1 %.not134, i32 %a3, i32 %a14
  %69 = add nsw i32 %36, 29
  %a16 = ashr i32 %69, 4
  %70 = shl nsw i32 %b735, 1
  %b18 = add nsw i32 %70, 2
  %b695 = tail call i32 @llvm.smax.i32(i32 %a16, i32 %b18)
  %71 = add nsw i32 %a114, -30
  %a17 = ashr i32 %71, 4
  %72 = shl i32 %b733, 1
  %b19 = add nsw i32 %72, -1
  %a691 = tail call i32 @llvm.smin.i32(i32 %b19, i32 %a17)
  %73 = add nsw i32 %45, 29
  %a18 = ashr i32 %73, 4
  %74 = shl nsw i32 %b739, 1
  %b20 = add nsw i32 %74, 2
  %b709 = tail call i32 @llvm.smax.i32(i32 %a18, i32 %b20)
  %75 = add nsw i32 %a286, -30
  %a19 = ashr i32 %75, 4
  %76 = shl i32 %b737, 1
  %b21 = add nsw i32 %76, -1
  %a705 = tail call i32 @llvm.smin.i32(i32 %b21, i32 %a19)
  %77 = shl nsw i32 %b720, 1
  %b23 = add nsw i32 %77, -1
  %b658 = tail call i32 @llvm.smin.i32(i32 %b23, i32 %a7)
  %78 = shl nsw i32 %b724, 1
  %b25 = add nsw i32 %78, -1
  %b675 = tail call i32 @llvm.smin.i32(i32 %b25, i32 %a9)
  %79 = add nsw i32 %36, 13
  %a24 = ashr i32 %79, 3
  %80 = shl nsw i32 %b695, 1
  %b26 = add nsw i32 %80, 2
  %b624 = tail call i32 @llvm.smax.i32(i32 %a24, i32 %b26)
  %81 = add nsw i32 %a114, -14
  %a25 = ashr i32 %81, 3
  %82 = shl nsw i32 %a691, 1
  %b27 = add nsw i32 %82, -1
  %a620 = tail call i32 @llvm.smin.i32(i32 %b27, i32 %a25)
  %83 = add nsw i32 %45, 13
  %a26 = ashr i32 %83, 3
  %84 = shl nsw i32 %b709, 1
  %b28 = add nsw i32 %84, 2
  %b641 = tail call i32 @llvm.smax.i32(i32 %a26, i32 %b28)
  %85 = add nsw i32 %a286, -14
  %a27 = ashr i32 %85, 3
  %86 = shl nsw i32 %a705, 1
  %b29 = add nsw i32 %86, -1
  %a637 = tail call i32 @llvm.smin.i32(i32 %b29, i32 %a27)
  %87 = shl nsw i32 %b658, 1
  %b31 = add nsw i32 %87, -1
  %a574 = tail call i32 @llvm.smin.i32(i32 %b31, i32 %a17)
  %88 = shl nsw i32 %b675, 1
  %b33 = add nsw i32 %88, -1
  %a595 = tail call i32 @llvm.smin.i32(i32 %b33, i32 %a19)
  %89 = add nsw i32 %36, 5
  %a32 = ashr i32 %89, 2
  %90 = shl nsw i32 %b624, 1
  %b34 = add nsw i32 %90, 2
  %b539 = tail call i32 @llvm.smax.i32(i32 %a32, i32 %b34)
  %91 = add nsw i32 %a114, -6
  %a33 = ashr i32 %91, 2
  %92 = shl nsw i32 %a620, 1
  %b35 = add nsw i32 %92, -1
  %a535 = tail call i32 @llvm.smin.i32(i32 %b35, i32 %a33)
  %93 = add nsw i32 %45, 5
  %a34 = ashr i32 %93, 2
  %94 = shl nsw i32 %b641, 1
  %b36 = add nsw i32 %94, 2
  %b556 = tail call i32 @llvm.smax.i32(i32 %a34, i32 %b36)
  %95 = add nsw i32 %a286, -6
  %a35 = ashr i32 %95, 2
  %96 = shl nsw i32 %a637, 1
  %b37 = add nsw i32 %96, -1
  %a552 = tail call i32 @llvm.smin.i32(i32 %b37, i32 %a35)
  %97 = shl nsw i32 %a574, 1
  %b39 = add nsw i32 %97, -1
  %a485 = tail call i32 @llvm.smin.i32(i32 %b39, i32 %a25)
  %98 = shl nsw i32 %a595, 1
  %b41 = add nsw i32 %98, -1
  %a509 = tail call i32 @llvm.smin.i32(i32 %b41, i32 %a27)
  %99 = add nsw i32 %36, 1
  %a40 = ashr i32 %99, 1
  %100 = shl nsw i32 %b539, 1
  %b42 = add nsw i32 %100, 2
  %b448 = tail call i32 @llvm.smax.i32(i32 %a40, i32 %b42)
  %a41 = ashr i32 %a114, 1
  %b43 = shl nsw i32 %a535, 1
  %f72.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b43, i32 %a41)
  %101 = add nsw i32 %45, 1
  %a42 = ashr i32 %101, 1
  %102 = shl nsw i32 %b556, 1
  %b44 = add nsw i32 %102, 2
  %b465 = tail call i32 @llvm.smax.i32(i32 %a42, i32 %b44)
  %a43 = ashr i32 %a286, 1
  %b45 = shl nsw i32 %a552, 1
  %f72.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b45, i32 %a43)
  %103 = shl nsw i32 %a485, 1
  %b47 = add nsw i32 %103, -1
  %a392 = tail call i32 @llvm.smin.i32(i32 %b47, i32 %a33)
  %104 = shl nsw i32 %a509, 1
  %b49 = add nsw i32 %104, -1
  %a416 = tail call i32 @llvm.smin.i32(i32 %b49, i32 %a35)
  %b51 = shl nsw i32 %a392, 1
  %f4.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b51, i32 %a41)
  %b53 = shl nsw i32 %a416, 1
  %f4.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b53, i32 %a43)
  %a54 = add nsw i32 %36, -1
  %105 = shl nsw i32 %b448, 1
  %b56 = add nsw i32 %105, 2
  %a53 = tail call i32 @llvm.smax.i32(i32 %a54, i32 %b56)
  %.not135 = icmp slt i32 %a53, %36
  %b149 = select i1 %.not135, i32 %a54, i32 %a53
  %106 = shl nsw i32 %f4.s0.v4.min.s, 1
  %b59 = add nsw i32 %106, -3
  %a56 = tail call i32 @llvm.smin.i32(i32 %b59, i32 %a114)
  %107 = shl nsw i32 %f72.s0.v4.min.s, 1
  %b58 = add nsw i32 %107, -3
  %a55 = tail call i32 @llvm.smin.i32(i32 %b58, i32 %a56)
  %a145 = tail call i32 @llvm.smin.i32(i32 %a114, i32 %a55)
  %a60 = add nsw i32 %45, -1
  %108 = shl nsw i32 %b465, 1
  %b62 = add nsw i32 %108, 2
  %a59 = tail call i32 @llvm.smax.i32(i32 %a60, i32 %b62)
  %.not136 = icmp slt i32 %a59, %45
  %b185 = select i1 %.not136, i32 %a60, i32 %a59
  %109 = shl nsw i32 %f4.s0.v3.min.s, 1
  %b65 = add nsw i32 %109, -3
  %a62 = tail call i32 @llvm.smin.i32(i32 %b65, i32 %a286)
  %110 = shl nsw i32 %f72.s0.v3.min.s, 1
  %b64 = add nsw i32 %110, -3
  %a61 = tail call i32 @llvm.smin.i32(i32 %b64, i32 %a62)
  %a181 = tail call i32 @llvm.smin.i32(i32 %a286, i32 %a61)
  %111 = tail call i32 @llvm.smax.i32(i32 %a772, i32 0)
  %112 = fmul float %57, 2.560000e+02
  %a66 = fptosi float %112 to i32
  %113 = shl nsw i32 %levels, 8
  %b68 = add nsw i32 %113, -256
  %a65 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a66)
  %114 = tail call i32 @llvm.smax.i32(i32 %a65, i32 0)
  %115 = tail call i32 @llvm.smax.i32(i32 %a742, i32 0)
  %116 = shl nsw i32 %115, 8
  %117 = fmul float %58, 2.560000e+02
  %a69 = fptosi float %117 to i32
  %a68 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a69)
  %118 = tail call i32 @llvm.smax.i32(i32 %a68, i32 0)
  %b121 = sub nsw i32 %118, %116
  %b75 = add nsw i32 %b185, -7
  %a72 = tail call i32 @llvm.smin.i32(i32 %b75, i32 %a181)
  %b76 = add nsw i32 %45, -8
  %b74 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a286)
  %a71 = tail call i32 @llvm.smin.i32(i32 %b74, i32 %a72)
  %119 = add i32 %input.extent.0, -1
  %120 = extractelement <2 x i32> %21, i64 0
  %b73 = add i32 %119, %120
  %a70 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a71)
  %121 = tail call i32 @llvm.smax.i32(i32 %a70, i32 %120)
  %122 = sub nsw i32 %b185, %a181
  %123 = and i32 %122, -8
  %124 = add i32 %a181, 7
  %a78 = add i32 %124, %123
  %a77 = tail call i32 @llvm.smin.i32(i32 %b185, i32 %a78)
  %125 = add nsw i32 %local_laplacian.extent.0, -1
  %126 = and i32 %125, -8
  %127 = add nsw i32 %a286, %126
  %a79 = add nsw i32 %127, 7
  %b79 = tail call i32 @llvm.smin.i32(i32 %a60, i32 %a79)
  %a76 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b79)
  %a75 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a76)
  %128 = tail call i32 @llvm.smax.i32(i32 %a75, i32 %120)
  %b90 = add nsw i32 %b149, -31
  %a87 = tail call i32 @llvm.smin.i32(i32 %b90, i32 %a145)
  %b91 = add nsw i32 %36, -64
  %b89 = tail call i32 @llvm.smin.i32(i32 %b91, i32 %a114)
  %a86 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a87)
  %129 = extractelement <2 x i32> %21, i64 1
  %130 = add nsw i32 %129, %17
  %b88 = add nsw i32 %130, -1
  %a85 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a86)
  %131 = tail call i32 @llvm.smax.i32(i32 %a85, i32 %129)
  %132 = sub nsw i32 %b149, %a145
  %133 = ashr i32 %132, 5
  %134 = and i32 %132, -32
  %135 = add i32 %a145, 31
  %a93 = add i32 %135, %134
  %a92 = tail call i32 @llvm.smin.i32(i32 %b149, i32 %a93)
  %136 = add nsw i32 %local_laplacian.extent.1, -1
  %137 = ashr i32 %136, 6
  %138 = or i32 %136, 63
  %a94 = add i32 %138, %a114
  %b94 = tail call i32 @llvm.smin.i32(i32 %a54, i32 %a94)
  %a91 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b94)
  %a90 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a91)
  %139 = tail call i32 @llvm.smax.i32(i32 %a90, i32 %129)
  %140 = add i32 %19, -1
  %b104 = add i32 %140, %b108
  %a101 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a108)
  %141 = tail call i32 @llvm.smin.i32(i32 %a101, i32 0)
  %142 = tail call i32 @llvm.smax.i32(i32 %141, i32 %b108)
  %143 = add nsw i32 %a108, %local_laplacian.extent.2
  %a105 = add nsw i32 %143, -1
  %144 = icmp sgt i32 %143, 3
  %a104 = select i1 %144, i32 %a105, i32 2
  %a103 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a104)
  %145 = tail call i32 @llvm.smax.i32(i32 %a103, i32 %b108)
  %local_laplacian.extent.0.required.s = sub nsw i32 %b79, %b74
  %local_laplacian.extent.1.required.s = sub nsw i32 %b94, %b89
  %146 = add nsw i32 %local_laplacian.extent.1.required.s, 1
  %147 = add nsw i32 %local_laplacian.extent.0.required.s, 1
  %local_laplacian.stride.2.required = mul nsw i32 %146, %147
  br i1 %input.host_and_dev_are_null, label %after_bb, label %after_bb.thread

after_bb:                                         ; preds = %"assert succeeded11"
  %input.extent.0.required.s = sub nsw i32 %128, %121
  %148 = add nsw i32 %input.extent.0.required.s, 1
  %input.extent.1.required.s = sub nsw i32 %139, %131
  %149 = add nsw i32 %input.extent.1.required.s, 1
  %input.stride.2.required = mul nsw i32 %149, %148
  store i32 2, ptr %buf_elem_size, align 4
  store i32 %121, ptr %buf_min, align 4
  store i32 %148, ptr %buf_extent, align 4
  store i32 1, ptr %buf_stride, align 4
  store i32 %131, ptr %buf_min7, align 4
  store i32 %149, ptr %buf_extent1, align 4
  store i32 %148, ptr %buf_stride4, align 4
  store i32 %142, ptr %buf_min8, align 4
  %reass.sub569 = sub i32 %145, %142
  %150 = add i32 %reass.sub569, 1
  store i32 %150, ptr %buf_extent2, align 4
  store i32 %input.stride.2.required, ptr %buf_stride5, align 4
  store i32 0, ptr %buf_min9, align 4
  store i32 0, ptr %buf_extent3, align 4
  store i32 0, ptr %buf_stride6, align 4
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %call_destructor.exit210.thread374

after_bb.thread:                                  ; preds = %"assert succeeded11"
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %true_bb58

after_bb44.thread:                                ; preds = %after_bb.thread, %after_bb
  store i32 2, ptr %buf_elem_size28, align 4
  store i32 %b74, ptr %buf_min24, align 4
  store i32 %147, ptr %buf_extent16, align 4
  store i32 1, ptr %buf_stride20, align 4
  store i32 %b89, ptr %buf_min25, align 4
  store i32 %146, ptr %buf_extent17, align 4
  store i32 %147, ptr %buf_stride21, align 4
  store i32 %local_laplacian.stride.2.required, ptr %buf_stride22, align 4
  store i32 0, ptr %buf_min27, align 4
  store i32 0, ptr %buf_extent19, align 4
  store i32 0, ptr %buf_stride23, align 4
  br label %call_destructor.exit210.thread374

true_bb58:                                        ; preds = %after_bb.thread
  %151 = icmp eq i32 %input.elem_size, 2
  br i1 %151, label %"assert succeeded62", label %"assert failed61", !prof !5

"assert failed61":                                ; preds = %true_bb58
  %152 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.3, ptr nonnull @str.4, i32 %input.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded62":                             ; preds = %true_bb58
  %153 = icmp eq i32 %local_laplacian.elem_size, 2
  br i1 %153, label %"assert succeeded64", label %"assert failed63", !prof !5

"assert failed63":                                ; preds = %"assert succeeded62"
  %154 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.5, ptr nonnull @str.4, i32 %local_laplacian.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded64":                             ; preds = %"assert succeeded62"
  %155 = sub nsw i32 %128, %input.extent.0
  %.not102 = icmp slt i32 %155, %120
  br i1 %.not102, label %"assert succeeded66", label %"assert failed65", !prof !5

"assert failed65":                                ; preds = %"assert succeeded64"
  %156 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 0, i32 %121, i32 %128, i32 %120, i32 %b73) #4
  br label %call_destructor.exit210.thread374

"assert succeeded66":                             ; preds = %"assert succeeded64"
  %157 = sub nsw i32 %139, %17
  %.not103 = icmp slt i32 %157, %129
  br i1 %.not103, label %"assert succeeded68", label %"assert failed67", !prof !5

"assert failed67":                                ; preds = %"assert succeeded66"
  %158 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 1, i32 %131, i32 %139, i32 %129, i32 %b88) #4
  br label %call_destructor.exit210.thread374

"assert succeeded68":                             ; preds = %"assert succeeded66"
  %159 = sub nsw i32 %145, %19
  %.not104 = icmp slt i32 %159, %b108
  br i1 %.not104, label %"assert succeeded70", label %"assert failed69", !prof !5

"assert failed69":                                ; preds = %"assert succeeded68"
  %160 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 2, i32 %142, i32 %145, i32 %b108, i32 %b104) #4
  br label %call_destructor.exit210.thread374

"assert succeeded70":                             ; preds = %"assert succeeded68"
  %161 = sub nsw i32 %b79, %local_laplacian.extent.0
  %.not105 = icmp slt i32 %161, %a286
  %162 = icmp sle i32 %a286, %b76
  %163 = and i1 %162, %.not105
  br i1 %163, label %"assert succeeded72", label %"assert failed71", !prof !5

"assert failed71":                                ; preds = %"assert succeeded70"
  %164 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 0, i32 %b74, i32 %b79, i32 %a286, i32 %a60) #4
  br label %call_destructor.exit210.thread374

"assert succeeded72":                             ; preds = %"assert succeeded70"
  %165 = sub nsw i32 %b94, %local_laplacian.extent.1
  %.not106 = icmp slt i32 %165, %a114
  %166 = icmp sle i32 %a114, %b91
  %167 = and i1 %166, %.not106
  br i1 %167, label %"assert succeeded74", label %"assert failed73", !prof !5

"assert failed73":                                ; preds = %"assert succeeded72"
  %168 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 1, i32 %b89, i32 %b94, i32 %a114, i32 %a54) #4
  br label %call_destructor.exit210.thread374

"assert succeeded74":                             ; preds = %"assert succeeded72"
  %169 = icmp eq i32 %input.stride.0, 1
  br i1 %169, label %"assert succeeded76", label %"assert failed75", !prof !5

"assert failed75":                                ; preds = %"assert succeeded74"
  %170 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.6, i32 %input.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded76":                             ; preds = %"assert succeeded74"
  %171 = icmp eq i32 %local_laplacian.stride.0, 1
  br i1 %171, label %"assert succeeded78", label %"assert failed77", !prof !5

"assert failed77":                                ; preds = %"assert succeeded76"
  %172 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.8, i32 %local_laplacian.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded78":                             ; preds = %"assert succeeded76"
  %input.total_extent.1 = mul nsw i64 %18, %x1
  %local_laplacian.total_extent.1 = mul nsw i64 %32, %x7
  %173 = tail call i64 @llvm.abs.i64(i64 %x1, i1 true)
  %174 = icmp ult i64 %173, 2147483648
  br i1 %174, label %"assert succeeded80", label %"assert failed79", !prof !5

"assert failed79":                                ; preds = %"assert succeeded78"
  %175 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %173, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded80":                             ; preds = %"assert succeeded78"
  %x2 = mul nsw i64 %14, %18
  %176 = tail call i64 @llvm.abs.i64(i64 %x2, i1 true)
  %177 = icmp ult i64 %176, 2147483648
  br i1 %177, label %"assert succeeded82", label %"assert failed81", !prof !5

"assert failed81":                                ; preds = %"assert succeeded80"
  %178 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %176, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded82":                             ; preds = %"assert succeeded80"
  %179 = icmp slt i64 %input.total_extent.1, 2147483648
  br i1 %179, label %"assert succeeded84", label %"assert failed83", !prof !5

"assert failed83":                                ; preds = %"assert succeeded82"
  %180 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %input.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded84":                             ; preds = %"assert succeeded82"
  %x4 = mul nsw i64 %15, %20
  %181 = tail call i64 @llvm.abs.i64(i64 %x4, i1 true)
  %182 = icmp ult i64 %181, 2147483648
  br i1 %182, label %"assert succeeded86", label %"assert failed85", !prof !5

"assert failed85":                                ; preds = %"assert succeeded84"
  %183 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %181, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded86":                             ; preds = %"assert succeeded84"
  %184 = mul nsw i64 %input.total_extent.1, %20
  %185 = icmp slt i64 %184, 2147483648
  br i1 %185, label %"assert succeeded88", label %"assert failed87", !prof !5

"assert failed87":                                ; preds = %"assert succeeded86"
  %186 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %184, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded88":                             ; preds = %"assert succeeded86"
  %187 = tail call i64 @llvm.abs.i64(i64 %x7, i1 true)
  %188 = icmp ult i64 %187, 2147483648
  br i1 %188, label %"assert succeeded90", label %"assert failed89", !prof !5

"assert failed89":                                ; preds = %"assert succeeded88"
  %189 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %187, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded90":                             ; preds = %"assert succeeded88"
  %x8 = mul nsw i64 %34, %32
  %190 = tail call i64 @llvm.abs.i64(i64 %x8, i1 true)
  %191 = icmp ult i64 %190, 2147483648
  br i1 %191, label %"assert succeeded92", label %"assert failed91", !prof !5

"assert failed91":                                ; preds = %"assert succeeded90"
  %192 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %190, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded92":                             ; preds = %"assert succeeded90"
  %193 = icmp slt i64 %local_laplacian.total_extent.1, 2147483648
  br i1 %193, label %"assert succeeded94", label %"assert failed93", !prof !5

"assert failed93":                                ; preds = %"assert succeeded92"
  %194 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %local_laplacian.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded94":                             ; preds = %"assert succeeded92"
  %x10 = mul nsw i64 %35, %33
  %195 = tail call i64 @llvm.abs.i64(i64 %x10, i1 true)
  %196 = icmp ult i64 %195, 2147483648
  br i1 %196, label %"assert succeeded96", label %"assert failed95", !prof !5

"assert failed95":                                ; preds = %"assert succeeded94"
  %197 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %195, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded96":                             ; preds = %"assert succeeded94"
  %198 = mul nsw i64 %local_laplacian.total_extent.1, %33
  %199 = icmp slt i64 %198, 2147483648
  br i1 %199, label %"assert succeeded98", label %"assert failed97", !prof !5

"assert failed97":                                ; preds = %"assert succeeded96"
  %200 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %198, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded98":                             ; preds = %"assert succeeded96"
  %201 = shl i32 %111, 8
  %202 = add i32 %201, %b121
  %f0.v3.extent_realized.s.s = sub i32 %114, %202
  %203 = add nsw i32 %f0.v3.extent_realized.s.s, 257
  %204 = zext i32 %203 to i64
  %205 = shl nuw nsw i64 %204, 2
  %206 = icmp ult i32 %203, 536870912
  br i1 %206, label %"assert succeeded100", label %"assert failed99", !prof !5

"assert failed99":                                ; preds = %"assert succeeded98"
  %207 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.9, i64 %205, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded100":                            ; preds = %"assert succeeded98"
  %208 = add nuw nsw i64 %205, 4
  %209 = tail call ptr @halide_malloc(ptr null, i64 %208)
  %.not107 = icmp eq ptr %209, null
  br i1 %.not107, label %"assert failed101", label %"produce f0", !prof !4

"assert failed101":                               ; preds = %"assert succeeded100"
  %210 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f0":                                     ; preds = %"assert succeeded100"
  %211 = icmp sgt i32 %f0.v3.extent_realized.s.s, -257
  br i1 %211, label %"for f0.s0.v3.preheader", label %"consume f0", !prof !5

"for f0.s0.v3.preheader":                         ; preds = %"produce f0"
  %212 = add nsw i32 %b121, -256
  %213 = sext i32 %b121 to i64
  %214 = shl nsw i64 %213, 2
  %215 = sub nsw i64 1024, %214
  %scevgep480 = getelementptr i8, ptr %209, i64 %215
  %216 = sext i32 %212 to i64
  %217 = add nuw i32 %114, 256
  %218 = sub i32 %217, %202
  %219 = zext i32 %218 to i64
  %220 = add nuw nsw i64 %219, 1
  %min.iters.check = icmp ult i32 %218, 3
  br i1 %min.iters.check, label %"for f0.s0.v3.preheader1071", label %vector.ph

vector.ph:                                        ; preds = %"for f0.s0.v3.preheader"
  %n.vec = and i64 %220, -4
  %ind.end = add nsw i64 %n.vec, %216
  %.cast = trunc i64 %n.vec to i32
  %ind.end847 = sub i32 %203, %.cast
  %.splatinsert = insertelement <4 x i32> poison, i32 %212, i64 0
  %.splat = shufflevector <4 x i32> %.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %induction = add <4 x i32> %.splat, <i32 0, i32 1, i32 2, i32 3>
  %broadcast.splatinsert = insertelement <4 x float> poison, float %alpha, i64 0
  %broadcast.splat = shufflevector <4 x float> %broadcast.splatinsert, <4 x float> poison, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i32> [ %induction, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %offset.idx = add i64 %index, %216
  %221 = sitofp <4 x i32> %vec.ind to <4 x float>
  %222 = fmul <4 x float> %221, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %223 = fsub <4 x float> zeroinitializer, %222
  %224 = fmul <4 x float> %223, %221
  %225 = fmul <4 x float> %224, <float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000>
  %226 = fmul <4 x float> %225, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %227 = tail call <4 x float> @llvm.floor.v4f32(<4 x float> %226)
  %228 = fptosi <4 x float> %227 to <4 x i32>
  %229 = fmul <4 x float> %227, <float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000>
  %230 = fmul <4 x float> %227, <float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000>
  %231 = fsub <4 x float> %225, %230
  %232 = fsub <4 x float> %231, %229
  %233 = fmul <4 x float> %232, %232
  %234 = shl <4 x i32> %228, <i32 23, i32 23, i32 23, i32 23>
  %235 = add <4 x i32> %234, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %236 = bitcast <4 x i32> %235 to <4 x float>
  %237 = fmul <4 x float> %233, <float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000>
  %238 = fadd <4 x float> %237, <float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000>
  %239 = fmul <4 x float> %233, %238
  %240 = fadd <4 x float> %239, <float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000>
  %241 = fmul <4 x float> %233, %240
  %242 = fadd <4 x float> %241, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %243 = fmul <4 x float> %233, <float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000>
  %244 = fadd <4 x float> %243, <float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000>
  %245 = fmul <4 x float> %233, %244
  %246 = fadd <4 x float> %245, <float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000>
  %247 = fmul <4 x float> %233, %246
  %248 = fadd <4 x float> %247, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %249 = fmul <4 x float> %232, %248
  %250 = fadd <4 x float> %242, %249
  %251 = fmul <4 x float> %250, %236
  %252 = icmp slt <4 x i32> %228, <i32 128, i32 128, i32 128, i32 128>
  %253 = select <4 x i1> %252, <4 x float> %251, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %254 = icmp sgt <4 x i32> %228, <i32 -127, i32 -127, i32 -127, i32 -127>
  %255 = select <4 x i1> %254, <4 x float> %253, <4 x float> zeroinitializer
  %256 = fmul <4 x float> %broadcast.splat, %221
  %257 = fmul <4 x float> %256, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %258 = fmul <4 x float> %257, %255
  %259 = getelementptr float, ptr %scevgep480, i64 %offset.idx
  store <4 x float> %258, ptr %259, align 4, !tbaa !6
  %index.next = add nuw i64 %index, 4
  %vec.ind.next = add <4 x i32> %vec.ind, <i32 4, i32 4, i32 4, i32 4>
  %260 = icmp eq i64 %index.next, %n.vec
  br i1 %260, label %middle.block, label %vector.body, !llvm.loop !9

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %220, %n.vec
  br i1 %cmp.n, label %"consume f0", label %"for f0.s0.v3.preheader1071"

"for f0.s0.v3.preheader1071":                     ; preds = %"for f0.s0.v3.preheader", %middle.block
  %lsr.iv482.ph = phi i64 [ %216, %"for f0.s0.v3.preheader" ], [ %ind.end, %middle.block ]
  %lsr.iv478.ph = phi i32 [ %203, %"for f0.s0.v3.preheader" ], [ %ind.end847, %middle.block ]
  br label %"for f0.s0.v3"

"for f0.s0.v3":                                   ; preds = %"for f0.s0.v3.preheader1071", %"for f0.s0.v3"
  %lsr.iv482 = phi i64 [ %lsr.iv.next483, %"for f0.s0.v3" ], [ %lsr.iv482.ph, %"for f0.s0.v3.preheader1071" ]
  %lsr.iv478 = phi i32 [ %lsr.iv.next479, %"for f0.s0.v3" ], [ %lsr.iv478.ph, %"for f0.s0.v3.preheader1071" ]
  %tmp487 = trunc i64 %lsr.iv482 to i32
  %261 = sitofp i32 %tmp487 to float
  %262 = fmul float %261, 3.906250e-03
  %263 = fsub float 0.000000e+00, %262
  %t3062 = fmul float %263, %261
  %264 = fmul float %t3062, 0x3F60000000000000
  %265 = fmul float %264, 0x3FF7154760000000
  %y.i = tail call float @llvm.floor.f32(float %265) #8
  %t3064 = fptosi float %y.i to i32
  %266 = fmul float %y.i, 0x3EB7F7D1C0000000
  %267 = fmul float %y.i, 0x3FE62E4000000000
  %268 = fsub float %264, %267
  %t3065 = fsub float %268, %266
  %t3066 = fmul float %t3065, %t3065
  %269 = shl i32 %t3064, 23
  %270 = add i32 %269, 1065353216
  %271 = bitcast i32 %270 to float
  %272 = insertelement <2 x float> poison, float %t3066, i64 0
  %273 = shufflevector <2 x float> %272, <2 x float> poison, <2 x i32> zeroinitializer
  %274 = fmul <2 x float> %273, <float 0x3F5385CCC0000000, float 0x3F34F2FE60000000>
  %275 = fadd <2 x float> %274, <float 0x3FA54CD780000000, float 0x3F81632540000000>
  %276 = fmul <2 x float> %273, %275
  %277 = fadd <2 x float> %276, <float 0x3FDFFFFBC0000000, float 0x3FC555C3E0000000>
  %278 = fmul <2 x float> %273, %277
  %279 = fadd <2 x float> %278, <float 1.000000e+00, float 1.000000e+00>
  %280 = extractelement <2 x float> %279, i64 1
  %281 = fmul float %t3065, %280
  %282 = extractelement <2 x float> %279, i64 0
  %283 = fadd float %282, %281
  %284 = fmul float %283, %271
  %285 = icmp slt i32 %t3064, 128
  %286 = select i1 %285, float %284, float 0x7FF0000000000000
  %287 = icmp sgt i32 %t3064, -127
  %288 = select i1 %287, float %286, float 0.000000e+00
  %289 = fmul float %261, %alpha
  %290 = fmul float %289, 3.906250e-03
  %291 = fmul float %290, %288
  %scevgep484 = getelementptr float, ptr %scevgep480, i64 %lsr.iv482
  store float %291, ptr %scevgep484, align 4, !tbaa !6
  %lsr.iv.next479 = add i32 %lsr.iv478, -1
  %lsr.iv.next483 = add nsw i64 %lsr.iv482, 1
  %.not132 = icmp eq i32 %lsr.iv.next479, 0
  br i1 %.not132, label %"consume f0", label %"for f0.s0.v3", !llvm.loop !12

"consume f0":                                     ; preds = %"for f0.s0.v3", %middle.block, %"produce f0"
  %a127 = add nsw i32 %f72.s0.v4.min.s, -1
  %b129 = add nsw i32 %b448, -31
  %.not137 = icmp slt i32 %b129, %f72.s0.v4.min.s
  %b135 = select i1 %.not137, i32 %b129, i32 %a127
  %a134 = add nsw i32 %f4.s0.v4.min.s, -1
  %b136 = add nsw i32 %b448, -7
  %.not138 = icmp slt i32 %b136, %f4.s0.v4.min.s
  %a133 = select i1 %.not138, i32 %b136, i32 %a134
  %292 = tail call i32 @llvm.smin.i32(i32 %b135, i32 %a133)
  %293 = shl nsw i32 %292, 1
  %a132 = add nsw i32 %293, -1
  %b134 = shl nsw i32 %b135, 1
  %b133 = or i32 %b134, 1
  %.not139 = icmp slt i32 %b133, %293
  %a130 = select i1 %.not139, i32 %b133, i32 %a132
  %b132 = add nsw i32 %b134, 2
  %a129 = tail call i32 @llvm.smin.i32(i32 %b132, i32 %a130)
  %a128 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a129)
  %f2.v4.min_realized = tail call i32 @llvm.smin.i32(i32 %a87, i32 %a128)
  %294 = sub nsw i32 %b448, %f72.s0.v4.min.s
  %295 = add nsw i32 %294, 1
  %296 = and i32 %295, -32
  %297 = add nsw i32 %f72.s0.v4.min.s, 30
  %a136 = add i32 %297, %296
  %t1938 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a136)
  %298 = sub nsw i32 %b448, %f4.s0.v4.min.s
  %299 = add nsw i32 %298, 1
  %300 = and i32 %299, -8
  %301 = add nsw i32 %f4.s0.v4.min.s, 6
  %a154 = add i32 %301, %300
  %302 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a154)
  %303 = shl nsw i32 %302, 1
  %a153 = add nsw i32 %303, 2
  %304 = shl nsw i32 %t1938, 1
  %b155 = add nsw i32 %304, -1
  %.not140 = icmp slt i32 %a153, %304
  %a152 = select i1 %.not140, i32 %b155, i32 %a153
  %a151 = tail call i32 @llvm.smax.i32(i32 %a152, i32 %304)
  %b153 = or i32 %304, 1
  %a150 = tail call i32 @llvm.smax.i32(i32 %a151, i32 %b153)
  %b152 = add nsw i32 %304, 2
  %b150 = tail call i32 @llvm.smax.i32(i32 %a150, i32 %b152)
  %b148 = tail call i32 @llvm.smax.i32(i32 %b94, i32 %b150)
  %305 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b148)
  %a155 = add nsw i32 %f72.s0.v3.min.s, -1
  %b157 = add nsw i32 %b465, -7
  %.not141 = icmp slt i32 %b157, %f72.s0.v3.min.s
  %b165 = select i1 %.not141, i32 %b157, i32 %a155
  %a164 = add nsw i32 %f4.s0.v3.min.s, -1
  %.not142 = icmp slt i32 %b157, %f4.s0.v3.min.s
  %a163 = select i1 %.not142, i32 %b157, i32 %a164
  %306 = tail call i32 @llvm.smin.i32(i32 %b165, i32 %a163)
  %307 = shl nsw i32 %306, 1
  %a162 = add nsw i32 %307, -1
  %b164 = shl nsw i32 %b165, 1
  %b163 = or i32 %b164, 1
  %.not143 = icmp slt i32 %b163, %307
  %a160 = select i1 %.not143, i32 %b163, i32 %a162
  %b162 = add nsw i32 %b164, 2
  %a159 = tail call i32 @llvm.smin.i32(i32 %b162, i32 %a160)
  %b161 = add nsw i32 %b164, -1
  %a158 = tail call i32 @llvm.smin.i32(i32 %b161, i32 %a159)
  %308 = icmp sgt i32 %126, 0
  %a165 = select i1 %308, i32 %a286, i32 %127
  %b160 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a165)
  %b159 = tail call i32 @llvm.smin.i32(i32 %b160, i32 %a158)
  %a156 = tail call i32 @llvm.smin.i32(i32 %b159, i32 %b74)
  %f2.v3.min_realized = tail call i32 @llvm.smin.i32(i32 %a72, i32 %a156)
  %reass.sub = sub i32 %b465, %f72.s0.v3.min.s
  %309 = add i32 %reass.sub, 1
  %310 = and i32 %309, -8
  %311 = add nsw i32 %f72.s0.v3.min.s, 6
  %a168 = add i32 %311, %310
  %t1943 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a168)
  %reass.sub546 = sub i32 %b465, %f4.s0.v3.min.s
  %312 = add i32 %reass.sub546, 1
  %313 = and i32 %312, -8
  %314 = add nsw i32 %f4.s0.v3.min.s, 6
  %a191 = add i32 %314, %313
  %315 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a191)
  %316 = shl nsw i32 %315, 1
  %a190 = add nsw i32 %316, 2
  %317 = shl nsw i32 %t1943, 1
  %b192 = add nsw i32 %317, -1
  %.not144 = icmp slt i32 %a190, %317
  %a189 = select i1 %.not144, i32 %b192, i32 %a190
  %a188 = tail call i32 @llvm.smax.i32(i32 %a189, i32 %317)
  %b190 = or i32 %317, 1
  %a187 = tail call i32 @llvm.smax.i32(i32 %a188, i32 %b190)
  %b189 = add nsw i32 %317, 2
  %a186 = tail call i32 @llvm.smax.i32(i32 %a187, i32 %b189)
  %318 = and i32 %local_laplacian.extent.0.required.s, -8
  %a192 = add nsw i32 %318, %b74
  %b194 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %127)
  %319 = tail call i32 @llvm.smin.i32(i32 %b194, i32 %a192)
  %b188 = add nsw i32 %319, 7
  %b186 = tail call i32 @llvm.smax.i32(i32 %a186, i32 %b188)
  %b184 = tail call i32 @llvm.smax.i32(i32 %b79, i32 %b186)
  %320 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b184)
  %f2.v3.extent_realized.s = sub nsw i32 %320, %f2.v3.min_realized
  %reass.sub547 = sub i32 %305, %f2.v4.min_realized
  %321 = add i32 %reass.sub547, 1
  %322 = zext i32 %321 to i64
  %323 = add nsw i32 %f2.v3.extent_realized.s, 1
  %324 = zext i32 %323 to i64
  %325 = shl nuw nsw i64 %324, 2
  %326 = mul i64 %325, %322
  %327 = icmp ult i64 %326, 2147483648
  %328 = and i64 %325, 4294967292
  %329 = mul nuw i64 %328, %322
  %330 = lshr i64 %329, 32
  %331 = lshr i64 %324, 30
  %332 = mul nuw nsw i64 %331, %322
  %333 = add nuw nsw i64 %330, %332
  %334 = icmp ult i64 %333, 4294967296
  %335 = and i1 %327, %334
  br i1 %335, label %"assert succeeded104", label %"assert failed103", !prof !5

"assert failed103":                               ; preds = %"consume f0"
  %336 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.10, i64 %326, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded104":                            ; preds = %"consume f0"
  %337 = add nuw nsw i64 %326, 4
  %338 = tail call ptr @halide_malloc(ptr null, i64 %337)
  %.not516 = icmp eq ptr %338, null
  br i1 %.not516, label %"assert failed105", label %"produce f2", !prof !4

"assert failed105":                               ; preds = %"assert succeeded104"
  %339 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f2":                                     ; preds = %"assert succeeded104"
  %340 = sub nsw i32 %129, %a145
  %341 = add nsw i32 %340, 31
  %a195 = lshr i32 %341, 5
  %342 = icmp sgt i32 %340, 0
  %343 = select i1 %342, i32 %a195, i32 0
  %b196 = add nsw i32 %133, 1
  %.not145 = icmp slt i32 %133, %343
  %f2.s0.v4.v4.prologue = select i1 %.not145, i32 %b196, i32 %343
  %344 = sub nsw i32 %130, %a145
  %345 = ashr i32 %344, 5
  %a200 = add nsw i32 %345, -1
  %346 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %b90)
  %347 = sub nsw i32 %346, %a145
  %b202 = ashr i32 %347, 5
  %.not146 = icmp slt i32 %b202, %345
  %a199 = select i1 %.not146, i32 %b202, i32 %a200
  %348 = tail call i32 @llvm.smin.i32(i32 %133, i32 %a199)
  %b198 = add nsw i32 %348, 1
  %f2.s0.v4.v4.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v4.v4.prologue, i32 %b198)
  store i32 %b185, ptr %12, align 8
  %349 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 1
  store i32 %a181, ptr %349, align 4
  %350 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 2
  store i32 %b149, ptr %350, align 8
  %351 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 3
  store i32 %a145, ptr %351, align 4
  %352 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 4
  store i32 %f2.s0.v4.v4.epilogue, ptr %352, align 8
  %353 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 5
  store i32 %f2.s0.v4.v4.prologue, ptr %353, align 4
  %354 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 6
  store i32 %f2.v3.extent_realized.s, ptr %354, align 8
  %355 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 7
  store i32 %f2.v3.min_realized, ptr %355, align 4
  %356 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 8
  store i32 %f2.v4.min_realized, ptr %356, align 8
  %357 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 9
  store i32 %input.extent.0, ptr %357, align 4
  %358 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 10
  %359 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %359, ptr %358, align 8
  %360 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 14
  store i32 %b108, ptr %360, align 8
  %361 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 15
  store i32 %input.stride.1, ptr %361, align 4
  %362 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 16
  store i32 %input.stride.2, ptr %362, align 8
  %363 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 17
  store ptr %338, ptr %363, align 8
  %364 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 18
  store ptr null, ptr %364, align 8
  %365 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 19
  store ptr %input.host, ptr %365, align 8
  %366 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 20
  store ptr %input.buffer, ptr %366, align 8
  %367 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f2.s0.v4.v4, i32 0, i32 %b196, ptr nonnull %12)
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %"consume f2", label %call_destructor.exit210.thread374, !prof !5

"consume f2":                                     ; preds = %"produce f2"
  %b252 = add nuw nsw i32 %115, 1
  %a249 = call i32 @llvm.smax.i32(i32 %a742, i32 %b252)
  %f4.v6.extent_realized.s = sub nsw i32 %a249, %111
  %369 = ashr i32 %b89, 1
  %a256 = add nsw i32 %369, -1
  %370 = add nsw i32 %b89, 3
  %b258 = ashr i32 %370, 1
  %.not147 = icmp slt i32 %b258, %369
  %a255 = select i1 %.not147, i32 %b258, i32 %a256
  %b259 = add nsw i32 %b539, -7
  %371 = call i32 @llvm.smin.i32(i32 %b259, i32 %a392)
  %372 = shl nsw i32 %371, 1
  %b257 = add nsw i32 %372, -1
  %a254 = call i32 @llvm.smin.i32(i32 %b257, i32 %a255)
  %a253 = call i32 @llvm.smin.i32(i32 %a256, i32 %a254)
  %a252 = call i32 @llvm.smin.i32(i32 %369, i32 %a253)
  %f4.v4.min_realized = call i32 @llvm.smin.i32(i32 %a133, i32 %a252)
  %373 = sub nsw i32 %b539, %a392
  %374 = ashr i32 %373, 3
  %375 = and i32 %373, -8
  %376 = add nsw i32 %a392, 7
  %a271 = add i32 %376, %375
  %377 = call i32 @llvm.smin.i32(i32 %b539, i32 %a271)
  %378 = shl nsw i32 %377, 1
  %a270 = add nsw i32 %378, 2
  %379 = ashr i32 %b94, 1
  %b272 = add nsw i32 %379, 1
  %a269 = call i32 @llvm.smax.i32(i32 %a270, i32 %b272)
  %b269 = call i32 @llvm.smax.i32(i32 %a269, i32 %379)
  %380 = call i32 @llvm.smax.i32(i32 %302, i32 %b269)
  %b280 = add nsw i32 %b556, -7
  %381 = call i32 @llvm.smin.i32(i32 %b280, i32 %a416)
  %382 = shl nsw i32 %381, 1
  %a277 = add nsw i32 %382, -1
  %383 = ashr i32 %b74, 1
  %a279 = add nsw i32 %383, -1
  %384 = ashr i32 %b79, 1
  %b281 = add nsw i32 %384, -6
  %.not148 = icmp slt i32 %b281, %383
  %b279 = select i1 %.not148, i32 %b281, i32 %a279
  %.not149 = icmp slt i32 %b279, %382
  %a276 = select i1 %.not149, i32 %b279, i32 %a277
  %385 = ashr i32 %b160, 1
  %b278 = add nsw i32 %385, -1
  %a275 = call i32 @llvm.smin.i32(i32 %b278, i32 %a276)
  %a274 = call i32 @llvm.smin.i32(i32 %385, i32 %a275)
  %f4.v3.min_realized = call i32 @llvm.smin.i32(i32 %a163, i32 %a274)
  %386 = sub nsw i32 %b556, %a416
  %387 = and i32 %386, -8
  %388 = add nsw i32 %a416, 7
  %a299 = add i32 %388, %387
  %389 = call i32 @llvm.smin.i32(i32 %b556, i32 %a299)
  %390 = shl nsw i32 %389, 1
  %a298 = add nsw i32 %390, 2
  %reass.sub548 = sub nsw i32 %384, %383
  %391 = add i32 %reass.sub548, 2
  %392 = and i32 %391, -8
  %393 = add nsw i32 %392, %383
  %a300 = add nsw i32 %393, -1
  %.not150 = icmp slt i32 %b281, %393
  %394 = select i1 %.not150, i32 %b281, i32 %a300
  %b300 = add nsw i32 %394, 7
  %a297 = call i32 @llvm.smax.i32(i32 %a298, i32 %b300)
  %395 = add nsw i32 %319, 9
  %b299 = ashr i32 %395, 1
  %a296 = call i32 @llvm.smax.i32(i32 %a297, i32 %b299)
  %b298 = ashr i32 %b188, 1
  %b296 = call i32 @llvm.smax.i32(i32 %a296, i32 %b298)
  %396 = call i32 @llvm.smax.i32(i32 %315, i32 %b296)
  %f4.v3.extent_realized.s = sub nsw i32 %396, %f4.v3.min_realized
  %397 = add nsw i32 %f4.v6.extent_realized.s, 1
  %398 = add nsw i32 %f4.v3.extent_realized.s, 1
  %f4.stride.1 = mul nsw i32 %398, %397
  %reass.sub549 = sub i32 %380, %f4.v4.min_realized
  %399 = add i32 %reass.sub549, 1
  %400 = zext i32 %399 to i64
  %401 = zext i32 %398 to i64
  %402 = shl nuw nsw i64 %401, 2
  %403 = and i64 %402, 4294967292
  %404 = mul nuw i64 %403, %400
  %405 = lshr i64 %404, 32
  %406 = lshr i64 %401, 30
  %407 = mul nuw nsw i64 %406, %400
  %t3067 = add nuw nsw i64 %405, %407
  %t3068 = mul i64 %402, %400
  %408 = zext i32 %397 to i64
  %409 = mul i64 %t3068, %408
  %410 = icmp ult i64 %409, 2147483648
  %411 = and i64 %t3068, 4294967292
  %412 = mul nuw i64 %411, %408
  %413 = lshr i64 %412, 32
  %414 = mul i64 %t3067, %408
  %415 = add i64 %414, %413
  %416 = or i64 %415, %t3067
  %417 = icmp ult i64 %416, 4294967296
  %418 = and i1 %410, %417
  br i1 %418, label %"assert succeeded110", label %"assert failed109", !prof !5

"assert failed109":                               ; preds = %"consume f2"
  %419 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.11, i64 %409, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded110":                            ; preds = %"consume f2"
  %420 = add nuw nsw i64 %409, 4
  %421 = call ptr @halide_malloc(ptr null, i64 %420)
  %.not517 = icmp eq ptr %421, null
  br i1 %.not517, label %"assert failed111", label %"produce f4", !prof !4

"assert failed111":                               ; preds = %"assert succeeded110"
  %422 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f4":                                     ; preds = %"assert succeeded110"
  %f4.s0.v6.loop_extent.s = sub nsw i32 %115, %111
  %423 = add nsw i32 %298, 9
  %424 = ashr i32 %423, 3
  store float %beta, ptr %11, align 8
  %425 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 1
  store i32 %b121, ptr %425, align 4
  %426 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 2
  store i32 %a772, ptr %426, align 8
  %427 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 3
  store i32 %f2.v3.extent_realized.s, ptr %427, align 4
  %428 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 4
  store i32 %f2.v3.min_realized, ptr %428, align 8
  %429 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 5
  store i32 %f2.v4.min_realized, ptr %429, align 4
  %430 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 6
  store i32 %b465, ptr %430, align 8
  %431 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 7
  store i32 %f4.s0.v3.min.s, ptr %431, align 4
  %432 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 8
  store i32 %b448, ptr %432, align 8
  %433 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 9
  store i32 %f4.s0.v4.min.s, ptr %433, align 4
  %434 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 10
  store i32 %f4.s0.v6.loop_extent.s, ptr %434, align 8
  %435 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 11
  store i32 %f4.stride.1, ptr %435, align 4
  %436 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 12
  store i32 %f4.v3.extent_realized.s, ptr %436, align 8
  %437 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 13
  store i32 %f4.v3.min_realized, ptr %437, align 4
  %438 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 14
  store i32 %f4.v4.min_realized, ptr %438, align 8
  %439 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 15
  store i32 %levels, ptr %439, align 4
  %440 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 16
  store ptr %209, ptr %440, align 8
  %441 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 17
  store ptr null, ptr %441, align 8
  %442 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 18
  store ptr %338, ptr %442, align 8
  %443 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 19
  store ptr null, ptr %443, align 8
  %444 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 20
  store ptr %421, ptr %444, align 8
  %445 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 21
  store ptr null, ptr %445, align 8
  %446 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f4.s0.v4.v4, i32 0, i32 %424, ptr nonnull %11)
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %"consume f4", label %call_destructor.exit210.thread374, !prof !5

"consume f4":                                     ; preds = %"produce f4"
  %b385 = add nsw i32 %b624, -7
  %448 = call i32 @llvm.smin.i32(i32 %b385, i32 %a485)
  %449 = shl nsw i32 %448, 1
  %a382 = add nsw i32 %449, -1
  %450 = add nsw i32 %b89, -6
  %b384 = ashr i32 %450, 2
  %.not151 = icmp slt i32 %b384, %449
  %a381 = select i1 %.not151, i32 %b384, i32 %a382
  %451 = ashr i32 %a255, 1
  %b383 = add nsw i32 %451, -1
  %a380 = call i32 @llvm.smin.i32(i32 %b383, i32 %a381)
  %a379 = call i32 @llvm.smin.i32(i32 %451, i32 %a380)
  %f5.v4.min_realized = call i32 @llvm.smin.i32(i32 %371, i32 %a379)
  %452 = sub nsw i32 %b624, %a485
  %453 = ashr i32 %452, 3
  %454 = and i32 %452, -8
  %455 = add nsw i32 %a485, 7
  %a397 = add i32 %455, %454
  %456 = call i32 @llvm.smin.i32(i32 %b624, i32 %a397)
  %457 = shl nsw i32 %456, 1
  %a396 = add nsw i32 %457, 2
  %458 = add nsw i32 %b94, 6
  %b398 = ashr i32 %458, 2
  %a395 = call i32 @llvm.smax.i32(i32 %a396, i32 %b398)
  %459 = add nsw i32 %b94, 2
  %b397 = ashr i32 %459, 2
  %b395 = call i32 @llvm.smax.i32(i32 %a395, i32 %b397)
  %460 = call i32 @llvm.smax.i32(i32 %377, i32 %b395)
  %b406 = add nsw i32 %b641, -7
  %461 = call i32 @llvm.smin.i32(i32 %b406, i32 %a509)
  %462 = shl nsw i32 %461, 1
  %a403 = add nsw i32 %462, -1
  %a405 = add nsw i32 %b74, -6
  %b407 = add nsw i32 %b79, -22
  %463 = call i32 @llvm.smin.i32(i32 %b407, i32 %a405)
  %b405 = ashr i32 %463, 2
  %.not152 = icmp slt i32 %b405, %462
  %a402 = select i1 %.not152, i32 %b405, i32 %a403
  %464 = ashr i32 %b279, 1
  %b404 = add nsw i32 %464, -1
  %a401 = call i32 @llvm.smin.i32(i32 %b404, i32 %a402)
  %a400 = call i32 @llvm.smin.i32(i32 %464, i32 %a401)
  %f5.v3.min_realized = call i32 @llvm.smin.i32(i32 %381, i32 %a400)
  %465 = sub nsw i32 %b641, %a509
  %466 = and i32 %465, -8
  %467 = add nsw i32 %a509, 7
  %a422 = add i32 %467, %466
  %468 = call i32 @llvm.smin.i32(i32 %b641, i32 %a422)
  %469 = shl nsw i32 %468, 1
  %a421 = add nsw i32 %469, 2
  %470 = ashr i32 %a405, 2
  %471 = add nsw i32 %b79, 6
  %472 = ashr i32 %471, 2
  %473 = sub nsw i32 %472, %470
  %474 = and i32 %473, -8
  %a423 = add nsw i32 %474, %470
  %b425 = ashr i32 %b407, 2
  %475 = call i32 @llvm.smin.i32(i32 %b425, i32 %a423)
  %b423 = add nsw i32 %475, 7
  %a420 = call i32 @llvm.smax.i32(i32 %a421, i32 %b423)
  %476 = add nsw i32 %394, 9
  %b422 = ashr i32 %476, 1
  %a419 = call i32 @llvm.smax.i32(i32 %a420, i32 %b422)
  %b421 = ashr i32 %b300, 1
  %b419 = call i32 @llvm.smax.i32(i32 %a419, i32 %b421)
  %477 = call i32 @llvm.smax.i32(i32 %389, i32 %b419)
  %f5.v3.extent_realized.s = sub nsw i32 %477, %f5.v3.min_realized
  %478 = add nsw i32 %f5.v3.extent_realized.s, 1
  %f5.stride.1 = mul nsw i32 %478, %397
  %reass.sub550 = sub i32 %460, %f5.v4.min_realized
  %479 = add i32 %reass.sub550, 1
  %480 = zext i32 %479 to i64
  %481 = zext i32 %478 to i64
  %482 = shl nuw nsw i64 %481, 2
  %483 = and i64 %482, 4294967292
  %484 = mul nuw i64 %483, %480
  %485 = lshr i64 %484, 32
  %486 = lshr i64 %481, 30
  %487 = mul nuw nsw i64 %486, %480
  %t3069 = add nuw nsw i64 %485, %487
  %t3070 = mul i64 %482, %480
  %488 = mul i64 %t3070, %408
  %489 = icmp ult i64 %488, 2147483648
  %490 = and i64 %t3070, 4294967292
  %491 = mul nuw i64 %490, %408
  %492 = lshr i64 %491, 32
  %493 = mul i64 %t3069, %408
  %494 = add i64 %493, %492
  %495 = or i64 %494, %t3069
  %496 = icmp ult i64 %495, 4294967296
  %497 = and i1 %489, %496
  br i1 %497, label %"assert succeeded116", label %"assert failed115", !prof !5

"assert failed115":                               ; preds = %"consume f4"
  %498 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.12, i64 %488, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded116":                            ; preds = %"consume f4"
  %499 = add nuw nsw i64 %488, 4
  %500 = call ptr @halide_malloc(ptr null, i64 %499)
  %.not518 = icmp eq ptr %500, null
  br i1 %.not518, label %"assert failed117", label %"produce f5", !prof !4

"assert failed117":                               ; preds = %"assert succeeded116"
  %501 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f5":                                     ; preds = %"assert succeeded116"
  %502 = add nsw i32 %374, 1
  store i32 %a772, ptr %10, align 8
  %503 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 1
  store i32 %f4.stride.1, ptr %503, align 4
  %504 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 2
  store i32 %f4.v3.extent_realized.s, ptr %504, align 8
  %505 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 3
  store i32 %f4.v3.min_realized, ptr %505, align 4
  %506 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 4
  store i32 %f4.v4.min_realized, ptr %506, align 8
  %507 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 5
  store i32 %b556, ptr %507, align 4
  %508 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 6
  store i32 %a416, ptr %508, align 8
  %509 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 7
  store i32 %b539, ptr %509, align 4
  %510 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 8
  store i32 %a392, ptr %510, align 8
  %511 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %511, align 4
  %512 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 10
  store i32 %f5.stride.1, ptr %512, align 8
  %513 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 11
  store i32 %f5.v3.extent_realized.s, ptr %513, align 4
  %514 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 12
  store i32 %f5.v3.min_realized, ptr %514, align 8
  %515 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 13
  store i32 %f5.v4.min_realized, ptr %515, align 4
  %516 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 14
  store ptr %421, ptr %516, align 8
  %517 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 15
  store ptr null, ptr %517, align 8
  %518 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 16
  store ptr %500, ptr %518, align 8
  %519 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 17
  store ptr null, ptr %519, align 8
  %520 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f5.s0.v4.v4, i32 0, i32 %502, ptr nonnull %10)
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %"consume f5", label %call_destructor.exit210.thread374, !prof !5

"consume f5":                                     ; preds = %"produce f5"
  %b440 = add nsw i32 %b539, -31
  %522 = call i32 @llvm.smin.i32(i32 %b440, i32 %a535)
  %523 = shl nsw i32 %522, 1
  %b438 = add nsw i32 %523, -1
  %a435 = call i32 @llvm.smin.i32(i32 %b438, i32 %a255)
  %f72.v4.min_realized = call i32 @llvm.smin.i32(i32 %b135, i32 %a435)
  %524 = sub nsw i32 %b539, %a535
  %525 = ashr i32 %524, 5
  %526 = and i32 %524, -32
  %527 = add nsw i32 %a535, 31
  %a448 = add i32 %527, %526
  %528 = call i32 @llvm.smin.i32(i32 %b539, i32 %a448)
  %529 = shl nsw i32 %528, 1
  %a447 = add nsw i32 %529, 2
  %b447 = call i32 @llvm.smax.i32(i32 %a447, i32 %b272)
  %530 = call i32 @llvm.smax.i32(i32 %t1938, i32 %b447)
  %531 = call i32 @llvm.smin.i32(i32 %b280, i32 %a552)
  %532 = shl nsw i32 %531, 1
  %a451 = add nsw i32 %532, -1
  %.not153 = icmp slt i32 %b279, %532
  %a450 = select i1 %.not153, i32 %b279, i32 %a451
  %f72.v3.min_realized = call i32 @llvm.smin.i32(i32 %b165, i32 %a450)
  %533 = sub nsw i32 %b556, %a552
  %534 = and i32 %533, -8
  %535 = add nsw i32 %a552, 7
  %a465 = add i32 %535, %534
  %536 = call i32 @llvm.smin.i32(i32 %b556, i32 %a465)
  %537 = shl nsw i32 %536, 1
  %a464 = add nsw i32 %537, 2
  %b464 = call i32 @llvm.smax.i32(i32 %a464, i32 %b300)
  %538 = call i32 @llvm.smax.i32(i32 %t1943, i32 %b464)
  %f72.v3.extent_realized.s = sub nsw i32 %538, %f72.v3.min_realized
  %reass.sub551 = sub i32 %530, %f72.v4.min_realized
  %539 = add i32 %reass.sub551, 1
  %540 = zext i32 %539 to i64
  %541 = add nsw i32 %f72.v3.extent_realized.s, 1
  %542 = zext i32 %541 to i64
  %543 = shl nuw nsw i64 %542, 2
  %544 = mul i64 %543, %540
  %545 = icmp ult i64 %544, 2147483648
  %546 = and i64 %543, 4294967292
  %547 = mul nuw i64 %546, %540
  %548 = lshr i64 %547, 32
  %549 = lshr i64 %542, 30
  %550 = mul nuw nsw i64 %549, %540
  %551 = add nuw nsw i64 %548, %550
  %552 = icmp ult i64 %551, 4294967296
  %553 = and i1 %545, %552
  br i1 %553, label %"assert succeeded122", label %"assert failed121", !prof !5

"assert failed121":                               ; preds = %"consume f5"
  %554 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.13, i64 %544, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded122":                            ; preds = %"consume f5"
  %555 = add nuw nsw i64 %544, 4
  %556 = call ptr @halide_malloc(ptr null, i64 %555)
  %.not519 = icmp eq ptr %556, null
  br i1 %.not519, label %"assert failed123", label %"produce f72", !prof !4

"assert failed123":                               ; preds = %"assert succeeded122"
  %557 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f72":                                    ; preds = %"assert succeeded122"
  %558 = add nsw i32 %294, 33
  %559 = ashr i32 %558, 5
  store i32 %f2.v3.extent_realized.s, ptr %9, align 8
  %560 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 1
  store i32 %f2.v3.min_realized, ptr %560, align 4
  %561 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 2
  store i32 %f2.v4.min_realized, ptr %561, align 8
  %562 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 3
  store i32 %b465, ptr %562, align 4
  %563 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 4
  store i32 %f72.s0.v3.min.s, ptr %563, align 8
  %564 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 5
  store i32 %b448, ptr %564, align 4
  %565 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 6
  store i32 %f72.s0.v4.min.s, ptr %565, align 8
  %566 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 7
  store i32 %f72.v3.extent_realized.s, ptr %566, align 4
  %567 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 8
  store i32 %f72.v3.min_realized, ptr %567, align 8
  %568 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 9
  store i32 %f72.v4.min_realized, ptr %568, align 4
  %569 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 10
  store ptr %338, ptr %569, align 8
  %570 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 11
  store ptr null, ptr %570, align 8
  %571 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 12
  store ptr %556, ptr %571, align 8
  %572 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 13
  store ptr null, ptr %572, align 8
  %573 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f72.s0.v4.v4, i32 0, i32 %559, ptr nonnull %9)
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %"consume f72", label %call_destructor.exit210.thread374, !prof !5

"consume f72":                                    ; preds = %"produce f72"
  %b480 = add nsw i32 %b695, -7
  %575 = call i32 @llvm.smin.i32(i32 %b480, i32 %a574)
  %576 = shl nsw i32 %575, 1
  %a477 = add nsw i32 %576, -1
  %577 = add nsw i32 %b89, -14
  %b479 = ashr i32 %577, 3
  %.not154 = icmp slt i32 %b479, %576
  %a476 = select i1 %.not154, i32 %b479, i32 %a477
  %b478 = ashr i32 %450, 3
  %a475 = call i32 @llvm.smin.i32(i32 %b478, i32 %a476)
  %f6.v4.min_realized = call i32 @llvm.smin.i32(i32 %448, i32 %a475)
  %578 = sub nsw i32 %b695, %a574
  %579 = ashr i32 %578, 3
  %580 = and i32 %578, -8
  %581 = add nsw i32 %a574, 7
  %a490 = add i32 %581, %580
  %582 = call i32 @llvm.smin.i32(i32 %b695, i32 %a490)
  %583 = shl nsw i32 %582, 1
  %a489 = add nsw i32 %583, 2
  %584 = add nsw i32 %b94, 14
  %b491 = ashr i32 %584, 3
  %a488 = call i32 @llvm.smax.i32(i32 %a489, i32 %b491)
  %b490 = ashr i32 %458, 3
  %b488 = call i32 @llvm.smax.i32(i32 %a488, i32 %b490)
  %585 = call i32 @llvm.smax.i32(i32 %456, i32 %b488)
  %b499 = add nsw i32 %b709, -7
  %586 = call i32 @llvm.smin.i32(i32 %b499, i32 %a595)
  %587 = shl nsw i32 %586, 1
  %a496 = add nsw i32 %587, -1
  %a498 = add nsw i32 %b74, -14
  %b500 = add nsw i32 %b79, -42
  %588 = call i32 @llvm.smin.i32(i32 %b500, i32 %a498)
  %b498 = ashr i32 %588, 3
  %.not155 = icmp slt i32 %b498, %587
  %a495 = select i1 %.not155, i32 %b498, i32 %a496
  %589 = ashr i32 %463, 3
  %b497 = add nsw i32 %589, -1
  %a494 = call i32 @llvm.smin.i32(i32 %b497, i32 %a495)
  %a493 = call i32 @llvm.smin.i32(i32 %589, i32 %a494)
  %f6.v3.min_realized = call i32 @llvm.smin.i32(i32 %461, i32 %a493)
  %590 = sub nsw i32 %b709, %a595
  %591 = and i32 %590, -8
  %592 = add nsw i32 %a595, 7
  %a515 = add i32 %592, %591
  %593 = call i32 @llvm.smin.i32(i32 %b709, i32 %a515)
  %594 = shl nsw i32 %593, 1
  %a514 = add nsw i32 %594, 2
  %595 = ashr i32 %a498, 3
  %596 = add nsw i32 %b79, 14
  %597 = ashr i32 %596, 3
  %598 = sub nsw i32 %597, %595
  %599 = and i32 %598, -8
  %a516 = add nsw i32 %599, %595
  %b518 = ashr i32 %b500, 3
  %600 = call i32 @llvm.smin.i32(i32 %b518, i32 %a516)
  %b516 = add nsw i32 %600, 7
  %a513 = call i32 @llvm.smax.i32(i32 %a514, i32 %b516)
  %601 = add nsw i32 %475, 9
  %b515 = ashr i32 %601, 1
  %a512 = call i32 @llvm.smax.i32(i32 %a513, i32 %b515)
  %b514 = ashr i32 %b423, 1
  %b512 = call i32 @llvm.smax.i32(i32 %a512, i32 %b514)
  %602 = call i32 @llvm.smax.i32(i32 %468, i32 %b512)
  %f6.v3.extent_realized.s = sub nsw i32 %602, %f6.v3.min_realized
  %603 = add nsw i32 %f6.v3.extent_realized.s, 1
  %f6.stride.1 = mul nsw i32 %603, %397
  %reass.sub552 = sub i32 %585, %f6.v4.min_realized
  %604 = add i32 %reass.sub552, 1
  %605 = zext i32 %604 to i64
  %606 = zext i32 %603 to i64
  %607 = shl nuw nsw i64 %606, 2
  %608 = and i64 %607, 4294967292
  %609 = mul nuw i64 %608, %605
  %610 = lshr i64 %609, 32
  %611 = lshr i64 %606, 30
  %612 = mul nuw nsw i64 %611, %605
  %t3071 = add nuw nsw i64 %610, %612
  %t3072 = mul i64 %607, %605
  %613 = mul i64 %t3072, %408
  %614 = icmp ult i64 %613, 2147483648
  %615 = and i64 %t3072, 4294967292
  %616 = mul nuw i64 %615, %408
  %617 = lshr i64 %616, 32
  %618 = mul i64 %t3071, %408
  %619 = add i64 %618, %617
  %620 = or i64 %619, %t3071
  %621 = icmp ult i64 %620, 4294967296
  %622 = and i1 %614, %621
  br i1 %622, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"consume f72"
  %623 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.14, i64 %613, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded128":                            ; preds = %"consume f72"
  %624 = add nuw nsw i64 %613, 4
  %625 = call ptr @halide_malloc(ptr null, i64 %624)
  %.not520 = icmp eq ptr %625, null
  br i1 %.not520, label %"assert failed129", label %"produce f6", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %626 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f6":                                     ; preds = %"assert succeeded128"
  %627 = add nsw i32 %453, 1
  store i32 %a772, ptr %8, align 8
  %628 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 1
  store i32 %f5.stride.1, ptr %628, align 4
  %629 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 2
  store i32 %f5.v3.extent_realized.s, ptr %629, align 8
  %630 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 3
  store i32 %f5.v3.min_realized, ptr %630, align 4
  %631 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 4
  store i32 %f5.v4.min_realized, ptr %631, align 8
  %632 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 5
  store i32 %b641, ptr %632, align 4
  %633 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 6
  store i32 %a509, ptr %633, align 8
  %634 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 7
  store i32 %b624, ptr %634, align 4
  %635 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 8
  store i32 %a485, ptr %635, align 8
  %636 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %636, align 4
  %637 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 10
  store i32 %f6.stride.1, ptr %637, align 8
  %638 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 11
  store i32 %f6.v3.extent_realized.s, ptr %638, align 4
  %639 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 12
  store i32 %f6.v3.min_realized, ptr %639, align 8
  %640 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 13
  store i32 %f6.v4.min_realized, ptr %640, align 4
  %641 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 14
  store ptr %500, ptr %641, align 8
  %642 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 15
  store ptr null, ptr %642, align 8
  %643 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 16
  store ptr %625, ptr %643, align 8
  %644 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 17
  store ptr null, ptr %644, align 8
  %645 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f6.s0.v4.v4, i32 0, i32 %627, ptr nonnull %8)
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %"consume f6", label %call_destructor.exit210.thread374, !prof !5

"consume f6":                                     ; preds = %"produce f6"
  %b532 = add nsw i32 %b624, -31
  %647 = call i32 @llvm.smin.i32(i32 %b532, i32 %a620)
  %648 = shl nsw i32 %647, 1
  %a529 = add nsw i32 %648, -1
  %.not156 = icmp slt i32 %b384, %648
  %a528 = select i1 %.not156, i32 %b384, i32 %a529
  %f73.v4.min_realized = call i32 @llvm.smin.i32(i32 %522, i32 %a528)
  %649 = sub nsw i32 %b624, %a620
  %650 = ashr i32 %649, 5
  %651 = and i32 %649, -32
  %652 = add nsw i32 %a620, 31
  %a539 = add i32 %652, %651
  %653 = call i32 @llvm.smin.i32(i32 %b624, i32 %a539)
  %654 = shl nsw i32 %653, 1
  %a538 = add nsw i32 %654, 2
  %b538 = call i32 @llvm.smax.i32(i32 %a538, i32 %b398)
  %655 = call i32 @llvm.smax.i32(i32 %528, i32 %b538)
  %656 = call i32 @llvm.smin.i32(i32 %b406, i32 %a637)
  %657 = shl nsw i32 %656, 1
  %a542 = add nsw i32 %657, -1
  %.not157 = icmp slt i32 %b405, %657
  %a541 = select i1 %.not157, i32 %b405, i32 %a542
  %f73.v3.min_realized = call i32 @llvm.smin.i32(i32 %531, i32 %a541)
  %658 = sub nsw i32 %b641, %a637
  %659 = and i32 %658, -8
  %660 = add nsw i32 %a637, 7
  %a556 = add i32 %660, %659
  %661 = call i32 @llvm.smin.i32(i32 %b641, i32 %a556)
  %662 = shl nsw i32 %661, 1
  %a555 = add nsw i32 %662, 2
  %b555 = call i32 @llvm.smax.i32(i32 %a555, i32 %b423)
  %663 = call i32 @llvm.smax.i32(i32 %536, i32 %b555)
  %f73.v3.extent_realized.s = sub nsw i32 %663, %f73.v3.min_realized
  %reass.sub553 = sub i32 %655, %f73.v4.min_realized
  %664 = add i32 %reass.sub553, 1
  %665 = zext i32 %664 to i64
  %666 = add nsw i32 %f73.v3.extent_realized.s, 1
  %667 = zext i32 %666 to i64
  %668 = shl nuw nsw i64 %667, 2
  %669 = mul i64 %668, %665
  %670 = icmp ult i64 %669, 2147483648
  %671 = and i64 %668, 4294967292
  %672 = mul nuw i64 %671, %665
  %673 = lshr i64 %672, 32
  %674 = lshr i64 %667, 30
  %675 = mul nuw nsw i64 %674, %665
  %676 = add nuw nsw i64 %673, %675
  %677 = icmp ult i64 %676, 4294967296
  %678 = and i1 %670, %677
  br i1 %678, label %"assert succeeded134", label %"assert failed133", !prof !5

"assert failed133":                               ; preds = %"consume f6"
  %679 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.15, i64 %669, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded134":                            ; preds = %"consume f6"
  %680 = add nuw nsw i64 %669, 4
  %681 = call ptr @halide_malloc(ptr null, i64 %680)
  %.not521 = icmp eq ptr %681, null
  br i1 %.not521, label %"assert failed135", label %"produce f73", !prof !4

"assert failed135":                               ; preds = %"assert succeeded134"
  %682 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f73":                                    ; preds = %"assert succeeded134"
  %683 = add nsw i32 %525, 1
  store i32 %f72.v3.extent_realized.s, ptr %7, align 8
  %684 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 1
  store i32 %f72.v3.min_realized, ptr %684, align 4
  %685 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 2
  store i32 %f72.v4.min_realized, ptr %685, align 8
  %686 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 3
  store i32 %b556, ptr %686, align 4
  %687 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 4
  store i32 %a552, ptr %687, align 8
  %688 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 5
  store i32 %b539, ptr %688, align 4
  %689 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 6
  store i32 %a535, ptr %689, align 8
  %690 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 7
  store i32 %f73.v3.extent_realized.s, ptr %690, align 4
  %691 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 8
  store i32 %f73.v3.min_realized, ptr %691, align 8
  %692 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 9
  store i32 %f73.v4.min_realized, ptr %692, align 4
  %693 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 10
  store ptr %556, ptr %693, align 8
  %694 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 11
  store ptr null, ptr %694, align 8
  %695 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 12
  store ptr %681, ptr %695, align 8
  %696 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 13
  store ptr null, ptr %696, align 8
  %697 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f73.s0.v4.v4, i32 0, i32 %683, ptr nonnull %7)
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %"consume f73", label %call_destructor.exit210.thread374, !prof !5

"consume f73":                                    ; preds = %"produce f73"
  %699 = add nsw i32 %b89, -30
  %b570 = ashr i32 %699, 4
  %.not158 = icmp slt i32 %b570, %87
  %a567 = select i1 %.not158, i32 %b570, i32 %b31
  %b569 = ashr i32 %577, 4
  %a566 = call i32 @llvm.smin.i32(i32 %b569, i32 %a567)
  %f7.v4.min_realized = call i32 @llvm.smin.i32(i32 %575, i32 %a566)
  %700 = add nsw i32 %b94, 30
  %b580 = ashr i32 %700, 4
  %a577 = call i32 @llvm.smax.i32(i32 %b18, i32 %b580)
  %b579 = ashr i32 %584, 4
  %b577 = call i32 @llvm.smax.i32(i32 %a577, i32 %b579)
  %701 = call i32 @llvm.smax.i32(i32 %582, i32 %b577)
  %a585 = add nsw i32 %b74, -30
  %b587 = add nsw i32 %b79, -82
  %702 = call i32 @llvm.smin.i32(i32 %b587, i32 %a585)
  %b586 = ashr i32 %702, 4
  %.not159 = icmp slt i32 %b586, %88
  %a583 = select i1 %.not159, i32 %b586, i32 %b33
  %703 = ashr i32 %588, 4
  %b585 = add nsw i32 %703, -1
  %a582 = call i32 @llvm.smin.i32(i32 %b585, i32 %a583)
  %a581 = call i32 @llvm.smin.i32(i32 %703, i32 %a582)
  %f7.v3.min_realized = call i32 @llvm.smin.i32(i32 %586, i32 %a581)
  %704 = ashr i32 %a585, 4
  %705 = add nsw i32 %b79, 30
  %706 = ashr i32 %705, 4
  %707 = sub nsw i32 %706, %704
  %708 = and i32 %707, -8
  %a601 = add nsw i32 %708, %704
  %b603 = ashr i32 %b587, 4
  %709 = call i32 @llvm.smin.i32(i32 %b603, i32 %a601)
  %b602 = add nsw i32 %709, 7
  %a599 = call i32 @llvm.smax.i32(i32 %b20, i32 %b602)
  %710 = add nsw i32 %600, 9
  %b601 = ashr i32 %710, 1
  %a598 = call i32 @llvm.smax.i32(i32 %a599, i32 %b601)
  %b600 = ashr i32 %b516, 1
  %b598 = call i32 @llvm.smax.i32(i32 %a598, i32 %b600)
  %711 = call i32 @llvm.smax.i32(i32 %593, i32 %b598)
  %f7.v3.extent_realized.s = sub nsw i32 %711, %f7.v3.min_realized
  %712 = add nsw i32 %f7.v3.extent_realized.s, 1
  %f7.stride.1 = mul nsw i32 %712, %397
  %reass.sub554 = sub i32 %701, %f7.v4.min_realized
  %713 = add i32 %reass.sub554, 1
  %714 = zext i32 %713 to i64
  %715 = zext i32 %712 to i64
  %716 = shl nuw nsw i64 %715, 2
  %717 = and i64 %716, 4294967292
  %718 = mul nuw i64 %717, %714
  %719 = lshr i64 %718, 32
  %720 = lshr i64 %715, 30
  %721 = mul nuw nsw i64 %720, %714
  %t3073 = add nuw nsw i64 %719, %721
  %t3074 = mul i64 %716, %714
  %722 = mul i64 %t3074, %408
  %723 = icmp ult i64 %722, 2147483648
  %724 = and i64 %t3074, 4294967292
  %725 = mul nuw i64 %724, %408
  %726 = lshr i64 %725, 32
  %727 = mul i64 %t3073, %408
  %728 = add i64 %727, %726
  %729 = or i64 %728, %t3073
  %730 = icmp ult i64 %729, 4294967296
  %731 = and i1 %723, %730
  br i1 %731, label %"assert succeeded140", label %"assert failed139", !prof !5

"assert failed139":                               ; preds = %"consume f73"
  %732 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.16, i64 %722, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded140":                            ; preds = %"consume f73"
  %733 = add nuw nsw i64 %722, 4
  %734 = call ptr @halide_malloc(ptr null, i64 %733)
  %.not522 = icmp eq ptr %734, null
  br i1 %.not522, label %"assert failed141", label %"produce f7", !prof !4

"assert failed141":                               ; preds = %"assert succeeded140"
  %735 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f7":                                     ; preds = %"assert succeeded140"
  %736 = add nsw i32 %579, 1
  store i32 %a772, ptr %6, align 8
  %737 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 1
  store i32 %f6.stride.1, ptr %737, align 4
  %738 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 2
  store i32 %f6.v3.extent_realized.s, ptr %738, align 8
  %739 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 3
  store i32 %f6.v3.min_realized, ptr %739, align 4
  %740 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 4
  store i32 %f6.v4.min_realized, ptr %740, align 8
  %741 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 5
  store i32 %b709, ptr %741, align 4
  %742 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 6
  store i32 %a595, ptr %742, align 8
  %743 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 7
  store i32 %b695, ptr %743, align 4
  %744 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 8
  store i32 %a574, ptr %744, align 8
  %745 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %745, align 4
  %746 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 10
  store i32 %f7.stride.1, ptr %746, align 8
  %747 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 11
  store i32 %f7.v3.extent_realized.s, ptr %747, align 4
  %748 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 12
  store i32 %f7.v3.min_realized, ptr %748, align 8
  %749 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 13
  store i32 %f7.v4.min_realized, ptr %749, align 4
  %750 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 14
  store ptr %625, ptr %750, align 8
  %751 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 15
  store ptr null, ptr %751, align 8
  %752 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 16
  store ptr %734, ptr %752, align 8
  %753 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 17
  store ptr null, ptr %753, align 8
  %754 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f7.s0.v4.v4, i32 0, i32 %736, ptr nonnull %6)
  %755 = icmp eq i32 %754, 0
  br i1 %755, label %"consume f7", label %call_destructor.exit210.thread374, !prof !5

"consume f7":                                     ; preds = %"produce f7"
  %b617 = add nsw i32 %b695, -31
  %756 = call i32 @llvm.smin.i32(i32 %b617, i32 %a691)
  %757 = shl nsw i32 %756, 1
  %a614 = add nsw i32 %757, -1
  %.not160 = icmp slt i32 %b479, %757
  %a613 = select i1 %.not160, i32 %b479, i32 %a614
  %f74.v4.min_realized = call i32 @llvm.smin.i32(i32 %647, i32 %a613)
  %758 = sub nsw i32 %b695, %a691
  %759 = ashr i32 %758, 5
  %760 = and i32 %758, -32
  %761 = add nsw i32 %a691, 31
  %a624 = add i32 %761, %760
  %762 = call i32 @llvm.smin.i32(i32 %b695, i32 %a624)
  %763 = shl nsw i32 %762, 1
  %a623 = add nsw i32 %763, 2
  %b623 = call i32 @llvm.smax.i32(i32 %a623, i32 %b491)
  %764 = call i32 @llvm.smax.i32(i32 %653, i32 %b623)
  %765 = call i32 @llvm.smin.i32(i32 %b499, i32 %a705)
  %766 = shl nsw i32 %765, 1
  %a627 = add nsw i32 %766, -1
  %.not161 = icmp slt i32 %b498, %766
  %a626 = select i1 %.not161, i32 %b498, i32 %a627
  %f74.v3.min_realized = call i32 @llvm.smin.i32(i32 %656, i32 %a626)
  %767 = sub nsw i32 %b709, %a705
  %768 = and i32 %767, -8
  %769 = add nsw i32 %a705, 7
  %a641 = add i32 %769, %768
  %770 = call i32 @llvm.smin.i32(i32 %b709, i32 %a641)
  %771 = shl nsw i32 %770, 1
  %a640 = add nsw i32 %771, 2
  %b640 = call i32 @llvm.smax.i32(i32 %a640, i32 %b516)
  %772 = call i32 @llvm.smax.i32(i32 %661, i32 %b640)
  %f74.v3.extent_realized.s = sub nsw i32 %772, %f74.v3.min_realized
  %reass.sub555 = sub i32 %764, %f74.v4.min_realized
  %773 = add i32 %reass.sub555, 1
  %774 = zext i32 %773 to i64
  %775 = add nsw i32 %f74.v3.extent_realized.s, 1
  %776 = zext i32 %775 to i64
  %777 = shl nuw nsw i64 %776, 2
  %778 = mul i64 %777, %774
  %779 = icmp ult i64 %778, 2147483648
  %780 = and i64 %777, 4294967292
  %781 = mul nuw i64 %780, %774
  %782 = lshr i64 %781, 32
  %783 = lshr i64 %776, 30
  %784 = mul nuw nsw i64 %783, %774
  %785 = add nuw nsw i64 %782, %784
  %786 = icmp ult i64 %785, 4294967296
  %787 = and i1 %779, %786
  br i1 %787, label %"assert succeeded146", label %"assert failed145", !prof !5

"assert failed145":                               ; preds = %"consume f7"
  %788 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.17, i64 %778, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded146":                            ; preds = %"consume f7"
  %789 = add nuw nsw i64 %778, 4
  %790 = call ptr @halide_malloc(ptr null, i64 %789)
  %.not523 = icmp eq ptr %790, null
  br i1 %.not523, label %"assert failed147", label %"produce f74", !prof !4

"assert failed147":                               ; preds = %"assert succeeded146"
  %791 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f74":                                    ; preds = %"assert succeeded146"
  %792 = add nsw i32 %650, 1
  store i32 %f73.v3.extent_realized.s, ptr %5, align 8
  %793 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 1
  store i32 %f73.v3.min_realized, ptr %793, align 4
  %794 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 2
  store i32 %f73.v4.min_realized, ptr %794, align 8
  %795 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 3
  store i32 %b641, ptr %795, align 4
  %796 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 4
  store i32 %a637, ptr %796, align 8
  %797 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 5
  store i32 %b624, ptr %797, align 4
  %798 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 6
  store i32 %a620, ptr %798, align 8
  %799 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 7
  store i32 %f74.v3.extent_realized.s, ptr %799, align 4
  %800 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 8
  store i32 %f74.v3.min_realized, ptr %800, align 8
  %801 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 9
  store i32 %f74.v4.min_realized, ptr %801, align 4
  %802 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 10
  store ptr %681, ptr %802, align 8
  %803 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 11
  store ptr null, ptr %803, align 8
  %804 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 12
  store ptr %790, ptr %804, align 8
  %805 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 13
  store ptr null, ptr %805, align 8
  %806 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f74.s0.v4.v4, i32 0, i32 %792, ptr nonnull %5)
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %"consume f74", label %call_destructor.exit210.thread374, !prof !5

"consume f74":                                    ; preds = %"produce f74"
  %.not162 = icmp slt i32 %a7, %77
  %a653 = select i1 %.not162, i32 %a7, i32 %b23
  %808 = add nsw i32 %b89, -62
  %b655 = ashr i32 %808, 5
  %a652 = call i32 @llvm.smin.i32(i32 %b655, i32 %a653)
  %b654 = ashr i32 %699, 5
  %a651 = call i32 @llvm.smin.i32(i32 %b654, i32 %a652)
  %f8.v4.min_realized = call i32 @llvm.smin.i32(i32 %b658, i32 %a651)
  %809 = add nsw i32 %b94, 62
  %b664 = ashr i32 %809, 5
  %a661 = call i32 @llvm.smax.i32(i32 %b735, i32 %b664)
  %b663 = ashr i32 %700, 5
  %a660 = call i32 @llvm.smax.i32(i32 %a661, i32 %b663)
  %810 = call i32 @llvm.smax.i32(i32 %a660, i32 %b735)
  %f8.v4.extent_realized.s = sub nsw i32 %810, %f8.v4.min_realized
  %.not163 = icmp slt i32 %a9, %78
  %a668 = select i1 %.not163, i32 %a9, i32 %b25
  %811 = ashr i32 %702, 5
  %b670 = add nsw i32 %811, -1
  %a667 = call i32 @llvm.smin.i32(i32 %b670, i32 %a668)
  %a666 = call i32 @llvm.smin.i32(i32 %811, i32 %a667)
  %f8.v3.min_realized = call i32 @llvm.smin.i32(i32 %b675, i32 %a666)
  %812 = add nsw i32 %709, 9
  %b681 = ashr i32 %812, 1
  %a678 = call i32 @llvm.smax.i32(i32 %b739, i32 %b681)
  %b680 = ashr i32 %b602, 1
  %a677 = call i32 @llvm.smax.i32(i32 %a678, i32 %b680)
  %813 = call i32 @llvm.smax.i32(i32 %a677, i32 %b739)
  %f8.v3.extent_realized.s = sub i32 %813, %f8.v3.min_realized
  %814 = add nsw i32 %f8.v4.extent_realized.s, 1
  %815 = add i32 %f8.v3.extent_realized.s, 1
  %f8.stride.2 = mul nsw i32 %815, %814
  %816 = zext i32 %814 to i64
  %817 = zext i32 %815 to i64
  %818 = shl nuw nsw i64 %817, 2
  %819 = and i64 %818, 4294967292
  %820 = mul nuw i64 %819, %816
  %821 = lshr i64 %820, 32
  %822 = lshr i64 %817, 30
  %823 = mul nuw nsw i64 %822, %816
  %t3075 = add nuw nsw i64 %821, %823
  %t3076 = mul i64 %818, %816
  %824 = mul i64 %t3076, %408
  %825 = icmp ult i64 %824, 2147483648
  %826 = and i64 %t3076, 4294967292
  %827 = mul nuw i64 %826, %408
  %828 = lshr i64 %827, 32
  %829 = mul i64 %t3075, %408
  %830 = add i64 %829, %828
  %831 = or i64 %830, %t3075
  %832 = icmp ult i64 %831, 4294967296
  %833 = and i1 %825, %832
  br i1 %833, label %"assert succeeded152", label %"assert failed151", !prof !5

"assert failed151":                               ; preds = %"consume f74"
  %834 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.18, i64 %824, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded152":                            ; preds = %"consume f74"
  %835 = add nuw nsw i64 %824, 4
  %836 = call ptr @halide_malloc(ptr null, i64 %835)
  %.not524 = icmp eq ptr %836, null
  br i1 %.not524, label %"assert failed153", label %"produce f8", !prof !4

"assert failed153":                               ; preds = %"assert succeeded152"
  %837 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f8":                                     ; preds = %"assert succeeded152"
  %838 = add nsw i32 %f4.s0.v6.loop_extent.s, 2
  store i32 %a772, ptr %4, align 8
  %839 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 1
  store i32 %f7.stride.1, ptr %839, align 4
  %840 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 2
  store i32 %f7.v3.extent_realized.s, ptr %840, align 8
  %841 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 3
  store i32 %f7.v3.min_realized, ptr %841, align 4
  %842 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 4
  store i32 %f7.v4.min_realized, ptr %842, align 8
  %843 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 5
  store i32 %b739, ptr %843, align 4
  %844 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 6
  store i32 %b675, ptr %844, align 8
  %845 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 7
  store i32 %b735, ptr %845, align 4
  %846 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 8
  store i32 %b658, ptr %846, align 8
  %847 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 9
  store i32 %f8.stride.2, ptr %847, align 4
  %848 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 10
  store i32 %f8.v3.extent_realized.s, ptr %848, align 8
  %849 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 11
  store i32 %f8.v3.min_realized, ptr %849, align 4
  %850 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 12
  store i32 %f8.v4.min_realized, ptr %850, align 8
  %851 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 13
  store ptr %734, ptr %851, align 8
  %852 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 14
  store ptr null, ptr %852, align 8
  %853 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 15
  store ptr %836, ptr %853, align 8
  %854 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 16
  store ptr null, ptr %854, align 8
  %855 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f8.s0.v6, i32 %111, i32 %838, ptr nonnull %4)
  %856 = icmp eq i32 %855, 0
  br i1 %856, label %"consume f8", label %call_destructor.exit210.thread374, !prof !5

"consume f8":                                     ; preds = %"produce f8"
  %.not164 = icmp slt i32 %b570, %72
  %a686 = select i1 %.not164, i32 %b570, i32 %b19
  %f75.v4.min_realized = call i32 @llvm.smin.i32(i32 %756, i32 %a686)
  %857 = call i32 @llvm.smax.i32(i32 %762, i32 %a577)
  %.not165 = icmp slt i32 %b586, %76
  %a696 = select i1 %.not165, i32 %b586, i32 %b21
  %f75.v3.min_realized = call i32 @llvm.smin.i32(i32 %765, i32 %a696)
  %858 = call i32 @llvm.smax.i32(i32 %770, i32 %a599)
  %f75.v3.extent_realized.s = sub i32 %858, %f75.v3.min_realized
  %reass.sub556 = sub i32 %857, %f75.v4.min_realized
  %859 = add i32 %reass.sub556, 1
  %860 = zext i32 %859 to i64
  %861 = add i32 %f75.v3.extent_realized.s, 1
  %862 = zext i32 %861 to i64
  %863 = shl nuw nsw i64 %862, 2
  %864 = mul i64 %863, %860
  %865 = icmp ult i64 %864, 2147483648
  %866 = and i64 %863, 4294967292
  %867 = mul nuw i64 %866, %860
  %868 = lshr i64 %867, 32
  %869 = lshr i64 %862, 30
  %870 = mul nuw nsw i64 %869, %860
  %871 = add nuw nsw i64 %868, %870
  %872 = icmp ult i64 %871, 4294967296
  %873 = and i1 %865, %872
  br i1 %873, label %"assert succeeded158", label %"assert failed157", !prof !5

"assert failed157":                               ; preds = %"consume f8"
  %874 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.19, i64 %864, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded158":                            ; preds = %"consume f8"
  %875 = add nuw nsw i64 %864, 4
  %876 = call ptr @halide_malloc(ptr null, i64 %875)
  %.not525 = icmp eq ptr %876, null
  br i1 %.not525, label %"assert failed159", label %"produce f75", !prof !4

"assert failed159":                               ; preds = %"assert succeeded158"
  %877 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f75":                                    ; preds = %"assert succeeded158"
  %878 = add nsw i32 %759, 1
  store i32 %f74.v3.extent_realized.s, ptr %3, align 8
  %879 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 1
  store i32 %f74.v3.min_realized, ptr %879, align 4
  %880 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 2
  store i32 %f74.v4.min_realized, ptr %880, align 8
  %881 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 3
  store i32 %b709, ptr %881, align 4
  %882 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 4
  store i32 %a705, ptr %882, align 8
  %883 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 5
  store i32 %b695, ptr %883, align 4
  %884 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 6
  store i32 %a691, ptr %884, align 8
  %885 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 7
  store i32 %f75.v3.extent_realized.s, ptr %885, align 4
  %886 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 8
  store i32 %f75.v3.min_realized, ptr %886, align 8
  %887 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 9
  store i32 %f75.v4.min_realized, ptr %887, align 4
  %888 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 10
  store ptr %790, ptr %888, align 8
  %889 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 11
  store ptr null, ptr %889, align 8
  %890 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 12
  store ptr %876, ptr %890, align 8
  %891 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 13
  store ptr null, ptr %891, align 8
  %892 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f75.s0.v4.v4, i32 0, i32 %878, ptr nonnull %3)
  %893 = icmp eq i32 %892, 0
  br i1 %893, label %"consume f75", label %call_destructor.exit210.thread374, !prof !5

"consume f75":                                    ; preds = %"produce f75"
  %.not166 = icmp slt i32 %a1, %44
  %a719 = select i1 %.not166, i32 %a1, i32 %b3
  %a718 = call i32 @llvm.smin.i32(i32 %b14, i32 %a719)
  %f9.v4.min_realized = call i32 @llvm.smin.i32(i32 %b720, i32 %a718)
  %b723 = ashr i32 %59, 6
  %f9.v4.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b750, i32 %b723)
  %.not167 = icmp slt i32 %a3, %53
  %a723 = select i1 %.not167, i32 %a3, i32 %b5
  %a722 = call i32 @llvm.smin.i32(i32 %b17, i32 %a723)
  %f9.v3.min_realized = call i32 @llvm.smin.i32(i32 %b724, i32 %a722)
  %b727 = ashr i32 %63, 6
  %f9.v3.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b753, i32 %b727)
  %894 = sub nsw i32 %f9.v4.extent_realized.s.s, %f9.v4.min_realized
  %895 = add nsw i32 %894, 1
  %896 = sub nsw i32 %f9.v3.extent_realized.s.s, %f9.v3.min_realized
  %897 = add nsw i32 %896, 1
  %f9.stride.2 = mul nsw i32 %895, %897
  %898 = zext i32 %895 to i64
  %899 = zext i32 %897 to i64
  %900 = shl nuw nsw i64 %899, 2
  %901 = and i64 %900, 4294967292
  %902 = mul nuw i64 %901, %898
  %903 = lshr i64 %902, 32
  %904 = lshr i64 %899, 30
  %905 = mul nuw nsw i64 %904, %898
  %t3079 = add nuw nsw i64 %903, %905
  %t3080 = mul i64 %900, %898
  %906 = mul i64 %t3080, %408
  %907 = icmp ult i64 %906, 2147483648
  %908 = and i64 %t3080, 4294967292
  %909 = mul nuw i64 %908, %408
  %910 = lshr i64 %909, 32
  %911 = mul i64 %t3079, %408
  %912 = add i64 %911, %910
  %913 = or i64 %912, %t3079
  %914 = icmp ult i64 %913, 4294967296
  %915 = and i1 %907, %914
  br i1 %915, label %"assert succeeded164", label %"assert failed163", !prof !5

"assert failed163":                               ; preds = %"consume f75"
  %916 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.20, i64 %906, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded164":                            ; preds = %"consume f75"
  %917 = add nuw nsw i64 %906, 4
  %918 = call ptr @halide_malloc(ptr null, i64 %917)
  %.not526 = icmp eq ptr %918, null
  br i1 %.not526, label %"assert failed165", label %"produce f9", !prof !4

"assert failed165":                               ; preds = %"assert succeeded164"
  %919 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f9":                                     ; preds = %"assert succeeded164"
  store i32 %a772, ptr %2, align 8
  %920 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 1
  store i32 %f8.stride.2, ptr %920, align 4
  %921 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 2
  store i32 %f8.v3.extent_realized.s, ptr %921, align 8
  %922 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 3
  store i32 %f8.v3.min_realized, ptr %922, align 4
  %923 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 4
  store i32 %f8.v4.min_realized, ptr %923, align 8
  %924 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 5
  store i32 %b753, ptr %924, align 4
  %925 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 6
  store i32 %b724, ptr %925, align 8
  %926 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 7
  store i32 %b750, ptr %926, align 4
  %927 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 8
  store i32 %b720, ptr %927, align 8
  %928 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 9
  store i32 %f9.stride.2, ptr %928, align 4
  %929 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 10
  store i32 %f9.v3.extent_realized.s.s, ptr %929, align 8
  %930 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 11
  store i32 %f9.v3.min_realized, ptr %930, align 4
  %931 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 12
  store i32 %f9.v4.min_realized, ptr %931, align 8
  %932 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 13
  store ptr %836, ptr %932, align 8
  %933 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 14
  store ptr null, ptr %933, align 8
  %934 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 15
  store ptr %918, ptr %934, align 8
  %935 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 16
  store ptr null, ptr %935, align 8
  %936 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f9.s0.v6, i32 %111, i32 %838, ptr nonnull %2)
  %937 = icmp eq i32 %936, 0
  br i1 %937, label %"consume f9", label %call_destructor.exit210.thread374, !prof !5

"consume f9":                                     ; preds = %"produce f9"
  %reass.sub557 = sub i32 %b735, %b733
  %938 = add i32 %reass.sub557, 1
  %939 = zext i32 %938 to i64
  %t3081 = add i32 %b739, 1
  %940 = sub i32 %t3081, %b737
  %941 = zext i32 %940 to i64
  %942 = shl nuw nsw i64 %941, 2
  %943 = mul i64 %942, %939
  %944 = icmp ult i64 %943, 2147483648
  %945 = and i64 %942, 4294967292
  %946 = mul nuw i64 %945, %939
  %947 = lshr i64 %946, 32
  %948 = lshr i64 %941, 30
  %949 = mul nuw nsw i64 %948, %939
  %950 = add nuw nsw i64 %947, %949
  %951 = icmp ult i64 %950, 4294967296
  %952 = and i1 %944, %951
  br i1 %952, label %"assert succeeded170", label %"assert failed169", !prof !5

"assert failed169":                               ; preds = %"consume f9"
  %953 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.21, i64 %943, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded170":                            ; preds = %"consume f9"
  %954 = add nuw nsw i64 %943, 4
  %955 = call ptr @halide_malloc(ptr null, i64 %954)
  %.not527 = icmp eq ptr %955, null
  br i1 %.not527, label %"assert failed171", label %"produce f76", !prof !4

"assert failed171":                               ; preds = %"assert succeeded170"
  %956 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f76":                                    ; preds = %"assert succeeded170"
  %957 = add i32 %b735, 1
  %958 = icmp slt i32 %b733, %957
  br i1 %958, label %"for f76.s0.v4.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.preheader":                        ; preds = %"produce f76"
  %959 = sext i32 %b739 to i64
  %960 = sext i32 %b737 to i64
  %reass.sub567 = sub nsw i64 %959, %960
  %961 = shl nsw i64 %reass.sub567, 2
  %962 = add nsw i64 %961, 4
  %963 = shl i32 %861, 1
  %964 = icmp sgt i32 %t3081, %b737
  br i1 %964, label %"for f76.s0.v4.us.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.us.preheader":                     ; preds = %"for f76.s0.v4.preheader"
  %965 = xor i32 %f75.v4.min_realized, -1
  %966 = add i32 %72, %965
  %967 = mul i32 %861, %966
  %968 = sub i32 %967, %f75.v3.min_realized
  %969 = sub i32 %72, %f75.v4.min_realized
  %970 = mul i32 %861, %969
  %971 = sub i32 %970, %f75.v3.min_realized
  %972 = or i32 %72, 1
  %973 = sub i32 %972, %f75.v4.min_realized
  %974 = mul i32 %861, %973
  %975 = sub i32 %974, %f75.v3.min_realized
  %976 = add i32 %72, 2
  %977 = sub i32 %976, %f75.v4.min_realized
  %978 = mul i32 %861, %977
  %979 = sub i32 %978, %f75.v3.min_realized
  %980 = sub i32 %b739, %b737
  %981 = add i32 %978, %76
  %982 = sub i32 %981, %f75.v3.min_realized
  %983 = shl i32 %861, 1
  %984 = add i32 %974, %76
  %985 = sub i32 %984, %f75.v3.min_realized
  %986 = add i32 %970, %76
  %987 = sub i32 %986, %f75.v3.min_realized
  %988 = add i32 %967, %76
  %989 = sub i32 %988, %f75.v3.min_realized
  %990 = sub i32 %b739, %b737
  %991 = zext i32 %990 to i64
  %992 = add nuw nsw i64 %991, 1
  %min.iters.check860 = icmp ult i32 %990, 3
  %mul.result = shl i32 %980, 1
  %mul.result850 = shl i32 %980, 1
  %mul.overflow851 = icmp slt i32 %980, 0
  %mul.result853 = shl i32 %980, 1
  %mul.result856 = shl i32 %980, 1
  %n.vec863 = and i64 %992, -4
  %.cast864 = trunc i64 %n.vec863 to i32
  %993 = shl i32 %.cast864, 1
  %.cast867 = trunc i64 %n.vec863 to i32
  %994 = shl i32 %.cast867, 1
  %.cast870 = trunc i64 %n.vec863 to i32
  %995 = shl i32 %.cast870, 1
  %.cast873 = trunc i64 %n.vec863 to i32
  %996 = shl i32 %.cast873, 1
  %997 = shl nuw nsw i64 %n.vec863, 2
  %.cast878 = trunc i64 %n.vec863 to i32
  %ind.end879 = sub i32 %940, %.cast878
  %998 = getelementptr float, ptr %876, i64 -1
  %999 = getelementptr float, ptr %876, i64 -1
  %1000 = getelementptr float, ptr %876, i64 -1
  %1001 = getelementptr float, ptr %876, i64 -1
  %1002 = getelementptr float, ptr %876, i64 -1
  %1003 = getelementptr float, ptr %876, i64 -1
  %1004 = getelementptr float, ptr %876, i64 -1
  %1005 = getelementptr float, ptr %876, i64 -1
  %cmp.n881 = icmp eq i64 %992, %n.vec863
  br label %"for f76.s0.v4.us"

"for f76.s0.v4.us":                               ; preds = %"for f76.s0.v4.us.preheader", %"end for f76.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f76.s0.v4.us.preheader" ], [ %indvar.next, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv474.us = phi i32 [ %968, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next475.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv470.us = phi i32 [ %971, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next471.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv466.us = phi i32 [ %975, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next467.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv462.us = phi i32 [ %979, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next463.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv456.us = phi ptr [ %955, %"for f76.s0.v4.us.preheader" ], [ %scevgep458.us, %"end for f76.s0.v3.loopexit.us" ]
  %f76.s0.v4.us = phi i32 [ %b733, %"for f76.s0.v4.us.preheader" ], [ %1152, %"end for f76.s0.v3.loopexit.us" ]
  br i1 %min.iters.check860, label %"for f76.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f76.s0.v4.us"
  %1006 = mul i32 %983, %indvar
  %1007 = add i32 %989, %1006
  %1008 = add i32 %987, %1006
  %1009 = add i32 %985, %1006
  %1010 = add i32 %982, %1006
  %1011 = add i32 %1010, %mul.result
  %1012 = icmp slt i32 %1011, %1010
  %1013 = add i32 %1009, %mul.result850
  %1014 = icmp slt i32 %1013, %1009
  %1015 = or i1 %1014, %mul.overflow851
  %1016 = add i32 %1008, %mul.result853
  %1017 = icmp slt i32 %1016, %1008
  %1018 = add i32 %1007, %mul.result856
  %1019 = icmp slt i32 %1018, %1007
  %1020 = or i1 %1012, %1015
  %1021 = or i1 %1017, %1020
  %1022 = or i1 %1019, %1021
  br i1 %1022, label %"for f76.s0.v3.us.preheader", label %vector.ph861

vector.ph861:                                     ; preds = %vector.scevcheck
  %ind.end865 = add i32 %lsr.iv474.us, %993
  %ind.end868 = add i32 %lsr.iv470.us, %994
  %ind.end871 = add i32 %lsr.iv466.us, %995
  %ind.end874 = add i32 %lsr.iv462.us, %996
  %ind.end876 = getelementptr i8, ptr %lsr.iv456.us, i64 %997
  br label %vector.body882

vector.body882:                                   ; preds = %vector.body882, %vector.ph861
  %index883 = phi i64 [ 0, %vector.ph861 ], [ %index.next914, %vector.body882 ]
  %1023 = shl i64 %index883, 2
  %next.gep = getelementptr i8, ptr %lsr.iv456.us, i64 %1023
  %.cast884 = trunc i64 %index883 to i32
  %1024 = shl i32 %.cast884, 1
  %offset.idx885 = add i32 %lsr.iv462.us, %1024
  %.cast886 = trunc i64 %index883 to i32
  %1025 = shl i32 %.cast886, 1
  %offset.idx887 = add i32 %lsr.iv466.us, %1025
  %.cast888 = trunc i64 %index883 to i32
  %1026 = shl i32 %.cast888, 1
  %offset.idx889 = add i32 %lsr.iv470.us, %1026
  %.cast890 = trunc i64 %index883 to i32
  %1027 = shl i32 %.cast890, 1
  %offset.idx891 = add i32 %lsr.iv474.us, %1027
  %1028 = add i32 %offset.idx891, %76
  %1029 = add i32 %offset.idx889, %76
  %1030 = add i32 %offset.idx887, %76
  %1031 = add i32 %offset.idx885, %76
  %1032 = sext i32 %1031 to i64
  %1033 = add nsw i64 %1032, 2
  %1034 = getelementptr float, ptr %998, i64 %1033
  %wide.vec = load <8 x float>, ptr %1034, align 4, !tbaa !13
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec892 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1035 = getelementptr float, ptr %999, i64 %1032
  %wide.vec893 = load <8 x float>, ptr %1035, align 4, !tbaa !13
  %strided.vec894 = shufflevector <8 x float> %wide.vec893, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec895 = shufflevector <8 x float> %wide.vec893, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1036 = fadd <4 x float> %strided.vec, %strided.vec895
  %1037 = fmul <4 x float> %1036, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1038 = fadd <4 x float> %strided.vec894, %1037
  %1039 = fadd <4 x float> %strided.vec892, %1038
  %1040 = fmul <4 x float> %1039, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1041 = sext i32 %1030 to i64
  %1042 = add nsw i64 %1041, 2
  %1043 = getelementptr float, ptr %1000, i64 %1042
  %wide.vec896 = load <8 x float>, ptr %1043, align 4, !tbaa !13
  %strided.vec897 = shufflevector <8 x float> %wide.vec896, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec898 = shufflevector <8 x float> %wide.vec896, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1044 = getelementptr float, ptr %1001, i64 %1041
  %wide.vec899 = load <8 x float>, ptr %1044, align 4, !tbaa !13
  %strided.vec900 = shufflevector <8 x float> %wide.vec899, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec901 = shufflevector <8 x float> %wide.vec899, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1045 = fadd <4 x float> %strided.vec897, %strided.vec901
  %1046 = fmul <4 x float> %1045, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1047 = fadd <4 x float> %strided.vec900, %1046
  %1048 = fadd <4 x float> %strided.vec898, %1047
  %1049 = sext i32 %1029 to i64
  %1050 = add nsw i64 %1049, 2
  %1051 = getelementptr float, ptr %1002, i64 %1050
  %wide.vec902 = load <8 x float>, ptr %1051, align 4, !tbaa !13
  %strided.vec903 = shufflevector <8 x float> %wide.vec902, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec904 = shufflevector <8 x float> %wide.vec902, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1052 = getelementptr float, ptr %1003, i64 %1049
  %wide.vec905 = load <8 x float>, ptr %1052, align 4, !tbaa !13
  %strided.vec906 = shufflevector <8 x float> %wide.vec905, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec907 = shufflevector <8 x float> %wide.vec905, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1053 = fadd <4 x float> %strided.vec903, %strided.vec907
  %1054 = fmul <4 x float> %1053, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1055 = fadd <4 x float> %strided.vec906, %1054
  %1056 = fadd <4 x float> %strided.vec904, %1055
  %1057 = fadd <4 x float> %1048, %1056
  %1058 = fmul <4 x float> %1057, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1059 = sext i32 %1028 to i64
  %1060 = add nsw i64 %1059, 2
  %1061 = getelementptr float, ptr %1004, i64 %1060
  %wide.vec908 = load <8 x float>, ptr %1061, align 4, !tbaa !13
  %strided.vec909 = shufflevector <8 x float> %wide.vec908, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec910 = shufflevector <8 x float> %wide.vec908, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1062 = getelementptr float, ptr %1005, i64 %1059
  %wide.vec911 = load <8 x float>, ptr %1062, align 4, !tbaa !13
  %strided.vec912 = shufflevector <8 x float> %wide.vec911, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec913 = shufflevector <8 x float> %wide.vec911, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1063 = fadd <4 x float> %strided.vec909, %strided.vec913
  %1064 = fmul <4 x float> %1063, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1065 = fadd <4 x float> %strided.vec912, %1064
  %1066 = fadd <4 x float> %strided.vec910, %1065
  %1067 = fmul <4 x float> %1066, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1068 = fadd <4 x float> %1058, %1067
  %1069 = fadd <4 x float> %1040, %1068
  %1070 = fmul <4 x float> %1069, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1070, ptr %next.gep, align 4, !tbaa !15
  %index.next914 = add nuw i64 %index883, 4
  %1071 = icmp eq i64 %index.next914, %n.vec863
  br i1 %1071, label %middle.block858, label %vector.body882, !llvm.loop !17

middle.block858:                                  ; preds = %vector.body882
  br i1 %cmp.n881, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us.preheader"

"for f76.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f76.s0.v4.us", %middle.block858
  %lsr.iv476.us.ph = phi i32 [ %lsr.iv474.us, %vector.scevcheck ], [ %lsr.iv474.us, %"for f76.s0.v4.us" ], [ %ind.end865, %middle.block858 ]
  %lsr.iv472.us.ph = phi i32 [ %lsr.iv470.us, %vector.scevcheck ], [ %lsr.iv470.us, %"for f76.s0.v4.us" ], [ %ind.end868, %middle.block858 ]
  %lsr.iv468.us.ph = phi i32 [ %lsr.iv466.us, %vector.scevcheck ], [ %lsr.iv466.us, %"for f76.s0.v4.us" ], [ %ind.end871, %middle.block858 ]
  %lsr.iv464.us.ph = phi i32 [ %lsr.iv462.us, %vector.scevcheck ], [ %lsr.iv462.us, %"for f76.s0.v4.us" ], [ %ind.end874, %middle.block858 ]
  %lsr.iv459.us.ph = phi ptr [ %lsr.iv456.us, %vector.scevcheck ], [ %lsr.iv456.us, %"for f76.s0.v4.us" ], [ %ind.end876, %middle.block858 ]
  %lsr.iv453.us.ph = phi i32 [ %940, %vector.scevcheck ], [ %940, %"for f76.s0.v4.us" ], [ %ind.end879, %middle.block858 ]
  br label %"for f76.s0.v3.us"

"for f76.s0.v3.us":                               ; preds = %"for f76.s0.v3.us.preheader", %"for f76.s0.v3.us"
  %lsr.iv476.us = phi i32 [ %lsr.iv.next477.us, %"for f76.s0.v3.us" ], [ %lsr.iv476.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv472.us = phi i32 [ %lsr.iv.next473.us, %"for f76.s0.v3.us" ], [ %lsr.iv472.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv468.us = phi i32 [ %lsr.iv.next469.us, %"for f76.s0.v3.us" ], [ %lsr.iv468.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv464.us = phi i32 [ %lsr.iv.next465.us, %"for f76.s0.v3.us" ], [ %lsr.iv464.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv459.us = phi ptr [ %scevgep460.us, %"for f76.s0.v3.us" ], [ %lsr.iv459.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv453.us = phi i32 [ %lsr.iv.next454.us, %"for f76.s0.v3.us" ], [ %lsr.iv453.us.ph, %"for f76.s0.v3.us.preheader" ]
  %1072 = add i32 %lsr.iv476.us, %76
  %1073 = add i32 %lsr.iv472.us, %76
  %1074 = add i32 %lsr.iv468.us, %76
  %1075 = add i32 %lsr.iv464.us, %76
  %1076 = sext i32 %1075 to i64
  %1077 = add nsw i64 %1076, 2
  %1078 = getelementptr inbounds float, ptr %876, i64 %1077
  %1079 = load float, ptr %1078, align 4, !tbaa !13
  %1080 = add nsw i64 %1076, 1
  %1081 = getelementptr inbounds float, ptr %876, i64 %1080
  %1082 = load float, ptr %1081, align 4, !tbaa !13
  %1083 = getelementptr inbounds float, ptr %876, i64 %1076
  %1084 = load float, ptr %1083, align 4, !tbaa !13
  %1085 = fadd float %1082, %1084
  %1086 = fmul float %1085, 3.000000e+00
  %1087 = add nsw i64 %1076, -1
  %1088 = getelementptr inbounds float, ptr %876, i64 %1087
  %1089 = sext i32 %1074 to i64
  %1090 = add nsw i64 %1089, 2
  %1091 = getelementptr inbounds float, ptr %876, i64 %1090
  %1092 = add nsw i64 %1089, 1
  %1093 = getelementptr inbounds float, ptr %876, i64 %1092
  %1094 = load float, ptr %1093, align 4, !tbaa !13
  %1095 = getelementptr inbounds float, ptr %876, i64 %1089
  %1096 = load float, ptr %1095, align 4, !tbaa !13
  %1097 = fadd float %1094, %1096
  %1098 = fmul float %1097, 3.000000e+00
  %1099 = add nsw i64 %1089, -1
  %1100 = getelementptr inbounds float, ptr %876, i64 %1099
  %1101 = load float, ptr %1100, align 4, !tbaa !13
  %1102 = fadd float %1101, %1098
  %1103 = sext i32 %1073 to i64
  %1104 = add nsw i64 %1103, 2
  %1105 = getelementptr inbounds float, ptr %876, i64 %1104
  %1106 = load float, ptr %1105, align 4, !tbaa !13
  %1107 = add nsw i64 %1103, 1
  %1108 = getelementptr inbounds float, ptr %876, i64 %1107
  %1109 = load float, ptr %1108, align 4, !tbaa !13
  %1110 = getelementptr inbounds float, ptr %876, i64 %1103
  %1111 = load float, ptr %1110, align 4, !tbaa !13
  %1112 = fadd float %1109, %1111
  %1113 = fmul float %1112, 3.000000e+00
  %1114 = add nsw i64 %1103, -1
  %1115 = getelementptr inbounds float, ptr %876, i64 %1114
  %1116 = load float, ptr %1115, align 4, !tbaa !13
  %1117 = fadd float %1116, %1113
  %1118 = fadd float %1106, %1117
  %1119 = load float, ptr %1088, align 4, !tbaa !13
  %1120 = load float, ptr %1091, align 4, !tbaa !13
  %1121 = insertelement <2 x float> poison, float %1119, i64 0
  %1122 = insertelement <2 x float> %1121, float %1120, i64 1
  %1123 = insertelement <2 x float> poison, float %1086, i64 0
  %1124 = insertelement <2 x float> %1123, float %1102, i64 1
  %1125 = fadd <2 x float> %1122, %1124
  %1126 = insertelement <2 x float> poison, float %1079, i64 0
  %1127 = insertelement <2 x float> %1126, float %1118, i64 1
  %1128 = fadd <2 x float> %1127, %1125
  %1129 = fmul <2 x float> %1128, <float 1.250000e-01, float 3.750000e-01>
  %1130 = sext i32 %1072 to i64
  %1131 = add nsw i64 %1130, 2
  %1132 = getelementptr inbounds float, ptr %876, i64 %1131
  %1133 = load float, ptr %1132, align 4, !tbaa !13
  %1134 = add nsw i64 %1130, 1
  %1135 = getelementptr inbounds float, ptr %876, i64 %1134
  %1136 = load float, ptr %1135, align 4, !tbaa !13
  %1137 = getelementptr inbounds float, ptr %876, i64 %1130
  %1138 = load float, ptr %1137, align 4, !tbaa !13
  %1139 = fadd float %1136, %1138
  %1140 = fmul float %1139, 3.000000e+00
  %1141 = add nsw i64 %1130, -1
  %1142 = getelementptr inbounds float, ptr %876, i64 %1141
  %1143 = load float, ptr %1142, align 4, !tbaa !13
  %1144 = fadd float %1143, %1140
  %1145 = fadd float %1133, %1144
  %1146 = fmul float %1145, 1.250000e-01
  %1147 = extractelement <2 x float> %1129, i64 1
  %1148 = fadd float %1147, %1146
  %1149 = extractelement <2 x float> %1129, i64 0
  %1150 = fadd float %1149, %1148
  %1151 = fmul float %1150, 1.250000e-01
  store float %1151, ptr %lsr.iv459.us, align 4, !tbaa !15
  %lsr.iv.next454.us = add i32 %lsr.iv453.us, -1
  %scevgep460.us = getelementptr i8, ptr %lsr.iv459.us, i64 4
  %lsr.iv.next465.us = add i32 %lsr.iv464.us, 2
  %lsr.iv.next469.us = add i32 %lsr.iv468.us, 2
  %lsr.iv.next473.us = add i32 %lsr.iv472.us, 2
  %lsr.iv.next477.us = add i32 %lsr.iv476.us, 2
  %.not131.us = icmp eq i32 %lsr.iv.next454.us, 0
  br i1 %.not131.us, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us", !llvm.loop !18

"end for f76.s0.v3.loopexit.us":                  ; preds = %"for f76.s0.v3.us", %middle.block858
  %1152 = add nsw i32 %f76.s0.v4.us, 1
  %scevgep458.us = getelementptr i1, ptr %lsr.iv456.us, i64 %962
  %lsr.iv.next463.us = add i32 %lsr.iv462.us, %963
  %lsr.iv.next467.us = add i32 %lsr.iv466.us, %963
  %lsr.iv.next471.us = add i32 %lsr.iv470.us, %963
  %lsr.iv.next475.us = add i32 %lsr.iv474.us, %963
  %.not130.us = icmp eq i32 %f76.s0.v4.us, %b735
  %indvar.next = add i32 %indvar, 1
  br i1 %.not130.us, label %"consume f76", label %"for f76.s0.v4.us"

"consume f76":                                    ; preds = %"end for f76.s0.v3.loopexit.us", %"for f76.s0.v4.preheader", %"produce f76"
  %f10.v4.extent_realized.s = sub nsw i32 %39, %43
  %f10.v3.extent_realized.s = sub nsw i32 %48, %52
  %1153 = add nsw i32 %f10.v4.extent_realized.s, 1
  %1154 = add nsw i32 %f10.v3.extent_realized.s, 1
  %f10.stride.2 = mul nsw i32 %1153, %1154
  %1155 = zext i32 %1153 to i64
  %1156 = zext i32 %1154 to i64
  %1157 = shl nuw nsw i64 %1156, 2
  %1158 = and i64 %1157, 4294967292
  %1159 = mul nuw i64 %1158, %1155
  %1160 = lshr i64 %1159, 32
  %1161 = lshr i64 %1156, 30
  %1162 = mul nuw nsw i64 %1161, %1155
  %t3083 = add nuw nsw i64 %1160, %1162
  %t3084 = mul i64 %1157, %1155
  %1163 = zext i32 %838 to i64
  %1164 = mul i64 %t3084, %1163
  %1165 = icmp ult i64 %1164, 2147483648
  %1166 = and i64 %t3084, 4294967292
  %1167 = mul nuw i64 %1166, %1163
  %1168 = lshr i64 %1167, 32
  %1169 = mul i64 %t3083, %1163
  %1170 = add i64 %1169, %1168
  %1171 = or i64 %1170, %t3083
  %1172 = icmp ult i64 %1171, 4294967296
  %1173 = and i1 %1165, %1172
  br i1 %1173, label %"assert succeeded174", label %"assert failed173", !prof !5

"assert failed173":                               ; preds = %"consume f76"
  %1174 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.22, i64 %1164, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded174":                            ; preds = %"consume f76"
  %1175 = add nuw nsw i64 %1164, 4
  %1176 = call ptr @halide_malloc(ptr null, i64 %1175)
  %.not528 = icmp eq ptr %1176, null
  br i1 %.not528, label %"assert failed175", label %"produce f10", !prof !4

"assert failed175":                               ; preds = %"assert succeeded174"
  %1177 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f10":                                    ; preds = %"assert succeeded174"
  store i32 %a772, ptr %1, align 8
  %1178 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 1
  store i32 %f10.stride.2, ptr %1178, align 4
  %1179 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 2
  store i32 %f10.v3.extent_realized.s, ptr %1179, align 8
  %1180 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 3
  store i32 %f10.v4.extent_realized.s, ptr %1180, align 4
  %1181 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 4
  store i32 %f9.stride.2, ptr %1181, align 8
  %1182 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 5
  store i32 %f9.v3.extent_realized.s.s, ptr %1182, align 4
  %1183 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 6
  store i32 %f9.v3.min_realized, ptr %1183, align 8
  %1184 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 7
  store i32 %f9.v4.min_realized, ptr %1184, align 4
  %1185 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 8
  store i32 %a286, ptr %1185, align 8
  %1186 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 9
  store i32 %a114, ptr %1186, align 4
  %1187 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 10
  store ptr %1176, ptr %1187, align 8
  %1188 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 11
  store ptr null, ptr %1188, align 8
  %1189 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 12
  store ptr %918, ptr %1189, align 8
  %1190 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 13
  store ptr null, ptr %1190, align 8
  %1191 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f10.s0.v6, i32 %111, i32 %838, ptr nonnull %1)
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %"consume f10", label %call_destructor.exit210.thread374, !prof !5

"consume f10":                                    ; preds = %"produce f10"
  %reass.sub558 = sub i32 %b750, %b748
  %1193 = add i32 %reass.sub558, 1
  %1194 = zext i32 %1193 to i64
  %t3085 = add i32 %b753, 1
  %1195 = sub i32 %t3085, %b751
  %1196 = zext i32 %1195 to i64
  %1197 = shl nuw nsw i64 %1196, 2
  %1198 = mul i64 %1197, %1194
  %1199 = icmp ult i64 %1198, 2147483648
  %1200 = and i64 %1197, 4294967292
  %1201 = mul nuw i64 %1200, %1194
  %1202 = lshr i64 %1201, 32
  %1203 = lshr i64 %1196, 30
  %1204 = mul nuw nsw i64 %1203, %1194
  %1205 = add nuw nsw i64 %1202, %1204
  %1206 = icmp ult i64 %1205, 4294967296
  %1207 = and i1 %1199, %1206
  br i1 %1207, label %"assert succeeded180", label %"assert failed179", !prof !5

"assert failed179":                               ; preds = %"consume f10"
  %1208 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.23, i64 %1198, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded180":                            ; preds = %"consume f10"
  %1209 = add nuw nsw i64 %1198, 4
  %1210 = call ptr @halide_malloc(ptr null, i64 %1209)
  %.not529 = icmp eq ptr %1210, null
  br i1 %.not529, label %"assert failed181", label %"produce f77", !prof !4

"assert failed181":                               ; preds = %"assert succeeded180"
  %1211 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f77":                                    ; preds = %"assert succeeded180"
  %.not108 = icmp slt i32 %b750, %b748
  br i1 %.not108, label %"consume f77", label %"for f77.s0.v4.preheader", !prof !4

"for f77.s0.v4.preheader":                        ; preds = %"produce f77"
  %1212 = sext i32 %b753 to i64
  %1213 = sext i32 %b751 to i64
  %reass.sub559 = sub nsw i64 %1212, %1213
  %1214 = shl nsw i64 %reass.sub559, 2
  %1215 = add nsw i64 %1214, 4
  %1216 = shl i32 %940, 1
  %.not127 = icmp slt i32 %b753, %b751
  br i1 %.not127, label %"consume f77", label %"for f77.s0.v4.preheader578", !prof !4

"for f77.s0.v4.preheader578":                     ; preds = %"for f77.s0.v4.preheader"
  %1217 = xor i32 %b733, -1
  %1218 = add i32 %62, %1217
  %1219 = mul i32 %940, %1218
  %1220 = sub i32 %1219, %b737
  %1221 = sub i32 %62, %b733
  %1222 = mul i32 %940, %1221
  %1223 = sub i32 %1222, %b737
  %1224 = or i32 %62, 1
  %1225 = sub i32 %1224, %b733
  %1226 = mul i32 %940, %1225
  %1227 = sub i32 %1226, %b737
  %1228 = add nsw i32 %62, 2
  %1229 = sub i32 %1228, %b733
  %1230 = mul i32 %940, %1229
  %1231 = sub i32 %1230, %b737
  %1232 = sub i32 %b753, %b751
  %1233 = add i32 %1230, %66
  %1234 = sub i32 %1233, %b737
  %1235 = shl i32 %940, 1
  %1236 = add i32 %1226, %66
  %1237 = sub i32 %1236, %b737
  %1238 = add i32 %1222, %66
  %1239 = sub i32 %1238, %b737
  %1240 = add i32 %1219, %66
  %1241 = sub i32 %1240, %b737
  %1242 = sub i32 %b753, %b751
  %1243 = zext i32 %1242 to i64
  %1244 = add nuw nsw i64 %1243, 1
  %min.iters.check932 = icmp ult i32 %1242, 3
  %mul.result919 = shl i32 %1232, 1
  %mul.result922 = shl i32 %1232, 1
  %mul.overflow923 = icmp slt i32 %1232, 0
  %mul.result925 = shl i32 %1232, 1
  %mul.result928 = shl i32 %1232, 1
  %n.vec935 = and i64 %1244, -4
  %.cast936 = trunc i64 %n.vec935 to i32
  %1245 = shl i32 %.cast936, 1
  %.cast939 = trunc i64 %n.vec935 to i32
  %1246 = shl i32 %.cast939, 1
  %.cast942 = trunc i64 %n.vec935 to i32
  %1247 = shl i32 %.cast942, 1
  %.cast945 = trunc i64 %n.vec935 to i32
  %1248 = shl i32 %.cast945, 1
  %1249 = shl nuw nsw i64 %n.vec935, 2
  %.cast950 = trunc i64 %n.vec935 to i32
  %ind.end951 = sub i32 %1195, %.cast950
  %1250 = getelementptr float, ptr %955, i64 -1
  %1251 = getelementptr float, ptr %955, i64 -1
  %1252 = getelementptr float, ptr %955, i64 -1
  %1253 = getelementptr float, ptr %955, i64 -1
  %1254 = getelementptr float, ptr %955, i64 -1
  %1255 = getelementptr float, ptr %955, i64 -1
  %1256 = getelementptr float, ptr %955, i64 -1
  %1257 = getelementptr float, ptr %955, i64 -1
  %cmp.n953 = icmp eq i64 %1244, %n.vec935
  br label %"for f77.s0.v4"

"for f77.s0.v4":                                  ; preds = %"for f77.s0.v4.preheader578", %"end for f77.s0.v3.loopexit"
  %indvar916 = phi i32 [ 0, %"for f77.s0.v4.preheader578" ], [ %indvar.next917, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv449 = phi i32 [ %1220, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next450, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv445 = phi i32 [ %1223, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next446, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv441 = phi i32 [ %1227, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next442, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv437 = phi i32 [ %1231, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next438, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv431 = phi ptr [ %1210, %"for f77.s0.v4.preheader578" ], [ %scevgep433, %"end for f77.s0.v3.loopexit" ]
  %f77.s0.v4 = phi i32 [ %b748, %"for f77.s0.v4.preheader578" ], [ %1404, %"end for f77.s0.v3.loopexit" ]
  br i1 %min.iters.check932, label %"for f77.s0.v3.preheader", label %vector.scevcheck915

vector.scevcheck915:                              ; preds = %"for f77.s0.v4"
  %1258 = mul i32 %1235, %indvar916
  %1259 = add i32 %1241, %1258
  %1260 = add i32 %1239, %1258
  %1261 = add i32 %1237, %1258
  %1262 = add i32 %1234, %1258
  %1263 = add i32 %1262, %mul.result919
  %1264 = icmp slt i32 %1263, %1262
  %1265 = add i32 %1261, %mul.result922
  %1266 = icmp slt i32 %1265, %1261
  %1267 = or i1 %1266, %mul.overflow923
  %1268 = add i32 %1260, %mul.result925
  %1269 = icmp slt i32 %1268, %1260
  %1270 = add i32 %1259, %mul.result928
  %1271 = icmp slt i32 %1270, %1259
  %1272 = or i1 %1264, %1267
  %1273 = or i1 %1269, %1272
  %1274 = or i1 %1271, %1273
  br i1 %1274, label %"for f77.s0.v3.preheader", label %vector.ph933

vector.ph933:                                     ; preds = %vector.scevcheck915
  %ind.end937 = add i32 %lsr.iv449, %1245
  %ind.end940 = add i32 %lsr.iv445, %1246
  %ind.end943 = add i32 %lsr.iv441, %1247
  %ind.end946 = add i32 %lsr.iv437, %1248
  %ind.end948 = getelementptr i8, ptr %lsr.iv431, i64 %1249
  br label %vector.body954

vector.body954:                                   ; preds = %vector.body954, %vector.ph933
  %index955 = phi i64 [ 0, %vector.ph933 ], [ %index.next989, %vector.body954 ]
  %1275 = shl i64 %index955, 2
  %next.gep956 = getelementptr i8, ptr %lsr.iv431, i64 %1275
  %.cast957 = trunc i64 %index955 to i32
  %1276 = shl i32 %.cast957, 1
  %offset.idx958 = add i32 %lsr.iv437, %1276
  %.cast959 = trunc i64 %index955 to i32
  %1277 = shl i32 %.cast959, 1
  %offset.idx960 = add i32 %lsr.iv441, %1277
  %.cast961 = trunc i64 %index955 to i32
  %1278 = shl i32 %.cast961, 1
  %offset.idx962 = add i32 %lsr.iv445, %1278
  %.cast963 = trunc i64 %index955 to i32
  %1279 = shl i32 %.cast963, 1
  %offset.idx964 = add i32 %lsr.iv449, %1279
  %1280 = add i32 %offset.idx964, %66
  %1281 = add i32 %offset.idx962, %66
  %1282 = add i32 %offset.idx960, %66
  %1283 = add i32 %offset.idx958, %66
  %1284 = sext i32 %1283 to i64
  %1285 = add nsw i64 %1284, 2
  %1286 = getelementptr float, ptr %1250, i64 %1285
  %wide.vec965 = load <8 x float>, ptr %1286, align 4, !tbaa !15
  %strided.vec966 = shufflevector <8 x float> %wide.vec965, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec967 = shufflevector <8 x float> %wide.vec965, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1287 = getelementptr float, ptr %1251, i64 %1284
  %wide.vec968 = load <8 x float>, ptr %1287, align 4, !tbaa !15
  %strided.vec969 = shufflevector <8 x float> %wide.vec968, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec970 = shufflevector <8 x float> %wide.vec968, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1288 = fadd <4 x float> %strided.vec966, %strided.vec970
  %1289 = fmul <4 x float> %1288, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1290 = fadd <4 x float> %strided.vec969, %1289
  %1291 = fadd <4 x float> %strided.vec967, %1290
  %1292 = fmul <4 x float> %1291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1293 = sext i32 %1282 to i64
  %1294 = add nsw i64 %1293, 2
  %1295 = getelementptr float, ptr %1252, i64 %1294
  %wide.vec971 = load <8 x float>, ptr %1295, align 4, !tbaa !15
  %strided.vec972 = shufflevector <8 x float> %wide.vec971, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec973 = shufflevector <8 x float> %wide.vec971, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1296 = getelementptr float, ptr %1253, i64 %1293
  %wide.vec974 = load <8 x float>, ptr %1296, align 4, !tbaa !15
  %strided.vec975 = shufflevector <8 x float> %wide.vec974, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec976 = shufflevector <8 x float> %wide.vec974, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1297 = fadd <4 x float> %strided.vec972, %strided.vec976
  %1298 = fmul <4 x float> %1297, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1299 = fadd <4 x float> %strided.vec975, %1298
  %1300 = fadd <4 x float> %strided.vec973, %1299
  %1301 = sext i32 %1281 to i64
  %1302 = add nsw i64 %1301, 2
  %1303 = getelementptr float, ptr %1254, i64 %1302
  %wide.vec977 = load <8 x float>, ptr %1303, align 4, !tbaa !15
  %strided.vec978 = shufflevector <8 x float> %wide.vec977, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec979 = shufflevector <8 x float> %wide.vec977, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1304 = getelementptr float, ptr %1255, i64 %1301
  %wide.vec980 = load <8 x float>, ptr %1304, align 4, !tbaa !15
  %strided.vec981 = shufflevector <8 x float> %wide.vec980, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec982 = shufflevector <8 x float> %wide.vec980, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1305 = fadd <4 x float> %strided.vec978, %strided.vec982
  %1306 = fmul <4 x float> %1305, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1307 = fadd <4 x float> %strided.vec981, %1306
  %1308 = fadd <4 x float> %strided.vec979, %1307
  %1309 = fadd <4 x float> %1300, %1308
  %1310 = fmul <4 x float> %1309, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1311 = sext i32 %1280 to i64
  %1312 = add nsw i64 %1311, 2
  %1313 = getelementptr float, ptr %1256, i64 %1312
  %wide.vec983 = load <8 x float>, ptr %1313, align 4, !tbaa !15
  %strided.vec984 = shufflevector <8 x float> %wide.vec983, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec985 = shufflevector <8 x float> %wide.vec983, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1314 = getelementptr float, ptr %1257, i64 %1311
  %wide.vec986 = load <8 x float>, ptr %1314, align 4, !tbaa !15
  %strided.vec987 = shufflevector <8 x float> %wide.vec986, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec988 = shufflevector <8 x float> %wide.vec986, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1315 = fadd <4 x float> %strided.vec984, %strided.vec988
  %1316 = fmul <4 x float> %1315, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1317 = fadd <4 x float> %strided.vec987, %1316
  %1318 = fadd <4 x float> %strided.vec985, %1317
  %1319 = fmul <4 x float> %1318, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1320 = fadd <4 x float> %1310, %1319
  %1321 = fadd <4 x float> %1292, %1320
  %1322 = fmul <4 x float> %1321, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1322, ptr %next.gep956, align 4, !tbaa !19
  %index.next989 = add nuw i64 %index955, 4
  %1323 = icmp eq i64 %index.next989, %n.vec935
  br i1 %1323, label %middle.block930, label %vector.body954, !llvm.loop !21

middle.block930:                                  ; preds = %vector.body954
  br i1 %cmp.n953, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3.preheader"

"for f77.s0.v3.preheader":                        ; preds = %vector.scevcheck915, %"for f77.s0.v4", %middle.block930
  %lsr.iv451.ph = phi i32 [ %lsr.iv449, %vector.scevcheck915 ], [ %lsr.iv449, %"for f77.s0.v4" ], [ %ind.end937, %middle.block930 ]
  %lsr.iv447.ph = phi i32 [ %lsr.iv445, %vector.scevcheck915 ], [ %lsr.iv445, %"for f77.s0.v4" ], [ %ind.end940, %middle.block930 ]
  %lsr.iv443.ph = phi i32 [ %lsr.iv441, %vector.scevcheck915 ], [ %lsr.iv441, %"for f77.s0.v4" ], [ %ind.end943, %middle.block930 ]
  %lsr.iv439.ph = phi i32 [ %lsr.iv437, %vector.scevcheck915 ], [ %lsr.iv437, %"for f77.s0.v4" ], [ %ind.end946, %middle.block930 ]
  %lsr.iv434.ph = phi ptr [ %lsr.iv431, %vector.scevcheck915 ], [ %lsr.iv431, %"for f77.s0.v4" ], [ %ind.end948, %middle.block930 ]
  %lsr.iv428.ph = phi i32 [ %1195, %vector.scevcheck915 ], [ %1195, %"for f77.s0.v4" ], [ %ind.end951, %middle.block930 ]
  br label %"for f77.s0.v3"

"for f77.s0.v3":                                  ; preds = %"for f77.s0.v3.preheader", %"for f77.s0.v3"
  %lsr.iv451 = phi i32 [ %lsr.iv.next452, %"for f77.s0.v3" ], [ %lsr.iv451.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv447 = phi i32 [ %lsr.iv.next448, %"for f77.s0.v3" ], [ %lsr.iv447.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv443 = phi i32 [ %lsr.iv.next444, %"for f77.s0.v3" ], [ %lsr.iv443.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv439 = phi i32 [ %lsr.iv.next440, %"for f77.s0.v3" ], [ %lsr.iv439.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv434 = phi ptr [ %scevgep435, %"for f77.s0.v3" ], [ %lsr.iv434.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv428 = phi i32 [ %lsr.iv.next429, %"for f77.s0.v3" ], [ %lsr.iv428.ph, %"for f77.s0.v3.preheader" ]
  %1324 = add i32 %lsr.iv451, %66
  %1325 = add i32 %lsr.iv447, %66
  %1326 = add i32 %lsr.iv443, %66
  %1327 = add i32 %lsr.iv439, %66
  %1328 = sext i32 %1327 to i64
  %1329 = add nsw i64 %1328, 2
  %1330 = getelementptr inbounds float, ptr %955, i64 %1329
  %1331 = load float, ptr %1330, align 4, !tbaa !15
  %1332 = add nsw i64 %1328, 1
  %1333 = getelementptr inbounds float, ptr %955, i64 %1332
  %1334 = load float, ptr %1333, align 4, !tbaa !15
  %1335 = getelementptr inbounds float, ptr %955, i64 %1328
  %1336 = load float, ptr %1335, align 4, !tbaa !15
  %1337 = fadd float %1334, %1336
  %1338 = fmul float %1337, 3.000000e+00
  %1339 = add nsw i64 %1328, -1
  %1340 = getelementptr inbounds float, ptr %955, i64 %1339
  %1341 = sext i32 %1326 to i64
  %1342 = add nsw i64 %1341, 2
  %1343 = getelementptr inbounds float, ptr %955, i64 %1342
  %1344 = add nsw i64 %1341, 1
  %1345 = getelementptr inbounds float, ptr %955, i64 %1344
  %1346 = load float, ptr %1345, align 4, !tbaa !15
  %1347 = getelementptr inbounds float, ptr %955, i64 %1341
  %1348 = load float, ptr %1347, align 4, !tbaa !15
  %1349 = fadd float %1346, %1348
  %1350 = fmul float %1349, 3.000000e+00
  %1351 = add nsw i64 %1341, -1
  %1352 = getelementptr inbounds float, ptr %955, i64 %1351
  %1353 = load float, ptr %1352, align 4, !tbaa !15
  %1354 = fadd float %1353, %1350
  %1355 = sext i32 %1325 to i64
  %1356 = add nsw i64 %1355, 2
  %1357 = getelementptr inbounds float, ptr %955, i64 %1356
  %1358 = load float, ptr %1357, align 4, !tbaa !15
  %1359 = add nsw i64 %1355, 1
  %1360 = getelementptr inbounds float, ptr %955, i64 %1359
  %1361 = load float, ptr %1360, align 4, !tbaa !15
  %1362 = getelementptr inbounds float, ptr %955, i64 %1355
  %1363 = load float, ptr %1362, align 4, !tbaa !15
  %1364 = fadd float %1361, %1363
  %1365 = fmul float %1364, 3.000000e+00
  %1366 = add nsw i64 %1355, -1
  %1367 = getelementptr inbounds float, ptr %955, i64 %1366
  %1368 = load float, ptr %1367, align 4, !tbaa !15
  %1369 = fadd float %1368, %1365
  %1370 = fadd float %1358, %1369
  %1371 = load float, ptr %1340, align 4, !tbaa !15
  %1372 = load float, ptr %1343, align 4, !tbaa !15
  %1373 = insertelement <2 x float> poison, float %1371, i64 0
  %1374 = insertelement <2 x float> %1373, float %1372, i64 1
  %1375 = insertelement <2 x float> poison, float %1338, i64 0
  %1376 = insertelement <2 x float> %1375, float %1354, i64 1
  %1377 = fadd <2 x float> %1374, %1376
  %1378 = insertelement <2 x float> poison, float %1331, i64 0
  %1379 = insertelement <2 x float> %1378, float %1370, i64 1
  %1380 = fadd <2 x float> %1379, %1377
  %1381 = fmul <2 x float> %1380, <float 1.250000e-01, float 3.750000e-01>
  %1382 = sext i32 %1324 to i64
  %1383 = add nsw i64 %1382, 2
  %1384 = getelementptr inbounds float, ptr %955, i64 %1383
  %1385 = load float, ptr %1384, align 4, !tbaa !15
  %1386 = add nsw i64 %1382, 1
  %1387 = getelementptr inbounds float, ptr %955, i64 %1386
  %1388 = load float, ptr %1387, align 4, !tbaa !15
  %1389 = getelementptr inbounds float, ptr %955, i64 %1382
  %1390 = load float, ptr %1389, align 4, !tbaa !15
  %1391 = fadd float %1388, %1390
  %1392 = fmul float %1391, 3.000000e+00
  %1393 = add nsw i64 %1382, -1
  %1394 = getelementptr inbounds float, ptr %955, i64 %1393
  %1395 = load float, ptr %1394, align 4, !tbaa !15
  %1396 = fadd float %1395, %1392
  %1397 = fadd float %1385, %1396
  %1398 = fmul float %1397, 1.250000e-01
  %1399 = extractelement <2 x float> %1381, i64 1
  %1400 = fadd float %1399, %1398
  %1401 = extractelement <2 x float> %1381, i64 0
  %1402 = fadd float %1401, %1400
  %1403 = fmul float %1402, 1.250000e-01
  store float %1403, ptr %lsr.iv434, align 4, !tbaa !19
  %lsr.iv.next429 = add i32 %lsr.iv428, -1
  %scevgep435 = getelementptr i8, ptr %lsr.iv434, i64 4
  %lsr.iv.next440 = add i32 %lsr.iv439, 2
  %lsr.iv.next444 = add i32 %lsr.iv443, 2
  %lsr.iv.next448 = add i32 %lsr.iv447, 2
  %lsr.iv.next452 = add i32 %lsr.iv451, 2
  %.not129 = icmp eq i32 %lsr.iv.next429, 0
  br i1 %.not129, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3", !llvm.loop !22

"end for f77.s0.v3.loopexit":                     ; preds = %"for f77.s0.v3", %middle.block930
  %1404 = add nsw i32 %f77.s0.v4, 1
  %scevgep433 = getelementptr i1, ptr %lsr.iv431, i64 %1215
  %lsr.iv.next438 = add i32 %lsr.iv437, %1216
  %lsr.iv.next442 = add i32 %lsr.iv441, %1216
  %lsr.iv.next446 = add i32 %lsr.iv445, %1216
  %lsr.iv.next450 = add i32 %lsr.iv449, %1216
  %.not128 = icmp eq i32 %f77.s0.v4, %b750
  %indvar.next917 = add i32 %indvar916, 1
  br i1 %.not128, label %"consume f77", label %"for f77.s0.v4"

"consume f77":                                    ; preds = %"end for f77.s0.v3.loopexit", %"for f77.s0.v4.preheader", %"produce f77"
  %1405 = icmp ult i64 %t3084, 2147483648
  %1406 = icmp ult i64 %t3083, 4294967296
  %1407 = and i1 %1405, %1406
  br i1 %1407, label %"assert succeeded184", label %"assert failed183", !prof !5

"assert failed183":                               ; preds = %"consume f77"
  %1408 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.24, i64 %t3084, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded184":                            ; preds = %"consume f77"
  %1409 = add nuw nsw i64 %t3084, 4
  %1410 = call ptr @halide_malloc(ptr null, i64 %1409)
  %.not530 = icmp eq ptr %1410, null
  br i1 %.not530, label %"assert failed185", label %"produce f78", !prof !4

"assert failed185":                               ; preds = %"assert succeeded184"
  %1411 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f78":                                    ; preds = %"assert succeeded184"
  %1412 = add nsw i32 %39, 1
  %.not109 = icmp slt i32 %39, %43
  br i1 %.not109, label %"assert succeeded188.thread", label %"for f78.s0.v4.preheader", !prof !4

"for f78.s0.v4.preheader":                        ; preds = %"produce f78"
  %1413 = add nsw i32 %48, 1
  %1414 = sub nsw i32 %1413, %52
  %1415 = sext i32 %1154 to i64
  %1416 = sext i32 %43 to i64
  %1417 = shl i32 %1195, 1
  %.not124 = icmp slt i32 %48, %52
  %1418 = sext i32 %52 to i64
  br i1 %.not124, label %"assert succeeded188.thread841", label %"for f78.s0.v4.preheader576", !prof !4

"for f78.s0.v4.preheader576":                     ; preds = %"for f78.s0.v4.preheader"
  %1419 = xor i32 %b748, -1
  %1420 = add i32 %44, %1419
  %1421 = mul i32 %1195, %1420
  %1422 = sub i32 %1421, %b751
  %1423 = sub i32 %44, %b748
  %1424 = mul i32 %1195, %1423
  %1425 = sub i32 %1424, %b751
  %1426 = or i32 %44, 1
  %1427 = sub i32 %1426, %b748
  %1428 = mul i32 %1195, %1427
  %1429 = sub i32 %1428, %b751
  %1430 = add nsw i32 %44, 2
  %1431 = sub i32 %1430, %b748
  %1432 = mul i32 %1195, %1431
  %1433 = sub i32 %1432, %b751
  %1434 = add i32 %1432, %53
  %1435 = sub i32 %1434, %b751
  %1436 = shl i32 %1195, 1
  %1437 = add i32 %1428, %53
  %1438 = sub i32 %1437, %b751
  %1439 = add i32 %1424, %53
  %1440 = sub i32 %1439, %b751
  %1441 = add i32 %1421, %53
  %1442 = sub i32 %1441, %b751
  %1443 = zext i32 %f10.v3.extent_realized.s to i64
  %1444 = add nuw nsw i64 %1443, 1
  %min.iters.check1007 = icmp ult i32 %f10.v3.extent_realized.s, 3
  %mul.result994 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result997 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.overflow998 = icmp slt i32 %f10.v3.extent_realized.s, 0
  %mul.result1000 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result1003 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %n.vec1010 = and i64 %1444, -4
  %.cast1011 = trunc i64 %n.vec1010 to i32
  %1445 = shl i32 %.cast1011, 1
  %.cast1014 = trunc i64 %n.vec1010 to i32
  %1446 = shl i32 %.cast1014, 1
  %.cast1017 = trunc i64 %n.vec1010 to i32
  %1447 = shl i32 %.cast1017, 1
  %.cast1020 = trunc i64 %n.vec1010 to i32
  %1448 = shl i32 %.cast1020, 1
  %ind.end1023 = add nsw i64 %n.vec1010, %1418
  %.cast1025 = trunc i64 %n.vec1010 to i32
  %ind.end1026 = sub i32 %1414, %.cast1025
  %1449 = getelementptr float, ptr %1210, i64 -1
  %1450 = getelementptr float, ptr %1210, i64 -1
  %1451 = getelementptr float, ptr %1210, i64 -1
  %1452 = getelementptr float, ptr %1210, i64 -1
  %1453 = getelementptr float, ptr %1210, i64 -1
  %1454 = getelementptr float, ptr %1210, i64 -1
  %1455 = getelementptr float, ptr %1210, i64 -1
  %1456 = getelementptr float, ptr %1210, i64 -1
  %cmp.n1028 = icmp eq i64 %1444, %n.vec1010
  br label %"for f78.s0.v4"

"for f78.s0.v4":                                  ; preds = %"for f78.s0.v4.preheader576", %"end for f78.s0.v3.loopexit"
  %indvar991 = phi i32 [ 0, %"for f78.s0.v4.preheader576" ], [ %indvar.next992, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv422 = phi i32 [ %1422, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next423, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv418 = phi i32 [ %1425, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next419, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv414 = phi i32 [ %1429, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next415, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv410 = phi i32 [ %1433, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next411, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv406 = phi i64 [ %1416, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next407, %"end for f78.s0.v3.loopexit" ]
  %1457 = sub nsw i64 %lsr.iv406, %1416
  %1458 = mul i64 %1457, %1415
  %1459 = sub i64 %1458, %1418
  br i1 %min.iters.check1007, label %"for f78.s0.v3.preheader", label %vector.scevcheck990

vector.scevcheck990:                              ; preds = %"for f78.s0.v4"
  %1460 = mul i32 %1436, %indvar991
  %1461 = add i32 %1442, %1460
  %1462 = add i32 %1440, %1460
  %1463 = add i32 %1438, %1460
  %1464 = add i32 %1435, %1460
  %1465 = add i32 %1464, %mul.result994
  %1466 = icmp slt i32 %1465, %1464
  %1467 = add i32 %1463, %mul.result997
  %1468 = icmp slt i32 %1467, %1463
  %1469 = or i1 %1468, %mul.overflow998
  %1470 = add i32 %1462, %mul.result1000
  %1471 = icmp slt i32 %1470, %1462
  %1472 = add i32 %1461, %mul.result1003
  %1473 = icmp slt i32 %1472, %1461
  %1474 = or i1 %1466, %1469
  %1475 = or i1 %1471, %1474
  %1476 = or i1 %1473, %1475
  br i1 %1476, label %"for f78.s0.v3.preheader", label %vector.ph1008

vector.ph1008:                                    ; preds = %vector.scevcheck990
  %ind.end1012 = add i32 %lsr.iv422, %1445
  %ind.end1015 = add i32 %lsr.iv418, %1446
  %ind.end1018 = add i32 %lsr.iv414, %1447
  %ind.end1021 = add i32 %lsr.iv410, %1448
  br label %vector.body1029

vector.body1029:                                  ; preds = %vector.body1029, %vector.ph1008
  %index1030 = phi i64 [ 0, %vector.ph1008 ], [ %index.next1064, %vector.body1029 ]
  %.cast1032 = trunc i64 %index1030 to i32
  %1477 = shl i32 %.cast1032, 1
  %offset.idx1033 = add i32 %lsr.iv410, %1477
  %.cast1034 = trunc i64 %index1030 to i32
  %1478 = shl i32 %.cast1034, 1
  %offset.idx1035 = add i32 %lsr.iv414, %1478
  %.cast1036 = trunc i64 %index1030 to i32
  %1479 = shl i32 %.cast1036, 1
  %offset.idx1037 = add i32 %lsr.iv418, %1479
  %.cast1038 = trunc i64 %index1030 to i32
  %1480 = shl i32 %.cast1038, 1
  %offset.idx1039 = add i32 %lsr.iv422, %1480
  %1481 = add i32 %offset.idx1039, %53
  %1482 = add i32 %offset.idx1037, %53
  %1483 = add i32 %offset.idx1035, %53
  %1484 = add i32 %offset.idx1033, %53
  %1485 = sext i32 %1484 to i64
  %1486 = add nsw i64 %1485, 2
  %1487 = getelementptr float, ptr %1449, i64 %1486
  %wide.vec1040 = load <8 x float>, ptr %1487, align 4, !tbaa !19
  %strided.vec1041 = shufflevector <8 x float> %wide.vec1040, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1042 = shufflevector <8 x float> %wide.vec1040, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1488 = getelementptr float, ptr %1450, i64 %1485
  %wide.vec1043 = load <8 x float>, ptr %1488, align 4, !tbaa !19
  %strided.vec1044 = shufflevector <8 x float> %wide.vec1043, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1045 = shufflevector <8 x float> %wide.vec1043, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1489 = fadd <4 x float> %strided.vec1041, %strided.vec1045
  %1490 = fmul <4 x float> %1489, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1491 = fadd <4 x float> %strided.vec1044, %1490
  %1492 = fadd <4 x float> %strided.vec1042, %1491
  %1493 = fmul <4 x float> %1492, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1494 = sext i32 %1483 to i64
  %1495 = add nsw i64 %1494, 2
  %1496 = getelementptr float, ptr %1451, i64 %1495
  %wide.vec1046 = load <8 x float>, ptr %1496, align 4, !tbaa !19
  %strided.vec1047 = shufflevector <8 x float> %wide.vec1046, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1048 = shufflevector <8 x float> %wide.vec1046, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1497 = getelementptr float, ptr %1452, i64 %1494
  %wide.vec1049 = load <8 x float>, ptr %1497, align 4, !tbaa !19
  %strided.vec1050 = shufflevector <8 x float> %wide.vec1049, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1051 = shufflevector <8 x float> %wide.vec1049, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1498 = fadd <4 x float> %strided.vec1047, %strided.vec1051
  %1499 = fmul <4 x float> %1498, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1500 = fadd <4 x float> %strided.vec1050, %1499
  %1501 = fadd <4 x float> %strided.vec1048, %1500
  %1502 = sext i32 %1482 to i64
  %1503 = add nsw i64 %1502, 2
  %1504 = getelementptr float, ptr %1453, i64 %1503
  %wide.vec1052 = load <8 x float>, ptr %1504, align 4, !tbaa !19
  %strided.vec1053 = shufflevector <8 x float> %wide.vec1052, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1054 = shufflevector <8 x float> %wide.vec1052, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1505 = getelementptr float, ptr %1454, i64 %1502
  %wide.vec1055 = load <8 x float>, ptr %1505, align 4, !tbaa !19
  %strided.vec1056 = shufflevector <8 x float> %wide.vec1055, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1057 = shufflevector <8 x float> %wide.vec1055, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1506 = fadd <4 x float> %strided.vec1053, %strided.vec1057
  %1507 = fmul <4 x float> %1506, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1508 = fadd <4 x float> %strided.vec1056, %1507
  %1509 = fadd <4 x float> %strided.vec1054, %1508
  %1510 = fadd <4 x float> %1501, %1509
  %1511 = fmul <4 x float> %1510, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1512 = sext i32 %1481 to i64
  %1513 = add nsw i64 %1512, 2
  %1514 = getelementptr float, ptr %1455, i64 %1513
  %wide.vec1058 = load <8 x float>, ptr %1514, align 4, !tbaa !19
  %strided.vec1059 = shufflevector <8 x float> %wide.vec1058, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1060 = shufflevector <8 x float> %wide.vec1058, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1515 = getelementptr float, ptr %1456, i64 %1512
  %wide.vec1061 = load <8 x float>, ptr %1515, align 4, !tbaa !19
  %strided.vec1062 = shufflevector <8 x float> %wide.vec1061, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1063 = shufflevector <8 x float> %wide.vec1061, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1516 = fadd <4 x float> %strided.vec1059, %strided.vec1063
  %1517 = fmul <4 x float> %1516, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1518 = fadd <4 x float> %strided.vec1062, %1517
  %1519 = fadd <4 x float> %strided.vec1060, %1518
  %1520 = fmul <4 x float> %1519, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1521 = fadd <4 x float> %1511, %1520
  %1522 = fadd <4 x float> %1493, %1521
  %1523 = fmul <4 x float> %1522, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1524 = add i64 %index1030, %1458
  %1525 = getelementptr inbounds float, ptr %1410, i64 %1524
  store <4 x float> %1523, ptr %1525, align 4, !tbaa !23
  %index.next1064 = add nuw i64 %index1030, 4
  %1526 = icmp eq i64 %index.next1064, %n.vec1010
  br i1 %1526, label %middle.block1005, label %vector.body1029, !llvm.loop !25

middle.block1005:                                 ; preds = %vector.body1029
  br i1 %cmp.n1028, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3.preheader"

"for f78.s0.v3.preheader":                        ; preds = %vector.scevcheck990, %"for f78.s0.v4", %middle.block1005
  %lsr.iv424.ph = phi i32 [ %lsr.iv422, %vector.scevcheck990 ], [ %lsr.iv422, %"for f78.s0.v4" ], [ %ind.end1012, %middle.block1005 ]
  %lsr.iv420.ph = phi i32 [ %lsr.iv418, %vector.scevcheck990 ], [ %lsr.iv418, %"for f78.s0.v4" ], [ %ind.end1015, %middle.block1005 ]
  %lsr.iv416.ph = phi i32 [ %lsr.iv414, %vector.scevcheck990 ], [ %lsr.iv414, %"for f78.s0.v4" ], [ %ind.end1018, %middle.block1005 ]
  %lsr.iv412.ph = phi i32 [ %lsr.iv410, %vector.scevcheck990 ], [ %lsr.iv410, %"for f78.s0.v4" ], [ %ind.end1021, %middle.block1005 ]
  %lsr.iv408.ph = phi i64 [ %1418, %vector.scevcheck990 ], [ %1418, %"for f78.s0.v4" ], [ %ind.end1023, %middle.block1005 ]
  %lsr.iv404.ph = phi i32 [ %1414, %vector.scevcheck990 ], [ %1414, %"for f78.s0.v4" ], [ %ind.end1026, %middle.block1005 ]
  br label %"for f78.s0.v3"

"for f78.s0.v3":                                  ; preds = %"for f78.s0.v3.preheader", %"for f78.s0.v3"
  %lsr.iv424 = phi i32 [ %lsr.iv.next425, %"for f78.s0.v3" ], [ %lsr.iv424.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv420 = phi i32 [ %lsr.iv.next421, %"for f78.s0.v3" ], [ %lsr.iv420.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv416 = phi i32 [ %lsr.iv.next417, %"for f78.s0.v3" ], [ %lsr.iv416.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv412 = phi i32 [ %lsr.iv.next413, %"for f78.s0.v3" ], [ %lsr.iv412.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv408 = phi i64 [ %lsr.iv.next409, %"for f78.s0.v3" ], [ %lsr.iv408.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f78.s0.v3" ], [ %lsr.iv404.ph, %"for f78.s0.v3.preheader" ]
  %1527 = add i32 %lsr.iv424, %53
  %1528 = add i32 %lsr.iv420, %53
  %1529 = add i32 %lsr.iv416, %53
  %1530 = add i32 %lsr.iv412, %53
  %1531 = sext i32 %1530 to i64
  %1532 = add nsw i64 %1531, 2
  %1533 = getelementptr inbounds float, ptr %1210, i64 %1532
  %1534 = load float, ptr %1533, align 4, !tbaa !19
  %1535 = add nsw i64 %1531, 1
  %1536 = getelementptr inbounds float, ptr %1210, i64 %1535
  %1537 = load float, ptr %1536, align 4, !tbaa !19
  %1538 = getelementptr inbounds float, ptr %1210, i64 %1531
  %1539 = load float, ptr %1538, align 4, !tbaa !19
  %1540 = fadd float %1537, %1539
  %1541 = fmul float %1540, 3.000000e+00
  %1542 = add nsw i64 %1531, -1
  %1543 = getelementptr inbounds float, ptr %1210, i64 %1542
  %1544 = sext i32 %1529 to i64
  %1545 = add nsw i64 %1544, 2
  %1546 = getelementptr inbounds float, ptr %1210, i64 %1545
  %1547 = add nsw i64 %1544, 1
  %1548 = getelementptr inbounds float, ptr %1210, i64 %1547
  %1549 = load float, ptr %1548, align 4, !tbaa !19
  %1550 = getelementptr inbounds float, ptr %1210, i64 %1544
  %1551 = load float, ptr %1550, align 4, !tbaa !19
  %1552 = fadd float %1549, %1551
  %1553 = fmul float %1552, 3.000000e+00
  %1554 = add nsw i64 %1544, -1
  %1555 = getelementptr inbounds float, ptr %1210, i64 %1554
  %1556 = load float, ptr %1555, align 4, !tbaa !19
  %1557 = fadd float %1556, %1553
  %1558 = sext i32 %1528 to i64
  %1559 = add nsw i64 %1558, 2
  %1560 = getelementptr inbounds float, ptr %1210, i64 %1559
  %1561 = load float, ptr %1560, align 4, !tbaa !19
  %1562 = add nsw i64 %1558, 1
  %1563 = getelementptr inbounds float, ptr %1210, i64 %1562
  %1564 = load float, ptr %1563, align 4, !tbaa !19
  %1565 = getelementptr inbounds float, ptr %1210, i64 %1558
  %1566 = load float, ptr %1565, align 4, !tbaa !19
  %1567 = fadd float %1564, %1566
  %1568 = fmul float %1567, 3.000000e+00
  %1569 = add nsw i64 %1558, -1
  %1570 = getelementptr inbounds float, ptr %1210, i64 %1569
  %1571 = load float, ptr %1570, align 4, !tbaa !19
  %1572 = fadd float %1571, %1568
  %1573 = fadd float %1561, %1572
  %1574 = load float, ptr %1543, align 4, !tbaa !19
  %1575 = load float, ptr %1546, align 4, !tbaa !19
  %1576 = insertelement <2 x float> poison, float %1574, i64 0
  %1577 = insertelement <2 x float> %1576, float %1575, i64 1
  %1578 = insertelement <2 x float> poison, float %1541, i64 0
  %1579 = insertelement <2 x float> %1578, float %1557, i64 1
  %1580 = fadd <2 x float> %1577, %1579
  %1581 = insertelement <2 x float> poison, float %1534, i64 0
  %1582 = insertelement <2 x float> %1581, float %1573, i64 1
  %1583 = fadd <2 x float> %1582, %1580
  %1584 = fmul <2 x float> %1583, <float 1.250000e-01, float 3.750000e-01>
  %1585 = sext i32 %1527 to i64
  %1586 = add nsw i64 %1585, 2
  %1587 = getelementptr inbounds float, ptr %1210, i64 %1586
  %1588 = load float, ptr %1587, align 4, !tbaa !19
  %1589 = add nsw i64 %1585, 1
  %1590 = getelementptr inbounds float, ptr %1210, i64 %1589
  %1591 = load float, ptr %1590, align 4, !tbaa !19
  %1592 = getelementptr inbounds float, ptr %1210, i64 %1585
  %1593 = load float, ptr %1592, align 4, !tbaa !19
  %1594 = fadd float %1591, %1593
  %1595 = fmul float %1594, 3.000000e+00
  %1596 = add nsw i64 %1585, -1
  %1597 = getelementptr inbounds float, ptr %1210, i64 %1596
  %1598 = load float, ptr %1597, align 4, !tbaa !19
  %1599 = fadd float %1598, %1595
  %1600 = fadd float %1588, %1599
  %1601 = fmul float %1600, 1.250000e-01
  %1602 = extractelement <2 x float> %1584, i64 1
  %1603 = fadd float %1602, %1601
  %1604 = extractelement <2 x float> %1584, i64 0
  %1605 = fadd float %1604, %1603
  %1606 = fmul float %1605, 1.250000e-01
  %1607 = add i64 %1459, %lsr.iv408
  %1608 = getelementptr inbounds float, ptr %1410, i64 %1607
  store float %1606, ptr %1608, align 4, !tbaa !23
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next409 = add nsw i64 %lsr.iv408, 1
  %lsr.iv.next413 = add i32 %lsr.iv412, 2
  %lsr.iv.next417 = add i32 %lsr.iv416, 2
  %lsr.iv.next421 = add i32 %lsr.iv420, 2
  %lsr.iv.next425 = add i32 %lsr.iv424, 2
  %.not126 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not126, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3", !llvm.loop !26

"end for f78.s0.v3.loopexit":                     ; preds = %"for f78.s0.v3", %middle.block1005
  %lsr.iv.next407 = add nsw i64 %lsr.iv406, 1
  %lsr426 = trunc i64 %lsr.iv.next407 to i32
  %lsr.iv.next411 = add i32 %lsr.iv410, %1417
  %lsr.iv.next415 = add i32 %lsr.iv414, %1417
  %lsr.iv.next419 = add i32 %lsr.iv418, %1417
  %lsr.iv.next423 = add i32 %lsr.iv422, %1417
  %.not125 = icmp eq i32 %1412, %lsr426
  %indvar.next992 = add i32 %indvar991, 1
  br i1 %.not125, label %"assert succeeded188", label %"for f78.s0.v4"

"assert succeeded188":                            ; preds = %"end for f78.s0.v3.loopexit"
  %1609 = call ptr @halide_malloc(ptr null, i64 %1409)
  %.not531 = icmp eq ptr %1609, null
  br i1 %.not531, label %call_destructor.exit210, label %"for f132.s0.v4.preheader", !prof !4

"assert succeeded188.thread841":                  ; preds = %"for f78.s0.v4.preheader"
  %1610 = call ptr @halide_malloc(ptr null, i64 %1409)
  %.not531842 = icmp eq ptr %1610, null
  br i1 %.not531842, label %call_destructor.exit210, label %if.then.i298, !prof !4

"assert succeeded188.thread":                     ; preds = %"produce f78"
  %1611 = call ptr @halide_malloc(ptr null, i64 %1409)
  %.not534 = icmp eq ptr %1611, null
  br i1 %.not534, label %call_destructor.exit210, label %if.then.i298, !prof !4

"for f132.s0.v4.preheader":                       ; preds = %"assert succeeded188"
  %1612 = sext i32 %f10.stride.2 to i64
  br i1 %.not124, label %if.then.i298, label %"for f132.s0.v4", !prof !27

"for f132.s0.v4":                                 ; preds = %"for f132.s0.v4.preheader", %"end for f132.s0.v3.loopexit"
  %lsr.iv395 = phi i64 [ %lsr.iv.next396, %"end for f132.s0.v3.loopexit" ], [ %1416, %"for f132.s0.v4.preheader" ]
  %lsr403 = trunc i64 %lsr.iv395 to i32
  %1613 = sub nsw i32 %lsr403, %43
  %1614 = mul i32 %1613, %1414
  %1615 = sub i32 %1614, %52
  %1616 = sub nsw i64 %lsr.iv395, %1416
  %1617 = mul i64 %1616, %1415
  %1618 = sub i64 %1617, %1418
  br label %"for f132.s0.v3"

if.then.i298:                                     ; preds = %"end for f132.s0.v3.loopexit", %"assert succeeded188.thread841", %"for f132.s0.v4.preheader", %"assert succeeded188.thread"
  %1619 = phi ptr [ %1611, %"assert succeeded188.thread" ], [ %1609, %"for f132.s0.v4.preheader" ], [ %1610, %"assert succeeded188.thread841" ], [ %1609, %"end for f132.s0.v3.loopexit" ]
  call void @halide_free(ptr null, ptr nonnull %1410) #7
  %f131.v3.extent_realized.s = sub nsw i32 %a2, %a3
  %reass.sub560 = sub nsw i32 %a0, %a1
  %1620 = add nsw i32 %reass.sub560, 1
  %1621 = zext i32 %1620 to i64
  %1622 = add nsw i32 %f131.v3.extent_realized.s, 1
  %1623 = zext i32 %1622 to i64
  %1624 = shl nuw nsw i64 %1623, 2
  %1625 = mul i64 %1624, %1621
  %1626 = icmp ult i64 %1625, 2147483648
  %1627 = and i64 %1624, 4294967292
  %1628 = mul nuw i64 %1627, %1621
  %1629 = lshr i64 %1628, 32
  %1630 = lshr i64 %1623, 30
  %1631 = mul nuw nsw i64 %1630, %1621
  %1632 = add nuw nsw i64 %1629, %1631
  %1633 = icmp ult i64 %1632, 4294967296
  %1634 = and i1 %1626, %1633
  br i1 %1634, label %"assert succeeded192", label %"assert failed191", !prof !5

"for f132.s0.v3":                                 ; preds = %"for f132.s0.v3", %"for f132.s0.v4"
  %lsr.iv397 = phi i64 [ %1418, %"for f132.s0.v4" ], [ %lsr.iv.next398, %"for f132.s0.v3" ]
  %lsr.iv393 = phi i32 [ %1414, %"for f132.s0.v4" ], [ %lsr.iv.next394, %"for f132.s0.v3" ]
  %1635 = trunc i64 %lsr.iv397 to i32
  %tmp401 = add i32 %1615, %1635
  %1636 = sext i32 %tmp401 to i64
  %1637 = getelementptr inbounds float, ptr %1410, i64 %1636
  %1638 = load float, ptr %1637, align 4, !tbaa !23
  %t2188 = fmul float %1638, %55
  %a752 = fptosi float %t2188 to i32
  %a755 = call i32 @llvm.smin.i32(i32 %b6, i32 %a752)
  %1639 = call i32 @llvm.smax.i32(i32 %a755, i32 0)
  %1640 = sitofp i32 %1639 to float
  %t2190 = fsub float %t2188, %1640
  %t2191 = sub nsw i32 %1639, %111
  %1641 = sext i32 %t2191 to i64
  %1642 = add nsw i64 %1641, 1
  %1643 = mul nsw i64 %1642, %1612
  %1644 = add nsw i64 %1643, %1636
  %1645 = getelementptr inbounds float, ptr %1176, i64 %1644
  %1646 = load float, ptr %1645, align 4, !tbaa !28
  %1647 = fmul float %1646, %t2190
  %1648 = mul nsw i64 %1641, %1612
  %1649 = add nsw i64 %1648, %1636
  %1650 = getelementptr inbounds float, ptr %1176, i64 %1649
  %1651 = load float, ptr %1650, align 4, !tbaa !28
  %1652 = fsub float 1.000000e+00, %t2190
  %1653 = fmul float %1651, %1652
  %1654 = fadd float %1647, %1653
  %1655 = add i64 %1618, %lsr.iv397
  %1656 = getelementptr inbounds float, ptr %1609, i64 %1655
  store float %1654, ptr %1656, align 4, !tbaa !30
  %lsr.iv.next394 = add i32 %lsr.iv393, -1
  %lsr.iv.next398 = add nsw i64 %lsr.iv397, 1
  %.not122 = icmp eq i32 %lsr.iv.next394, 0
  br i1 %.not122, label %"end for f132.s0.v3.loopexit", label %"for f132.s0.v3"

"end for f132.s0.v3.loopexit":                    ; preds = %"for f132.s0.v3"
  %lsr.iv.next396 = add nsw i64 %lsr.iv395, 1
  %lsr402 = trunc i64 %lsr.iv.next396 to i32
  %.not121 = icmp eq i32 %1412, %lsr402
  br i1 %.not121, label %if.then.i298, label %"for f132.s0.v4"

"assert failed191":                               ; preds = %if.then.i298
  %1657 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.26, i64 %1625, i64 2147483647) #4
  br label %call_destructor.exit205

"assert succeeded192":                            ; preds = %if.then.i298
  %1658 = add nuw nsw i64 %1625, 4
  %1659 = call ptr @halide_malloc(ptr null, i64 %1658)
  %.not532 = icmp eq ptr %1659, null
  br i1 %.not532, label %"assert failed193", label %"produce f131", !prof !4

"assert failed193":                               ; preds = %"assert succeeded192"
  %1660 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit205

"produce f131":                                   ; preds = %"assert succeeded192"
  %1661 = add nsw i32 %a0, 1
  %.not110 = icmp slt i32 %a0, %a1
  br i1 %.not110, label %"consume f131", label %"for f131.s0.v4.preheader", !prof !4

"for f131.s0.v4.preheader":                       ; preds = %"produce f131"
  %1662 = sext i32 %1622 to i64
  %1663 = sext i32 %a1 to i64
  %1664 = add i32 %f9.v3.extent_realized.s.s, 1
  %1665 = sub i32 %1664, %f9.v3.min_realized
  %1666 = sext i32 %b753 to i64
  %1667 = sext i32 %b751 to i64
  %reass.sub562 = sub nsw i64 %1666, %1667
  %1668 = add nsw i64 %reass.sub562, 1
  %.not116 = icmp slt i32 %a2, %a3
  %1669 = sext i32 %a3 to i64
  %1670 = xor i32 %43, -1
  %1671 = sext i32 %f10.stride.2 to i64
  %1672 = sext i32 %f9.stride.2 to i64
  br i1 %.not116, label %"consume f131", label %"for f131.s0.v4.preheader572", !prof !4

"for f131.s0.v4.preheader572":                    ; preds = %"for f131.s0.v4.preheader"
  %1673 = sext i32 %b748 to i64
  %1674 = sub nsw i64 %1663, %1673
  %1675 = mul i64 %1668, %1674
  %1676 = sub i64 %1675, %1667
  %1677 = sub i32 %a1, %f9.v4.min_realized
  %1678 = mul i32 %1665, %1677
  %1679 = sub i32 %1678, %f9.v3.min_realized
  br label %"for f131.s0.v4"

"for f131.s0.v4":                                 ; preds = %"for f131.s0.v4.preheader572", %"end for f131.s0.v3.loopexit"
  %lsr.iv385 = phi i64 [ %lsr.iv.next386, %"end for f131.s0.v3.loopexit" ], [ %1676, %"for f131.s0.v4.preheader572" ]
  %lsr.iv378 = phi i32 [ %lsr.iv.next379, %"end for f131.s0.v3.loopexit" ], [ %1679, %"for f131.s0.v4.preheader572" ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %"end for f131.s0.v3.loopexit" ], [ %1663, %"for f131.s0.v4.preheader572" ]
  %lsr392 = trunc i64 %lsr.iv374 to i32
  %1680 = add i32 %lsr.iv378, %a3
  %1681 = add i64 %lsr.iv385, %1669
  %1682 = shl i64 %1681, 2
  %scevgep387 = getelementptr i8, ptr %1210, i64 %1682
  %1683 = shl i32 %lsr392, 1
  %1684 = and i32 %1683, 2
  %1685 = ashr i32 %lsr392, 1
  %1686 = add nsw i32 %1685, %1670
  %1687 = add nsw i32 %1686, %1684
  %t2196 = mul nsw i32 %1687, %1154
  %1688 = sub nsw i32 %1685, %43
  %t2200 = mul nsw i32 %1688, %1154
  %1689 = sext i32 %t2200 to i64
  %1690 = sext i32 %t2196 to i64
  %1691 = sub nsw i64 %lsr.iv374, %1663
  %1692 = mul i64 %1691, %1662
  %1693 = sub i64 %1692, %1669
  br label %"for f131.s0.v3"

"for f131.s0.v3":                                 ; preds = %"for f131.s0.v3", %"for f131.s0.v4"
  %lsr.iv388 = phi ptr [ %scevgep387, %"for f131.s0.v4" ], [ %scevgep389, %"for f131.s0.v3" ]
  %lsr.iv380 = phi i32 [ %1680, %"for f131.s0.v4" ], [ %lsr.iv.next381, %"for f131.s0.v3" ]
  %lsr.iv376 = phi i64 [ %1669, %"for f131.s0.v4" ], [ %lsr.iv.next377, %"for f131.s0.v3" ]
  %lsr.iv372 = phi i32 [ %1622, %"for f131.s0.v4" ], [ %lsr.iv.next373, %"for f131.s0.v3" ]
  %1694 = load float, ptr %lsr.iv388, align 4, !tbaa !19
  %t2192 = fmul float %1694, %55
  %a756 = fptosi float %t2192 to i32
  %a759 = call i32 @llvm.smin.i32(i32 %b6, i32 %a756)
  %1695 = call i32 @llvm.smax.i32(i32 %a759, i32 0)
  %1696 = sitofp i32 %1695 to float
  %t2194 = fsub float %t2192, %1696
  %tmp384 = trunc i64 %lsr.iv376 to i32
  %1697 = shl i32 %tmp384, 1
  %1698 = and i32 %1697, 2
  %1699 = ashr i32 %tmp384, 1
  %1700 = sub nsw i32 %1699, %52
  %t2195 = add nsw i32 %1700, %1698
  %t2204 = sub nsw i32 %1695, %111
  %1701 = sext i32 %t2204 to i64
  %1702 = add nsw i64 %1701, 1
  %1703 = mul nsw i64 %1702, %1671
  %1704 = sext i32 %1700 to i64
  %1705 = add nsw i64 %1704, %1689
  %1706 = add nsw i64 %1703, %1705
  %1707 = getelementptr inbounds float, ptr %1176, i64 %1706
  %1708 = sext i32 %t2195 to i64
  %1709 = add nsw i64 %1708, %1689
  %1710 = add nsw i64 %1709, -1
  %1711 = add nsw i64 %1710, %1703
  %1712 = getelementptr inbounds float, ptr %1176, i64 %1711
  %1713 = add nsw i64 %1704, %1690
  %1714 = add nsw i64 %1703, %1713
  %1715 = getelementptr inbounds float, ptr %1176, i64 %1714
  %1716 = add nsw i64 %1708, %1690
  %1717 = add nsw i64 %1716, -1
  %1718 = add nsw i64 %1717, %1703
  %1719 = getelementptr inbounds float, ptr %1176, i64 %1718
  %1720 = load float, ptr %1707, align 4, !tbaa !28
  %1721 = load float, ptr %1712, align 4, !tbaa !28
  %1722 = load float, ptr %1715, align 4, !tbaa !28
  %1723 = insertelement <2 x float> poison, float %1721, i64 0
  %1724 = insertelement <2 x float> %1723, float %1722, i64 1
  %1725 = fmul <2 x float> %1724, <float 2.500000e-01, float 7.500000e-01>
  %1726 = load float, ptr %1719, align 4, !tbaa !28
  %1727 = insertelement <2 x float> poison, float %1720, i64 0
  %1728 = insertelement <2 x float> %1727, float %1726, i64 1
  %1729 = fmul <2 x float> %1728, <float 7.500000e-01, float 2.500000e-01>
  %1730 = fadd <2 x float> %1725, %1729
  %1731 = fmul <2 x float> %1730, <float 7.500000e-01, float 2.500000e-01>
  %shift = shufflevector <2 x float> %1731, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1732 = fadd <2 x float> %1731, %shift
  %1733 = extractelement <2 x float> %1732, i64 0
  %1734 = mul nsw i64 %1702, %1672
  %1735 = sext i32 %lsr.iv380 to i64
  %1736 = add nsw i64 %1734, %1735
  %1737 = getelementptr inbounds float, ptr %918, i64 %1736
  %1738 = load float, ptr %1737, align 4, !tbaa !32
  %1739 = fsub float %1738, %1733
  %1740 = fmul float %t2194, %1739
  %1741 = mul nsw i64 %1701, %1671
  %1742 = add nsw i64 %1741, %1705
  %1743 = getelementptr inbounds float, ptr %1176, i64 %1742
  %1744 = add nsw i64 %1710, %1741
  %1745 = getelementptr inbounds float, ptr %1176, i64 %1744
  %1746 = add nsw i64 %1741, %1713
  %1747 = getelementptr inbounds float, ptr %1176, i64 %1746
  %1748 = add nsw i64 %1717, %1741
  %1749 = getelementptr inbounds float, ptr %1176, i64 %1748
  %1750 = load float, ptr %1743, align 4, !tbaa !28
  %1751 = load float, ptr %1745, align 4, !tbaa !28
  %1752 = load float, ptr %1747, align 4, !tbaa !28
  %1753 = insertelement <2 x float> poison, float %1751, i64 0
  %1754 = insertelement <2 x float> %1753, float %1752, i64 1
  %1755 = fmul <2 x float> %1754, <float 2.500000e-01, float 7.500000e-01>
  %1756 = load float, ptr %1749, align 4, !tbaa !28
  %1757 = insertelement <2 x float> poison, float %1750, i64 0
  %1758 = insertelement <2 x float> %1757, float %1756, i64 1
  %1759 = fmul <2 x float> %1758, <float 7.500000e-01, float 2.500000e-01>
  %1760 = fadd <2 x float> %1755, %1759
  %1761 = fmul <2 x float> %1760, <float 7.500000e-01, float 2.500000e-01>
  %shift1065 = shufflevector <2 x float> %1761, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1762 = fadd <2 x float> %1761, %shift1065
  %1763 = extractelement <2 x float> %1762, i64 0
  %1764 = mul nsw i64 %1701, %1672
  %1765 = add nsw i64 %1764, %1735
  %1766 = getelementptr inbounds float, ptr %918, i64 %1765
  %1767 = load float, ptr %1766, align 4, !tbaa !32
  %1768 = fsub float %1767, %1763
  %1769 = fsub float 1.000000e+00, %t2194
  %1770 = fmul float %1769, %1768
  %1771 = fadd float %1740, %1770
  %1772 = getelementptr inbounds float, ptr %1619, i64 %1705
  %1773 = getelementptr inbounds float, ptr %1619, i64 %1710
  %1774 = getelementptr inbounds float, ptr %1619, i64 %1713
  %1775 = getelementptr inbounds float, ptr %1619, i64 %1717
  %1776 = load float, ptr %1772, align 4, !tbaa !30
  %1777 = load float, ptr %1773, align 4, !tbaa !30
  %1778 = load float, ptr %1774, align 4, !tbaa !30
  %1779 = insertelement <2 x float> poison, float %1777, i64 0
  %1780 = insertelement <2 x float> %1779, float %1778, i64 1
  %1781 = fmul <2 x float> %1780, <float 2.500000e-01, float 7.500000e-01>
  %1782 = load float, ptr %1775, align 4, !tbaa !30
  %1783 = insertelement <2 x float> poison, float %1776, i64 0
  %1784 = insertelement <2 x float> %1783, float %1782, i64 1
  %1785 = fmul <2 x float> %1784, <float 7.500000e-01, float 2.500000e-01>
  %1786 = fadd <2 x float> %1781, %1785
  %1787 = fmul <2 x float> %1786, <float 7.500000e-01, float 2.500000e-01>
  %shift1066 = shufflevector <2 x float> %1787, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1788 = fadd <2 x float> %1787, %shift1066
  %1789 = extractelement <2 x float> %1788, i64 0
  %1790 = fadd float %1771, %1789
  %1791 = add i64 %1693, %lsr.iv376
  %1792 = getelementptr inbounds float, ptr %1659, i64 %1791
  store float %1790, ptr %1792, align 4, !tbaa !34
  %lsr.iv.next373 = add i32 %lsr.iv372, -1
  %lsr.iv.next377 = add nsw i64 %lsr.iv376, 1
  %lsr.iv.next381 = add i32 %lsr.iv380, 1
  %scevgep389 = getelementptr i8, ptr %lsr.iv388, i64 4
  %.not118 = icmp eq i32 %lsr.iv.next373, 0
  br i1 %.not118, label %"end for f131.s0.v3.loopexit", label %"for f131.s0.v3"

"end for f131.s0.v3.loopexit":                    ; preds = %"for f131.s0.v3"
  %lsr.iv.next375 = add nsw i64 %lsr.iv374, 1
  %lsr391 = trunc i64 %lsr.iv.next375 to i32
  %lsr.iv.next379 = add i32 %lsr.iv378, %1665
  %lsr.iv.next386 = add i64 %lsr.iv385, %1668
  %.not117 = icmp eq i32 %1661, %lsr391
  br i1 %.not117, label %"consume f131", label %"for f131.s0.v4"

"consume f131":                                   ; preds = %"end for f131.s0.v3.loopexit", %"for f131.s0.v4.preheader", %"produce f131"
  call void @halide_free(ptr null, ptr nonnull %1176) #7
  call void @halide_free(ptr null, ptr nonnull %1210) #7
  call void @halide_free(ptr null, ptr nonnull %1619) #7
  %1793 = call i32 @llvm.smax.i32(i32 %809, i32 %59)
  %1794 = ashr i32 %1793, 5
  %.not170 = icmp slt i32 %a9, %811
  %f130.v3.min_realized = select i1 %.not170, i32 %a9, i32 %b670
  %1795 = call i32 @llvm.smax.i32(i32 %b681, i32 %a8)
  %f130.v3.extent_realized.s = sub nsw i32 %1795, %f130.v3.min_realized
  %reass.sub563 = sub nsw i32 %1794, %b655
  %1796 = add nsw i32 %reass.sub563, 1
  %1797 = zext i32 %1796 to i64
  %1798 = add nsw i32 %f130.v3.extent_realized.s, 1
  %1799 = zext i32 %1798 to i64
  %1800 = shl nuw nsw i64 %1799, 2
  %1801 = mul i64 %1800, %1797
  %1802 = icmp ult i64 %1801, 2147483648
  %1803 = and i64 %1800, 4294967292
  %1804 = mul nuw i64 %1803, %1797
  %1805 = lshr i64 %1804, 32
  %1806 = lshr i64 %1799, 30
  %1807 = mul nuw nsw i64 %1806, %1797
  %1808 = add nuw nsw i64 %1805, %1807
  %1809 = icmp ult i64 %1808, 4294967296
  %1810 = and i1 %1802, %1809
  br i1 %1810, label %"assert succeeded196", label %"assert failed195", !prof !5

"assert failed195":                               ; preds = %"consume f131"
  %1811 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.27, i64 %1801, i64 2147483647) #4
  br label %call_destructor.exit

"assert succeeded196":                            ; preds = %"consume f131"
  %1812 = add nuw nsw i64 %1801, 4
  %1813 = call ptr @halide_malloc(ptr null, i64 %1812)
  %.not533 = icmp eq ptr %1813, null
  br i1 %.not533, label %"assert failed197", label %"produce f130", !prof !4

"assert failed197":                               ; preds = %"assert succeeded196"
  %1814 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit

"produce f130":                                   ; preds = %"assert succeeded196"
  %1815 = add nsw i32 %a6, 1
  %.not111 = icmp sgt i32 %a7, %a6
  br i1 %.not111, label %"end for f130.s0.v4", label %"for f130.s0.v4.preheader", !prof !4

"for f130.s0.v4.preheader":                       ; preds = %"produce f130"
  %reass.sub564 = sub nsw i32 %a8, %a9
  %1816 = add nsw i32 %reass.sub564, 1
  %narrow = mul nsw i32 %f130.v3.min_realized, -4
  %1817 = sext i32 %narrow to i64
  %scevgep = getelementptr i8, ptr %1813, i64 %1817
  %1818 = sext i32 %f130.v3.extent_realized.s to i64
  %1819 = shl nsw i64 %1818, 2
  %1820 = add nsw i64 %1819, 4
  %1821 = sext i32 %b739 to i64
  %1822 = sext i32 %b737 to i64
  %reass.sub566 = sub nsw i64 %1821, %1822
  %1823 = add nsw i64 %reass.sub566, 1
  %.not112 = icmp slt i32 %a8, %a9
  %1824 = sext i32 %a9 to i64
  %1825 = xor i32 %a1, -1
  %1826 = xor i32 %f9.v4.min_realized, -1
  %1827 = sext i32 %f9.stride.2 to i64
  %1828 = sext i32 %f9.v3.min_realized to i64
  %1829 = sext i32 %f8.stride.2 to i64
  %1830 = sext i32 %b655 to i64
  br i1 %.not112, label %"end for f130.s0.v4", label %"for f130.s0.v4.preheader570", !prof !4

"for f130.s0.v4.preheader570":                    ; preds = %"for f130.s0.v4.preheader"
  %1831 = sext i32 %a7 to i64
  %1832 = sext i32 %b733 to i64
  %1833 = sub nsw i64 %1831, %1832
  %1834 = mul i64 %1823, %1833
  %1835 = sub i64 %1834, %1822
  %1836 = sub i32 %a7, %f8.v4.min_realized
  %1837 = mul i32 %815, %1836
  %1838 = sub i32 %1837, %f8.v3.min_realized
  br label %"for f130.s0.v4"

"for f130.s0.v4":                                 ; preds = %"for f130.s0.v4.preheader570", %"end for f130.s0.v3.loopexit"
  %lsr.iv363 = phi i64 [ %lsr.iv.next364, %"end for f130.s0.v3.loopexit" ], [ %1835, %"for f130.s0.v4.preheader570" ]
  %lsr.iv358 = phi i32 [ %lsr.iv.next359, %"end for f130.s0.v3.loopexit" ], [ %1838, %"for f130.s0.v4.preheader570" ]
  %lsr.iv348 = phi i64 [ %lsr.iv.next349, %"end for f130.s0.v3.loopexit" ], [ %1831, %"for f130.s0.v4.preheader570" ]
  %lsr371 = trunc i64 %lsr.iv348 to i32
  %1839 = add i32 %lsr.iv358, %a9
  %1840 = add i64 %lsr.iv363, %1824
  %1841 = shl i64 %1840, 2
  %scevgep365 = getelementptr i8, ptr %955, i64 %1841
  %1842 = shl i32 %lsr371, 1
  %1843 = and i32 %1842, 2
  %1844 = ashr i32 %lsr371, 1
  %t2210 = add nsw i32 %1843, %1844
  %1845 = add nsw i32 %t2210, %1825
  %t2216 = mul nsw i32 %1845, %1622
  %1846 = sub nsw i32 %1844, %a1
  %t2218 = mul nsw i32 %1846, %1622
  %1847 = add i32 %t2210, %1826
  %t2223 = mul nsw i32 %1847, %897
  %1848 = sub nsw i32 %1844, %f9.v4.min_realized
  %t2228 = mul nsw i32 %1848, %897
  %1849 = sext i32 %t2228 to i64
  %1850 = sext i32 %t2223 to i64
  %1851 = sext i32 %t2218 to i64
  %1852 = sext i32 %t2216 to i64
  %1853 = sub i64 %lsr.iv348, %1830
  %1854 = mul i64 %1853, %1820
  %scevgep350 = getelementptr i8, ptr %scevgep, i64 %1854
  br label %"for f130.s0.v3"

"end for f130.s0.v4":                             ; preds = %"end for f130.s0.v3.loopexit", %"for f130.s0.v4.preheader", %"produce f130"
  call void @halide_free(ptr null, ptr nonnull %918) #7
  call void @halide_free(ptr null, ptr nonnull %955) #7
  call void @halide_free(ptr null, ptr nonnull %1659) #7
  %1855 = sub nsw i32 %129, %a114
  %1856 = add nsw i32 %1855, 63
  %a775 = lshr i32 %1856, 6
  %1857 = icmp sgt i32 %1855, 0
  %1858 = select i1 %1857, i32 %a775, i32 0
  %1859 = add nsw i32 %local_laplacian.extent.1, 63
  %b776 = ashr i32 %1859, 6
  %local_laplacian.s0.v4.v264.prologue = call i32 @llvm.smin.i32(i32 %b776, i32 %1858)
  %1860 = sub nsw i32 %130, %a114
  %1861 = ashr i32 %1860, 6
  %a780 = add nsw i32 %1861, -1
  %1862 = call i32 @llvm.smin.i32(i32 %b88, i32 %b91)
  %1863 = sub nsw i32 %1862, %a114
  %b782 = ashr i32 %1863, 6
  %.not171 = icmp slt i32 %b782, %1861
  %a779 = select i1 %.not171, i32 %b782, i32 %a780
  %1864 = call i32 @llvm.smin.i32(i32 %137, i32 %a779)
  %b778 = add nsw i32 %1864, 1
  %local_laplacian.s0.v4.v264.epilogue = call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v4.v264.prologue, i32 %b778)
  store float %beta, ptr %0, align 8
  %1865 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 1
  store i32 %b121, ptr %1865, align 4
  %1866 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 2
  store i32 %a772, ptr %1866, align 8
  %1867 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 3
  store i32 %f130.v3.extent_realized.s, ptr %1867, align 4
  %1868 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 4
  store i32 %f130.v3.min_realized, ptr %1868, align 8
  %1869 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 5
  store i32 %f2.v3.extent_realized.s, ptr %1869, align 4
  %1870 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 6
  store i32 %f2.v3.min_realized, ptr %1870, align 8
  %1871 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 7
  store i32 %f2.v4.min_realized, ptr %1871, align 4
  %1872 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 8
  store i32 %f4.stride.1, ptr %1872, align 8
  %1873 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 9
  store i32 %f4.v3.extent_realized.s, ptr %1873, align 4
  %1874 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 10
  store i32 %f4.v3.min_realized, ptr %1874, align 8
  %1875 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 11
  store i32 %f4.v4.min_realized, ptr %1875, align 4
  %1876 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 12
  store i32 %f5.stride.1, ptr %1876, align 8
  %1877 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 13
  store i32 %f5.v3.extent_realized.s, ptr %1877, align 4
  %1878 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 14
  store i32 %f5.v3.min_realized, ptr %1878, align 8
  %1879 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 15
  store i32 %f5.v4.min_realized, ptr %1879, align 4
  %1880 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 16
  store i32 %f6.stride.1, ptr %1880, align 8
  %1881 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 17
  store i32 %f6.v3.extent_realized.s, ptr %1881, align 4
  %1882 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 18
  store i32 %f6.v3.min_realized, ptr %1882, align 8
  %1883 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 19
  store i32 %f6.v4.min_realized, ptr %1883, align 4
  %1884 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 20
  store i32 %f7.stride.1, ptr %1884, align 8
  %1885 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 21
  store i32 %f7.v3.extent_realized.s, ptr %1885, align 4
  %1886 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 22
  store i32 %f7.v3.min_realized, ptr %1886, align 8
  %1887 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 23
  store i32 %f7.v4.min_realized, ptr %1887, align 4
  %1888 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 24
  store i32 %f72.v3.extent_realized.s, ptr %1888, align 8
  %1889 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 25
  store i32 %f72.v3.min_realized, ptr %1889, align 4
  %1890 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 26
  store i32 %f72.v4.min_realized, ptr %1890, align 8
  %1891 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 27
  store i32 %f73.v3.extent_realized.s, ptr %1891, align 4
  %1892 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 28
  store i32 %f73.v3.min_realized, ptr %1892, align 8
  %1893 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 29
  store i32 %f73.v4.min_realized, ptr %1893, align 4
  %1894 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 30
  store i32 %f74.v3.extent_realized.s, ptr %1894, align 8
  %1895 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 31
  store i32 %f74.v3.min_realized, ptr %1895, align 4
  %1896 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 32
  store i32 %f74.v4.min_realized, ptr %1896, align 8
  %1897 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 33
  store i32 %f75.v3.extent_realized.s, ptr %1897, align 4
  %1898 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 34
  store i32 %f75.v3.min_realized, ptr %1898, align 8
  %1899 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 35
  store i32 %f75.v4.min_realized, ptr %1899, align 4
  %1900 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 36
  store i32 %f8.stride.2, ptr %1900, align 8
  %1901 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 37
  store i32 %f8.v3.extent_realized.s, ptr %1901, align 4
  %1902 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 38
  store i32 %f8.v3.min_realized, ptr %1902, align 8
  %1903 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 39
  store i32 %f8.v4.min_realized, ptr %1903, align 4
  %1904 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 40
  store i32 %input.extent.0, ptr %1904, align 8
  %1905 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 41
  %1906 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %1906, ptr %1905, align 4
  %1907 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 45
  store i32 %b108, ptr %1907, align 4
  %1908 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 46
  store i32 %input.stride.1, ptr %1908, align 8
  %1909 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 47
  store i32 %input.stride.2, ptr %1909, align 4
  %1910 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 48
  store i32 %levels, ptr %1910, align 8
  %1911 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 49
  store i32 %local_laplacian.extent.0, ptr %1911, align 4
  %1912 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 50
  store i32 %local_laplacian.extent.1, ptr %1912, align 8
  %1913 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 51
  store i32 %local_laplacian.extent.2, ptr %1913, align 4
  %1914 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 52
  store i32 %a286, ptr %1914, align 8
  %1915 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 53
  store i32 %b74, ptr %1915, align 4
  %1916 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 54
  store i32 %a114, ptr %1916, align 8
  %1917 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 55
  store i32 %b89, ptr %1917, align 4
  %1918 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 56
  store i32 %a108, ptr %1918, align 8
  %1919 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 57
  store i32 %local_laplacian.s0.v4.v264.epilogue, ptr %1919, align 4
  %1920 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 58
  store i32 %local_laplacian.s0.v4.v264.prologue, ptr %1920, align 8
  %1921 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 59
  store i32 %local_laplacian.stride.1, ptr %1921, align 4
  %1922 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 60
  store i32 %local_laplacian.stride.2, ptr %1922, align 8
  %1923 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 61
  store ptr %209, ptr %1923, align 8
  %1924 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 62
  store ptr null, ptr %1924, align 8
  %1925 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 63
  store ptr %1813, ptr %1925, align 8
  %1926 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 64
  store ptr null, ptr %1926, align 8
  %1927 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 65
  store ptr %338, ptr %1927, align 8
  %1928 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 66
  store ptr null, ptr %1928, align 8
  %1929 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 67
  store ptr %421, ptr %1929, align 8
  %1930 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 68
  store ptr null, ptr %1930, align 8
  %1931 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 69
  store ptr %500, ptr %1931, align 8
  %1932 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 70
  store ptr null, ptr %1932, align 8
  %1933 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 71
  store ptr %625, ptr %1933, align 8
  %1934 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 72
  store ptr null, ptr %1934, align 8
  %1935 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 73
  store ptr %734, ptr %1935, align 8
  %1936 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 74
  store ptr null, ptr %1936, align 8
  %1937 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 75
  store ptr %556, ptr %1937, align 8
  %1938 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 76
  store ptr null, ptr %1938, align 8
  %1939 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 77
  store ptr %681, ptr %1939, align 8
  %1940 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 78
  store ptr null, ptr %1940, align 8
  %1941 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 79
  store ptr %790, ptr %1941, align 8
  %1942 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 80
  store ptr null, ptr %1942, align 8
  %1943 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 81
  store ptr %876, ptr %1943, align 8
  %1944 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 82
  store ptr null, ptr %1944, align 8
  %1945 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 83
  store ptr %836, ptr %1945, align 8
  %1946 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 84
  store ptr null, ptr %1946, align 8
  %1947 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 85
  store ptr %input.host, ptr %1947, align 8
  %1948 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 86
  store ptr %input.buffer, ptr %1948, align 8
  %1949 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 87
  store ptr %local_laplacian.host, ptr %1949, align 8
  %1950 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 88
  store ptr %local_laplacian.buffer, ptr %1950, align 8
  %1951 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_local_laplacian.s0.v4.v264, i32 0, i32 %b776, ptr nonnull %0)
  %1952 = icmp eq i32 %1951, 0
  br i1 %1952, label %if.then.i319, label %call_destructor.exit235.sink.split, !prof !5

"for f130.s0.v3":                                 ; preds = %"for f130.s0.v3", %"for f130.s0.v4"
  %lsr.iv366 = phi ptr [ %scevgep365, %"for f130.s0.v4" ], [ %scevgep367, %"for f130.s0.v3" ]
  %lsr.iv360 = phi i32 [ %1839, %"for f130.s0.v4" ], [ %lsr.iv.next361, %"for f130.s0.v3" ]
  %lsr.iv352 = phi i64 [ %1824, %"for f130.s0.v4" ], [ %lsr.iv.next353, %"for f130.s0.v3" ]
  %lsr.iv = phi i32 [ %1816, %"for f130.s0.v4" ], [ %lsr.iv.next, %"for f130.s0.v3" ]
  %tmp370 = trunc i64 %lsr.iv352 to i32
  %1953 = shl i32 %tmp370, 1
  %1954 = and i32 %1953, 2
  %1955 = ashr i32 %tmp370, 1
  %t2211 = add nsw i32 %1954, %1955
  %1956 = load float, ptr %lsr.iv366, align 4, !tbaa !15
  %t2212 = fmul float %1956, %55
  %a770 = fptosi float %t2212 to i32
  %a773 = call i32 @llvm.smin.i32(i32 %b6, i32 %a770)
  %1957 = call i32 @llvm.smax.i32(i32 %a773, i32 0)
  %1958 = sitofp i32 %1957 to float
  %t2214 = fsub float %t2212, %1958
  %t2215 = sub nsw i32 %t2211, %a3
  %t2217 = sub nsw i32 %1955, %a3
  %t2220 = sub nsw i32 %1957, %111
  %1959 = sext i32 %t2220 to i64
  %1960 = add nsw i64 %1959, 1
  %1961 = mul nsw i64 %1960, %1827
  %1962 = sext i32 %1955 to i64
  %1963 = sub nsw i64 %1962, %1828
  %1964 = add nsw i64 %1963, %1849
  %1965 = add nsw i64 %1961, %1964
  %1966 = getelementptr inbounds float, ptr %918, i64 %1965
  %1967 = sext i32 %t2211 to i64
  %1968 = sub nsw i64 %1967, %1828
  %1969 = add nsw i64 %1968, %1849
  %1970 = add nsw i64 %1969, -1
  %1971 = add nsw i64 %1970, %1961
  %1972 = getelementptr inbounds float, ptr %918, i64 %1971
  %1973 = add nsw i64 %1963, %1850
  %1974 = add nsw i64 %1961, %1973
  %1975 = getelementptr inbounds float, ptr %918, i64 %1974
  %1976 = add nsw i64 %1968, %1850
  %1977 = add nsw i64 %1976, -1
  %1978 = add nsw i64 %1977, %1961
  %1979 = getelementptr inbounds float, ptr %918, i64 %1978
  %1980 = load float, ptr %1966, align 4, !tbaa !32
  %1981 = load float, ptr %1972, align 4, !tbaa !32
  %1982 = load float, ptr %1975, align 4, !tbaa !32
  %1983 = insertelement <2 x float> poison, float %1981, i64 0
  %1984 = insertelement <2 x float> %1983, float %1982, i64 1
  %1985 = fmul <2 x float> %1984, <float 2.500000e-01, float 7.500000e-01>
  %1986 = load float, ptr %1979, align 4, !tbaa !32
  %1987 = insertelement <2 x float> poison, float %1980, i64 0
  %1988 = insertelement <2 x float> %1987, float %1986, i64 1
  %1989 = fmul <2 x float> %1988, <float 7.500000e-01, float 2.500000e-01>
  %1990 = fadd <2 x float> %1985, %1989
  %1991 = fmul <2 x float> %1990, <float 7.500000e-01, float 2.500000e-01>
  %shift1067 = shufflevector <2 x float> %1991, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1992 = fadd <2 x float> %1991, %shift1067
  %1993 = extractelement <2 x float> %1992, i64 0
  %1994 = mul nsw i64 %1960, %1829
  %1995 = sext i32 %lsr.iv360 to i64
  %1996 = add nsw i64 %1994, %1995
  %1997 = getelementptr inbounds float, ptr %836, i64 %1996
  %1998 = load float, ptr %1997, align 4, !tbaa !36
  %1999 = fsub float %1998, %1993
  %2000 = fmul float %t2214, %1999
  %2001 = mul nsw i64 %1959, %1827
  %2002 = add nsw i64 %2001, %1964
  %2003 = getelementptr inbounds float, ptr %918, i64 %2002
  %2004 = add nsw i64 %1970, %2001
  %2005 = getelementptr inbounds float, ptr %918, i64 %2004
  %2006 = add nsw i64 %2001, %1973
  %2007 = getelementptr inbounds float, ptr %918, i64 %2006
  %2008 = add nsw i64 %1977, %2001
  %2009 = getelementptr inbounds float, ptr %918, i64 %2008
  %2010 = load float, ptr %2003, align 4, !tbaa !32
  %2011 = load float, ptr %2005, align 4, !tbaa !32
  %2012 = load float, ptr %2007, align 4, !tbaa !32
  %2013 = insertelement <2 x float> poison, float %2011, i64 0
  %2014 = insertelement <2 x float> %2013, float %2012, i64 1
  %2015 = fmul <2 x float> %2014, <float 2.500000e-01, float 7.500000e-01>
  %2016 = load float, ptr %2009, align 4, !tbaa !32
  %2017 = insertelement <2 x float> poison, float %2010, i64 0
  %2018 = insertelement <2 x float> %2017, float %2016, i64 1
  %2019 = fmul <2 x float> %2018, <float 7.500000e-01, float 2.500000e-01>
  %2020 = fadd <2 x float> %2015, %2019
  %2021 = fmul <2 x float> %2020, <float 7.500000e-01, float 2.500000e-01>
  %shift1068 = shufflevector <2 x float> %2021, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %2022 = fadd <2 x float> %2021, %shift1068
  %2023 = extractelement <2 x float> %2022, i64 0
  %2024 = mul nsw i64 %1959, %1829
  %2025 = add nsw i64 %2024, %1995
  %2026 = getelementptr inbounds float, ptr %836, i64 %2025
  %2027 = load float, ptr %2026, align 4, !tbaa !36
  %2028 = fsub float %2027, %2023
  %2029 = fsub float 1.000000e+00, %t2214
  %2030 = fmul float %2029, %2028
  %2031 = fadd float %2000, %2030
  %2032 = sext i32 %t2217 to i64
  %2033 = add nsw i64 %2032, %1851
  %2034 = getelementptr inbounds float, ptr %1659, i64 %2033
  %2035 = sext i32 %t2215 to i64
  %2036 = add nsw i64 %2035, -1
  %2037 = add nsw i64 %2036, %1851
  %2038 = getelementptr inbounds float, ptr %1659, i64 %2037
  %2039 = add nsw i64 %2032, %1852
  %2040 = getelementptr inbounds float, ptr %1659, i64 %2039
  %2041 = add nsw i64 %2036, %1852
  %2042 = getelementptr inbounds float, ptr %1659, i64 %2041
  %2043 = load float, ptr %2034, align 4, !tbaa !34
  %2044 = load float, ptr %2038, align 4, !tbaa !34
  %2045 = load float, ptr %2040, align 4, !tbaa !34
  %2046 = insertelement <2 x float> poison, float %2044, i64 0
  %2047 = insertelement <2 x float> %2046, float %2045, i64 1
  %2048 = fmul <2 x float> %2047, <float 2.500000e-01, float 7.500000e-01>
  %2049 = load float, ptr %2042, align 4, !tbaa !34
  %2050 = insertelement <2 x float> poison, float %2043, i64 0
  %2051 = insertelement <2 x float> %2050, float %2049, i64 1
  %2052 = fmul <2 x float> %2051, <float 7.500000e-01, float 2.500000e-01>
  %2053 = fadd <2 x float> %2048, %2052
  %2054 = fmul <2 x float> %2053, <float 7.500000e-01, float 2.500000e-01>
  %shift1069 = shufflevector <2 x float> %2054, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %2055 = fadd <2 x float> %2054, %shift1069
  %2056 = extractelement <2 x float> %2055, i64 0
  %2057 = fadd float %2031, %2056
  %scevgep354 = getelementptr float, ptr %scevgep350, i64 %lsr.iv352
  store float %2057, ptr %scevgep354, align 4, !tbaa !38
  %lsr.iv.next = add i32 %lsr.iv, -1
  %lsr.iv.next353 = add nsw i64 %lsr.iv352, 1
  %lsr.iv.next361 = add i32 %lsr.iv360, 1
  %scevgep367 = getelementptr i8, ptr %lsr.iv366, i64 4
  %.not114 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not114, label %"end for f130.s0.v3.loopexit", label %"for f130.s0.v3"

"end for f130.s0.v3.loopexit":                    ; preds = %"for f130.s0.v3"
  %lsr.iv.next349 = add nsw i64 %lsr.iv348, 1
  %lsr = trunc i64 %lsr.iv.next349 to i32
  %lsr.iv.next359 = add i32 %lsr.iv358, %815
  %lsr.iv.next364 = add i64 %lsr.iv363, %1823
  %.not113 = icmp eq i32 %1815, %lsr
  br i1 %.not113, label %"end for f130.s0.v4", label %"for f130.s0.v4"

if.then.i319:                                     ; preds = %"end for f130.s0.v4"
  call void @halide_free(ptr null, ptr nonnull %209) #7
  call void @halide_free(ptr null, ptr nonnull %338) #7
  call void @halide_free(ptr null, ptr nonnull %421) #7
  call void @halide_free(ptr null, ptr nonnull %500) #7
  call void @halide_free(ptr null, ptr nonnull %556) #7
  call void @halide_free(ptr null, ptr nonnull %625) #7
  call void @halide_free(ptr null, ptr nonnull %681) #7
  call void @halide_free(ptr null, ptr nonnull %734) #7
  call void @halide_free(ptr null, ptr nonnull %790) #7
  call void @halide_free(ptr null, ptr nonnull %836) #7
  call void @halide_free(ptr null, ptr nonnull %876) #7
  call void @halide_free(ptr null, ptr nonnull %1813) #7
  br label %call_destructor.exit210.thread374
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f2.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f2.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
entry:
  %f2.s0.v3.max = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 1
  %1 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 2
  %f2.s0.v4.max = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 3
  %f2.s0.v4.min = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 4
  %f2.s0.v4.v4.epilogue = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 5
  %f2.s0.v4.v4.prologue = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 6
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 7
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 8
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 9
  %input.extent.0 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 11
  %13 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 13
  %b240 = load i32, ptr %13, align 4
  %14 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 14
  %f2.s0.v3.min = load i32, ptr %0, align 4
  %15 = load <2 x i32>, ptr %12, align 4
  %b248 = load i32, ptr %14, align 4
  %16 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 15
  %input.stride.1 = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 16
  %input.stride.2 = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 17
  %f2.host = load ptr, ptr %18, align 8
  %19 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 19
  %input.host = load ptr, ptr %19, align 8
  %20 = icmp sgt i32 %f2.s0.v4.v4.epilogue, %f2.s0.v4.v4
  %21 = icmp sle i32 %f2.s0.v4.v4.prologue, %f2.s0.v4.v4
  %22 = and i1 %20, %21
  br i1 %22, label %"for f2.s0.v4.v280.preheader", label %"for f2.s0.v4.v2809.preheader"

"for f2.s0.v4.v280.preheader":                    ; preds = %entry
  %23 = sext i32 %input.stride.2 to i64
  %24 = sext i32 %b248 to i64
  %25 = extractelement <2 x i32> %15, i64 0
  %26 = sext i32 %25 to i64
  %27 = sext i32 %f2.s0.v3.min to i64
  %28 = shl nsw i32 %f2.s0.v4.v4, 5
  %a202 = add nsw i32 %f2.s0.v4.min, %28
  %b204 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base = tail call i32 @llvm.smin.i32(i32 %b204, i32 %a202)
  %29 = sext i32 %f2.s0.v4.v280.base to i64
  %30 = sub nsw i64 %29, %10
  %31 = add nsw i64 %6, 1
  %32 = mul nsw i64 %30, %31
  %33 = sub nsw i64 %27, %8
  %34 = add i64 %33, %32
  %scevgep = getelementptr float, ptr %f2.host, i64 %34
  %35 = shl nsw i64 %6, 2
  %36 = add nsw i64 %35, 4
  %37 = add nsw i64 %26, %24
  %38 = sub nsw i64 0, %37
  %smax = tail call i64 @llvm.smax.i64(i64 %38, i64 -1)
  %39 = xor i64 %smax, -1
  %smax29 = tail call i64 @llvm.smax.i64(i64 %39, i64 %24)
  %40 = mul nsw i64 %smax29, %23
  %41 = mul i32 %input.stride.1, %b240
  %42 = extractelement <2 x i32> %15, i64 1
  %43 = add i32 %41, %42
  %44 = mul i32 %input.stride.2, %b248
  %45 = add i32 %43, %44
  %46 = sext i32 %45 to i64
  %47 = sub nsw i64 %40, %46
  %48 = mul i32 %input.stride.1, %f2.s0.v4.v280.base
  %49 = add i32 %48, %f2.s0.v3.min
  %smax37 = tail call i64 @llvm.smax.i64(i64 %38, i64 -2)
  %50 = xor i64 %smax37, -1
  %smax38 = tail call i64 @llvm.smax.i64(i64 %50, i64 %24)
  %51 = mul nsw i64 %smax38, %23
  %52 = sub nsw i64 %51, %46
  %smax44 = tail call i64 @llvm.smax.i64(i64 %38, i64 -3)
  %53 = xor i64 %smax44, -1
  %smax45 = tail call i64 @llvm.smax.i64(i64 %53, i64 %24)
  %54 = mul nsw i64 %smax45, %23
  %55 = sub nsw i64 %54, %46
  %56 = insertelement <2 x i32> poison, i32 %b248, i64 0
  %57 = insertelement <2 x i32> %56, i32 %f2.s0.v3.min, i64 1
  %58 = add nsw <2 x i32> %15, %57
  %59 = sub nsw <2 x i32> %15, %57
  %60 = shufflevector <2 x i32> %58, <2 x i32> %59, <4 x i32> <i32 0, i32 0, i32 0, i32 3>
  %61 = extractelement <2 x i32> %59, i64 1
  %62 = add nsw i32 %61, 7
  %a204 = lshr i32 %62, 3
  %63 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %64 = ashr i32 %63, 3
  %b205 = add nsw i32 %64, 1
  %65 = add nsw i32 %42, %input.extent.0
  %66 = sub nsw i32 %65, %f2.s0.v3.min
  %67 = ashr i32 %66, 3
  %a210 = add nsw i32 %67, -1
  %68 = add nsw i32 %63, -7
  %b212 = ashr i32 %68, 3
  %.not13 = icmp slt i32 %b212, %67
  %a209 = select i1 %.not13, i32 %b212, i32 %a210
  %a211 = add nsw i32 %f2.s0.v3.max, -7
  %b213 = add nsw i32 %65, -1
  %69 = tail call i32 @llvm.smin.i32(i32 %b213, i32 %a211)
  %70 = sub nsw i32 %69, %f2.s0.v3.min
  %b211 = ashr i32 %70, 3
  %a208 = tail call i32 @llvm.smin.i32(i32 %b211, i32 %a209)
  %71 = tail call i32 @llvm.smin.i32(i32 %64, i32 %a208)
  %b207 = add nsw i32 %71, 1
  %72 = insertelement <8 x i32> undef, i32 %b213, i64 0
  %b216 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %b215 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %73 = extractelement <2 x i32> %58, i64 0
  %a216 = add nsw i32 %73, -1
  %74 = icmp sgt <4 x i32> %60, <i32 0, i32 1, i32 2, i32 0>
  %75 = extractelement <4 x i1> %74, i64 3
  %76 = select i1 %75, i32 %a204, i32 0
  %.not12 = icmp slt i32 %64, %76
  %f2.s0.v3.v3.prologue = select i1 %.not12, i32 %b205, i32 %76
  %f2.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v3.v3.prologue, i32 %b207)
  %77 = icmp sgt i32 %f2.s0.v3.v3.prologue, 0
  %.not14 = icmp sgt i32 %f2.s0.v3.v3.prologue, %71
  %.not4 = icmp slt i32 %64, %f2.s0.v3.v3.epilogue
  %78 = extractelement <4 x i1> %74, i64 2
  %a215 = select i1 %78, i32 2, i32 %a216
  %79 = tail call i32 @llvm.smax.i32(i32 %a215, i32 %b248)
  %80 = mul nsw i32 %79, %input.stride.2
  %.scalar = sub i32 %80, %45
  %81 = insertelement <8 x i32> undef, i32 %.scalar, i64 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> poison, <8 x i32> zeroinitializer
  %83 = extractelement <4 x i1> %74, i64 1
  %84 = select i1 %83, i32 0, i32 %a216
  %85 = zext i1 %83 to i32
  %a217 = or i32 %84, %85
  %86 = tail call i32 @llvm.smax.i32(i32 %a217, i32 %b248)
  %87 = mul nsw i32 %86, %input.stride.2
  %.scalar30 = sub i32 %87, %45
  %88 = insertelement <8 x i32> undef, i32 %.scalar30, i64 0
  %89 = shufflevector <8 x i32> %88, <8 x i32> poison, <8 x i32> zeroinitializer
  %90 = extractelement <4 x i1> %74, i64 0
  %91 = select i1 %90, i32 0, i32 %a216
  %92 = tail call i32 @llvm.smax.i32(i32 %91, i32 %b248)
  %93 = mul nsw i32 %92, %input.stride.2
  %.scalar31 = sub i32 %93, %45
  %94 = insertelement <8 x i32> undef, i32 %.scalar31, i64 0
  %95 = shufflevector <8 x i32> %94, <8 x i32> poison, <8 x i32> zeroinitializer
  %96 = sub nsw i32 %f2.s0.v3.v3.epilogue, %f2.s0.v3.v3.prologue
  %97 = sext i32 %f2.s0.v3.v3.prologue to i64
  %98 = shl nsw i64 %97, 3
  %99 = shl i32 %f2.s0.v3.v3.prologue, 3
  %100 = sub nsw i32 %b205, %f2.s0.v3.v3.epilogue
  %101 = shl i32 %f2.s0.v3.v3.epilogue, 3
  %102 = add i32 %101, %f2.s0.v3.min
  br label %"for f2.s0.v4.v280"

"for f2.s0.v4.v2809.preheader":                   ; preds = %entry
  %103 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 10
  %input.extent.1 = load i32, ptr %103, align 4
  %104 = shl nsw i32 %f2.s0.v4.v4, 5
  %a236 = add nsw i32 %f2.s0.v4.min, %104
  %b238 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base8 = tail call i32 @llvm.smin.i32(i32 %b238, i32 %a236)
  %105 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %106 = lshr i32 %105, 3
  %107 = add nuw nsw i32 %106, 1
  %108 = icmp sgt i32 %105, -1
  %b239 = add nsw i32 %f2.s0.v3.max, -7
  %109 = add i32 %input.extent.1, -1
  %b241 = add i32 %109, %b240
  %110 = extractelement <2 x i32> %15, i64 1
  %111 = add nsw i32 %110, %input.extent.0
  %112 = add nsw i32 %111, -1
  %113 = insertelement <8 x i32> undef, i32 %112, i64 0
  %b243 = shufflevector <8 x i32> %113, <8 x i32> undef, <8 x i32> zeroinitializer
  %b242 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = mul nsw i32 %input.stride.2, %b248
  %115 = mul nsw i32 %input.stride.1, %b240
  %116 = add nsw i32 %115, %110
  %t1960.s = add nsw i32 %116, %114
  %117 = extractelement <2 x i32> %15, i64 0
  %118 = add nsw i32 %b248, %117
  %a243 = add nsw i32 %118, -1
  %.inv11 = icmp sgt i32 %118, 2
  %a242 = select i1 %.inv11, i32 2, i32 %a243
  %119 = tail call i32 @llvm.smax.i32(i32 %a242, i32 %b248)
  %120 = mul nsw i32 %119, %input.stride.2
  %.scalar35 = sub i32 %120, %t1960.s
  %121 = insertelement <8 x i32> undef, i32 %.scalar35, i64 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> poison, <8 x i32> zeroinitializer
  %123 = icmp sgt i32 %118, 1
  %124 = select i1 %123, i32 0, i32 %a243
  %125 = zext i1 %123 to i32
  %a244 = or i32 %124, %125
  %126 = tail call i32 @llvm.smax.i32(i32 %a244, i32 %b248)
  %127 = mul nsw i32 %126, %input.stride.2
  %.scalar36 = sub i32 %127, %t1960.s
  %128 = insertelement <8 x i32> undef, i32 %.scalar36, i64 0
  %129 = shufflevector <8 x i32> %128, <8 x i32> poison, <8 x i32> zeroinitializer
  %.inv = icmp sgt i32 %118, 0
  %130 = select i1 %.inv, i32 0, i32 %a243
  %131 = tail call i32 @llvm.smax.i32(i32 %130, i32 %b248)
  %132 = mul nsw i32 %131, %input.stride.2
  %.scalar37 = sub i32 %132, %t1960.s
  %133 = insertelement <8 x i32> undef, i32 %.scalar37, i64 0
  %134 = shufflevector <8 x i32> %133, <8 x i32> poison, <8 x i32> zeroinitializer
  %135 = add nsw i64 %6, 1
  %136 = sext i32 %f2.s0.v4.v280.base8 to i64
  %137 = sub nsw i64 %136, %10
  br i1 %108, label %"for f2.s0.v4.v2809.us", label %destructor_block, !prof !5

"for f2.s0.v4.v2809.us":                          ; preds = %"for f2.s0.v4.v2809.preheader", %"end for f2.s0.v3.v313.loopexit.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f2.s0.v3.v313.loopexit.us" ], [ 0, %"for f2.s0.v4.v2809.preheader" ]
  %138 = trunc i64 %indvars.iv to i32
  %a239.us = add nsw i32 %f2.s0.v4.v280.base8, %138
  %a238.us = tail call i32 @llvm.smin.i32(i32 %b241, i32 %a239.us)
  %139 = tail call i32 @llvm.smax.i32(i32 %a238.us, i32 %b240)
  %140 = mul nsw i32 %139, %input.stride.1
  %141 = insertelement <8 x i32> undef, i32 %140, i64 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = add nsw i64 %137, %indvars.iv
  %144 = mul nsw i64 %143, %135
  %145 = sub i64 %144, %8
  br label %"for f2.s0.v3.v312.us"

"for f2.s0.v3.v312.us":                           ; preds = %"for f2.s0.v4.v2809.us", %"for f2.s0.v3.v312.us"
  %lsr.iv57.us = phi i32 [ %lsr.iv.next58.us, %"for f2.s0.v3.v312.us" ], [ %f2.s0.v3.min, %"for f2.s0.v4.v2809.us" ]
  %lsr.iv55.us = phi i32 [ %lsr.iv.next56.us, %"for f2.s0.v3.v312.us" ], [ %107, %"for f2.s0.v4.v2809.us" ]
  %f2.s0.v3.v283.base15.us = tail call i32 @llvm.smin.i32(i32 %b239, i32 %lsr.iv57.us)
  %146 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base15.us, i64 0
  %147 = shufflevector <8 x i32> %146, <8 x i32> undef, <8 x i32> zeroinitializer
  %a241.us = add nsw <8 x i32> %147, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a240.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b243, <8 x i32> %a241.us)
  %148 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a240.us, <8 x i32> %b242)
  %t1958.us = add nsw <8 x i32> %148, %142
  %149 = add <8 x i32> %122, %t1958.us
  %150 = extractelement <8 x i32> %149, i64 0
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i16, ptr %input.host, i64 %151
  %153 = load i16, ptr %152, align 2, !tbaa !40
  %154 = insertelement <8 x i16> undef, i16 %153, i64 0
  %155 = extractelement <8 x i32> %149, i64 1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i16, ptr %input.host, i64 %156
  %158 = load i16, ptr %157, align 2, !tbaa !40
  %159 = insertelement <8 x i16> %154, i16 %158, i64 1
  %160 = extractelement <8 x i32> %149, i64 2
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i16, ptr %input.host, i64 %161
  %163 = load i16, ptr %162, align 2, !tbaa !40
  %164 = insertelement <8 x i16> %159, i16 %163, i64 2
  %165 = extractelement <8 x i32> %149, i64 3
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i16, ptr %input.host, i64 %166
  %168 = load i16, ptr %167, align 2, !tbaa !40
  %169 = insertelement <8 x i16> %164, i16 %168, i64 3
  %170 = extractelement <8 x i32> %149, i64 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i16, ptr %input.host, i64 %171
  %173 = load i16, ptr %172, align 2, !tbaa !40
  %174 = insertelement <8 x i16> %169, i16 %173, i64 4
  %175 = extractelement <8 x i32> %149, i64 5
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i16, ptr %input.host, i64 %176
  %178 = load i16, ptr %177, align 2, !tbaa !40
  %179 = insertelement <8 x i16> %174, i16 %178, i64 5
  %180 = extractelement <8 x i32> %149, i64 6
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i16, ptr %input.host, i64 %181
  %183 = load i16, ptr %182, align 2, !tbaa !40
  %184 = insertelement <8 x i16> %179, i16 %183, i64 6
  %185 = extractelement <8 x i32> %149, i64 7
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i16, ptr %input.host, i64 %186
  %188 = load i16, ptr %187, align 2, !tbaa !40
  %189 = insertelement <8 x i16> %184, i16 %188, i64 7
  %190 = uitofp <8 x i16> %189 to <8 x float>
  %191 = fmul <8 x float> %190, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %192 = add <8 x i32> %129, %t1958.us
  %193 = extractelement <8 x i32> %192, i64 0
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i16, ptr %input.host, i64 %194
  %196 = load i16, ptr %195, align 2, !tbaa !40
  %197 = insertelement <8 x i16> undef, i16 %196, i64 0
  %198 = extractelement <8 x i32> %192, i64 1
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i16, ptr %input.host, i64 %199
  %201 = load i16, ptr %200, align 2, !tbaa !40
  %202 = insertelement <8 x i16> %197, i16 %201, i64 1
  %203 = extractelement <8 x i32> %192, i64 2
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i16, ptr %input.host, i64 %204
  %206 = load i16, ptr %205, align 2, !tbaa !40
  %207 = insertelement <8 x i16> %202, i16 %206, i64 2
  %208 = extractelement <8 x i32> %192, i64 3
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i16, ptr %input.host, i64 %209
  %211 = load i16, ptr %210, align 2, !tbaa !40
  %212 = insertelement <8 x i16> %207, i16 %211, i64 3
  %213 = extractelement <8 x i32> %192, i64 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i16, ptr %input.host, i64 %214
  %216 = load i16, ptr %215, align 2, !tbaa !40
  %217 = insertelement <8 x i16> %212, i16 %216, i64 4
  %218 = extractelement <8 x i32> %192, i64 5
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i16, ptr %input.host, i64 %219
  %221 = load i16, ptr %220, align 2, !tbaa !40
  %222 = insertelement <8 x i16> %217, i16 %221, i64 5
  %223 = extractelement <8 x i32> %192, i64 6
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i16, ptr %input.host, i64 %224
  %226 = load i16, ptr %225, align 2, !tbaa !40
  %227 = insertelement <8 x i16> %222, i16 %226, i64 6
  %228 = extractelement <8 x i32> %192, i64 7
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i16, ptr %input.host, i64 %229
  %231 = load i16, ptr %230, align 2, !tbaa !40
  %232 = insertelement <8 x i16> %227, i16 %231, i64 7
  %233 = uitofp <8 x i16> %232 to <8 x float>
  %234 = fmul <8 x float> %233, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %235 = add <8 x i32> %134, %t1958.us
  %236 = extractelement <8 x i32> %235, i64 0
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i16, ptr %input.host, i64 %237
  %239 = load i16, ptr %238, align 2, !tbaa !40
  %240 = insertelement <8 x i16> undef, i16 %239, i64 0
  %241 = extractelement <8 x i32> %235, i64 1
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i16, ptr %input.host, i64 %242
  %244 = load i16, ptr %243, align 2, !tbaa !40
  %245 = insertelement <8 x i16> %240, i16 %244, i64 1
  %246 = extractelement <8 x i32> %235, i64 2
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i16, ptr %input.host, i64 %247
  %249 = load i16, ptr %248, align 2, !tbaa !40
  %250 = insertelement <8 x i16> %245, i16 %249, i64 2
  %251 = extractelement <8 x i32> %235, i64 3
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i16, ptr %input.host, i64 %252
  %254 = load i16, ptr %253, align 2, !tbaa !40
  %255 = insertelement <8 x i16> %250, i16 %254, i64 3
  %256 = extractelement <8 x i32> %235, i64 4
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds i16, ptr %input.host, i64 %257
  %259 = load i16, ptr %258, align 2, !tbaa !40
  %260 = insertelement <8 x i16> %255, i16 %259, i64 4
  %261 = extractelement <8 x i32> %235, i64 5
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds i16, ptr %input.host, i64 %262
  %264 = load i16, ptr %263, align 2, !tbaa !40
  %265 = insertelement <8 x i16> %260, i16 %264, i64 5
  %266 = extractelement <8 x i32> %235, i64 6
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds i16, ptr %input.host, i64 %267
  %269 = load i16, ptr %268, align 2, !tbaa !40
  %270 = insertelement <8 x i16> %265, i16 %269, i64 6
  %271 = extractelement <8 x i32> %235, i64 7
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i16, ptr %input.host, i64 %272
  %274 = load i16, ptr %273, align 2, !tbaa !40
  %275 = insertelement <8 x i16> %270, i16 %274, i64 7
  %276 = uitofp <8 x i16> %275 to <8 x float>
  %277 = fmul <8 x float> %276, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %278 = fadd <8 x float> %234, %277
  %279 = fadd <8 x float> %191, %278
  %280 = sext i32 %f2.s0.v3.v283.base15.us to i64
  %281 = add i64 %145, %280
  %282 = getelementptr inbounds float, ptr %f2.host, i64 %281
  store <8 x float> %279, ptr %282, align 4, !tbaa !42
  %lsr.iv.next56.us = add nsw i32 %lsr.iv55.us, -1
  %lsr.iv.next58.us = add i32 %lsr.iv57.us, 8
  %.not3.us = icmp eq i32 %lsr.iv.next56.us, 0
  br i1 %.not3.us, label %"end for f2.s0.v3.v313.loopexit.us", label %"for f2.s0.v3.v312.us"

"end for f2.s0.v3.v313.loopexit.us":              ; preds = %"for f2.s0.v3.v312.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not.us = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not.us, label %destructor_block, label %"for f2.s0.v4.v2809.us"

"for f2.s0.v4.v280":                              ; preds = %"end for f2.s0.v3.v35", %"for f2.s0.v4.v280.preheader"
  %indvars.iv27 = phi i64 [ %indvars.iv.next28, %"end for f2.s0.v3.v35" ], [ 0, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv30 = phi i32 [ %lsr.iv.next31, %"end for f2.s0.v3.v35" ], [ %49, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv20 = phi ptr [ %scevgep22, %"end for f2.s0.v3.v35" ], [ %scevgep, %"for f2.s0.v4.v280.preheader" ]
  br i1 %77, label %"for f2.s0.v3.v3.preheader", label %"end for f2.s0.v3.v3", !prof !5

"for f2.s0.v3.v3.preheader":                      ; preds = %"for f2.s0.v4.v280"
  %283 = trunc i64 %indvars.iv27 to i32
  %284 = add nsw i32 %f2.s0.v4.v280.base, %283
  %285 = mul nsw i32 %284, %input.stride.1
  %286 = insertelement <8 x i32> undef, i32 %285, i64 0
  %287 = shufflevector <8 x i32> %286, <8 x i32> undef, <8 x i32> zeroinitializer
  %288 = add nsw i64 %30, %indvars.iv27
  %289 = mul nsw i64 %288, %31
  %290 = sub i64 %289, %8
  br label %"for f2.s0.v3.v3"

"for f2.s0.v3.v3":                                ; preds = %"for f2.s0.v3.v3.preheader", %"for f2.s0.v3.v3"
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.min, %"for f2.s0.v3.v3.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.v3.prologue, %"for f2.s0.v3.v3.preheader" ]
  %f2.s0.v3.v283.base = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv16)
  %291 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base, i64 0
  %292 = shufflevector <8 x i32> %291, <8 x i32> undef, <8 x i32> zeroinitializer
  %a214 = add nsw <8 x i32> %292, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a213 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a214)
  %293 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a213, <8 x i32> %b215)
  %t1949 = add nsw <8 x i32> %293, %287
  %294 = add <8 x i32> %82, %t1949
  %295 = extractelement <8 x i32> %294, i64 0
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds i16, ptr %input.host, i64 %296
  %298 = load i16, ptr %297, align 2, !tbaa !40
  %299 = insertelement <8 x i16> undef, i16 %298, i64 0
  %300 = extractelement <8 x i32> %294, i64 1
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds i16, ptr %input.host, i64 %301
  %303 = load i16, ptr %302, align 2, !tbaa !40
  %304 = insertelement <8 x i16> %299, i16 %303, i64 1
  %305 = extractelement <8 x i32> %294, i64 2
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i16, ptr %input.host, i64 %306
  %308 = load i16, ptr %307, align 2, !tbaa !40
  %309 = insertelement <8 x i16> %304, i16 %308, i64 2
  %310 = extractelement <8 x i32> %294, i64 3
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i16, ptr %input.host, i64 %311
  %313 = load i16, ptr %312, align 2, !tbaa !40
  %314 = insertelement <8 x i16> %309, i16 %313, i64 3
  %315 = extractelement <8 x i32> %294, i64 4
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i16, ptr %input.host, i64 %316
  %318 = load i16, ptr %317, align 2, !tbaa !40
  %319 = insertelement <8 x i16> %314, i16 %318, i64 4
  %320 = extractelement <8 x i32> %294, i64 5
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i16, ptr %input.host, i64 %321
  %323 = load i16, ptr %322, align 2, !tbaa !40
  %324 = insertelement <8 x i16> %319, i16 %323, i64 5
  %325 = extractelement <8 x i32> %294, i64 6
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i16, ptr %input.host, i64 %326
  %328 = load i16, ptr %327, align 2, !tbaa !40
  %329 = insertelement <8 x i16> %324, i16 %328, i64 6
  %330 = extractelement <8 x i32> %294, i64 7
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i16, ptr %input.host, i64 %331
  %333 = load i16, ptr %332, align 2, !tbaa !40
  %334 = insertelement <8 x i16> %329, i16 %333, i64 7
  %335 = uitofp <8 x i16> %334 to <8 x float>
  %336 = fmul <8 x float> %335, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %337 = add <8 x i32> %89, %t1949
  %338 = extractelement <8 x i32> %337, i64 0
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds i16, ptr %input.host, i64 %339
  %341 = load i16, ptr %340, align 2, !tbaa !40
  %342 = insertelement <8 x i16> undef, i16 %341, i64 0
  %343 = extractelement <8 x i32> %337, i64 1
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i16, ptr %input.host, i64 %344
  %346 = load i16, ptr %345, align 2, !tbaa !40
  %347 = insertelement <8 x i16> %342, i16 %346, i64 1
  %348 = extractelement <8 x i32> %337, i64 2
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds i16, ptr %input.host, i64 %349
  %351 = load i16, ptr %350, align 2, !tbaa !40
  %352 = insertelement <8 x i16> %347, i16 %351, i64 2
  %353 = extractelement <8 x i32> %337, i64 3
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds i16, ptr %input.host, i64 %354
  %356 = load i16, ptr %355, align 2, !tbaa !40
  %357 = insertelement <8 x i16> %352, i16 %356, i64 3
  %358 = extractelement <8 x i32> %337, i64 4
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i16, ptr %input.host, i64 %359
  %361 = load i16, ptr %360, align 2, !tbaa !40
  %362 = insertelement <8 x i16> %357, i16 %361, i64 4
  %363 = extractelement <8 x i32> %337, i64 5
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds i16, ptr %input.host, i64 %364
  %366 = load i16, ptr %365, align 2, !tbaa !40
  %367 = insertelement <8 x i16> %362, i16 %366, i64 5
  %368 = extractelement <8 x i32> %337, i64 6
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds i16, ptr %input.host, i64 %369
  %371 = load i16, ptr %370, align 2, !tbaa !40
  %372 = insertelement <8 x i16> %367, i16 %371, i64 6
  %373 = extractelement <8 x i32> %337, i64 7
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds i16, ptr %input.host, i64 %374
  %376 = load i16, ptr %375, align 2, !tbaa !40
  %377 = insertelement <8 x i16> %372, i16 %376, i64 7
  %378 = uitofp <8 x i16> %377 to <8 x float>
  %379 = fmul <8 x float> %378, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %380 = add <8 x i32> %95, %t1949
  %381 = extractelement <8 x i32> %380, i64 0
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds i16, ptr %input.host, i64 %382
  %384 = load i16, ptr %383, align 2, !tbaa !40
  %385 = insertelement <8 x i16> undef, i16 %384, i64 0
  %386 = extractelement <8 x i32> %380, i64 1
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds i16, ptr %input.host, i64 %387
  %389 = load i16, ptr %388, align 2, !tbaa !40
  %390 = insertelement <8 x i16> %385, i16 %389, i64 1
  %391 = extractelement <8 x i32> %380, i64 2
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds i16, ptr %input.host, i64 %392
  %394 = load i16, ptr %393, align 2, !tbaa !40
  %395 = insertelement <8 x i16> %390, i16 %394, i64 2
  %396 = extractelement <8 x i32> %380, i64 3
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds i16, ptr %input.host, i64 %397
  %399 = load i16, ptr %398, align 2, !tbaa !40
  %400 = insertelement <8 x i16> %395, i16 %399, i64 3
  %401 = extractelement <8 x i32> %380, i64 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds i16, ptr %input.host, i64 %402
  %404 = load i16, ptr %403, align 2, !tbaa !40
  %405 = insertelement <8 x i16> %400, i16 %404, i64 4
  %406 = extractelement <8 x i32> %380, i64 5
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i16, ptr %input.host, i64 %407
  %409 = load i16, ptr %408, align 2, !tbaa !40
  %410 = insertelement <8 x i16> %405, i16 %409, i64 5
  %411 = extractelement <8 x i32> %380, i64 6
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds i16, ptr %input.host, i64 %412
  %414 = load i16, ptr %413, align 2, !tbaa !40
  %415 = insertelement <8 x i16> %410, i16 %414, i64 6
  %416 = extractelement <8 x i32> %380, i64 7
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds i16, ptr %input.host, i64 %417
  %419 = load i16, ptr %418, align 2, !tbaa !40
  %420 = insertelement <8 x i16> %415, i16 %419, i64 7
  %421 = uitofp <8 x i16> %420 to <8 x float>
  %422 = fmul <8 x float> %421, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %423 = fadd <8 x float> %379, %422
  %424 = fadd <8 x float> %336, %423
  %425 = sext i32 %f2.s0.v3.v283.base to i64
  %426 = add i64 %290, %425
  %427 = getelementptr inbounds float, ptr %f2.host, i64 %426
  store <8 x float> %424, ptr %427, align 4, !tbaa !42
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %lsr.iv.next17 = add i32 %lsr.iv16, 8
  %.not10 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not10, label %"end for f2.s0.v3.v3", label %"for f2.s0.v3.v3"

"end for f2.s0.v3.v3":                            ; preds = %"for f2.s0.v3.v3", %"for f2.s0.v4.v280"
  br i1 %.not14, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31.preheader", !prof !4

"for f2.s0.v3.v31.preheader":                     ; preds = %"end for f2.s0.v3.v3"
  %scevgep23 = getelementptr float, ptr %lsr.iv20, i64 %98
  %428 = add i32 %lsr.iv30, %99
  %429 = sext i32 %428 to i64
  %430 = add nsw i64 %47, %429
  %scevgep32 = getelementptr i16, ptr %input.host, i64 %430
  %431 = add nsw i64 %52, %429
  %scevgep39 = getelementptr i16, ptr %input.host, i64 %431
  %432 = add nsw i64 %55, %429
  %scevgep46 = getelementptr i16, ptr %input.host, i64 %432
  br label %"for f2.s0.v3.v31"

"for f2.s0.v3.v31":                               ; preds = %"for f2.s0.v3.v31", %"for f2.s0.v3.v31.preheader"
  %lsr.iv25 = phi i64 [ 0, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next26, %"for f2.s0.v3.v31" ]
  %lsr.iv18 = phi i32 [ %96, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next19, %"for f2.s0.v3.v31" ]
  %uglygep49 = getelementptr i8, ptr %scevgep46, i64 %lsr.iv25
  %433 = load <8 x i16>, ptr %uglygep49, align 2, !tbaa !40
  %434 = uitofp <8 x i16> %433 to <8 x float>
  %435 = fmul <8 x float> %434, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %uglygep42 = getelementptr i8, ptr %scevgep39, i64 %lsr.iv25
  %436 = load <8 x i16>, ptr %uglygep42, align 2, !tbaa !40
  %437 = uitofp <8 x i16> %436 to <8 x float>
  %438 = fmul <8 x float> %437, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %uglygep35 = getelementptr i8, ptr %scevgep32, i64 %lsr.iv25
  %439 = load <8 x i16>, ptr %uglygep35, align 2, !tbaa !40
  %440 = uitofp <8 x i16> %439 to <8 x float>
  %441 = fmul <8 x float> %440, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %442 = fadd <8 x float> %438, %441
  %443 = fadd <8 x float> %435, %442
  %444 = shl nuw i64 %lsr.iv25, 1
  %uglygep = getelementptr i8, ptr %scevgep23, i64 %444
  store <8 x float> %443, ptr %uglygep, align 4, !tbaa !42
  %lsr.iv.next19 = add i32 %lsr.iv18, -1
  %lsr.iv.next26 = add nuw nsw i64 %lsr.iv25, 16
  %.not8 = icmp eq i32 %lsr.iv.next19, 0
  br i1 %.not8, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31"

"end for f2.s0.v3.v32":                           ; preds = %"for f2.s0.v3.v31", %"end for f2.s0.v3.v3"
  br i1 %.not4, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34.preheader", !prof !4

"for f2.s0.v3.v34.preheader":                     ; preds = %"end for f2.s0.v3.v32"
  %445 = trunc i64 %indvars.iv27 to i32
  %446 = add nsw i32 %f2.s0.v4.v280.base, %445
  %447 = mul nsw i32 %446, %input.stride.1
  %448 = insertelement <8 x i32> undef, i32 %447, i64 0
  %449 = shufflevector <8 x i32> %448, <8 x i32> undef, <8 x i32> zeroinitializer
  %450 = add nsw i64 %30, %indvars.iv27
  %451 = mul nsw i64 %450, %31
  %452 = sub i64 %451, %8
  br label %"for f2.s0.v3.v34"

"for f2.s0.v3.v34":                               ; preds = %"for f2.s0.v3.v34", %"for f2.s0.v3.v34.preheader"
  %lsr.iv53 = phi i32 [ %102, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next54, %"for f2.s0.v3.v34" ]
  %lsr.iv51 = phi i32 [ %100, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next52, %"for f2.s0.v3.v34" ]
  %f2.s0.v3.v283.base7 = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv53)
  %453 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base7, i64 0
  %454 = shufflevector <8 x i32> %453, <8 x i32> undef, <8 x i32> zeroinitializer
  %a229 = add nsw <8 x i32> %454, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a228 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a229)
  %455 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a228, <8 x i32> %b215)
  %t1955 = add nsw <8 x i32> %455, %449
  %456 = add <8 x i32> %82, %t1955
  %457 = extractelement <8 x i32> %456, i64 0
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i16, ptr %input.host, i64 %458
  %460 = load i16, ptr %459, align 2, !tbaa !40
  %461 = insertelement <8 x i16> undef, i16 %460, i64 0
  %462 = extractelement <8 x i32> %456, i64 1
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i16, ptr %input.host, i64 %463
  %465 = load i16, ptr %464, align 2, !tbaa !40
  %466 = insertelement <8 x i16> %461, i16 %465, i64 1
  %467 = extractelement <8 x i32> %456, i64 2
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds i16, ptr %input.host, i64 %468
  %470 = load i16, ptr %469, align 2, !tbaa !40
  %471 = insertelement <8 x i16> %466, i16 %470, i64 2
  %472 = extractelement <8 x i32> %456, i64 3
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i16, ptr %input.host, i64 %473
  %475 = load i16, ptr %474, align 2, !tbaa !40
  %476 = insertelement <8 x i16> %471, i16 %475, i64 3
  %477 = extractelement <8 x i32> %456, i64 4
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds i16, ptr %input.host, i64 %478
  %480 = load i16, ptr %479, align 2, !tbaa !40
  %481 = insertelement <8 x i16> %476, i16 %480, i64 4
  %482 = extractelement <8 x i32> %456, i64 5
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds i16, ptr %input.host, i64 %483
  %485 = load i16, ptr %484, align 2, !tbaa !40
  %486 = insertelement <8 x i16> %481, i16 %485, i64 5
  %487 = extractelement <8 x i32> %456, i64 6
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i16, ptr %input.host, i64 %488
  %490 = load i16, ptr %489, align 2, !tbaa !40
  %491 = insertelement <8 x i16> %486, i16 %490, i64 6
  %492 = extractelement <8 x i32> %456, i64 7
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds i16, ptr %input.host, i64 %493
  %495 = load i16, ptr %494, align 2, !tbaa !40
  %496 = insertelement <8 x i16> %491, i16 %495, i64 7
  %497 = uitofp <8 x i16> %496 to <8 x float>
  %498 = fmul <8 x float> %497, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %499 = add <8 x i32> %89, %t1955
  %500 = extractelement <8 x i32> %499, i64 0
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i16, ptr %input.host, i64 %501
  %503 = load i16, ptr %502, align 2, !tbaa !40
  %504 = insertelement <8 x i16> undef, i16 %503, i64 0
  %505 = extractelement <8 x i32> %499, i64 1
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i16, ptr %input.host, i64 %506
  %508 = load i16, ptr %507, align 2, !tbaa !40
  %509 = insertelement <8 x i16> %504, i16 %508, i64 1
  %510 = extractelement <8 x i32> %499, i64 2
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i16, ptr %input.host, i64 %511
  %513 = load i16, ptr %512, align 2, !tbaa !40
  %514 = insertelement <8 x i16> %509, i16 %513, i64 2
  %515 = extractelement <8 x i32> %499, i64 3
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds i16, ptr %input.host, i64 %516
  %518 = load i16, ptr %517, align 2, !tbaa !40
  %519 = insertelement <8 x i16> %514, i16 %518, i64 3
  %520 = extractelement <8 x i32> %499, i64 4
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i16, ptr %input.host, i64 %521
  %523 = load i16, ptr %522, align 2, !tbaa !40
  %524 = insertelement <8 x i16> %519, i16 %523, i64 4
  %525 = extractelement <8 x i32> %499, i64 5
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, ptr %input.host, i64 %526
  %528 = load i16, ptr %527, align 2, !tbaa !40
  %529 = insertelement <8 x i16> %524, i16 %528, i64 5
  %530 = extractelement <8 x i32> %499, i64 6
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i16, ptr %input.host, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !40
  %534 = insertelement <8 x i16> %529, i16 %533, i64 6
  %535 = extractelement <8 x i32> %499, i64 7
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds i16, ptr %input.host, i64 %536
  %538 = load i16, ptr %537, align 2, !tbaa !40
  %539 = insertelement <8 x i16> %534, i16 %538, i64 7
  %540 = uitofp <8 x i16> %539 to <8 x float>
  %541 = fmul <8 x float> %540, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %542 = add <8 x i32> %95, %t1955
  %543 = extractelement <8 x i32> %542, i64 0
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds i16, ptr %input.host, i64 %544
  %546 = load i16, ptr %545, align 2, !tbaa !40
  %547 = insertelement <8 x i16> undef, i16 %546, i64 0
  %548 = extractelement <8 x i32> %542, i64 1
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds i16, ptr %input.host, i64 %549
  %551 = load i16, ptr %550, align 2, !tbaa !40
  %552 = insertelement <8 x i16> %547, i16 %551, i64 1
  %553 = extractelement <8 x i32> %542, i64 2
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds i16, ptr %input.host, i64 %554
  %556 = load i16, ptr %555, align 2, !tbaa !40
  %557 = insertelement <8 x i16> %552, i16 %556, i64 2
  %558 = extractelement <8 x i32> %542, i64 3
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds i16, ptr %input.host, i64 %559
  %561 = load i16, ptr %560, align 2, !tbaa !40
  %562 = insertelement <8 x i16> %557, i16 %561, i64 3
  %563 = extractelement <8 x i32> %542, i64 4
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds i16, ptr %input.host, i64 %564
  %566 = load i16, ptr %565, align 2, !tbaa !40
  %567 = insertelement <8 x i16> %562, i16 %566, i64 4
  %568 = extractelement <8 x i32> %542, i64 5
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds i16, ptr %input.host, i64 %569
  %571 = load i16, ptr %570, align 2, !tbaa !40
  %572 = insertelement <8 x i16> %567, i16 %571, i64 5
  %573 = extractelement <8 x i32> %542, i64 6
  %574 = sext i32 %573 to i64
  %575 = getelementptr inbounds i16, ptr %input.host, i64 %574
  %576 = load i16, ptr %575, align 2, !tbaa !40
  %577 = insertelement <8 x i16> %572, i16 %576, i64 6
  %578 = extractelement <8 x i32> %542, i64 7
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds i16, ptr %input.host, i64 %579
  %581 = load i16, ptr %580, align 2, !tbaa !40
  %582 = insertelement <8 x i16> %577, i16 %581, i64 7
  %583 = uitofp <8 x i16> %582 to <8 x float>
  %584 = fmul <8 x float> %583, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %585 = fadd <8 x float> %541, %584
  %586 = fadd <8 x float> %498, %585
  %587 = sext i32 %f2.s0.v3.v283.base7 to i64
  %588 = add i64 %452, %587
  %589 = getelementptr inbounds float, ptr %f2.host, i64 %588
  store <8 x float> %586, ptr %589, align 4, !tbaa !42
  %lsr.iv.next52 = add i32 %lsr.iv51, -1
  %lsr.iv.next54 = add i32 %lsr.iv53, 8
  %.not7 = icmp eq i32 %lsr.iv.next52, 0
  br i1 %.not7, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34"

"end for f2.s0.v3.v35":                           ; preds = %"for f2.s0.v3.v34", %"end for f2.s0.v3.v32"
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %scevgep22 = getelementptr i1, ptr %lsr.iv20, i64 %36
  %lsr.iv.next31 = add i32 %lsr.iv30, %input.stride.1
  %.not5 = icmp eq i64 %indvars.iv.next28, 32
  br i1 %.not5, label %destructor_block, label %"for f2.s0.v4.v280"

destructor_block:                                 ; preds = %"end for f2.s0.v3.v313.loopexit.us", %"end for f2.s0.v3.v35", %"for f2.s0.v4.v2809.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f4.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f4.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f4.s0.v4.v296.preheader":
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 2
  %a304 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 3
  %f2.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 4
  %f2.v3.min_realized = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 5
  %f2.v4.min_realized = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 6
  %f4.s0.v3.max = load i32, ptr %5, align 4
  %6 = sext i32 %f4.s0.v3.max to i64
  %7 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 7
  %f4.s0.v3.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 8
  %f4.s0.v4.max = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 9
  %f4.s0.v4.min.s = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 10
  %f4.s0.v6.loop_extent.s = load i32, ptr %10, align 4
  %11 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 11
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = sext i32 %f4.stride.1 to i64
  %13 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 12
  %f4.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f4.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 13
  %f4.v3.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f4.v3.min_realized to i64
  %17 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 14
  %f4.v4.min_realized = load i32, ptr %17, align 4
  %18 = sext i32 %f4.v4.min_realized to i64
  %19 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 15
  %levels = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 16
  %f0.host = load ptr, ptr %20, align 8
  %21 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 18
  %f2.host = load ptr, ptr %21, align 8
  %22 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 20
  %f4.host = load ptr, ptr %22, align 8
  %23 = shl nsw i32 %f4.s0.v4.v4, 3
  %24 = add nsw i32 %f4.s0.v4.min.s, %23
  %a303 = add nsw i32 %24, -1
  %b305 = add nsw i32 %f4.s0.v4.max, -7
  %.not8 = icmp slt i32 %b305, %24
  %f4.s0.v4.v296.base = select i1 %.not8, i32 %b305, i32 %a303
  %25 = sext i32 %f4.s0.v4.v296.base to i64
  %26 = sub nsw i64 %25, %18
  %27 = shl nsw i64 %12, 2
  %28 = add nsw i64 %14, 1
  %29 = tail call i32 @llvm.smax.i32(i32 %a304, i32 0)
  %smax = zext i32 %29 to i64
  %30 = shl nsw i64 %14, 2
  %31 = add nsw i64 %30, 4
  %32 = shl i32 %f4.s0.v3.min.s, 1
  %33 = add i32 %f2.v3.extent_realized.s, 1
  %34 = shl i32 %f2.v3.extent_realized.s, 1
  %35 = add i32 %34, 2
  %36 = icmp sgt i32 %f4.s0.v6.loop_extent.s, -2
  %37 = sub nsw i32 %f4.s0.v3.max, %f4.s0.v3.min.s
  %38 = add nsw i32 %37, 2
  %a305 = lshr i32 %38, 3
  %39 = icmp sgt i32 %37, 5
  %40 = select i1 %39, i32 %a305, i32 0
  %.not9 = icmp eq i32 %40, 0
  %41 = add nsw i32 %37, 9
  %42 = ashr i32 %41, 3
  %43 = icmp sgt i32 %42, %40
  %44 = add nsw i32 %levels, -1
  %45 = sitofp i32 %44 to float
  %46 = fdiv float 1.000000e+00, %45
  %47 = insertelement <8 x float> undef, float %45, i64 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = shl nsw i32 %levels, 8
  %50 = add nsw i32 %49, -256
  %51 = insertelement <8 x i32> undef, i32 %50, i64 0
  %b309 = shufflevector <8 x i32> %51, <8 x i32> undef, <8 x i32> zeroinitializer
  %52 = insertelement <8 x float> undef, float %beta, i64 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = shl nsw i32 %f4.s0.v3.max, 1
  %55 = sub nsw i32 %54, %f2.v3.min_realized
  %56 = add nsw i64 %6, -7
  %57 = sub nsw i64 %56, %16
  br i1 %36, label %"for f4.s0.v4.v296.us.preheader", label %destructor_block, !prof !5

"for f4.s0.v4.v296.us.preheader":                 ; preds = %"for f4.s0.v4.v296.preheader"
  %58 = add nuw i32 %29, 2
  %59 = add i32 %58, %f4.s0.v6.loop_extent.s
  %60 = shl i32 %f4.s0.v4.v296.base, 1
  %61 = xor i32 %f2.v4.min_realized, -1
  %62 = add i32 %60, %61
  %63 = mul i32 %62, %33
  %64 = sub i32 %63, %f2.v3.min_realized
  %reass.sub = sub i32 %60, %f2.v4.min_realized
  %65 = mul i32 %reass.sub, %33
  %66 = sub i32 %65, %f2.v3.min_realized
  %67 = add i32 %reass.sub, 1
  %68 = mul i32 %67, %33
  %69 = sub i32 %68, %f2.v3.min_realized
  %70 = add i32 %reass.sub, 2
  %71 = mul i32 %70, %33
  %72 = sub i32 %71, %f2.v3.min_realized
  %73 = xor i64 %16, -1
  %74 = sext i32 %f4.s0.v3.min.s to i64
  %75 = add nsw i64 %73, %74
  %76 = mul nsw i64 %26, %12
  %77 = add i64 %75, %76
  %scevgep = getelementptr float, ptr %f4.host, i64 %77
  %78 = zext i32 %59 to i64
  br label %"for f4.s0.v4.v296.us"

"for f4.s0.v4.v296.us":                           ; preds = %"for f4.s0.v4.v296.us.preheader", %"end for f4.s0.v6.loopexit.us"
  %indvars.iv15 = phi i64 [ 0, %"for f4.s0.v4.v296.us.preheader" ], [ %indvars.iv.next16, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %64, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next27.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %66, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next23.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %69, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next19.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %72, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next15.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f4.s0.v4.v296.us.preheader" ], [ %scevgep6.us, %"end for f4.s0.v6.loopexit.us" ]
  %79 = trunc i64 %indvars.iv15 to i32
  %80 = add i32 %f4.s0.v4.v296.base, %79
  %81 = shl nsw i32 %80, 1
  %82 = sub nsw i32 %81, %f2.v4.min_realized
  %83 = add nsw i32 %82, -1
  %84 = mul nsw i32 %83, %33
  %t1996.us = add nsw i32 %84, %55
  %85 = sext i32 %t1996.us to i64
  %86 = add nsw i64 %85, -16
  %87 = getelementptr inbounds float, ptr %f2.host, i64 %86
  %88 = add nsw i64 %85, -8
  %89 = getelementptr inbounds float, ptr %f2.host, i64 %88
  %90 = add nsw i64 %85, -14
  %91 = getelementptr inbounds float, ptr %f2.host, i64 %90
  %92 = add nsw i64 %85, -6
  %93 = getelementptr inbounds float, ptr %f2.host, i64 %92
  %94 = add nsw i64 %85, -12
  %95 = getelementptr inbounds float, ptr %f2.host, i64 %94
  %96 = add nsw i64 %85, -4
  %97 = getelementptr inbounds float, ptr %f2.host, i64 %96
  %98 = mul nsw i32 %82, %33
  %t2001.us = add nsw i32 %98, %55
  %99 = sext i32 %t2001.us to i64
  %100 = add nsw i64 %99, -16
  %101 = getelementptr inbounds float, ptr %f2.host, i64 %100
  %102 = add nsw i64 %99, -8
  %103 = getelementptr inbounds float, ptr %f2.host, i64 %102
  %104 = add nsw i64 %99, -14
  %105 = getelementptr inbounds float, ptr %f2.host, i64 %104
  %106 = add nsw i64 %99, -6
  %107 = getelementptr inbounds float, ptr %f2.host, i64 %106
  %108 = add nsw i64 %99, -12
  %109 = getelementptr inbounds float, ptr %f2.host, i64 %108
  %110 = add nsw i64 %99, -4
  %111 = getelementptr inbounds float, ptr %f2.host, i64 %110
  %112 = add nsw i32 %82, 1
  %113 = mul nsw i32 %112, %33
  %t2006.us = add nsw i32 %113, %55
  %114 = sext i32 %t2006.us to i64
  %115 = add nsw i64 %114, -16
  %116 = getelementptr inbounds float, ptr %f2.host, i64 %115
  %117 = add nsw i64 %114, -8
  %118 = getelementptr inbounds float, ptr %f2.host, i64 %117
  %119 = add nsw i64 %114, -14
  %120 = getelementptr inbounds float, ptr %f2.host, i64 %119
  %121 = add nsw i64 %114, -6
  %122 = getelementptr inbounds float, ptr %f2.host, i64 %121
  %123 = add nsw i64 %114, -12
  %124 = getelementptr inbounds float, ptr %f2.host, i64 %123
  %125 = add nsw i64 %114, -4
  %126 = getelementptr inbounds float, ptr %f2.host, i64 %125
  %127 = add nsw i32 %82, 2
  %128 = mul nsw i32 %127, %33
  %t2011.us = add nsw i32 %128, %55
  %129 = sext i32 %t2011.us to i64
  %130 = add nsw i64 %129, -16
  %131 = getelementptr inbounds float, ptr %f2.host, i64 %130
  %132 = add nsw i64 %129, -8
  %133 = getelementptr inbounds float, ptr %f2.host, i64 %132
  %134 = add nsw i64 %129, -14
  %135 = getelementptr inbounds float, ptr %f2.host, i64 %134
  %136 = add nsw i64 %129, -6
  %137 = getelementptr inbounds float, ptr %f2.host, i64 %136
  %138 = add nsw i64 %129, -12
  %139 = getelementptr inbounds float, ptr %f2.host, i64 %138
  %140 = add nsw i64 %129, -4
  %141 = getelementptr inbounds float, ptr %f2.host, i64 %140
  %142 = add nsw i64 %26, %indvars.iv15
  %143 = mul nsw i64 %142, %12
  %144 = add i64 %57, %143
  br label %"for f4.s0.v6.us"

"for f4.s0.v6.us":                                ; preds = %"for f4.s0.v4.v296.us", %"end for f4.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f4.s0.v4.v296.us" ], [ %indvars.iv.next, %"end for f4.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f4.s0.v4.v296.us" ], [ %scevgep10.us, %"end for f4.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f4.s0.v3.v3.us", label %"for f4.s0.v3.v3.preheader.us", !prof !4

"for f4.s0.v3.v3.us":                             ; preds = %"for f4.s0.v3.v3.preheader.us", %"for f4.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f4.s0.v3.v3.us" ], [ %a305, %"for f4.s0.v3.v3.preheader.us" ]
  %145 = add i32 %lsr.iv28.us, %32
  %146 = sext i32 %145 to i64
  %147 = add nsw i64 %146, -4
  %148 = getelementptr inbounds float, ptr %f2.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !42
  %150 = add nsw i64 %146, 4
  %151 = getelementptr inbounds float, ptr %f2.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !42
  %t1973.us = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %153 = add nsw i64 %146, -2
  %154 = getelementptr inbounds float, ptr %f2.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !42
  %156 = add nsw i64 %146, 6
  %157 = getelementptr inbounds float, ptr %f2.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !42
  %t1974.us = shufflevector <8 x float> %155, <8 x float> %158, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1975.us = shufflevector <8 x float> %155, <8 x float> %158, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %159 = getelementptr inbounds float, ptr %f2.host, i64 %146
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !42
  %161 = add nsw i64 %146, 8
  %162 = getelementptr inbounds float, ptr %f2.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !42
  %t1976.us = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %164 = add i32 %lsr.iv24.us, %32
  %165 = sext i32 %164 to i64
  %166 = add nsw i64 %165, -4
  %167 = getelementptr inbounds float, ptr %f2.host, i64 %166
  %168 = load <8 x float>, ptr %167, align 4, !tbaa !42
  %169 = add nsw i64 %165, 4
  %170 = getelementptr inbounds float, ptr %f2.host, i64 %169
  %171 = load <8 x float>, ptr %170, align 4, !tbaa !42
  %t1978.us = shufflevector <8 x float> %168, <8 x float> %171, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %172 = add nsw i64 %165, -2
  %173 = getelementptr inbounds float, ptr %f2.host, i64 %172
  %174 = load <8 x float>, ptr %173, align 4, !tbaa !42
  %175 = add nsw i64 %165, 6
  %176 = getelementptr inbounds float, ptr %f2.host, i64 %175
  %177 = load <8 x float>, ptr %176, align 4, !tbaa !42
  %t1979.us = shufflevector <8 x float> %174, <8 x float> %177, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1980.us = shufflevector <8 x float> %174, <8 x float> %177, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %178 = getelementptr inbounds float, ptr %f2.host, i64 %165
  %179 = load <8 x float>, ptr %178, align 4, !tbaa !42
  %180 = add nsw i64 %165, 8
  %181 = getelementptr inbounds float, ptr %f2.host, i64 %180
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !42
  %t1981.us = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %183 = add i32 %lsr.iv20.us, %32
  %184 = sext i32 %183 to i64
  %185 = add nsw i64 %184, -4
  %186 = getelementptr inbounds float, ptr %f2.host, i64 %185
  %187 = load <8 x float>, ptr %186, align 4, !tbaa !42
  %188 = add nsw i64 %184, 4
  %189 = getelementptr inbounds float, ptr %f2.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !42
  %t1983.us = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %191 = add nsw i64 %184, -2
  %192 = getelementptr inbounds float, ptr %f2.host, i64 %191
  %193 = load <8 x float>, ptr %192, align 4, !tbaa !42
  %194 = add nsw i64 %184, 6
  %195 = getelementptr inbounds float, ptr %f2.host, i64 %194
  %196 = load <8 x float>, ptr %195, align 4, !tbaa !42
  %t1984.us = shufflevector <8 x float> %193, <8 x float> %196, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1985.us = shufflevector <8 x float> %193, <8 x float> %196, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %197 = getelementptr inbounds float, ptr %f2.host, i64 %184
  %198 = load <8 x float>, ptr %197, align 4, !tbaa !42
  %199 = add nsw i64 %184, 8
  %200 = getelementptr inbounds float, ptr %f2.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !42
  %t1986.us = shufflevector <8 x float> %198, <8 x float> %201, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %202 = add i32 %lsr.iv16.us, %32
  %203 = sext i32 %202 to i64
  %204 = add nsw i64 %203, -4
  %205 = getelementptr inbounds float, ptr %f2.host, i64 %204
  %206 = load <8 x float>, ptr %205, align 4, !tbaa !42
  %207 = add nsw i64 %203, 4
  %208 = getelementptr inbounds float, ptr %f2.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !42
  %t1988.us = shufflevector <8 x float> %206, <8 x float> %209, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %210 = add nsw i64 %203, -2
  %211 = getelementptr inbounds float, ptr %f2.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !42
  %213 = add nsw i64 %203, 6
  %214 = getelementptr inbounds float, ptr %f2.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !42
  %t1989.us = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1990.us = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %216 = getelementptr inbounds float, ptr %f2.host, i64 %203
  %217 = load <8 x float>, ptr %216, align 4, !tbaa !42
  %218 = add nsw i64 %203, 8
  %219 = getelementptr inbounds float, ptr %f2.host, i64 %218
  %220 = load <8 x float>, ptr %219, align 4, !tbaa !42
  %t1991.us = shufflevector <8 x float> %217, <8 x float> %220, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = fmul <8 x float> %48, %t1991.us
  %222 = fmul <8 x float> %221, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a307.us = fptosi <8 x float> %222 to <8 x i32>
  %a306.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a307.us)
  %223 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a306.us, <8 x i32> zeroinitializer)
  %224 = sub <8 x i32> %223, %1874
  %225 = add nsw <8 x i32> %224, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %226 = extractelement <8 x i32> %225, i64 0
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds float, ptr %f0.host, i64 %227
  %229 = load float, ptr %228, align 4, !tbaa !6
  %230 = insertelement <8 x float> undef, float %229, i64 0
  %231 = extractelement <8 x i32> %225, i64 1
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds float, ptr %f0.host, i64 %232
  %234 = load float, ptr %233, align 4, !tbaa !6
  %235 = insertelement <8 x float> %230, float %234, i64 1
  %236 = extractelement <8 x i32> %225, i64 2
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds float, ptr %f0.host, i64 %237
  %239 = load float, ptr %238, align 4, !tbaa !6
  %240 = insertelement <8 x float> %235, float %239, i64 2
  %241 = extractelement <8 x i32> %225, i64 3
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds float, ptr %f0.host, i64 %242
  %244 = load float, ptr %243, align 4, !tbaa !6
  %245 = insertelement <8 x float> %240, float %244, i64 3
  %246 = extractelement <8 x i32> %225, i64 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds float, ptr %f0.host, i64 %247
  %249 = load float, ptr %248, align 4, !tbaa !6
  %250 = insertelement <8 x float> %245, float %249, i64 4
  %251 = extractelement <8 x i32> %225, i64 5
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds float, ptr %f0.host, i64 %252
  %254 = load float, ptr %253, align 4, !tbaa !6
  %255 = insertelement <8 x float> %250, float %254, i64 5
  %256 = extractelement <8 x i32> %225, i64 6
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds float, ptr %f0.host, i64 %257
  %259 = load float, ptr %258, align 4, !tbaa !6
  %260 = insertelement <8 x float> %255, float %259, i64 6
  %261 = extractelement <8 x i32> %225, i64 7
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds float, ptr %f0.host, i64 %262
  %264 = load float, ptr %263, align 4, !tbaa !6
  %265 = insertelement <8 x float> %260, float %264, i64 7
  %266 = fsub <8 x float> %t1991.us, %1876
  %267 = fmul <8 x float> %53, %266
  %268 = fadd <8 x float> %1876, %267
  %269 = fadd <8 x float> %268, %265
  %270 = fmul <8 x float> %48, %t1990.us
  %271 = fmul <8 x float> %270, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a309.us = fptosi <8 x float> %271 to <8 x i32>
  %a308.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a309.us)
  %272 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a308.us, <8 x i32> zeroinitializer)
  %273 = sub <8 x i32> %272, %1874
  %274 = add nsw <8 x i32> %273, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %275 = extractelement <8 x i32> %274, i64 0
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds float, ptr %f0.host, i64 %276
  %278 = load float, ptr %277, align 4, !tbaa !6
  %279 = insertelement <8 x float> undef, float %278, i64 0
  %280 = extractelement <8 x i32> %274, i64 1
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds float, ptr %f0.host, i64 %281
  %283 = load float, ptr %282, align 4, !tbaa !6
  %284 = insertelement <8 x float> %279, float %283, i64 1
  %285 = extractelement <8 x i32> %274, i64 2
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds float, ptr %f0.host, i64 %286
  %288 = load float, ptr %287, align 4, !tbaa !6
  %289 = insertelement <8 x float> %284, float %288, i64 2
  %290 = extractelement <8 x i32> %274, i64 3
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds float, ptr %f0.host, i64 %291
  %293 = load float, ptr %292, align 4, !tbaa !6
  %294 = insertelement <8 x float> %289, float %293, i64 3
  %295 = extractelement <8 x i32> %274, i64 4
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds float, ptr %f0.host, i64 %296
  %298 = load float, ptr %297, align 4, !tbaa !6
  %299 = insertelement <8 x float> %294, float %298, i64 4
  %300 = extractelement <8 x i32> %274, i64 5
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds float, ptr %f0.host, i64 %301
  %303 = load float, ptr %302, align 4, !tbaa !6
  %304 = insertelement <8 x float> %299, float %303, i64 5
  %305 = extractelement <8 x i32> %274, i64 6
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds float, ptr %f0.host, i64 %306
  %308 = load float, ptr %307, align 4, !tbaa !6
  %309 = insertelement <8 x float> %304, float %308, i64 6
  %310 = extractelement <8 x i32> %274, i64 7
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds float, ptr %f0.host, i64 %311
  %313 = load float, ptr %312, align 4, !tbaa !6
  %314 = insertelement <8 x float> %309, float %313, i64 7
  %315 = fsub <8 x float> %t1990.us, %1876
  %316 = fmul <8 x float> %53, %315
  %317 = fadd <8 x float> %1876, %316
  %318 = fadd <8 x float> %317, %314
  %319 = fmul <8 x float> %48, %t1989.us
  %320 = fmul <8 x float> %319, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a311.us = fptosi <8 x float> %320 to <8 x i32>
  %a310.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a311.us)
  %321 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a310.us, <8 x i32> zeroinitializer)
  %322 = sub <8 x i32> %321, %1874
  %323 = add nsw <8 x i32> %322, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %324 = extractelement <8 x i32> %323, i64 0
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds float, ptr %f0.host, i64 %325
  %327 = load float, ptr %326, align 4, !tbaa !6
  %328 = insertelement <8 x float> undef, float %327, i64 0
  %329 = extractelement <8 x i32> %323, i64 1
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds float, ptr %f0.host, i64 %330
  %332 = load float, ptr %331, align 4, !tbaa !6
  %333 = insertelement <8 x float> %328, float %332, i64 1
  %334 = extractelement <8 x i32> %323, i64 2
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds float, ptr %f0.host, i64 %335
  %337 = load float, ptr %336, align 4, !tbaa !6
  %338 = insertelement <8 x float> %333, float %337, i64 2
  %339 = extractelement <8 x i32> %323, i64 3
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds float, ptr %f0.host, i64 %340
  %342 = load float, ptr %341, align 4, !tbaa !6
  %343 = insertelement <8 x float> %338, float %342, i64 3
  %344 = extractelement <8 x i32> %323, i64 4
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds float, ptr %f0.host, i64 %345
  %347 = load float, ptr %346, align 4, !tbaa !6
  %348 = insertelement <8 x float> %343, float %347, i64 4
  %349 = extractelement <8 x i32> %323, i64 5
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds float, ptr %f0.host, i64 %350
  %352 = load float, ptr %351, align 4, !tbaa !6
  %353 = insertelement <8 x float> %348, float %352, i64 5
  %354 = extractelement <8 x i32> %323, i64 6
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds float, ptr %f0.host, i64 %355
  %357 = load float, ptr %356, align 4, !tbaa !6
  %358 = insertelement <8 x float> %353, float %357, i64 6
  %359 = extractelement <8 x i32> %323, i64 7
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds float, ptr %f0.host, i64 %360
  %362 = load float, ptr %361, align 4, !tbaa !6
  %363 = insertelement <8 x float> %358, float %362, i64 7
  %364 = fsub <8 x float> %t1989.us, %1876
  %365 = fmul <8 x float> %53, %364
  %366 = fadd <8 x float> %1876, %365
  %367 = fadd <8 x float> %366, %363
  %368 = fadd <8 x float> %318, %367
  %369 = fmul <8 x float> %368, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %370 = fmul <8 x float> %48, %t1988.us
  %371 = fmul <8 x float> %370, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a313.us = fptosi <8 x float> %371 to <8 x i32>
  %a312.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a313.us)
  %372 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a312.us, <8 x i32> zeroinitializer)
  %373 = sub <8 x i32> %372, %1874
  %374 = add nsw <8 x i32> %373, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %375 = extractelement <8 x i32> %374, i64 0
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds float, ptr %f0.host, i64 %376
  %378 = load float, ptr %377, align 4, !tbaa !6
  %379 = insertelement <8 x float> undef, float %378, i64 0
  %380 = extractelement <8 x i32> %374, i64 1
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds float, ptr %f0.host, i64 %381
  %383 = load float, ptr %382, align 4, !tbaa !6
  %384 = insertelement <8 x float> %379, float %383, i64 1
  %385 = extractelement <8 x i32> %374, i64 2
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds float, ptr %f0.host, i64 %386
  %388 = load float, ptr %387, align 4, !tbaa !6
  %389 = insertelement <8 x float> %384, float %388, i64 2
  %390 = extractelement <8 x i32> %374, i64 3
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds float, ptr %f0.host, i64 %391
  %393 = load float, ptr %392, align 4, !tbaa !6
  %394 = insertelement <8 x float> %389, float %393, i64 3
  %395 = extractelement <8 x i32> %374, i64 4
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds float, ptr %f0.host, i64 %396
  %398 = load float, ptr %397, align 4, !tbaa !6
  %399 = insertelement <8 x float> %394, float %398, i64 4
  %400 = extractelement <8 x i32> %374, i64 5
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds float, ptr %f0.host, i64 %401
  %403 = load float, ptr %402, align 4, !tbaa !6
  %404 = insertelement <8 x float> %399, float %403, i64 5
  %405 = extractelement <8 x i32> %374, i64 6
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds float, ptr %f0.host, i64 %406
  %408 = load float, ptr %407, align 4, !tbaa !6
  %409 = insertelement <8 x float> %404, float %408, i64 6
  %410 = extractelement <8 x i32> %374, i64 7
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds float, ptr %f0.host, i64 %411
  %413 = load float, ptr %412, align 4, !tbaa !6
  %414 = insertelement <8 x float> %409, float %413, i64 7
  %415 = fsub <8 x float> %t1988.us, %1876
  %416 = fmul <8 x float> %53, %415
  %417 = fadd <8 x float> %1876, %416
  %418 = fadd <8 x float> %417, %414
  %419 = fadd <8 x float> %369, %418
  %420 = fadd <8 x float> %269, %419
  %421 = fmul <8 x float> %420, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %422 = fmul <8 x float> %48, %t1986.us
  %423 = fmul <8 x float> %422, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a315.us = fptosi <8 x float> %423 to <8 x i32>
  %a314.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a315.us)
  %424 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a314.us, <8 x i32> zeroinitializer)
  %425 = sub <8 x i32> %424, %1874
  %426 = add nsw <8 x i32> %425, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %427 = extractelement <8 x i32> %426, i64 0
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds float, ptr %f0.host, i64 %428
  %430 = load float, ptr %429, align 4, !tbaa !6
  %431 = insertelement <8 x float> undef, float %430, i64 0
  %432 = extractelement <8 x i32> %426, i64 1
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds float, ptr %f0.host, i64 %433
  %435 = load float, ptr %434, align 4, !tbaa !6
  %436 = insertelement <8 x float> %431, float %435, i64 1
  %437 = extractelement <8 x i32> %426, i64 2
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds float, ptr %f0.host, i64 %438
  %440 = load float, ptr %439, align 4, !tbaa !6
  %441 = insertelement <8 x float> %436, float %440, i64 2
  %442 = extractelement <8 x i32> %426, i64 3
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds float, ptr %f0.host, i64 %443
  %445 = load float, ptr %444, align 4, !tbaa !6
  %446 = insertelement <8 x float> %441, float %445, i64 3
  %447 = extractelement <8 x i32> %426, i64 4
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds float, ptr %f0.host, i64 %448
  %450 = load float, ptr %449, align 4, !tbaa !6
  %451 = insertelement <8 x float> %446, float %450, i64 4
  %452 = extractelement <8 x i32> %426, i64 5
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds float, ptr %f0.host, i64 %453
  %455 = load float, ptr %454, align 4, !tbaa !6
  %456 = insertelement <8 x float> %451, float %455, i64 5
  %457 = extractelement <8 x i32> %426, i64 6
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds float, ptr %f0.host, i64 %458
  %460 = load float, ptr %459, align 4, !tbaa !6
  %461 = insertelement <8 x float> %456, float %460, i64 6
  %462 = extractelement <8 x i32> %426, i64 7
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds float, ptr %f0.host, i64 %463
  %465 = load float, ptr %464, align 4, !tbaa !6
  %466 = insertelement <8 x float> %461, float %465, i64 7
  %467 = fsub <8 x float> %t1986.us, %1876
  %468 = fmul <8 x float> %53, %467
  %469 = fadd <8 x float> %1876, %468
  %470 = fadd <8 x float> %469, %466
  %471 = fmul <8 x float> %48, %t1985.us
  %472 = fmul <8 x float> %471, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a317.us = fptosi <8 x float> %472 to <8 x i32>
  %a316.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a317.us)
  %473 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a316.us, <8 x i32> zeroinitializer)
  %474 = sub <8 x i32> %473, %1874
  %475 = add nsw <8 x i32> %474, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %476 = extractelement <8 x i32> %475, i64 0
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds float, ptr %f0.host, i64 %477
  %479 = load float, ptr %478, align 4, !tbaa !6
  %480 = insertelement <8 x float> undef, float %479, i64 0
  %481 = extractelement <8 x i32> %475, i64 1
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds float, ptr %f0.host, i64 %482
  %484 = load float, ptr %483, align 4, !tbaa !6
  %485 = insertelement <8 x float> %480, float %484, i64 1
  %486 = extractelement <8 x i32> %475, i64 2
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds float, ptr %f0.host, i64 %487
  %489 = load float, ptr %488, align 4, !tbaa !6
  %490 = insertelement <8 x float> %485, float %489, i64 2
  %491 = extractelement <8 x i32> %475, i64 3
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds float, ptr %f0.host, i64 %492
  %494 = load float, ptr %493, align 4, !tbaa !6
  %495 = insertelement <8 x float> %490, float %494, i64 3
  %496 = extractelement <8 x i32> %475, i64 4
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds float, ptr %f0.host, i64 %497
  %499 = load float, ptr %498, align 4, !tbaa !6
  %500 = insertelement <8 x float> %495, float %499, i64 4
  %501 = extractelement <8 x i32> %475, i64 5
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds float, ptr %f0.host, i64 %502
  %504 = load float, ptr %503, align 4, !tbaa !6
  %505 = insertelement <8 x float> %500, float %504, i64 5
  %506 = extractelement <8 x i32> %475, i64 6
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds float, ptr %f0.host, i64 %507
  %509 = load float, ptr %508, align 4, !tbaa !6
  %510 = insertelement <8 x float> %505, float %509, i64 6
  %511 = extractelement <8 x i32> %475, i64 7
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds float, ptr %f0.host, i64 %512
  %514 = load float, ptr %513, align 4, !tbaa !6
  %515 = insertelement <8 x float> %510, float %514, i64 7
  %516 = fsub <8 x float> %t1985.us, %1876
  %517 = fmul <8 x float> %53, %516
  %518 = fadd <8 x float> %1876, %517
  %519 = fadd <8 x float> %518, %515
  %520 = fmul <8 x float> %48, %t1984.us
  %521 = fmul <8 x float> %520, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a319.us = fptosi <8 x float> %521 to <8 x i32>
  %a318.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a319.us)
  %522 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a318.us, <8 x i32> zeroinitializer)
  %523 = sub <8 x i32> %522, %1874
  %524 = add nsw <8 x i32> %523, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %525 = extractelement <8 x i32> %524, i64 0
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds float, ptr %f0.host, i64 %526
  %528 = load float, ptr %527, align 4, !tbaa !6
  %529 = insertelement <8 x float> undef, float %528, i64 0
  %530 = extractelement <8 x i32> %524, i64 1
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds float, ptr %f0.host, i64 %531
  %533 = load float, ptr %532, align 4, !tbaa !6
  %534 = insertelement <8 x float> %529, float %533, i64 1
  %535 = extractelement <8 x i32> %524, i64 2
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds float, ptr %f0.host, i64 %536
  %538 = load float, ptr %537, align 4, !tbaa !6
  %539 = insertelement <8 x float> %534, float %538, i64 2
  %540 = extractelement <8 x i32> %524, i64 3
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds float, ptr %f0.host, i64 %541
  %543 = load float, ptr %542, align 4, !tbaa !6
  %544 = insertelement <8 x float> %539, float %543, i64 3
  %545 = extractelement <8 x i32> %524, i64 4
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds float, ptr %f0.host, i64 %546
  %548 = load float, ptr %547, align 4, !tbaa !6
  %549 = insertelement <8 x float> %544, float %548, i64 4
  %550 = extractelement <8 x i32> %524, i64 5
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds float, ptr %f0.host, i64 %551
  %553 = load float, ptr %552, align 4, !tbaa !6
  %554 = insertelement <8 x float> %549, float %553, i64 5
  %555 = extractelement <8 x i32> %524, i64 6
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds float, ptr %f0.host, i64 %556
  %558 = load float, ptr %557, align 4, !tbaa !6
  %559 = insertelement <8 x float> %554, float %558, i64 6
  %560 = extractelement <8 x i32> %524, i64 7
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds float, ptr %f0.host, i64 %561
  %563 = load float, ptr %562, align 4, !tbaa !6
  %564 = insertelement <8 x float> %559, float %563, i64 7
  %565 = fsub <8 x float> %t1984.us, %1876
  %566 = fmul <8 x float> %53, %565
  %567 = fadd <8 x float> %1876, %566
  %568 = fadd <8 x float> %567, %564
  %569 = fadd <8 x float> %519, %568
  %570 = fmul <8 x float> %569, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %571 = fmul <8 x float> %48, %t1983.us
  %572 = fmul <8 x float> %571, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a321.us = fptosi <8 x float> %572 to <8 x i32>
  %a320.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a321.us)
  %573 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a320.us, <8 x i32> zeroinitializer)
  %574 = sub <8 x i32> %573, %1874
  %575 = add nsw <8 x i32> %574, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %576 = extractelement <8 x i32> %575, i64 0
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds float, ptr %f0.host, i64 %577
  %579 = load float, ptr %578, align 4, !tbaa !6
  %580 = insertelement <8 x float> undef, float %579, i64 0
  %581 = extractelement <8 x i32> %575, i64 1
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds float, ptr %f0.host, i64 %582
  %584 = load float, ptr %583, align 4, !tbaa !6
  %585 = insertelement <8 x float> %580, float %584, i64 1
  %586 = extractelement <8 x i32> %575, i64 2
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds float, ptr %f0.host, i64 %587
  %589 = load float, ptr %588, align 4, !tbaa !6
  %590 = insertelement <8 x float> %585, float %589, i64 2
  %591 = extractelement <8 x i32> %575, i64 3
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds float, ptr %f0.host, i64 %592
  %594 = load float, ptr %593, align 4, !tbaa !6
  %595 = insertelement <8 x float> %590, float %594, i64 3
  %596 = extractelement <8 x i32> %575, i64 4
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds float, ptr %f0.host, i64 %597
  %599 = load float, ptr %598, align 4, !tbaa !6
  %600 = insertelement <8 x float> %595, float %599, i64 4
  %601 = extractelement <8 x i32> %575, i64 5
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds float, ptr %f0.host, i64 %602
  %604 = load float, ptr %603, align 4, !tbaa !6
  %605 = insertelement <8 x float> %600, float %604, i64 5
  %606 = extractelement <8 x i32> %575, i64 6
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds float, ptr %f0.host, i64 %607
  %609 = load float, ptr %608, align 4, !tbaa !6
  %610 = insertelement <8 x float> %605, float %609, i64 6
  %611 = extractelement <8 x i32> %575, i64 7
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds float, ptr %f0.host, i64 %612
  %614 = load float, ptr %613, align 4, !tbaa !6
  %615 = insertelement <8 x float> %610, float %614, i64 7
  %616 = fsub <8 x float> %t1983.us, %1876
  %617 = fmul <8 x float> %53, %616
  %618 = fadd <8 x float> %1876, %617
  %619 = fadd <8 x float> %618, %615
  %620 = fadd <8 x float> %570, %619
  %621 = fadd <8 x float> %470, %620
  %622 = fmul <8 x float> %48, %t1981.us
  %623 = fmul <8 x float> %622, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a323.us = fptosi <8 x float> %623 to <8 x i32>
  %a322.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a323.us)
  %624 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a322.us, <8 x i32> zeroinitializer)
  %625 = sub <8 x i32> %624, %1874
  %626 = add nsw <8 x i32> %625, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %627 = extractelement <8 x i32> %626, i64 0
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds float, ptr %f0.host, i64 %628
  %630 = load float, ptr %629, align 4, !tbaa !6
  %631 = insertelement <8 x float> undef, float %630, i64 0
  %632 = extractelement <8 x i32> %626, i64 1
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds float, ptr %f0.host, i64 %633
  %635 = load float, ptr %634, align 4, !tbaa !6
  %636 = insertelement <8 x float> %631, float %635, i64 1
  %637 = extractelement <8 x i32> %626, i64 2
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds float, ptr %f0.host, i64 %638
  %640 = load float, ptr %639, align 4, !tbaa !6
  %641 = insertelement <8 x float> %636, float %640, i64 2
  %642 = extractelement <8 x i32> %626, i64 3
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds float, ptr %f0.host, i64 %643
  %645 = load float, ptr %644, align 4, !tbaa !6
  %646 = insertelement <8 x float> %641, float %645, i64 3
  %647 = extractelement <8 x i32> %626, i64 4
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds float, ptr %f0.host, i64 %648
  %650 = load float, ptr %649, align 4, !tbaa !6
  %651 = insertelement <8 x float> %646, float %650, i64 4
  %652 = extractelement <8 x i32> %626, i64 5
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds float, ptr %f0.host, i64 %653
  %655 = load float, ptr %654, align 4, !tbaa !6
  %656 = insertelement <8 x float> %651, float %655, i64 5
  %657 = extractelement <8 x i32> %626, i64 6
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds float, ptr %f0.host, i64 %658
  %660 = load float, ptr %659, align 4, !tbaa !6
  %661 = insertelement <8 x float> %656, float %660, i64 6
  %662 = extractelement <8 x i32> %626, i64 7
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds float, ptr %f0.host, i64 %663
  %665 = load float, ptr %664, align 4, !tbaa !6
  %666 = insertelement <8 x float> %661, float %665, i64 7
  %667 = fsub <8 x float> %t1981.us, %1876
  %668 = fmul <8 x float> %53, %667
  %669 = fadd <8 x float> %1876, %668
  %670 = fadd <8 x float> %669, %666
  %671 = fmul <8 x float> %48, %t1980.us
  %672 = fmul <8 x float> %671, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a325.us = fptosi <8 x float> %672 to <8 x i32>
  %a324.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a325.us)
  %673 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a324.us, <8 x i32> zeroinitializer)
  %674 = sub <8 x i32> %673, %1874
  %675 = add nsw <8 x i32> %674, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %676 = extractelement <8 x i32> %675, i64 0
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds float, ptr %f0.host, i64 %677
  %679 = load float, ptr %678, align 4, !tbaa !6
  %680 = insertelement <8 x float> undef, float %679, i64 0
  %681 = extractelement <8 x i32> %675, i64 1
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds float, ptr %f0.host, i64 %682
  %684 = load float, ptr %683, align 4, !tbaa !6
  %685 = insertelement <8 x float> %680, float %684, i64 1
  %686 = extractelement <8 x i32> %675, i64 2
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds float, ptr %f0.host, i64 %687
  %689 = load float, ptr %688, align 4, !tbaa !6
  %690 = insertelement <8 x float> %685, float %689, i64 2
  %691 = extractelement <8 x i32> %675, i64 3
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds float, ptr %f0.host, i64 %692
  %694 = load float, ptr %693, align 4, !tbaa !6
  %695 = insertelement <8 x float> %690, float %694, i64 3
  %696 = extractelement <8 x i32> %675, i64 4
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds float, ptr %f0.host, i64 %697
  %699 = load float, ptr %698, align 4, !tbaa !6
  %700 = insertelement <8 x float> %695, float %699, i64 4
  %701 = extractelement <8 x i32> %675, i64 5
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds float, ptr %f0.host, i64 %702
  %704 = load float, ptr %703, align 4, !tbaa !6
  %705 = insertelement <8 x float> %700, float %704, i64 5
  %706 = extractelement <8 x i32> %675, i64 6
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds float, ptr %f0.host, i64 %707
  %709 = load float, ptr %708, align 4, !tbaa !6
  %710 = insertelement <8 x float> %705, float %709, i64 6
  %711 = extractelement <8 x i32> %675, i64 7
  %712 = sext i32 %711 to i64
  %713 = getelementptr inbounds float, ptr %f0.host, i64 %712
  %714 = load float, ptr %713, align 4, !tbaa !6
  %715 = insertelement <8 x float> %710, float %714, i64 7
  %716 = fsub <8 x float> %t1980.us, %1876
  %717 = fmul <8 x float> %53, %716
  %718 = fadd <8 x float> %1876, %717
  %719 = fadd <8 x float> %718, %715
  %720 = fmul <8 x float> %48, %t1979.us
  %721 = fmul <8 x float> %720, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a327.us = fptosi <8 x float> %721 to <8 x i32>
  %a326.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a327.us)
  %722 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a326.us, <8 x i32> zeroinitializer)
  %723 = sub <8 x i32> %722, %1874
  %724 = add nsw <8 x i32> %723, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %725 = extractelement <8 x i32> %724, i64 0
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds float, ptr %f0.host, i64 %726
  %728 = load float, ptr %727, align 4, !tbaa !6
  %729 = insertelement <8 x float> undef, float %728, i64 0
  %730 = extractelement <8 x i32> %724, i64 1
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds float, ptr %f0.host, i64 %731
  %733 = load float, ptr %732, align 4, !tbaa !6
  %734 = insertelement <8 x float> %729, float %733, i64 1
  %735 = extractelement <8 x i32> %724, i64 2
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds float, ptr %f0.host, i64 %736
  %738 = load float, ptr %737, align 4, !tbaa !6
  %739 = insertelement <8 x float> %734, float %738, i64 2
  %740 = extractelement <8 x i32> %724, i64 3
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds float, ptr %f0.host, i64 %741
  %743 = load float, ptr %742, align 4, !tbaa !6
  %744 = insertelement <8 x float> %739, float %743, i64 3
  %745 = extractelement <8 x i32> %724, i64 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds float, ptr %f0.host, i64 %746
  %748 = load float, ptr %747, align 4, !tbaa !6
  %749 = insertelement <8 x float> %744, float %748, i64 4
  %750 = extractelement <8 x i32> %724, i64 5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds float, ptr %f0.host, i64 %751
  %753 = load float, ptr %752, align 4, !tbaa !6
  %754 = insertelement <8 x float> %749, float %753, i64 5
  %755 = extractelement <8 x i32> %724, i64 6
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds float, ptr %f0.host, i64 %756
  %758 = load float, ptr %757, align 4, !tbaa !6
  %759 = insertelement <8 x float> %754, float %758, i64 6
  %760 = extractelement <8 x i32> %724, i64 7
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds float, ptr %f0.host, i64 %761
  %763 = load float, ptr %762, align 4, !tbaa !6
  %764 = insertelement <8 x float> %759, float %763, i64 7
  %765 = fsub <8 x float> %t1979.us, %1876
  %766 = fmul <8 x float> %53, %765
  %767 = fadd <8 x float> %1876, %766
  %768 = fadd <8 x float> %767, %764
  %769 = fadd <8 x float> %719, %768
  %770 = fmul <8 x float> %769, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %771 = fmul <8 x float> %48, %t1978.us
  %772 = fmul <8 x float> %771, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a329.us = fptosi <8 x float> %772 to <8 x i32>
  %a328.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a329.us)
  %773 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a328.us, <8 x i32> zeroinitializer)
  %774 = sub <8 x i32> %773, %1874
  %775 = add nsw <8 x i32> %774, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %776 = extractelement <8 x i32> %775, i64 0
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds float, ptr %f0.host, i64 %777
  %779 = load float, ptr %778, align 4, !tbaa !6
  %780 = insertelement <8 x float> undef, float %779, i64 0
  %781 = extractelement <8 x i32> %775, i64 1
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds float, ptr %f0.host, i64 %782
  %784 = load float, ptr %783, align 4, !tbaa !6
  %785 = insertelement <8 x float> %780, float %784, i64 1
  %786 = extractelement <8 x i32> %775, i64 2
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds float, ptr %f0.host, i64 %787
  %789 = load float, ptr %788, align 4, !tbaa !6
  %790 = insertelement <8 x float> %785, float %789, i64 2
  %791 = extractelement <8 x i32> %775, i64 3
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds float, ptr %f0.host, i64 %792
  %794 = load float, ptr %793, align 4, !tbaa !6
  %795 = insertelement <8 x float> %790, float %794, i64 3
  %796 = extractelement <8 x i32> %775, i64 4
  %797 = sext i32 %796 to i64
  %798 = getelementptr inbounds float, ptr %f0.host, i64 %797
  %799 = load float, ptr %798, align 4, !tbaa !6
  %800 = insertelement <8 x float> %795, float %799, i64 4
  %801 = extractelement <8 x i32> %775, i64 5
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds float, ptr %f0.host, i64 %802
  %804 = load float, ptr %803, align 4, !tbaa !6
  %805 = insertelement <8 x float> %800, float %804, i64 5
  %806 = extractelement <8 x i32> %775, i64 6
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds float, ptr %f0.host, i64 %807
  %809 = load float, ptr %808, align 4, !tbaa !6
  %810 = insertelement <8 x float> %805, float %809, i64 6
  %811 = extractelement <8 x i32> %775, i64 7
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds float, ptr %f0.host, i64 %812
  %814 = load float, ptr %813, align 4, !tbaa !6
  %815 = insertelement <8 x float> %810, float %814, i64 7
  %816 = fsub <8 x float> %t1978.us, %1876
  %817 = fmul <8 x float> %53, %816
  %818 = fadd <8 x float> %1876, %817
  %819 = fadd <8 x float> %818, %815
  %820 = fadd <8 x float> %770, %819
  %821 = fadd <8 x float> %670, %820
  %822 = fadd <8 x float> %621, %821
  %823 = fmul <8 x float> %822, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %824 = fmul <8 x float> %48, %t1976.us
  %825 = fmul <8 x float> %824, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a331.us = fptosi <8 x float> %825 to <8 x i32>
  %a330.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a331.us)
  %826 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a330.us, <8 x i32> zeroinitializer)
  %827 = sub <8 x i32> %826, %1874
  %828 = add nsw <8 x i32> %827, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %829 = extractelement <8 x i32> %828, i64 0
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds float, ptr %f0.host, i64 %830
  %832 = load float, ptr %831, align 4, !tbaa !6
  %833 = insertelement <8 x float> undef, float %832, i64 0
  %834 = extractelement <8 x i32> %828, i64 1
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds float, ptr %f0.host, i64 %835
  %837 = load float, ptr %836, align 4, !tbaa !6
  %838 = insertelement <8 x float> %833, float %837, i64 1
  %839 = extractelement <8 x i32> %828, i64 2
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds float, ptr %f0.host, i64 %840
  %842 = load float, ptr %841, align 4, !tbaa !6
  %843 = insertelement <8 x float> %838, float %842, i64 2
  %844 = extractelement <8 x i32> %828, i64 3
  %845 = sext i32 %844 to i64
  %846 = getelementptr inbounds float, ptr %f0.host, i64 %845
  %847 = load float, ptr %846, align 4, !tbaa !6
  %848 = insertelement <8 x float> %843, float %847, i64 3
  %849 = extractelement <8 x i32> %828, i64 4
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds float, ptr %f0.host, i64 %850
  %852 = load float, ptr %851, align 4, !tbaa !6
  %853 = insertelement <8 x float> %848, float %852, i64 4
  %854 = extractelement <8 x i32> %828, i64 5
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds float, ptr %f0.host, i64 %855
  %857 = load float, ptr %856, align 4, !tbaa !6
  %858 = insertelement <8 x float> %853, float %857, i64 5
  %859 = extractelement <8 x i32> %828, i64 6
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds float, ptr %f0.host, i64 %860
  %862 = load float, ptr %861, align 4, !tbaa !6
  %863 = insertelement <8 x float> %858, float %862, i64 6
  %864 = extractelement <8 x i32> %828, i64 7
  %865 = sext i32 %864 to i64
  %866 = getelementptr inbounds float, ptr %f0.host, i64 %865
  %867 = load float, ptr %866, align 4, !tbaa !6
  %868 = insertelement <8 x float> %863, float %867, i64 7
  %869 = fsub <8 x float> %t1976.us, %1876
  %870 = fmul <8 x float> %53, %869
  %871 = fadd <8 x float> %1876, %870
  %872 = fadd <8 x float> %871, %868
  %873 = fmul <8 x float> %48, %t1975.us
  %874 = fmul <8 x float> %873, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a333.us = fptosi <8 x float> %874 to <8 x i32>
  %a332.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a333.us)
  %875 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a332.us, <8 x i32> zeroinitializer)
  %876 = sub <8 x i32> %875, %1874
  %877 = add nsw <8 x i32> %876, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %878 = extractelement <8 x i32> %877, i64 0
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds float, ptr %f0.host, i64 %879
  %881 = load float, ptr %880, align 4, !tbaa !6
  %882 = insertelement <8 x float> undef, float %881, i64 0
  %883 = extractelement <8 x i32> %877, i64 1
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds float, ptr %f0.host, i64 %884
  %886 = load float, ptr %885, align 4, !tbaa !6
  %887 = insertelement <8 x float> %882, float %886, i64 1
  %888 = extractelement <8 x i32> %877, i64 2
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds float, ptr %f0.host, i64 %889
  %891 = load float, ptr %890, align 4, !tbaa !6
  %892 = insertelement <8 x float> %887, float %891, i64 2
  %893 = extractelement <8 x i32> %877, i64 3
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds float, ptr %f0.host, i64 %894
  %896 = load float, ptr %895, align 4, !tbaa !6
  %897 = insertelement <8 x float> %892, float %896, i64 3
  %898 = extractelement <8 x i32> %877, i64 4
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds float, ptr %f0.host, i64 %899
  %901 = load float, ptr %900, align 4, !tbaa !6
  %902 = insertelement <8 x float> %897, float %901, i64 4
  %903 = extractelement <8 x i32> %877, i64 5
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds float, ptr %f0.host, i64 %904
  %906 = load float, ptr %905, align 4, !tbaa !6
  %907 = insertelement <8 x float> %902, float %906, i64 5
  %908 = extractelement <8 x i32> %877, i64 6
  %909 = sext i32 %908 to i64
  %910 = getelementptr inbounds float, ptr %f0.host, i64 %909
  %911 = load float, ptr %910, align 4, !tbaa !6
  %912 = insertelement <8 x float> %907, float %911, i64 6
  %913 = extractelement <8 x i32> %877, i64 7
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds float, ptr %f0.host, i64 %914
  %916 = load float, ptr %915, align 4, !tbaa !6
  %917 = insertelement <8 x float> %912, float %916, i64 7
  %918 = fsub <8 x float> %t1975.us, %1876
  %919 = fmul <8 x float> %53, %918
  %920 = fadd <8 x float> %1876, %919
  %921 = fadd <8 x float> %920, %917
  %922 = fmul <8 x float> %48, %t1974.us
  %923 = fmul <8 x float> %922, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a335.us = fptosi <8 x float> %923 to <8 x i32>
  %a334.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a335.us)
  %924 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a334.us, <8 x i32> zeroinitializer)
  %925 = sub <8 x i32> %924, %1874
  %926 = add nsw <8 x i32> %925, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %927 = extractelement <8 x i32> %926, i64 0
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds float, ptr %f0.host, i64 %928
  %930 = load float, ptr %929, align 4, !tbaa !6
  %931 = insertelement <8 x float> undef, float %930, i64 0
  %932 = extractelement <8 x i32> %926, i64 1
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds float, ptr %f0.host, i64 %933
  %935 = load float, ptr %934, align 4, !tbaa !6
  %936 = insertelement <8 x float> %931, float %935, i64 1
  %937 = extractelement <8 x i32> %926, i64 2
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds float, ptr %f0.host, i64 %938
  %940 = load float, ptr %939, align 4, !tbaa !6
  %941 = insertelement <8 x float> %936, float %940, i64 2
  %942 = extractelement <8 x i32> %926, i64 3
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds float, ptr %f0.host, i64 %943
  %945 = load float, ptr %944, align 4, !tbaa !6
  %946 = insertelement <8 x float> %941, float %945, i64 3
  %947 = extractelement <8 x i32> %926, i64 4
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds float, ptr %f0.host, i64 %948
  %950 = load float, ptr %949, align 4, !tbaa !6
  %951 = insertelement <8 x float> %946, float %950, i64 4
  %952 = extractelement <8 x i32> %926, i64 5
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds float, ptr %f0.host, i64 %953
  %955 = load float, ptr %954, align 4, !tbaa !6
  %956 = insertelement <8 x float> %951, float %955, i64 5
  %957 = extractelement <8 x i32> %926, i64 6
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds float, ptr %f0.host, i64 %958
  %960 = load float, ptr %959, align 4, !tbaa !6
  %961 = insertelement <8 x float> %956, float %960, i64 6
  %962 = extractelement <8 x i32> %926, i64 7
  %963 = sext i32 %962 to i64
  %964 = getelementptr inbounds float, ptr %f0.host, i64 %963
  %965 = load float, ptr %964, align 4, !tbaa !6
  %966 = insertelement <8 x float> %961, float %965, i64 7
  %967 = fsub <8 x float> %t1974.us, %1876
  %968 = fmul <8 x float> %53, %967
  %969 = fadd <8 x float> %1876, %968
  %970 = fadd <8 x float> %969, %966
  %971 = fadd <8 x float> %921, %970
  %972 = fmul <8 x float> %971, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %973 = fmul <8 x float> %48, %t1973.us
  %974 = fmul <8 x float> %973, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a337.us = fptosi <8 x float> %974 to <8 x i32>
  %a336.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a337.us)
  %975 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a336.us, <8 x i32> zeroinitializer)
  %976 = sub <8 x i32> %975, %1874
  %977 = add nsw <8 x i32> %976, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %978 = extractelement <8 x i32> %977, i64 0
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds float, ptr %f0.host, i64 %979
  %981 = load float, ptr %980, align 4, !tbaa !6
  %982 = insertelement <8 x float> undef, float %981, i64 0
  %983 = extractelement <8 x i32> %977, i64 1
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds float, ptr %f0.host, i64 %984
  %986 = load float, ptr %985, align 4, !tbaa !6
  %987 = insertelement <8 x float> %982, float %986, i64 1
  %988 = extractelement <8 x i32> %977, i64 2
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds float, ptr %f0.host, i64 %989
  %991 = load float, ptr %990, align 4, !tbaa !6
  %992 = insertelement <8 x float> %987, float %991, i64 2
  %993 = extractelement <8 x i32> %977, i64 3
  %994 = sext i32 %993 to i64
  %995 = getelementptr inbounds float, ptr %f0.host, i64 %994
  %996 = load float, ptr %995, align 4, !tbaa !6
  %997 = insertelement <8 x float> %992, float %996, i64 3
  %998 = extractelement <8 x i32> %977, i64 4
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds float, ptr %f0.host, i64 %999
  %1001 = load float, ptr %1000, align 4, !tbaa !6
  %1002 = insertelement <8 x float> %997, float %1001, i64 4
  %1003 = extractelement <8 x i32> %977, i64 5
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds float, ptr %f0.host, i64 %1004
  %1006 = load float, ptr %1005, align 4, !tbaa !6
  %1007 = insertelement <8 x float> %1002, float %1006, i64 5
  %1008 = extractelement <8 x i32> %977, i64 6
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds float, ptr %f0.host, i64 %1009
  %1011 = load float, ptr %1010, align 4, !tbaa !6
  %1012 = insertelement <8 x float> %1007, float %1011, i64 6
  %1013 = extractelement <8 x i32> %977, i64 7
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds float, ptr %f0.host, i64 %1014
  %1016 = load float, ptr %1015, align 4, !tbaa !6
  %1017 = insertelement <8 x float> %1012, float %1016, i64 7
  %1018 = fsub <8 x float> %t1973.us, %1876
  %1019 = fmul <8 x float> %53, %1018
  %1020 = fadd <8 x float> %1876, %1019
  %1021 = fadd <8 x float> %1020, %1017
  %1022 = fadd <8 x float> %972, %1021
  %1023 = fadd <8 x float> %872, %1022
  %1024 = fmul <8 x float> %1023, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1025 = fadd <8 x float> %823, %1024
  %1026 = fadd <8 x float> %421, %1025
  %1027 = fmul <8 x float> %1026, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %1027, ptr %lsr.iv11.us, align 4, !tbaa !44
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not7.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not7.us, label %"end for f4.s0.v3.v3.us", label %"for f4.s0.v3.v3.us"

"end for f4.s0.v3.v3.us":                         ; preds = %"for f4.s0.v3.v3.us", %"for f4.s0.v6.us"
  br i1 %43, label %"for f4.s0.v3.v31.preheader.us", label %"end for f4.s0.v3.v32.us", !prof !5

"end for f4.s0.v3.v32.us":                        ; preds = %"for f4.s0.v3.v31.preheader.us", %"end for f4.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %31
  %.not5.us = icmp eq i64 %indvars.iv.next, %78
  br i1 %.not5.us, label %"end for f4.s0.v6.loopexit.us", label %"for f4.s0.v6.us"

"for f4.s0.v3.v31.preheader.us":                  ; preds = %"end for f4.s0.v3.v3.us"
  %1028 = load <8 x float>, ptr %87, align 4, !tbaa !42
  %1029 = load <8 x float>, ptr %89, align 4, !tbaa !42
  %t1997.us = shufflevector <8 x float> %1028, <8 x float> %1029, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1030 = load <8 x float>, ptr %91, align 4, !tbaa !42
  %1031 = load <8 x float>, ptr %93, align 4, !tbaa !42
  %t1998.us = shufflevector <8 x float> %1030, <8 x float> %1031, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1999.us = shufflevector <8 x float> %1030, <8 x float> %1031, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1032 = load <8 x float>, ptr %95, align 4, !tbaa !42
  %1033 = load <8 x float>, ptr %97, align 4, !tbaa !42
  %t2000.us = shufflevector <8 x float> %1032, <8 x float> %1033, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %1034 = load <8 x float>, ptr %101, align 4, !tbaa !42
  %1035 = load <8 x float>, ptr %103, align 4, !tbaa !42
  %t2002.us = shufflevector <8 x float> %1034, <8 x float> %1035, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1036 = load <8 x float>, ptr %105, align 4, !tbaa !42
  %1037 = load <8 x float>, ptr %107, align 4, !tbaa !42
  %t2003.us = shufflevector <8 x float> %1036, <8 x float> %1037, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2004.us = shufflevector <8 x float> %1036, <8 x float> %1037, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1038 = load <8 x float>, ptr %109, align 4, !tbaa !42
  %1039 = load <8 x float>, ptr %111, align 4, !tbaa !42
  %t2005.us = shufflevector <8 x float> %1038, <8 x float> %1039, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %1040 = load <8 x float>, ptr %116, align 4, !tbaa !42
  %1041 = load <8 x float>, ptr %118, align 4, !tbaa !42
  %t2007.us = shufflevector <8 x float> %1040, <8 x float> %1041, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1042 = load <8 x float>, ptr %120, align 4, !tbaa !42
  %1043 = load <8 x float>, ptr %122, align 4, !tbaa !42
  %t2008.us = shufflevector <8 x float> %1042, <8 x float> %1043, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2009.us = shufflevector <8 x float> %1042, <8 x float> %1043, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1044 = load <8 x float>, ptr %124, align 4, !tbaa !42
  %1045 = load <8 x float>, ptr %126, align 4, !tbaa !42
  %t2010.us = shufflevector <8 x float> %1044, <8 x float> %1045, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %1046 = load <8 x float>, ptr %131, align 4, !tbaa !42
  %1047 = load <8 x float>, ptr %133, align 4, !tbaa !42
  %t2012.us = shufflevector <8 x float> %1046, <8 x float> %1047, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1048 = load <8 x float>, ptr %135, align 4, !tbaa !42
  %1049 = load <8 x float>, ptr %137, align 4, !tbaa !42
  %t2013.us = shufflevector <8 x float> %1048, <8 x float> %1049, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2014.us = shufflevector <8 x float> %1048, <8 x float> %1049, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1050 = load <8 x float>, ptr %139, align 4, !tbaa !42
  %1051 = load <8 x float>, ptr %141, align 4, !tbaa !42
  %t2015.us = shufflevector <8 x float> %1050, <8 x float> %1051, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %1052 = trunc i64 %indvars.iv to i32
  %1053 = sitofp i32 %1052 to float
  %t2016.s.us = fmul float %46, %1053
  %1054 = shl nsw i32 %1052, 8
  %1055 = fmul <8 x float> %48, %t2015.us
  %1056 = fmul <8 x float> %1055, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a342.us = fptosi <8 x float> %1056 to <8 x i32>
  %a341.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a342.us)
  %1057 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a341.us, <8 x i32> zeroinitializer)
  %.scalar = add i32 %1054, %f0.v3.min_realized.s
  %1058 = insertelement <8 x i32> undef, i32 %.scalar, i64 0
  %1059 = shufflevector <8 x i32> %1058, <8 x i32> poison, <8 x i32> zeroinitializer
  %1060 = sub <8 x i32> %1057, %1059
  %1061 = add nsw <8 x i32> %1060, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1062 = extractelement <8 x i32> %1061, i64 0
  %1063 = sext i32 %1062 to i64
  %1064 = getelementptr inbounds float, ptr %f0.host, i64 %1063
  %1065 = load float, ptr %1064, align 4, !tbaa !6
  %1066 = insertelement <8 x float> undef, float %1065, i64 0
  %1067 = extractelement <8 x i32> %1061, i64 1
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds float, ptr %f0.host, i64 %1068
  %1070 = load float, ptr %1069, align 4, !tbaa !6
  %1071 = insertelement <8 x float> %1066, float %1070, i64 1
  %1072 = extractelement <8 x i32> %1061, i64 2
  %1073 = sext i32 %1072 to i64
  %1074 = getelementptr inbounds float, ptr %f0.host, i64 %1073
  %1075 = load float, ptr %1074, align 4, !tbaa !6
  %1076 = insertelement <8 x float> %1071, float %1075, i64 2
  %1077 = extractelement <8 x i32> %1061, i64 3
  %1078 = sext i32 %1077 to i64
  %1079 = getelementptr inbounds float, ptr %f0.host, i64 %1078
  %1080 = load float, ptr %1079, align 4, !tbaa !6
  %1081 = insertelement <8 x float> %1076, float %1080, i64 3
  %1082 = extractelement <8 x i32> %1061, i64 4
  %1083 = sext i32 %1082 to i64
  %1084 = getelementptr inbounds float, ptr %f0.host, i64 %1083
  %1085 = load float, ptr %1084, align 4, !tbaa !6
  %1086 = insertelement <8 x float> %1081, float %1085, i64 4
  %1087 = extractelement <8 x i32> %1061, i64 5
  %1088 = sext i32 %1087 to i64
  %1089 = getelementptr inbounds float, ptr %f0.host, i64 %1088
  %1090 = load float, ptr %1089, align 4, !tbaa !6
  %1091 = insertelement <8 x float> %1086, float %1090, i64 5
  %1092 = extractelement <8 x i32> %1061, i64 6
  %1093 = sext i32 %1092 to i64
  %1094 = getelementptr inbounds float, ptr %f0.host, i64 %1093
  %1095 = load float, ptr %1094, align 4, !tbaa !6
  %1096 = insertelement <8 x float> %1091, float %1095, i64 6
  %1097 = extractelement <8 x i32> %1061, i64 7
  %1098 = sext i32 %1097 to i64
  %1099 = getelementptr inbounds float, ptr %f0.host, i64 %1098
  %1100 = load float, ptr %1099, align 4, !tbaa !6
  %1101 = insertelement <8 x float> %1096, float %1100, i64 7
  %1102 = insertelement <8 x float> undef, float %t2016.s.us, i64 0
  %1103 = shufflevector <8 x float> %1102, <8 x float> undef, <8 x i32> zeroinitializer
  %1104 = fsub <8 x float> %t2015.us, %1103
  %1105 = fmul <8 x float> %53, %1104
  %1106 = fadd <8 x float> %1103, %1105
  %1107 = fadd <8 x float> %1106, %1101
  %1108 = fmul <8 x float> %48, %t2014.us
  %1109 = fmul <8 x float> %1108, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a344.us = fptosi <8 x float> %1109 to <8 x i32>
  %a343.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a344.us)
  %1110 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a343.us, <8 x i32> zeroinitializer)
  %1111 = sub <8 x i32> %1110, %1059
  %1112 = add nsw <8 x i32> %1111, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1113 = extractelement <8 x i32> %1112, i64 0
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds float, ptr %f0.host, i64 %1114
  %1116 = load float, ptr %1115, align 4, !tbaa !6
  %1117 = insertelement <8 x float> undef, float %1116, i64 0
  %1118 = extractelement <8 x i32> %1112, i64 1
  %1119 = sext i32 %1118 to i64
  %1120 = getelementptr inbounds float, ptr %f0.host, i64 %1119
  %1121 = load float, ptr %1120, align 4, !tbaa !6
  %1122 = insertelement <8 x float> %1117, float %1121, i64 1
  %1123 = extractelement <8 x i32> %1112, i64 2
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds float, ptr %f0.host, i64 %1124
  %1126 = load float, ptr %1125, align 4, !tbaa !6
  %1127 = insertelement <8 x float> %1122, float %1126, i64 2
  %1128 = extractelement <8 x i32> %1112, i64 3
  %1129 = sext i32 %1128 to i64
  %1130 = getelementptr inbounds float, ptr %f0.host, i64 %1129
  %1131 = load float, ptr %1130, align 4, !tbaa !6
  %1132 = insertelement <8 x float> %1127, float %1131, i64 3
  %1133 = extractelement <8 x i32> %1112, i64 4
  %1134 = sext i32 %1133 to i64
  %1135 = getelementptr inbounds float, ptr %f0.host, i64 %1134
  %1136 = load float, ptr %1135, align 4, !tbaa !6
  %1137 = insertelement <8 x float> %1132, float %1136, i64 4
  %1138 = extractelement <8 x i32> %1112, i64 5
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds float, ptr %f0.host, i64 %1139
  %1141 = load float, ptr %1140, align 4, !tbaa !6
  %1142 = insertelement <8 x float> %1137, float %1141, i64 5
  %1143 = extractelement <8 x i32> %1112, i64 6
  %1144 = sext i32 %1143 to i64
  %1145 = getelementptr inbounds float, ptr %f0.host, i64 %1144
  %1146 = load float, ptr %1145, align 4, !tbaa !6
  %1147 = insertelement <8 x float> %1142, float %1146, i64 6
  %1148 = extractelement <8 x i32> %1112, i64 7
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds float, ptr %f0.host, i64 %1149
  %1151 = load float, ptr %1150, align 4, !tbaa !6
  %1152 = insertelement <8 x float> %1147, float %1151, i64 7
  %1153 = fsub <8 x float> %t2014.us, %1103
  %1154 = fmul <8 x float> %53, %1153
  %1155 = fadd <8 x float> %1103, %1154
  %1156 = fadd <8 x float> %1155, %1152
  %1157 = fmul <8 x float> %48, %t2013.us
  %1158 = fmul <8 x float> %1157, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a346.us = fptosi <8 x float> %1158 to <8 x i32>
  %a345.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a346.us)
  %1159 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a345.us, <8 x i32> zeroinitializer)
  %1160 = sub <8 x i32> %1159, %1059
  %1161 = add nsw <8 x i32> %1160, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1162 = extractelement <8 x i32> %1161, i64 0
  %1163 = sext i32 %1162 to i64
  %1164 = getelementptr inbounds float, ptr %f0.host, i64 %1163
  %1165 = load float, ptr %1164, align 4, !tbaa !6
  %1166 = insertelement <8 x float> undef, float %1165, i64 0
  %1167 = extractelement <8 x i32> %1161, i64 1
  %1168 = sext i32 %1167 to i64
  %1169 = getelementptr inbounds float, ptr %f0.host, i64 %1168
  %1170 = load float, ptr %1169, align 4, !tbaa !6
  %1171 = insertelement <8 x float> %1166, float %1170, i64 1
  %1172 = extractelement <8 x i32> %1161, i64 2
  %1173 = sext i32 %1172 to i64
  %1174 = getelementptr inbounds float, ptr %f0.host, i64 %1173
  %1175 = load float, ptr %1174, align 4, !tbaa !6
  %1176 = insertelement <8 x float> %1171, float %1175, i64 2
  %1177 = extractelement <8 x i32> %1161, i64 3
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds float, ptr %f0.host, i64 %1178
  %1180 = load float, ptr %1179, align 4, !tbaa !6
  %1181 = insertelement <8 x float> %1176, float %1180, i64 3
  %1182 = extractelement <8 x i32> %1161, i64 4
  %1183 = sext i32 %1182 to i64
  %1184 = getelementptr inbounds float, ptr %f0.host, i64 %1183
  %1185 = load float, ptr %1184, align 4, !tbaa !6
  %1186 = insertelement <8 x float> %1181, float %1185, i64 4
  %1187 = extractelement <8 x i32> %1161, i64 5
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds float, ptr %f0.host, i64 %1188
  %1190 = load float, ptr %1189, align 4, !tbaa !6
  %1191 = insertelement <8 x float> %1186, float %1190, i64 5
  %1192 = extractelement <8 x i32> %1161, i64 6
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds float, ptr %f0.host, i64 %1193
  %1195 = load float, ptr %1194, align 4, !tbaa !6
  %1196 = insertelement <8 x float> %1191, float %1195, i64 6
  %1197 = extractelement <8 x i32> %1161, i64 7
  %1198 = sext i32 %1197 to i64
  %1199 = getelementptr inbounds float, ptr %f0.host, i64 %1198
  %1200 = load float, ptr %1199, align 4, !tbaa !6
  %1201 = insertelement <8 x float> %1196, float %1200, i64 7
  %1202 = fsub <8 x float> %t2013.us, %1103
  %1203 = fmul <8 x float> %53, %1202
  %1204 = fadd <8 x float> %1103, %1203
  %1205 = fadd <8 x float> %1204, %1201
  %1206 = fadd <8 x float> %1156, %1205
  %1207 = fmul <8 x float> %1206, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1208 = fmul <8 x float> %48, %t2012.us
  %1209 = fmul <8 x float> %1208, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a348.us = fptosi <8 x float> %1209 to <8 x i32>
  %a347.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a348.us)
  %1210 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a347.us, <8 x i32> zeroinitializer)
  %1211 = sub <8 x i32> %1210, %1059
  %1212 = add nsw <8 x i32> %1211, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1213 = extractelement <8 x i32> %1212, i64 0
  %1214 = sext i32 %1213 to i64
  %1215 = getelementptr inbounds float, ptr %f0.host, i64 %1214
  %1216 = load float, ptr %1215, align 4, !tbaa !6
  %1217 = insertelement <8 x float> undef, float %1216, i64 0
  %1218 = extractelement <8 x i32> %1212, i64 1
  %1219 = sext i32 %1218 to i64
  %1220 = getelementptr inbounds float, ptr %f0.host, i64 %1219
  %1221 = load float, ptr %1220, align 4, !tbaa !6
  %1222 = insertelement <8 x float> %1217, float %1221, i64 1
  %1223 = extractelement <8 x i32> %1212, i64 2
  %1224 = sext i32 %1223 to i64
  %1225 = getelementptr inbounds float, ptr %f0.host, i64 %1224
  %1226 = load float, ptr %1225, align 4, !tbaa !6
  %1227 = insertelement <8 x float> %1222, float %1226, i64 2
  %1228 = extractelement <8 x i32> %1212, i64 3
  %1229 = sext i32 %1228 to i64
  %1230 = getelementptr inbounds float, ptr %f0.host, i64 %1229
  %1231 = load float, ptr %1230, align 4, !tbaa !6
  %1232 = insertelement <8 x float> %1227, float %1231, i64 3
  %1233 = extractelement <8 x i32> %1212, i64 4
  %1234 = sext i32 %1233 to i64
  %1235 = getelementptr inbounds float, ptr %f0.host, i64 %1234
  %1236 = load float, ptr %1235, align 4, !tbaa !6
  %1237 = insertelement <8 x float> %1232, float %1236, i64 4
  %1238 = extractelement <8 x i32> %1212, i64 5
  %1239 = sext i32 %1238 to i64
  %1240 = getelementptr inbounds float, ptr %f0.host, i64 %1239
  %1241 = load float, ptr %1240, align 4, !tbaa !6
  %1242 = insertelement <8 x float> %1237, float %1241, i64 5
  %1243 = extractelement <8 x i32> %1212, i64 6
  %1244 = sext i32 %1243 to i64
  %1245 = getelementptr inbounds float, ptr %f0.host, i64 %1244
  %1246 = load float, ptr %1245, align 4, !tbaa !6
  %1247 = insertelement <8 x float> %1242, float %1246, i64 6
  %1248 = extractelement <8 x i32> %1212, i64 7
  %1249 = sext i32 %1248 to i64
  %1250 = getelementptr inbounds float, ptr %f0.host, i64 %1249
  %1251 = load float, ptr %1250, align 4, !tbaa !6
  %1252 = insertelement <8 x float> %1247, float %1251, i64 7
  %1253 = fsub <8 x float> %t2012.us, %1103
  %1254 = fmul <8 x float> %53, %1253
  %1255 = fadd <8 x float> %1103, %1254
  %1256 = fadd <8 x float> %1255, %1252
  %1257 = fadd <8 x float> %1207, %1256
  %1258 = fadd <8 x float> %1107, %1257
  %1259 = fmul <8 x float> %1258, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1260 = fmul <8 x float> %48, %t2010.us
  %1261 = fmul <8 x float> %1260, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a350.us = fptosi <8 x float> %1261 to <8 x i32>
  %a349.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a350.us)
  %1262 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a349.us, <8 x i32> zeroinitializer)
  %1263 = sub <8 x i32> %1262, %1059
  %1264 = add nsw <8 x i32> %1263, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1265 = extractelement <8 x i32> %1264, i64 0
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds float, ptr %f0.host, i64 %1266
  %1268 = load float, ptr %1267, align 4, !tbaa !6
  %1269 = insertelement <8 x float> undef, float %1268, i64 0
  %1270 = extractelement <8 x i32> %1264, i64 1
  %1271 = sext i32 %1270 to i64
  %1272 = getelementptr inbounds float, ptr %f0.host, i64 %1271
  %1273 = load float, ptr %1272, align 4, !tbaa !6
  %1274 = insertelement <8 x float> %1269, float %1273, i64 1
  %1275 = extractelement <8 x i32> %1264, i64 2
  %1276 = sext i32 %1275 to i64
  %1277 = getelementptr inbounds float, ptr %f0.host, i64 %1276
  %1278 = load float, ptr %1277, align 4, !tbaa !6
  %1279 = insertelement <8 x float> %1274, float %1278, i64 2
  %1280 = extractelement <8 x i32> %1264, i64 3
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds float, ptr %f0.host, i64 %1281
  %1283 = load float, ptr %1282, align 4, !tbaa !6
  %1284 = insertelement <8 x float> %1279, float %1283, i64 3
  %1285 = extractelement <8 x i32> %1264, i64 4
  %1286 = sext i32 %1285 to i64
  %1287 = getelementptr inbounds float, ptr %f0.host, i64 %1286
  %1288 = load float, ptr %1287, align 4, !tbaa !6
  %1289 = insertelement <8 x float> %1284, float %1288, i64 4
  %1290 = extractelement <8 x i32> %1264, i64 5
  %1291 = sext i32 %1290 to i64
  %1292 = getelementptr inbounds float, ptr %f0.host, i64 %1291
  %1293 = load float, ptr %1292, align 4, !tbaa !6
  %1294 = insertelement <8 x float> %1289, float %1293, i64 5
  %1295 = extractelement <8 x i32> %1264, i64 6
  %1296 = sext i32 %1295 to i64
  %1297 = getelementptr inbounds float, ptr %f0.host, i64 %1296
  %1298 = load float, ptr %1297, align 4, !tbaa !6
  %1299 = insertelement <8 x float> %1294, float %1298, i64 6
  %1300 = extractelement <8 x i32> %1264, i64 7
  %1301 = sext i32 %1300 to i64
  %1302 = getelementptr inbounds float, ptr %f0.host, i64 %1301
  %1303 = load float, ptr %1302, align 4, !tbaa !6
  %1304 = insertelement <8 x float> %1299, float %1303, i64 7
  %1305 = fsub <8 x float> %t2010.us, %1103
  %1306 = fmul <8 x float> %53, %1305
  %1307 = fadd <8 x float> %1103, %1306
  %1308 = fadd <8 x float> %1307, %1304
  %1309 = fmul <8 x float> %48, %t2009.us
  %1310 = fmul <8 x float> %1309, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a352.us = fptosi <8 x float> %1310 to <8 x i32>
  %a351.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a352.us)
  %1311 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a351.us, <8 x i32> zeroinitializer)
  %1312 = sub <8 x i32> %1311, %1059
  %1313 = add nsw <8 x i32> %1312, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1314 = extractelement <8 x i32> %1313, i64 0
  %1315 = sext i32 %1314 to i64
  %1316 = getelementptr inbounds float, ptr %f0.host, i64 %1315
  %1317 = load float, ptr %1316, align 4, !tbaa !6
  %1318 = insertelement <8 x float> undef, float %1317, i64 0
  %1319 = extractelement <8 x i32> %1313, i64 1
  %1320 = sext i32 %1319 to i64
  %1321 = getelementptr inbounds float, ptr %f0.host, i64 %1320
  %1322 = load float, ptr %1321, align 4, !tbaa !6
  %1323 = insertelement <8 x float> %1318, float %1322, i64 1
  %1324 = extractelement <8 x i32> %1313, i64 2
  %1325 = sext i32 %1324 to i64
  %1326 = getelementptr inbounds float, ptr %f0.host, i64 %1325
  %1327 = load float, ptr %1326, align 4, !tbaa !6
  %1328 = insertelement <8 x float> %1323, float %1327, i64 2
  %1329 = extractelement <8 x i32> %1313, i64 3
  %1330 = sext i32 %1329 to i64
  %1331 = getelementptr inbounds float, ptr %f0.host, i64 %1330
  %1332 = load float, ptr %1331, align 4, !tbaa !6
  %1333 = insertelement <8 x float> %1328, float %1332, i64 3
  %1334 = extractelement <8 x i32> %1313, i64 4
  %1335 = sext i32 %1334 to i64
  %1336 = getelementptr inbounds float, ptr %f0.host, i64 %1335
  %1337 = load float, ptr %1336, align 4, !tbaa !6
  %1338 = insertelement <8 x float> %1333, float %1337, i64 4
  %1339 = extractelement <8 x i32> %1313, i64 5
  %1340 = sext i32 %1339 to i64
  %1341 = getelementptr inbounds float, ptr %f0.host, i64 %1340
  %1342 = load float, ptr %1341, align 4, !tbaa !6
  %1343 = insertelement <8 x float> %1338, float %1342, i64 5
  %1344 = extractelement <8 x i32> %1313, i64 6
  %1345 = sext i32 %1344 to i64
  %1346 = getelementptr inbounds float, ptr %f0.host, i64 %1345
  %1347 = load float, ptr %1346, align 4, !tbaa !6
  %1348 = insertelement <8 x float> %1343, float %1347, i64 6
  %1349 = extractelement <8 x i32> %1313, i64 7
  %1350 = sext i32 %1349 to i64
  %1351 = getelementptr inbounds float, ptr %f0.host, i64 %1350
  %1352 = load float, ptr %1351, align 4, !tbaa !6
  %1353 = insertelement <8 x float> %1348, float %1352, i64 7
  %1354 = fsub <8 x float> %t2009.us, %1103
  %1355 = fmul <8 x float> %53, %1354
  %1356 = fadd <8 x float> %1103, %1355
  %1357 = fadd <8 x float> %1356, %1353
  %1358 = fmul <8 x float> %48, %t2008.us
  %1359 = fmul <8 x float> %1358, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a354.us = fptosi <8 x float> %1359 to <8 x i32>
  %a353.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a354.us)
  %1360 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a353.us, <8 x i32> zeroinitializer)
  %1361 = sub <8 x i32> %1360, %1059
  %1362 = add nsw <8 x i32> %1361, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1363 = extractelement <8 x i32> %1362, i64 0
  %1364 = sext i32 %1363 to i64
  %1365 = getelementptr inbounds float, ptr %f0.host, i64 %1364
  %1366 = load float, ptr %1365, align 4, !tbaa !6
  %1367 = insertelement <8 x float> undef, float %1366, i64 0
  %1368 = extractelement <8 x i32> %1362, i64 1
  %1369 = sext i32 %1368 to i64
  %1370 = getelementptr inbounds float, ptr %f0.host, i64 %1369
  %1371 = load float, ptr %1370, align 4, !tbaa !6
  %1372 = insertelement <8 x float> %1367, float %1371, i64 1
  %1373 = extractelement <8 x i32> %1362, i64 2
  %1374 = sext i32 %1373 to i64
  %1375 = getelementptr inbounds float, ptr %f0.host, i64 %1374
  %1376 = load float, ptr %1375, align 4, !tbaa !6
  %1377 = insertelement <8 x float> %1372, float %1376, i64 2
  %1378 = extractelement <8 x i32> %1362, i64 3
  %1379 = sext i32 %1378 to i64
  %1380 = getelementptr inbounds float, ptr %f0.host, i64 %1379
  %1381 = load float, ptr %1380, align 4, !tbaa !6
  %1382 = insertelement <8 x float> %1377, float %1381, i64 3
  %1383 = extractelement <8 x i32> %1362, i64 4
  %1384 = sext i32 %1383 to i64
  %1385 = getelementptr inbounds float, ptr %f0.host, i64 %1384
  %1386 = load float, ptr %1385, align 4, !tbaa !6
  %1387 = insertelement <8 x float> %1382, float %1386, i64 4
  %1388 = extractelement <8 x i32> %1362, i64 5
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds float, ptr %f0.host, i64 %1389
  %1391 = load float, ptr %1390, align 4, !tbaa !6
  %1392 = insertelement <8 x float> %1387, float %1391, i64 5
  %1393 = extractelement <8 x i32> %1362, i64 6
  %1394 = sext i32 %1393 to i64
  %1395 = getelementptr inbounds float, ptr %f0.host, i64 %1394
  %1396 = load float, ptr %1395, align 4, !tbaa !6
  %1397 = insertelement <8 x float> %1392, float %1396, i64 6
  %1398 = extractelement <8 x i32> %1362, i64 7
  %1399 = sext i32 %1398 to i64
  %1400 = getelementptr inbounds float, ptr %f0.host, i64 %1399
  %1401 = load float, ptr %1400, align 4, !tbaa !6
  %1402 = insertelement <8 x float> %1397, float %1401, i64 7
  %1403 = fsub <8 x float> %t2008.us, %1103
  %1404 = fmul <8 x float> %53, %1403
  %1405 = fadd <8 x float> %1103, %1404
  %1406 = fadd <8 x float> %1405, %1402
  %1407 = fadd <8 x float> %1357, %1406
  %1408 = fmul <8 x float> %1407, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1409 = fmul <8 x float> %48, %t2007.us
  %1410 = fmul <8 x float> %1409, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a356.us = fptosi <8 x float> %1410 to <8 x i32>
  %a355.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a356.us)
  %1411 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a355.us, <8 x i32> zeroinitializer)
  %1412 = sub <8 x i32> %1411, %1059
  %1413 = add nsw <8 x i32> %1412, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1414 = extractelement <8 x i32> %1413, i64 0
  %1415 = sext i32 %1414 to i64
  %1416 = getelementptr inbounds float, ptr %f0.host, i64 %1415
  %1417 = load float, ptr %1416, align 4, !tbaa !6
  %1418 = insertelement <8 x float> undef, float %1417, i64 0
  %1419 = extractelement <8 x i32> %1413, i64 1
  %1420 = sext i32 %1419 to i64
  %1421 = getelementptr inbounds float, ptr %f0.host, i64 %1420
  %1422 = load float, ptr %1421, align 4, !tbaa !6
  %1423 = insertelement <8 x float> %1418, float %1422, i64 1
  %1424 = extractelement <8 x i32> %1413, i64 2
  %1425 = sext i32 %1424 to i64
  %1426 = getelementptr inbounds float, ptr %f0.host, i64 %1425
  %1427 = load float, ptr %1426, align 4, !tbaa !6
  %1428 = insertelement <8 x float> %1423, float %1427, i64 2
  %1429 = extractelement <8 x i32> %1413, i64 3
  %1430 = sext i32 %1429 to i64
  %1431 = getelementptr inbounds float, ptr %f0.host, i64 %1430
  %1432 = load float, ptr %1431, align 4, !tbaa !6
  %1433 = insertelement <8 x float> %1428, float %1432, i64 3
  %1434 = extractelement <8 x i32> %1413, i64 4
  %1435 = sext i32 %1434 to i64
  %1436 = getelementptr inbounds float, ptr %f0.host, i64 %1435
  %1437 = load float, ptr %1436, align 4, !tbaa !6
  %1438 = insertelement <8 x float> %1433, float %1437, i64 4
  %1439 = extractelement <8 x i32> %1413, i64 5
  %1440 = sext i32 %1439 to i64
  %1441 = getelementptr inbounds float, ptr %f0.host, i64 %1440
  %1442 = load float, ptr %1441, align 4, !tbaa !6
  %1443 = insertelement <8 x float> %1438, float %1442, i64 5
  %1444 = extractelement <8 x i32> %1413, i64 6
  %1445 = sext i32 %1444 to i64
  %1446 = getelementptr inbounds float, ptr %f0.host, i64 %1445
  %1447 = load float, ptr %1446, align 4, !tbaa !6
  %1448 = insertelement <8 x float> %1443, float %1447, i64 6
  %1449 = extractelement <8 x i32> %1413, i64 7
  %1450 = sext i32 %1449 to i64
  %1451 = getelementptr inbounds float, ptr %f0.host, i64 %1450
  %1452 = load float, ptr %1451, align 4, !tbaa !6
  %1453 = insertelement <8 x float> %1448, float %1452, i64 7
  %1454 = fsub <8 x float> %t2007.us, %1103
  %1455 = fmul <8 x float> %53, %1454
  %1456 = fadd <8 x float> %1103, %1455
  %1457 = fadd <8 x float> %1456, %1453
  %1458 = fadd <8 x float> %1408, %1457
  %1459 = fadd <8 x float> %1308, %1458
  %1460 = fmul <8 x float> %48, %t2005.us
  %1461 = fmul <8 x float> %1460, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a358.us = fptosi <8 x float> %1461 to <8 x i32>
  %a357.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a358.us)
  %1462 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a357.us, <8 x i32> zeroinitializer)
  %1463 = sub <8 x i32> %1462, %1059
  %1464 = add nsw <8 x i32> %1463, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1465 = extractelement <8 x i32> %1464, i64 0
  %1466 = sext i32 %1465 to i64
  %1467 = getelementptr inbounds float, ptr %f0.host, i64 %1466
  %1468 = load float, ptr %1467, align 4, !tbaa !6
  %1469 = insertelement <8 x float> undef, float %1468, i64 0
  %1470 = extractelement <8 x i32> %1464, i64 1
  %1471 = sext i32 %1470 to i64
  %1472 = getelementptr inbounds float, ptr %f0.host, i64 %1471
  %1473 = load float, ptr %1472, align 4, !tbaa !6
  %1474 = insertelement <8 x float> %1469, float %1473, i64 1
  %1475 = extractelement <8 x i32> %1464, i64 2
  %1476 = sext i32 %1475 to i64
  %1477 = getelementptr inbounds float, ptr %f0.host, i64 %1476
  %1478 = load float, ptr %1477, align 4, !tbaa !6
  %1479 = insertelement <8 x float> %1474, float %1478, i64 2
  %1480 = extractelement <8 x i32> %1464, i64 3
  %1481 = sext i32 %1480 to i64
  %1482 = getelementptr inbounds float, ptr %f0.host, i64 %1481
  %1483 = load float, ptr %1482, align 4, !tbaa !6
  %1484 = insertelement <8 x float> %1479, float %1483, i64 3
  %1485 = extractelement <8 x i32> %1464, i64 4
  %1486 = sext i32 %1485 to i64
  %1487 = getelementptr inbounds float, ptr %f0.host, i64 %1486
  %1488 = load float, ptr %1487, align 4, !tbaa !6
  %1489 = insertelement <8 x float> %1484, float %1488, i64 4
  %1490 = extractelement <8 x i32> %1464, i64 5
  %1491 = sext i32 %1490 to i64
  %1492 = getelementptr inbounds float, ptr %f0.host, i64 %1491
  %1493 = load float, ptr %1492, align 4, !tbaa !6
  %1494 = insertelement <8 x float> %1489, float %1493, i64 5
  %1495 = extractelement <8 x i32> %1464, i64 6
  %1496 = sext i32 %1495 to i64
  %1497 = getelementptr inbounds float, ptr %f0.host, i64 %1496
  %1498 = load float, ptr %1497, align 4, !tbaa !6
  %1499 = insertelement <8 x float> %1494, float %1498, i64 6
  %1500 = extractelement <8 x i32> %1464, i64 7
  %1501 = sext i32 %1500 to i64
  %1502 = getelementptr inbounds float, ptr %f0.host, i64 %1501
  %1503 = load float, ptr %1502, align 4, !tbaa !6
  %1504 = insertelement <8 x float> %1499, float %1503, i64 7
  %1505 = fsub <8 x float> %t2005.us, %1103
  %1506 = fmul <8 x float> %53, %1505
  %1507 = fadd <8 x float> %1103, %1506
  %1508 = fadd <8 x float> %1507, %1504
  %1509 = fmul <8 x float> %48, %t2004.us
  %1510 = fmul <8 x float> %1509, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a360.us = fptosi <8 x float> %1510 to <8 x i32>
  %a359.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a360.us)
  %1511 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a359.us, <8 x i32> zeroinitializer)
  %1512 = sub <8 x i32> %1511, %1059
  %1513 = add nsw <8 x i32> %1512, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1514 = extractelement <8 x i32> %1513, i64 0
  %1515 = sext i32 %1514 to i64
  %1516 = getelementptr inbounds float, ptr %f0.host, i64 %1515
  %1517 = load float, ptr %1516, align 4, !tbaa !6
  %1518 = insertelement <8 x float> undef, float %1517, i64 0
  %1519 = extractelement <8 x i32> %1513, i64 1
  %1520 = sext i32 %1519 to i64
  %1521 = getelementptr inbounds float, ptr %f0.host, i64 %1520
  %1522 = load float, ptr %1521, align 4, !tbaa !6
  %1523 = insertelement <8 x float> %1518, float %1522, i64 1
  %1524 = extractelement <8 x i32> %1513, i64 2
  %1525 = sext i32 %1524 to i64
  %1526 = getelementptr inbounds float, ptr %f0.host, i64 %1525
  %1527 = load float, ptr %1526, align 4, !tbaa !6
  %1528 = insertelement <8 x float> %1523, float %1527, i64 2
  %1529 = extractelement <8 x i32> %1513, i64 3
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds float, ptr %f0.host, i64 %1530
  %1532 = load float, ptr %1531, align 4, !tbaa !6
  %1533 = insertelement <8 x float> %1528, float %1532, i64 3
  %1534 = extractelement <8 x i32> %1513, i64 4
  %1535 = sext i32 %1534 to i64
  %1536 = getelementptr inbounds float, ptr %f0.host, i64 %1535
  %1537 = load float, ptr %1536, align 4, !tbaa !6
  %1538 = insertelement <8 x float> %1533, float %1537, i64 4
  %1539 = extractelement <8 x i32> %1513, i64 5
  %1540 = sext i32 %1539 to i64
  %1541 = getelementptr inbounds float, ptr %f0.host, i64 %1540
  %1542 = load float, ptr %1541, align 4, !tbaa !6
  %1543 = insertelement <8 x float> %1538, float %1542, i64 5
  %1544 = extractelement <8 x i32> %1513, i64 6
  %1545 = sext i32 %1544 to i64
  %1546 = getelementptr inbounds float, ptr %f0.host, i64 %1545
  %1547 = load float, ptr %1546, align 4, !tbaa !6
  %1548 = insertelement <8 x float> %1543, float %1547, i64 6
  %1549 = extractelement <8 x i32> %1513, i64 7
  %1550 = sext i32 %1549 to i64
  %1551 = getelementptr inbounds float, ptr %f0.host, i64 %1550
  %1552 = load float, ptr %1551, align 4, !tbaa !6
  %1553 = insertelement <8 x float> %1548, float %1552, i64 7
  %1554 = fsub <8 x float> %t2004.us, %1103
  %1555 = fmul <8 x float> %53, %1554
  %1556 = fadd <8 x float> %1103, %1555
  %1557 = fadd <8 x float> %1556, %1553
  %1558 = fmul <8 x float> %48, %t2003.us
  %1559 = fmul <8 x float> %1558, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a362.us = fptosi <8 x float> %1559 to <8 x i32>
  %a361.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a362.us)
  %1560 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a361.us, <8 x i32> zeroinitializer)
  %1561 = sub <8 x i32> %1560, %1059
  %1562 = add nsw <8 x i32> %1561, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1563 = extractelement <8 x i32> %1562, i64 0
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds float, ptr %f0.host, i64 %1564
  %1566 = load float, ptr %1565, align 4, !tbaa !6
  %1567 = insertelement <8 x float> undef, float %1566, i64 0
  %1568 = extractelement <8 x i32> %1562, i64 1
  %1569 = sext i32 %1568 to i64
  %1570 = getelementptr inbounds float, ptr %f0.host, i64 %1569
  %1571 = load float, ptr %1570, align 4, !tbaa !6
  %1572 = insertelement <8 x float> %1567, float %1571, i64 1
  %1573 = extractelement <8 x i32> %1562, i64 2
  %1574 = sext i32 %1573 to i64
  %1575 = getelementptr inbounds float, ptr %f0.host, i64 %1574
  %1576 = load float, ptr %1575, align 4, !tbaa !6
  %1577 = insertelement <8 x float> %1572, float %1576, i64 2
  %1578 = extractelement <8 x i32> %1562, i64 3
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr inbounds float, ptr %f0.host, i64 %1579
  %1581 = load float, ptr %1580, align 4, !tbaa !6
  %1582 = insertelement <8 x float> %1577, float %1581, i64 3
  %1583 = extractelement <8 x i32> %1562, i64 4
  %1584 = sext i32 %1583 to i64
  %1585 = getelementptr inbounds float, ptr %f0.host, i64 %1584
  %1586 = load float, ptr %1585, align 4, !tbaa !6
  %1587 = insertelement <8 x float> %1582, float %1586, i64 4
  %1588 = extractelement <8 x i32> %1562, i64 5
  %1589 = sext i32 %1588 to i64
  %1590 = getelementptr inbounds float, ptr %f0.host, i64 %1589
  %1591 = load float, ptr %1590, align 4, !tbaa !6
  %1592 = insertelement <8 x float> %1587, float %1591, i64 5
  %1593 = extractelement <8 x i32> %1562, i64 6
  %1594 = sext i32 %1593 to i64
  %1595 = getelementptr inbounds float, ptr %f0.host, i64 %1594
  %1596 = load float, ptr %1595, align 4, !tbaa !6
  %1597 = insertelement <8 x float> %1592, float %1596, i64 6
  %1598 = extractelement <8 x i32> %1562, i64 7
  %1599 = sext i32 %1598 to i64
  %1600 = getelementptr inbounds float, ptr %f0.host, i64 %1599
  %1601 = load float, ptr %1600, align 4, !tbaa !6
  %1602 = insertelement <8 x float> %1597, float %1601, i64 7
  %1603 = fsub <8 x float> %t2003.us, %1103
  %1604 = fmul <8 x float> %53, %1603
  %1605 = fadd <8 x float> %1103, %1604
  %1606 = fadd <8 x float> %1605, %1602
  %1607 = fadd <8 x float> %1557, %1606
  %1608 = fmul <8 x float> %1607, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1609 = fmul <8 x float> %48, %t2002.us
  %1610 = fmul <8 x float> %1609, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a364.us = fptosi <8 x float> %1610 to <8 x i32>
  %a363.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a364.us)
  %1611 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a363.us, <8 x i32> zeroinitializer)
  %1612 = sub <8 x i32> %1611, %1059
  %1613 = add nsw <8 x i32> %1612, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1614 = extractelement <8 x i32> %1613, i64 0
  %1615 = sext i32 %1614 to i64
  %1616 = getelementptr inbounds float, ptr %f0.host, i64 %1615
  %1617 = load float, ptr %1616, align 4, !tbaa !6
  %1618 = insertelement <8 x float> undef, float %1617, i64 0
  %1619 = extractelement <8 x i32> %1613, i64 1
  %1620 = sext i32 %1619 to i64
  %1621 = getelementptr inbounds float, ptr %f0.host, i64 %1620
  %1622 = load float, ptr %1621, align 4, !tbaa !6
  %1623 = insertelement <8 x float> %1618, float %1622, i64 1
  %1624 = extractelement <8 x i32> %1613, i64 2
  %1625 = sext i32 %1624 to i64
  %1626 = getelementptr inbounds float, ptr %f0.host, i64 %1625
  %1627 = load float, ptr %1626, align 4, !tbaa !6
  %1628 = insertelement <8 x float> %1623, float %1627, i64 2
  %1629 = extractelement <8 x i32> %1613, i64 3
  %1630 = sext i32 %1629 to i64
  %1631 = getelementptr inbounds float, ptr %f0.host, i64 %1630
  %1632 = load float, ptr %1631, align 4, !tbaa !6
  %1633 = insertelement <8 x float> %1628, float %1632, i64 3
  %1634 = extractelement <8 x i32> %1613, i64 4
  %1635 = sext i32 %1634 to i64
  %1636 = getelementptr inbounds float, ptr %f0.host, i64 %1635
  %1637 = load float, ptr %1636, align 4, !tbaa !6
  %1638 = insertelement <8 x float> %1633, float %1637, i64 4
  %1639 = extractelement <8 x i32> %1613, i64 5
  %1640 = sext i32 %1639 to i64
  %1641 = getelementptr inbounds float, ptr %f0.host, i64 %1640
  %1642 = load float, ptr %1641, align 4, !tbaa !6
  %1643 = insertelement <8 x float> %1638, float %1642, i64 5
  %1644 = extractelement <8 x i32> %1613, i64 6
  %1645 = sext i32 %1644 to i64
  %1646 = getelementptr inbounds float, ptr %f0.host, i64 %1645
  %1647 = load float, ptr %1646, align 4, !tbaa !6
  %1648 = insertelement <8 x float> %1643, float %1647, i64 6
  %1649 = extractelement <8 x i32> %1613, i64 7
  %1650 = sext i32 %1649 to i64
  %1651 = getelementptr inbounds float, ptr %f0.host, i64 %1650
  %1652 = load float, ptr %1651, align 4, !tbaa !6
  %1653 = insertelement <8 x float> %1648, float %1652, i64 7
  %1654 = fsub <8 x float> %t2002.us, %1103
  %1655 = fmul <8 x float> %53, %1654
  %1656 = fadd <8 x float> %1103, %1655
  %1657 = fadd <8 x float> %1656, %1653
  %1658 = fadd <8 x float> %1608, %1657
  %1659 = fadd <8 x float> %1508, %1658
  %1660 = fadd <8 x float> %1459, %1659
  %1661 = fmul <8 x float> %1660, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1662 = fmul <8 x float> %48, %t2000.us
  %1663 = fmul <8 x float> %1662, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a366.us = fptosi <8 x float> %1663 to <8 x i32>
  %a365.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a366.us)
  %1664 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a365.us, <8 x i32> zeroinitializer)
  %1665 = sub <8 x i32> %1664, %1059
  %1666 = add nsw <8 x i32> %1665, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1667 = extractelement <8 x i32> %1666, i64 0
  %1668 = sext i32 %1667 to i64
  %1669 = getelementptr inbounds float, ptr %f0.host, i64 %1668
  %1670 = load float, ptr %1669, align 4, !tbaa !6
  %1671 = insertelement <8 x float> undef, float %1670, i64 0
  %1672 = extractelement <8 x i32> %1666, i64 1
  %1673 = sext i32 %1672 to i64
  %1674 = getelementptr inbounds float, ptr %f0.host, i64 %1673
  %1675 = load float, ptr %1674, align 4, !tbaa !6
  %1676 = insertelement <8 x float> %1671, float %1675, i64 1
  %1677 = extractelement <8 x i32> %1666, i64 2
  %1678 = sext i32 %1677 to i64
  %1679 = getelementptr inbounds float, ptr %f0.host, i64 %1678
  %1680 = load float, ptr %1679, align 4, !tbaa !6
  %1681 = insertelement <8 x float> %1676, float %1680, i64 2
  %1682 = extractelement <8 x i32> %1666, i64 3
  %1683 = sext i32 %1682 to i64
  %1684 = getelementptr inbounds float, ptr %f0.host, i64 %1683
  %1685 = load float, ptr %1684, align 4, !tbaa !6
  %1686 = insertelement <8 x float> %1681, float %1685, i64 3
  %1687 = extractelement <8 x i32> %1666, i64 4
  %1688 = sext i32 %1687 to i64
  %1689 = getelementptr inbounds float, ptr %f0.host, i64 %1688
  %1690 = load float, ptr %1689, align 4, !tbaa !6
  %1691 = insertelement <8 x float> %1686, float %1690, i64 4
  %1692 = extractelement <8 x i32> %1666, i64 5
  %1693 = sext i32 %1692 to i64
  %1694 = getelementptr inbounds float, ptr %f0.host, i64 %1693
  %1695 = load float, ptr %1694, align 4, !tbaa !6
  %1696 = insertelement <8 x float> %1691, float %1695, i64 5
  %1697 = extractelement <8 x i32> %1666, i64 6
  %1698 = sext i32 %1697 to i64
  %1699 = getelementptr inbounds float, ptr %f0.host, i64 %1698
  %1700 = load float, ptr %1699, align 4, !tbaa !6
  %1701 = insertelement <8 x float> %1696, float %1700, i64 6
  %1702 = extractelement <8 x i32> %1666, i64 7
  %1703 = sext i32 %1702 to i64
  %1704 = getelementptr inbounds float, ptr %f0.host, i64 %1703
  %1705 = load float, ptr %1704, align 4, !tbaa !6
  %1706 = insertelement <8 x float> %1701, float %1705, i64 7
  %1707 = fsub <8 x float> %t2000.us, %1103
  %1708 = fmul <8 x float> %53, %1707
  %1709 = fadd <8 x float> %1103, %1708
  %1710 = fadd <8 x float> %1709, %1706
  %1711 = fmul <8 x float> %48, %t1999.us
  %1712 = fmul <8 x float> %1711, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a368.us = fptosi <8 x float> %1712 to <8 x i32>
  %a367.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a368.us)
  %1713 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a367.us, <8 x i32> zeroinitializer)
  %1714 = sub <8 x i32> %1713, %1059
  %1715 = add nsw <8 x i32> %1714, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1716 = extractelement <8 x i32> %1715, i64 0
  %1717 = sext i32 %1716 to i64
  %1718 = getelementptr inbounds float, ptr %f0.host, i64 %1717
  %1719 = load float, ptr %1718, align 4, !tbaa !6
  %1720 = insertelement <8 x float> undef, float %1719, i64 0
  %1721 = extractelement <8 x i32> %1715, i64 1
  %1722 = sext i32 %1721 to i64
  %1723 = getelementptr inbounds float, ptr %f0.host, i64 %1722
  %1724 = load float, ptr %1723, align 4, !tbaa !6
  %1725 = insertelement <8 x float> %1720, float %1724, i64 1
  %1726 = extractelement <8 x i32> %1715, i64 2
  %1727 = sext i32 %1726 to i64
  %1728 = getelementptr inbounds float, ptr %f0.host, i64 %1727
  %1729 = load float, ptr %1728, align 4, !tbaa !6
  %1730 = insertelement <8 x float> %1725, float %1729, i64 2
  %1731 = extractelement <8 x i32> %1715, i64 3
  %1732 = sext i32 %1731 to i64
  %1733 = getelementptr inbounds float, ptr %f0.host, i64 %1732
  %1734 = load float, ptr %1733, align 4, !tbaa !6
  %1735 = insertelement <8 x float> %1730, float %1734, i64 3
  %1736 = extractelement <8 x i32> %1715, i64 4
  %1737 = sext i32 %1736 to i64
  %1738 = getelementptr inbounds float, ptr %f0.host, i64 %1737
  %1739 = load float, ptr %1738, align 4, !tbaa !6
  %1740 = insertelement <8 x float> %1735, float %1739, i64 4
  %1741 = extractelement <8 x i32> %1715, i64 5
  %1742 = sext i32 %1741 to i64
  %1743 = getelementptr inbounds float, ptr %f0.host, i64 %1742
  %1744 = load float, ptr %1743, align 4, !tbaa !6
  %1745 = insertelement <8 x float> %1740, float %1744, i64 5
  %1746 = extractelement <8 x i32> %1715, i64 6
  %1747 = sext i32 %1746 to i64
  %1748 = getelementptr inbounds float, ptr %f0.host, i64 %1747
  %1749 = load float, ptr %1748, align 4, !tbaa !6
  %1750 = insertelement <8 x float> %1745, float %1749, i64 6
  %1751 = extractelement <8 x i32> %1715, i64 7
  %1752 = sext i32 %1751 to i64
  %1753 = getelementptr inbounds float, ptr %f0.host, i64 %1752
  %1754 = load float, ptr %1753, align 4, !tbaa !6
  %1755 = insertelement <8 x float> %1750, float %1754, i64 7
  %1756 = fsub <8 x float> %t1999.us, %1103
  %1757 = fmul <8 x float> %53, %1756
  %1758 = fadd <8 x float> %1103, %1757
  %1759 = fadd <8 x float> %1758, %1755
  %1760 = fmul <8 x float> %48, %t1998.us
  %1761 = fmul <8 x float> %1760, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a370.us = fptosi <8 x float> %1761 to <8 x i32>
  %a369.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a370.us)
  %1762 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a369.us, <8 x i32> zeroinitializer)
  %1763 = sub <8 x i32> %1762, %1059
  %1764 = add nsw <8 x i32> %1763, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1765 = extractelement <8 x i32> %1764, i64 0
  %1766 = sext i32 %1765 to i64
  %1767 = getelementptr inbounds float, ptr %f0.host, i64 %1766
  %1768 = load float, ptr %1767, align 4, !tbaa !6
  %1769 = insertelement <8 x float> undef, float %1768, i64 0
  %1770 = extractelement <8 x i32> %1764, i64 1
  %1771 = sext i32 %1770 to i64
  %1772 = getelementptr inbounds float, ptr %f0.host, i64 %1771
  %1773 = load float, ptr %1772, align 4, !tbaa !6
  %1774 = insertelement <8 x float> %1769, float %1773, i64 1
  %1775 = extractelement <8 x i32> %1764, i64 2
  %1776 = sext i32 %1775 to i64
  %1777 = getelementptr inbounds float, ptr %f0.host, i64 %1776
  %1778 = load float, ptr %1777, align 4, !tbaa !6
  %1779 = insertelement <8 x float> %1774, float %1778, i64 2
  %1780 = extractelement <8 x i32> %1764, i64 3
  %1781 = sext i32 %1780 to i64
  %1782 = getelementptr inbounds float, ptr %f0.host, i64 %1781
  %1783 = load float, ptr %1782, align 4, !tbaa !6
  %1784 = insertelement <8 x float> %1779, float %1783, i64 3
  %1785 = extractelement <8 x i32> %1764, i64 4
  %1786 = sext i32 %1785 to i64
  %1787 = getelementptr inbounds float, ptr %f0.host, i64 %1786
  %1788 = load float, ptr %1787, align 4, !tbaa !6
  %1789 = insertelement <8 x float> %1784, float %1788, i64 4
  %1790 = extractelement <8 x i32> %1764, i64 5
  %1791 = sext i32 %1790 to i64
  %1792 = getelementptr inbounds float, ptr %f0.host, i64 %1791
  %1793 = load float, ptr %1792, align 4, !tbaa !6
  %1794 = insertelement <8 x float> %1789, float %1793, i64 5
  %1795 = extractelement <8 x i32> %1764, i64 6
  %1796 = sext i32 %1795 to i64
  %1797 = getelementptr inbounds float, ptr %f0.host, i64 %1796
  %1798 = load float, ptr %1797, align 4, !tbaa !6
  %1799 = insertelement <8 x float> %1794, float %1798, i64 6
  %1800 = extractelement <8 x i32> %1764, i64 7
  %1801 = sext i32 %1800 to i64
  %1802 = getelementptr inbounds float, ptr %f0.host, i64 %1801
  %1803 = load float, ptr %1802, align 4, !tbaa !6
  %1804 = insertelement <8 x float> %1799, float %1803, i64 7
  %1805 = fsub <8 x float> %t1998.us, %1103
  %1806 = fmul <8 x float> %53, %1805
  %1807 = fadd <8 x float> %1103, %1806
  %1808 = fadd <8 x float> %1807, %1804
  %1809 = fadd <8 x float> %1759, %1808
  %1810 = fmul <8 x float> %1809, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1811 = fmul <8 x float> %48, %t1997.us
  %1812 = fmul <8 x float> %1811, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a372.us = fptosi <8 x float> %1812 to <8 x i32>
  %a371.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a372.us)
  %1813 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a371.us, <8 x i32> zeroinitializer)
  %1814 = sub <8 x i32> %1813, %1059
  %1815 = add nsw <8 x i32> %1814, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1816 = extractelement <8 x i32> %1815, i64 0
  %1817 = sext i32 %1816 to i64
  %1818 = getelementptr inbounds float, ptr %f0.host, i64 %1817
  %1819 = load float, ptr %1818, align 4, !tbaa !6
  %1820 = insertelement <8 x float> undef, float %1819, i64 0
  %1821 = extractelement <8 x i32> %1815, i64 1
  %1822 = sext i32 %1821 to i64
  %1823 = getelementptr inbounds float, ptr %f0.host, i64 %1822
  %1824 = load float, ptr %1823, align 4, !tbaa !6
  %1825 = insertelement <8 x float> %1820, float %1824, i64 1
  %1826 = extractelement <8 x i32> %1815, i64 2
  %1827 = sext i32 %1826 to i64
  %1828 = getelementptr inbounds float, ptr %f0.host, i64 %1827
  %1829 = load float, ptr %1828, align 4, !tbaa !6
  %1830 = insertelement <8 x float> %1825, float %1829, i64 2
  %1831 = extractelement <8 x i32> %1815, i64 3
  %1832 = sext i32 %1831 to i64
  %1833 = getelementptr inbounds float, ptr %f0.host, i64 %1832
  %1834 = load float, ptr %1833, align 4, !tbaa !6
  %1835 = insertelement <8 x float> %1830, float %1834, i64 3
  %1836 = extractelement <8 x i32> %1815, i64 4
  %1837 = sext i32 %1836 to i64
  %1838 = getelementptr inbounds float, ptr %f0.host, i64 %1837
  %1839 = load float, ptr %1838, align 4, !tbaa !6
  %1840 = insertelement <8 x float> %1835, float %1839, i64 4
  %1841 = extractelement <8 x i32> %1815, i64 5
  %1842 = sext i32 %1841 to i64
  %1843 = getelementptr inbounds float, ptr %f0.host, i64 %1842
  %1844 = load float, ptr %1843, align 4, !tbaa !6
  %1845 = insertelement <8 x float> %1840, float %1844, i64 5
  %1846 = extractelement <8 x i32> %1815, i64 6
  %1847 = sext i32 %1846 to i64
  %1848 = getelementptr inbounds float, ptr %f0.host, i64 %1847
  %1849 = load float, ptr %1848, align 4, !tbaa !6
  %1850 = insertelement <8 x float> %1845, float %1849, i64 6
  %1851 = extractelement <8 x i32> %1815, i64 7
  %1852 = sext i32 %1851 to i64
  %1853 = getelementptr inbounds float, ptr %f0.host, i64 %1852
  %1854 = load float, ptr %1853, align 4, !tbaa !6
  %1855 = insertelement <8 x float> %1850, float %1854, i64 7
  %1856 = fsub <8 x float> %t1997.us, %1103
  %1857 = fmul <8 x float> %53, %1856
  %1858 = fadd <8 x float> %1103, %1857
  %1859 = fadd <8 x float> %1858, %1855
  %1860 = fadd <8 x float> %1810, %1859
  %1861 = fadd <8 x float> %1710, %1860
  %1862 = fmul <8 x float> %1861, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1863 = fadd <8 x float> %1661, %1862
  %1864 = fadd <8 x float> %1259, %1863
  %1865 = fmul <8 x float> %1864, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1866 = sub nuw nsw i64 %indvars.iv, %smax
  %1867 = mul nsw i64 %1866, %28
  %1868 = add i64 %144, %1867
  %1869 = getelementptr inbounds float, ptr %f4.host, i64 %1868
  store <8 x float> %1865, ptr %1869, align 4, !tbaa !44
  br label %"end for f4.s0.v3.v32.us"

"for f4.s0.v3.v3.preheader.us":                   ; preds = %"for f4.s0.v6.us"
  %1870 = trunc i64 %indvars.iv to i32
  %1871 = sitofp i32 %1870 to float
  %t1992.s.us = fmul float %46, %1871
  %1872 = shl nsw i32 %1870, 8
  %.scalar18 = add i32 %1872, %f0.v3.min_realized.s
  %1873 = insertelement <8 x i32> undef, i32 %.scalar18, i64 0
  %1874 = shufflevector <8 x i32> %1873, <8 x i32> poison, <8 x i32> zeroinitializer
  %1875 = insertelement <8 x float> undef, float %t1992.s.us, i64 0
  %1876 = shufflevector <8 x float> %1875, <8 x float> undef, <8 x i32> zeroinitializer
  br label %"for f4.s0.v3.v3.us"

"end for f4.s0.v6.loopexit.us":                   ; preds = %"end for f4.s0.v3.v32.us"
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %27
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %35
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %35
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %35
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %35
  %.not.us = icmp eq i64 %indvars.iv.next16, 8
  br i1 %.not.us, label %destructor_block, label %"for f4.s0.v4.v296.us"

destructor_block:                                 ; preds = %"end for f4.s0.v6.loopexit.us", %"for f4.s0.v4.v296.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f5.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f5.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f5.s0.v4.v316.preheader":
  %a433 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 1
  %f4.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 3
  %f4.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 4
  %f4.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 5
  %f5.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f5.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 6
  %f5.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 7
  %f5.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 8
  %f5.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 9
  %f5.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 10
  %f5.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f5.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 11
  %f5.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f5.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 12
  %f5.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f5.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 13
  %f5.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f5.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 14
  %f4.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 16
  %f5.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f5.s0.v4.v4, 3
  %a426 = add nsw i32 %f5.s0.v4.min, %19
  %b428 = add nsw i32 %f5.s0.v4.max, -7
  %f5.s0.v4.v316.base = tail call i32 @llvm.smin.i32(i32 %b428, i32 %a426)
  %20 = sext i32 %f5.s0.v4.v316.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a433, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f5.s0.v3.min, 1
  %28 = shl i32 %f4.stride.1, 1
  %29 = icmp sgt i32 %f5.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f5.s0.v3.max, %f5.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a428 = lshr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a428, i32 0
  %.not9 = icmp eq i32 %33, 0
  %34 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %34, %33
  %35 = shl nsw i32 %f5.s0.v3.max, 1
  %36 = sub nsw i32 %35, %f4.v3.min_realized
  %37 = add nsw i64 %4, -7
  %38 = sub nsw i64 %37, %14
  br i1 %29, label %"for f5.s0.v4.v316.us.preheader", label %destructor_block, !prof !5

"for f5.s0.v4.v316.us.preheader":                 ; preds = %"for f5.s0.v4.v316.preheader"
  %39 = add nuw i32 %24, 2
  %40 = add i32 %39, %f5.s0.v6.loop_extent.s
  %41 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 2
  %f4.v3.extent_realized.s = load i32, ptr %41, align 4
  %42 = add nsw i32 %f4.v3.extent_realized.s, 1
  %43 = shl i32 %f5.s0.v4.v316.base, 1
  %44 = xor i32 %f4.v4.min_realized, -1
  %45 = add i32 %43, %44
  %46 = mul i32 %45, %f4.stride.1
  %47 = sub i32 %46, %f4.v3.min_realized
  %reass.sub = sub i32 %43, %f4.v4.min_realized
  %48 = mul i32 %reass.sub, %f4.stride.1
  %49 = sub i32 %48, %f4.v3.min_realized
  %50 = add i32 %reass.sub, 1
  %51 = mul i32 %50, %f4.stride.1
  %52 = sub i32 %51, %f4.v3.min_realized
  %53 = add i32 %reass.sub, 2
  %54 = mul i32 %53, %f4.stride.1
  %55 = sub i32 %54, %f4.v3.min_realized
  %56 = sext i32 %f5.s0.v3.min to i64
  %57 = sub nsw i64 %56, %14
  %58 = mul nsw i64 %21, %10
  %59 = add i64 %57, %58
  %scevgep = getelementptr float, ptr %f5.host, i64 %59
  %60 = zext i32 %24 to i64
  %61 = sext i32 %42 to i64
  %zext = zext i32 %40 to i64
  br label %"for f5.s0.v4.v316.us"

"for f5.s0.v4.v316.us":                           ; preds = %"for f5.s0.v4.v316.us.preheader", %"end for f5.s0.v6.loopexit.us"
  %indvars.iv18 = phi i64 [ 0, %"for f5.s0.v4.v316.us.preheader" ], [ %indvars.iv.next19, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %47, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next27.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %49, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next23.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %52, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next19.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %55, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next15.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f5.s0.v4.v316.us.preheader" ], [ %scevgep6.us, %"end for f5.s0.v6.loopexit.us" ]
  %62 = trunc i64 %indvars.iv18 to i32
  %63 = add i32 %f5.s0.v4.v316.base, %62
  %64 = shl nsw i32 %63, 1
  %65 = sub nsw i32 %64, %f4.v4.min_realized
  %66 = add nsw i32 %65, -1
  %67 = mul nsw i32 %66, %f4.stride.1
  %t2036.s.us = add nsw i32 %67, %36
  %68 = mul nsw i32 %65, %f4.stride.1
  %t2037.s.us = add nsw i32 %68, %36
  %69 = add nsw i32 %65, 1
  %70 = mul nsw i32 %69, %f4.stride.1
  %t2038.s.us = add nsw i32 %70, %36
  %71 = add nsw i32 %65, 2
  %72 = mul nsw i32 %71, %f4.stride.1
  %t2039.s.us = add nsw i32 %72, %36
  %73 = sext i32 %t2039.s.us to i64
  %74 = sext i32 %t2038.s.us to i64
  %75 = sext i32 %t2037.s.us to i64
  %76 = sext i32 %t2036.s.us to i64
  %77 = add nsw i64 %21, %indvars.iv18
  %78 = mul nsw i64 %77, %10
  %79 = add i64 %38, %78
  br label %"for f5.s0.v6.us"

"for f5.s0.v6.us":                                ; preds = %"for f5.s0.v4.v316.us", %"end for f5.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f5.s0.v4.v316.us" ], [ %indvars.iv.next, %"end for f5.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f5.s0.v4.v316.us" ], [ %scevgep10.us, %"end for f5.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f5.s0.v3.v3.us", label %"for f5.s0.v3.v3.preheader.us", !prof !4

"for f5.s0.v3.v3.us":                             ; preds = %"for f5.s0.v3.v3.preheader.us", %"for f5.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f5.s0.v3.v3.us" ], [ %a428, %"for f5.s0.v3.v3.preheader.us" ]
  %80 = add i32 %lsr.iv28.us, %27
  %81 = add i32 %lsr.iv24.us, %27
  %82 = add i32 %lsr.iv20.us, %27
  %83 = add i32 %lsr.iv16.us, %27
  %84 = sext i32 %83 to i64
  %85 = add nsw i64 %322, %84
  %86 = add nsw i64 %85, 2
  %87 = getelementptr inbounds float, ptr %f4.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !44
  %89 = add nsw i64 %85, 10
  %90 = getelementptr inbounds float, ptr %f4.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !44
  %92 = shufflevector <8 x float> %88, <8 x float> %91, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %93 = getelementptr inbounds float, ptr %f4.host, i64 %85
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !44
  %95 = add nsw i64 %85, 8
  %96 = getelementptr inbounds float, ptr %f4.host, i64 %95
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !44
  %98 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %99 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %100 = fadd <8 x float> %99, %98
  %101 = fmul <8 x float> %100, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %102 = add nsw i64 %85, -2
  %103 = getelementptr inbounds float, ptr %f4.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !44
  %105 = add nsw i64 %85, 6
  %106 = getelementptr inbounds float, ptr %f4.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !44
  %108 = shufflevector <8 x float> %104, <8 x float> %107, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %109 = fadd <8 x float> %108, %101
  %110 = fadd <8 x float> %92, %109
  %111 = fmul <8 x float> %110, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %112 = sext i32 %82 to i64
  %113 = add nsw i64 %322, %112
  %114 = add nsw i64 %113, 2
  %115 = getelementptr inbounds float, ptr %f4.host, i64 %114
  %116 = load <8 x float>, ptr %115, align 4, !tbaa !44
  %117 = add nsw i64 %113, 10
  %118 = getelementptr inbounds float, ptr %f4.host, i64 %117
  %119 = load <8 x float>, ptr %118, align 4, !tbaa !44
  %120 = shufflevector <8 x float> %116, <8 x float> %119, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %121 = getelementptr inbounds float, ptr %f4.host, i64 %113
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !44
  %123 = add nsw i64 %113, 8
  %124 = getelementptr inbounds float, ptr %f4.host, i64 %123
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !44
  %126 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %127 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %128 = fadd <8 x float> %127, %126
  %129 = fmul <8 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = add nsw i64 %113, -2
  %131 = getelementptr inbounds float, ptr %f4.host, i64 %130
  %132 = load <8 x float>, ptr %131, align 4, !tbaa !44
  %133 = add nsw i64 %113, 6
  %134 = getelementptr inbounds float, ptr %f4.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !44
  %136 = shufflevector <8 x float> %132, <8 x float> %135, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %137 = fadd <8 x float> %136, %129
  %138 = fadd <8 x float> %120, %137
  %139 = sext i32 %81 to i64
  %140 = add nsw i64 %322, %139
  %141 = add nsw i64 %140, 2
  %142 = getelementptr inbounds float, ptr %f4.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !44
  %144 = add nsw i64 %140, 10
  %145 = getelementptr inbounds float, ptr %f4.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !44
  %147 = shufflevector <8 x float> %143, <8 x float> %146, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %148 = getelementptr inbounds float, ptr %f4.host, i64 %140
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !44
  %150 = add nsw i64 %140, 8
  %151 = getelementptr inbounds float, ptr %f4.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !44
  %153 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %154 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %155 = fadd <8 x float> %154, %153
  %156 = fmul <8 x float> %155, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %157 = add nsw i64 %140, -2
  %158 = getelementptr inbounds float, ptr %f4.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !44
  %160 = add nsw i64 %140, 6
  %161 = getelementptr inbounds float, ptr %f4.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !44
  %163 = shufflevector <8 x float> %159, <8 x float> %162, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %164 = fadd <8 x float> %163, %156
  %165 = fadd <8 x float> %147, %164
  %166 = fadd <8 x float> %138, %165
  %167 = fmul <8 x float> %166, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %168 = sext i32 %80 to i64
  %169 = add nsw i64 %322, %168
  %170 = add nsw i64 %169, 2
  %171 = getelementptr inbounds float, ptr %f4.host, i64 %170
  %172 = load <8 x float>, ptr %171, align 4, !tbaa !44
  %173 = add nsw i64 %169, 10
  %174 = getelementptr inbounds float, ptr %f4.host, i64 %173
  %175 = load <8 x float>, ptr %174, align 4, !tbaa !44
  %176 = shufflevector <8 x float> %172, <8 x float> %175, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %177 = getelementptr inbounds float, ptr %f4.host, i64 %169
  %178 = load <8 x float>, ptr %177, align 4, !tbaa !44
  %179 = add nsw i64 %169, 8
  %180 = getelementptr inbounds float, ptr %f4.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !44
  %182 = shufflevector <8 x float> %178, <8 x float> %181, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %183 = shufflevector <8 x float> %178, <8 x float> %181, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %184 = fadd <8 x float> %183, %182
  %185 = fmul <8 x float> %184, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %186 = add nsw i64 %169, -2
  %187 = getelementptr inbounds float, ptr %f4.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !44
  %189 = add nsw i64 %169, 6
  %190 = getelementptr inbounds float, ptr %f4.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !44
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = fadd <8 x float> %192, %185
  %194 = fadd <8 x float> %176, %193
  %195 = fmul <8 x float> %194, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %196 = fadd <8 x float> %167, %195
  %197 = fadd <8 x float> %111, %196
  %198 = fmul <8 x float> %197, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %198, ptr %lsr.iv11.us, align 4, !tbaa !46
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f5.s0.v3.v3.us", label %"for f5.s0.v3.v3.us"

"end for f5.s0.v3.v3.us":                         ; preds = %"for f5.s0.v3.v3.us", %"for f5.s0.v6.us"
  br i1 %.not5, label %"end for f5.s0.v3.v32.us", label %"for f5.s0.v3.v31.preheader.us", !prof !4

"end for f5.s0.v3.v32.us":                        ; preds = %"for f5.s0.v3.v31.preheader.us", %"end for f5.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %199 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %199, label %"end for f5.s0.v6.loopexit.us", label %"for f5.s0.v6.us"

"for f5.s0.v3.v31.preheader.us":                  ; preds = %"end for f5.s0.v3.v3.us"
  %200 = sub nuw nsw i64 %indvars.iv, %60
  %201 = mul nsw i64 %200, %61
  %202 = add nsw i64 %201, %73
  %203 = add nsw i64 %202, -12
  %204 = getelementptr inbounds float, ptr %f4.host, i64 %203
  %205 = load <8 x float>, ptr %204, align 4, !tbaa !44
  %206 = add nsw i64 %202, -4
  %207 = getelementptr inbounds float, ptr %f4.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !44
  %209 = shufflevector <8 x float> %205, <8 x float> %208, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %210 = add nsw i64 %202, -14
  %211 = getelementptr inbounds float, ptr %f4.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !44
  %213 = add nsw i64 %202, -6
  %214 = getelementptr inbounds float, ptr %f4.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !44
  %216 = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %217 = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %218 = fadd <8 x float> %217, %216
  %219 = fmul <8 x float> %218, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %220 = add nsw i64 %202, -16
  %221 = getelementptr inbounds float, ptr %f4.host, i64 %220
  %222 = load <8 x float>, ptr %221, align 4, !tbaa !44
  %223 = add nsw i64 %202, -8
  %224 = getelementptr inbounds float, ptr %f4.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !44
  %226 = shufflevector <8 x float> %222, <8 x float> %225, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %227 = fadd <8 x float> %226, %219
  %228 = fadd <8 x float> %209, %227
  %229 = fmul <8 x float> %228, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %230 = add nsw i64 %201, %74
  %231 = add nsw i64 %230, -12
  %232 = getelementptr inbounds float, ptr %f4.host, i64 %231
  %233 = load <8 x float>, ptr %232, align 4, !tbaa !44
  %234 = add nsw i64 %230, -4
  %235 = getelementptr inbounds float, ptr %f4.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !44
  %237 = shufflevector <8 x float> %233, <8 x float> %236, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %238 = add nsw i64 %230, -14
  %239 = getelementptr inbounds float, ptr %f4.host, i64 %238
  %240 = load <8 x float>, ptr %239, align 4, !tbaa !44
  %241 = add nsw i64 %230, -6
  %242 = getelementptr inbounds float, ptr %f4.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !44
  %244 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %245 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %246 = fadd <8 x float> %245, %244
  %247 = fmul <8 x float> %246, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %248 = add nsw i64 %230, -16
  %249 = getelementptr inbounds float, ptr %f4.host, i64 %248
  %250 = load <8 x float>, ptr %249, align 4, !tbaa !44
  %251 = add nsw i64 %230, -8
  %252 = getelementptr inbounds float, ptr %f4.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !44
  %254 = shufflevector <8 x float> %250, <8 x float> %253, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %255 = fadd <8 x float> %254, %247
  %256 = fadd <8 x float> %237, %255
  %257 = add nsw i64 %201, %75
  %258 = add nsw i64 %257, -12
  %259 = getelementptr inbounds float, ptr %f4.host, i64 %258
  %260 = load <8 x float>, ptr %259, align 4, !tbaa !44
  %261 = add nsw i64 %257, -4
  %262 = getelementptr inbounds float, ptr %f4.host, i64 %261
  %263 = load <8 x float>, ptr %262, align 4, !tbaa !44
  %264 = shufflevector <8 x float> %260, <8 x float> %263, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %265 = add nsw i64 %257, -14
  %266 = getelementptr inbounds float, ptr %f4.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !44
  %268 = add nsw i64 %257, -6
  %269 = getelementptr inbounds float, ptr %f4.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !44
  %271 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %272 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %273 = fadd <8 x float> %272, %271
  %274 = fmul <8 x float> %273, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %275 = add nsw i64 %257, -16
  %276 = getelementptr inbounds float, ptr %f4.host, i64 %275
  %277 = load <8 x float>, ptr %276, align 4, !tbaa !44
  %278 = add nsw i64 %257, -8
  %279 = getelementptr inbounds float, ptr %f4.host, i64 %278
  %280 = load <8 x float>, ptr %279, align 4, !tbaa !44
  %281 = shufflevector <8 x float> %277, <8 x float> %280, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %282 = fadd <8 x float> %281, %274
  %283 = fadd <8 x float> %264, %282
  %284 = fadd <8 x float> %256, %283
  %285 = fmul <8 x float> %284, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %286 = add nsw i64 %201, %76
  %287 = add nsw i64 %286, -12
  %288 = getelementptr inbounds float, ptr %f4.host, i64 %287
  %289 = load <8 x float>, ptr %288, align 4, !tbaa !44
  %290 = add nsw i64 %286, -4
  %291 = getelementptr inbounds float, ptr %f4.host, i64 %290
  %292 = load <8 x float>, ptr %291, align 4, !tbaa !44
  %293 = shufflevector <8 x float> %289, <8 x float> %292, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %294 = add nsw i64 %286, -14
  %295 = getelementptr inbounds float, ptr %f4.host, i64 %294
  %296 = load <8 x float>, ptr %295, align 4, !tbaa !44
  %297 = add nsw i64 %286, -6
  %298 = getelementptr inbounds float, ptr %f4.host, i64 %297
  %299 = load <8 x float>, ptr %298, align 4, !tbaa !44
  %300 = shufflevector <8 x float> %296, <8 x float> %299, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %301 = shufflevector <8 x float> %296, <8 x float> %299, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %302 = fadd <8 x float> %301, %300
  %303 = fmul <8 x float> %302, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %304 = add nsw i64 %286, -16
  %305 = getelementptr inbounds float, ptr %f4.host, i64 %304
  %306 = load <8 x float>, ptr %305, align 4, !tbaa !44
  %307 = add nsw i64 %286, -8
  %308 = getelementptr inbounds float, ptr %f4.host, i64 %307
  %309 = load <8 x float>, ptr %308, align 4, !tbaa !44
  %310 = shufflevector <8 x float> %306, <8 x float> %309, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %311 = fadd <8 x float> %310, %303
  %312 = fadd <8 x float> %293, %311
  %313 = fmul <8 x float> %312, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %314 = fadd <8 x float> %285, %313
  %315 = fadd <8 x float> %229, %314
  %316 = fmul <8 x float> %315, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %317 = sub nuw nsw i64 %indvars.iv, %smax
  %318 = mul nsw i64 %317, %23
  %319 = add i64 %79, %318
  %320 = getelementptr inbounds float, ptr %f5.host, i64 %319
  store <8 x float> %316, ptr %320, align 4, !tbaa !46
  br label %"end for f5.s0.v3.v32.us"

"for f5.s0.v3.v3.preheader.us":                   ; preds = %"for f5.s0.v6.us"
  %321 = sub nuw nsw i64 %indvars.iv, %60
  %322 = mul nsw i64 %321, %61
  br label %"for f5.s0.v3.v3.us"

"end for f5.s0.v6.loopexit.us":                   ; preds = %"end for f5.s0.v3.v32.us"
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next19, 8
  br i1 %.not.us, label %destructor_block, label %"for f5.s0.v4.v316.us"

destructor_block:                                 ; preds = %"end for f5.s0.v6.loopexit.us", %"for f5.s0.v4.v316.preheader"
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f72.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f72.s0.v4.v4, ptr noalias nocapture readonly %closure) #3 {
"for f72.s0.v4.v286.preheader":
  %f2.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 1
  %f2.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 2
  %f2.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 3
  %f72.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f72.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 4
  %f72.s0.v3.min.s = load i32, ptr %4, align 4
  %5 = sext i32 %f72.s0.v3.min.s to i64
  %6 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 5
  %f72.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 6
  %f72.s0.v4.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 7
  %f72.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f72.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 8
  %f72.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f72.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 9
  %f72.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f72.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 10
  %f2.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 12
  %f72.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f72.s0.v4.v4, 5
  %17 = add nsw i32 %f72.s0.v4.min.s, %16
  %a467 = add nsw i32 %17, -1
  %b469 = add nsw i32 %f72.s0.v4.max, -31
  %.not4 = icmp slt i32 %b469, %17
  %f72.s0.v4.v286.base = select i1 %.not4, i32 %b469, i32 %a467
  %18 = sext i32 %f72.s0.v4.v286.base to i64
  %19 = sub nsw i64 %18, %13
  %20 = add nsw i64 %9, 1
  %21 = mul nsw i64 %19, %20
  %22 = xor i64 %11, -1
  %23 = add nsw i64 %22, %5
  %24 = add i64 %23, %21
  %scevgep = getelementptr float, ptr %f72.host, i64 %24
  %25 = shl nsw i64 %9, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f72.s0.v3.min.s, 1
  %28 = shl i32 %f72.s0.v4.v286.base, 1
  %reass.sub = sub i32 %28, %f2.v4.min_realized
  %29 = add i32 %reass.sub, 2
  %30 = add i32 %f2.v3.extent_realized.s, 1
  %31 = mul i32 %29, %30
  %32 = sub i32 %31, %f2.v3.min_realized
  %33 = shl i32 %f2.v3.extent_realized.s, 1
  %34 = add i32 %33, 2
  %35 = add i32 %reass.sub, 1
  %36 = mul i32 %35, %30
  %37 = sub i32 %36, %f2.v3.min_realized
  %38 = mul i32 %reass.sub, %30
  %39 = sub i32 %38, %f2.v3.min_realized
  %40 = xor i32 %f2.v4.min_realized, -1
  %41 = add i32 %28, %40
  %42 = mul i32 %41, %30
  %43 = sub i32 %42, %f2.v3.min_realized
  %44 = sub nsw i32 %f72.s0.v3.max, %f72.s0.v3.min.s
  %45 = add nsw i32 %44, 2
  %a468 = lshr i32 %45, 3
  %46 = icmp sgt i32 %44, 5
  %47 = select i1 %46, i32 %a468, i32 0
  %.not5 = icmp eq i32 %47, 0
  %48 = add nsw i32 %44, 9
  %49 = ashr i32 %48, 3
  %50 = icmp sgt i32 %49, %47
  %51 = shl nsw i32 %f72.s0.v3.max, 1
  %52 = sub nsw i32 %51, %f2.v3.min_realized
  %53 = add nsw i64 %3, -7
  %54 = sub nsw i64 %53, %11
  br label %"for f72.s0.v4.v286"

"for f72.s0.v4.v286":                             ; preds = %"end for f72.s0.v3.v32", %"for f72.s0.v4.v286.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f72.s0.v3.v32" ], [ 0, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f72.s0.v3.v32" ], [ %43, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f72.s0.v3.v32" ], [ %39, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f72.s0.v3.v32" ], [ %37, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f72.s0.v3.v32" ], [ %32, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f72.s0.v3.v32" ], [ %scevgep, %"for f72.s0.v4.v286.preheader" ]
  br i1 %.not5, label %"end for f72.s0.v3.v3", label %"for f72.s0.v3.v3", !prof !4

"for f72.s0.v3.v3":                               ; preds = %"for f72.s0.v4.v286", %"for f72.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f72.s0.v3.v3" ], [ %lsr.iv22, %"for f72.s0.v4.v286" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f72.s0.v3.v3" ], [ %lsr.iv18, %"for f72.s0.v4.v286" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f72.s0.v3.v3" ], [ %lsr.iv14, %"for f72.s0.v4.v286" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f72.s0.v3.v3" ], [ %lsr.iv10, %"for f72.s0.v4.v286" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f72.s0.v3.v3" ], [ %lsr.iv4, %"for f72.s0.v4.v286" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f72.s0.v3.v3" ], [ %a468, %"for f72.s0.v4.v286" ]
  %55 = add i32 %lsr.iv24, %27
  %56 = add i32 %lsr.iv20, %27
  %57 = add i32 %lsr.iv16, %27
  %58 = add i32 %lsr.iv12, %27
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds float, ptr %f2.host, i64 %59
  %61 = load <8 x float>, ptr %60, align 4, !tbaa !42
  %62 = add nsw i64 %59, 8
  %63 = getelementptr inbounds float, ptr %f2.host, i64 %62
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !42
  %65 = shufflevector <8 x float> %61, <8 x float> %64, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = add nsw i64 %59, -2
  %67 = getelementptr inbounds float, ptr %f2.host, i64 %66
  %68 = load <8 x float>, ptr %67, align 4, !tbaa !42
  %69 = add nsw i64 %59, 6
  %70 = getelementptr inbounds float, ptr %f2.host, i64 %69
  %71 = load <8 x float>, ptr %70, align 4, !tbaa !42
  %72 = shufflevector <8 x float> %68, <8 x float> %71, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %73 = shufflevector <8 x float> %68, <8 x float> %71, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %74 = fadd <8 x float> %73, %72
  %75 = fmul <8 x float> %74, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %76 = add nsw i64 %59, -4
  %77 = getelementptr inbounds float, ptr %f2.host, i64 %76
  %78 = load <8 x float>, ptr %77, align 4, !tbaa !42
  %79 = add nsw i64 %59, 4
  %80 = getelementptr inbounds float, ptr %f2.host, i64 %79
  %81 = load <8 x float>, ptr %80, align 4, !tbaa !42
  %82 = shufflevector <8 x float> %78, <8 x float> %81, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %83 = fadd <8 x float> %82, %75
  %84 = fadd <8 x float> %65, %83
  %85 = fmul <8 x float> %84, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %86 = sext i32 %57 to i64
  %87 = getelementptr inbounds float, ptr %f2.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !42
  %89 = add nsw i64 %86, 8
  %90 = getelementptr inbounds float, ptr %f2.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !42
  %92 = shufflevector <8 x float> %88, <8 x float> %91, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %93 = add nsw i64 %86, -2
  %94 = getelementptr inbounds float, ptr %f2.host, i64 %93
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !42
  %96 = add nsw i64 %86, 6
  %97 = getelementptr inbounds float, ptr %f2.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !42
  %99 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %101, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %103 = add nsw i64 %86, -4
  %104 = getelementptr inbounds float, ptr %f2.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !42
  %106 = add nsw i64 %86, 4
  %107 = getelementptr inbounds float, ptr %f2.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !42
  %109 = shufflevector <8 x float> %105, <8 x float> %108, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %110 = fadd <8 x float> %109, %102
  %111 = fadd <8 x float> %92, %110
  %112 = sext i32 %56 to i64
  %113 = getelementptr inbounds float, ptr %f2.host, i64 %112
  %114 = load <8 x float>, ptr %113, align 4, !tbaa !42
  %115 = add nsw i64 %112, 8
  %116 = getelementptr inbounds float, ptr %f2.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !42
  %118 = shufflevector <8 x float> %114, <8 x float> %117, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %119 = add nsw i64 %112, -2
  %120 = getelementptr inbounds float, ptr %f2.host, i64 %119
  %121 = load <8 x float>, ptr %120, align 4, !tbaa !42
  %122 = add nsw i64 %112, 6
  %123 = getelementptr inbounds float, ptr %f2.host, i64 %122
  %124 = load <8 x float>, ptr %123, align 4, !tbaa !42
  %125 = shufflevector <8 x float> %121, <8 x float> %124, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %126 = shufflevector <8 x float> %121, <8 x float> %124, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %127 = fadd <8 x float> %126, %125
  %128 = fmul <8 x float> %127, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %129 = add nsw i64 %112, -4
  %130 = getelementptr inbounds float, ptr %f2.host, i64 %129
  %131 = load <8 x float>, ptr %130, align 4, !tbaa !42
  %132 = add nsw i64 %112, 4
  %133 = getelementptr inbounds float, ptr %f2.host, i64 %132
  %134 = load <8 x float>, ptr %133, align 4, !tbaa !42
  %135 = shufflevector <8 x float> %131, <8 x float> %134, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %136 = fadd <8 x float> %135, %128
  %137 = fadd <8 x float> %118, %136
  %138 = fadd <8 x float> %111, %137
  %139 = fmul <8 x float> %138, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %140 = sext i32 %55 to i64
  %141 = getelementptr inbounds float, ptr %f2.host, i64 %140
  %142 = load <8 x float>, ptr %141, align 4, !tbaa !42
  %143 = add nsw i64 %140, 8
  %144 = getelementptr inbounds float, ptr %f2.host, i64 %143
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !42
  %146 = shufflevector <8 x float> %142, <8 x float> %145, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %147 = add nsw i64 %140, -2
  %148 = getelementptr inbounds float, ptr %f2.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !42
  %150 = add nsw i64 %140, 6
  %151 = getelementptr inbounds float, ptr %f2.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !42
  %153 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %154 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %155 = fadd <8 x float> %154, %153
  %156 = fmul <8 x float> %155, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %157 = add nsw i64 %140, -4
  %158 = getelementptr inbounds float, ptr %f2.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !42
  %160 = add nsw i64 %140, 4
  %161 = getelementptr inbounds float, ptr %f2.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !42
  %163 = shufflevector <8 x float> %159, <8 x float> %162, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %164 = fadd <8 x float> %163, %156
  %165 = fadd <8 x float> %146, %164
  %166 = fmul <8 x float> %165, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %167 = fadd <8 x float> %139, %166
  %168 = fadd <8 x float> %85, %167
  %169 = fmul <8 x float> %168, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %169, ptr %lsr.iv7, align 4, !tbaa !48
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not3 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not3, label %"end for f72.s0.v3.v3", label %"for f72.s0.v3.v3"

"end for f72.s0.v3.v3":                           ; preds = %"for f72.s0.v3.v3", %"for f72.s0.v4.v286"
  br i1 %50, label %"for f72.s0.v3.v31.preheader", label %"end for f72.s0.v3.v32", !prof !5

"for f72.s0.v3.v31.preheader":                    ; preds = %"end for f72.s0.v3.v3"
  %170 = trunc i64 %indvars.iv to i32
  %171 = add i32 %f72.s0.v4.v286.base, %170
  %172 = shl nsw i32 %171, 1
  %173 = sub nsw i32 %172, %f2.v4.min_realized
  %174 = add nsw i32 %173, -1
  %175 = mul nsw i32 %174, %30
  %t2050 = add nsw i32 %175, %52
  %176 = mul nsw i32 %173, %30
  %t2051 = add nsw i32 %176, %52
  %177 = add nsw i32 %173, 1
  %178 = mul nsw i32 %177, %30
  %t2052 = add nsw i32 %178, %52
  %179 = add nsw i32 %173, 2
  %180 = mul nsw i32 %179, %30
  %t2053 = add nsw i32 %180, %52
  %181 = sext i32 %t2053 to i64
  %182 = add nsw i64 %181, -12
  %183 = getelementptr inbounds float, ptr %f2.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !42
  %185 = add nsw i64 %181, -4
  %186 = getelementptr inbounds float, ptr %f2.host, i64 %185
  %187 = load <8 x float>, ptr %186, align 4, !tbaa !42
  %188 = shufflevector <8 x float> %184, <8 x float> %187, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %189 = add nsw i64 %181, -14
  %190 = getelementptr inbounds float, ptr %f2.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !42
  %192 = add nsw i64 %181, -6
  %193 = getelementptr inbounds float, ptr %f2.host, i64 %192
  %194 = load <8 x float>, ptr %193, align 4, !tbaa !42
  %195 = shufflevector <8 x float> %191, <8 x float> %194, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %196 = shufflevector <8 x float> %191, <8 x float> %194, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %197 = fadd <8 x float> %196, %195
  %198 = fmul <8 x float> %197, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %199 = add nsw i64 %181, -16
  %200 = getelementptr inbounds float, ptr %f2.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !42
  %202 = add nsw i64 %181, -8
  %203 = getelementptr inbounds float, ptr %f2.host, i64 %202
  %204 = load <8 x float>, ptr %203, align 4, !tbaa !42
  %205 = shufflevector <8 x float> %201, <8 x float> %204, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %206 = fadd <8 x float> %205, %198
  %207 = fadd <8 x float> %188, %206
  %208 = fmul <8 x float> %207, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %209 = sext i32 %t2052 to i64
  %210 = add nsw i64 %209, -12
  %211 = getelementptr inbounds float, ptr %f2.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !42
  %213 = add nsw i64 %209, -4
  %214 = getelementptr inbounds float, ptr %f2.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !42
  %216 = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %217 = add nsw i64 %209, -14
  %218 = getelementptr inbounds float, ptr %f2.host, i64 %217
  %219 = load <8 x float>, ptr %218, align 4, !tbaa !42
  %220 = add nsw i64 %209, -6
  %221 = getelementptr inbounds float, ptr %f2.host, i64 %220
  %222 = load <8 x float>, ptr %221, align 4, !tbaa !42
  %223 = shufflevector <8 x float> %219, <8 x float> %222, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %224 = shufflevector <8 x float> %219, <8 x float> %222, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %225 = fadd <8 x float> %224, %223
  %226 = fmul <8 x float> %225, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %227 = add nsw i64 %209, -16
  %228 = getelementptr inbounds float, ptr %f2.host, i64 %227
  %229 = load <8 x float>, ptr %228, align 4, !tbaa !42
  %230 = add nsw i64 %209, -8
  %231 = getelementptr inbounds float, ptr %f2.host, i64 %230
  %232 = load <8 x float>, ptr %231, align 4, !tbaa !42
  %233 = shufflevector <8 x float> %229, <8 x float> %232, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %234 = fadd <8 x float> %233, %226
  %235 = fadd <8 x float> %216, %234
  %236 = sext i32 %t2051 to i64
  %237 = add nsw i64 %236, -12
  %238 = getelementptr inbounds float, ptr %f2.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !42
  %240 = add nsw i64 %236, -4
  %241 = getelementptr inbounds float, ptr %f2.host, i64 %240
  %242 = load <8 x float>, ptr %241, align 4, !tbaa !42
  %243 = shufflevector <8 x float> %239, <8 x float> %242, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %244 = add nsw i64 %236, -14
  %245 = getelementptr inbounds float, ptr %f2.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !42
  %247 = add nsw i64 %236, -6
  %248 = getelementptr inbounds float, ptr %f2.host, i64 %247
  %249 = load <8 x float>, ptr %248, align 4, !tbaa !42
  %250 = shufflevector <8 x float> %246, <8 x float> %249, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %251 = shufflevector <8 x float> %246, <8 x float> %249, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %252 = fadd <8 x float> %251, %250
  %253 = fmul <8 x float> %252, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %254 = add nsw i64 %236, -16
  %255 = getelementptr inbounds float, ptr %f2.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !42
  %257 = add nsw i64 %236, -8
  %258 = getelementptr inbounds float, ptr %f2.host, i64 %257
  %259 = load <8 x float>, ptr %258, align 4, !tbaa !42
  %260 = shufflevector <8 x float> %256, <8 x float> %259, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %261 = fadd <8 x float> %260, %253
  %262 = fadd <8 x float> %243, %261
  %263 = fadd <8 x float> %235, %262
  %264 = fmul <8 x float> %263, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %265 = sext i32 %t2050 to i64
  %266 = add nsw i64 %265, -12
  %267 = getelementptr inbounds float, ptr %f2.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !42
  %269 = add nsw i64 %265, -4
  %270 = getelementptr inbounds float, ptr %f2.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !42
  %272 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %273 = add nsw i64 %265, -14
  %274 = getelementptr inbounds float, ptr %f2.host, i64 %273
  %275 = load <8 x float>, ptr %274, align 4, !tbaa !42
  %276 = add nsw i64 %265, -6
  %277 = getelementptr inbounds float, ptr %f2.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !42
  %279 = shufflevector <8 x float> %275, <8 x float> %278, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %280 = shufflevector <8 x float> %275, <8 x float> %278, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %281 = fadd <8 x float> %280, %279
  %282 = fmul <8 x float> %281, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %283 = add nsw i64 %265, -16
  %284 = getelementptr inbounds float, ptr %f2.host, i64 %283
  %285 = load <8 x float>, ptr %284, align 4, !tbaa !42
  %286 = add nsw i64 %265, -8
  %287 = getelementptr inbounds float, ptr %f2.host, i64 %286
  %288 = load <8 x float>, ptr %287, align 4, !tbaa !42
  %289 = shufflevector <8 x float> %285, <8 x float> %288, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %290 = fadd <8 x float> %289, %282
  %291 = fadd <8 x float> %272, %290
  %292 = fmul <8 x float> %291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %293 = fadd <8 x float> %264, %292
  %294 = fadd <8 x float> %208, %293
  %295 = fmul <8 x float> %294, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %296 = add nsw i64 %19, %indvars.iv
  %297 = mul nsw i64 %296, %20
  %298 = add i64 %54, %297
  %299 = getelementptr inbounds float, ptr %f72.host, i64 %298
  store <8 x float> %295, ptr %299, align 4, !tbaa !48
  br label %"end for f72.s0.v3.v32"

"end for f72.s0.v3.v32":                          ; preds = %"for f72.s0.v3.v31.preheader", %"end for f72.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %26
  %lsr.iv.next11 = add i32 %lsr.iv10, %34
  %lsr.iv.next15 = add i32 %lsr.iv14, %34
  %lsr.iv.next19 = add i32 %lsr.iv18, %34
  %lsr.iv.next23 = add i32 %lsr.iv22, %34
  %.not = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not, label %destructor_block, label %"for f72.s0.v4.v286"

destructor_block:                                 ; preds = %"end for f72.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f6.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f6.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f6.s0.v4.v336.preheader":
  %a526 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 1
  %f5.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 3
  %f5.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 4
  %f5.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 5
  %f6.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f6.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 6
  %f6.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 7
  %f6.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 8
  %f6.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 9
  %f6.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 10
  %f6.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f6.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 11
  %f6.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f6.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 12
  %f6.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f6.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 13
  %f6.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f6.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 14
  %f5.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 16
  %f6.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f6.s0.v4.v4, 3
  %a519 = add nsw i32 %f6.s0.v4.min, %19
  %b521 = add nsw i32 %f6.s0.v4.max, -7
  %f6.s0.v4.v336.base = tail call i32 @llvm.smin.i32(i32 %b521, i32 %a519)
  %20 = sext i32 %f6.s0.v4.v336.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a526, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f6.s0.v3.min, 1
  %28 = shl i32 %f5.stride.1, 1
  %29 = icmp sgt i32 %f6.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f6.s0.v3.max, %f6.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a521 = lshr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a521, i32 0
  %.not9 = icmp eq i32 %33, 0
  %34 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %34, %33
  %35 = shl nsw i32 %f6.s0.v3.max, 1
  %36 = sub nsw i32 %35, %f5.v3.min_realized
  %37 = add nsw i64 %4, -7
  %38 = sub nsw i64 %37, %14
  br i1 %29, label %"for f6.s0.v4.v336.us.preheader", label %destructor_block, !prof !5

"for f6.s0.v4.v336.us.preheader":                 ; preds = %"for f6.s0.v4.v336.preheader"
  %39 = add nuw i32 %24, 2
  %40 = add i32 %39, %f6.s0.v6.loop_extent.s
  %41 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 2
  %f5.v3.extent_realized.s = load i32, ptr %41, align 4
  %42 = add nsw i32 %f5.v3.extent_realized.s, 1
  %43 = shl i32 %f6.s0.v4.v336.base, 1
  %44 = xor i32 %f5.v4.min_realized, -1
  %45 = add i32 %43, %44
  %46 = mul i32 %45, %f5.stride.1
  %47 = sub i32 %46, %f5.v3.min_realized
  %reass.sub = sub i32 %43, %f5.v4.min_realized
  %48 = mul i32 %reass.sub, %f5.stride.1
  %49 = sub i32 %48, %f5.v3.min_realized
  %50 = add i32 %reass.sub, 1
  %51 = mul i32 %50, %f5.stride.1
  %52 = sub i32 %51, %f5.v3.min_realized
  %53 = add i32 %reass.sub, 2
  %54 = mul i32 %53, %f5.stride.1
  %55 = sub i32 %54, %f5.v3.min_realized
  %56 = sext i32 %f6.s0.v3.min to i64
  %57 = sub nsw i64 %56, %14
  %58 = mul nsw i64 %21, %10
  %59 = add i64 %57, %58
  %scevgep = getelementptr float, ptr %f6.host, i64 %59
  %60 = zext i32 %24 to i64
  %61 = sext i32 %42 to i64
  %zext = zext i32 %40 to i64
  br label %"for f6.s0.v4.v336.us"

"for f6.s0.v4.v336.us":                           ; preds = %"for f6.s0.v4.v336.us.preheader", %"end for f6.s0.v6.loopexit.us"
  %indvars.iv18 = phi i64 [ 0, %"for f6.s0.v4.v336.us.preheader" ], [ %indvars.iv.next19, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %47, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next27.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %49, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next23.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %52, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next19.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %55, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next15.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f6.s0.v4.v336.us.preheader" ], [ %scevgep6.us, %"end for f6.s0.v6.loopexit.us" ]
  %62 = trunc i64 %indvars.iv18 to i32
  %63 = add i32 %f6.s0.v4.v336.base, %62
  %64 = shl nsw i32 %63, 1
  %65 = sub nsw i32 %64, %f5.v4.min_realized
  %66 = add nsw i32 %65, -1
  %67 = mul nsw i32 %66, %f5.stride.1
  %t2071.s.us = add nsw i32 %67, %36
  %68 = mul nsw i32 %65, %f5.stride.1
  %t2072.s.us = add nsw i32 %68, %36
  %69 = add nsw i32 %65, 1
  %70 = mul nsw i32 %69, %f5.stride.1
  %t2073.s.us = add nsw i32 %70, %36
  %71 = add nsw i32 %65, 2
  %72 = mul nsw i32 %71, %f5.stride.1
  %t2074.s.us = add nsw i32 %72, %36
  %73 = sext i32 %t2074.s.us to i64
  %74 = sext i32 %t2073.s.us to i64
  %75 = sext i32 %t2072.s.us to i64
  %76 = sext i32 %t2071.s.us to i64
  %77 = add nsw i64 %21, %indvars.iv18
  %78 = mul nsw i64 %77, %10
  %79 = add i64 %38, %78
  br label %"for f6.s0.v6.us"

"for f6.s0.v6.us":                                ; preds = %"for f6.s0.v4.v336.us", %"end for f6.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f6.s0.v4.v336.us" ], [ %indvars.iv.next, %"end for f6.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f6.s0.v4.v336.us" ], [ %scevgep10.us, %"end for f6.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f6.s0.v3.v3.us", label %"for f6.s0.v3.v3.preheader.us", !prof !4

"for f6.s0.v3.v3.us":                             ; preds = %"for f6.s0.v3.v3.preheader.us", %"for f6.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f6.s0.v3.v3.us" ], [ %a521, %"for f6.s0.v3.v3.preheader.us" ]
  %80 = add i32 %lsr.iv28.us, %27
  %81 = add i32 %lsr.iv24.us, %27
  %82 = add i32 %lsr.iv20.us, %27
  %83 = add i32 %lsr.iv16.us, %27
  %84 = sext i32 %83 to i64
  %85 = add nsw i64 %322, %84
  %86 = add nsw i64 %85, 2
  %87 = getelementptr inbounds float, ptr %f5.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !46
  %89 = add nsw i64 %85, 10
  %90 = getelementptr inbounds float, ptr %f5.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !46
  %92 = shufflevector <8 x float> %88, <8 x float> %91, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %93 = getelementptr inbounds float, ptr %f5.host, i64 %85
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !46
  %95 = add nsw i64 %85, 8
  %96 = getelementptr inbounds float, ptr %f5.host, i64 %95
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !46
  %98 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %99 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %100 = fadd <8 x float> %99, %98
  %101 = fmul <8 x float> %100, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %102 = add nsw i64 %85, -2
  %103 = getelementptr inbounds float, ptr %f5.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !46
  %105 = add nsw i64 %85, 6
  %106 = getelementptr inbounds float, ptr %f5.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !46
  %108 = shufflevector <8 x float> %104, <8 x float> %107, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %109 = fadd <8 x float> %108, %101
  %110 = fadd <8 x float> %92, %109
  %111 = fmul <8 x float> %110, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %112 = sext i32 %82 to i64
  %113 = add nsw i64 %322, %112
  %114 = add nsw i64 %113, 2
  %115 = getelementptr inbounds float, ptr %f5.host, i64 %114
  %116 = load <8 x float>, ptr %115, align 4, !tbaa !46
  %117 = add nsw i64 %113, 10
  %118 = getelementptr inbounds float, ptr %f5.host, i64 %117
  %119 = load <8 x float>, ptr %118, align 4, !tbaa !46
  %120 = shufflevector <8 x float> %116, <8 x float> %119, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %121 = getelementptr inbounds float, ptr %f5.host, i64 %113
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !46
  %123 = add nsw i64 %113, 8
  %124 = getelementptr inbounds float, ptr %f5.host, i64 %123
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !46
  %126 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %127 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %128 = fadd <8 x float> %127, %126
  %129 = fmul <8 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = add nsw i64 %113, -2
  %131 = getelementptr inbounds float, ptr %f5.host, i64 %130
  %132 = load <8 x float>, ptr %131, align 4, !tbaa !46
  %133 = add nsw i64 %113, 6
  %134 = getelementptr inbounds float, ptr %f5.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !46
  %136 = shufflevector <8 x float> %132, <8 x float> %135, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %137 = fadd <8 x float> %136, %129
  %138 = fadd <8 x float> %120, %137
  %139 = sext i32 %81 to i64
  %140 = add nsw i64 %322, %139
  %141 = add nsw i64 %140, 2
  %142 = getelementptr inbounds float, ptr %f5.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !46
  %144 = add nsw i64 %140, 10
  %145 = getelementptr inbounds float, ptr %f5.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !46
  %147 = shufflevector <8 x float> %143, <8 x float> %146, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %148 = getelementptr inbounds float, ptr %f5.host, i64 %140
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !46
  %150 = add nsw i64 %140, 8
  %151 = getelementptr inbounds float, ptr %f5.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !46
  %153 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %154 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %155 = fadd <8 x float> %154, %153
  %156 = fmul <8 x float> %155, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %157 = add nsw i64 %140, -2
  %158 = getelementptr inbounds float, ptr %f5.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !46
  %160 = add nsw i64 %140, 6
  %161 = getelementptr inbounds float, ptr %f5.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !46
  %163 = shufflevector <8 x float> %159, <8 x float> %162, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %164 = fadd <8 x float> %163, %156
  %165 = fadd <8 x float> %147, %164
  %166 = fadd <8 x float> %138, %165
  %167 = fmul <8 x float> %166, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %168 = sext i32 %80 to i64
  %169 = add nsw i64 %322, %168
  %170 = add nsw i64 %169, 2
  %171 = getelementptr inbounds float, ptr %f5.host, i64 %170
  %172 = load <8 x float>, ptr %171, align 4, !tbaa !46
  %173 = add nsw i64 %169, 10
  %174 = getelementptr inbounds float, ptr %f5.host, i64 %173
  %175 = load <8 x float>, ptr %174, align 4, !tbaa !46
  %176 = shufflevector <8 x float> %172, <8 x float> %175, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %177 = getelementptr inbounds float, ptr %f5.host, i64 %169
  %178 = load <8 x float>, ptr %177, align 4, !tbaa !46
  %179 = add nsw i64 %169, 8
  %180 = getelementptr inbounds float, ptr %f5.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !46
  %182 = shufflevector <8 x float> %178, <8 x float> %181, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %183 = shufflevector <8 x float> %178, <8 x float> %181, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %184 = fadd <8 x float> %183, %182
  %185 = fmul <8 x float> %184, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %186 = add nsw i64 %169, -2
  %187 = getelementptr inbounds float, ptr %f5.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !46
  %189 = add nsw i64 %169, 6
  %190 = getelementptr inbounds float, ptr %f5.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !46
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = fadd <8 x float> %192, %185
  %194 = fadd <8 x float> %176, %193
  %195 = fmul <8 x float> %194, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %196 = fadd <8 x float> %167, %195
  %197 = fadd <8 x float> %111, %196
  %198 = fmul <8 x float> %197, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %198, ptr %lsr.iv11.us, align 4, !tbaa !50
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f6.s0.v3.v3.us", label %"for f6.s0.v3.v3.us"

"end for f6.s0.v3.v3.us":                         ; preds = %"for f6.s0.v3.v3.us", %"for f6.s0.v6.us"
  br i1 %.not5, label %"end for f6.s0.v3.v32.us", label %"for f6.s0.v3.v31.preheader.us", !prof !4

"end for f6.s0.v3.v32.us":                        ; preds = %"for f6.s0.v3.v31.preheader.us", %"end for f6.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %199 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %199, label %"end for f6.s0.v6.loopexit.us", label %"for f6.s0.v6.us"

"for f6.s0.v3.v31.preheader.us":                  ; preds = %"end for f6.s0.v3.v3.us"
  %200 = sub nuw nsw i64 %indvars.iv, %60
  %201 = mul nsw i64 %200, %61
  %202 = add nsw i64 %201, %73
  %203 = add nsw i64 %202, -12
  %204 = getelementptr inbounds float, ptr %f5.host, i64 %203
  %205 = load <8 x float>, ptr %204, align 4, !tbaa !46
  %206 = add nsw i64 %202, -4
  %207 = getelementptr inbounds float, ptr %f5.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !46
  %209 = shufflevector <8 x float> %205, <8 x float> %208, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %210 = add nsw i64 %202, -14
  %211 = getelementptr inbounds float, ptr %f5.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !46
  %213 = add nsw i64 %202, -6
  %214 = getelementptr inbounds float, ptr %f5.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !46
  %216 = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %217 = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %218 = fadd <8 x float> %217, %216
  %219 = fmul <8 x float> %218, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %220 = add nsw i64 %202, -16
  %221 = getelementptr inbounds float, ptr %f5.host, i64 %220
  %222 = load <8 x float>, ptr %221, align 4, !tbaa !46
  %223 = add nsw i64 %202, -8
  %224 = getelementptr inbounds float, ptr %f5.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !46
  %226 = shufflevector <8 x float> %222, <8 x float> %225, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %227 = fadd <8 x float> %226, %219
  %228 = fadd <8 x float> %209, %227
  %229 = fmul <8 x float> %228, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %230 = add nsw i64 %201, %74
  %231 = add nsw i64 %230, -12
  %232 = getelementptr inbounds float, ptr %f5.host, i64 %231
  %233 = load <8 x float>, ptr %232, align 4, !tbaa !46
  %234 = add nsw i64 %230, -4
  %235 = getelementptr inbounds float, ptr %f5.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !46
  %237 = shufflevector <8 x float> %233, <8 x float> %236, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %238 = add nsw i64 %230, -14
  %239 = getelementptr inbounds float, ptr %f5.host, i64 %238
  %240 = load <8 x float>, ptr %239, align 4, !tbaa !46
  %241 = add nsw i64 %230, -6
  %242 = getelementptr inbounds float, ptr %f5.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !46
  %244 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %245 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %246 = fadd <8 x float> %245, %244
  %247 = fmul <8 x float> %246, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %248 = add nsw i64 %230, -16
  %249 = getelementptr inbounds float, ptr %f5.host, i64 %248
  %250 = load <8 x float>, ptr %249, align 4, !tbaa !46
  %251 = add nsw i64 %230, -8
  %252 = getelementptr inbounds float, ptr %f5.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !46
  %254 = shufflevector <8 x float> %250, <8 x float> %253, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %255 = fadd <8 x float> %254, %247
  %256 = fadd <8 x float> %237, %255
  %257 = add nsw i64 %201, %75
  %258 = add nsw i64 %257, -12
  %259 = getelementptr inbounds float, ptr %f5.host, i64 %258
  %260 = load <8 x float>, ptr %259, align 4, !tbaa !46
  %261 = add nsw i64 %257, -4
  %262 = getelementptr inbounds float, ptr %f5.host, i64 %261
  %263 = load <8 x float>, ptr %262, align 4, !tbaa !46
  %264 = shufflevector <8 x float> %260, <8 x float> %263, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %265 = add nsw i64 %257, -14
  %266 = getelementptr inbounds float, ptr %f5.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !46
  %268 = add nsw i64 %257, -6
  %269 = getelementptr inbounds float, ptr %f5.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !46
  %271 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %272 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %273 = fadd <8 x float> %272, %271
  %274 = fmul <8 x float> %273, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %275 = add nsw i64 %257, -16
  %276 = getelementptr inbounds float, ptr %f5.host, i64 %275
  %277 = load <8 x float>, ptr %276, align 4, !tbaa !46
  %278 = add nsw i64 %257, -8
  %279 = getelementptr inbounds float, ptr %f5.host, i64 %278
  %280 = load <8 x float>, ptr %279, align 4, !tbaa !46
  %281 = shufflevector <8 x float> %277, <8 x float> %280, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %282 = fadd <8 x float> %281, %274
  %283 = fadd <8 x float> %264, %282
  %284 = fadd <8 x float> %256, %283
  %285 = fmul <8 x float> %284, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %286 = add nsw i64 %201, %76
  %287 = add nsw i64 %286, -12
  %288 = getelementptr inbounds float, ptr %f5.host, i64 %287
  %289 = load <8 x float>, ptr %288, align 4, !tbaa !46
  %290 = add nsw i64 %286, -4
  %291 = getelementptr inbounds float, ptr %f5.host, i64 %290
  %292 = load <8 x float>, ptr %291, align 4, !tbaa !46
  %293 = shufflevector <8 x float> %289, <8 x float> %292, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %294 = add nsw i64 %286, -14
  %295 = getelementptr inbounds float, ptr %f5.host, i64 %294
  %296 = load <8 x float>, ptr %295, align 4, !tbaa !46
  %297 = add nsw i64 %286, -6
  %298 = getelementptr inbounds float, ptr %f5.host, i64 %297
  %299 = load <8 x float>, ptr %298, align 4, !tbaa !46
  %300 = shufflevector <8 x float> %296, <8 x float> %299, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %301 = shufflevector <8 x float> %296, <8 x float> %299, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %302 = fadd <8 x float> %301, %300
  %303 = fmul <8 x float> %302, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %304 = add nsw i64 %286, -16
  %305 = getelementptr inbounds float, ptr %f5.host, i64 %304
  %306 = load <8 x float>, ptr %305, align 4, !tbaa !46
  %307 = add nsw i64 %286, -8
  %308 = getelementptr inbounds float, ptr %f5.host, i64 %307
  %309 = load <8 x float>, ptr %308, align 4, !tbaa !46
  %310 = shufflevector <8 x float> %306, <8 x float> %309, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %311 = fadd <8 x float> %310, %303
  %312 = fadd <8 x float> %293, %311
  %313 = fmul <8 x float> %312, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %314 = fadd <8 x float> %285, %313
  %315 = fadd <8 x float> %229, %314
  %316 = fmul <8 x float> %315, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %317 = sub nuw nsw i64 %indvars.iv, %smax
  %318 = mul nsw i64 %317, %23
  %319 = add i64 %79, %318
  %320 = getelementptr inbounds float, ptr %f6.host, i64 %319
  store <8 x float> %316, ptr %320, align 4, !tbaa !50
  br label %"end for f6.s0.v3.v32.us"

"for f6.s0.v3.v3.preheader.us":                   ; preds = %"for f6.s0.v6.us"
  %321 = sub nuw nsw i64 %indvars.iv, %60
  %322 = mul nsw i64 %321, %61
  br label %"for f6.s0.v3.v3.us"

"end for f6.s0.v6.loopexit.us":                   ; preds = %"end for f6.s0.v3.v32.us"
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next19, 8
  br i1 %.not.us, label %destructor_block, label %"for f6.s0.v4.v336.us"

destructor_block:                                 ; preds = %"end for f6.s0.v6.loopexit.us", %"for f6.s0.v4.v336.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f73.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f73.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f73.s0.v4.v306.preheader":
  %f72.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 1
  %f72.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 2
  %f72.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 3
  %f73.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f73.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 4
  %f73.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f73.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 5
  %f73.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 6
  %f73.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 7
  %f73.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f73.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 8
  %f73.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f73.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 9
  %f73.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f73.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 10
  %f72.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 12
  %f73.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f73.s0.v4.v4, 5
  %a558 = add nsw i32 %f73.s0.v4.min, %16
  %b560 = add nsw i32 %f73.s0.v4.max, -31
  %f73.s0.v4.v306.base = tail call i32 @llvm.smin.i32(i32 %b560, i32 %a558)
  %17 = sext i32 %f73.s0.v4.v306.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f73.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f73.s0.v3.min, 1
  %26 = shl i32 %f73.s0.v4.v306.base, 1
  %reass.sub = sub i32 %26, %f72.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f72.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f72.v3.min_realized
  %31 = shl i32 %f72.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f72.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f72.v3.min_realized
  %38 = xor i32 %f72.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f72.v3.min_realized
  %42 = sub nsw i32 %f73.s0.v3.max, %f73.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a559 = lshr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a559, i32 0
  %.not5 = icmp eq i32 %45, 0
  %46 = ashr i32 %42, 3
  %.not = icmp slt i32 %46, %45
  %47 = shl nsw i32 %f73.s0.v3.max, 1
  %48 = sub nsw i32 %47, %f72.v3.min_realized
  %49 = add nsw i64 %3, -7
  %50 = sub nsw i64 %49, %11
  br label %"for f73.s0.v4.v306"

"for f73.s0.v4.v306":                             ; preds = %"end for f73.s0.v3.v32", %"for f73.s0.v4.v306.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f73.s0.v3.v32" ], [ 0, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f73.s0.v3.v32" ], [ %41, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f73.s0.v3.v32" ], [ %37, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f73.s0.v3.v32" ], [ %35, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f73.s0.v3.v32" ], [ %30, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f73.s0.v3.v32" ], [ %scevgep, %"for f73.s0.v4.v306.preheader" ]
  br i1 %.not5, label %"end for f73.s0.v3.v3", label %"for f73.s0.v3.v3", !prof !4

"for f73.s0.v3.v3":                               ; preds = %"for f73.s0.v4.v306", %"for f73.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f73.s0.v3.v3" ], [ %lsr.iv22, %"for f73.s0.v4.v306" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f73.s0.v3.v3" ], [ %lsr.iv18, %"for f73.s0.v4.v306" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f73.s0.v3.v3" ], [ %lsr.iv14, %"for f73.s0.v4.v306" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f73.s0.v3.v3" ], [ %lsr.iv10, %"for f73.s0.v4.v306" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f73.s0.v3.v3" ], [ %lsr.iv4, %"for f73.s0.v4.v306" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f73.s0.v3.v3" ], [ %a559, %"for f73.s0.v4.v306" ]
  %51 = add i32 %lsr.iv24, %25
  %52 = add i32 %lsr.iv20, %25
  %53 = add i32 %lsr.iv16, %25
  %54 = add i32 %lsr.iv12, %25
  %55 = sext i32 %54 to i64
  %56 = add nsw i64 %55, 2
  %57 = getelementptr inbounds float, ptr %f72.host, i64 %56
  %58 = load <8 x float>, ptr %57, align 4, !tbaa !48
  %59 = add nsw i64 %55, 10
  %60 = getelementptr inbounds float, ptr %f72.host, i64 %59
  %61 = load <8 x float>, ptr %60, align 4, !tbaa !48
  %62 = shufflevector <8 x float> %58, <8 x float> %61, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %63 = getelementptr inbounds float, ptr %f72.host, i64 %55
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !48
  %65 = add nsw i64 %55, 8
  %66 = getelementptr inbounds float, ptr %f72.host, i64 %65
  %67 = load <8 x float>, ptr %66, align 4, !tbaa !48
  %68 = shufflevector <8 x float> %64, <8 x float> %67, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %69 = shufflevector <8 x float> %64, <8 x float> %67, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %70 = fadd <8 x float> %69, %68
  %71 = fmul <8 x float> %70, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %72 = add nsw i64 %55, -2
  %73 = getelementptr inbounds float, ptr %f72.host, i64 %72
  %74 = load <8 x float>, ptr %73, align 4, !tbaa !48
  %75 = add nsw i64 %55, 6
  %76 = getelementptr inbounds float, ptr %f72.host, i64 %75
  %77 = load <8 x float>, ptr %76, align 4, !tbaa !48
  %78 = shufflevector <8 x float> %74, <8 x float> %77, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %79 = fadd <8 x float> %78, %71
  %80 = fadd <8 x float> %62, %79
  %81 = fmul <8 x float> %80, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %82 = sext i32 %53 to i64
  %83 = add nsw i64 %82, 2
  %84 = getelementptr inbounds float, ptr %f72.host, i64 %83
  %85 = load <8 x float>, ptr %84, align 4, !tbaa !48
  %86 = add nsw i64 %82, 10
  %87 = getelementptr inbounds float, ptr %f72.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !48
  %89 = shufflevector <8 x float> %85, <8 x float> %88, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %90 = getelementptr inbounds float, ptr %f72.host, i64 %82
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !48
  %92 = add nsw i64 %82, 8
  %93 = getelementptr inbounds float, ptr %f72.host, i64 %92
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !48
  %95 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %96 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %97 = fadd <8 x float> %96, %95
  %98 = fmul <8 x float> %97, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %99 = add nsw i64 %82, -2
  %100 = getelementptr inbounds float, ptr %f72.host, i64 %99
  %101 = load <8 x float>, ptr %100, align 4, !tbaa !48
  %102 = add nsw i64 %82, 6
  %103 = getelementptr inbounds float, ptr %f72.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !48
  %105 = shufflevector <8 x float> %101, <8 x float> %104, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %106 = fadd <8 x float> %105, %98
  %107 = fadd <8 x float> %89, %106
  %108 = sext i32 %52 to i64
  %109 = add nsw i64 %108, 2
  %110 = getelementptr inbounds float, ptr %f72.host, i64 %109
  %111 = load <8 x float>, ptr %110, align 4, !tbaa !48
  %112 = add nsw i64 %108, 10
  %113 = getelementptr inbounds float, ptr %f72.host, i64 %112
  %114 = load <8 x float>, ptr %113, align 4, !tbaa !48
  %115 = shufflevector <8 x float> %111, <8 x float> %114, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %116 = getelementptr inbounds float, ptr %f72.host, i64 %108
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !48
  %118 = add nsw i64 %108, 8
  %119 = getelementptr inbounds float, ptr %f72.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !48
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %122 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %123 = fadd <8 x float> %122, %121
  %124 = fmul <8 x float> %123, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %125 = add nsw i64 %108, -2
  %126 = getelementptr inbounds float, ptr %f72.host, i64 %125
  %127 = load <8 x float>, ptr %126, align 4, !tbaa !48
  %128 = add nsw i64 %108, 6
  %129 = getelementptr inbounds float, ptr %f72.host, i64 %128
  %130 = load <8 x float>, ptr %129, align 4, !tbaa !48
  %131 = shufflevector <8 x float> %127, <8 x float> %130, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %132 = fadd <8 x float> %131, %124
  %133 = fadd <8 x float> %115, %132
  %134 = fadd <8 x float> %107, %133
  %135 = fmul <8 x float> %134, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %136 = sext i32 %51 to i64
  %137 = add nsw i64 %136, 2
  %138 = getelementptr inbounds float, ptr %f72.host, i64 %137
  %139 = load <8 x float>, ptr %138, align 4, !tbaa !48
  %140 = add nsw i64 %136, 10
  %141 = getelementptr inbounds float, ptr %f72.host, i64 %140
  %142 = load <8 x float>, ptr %141, align 4, !tbaa !48
  %143 = shufflevector <8 x float> %139, <8 x float> %142, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %144 = getelementptr inbounds float, ptr %f72.host, i64 %136
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !48
  %146 = add nsw i64 %136, 8
  %147 = getelementptr inbounds float, ptr %f72.host, i64 %146
  %148 = load <8 x float>, ptr %147, align 4, !tbaa !48
  %149 = shufflevector <8 x float> %145, <8 x float> %148, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %150 = shufflevector <8 x float> %145, <8 x float> %148, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %151, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %153 = add nsw i64 %136, -2
  %154 = getelementptr inbounds float, ptr %f72.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !48
  %156 = add nsw i64 %136, 6
  %157 = getelementptr inbounds float, ptr %f72.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !48
  %159 = shufflevector <8 x float> %155, <8 x float> %158, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %160 = fadd <8 x float> %159, %152
  %161 = fadd <8 x float> %143, %160
  %162 = fmul <8 x float> %161, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %163 = fadd <8 x float> %135, %162
  %164 = fadd <8 x float> %81, %163
  %165 = fmul <8 x float> %164, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %165, ptr %lsr.iv7, align 4, !tbaa !52
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f73.s0.v3.v3", label %"for f73.s0.v3.v3"

"end for f73.s0.v3.v3":                           ; preds = %"for f73.s0.v3.v3", %"for f73.s0.v4.v306"
  br i1 %.not, label %"end for f73.s0.v3.v32", label %"for f73.s0.v3.v31.preheader", !prof !4

"for f73.s0.v3.v31.preheader":                    ; preds = %"end for f73.s0.v3.v3"
  %166 = trunc i64 %indvars.iv to i32
  %167 = add i32 %f73.s0.v4.v306.base, %166
  %168 = shl nsw i32 %167, 1
  %169 = sub nsw i32 %168, %f72.v4.min_realized
  %170 = add nsw i32 %169, -1
  %171 = mul nsw i32 %170, %28
  %t2085 = add nsw i32 %171, %48
  %172 = mul nsw i32 %169, %28
  %t2086 = add nsw i32 %172, %48
  %173 = add nsw i32 %169, 1
  %174 = mul nsw i32 %173, %28
  %t2087 = add nsw i32 %174, %48
  %175 = add nsw i32 %169, 2
  %176 = mul nsw i32 %175, %28
  %t2088 = add nsw i32 %176, %48
  %177 = sext i32 %t2088 to i64
  %178 = add nsw i64 %177, -12
  %179 = getelementptr inbounds float, ptr %f72.host, i64 %178
  %180 = load <8 x float>, ptr %179, align 4, !tbaa !48
  %181 = add nsw i64 %177, -4
  %182 = getelementptr inbounds float, ptr %f72.host, i64 %181
  %183 = load <8 x float>, ptr %182, align 4, !tbaa !48
  %184 = shufflevector <8 x float> %180, <8 x float> %183, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = add nsw i64 %177, -14
  %186 = getelementptr inbounds float, ptr %f72.host, i64 %185
  %187 = load <8 x float>, ptr %186, align 4, !tbaa !48
  %188 = add nsw i64 %177, -6
  %189 = getelementptr inbounds float, ptr %f72.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !48
  %191 = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %192 = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %193 = fadd <8 x float> %192, %191
  %194 = fmul <8 x float> %193, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %195 = add nsw i64 %177, -16
  %196 = getelementptr inbounds float, ptr %f72.host, i64 %195
  %197 = load <8 x float>, ptr %196, align 4, !tbaa !48
  %198 = add nsw i64 %177, -8
  %199 = getelementptr inbounds float, ptr %f72.host, i64 %198
  %200 = load <8 x float>, ptr %199, align 4, !tbaa !48
  %201 = shufflevector <8 x float> %197, <8 x float> %200, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %202 = fadd <8 x float> %201, %194
  %203 = fadd <8 x float> %184, %202
  %204 = fmul <8 x float> %203, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %205 = sext i32 %t2087 to i64
  %206 = add nsw i64 %205, -12
  %207 = getelementptr inbounds float, ptr %f72.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !48
  %209 = add nsw i64 %205, -4
  %210 = getelementptr inbounds float, ptr %f72.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !48
  %212 = shufflevector <8 x float> %208, <8 x float> %211, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %213 = add nsw i64 %205, -14
  %214 = getelementptr inbounds float, ptr %f72.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !48
  %216 = add nsw i64 %205, -6
  %217 = getelementptr inbounds float, ptr %f72.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !48
  %219 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %220 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = fadd <8 x float> %220, %219
  %222 = fmul <8 x float> %221, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %223 = add nsw i64 %205, -16
  %224 = getelementptr inbounds float, ptr %f72.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !48
  %226 = add nsw i64 %205, -8
  %227 = getelementptr inbounds float, ptr %f72.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !48
  %229 = shufflevector <8 x float> %225, <8 x float> %228, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %230 = fadd <8 x float> %229, %222
  %231 = fadd <8 x float> %212, %230
  %232 = sext i32 %t2086 to i64
  %233 = add nsw i64 %232, -12
  %234 = getelementptr inbounds float, ptr %f72.host, i64 %233
  %235 = load <8 x float>, ptr %234, align 4, !tbaa !48
  %236 = add nsw i64 %232, -4
  %237 = getelementptr inbounds float, ptr %f72.host, i64 %236
  %238 = load <8 x float>, ptr %237, align 4, !tbaa !48
  %239 = shufflevector <8 x float> %235, <8 x float> %238, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %240 = add nsw i64 %232, -14
  %241 = getelementptr inbounds float, ptr %f72.host, i64 %240
  %242 = load <8 x float>, ptr %241, align 4, !tbaa !48
  %243 = add nsw i64 %232, -6
  %244 = getelementptr inbounds float, ptr %f72.host, i64 %243
  %245 = load <8 x float>, ptr %244, align 4, !tbaa !48
  %246 = shufflevector <8 x float> %242, <8 x float> %245, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %247 = shufflevector <8 x float> %242, <8 x float> %245, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %248 = fadd <8 x float> %247, %246
  %249 = fmul <8 x float> %248, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %250 = add nsw i64 %232, -16
  %251 = getelementptr inbounds float, ptr %f72.host, i64 %250
  %252 = load <8 x float>, ptr %251, align 4, !tbaa !48
  %253 = add nsw i64 %232, -8
  %254 = getelementptr inbounds float, ptr %f72.host, i64 %253
  %255 = load <8 x float>, ptr %254, align 4, !tbaa !48
  %256 = shufflevector <8 x float> %252, <8 x float> %255, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %257 = fadd <8 x float> %256, %249
  %258 = fadd <8 x float> %239, %257
  %259 = fadd <8 x float> %231, %258
  %260 = fmul <8 x float> %259, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %261 = sext i32 %t2085 to i64
  %262 = add nsw i64 %261, -12
  %263 = getelementptr inbounds float, ptr %f72.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !48
  %265 = add nsw i64 %261, -4
  %266 = getelementptr inbounds float, ptr %f72.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !48
  %268 = shufflevector <8 x float> %264, <8 x float> %267, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %269 = add nsw i64 %261, -14
  %270 = getelementptr inbounds float, ptr %f72.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !48
  %272 = add nsw i64 %261, -6
  %273 = getelementptr inbounds float, ptr %f72.host, i64 %272
  %274 = load <8 x float>, ptr %273, align 4, !tbaa !48
  %275 = shufflevector <8 x float> %271, <8 x float> %274, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %276 = shufflevector <8 x float> %271, <8 x float> %274, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %277 = fadd <8 x float> %276, %275
  %278 = fmul <8 x float> %277, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %279 = add nsw i64 %261, -16
  %280 = getelementptr inbounds float, ptr %f72.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !48
  %282 = add nsw i64 %261, -8
  %283 = getelementptr inbounds float, ptr %f72.host, i64 %282
  %284 = load <8 x float>, ptr %283, align 4, !tbaa !48
  %285 = shufflevector <8 x float> %281, <8 x float> %284, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %286 = fadd <8 x float> %285, %278
  %287 = fadd <8 x float> %268, %286
  %288 = fmul <8 x float> %287, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %289 = fadd <8 x float> %260, %288
  %290 = fadd <8 x float> %204, %289
  %291 = fmul <8 x float> %290, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %292 = add nsw i64 %18, %indvars.iv
  %293 = mul nsw i64 %292, %19
  %294 = add i64 %50, %293
  %295 = getelementptr inbounds float, ptr %f73.host, i64 %294
  store <8 x float> %291, ptr %295, align 4, !tbaa !52
  br label %"end for f73.s0.v3.v32"

"end for f73.s0.v3.v32":                          ; preds = %"for f73.s0.v3.v31.preheader", %"end for f73.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f73.s0.v4.v306"

destructor_block:                                 ; preds = %"end for f73.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f7.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f7.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f7.s0.v4.v356.preheader":
  %a611 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 1
  %f6.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 3
  %f6.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 4
  %f6.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 5
  %f7.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f7.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 6
  %f7.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 7
  %f7.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 8
  %f7.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 9
  %f7.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 10
  %f7.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f7.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 11
  %f7.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f7.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 12
  %f7.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f7.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 13
  %f7.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f7.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 14
  %f6.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 16
  %f7.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f7.s0.v4.v4, 3
  %a604 = add nsw i32 %f7.s0.v4.min, %19
  %b606 = add nsw i32 %f7.s0.v4.max, -7
  %f7.s0.v4.v356.base = tail call i32 @llvm.smin.i32(i32 %b606, i32 %a604)
  %20 = sext i32 %f7.s0.v4.v356.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a611, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f7.s0.v3.min, 1
  %28 = shl i32 %f6.stride.1, 1
  %29 = icmp sgt i32 %f7.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f7.s0.v3.max, %f7.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a606 = lshr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a606, i32 0
  %.not9 = icmp eq i32 %33, 0
  %34 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %34, %33
  %35 = shl nsw i32 %f7.s0.v3.max, 1
  %36 = sub nsw i32 %35, %f6.v3.min_realized
  %37 = add nsw i64 %4, -7
  %38 = sub nsw i64 %37, %14
  br i1 %29, label %"for f7.s0.v4.v356.us.preheader", label %destructor_block, !prof !5

"for f7.s0.v4.v356.us.preheader":                 ; preds = %"for f7.s0.v4.v356.preheader"
  %39 = add nuw i32 %24, 2
  %40 = add i32 %39, %f7.s0.v6.loop_extent.s
  %41 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 2
  %f6.v3.extent_realized.s = load i32, ptr %41, align 4
  %42 = add nsw i32 %f6.v3.extent_realized.s, 1
  %43 = shl i32 %f7.s0.v4.v356.base, 1
  %44 = xor i32 %f6.v4.min_realized, -1
  %45 = add i32 %43, %44
  %46 = mul i32 %45, %f6.stride.1
  %47 = sub i32 %46, %f6.v3.min_realized
  %reass.sub = sub i32 %43, %f6.v4.min_realized
  %48 = mul i32 %reass.sub, %f6.stride.1
  %49 = sub i32 %48, %f6.v3.min_realized
  %50 = add i32 %reass.sub, 1
  %51 = mul i32 %50, %f6.stride.1
  %52 = sub i32 %51, %f6.v3.min_realized
  %53 = add i32 %reass.sub, 2
  %54 = mul i32 %53, %f6.stride.1
  %55 = sub i32 %54, %f6.v3.min_realized
  %56 = sext i32 %f7.s0.v3.min to i64
  %57 = sub nsw i64 %56, %14
  %58 = mul nsw i64 %21, %10
  %59 = add i64 %57, %58
  %scevgep = getelementptr float, ptr %f7.host, i64 %59
  %60 = zext i32 %24 to i64
  %61 = sext i32 %42 to i64
  %zext = zext i32 %40 to i64
  br label %"for f7.s0.v4.v356.us"

"for f7.s0.v4.v356.us":                           ; preds = %"for f7.s0.v4.v356.us.preheader", %"end for f7.s0.v6.loopexit.us"
  %indvars.iv18 = phi i64 [ 0, %"for f7.s0.v4.v356.us.preheader" ], [ %indvars.iv.next19, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %47, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next27.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %49, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next23.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %52, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next19.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %55, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next15.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f7.s0.v4.v356.us.preheader" ], [ %scevgep6.us, %"end for f7.s0.v6.loopexit.us" ]
  %62 = trunc i64 %indvars.iv18 to i32
  %63 = add i32 %f7.s0.v4.v356.base, %62
  %64 = shl nsw i32 %63, 1
  %65 = sub nsw i32 %64, %f6.v4.min_realized
  %66 = add nsw i32 %65, -1
  %67 = mul nsw i32 %66, %f6.stride.1
  %t2106.s.us = add nsw i32 %67, %36
  %68 = mul nsw i32 %65, %f6.stride.1
  %t2107.s.us = add nsw i32 %68, %36
  %69 = add nsw i32 %65, 1
  %70 = mul nsw i32 %69, %f6.stride.1
  %t2108.s.us = add nsw i32 %70, %36
  %71 = add nsw i32 %65, 2
  %72 = mul nsw i32 %71, %f6.stride.1
  %t2109.s.us = add nsw i32 %72, %36
  %73 = sext i32 %t2109.s.us to i64
  %74 = sext i32 %t2108.s.us to i64
  %75 = sext i32 %t2107.s.us to i64
  %76 = sext i32 %t2106.s.us to i64
  %77 = add nsw i64 %21, %indvars.iv18
  %78 = mul nsw i64 %77, %10
  %79 = add i64 %38, %78
  br label %"for f7.s0.v6.us"

"for f7.s0.v6.us":                                ; preds = %"for f7.s0.v4.v356.us", %"end for f7.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f7.s0.v4.v356.us" ], [ %indvars.iv.next, %"end for f7.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f7.s0.v4.v356.us" ], [ %scevgep10.us, %"end for f7.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f7.s0.v3.v3.us", label %"for f7.s0.v3.v3.preheader.us", !prof !4

"for f7.s0.v3.v3.us":                             ; preds = %"for f7.s0.v3.v3.preheader.us", %"for f7.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f7.s0.v3.v3.us" ], [ %a606, %"for f7.s0.v3.v3.preheader.us" ]
  %80 = add i32 %lsr.iv28.us, %27
  %81 = add i32 %lsr.iv24.us, %27
  %82 = add i32 %lsr.iv20.us, %27
  %83 = add i32 %lsr.iv16.us, %27
  %84 = sext i32 %83 to i64
  %85 = add nsw i64 %322, %84
  %86 = add nsw i64 %85, 2
  %87 = getelementptr inbounds float, ptr %f6.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !50
  %89 = add nsw i64 %85, 10
  %90 = getelementptr inbounds float, ptr %f6.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !50
  %92 = shufflevector <8 x float> %88, <8 x float> %91, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %93 = getelementptr inbounds float, ptr %f6.host, i64 %85
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !50
  %95 = add nsw i64 %85, 8
  %96 = getelementptr inbounds float, ptr %f6.host, i64 %95
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !50
  %98 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %99 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %100 = fadd <8 x float> %99, %98
  %101 = fmul <8 x float> %100, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %102 = add nsw i64 %85, -2
  %103 = getelementptr inbounds float, ptr %f6.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !50
  %105 = add nsw i64 %85, 6
  %106 = getelementptr inbounds float, ptr %f6.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !50
  %108 = shufflevector <8 x float> %104, <8 x float> %107, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %109 = fadd <8 x float> %108, %101
  %110 = fadd <8 x float> %92, %109
  %111 = fmul <8 x float> %110, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %112 = sext i32 %82 to i64
  %113 = add nsw i64 %322, %112
  %114 = add nsw i64 %113, 2
  %115 = getelementptr inbounds float, ptr %f6.host, i64 %114
  %116 = load <8 x float>, ptr %115, align 4, !tbaa !50
  %117 = add nsw i64 %113, 10
  %118 = getelementptr inbounds float, ptr %f6.host, i64 %117
  %119 = load <8 x float>, ptr %118, align 4, !tbaa !50
  %120 = shufflevector <8 x float> %116, <8 x float> %119, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %121 = getelementptr inbounds float, ptr %f6.host, i64 %113
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !50
  %123 = add nsw i64 %113, 8
  %124 = getelementptr inbounds float, ptr %f6.host, i64 %123
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !50
  %126 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %127 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %128 = fadd <8 x float> %127, %126
  %129 = fmul <8 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = add nsw i64 %113, -2
  %131 = getelementptr inbounds float, ptr %f6.host, i64 %130
  %132 = load <8 x float>, ptr %131, align 4, !tbaa !50
  %133 = add nsw i64 %113, 6
  %134 = getelementptr inbounds float, ptr %f6.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !50
  %136 = shufflevector <8 x float> %132, <8 x float> %135, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %137 = fadd <8 x float> %136, %129
  %138 = fadd <8 x float> %120, %137
  %139 = sext i32 %81 to i64
  %140 = add nsw i64 %322, %139
  %141 = add nsw i64 %140, 2
  %142 = getelementptr inbounds float, ptr %f6.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !50
  %144 = add nsw i64 %140, 10
  %145 = getelementptr inbounds float, ptr %f6.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !50
  %147 = shufflevector <8 x float> %143, <8 x float> %146, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %148 = getelementptr inbounds float, ptr %f6.host, i64 %140
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !50
  %150 = add nsw i64 %140, 8
  %151 = getelementptr inbounds float, ptr %f6.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !50
  %153 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %154 = shufflevector <8 x float> %149, <8 x float> %152, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %155 = fadd <8 x float> %154, %153
  %156 = fmul <8 x float> %155, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %157 = add nsw i64 %140, -2
  %158 = getelementptr inbounds float, ptr %f6.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !50
  %160 = add nsw i64 %140, 6
  %161 = getelementptr inbounds float, ptr %f6.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !50
  %163 = shufflevector <8 x float> %159, <8 x float> %162, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %164 = fadd <8 x float> %163, %156
  %165 = fadd <8 x float> %147, %164
  %166 = fadd <8 x float> %138, %165
  %167 = fmul <8 x float> %166, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %168 = sext i32 %80 to i64
  %169 = add nsw i64 %322, %168
  %170 = add nsw i64 %169, 2
  %171 = getelementptr inbounds float, ptr %f6.host, i64 %170
  %172 = load <8 x float>, ptr %171, align 4, !tbaa !50
  %173 = add nsw i64 %169, 10
  %174 = getelementptr inbounds float, ptr %f6.host, i64 %173
  %175 = load <8 x float>, ptr %174, align 4, !tbaa !50
  %176 = shufflevector <8 x float> %172, <8 x float> %175, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %177 = getelementptr inbounds float, ptr %f6.host, i64 %169
  %178 = load <8 x float>, ptr %177, align 4, !tbaa !50
  %179 = add nsw i64 %169, 8
  %180 = getelementptr inbounds float, ptr %f6.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !50
  %182 = shufflevector <8 x float> %178, <8 x float> %181, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %183 = shufflevector <8 x float> %178, <8 x float> %181, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %184 = fadd <8 x float> %183, %182
  %185 = fmul <8 x float> %184, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %186 = add nsw i64 %169, -2
  %187 = getelementptr inbounds float, ptr %f6.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !50
  %189 = add nsw i64 %169, 6
  %190 = getelementptr inbounds float, ptr %f6.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !50
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = fadd <8 x float> %192, %185
  %194 = fadd <8 x float> %176, %193
  %195 = fmul <8 x float> %194, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %196 = fadd <8 x float> %167, %195
  %197 = fadd <8 x float> %111, %196
  %198 = fmul <8 x float> %197, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %198, ptr %lsr.iv11.us, align 4, !tbaa !54
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f7.s0.v3.v3.us", label %"for f7.s0.v3.v3.us"

"end for f7.s0.v3.v3.us":                         ; preds = %"for f7.s0.v3.v3.us", %"for f7.s0.v6.us"
  br i1 %.not5, label %"end for f7.s0.v3.v32.us", label %"for f7.s0.v3.v31.preheader.us", !prof !4

"end for f7.s0.v3.v32.us":                        ; preds = %"for f7.s0.v3.v31.preheader.us", %"end for f7.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %199 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %199, label %"end for f7.s0.v6.loopexit.us", label %"for f7.s0.v6.us"

"for f7.s0.v3.v31.preheader.us":                  ; preds = %"end for f7.s0.v3.v3.us"
  %200 = sub nuw nsw i64 %indvars.iv, %60
  %201 = mul nsw i64 %200, %61
  %202 = add nsw i64 %201, %73
  %203 = add nsw i64 %202, -12
  %204 = getelementptr inbounds float, ptr %f6.host, i64 %203
  %205 = load <8 x float>, ptr %204, align 4, !tbaa !50
  %206 = add nsw i64 %202, -4
  %207 = getelementptr inbounds float, ptr %f6.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !50
  %209 = shufflevector <8 x float> %205, <8 x float> %208, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %210 = add nsw i64 %202, -14
  %211 = getelementptr inbounds float, ptr %f6.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !50
  %213 = add nsw i64 %202, -6
  %214 = getelementptr inbounds float, ptr %f6.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !50
  %216 = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %217 = shufflevector <8 x float> %212, <8 x float> %215, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %218 = fadd <8 x float> %217, %216
  %219 = fmul <8 x float> %218, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %220 = add nsw i64 %202, -16
  %221 = getelementptr inbounds float, ptr %f6.host, i64 %220
  %222 = load <8 x float>, ptr %221, align 4, !tbaa !50
  %223 = add nsw i64 %202, -8
  %224 = getelementptr inbounds float, ptr %f6.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !50
  %226 = shufflevector <8 x float> %222, <8 x float> %225, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %227 = fadd <8 x float> %226, %219
  %228 = fadd <8 x float> %209, %227
  %229 = fmul <8 x float> %228, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %230 = add nsw i64 %201, %74
  %231 = add nsw i64 %230, -12
  %232 = getelementptr inbounds float, ptr %f6.host, i64 %231
  %233 = load <8 x float>, ptr %232, align 4, !tbaa !50
  %234 = add nsw i64 %230, -4
  %235 = getelementptr inbounds float, ptr %f6.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !50
  %237 = shufflevector <8 x float> %233, <8 x float> %236, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %238 = add nsw i64 %230, -14
  %239 = getelementptr inbounds float, ptr %f6.host, i64 %238
  %240 = load <8 x float>, ptr %239, align 4, !tbaa !50
  %241 = add nsw i64 %230, -6
  %242 = getelementptr inbounds float, ptr %f6.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !50
  %244 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %245 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %246 = fadd <8 x float> %245, %244
  %247 = fmul <8 x float> %246, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %248 = add nsw i64 %230, -16
  %249 = getelementptr inbounds float, ptr %f6.host, i64 %248
  %250 = load <8 x float>, ptr %249, align 4, !tbaa !50
  %251 = add nsw i64 %230, -8
  %252 = getelementptr inbounds float, ptr %f6.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !50
  %254 = shufflevector <8 x float> %250, <8 x float> %253, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %255 = fadd <8 x float> %254, %247
  %256 = fadd <8 x float> %237, %255
  %257 = add nsw i64 %201, %75
  %258 = add nsw i64 %257, -12
  %259 = getelementptr inbounds float, ptr %f6.host, i64 %258
  %260 = load <8 x float>, ptr %259, align 4, !tbaa !50
  %261 = add nsw i64 %257, -4
  %262 = getelementptr inbounds float, ptr %f6.host, i64 %261
  %263 = load <8 x float>, ptr %262, align 4, !tbaa !50
  %264 = shufflevector <8 x float> %260, <8 x float> %263, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %265 = add nsw i64 %257, -14
  %266 = getelementptr inbounds float, ptr %f6.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !50
  %268 = add nsw i64 %257, -6
  %269 = getelementptr inbounds float, ptr %f6.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !50
  %271 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %272 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %273 = fadd <8 x float> %272, %271
  %274 = fmul <8 x float> %273, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %275 = add nsw i64 %257, -16
  %276 = getelementptr inbounds float, ptr %f6.host, i64 %275
  %277 = load <8 x float>, ptr %276, align 4, !tbaa !50
  %278 = add nsw i64 %257, -8
  %279 = getelementptr inbounds float, ptr %f6.host, i64 %278
  %280 = load <8 x float>, ptr %279, align 4, !tbaa !50
  %281 = shufflevector <8 x float> %277, <8 x float> %280, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %282 = fadd <8 x float> %281, %274
  %283 = fadd <8 x float> %264, %282
  %284 = fadd <8 x float> %256, %283
  %285 = fmul <8 x float> %284, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %286 = add nsw i64 %201, %76
  %287 = add nsw i64 %286, -12
  %288 = getelementptr inbounds float, ptr %f6.host, i64 %287
  %289 = load <8 x float>, ptr %288, align 4, !tbaa !50
  %290 = add nsw i64 %286, -4
  %291 = getelementptr inbounds float, ptr %f6.host, i64 %290
  %292 = load <8 x float>, ptr %291, align 4, !tbaa !50
  %293 = shufflevector <8 x float> %289, <8 x float> %292, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %294 = add nsw i64 %286, -14
  %295 = getelementptr inbounds float, ptr %f6.host, i64 %294
  %296 = load <8 x float>, ptr %295, align 4, !tbaa !50
  %297 = add nsw i64 %286, -6
  %298 = getelementptr inbounds float, ptr %f6.host, i64 %297
  %299 = load <8 x float>, ptr %298, align 4, !tbaa !50
  %300 = shufflevector <8 x float> %296, <8 x float> %299, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %301 = shufflevector <8 x float> %296, <8 x float> %299, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %302 = fadd <8 x float> %301, %300
  %303 = fmul <8 x float> %302, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %304 = add nsw i64 %286, -16
  %305 = getelementptr inbounds float, ptr %f6.host, i64 %304
  %306 = load <8 x float>, ptr %305, align 4, !tbaa !50
  %307 = add nsw i64 %286, -8
  %308 = getelementptr inbounds float, ptr %f6.host, i64 %307
  %309 = load <8 x float>, ptr %308, align 4, !tbaa !50
  %310 = shufflevector <8 x float> %306, <8 x float> %309, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %311 = fadd <8 x float> %310, %303
  %312 = fadd <8 x float> %293, %311
  %313 = fmul <8 x float> %312, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %314 = fadd <8 x float> %285, %313
  %315 = fadd <8 x float> %229, %314
  %316 = fmul <8 x float> %315, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %317 = sub nuw nsw i64 %indvars.iv, %smax
  %318 = mul nsw i64 %317, %23
  %319 = add i64 %79, %318
  %320 = getelementptr inbounds float, ptr %f7.host, i64 %319
  store <8 x float> %316, ptr %320, align 4, !tbaa !54
  br label %"end for f7.s0.v3.v32.us"

"for f7.s0.v3.v3.preheader.us":                   ; preds = %"for f7.s0.v6.us"
  %321 = sub nuw nsw i64 %indvars.iv, %60
  %322 = mul nsw i64 %321, %61
  br label %"for f7.s0.v3.v3.us"

"end for f7.s0.v6.loopexit.us":                   ; preds = %"end for f7.s0.v3.v32.us"
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next19, 8
  br i1 %.not.us, label %destructor_block, label %"for f7.s0.v4.v356.us"

destructor_block:                                 ; preds = %"end for f7.s0.v6.loopexit.us", %"for f7.s0.v4.v356.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f74.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f74.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f74.s0.v4.v326.preheader":
  %f73.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 1
  %f73.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 2
  %f73.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 3
  %f74.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f74.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 4
  %f74.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f74.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 5
  %f74.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 6
  %f74.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 7
  %f74.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f74.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 8
  %f74.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f74.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 9
  %f74.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f74.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 10
  %f73.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 12
  %f74.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f74.s0.v4.v4, 5
  %a643 = add nsw i32 %f74.s0.v4.min, %16
  %b645 = add nsw i32 %f74.s0.v4.max, -31
  %f74.s0.v4.v326.base = tail call i32 @llvm.smin.i32(i32 %b645, i32 %a643)
  %17 = sext i32 %f74.s0.v4.v326.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f74.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f74.s0.v3.min, 1
  %26 = shl i32 %f74.s0.v4.v326.base, 1
  %reass.sub = sub i32 %26, %f73.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f73.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f73.v3.min_realized
  %31 = shl i32 %f73.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f73.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f73.v3.min_realized
  %38 = xor i32 %f73.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f73.v3.min_realized
  %42 = sub nsw i32 %f74.s0.v3.max, %f74.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a644 = lshr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a644, i32 0
  %.not5 = icmp eq i32 %45, 0
  %46 = ashr i32 %42, 3
  %.not = icmp slt i32 %46, %45
  %47 = shl nsw i32 %f74.s0.v3.max, 1
  %48 = sub nsw i32 %47, %f73.v3.min_realized
  %49 = add nsw i64 %3, -7
  %50 = sub nsw i64 %49, %11
  br label %"for f74.s0.v4.v326"

"for f74.s0.v4.v326":                             ; preds = %"end for f74.s0.v3.v32", %"for f74.s0.v4.v326.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f74.s0.v3.v32" ], [ 0, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f74.s0.v3.v32" ], [ %41, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f74.s0.v3.v32" ], [ %37, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f74.s0.v3.v32" ], [ %35, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f74.s0.v3.v32" ], [ %30, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f74.s0.v3.v32" ], [ %scevgep, %"for f74.s0.v4.v326.preheader" ]
  br i1 %.not5, label %"end for f74.s0.v3.v3", label %"for f74.s0.v3.v3", !prof !4

"for f74.s0.v3.v3":                               ; preds = %"for f74.s0.v4.v326", %"for f74.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f74.s0.v3.v3" ], [ %lsr.iv22, %"for f74.s0.v4.v326" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f74.s0.v3.v3" ], [ %lsr.iv18, %"for f74.s0.v4.v326" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f74.s0.v3.v3" ], [ %lsr.iv14, %"for f74.s0.v4.v326" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f74.s0.v3.v3" ], [ %lsr.iv10, %"for f74.s0.v4.v326" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f74.s0.v3.v3" ], [ %lsr.iv4, %"for f74.s0.v4.v326" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f74.s0.v3.v3" ], [ %a644, %"for f74.s0.v4.v326" ]
  %51 = add i32 %lsr.iv24, %25
  %52 = add i32 %lsr.iv20, %25
  %53 = add i32 %lsr.iv16, %25
  %54 = add i32 %lsr.iv12, %25
  %55 = sext i32 %54 to i64
  %56 = add nsw i64 %55, 2
  %57 = getelementptr inbounds float, ptr %f73.host, i64 %56
  %58 = load <8 x float>, ptr %57, align 4, !tbaa !52
  %59 = add nsw i64 %55, 10
  %60 = getelementptr inbounds float, ptr %f73.host, i64 %59
  %61 = load <8 x float>, ptr %60, align 4, !tbaa !52
  %62 = shufflevector <8 x float> %58, <8 x float> %61, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %63 = getelementptr inbounds float, ptr %f73.host, i64 %55
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !52
  %65 = add nsw i64 %55, 8
  %66 = getelementptr inbounds float, ptr %f73.host, i64 %65
  %67 = load <8 x float>, ptr %66, align 4, !tbaa !52
  %68 = shufflevector <8 x float> %64, <8 x float> %67, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %69 = shufflevector <8 x float> %64, <8 x float> %67, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %70 = fadd <8 x float> %69, %68
  %71 = fmul <8 x float> %70, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %72 = add nsw i64 %55, -2
  %73 = getelementptr inbounds float, ptr %f73.host, i64 %72
  %74 = load <8 x float>, ptr %73, align 4, !tbaa !52
  %75 = add nsw i64 %55, 6
  %76 = getelementptr inbounds float, ptr %f73.host, i64 %75
  %77 = load <8 x float>, ptr %76, align 4, !tbaa !52
  %78 = shufflevector <8 x float> %74, <8 x float> %77, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %79 = fadd <8 x float> %78, %71
  %80 = fadd <8 x float> %62, %79
  %81 = fmul <8 x float> %80, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %82 = sext i32 %53 to i64
  %83 = add nsw i64 %82, 2
  %84 = getelementptr inbounds float, ptr %f73.host, i64 %83
  %85 = load <8 x float>, ptr %84, align 4, !tbaa !52
  %86 = add nsw i64 %82, 10
  %87 = getelementptr inbounds float, ptr %f73.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !52
  %89 = shufflevector <8 x float> %85, <8 x float> %88, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %90 = getelementptr inbounds float, ptr %f73.host, i64 %82
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !52
  %92 = add nsw i64 %82, 8
  %93 = getelementptr inbounds float, ptr %f73.host, i64 %92
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !52
  %95 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %96 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %97 = fadd <8 x float> %96, %95
  %98 = fmul <8 x float> %97, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %99 = add nsw i64 %82, -2
  %100 = getelementptr inbounds float, ptr %f73.host, i64 %99
  %101 = load <8 x float>, ptr %100, align 4, !tbaa !52
  %102 = add nsw i64 %82, 6
  %103 = getelementptr inbounds float, ptr %f73.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !52
  %105 = shufflevector <8 x float> %101, <8 x float> %104, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %106 = fadd <8 x float> %105, %98
  %107 = fadd <8 x float> %89, %106
  %108 = sext i32 %52 to i64
  %109 = add nsw i64 %108, 2
  %110 = getelementptr inbounds float, ptr %f73.host, i64 %109
  %111 = load <8 x float>, ptr %110, align 4, !tbaa !52
  %112 = add nsw i64 %108, 10
  %113 = getelementptr inbounds float, ptr %f73.host, i64 %112
  %114 = load <8 x float>, ptr %113, align 4, !tbaa !52
  %115 = shufflevector <8 x float> %111, <8 x float> %114, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %116 = getelementptr inbounds float, ptr %f73.host, i64 %108
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !52
  %118 = add nsw i64 %108, 8
  %119 = getelementptr inbounds float, ptr %f73.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !52
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %122 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %123 = fadd <8 x float> %122, %121
  %124 = fmul <8 x float> %123, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %125 = add nsw i64 %108, -2
  %126 = getelementptr inbounds float, ptr %f73.host, i64 %125
  %127 = load <8 x float>, ptr %126, align 4, !tbaa !52
  %128 = add nsw i64 %108, 6
  %129 = getelementptr inbounds float, ptr %f73.host, i64 %128
  %130 = load <8 x float>, ptr %129, align 4, !tbaa !52
  %131 = shufflevector <8 x float> %127, <8 x float> %130, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %132 = fadd <8 x float> %131, %124
  %133 = fadd <8 x float> %115, %132
  %134 = fadd <8 x float> %107, %133
  %135 = fmul <8 x float> %134, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %136 = sext i32 %51 to i64
  %137 = add nsw i64 %136, 2
  %138 = getelementptr inbounds float, ptr %f73.host, i64 %137
  %139 = load <8 x float>, ptr %138, align 4, !tbaa !52
  %140 = add nsw i64 %136, 10
  %141 = getelementptr inbounds float, ptr %f73.host, i64 %140
  %142 = load <8 x float>, ptr %141, align 4, !tbaa !52
  %143 = shufflevector <8 x float> %139, <8 x float> %142, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %144 = getelementptr inbounds float, ptr %f73.host, i64 %136
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !52
  %146 = add nsw i64 %136, 8
  %147 = getelementptr inbounds float, ptr %f73.host, i64 %146
  %148 = load <8 x float>, ptr %147, align 4, !tbaa !52
  %149 = shufflevector <8 x float> %145, <8 x float> %148, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %150 = shufflevector <8 x float> %145, <8 x float> %148, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %151, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %153 = add nsw i64 %136, -2
  %154 = getelementptr inbounds float, ptr %f73.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !52
  %156 = add nsw i64 %136, 6
  %157 = getelementptr inbounds float, ptr %f73.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !52
  %159 = shufflevector <8 x float> %155, <8 x float> %158, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %160 = fadd <8 x float> %159, %152
  %161 = fadd <8 x float> %143, %160
  %162 = fmul <8 x float> %161, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %163 = fadd <8 x float> %135, %162
  %164 = fadd <8 x float> %81, %163
  %165 = fmul <8 x float> %164, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %165, ptr %lsr.iv7, align 4, !tbaa !56
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f74.s0.v3.v3", label %"for f74.s0.v3.v3"

"end for f74.s0.v3.v3":                           ; preds = %"for f74.s0.v3.v3", %"for f74.s0.v4.v326"
  br i1 %.not, label %"end for f74.s0.v3.v32", label %"for f74.s0.v3.v31.preheader", !prof !4

"for f74.s0.v3.v31.preheader":                    ; preds = %"end for f74.s0.v3.v3"
  %166 = trunc i64 %indvars.iv to i32
  %167 = add i32 %f74.s0.v4.v326.base, %166
  %168 = shl nsw i32 %167, 1
  %169 = sub nsw i32 %168, %f73.v4.min_realized
  %170 = add nsw i32 %169, -1
  %171 = mul nsw i32 %170, %28
  %t2120 = add nsw i32 %171, %48
  %172 = mul nsw i32 %169, %28
  %t2121 = add nsw i32 %172, %48
  %173 = add nsw i32 %169, 1
  %174 = mul nsw i32 %173, %28
  %t2122 = add nsw i32 %174, %48
  %175 = add nsw i32 %169, 2
  %176 = mul nsw i32 %175, %28
  %t2123 = add nsw i32 %176, %48
  %177 = sext i32 %t2123 to i64
  %178 = add nsw i64 %177, -12
  %179 = getelementptr inbounds float, ptr %f73.host, i64 %178
  %180 = load <8 x float>, ptr %179, align 4, !tbaa !52
  %181 = add nsw i64 %177, -4
  %182 = getelementptr inbounds float, ptr %f73.host, i64 %181
  %183 = load <8 x float>, ptr %182, align 4, !tbaa !52
  %184 = shufflevector <8 x float> %180, <8 x float> %183, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = add nsw i64 %177, -14
  %186 = getelementptr inbounds float, ptr %f73.host, i64 %185
  %187 = load <8 x float>, ptr %186, align 4, !tbaa !52
  %188 = add nsw i64 %177, -6
  %189 = getelementptr inbounds float, ptr %f73.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !52
  %191 = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %192 = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %193 = fadd <8 x float> %192, %191
  %194 = fmul <8 x float> %193, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %195 = add nsw i64 %177, -16
  %196 = getelementptr inbounds float, ptr %f73.host, i64 %195
  %197 = load <8 x float>, ptr %196, align 4, !tbaa !52
  %198 = add nsw i64 %177, -8
  %199 = getelementptr inbounds float, ptr %f73.host, i64 %198
  %200 = load <8 x float>, ptr %199, align 4, !tbaa !52
  %201 = shufflevector <8 x float> %197, <8 x float> %200, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %202 = fadd <8 x float> %201, %194
  %203 = fadd <8 x float> %184, %202
  %204 = fmul <8 x float> %203, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %205 = sext i32 %t2122 to i64
  %206 = add nsw i64 %205, -12
  %207 = getelementptr inbounds float, ptr %f73.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !52
  %209 = add nsw i64 %205, -4
  %210 = getelementptr inbounds float, ptr %f73.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !52
  %212 = shufflevector <8 x float> %208, <8 x float> %211, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %213 = add nsw i64 %205, -14
  %214 = getelementptr inbounds float, ptr %f73.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !52
  %216 = add nsw i64 %205, -6
  %217 = getelementptr inbounds float, ptr %f73.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !52
  %219 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %220 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = fadd <8 x float> %220, %219
  %222 = fmul <8 x float> %221, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %223 = add nsw i64 %205, -16
  %224 = getelementptr inbounds float, ptr %f73.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !52
  %226 = add nsw i64 %205, -8
  %227 = getelementptr inbounds float, ptr %f73.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !52
  %229 = shufflevector <8 x float> %225, <8 x float> %228, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %230 = fadd <8 x float> %229, %222
  %231 = fadd <8 x float> %212, %230
  %232 = sext i32 %t2121 to i64
  %233 = add nsw i64 %232, -12
  %234 = getelementptr inbounds float, ptr %f73.host, i64 %233
  %235 = load <8 x float>, ptr %234, align 4, !tbaa !52
  %236 = add nsw i64 %232, -4
  %237 = getelementptr inbounds float, ptr %f73.host, i64 %236
  %238 = load <8 x float>, ptr %237, align 4, !tbaa !52
  %239 = shufflevector <8 x float> %235, <8 x float> %238, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %240 = add nsw i64 %232, -14
  %241 = getelementptr inbounds float, ptr %f73.host, i64 %240
  %242 = load <8 x float>, ptr %241, align 4, !tbaa !52
  %243 = add nsw i64 %232, -6
  %244 = getelementptr inbounds float, ptr %f73.host, i64 %243
  %245 = load <8 x float>, ptr %244, align 4, !tbaa !52
  %246 = shufflevector <8 x float> %242, <8 x float> %245, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %247 = shufflevector <8 x float> %242, <8 x float> %245, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %248 = fadd <8 x float> %247, %246
  %249 = fmul <8 x float> %248, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %250 = add nsw i64 %232, -16
  %251 = getelementptr inbounds float, ptr %f73.host, i64 %250
  %252 = load <8 x float>, ptr %251, align 4, !tbaa !52
  %253 = add nsw i64 %232, -8
  %254 = getelementptr inbounds float, ptr %f73.host, i64 %253
  %255 = load <8 x float>, ptr %254, align 4, !tbaa !52
  %256 = shufflevector <8 x float> %252, <8 x float> %255, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %257 = fadd <8 x float> %256, %249
  %258 = fadd <8 x float> %239, %257
  %259 = fadd <8 x float> %231, %258
  %260 = fmul <8 x float> %259, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %261 = sext i32 %t2120 to i64
  %262 = add nsw i64 %261, -12
  %263 = getelementptr inbounds float, ptr %f73.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !52
  %265 = add nsw i64 %261, -4
  %266 = getelementptr inbounds float, ptr %f73.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !52
  %268 = shufflevector <8 x float> %264, <8 x float> %267, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %269 = add nsw i64 %261, -14
  %270 = getelementptr inbounds float, ptr %f73.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !52
  %272 = add nsw i64 %261, -6
  %273 = getelementptr inbounds float, ptr %f73.host, i64 %272
  %274 = load <8 x float>, ptr %273, align 4, !tbaa !52
  %275 = shufflevector <8 x float> %271, <8 x float> %274, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %276 = shufflevector <8 x float> %271, <8 x float> %274, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %277 = fadd <8 x float> %276, %275
  %278 = fmul <8 x float> %277, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %279 = add nsw i64 %261, -16
  %280 = getelementptr inbounds float, ptr %f73.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !52
  %282 = add nsw i64 %261, -8
  %283 = getelementptr inbounds float, ptr %f73.host, i64 %282
  %284 = load <8 x float>, ptr %283, align 4, !tbaa !52
  %285 = shufflevector <8 x float> %281, <8 x float> %284, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %286 = fadd <8 x float> %285, %278
  %287 = fadd <8 x float> %268, %286
  %288 = fmul <8 x float> %287, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %289 = fadd <8 x float> %260, %288
  %290 = fadd <8 x float> %204, %289
  %291 = fmul <8 x float> %290, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %292 = add nsw i64 %18, %indvars.iv
  %293 = mul nsw i64 %292, %19
  %294 = add i64 %50, %293
  %295 = getelementptr inbounds float, ptr %f74.host, i64 %294
  store <8 x float> %291, ptr %295, align 4, !tbaa !56
  br label %"end for f74.s0.v3.v32"

"end for f74.s0.v3.v32":                          ; preds = %"for f74.s0.v3.v31.preheader", %"end for f74.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f74.s0.v4.v326"

destructor_block:                                 ; preds = %"end for f74.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f8.s0.v6(ptr nocapture readnone %__user_context, i32 %f8.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 7
  %f8.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 8
  %f8.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 13
  %f7.host = load ptr, ptr %2, align 8
  %3 = add i32 %f8.s0.v4.max, 1
  %4 = icmp slt i32 %f8.s0.v4.min, %3
  br i1 %4, label %"for f8.s0.v4.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 6
  %f8.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 2
  %f7.v3.extent_realized.s = load i32, ptr %6, align 4
  %promoted23 = sext i32 %f7.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 5
  %f8.s0.v3.max = load i32, ptr %7, align 4
  %a684 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 10
  %f8.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f8.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 1
  %f7.stride.1 = load i32, ptr %10, align 4
  %11 = add i32 %f8.s0.v3.max, 1
  %12 = sub i32 %11, %f8.s0.v3.min
  %13 = tail call i32 @llvm.smax.i32(i32 %a684, i32 0)
  %14 = shl nsw i64 %9, 2
  %15 = add nsw i64 %14, 4
  %16 = shl i32 %f8.s0.v3.min, 1
  %17 = shl i32 %f7.stride.1, 1
  %18 = icmp sgt i32 %11, %f8.s0.v3.min
  %19 = add nsw i64 %promoted23, 1
  %20 = sub nsw i32 %f8.s0.v6, %13
  %21 = sext i32 %20 to i64
  %t2133 = mul nsw i64 %19, %21
  %22 = add nsw i64 %t2133, 2
  %sext = shl i64 %t2133, 32
  %23 = ashr exact i64 %sext, 32
  br i1 %18, label %"for f8.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.us.preheader":                      ; preds = %"for f8.s0.v4.preheader"
  %24 = shl i32 %f8.s0.v4.min, 1
  %25 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 4
  %f7.v4.min_realized = load i32, ptr %25, align 4
  %26 = xor i32 %f7.v4.min_realized, -1
  %27 = add i32 %24, %26
  %28 = mul i32 %f7.stride.1, %27
  %29 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 3
  %f7.v3.min_realized = load i32, ptr %29, align 4
  %30 = sub i32 %28, %f7.v3.min_realized
  %31 = sub i32 %24, %f7.v4.min_realized
  %32 = mul i32 %f7.stride.1, %31
  %33 = sub i32 %32, %f7.v3.min_realized
  %34 = or i32 %24, 1
  %35 = sub i32 %34, %f7.v4.min_realized
  %36 = mul i32 %f7.stride.1, %35
  %37 = sub i32 %36, %f7.v3.min_realized
  %38 = add i32 %24, 2
  %39 = sub i32 %38, %f7.v4.min_realized
  %40 = mul i32 %f7.stride.1, %39
  %41 = sub i32 %40, %f7.v3.min_realized
  %42 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 15
  %f8.host = load ptr, ptr %42, align 8
  %43 = sext i32 %f8.s0.v3.min to i64
  %44 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 11
  %f8.v3.min_realized = load i32, ptr %44, align 4
  %45 = sext i32 %f8.v3.min_realized to i64
  %46 = sub nsw i64 %43, %45
  %47 = sext i32 %f8.s0.v6 to i64
  %smax = zext i32 %13 to i64
  %48 = sub nsw i64 %47, %smax
  %49 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 9
  %f8.stride.2 = load i32, ptr %49, align 4
  %50 = sext i32 %f8.stride.2 to i64
  %51 = mul nsw i64 %48, %50
  %52 = add i64 %46, %51
  %53 = add nsw i64 %9, 1
  %54 = sext i32 %f8.s0.v4.min to i64
  %55 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 12
  %f8.v4.min_realized = load i32, ptr %55, align 4
  %56 = sext i32 %f8.v4.min_realized to i64
  %57 = sub nsw i64 %54, %56
  %58 = mul nsw i64 %53, %57
  %59 = add i64 %52, %58
  %scevgep = getelementptr float, ptr %f8.host, i64 %59
  %60 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %61 = add i32 %40, %16
  %62 = sub i32 %61, %f7.v3.min_realized
  %63 = shl i32 %f7.stride.1, 1
  %64 = add i32 %36, %16
  %65 = sub i32 %64, %f7.v3.min_realized
  %66 = add i32 %32, %16
  %67 = sub i32 %66, %f7.v3.min_realized
  %68 = add i32 %28, %16
  %69 = sub i32 %68, %f7.v3.min_realized
  %70 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %71 = zext i32 %70 to i64
  %72 = add nuw nsw i64 %71, 1
  %min.iters.check = icmp ult i32 %70, 3
  %mul.result = shl i32 %60, 1
  %mul.result6 = shl i32 %60, 1
  %mul.overflow7 = icmp slt i32 %60, 0
  %mul.result9 = shl i32 %60, 1
  %mul.result12 = shl i32 %60, 1
  %n.vec = and i64 %72, -4
  %.cast = trunc i64 %n.vec to i32
  %73 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %74 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast20, 1
  %77 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %12, %.cast25
  %78 = getelementptr float, ptr %f7.host, i64 -1
  %79 = getelementptr float, ptr %f7.host, i64 -1
  %80 = getelementptr float, ptr %f7.host, i64 -1
  %81 = getelementptr float, ptr %f7.host, i64 -1
  %82 = getelementptr float, ptr %f7.host, i64 -1
  %83 = getelementptr float, ptr %f7.host, i64 -1
  %84 = getelementptr float, ptr %f7.host, i64 -1
  %cmp.n = icmp eq i64 %72, %n.vec
  br label %"for f8.s0.v4.us"

"for f8.s0.v4.us":                                ; preds = %"for f8.s0.v4.us.preheader", %"end for f8.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f8.s0.v4.us.preheader" ], [ %indvar.next, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %30, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %33, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %37, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %41, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f8.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f8.s0.v3.loopexit.us" ]
  %f8.s0.v4.us = phi i32 [ %f8.s0.v4.min, %"for f8.s0.v4.us.preheader" ], [ %281, %"end for f8.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f8.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f8.s0.v4.us"
  %85 = mul i32 %63, %indvar
  %86 = add i32 %69, %85
  %87 = add i32 %67, %85
  %88 = add i32 %65, %85
  %89 = add i32 %62, %85
  %90 = add i32 %89, %mul.result
  %91 = icmp slt i32 %90, %89
  %92 = add i32 %88, %mul.result6
  %93 = icmp slt i32 %92, %88
  %94 = or i1 %93, %mul.overflow7
  %95 = add i32 %87, %mul.result9
  %96 = icmp slt i32 %95, %87
  %97 = add i32 %86, %mul.result12
  %98 = icmp slt i32 %97, %86
  %99 = or i1 %91, %94
  %100 = or i1 %96, %99
  %101 = or i1 %98, %100
  br i1 %101, label %"for f8.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %73
  %ind.end15 = add i32 %lsr.iv15.us, %74
  %ind.end18 = add i32 %lsr.iv10.us, %75
  %ind.end21 = add i32 %lsr.iv6.us, %76
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %77
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %102 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %102
  %.cast28 = trunc i64 %index to i32
  %103 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %103
  %104 = add i32 %offset.idx, 2
  %105 = add i32 %offset.idx, 4
  %106 = add i32 %offset.idx, 6
  %.cast29 = trunc i64 %index to i32
  %107 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %107
  %.cast31 = trunc i64 %index to i32
  %108 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %108
  %.cast33 = trunc i64 %index to i32
  %109 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %109
  %110 = add i32 %offset.idx34, %16
  %111 = add i32 %offset.idx32, %16
  %112 = add i32 %offset.idx30, %16
  %113 = add i32 %offset.idx, %16
  %114 = add i32 %104, %16
  %115 = add i32 %105, %16
  %116 = add i32 %106, %16
  %117 = sext i32 %113 to i64
  %118 = sext i32 %114 to i64
  %119 = sext i32 %115 to i64
  %120 = sext i32 %116 to i64
  %121 = add nsw i64 %22, %117
  %122 = add nsw i64 %22, %118
  %123 = add nsw i64 %22, %119
  %124 = add nsw i64 %22, %120
  %125 = getelementptr inbounds float, ptr %f7.host, i64 %121
  %126 = getelementptr inbounds float, ptr %f7.host, i64 %122
  %127 = getelementptr inbounds float, ptr %f7.host, i64 %123
  %128 = getelementptr inbounds float, ptr %f7.host, i64 %124
  %129 = load float, ptr %125, align 4, !tbaa !54
  %130 = load float, ptr %126, align 4, !tbaa !54
  %131 = load float, ptr %127, align 4, !tbaa !54
  %132 = load float, ptr %128, align 4, !tbaa !54
  %133 = insertelement <4 x float> poison, float %129, i64 0
  %134 = insertelement <4 x float> %133, float %130, i64 1
  %135 = insertelement <4 x float> %134, float %131, i64 2
  %136 = insertelement <4 x float> %135, float %132, i64 3
  %137 = add nsw i64 %23, %117
  %138 = add nsw i64 %23, %118
  %139 = add nsw i64 %23, %119
  %140 = add nsw i64 %23, %120
  %141 = add nsw i64 %137, 1
  %142 = add nsw i64 %138, 1
  %143 = add nsw i64 %139, 1
  %144 = add nsw i64 %140, 1
  %145 = getelementptr inbounds float, ptr %f7.host, i64 %141
  %146 = getelementptr inbounds float, ptr %f7.host, i64 %142
  %147 = getelementptr inbounds float, ptr %f7.host, i64 %143
  %148 = getelementptr inbounds float, ptr %f7.host, i64 %144
  %149 = load float, ptr %145, align 4, !tbaa !54
  %150 = load float, ptr %146, align 4, !tbaa !54
  %151 = load float, ptr %147, align 4, !tbaa !54
  %152 = load float, ptr %148, align 4, !tbaa !54
  %153 = insertelement <4 x float> poison, float %149, i64 0
  %154 = insertelement <4 x float> %153, float %150, i64 1
  %155 = insertelement <4 x float> %154, float %151, i64 2
  %156 = insertelement <4 x float> %155, float %152, i64 3
  %157 = getelementptr float, ptr %78, i64 %137
  %wide.vec = load <8 x float>, ptr %157, align 4, !tbaa !54
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %158 = fadd <4 x float> %156, %strided.vec35
  %159 = fmul <4 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = fadd <4 x float> %strided.vec, %159
  %161 = fadd <4 x float> %136, %160
  %162 = fmul <4 x float> %161, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %163 = sext i32 %112 to i64
  %164 = add nsw i64 %23, %163
  %165 = add nsw i64 %164, 2
  %166 = getelementptr float, ptr %79, i64 %165
  %wide.vec36 = load <8 x float>, ptr %166, align 4, !tbaa !54
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %167 = getelementptr float, ptr %80, i64 %164
  %wide.vec39 = load <8 x float>, ptr %167, align 4, !tbaa !54
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %168 = fadd <4 x float> %strided.vec37, %strided.vec41
  %169 = fmul <4 x float> %168, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %170 = fadd <4 x float> %strided.vec40, %169
  %171 = fadd <4 x float> %strided.vec38, %170
  %172 = sext i32 %111 to i64
  %173 = add nsw i64 %23, %172
  %174 = add nsw i64 %173, 2
  %175 = getelementptr float, ptr %81, i64 %174
  %wide.vec42 = load <8 x float>, ptr %175, align 4, !tbaa !54
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %176 = getelementptr float, ptr %82, i64 %173
  %wide.vec45 = load <8 x float>, ptr %176, align 4, !tbaa !54
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %177 = fadd <4 x float> %strided.vec43, %strided.vec47
  %178 = fmul <4 x float> %177, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %179 = fadd <4 x float> %strided.vec46, %178
  %180 = fadd <4 x float> %strided.vec44, %179
  %181 = fadd <4 x float> %171, %180
  %182 = fmul <4 x float> %181, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %183 = sext i32 %110 to i64
  %184 = add nsw i64 %23, %183
  %185 = add nsw i64 %184, 2
  %186 = getelementptr float, ptr %83, i64 %185
  %wide.vec48 = load <8 x float>, ptr %186, align 4, !tbaa !54
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %187 = getelementptr float, ptr %84, i64 %184
  %wide.vec51 = load <8 x float>, ptr %187, align 4, !tbaa !54
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %188 = fadd <4 x float> %strided.vec49, %strided.vec53
  %189 = fmul <4 x float> %188, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %190 = fadd <4 x float> %strided.vec52, %189
  %191 = fadd <4 x float> %strided.vec50, %190
  %192 = fmul <4 x float> %191, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %193 = fadd <4 x float> %182, %192
  %194 = fadd <4 x float> %162, %193
  %195 = fmul <4 x float> %194, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %195, ptr %next.gep, align 4, !tbaa !36
  %index.next = add nuw i64 %index, 4
  %196 = icmp eq i64 %index.next, %n.vec
  br i1 %196, label %middle.block, label %vector.body, !llvm.loop !58

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us.preheader"

"for f8.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f8.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f8.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f8.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f8.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f8.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f8.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %12, %vector.scevcheck ], [ %12, %"for f8.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f8.s0.v3.us"

"for f8.s0.v3.us":                                ; preds = %"for f8.s0.v3.us.preheader", %"for f8.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f8.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f8.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f8.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f8.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f8.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f8.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f8.s0.v3.us.preheader" ]
  %197 = add i32 %lsr.iv21.us, %16
  %198 = add i32 %lsr.iv17.us, %16
  %199 = add i32 %lsr.iv13.us, %16
  %200 = add i32 %lsr.iv8.us, %16
  %201 = sext i32 %200 to i64
  %202 = add nsw i64 %22, %201
  %203 = getelementptr inbounds float, ptr %f7.host, i64 %202
  %204 = load float, ptr %203, align 4, !tbaa !54
  %205 = add nsw i64 %23, %201
  %206 = add nsw i64 %205, 1
  %207 = getelementptr inbounds float, ptr %f7.host, i64 %206
  %208 = load float, ptr %207, align 4, !tbaa !54
  %209 = getelementptr inbounds float, ptr %f7.host, i64 %205
  %210 = load float, ptr %209, align 4, !tbaa !54
  %211 = fadd float %208, %210
  %212 = fmul float %211, 3.000000e+00
  %213 = add nsw i64 %205, -1
  %214 = getelementptr inbounds float, ptr %f7.host, i64 %213
  %215 = sext i32 %199 to i64
  %216 = add nsw i64 %23, %215
  %217 = add nsw i64 %216, 2
  %218 = getelementptr inbounds float, ptr %f7.host, i64 %217
  %219 = add nsw i64 %216, 1
  %220 = getelementptr inbounds float, ptr %f7.host, i64 %219
  %221 = load float, ptr %220, align 4, !tbaa !54
  %222 = getelementptr inbounds float, ptr %f7.host, i64 %216
  %223 = load float, ptr %222, align 4, !tbaa !54
  %224 = fadd float %221, %223
  %225 = fmul float %224, 3.000000e+00
  %226 = add nsw i64 %216, -1
  %227 = getelementptr inbounds float, ptr %f7.host, i64 %226
  %228 = load float, ptr %227, align 4, !tbaa !54
  %229 = fadd float %228, %225
  %230 = sext i32 %198 to i64
  %231 = add nsw i64 %23, %230
  %232 = add nsw i64 %231, 2
  %233 = getelementptr inbounds float, ptr %f7.host, i64 %232
  %234 = load float, ptr %233, align 4, !tbaa !54
  %235 = add nsw i64 %231, 1
  %236 = getelementptr inbounds float, ptr %f7.host, i64 %235
  %237 = load float, ptr %236, align 4, !tbaa !54
  %238 = getelementptr inbounds float, ptr %f7.host, i64 %231
  %239 = load float, ptr %238, align 4, !tbaa !54
  %240 = fadd float %237, %239
  %241 = fmul float %240, 3.000000e+00
  %242 = add nsw i64 %231, -1
  %243 = getelementptr inbounds float, ptr %f7.host, i64 %242
  %244 = load float, ptr %243, align 4, !tbaa !54
  %245 = fadd float %244, %241
  %246 = fadd float %234, %245
  %247 = load float, ptr %214, align 4, !tbaa !54
  %248 = load float, ptr %218, align 4, !tbaa !54
  %249 = insertelement <2 x float> poison, float %247, i64 0
  %250 = insertelement <2 x float> %249, float %248, i64 1
  %251 = insertelement <2 x float> poison, float %212, i64 0
  %252 = insertelement <2 x float> %251, float %229, i64 1
  %253 = fadd <2 x float> %250, %252
  %254 = insertelement <2 x float> poison, float %204, i64 0
  %255 = insertelement <2 x float> %254, float %246, i64 1
  %256 = fadd <2 x float> %255, %253
  %257 = fmul <2 x float> %256, <float 1.250000e-01, float 3.750000e-01>
  %258 = sext i32 %197 to i64
  %259 = add nsw i64 %23, %258
  %260 = add nsw i64 %259, 2
  %261 = getelementptr inbounds float, ptr %f7.host, i64 %260
  %262 = load float, ptr %261, align 4, !tbaa !54
  %263 = add nsw i64 %259, 1
  %264 = getelementptr inbounds float, ptr %f7.host, i64 %263
  %265 = load float, ptr %264, align 4, !tbaa !54
  %266 = getelementptr inbounds float, ptr %f7.host, i64 %259
  %267 = load float, ptr %266, align 4, !tbaa !54
  %268 = fadd float %265, %267
  %269 = fmul float %268, 3.000000e+00
  %270 = add nsw i64 %259, -1
  %271 = getelementptr inbounds float, ptr %f7.host, i64 %270
  %272 = load float, ptr %271, align 4, !tbaa !54
  %273 = fadd float %272, %269
  %274 = fadd float %262, %273
  %275 = fmul float %274, 1.250000e-01
  %276 = extractelement <2 x float> %257, i64 1
  %277 = fadd float %276, %275
  %278 = extractelement <2 x float> %257, i64 0
  %279 = fadd float %278, %277
  %280 = fmul float %279, 1.250000e-01
  store float %280, ptr %lsr.iv4.us, align 4, !tbaa !36
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us", !llvm.loop !59

"end for f8.s0.v3.loopexit.us":                   ; preds = %"for f8.s0.v3.us", %middle.block
  %281 = add nsw i32 %f8.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %15
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %17
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %17
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %17
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %17
  %.not.us = icmp eq i32 %f8.s0.v4.us, %f8.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f8.s0.v4.us"

destructor_block:                                 ; preds = %"end for f8.s0.v3.loopexit.us", %"for f8.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f75.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f75.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f75.s0.v4.v346.preheader":
  %f74.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 1
  %f74.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 2
  %f74.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 3
  %f75.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f75.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 4
  %f75.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f75.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 5
  %f75.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 6
  %f75.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 7
  %f75.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f75.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 8
  %f75.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f75.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 9
  %f75.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f75.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 10
  %f74.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 12
  %f75.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f75.s0.v4.v4, 5
  %a710 = add nsw i32 %f75.s0.v4.min, %16
  %b712 = add nsw i32 %f75.s0.v4.max, -31
  %f75.s0.v4.v346.base = tail call i32 @llvm.smin.i32(i32 %b712, i32 %a710)
  %17 = sext i32 %f75.s0.v4.v346.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f75.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f75.s0.v3.min, 1
  %26 = shl i32 %f75.s0.v4.v346.base, 1
  %reass.sub = sub i32 %26, %f74.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f74.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f74.v3.min_realized
  %31 = shl i32 %f74.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f74.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f74.v3.min_realized
  %38 = xor i32 %f74.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f74.v3.min_realized
  %42 = sub nsw i32 %f75.s0.v3.max, %f75.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a711 = lshr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a711, i32 0
  %.not5 = icmp eq i32 %45, 0
  %46 = ashr i32 %42, 3
  %.not = icmp slt i32 %46, %45
  %47 = shl nsw i32 %f75.s0.v3.max, 1
  %48 = sub nsw i32 %47, %f74.v3.min_realized
  %49 = add nsw i64 %3, -7
  %50 = sub nsw i64 %49, %11
  br label %"for f75.s0.v4.v346"

"for f75.s0.v4.v346":                             ; preds = %"end for f75.s0.v3.v32", %"for f75.s0.v4.v346.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f75.s0.v3.v32" ], [ 0, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f75.s0.v3.v32" ], [ %41, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f75.s0.v3.v32" ], [ %37, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f75.s0.v3.v32" ], [ %35, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f75.s0.v3.v32" ], [ %30, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f75.s0.v3.v32" ], [ %scevgep, %"for f75.s0.v4.v346.preheader" ]
  br i1 %.not5, label %"end for f75.s0.v3.v3", label %"for f75.s0.v3.v3", !prof !4

"for f75.s0.v3.v3":                               ; preds = %"for f75.s0.v4.v346", %"for f75.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f75.s0.v3.v3" ], [ %lsr.iv22, %"for f75.s0.v4.v346" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f75.s0.v3.v3" ], [ %lsr.iv18, %"for f75.s0.v4.v346" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f75.s0.v3.v3" ], [ %lsr.iv14, %"for f75.s0.v4.v346" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f75.s0.v3.v3" ], [ %lsr.iv10, %"for f75.s0.v4.v346" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f75.s0.v3.v3" ], [ %lsr.iv4, %"for f75.s0.v4.v346" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f75.s0.v3.v3" ], [ %a711, %"for f75.s0.v4.v346" ]
  %51 = add i32 %lsr.iv24, %25
  %52 = add i32 %lsr.iv20, %25
  %53 = add i32 %lsr.iv16, %25
  %54 = add i32 %lsr.iv12, %25
  %55 = sext i32 %54 to i64
  %56 = add nsw i64 %55, 2
  %57 = getelementptr inbounds float, ptr %f74.host, i64 %56
  %58 = load <8 x float>, ptr %57, align 4, !tbaa !56
  %59 = add nsw i64 %55, 10
  %60 = getelementptr inbounds float, ptr %f74.host, i64 %59
  %61 = load <8 x float>, ptr %60, align 4, !tbaa !56
  %62 = shufflevector <8 x float> %58, <8 x float> %61, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %63 = getelementptr inbounds float, ptr %f74.host, i64 %55
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !56
  %65 = add nsw i64 %55, 8
  %66 = getelementptr inbounds float, ptr %f74.host, i64 %65
  %67 = load <8 x float>, ptr %66, align 4, !tbaa !56
  %68 = shufflevector <8 x float> %64, <8 x float> %67, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %69 = shufflevector <8 x float> %64, <8 x float> %67, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %70 = fadd <8 x float> %69, %68
  %71 = fmul <8 x float> %70, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %72 = add nsw i64 %55, -2
  %73 = getelementptr inbounds float, ptr %f74.host, i64 %72
  %74 = load <8 x float>, ptr %73, align 4, !tbaa !56
  %75 = add nsw i64 %55, 6
  %76 = getelementptr inbounds float, ptr %f74.host, i64 %75
  %77 = load <8 x float>, ptr %76, align 4, !tbaa !56
  %78 = shufflevector <8 x float> %74, <8 x float> %77, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %79 = fadd <8 x float> %78, %71
  %80 = fadd <8 x float> %62, %79
  %81 = fmul <8 x float> %80, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %82 = sext i32 %53 to i64
  %83 = add nsw i64 %82, 2
  %84 = getelementptr inbounds float, ptr %f74.host, i64 %83
  %85 = load <8 x float>, ptr %84, align 4, !tbaa !56
  %86 = add nsw i64 %82, 10
  %87 = getelementptr inbounds float, ptr %f74.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !56
  %89 = shufflevector <8 x float> %85, <8 x float> %88, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %90 = getelementptr inbounds float, ptr %f74.host, i64 %82
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !56
  %92 = add nsw i64 %82, 8
  %93 = getelementptr inbounds float, ptr %f74.host, i64 %92
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !56
  %95 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %96 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %97 = fadd <8 x float> %96, %95
  %98 = fmul <8 x float> %97, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %99 = add nsw i64 %82, -2
  %100 = getelementptr inbounds float, ptr %f74.host, i64 %99
  %101 = load <8 x float>, ptr %100, align 4, !tbaa !56
  %102 = add nsw i64 %82, 6
  %103 = getelementptr inbounds float, ptr %f74.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !56
  %105 = shufflevector <8 x float> %101, <8 x float> %104, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %106 = fadd <8 x float> %105, %98
  %107 = fadd <8 x float> %89, %106
  %108 = sext i32 %52 to i64
  %109 = add nsw i64 %108, 2
  %110 = getelementptr inbounds float, ptr %f74.host, i64 %109
  %111 = load <8 x float>, ptr %110, align 4, !tbaa !56
  %112 = add nsw i64 %108, 10
  %113 = getelementptr inbounds float, ptr %f74.host, i64 %112
  %114 = load <8 x float>, ptr %113, align 4, !tbaa !56
  %115 = shufflevector <8 x float> %111, <8 x float> %114, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %116 = getelementptr inbounds float, ptr %f74.host, i64 %108
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !56
  %118 = add nsw i64 %108, 8
  %119 = getelementptr inbounds float, ptr %f74.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !56
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %122 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %123 = fadd <8 x float> %122, %121
  %124 = fmul <8 x float> %123, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %125 = add nsw i64 %108, -2
  %126 = getelementptr inbounds float, ptr %f74.host, i64 %125
  %127 = load <8 x float>, ptr %126, align 4, !tbaa !56
  %128 = add nsw i64 %108, 6
  %129 = getelementptr inbounds float, ptr %f74.host, i64 %128
  %130 = load <8 x float>, ptr %129, align 4, !tbaa !56
  %131 = shufflevector <8 x float> %127, <8 x float> %130, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %132 = fadd <8 x float> %131, %124
  %133 = fadd <8 x float> %115, %132
  %134 = fadd <8 x float> %107, %133
  %135 = fmul <8 x float> %134, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %136 = sext i32 %51 to i64
  %137 = add nsw i64 %136, 2
  %138 = getelementptr inbounds float, ptr %f74.host, i64 %137
  %139 = load <8 x float>, ptr %138, align 4, !tbaa !56
  %140 = add nsw i64 %136, 10
  %141 = getelementptr inbounds float, ptr %f74.host, i64 %140
  %142 = load <8 x float>, ptr %141, align 4, !tbaa !56
  %143 = shufflevector <8 x float> %139, <8 x float> %142, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %144 = getelementptr inbounds float, ptr %f74.host, i64 %136
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !56
  %146 = add nsw i64 %136, 8
  %147 = getelementptr inbounds float, ptr %f74.host, i64 %146
  %148 = load <8 x float>, ptr %147, align 4, !tbaa !56
  %149 = shufflevector <8 x float> %145, <8 x float> %148, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %150 = shufflevector <8 x float> %145, <8 x float> %148, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %151, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %153 = add nsw i64 %136, -2
  %154 = getelementptr inbounds float, ptr %f74.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !56
  %156 = add nsw i64 %136, 6
  %157 = getelementptr inbounds float, ptr %f74.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !56
  %159 = shufflevector <8 x float> %155, <8 x float> %158, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %160 = fadd <8 x float> %159, %152
  %161 = fadd <8 x float> %143, %160
  %162 = fmul <8 x float> %161, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %163 = fadd <8 x float> %135, %162
  %164 = fadd <8 x float> %81, %163
  %165 = fmul <8 x float> %164, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %165, ptr %lsr.iv7, align 4, !tbaa !13
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f75.s0.v3.v3", label %"for f75.s0.v3.v3"

"end for f75.s0.v3.v3":                           ; preds = %"for f75.s0.v3.v3", %"for f75.s0.v4.v346"
  br i1 %.not, label %"end for f75.s0.v3.v32", label %"for f75.s0.v3.v31.preheader", !prof !4

"for f75.s0.v3.v31.preheader":                    ; preds = %"end for f75.s0.v3.v3"
  %166 = trunc i64 %indvars.iv to i32
  %167 = add i32 %f75.s0.v4.v346.base, %166
  %168 = shl nsw i32 %167, 1
  %169 = sub nsw i32 %168, %f74.v4.min_realized
  %170 = add nsw i32 %169, -1
  %171 = mul nsw i32 %170, %28
  %t2148 = add nsw i32 %171, %48
  %172 = mul nsw i32 %169, %28
  %t2149 = add nsw i32 %172, %48
  %173 = add nsw i32 %169, 1
  %174 = mul nsw i32 %173, %28
  %t2150 = add nsw i32 %174, %48
  %175 = add nsw i32 %169, 2
  %176 = mul nsw i32 %175, %28
  %t2151 = add nsw i32 %176, %48
  %177 = sext i32 %t2151 to i64
  %178 = add nsw i64 %177, -12
  %179 = getelementptr inbounds float, ptr %f74.host, i64 %178
  %180 = load <8 x float>, ptr %179, align 4, !tbaa !56
  %181 = add nsw i64 %177, -4
  %182 = getelementptr inbounds float, ptr %f74.host, i64 %181
  %183 = load <8 x float>, ptr %182, align 4, !tbaa !56
  %184 = shufflevector <8 x float> %180, <8 x float> %183, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = add nsw i64 %177, -14
  %186 = getelementptr inbounds float, ptr %f74.host, i64 %185
  %187 = load <8 x float>, ptr %186, align 4, !tbaa !56
  %188 = add nsw i64 %177, -6
  %189 = getelementptr inbounds float, ptr %f74.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !56
  %191 = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %192 = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %193 = fadd <8 x float> %192, %191
  %194 = fmul <8 x float> %193, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %195 = add nsw i64 %177, -16
  %196 = getelementptr inbounds float, ptr %f74.host, i64 %195
  %197 = load <8 x float>, ptr %196, align 4, !tbaa !56
  %198 = add nsw i64 %177, -8
  %199 = getelementptr inbounds float, ptr %f74.host, i64 %198
  %200 = load <8 x float>, ptr %199, align 4, !tbaa !56
  %201 = shufflevector <8 x float> %197, <8 x float> %200, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %202 = fadd <8 x float> %201, %194
  %203 = fadd <8 x float> %184, %202
  %204 = fmul <8 x float> %203, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %205 = sext i32 %t2150 to i64
  %206 = add nsw i64 %205, -12
  %207 = getelementptr inbounds float, ptr %f74.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !56
  %209 = add nsw i64 %205, -4
  %210 = getelementptr inbounds float, ptr %f74.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !56
  %212 = shufflevector <8 x float> %208, <8 x float> %211, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %213 = add nsw i64 %205, -14
  %214 = getelementptr inbounds float, ptr %f74.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !56
  %216 = add nsw i64 %205, -6
  %217 = getelementptr inbounds float, ptr %f74.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !56
  %219 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %220 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = fadd <8 x float> %220, %219
  %222 = fmul <8 x float> %221, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %223 = add nsw i64 %205, -16
  %224 = getelementptr inbounds float, ptr %f74.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !56
  %226 = add nsw i64 %205, -8
  %227 = getelementptr inbounds float, ptr %f74.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !56
  %229 = shufflevector <8 x float> %225, <8 x float> %228, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %230 = fadd <8 x float> %229, %222
  %231 = fadd <8 x float> %212, %230
  %232 = sext i32 %t2149 to i64
  %233 = add nsw i64 %232, -12
  %234 = getelementptr inbounds float, ptr %f74.host, i64 %233
  %235 = load <8 x float>, ptr %234, align 4, !tbaa !56
  %236 = add nsw i64 %232, -4
  %237 = getelementptr inbounds float, ptr %f74.host, i64 %236
  %238 = load <8 x float>, ptr %237, align 4, !tbaa !56
  %239 = shufflevector <8 x float> %235, <8 x float> %238, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %240 = add nsw i64 %232, -14
  %241 = getelementptr inbounds float, ptr %f74.host, i64 %240
  %242 = load <8 x float>, ptr %241, align 4, !tbaa !56
  %243 = add nsw i64 %232, -6
  %244 = getelementptr inbounds float, ptr %f74.host, i64 %243
  %245 = load <8 x float>, ptr %244, align 4, !tbaa !56
  %246 = shufflevector <8 x float> %242, <8 x float> %245, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %247 = shufflevector <8 x float> %242, <8 x float> %245, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %248 = fadd <8 x float> %247, %246
  %249 = fmul <8 x float> %248, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %250 = add nsw i64 %232, -16
  %251 = getelementptr inbounds float, ptr %f74.host, i64 %250
  %252 = load <8 x float>, ptr %251, align 4, !tbaa !56
  %253 = add nsw i64 %232, -8
  %254 = getelementptr inbounds float, ptr %f74.host, i64 %253
  %255 = load <8 x float>, ptr %254, align 4, !tbaa !56
  %256 = shufflevector <8 x float> %252, <8 x float> %255, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %257 = fadd <8 x float> %256, %249
  %258 = fadd <8 x float> %239, %257
  %259 = fadd <8 x float> %231, %258
  %260 = fmul <8 x float> %259, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %261 = sext i32 %t2148 to i64
  %262 = add nsw i64 %261, -12
  %263 = getelementptr inbounds float, ptr %f74.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !56
  %265 = add nsw i64 %261, -4
  %266 = getelementptr inbounds float, ptr %f74.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !56
  %268 = shufflevector <8 x float> %264, <8 x float> %267, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %269 = add nsw i64 %261, -14
  %270 = getelementptr inbounds float, ptr %f74.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !56
  %272 = add nsw i64 %261, -6
  %273 = getelementptr inbounds float, ptr %f74.host, i64 %272
  %274 = load <8 x float>, ptr %273, align 4, !tbaa !56
  %275 = shufflevector <8 x float> %271, <8 x float> %274, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %276 = shufflevector <8 x float> %271, <8 x float> %274, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %277 = fadd <8 x float> %276, %275
  %278 = fmul <8 x float> %277, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %279 = add nsw i64 %261, -16
  %280 = getelementptr inbounds float, ptr %f74.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !56
  %282 = add nsw i64 %261, -8
  %283 = getelementptr inbounds float, ptr %f74.host, i64 %282
  %284 = load <8 x float>, ptr %283, align 4, !tbaa !56
  %285 = shufflevector <8 x float> %281, <8 x float> %284, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %286 = fadd <8 x float> %285, %278
  %287 = fadd <8 x float> %268, %286
  %288 = fmul <8 x float> %287, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %289 = fadd <8 x float> %260, %288
  %290 = fadd <8 x float> %204, %289
  %291 = fmul <8 x float> %290, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %292 = add nsw i64 %18, %indvars.iv
  %293 = mul nsw i64 %292, %19
  %294 = add i64 %50, %293
  %295 = getelementptr inbounds float, ptr %f75.host, i64 %294
  store <8 x float> %291, ptr %295, align 4, !tbaa !13
  br label %"end for f75.s0.v3.v32"

"end for f75.s0.v3.v32":                          ; preds = %"for f75.s0.v3.v31.preheader", %"end for f75.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f75.s0.v4.v346"

destructor_block:                                 ; preds = %"end for f75.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f9.s0.v6(ptr nocapture readnone %__user_context, i32 %f9.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 7
  %f9.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 8
  %f9.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 13
  %f8.host = load ptr, ptr %2, align 8
  %3 = add i32 %f9.s0.v4.max, 1
  %4 = icmp slt i32 %f9.s0.v4.min, %3
  br i1 %4, label %"for f9.s0.v4.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 6
  %f9.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 1
  %f8.stride.2 = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 5
  %f9.s0.v3.max = load i32, ptr %7, align 4
  %a729 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 11
  %f9.v3.min_realized = load i32, ptr %8, align 4
  %9 = sext i32 %f9.v3.min_realized to i64
  %10 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 10
  %f9.v3.extent_realized.s.s = load i32, ptr %10, align 4
  %11 = sext i32 %f9.v3.extent_realized.s.s to i64
  %12 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 2
  %f8.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = add i32 %f9.s0.v3.max, 1
  %14 = sub i32 %13, %f9.s0.v3.min
  %reass.sub = sub nsw i64 %11, %9
  %15 = add nsw i64 %reass.sub, 1
  %16 = tail call i32 @llvm.smax.i32(i32 %a729, i32 0)
  %17 = shl nsw i64 %15, 2
  %18 = shl i32 %f8.v3.extent_realized.s, 1
  %19 = add i32 %18, 2
  %20 = icmp sgt i32 %13, %f9.s0.v3.min
  %t2154.s = sub nsw i32 %f9.s0.v6, %16
  %21 = mul i32 %t2154.s, %f8.stride.2
  br i1 %20, label %"for f9.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.us.preheader":                      ; preds = %"for f9.s0.v4.preheader"
  %22 = shl i32 %f9.s0.v3.min, 1
  %23 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 3
  %f8.v3.min_realized = load i32, ptr %23, align 4
  %24 = sub i32 %22, %f8.v3.min_realized
  %25 = add i32 %f8.v3.extent_realized.s, 1
  %26 = shl i32 %f9.s0.v4.min, 1
  %27 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 4
  %f8.v4.min_realized = load i32, ptr %27, align 4
  %28 = xor i32 %f8.v4.min_realized, -1
  %29 = add i32 %26, %28
  %30 = mul i32 %25, %29
  %31 = add i32 %24, %30
  %32 = sub i32 %26, %f8.v4.min_realized
  %33 = mul i32 %25, %32
  %34 = add i32 %24, %33
  %35 = or i32 %26, 1
  %36 = sub i32 %35, %f8.v4.min_realized
  %37 = mul i32 %25, %36
  %38 = add i32 %24, %37
  %39 = add i32 %26, 2
  %40 = sub i32 %39, %f8.v4.min_realized
  %41 = mul i32 %25, %40
  %42 = add i32 %24, %41
  %43 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 15
  %f9.host = load ptr, ptr %43, align 8
  %44 = sext i32 %f9.s0.v3.min to i64
  %45 = sub nsw i64 %44, %9
  %46 = sext i32 %f9.s0.v6 to i64
  %smax = zext i32 %16 to i64
  %47 = sub nsw i64 %46, %smax
  %48 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 9
  %f9.stride.2 = load i32, ptr %48, align 4
  %49 = sext i32 %f9.stride.2 to i64
  %50 = mul nsw i64 %47, %49
  %51 = add i64 %45, %50
  %52 = sext i32 %f9.s0.v4.min to i64
  %53 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 12
  %f9.v4.min_realized = load i32, ptr %53, align 4
  %54 = sext i32 %f9.v4.min_realized to i64
  %55 = sub nsw i64 %52, %54
  %56 = mul i64 %15, %55
  %57 = add i64 %51, %56
  %scevgep = getelementptr float, ptr %f9.host, i64 %57
  %58 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %59 = add i32 %21, %41
  %60 = add i32 %59, %22
  %61 = sub i32 %60, %f8.v3.min_realized
  %62 = add i32 %21, %37
  %63 = add i32 %62, %22
  %64 = sub i32 %63, %f8.v3.min_realized
  %65 = add i32 %21, %33
  %66 = add i32 %65, %22
  %67 = sub i32 %66, %f8.v3.min_realized
  %68 = add i32 %21, %30
  %69 = add i32 %68, %22
  %70 = sub i32 %69, %f8.v3.min_realized
  %71 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %72 = zext i32 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  %min.iters.check = icmp ult i32 %71, 3
  %mul.result = shl i32 %58, 1
  %mul.result6 = shl i32 %58, 1
  %mul.overflow7 = icmp slt i32 %58, 0
  %mul.result9 = shl i32 %58, 1
  %mul.result12 = shl i32 %58, 1
  %n.vec = and i64 %73, -4
  %.cast = trunc i64 %n.vec to i32
  %74 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %77 = shl i32 %.cast20, 1
  %78 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %14, %.cast25
  %79 = getelementptr float, ptr %f8.host, i64 -1
  %80 = getelementptr float, ptr %f8.host, i64 -1
  %81 = getelementptr float, ptr %f8.host, i64 -1
  %82 = getelementptr float, ptr %f8.host, i64 -1
  %83 = getelementptr float, ptr %f8.host, i64 -1
  %84 = getelementptr float, ptr %f8.host, i64 -1
  %85 = getelementptr float, ptr %f8.host, i64 -1
  %86 = getelementptr float, ptr %f8.host, i64 -1
  %cmp.n = icmp eq i64 %73, %n.vec
  br label %"for f9.s0.v4.us"

"for f9.s0.v4.us":                                ; preds = %"for f9.s0.v4.us.preheader", %"end for f9.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f9.s0.v4.us.preheader" ], [ %indvar.next, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %31, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %34, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %38, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %42, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f9.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f9.s0.v3.loopexit.us" ]
  %f9.s0.v4.us = phi i32 [ %f9.s0.v4.min, %"for f9.s0.v4.us.preheader" ], [ %233, %"end for f9.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f9.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f9.s0.v4.us"
  %87 = mul i32 %19, %indvar
  %88 = add i32 %70, %87
  %89 = add i32 %67, %87
  %90 = add i32 %64, %87
  %91 = add i32 %61, %87
  %92 = add i32 %91, %mul.result
  %93 = icmp slt i32 %92, %91
  %94 = add i32 %90, %mul.result6
  %95 = icmp slt i32 %94, %90
  %96 = or i1 %95, %mul.overflow7
  %97 = add i32 %89, %mul.result9
  %98 = icmp slt i32 %97, %89
  %99 = add i32 %88, %mul.result12
  %100 = icmp slt i32 %99, %88
  %101 = or i1 %93, %96
  %102 = or i1 %98, %101
  %103 = or i1 %100, %102
  br i1 %103, label %"for f9.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %74
  %ind.end15 = add i32 %lsr.iv15.us, %75
  %ind.end18 = add i32 %lsr.iv10.us, %76
  %ind.end21 = add i32 %lsr.iv6.us, %77
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %78
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %104 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %104
  %.cast28 = trunc i64 %index to i32
  %105 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %105
  %.cast29 = trunc i64 %index to i32
  %106 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %106
  %.cast31 = trunc i64 %index to i32
  %107 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %107
  %.cast33 = trunc i64 %index to i32
  %108 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %108
  %109 = add i32 %offset.idx34, %21
  %110 = add i32 %offset.idx32, %21
  %111 = add i32 %offset.idx30, %21
  %112 = add i32 %offset.idx, %21
  %113 = sext i32 %112 to i64
  %114 = add nsw i64 %113, 2
  %115 = getelementptr float, ptr %79, i64 %114
  %wide.vec = load <8 x float>, ptr %115, align 4, !tbaa !36
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %116 = getelementptr float, ptr %80, i64 %113
  %wide.vec36 = load <8 x float>, ptr %116, align 4, !tbaa !36
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %117 = fadd <4 x float> %strided.vec, %strided.vec38
  %118 = fmul <4 x float> %117, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %119 = fadd <4 x float> %strided.vec37, %118
  %120 = fadd <4 x float> %strided.vec35, %119
  %121 = fmul <4 x float> %120, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %122 = sext i32 %111 to i64
  %123 = add nsw i64 %122, 2
  %124 = getelementptr float, ptr %81, i64 %123
  %wide.vec39 = load <8 x float>, ptr %124, align 4, !tbaa !36
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %125 = getelementptr float, ptr %82, i64 %122
  %wide.vec42 = load <8 x float>, ptr %125, align 4, !tbaa !36
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %126 = fadd <4 x float> %strided.vec40, %strided.vec44
  %127 = fmul <4 x float> %126, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %128 = fadd <4 x float> %strided.vec43, %127
  %129 = fadd <4 x float> %strided.vec41, %128
  %130 = sext i32 %110 to i64
  %131 = add nsw i64 %130, 2
  %132 = getelementptr float, ptr %83, i64 %131
  %wide.vec45 = load <8 x float>, ptr %132, align 4, !tbaa !36
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %133 = getelementptr float, ptr %84, i64 %130
  %wide.vec48 = load <8 x float>, ptr %133, align 4, !tbaa !36
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %134 = fadd <4 x float> %strided.vec46, %strided.vec50
  %135 = fmul <4 x float> %134, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %136 = fadd <4 x float> %strided.vec49, %135
  %137 = fadd <4 x float> %strided.vec47, %136
  %138 = fadd <4 x float> %129, %137
  %139 = fmul <4 x float> %138, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %140 = sext i32 %109 to i64
  %141 = add nsw i64 %140, 2
  %142 = getelementptr float, ptr %85, i64 %141
  %wide.vec51 = load <8 x float>, ptr %142, align 4, !tbaa !36
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %143 = getelementptr float, ptr %86, i64 %140
  %wide.vec54 = load <8 x float>, ptr %143, align 4, !tbaa !36
  %strided.vec55 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec56 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %144 = fadd <4 x float> %strided.vec52, %strided.vec56
  %145 = fmul <4 x float> %144, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %146 = fadd <4 x float> %strided.vec55, %145
  %147 = fadd <4 x float> %strided.vec53, %146
  %148 = fmul <4 x float> %147, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %149 = fadd <4 x float> %139, %148
  %150 = fadd <4 x float> %121, %149
  %151 = fmul <4 x float> %150, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %151, ptr %next.gep, align 4, !tbaa !32
  %index.next = add nuw i64 %index, 4
  %152 = icmp eq i64 %index.next, %n.vec
  br i1 %152, label %middle.block, label %vector.body, !llvm.loop !60

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us.preheader"

"for f9.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f9.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f9.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f9.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f9.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f9.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f9.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %14, %vector.scevcheck ], [ %14, %"for f9.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f9.s0.v3.us"

"for f9.s0.v3.us":                                ; preds = %"for f9.s0.v3.us.preheader", %"for f9.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f9.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f9.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f9.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f9.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f9.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f9.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f9.s0.v3.us.preheader" ]
  %153 = add i32 %lsr.iv21.us, %21
  %154 = add i32 %lsr.iv17.us, %21
  %155 = add i32 %lsr.iv13.us, %21
  %156 = add i32 %lsr.iv8.us, %21
  %157 = sext i32 %156 to i64
  %158 = add nsw i64 %157, 2
  %159 = getelementptr inbounds float, ptr %f8.host, i64 %158
  %160 = load float, ptr %159, align 4, !tbaa !36
  %161 = add nsw i64 %157, 1
  %162 = getelementptr inbounds float, ptr %f8.host, i64 %161
  %163 = load float, ptr %162, align 4, !tbaa !36
  %164 = getelementptr inbounds float, ptr %f8.host, i64 %157
  %165 = load float, ptr %164, align 4, !tbaa !36
  %166 = fadd float %163, %165
  %167 = fmul float %166, 3.000000e+00
  %168 = add nsw i64 %157, -1
  %169 = getelementptr inbounds float, ptr %f8.host, i64 %168
  %170 = sext i32 %155 to i64
  %171 = add nsw i64 %170, 2
  %172 = getelementptr inbounds float, ptr %f8.host, i64 %171
  %173 = add nsw i64 %170, 1
  %174 = getelementptr inbounds float, ptr %f8.host, i64 %173
  %175 = load float, ptr %174, align 4, !tbaa !36
  %176 = getelementptr inbounds float, ptr %f8.host, i64 %170
  %177 = load float, ptr %176, align 4, !tbaa !36
  %178 = fadd float %175, %177
  %179 = fmul float %178, 3.000000e+00
  %180 = add nsw i64 %170, -1
  %181 = getelementptr inbounds float, ptr %f8.host, i64 %180
  %182 = load float, ptr %181, align 4, !tbaa !36
  %183 = fadd float %182, %179
  %184 = sext i32 %154 to i64
  %185 = add nsw i64 %184, 2
  %186 = getelementptr inbounds float, ptr %f8.host, i64 %185
  %187 = load float, ptr %186, align 4, !tbaa !36
  %188 = add nsw i64 %184, 1
  %189 = getelementptr inbounds float, ptr %f8.host, i64 %188
  %190 = load float, ptr %189, align 4, !tbaa !36
  %191 = getelementptr inbounds float, ptr %f8.host, i64 %184
  %192 = load float, ptr %191, align 4, !tbaa !36
  %193 = fadd float %190, %192
  %194 = fmul float %193, 3.000000e+00
  %195 = add nsw i64 %184, -1
  %196 = getelementptr inbounds float, ptr %f8.host, i64 %195
  %197 = load float, ptr %196, align 4, !tbaa !36
  %198 = fadd float %197, %194
  %199 = fadd float %187, %198
  %200 = load float, ptr %169, align 4, !tbaa !36
  %201 = load float, ptr %172, align 4, !tbaa !36
  %202 = insertelement <2 x float> poison, float %200, i64 0
  %203 = insertelement <2 x float> %202, float %201, i64 1
  %204 = insertelement <2 x float> poison, float %167, i64 0
  %205 = insertelement <2 x float> %204, float %183, i64 1
  %206 = fadd <2 x float> %203, %205
  %207 = insertelement <2 x float> poison, float %160, i64 0
  %208 = insertelement <2 x float> %207, float %199, i64 1
  %209 = fadd <2 x float> %208, %206
  %210 = fmul <2 x float> %209, <float 1.250000e-01, float 3.750000e-01>
  %211 = sext i32 %153 to i64
  %212 = add nsw i64 %211, 2
  %213 = getelementptr inbounds float, ptr %f8.host, i64 %212
  %214 = load float, ptr %213, align 4, !tbaa !36
  %215 = add nsw i64 %211, 1
  %216 = getelementptr inbounds float, ptr %f8.host, i64 %215
  %217 = load float, ptr %216, align 4, !tbaa !36
  %218 = getelementptr inbounds float, ptr %f8.host, i64 %211
  %219 = load float, ptr %218, align 4, !tbaa !36
  %220 = fadd float %217, %219
  %221 = fmul float %220, 3.000000e+00
  %222 = add nsw i64 %211, -1
  %223 = getelementptr inbounds float, ptr %f8.host, i64 %222
  %224 = load float, ptr %223, align 4, !tbaa !36
  %225 = fadd float %224, %221
  %226 = fadd float %214, %225
  %227 = fmul float %226, 1.250000e-01
  %228 = extractelement <2 x float> %210, i64 1
  %229 = fadd float %228, %227
  %230 = extractelement <2 x float> %210, i64 0
  %231 = fadd float %230, %229
  %232 = fmul float %231, 1.250000e-01
  store float %232, ptr %lsr.iv4.us, align 4, !tbaa !32
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us", !llvm.loop !61

"end for f9.s0.v3.loopexit.us":                   ; preds = %"for f9.s0.v3.us", %middle.block
  %233 = add nsw i32 %f9.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %17
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %19
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %19
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %19
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %19
  %.not.us = icmp eq i32 %f9.s0.v4.us, %f9.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f9.s0.v4.us"

destructor_block:                                 ; preds = %"end for f9.s0.v3.loopexit.us", %"for f9.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f10.s0.v6(ptr nocapture readnone %__user_context, i32 %f10.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 3
  %f10.v4.extent_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 9
  %local_laplacian.min.1 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 10
  %f10.host = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 12
  %f9.host = load ptr, ptr %3, align 8
  %4 = add nsw i32 %local_laplacian.min.1, -254
  %5 = ashr i32 %4, 7
  %6 = add nsw i32 %f10.v4.extent_realized.s, 1
  %7 = add nsw i32 %6, %5
  %8 = icmp sgt i32 %f10.v4.extent_realized.s, -1
  br i1 %8, label %"for f10.s0.v4.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.preheader":                        ; preds = %entry
  %9 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 8
  %local_laplacian.min.0 = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 4
  %f9.stride.2 = load i32, ptr %10, align 4
  %a744 = load i32, ptr %closure, align 4
  %11 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 6
  %f9.v3.min_realized = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 5
  %f9.v3.extent_realized.s.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 2
  %f10.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f10.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 1
  %f10.stride.2 = load i32, ptr %15, align 4
  %16 = sext i32 %f10.stride.2 to i64
  %17 = add i32 %f10.v3.extent_realized.s, 1
  %18 = add nsw i64 %14, 1
  %19 = sext i32 %5 to i64
  %20 = sext i32 %f10.s0.v6 to i64
  %21 = tail call i32 @llvm.smax.i32(i32 %a744, i32 0)
  %smax = zext i32 %21 to i64
  %22 = sub nsw i64 %20, %smax
  %23 = mul nsw i64 %22, %16
  %reass.sub = sub i32 %f9.v3.extent_realized.s.s, %f9.v3.min_realized
  %24 = add i32 %reass.sub, 1
  %25 = shl i32 %24, 1
  %26 = icmp ult i32 %f10.v3.extent_realized.s, 2147483647
  %27 = add nsw i32 %local_laplacian.min.0, -254
  %28 = ashr i32 %27, 7
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %23, %29
  %31 = shl nsw i32 %28, 1
  %t2168.s = sub nsw i32 %f10.s0.v6, %21
  %32 = mul i32 %t2168.s, %f9.stride.2
  %33 = add i32 %32, %31
  br i1 %26, label %"for f10.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.us.preheader":                     ; preds = %"for f10.s0.v4.preheader"
  %34 = shl nsw i32 %5, 1
  %35 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 7
  %f9.v4.min_realized = load i32, ptr %35, align 4
  %36 = xor i32 %f9.v4.min_realized, -1
  %37 = add i32 %34, %36
  %38 = mul i32 %24, %37
  %39 = sub i32 %38, %f9.v3.min_realized
  %40 = sub i32 %34, %f9.v4.min_realized
  %41 = mul i32 %24, %40
  %42 = sub i32 %41, %f9.v3.min_realized
  %43 = or i32 %34, 1
  %44 = sub i32 %43, %f9.v4.min_realized
  %45 = mul i32 %24, %44
  %46 = sub i32 %45, %f9.v3.min_realized
  %47 = add nsw i32 %34, 2
  %48 = sub i32 %47, %f9.v4.min_realized
  %49 = mul i32 %24, %48
  %50 = sub i32 %49, %f9.v3.min_realized
  %51 = add i32 %49, %32
  %52 = add i32 %51, %31
  %53 = sub i32 %52, %f9.v3.min_realized
  %54 = shl i32 %24, 1
  %55 = add i32 %45, %32
  %56 = add i32 %55, %31
  %57 = sub i32 %56, %f9.v3.min_realized
  %58 = add i32 %32, %41
  %59 = add i32 %58, %31
  %60 = sub i32 %59, %f9.v3.min_realized
  %61 = add i32 %38, %32
  %62 = add i32 %61, %31
  %63 = sub i32 %62, %f9.v3.min_realized
  %64 = zext i32 %f10.v3.extent_realized.s to i64
  %65 = add nuw nsw i64 %64, 1
  %min.iters.check = icmp ult i32 %f10.v3.extent_realized.s, 3
  %mul.result = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result7 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result10 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result13 = shl i32 %f10.v3.extent_realized.s, 1
  %n.vec = and i64 %65, -4
  %.cast = trunc i64 %n.vec to i32
  %66 = shl i32 %.cast, 1
  %.cast15 = trunc i64 %n.vec to i32
  %67 = shl i32 %.cast15, 1
  %.cast18 = trunc i64 %n.vec to i32
  %68 = shl i32 %.cast18, 1
  %.cast21 = trunc i64 %n.vec to i32
  %69 = shl i32 %.cast21, 1
  %ind.end24 = add i64 %30, %n.vec
  %.cast26 = trunc i64 %n.vec to i32
  %ind.end27 = sub i32 %17, %.cast26
  %70 = getelementptr float, ptr %f9.host, i64 -1
  %71 = getelementptr float, ptr %f9.host, i64 -1
  %72 = getelementptr float, ptr %f9.host, i64 -1
  %73 = getelementptr float, ptr %f9.host, i64 -1
  %74 = getelementptr float, ptr %f9.host, i64 -1
  %75 = getelementptr float, ptr %f9.host, i64 -1
  %76 = getelementptr float, ptr %f9.host, i64 -1
  %77 = getelementptr float, ptr %f9.host, i64 -1
  %cmp.n = icmp eq i64 %65, %n.vec
  br label %"for f10.s0.v4.us"

"for f10.s0.v4.us":                               ; preds = %"for f10.s0.v4.us.preheader", %"end for f10.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f10.s0.v4.us.preheader" ], [ %indvar.next, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv17.us = phi i32 [ %39, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next18.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv13.us = phi i32 [ %42, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next14.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv9.us = phi i32 [ %46, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next10.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv5.us = phi i32 [ %50, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next6.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi i64 [ %19, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next2.us, %"end for f10.s0.v3.loopexit.us" ]
  %78 = sub nsw i64 %lsr.iv1.us, %19
  %79 = mul i64 %78, %18
  %80 = sub i64 %79, %29
  br i1 %min.iters.check, label %"for f10.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f10.s0.v4.us"
  %81 = mul i32 %54, %indvar
  %82 = add i32 %63, %81
  %83 = add i32 %60, %81
  %84 = add i32 %57, %81
  %85 = add i32 %53, %81
  %86 = add i32 %85, %mul.result
  %87 = icmp slt i32 %86, %85
  %88 = add i32 %84, %mul.result7
  %89 = icmp slt i32 %88, %84
  %90 = add i32 %83, %mul.result10
  %91 = icmp slt i32 %90, %83
  %92 = add i32 %82, %mul.result13
  %93 = icmp slt i32 %92, %82
  %94 = or i1 %87, %89
  %95 = or i1 %91, %94
  %96 = or i1 %93, %95
  br i1 %96, label %"for f10.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv17.us, %66
  %ind.end16 = add i32 %lsr.iv13.us, %67
  %ind.end19 = add i32 %lsr.iv9.us, %68
  %ind.end22 = add i32 %lsr.iv5.us, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %30, %index
  %.cast29 = trunc i64 %index to i32
  %97 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv5.us, %97
  %.cast31 = trunc i64 %index to i32
  %98 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv9.us, %98
  %.cast33 = trunc i64 %index to i32
  %99 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv13.us, %99
  %.cast35 = trunc i64 %index to i32
  %100 = shl i32 %.cast35, 1
  %offset.idx36 = add i32 %lsr.iv17.us, %100
  %101 = add i32 %33, %offset.idx36
  %102 = add i32 %33, %offset.idx34
  %103 = add i32 %33, %offset.idx32
  %104 = add i32 %33, %offset.idx30
  %105 = sext i32 %104 to i64
  %106 = add nsw i64 %105, 2
  %107 = getelementptr float, ptr %70, i64 %106
  %wide.vec = load <8 x float>, ptr %107, align 4, !tbaa !32
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec37 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %108 = getelementptr float, ptr %71, i64 %105
  %wide.vec38 = load <8 x float>, ptr %108, align 4, !tbaa !32
  %strided.vec39 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec40 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %109 = fadd <4 x float> %strided.vec, %strided.vec40
  %110 = fmul <4 x float> %109, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %111 = fadd <4 x float> %strided.vec39, %110
  %112 = fadd <4 x float> %strided.vec37, %111
  %113 = fmul <4 x float> %112, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %114 = sext i32 %103 to i64
  %115 = add nsw i64 %114, 2
  %116 = getelementptr float, ptr %72, i64 %115
  %wide.vec41 = load <8 x float>, ptr %116, align 4, !tbaa !32
  %strided.vec42 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec43 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %117 = getelementptr float, ptr %73, i64 %114
  %wide.vec44 = load <8 x float>, ptr %117, align 4, !tbaa !32
  %strided.vec45 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec46 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %118 = fadd <4 x float> %strided.vec42, %strided.vec46
  %119 = fmul <4 x float> %118, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %120 = fadd <4 x float> %strided.vec45, %119
  %121 = fadd <4 x float> %strided.vec43, %120
  %122 = sext i32 %102 to i64
  %123 = add nsw i64 %122, 2
  %124 = getelementptr float, ptr %74, i64 %123
  %wide.vec47 = load <8 x float>, ptr %124, align 4, !tbaa !32
  %strided.vec48 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec49 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %125 = getelementptr float, ptr %75, i64 %122
  %wide.vec50 = load <8 x float>, ptr %125, align 4, !tbaa !32
  %strided.vec51 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec52 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %126 = fadd <4 x float> %strided.vec48, %strided.vec52
  %127 = fmul <4 x float> %126, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %128 = fadd <4 x float> %strided.vec51, %127
  %129 = fadd <4 x float> %strided.vec49, %128
  %130 = fadd <4 x float> %121, %129
  %131 = fmul <4 x float> %130, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %132 = sext i32 %101 to i64
  %133 = add nsw i64 %132, 2
  %134 = getelementptr float, ptr %76, i64 %133
  %wide.vec53 = load <8 x float>, ptr %134, align 4, !tbaa !32
  %strided.vec54 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec55 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %135 = getelementptr float, ptr %77, i64 %132
  %wide.vec56 = load <8 x float>, ptr %135, align 4, !tbaa !32
  %strided.vec57 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec58 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %136 = fadd <4 x float> %strided.vec54, %strided.vec58
  %137 = fmul <4 x float> %136, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %138 = fadd <4 x float> %strided.vec57, %137
  %139 = fadd <4 x float> %strided.vec55, %138
  %140 = fmul <4 x float> %139, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %141 = fadd <4 x float> %131, %140
  %142 = fadd <4 x float> %113, %141
  %143 = fmul <4 x float> %142, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %144 = add i64 %80, %offset.idx
  %145 = getelementptr inbounds float, ptr %f10.host, i64 %144
  store <4 x float> %143, ptr %145, align 4, !tbaa !28
  %index.next = add nuw i64 %index, 4
  %146 = icmp eq i64 %index.next, %n.vec
  br i1 %146, label %middle.block, label %vector.body, !llvm.loop !62

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us.preheader"

"for f10.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f10.s0.v4.us", %middle.block
  %lsr.iv19.us.ph = phi i32 [ %lsr.iv17.us, %vector.scevcheck ], [ %lsr.iv17.us, %"for f10.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv15.us.ph = phi i32 [ %lsr.iv13.us, %vector.scevcheck ], [ %lsr.iv13.us, %"for f10.s0.v4.us" ], [ %ind.end16, %middle.block ]
  %lsr.iv11.us.ph = phi i32 [ %lsr.iv9.us, %vector.scevcheck ], [ %lsr.iv9.us, %"for f10.s0.v4.us" ], [ %ind.end19, %middle.block ]
  %lsr.iv7.us.ph = phi i32 [ %lsr.iv5.us, %vector.scevcheck ], [ %lsr.iv5.us, %"for f10.s0.v4.us" ], [ %ind.end22, %middle.block ]
  %lsr.iv3.us.ph = phi i64 [ %30, %vector.scevcheck ], [ %30, %"for f10.s0.v4.us" ], [ %ind.end24, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %17, %vector.scevcheck ], [ %17, %"for f10.s0.v4.us" ], [ %ind.end27, %middle.block ]
  br label %"for f10.s0.v3.us"

"for f10.s0.v3.us":                               ; preds = %"for f10.s0.v3.us.preheader", %"for f10.s0.v3.us"
  %lsr.iv19.us = phi i32 [ %lsr.iv.next20.us, %"for f10.s0.v3.us" ], [ %lsr.iv19.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv15.us = phi i32 [ %lsr.iv.next16.us, %"for f10.s0.v3.us" ], [ %lsr.iv15.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv11.us = phi i32 [ %lsr.iv.next12.us, %"for f10.s0.v3.us" ], [ %lsr.iv11.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv7.us = phi i32 [ %lsr.iv.next8.us, %"for f10.s0.v3.us" ], [ %lsr.iv7.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv3.us = phi i64 [ %lsr.iv.next4.us, %"for f10.s0.v3.us" ], [ %lsr.iv3.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f10.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f10.s0.v3.us.preheader" ]
  %147 = add i32 %33, %lsr.iv19.us
  %148 = add i32 %33, %lsr.iv15.us
  %149 = add i32 %33, %lsr.iv11.us
  %150 = add i32 %33, %lsr.iv7.us
  %151 = sext i32 %150 to i64
  %152 = add nsw i64 %151, 2
  %153 = getelementptr inbounds float, ptr %f9.host, i64 %152
  %154 = load float, ptr %153, align 4, !tbaa !32
  %155 = add nsw i64 %151, 1
  %156 = getelementptr inbounds float, ptr %f9.host, i64 %155
  %157 = load float, ptr %156, align 4, !tbaa !32
  %158 = getelementptr inbounds float, ptr %f9.host, i64 %151
  %159 = load float, ptr %158, align 4, !tbaa !32
  %160 = fadd float %157, %159
  %161 = fmul float %160, 3.000000e+00
  %162 = add nsw i64 %151, -1
  %163 = getelementptr inbounds float, ptr %f9.host, i64 %162
  %164 = sext i32 %149 to i64
  %165 = add nsw i64 %164, 2
  %166 = getelementptr inbounds float, ptr %f9.host, i64 %165
  %167 = add nsw i64 %164, 1
  %168 = getelementptr inbounds float, ptr %f9.host, i64 %167
  %169 = load float, ptr %168, align 4, !tbaa !32
  %170 = getelementptr inbounds float, ptr %f9.host, i64 %164
  %171 = load float, ptr %170, align 4, !tbaa !32
  %172 = fadd float %169, %171
  %173 = fmul float %172, 3.000000e+00
  %174 = add nsw i64 %164, -1
  %175 = getelementptr inbounds float, ptr %f9.host, i64 %174
  %176 = load float, ptr %175, align 4, !tbaa !32
  %177 = fadd float %176, %173
  %178 = sext i32 %148 to i64
  %179 = add nsw i64 %178, 2
  %180 = getelementptr inbounds float, ptr %f9.host, i64 %179
  %181 = load float, ptr %180, align 4, !tbaa !32
  %182 = add nsw i64 %178, 1
  %183 = getelementptr inbounds float, ptr %f9.host, i64 %182
  %184 = load float, ptr %183, align 4, !tbaa !32
  %185 = getelementptr inbounds float, ptr %f9.host, i64 %178
  %186 = load float, ptr %185, align 4, !tbaa !32
  %187 = fadd float %184, %186
  %188 = fmul float %187, 3.000000e+00
  %189 = add nsw i64 %178, -1
  %190 = getelementptr inbounds float, ptr %f9.host, i64 %189
  %191 = load float, ptr %190, align 4, !tbaa !32
  %192 = fadd float %191, %188
  %193 = fadd float %181, %192
  %194 = load float, ptr %163, align 4, !tbaa !32
  %195 = load float, ptr %166, align 4, !tbaa !32
  %196 = insertelement <2 x float> poison, float %194, i64 0
  %197 = insertelement <2 x float> %196, float %195, i64 1
  %198 = insertelement <2 x float> poison, float %161, i64 0
  %199 = insertelement <2 x float> %198, float %177, i64 1
  %200 = fadd <2 x float> %197, %199
  %201 = insertelement <2 x float> poison, float %154, i64 0
  %202 = insertelement <2 x float> %201, float %193, i64 1
  %203 = fadd <2 x float> %202, %200
  %204 = fmul <2 x float> %203, <float 1.250000e-01, float 3.750000e-01>
  %205 = sext i32 %147 to i64
  %206 = add nsw i64 %205, 2
  %207 = getelementptr inbounds float, ptr %f9.host, i64 %206
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = add nsw i64 %205, 1
  %210 = getelementptr inbounds float, ptr %f9.host, i64 %209
  %211 = load float, ptr %210, align 4, !tbaa !32
  %212 = getelementptr inbounds float, ptr %f9.host, i64 %205
  %213 = load float, ptr %212, align 4, !tbaa !32
  %214 = fadd float %211, %213
  %215 = fmul float %214, 3.000000e+00
  %216 = add nsw i64 %205, -1
  %217 = getelementptr inbounds float, ptr %f9.host, i64 %216
  %218 = load float, ptr %217, align 4, !tbaa !32
  %219 = fadd float %218, %215
  %220 = fadd float %208, %219
  %221 = fmul float %220, 1.250000e-01
  %222 = extractelement <2 x float> %204, i64 1
  %223 = fadd float %222, %221
  %224 = extractelement <2 x float> %204, i64 0
  %225 = fadd float %224, %223
  %226 = fmul float %225, 1.250000e-01
  %227 = add i64 %80, %lsr.iv3.us
  %228 = getelementptr inbounds float, ptr %f10.host, i64 %227
  store float %226, ptr %228, align 4, !tbaa !28
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %lsr.iv.next4.us = add i64 %lsr.iv3.us, 1
  %lsr.iv.next8.us = add i32 %lsr.iv7.us, 2
  %lsr.iv.next12.us = add i32 %lsr.iv11.us, 2
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, 2
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, 2
  %.not3.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not3.us, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us", !llvm.loop !63

"end for f10.s0.v3.loopexit.us":                  ; preds = %"for f10.s0.v3.us", %middle.block
  %lsr.iv.next2.us = add nsw i64 %lsr.iv1.us, 1
  %lsr.us = trunc i64 %lsr.iv.next2.us to i32
  %lsr.iv.next6.us = add i32 %lsr.iv5.us, %25
  %lsr.iv.next10.us = add i32 %lsr.iv9.us, %25
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, %25
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, %25
  %.not.us = icmp eq i32 %7, %lsr.us
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f10.s0.v4.us"

destructor_block:                                 ; preds = %"end for f10.s0.v3.loopexit.us", %"for f10.s0.v4.preheader", %entry
  ret i32 0
}

define internal i32 @par_for___local_laplacian_local_laplacian.s0.v4.v264(ptr %__user_context, i32 %local_laplacian.s0.v4.v264, ptr noalias readonly %closure) {
entry:
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 2
  %a1139 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 3
  %f130.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 4
  %f130.v3.min_realized = load i32, ptr %3, align 4
  %4 = sext i32 %f130.v3.min_realized to i64
  %5 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 5
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 6
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 7
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 8
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 9
  %f4.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 10
  %f4.v3.min_realized = load i32, ptr %13, align 4
  %14 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 11
  %f4.v4.min_realized = load i32, ptr %14, align 4
  %15 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 12
  %f5.stride.1 = load i32, ptr %15, align 4
  %16 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 13
  %f5.v3.extent_realized.s = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 14
  %f5.v3.min_realized = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 15
  %f5.v4.min_realized = load i32, ptr %18, align 4
  %19 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 16
  %f6.stride.1 = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 17
  %f6.v3.extent_realized.s = load i32, ptr %20, align 4
  %21 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 18
  %f6.v3.min_realized = load i32, ptr %21, align 4
  %22 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 19
  %f6.v4.min_realized = load i32, ptr %22, align 4
  %23 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 20
  %f7.stride.1 = load i32, ptr %23, align 4
  %24 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 21
  %f7.v3.extent_realized.s = load i32, ptr %24, align 4
  %25 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 22
  %f7.v3.min_realized = load i32, ptr %25, align 4
  %26 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 23
  %f7.v4.min_realized = load i32, ptr %26, align 4
  %27 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 24
  %f72.v3.extent_realized.s = load i32, ptr %27, align 4
  %28 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 25
  %f72.v3.min_realized = load i32, ptr %28, align 4
  %29 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 26
  %f72.v4.min_realized = load i32, ptr %29, align 4
  %30 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 27
  %f73.v3.extent_realized.s = load i32, ptr %30, align 4
  %31 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 28
  %f73.v3.min_realized = load i32, ptr %31, align 4
  %32 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 29
  %f73.v4.min_realized = load i32, ptr %32, align 4
  %33 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 30
  %f74.v3.extent_realized.s = load i32, ptr %33, align 4
  %34 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 31
  %f74.v3.min_realized = load i32, ptr %34, align 4
  %35 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 32
  %f74.v4.min_realized = load i32, ptr %35, align 4
  %36 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 33
  %f75.v3.extent_realized.s = load i32, ptr %36, align 4
  %37 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 34
  %f75.v3.min_realized = load i32, ptr %37, align 4
  %38 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 35
  %f75.v4.min_realized = load i32, ptr %38, align 4
  %39 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 36
  %f8.stride.2 = load i32, ptr %39, align 4
  %40 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 37
  %f8.v3.extent_realized.s = load i32, ptr %40, align 4
  %41 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 38
  %f8.v3.min_realized = load i32, ptr %41, align 4
  %42 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 39
  %f8.v4.min_realized = load i32, ptr %42, align 4
  %43 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 40
  %input.extent.0 = load i32, ptr %43, align 4
  %44 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 41
  %input.extent.1 = load i32, ptr %44, align 4
  %45 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 42
  %input.extent.2 = load i32, ptr %45, align 4
  %46 = sext i32 %input.extent.2 to i64
  %47 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 43
  %input.min.0 = load i32, ptr %47, align 4
  %48 = sext i32 %input.min.0 to i64
  %49 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 44
  %b1148 = load i32, ptr %49, align 4
  %50 = sext i32 %b1148 to i64
  %51 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 45
  %b1146 = load i32, ptr %51, align 4
  %b1037 = sext i32 %b1146 to i64
  %52 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 46
  %input.stride.1 = load i32, ptr %52, align 4
  %53 = sext i32 %input.stride.1 to i64
  %54 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 47
  %input.stride.2 = load i32, ptr %54, align 4
  %55 = sext i32 %input.stride.2 to i64
  %56 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 48
  %levels = load i32, ptr %56, align 4
  %57 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 49
  %local_laplacian.extent.0 = load i32, ptr %57, align 4
  %58 = sext i32 %local_laplacian.extent.0 to i64
  %59 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 50
  %local_laplacian.extent.1 = load i32, ptr %59, align 4
  %60 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 51
  %local_laplacian.extent.2 = load i32, ptr %60, align 4
  %61 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 52
  %local_laplacian.min.0 = load i32, ptr %61, align 4
  %62 = sext i32 %local_laplacian.min.0 to i64
  %63 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 53
  %a1120 = load i32, ptr %63, align 4
  %64 = sext i32 %a1120 to i64
  %65 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 54
  %local_laplacian.min.1 = load i32, ptr %65, align 4
  %66 = sext i32 %local_laplacian.min.1 to i64
  %67 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 55
  %local_laplacian.min.1.required = load i32, ptr %67, align 4
  %68 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 56
  %b1028 = load i32, ptr %68, align 4
  %69 = sext i32 %b1028 to i64
  %70 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 57
  %local_laplacian.s0.v4.v264.epilogue = load i32, ptr %70, align 4
  %71 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 58
  %local_laplacian.s0.v4.v264.prologue = load i32, ptr %71, align 4
  %72 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 59
  %local_laplacian.stride.1 = load i32, ptr %72, align 4
  %73 = sext i32 %local_laplacian.stride.1 to i64
  %74 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 60
  %local_laplacian.stride.2 = load i32, ptr %74, align 4
  %75 = sext i32 %local_laplacian.stride.2 to i64
  %76 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 61
  %f0.host = load ptr, ptr %76, align 8
  %77 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 63
  %f130.host = load ptr, ptr %77, align 8
  %78 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 65
  %f2.host = load ptr, ptr %78, align 8
  %79 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 67
  %f4.host = load ptr, ptr %79, align 8
  %80 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 69
  %f5.host = load ptr, ptr %80, align 8
  %81 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 71
  %f6.host = load ptr, ptr %81, align 8
  %82 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 73
  %f7.host = load ptr, ptr %82, align 8
  %83 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 75
  %f72.host = load ptr, ptr %83, align 8
  %84 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 77
  %f73.host = load ptr, ptr %84, align 8
  %85 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 79
  %f74.host = load ptr, ptr %85, align 8
  %86 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 81
  %f75.host = load ptr, ptr %86, align 8
  %87 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 83
  %f8.host = load ptr, ptr %87, align 8
  %88 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 85
  %input.host = load ptr, ptr %88, align 8
  %89 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 87
  %local_laplacian.host = load ptr, ptr %89, align 8
  %90 = icmp sgt i32 %local_laplacian.s0.v4.v264.epilogue, %local_laplacian.s0.v4.v264
  %91 = icmp sle i32 %local_laplacian.s0.v4.v264.prologue, %local_laplacian.s0.v4.v264
  %92 = and i1 %90, %91
  %93 = shl nsw i32 %local_laplacian.s0.v4.v264, 6
  %a782 = add nsw i32 %local_laplacian.min.1, %93
  %94 = add i32 %local_laplacian.extent.1, -64
  %b784 = add i32 %94, %local_laplacian.min.1
  %local_laplacian.s0.v4.v4.base = tail call i32 @llvm.smin.i32(i32 %b784, i32 %a782)
  %a784 = add nsw i32 %a1120, -14
  %95 = add nsw i32 %local_laplacian.min.0, %local_laplacian.extent.0
  %b786 = add nsw i32 %95, -43
  %96 = tail call i32 @llvm.smin.i32(i32 %b786, i32 %a784)
  %97 = ashr i32 %96, 4
  %a783 = add nsw i32 %97, -1
  %a785 = add nsw i32 %a1120, -30
  %b787 = add nsw i32 %95, -83
  %98 = tail call i32 @llvm.smin.i32(i32 %b787, i32 %a785)
  %b785 = ashr i32 %98, 4
  %.not167 = icmp slt i32 %b785, %97
  %f129.v3.min_realized = select i1 %.not167, i32 %b785, i32 %a783
  %99 = ashr i32 %a784, 3
  %100 = add nsw i32 %95, 13
  %101 = ashr i32 %100, 3
  %102 = sub nsw i32 %101, %99
  %103 = and i32 %102, -8
  %a790 = add nsw i32 %103, %99
  %b792 = ashr i32 %b786, 3
  %104 = tail call i32 @llvm.smin.i32(i32 %b792, i32 %a790)
  %105 = add nsw i32 %104, 9
  %a789 = ashr i32 %105, 1
  %106 = ashr i32 %a785, 4
  %107 = add nsw i32 %95, 29
  %108 = ashr i32 %107, 4
  %109 = sub nsw i32 %108, %106
  %110 = and i32 %109, -8
  %a791 = add nsw i32 %110, %106
  %b793 = ashr i32 %b787, 4
  %111 = tail call i32 @llvm.smin.i32(i32 %b793, i32 %a791)
  %b791 = add nsw i32 %111, 7
  %112 = tail call i32 @llvm.smax.i32(i32 %a789, i32 %b791)
  %f129.v3.extent_realized.s = sub nsw i32 %112, %f129.v3.min_realized
  %113 = add nsw i32 %local_laplacian.s0.v4.v4.base, 2
  %t3087 = and i32 %113, 15
  %114 = add nuw nsw i32 %t3087, 139
  %115 = lshr i32 %114, 4
  %116 = zext i32 %115 to i64
  %117 = add nsw i32 %f129.v3.extent_realized.s, 1
  %118 = zext i32 %117 to i64
  %119 = shl nuw nsw i64 %118, 2
  %120 = mul nuw nsw i64 %119, %116
  %121 = icmp ult i64 %120, 2147483648
  br i1 %92, label %true_bb, label %false_bb

true_bb:                                          ; preds = %entry
  %122 = ashr i32 %102, 3
  %123 = ashr i32 %109, 3
  br i1 %121, label %"assert succeeded", label %"assert failed", !prof !5

false_bb:                                         ; preds = %entry
  %124 = lshr i32 %102, 3
  %125 = lshr i32 %109, 3
  br i1 %121, label %"assert succeeded113", label %"assert failed112", !prof !5

"assert failed":                                  ; preds = %true_bb
  %126 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %120, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded":                               ; preds = %true_bb
  %127 = add nuw nsw i64 %120, 4
  %128 = tail call ptr @halide_malloc(ptr %__user_context, i64 %127)
  %.not97 = icmp eq ptr %128, null
  br i1 %.not97, label %"assert failed1", label %"assert succeeded2", !prof !4

destructor_block.thread:                          ; preds = %if.then.i256, %"assert failed73", %"assert failed17", %"assert failed15", %"assert failed13", %"assert failed11", %"assert failed9", %"assert failed7", %"assert failed5", %"assert failed3", %"assert failed1", %"assert failed", %if.then.i271, %"assert failed137", %"assert failed135", %"assert failed129", %"assert failed127", %"assert failed121", %"assert failed119", %"assert failed114", %"assert failed112"
  %.029.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ %10020, %"assert failed135" ], [ %10020, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i256 ]
  %.028.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ %9981, %"assert failed127" ], [ %9981, %"assert failed129" ], [ %9981, %"assert failed135" ], [ %9981, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i256 ]
  %.027.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ %9958, %"assert failed119" ], [ %9958, %"assert failed121" ], [ %9958, %"assert failed127" ], [ %9958, %"assert failed129" ], [ %9958, %"assert failed135" ], [ %9958, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i256 ]
  %.024.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ %222, %"assert failed15" ], [ %222, %"assert failed17" ], [ %222, %"assert failed73" ], [ null, %if.then.i256 ]
  %.023.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ %193, %"assert failed11" ], [ %193, %"assert failed13" ], [ %193, %"assert failed15" ], [ %193, %"assert failed17" ], [ %193, %"assert failed73" ], [ null, %if.then.i256 ]
  %.022.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ %154, %"assert failed7" ], [ %154, %"assert failed9" ], [ %154, %"assert failed11" ], [ %154, %"assert failed13" ], [ %154, %"assert failed15" ], [ %154, %"assert failed17" ], [ %154, %"assert failed73" ], [ null, %if.then.i256 ]
  %.0.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ %128, %"assert failed3" ], [ %128, %"assert failed5" ], [ %128, %"assert failed7" ], [ %128, %"assert failed9" ], [ %128, %"assert failed11" ], [ %128, %"assert failed13" ], [ %128, %"assert failed15" ], [ %128, %"assert failed17" ], [ %128, %"assert failed73" ], [ null, %if.then.i256 ]
  %.ph = phi i32 [ %9956, %"assert failed112" ], [ %9959, %"assert failed114" ], [ %9979, %"assert failed119" ], [ %9982, %"assert failed121" ], [ %10018, %"assert failed127" ], [ %10021, %"assert failed129" ], [ %10047, %"assert failed135" ], [ %10050, %"assert failed137" ], [ 0, %if.then.i271 ], [ %126, %"assert failed" ], [ %132, %"assert failed1" ], [ %152, %"assert failed3" ], [ %155, %"assert failed5" ], [ %191, %"assert failed7" ], [ %194, %"assert failed9" ], [ %220, %"assert failed11" ], [ %223, %"assert failed13" ], [ %2764, %"assert failed15" ], [ %2767, %"assert failed17" ], [ %8526, %"assert failed73" ], [ 0, %if.then.i256 ]
  %.not185 = icmp eq i32 %.ph, 0
  br label %call_destructor.exit206

destructor_block:                                 ; preds = %"assert failed186", %"assert failed184"
  %129 = phi i32 [ %12663, %"assert failed186" ], [ %12661, %"assert failed184" ]
  %.not = icmp eq i32 %129, 0
  br i1 %.not, label %call_destructor.exit251, label %if.then.i205

if.then.i205:                                     ; preds = %destructor_block
  tail call void @halide_free(ptr %__user_context, ptr nonnull %10049) #7
  br label %call_destructor.exit206

call_destructor.exit206:                          ; preds = %destructor_block.thread, %if.then.i205
  %.not195 = phi i1 [ %.not185, %destructor_block.thread ], [ false, %if.then.i205 ]
  %130 = phi i32 [ %.ph, %destructor_block.thread ], [ %129, %if.then.i205 ]
  %.0194 = phi ptr [ %.0.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.022193 = phi ptr [ %.022.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.023192 = phi ptr [ %.023.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.024191 = phi ptr [ %.024.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.027190 = phi ptr [ %.027.ph, %destructor_block.thread ], [ %9958, %if.then.i205 ]
  %.028189 = phi ptr [ %.028.ph, %destructor_block.thread ], [ %9981, %if.then.i205 ]
  %.029188 = phi ptr [ %.029.ph, %destructor_block.thread ], [ %10020, %if.then.i205 ]
  %tobool.i207 = icmp eq ptr %.029188, null
  %brmerge.i209 = or i1 %.not195, %tobool.i207
  br i1 %brmerge.i209, label %call_destructor.exit211, label %if.then.i210

if.then.i210:                                     ; preds = %call_destructor.exit206
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.029188) #7
  br label %call_destructor.exit211

call_destructor.exit211:                          ; preds = %if.then.i210, %call_destructor.exit206
  %tobool.i212 = icmp eq ptr %.028189, null
  %brmerge.i214 = or i1 %.not195, %tobool.i212
  br i1 %brmerge.i214, label %call_destructor.exit216, label %if.then.i215

if.then.i215:                                     ; preds = %call_destructor.exit211
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.028189) #7
  br label %call_destructor.exit216

call_destructor.exit216:                          ; preds = %if.then.i215, %call_destructor.exit211
  %tobool.i217 = icmp eq ptr %.027190, null
  %brmerge.i219 = or i1 %.not195, %tobool.i217
  br i1 %brmerge.i219, label %call_destructor.exit231, label %if.then.i220

if.then.i220:                                     ; preds = %call_destructor.exit216
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.027190) #7
  br label %call_destructor.exit231

call_destructor.exit231:                          ; preds = %if.then.i220, %call_destructor.exit216
  %tobool.i232 = icmp eq ptr %.024191, null
  %brmerge.i234 = or i1 %.not195, %tobool.i232
  br i1 %brmerge.i234, label %call_destructor.exit236, label %if.then.i235

if.then.i235:                                     ; preds = %call_destructor.exit231
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.024191) #7
  br label %call_destructor.exit236

call_destructor.exit236:                          ; preds = %if.then.i235, %call_destructor.exit231
  %tobool.i237 = icmp eq ptr %.023192, null
  %brmerge.i239 = or i1 %.not195, %tobool.i237
  br i1 %brmerge.i239, label %call_destructor.exit241, label %if.then.i240

if.then.i240:                                     ; preds = %call_destructor.exit236
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.023192) #7
  br label %call_destructor.exit241

call_destructor.exit241:                          ; preds = %if.then.i240, %call_destructor.exit236
  %tobool.i242 = icmp eq ptr %.022193, null
  %brmerge.i244 = or i1 %.not195, %tobool.i242
  br i1 %brmerge.i244, label %call_destructor.exit246, label %if.then.i245

if.then.i245:                                     ; preds = %call_destructor.exit241
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.022193) #7
  br label %call_destructor.exit246

call_destructor.exit246:                          ; preds = %if.then.i245, %call_destructor.exit241
  %tobool.i247 = icmp eq ptr %.0194, null
  %brmerge.i249 = or i1 %.not195, %tobool.i247
  br i1 %brmerge.i249, label %call_destructor.exit251, label %if.then.i250

if.then.i250:                                     ; preds = %call_destructor.exit246
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.0194) #7
  br label %call_destructor.exit251

call_destructor.exit251:                          ; preds = %destructor_block, %if.then.i250, %call_destructor.exit246
  %131 = phi i32 [ %130, %if.then.i250 ], [ %130, %call_destructor.exit246 ], [ 0, %destructor_block ]
  ret i32 %131

"assert failed1":                                 ; preds = %"assert succeeded"
  %132 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded2":                              ; preds = %"assert succeeded"
  %a793 = add nsw i32 %a1120, -6
  %b795 = add nsw i32 %95, -23
  %133 = tail call i32 @llvm.smin.i32(i32 %b795, i32 %a793)
  %134 = ashr i32 %133, 3
  %a792 = add nsw i32 %134, -1
  %b794 = ashr i32 %96, 3
  %.not168 = icmp slt i32 %b794, %134
  %f128.v3.min_realized = select i1 %.not168, i32 %b794, i32 %a792
  %135 = ashr i32 %a793, 2
  %136 = add nsw i32 %95, 5
  %137 = ashr i32 %136, 2
  %138 = sub nsw i32 %137, %135
  %139 = ashr i32 %138, 3
  %140 = and i32 %138, -8
  %a799 = add nsw i32 %140, %135
  %b801 = ashr i32 %b795, 2
  %141 = tail call i32 @llvm.smin.i32(i32 %b801, i32 %a799)
  %142 = add nsw i32 %141, 9
  %a798 = ashr i32 %142, 1
  %b800 = add nsw i32 %104, 7
  %143 = tail call i32 @llvm.smax.i32(i32 %a798, i32 %b800)
  %f128.v3.extent_realized.s = sub nsw i32 %143, %f128.v3.min_realized
  %t3088 = and i32 %113, 7
  %144 = add nuw nsw i32 %t3088, 99
  %145 = lshr i32 %144, 3
  %146 = zext i32 %145 to i64
  %147 = add nsw i32 %f128.v3.extent_realized.s, 1
  %148 = zext i32 %147 to i64
  %149 = shl nuw nsw i64 %148, 2
  %150 = mul nuw nsw i64 %149, %146
  %151 = icmp ult i64 %150, 2147483648
  br i1 %151, label %"assert succeeded4", label %"assert failed3", !prof !5

"assert failed3":                                 ; preds = %"assert succeeded2"
  %152 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %150, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded4":                              ; preds = %"assert succeeded2"
  %153 = add nuw nsw i64 %150, 4
  %154 = tail call ptr @halide_malloc(ptr %__user_context, i64 %153)
  %.not98 = icmp eq ptr %154, null
  br i1 %.not98, label %"assert failed5", label %"assert succeeded6", !prof !4

"assert failed5":                                 ; preds = %"assert succeeded4"
  %155 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded6":                              ; preds = %"assert succeeded4"
  %156 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a802 = add nsw i32 %156, -1
  %157 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b804 = ashr i32 %157, 1
  %.not169 = icmp slt i32 %b804, %156
  %158 = select i1 %.not169, i32 %b804, i32 %a802
  %159 = ashr i32 %158, 1
  %a801 = add nsw i32 %159, -1
  %160 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b803 = ashr i32 %160, 2
  %.not170 = icmp slt i32 %b803, %159
  %f127.v4.min_realized = select i1 %.not170, i32 %b803, i32 %a801
  %161 = ashr i32 %a1120, 1
  %a804 = add nsw i32 %161, -1
  %162 = add nsw i32 %95, -13
  %b806 = ashr i32 %162, 1
  %.not171 = icmp slt i32 %b806, %161
  %163 = select i1 %.not171, i32 %b806, i32 %a804
  %164 = ashr i32 %163, 1
  %a803 = add nsw i32 %164, -1
  %b805 = ashr i32 %133, 2
  %.not172 = icmp slt i32 %b805, %164
  %f127.v3.min_realized = select i1 %.not172, i32 %b805, i32 %a803
  %165 = add nsw i32 %95, 1
  %166 = ashr i32 %165, 1
  %167 = sub nsw i32 %166, %161
  %168 = add nsw i32 %167, 1
  %169 = and i32 %168, -8
  %170 = add nsw i32 %169, %161
  %a810 = add nsw i32 %170, -1
  %.not173 = icmp slt i32 %b806, %170
  %171 = select i1 %.not173, i32 %b806, i32 %a810
  %172 = add nsw i32 %171, 9
  %a809 = ashr i32 %172, 1
  %b811 = add nsw i32 %141, 7
  %173 = tail call i32 @llvm.smax.i32(i32 %a809, i32 %b811)
  %f127.v3.extent_realized.s = sub nsw i32 %173, %f127.v3.min_realized
  %174 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %175 = ashr i32 %174, 2
  %t3089 = add nsw i32 %175, 1
  %176 = sub nsw i32 %t3089, %f127.v4.min_realized
  %177 = zext i32 %176 to i64
  %178 = add nsw i32 %f127.v3.extent_realized.s, 1
  %179 = zext i32 %178 to i64
  %180 = shl nuw nsw i64 %179, 2
  %181 = mul i64 %180, %177
  %182 = icmp ult i64 %181, 2147483648
  %183 = and i64 %180, 4294967292
  %184 = mul nuw i64 %183, %177
  %185 = lshr i64 %184, 32
  %186 = lshr i64 %179, 30
  %187 = mul nuw nsw i64 %186, %177
  %188 = add nuw nsw i64 %185, %187
  %189 = icmp ult i64 %188, 4294967296
  %190 = and i1 %182, %189
  br i1 %190, label %"assert succeeded8", label %"assert failed7", !prof !5

"assert failed7":                                 ; preds = %"assert succeeded6"
  %191 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %181, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded8":                              ; preds = %"assert succeeded6"
  %192 = add nuw nsw i64 %181, 4
  %193 = tail call ptr @halide_malloc(ptr %__user_context, i64 %192)
  %.not198 = icmp eq ptr %193, null
  br i1 %.not198, label %"assert failed9", label %"assert succeeded10", !prof !4

"assert failed9":                                 ; preds = %"assert succeeded8"
  %194 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded10":                             ; preds = %"assert succeeded8"
  %b816 = add nsw i32 %95, -8
  %195 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1120)
  %196 = ashr i32 %195, 1
  %a813 = add nsw i32 %196, -1
  %.not174 = icmp slt i32 %163, %196
  %f126.v3.min_realized = select i1 %.not174, i32 %163, i32 %a813
  %197 = sub nsw i32 %95, %a1120
  %198 = add nsw i32 %197, -1
  %199 = and i32 %198, -8
  %a820 = add nsw i32 %199, %a1120
  %200 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a820)
  %201 = add nsw i32 %200, 9
  %a819 = ashr i32 %201, 1
  %b821 = add nsw i32 %171, 7
  %202 = tail call i32 @llvm.smax.i32(i32 %a819, i32 %b821)
  %f126.v3.extent_realized.s = sub nsw i32 %202, %f126.v3.min_realized
  %203 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %204 = ashr i32 %203, 1
  %t3090 = add nsw i32 %204, 1
  %205 = sub i32 %t3090, %158
  %206 = zext i32 %205 to i64
  %207 = add nsw i32 %f126.v3.extent_realized.s, 1
  %208 = zext i32 %207 to i64
  %209 = shl nuw nsw i64 %208, 2
  %210 = mul i64 %209, %206
  %211 = icmp ult i64 %210, 2147483648
  %212 = and i64 %209, 4294967292
  %213 = mul nuw i64 %212, %206
  %214 = lshr i64 %213, 32
  %215 = lshr i64 %208, 30
  %216 = mul nuw nsw i64 %215, %206
  %217 = add nuw nsw i64 %214, %216
  %218 = icmp ult i64 %217, 4294967296
  %219 = and i1 %211, %218
  br i1 %219, label %"assert succeeded12", label %"assert failed11", !prof !5

"assert failed11":                                ; preds = %"assert succeeded10"
  %220 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %210, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded12":                             ; preds = %"assert succeeded10"
  %221 = add nuw nsw i64 %210, 4
  %222 = tail call ptr @halide_malloc(ptr %__user_context, i64 %221)
  %.not199 = icmp eq ptr %222, null
  br i1 %.not199, label %"assert failed13", label %"produce f129", !prof !4

"assert failed13":                                ; preds = %"assert succeeded12"
  %223 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f129":                                   ; preds = %"assert succeeded12"
  %224 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %225 = ashr i32 %224, 4
  %226 = add nsw i32 %123, 1
  %227 = icmp sgt i32 %109, -1
  %228 = add i32 %f75.v3.extent_realized.s, 1
  %229 = add nsw i32 %levels, -1
  %230 = sitofp i32 %229 to float
  %231 = insertelement <4 x float> undef, float %230, i64 0
  %232 = shufflevector <4 x float> %231, <4 x float> undef, <4 x i32> zeroinitializer
  %233 = add nsw i32 %levels, -2
  %234 = insertelement <4 x i32> undef, i32 %233, i64 0
  %b825 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> zeroinitializer
  %235 = add nsw i32 %f130.v3.extent_realized.s, 1
  %236 = add nsw i32 %local_laplacian.min.1.required, -62
  %237 = ashr i32 %236, 5
  %238 = xor i32 %237, -1
  %239 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %240 = insertelement <4 x i32> undef, i32 %239, i64 0
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> zeroinitializer
  %242 = add nsw i32 %f8.v3.extent_realized.s, 1
  %243 = xor i32 %f8.v4.min_realized, -1
  %244 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> zeroinitializer
  %246 = add nsw i32 %f7.v3.extent_realized.s, 1
  %247 = insertelement <4 x i32> undef, i32 %246, i64 0
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = sext i32 %f129.v3.extent_realized.s to i64
  %250 = add nsw i64 %249, 1
  %251 = sext i32 %225 to i64
  %narrow275 = sub nsw i32 0, %f129.v3.min_realized
  %.neg218 = sext i32 %narrow275 to i64
  br i1 %227, label %"for f129.s0.v4.us.preheader", label %"produce f128", !prof !5

"for f129.s0.v4.us.preheader":                    ; preds = %"produce f129"
  %252 = add nuw nsw i32 %t3087, 76
  %253 = lshr i32 %252, 4
  %254 = add nsw i32 %253, %225
  %sext311 = sext i32 %254 to i64
  br label %"for f129.s0.v4.us"

"for f129.s0.v4.us":                              ; preds = %"for f129.s0.v4.us.preheader", %"end for f129.s0.v3.v3.loopexit.us"
  %indvars.iv309 = phi i64 [ %251, %"for f129.s0.v4.us.preheader" ], [ %indvars.iv.next310, %"end for f129.s0.v3.v3.loopexit.us" ]
  %indvars312 = trunc i64 %indvars.iv309 to i32
  %255 = shl i32 %indvars312, 1
  %256 = and i32 %255, 2
  %257 = ashr i32 %indvars312, 1
  %t2241.us = add nsw i32 %256, %257
  %258 = trunc i64 %indvars.iv309 to i32
  %259 = sub i32 %258, %f75.v4.min_realized
  %260 = mul i32 %259, %228
  %261 = sub i32 %260, %f75.v3.min_realized
  %262 = add nsw i32 %t2241.us, %238
  %t2248.us = mul nsw i32 %262, %235
  %263 = sub nsw i32 %257, %237
  %t2250.us = mul nsw i32 %263, %235
  %264 = add i32 %t2241.us, %243
  %t2255.us = mul nsw i32 %264, %242
  %265 = sub nsw i32 %257, %f8.v4.min_realized
  %t2260.us = mul nsw i32 %265, %242
  %266 = sext i32 %t2250.us to i64
  %267 = add nsw i64 %266, -1
  %268 = sext i32 %t2248.us to i64
  %269 = add nsw i64 %268, -1
  %270 = sub nsw i64 %indvars.iv309, %251
  %271 = mul nsw i64 %270, %250
  %272 = add i64 %271, %.neg218
  %273 = trunc i64 %indvars.iv309 to i32
  %274 = sub i32 %273, %f7.v4.min_realized
  %275 = mul i32 %274, %f7.stride.1
  br label %"for f129.s0.v3.v3.us"

"for f129.s0.v3.v3.us":                           ; preds = %"for f129.s0.v4.us", %"for f129.s0.v3.v3.us"
  %lsr.iv422.us = phi i32 [ %lsr.iv.next423.us, %"for f129.s0.v3.v3.us" ], [ 0, %"for f129.s0.v4.us" ]
  %lsr.iv420.us = phi i32 [ %lsr.iv.next421.us, %"for f129.s0.v3.v3.us" ], [ %226, %"for f129.s0.v4.us" ]
  %276 = add i32 %lsr.iv422.us, %106
  %f129.s0.v3.v363.base.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %276)
  %277 = shl i32 %f129.s0.v3.v363.base.us, 1
  %278 = and i32 %277, 2
  %279 = ashr i32 %f129.s0.v3.v363.base.us, 1
  %t2242.us = add nsw i32 %278, %279
  %t2243.us = add i32 %261, %f129.s0.v3.v363.base.us
  %280 = sext i32 %t2243.us to i64
  %281 = getelementptr inbounds float, ptr %f75.host, i64 %280
  %282 = load <4 x float>, ptr %281, align 4, !tbaa !13
  %283 = add nsw i64 %280, 4
  %284 = getelementptr inbounds float, ptr %f75.host, i64 %283
  %285 = load <4 x float>, ptr %284, align 4, !tbaa !13
  %286 = shufflevector <4 x float> %282, <4 x float> %285, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2244.us = fmul <4 x float> %232, %286
  %a823.us = fptosi <4 x float> %t2244.us to <4 x i32>
  %a826.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a823.us)
  %287 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a826.us, <4 x i32> zeroinitializer)
  %288 = sitofp <4 x i32> %287 to <4 x float>
  %t2246.us = fsub <4 x float> %t2244.us, %288
  %289 = sub nsw i32 %f129.s0.v3.v363.base.us, %f7.v3.min_realized
  %t2251.us = add nsw i32 %289, %275
  %t2253.us = sub nsw <4 x i32> %287, %241
  %t2257.us = mul nsw <4 x i32> %t2253.us, %245
  %290 = add nsw <4 x i32> %t2253.us, <i32 1, i32 1, i32 1, i32 1>
  %t2263.us = mul nsw <4 x i32> %290, %245
  %291 = add nsw i32 %f129.s0.v3.v363.base.us, 1
  %292 = shl i32 %291, 1
  %293 = and i32 %292, 2
  %294 = ashr i32 %291, 1
  %t2264.us = add nsw i32 %293, %294
  %295 = shufflevector <4 x float> %282, <4 x float> %285, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2265.us = fmul <4 x float> %232, %295
  %a827.us = fptosi <4 x float> %t2265.us to <4 x i32>
  %a830.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a827.us)
  %296 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a830.us, <4 x i32> zeroinitializer)
  %297 = sitofp <4 x i32> %296 to <4 x float>
  %t2267.us = fsub <4 x float> %t2265.us, %297
  %t2270.us = sub nsw <4 x i32> %296, %241
  %t2273.us = mul nsw <4 x i32> %t2270.us, %245
  %298 = add nsw <4 x i32> %t2270.us, <i32 1, i32 1, i32 1, i32 1>
  %t2278.us = mul nsw <4 x i32> %298, %245
  %299 = sub nsw i32 %279, %f8.v3.min_realized
  %300 = add nsw i32 %299, %t2260.us
  %301 = insertelement <4 x i32> undef, i32 %300, i64 0
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> zeroinitializer
  %303 = add nsw <4 x i32> %302, <i32 0, i32 1, i32 2, i32 3>
  %304 = add nsw <4 x i32> %t2263.us, %303
  %305 = extractelement <4 x i32> %304, i64 0
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds float, ptr %f8.host, i64 %306
  %308 = load float, ptr %307, align 4, !tbaa !36
  %309 = insertelement <4 x float> undef, float %308, i64 0
  %310 = extractelement <4 x i32> %304, i64 1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds float, ptr %f8.host, i64 %311
  %313 = load float, ptr %312, align 4, !tbaa !36
  %314 = insertelement <4 x float> %309, float %313, i64 1
  %315 = extractelement <4 x i32> %304, i64 2
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds float, ptr %f8.host, i64 %316
  %318 = load float, ptr %317, align 4, !tbaa !36
  %319 = insertelement <4 x float> %314, float %318, i64 2
  %320 = extractelement <4 x i32> %304, i64 3
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds float, ptr %f8.host, i64 %321
  %323 = load float, ptr %322, align 4, !tbaa !36
  %324 = insertelement <4 x float> %319, float %323, i64 3
  %325 = fmul <4 x float> %324, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %326 = sub nsw i32 %t2242.us, %f8.v3.min_realized
  %327 = add nsw i32 %326, %t2260.us
  %328 = insertelement <4 x i32> undef, i32 %327, i64 0
  %329 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> zeroinitializer
  %330 = add <4 x i32> %329, <i32 -1, i32 0, i32 1, i32 2>
  %331 = add <4 x i32> %330, %t2263.us
  %332 = extractelement <4 x i32> %331, i64 0
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds float, ptr %f8.host, i64 %333
  %335 = load float, ptr %334, align 4, !tbaa !36
  %336 = insertelement <4 x float> undef, float %335, i64 0
  %337 = extractelement <4 x i32> %331, i64 1
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds float, ptr %f8.host, i64 %338
  %340 = load float, ptr %339, align 4, !tbaa !36
  %341 = insertelement <4 x float> %336, float %340, i64 1
  %342 = extractelement <4 x i32> %331, i64 2
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds float, ptr %f8.host, i64 %343
  %345 = load float, ptr %344, align 4, !tbaa !36
  %346 = insertelement <4 x float> %341, float %345, i64 2
  %347 = extractelement <4 x i32> %331, i64 3
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds float, ptr %f8.host, i64 %348
  %350 = load float, ptr %349, align 4, !tbaa !36
  %351 = insertelement <4 x float> %346, float %350, i64 3
  %352 = fmul <4 x float> %351, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %353 = fadd <4 x float> %325, %352
  %354 = fmul <4 x float> %353, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %355 = add nsw i32 %299, %t2255.us
  %356 = insertelement <4 x i32> undef, i32 %355, i64 0
  %357 = shufflevector <4 x i32> %356, <4 x i32> undef, <4 x i32> zeroinitializer
  %358 = add nsw <4 x i32> %357, <i32 0, i32 1, i32 2, i32 3>
  %359 = add nsw <4 x i32> %t2263.us, %358
  %360 = extractelement <4 x i32> %359, i64 0
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds float, ptr %f8.host, i64 %361
  %363 = load float, ptr %362, align 4, !tbaa !36
  %364 = insertelement <4 x float> undef, float %363, i64 0
  %365 = extractelement <4 x i32> %359, i64 1
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds float, ptr %f8.host, i64 %366
  %368 = load float, ptr %367, align 4, !tbaa !36
  %369 = insertelement <4 x float> %364, float %368, i64 1
  %370 = extractelement <4 x i32> %359, i64 2
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds float, ptr %f8.host, i64 %371
  %373 = load float, ptr %372, align 4, !tbaa !36
  %374 = insertelement <4 x float> %369, float %373, i64 2
  %375 = extractelement <4 x i32> %359, i64 3
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds float, ptr %f8.host, i64 %376
  %378 = load float, ptr %377, align 4, !tbaa !36
  %379 = insertelement <4 x float> %374, float %378, i64 3
  %380 = fmul <4 x float> %379, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %381 = add nsw i32 %326, %t2255.us
  %382 = insertelement <4 x i32> undef, i32 %381, i64 0
  %383 = shufflevector <4 x i32> %382, <4 x i32> undef, <4 x i32> zeroinitializer
  %384 = add <4 x i32> %383, <i32 -1, i32 0, i32 1, i32 2>
  %385 = add <4 x i32> %384, %t2263.us
  %386 = extractelement <4 x i32> %385, i64 0
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds float, ptr %f8.host, i64 %387
  %389 = load float, ptr %388, align 4, !tbaa !36
  %390 = insertelement <4 x float> undef, float %389, i64 0
  %391 = extractelement <4 x i32> %385, i64 1
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds float, ptr %f8.host, i64 %392
  %394 = load float, ptr %393, align 4, !tbaa !36
  %395 = insertelement <4 x float> %390, float %394, i64 1
  %396 = extractelement <4 x i32> %385, i64 2
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds float, ptr %f8.host, i64 %397
  %399 = load float, ptr %398, align 4, !tbaa !36
  %400 = insertelement <4 x float> %395, float %399, i64 2
  %401 = extractelement <4 x i32> %385, i64 3
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds float, ptr %f8.host, i64 %402
  %404 = load float, ptr %403, align 4, !tbaa !36
  %405 = insertelement <4 x float> %400, float %404, i64 3
  %406 = fmul <4 x float> %405, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %407 = fadd <4 x float> %380, %406
  %408 = fmul <4 x float> %407, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %409 = fadd <4 x float> %354, %408
  %410 = mul nsw <4 x i32> %290, %248
  %411 = insertelement <4 x i32> undef, i32 %t2251.us, i64 0
  %412 = shufflevector <4 x i32> %411, <4 x i32> undef, <4 x i32> zeroinitializer
  %413 = add nsw <4 x i32> %412, <i32 0, i32 2, i32 4, i32 6>
  %414 = add nsw <4 x i32> %410, %413
  %415 = extractelement <4 x i32> %414, i64 0
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds float, ptr %f7.host, i64 %416
  %418 = load float, ptr %417, align 4, !tbaa !54
  %419 = insertelement <4 x float> undef, float %418, i64 0
  %420 = extractelement <4 x i32> %414, i64 1
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds float, ptr %f7.host, i64 %421
  %423 = load float, ptr %422, align 4, !tbaa !54
  %424 = insertelement <4 x float> %419, float %423, i64 1
  %425 = extractelement <4 x i32> %414, i64 2
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds float, ptr %f7.host, i64 %426
  %428 = load float, ptr %427, align 4, !tbaa !54
  %429 = insertelement <4 x float> %424, float %428, i64 2
  %430 = extractelement <4 x i32> %414, i64 3
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds float, ptr %f7.host, i64 %431
  %433 = load float, ptr %432, align 4, !tbaa !54
  %434 = insertelement <4 x float> %429, float %433, i64 3
  %435 = fsub <4 x float> %434, %409
  %436 = fmul <4 x float> %t2246.us, %435
  %437 = add nsw <4 x i32> %t2257.us, %303
  %438 = extractelement <4 x i32> %437, i64 0
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds float, ptr %f8.host, i64 %439
  %441 = load float, ptr %440, align 4, !tbaa !36
  %442 = insertelement <4 x float> undef, float %441, i64 0
  %443 = extractelement <4 x i32> %437, i64 1
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds float, ptr %f8.host, i64 %444
  %446 = load float, ptr %445, align 4, !tbaa !36
  %447 = insertelement <4 x float> %442, float %446, i64 1
  %448 = extractelement <4 x i32> %437, i64 2
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds float, ptr %f8.host, i64 %449
  %451 = load float, ptr %450, align 4, !tbaa !36
  %452 = insertelement <4 x float> %447, float %451, i64 2
  %453 = extractelement <4 x i32> %437, i64 3
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds float, ptr %f8.host, i64 %454
  %456 = load float, ptr %455, align 4, !tbaa !36
  %457 = insertelement <4 x float> %452, float %456, i64 3
  %458 = fmul <4 x float> %457, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %459 = add <4 x i32> %t2257.us, %329
  %460 = add <4 x i32> %459, <i32 -1, i32 0, i32 1, i32 2>
  %461 = extractelement <4 x i32> %460, i64 0
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds float, ptr %f8.host, i64 %462
  %464 = load float, ptr %463, align 4, !tbaa !36
  %465 = insertelement <4 x float> undef, float %464, i64 0
  %466 = extractelement <4 x i32> %460, i64 1
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds float, ptr %f8.host, i64 %467
  %469 = load float, ptr %468, align 4, !tbaa !36
  %470 = insertelement <4 x float> %465, float %469, i64 1
  %471 = extractelement <4 x i32> %460, i64 2
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds float, ptr %f8.host, i64 %472
  %474 = load float, ptr %473, align 4, !tbaa !36
  %475 = insertelement <4 x float> %470, float %474, i64 2
  %476 = extractelement <4 x i32> %460, i64 3
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds float, ptr %f8.host, i64 %477
  %479 = load float, ptr %478, align 4, !tbaa !36
  %480 = insertelement <4 x float> %475, float %479, i64 3
  %481 = fmul <4 x float> %480, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %482 = fadd <4 x float> %458, %481
  %483 = fmul <4 x float> %482, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %484 = add nsw <4 x i32> %t2257.us, %358
  %485 = extractelement <4 x i32> %484, i64 0
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds float, ptr %f8.host, i64 %486
  %488 = load float, ptr %487, align 4, !tbaa !36
  %489 = insertelement <4 x float> undef, float %488, i64 0
  %490 = extractelement <4 x i32> %484, i64 1
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds float, ptr %f8.host, i64 %491
  %493 = load float, ptr %492, align 4, !tbaa !36
  %494 = insertelement <4 x float> %489, float %493, i64 1
  %495 = extractelement <4 x i32> %484, i64 2
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds float, ptr %f8.host, i64 %496
  %498 = load float, ptr %497, align 4, !tbaa !36
  %499 = insertelement <4 x float> %494, float %498, i64 2
  %500 = extractelement <4 x i32> %484, i64 3
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds float, ptr %f8.host, i64 %501
  %503 = load float, ptr %502, align 4, !tbaa !36
  %504 = insertelement <4 x float> %499, float %503, i64 3
  %505 = fmul <4 x float> %504, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %506 = add <4 x i32> %t2257.us, %383
  %507 = add <4 x i32> %506, <i32 -1, i32 0, i32 1, i32 2>
  %508 = extractelement <4 x i32> %507, i64 0
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds float, ptr %f8.host, i64 %509
  %511 = load float, ptr %510, align 4, !tbaa !36
  %512 = insertelement <4 x float> undef, float %511, i64 0
  %513 = extractelement <4 x i32> %507, i64 1
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds float, ptr %f8.host, i64 %514
  %516 = load float, ptr %515, align 4, !tbaa !36
  %517 = insertelement <4 x float> %512, float %516, i64 1
  %518 = extractelement <4 x i32> %507, i64 2
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds float, ptr %f8.host, i64 %519
  %521 = load float, ptr %520, align 4, !tbaa !36
  %522 = insertelement <4 x float> %517, float %521, i64 2
  %523 = extractelement <4 x i32> %507, i64 3
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds float, ptr %f8.host, i64 %524
  %526 = load float, ptr %525, align 4, !tbaa !36
  %527 = insertelement <4 x float> %522, float %526, i64 3
  %528 = fmul <4 x float> %527, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %529 = fadd <4 x float> %505, %528
  %530 = fmul <4 x float> %529, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %531 = fadd <4 x float> %483, %530
  %532 = mul nsw <4 x i32> %t2253.us, %248
  %533 = add nsw <4 x i32> %532, %413
  %534 = extractelement <4 x i32> %533, i64 0
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds float, ptr %f7.host, i64 %535
  %537 = load float, ptr %536, align 4, !tbaa !54
  %538 = insertelement <4 x float> undef, float %537, i64 0
  %539 = extractelement <4 x i32> %533, i64 1
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds float, ptr %f7.host, i64 %540
  %542 = load float, ptr %541, align 4, !tbaa !54
  %543 = insertelement <4 x float> %538, float %542, i64 1
  %544 = extractelement <4 x i32> %533, i64 2
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds float, ptr %f7.host, i64 %545
  %547 = load float, ptr %546, align 4, !tbaa !54
  %548 = insertelement <4 x float> %543, float %547, i64 2
  %549 = extractelement <4 x i32> %533, i64 3
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds float, ptr %f7.host, i64 %550
  %552 = load float, ptr %551, align 4, !tbaa !54
  %553 = insertelement <4 x float> %548, float %552, i64 3
  %554 = fsub <4 x float> %553, %531
  %555 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2246.us
  %556 = fmul <4 x float> %555, %554
  %557 = fadd <4 x float> %436, %556
  %558 = sext i32 %279 to i64
  %559 = sub nsw i64 %558, %4
  %560 = add nsw i64 %559, %266
  %561 = getelementptr inbounds float, ptr %f130.host, i64 %560
  %562 = load <4 x float>, ptr %561, align 4, !tbaa !38
  %563 = fmul <4 x float> %562, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %564 = sext i32 %t2242.us to i64
  %565 = sub nsw i64 %564, %4
  %566 = add nsw i64 %267, %565
  %567 = getelementptr inbounds float, ptr %f130.host, i64 %566
  %568 = load <4 x float>, ptr %567, align 4, !tbaa !38
  %569 = fmul <4 x float> %568, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %570 = fadd <4 x float> %563, %569
  %571 = fmul <4 x float> %570, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %572 = add nsw i64 %559, %268
  %573 = getelementptr inbounds float, ptr %f130.host, i64 %572
  %574 = load <4 x float>, ptr %573, align 4, !tbaa !38
  %575 = fmul <4 x float> %574, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %576 = add nsw i64 %269, %565
  %577 = getelementptr inbounds float, ptr %f130.host, i64 %576
  %578 = load <4 x float>, ptr %577, align 4, !tbaa !38
  %579 = fmul <4 x float> %578, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %580 = fadd <4 x float> %575, %579
  %581 = fmul <4 x float> %580, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %582 = fadd <4 x float> %571, %581
  %583 = fadd <4 x float> %557, %582
  %584 = sub nsw i32 %294, %f8.v3.min_realized
  %585 = add nsw i32 %584, %t2260.us
  %586 = insertelement <4 x i32> undef, i32 %585, i64 0
  %587 = shufflevector <4 x i32> %586, <4 x i32> undef, <4 x i32> zeroinitializer
  %588 = add nsw <4 x i32> %587, <i32 0, i32 1, i32 2, i32 3>
  %589 = add nsw <4 x i32> %t2278.us, %588
  %590 = extractelement <4 x i32> %589, i64 0
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds float, ptr %f8.host, i64 %591
  %593 = load float, ptr %592, align 4, !tbaa !36
  %594 = insertelement <4 x float> undef, float %593, i64 0
  %595 = extractelement <4 x i32> %589, i64 1
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds float, ptr %f8.host, i64 %596
  %598 = load float, ptr %597, align 4, !tbaa !36
  %599 = insertelement <4 x float> %594, float %598, i64 1
  %600 = extractelement <4 x i32> %589, i64 2
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds float, ptr %f8.host, i64 %601
  %603 = load float, ptr %602, align 4, !tbaa !36
  %604 = insertelement <4 x float> %599, float %603, i64 2
  %605 = extractelement <4 x i32> %589, i64 3
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds float, ptr %f8.host, i64 %606
  %608 = load float, ptr %607, align 4, !tbaa !36
  %609 = insertelement <4 x float> %604, float %608, i64 3
  %610 = fmul <4 x float> %609, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %611 = sub nsw i32 %t2264.us, %f8.v3.min_realized
  %612 = add nsw i32 %611, %t2260.us
  %613 = insertelement <4 x i32> undef, i32 %612, i64 0
  %614 = shufflevector <4 x i32> %613, <4 x i32> undef, <4 x i32> zeroinitializer
  %615 = add nsw <4 x i32> %614, <i32 0, i32 1, i32 2, i32 3>
  %616 = add <4 x i32> %t2278.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %617 = add <4 x i32> %616, %615
  %618 = extractelement <4 x i32> %617, i64 0
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds float, ptr %f8.host, i64 %619
  %621 = load float, ptr %620, align 4, !tbaa !36
  %622 = insertelement <4 x float> undef, float %621, i64 0
  %623 = extractelement <4 x i32> %617, i64 1
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds float, ptr %f8.host, i64 %624
  %626 = load float, ptr %625, align 4, !tbaa !36
  %627 = insertelement <4 x float> %622, float %626, i64 1
  %628 = extractelement <4 x i32> %617, i64 2
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds float, ptr %f8.host, i64 %629
  %631 = load float, ptr %630, align 4, !tbaa !36
  %632 = insertelement <4 x float> %627, float %631, i64 2
  %633 = extractelement <4 x i32> %617, i64 3
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds float, ptr %f8.host, i64 %634
  %636 = load float, ptr %635, align 4, !tbaa !36
  %637 = insertelement <4 x float> %632, float %636, i64 3
  %638 = fmul <4 x float> %637, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %639 = fadd <4 x float> %610, %638
  %640 = fmul <4 x float> %639, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %641 = add nsw i32 %584, %t2255.us
  %642 = insertelement <4 x i32> undef, i32 %641, i64 0
  %643 = shufflevector <4 x i32> %642, <4 x i32> undef, <4 x i32> zeroinitializer
  %644 = add nsw <4 x i32> %643, <i32 0, i32 1, i32 2, i32 3>
  %645 = add nsw <4 x i32> %t2278.us, %644
  %646 = extractelement <4 x i32> %645, i64 0
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds float, ptr %f8.host, i64 %647
  %649 = load float, ptr %648, align 4, !tbaa !36
  %650 = insertelement <4 x float> undef, float %649, i64 0
  %651 = extractelement <4 x i32> %645, i64 1
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds float, ptr %f8.host, i64 %652
  %654 = load float, ptr %653, align 4, !tbaa !36
  %655 = insertelement <4 x float> %650, float %654, i64 1
  %656 = extractelement <4 x i32> %645, i64 2
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds float, ptr %f8.host, i64 %657
  %659 = load float, ptr %658, align 4, !tbaa !36
  %660 = insertelement <4 x float> %655, float %659, i64 2
  %661 = extractelement <4 x i32> %645, i64 3
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds float, ptr %f8.host, i64 %662
  %664 = load float, ptr %663, align 4, !tbaa !36
  %665 = insertelement <4 x float> %660, float %664, i64 3
  %666 = fmul <4 x float> %665, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %667 = add nsw i32 %611, %t2255.us
  %668 = insertelement <4 x i32> undef, i32 %667, i64 0
  %669 = shufflevector <4 x i32> %668, <4 x i32> undef, <4 x i32> zeroinitializer
  %670 = add nsw <4 x i32> %669, <i32 0, i32 1, i32 2, i32 3>
  %671 = add <4 x i32> %616, %670
  %672 = extractelement <4 x i32> %671, i64 0
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds float, ptr %f8.host, i64 %673
  %675 = load float, ptr %674, align 4, !tbaa !36
  %676 = insertelement <4 x float> undef, float %675, i64 0
  %677 = extractelement <4 x i32> %671, i64 1
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds float, ptr %f8.host, i64 %678
  %680 = load float, ptr %679, align 4, !tbaa !36
  %681 = insertelement <4 x float> %676, float %680, i64 1
  %682 = extractelement <4 x i32> %671, i64 2
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds float, ptr %f8.host, i64 %683
  %685 = load float, ptr %684, align 4, !tbaa !36
  %686 = insertelement <4 x float> %681, float %685, i64 2
  %687 = extractelement <4 x i32> %671, i64 3
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds float, ptr %f8.host, i64 %688
  %690 = load float, ptr %689, align 4, !tbaa !36
  %691 = insertelement <4 x float> %686, float %690, i64 3
  %692 = fmul <4 x float> %691, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %693 = fadd <4 x float> %666, %692
  %694 = fmul <4 x float> %693, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %695 = fadd <4 x float> %640, %694
  %696 = mul nsw <4 x i32> %298, %248
  %697 = add nsw i32 %t2251.us, 1
  %698 = insertelement <4 x i32> undef, i32 %697, i64 0
  %699 = shufflevector <4 x i32> %698, <4 x i32> undef, <4 x i32> zeroinitializer
  %700 = add nsw <4 x i32> %699, <i32 0, i32 2, i32 4, i32 6>
  %701 = add nsw <4 x i32> %696, %700
  %702 = extractelement <4 x i32> %701, i64 0
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds float, ptr %f7.host, i64 %703
  %705 = load float, ptr %704, align 4, !tbaa !54
  %706 = insertelement <4 x float> undef, float %705, i64 0
  %707 = extractelement <4 x i32> %701, i64 1
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds float, ptr %f7.host, i64 %708
  %710 = load float, ptr %709, align 4, !tbaa !54
  %711 = insertelement <4 x float> %706, float %710, i64 1
  %712 = extractelement <4 x i32> %701, i64 2
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds float, ptr %f7.host, i64 %713
  %715 = load float, ptr %714, align 4, !tbaa !54
  %716 = insertelement <4 x float> %711, float %715, i64 2
  %717 = extractelement <4 x i32> %701, i64 3
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds float, ptr %f7.host, i64 %718
  %720 = load float, ptr %719, align 4, !tbaa !54
  %721 = insertelement <4 x float> %716, float %720, i64 3
  %722 = fsub <4 x float> %721, %695
  %723 = fmul <4 x float> %t2267.us, %722
  %724 = add nsw <4 x i32> %t2273.us, %588
  %725 = extractelement <4 x i32> %724, i64 0
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds float, ptr %f8.host, i64 %726
  %728 = load float, ptr %727, align 4, !tbaa !36
  %729 = insertelement <4 x float> undef, float %728, i64 0
  %730 = extractelement <4 x i32> %724, i64 1
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds float, ptr %f8.host, i64 %731
  %733 = load float, ptr %732, align 4, !tbaa !36
  %734 = insertelement <4 x float> %729, float %733, i64 1
  %735 = extractelement <4 x i32> %724, i64 2
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds float, ptr %f8.host, i64 %736
  %738 = load float, ptr %737, align 4, !tbaa !36
  %739 = insertelement <4 x float> %734, float %738, i64 2
  %740 = extractelement <4 x i32> %724, i64 3
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds float, ptr %f8.host, i64 %741
  %743 = load float, ptr %742, align 4, !tbaa !36
  %744 = insertelement <4 x float> %739, float %743, i64 3
  %745 = fmul <4 x float> %744, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %746 = add <4 x i32> %t2273.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %747 = add <4 x i32> %746, %615
  %748 = extractelement <4 x i32> %747, i64 0
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds float, ptr %f8.host, i64 %749
  %751 = load float, ptr %750, align 4, !tbaa !36
  %752 = insertelement <4 x float> undef, float %751, i64 0
  %753 = extractelement <4 x i32> %747, i64 1
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds float, ptr %f8.host, i64 %754
  %756 = load float, ptr %755, align 4, !tbaa !36
  %757 = insertelement <4 x float> %752, float %756, i64 1
  %758 = extractelement <4 x i32> %747, i64 2
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds float, ptr %f8.host, i64 %759
  %761 = load float, ptr %760, align 4, !tbaa !36
  %762 = insertelement <4 x float> %757, float %761, i64 2
  %763 = extractelement <4 x i32> %747, i64 3
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds float, ptr %f8.host, i64 %764
  %766 = load float, ptr %765, align 4, !tbaa !36
  %767 = insertelement <4 x float> %762, float %766, i64 3
  %768 = fmul <4 x float> %767, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %769 = fadd <4 x float> %745, %768
  %770 = fmul <4 x float> %769, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %771 = add nsw <4 x i32> %t2273.us, %644
  %772 = extractelement <4 x i32> %771, i64 0
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds float, ptr %f8.host, i64 %773
  %775 = load float, ptr %774, align 4, !tbaa !36
  %776 = insertelement <4 x float> undef, float %775, i64 0
  %777 = extractelement <4 x i32> %771, i64 1
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds float, ptr %f8.host, i64 %778
  %780 = load float, ptr %779, align 4, !tbaa !36
  %781 = insertelement <4 x float> %776, float %780, i64 1
  %782 = extractelement <4 x i32> %771, i64 2
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds float, ptr %f8.host, i64 %783
  %785 = load float, ptr %784, align 4, !tbaa !36
  %786 = insertelement <4 x float> %781, float %785, i64 2
  %787 = extractelement <4 x i32> %771, i64 3
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds float, ptr %f8.host, i64 %788
  %790 = load float, ptr %789, align 4, !tbaa !36
  %791 = insertelement <4 x float> %786, float %790, i64 3
  %792 = fmul <4 x float> %791, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %793 = add <4 x i32> %746, %670
  %794 = extractelement <4 x i32> %793, i64 0
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds float, ptr %f8.host, i64 %795
  %797 = load float, ptr %796, align 4, !tbaa !36
  %798 = insertelement <4 x float> undef, float %797, i64 0
  %799 = extractelement <4 x i32> %793, i64 1
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds float, ptr %f8.host, i64 %800
  %802 = load float, ptr %801, align 4, !tbaa !36
  %803 = insertelement <4 x float> %798, float %802, i64 1
  %804 = extractelement <4 x i32> %793, i64 2
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds float, ptr %f8.host, i64 %805
  %807 = load float, ptr %806, align 4, !tbaa !36
  %808 = insertelement <4 x float> %803, float %807, i64 2
  %809 = extractelement <4 x i32> %793, i64 3
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds float, ptr %f8.host, i64 %810
  %812 = load float, ptr %811, align 4, !tbaa !36
  %813 = insertelement <4 x float> %808, float %812, i64 3
  %814 = fmul <4 x float> %813, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %815 = fadd <4 x float> %792, %814
  %816 = fmul <4 x float> %815, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %817 = fadd <4 x float> %770, %816
  %818 = mul nsw <4 x i32> %t2270.us, %248
  %819 = add nsw <4 x i32> %818, %700
  %820 = extractelement <4 x i32> %819, i64 0
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds float, ptr %f7.host, i64 %821
  %823 = load float, ptr %822, align 4, !tbaa !54
  %824 = insertelement <4 x float> undef, float %823, i64 0
  %825 = extractelement <4 x i32> %819, i64 1
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds float, ptr %f7.host, i64 %826
  %828 = load float, ptr %827, align 4, !tbaa !54
  %829 = insertelement <4 x float> %824, float %828, i64 1
  %830 = extractelement <4 x i32> %819, i64 2
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds float, ptr %f7.host, i64 %831
  %833 = load float, ptr %832, align 4, !tbaa !54
  %834 = insertelement <4 x float> %829, float %833, i64 2
  %835 = extractelement <4 x i32> %819, i64 3
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds float, ptr %f7.host, i64 %836
  %838 = load float, ptr %837, align 4, !tbaa !54
  %839 = insertelement <4 x float> %834, float %838, i64 3
  %840 = fsub <4 x float> %839, %817
  %841 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2267.us
  %842 = fmul <4 x float> %841, %840
  %843 = fadd <4 x float> %723, %842
  %844 = sext i32 %294 to i64
  %845 = sub nsw i64 %844, %4
  %846 = add nsw i64 %845, %266
  %847 = getelementptr inbounds float, ptr %f130.host, i64 %846
  %848 = load <4 x float>, ptr %847, align 4, !tbaa !38
  %849 = fmul <4 x float> %848, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %850 = sext i32 %t2264.us to i64
  %851 = sub nsw i64 %850, %4
  %852 = add nsw i64 %267, %851
  %853 = getelementptr inbounds float, ptr %f130.host, i64 %852
  %854 = load <4 x float>, ptr %853, align 4, !tbaa !38
  %855 = fmul <4 x float> %854, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %856 = fadd <4 x float> %849, %855
  %857 = fmul <4 x float> %856, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %858 = add nsw i64 %845, %268
  %859 = getelementptr inbounds float, ptr %f130.host, i64 %858
  %860 = load <4 x float>, ptr %859, align 4, !tbaa !38
  %861 = fmul <4 x float> %860, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %862 = add nsw i64 %269, %851
  %863 = getelementptr inbounds float, ptr %f130.host, i64 %862
  %864 = load <4 x float>, ptr %863, align 4, !tbaa !38
  %865 = fmul <4 x float> %864, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %866 = fadd <4 x float> %861, %865
  %867 = fmul <4 x float> %866, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %868 = fadd <4 x float> %857, %867
  %869 = fadd <4 x float> %843, %868
  %870 = shufflevector <4 x float> %583, <4 x float> %869, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %871 = sext i32 %f129.s0.v3.v363.base.us to i64
  %872 = add i64 %272, %871
  %873 = getelementptr inbounds float, ptr %128, i64 %872
  store <8 x float> %870, ptr %873, align 4, !tbaa !64
  %lsr.iv.next421.us = add i32 %lsr.iv420.us, -1
  %lsr.iv.next423.us = add i32 %lsr.iv422.us, 8
  %.not158.us = icmp eq i32 %lsr.iv.next421.us, 0
  br i1 %.not158.us, label %"end for f129.s0.v3.v3.loopexit.us", label %"for f129.s0.v3.v3.us"

"end for f129.s0.v3.v3.loopexit.us":              ; preds = %"for f129.s0.v3.v3.us"
  %indvars.iv.next310 = add nsw i64 %indvars.iv309, 1
  %874 = icmp eq i64 %indvars.iv.next310, %sext311
  br i1 %874, label %"produce f128", label %"for f129.s0.v4.us"

"produce f128":                                   ; preds = %"end for f129.s0.v3.v3.loopexit.us", %"produce f129"
  %875 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %876 = ashr i32 %875, 3
  %877 = add nsw i32 %122, 1
  %878 = icmp sgt i32 %102, -1
  %879 = add nsw i32 %f74.v3.extent_realized.s, 1
  %880 = xor i32 %225, -1
  %881 = xor i32 %f7.v4.min_realized, -1
  %882 = add nsw i32 %f6.v3.extent_realized.s, 1
  %883 = insertelement <4 x i32> undef, i32 %882, i64 0
  %884 = shufflevector <4 x i32> %883, <4 x i32> undef, <4 x i32> zeroinitializer
  %885 = sext i32 %f129.v3.min_realized to i64
  %886 = sext i32 %f128.v3.extent_realized.s to i64
  %887 = add nsw i64 %886, 1
  %888 = sext i32 %876 to i64
  %narrow276 = sub nsw i32 0, %f128.v3.min_realized
  %.neg219 = sext i32 %narrow276 to i64
  br i1 %878, label %"for f128.s0.v4.us.preheader", label %"for f127.s0.v4.preheader", !prof !5

"for f128.s0.v4.us.preheader":                    ; preds = %"produce f128"
  %889 = add nuw nsw i32 %t3088, 36
  %890 = lshr i32 %889, 3
  %891 = add nsw i32 %890, %876
  %sext315 = sext i32 %891 to i64
  br label %"for f128.s0.v4.us"

"for f128.s0.v4.us":                              ; preds = %"for f128.s0.v4.us.preheader", %"end for f128.s0.v3.v3.loopexit.us"
  %indvars.iv313 = phi i64 [ %888, %"for f128.s0.v4.us.preheader" ], [ %indvars.iv.next314, %"end for f128.s0.v3.v3.loopexit.us" ]
  %indvars316 = trunc i64 %indvars.iv313 to i32
  %892 = shl i32 %indvars316, 1
  %893 = and i32 %892, 2
  %894 = ashr i32 %indvars316, 1
  %t2279.us = add nsw i32 %893, %894
  %895 = trunc i64 %indvars.iv313 to i32
  %896 = sub i32 %895, %f74.v4.min_realized
  %897 = mul i32 %896, %879
  %898 = sub i32 %897, %f74.v3.min_realized
  %899 = add nsw i32 %t2279.us, %880
  %t2286.us = mul nsw i32 %899, %117
  %900 = sub nsw i32 %894, %225
  %t2288.us = mul nsw i32 %900, %117
  %901 = add i32 %t2279.us, %881
  %902 = mul nsw i32 %901, %f7.stride.1
  %903 = sub nsw i32 %894, %f7.v4.min_realized
  %904 = mul nsw i32 %903, %f7.stride.1
  %905 = sext i32 %t2288.us to i64
  %906 = add nsw i64 %905, -1
  %907 = sext i32 %t2286.us to i64
  %908 = add nsw i64 %907, -1
  %909 = sub nsw i64 %indvars.iv313, %888
  %910 = mul nsw i64 %909, %887
  %911 = add i64 %910, %.neg219
  %912 = trunc i64 %indvars.iv313 to i32
  %913 = sub i32 %912, %f6.v4.min_realized
  %914 = mul i32 %913, %f6.stride.1
  br label %"for f128.s0.v3.v3.us"

"for f128.s0.v3.v3.us":                           ; preds = %"for f128.s0.v4.us", %"for f128.s0.v3.v3.us"
  %lsr.iv418.us = phi i32 [ %lsr.iv.next419.us, %"for f128.s0.v3.v3.us" ], [ 0, %"for f128.s0.v4.us" ]
  %lsr.iv416.us = phi i32 [ %lsr.iv.next417.us, %"for f128.s0.v3.v3.us" ], [ %877, %"for f128.s0.v4.us" ]
  %915 = add i32 %lsr.iv418.us, %99
  %f128.s0.v3.v343.base.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %915)
  %916 = shl i32 %f128.s0.v3.v343.base.us, 1
  %917 = and i32 %916, 2
  %918 = ashr i32 %f128.s0.v3.v343.base.us, 1
  %t2280.us = add nsw i32 %917, %918
  %t2281.us = add i32 %898, %f128.s0.v3.v343.base.us
  %919 = sext i32 %t2281.us to i64
  %920 = getelementptr inbounds float, ptr %f74.host, i64 %919
  %921 = load <4 x float>, ptr %920, align 4, !tbaa !56
  %922 = add nsw i64 %919, 4
  %923 = getelementptr inbounds float, ptr %f74.host, i64 %922
  %924 = load <4 x float>, ptr %923, align 4, !tbaa !56
  %925 = shufflevector <4 x float> %921, <4 x float> %924, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2282.us = fmul <4 x float> %232, %925
  %a832.us = fptosi <4 x float> %t2282.us to <4 x i32>
  %a835.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a832.us)
  %926 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a835.us, <4 x i32> zeroinitializer)
  %927 = sitofp <4 x i32> %926 to <4 x float>
  %t2284.us = fsub <4 x float> %t2282.us, %927
  %928 = sub nsw i32 %f128.s0.v3.v343.base.us, %f6.v3.min_realized
  %t2289.us = add nsw i32 %928, %914
  %t2291.us = sub nsw <4 x i32> %926, %241
  %929 = sub nsw i32 %t2280.us, %f7.v3.min_realized
  %t2294.us = add nsw i32 %929, %902
  %t2295.us = mul nsw <4 x i32> %t2291.us, %248
  %930 = sub nsw i32 %918, %f7.v3.min_realized
  %t2297.us = add nsw i32 %930, %902
  %t2299.us = add nsw i32 %929, %904
  %t2300.us = add nsw i32 %930, %904
  %931 = add nsw <4 x i32> %t2291.us, <i32 1, i32 1, i32 1, i32 1>
  %t2301.us = mul nsw <4 x i32> %931, %248
  %932 = add nsw i32 %f128.s0.v3.v343.base.us, 1
  %933 = shl i32 %932, 1
  %934 = and i32 %933, 2
  %935 = ashr i32 %932, 1
  %t2302.us = add nsw i32 %934, %935
  %936 = shufflevector <4 x float> %921, <4 x float> %924, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2303.us = fmul <4 x float> %232, %936
  %a836.us = fptosi <4 x float> %t2303.us to <4 x i32>
  %a839.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a836.us)
  %937 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a839.us, <4 x i32> zeroinitializer)
  %938 = sitofp <4 x i32> %937 to <4 x float>
  %t2305.us = fsub <4 x float> %t2303.us, %938
  %t2308.us = sub nsw <4 x i32> %937, %241
  %939 = sub nsw i32 %t2302.us, %f7.v3.min_realized
  %t2310.us = add nsw i32 %939, %902
  %t2311.us = mul nsw <4 x i32> %t2308.us, %248
  %940 = sub nsw i32 %935, %f7.v3.min_realized
  %t2313.us = add nsw i32 %940, %902
  %t2314.us = add nsw i32 %939, %904
  %t2315.us = add nsw i32 %940, %904
  %941 = add nsw <4 x i32> %t2308.us, <i32 1, i32 1, i32 1, i32 1>
  %t2316.us = mul nsw <4 x i32> %941, %248
  %942 = insertelement <4 x i32> undef, i32 %t2300.us, i64 0
  %943 = shufflevector <4 x i32> %942, <4 x i32> undef, <4 x i32> zeroinitializer
  %944 = add nsw <4 x i32> %943, <i32 0, i32 1, i32 2, i32 3>
  %945 = add nsw <4 x i32> %t2301.us, %944
  %946 = extractelement <4 x i32> %945, i64 0
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds float, ptr %f7.host, i64 %947
  %949 = load float, ptr %948, align 4, !tbaa !54
  %950 = insertelement <4 x float> undef, float %949, i64 0
  %951 = extractelement <4 x i32> %945, i64 1
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds float, ptr %f7.host, i64 %952
  %954 = load float, ptr %953, align 4, !tbaa !54
  %955 = insertelement <4 x float> %950, float %954, i64 1
  %956 = extractelement <4 x i32> %945, i64 2
  %957 = sext i32 %956 to i64
  %958 = getelementptr inbounds float, ptr %f7.host, i64 %957
  %959 = load float, ptr %958, align 4, !tbaa !54
  %960 = insertelement <4 x float> %955, float %959, i64 2
  %961 = extractelement <4 x i32> %945, i64 3
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds float, ptr %f7.host, i64 %962
  %964 = load float, ptr %963, align 4, !tbaa !54
  %965 = insertelement <4 x float> %960, float %964, i64 3
  %966 = fmul <4 x float> %965, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %967 = insertelement <4 x i32> undef, i32 %t2299.us, i64 0
  %968 = shufflevector <4 x i32> %967, <4 x i32> undef, <4 x i32> zeroinitializer
  %969 = add <4 x i32> %968, <i32 -1, i32 0, i32 1, i32 2>
  %970 = add <4 x i32> %969, %t2301.us
  %971 = extractelement <4 x i32> %970, i64 0
  %972 = sext i32 %971 to i64
  %973 = getelementptr inbounds float, ptr %f7.host, i64 %972
  %974 = load float, ptr %973, align 4, !tbaa !54
  %975 = insertelement <4 x float> undef, float %974, i64 0
  %976 = extractelement <4 x i32> %970, i64 1
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds float, ptr %f7.host, i64 %977
  %979 = load float, ptr %978, align 4, !tbaa !54
  %980 = insertelement <4 x float> %975, float %979, i64 1
  %981 = extractelement <4 x i32> %970, i64 2
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds float, ptr %f7.host, i64 %982
  %984 = load float, ptr %983, align 4, !tbaa !54
  %985 = insertelement <4 x float> %980, float %984, i64 2
  %986 = extractelement <4 x i32> %970, i64 3
  %987 = sext i32 %986 to i64
  %988 = getelementptr inbounds float, ptr %f7.host, i64 %987
  %989 = load float, ptr %988, align 4, !tbaa !54
  %990 = insertelement <4 x float> %985, float %989, i64 3
  %991 = fmul <4 x float> %990, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %992 = fadd <4 x float> %966, %991
  %993 = fmul <4 x float> %992, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %994 = insertelement <4 x i32> undef, i32 %t2297.us, i64 0
  %995 = shufflevector <4 x i32> %994, <4 x i32> undef, <4 x i32> zeroinitializer
  %996 = add nsw <4 x i32> %995, <i32 0, i32 1, i32 2, i32 3>
  %997 = add nsw <4 x i32> %t2301.us, %996
  %998 = extractelement <4 x i32> %997, i64 0
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds float, ptr %f7.host, i64 %999
  %1001 = load float, ptr %1000, align 4, !tbaa !54
  %1002 = insertelement <4 x float> undef, float %1001, i64 0
  %1003 = extractelement <4 x i32> %997, i64 1
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds float, ptr %f7.host, i64 %1004
  %1006 = load float, ptr %1005, align 4, !tbaa !54
  %1007 = insertelement <4 x float> %1002, float %1006, i64 1
  %1008 = extractelement <4 x i32> %997, i64 2
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds float, ptr %f7.host, i64 %1009
  %1011 = load float, ptr %1010, align 4, !tbaa !54
  %1012 = insertelement <4 x float> %1007, float %1011, i64 2
  %1013 = extractelement <4 x i32> %997, i64 3
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds float, ptr %f7.host, i64 %1014
  %1016 = load float, ptr %1015, align 4, !tbaa !54
  %1017 = insertelement <4 x float> %1012, float %1016, i64 3
  %1018 = fmul <4 x float> %1017, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1019 = insertelement <4 x i32> undef, i32 %t2294.us, i64 0
  %1020 = shufflevector <4 x i32> %1019, <4 x i32> undef, <4 x i32> zeroinitializer
  %1021 = add <4 x i32> %1020, <i32 -1, i32 0, i32 1, i32 2>
  %1022 = add <4 x i32> %1021, %t2301.us
  %1023 = extractelement <4 x i32> %1022, i64 0
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds float, ptr %f7.host, i64 %1024
  %1026 = load float, ptr %1025, align 4, !tbaa !54
  %1027 = insertelement <4 x float> undef, float %1026, i64 0
  %1028 = extractelement <4 x i32> %1022, i64 1
  %1029 = sext i32 %1028 to i64
  %1030 = getelementptr inbounds float, ptr %f7.host, i64 %1029
  %1031 = load float, ptr %1030, align 4, !tbaa !54
  %1032 = insertelement <4 x float> %1027, float %1031, i64 1
  %1033 = extractelement <4 x i32> %1022, i64 2
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds float, ptr %f7.host, i64 %1034
  %1036 = load float, ptr %1035, align 4, !tbaa !54
  %1037 = insertelement <4 x float> %1032, float %1036, i64 2
  %1038 = extractelement <4 x i32> %1022, i64 3
  %1039 = sext i32 %1038 to i64
  %1040 = getelementptr inbounds float, ptr %f7.host, i64 %1039
  %1041 = load float, ptr %1040, align 4, !tbaa !54
  %1042 = insertelement <4 x float> %1037, float %1041, i64 3
  %1043 = fmul <4 x float> %1042, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1044 = fadd <4 x float> %1018, %1043
  %1045 = fmul <4 x float> %1044, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1046 = fadd <4 x float> %993, %1045
  %1047 = mul nsw <4 x i32> %931, %884
  %1048 = insertelement <4 x i32> undef, i32 %t2289.us, i64 0
  %1049 = shufflevector <4 x i32> %1048, <4 x i32> undef, <4 x i32> zeroinitializer
  %1050 = add nsw <4 x i32> %1049, <i32 0, i32 2, i32 4, i32 6>
  %1051 = add nsw <4 x i32> %1047, %1050
  %1052 = extractelement <4 x i32> %1051, i64 0
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds float, ptr %f6.host, i64 %1053
  %1055 = load float, ptr %1054, align 4, !tbaa !50
  %1056 = insertelement <4 x float> undef, float %1055, i64 0
  %1057 = extractelement <4 x i32> %1051, i64 1
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds float, ptr %f6.host, i64 %1058
  %1060 = load float, ptr %1059, align 4, !tbaa !50
  %1061 = insertelement <4 x float> %1056, float %1060, i64 1
  %1062 = extractelement <4 x i32> %1051, i64 2
  %1063 = sext i32 %1062 to i64
  %1064 = getelementptr inbounds float, ptr %f6.host, i64 %1063
  %1065 = load float, ptr %1064, align 4, !tbaa !50
  %1066 = insertelement <4 x float> %1061, float %1065, i64 2
  %1067 = extractelement <4 x i32> %1051, i64 3
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds float, ptr %f6.host, i64 %1068
  %1070 = load float, ptr %1069, align 4, !tbaa !50
  %1071 = insertelement <4 x float> %1066, float %1070, i64 3
  %1072 = fsub <4 x float> %1071, %1046
  %1073 = fmul <4 x float> %t2284.us, %1072
  %1074 = add nsw <4 x i32> %t2295.us, %944
  %1075 = extractelement <4 x i32> %1074, i64 0
  %1076 = sext i32 %1075 to i64
  %1077 = getelementptr inbounds float, ptr %f7.host, i64 %1076
  %1078 = load float, ptr %1077, align 4, !tbaa !54
  %1079 = insertelement <4 x float> undef, float %1078, i64 0
  %1080 = extractelement <4 x i32> %1074, i64 1
  %1081 = sext i32 %1080 to i64
  %1082 = getelementptr inbounds float, ptr %f7.host, i64 %1081
  %1083 = load float, ptr %1082, align 4, !tbaa !54
  %1084 = insertelement <4 x float> %1079, float %1083, i64 1
  %1085 = extractelement <4 x i32> %1074, i64 2
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds float, ptr %f7.host, i64 %1086
  %1088 = load float, ptr %1087, align 4, !tbaa !54
  %1089 = insertelement <4 x float> %1084, float %1088, i64 2
  %1090 = extractelement <4 x i32> %1074, i64 3
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds float, ptr %f7.host, i64 %1091
  %1093 = load float, ptr %1092, align 4, !tbaa !54
  %1094 = insertelement <4 x float> %1089, float %1093, i64 3
  %1095 = fmul <4 x float> %1094, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1096 = add <4 x i32> %t2295.us, %968
  %1097 = add <4 x i32> %1096, <i32 -1, i32 0, i32 1, i32 2>
  %1098 = extractelement <4 x i32> %1097, i64 0
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds float, ptr %f7.host, i64 %1099
  %1101 = load float, ptr %1100, align 4, !tbaa !54
  %1102 = insertelement <4 x float> undef, float %1101, i64 0
  %1103 = extractelement <4 x i32> %1097, i64 1
  %1104 = sext i32 %1103 to i64
  %1105 = getelementptr inbounds float, ptr %f7.host, i64 %1104
  %1106 = load float, ptr %1105, align 4, !tbaa !54
  %1107 = insertelement <4 x float> %1102, float %1106, i64 1
  %1108 = extractelement <4 x i32> %1097, i64 2
  %1109 = sext i32 %1108 to i64
  %1110 = getelementptr inbounds float, ptr %f7.host, i64 %1109
  %1111 = load float, ptr %1110, align 4, !tbaa !54
  %1112 = insertelement <4 x float> %1107, float %1111, i64 2
  %1113 = extractelement <4 x i32> %1097, i64 3
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds float, ptr %f7.host, i64 %1114
  %1116 = load float, ptr %1115, align 4, !tbaa !54
  %1117 = insertelement <4 x float> %1112, float %1116, i64 3
  %1118 = fmul <4 x float> %1117, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1119 = fadd <4 x float> %1095, %1118
  %1120 = fmul <4 x float> %1119, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1121 = add nsw <4 x i32> %t2295.us, %996
  %1122 = extractelement <4 x i32> %1121, i64 0
  %1123 = sext i32 %1122 to i64
  %1124 = getelementptr inbounds float, ptr %f7.host, i64 %1123
  %1125 = load float, ptr %1124, align 4, !tbaa !54
  %1126 = insertelement <4 x float> undef, float %1125, i64 0
  %1127 = extractelement <4 x i32> %1121, i64 1
  %1128 = sext i32 %1127 to i64
  %1129 = getelementptr inbounds float, ptr %f7.host, i64 %1128
  %1130 = load float, ptr %1129, align 4, !tbaa !54
  %1131 = insertelement <4 x float> %1126, float %1130, i64 1
  %1132 = extractelement <4 x i32> %1121, i64 2
  %1133 = sext i32 %1132 to i64
  %1134 = getelementptr inbounds float, ptr %f7.host, i64 %1133
  %1135 = load float, ptr %1134, align 4, !tbaa !54
  %1136 = insertelement <4 x float> %1131, float %1135, i64 2
  %1137 = extractelement <4 x i32> %1121, i64 3
  %1138 = sext i32 %1137 to i64
  %1139 = getelementptr inbounds float, ptr %f7.host, i64 %1138
  %1140 = load float, ptr %1139, align 4, !tbaa !54
  %1141 = insertelement <4 x float> %1136, float %1140, i64 3
  %1142 = fmul <4 x float> %1141, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1143 = add <4 x i32> %t2295.us, %1020
  %1144 = add <4 x i32> %1143, <i32 -1, i32 0, i32 1, i32 2>
  %1145 = extractelement <4 x i32> %1144, i64 0
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds float, ptr %f7.host, i64 %1146
  %1148 = load float, ptr %1147, align 4, !tbaa !54
  %1149 = insertelement <4 x float> undef, float %1148, i64 0
  %1150 = extractelement <4 x i32> %1144, i64 1
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds float, ptr %f7.host, i64 %1151
  %1153 = load float, ptr %1152, align 4, !tbaa !54
  %1154 = insertelement <4 x float> %1149, float %1153, i64 1
  %1155 = extractelement <4 x i32> %1144, i64 2
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds float, ptr %f7.host, i64 %1156
  %1158 = load float, ptr %1157, align 4, !tbaa !54
  %1159 = insertelement <4 x float> %1154, float %1158, i64 2
  %1160 = extractelement <4 x i32> %1144, i64 3
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds float, ptr %f7.host, i64 %1161
  %1163 = load float, ptr %1162, align 4, !tbaa !54
  %1164 = insertelement <4 x float> %1159, float %1163, i64 3
  %1165 = fmul <4 x float> %1164, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1166 = fadd <4 x float> %1142, %1165
  %1167 = fmul <4 x float> %1166, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1168 = fadd <4 x float> %1120, %1167
  %1169 = mul nsw <4 x i32> %t2291.us, %884
  %1170 = add nsw <4 x i32> %1169, %1050
  %1171 = extractelement <4 x i32> %1170, i64 0
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds float, ptr %f6.host, i64 %1172
  %1174 = load float, ptr %1173, align 4, !tbaa !50
  %1175 = insertelement <4 x float> undef, float %1174, i64 0
  %1176 = extractelement <4 x i32> %1170, i64 1
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds float, ptr %f6.host, i64 %1177
  %1179 = load float, ptr %1178, align 4, !tbaa !50
  %1180 = insertelement <4 x float> %1175, float %1179, i64 1
  %1181 = extractelement <4 x i32> %1170, i64 2
  %1182 = sext i32 %1181 to i64
  %1183 = getelementptr inbounds float, ptr %f6.host, i64 %1182
  %1184 = load float, ptr %1183, align 4, !tbaa !50
  %1185 = insertelement <4 x float> %1180, float %1184, i64 2
  %1186 = extractelement <4 x i32> %1170, i64 3
  %1187 = sext i32 %1186 to i64
  %1188 = getelementptr inbounds float, ptr %f6.host, i64 %1187
  %1189 = load float, ptr %1188, align 4, !tbaa !50
  %1190 = insertelement <4 x float> %1185, float %1189, i64 3
  %1191 = fsub <4 x float> %1190, %1168
  %1192 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2284.us
  %1193 = fmul <4 x float> %1192, %1191
  %1194 = fadd <4 x float> %1073, %1193
  %narrow155.us = sub nsw i32 %918, %f129.v3.min_realized
  %1195 = sext i32 %narrow155.us to i64
  %1196 = add nsw i64 %1195, %905
  %1197 = getelementptr inbounds float, ptr %128, i64 %1196
  %1198 = load <4 x float>, ptr %1197, align 4, !tbaa !64
  %1199 = fmul <4 x float> %1198, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1200 = sext i32 %t2280.us to i64
  %1201 = sub nsw i64 %1200, %885
  %1202 = add nsw i64 %906, %1201
  %1203 = getelementptr inbounds float, ptr %128, i64 %1202
  %1204 = load <4 x float>, ptr %1203, align 4, !tbaa !64
  %1205 = fmul <4 x float> %1204, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1206 = fadd <4 x float> %1199, %1205
  %1207 = fmul <4 x float> %1206, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1208 = add nsw i64 %1195, %907
  %1209 = getelementptr inbounds float, ptr %128, i64 %1208
  %1210 = load <4 x float>, ptr %1209, align 4, !tbaa !64
  %1211 = fmul <4 x float> %1210, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1212 = add nsw i64 %908, %1201
  %1213 = getelementptr inbounds float, ptr %128, i64 %1212
  %1214 = load <4 x float>, ptr %1213, align 4, !tbaa !64
  %1215 = fmul <4 x float> %1214, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1216 = fadd <4 x float> %1211, %1215
  %1217 = fmul <4 x float> %1216, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1218 = fadd <4 x float> %1207, %1217
  %1219 = fadd <4 x float> %1194, %1218
  %1220 = insertelement <4 x i32> undef, i32 %t2315.us, i64 0
  %1221 = shufflevector <4 x i32> %1220, <4 x i32> undef, <4 x i32> zeroinitializer
  %1222 = add nsw <4 x i32> %1221, <i32 0, i32 1, i32 2, i32 3>
  %1223 = add nsw <4 x i32> %t2316.us, %1222
  %1224 = extractelement <4 x i32> %1223, i64 0
  %1225 = sext i32 %1224 to i64
  %1226 = getelementptr inbounds float, ptr %f7.host, i64 %1225
  %1227 = load float, ptr %1226, align 4, !tbaa !54
  %1228 = insertelement <4 x float> undef, float %1227, i64 0
  %1229 = extractelement <4 x i32> %1223, i64 1
  %1230 = sext i32 %1229 to i64
  %1231 = getelementptr inbounds float, ptr %f7.host, i64 %1230
  %1232 = load float, ptr %1231, align 4, !tbaa !54
  %1233 = insertelement <4 x float> %1228, float %1232, i64 1
  %1234 = extractelement <4 x i32> %1223, i64 2
  %1235 = sext i32 %1234 to i64
  %1236 = getelementptr inbounds float, ptr %f7.host, i64 %1235
  %1237 = load float, ptr %1236, align 4, !tbaa !54
  %1238 = insertelement <4 x float> %1233, float %1237, i64 2
  %1239 = extractelement <4 x i32> %1223, i64 3
  %1240 = sext i32 %1239 to i64
  %1241 = getelementptr inbounds float, ptr %f7.host, i64 %1240
  %1242 = load float, ptr %1241, align 4, !tbaa !54
  %1243 = insertelement <4 x float> %1238, float %1242, i64 3
  %1244 = fmul <4 x float> %1243, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1245 = insertelement <4 x i32> undef, i32 %t2314.us, i64 0
  %1246 = shufflevector <4 x i32> %1245, <4 x i32> undef, <4 x i32> zeroinitializer
  %1247 = add nsw <4 x i32> %1246, <i32 0, i32 1, i32 2, i32 3>
  %1248 = add <4 x i32> %t2316.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1249 = add <4 x i32> %1248, %1247
  %1250 = extractelement <4 x i32> %1249, i64 0
  %1251 = sext i32 %1250 to i64
  %1252 = getelementptr inbounds float, ptr %f7.host, i64 %1251
  %1253 = load float, ptr %1252, align 4, !tbaa !54
  %1254 = insertelement <4 x float> undef, float %1253, i64 0
  %1255 = extractelement <4 x i32> %1249, i64 1
  %1256 = sext i32 %1255 to i64
  %1257 = getelementptr inbounds float, ptr %f7.host, i64 %1256
  %1258 = load float, ptr %1257, align 4, !tbaa !54
  %1259 = insertelement <4 x float> %1254, float %1258, i64 1
  %1260 = extractelement <4 x i32> %1249, i64 2
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds float, ptr %f7.host, i64 %1261
  %1263 = load float, ptr %1262, align 4, !tbaa !54
  %1264 = insertelement <4 x float> %1259, float %1263, i64 2
  %1265 = extractelement <4 x i32> %1249, i64 3
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds float, ptr %f7.host, i64 %1266
  %1268 = load float, ptr %1267, align 4, !tbaa !54
  %1269 = insertelement <4 x float> %1264, float %1268, i64 3
  %1270 = fmul <4 x float> %1269, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1271 = fadd <4 x float> %1244, %1270
  %1272 = fmul <4 x float> %1271, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1273 = insertelement <4 x i32> undef, i32 %t2313.us, i64 0
  %1274 = shufflevector <4 x i32> %1273, <4 x i32> undef, <4 x i32> zeroinitializer
  %1275 = add nsw <4 x i32> %1274, <i32 0, i32 1, i32 2, i32 3>
  %1276 = add nsw <4 x i32> %t2316.us, %1275
  %1277 = extractelement <4 x i32> %1276, i64 0
  %1278 = sext i32 %1277 to i64
  %1279 = getelementptr inbounds float, ptr %f7.host, i64 %1278
  %1280 = load float, ptr %1279, align 4, !tbaa !54
  %1281 = insertelement <4 x float> undef, float %1280, i64 0
  %1282 = extractelement <4 x i32> %1276, i64 1
  %1283 = sext i32 %1282 to i64
  %1284 = getelementptr inbounds float, ptr %f7.host, i64 %1283
  %1285 = load float, ptr %1284, align 4, !tbaa !54
  %1286 = insertelement <4 x float> %1281, float %1285, i64 1
  %1287 = extractelement <4 x i32> %1276, i64 2
  %1288 = sext i32 %1287 to i64
  %1289 = getelementptr inbounds float, ptr %f7.host, i64 %1288
  %1290 = load float, ptr %1289, align 4, !tbaa !54
  %1291 = insertelement <4 x float> %1286, float %1290, i64 2
  %1292 = extractelement <4 x i32> %1276, i64 3
  %1293 = sext i32 %1292 to i64
  %1294 = getelementptr inbounds float, ptr %f7.host, i64 %1293
  %1295 = load float, ptr %1294, align 4, !tbaa !54
  %1296 = insertelement <4 x float> %1291, float %1295, i64 3
  %1297 = fmul <4 x float> %1296, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1298 = insertelement <4 x i32> undef, i32 %t2310.us, i64 0
  %1299 = shufflevector <4 x i32> %1298, <4 x i32> undef, <4 x i32> zeroinitializer
  %1300 = add nsw <4 x i32> %1299, <i32 0, i32 1, i32 2, i32 3>
  %1301 = add <4 x i32> %1248, %1300
  %1302 = extractelement <4 x i32> %1301, i64 0
  %1303 = sext i32 %1302 to i64
  %1304 = getelementptr inbounds float, ptr %f7.host, i64 %1303
  %1305 = load float, ptr %1304, align 4, !tbaa !54
  %1306 = insertelement <4 x float> undef, float %1305, i64 0
  %1307 = extractelement <4 x i32> %1301, i64 1
  %1308 = sext i32 %1307 to i64
  %1309 = getelementptr inbounds float, ptr %f7.host, i64 %1308
  %1310 = load float, ptr %1309, align 4, !tbaa !54
  %1311 = insertelement <4 x float> %1306, float %1310, i64 1
  %1312 = extractelement <4 x i32> %1301, i64 2
  %1313 = sext i32 %1312 to i64
  %1314 = getelementptr inbounds float, ptr %f7.host, i64 %1313
  %1315 = load float, ptr %1314, align 4, !tbaa !54
  %1316 = insertelement <4 x float> %1311, float %1315, i64 2
  %1317 = extractelement <4 x i32> %1301, i64 3
  %1318 = sext i32 %1317 to i64
  %1319 = getelementptr inbounds float, ptr %f7.host, i64 %1318
  %1320 = load float, ptr %1319, align 4, !tbaa !54
  %1321 = insertelement <4 x float> %1316, float %1320, i64 3
  %1322 = fmul <4 x float> %1321, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1323 = fadd <4 x float> %1297, %1322
  %1324 = fmul <4 x float> %1323, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1325 = fadd <4 x float> %1272, %1324
  %1326 = mul nsw <4 x i32> %941, %884
  %1327 = add nsw i32 %t2289.us, 1
  %1328 = insertelement <4 x i32> undef, i32 %1327, i64 0
  %1329 = shufflevector <4 x i32> %1328, <4 x i32> undef, <4 x i32> zeroinitializer
  %1330 = add nsw <4 x i32> %1329, <i32 0, i32 2, i32 4, i32 6>
  %1331 = add nsw <4 x i32> %1326, %1330
  %1332 = extractelement <4 x i32> %1331, i64 0
  %1333 = sext i32 %1332 to i64
  %1334 = getelementptr inbounds float, ptr %f6.host, i64 %1333
  %1335 = load float, ptr %1334, align 4, !tbaa !50
  %1336 = insertelement <4 x float> undef, float %1335, i64 0
  %1337 = extractelement <4 x i32> %1331, i64 1
  %1338 = sext i32 %1337 to i64
  %1339 = getelementptr inbounds float, ptr %f6.host, i64 %1338
  %1340 = load float, ptr %1339, align 4, !tbaa !50
  %1341 = insertelement <4 x float> %1336, float %1340, i64 1
  %1342 = extractelement <4 x i32> %1331, i64 2
  %1343 = sext i32 %1342 to i64
  %1344 = getelementptr inbounds float, ptr %f6.host, i64 %1343
  %1345 = load float, ptr %1344, align 4, !tbaa !50
  %1346 = insertelement <4 x float> %1341, float %1345, i64 2
  %1347 = extractelement <4 x i32> %1331, i64 3
  %1348 = sext i32 %1347 to i64
  %1349 = getelementptr inbounds float, ptr %f6.host, i64 %1348
  %1350 = load float, ptr %1349, align 4, !tbaa !50
  %1351 = insertelement <4 x float> %1346, float %1350, i64 3
  %1352 = fsub <4 x float> %1351, %1325
  %1353 = fmul <4 x float> %t2305.us, %1352
  %1354 = add nsw <4 x i32> %t2311.us, %1222
  %1355 = extractelement <4 x i32> %1354, i64 0
  %1356 = sext i32 %1355 to i64
  %1357 = getelementptr inbounds float, ptr %f7.host, i64 %1356
  %1358 = load float, ptr %1357, align 4, !tbaa !54
  %1359 = insertelement <4 x float> undef, float %1358, i64 0
  %1360 = extractelement <4 x i32> %1354, i64 1
  %1361 = sext i32 %1360 to i64
  %1362 = getelementptr inbounds float, ptr %f7.host, i64 %1361
  %1363 = load float, ptr %1362, align 4, !tbaa !54
  %1364 = insertelement <4 x float> %1359, float %1363, i64 1
  %1365 = extractelement <4 x i32> %1354, i64 2
  %1366 = sext i32 %1365 to i64
  %1367 = getelementptr inbounds float, ptr %f7.host, i64 %1366
  %1368 = load float, ptr %1367, align 4, !tbaa !54
  %1369 = insertelement <4 x float> %1364, float %1368, i64 2
  %1370 = extractelement <4 x i32> %1354, i64 3
  %1371 = sext i32 %1370 to i64
  %1372 = getelementptr inbounds float, ptr %f7.host, i64 %1371
  %1373 = load float, ptr %1372, align 4, !tbaa !54
  %1374 = insertelement <4 x float> %1369, float %1373, i64 3
  %1375 = fmul <4 x float> %1374, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1376 = add <4 x i32> %t2311.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1377 = add <4 x i32> %1376, %1247
  %1378 = extractelement <4 x i32> %1377, i64 0
  %1379 = sext i32 %1378 to i64
  %1380 = getelementptr inbounds float, ptr %f7.host, i64 %1379
  %1381 = load float, ptr %1380, align 4, !tbaa !54
  %1382 = insertelement <4 x float> undef, float %1381, i64 0
  %1383 = extractelement <4 x i32> %1377, i64 1
  %1384 = sext i32 %1383 to i64
  %1385 = getelementptr inbounds float, ptr %f7.host, i64 %1384
  %1386 = load float, ptr %1385, align 4, !tbaa !54
  %1387 = insertelement <4 x float> %1382, float %1386, i64 1
  %1388 = extractelement <4 x i32> %1377, i64 2
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds float, ptr %f7.host, i64 %1389
  %1391 = load float, ptr %1390, align 4, !tbaa !54
  %1392 = insertelement <4 x float> %1387, float %1391, i64 2
  %1393 = extractelement <4 x i32> %1377, i64 3
  %1394 = sext i32 %1393 to i64
  %1395 = getelementptr inbounds float, ptr %f7.host, i64 %1394
  %1396 = load float, ptr %1395, align 4, !tbaa !54
  %1397 = insertelement <4 x float> %1392, float %1396, i64 3
  %1398 = fmul <4 x float> %1397, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1399 = fadd <4 x float> %1375, %1398
  %1400 = fmul <4 x float> %1399, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1401 = add nsw <4 x i32> %t2311.us, %1275
  %1402 = extractelement <4 x i32> %1401, i64 0
  %1403 = sext i32 %1402 to i64
  %1404 = getelementptr inbounds float, ptr %f7.host, i64 %1403
  %1405 = load float, ptr %1404, align 4, !tbaa !54
  %1406 = insertelement <4 x float> undef, float %1405, i64 0
  %1407 = extractelement <4 x i32> %1401, i64 1
  %1408 = sext i32 %1407 to i64
  %1409 = getelementptr inbounds float, ptr %f7.host, i64 %1408
  %1410 = load float, ptr %1409, align 4, !tbaa !54
  %1411 = insertelement <4 x float> %1406, float %1410, i64 1
  %1412 = extractelement <4 x i32> %1401, i64 2
  %1413 = sext i32 %1412 to i64
  %1414 = getelementptr inbounds float, ptr %f7.host, i64 %1413
  %1415 = load float, ptr %1414, align 4, !tbaa !54
  %1416 = insertelement <4 x float> %1411, float %1415, i64 2
  %1417 = extractelement <4 x i32> %1401, i64 3
  %1418 = sext i32 %1417 to i64
  %1419 = getelementptr inbounds float, ptr %f7.host, i64 %1418
  %1420 = load float, ptr %1419, align 4, !tbaa !54
  %1421 = insertelement <4 x float> %1416, float %1420, i64 3
  %1422 = fmul <4 x float> %1421, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1423 = add <4 x i32> %1376, %1300
  %1424 = extractelement <4 x i32> %1423, i64 0
  %1425 = sext i32 %1424 to i64
  %1426 = getelementptr inbounds float, ptr %f7.host, i64 %1425
  %1427 = load float, ptr %1426, align 4, !tbaa !54
  %1428 = insertelement <4 x float> undef, float %1427, i64 0
  %1429 = extractelement <4 x i32> %1423, i64 1
  %1430 = sext i32 %1429 to i64
  %1431 = getelementptr inbounds float, ptr %f7.host, i64 %1430
  %1432 = load float, ptr %1431, align 4, !tbaa !54
  %1433 = insertelement <4 x float> %1428, float %1432, i64 1
  %1434 = extractelement <4 x i32> %1423, i64 2
  %1435 = sext i32 %1434 to i64
  %1436 = getelementptr inbounds float, ptr %f7.host, i64 %1435
  %1437 = load float, ptr %1436, align 4, !tbaa !54
  %1438 = insertelement <4 x float> %1433, float %1437, i64 2
  %1439 = extractelement <4 x i32> %1423, i64 3
  %1440 = sext i32 %1439 to i64
  %1441 = getelementptr inbounds float, ptr %f7.host, i64 %1440
  %1442 = load float, ptr %1441, align 4, !tbaa !54
  %1443 = insertelement <4 x float> %1438, float %1442, i64 3
  %1444 = fmul <4 x float> %1443, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1445 = fadd <4 x float> %1422, %1444
  %1446 = fmul <4 x float> %1445, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1447 = fadd <4 x float> %1400, %1446
  %1448 = mul nsw <4 x i32> %t2308.us, %884
  %1449 = add nsw <4 x i32> %1448, %1330
  %1450 = extractelement <4 x i32> %1449, i64 0
  %1451 = sext i32 %1450 to i64
  %1452 = getelementptr inbounds float, ptr %f6.host, i64 %1451
  %1453 = load float, ptr %1452, align 4, !tbaa !50
  %1454 = insertelement <4 x float> undef, float %1453, i64 0
  %1455 = extractelement <4 x i32> %1449, i64 1
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds float, ptr %f6.host, i64 %1456
  %1458 = load float, ptr %1457, align 4, !tbaa !50
  %1459 = insertelement <4 x float> %1454, float %1458, i64 1
  %1460 = extractelement <4 x i32> %1449, i64 2
  %1461 = sext i32 %1460 to i64
  %1462 = getelementptr inbounds float, ptr %f6.host, i64 %1461
  %1463 = load float, ptr %1462, align 4, !tbaa !50
  %1464 = insertelement <4 x float> %1459, float %1463, i64 2
  %1465 = extractelement <4 x i32> %1449, i64 3
  %1466 = sext i32 %1465 to i64
  %1467 = getelementptr inbounds float, ptr %f6.host, i64 %1466
  %1468 = load float, ptr %1467, align 4, !tbaa !50
  %1469 = insertelement <4 x float> %1464, float %1468, i64 3
  %1470 = fsub <4 x float> %1469, %1447
  %1471 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2305.us
  %1472 = fmul <4 x float> %1471, %1470
  %1473 = fadd <4 x float> %1353, %1472
  %narrow156.us = sub nsw i32 %935, %f129.v3.min_realized
  %1474 = sext i32 %narrow156.us to i64
  %1475 = add nsw i64 %1474, %905
  %1476 = getelementptr inbounds float, ptr %128, i64 %1475
  %1477 = load <4 x float>, ptr %1476, align 4, !tbaa !64
  %1478 = fmul <4 x float> %1477, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1479 = sext i32 %t2302.us to i64
  %1480 = sub nsw i64 %1479, %885
  %1481 = add nsw i64 %906, %1480
  %1482 = getelementptr inbounds float, ptr %128, i64 %1481
  %1483 = load <4 x float>, ptr %1482, align 4, !tbaa !64
  %1484 = fmul <4 x float> %1483, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1485 = fadd <4 x float> %1478, %1484
  %1486 = fmul <4 x float> %1485, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1487 = add nsw i64 %1474, %907
  %1488 = getelementptr inbounds float, ptr %128, i64 %1487
  %1489 = load <4 x float>, ptr %1488, align 4, !tbaa !64
  %1490 = fmul <4 x float> %1489, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1491 = add nsw i64 %908, %1480
  %1492 = getelementptr inbounds float, ptr %128, i64 %1491
  %1493 = load <4 x float>, ptr %1492, align 4, !tbaa !64
  %1494 = fmul <4 x float> %1493, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1495 = fadd <4 x float> %1490, %1494
  %1496 = fmul <4 x float> %1495, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1497 = fadd <4 x float> %1486, %1496
  %1498 = fadd <4 x float> %1473, %1497
  %1499 = shufflevector <4 x float> %1219, <4 x float> %1498, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %1500 = sext i32 %f128.s0.v3.v343.base.us to i64
  %1501 = add i64 %911, %1500
  %1502 = getelementptr inbounds float, ptr %154, i64 %1501
  store <8 x float> %1499, ptr %1502, align 4, !tbaa !66
  %lsr.iv.next417.us = add i32 %lsr.iv416.us, -1
  %lsr.iv.next419.us = add i32 %lsr.iv418.us, 8
  %.not157.us = icmp eq i32 %lsr.iv.next417.us, 0
  br i1 %.not157.us, label %"end for f128.s0.v3.v3.loopexit.us", label %"for f128.s0.v3.v3.us"

"end for f128.s0.v3.v3.loopexit.us":              ; preds = %"for f128.s0.v3.v3.us"
  %indvars.iv.next314 = add nsw i64 %indvars.iv313, 1
  %1503 = icmp eq i64 %indvars.iv.next314, %sext315
  br i1 %1503, label %"for f127.s0.v4.preheader", label %"for f128.s0.v4.us"

"for f127.s0.v4.preheader":                       ; preds = %"end for f128.s0.v3.v3.loopexit.us", %"produce f128"
  %1504 = add nsw i32 %139, 1
  %1505 = icmp sgt i32 %138, -1
  %1506 = add nsw i32 %f73.v3.extent_realized.s, 1
  %1507 = xor i32 %876, -1
  %1508 = xor i32 %f6.v4.min_realized, -1
  %1509 = add nsw i32 %f5.v3.extent_realized.s, 1
  %1510 = insertelement <4 x i32> undef, i32 %1509, i64 0
  %1511 = shufflevector <4 x i32> %1510, <4 x i32> undef, <4 x i32> zeroinitializer
  %1512 = sext i32 %f128.v3.min_realized to i64
  %1513 = sext i32 %f127.v3.extent_realized.s to i64
  %1514 = add nsw i64 %1513, 1
  %1515 = sext i32 %f127.v4.min_realized to i64
  %1516 = sext i32 %f127.v3.min_realized to i64
  br i1 %1505, label %"for f127.s0.v4.us.preheader", label %"for f126.s0.v4.preheader", !prof !5

"for f127.s0.v4.us.preheader":                    ; preds = %"for f127.s0.v4.preheader"
  %1517 = add nsw i32 %b803, 3
  %1518 = sext i32 %b803 to i64
  %sext319 = sext i32 %1517 to i64
  br label %"for f127.s0.v4.us"

"for f127.s0.v4.us":                              ; preds = %"for f127.s0.v4.us.preheader", %"end for f127.s0.v3.v3.loopexit.us"
  %indvars.iv317 = phi i64 [ %1518, %"for f127.s0.v4.us.preheader" ], [ %indvars.iv.next318, %"end for f127.s0.v3.v3.loopexit.us" ]
  %indvars320 = trunc i64 %indvars.iv317 to i32
  %1519 = shl i32 %indvars320, 1
  %1520 = and i32 %1519, 2
  %1521 = ashr i32 %indvars320, 1
  %t2317.us = add nsw i32 %1520, %1521
  %1522 = trunc i64 %indvars.iv317 to i32
  %1523 = sub i32 %1522, %f73.v4.min_realized
  %1524 = mul i32 %1523, %1506
  %1525 = sub i32 %1524, %f73.v3.min_realized
  %1526 = add nsw i32 %t2317.us, %1507
  %t2324.us = mul nsw i32 %1526, %147
  %1527 = sub nsw i32 %1521, %876
  %t2326.us = mul nsw i32 %1527, %147
  %1528 = add i32 %t2317.us, %1508
  %1529 = mul nsw i32 %1528, %f6.stride.1
  %1530 = sub nsw i32 %1521, %f6.v4.min_realized
  %1531 = mul nsw i32 %1530, %f6.stride.1
  %1532 = sext i32 %t2326.us to i64
  %1533 = add nsw i64 %1532, -1
  %1534 = sext i32 %t2324.us to i64
  %1535 = add nsw i64 %1534, -1
  %1536 = sub nsw i64 %indvars.iv317, %1515
  %1537 = mul nsw i64 %1536, %1514
  %1538 = sub i64 %1537, %1516
  %1539 = trunc i64 %indvars.iv317 to i32
  %1540 = sub i32 %1539, %f5.v4.min_realized
  %1541 = mul i32 %1540, %f5.stride.1
  br label %"for f127.s0.v3.v3.us"

"for f127.s0.v3.v3.us":                           ; preds = %"for f127.s0.v4.us", %"for f127.s0.v3.v3.us"
  %lsr.iv414.us = phi i32 [ %lsr.iv.next415.us, %"for f127.s0.v3.v3.us" ], [ 0, %"for f127.s0.v4.us" ]
  %lsr.iv412.us = phi i32 [ %lsr.iv.next413.us, %"for f127.s0.v3.v3.us" ], [ %1504, %"for f127.s0.v4.us" ]
  %1542 = add i32 %lsr.iv414.us, %135
  %f127.s0.v3.v323.base.us = tail call i32 @llvm.smin.i32(i32 %b801, i32 %1542)
  %1543 = shl i32 %f127.s0.v3.v323.base.us, 1
  %1544 = and i32 %1543, 2
  %1545 = ashr i32 %f127.s0.v3.v323.base.us, 1
  %t2318.us = add nsw i32 %1544, %1545
  %t2319.us = add i32 %1525, %f127.s0.v3.v323.base.us
  %1546 = sext i32 %t2319.us to i64
  %1547 = getelementptr inbounds float, ptr %f73.host, i64 %1546
  %1548 = load <4 x float>, ptr %1547, align 4, !tbaa !52
  %1549 = add nsw i64 %1546, 4
  %1550 = getelementptr inbounds float, ptr %f73.host, i64 %1549
  %1551 = load <4 x float>, ptr %1550, align 4, !tbaa !52
  %1552 = shufflevector <4 x float> %1548, <4 x float> %1551, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2320.us = fmul <4 x float> %232, %1552
  %a841.us = fptosi <4 x float> %t2320.us to <4 x i32>
  %a844.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a841.us)
  %1553 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a844.us, <4 x i32> zeroinitializer)
  %1554 = sitofp <4 x i32> %1553 to <4 x float>
  %t2322.us = fsub <4 x float> %t2320.us, %1554
  %1555 = sub nsw i32 %f127.s0.v3.v323.base.us, %f5.v3.min_realized
  %t2327.us = add nsw i32 %1555, %1541
  %t2329.us = sub nsw <4 x i32> %1553, %241
  %1556 = sub nsw i32 %t2318.us, %f6.v3.min_realized
  %t2332.us = add nsw i32 %1556, %1529
  %t2333.us = mul nsw <4 x i32> %t2329.us, %884
  %1557 = sub nsw i32 %1545, %f6.v3.min_realized
  %t2335.us = add nsw i32 %1557, %1529
  %t2337.us = add nsw i32 %1556, %1531
  %t2338.us = add nsw i32 %1557, %1531
  %1558 = add nsw <4 x i32> %t2329.us, <i32 1, i32 1, i32 1, i32 1>
  %t2339.us = mul nsw <4 x i32> %1558, %884
  %1559 = add nsw i32 %f127.s0.v3.v323.base.us, 1
  %1560 = shl i32 %1559, 1
  %1561 = and i32 %1560, 2
  %1562 = ashr i32 %1559, 1
  %t2340.us = add nsw i32 %1561, %1562
  %1563 = shufflevector <4 x float> %1548, <4 x float> %1551, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2341.us = fmul <4 x float> %232, %1563
  %a845.us = fptosi <4 x float> %t2341.us to <4 x i32>
  %a848.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a845.us)
  %1564 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a848.us, <4 x i32> zeroinitializer)
  %1565 = sitofp <4 x i32> %1564 to <4 x float>
  %t2343.us = fsub <4 x float> %t2341.us, %1565
  %t2346.us = sub nsw <4 x i32> %1564, %241
  %1566 = sub nsw i32 %t2340.us, %f6.v3.min_realized
  %t2348.us = add nsw i32 %1566, %1529
  %t2349.us = mul nsw <4 x i32> %t2346.us, %884
  %1567 = sub nsw i32 %1562, %f6.v3.min_realized
  %t2351.us = add nsw i32 %1567, %1529
  %t2352.us = add nsw i32 %1566, %1531
  %t2353.us = add nsw i32 %1567, %1531
  %1568 = add nsw <4 x i32> %t2346.us, <i32 1, i32 1, i32 1, i32 1>
  %t2354.us = mul nsw <4 x i32> %1568, %884
  %1569 = insertelement <4 x i32> undef, i32 %t2338.us, i64 0
  %1570 = shufflevector <4 x i32> %1569, <4 x i32> undef, <4 x i32> zeroinitializer
  %1571 = add nsw <4 x i32> %1570, <i32 0, i32 1, i32 2, i32 3>
  %1572 = add nsw <4 x i32> %t2339.us, %1571
  %1573 = extractelement <4 x i32> %1572, i64 0
  %1574 = sext i32 %1573 to i64
  %1575 = getelementptr inbounds float, ptr %f6.host, i64 %1574
  %1576 = load float, ptr %1575, align 4, !tbaa !50
  %1577 = insertelement <4 x float> undef, float %1576, i64 0
  %1578 = extractelement <4 x i32> %1572, i64 1
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr inbounds float, ptr %f6.host, i64 %1579
  %1581 = load float, ptr %1580, align 4, !tbaa !50
  %1582 = insertelement <4 x float> %1577, float %1581, i64 1
  %1583 = extractelement <4 x i32> %1572, i64 2
  %1584 = sext i32 %1583 to i64
  %1585 = getelementptr inbounds float, ptr %f6.host, i64 %1584
  %1586 = load float, ptr %1585, align 4, !tbaa !50
  %1587 = insertelement <4 x float> %1582, float %1586, i64 2
  %1588 = extractelement <4 x i32> %1572, i64 3
  %1589 = sext i32 %1588 to i64
  %1590 = getelementptr inbounds float, ptr %f6.host, i64 %1589
  %1591 = load float, ptr %1590, align 4, !tbaa !50
  %1592 = insertelement <4 x float> %1587, float %1591, i64 3
  %1593 = fmul <4 x float> %1592, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1594 = insertelement <4 x i32> undef, i32 %t2337.us, i64 0
  %1595 = shufflevector <4 x i32> %1594, <4 x i32> undef, <4 x i32> zeroinitializer
  %1596 = add <4 x i32> %1595, <i32 -1, i32 0, i32 1, i32 2>
  %1597 = add <4 x i32> %1596, %t2339.us
  %1598 = extractelement <4 x i32> %1597, i64 0
  %1599 = sext i32 %1598 to i64
  %1600 = getelementptr inbounds float, ptr %f6.host, i64 %1599
  %1601 = load float, ptr %1600, align 4, !tbaa !50
  %1602 = insertelement <4 x float> undef, float %1601, i64 0
  %1603 = extractelement <4 x i32> %1597, i64 1
  %1604 = sext i32 %1603 to i64
  %1605 = getelementptr inbounds float, ptr %f6.host, i64 %1604
  %1606 = load float, ptr %1605, align 4, !tbaa !50
  %1607 = insertelement <4 x float> %1602, float %1606, i64 1
  %1608 = extractelement <4 x i32> %1597, i64 2
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds float, ptr %f6.host, i64 %1609
  %1611 = load float, ptr %1610, align 4, !tbaa !50
  %1612 = insertelement <4 x float> %1607, float %1611, i64 2
  %1613 = extractelement <4 x i32> %1597, i64 3
  %1614 = sext i32 %1613 to i64
  %1615 = getelementptr inbounds float, ptr %f6.host, i64 %1614
  %1616 = load float, ptr %1615, align 4, !tbaa !50
  %1617 = insertelement <4 x float> %1612, float %1616, i64 3
  %1618 = fmul <4 x float> %1617, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1619 = fadd <4 x float> %1593, %1618
  %1620 = fmul <4 x float> %1619, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1621 = insertelement <4 x i32> undef, i32 %t2335.us, i64 0
  %1622 = shufflevector <4 x i32> %1621, <4 x i32> undef, <4 x i32> zeroinitializer
  %1623 = add nsw <4 x i32> %1622, <i32 0, i32 1, i32 2, i32 3>
  %1624 = add nsw <4 x i32> %t2339.us, %1623
  %1625 = extractelement <4 x i32> %1624, i64 0
  %1626 = sext i32 %1625 to i64
  %1627 = getelementptr inbounds float, ptr %f6.host, i64 %1626
  %1628 = load float, ptr %1627, align 4, !tbaa !50
  %1629 = insertelement <4 x float> undef, float %1628, i64 0
  %1630 = extractelement <4 x i32> %1624, i64 1
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds float, ptr %f6.host, i64 %1631
  %1633 = load float, ptr %1632, align 4, !tbaa !50
  %1634 = insertelement <4 x float> %1629, float %1633, i64 1
  %1635 = extractelement <4 x i32> %1624, i64 2
  %1636 = sext i32 %1635 to i64
  %1637 = getelementptr inbounds float, ptr %f6.host, i64 %1636
  %1638 = load float, ptr %1637, align 4, !tbaa !50
  %1639 = insertelement <4 x float> %1634, float %1638, i64 2
  %1640 = extractelement <4 x i32> %1624, i64 3
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds float, ptr %f6.host, i64 %1641
  %1643 = load float, ptr %1642, align 4, !tbaa !50
  %1644 = insertelement <4 x float> %1639, float %1643, i64 3
  %1645 = fmul <4 x float> %1644, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1646 = insertelement <4 x i32> undef, i32 %t2332.us, i64 0
  %1647 = shufflevector <4 x i32> %1646, <4 x i32> undef, <4 x i32> zeroinitializer
  %1648 = add <4 x i32> %1647, <i32 -1, i32 0, i32 1, i32 2>
  %1649 = add <4 x i32> %1648, %t2339.us
  %1650 = extractelement <4 x i32> %1649, i64 0
  %1651 = sext i32 %1650 to i64
  %1652 = getelementptr inbounds float, ptr %f6.host, i64 %1651
  %1653 = load float, ptr %1652, align 4, !tbaa !50
  %1654 = insertelement <4 x float> undef, float %1653, i64 0
  %1655 = extractelement <4 x i32> %1649, i64 1
  %1656 = sext i32 %1655 to i64
  %1657 = getelementptr inbounds float, ptr %f6.host, i64 %1656
  %1658 = load float, ptr %1657, align 4, !tbaa !50
  %1659 = insertelement <4 x float> %1654, float %1658, i64 1
  %1660 = extractelement <4 x i32> %1649, i64 2
  %1661 = sext i32 %1660 to i64
  %1662 = getelementptr inbounds float, ptr %f6.host, i64 %1661
  %1663 = load float, ptr %1662, align 4, !tbaa !50
  %1664 = insertelement <4 x float> %1659, float %1663, i64 2
  %1665 = extractelement <4 x i32> %1649, i64 3
  %1666 = sext i32 %1665 to i64
  %1667 = getelementptr inbounds float, ptr %f6.host, i64 %1666
  %1668 = load float, ptr %1667, align 4, !tbaa !50
  %1669 = insertelement <4 x float> %1664, float %1668, i64 3
  %1670 = fmul <4 x float> %1669, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1671 = fadd <4 x float> %1645, %1670
  %1672 = fmul <4 x float> %1671, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1673 = fadd <4 x float> %1620, %1672
  %1674 = mul nsw <4 x i32> %1558, %1511
  %1675 = insertelement <4 x i32> undef, i32 %t2327.us, i64 0
  %1676 = shufflevector <4 x i32> %1675, <4 x i32> undef, <4 x i32> zeroinitializer
  %1677 = add nsw <4 x i32> %1676, <i32 0, i32 2, i32 4, i32 6>
  %1678 = add nsw <4 x i32> %1674, %1677
  %1679 = extractelement <4 x i32> %1678, i64 0
  %1680 = sext i32 %1679 to i64
  %1681 = getelementptr inbounds float, ptr %f5.host, i64 %1680
  %1682 = load float, ptr %1681, align 4, !tbaa !46
  %1683 = insertelement <4 x float> undef, float %1682, i64 0
  %1684 = extractelement <4 x i32> %1678, i64 1
  %1685 = sext i32 %1684 to i64
  %1686 = getelementptr inbounds float, ptr %f5.host, i64 %1685
  %1687 = load float, ptr %1686, align 4, !tbaa !46
  %1688 = insertelement <4 x float> %1683, float %1687, i64 1
  %1689 = extractelement <4 x i32> %1678, i64 2
  %1690 = sext i32 %1689 to i64
  %1691 = getelementptr inbounds float, ptr %f5.host, i64 %1690
  %1692 = load float, ptr %1691, align 4, !tbaa !46
  %1693 = insertelement <4 x float> %1688, float %1692, i64 2
  %1694 = extractelement <4 x i32> %1678, i64 3
  %1695 = sext i32 %1694 to i64
  %1696 = getelementptr inbounds float, ptr %f5.host, i64 %1695
  %1697 = load float, ptr %1696, align 4, !tbaa !46
  %1698 = insertelement <4 x float> %1693, float %1697, i64 3
  %1699 = fsub <4 x float> %1698, %1673
  %1700 = fmul <4 x float> %t2322.us, %1699
  %1701 = add nsw <4 x i32> %t2333.us, %1571
  %1702 = extractelement <4 x i32> %1701, i64 0
  %1703 = sext i32 %1702 to i64
  %1704 = getelementptr inbounds float, ptr %f6.host, i64 %1703
  %1705 = load float, ptr %1704, align 4, !tbaa !50
  %1706 = insertelement <4 x float> undef, float %1705, i64 0
  %1707 = extractelement <4 x i32> %1701, i64 1
  %1708 = sext i32 %1707 to i64
  %1709 = getelementptr inbounds float, ptr %f6.host, i64 %1708
  %1710 = load float, ptr %1709, align 4, !tbaa !50
  %1711 = insertelement <4 x float> %1706, float %1710, i64 1
  %1712 = extractelement <4 x i32> %1701, i64 2
  %1713 = sext i32 %1712 to i64
  %1714 = getelementptr inbounds float, ptr %f6.host, i64 %1713
  %1715 = load float, ptr %1714, align 4, !tbaa !50
  %1716 = insertelement <4 x float> %1711, float %1715, i64 2
  %1717 = extractelement <4 x i32> %1701, i64 3
  %1718 = sext i32 %1717 to i64
  %1719 = getelementptr inbounds float, ptr %f6.host, i64 %1718
  %1720 = load float, ptr %1719, align 4, !tbaa !50
  %1721 = insertelement <4 x float> %1716, float %1720, i64 3
  %1722 = fmul <4 x float> %1721, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1723 = add <4 x i32> %t2333.us, %1595
  %1724 = add <4 x i32> %1723, <i32 -1, i32 0, i32 1, i32 2>
  %1725 = extractelement <4 x i32> %1724, i64 0
  %1726 = sext i32 %1725 to i64
  %1727 = getelementptr inbounds float, ptr %f6.host, i64 %1726
  %1728 = load float, ptr %1727, align 4, !tbaa !50
  %1729 = insertelement <4 x float> undef, float %1728, i64 0
  %1730 = extractelement <4 x i32> %1724, i64 1
  %1731 = sext i32 %1730 to i64
  %1732 = getelementptr inbounds float, ptr %f6.host, i64 %1731
  %1733 = load float, ptr %1732, align 4, !tbaa !50
  %1734 = insertelement <4 x float> %1729, float %1733, i64 1
  %1735 = extractelement <4 x i32> %1724, i64 2
  %1736 = sext i32 %1735 to i64
  %1737 = getelementptr inbounds float, ptr %f6.host, i64 %1736
  %1738 = load float, ptr %1737, align 4, !tbaa !50
  %1739 = insertelement <4 x float> %1734, float %1738, i64 2
  %1740 = extractelement <4 x i32> %1724, i64 3
  %1741 = sext i32 %1740 to i64
  %1742 = getelementptr inbounds float, ptr %f6.host, i64 %1741
  %1743 = load float, ptr %1742, align 4, !tbaa !50
  %1744 = insertelement <4 x float> %1739, float %1743, i64 3
  %1745 = fmul <4 x float> %1744, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1746 = fadd <4 x float> %1722, %1745
  %1747 = fmul <4 x float> %1746, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1748 = add nsw <4 x i32> %t2333.us, %1623
  %1749 = extractelement <4 x i32> %1748, i64 0
  %1750 = sext i32 %1749 to i64
  %1751 = getelementptr inbounds float, ptr %f6.host, i64 %1750
  %1752 = load float, ptr %1751, align 4, !tbaa !50
  %1753 = insertelement <4 x float> undef, float %1752, i64 0
  %1754 = extractelement <4 x i32> %1748, i64 1
  %1755 = sext i32 %1754 to i64
  %1756 = getelementptr inbounds float, ptr %f6.host, i64 %1755
  %1757 = load float, ptr %1756, align 4, !tbaa !50
  %1758 = insertelement <4 x float> %1753, float %1757, i64 1
  %1759 = extractelement <4 x i32> %1748, i64 2
  %1760 = sext i32 %1759 to i64
  %1761 = getelementptr inbounds float, ptr %f6.host, i64 %1760
  %1762 = load float, ptr %1761, align 4, !tbaa !50
  %1763 = insertelement <4 x float> %1758, float %1762, i64 2
  %1764 = extractelement <4 x i32> %1748, i64 3
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds float, ptr %f6.host, i64 %1765
  %1767 = load float, ptr %1766, align 4, !tbaa !50
  %1768 = insertelement <4 x float> %1763, float %1767, i64 3
  %1769 = fmul <4 x float> %1768, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1770 = add <4 x i32> %t2333.us, %1647
  %1771 = add <4 x i32> %1770, <i32 -1, i32 0, i32 1, i32 2>
  %1772 = extractelement <4 x i32> %1771, i64 0
  %1773 = sext i32 %1772 to i64
  %1774 = getelementptr inbounds float, ptr %f6.host, i64 %1773
  %1775 = load float, ptr %1774, align 4, !tbaa !50
  %1776 = insertelement <4 x float> undef, float %1775, i64 0
  %1777 = extractelement <4 x i32> %1771, i64 1
  %1778 = sext i32 %1777 to i64
  %1779 = getelementptr inbounds float, ptr %f6.host, i64 %1778
  %1780 = load float, ptr %1779, align 4, !tbaa !50
  %1781 = insertelement <4 x float> %1776, float %1780, i64 1
  %1782 = extractelement <4 x i32> %1771, i64 2
  %1783 = sext i32 %1782 to i64
  %1784 = getelementptr inbounds float, ptr %f6.host, i64 %1783
  %1785 = load float, ptr %1784, align 4, !tbaa !50
  %1786 = insertelement <4 x float> %1781, float %1785, i64 2
  %1787 = extractelement <4 x i32> %1771, i64 3
  %1788 = sext i32 %1787 to i64
  %1789 = getelementptr inbounds float, ptr %f6.host, i64 %1788
  %1790 = load float, ptr %1789, align 4, !tbaa !50
  %1791 = insertelement <4 x float> %1786, float %1790, i64 3
  %1792 = fmul <4 x float> %1791, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1793 = fadd <4 x float> %1769, %1792
  %1794 = fmul <4 x float> %1793, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1795 = fadd <4 x float> %1747, %1794
  %1796 = mul nsw <4 x i32> %t2329.us, %1511
  %1797 = add nsw <4 x i32> %1796, %1677
  %1798 = extractelement <4 x i32> %1797, i64 0
  %1799 = sext i32 %1798 to i64
  %1800 = getelementptr inbounds float, ptr %f5.host, i64 %1799
  %1801 = load float, ptr %1800, align 4, !tbaa !46
  %1802 = insertelement <4 x float> undef, float %1801, i64 0
  %1803 = extractelement <4 x i32> %1797, i64 1
  %1804 = sext i32 %1803 to i64
  %1805 = getelementptr inbounds float, ptr %f5.host, i64 %1804
  %1806 = load float, ptr %1805, align 4, !tbaa !46
  %1807 = insertelement <4 x float> %1802, float %1806, i64 1
  %1808 = extractelement <4 x i32> %1797, i64 2
  %1809 = sext i32 %1808 to i64
  %1810 = getelementptr inbounds float, ptr %f5.host, i64 %1809
  %1811 = load float, ptr %1810, align 4, !tbaa !46
  %1812 = insertelement <4 x float> %1807, float %1811, i64 2
  %1813 = extractelement <4 x i32> %1797, i64 3
  %1814 = sext i32 %1813 to i64
  %1815 = getelementptr inbounds float, ptr %f5.host, i64 %1814
  %1816 = load float, ptr %1815, align 4, !tbaa !46
  %1817 = insertelement <4 x float> %1812, float %1816, i64 3
  %1818 = fsub <4 x float> %1817, %1795
  %1819 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2322.us
  %1820 = fmul <4 x float> %1819, %1818
  %1821 = fadd <4 x float> %1700, %1820
  %narrow152.us = sub nsw i32 %1545, %f128.v3.min_realized
  %1822 = sext i32 %narrow152.us to i64
  %1823 = add nsw i64 %1822, %1532
  %1824 = getelementptr inbounds float, ptr %154, i64 %1823
  %1825 = load <4 x float>, ptr %1824, align 4, !tbaa !66
  %1826 = fmul <4 x float> %1825, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1827 = sext i32 %t2318.us to i64
  %1828 = sub nsw i64 %1827, %1512
  %1829 = add nsw i64 %1533, %1828
  %1830 = getelementptr inbounds float, ptr %154, i64 %1829
  %1831 = load <4 x float>, ptr %1830, align 4, !tbaa !66
  %1832 = fmul <4 x float> %1831, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1833 = fadd <4 x float> %1826, %1832
  %1834 = fmul <4 x float> %1833, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1835 = add nsw i64 %1822, %1534
  %1836 = getelementptr inbounds float, ptr %154, i64 %1835
  %1837 = load <4 x float>, ptr %1836, align 4, !tbaa !66
  %1838 = fmul <4 x float> %1837, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1839 = add nsw i64 %1535, %1828
  %1840 = getelementptr inbounds float, ptr %154, i64 %1839
  %1841 = load <4 x float>, ptr %1840, align 4, !tbaa !66
  %1842 = fmul <4 x float> %1841, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1843 = fadd <4 x float> %1838, %1842
  %1844 = fmul <4 x float> %1843, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1845 = fadd <4 x float> %1834, %1844
  %1846 = fadd <4 x float> %1821, %1845
  %1847 = insertelement <4 x i32> undef, i32 %t2353.us, i64 0
  %1848 = shufflevector <4 x i32> %1847, <4 x i32> undef, <4 x i32> zeroinitializer
  %1849 = add nsw <4 x i32> %1848, <i32 0, i32 1, i32 2, i32 3>
  %1850 = add nsw <4 x i32> %t2354.us, %1849
  %1851 = extractelement <4 x i32> %1850, i64 0
  %1852 = sext i32 %1851 to i64
  %1853 = getelementptr inbounds float, ptr %f6.host, i64 %1852
  %1854 = load float, ptr %1853, align 4, !tbaa !50
  %1855 = insertelement <4 x float> undef, float %1854, i64 0
  %1856 = extractelement <4 x i32> %1850, i64 1
  %1857 = sext i32 %1856 to i64
  %1858 = getelementptr inbounds float, ptr %f6.host, i64 %1857
  %1859 = load float, ptr %1858, align 4, !tbaa !50
  %1860 = insertelement <4 x float> %1855, float %1859, i64 1
  %1861 = extractelement <4 x i32> %1850, i64 2
  %1862 = sext i32 %1861 to i64
  %1863 = getelementptr inbounds float, ptr %f6.host, i64 %1862
  %1864 = load float, ptr %1863, align 4, !tbaa !50
  %1865 = insertelement <4 x float> %1860, float %1864, i64 2
  %1866 = extractelement <4 x i32> %1850, i64 3
  %1867 = sext i32 %1866 to i64
  %1868 = getelementptr inbounds float, ptr %f6.host, i64 %1867
  %1869 = load float, ptr %1868, align 4, !tbaa !50
  %1870 = insertelement <4 x float> %1865, float %1869, i64 3
  %1871 = fmul <4 x float> %1870, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1872 = insertelement <4 x i32> undef, i32 %t2352.us, i64 0
  %1873 = shufflevector <4 x i32> %1872, <4 x i32> undef, <4 x i32> zeroinitializer
  %1874 = add nsw <4 x i32> %1873, <i32 0, i32 1, i32 2, i32 3>
  %1875 = add <4 x i32> %t2354.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1876 = add <4 x i32> %1875, %1874
  %1877 = extractelement <4 x i32> %1876, i64 0
  %1878 = sext i32 %1877 to i64
  %1879 = getelementptr inbounds float, ptr %f6.host, i64 %1878
  %1880 = load float, ptr %1879, align 4, !tbaa !50
  %1881 = insertelement <4 x float> undef, float %1880, i64 0
  %1882 = extractelement <4 x i32> %1876, i64 1
  %1883 = sext i32 %1882 to i64
  %1884 = getelementptr inbounds float, ptr %f6.host, i64 %1883
  %1885 = load float, ptr %1884, align 4, !tbaa !50
  %1886 = insertelement <4 x float> %1881, float %1885, i64 1
  %1887 = extractelement <4 x i32> %1876, i64 2
  %1888 = sext i32 %1887 to i64
  %1889 = getelementptr inbounds float, ptr %f6.host, i64 %1888
  %1890 = load float, ptr %1889, align 4, !tbaa !50
  %1891 = insertelement <4 x float> %1886, float %1890, i64 2
  %1892 = extractelement <4 x i32> %1876, i64 3
  %1893 = sext i32 %1892 to i64
  %1894 = getelementptr inbounds float, ptr %f6.host, i64 %1893
  %1895 = load float, ptr %1894, align 4, !tbaa !50
  %1896 = insertelement <4 x float> %1891, float %1895, i64 3
  %1897 = fmul <4 x float> %1896, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1898 = fadd <4 x float> %1871, %1897
  %1899 = fmul <4 x float> %1898, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1900 = insertelement <4 x i32> undef, i32 %t2351.us, i64 0
  %1901 = shufflevector <4 x i32> %1900, <4 x i32> undef, <4 x i32> zeroinitializer
  %1902 = add nsw <4 x i32> %1901, <i32 0, i32 1, i32 2, i32 3>
  %1903 = add nsw <4 x i32> %t2354.us, %1902
  %1904 = extractelement <4 x i32> %1903, i64 0
  %1905 = sext i32 %1904 to i64
  %1906 = getelementptr inbounds float, ptr %f6.host, i64 %1905
  %1907 = load float, ptr %1906, align 4, !tbaa !50
  %1908 = insertelement <4 x float> undef, float %1907, i64 0
  %1909 = extractelement <4 x i32> %1903, i64 1
  %1910 = sext i32 %1909 to i64
  %1911 = getelementptr inbounds float, ptr %f6.host, i64 %1910
  %1912 = load float, ptr %1911, align 4, !tbaa !50
  %1913 = insertelement <4 x float> %1908, float %1912, i64 1
  %1914 = extractelement <4 x i32> %1903, i64 2
  %1915 = sext i32 %1914 to i64
  %1916 = getelementptr inbounds float, ptr %f6.host, i64 %1915
  %1917 = load float, ptr %1916, align 4, !tbaa !50
  %1918 = insertelement <4 x float> %1913, float %1917, i64 2
  %1919 = extractelement <4 x i32> %1903, i64 3
  %1920 = sext i32 %1919 to i64
  %1921 = getelementptr inbounds float, ptr %f6.host, i64 %1920
  %1922 = load float, ptr %1921, align 4, !tbaa !50
  %1923 = insertelement <4 x float> %1918, float %1922, i64 3
  %1924 = fmul <4 x float> %1923, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1925 = insertelement <4 x i32> undef, i32 %t2348.us, i64 0
  %1926 = shufflevector <4 x i32> %1925, <4 x i32> undef, <4 x i32> zeroinitializer
  %1927 = add nsw <4 x i32> %1926, <i32 0, i32 1, i32 2, i32 3>
  %1928 = add <4 x i32> %1875, %1927
  %1929 = extractelement <4 x i32> %1928, i64 0
  %1930 = sext i32 %1929 to i64
  %1931 = getelementptr inbounds float, ptr %f6.host, i64 %1930
  %1932 = load float, ptr %1931, align 4, !tbaa !50
  %1933 = insertelement <4 x float> undef, float %1932, i64 0
  %1934 = extractelement <4 x i32> %1928, i64 1
  %1935 = sext i32 %1934 to i64
  %1936 = getelementptr inbounds float, ptr %f6.host, i64 %1935
  %1937 = load float, ptr %1936, align 4, !tbaa !50
  %1938 = insertelement <4 x float> %1933, float %1937, i64 1
  %1939 = extractelement <4 x i32> %1928, i64 2
  %1940 = sext i32 %1939 to i64
  %1941 = getelementptr inbounds float, ptr %f6.host, i64 %1940
  %1942 = load float, ptr %1941, align 4, !tbaa !50
  %1943 = insertelement <4 x float> %1938, float %1942, i64 2
  %1944 = extractelement <4 x i32> %1928, i64 3
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds float, ptr %f6.host, i64 %1945
  %1947 = load float, ptr %1946, align 4, !tbaa !50
  %1948 = insertelement <4 x float> %1943, float %1947, i64 3
  %1949 = fmul <4 x float> %1948, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1950 = fadd <4 x float> %1924, %1949
  %1951 = fmul <4 x float> %1950, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1952 = fadd <4 x float> %1899, %1951
  %1953 = mul nsw <4 x i32> %1568, %1511
  %1954 = add nsw i32 %t2327.us, 1
  %1955 = insertelement <4 x i32> undef, i32 %1954, i64 0
  %1956 = shufflevector <4 x i32> %1955, <4 x i32> undef, <4 x i32> zeroinitializer
  %1957 = add nsw <4 x i32> %1956, <i32 0, i32 2, i32 4, i32 6>
  %1958 = add nsw <4 x i32> %1953, %1957
  %1959 = extractelement <4 x i32> %1958, i64 0
  %1960 = sext i32 %1959 to i64
  %1961 = getelementptr inbounds float, ptr %f5.host, i64 %1960
  %1962 = load float, ptr %1961, align 4, !tbaa !46
  %1963 = insertelement <4 x float> undef, float %1962, i64 0
  %1964 = extractelement <4 x i32> %1958, i64 1
  %1965 = sext i32 %1964 to i64
  %1966 = getelementptr inbounds float, ptr %f5.host, i64 %1965
  %1967 = load float, ptr %1966, align 4, !tbaa !46
  %1968 = insertelement <4 x float> %1963, float %1967, i64 1
  %1969 = extractelement <4 x i32> %1958, i64 2
  %1970 = sext i32 %1969 to i64
  %1971 = getelementptr inbounds float, ptr %f5.host, i64 %1970
  %1972 = load float, ptr %1971, align 4, !tbaa !46
  %1973 = insertelement <4 x float> %1968, float %1972, i64 2
  %1974 = extractelement <4 x i32> %1958, i64 3
  %1975 = sext i32 %1974 to i64
  %1976 = getelementptr inbounds float, ptr %f5.host, i64 %1975
  %1977 = load float, ptr %1976, align 4, !tbaa !46
  %1978 = insertelement <4 x float> %1973, float %1977, i64 3
  %1979 = fsub <4 x float> %1978, %1952
  %1980 = fmul <4 x float> %t2343.us, %1979
  %1981 = add nsw <4 x i32> %t2349.us, %1849
  %1982 = extractelement <4 x i32> %1981, i64 0
  %1983 = sext i32 %1982 to i64
  %1984 = getelementptr inbounds float, ptr %f6.host, i64 %1983
  %1985 = load float, ptr %1984, align 4, !tbaa !50
  %1986 = insertelement <4 x float> undef, float %1985, i64 0
  %1987 = extractelement <4 x i32> %1981, i64 1
  %1988 = sext i32 %1987 to i64
  %1989 = getelementptr inbounds float, ptr %f6.host, i64 %1988
  %1990 = load float, ptr %1989, align 4, !tbaa !50
  %1991 = insertelement <4 x float> %1986, float %1990, i64 1
  %1992 = extractelement <4 x i32> %1981, i64 2
  %1993 = sext i32 %1992 to i64
  %1994 = getelementptr inbounds float, ptr %f6.host, i64 %1993
  %1995 = load float, ptr %1994, align 4, !tbaa !50
  %1996 = insertelement <4 x float> %1991, float %1995, i64 2
  %1997 = extractelement <4 x i32> %1981, i64 3
  %1998 = sext i32 %1997 to i64
  %1999 = getelementptr inbounds float, ptr %f6.host, i64 %1998
  %2000 = load float, ptr %1999, align 4, !tbaa !50
  %2001 = insertelement <4 x float> %1996, float %2000, i64 3
  %2002 = fmul <4 x float> %2001, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2003 = add <4 x i32> %t2349.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2004 = add <4 x i32> %2003, %1874
  %2005 = extractelement <4 x i32> %2004, i64 0
  %2006 = sext i32 %2005 to i64
  %2007 = getelementptr inbounds float, ptr %f6.host, i64 %2006
  %2008 = load float, ptr %2007, align 4, !tbaa !50
  %2009 = insertelement <4 x float> undef, float %2008, i64 0
  %2010 = extractelement <4 x i32> %2004, i64 1
  %2011 = sext i32 %2010 to i64
  %2012 = getelementptr inbounds float, ptr %f6.host, i64 %2011
  %2013 = load float, ptr %2012, align 4, !tbaa !50
  %2014 = insertelement <4 x float> %2009, float %2013, i64 1
  %2015 = extractelement <4 x i32> %2004, i64 2
  %2016 = sext i32 %2015 to i64
  %2017 = getelementptr inbounds float, ptr %f6.host, i64 %2016
  %2018 = load float, ptr %2017, align 4, !tbaa !50
  %2019 = insertelement <4 x float> %2014, float %2018, i64 2
  %2020 = extractelement <4 x i32> %2004, i64 3
  %2021 = sext i32 %2020 to i64
  %2022 = getelementptr inbounds float, ptr %f6.host, i64 %2021
  %2023 = load float, ptr %2022, align 4, !tbaa !50
  %2024 = insertelement <4 x float> %2019, float %2023, i64 3
  %2025 = fmul <4 x float> %2024, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2026 = fadd <4 x float> %2002, %2025
  %2027 = fmul <4 x float> %2026, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2028 = add nsw <4 x i32> %t2349.us, %1902
  %2029 = extractelement <4 x i32> %2028, i64 0
  %2030 = sext i32 %2029 to i64
  %2031 = getelementptr inbounds float, ptr %f6.host, i64 %2030
  %2032 = load float, ptr %2031, align 4, !tbaa !50
  %2033 = insertelement <4 x float> undef, float %2032, i64 0
  %2034 = extractelement <4 x i32> %2028, i64 1
  %2035 = sext i32 %2034 to i64
  %2036 = getelementptr inbounds float, ptr %f6.host, i64 %2035
  %2037 = load float, ptr %2036, align 4, !tbaa !50
  %2038 = insertelement <4 x float> %2033, float %2037, i64 1
  %2039 = extractelement <4 x i32> %2028, i64 2
  %2040 = sext i32 %2039 to i64
  %2041 = getelementptr inbounds float, ptr %f6.host, i64 %2040
  %2042 = load float, ptr %2041, align 4, !tbaa !50
  %2043 = insertelement <4 x float> %2038, float %2042, i64 2
  %2044 = extractelement <4 x i32> %2028, i64 3
  %2045 = sext i32 %2044 to i64
  %2046 = getelementptr inbounds float, ptr %f6.host, i64 %2045
  %2047 = load float, ptr %2046, align 4, !tbaa !50
  %2048 = insertelement <4 x float> %2043, float %2047, i64 3
  %2049 = fmul <4 x float> %2048, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2050 = add <4 x i32> %2003, %1927
  %2051 = extractelement <4 x i32> %2050, i64 0
  %2052 = sext i32 %2051 to i64
  %2053 = getelementptr inbounds float, ptr %f6.host, i64 %2052
  %2054 = load float, ptr %2053, align 4, !tbaa !50
  %2055 = insertelement <4 x float> undef, float %2054, i64 0
  %2056 = extractelement <4 x i32> %2050, i64 1
  %2057 = sext i32 %2056 to i64
  %2058 = getelementptr inbounds float, ptr %f6.host, i64 %2057
  %2059 = load float, ptr %2058, align 4, !tbaa !50
  %2060 = insertelement <4 x float> %2055, float %2059, i64 1
  %2061 = extractelement <4 x i32> %2050, i64 2
  %2062 = sext i32 %2061 to i64
  %2063 = getelementptr inbounds float, ptr %f6.host, i64 %2062
  %2064 = load float, ptr %2063, align 4, !tbaa !50
  %2065 = insertelement <4 x float> %2060, float %2064, i64 2
  %2066 = extractelement <4 x i32> %2050, i64 3
  %2067 = sext i32 %2066 to i64
  %2068 = getelementptr inbounds float, ptr %f6.host, i64 %2067
  %2069 = load float, ptr %2068, align 4, !tbaa !50
  %2070 = insertelement <4 x float> %2065, float %2069, i64 3
  %2071 = fmul <4 x float> %2070, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2072 = fadd <4 x float> %2049, %2071
  %2073 = fmul <4 x float> %2072, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2074 = fadd <4 x float> %2027, %2073
  %2075 = mul nsw <4 x i32> %t2346.us, %1511
  %2076 = add nsw <4 x i32> %2075, %1957
  %2077 = extractelement <4 x i32> %2076, i64 0
  %2078 = sext i32 %2077 to i64
  %2079 = getelementptr inbounds float, ptr %f5.host, i64 %2078
  %2080 = load float, ptr %2079, align 4, !tbaa !46
  %2081 = insertelement <4 x float> undef, float %2080, i64 0
  %2082 = extractelement <4 x i32> %2076, i64 1
  %2083 = sext i32 %2082 to i64
  %2084 = getelementptr inbounds float, ptr %f5.host, i64 %2083
  %2085 = load float, ptr %2084, align 4, !tbaa !46
  %2086 = insertelement <4 x float> %2081, float %2085, i64 1
  %2087 = extractelement <4 x i32> %2076, i64 2
  %2088 = sext i32 %2087 to i64
  %2089 = getelementptr inbounds float, ptr %f5.host, i64 %2088
  %2090 = load float, ptr %2089, align 4, !tbaa !46
  %2091 = insertelement <4 x float> %2086, float %2090, i64 2
  %2092 = extractelement <4 x i32> %2076, i64 3
  %2093 = sext i32 %2092 to i64
  %2094 = getelementptr inbounds float, ptr %f5.host, i64 %2093
  %2095 = load float, ptr %2094, align 4, !tbaa !46
  %2096 = insertelement <4 x float> %2091, float %2095, i64 3
  %2097 = fsub <4 x float> %2096, %2074
  %2098 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2343.us
  %2099 = fmul <4 x float> %2098, %2097
  %2100 = fadd <4 x float> %1980, %2099
  %narrow153.us = sub nsw i32 %1562, %f128.v3.min_realized
  %2101 = sext i32 %narrow153.us to i64
  %2102 = add nsw i64 %2101, %1532
  %2103 = getelementptr inbounds float, ptr %154, i64 %2102
  %2104 = load <4 x float>, ptr %2103, align 4, !tbaa !66
  %2105 = fmul <4 x float> %2104, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2106 = sext i32 %t2340.us to i64
  %2107 = sub nsw i64 %2106, %1512
  %2108 = add nsw i64 %1533, %2107
  %2109 = getelementptr inbounds float, ptr %154, i64 %2108
  %2110 = load <4 x float>, ptr %2109, align 4, !tbaa !66
  %2111 = fmul <4 x float> %2110, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2112 = fadd <4 x float> %2105, %2111
  %2113 = fmul <4 x float> %2112, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2114 = add nsw i64 %2101, %1534
  %2115 = getelementptr inbounds float, ptr %154, i64 %2114
  %2116 = load <4 x float>, ptr %2115, align 4, !tbaa !66
  %2117 = fmul <4 x float> %2116, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2118 = add nsw i64 %1535, %2107
  %2119 = getelementptr inbounds float, ptr %154, i64 %2118
  %2120 = load <4 x float>, ptr %2119, align 4, !tbaa !66
  %2121 = fmul <4 x float> %2120, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2122 = fadd <4 x float> %2117, %2121
  %2123 = fmul <4 x float> %2122, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2124 = fadd <4 x float> %2113, %2123
  %2125 = fadd <4 x float> %2100, %2124
  %2126 = shufflevector <4 x float> %1846, <4 x float> %2125, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %2127 = sext i32 %f127.s0.v3.v323.base.us to i64
  %2128 = add i64 %1538, %2127
  %2129 = getelementptr inbounds float, ptr %193, i64 %2128
  store <8 x float> %2126, ptr %2129, align 4, !tbaa !68
  %lsr.iv.next413.us = add i32 %lsr.iv412.us, -1
  %lsr.iv.next415.us = add i32 %lsr.iv414.us, 8
  %.not154.us = icmp eq i32 %lsr.iv.next413.us, 0
  br i1 %.not154.us, label %"end for f127.s0.v3.v3.loopexit.us", label %"for f127.s0.v3.v3.us"

"end for f127.s0.v3.v3.loopexit.us":              ; preds = %"for f127.s0.v3.v3.us"
  %indvars.iv.next318 = add nsw i64 %indvars.iv317, 1
  %2130 = icmp eq i64 %indvars.iv317, %sext319
  br i1 %2130, label %"for f126.s0.v4.preheader", label %"for f127.s0.v4.us"

"for f126.s0.v4.preheader":                       ; preds = %"end for f127.s0.v3.v3.loopexit.us", %"for f127.s0.v4.preheader"
  %2131 = add nsw i32 %167, 9
  %2132 = ashr i32 %2131, 3
  %2133 = icmp sgt i32 %167, -2
  %2134 = add nsw i32 %f72.v3.extent_realized.s, 1
  %2135 = xor i32 %f127.v4.min_realized, -1
  %2136 = xor i32 %f5.v4.min_realized, -1
  %2137 = add nsw i32 %f4.v3.extent_realized.s, 1
  %2138 = insertelement <4 x i32> undef, i32 %2137, i64 0
  %2139 = shufflevector <4 x i32> %2138, <4 x i32> undef, <4 x i32> zeroinitializer
  %2140 = sext i32 %f126.v3.extent_realized.s to i64
  %2141 = add nsw i64 %2140, 1
  %2142 = sext i32 %158 to i64
  %2143 = sext i32 %f126.v3.min_realized to i64
  br i1 %2133, label %"for f126.s0.v4.us.preheader", label %"consume f126", !prof !5

"for f126.s0.v4.us.preheader":                    ; preds = %"for f126.s0.v4.preheader"
  %2144 = add nsw i32 %156, 1
  %narrow367 = add nsw i32 %156, -1
  %2145 = sext i32 %narrow367 to i64
  %sext323 = sext i32 %2144 to i64
  br label %"for f126.s0.v4.us"

"for f126.s0.v4.us":                              ; preds = %"for f126.s0.v4.us.preheader", %"end for f126.s0.v3.v3.loopexit.us"
  %indvars.iv321 = phi i64 [ %2145, %"for f126.s0.v4.us.preheader" ], [ %indvars.iv.next322, %"end for f126.s0.v3.v3.loopexit.us" ]
  %2146 = trunc i64 %indvars.iv321 to i32
  %2147 = shl i32 %2146, 1
  %2148 = and i32 %2147, 2
  %2149 = ashr i32 %2146, 1
  %t2355.us = add nsw i32 %2148, %2149
  %2150 = trunc i64 %indvars.iv321 to i32
  %2151 = sub i32 %2150, %f72.v4.min_realized
  %2152 = mul i32 %2151, %2134
  %2153 = sub i32 %2152, %f72.v3.min_realized
  %2154 = add nsw i32 %t2355.us, %2135
  %t2362.us = mul nsw i32 %2154, %178
  %2155 = sub nsw i32 %2149, %f127.v4.min_realized
  %t2364.us = mul nsw i32 %2155, %178
  %2156 = add i32 %t2355.us, %2136
  %2157 = mul nsw i32 %2156, %f5.stride.1
  %2158 = sub nsw i32 %2149, %f5.v4.min_realized
  %2159 = mul nsw i32 %2158, %f5.stride.1
  %2160 = sext i32 %t2364.us to i64
  %2161 = add nsw i64 %2160, -1
  %2162 = sext i32 %t2362.us to i64
  %2163 = add nsw i64 %2162, -1
  %2164 = sub nsw i64 %indvars.iv321, %2142
  %2165 = mul nsw i64 %2164, %2141
  %2166 = sub i64 %2165, %2143
  %2167 = trunc i64 %indvars.iv321 to i32
  %2168 = sub i32 %2167, %f4.v4.min_realized
  %2169 = mul i32 %2168, %f4.stride.1
  br label %"for f126.s0.v3.v3.us"

"for f126.s0.v3.v3.us":                           ; preds = %"for f126.s0.v4.us", %"for f126.s0.v3.v3.us"
  %lsr.iv410.us = phi i32 [ %lsr.iv.next411.us, %"for f126.s0.v3.v3.us" ], [ -1, %"for f126.s0.v4.us" ]
  %lsr.iv408.us = phi i32 [ %lsr.iv.next409.us, %"for f126.s0.v3.v3.us" ], [ %2132, %"for f126.s0.v4.us" ]
  %2170 = add i32 %lsr.iv410.us, %161
  %f126.s0.v3.v303.base.us = tail call i32 @llvm.smin.i32(i32 %b806, i32 %2170)
  %2171 = shl i32 %f126.s0.v3.v303.base.us, 1
  %2172 = and i32 %2171, 2
  %2173 = ashr i32 %f126.s0.v3.v303.base.us, 1
  %t2356.us = add nsw i32 %2172, %2173
  %t2357.us = add i32 %2153, %f126.s0.v3.v303.base.us
  %2174 = sext i32 %t2357.us to i64
  %2175 = getelementptr inbounds float, ptr %f72.host, i64 %2174
  %2176 = load <4 x float>, ptr %2175, align 4, !tbaa !48
  %2177 = add nsw i64 %2174, 4
  %2178 = getelementptr inbounds float, ptr %f72.host, i64 %2177
  %2179 = load <4 x float>, ptr %2178, align 4, !tbaa !48
  %2180 = shufflevector <4 x float> %2176, <4 x float> %2179, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2358.us = fmul <4 x float> %232, %2180
  %a850.us = fptosi <4 x float> %t2358.us to <4 x i32>
  %a853.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a850.us)
  %2181 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a853.us, <4 x i32> zeroinitializer)
  %2182 = sitofp <4 x i32> %2181 to <4 x float>
  %t2360.us = fsub <4 x float> %t2358.us, %2182
  %2183 = sub nsw i32 %f126.s0.v3.v303.base.us, %f4.v3.min_realized
  %t2365.us = add nsw i32 %2183, %2169
  %t2367.us = sub nsw <4 x i32> %2181, %241
  %2184 = sub nsw i32 %t2356.us, %f5.v3.min_realized
  %t2370.us = add nsw i32 %2184, %2157
  %t2371.us = mul nsw <4 x i32> %t2367.us, %1511
  %2185 = sub nsw i32 %2173, %f5.v3.min_realized
  %t2373.us = add nsw i32 %2185, %2157
  %t2375.us = add nsw i32 %2184, %2159
  %t2376.us = add nsw i32 %2185, %2159
  %2186 = add nsw <4 x i32> %t2367.us, <i32 1, i32 1, i32 1, i32 1>
  %t2377.us = mul nsw <4 x i32> %2186, %1511
  %2187 = add nsw i32 %f126.s0.v3.v303.base.us, 1
  %2188 = shl i32 %2187, 1
  %2189 = and i32 %2188, 2
  %2190 = ashr i32 %2187, 1
  %t2378.us = add nsw i32 %2189, %2190
  %2191 = shufflevector <4 x float> %2176, <4 x float> %2179, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2379.us = fmul <4 x float> %232, %2191
  %a854.us = fptosi <4 x float> %t2379.us to <4 x i32>
  %a857.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a854.us)
  %2192 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a857.us, <4 x i32> zeroinitializer)
  %2193 = sitofp <4 x i32> %2192 to <4 x float>
  %t2381.us = fsub <4 x float> %t2379.us, %2193
  %t2384.us = sub nsw <4 x i32> %2192, %241
  %2194 = sub nsw i32 %t2378.us, %f5.v3.min_realized
  %t2386.us = add nsw i32 %2194, %2157
  %t2387.us = mul nsw <4 x i32> %t2384.us, %1511
  %2195 = sub nsw i32 %2190, %f5.v3.min_realized
  %t2389.us = add nsw i32 %2195, %2157
  %t2390.us = add nsw i32 %2194, %2159
  %t2391.us = add nsw i32 %2195, %2159
  %2196 = add nsw <4 x i32> %t2384.us, <i32 1, i32 1, i32 1, i32 1>
  %t2392.us = mul nsw <4 x i32> %2196, %1511
  %2197 = insertelement <4 x i32> undef, i32 %t2376.us, i64 0
  %2198 = shufflevector <4 x i32> %2197, <4 x i32> undef, <4 x i32> zeroinitializer
  %2199 = add nsw <4 x i32> %2198, <i32 0, i32 1, i32 2, i32 3>
  %2200 = add nsw <4 x i32> %t2377.us, %2199
  %2201 = extractelement <4 x i32> %2200, i64 0
  %2202 = sext i32 %2201 to i64
  %2203 = getelementptr inbounds float, ptr %f5.host, i64 %2202
  %2204 = load float, ptr %2203, align 4, !tbaa !46
  %2205 = insertelement <4 x float> undef, float %2204, i64 0
  %2206 = extractelement <4 x i32> %2200, i64 1
  %2207 = sext i32 %2206 to i64
  %2208 = getelementptr inbounds float, ptr %f5.host, i64 %2207
  %2209 = load float, ptr %2208, align 4, !tbaa !46
  %2210 = insertelement <4 x float> %2205, float %2209, i64 1
  %2211 = extractelement <4 x i32> %2200, i64 2
  %2212 = sext i32 %2211 to i64
  %2213 = getelementptr inbounds float, ptr %f5.host, i64 %2212
  %2214 = load float, ptr %2213, align 4, !tbaa !46
  %2215 = insertelement <4 x float> %2210, float %2214, i64 2
  %2216 = extractelement <4 x i32> %2200, i64 3
  %2217 = sext i32 %2216 to i64
  %2218 = getelementptr inbounds float, ptr %f5.host, i64 %2217
  %2219 = load float, ptr %2218, align 4, !tbaa !46
  %2220 = insertelement <4 x float> %2215, float %2219, i64 3
  %2221 = fmul <4 x float> %2220, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2222 = insertelement <4 x i32> undef, i32 %t2375.us, i64 0
  %2223 = shufflevector <4 x i32> %2222, <4 x i32> undef, <4 x i32> zeroinitializer
  %2224 = add <4 x i32> %2223, <i32 -1, i32 0, i32 1, i32 2>
  %2225 = add <4 x i32> %2224, %t2377.us
  %2226 = extractelement <4 x i32> %2225, i64 0
  %2227 = sext i32 %2226 to i64
  %2228 = getelementptr inbounds float, ptr %f5.host, i64 %2227
  %2229 = load float, ptr %2228, align 4, !tbaa !46
  %2230 = insertelement <4 x float> undef, float %2229, i64 0
  %2231 = extractelement <4 x i32> %2225, i64 1
  %2232 = sext i32 %2231 to i64
  %2233 = getelementptr inbounds float, ptr %f5.host, i64 %2232
  %2234 = load float, ptr %2233, align 4, !tbaa !46
  %2235 = insertelement <4 x float> %2230, float %2234, i64 1
  %2236 = extractelement <4 x i32> %2225, i64 2
  %2237 = sext i32 %2236 to i64
  %2238 = getelementptr inbounds float, ptr %f5.host, i64 %2237
  %2239 = load float, ptr %2238, align 4, !tbaa !46
  %2240 = insertelement <4 x float> %2235, float %2239, i64 2
  %2241 = extractelement <4 x i32> %2225, i64 3
  %2242 = sext i32 %2241 to i64
  %2243 = getelementptr inbounds float, ptr %f5.host, i64 %2242
  %2244 = load float, ptr %2243, align 4, !tbaa !46
  %2245 = insertelement <4 x float> %2240, float %2244, i64 3
  %2246 = fmul <4 x float> %2245, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2247 = fadd <4 x float> %2221, %2246
  %2248 = fmul <4 x float> %2247, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2249 = insertelement <4 x i32> undef, i32 %t2373.us, i64 0
  %2250 = shufflevector <4 x i32> %2249, <4 x i32> undef, <4 x i32> zeroinitializer
  %2251 = add nsw <4 x i32> %2250, <i32 0, i32 1, i32 2, i32 3>
  %2252 = add nsw <4 x i32> %t2377.us, %2251
  %2253 = extractelement <4 x i32> %2252, i64 0
  %2254 = sext i32 %2253 to i64
  %2255 = getelementptr inbounds float, ptr %f5.host, i64 %2254
  %2256 = load float, ptr %2255, align 4, !tbaa !46
  %2257 = insertelement <4 x float> undef, float %2256, i64 0
  %2258 = extractelement <4 x i32> %2252, i64 1
  %2259 = sext i32 %2258 to i64
  %2260 = getelementptr inbounds float, ptr %f5.host, i64 %2259
  %2261 = load float, ptr %2260, align 4, !tbaa !46
  %2262 = insertelement <4 x float> %2257, float %2261, i64 1
  %2263 = extractelement <4 x i32> %2252, i64 2
  %2264 = sext i32 %2263 to i64
  %2265 = getelementptr inbounds float, ptr %f5.host, i64 %2264
  %2266 = load float, ptr %2265, align 4, !tbaa !46
  %2267 = insertelement <4 x float> %2262, float %2266, i64 2
  %2268 = extractelement <4 x i32> %2252, i64 3
  %2269 = sext i32 %2268 to i64
  %2270 = getelementptr inbounds float, ptr %f5.host, i64 %2269
  %2271 = load float, ptr %2270, align 4, !tbaa !46
  %2272 = insertelement <4 x float> %2267, float %2271, i64 3
  %2273 = fmul <4 x float> %2272, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2274 = insertelement <4 x i32> undef, i32 %t2370.us, i64 0
  %2275 = shufflevector <4 x i32> %2274, <4 x i32> undef, <4 x i32> zeroinitializer
  %2276 = add <4 x i32> %2275, <i32 -1, i32 0, i32 1, i32 2>
  %2277 = add <4 x i32> %2276, %t2377.us
  %2278 = extractelement <4 x i32> %2277, i64 0
  %2279 = sext i32 %2278 to i64
  %2280 = getelementptr inbounds float, ptr %f5.host, i64 %2279
  %2281 = load float, ptr %2280, align 4, !tbaa !46
  %2282 = insertelement <4 x float> undef, float %2281, i64 0
  %2283 = extractelement <4 x i32> %2277, i64 1
  %2284 = sext i32 %2283 to i64
  %2285 = getelementptr inbounds float, ptr %f5.host, i64 %2284
  %2286 = load float, ptr %2285, align 4, !tbaa !46
  %2287 = insertelement <4 x float> %2282, float %2286, i64 1
  %2288 = extractelement <4 x i32> %2277, i64 2
  %2289 = sext i32 %2288 to i64
  %2290 = getelementptr inbounds float, ptr %f5.host, i64 %2289
  %2291 = load float, ptr %2290, align 4, !tbaa !46
  %2292 = insertelement <4 x float> %2287, float %2291, i64 2
  %2293 = extractelement <4 x i32> %2277, i64 3
  %2294 = sext i32 %2293 to i64
  %2295 = getelementptr inbounds float, ptr %f5.host, i64 %2294
  %2296 = load float, ptr %2295, align 4, !tbaa !46
  %2297 = insertelement <4 x float> %2292, float %2296, i64 3
  %2298 = fmul <4 x float> %2297, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2299 = fadd <4 x float> %2273, %2298
  %2300 = fmul <4 x float> %2299, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2301 = fadd <4 x float> %2248, %2300
  %2302 = mul nsw <4 x i32> %2186, %2139
  %2303 = insertelement <4 x i32> undef, i32 %t2365.us, i64 0
  %2304 = shufflevector <4 x i32> %2303, <4 x i32> undef, <4 x i32> zeroinitializer
  %2305 = add nsw <4 x i32> %2304, <i32 0, i32 2, i32 4, i32 6>
  %2306 = add nsw <4 x i32> %2302, %2305
  %2307 = extractelement <4 x i32> %2306, i64 0
  %2308 = sext i32 %2307 to i64
  %2309 = getelementptr inbounds float, ptr %f4.host, i64 %2308
  %2310 = load float, ptr %2309, align 4, !tbaa !44
  %2311 = insertelement <4 x float> undef, float %2310, i64 0
  %2312 = extractelement <4 x i32> %2306, i64 1
  %2313 = sext i32 %2312 to i64
  %2314 = getelementptr inbounds float, ptr %f4.host, i64 %2313
  %2315 = load float, ptr %2314, align 4, !tbaa !44
  %2316 = insertelement <4 x float> %2311, float %2315, i64 1
  %2317 = extractelement <4 x i32> %2306, i64 2
  %2318 = sext i32 %2317 to i64
  %2319 = getelementptr inbounds float, ptr %f4.host, i64 %2318
  %2320 = load float, ptr %2319, align 4, !tbaa !44
  %2321 = insertelement <4 x float> %2316, float %2320, i64 2
  %2322 = extractelement <4 x i32> %2306, i64 3
  %2323 = sext i32 %2322 to i64
  %2324 = getelementptr inbounds float, ptr %f4.host, i64 %2323
  %2325 = load float, ptr %2324, align 4, !tbaa !44
  %2326 = insertelement <4 x float> %2321, float %2325, i64 3
  %2327 = fsub <4 x float> %2326, %2301
  %2328 = fmul <4 x float> %t2360.us, %2327
  %2329 = add nsw <4 x i32> %t2371.us, %2199
  %2330 = extractelement <4 x i32> %2329, i64 0
  %2331 = sext i32 %2330 to i64
  %2332 = getelementptr inbounds float, ptr %f5.host, i64 %2331
  %2333 = load float, ptr %2332, align 4, !tbaa !46
  %2334 = insertelement <4 x float> undef, float %2333, i64 0
  %2335 = extractelement <4 x i32> %2329, i64 1
  %2336 = sext i32 %2335 to i64
  %2337 = getelementptr inbounds float, ptr %f5.host, i64 %2336
  %2338 = load float, ptr %2337, align 4, !tbaa !46
  %2339 = insertelement <4 x float> %2334, float %2338, i64 1
  %2340 = extractelement <4 x i32> %2329, i64 2
  %2341 = sext i32 %2340 to i64
  %2342 = getelementptr inbounds float, ptr %f5.host, i64 %2341
  %2343 = load float, ptr %2342, align 4, !tbaa !46
  %2344 = insertelement <4 x float> %2339, float %2343, i64 2
  %2345 = extractelement <4 x i32> %2329, i64 3
  %2346 = sext i32 %2345 to i64
  %2347 = getelementptr inbounds float, ptr %f5.host, i64 %2346
  %2348 = load float, ptr %2347, align 4, !tbaa !46
  %2349 = insertelement <4 x float> %2344, float %2348, i64 3
  %2350 = fmul <4 x float> %2349, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2351 = add <4 x i32> %t2371.us, %2223
  %2352 = add <4 x i32> %2351, <i32 -1, i32 0, i32 1, i32 2>
  %2353 = extractelement <4 x i32> %2352, i64 0
  %2354 = sext i32 %2353 to i64
  %2355 = getelementptr inbounds float, ptr %f5.host, i64 %2354
  %2356 = load float, ptr %2355, align 4, !tbaa !46
  %2357 = insertelement <4 x float> undef, float %2356, i64 0
  %2358 = extractelement <4 x i32> %2352, i64 1
  %2359 = sext i32 %2358 to i64
  %2360 = getelementptr inbounds float, ptr %f5.host, i64 %2359
  %2361 = load float, ptr %2360, align 4, !tbaa !46
  %2362 = insertelement <4 x float> %2357, float %2361, i64 1
  %2363 = extractelement <4 x i32> %2352, i64 2
  %2364 = sext i32 %2363 to i64
  %2365 = getelementptr inbounds float, ptr %f5.host, i64 %2364
  %2366 = load float, ptr %2365, align 4, !tbaa !46
  %2367 = insertelement <4 x float> %2362, float %2366, i64 2
  %2368 = extractelement <4 x i32> %2352, i64 3
  %2369 = sext i32 %2368 to i64
  %2370 = getelementptr inbounds float, ptr %f5.host, i64 %2369
  %2371 = load float, ptr %2370, align 4, !tbaa !46
  %2372 = insertelement <4 x float> %2367, float %2371, i64 3
  %2373 = fmul <4 x float> %2372, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2374 = fadd <4 x float> %2350, %2373
  %2375 = fmul <4 x float> %2374, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2376 = add nsw <4 x i32> %t2371.us, %2251
  %2377 = extractelement <4 x i32> %2376, i64 0
  %2378 = sext i32 %2377 to i64
  %2379 = getelementptr inbounds float, ptr %f5.host, i64 %2378
  %2380 = load float, ptr %2379, align 4, !tbaa !46
  %2381 = insertelement <4 x float> undef, float %2380, i64 0
  %2382 = extractelement <4 x i32> %2376, i64 1
  %2383 = sext i32 %2382 to i64
  %2384 = getelementptr inbounds float, ptr %f5.host, i64 %2383
  %2385 = load float, ptr %2384, align 4, !tbaa !46
  %2386 = insertelement <4 x float> %2381, float %2385, i64 1
  %2387 = extractelement <4 x i32> %2376, i64 2
  %2388 = sext i32 %2387 to i64
  %2389 = getelementptr inbounds float, ptr %f5.host, i64 %2388
  %2390 = load float, ptr %2389, align 4, !tbaa !46
  %2391 = insertelement <4 x float> %2386, float %2390, i64 2
  %2392 = extractelement <4 x i32> %2376, i64 3
  %2393 = sext i32 %2392 to i64
  %2394 = getelementptr inbounds float, ptr %f5.host, i64 %2393
  %2395 = load float, ptr %2394, align 4, !tbaa !46
  %2396 = insertelement <4 x float> %2391, float %2395, i64 3
  %2397 = fmul <4 x float> %2396, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2398 = add <4 x i32> %t2371.us, %2275
  %2399 = add <4 x i32> %2398, <i32 -1, i32 0, i32 1, i32 2>
  %2400 = extractelement <4 x i32> %2399, i64 0
  %2401 = sext i32 %2400 to i64
  %2402 = getelementptr inbounds float, ptr %f5.host, i64 %2401
  %2403 = load float, ptr %2402, align 4, !tbaa !46
  %2404 = insertelement <4 x float> undef, float %2403, i64 0
  %2405 = extractelement <4 x i32> %2399, i64 1
  %2406 = sext i32 %2405 to i64
  %2407 = getelementptr inbounds float, ptr %f5.host, i64 %2406
  %2408 = load float, ptr %2407, align 4, !tbaa !46
  %2409 = insertelement <4 x float> %2404, float %2408, i64 1
  %2410 = extractelement <4 x i32> %2399, i64 2
  %2411 = sext i32 %2410 to i64
  %2412 = getelementptr inbounds float, ptr %f5.host, i64 %2411
  %2413 = load float, ptr %2412, align 4, !tbaa !46
  %2414 = insertelement <4 x float> %2409, float %2413, i64 2
  %2415 = extractelement <4 x i32> %2399, i64 3
  %2416 = sext i32 %2415 to i64
  %2417 = getelementptr inbounds float, ptr %f5.host, i64 %2416
  %2418 = load float, ptr %2417, align 4, !tbaa !46
  %2419 = insertelement <4 x float> %2414, float %2418, i64 3
  %2420 = fmul <4 x float> %2419, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2421 = fadd <4 x float> %2397, %2420
  %2422 = fmul <4 x float> %2421, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2423 = fadd <4 x float> %2375, %2422
  %2424 = mul nsw <4 x i32> %t2367.us, %2139
  %2425 = add nsw <4 x i32> %2424, %2305
  %2426 = extractelement <4 x i32> %2425, i64 0
  %2427 = sext i32 %2426 to i64
  %2428 = getelementptr inbounds float, ptr %f4.host, i64 %2427
  %2429 = load float, ptr %2428, align 4, !tbaa !44
  %2430 = insertelement <4 x float> undef, float %2429, i64 0
  %2431 = extractelement <4 x i32> %2425, i64 1
  %2432 = sext i32 %2431 to i64
  %2433 = getelementptr inbounds float, ptr %f4.host, i64 %2432
  %2434 = load float, ptr %2433, align 4, !tbaa !44
  %2435 = insertelement <4 x float> %2430, float %2434, i64 1
  %2436 = extractelement <4 x i32> %2425, i64 2
  %2437 = sext i32 %2436 to i64
  %2438 = getelementptr inbounds float, ptr %f4.host, i64 %2437
  %2439 = load float, ptr %2438, align 4, !tbaa !44
  %2440 = insertelement <4 x float> %2435, float %2439, i64 2
  %2441 = extractelement <4 x i32> %2425, i64 3
  %2442 = sext i32 %2441 to i64
  %2443 = getelementptr inbounds float, ptr %f4.host, i64 %2442
  %2444 = load float, ptr %2443, align 4, !tbaa !44
  %2445 = insertelement <4 x float> %2440, float %2444, i64 3
  %2446 = fsub <4 x float> %2445, %2423
  %2447 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2360.us
  %2448 = fmul <4 x float> %2447, %2446
  %2449 = fadd <4 x float> %2328, %2448
  %2450 = sext i32 %2173 to i64
  %2451 = sub nsw i64 %2450, %1516
  %2452 = add nsw i64 %2451, %2160
  %2453 = getelementptr inbounds float, ptr %193, i64 %2452
  %2454 = load <4 x float>, ptr %2453, align 4, !tbaa !68
  %2455 = fmul <4 x float> %2454, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2456 = sext i32 %t2356.us to i64
  %2457 = sub nsw i64 %2456, %1516
  %2458 = add nsw i64 %2161, %2457
  %2459 = getelementptr inbounds float, ptr %193, i64 %2458
  %2460 = load <4 x float>, ptr %2459, align 4, !tbaa !68
  %2461 = fmul <4 x float> %2460, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2462 = fadd <4 x float> %2455, %2461
  %2463 = fmul <4 x float> %2462, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2464 = add nsw i64 %2451, %2162
  %2465 = getelementptr inbounds float, ptr %193, i64 %2464
  %2466 = load <4 x float>, ptr %2465, align 4, !tbaa !68
  %2467 = fmul <4 x float> %2466, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2468 = add nsw i64 %2163, %2457
  %2469 = getelementptr inbounds float, ptr %193, i64 %2468
  %2470 = load <4 x float>, ptr %2469, align 4, !tbaa !68
  %2471 = fmul <4 x float> %2470, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2472 = fadd <4 x float> %2467, %2471
  %2473 = fmul <4 x float> %2472, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2474 = fadd <4 x float> %2463, %2473
  %2475 = fadd <4 x float> %2449, %2474
  %2476 = insertelement <4 x i32> undef, i32 %t2391.us, i64 0
  %2477 = shufflevector <4 x i32> %2476, <4 x i32> undef, <4 x i32> zeroinitializer
  %2478 = add nsw <4 x i32> %2477, <i32 0, i32 1, i32 2, i32 3>
  %2479 = add nsw <4 x i32> %t2392.us, %2478
  %2480 = extractelement <4 x i32> %2479, i64 0
  %2481 = sext i32 %2480 to i64
  %2482 = getelementptr inbounds float, ptr %f5.host, i64 %2481
  %2483 = load float, ptr %2482, align 4, !tbaa !46
  %2484 = insertelement <4 x float> undef, float %2483, i64 0
  %2485 = extractelement <4 x i32> %2479, i64 1
  %2486 = sext i32 %2485 to i64
  %2487 = getelementptr inbounds float, ptr %f5.host, i64 %2486
  %2488 = load float, ptr %2487, align 4, !tbaa !46
  %2489 = insertelement <4 x float> %2484, float %2488, i64 1
  %2490 = extractelement <4 x i32> %2479, i64 2
  %2491 = sext i32 %2490 to i64
  %2492 = getelementptr inbounds float, ptr %f5.host, i64 %2491
  %2493 = load float, ptr %2492, align 4, !tbaa !46
  %2494 = insertelement <4 x float> %2489, float %2493, i64 2
  %2495 = extractelement <4 x i32> %2479, i64 3
  %2496 = sext i32 %2495 to i64
  %2497 = getelementptr inbounds float, ptr %f5.host, i64 %2496
  %2498 = load float, ptr %2497, align 4, !tbaa !46
  %2499 = insertelement <4 x float> %2494, float %2498, i64 3
  %2500 = fmul <4 x float> %2499, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2501 = insertelement <4 x i32> undef, i32 %t2390.us, i64 0
  %2502 = shufflevector <4 x i32> %2501, <4 x i32> undef, <4 x i32> zeroinitializer
  %2503 = add nsw <4 x i32> %2502, <i32 0, i32 1, i32 2, i32 3>
  %2504 = add <4 x i32> %t2392.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2505 = add <4 x i32> %2504, %2503
  %2506 = extractelement <4 x i32> %2505, i64 0
  %2507 = sext i32 %2506 to i64
  %2508 = getelementptr inbounds float, ptr %f5.host, i64 %2507
  %2509 = load float, ptr %2508, align 4, !tbaa !46
  %2510 = insertelement <4 x float> undef, float %2509, i64 0
  %2511 = extractelement <4 x i32> %2505, i64 1
  %2512 = sext i32 %2511 to i64
  %2513 = getelementptr inbounds float, ptr %f5.host, i64 %2512
  %2514 = load float, ptr %2513, align 4, !tbaa !46
  %2515 = insertelement <4 x float> %2510, float %2514, i64 1
  %2516 = extractelement <4 x i32> %2505, i64 2
  %2517 = sext i32 %2516 to i64
  %2518 = getelementptr inbounds float, ptr %f5.host, i64 %2517
  %2519 = load float, ptr %2518, align 4, !tbaa !46
  %2520 = insertelement <4 x float> %2515, float %2519, i64 2
  %2521 = extractelement <4 x i32> %2505, i64 3
  %2522 = sext i32 %2521 to i64
  %2523 = getelementptr inbounds float, ptr %f5.host, i64 %2522
  %2524 = load float, ptr %2523, align 4, !tbaa !46
  %2525 = insertelement <4 x float> %2520, float %2524, i64 3
  %2526 = fmul <4 x float> %2525, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2527 = fadd <4 x float> %2500, %2526
  %2528 = fmul <4 x float> %2527, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2529 = insertelement <4 x i32> undef, i32 %t2389.us, i64 0
  %2530 = shufflevector <4 x i32> %2529, <4 x i32> undef, <4 x i32> zeroinitializer
  %2531 = add nsw <4 x i32> %2530, <i32 0, i32 1, i32 2, i32 3>
  %2532 = add nsw <4 x i32> %t2392.us, %2531
  %2533 = extractelement <4 x i32> %2532, i64 0
  %2534 = sext i32 %2533 to i64
  %2535 = getelementptr inbounds float, ptr %f5.host, i64 %2534
  %2536 = load float, ptr %2535, align 4, !tbaa !46
  %2537 = insertelement <4 x float> undef, float %2536, i64 0
  %2538 = extractelement <4 x i32> %2532, i64 1
  %2539 = sext i32 %2538 to i64
  %2540 = getelementptr inbounds float, ptr %f5.host, i64 %2539
  %2541 = load float, ptr %2540, align 4, !tbaa !46
  %2542 = insertelement <4 x float> %2537, float %2541, i64 1
  %2543 = extractelement <4 x i32> %2532, i64 2
  %2544 = sext i32 %2543 to i64
  %2545 = getelementptr inbounds float, ptr %f5.host, i64 %2544
  %2546 = load float, ptr %2545, align 4, !tbaa !46
  %2547 = insertelement <4 x float> %2542, float %2546, i64 2
  %2548 = extractelement <4 x i32> %2532, i64 3
  %2549 = sext i32 %2548 to i64
  %2550 = getelementptr inbounds float, ptr %f5.host, i64 %2549
  %2551 = load float, ptr %2550, align 4, !tbaa !46
  %2552 = insertelement <4 x float> %2547, float %2551, i64 3
  %2553 = fmul <4 x float> %2552, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2554 = insertelement <4 x i32> undef, i32 %t2386.us, i64 0
  %2555 = shufflevector <4 x i32> %2554, <4 x i32> undef, <4 x i32> zeroinitializer
  %2556 = add nsw <4 x i32> %2555, <i32 0, i32 1, i32 2, i32 3>
  %2557 = add <4 x i32> %2504, %2556
  %2558 = extractelement <4 x i32> %2557, i64 0
  %2559 = sext i32 %2558 to i64
  %2560 = getelementptr inbounds float, ptr %f5.host, i64 %2559
  %2561 = load float, ptr %2560, align 4, !tbaa !46
  %2562 = insertelement <4 x float> undef, float %2561, i64 0
  %2563 = extractelement <4 x i32> %2557, i64 1
  %2564 = sext i32 %2563 to i64
  %2565 = getelementptr inbounds float, ptr %f5.host, i64 %2564
  %2566 = load float, ptr %2565, align 4, !tbaa !46
  %2567 = insertelement <4 x float> %2562, float %2566, i64 1
  %2568 = extractelement <4 x i32> %2557, i64 2
  %2569 = sext i32 %2568 to i64
  %2570 = getelementptr inbounds float, ptr %f5.host, i64 %2569
  %2571 = load float, ptr %2570, align 4, !tbaa !46
  %2572 = insertelement <4 x float> %2567, float %2571, i64 2
  %2573 = extractelement <4 x i32> %2557, i64 3
  %2574 = sext i32 %2573 to i64
  %2575 = getelementptr inbounds float, ptr %f5.host, i64 %2574
  %2576 = load float, ptr %2575, align 4, !tbaa !46
  %2577 = insertelement <4 x float> %2572, float %2576, i64 3
  %2578 = fmul <4 x float> %2577, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2579 = fadd <4 x float> %2553, %2578
  %2580 = fmul <4 x float> %2579, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2581 = fadd <4 x float> %2528, %2580
  %2582 = mul nsw <4 x i32> %2196, %2139
  %2583 = add nsw i32 %t2365.us, 1
  %2584 = insertelement <4 x i32> undef, i32 %2583, i64 0
  %2585 = shufflevector <4 x i32> %2584, <4 x i32> undef, <4 x i32> zeroinitializer
  %2586 = add nsw <4 x i32> %2585, <i32 0, i32 2, i32 4, i32 6>
  %2587 = add nsw <4 x i32> %2582, %2586
  %2588 = extractelement <4 x i32> %2587, i64 0
  %2589 = sext i32 %2588 to i64
  %2590 = getelementptr inbounds float, ptr %f4.host, i64 %2589
  %2591 = load float, ptr %2590, align 4, !tbaa !44
  %2592 = insertelement <4 x float> undef, float %2591, i64 0
  %2593 = extractelement <4 x i32> %2587, i64 1
  %2594 = sext i32 %2593 to i64
  %2595 = getelementptr inbounds float, ptr %f4.host, i64 %2594
  %2596 = load float, ptr %2595, align 4, !tbaa !44
  %2597 = insertelement <4 x float> %2592, float %2596, i64 1
  %2598 = extractelement <4 x i32> %2587, i64 2
  %2599 = sext i32 %2598 to i64
  %2600 = getelementptr inbounds float, ptr %f4.host, i64 %2599
  %2601 = load float, ptr %2600, align 4, !tbaa !44
  %2602 = insertelement <4 x float> %2597, float %2601, i64 2
  %2603 = extractelement <4 x i32> %2587, i64 3
  %2604 = sext i32 %2603 to i64
  %2605 = getelementptr inbounds float, ptr %f4.host, i64 %2604
  %2606 = load float, ptr %2605, align 4, !tbaa !44
  %2607 = insertelement <4 x float> %2602, float %2606, i64 3
  %2608 = fsub <4 x float> %2607, %2581
  %2609 = fmul <4 x float> %t2381.us, %2608
  %2610 = add nsw <4 x i32> %t2387.us, %2478
  %2611 = extractelement <4 x i32> %2610, i64 0
  %2612 = sext i32 %2611 to i64
  %2613 = getelementptr inbounds float, ptr %f5.host, i64 %2612
  %2614 = load float, ptr %2613, align 4, !tbaa !46
  %2615 = insertelement <4 x float> undef, float %2614, i64 0
  %2616 = extractelement <4 x i32> %2610, i64 1
  %2617 = sext i32 %2616 to i64
  %2618 = getelementptr inbounds float, ptr %f5.host, i64 %2617
  %2619 = load float, ptr %2618, align 4, !tbaa !46
  %2620 = insertelement <4 x float> %2615, float %2619, i64 1
  %2621 = extractelement <4 x i32> %2610, i64 2
  %2622 = sext i32 %2621 to i64
  %2623 = getelementptr inbounds float, ptr %f5.host, i64 %2622
  %2624 = load float, ptr %2623, align 4, !tbaa !46
  %2625 = insertelement <4 x float> %2620, float %2624, i64 2
  %2626 = extractelement <4 x i32> %2610, i64 3
  %2627 = sext i32 %2626 to i64
  %2628 = getelementptr inbounds float, ptr %f5.host, i64 %2627
  %2629 = load float, ptr %2628, align 4, !tbaa !46
  %2630 = insertelement <4 x float> %2625, float %2629, i64 3
  %2631 = fmul <4 x float> %2630, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2632 = add <4 x i32> %t2387.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2633 = add <4 x i32> %2632, %2503
  %2634 = extractelement <4 x i32> %2633, i64 0
  %2635 = sext i32 %2634 to i64
  %2636 = getelementptr inbounds float, ptr %f5.host, i64 %2635
  %2637 = load float, ptr %2636, align 4, !tbaa !46
  %2638 = insertelement <4 x float> undef, float %2637, i64 0
  %2639 = extractelement <4 x i32> %2633, i64 1
  %2640 = sext i32 %2639 to i64
  %2641 = getelementptr inbounds float, ptr %f5.host, i64 %2640
  %2642 = load float, ptr %2641, align 4, !tbaa !46
  %2643 = insertelement <4 x float> %2638, float %2642, i64 1
  %2644 = extractelement <4 x i32> %2633, i64 2
  %2645 = sext i32 %2644 to i64
  %2646 = getelementptr inbounds float, ptr %f5.host, i64 %2645
  %2647 = load float, ptr %2646, align 4, !tbaa !46
  %2648 = insertelement <4 x float> %2643, float %2647, i64 2
  %2649 = extractelement <4 x i32> %2633, i64 3
  %2650 = sext i32 %2649 to i64
  %2651 = getelementptr inbounds float, ptr %f5.host, i64 %2650
  %2652 = load float, ptr %2651, align 4, !tbaa !46
  %2653 = insertelement <4 x float> %2648, float %2652, i64 3
  %2654 = fmul <4 x float> %2653, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2655 = fadd <4 x float> %2631, %2654
  %2656 = fmul <4 x float> %2655, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2657 = add nsw <4 x i32> %t2387.us, %2531
  %2658 = extractelement <4 x i32> %2657, i64 0
  %2659 = sext i32 %2658 to i64
  %2660 = getelementptr inbounds float, ptr %f5.host, i64 %2659
  %2661 = load float, ptr %2660, align 4, !tbaa !46
  %2662 = insertelement <4 x float> undef, float %2661, i64 0
  %2663 = extractelement <4 x i32> %2657, i64 1
  %2664 = sext i32 %2663 to i64
  %2665 = getelementptr inbounds float, ptr %f5.host, i64 %2664
  %2666 = load float, ptr %2665, align 4, !tbaa !46
  %2667 = insertelement <4 x float> %2662, float %2666, i64 1
  %2668 = extractelement <4 x i32> %2657, i64 2
  %2669 = sext i32 %2668 to i64
  %2670 = getelementptr inbounds float, ptr %f5.host, i64 %2669
  %2671 = load float, ptr %2670, align 4, !tbaa !46
  %2672 = insertelement <4 x float> %2667, float %2671, i64 2
  %2673 = extractelement <4 x i32> %2657, i64 3
  %2674 = sext i32 %2673 to i64
  %2675 = getelementptr inbounds float, ptr %f5.host, i64 %2674
  %2676 = load float, ptr %2675, align 4, !tbaa !46
  %2677 = insertelement <4 x float> %2672, float %2676, i64 3
  %2678 = fmul <4 x float> %2677, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2679 = add <4 x i32> %2632, %2556
  %2680 = extractelement <4 x i32> %2679, i64 0
  %2681 = sext i32 %2680 to i64
  %2682 = getelementptr inbounds float, ptr %f5.host, i64 %2681
  %2683 = load float, ptr %2682, align 4, !tbaa !46
  %2684 = insertelement <4 x float> undef, float %2683, i64 0
  %2685 = extractelement <4 x i32> %2679, i64 1
  %2686 = sext i32 %2685 to i64
  %2687 = getelementptr inbounds float, ptr %f5.host, i64 %2686
  %2688 = load float, ptr %2687, align 4, !tbaa !46
  %2689 = insertelement <4 x float> %2684, float %2688, i64 1
  %2690 = extractelement <4 x i32> %2679, i64 2
  %2691 = sext i32 %2690 to i64
  %2692 = getelementptr inbounds float, ptr %f5.host, i64 %2691
  %2693 = load float, ptr %2692, align 4, !tbaa !46
  %2694 = insertelement <4 x float> %2689, float %2693, i64 2
  %2695 = extractelement <4 x i32> %2679, i64 3
  %2696 = sext i32 %2695 to i64
  %2697 = getelementptr inbounds float, ptr %f5.host, i64 %2696
  %2698 = load float, ptr %2697, align 4, !tbaa !46
  %2699 = insertelement <4 x float> %2694, float %2698, i64 3
  %2700 = fmul <4 x float> %2699, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2701 = fadd <4 x float> %2678, %2700
  %2702 = fmul <4 x float> %2701, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2703 = fadd <4 x float> %2656, %2702
  %2704 = mul nsw <4 x i32> %t2384.us, %2139
  %2705 = add nsw <4 x i32> %2704, %2586
  %2706 = extractelement <4 x i32> %2705, i64 0
  %2707 = sext i32 %2706 to i64
  %2708 = getelementptr inbounds float, ptr %f4.host, i64 %2707
  %2709 = load float, ptr %2708, align 4, !tbaa !44
  %2710 = insertelement <4 x float> undef, float %2709, i64 0
  %2711 = extractelement <4 x i32> %2705, i64 1
  %2712 = sext i32 %2711 to i64
  %2713 = getelementptr inbounds float, ptr %f4.host, i64 %2712
  %2714 = load float, ptr %2713, align 4, !tbaa !44
  %2715 = insertelement <4 x float> %2710, float %2714, i64 1
  %2716 = extractelement <4 x i32> %2705, i64 2
  %2717 = sext i32 %2716 to i64
  %2718 = getelementptr inbounds float, ptr %f4.host, i64 %2717
  %2719 = load float, ptr %2718, align 4, !tbaa !44
  %2720 = insertelement <4 x float> %2715, float %2719, i64 2
  %2721 = extractelement <4 x i32> %2705, i64 3
  %2722 = sext i32 %2721 to i64
  %2723 = getelementptr inbounds float, ptr %f4.host, i64 %2722
  %2724 = load float, ptr %2723, align 4, !tbaa !44
  %2725 = insertelement <4 x float> %2720, float %2724, i64 3
  %2726 = fsub <4 x float> %2725, %2703
  %2727 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2381.us
  %2728 = fmul <4 x float> %2727, %2726
  %2729 = fadd <4 x float> %2609, %2728
  %2730 = sext i32 %2190 to i64
  %2731 = sub nsw i64 %2730, %1516
  %2732 = add nsw i64 %2731, %2160
  %2733 = getelementptr inbounds float, ptr %193, i64 %2732
  %2734 = load <4 x float>, ptr %2733, align 4, !tbaa !68
  %2735 = fmul <4 x float> %2734, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2736 = sext i32 %t2378.us to i64
  %2737 = sub nsw i64 %2736, %1516
  %2738 = add nsw i64 %2161, %2737
  %2739 = getelementptr inbounds float, ptr %193, i64 %2738
  %2740 = load <4 x float>, ptr %2739, align 4, !tbaa !68
  %2741 = fmul <4 x float> %2740, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2742 = fadd <4 x float> %2735, %2741
  %2743 = fmul <4 x float> %2742, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2744 = add nsw i64 %2731, %2162
  %2745 = getelementptr inbounds float, ptr %193, i64 %2744
  %2746 = load <4 x float>, ptr %2745, align 4, !tbaa !68
  %2747 = fmul <4 x float> %2746, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2748 = add nsw i64 %2163, %2737
  %2749 = getelementptr inbounds float, ptr %193, i64 %2748
  %2750 = load <4 x float>, ptr %2749, align 4, !tbaa !68
  %2751 = fmul <4 x float> %2750, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2752 = fadd <4 x float> %2747, %2751
  %2753 = fmul <4 x float> %2752, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2754 = fadd <4 x float> %2743, %2753
  %2755 = fadd <4 x float> %2729, %2754
  %2756 = shufflevector <4 x float> %2475, <4 x float> %2755, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %2757 = sext i32 %f126.s0.v3.v303.base.us to i64
  %2758 = add i64 %2166, %2757
  %2759 = getelementptr inbounds float, ptr %222, i64 %2758
  store <8 x float> %2756, ptr %2759, align 4, !tbaa !70
  %lsr.iv.next409.us = add i32 %lsr.iv408.us, -1
  %lsr.iv.next411.us = add i32 %lsr.iv410.us, 8
  %.not151.us = icmp eq i32 %lsr.iv.next409.us, 0
  br i1 %.not151.us, label %"end for f126.s0.v3.v3.loopexit.us", label %"for f126.s0.v3.v3.us"

"end for f126.s0.v3.v3.loopexit.us":              ; preds = %"for f126.s0.v3.v3.us"
  %indvars.iv.next322 = add nsw i64 %indvars.iv321, 1
  %2760 = icmp eq i64 %indvars.iv321, %sext323
  br i1 %2760, label %"consume f126", label %"for f126.s0.v4.us"

"consume f126":                                   ; preds = %"end for f126.s0.v3.v3.loopexit.us", %"for f126.s0.v4.preheader"
  %2761 = tail call i32 @llvm.smax.i32(i32 %197, i32 8)
  %t3091 = zext i32 %2761 to i64
  %2762 = shl nuw nsw i64 %t3091, 2
  %2763 = icmp ult i32 %2761, 536870912
  br i1 %2763, label %"assert succeeded16", label %"assert failed15", !prof !5

"assert failed15":                                ; preds = %"consume f126"
  %2764 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %2762, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded16":                             ; preds = %"consume f126"
  %2765 = add nuw nsw i64 %2762, 4
  %2766 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2765)
  %.not103 = icmp eq ptr %2766, null
  br i1 %.not103, label %"assert failed17", label %"produce f125", !prof !4

"assert failed17":                                ; preds = %"assert succeeded16"
  %2767 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f125":                                   ; preds = %"assert succeeded16"
  %2768 = add nsw i32 %197, 7
  %2769 = ashr i32 %2768, 3
  %2770 = icmp sgt i32 %197, 0
  br i1 %2770, label %"for f125.s0.v3.v3.preheader", label %"consume f125", !prof !5

"for f125.s0.v3.v3.preheader":                    ; preds = %"produce f125"
  %2771 = shl i32 %local_laplacian.s0.v4.v4.base, 1
  %2772 = and i32 %2771, 2
  %t2394 = add nsw i32 %2772, %156
  %2773 = add nsw i32 %f2.v3.extent_realized.s, 1
  %2774 = sub nsw i32 %local_laplacian.s0.v4.v4.base, %f2.v4.min_realized
  %2775 = mul nsw i32 %2774, %2773
  %2776 = sub i32 %2775, %f2.v3.min_realized
  %2777 = fdiv float 1.000000e+00, %230
  %2778 = insertelement <4 x float> undef, float %2777, i64 0
  %2779 = shufflevector <4 x float> %2778, <4 x float> undef, <4 x i32> zeroinitializer
  %2780 = xor i32 %158, -1
  %2781 = add i32 %t2394, %2780
  %t2406 = mul nsw i32 %207, %2781
  %2782 = sub nsw i32 %156, %158
  %t2408 = mul nsw i32 %207, %2782
  %2783 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %2784 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %2783
  %.neg222 = shufflevector <4 x i32> %2784, <4 x i32> poison, <4 x i32> zeroinitializer
  %2785 = shl nsw i32 %levels, 8
  %2786 = add nsw i32 %2785, -256
  %2787 = insertelement <4 x i32> undef, i32 %2786, i64 0
  %b870 = shufflevector <4 x i32> %2787, <4 x i32> undef, <4 x i32> zeroinitializer
  %2788 = xor i32 %f4.v4.min_realized, -1
  %2789 = add i32 %t2394, %2788
  %2790 = mul nsw i32 %2789, %f4.stride.1
  %2791 = sub nsw i32 %156, %f4.v4.min_realized
  %2792 = mul nsw i32 %2791, %f4.stride.1
  %2793 = insertelement <4 x float> undef, float %beta, i64 0
  %2794 = shufflevector <4 x float> %2793, <4 x float> undef, <4 x i32> zeroinitializer
  %2795 = sext i32 %t2408 to i64
  %2796 = add nsw i64 %2795, -1
  %2797 = sext i32 %t2406 to i64
  %2798 = add nsw i64 %2797, -1
  %2799 = sext i32 %195 to i64
  br label %"for f125.s0.v3.v3"

"for f125.s0.v3.v3":                              ; preds = %"for f125.s0.v3.v3.preheader", %"for f125.s0.v3.v3"
  %lsr.iv406 = phi i32 [ %lsr.iv.next407, %"for f125.s0.v3.v3" ], [ %a1120, %"for f125.s0.v3.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f125.s0.v3.v3" ], [ %2769, %"for f125.s0.v3.v3.preheader" ]
  %f125.s0.v3.v366.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %lsr.iv406)
  %2800 = shl i32 %f125.s0.v3.v366.base, 1
  %2801 = and i32 %2800, 2
  %2802 = ashr i32 %f125.s0.v3.v366.base, 1
  %t2395 = add nsw i32 %2801, %2802
  %t2396 = add i32 %2776, %f125.s0.v3.v366.base
  %2803 = sext i32 %t2396 to i64
  %2804 = getelementptr inbounds float, ptr %f2.host, i64 %2803
  %2805 = load <4 x float>, ptr %2804, align 4, !tbaa !42
  %2806 = add nsw i64 %2803, 4
  %2807 = getelementptr inbounds float, ptr %f2.host, i64 %2806
  %2808 = load <4 x float>, ptr %2807, align 4, !tbaa !42
  %t2397 = shufflevector <4 x float> %2805, <4 x float> %2808, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2398 = shufflevector <4 x float> %2805, <4 x float> %2808, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2399 = fmul <4 x float> %232, %t2397
  %t2400 = fmul <4 x float> %232, %t2398
  %a863 = fptosi <4 x float> %t2400 to <4 x i32>
  %a870 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a863)
  %2809 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a870, <4 x i32> zeroinitializer)
  %t2402 = sitofp <4 x i32> %2809 to <4 x float>
  %t2403 = fmul <4 x float> %2779, %t2402
  %2810 = add nuw nsw <4 x i32> %2809, <i32 1, i32 1, i32 1, i32 1>
  %2811 = sitofp <4 x i32> %2810 to <4 x float>
  %t2404 = fmul <4 x float> %2779, %2811
  %2812 = fmul <4 x float> %t2400, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a868 = fptosi <4 x float> %2812 to <4 x i32>
  %a867 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a868)
  %2813 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a867, <4 x i32> zeroinitializer)
  %2814 = shl <4 x i32> %2809, <i32 8, i32 8, i32 8, i32 8>
  %.neg224 = sub <4 x i32> %.neg222, %2814
  %t2409 = add <4 x i32> %.neg224, %2813
  %2815 = sub nsw i32 %t2395, %f4.v3.min_realized
  %t2412 = add nsw i32 %2815, %2790
  %t2414 = sub nsw <4 x i32> %2809, %241
  %t2415 = mul nsw <4 x i32> %t2414, %2139
  %2816 = sub nsw i32 %2802, %f4.v3.min_realized
  %t2417 = add nsw i32 %2816, %2790
  %t2419 = add nsw i32 %2815, %2792
  %t2420 = add nsw i32 %2816, %2792
  %2817 = add nsw <4 x i32> %t2414, <i32 1, i32 1, i32 1, i32 1>
  %t2421 = mul nsw <4 x i32> %2817, %2139
  %2818 = add nsw i32 %f125.s0.v3.v366.base, 1
  %2819 = shl i32 %2818, 1
  %2820 = and i32 %2819, 2
  %2821 = ashr i32 %2818, 1
  %t2422 = add nsw i32 %2820, %2821
  %a871 = fptosi <4 x float> %t2399 to <4 x i32>
  %a878 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a871)
  %2822 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a878, <4 x i32> zeroinitializer)
  %t2424 = sitofp <4 x i32> %2822 to <4 x float>
  %t2425 = fmul <4 x float> %2779, %t2424
  %2823 = add nuw nsw <4 x i32> %2822, <i32 1, i32 1, i32 1, i32 1>
  %2824 = sitofp <4 x i32> %2823 to <4 x float>
  %t2426 = fmul <4 x float> %2779, %2824
  %2825 = fmul <4 x float> %t2399, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a876 = fptosi <4 x float> %2825 to <4 x i32>
  %a875 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a876)
  %2826 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a875, <4 x i32> zeroinitializer)
  %2827 = shl <4 x i32> %2822, <i32 8, i32 8, i32 8, i32 8>
  %.neg226 = sub <4 x i32> %.neg222, %2827
  %t2429 = add <4 x i32> %.neg226, %2826
  %2828 = sub nsw i32 %t2422, %f4.v3.min_realized
  %t2431 = add nsw i32 %2828, %2790
  %t2432 = sub nsw <4 x i32> %2822, %241
  %t2433 = mul nsw <4 x i32> %t2432, %2139
  %2829 = sub nsw i32 %2821, %f4.v3.min_realized
  %t2435 = add nsw i32 %2829, %2790
  %t2436 = add nsw i32 %2828, %2792
  %t2437 = add nsw i32 %2829, %2792
  %2830 = add nsw <4 x i32> %t2432, <i32 1, i32 1, i32 1, i32 1>
  %t2438 = mul nsw <4 x i32> %2830, %2139
  %2831 = insertelement <4 x i32> undef, i32 %t2420, i64 0
  %2832 = shufflevector <4 x i32> %2831, <4 x i32> undef, <4 x i32> zeroinitializer
  %2833 = add nsw <4 x i32> %2832, <i32 0, i32 1, i32 2, i32 3>
  %2834 = add nsw <4 x i32> %t2421, %2833
  %2835 = extractelement <4 x i32> %2834, i64 0
  %2836 = sext i32 %2835 to i64
  %2837 = getelementptr inbounds float, ptr %f4.host, i64 %2836
  %2838 = load float, ptr %2837, align 4, !tbaa !44
  %2839 = insertelement <4 x float> undef, float %2838, i64 0
  %2840 = extractelement <4 x i32> %2834, i64 1
  %2841 = sext i32 %2840 to i64
  %2842 = getelementptr inbounds float, ptr %f4.host, i64 %2841
  %2843 = load float, ptr %2842, align 4, !tbaa !44
  %2844 = insertelement <4 x float> %2839, float %2843, i64 1
  %2845 = extractelement <4 x i32> %2834, i64 2
  %2846 = sext i32 %2845 to i64
  %2847 = getelementptr inbounds float, ptr %f4.host, i64 %2846
  %2848 = load float, ptr %2847, align 4, !tbaa !44
  %2849 = insertelement <4 x float> %2844, float %2848, i64 2
  %2850 = extractelement <4 x i32> %2834, i64 3
  %2851 = sext i32 %2850 to i64
  %2852 = getelementptr inbounds float, ptr %f4.host, i64 %2851
  %2853 = load float, ptr %2852, align 4, !tbaa !44
  %2854 = insertelement <4 x float> %2849, float %2853, i64 3
  %2855 = fmul <4 x float> %2854, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2856 = insertelement <4 x i32> undef, i32 %t2419, i64 0
  %2857 = shufflevector <4 x i32> %2856, <4 x i32> undef, <4 x i32> zeroinitializer
  %2858 = add <4 x i32> %2857, <i32 -1, i32 0, i32 1, i32 2>
  %2859 = add <4 x i32> %2858, %t2421
  %2860 = extractelement <4 x i32> %2859, i64 0
  %2861 = sext i32 %2860 to i64
  %2862 = getelementptr inbounds float, ptr %f4.host, i64 %2861
  %2863 = load float, ptr %2862, align 4, !tbaa !44
  %2864 = insertelement <4 x float> undef, float %2863, i64 0
  %2865 = extractelement <4 x i32> %2859, i64 1
  %2866 = sext i32 %2865 to i64
  %2867 = getelementptr inbounds float, ptr %f4.host, i64 %2866
  %2868 = load float, ptr %2867, align 4, !tbaa !44
  %2869 = insertelement <4 x float> %2864, float %2868, i64 1
  %2870 = extractelement <4 x i32> %2859, i64 2
  %2871 = sext i32 %2870 to i64
  %2872 = getelementptr inbounds float, ptr %f4.host, i64 %2871
  %2873 = load float, ptr %2872, align 4, !tbaa !44
  %2874 = insertelement <4 x float> %2869, float %2873, i64 2
  %2875 = extractelement <4 x i32> %2859, i64 3
  %2876 = sext i32 %2875 to i64
  %2877 = getelementptr inbounds float, ptr %f4.host, i64 %2876
  %2878 = load float, ptr %2877, align 4, !tbaa !44
  %2879 = insertelement <4 x float> %2874, float %2878, i64 3
  %2880 = fmul <4 x float> %2879, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2881 = fadd <4 x float> %2855, %2880
  %2882 = fmul <4 x float> %2881, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2883 = insertelement <4 x i32> undef, i32 %t2417, i64 0
  %2884 = shufflevector <4 x i32> %2883, <4 x i32> undef, <4 x i32> zeroinitializer
  %2885 = add nsw <4 x i32> %2884, <i32 0, i32 1, i32 2, i32 3>
  %2886 = add nsw <4 x i32> %t2421, %2885
  %2887 = extractelement <4 x i32> %2886, i64 0
  %2888 = sext i32 %2887 to i64
  %2889 = getelementptr inbounds float, ptr %f4.host, i64 %2888
  %2890 = load float, ptr %2889, align 4, !tbaa !44
  %2891 = insertelement <4 x float> undef, float %2890, i64 0
  %2892 = extractelement <4 x i32> %2886, i64 1
  %2893 = sext i32 %2892 to i64
  %2894 = getelementptr inbounds float, ptr %f4.host, i64 %2893
  %2895 = load float, ptr %2894, align 4, !tbaa !44
  %2896 = insertelement <4 x float> %2891, float %2895, i64 1
  %2897 = extractelement <4 x i32> %2886, i64 2
  %2898 = sext i32 %2897 to i64
  %2899 = getelementptr inbounds float, ptr %f4.host, i64 %2898
  %2900 = load float, ptr %2899, align 4, !tbaa !44
  %2901 = insertelement <4 x float> %2896, float %2900, i64 2
  %2902 = extractelement <4 x i32> %2886, i64 3
  %2903 = sext i32 %2902 to i64
  %2904 = getelementptr inbounds float, ptr %f4.host, i64 %2903
  %2905 = load float, ptr %2904, align 4, !tbaa !44
  %2906 = insertelement <4 x float> %2901, float %2905, i64 3
  %2907 = fmul <4 x float> %2906, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2908 = insertelement <4 x i32> undef, i32 %t2412, i64 0
  %2909 = shufflevector <4 x i32> %2908, <4 x i32> undef, <4 x i32> zeroinitializer
  %2910 = add <4 x i32> %2909, <i32 -1, i32 0, i32 1, i32 2>
  %2911 = add <4 x i32> %2910, %t2421
  %2912 = extractelement <4 x i32> %2911, i64 0
  %2913 = sext i32 %2912 to i64
  %2914 = getelementptr inbounds float, ptr %f4.host, i64 %2913
  %2915 = load float, ptr %2914, align 4, !tbaa !44
  %2916 = insertelement <4 x float> undef, float %2915, i64 0
  %2917 = extractelement <4 x i32> %2911, i64 1
  %2918 = sext i32 %2917 to i64
  %2919 = getelementptr inbounds float, ptr %f4.host, i64 %2918
  %2920 = load float, ptr %2919, align 4, !tbaa !44
  %2921 = insertelement <4 x float> %2916, float %2920, i64 1
  %2922 = extractelement <4 x i32> %2911, i64 2
  %2923 = sext i32 %2922 to i64
  %2924 = getelementptr inbounds float, ptr %f4.host, i64 %2923
  %2925 = load float, ptr %2924, align 4, !tbaa !44
  %2926 = insertelement <4 x float> %2921, float %2925, i64 2
  %2927 = extractelement <4 x i32> %2911, i64 3
  %2928 = sext i32 %2927 to i64
  %2929 = getelementptr inbounds float, ptr %f4.host, i64 %2928
  %2930 = load float, ptr %2929, align 4, !tbaa !44
  %2931 = insertelement <4 x float> %2926, float %2930, i64 3
  %2932 = fmul <4 x float> %2931, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2933 = fadd <4 x float> %2907, %2932
  %2934 = fmul <4 x float> %2933, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2935 = fadd <4 x float> %2882, %2934
  %2936 = extractelement <4 x i32> %t2409, i64 0
  %2937 = sext i32 %2936 to i64
  %2938 = getelementptr inbounds float, ptr %f0.host, i64 %2937
  %2939 = load float, ptr %2938, align 4, !tbaa !6
  %2940 = insertelement <4 x float> undef, float %2939, i64 0
  %2941 = extractelement <4 x i32> %t2409, i64 1
  %2942 = sext i32 %2941 to i64
  %2943 = getelementptr inbounds float, ptr %f0.host, i64 %2942
  %2944 = load float, ptr %2943, align 4, !tbaa !6
  %2945 = insertelement <4 x float> %2940, float %2944, i64 1
  %2946 = extractelement <4 x i32> %t2409, i64 2
  %2947 = sext i32 %2946 to i64
  %2948 = getelementptr inbounds float, ptr %f0.host, i64 %2947
  %2949 = load float, ptr %2948, align 4, !tbaa !6
  %2950 = insertelement <4 x float> %2945, float %2949, i64 2
  %2951 = extractelement <4 x i32> %t2409, i64 3
  %2952 = sext i32 %2951 to i64
  %2953 = getelementptr inbounds float, ptr %f0.host, i64 %2952
  %2954 = load float, ptr %2953, align 4, !tbaa !6
  %2955 = insertelement <4 x float> %2950, float %2954, i64 3
  %2956 = fsub <4 x float> %t2398, %t2404
  %2957 = fmul <4 x float> %2794, %2956
  %2958 = fadd <4 x float> %t2404, %2957
  %2959 = fadd <4 x float> %2958, %2955
  %2960 = fsub <4 x float> %2959, %2935
  %2961 = fsub <4 x float> %t2400, %t2402
  %2962 = fmul <4 x float> %2961, %2960
  %2963 = add nsw <4 x i32> %t2415, %2833
  %2964 = extractelement <4 x i32> %2963, i64 0
  %2965 = sext i32 %2964 to i64
  %2966 = getelementptr inbounds float, ptr %f4.host, i64 %2965
  %2967 = load float, ptr %2966, align 4, !tbaa !44
  %2968 = insertelement <4 x float> undef, float %2967, i64 0
  %2969 = extractelement <4 x i32> %2963, i64 1
  %2970 = sext i32 %2969 to i64
  %2971 = getelementptr inbounds float, ptr %f4.host, i64 %2970
  %2972 = load float, ptr %2971, align 4, !tbaa !44
  %2973 = insertelement <4 x float> %2968, float %2972, i64 1
  %2974 = extractelement <4 x i32> %2963, i64 2
  %2975 = sext i32 %2974 to i64
  %2976 = getelementptr inbounds float, ptr %f4.host, i64 %2975
  %2977 = load float, ptr %2976, align 4, !tbaa !44
  %2978 = insertelement <4 x float> %2973, float %2977, i64 2
  %2979 = extractelement <4 x i32> %2963, i64 3
  %2980 = sext i32 %2979 to i64
  %2981 = getelementptr inbounds float, ptr %f4.host, i64 %2980
  %2982 = load float, ptr %2981, align 4, !tbaa !44
  %2983 = insertelement <4 x float> %2978, float %2982, i64 3
  %2984 = fmul <4 x float> %2983, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2985 = add <4 x i32> %2858, %t2415
  %2986 = extractelement <4 x i32> %2985, i64 0
  %2987 = sext i32 %2986 to i64
  %2988 = getelementptr inbounds float, ptr %f4.host, i64 %2987
  %2989 = load float, ptr %2988, align 4, !tbaa !44
  %2990 = insertelement <4 x float> undef, float %2989, i64 0
  %2991 = extractelement <4 x i32> %2985, i64 1
  %2992 = sext i32 %2991 to i64
  %2993 = getelementptr inbounds float, ptr %f4.host, i64 %2992
  %2994 = load float, ptr %2993, align 4, !tbaa !44
  %2995 = insertelement <4 x float> %2990, float %2994, i64 1
  %2996 = extractelement <4 x i32> %2985, i64 2
  %2997 = sext i32 %2996 to i64
  %2998 = getelementptr inbounds float, ptr %f4.host, i64 %2997
  %2999 = load float, ptr %2998, align 4, !tbaa !44
  %3000 = insertelement <4 x float> %2995, float %2999, i64 2
  %3001 = extractelement <4 x i32> %2985, i64 3
  %3002 = sext i32 %3001 to i64
  %3003 = getelementptr inbounds float, ptr %f4.host, i64 %3002
  %3004 = load float, ptr %3003, align 4, !tbaa !44
  %3005 = insertelement <4 x float> %3000, float %3004, i64 3
  %3006 = fmul <4 x float> %3005, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3007 = fadd <4 x float> %2984, %3006
  %3008 = fmul <4 x float> %3007, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3009 = add nsw <4 x i32> %t2415, %2885
  %3010 = extractelement <4 x i32> %3009, i64 0
  %3011 = sext i32 %3010 to i64
  %3012 = getelementptr inbounds float, ptr %f4.host, i64 %3011
  %3013 = load float, ptr %3012, align 4, !tbaa !44
  %3014 = insertelement <4 x float> undef, float %3013, i64 0
  %3015 = extractelement <4 x i32> %3009, i64 1
  %3016 = sext i32 %3015 to i64
  %3017 = getelementptr inbounds float, ptr %f4.host, i64 %3016
  %3018 = load float, ptr %3017, align 4, !tbaa !44
  %3019 = insertelement <4 x float> %3014, float %3018, i64 1
  %3020 = extractelement <4 x i32> %3009, i64 2
  %3021 = sext i32 %3020 to i64
  %3022 = getelementptr inbounds float, ptr %f4.host, i64 %3021
  %3023 = load float, ptr %3022, align 4, !tbaa !44
  %3024 = insertelement <4 x float> %3019, float %3023, i64 2
  %3025 = extractelement <4 x i32> %3009, i64 3
  %3026 = sext i32 %3025 to i64
  %3027 = getelementptr inbounds float, ptr %f4.host, i64 %3026
  %3028 = load float, ptr %3027, align 4, !tbaa !44
  %3029 = insertelement <4 x float> %3024, float %3028, i64 3
  %3030 = fmul <4 x float> %3029, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3031 = add <4 x i32> %2910, %t2415
  %3032 = extractelement <4 x i32> %3031, i64 0
  %3033 = sext i32 %3032 to i64
  %3034 = getelementptr inbounds float, ptr %f4.host, i64 %3033
  %3035 = load float, ptr %3034, align 4, !tbaa !44
  %3036 = insertelement <4 x float> undef, float %3035, i64 0
  %3037 = extractelement <4 x i32> %3031, i64 1
  %3038 = sext i32 %3037 to i64
  %3039 = getelementptr inbounds float, ptr %f4.host, i64 %3038
  %3040 = load float, ptr %3039, align 4, !tbaa !44
  %3041 = insertelement <4 x float> %3036, float %3040, i64 1
  %3042 = extractelement <4 x i32> %3031, i64 2
  %3043 = sext i32 %3042 to i64
  %3044 = getelementptr inbounds float, ptr %f4.host, i64 %3043
  %3045 = load float, ptr %3044, align 4, !tbaa !44
  %3046 = insertelement <4 x float> %3041, float %3045, i64 2
  %3047 = extractelement <4 x i32> %3031, i64 3
  %3048 = sext i32 %3047 to i64
  %3049 = getelementptr inbounds float, ptr %f4.host, i64 %3048
  %3050 = load float, ptr %3049, align 4, !tbaa !44
  %3051 = insertelement <4 x float> %3046, float %3050, i64 3
  %3052 = fmul <4 x float> %3051, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3053 = fadd <4 x float> %3030, %3052
  %3054 = fmul <4 x float> %3053, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3055 = fadd <4 x float> %3008, %3054
  %3056 = add nsw <4 x i32> %t2409, <i32 256, i32 256, i32 256, i32 256>
  %3057 = extractelement <4 x i32> %3056, i64 0
  %3058 = sext i32 %3057 to i64
  %3059 = getelementptr inbounds float, ptr %f0.host, i64 %3058
  %3060 = load float, ptr %3059, align 4, !tbaa !6
  %3061 = insertelement <4 x float> undef, float %3060, i64 0
  %3062 = extractelement <4 x i32> %3056, i64 1
  %3063 = sext i32 %3062 to i64
  %3064 = getelementptr inbounds float, ptr %f0.host, i64 %3063
  %3065 = load float, ptr %3064, align 4, !tbaa !6
  %3066 = insertelement <4 x float> %3061, float %3065, i64 1
  %3067 = extractelement <4 x i32> %3056, i64 2
  %3068 = sext i32 %3067 to i64
  %3069 = getelementptr inbounds float, ptr %f0.host, i64 %3068
  %3070 = load float, ptr %3069, align 4, !tbaa !6
  %3071 = insertelement <4 x float> %3066, float %3070, i64 2
  %3072 = extractelement <4 x i32> %3056, i64 3
  %3073 = sext i32 %3072 to i64
  %3074 = getelementptr inbounds float, ptr %f0.host, i64 %3073
  %3075 = load float, ptr %3074, align 4, !tbaa !6
  %3076 = insertelement <4 x float> %3071, float %3075, i64 3
  %3077 = fsub <4 x float> %t2398, %t2403
  %3078 = fmul <4 x float> %2794, %3077
  %3079 = fadd <4 x float> %t2403, %3078
  %3080 = fadd <4 x float> %3079, %3076
  %3081 = fsub <4 x float> %3080, %3055
  %3082 = fsub <4 x float> %t2402, %t2400
  %3083 = fadd <4 x float> %3082, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3084 = fmul <4 x float> %3083, %3081
  %3085 = fadd <4 x float> %2962, %3084
  %3086 = sext i32 %2802 to i64
  %3087 = sub nsw i64 %3086, %2143
  %3088 = add nsw i64 %3087, %2795
  %3089 = getelementptr inbounds float, ptr %222, i64 %3088
  %3090 = load <4 x float>, ptr %3089, align 4, !tbaa !70
  %3091 = fmul <4 x float> %3090, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3092 = sext i32 %t2395 to i64
  %3093 = sub nsw i64 %3092, %2143
  %3094 = add nsw i64 %2796, %3093
  %3095 = getelementptr inbounds float, ptr %222, i64 %3094
  %3096 = load <4 x float>, ptr %3095, align 4, !tbaa !70
  %3097 = fmul <4 x float> %3096, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3098 = fadd <4 x float> %3091, %3097
  %3099 = fmul <4 x float> %3098, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3100 = add nsw i64 %3087, %2797
  %3101 = getelementptr inbounds float, ptr %222, i64 %3100
  %3102 = load <4 x float>, ptr %3101, align 4, !tbaa !70
  %3103 = fmul <4 x float> %3102, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3104 = add nsw i64 %2798, %3093
  %3105 = getelementptr inbounds float, ptr %222, i64 %3104
  %3106 = load <4 x float>, ptr %3105, align 4, !tbaa !70
  %3107 = fmul <4 x float> %3106, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3108 = fadd <4 x float> %3103, %3107
  %3109 = fmul <4 x float> %3108, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3110 = fadd <4 x float> %3099, %3109
  %3111 = fadd <4 x float> %3085, %3110
  %3112 = insertelement <4 x i32> undef, i32 %t2437, i64 0
  %3113 = shufflevector <4 x i32> %3112, <4 x i32> undef, <4 x i32> zeroinitializer
  %3114 = add nsw <4 x i32> %3113, <i32 0, i32 1, i32 2, i32 3>
  %3115 = add nsw <4 x i32> %t2438, %3114
  %3116 = extractelement <4 x i32> %3115, i64 0
  %3117 = sext i32 %3116 to i64
  %3118 = getelementptr inbounds float, ptr %f4.host, i64 %3117
  %3119 = load float, ptr %3118, align 4, !tbaa !44
  %3120 = insertelement <4 x float> undef, float %3119, i64 0
  %3121 = extractelement <4 x i32> %3115, i64 1
  %3122 = sext i32 %3121 to i64
  %3123 = getelementptr inbounds float, ptr %f4.host, i64 %3122
  %3124 = load float, ptr %3123, align 4, !tbaa !44
  %3125 = insertelement <4 x float> %3120, float %3124, i64 1
  %3126 = extractelement <4 x i32> %3115, i64 2
  %3127 = sext i32 %3126 to i64
  %3128 = getelementptr inbounds float, ptr %f4.host, i64 %3127
  %3129 = load float, ptr %3128, align 4, !tbaa !44
  %3130 = insertelement <4 x float> %3125, float %3129, i64 2
  %3131 = extractelement <4 x i32> %3115, i64 3
  %3132 = sext i32 %3131 to i64
  %3133 = getelementptr inbounds float, ptr %f4.host, i64 %3132
  %3134 = load float, ptr %3133, align 4, !tbaa !44
  %3135 = insertelement <4 x float> %3130, float %3134, i64 3
  %3136 = fmul <4 x float> %3135, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3137 = insertelement <4 x i32> undef, i32 %t2436, i64 0
  %3138 = shufflevector <4 x i32> %3137, <4 x i32> undef, <4 x i32> zeroinitializer
  %3139 = add <4 x i32> %3138, <i32 -1, i32 0, i32 1, i32 2>
  %3140 = add <4 x i32> %3139, %t2438
  %3141 = extractelement <4 x i32> %3140, i64 0
  %3142 = sext i32 %3141 to i64
  %3143 = getelementptr inbounds float, ptr %f4.host, i64 %3142
  %3144 = load float, ptr %3143, align 4, !tbaa !44
  %3145 = insertelement <4 x float> undef, float %3144, i64 0
  %3146 = extractelement <4 x i32> %3140, i64 1
  %3147 = sext i32 %3146 to i64
  %3148 = getelementptr inbounds float, ptr %f4.host, i64 %3147
  %3149 = load float, ptr %3148, align 4, !tbaa !44
  %3150 = insertelement <4 x float> %3145, float %3149, i64 1
  %3151 = extractelement <4 x i32> %3140, i64 2
  %3152 = sext i32 %3151 to i64
  %3153 = getelementptr inbounds float, ptr %f4.host, i64 %3152
  %3154 = load float, ptr %3153, align 4, !tbaa !44
  %3155 = insertelement <4 x float> %3150, float %3154, i64 2
  %3156 = extractelement <4 x i32> %3140, i64 3
  %3157 = sext i32 %3156 to i64
  %3158 = getelementptr inbounds float, ptr %f4.host, i64 %3157
  %3159 = load float, ptr %3158, align 4, !tbaa !44
  %3160 = insertelement <4 x float> %3155, float %3159, i64 3
  %3161 = fmul <4 x float> %3160, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3162 = fadd <4 x float> %3136, %3161
  %3163 = fmul <4 x float> %3162, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3164 = insertelement <4 x i32> undef, i32 %t2435, i64 0
  %3165 = shufflevector <4 x i32> %3164, <4 x i32> undef, <4 x i32> zeroinitializer
  %3166 = add nsw <4 x i32> %3165, <i32 0, i32 1, i32 2, i32 3>
  %3167 = add nsw <4 x i32> %t2438, %3166
  %3168 = extractelement <4 x i32> %3167, i64 0
  %3169 = sext i32 %3168 to i64
  %3170 = getelementptr inbounds float, ptr %f4.host, i64 %3169
  %3171 = load float, ptr %3170, align 4, !tbaa !44
  %3172 = insertelement <4 x float> undef, float %3171, i64 0
  %3173 = extractelement <4 x i32> %3167, i64 1
  %3174 = sext i32 %3173 to i64
  %3175 = getelementptr inbounds float, ptr %f4.host, i64 %3174
  %3176 = load float, ptr %3175, align 4, !tbaa !44
  %3177 = insertelement <4 x float> %3172, float %3176, i64 1
  %3178 = extractelement <4 x i32> %3167, i64 2
  %3179 = sext i32 %3178 to i64
  %3180 = getelementptr inbounds float, ptr %f4.host, i64 %3179
  %3181 = load float, ptr %3180, align 4, !tbaa !44
  %3182 = insertelement <4 x float> %3177, float %3181, i64 2
  %3183 = extractelement <4 x i32> %3167, i64 3
  %3184 = sext i32 %3183 to i64
  %3185 = getelementptr inbounds float, ptr %f4.host, i64 %3184
  %3186 = load float, ptr %3185, align 4, !tbaa !44
  %3187 = insertelement <4 x float> %3182, float %3186, i64 3
  %3188 = fmul <4 x float> %3187, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3189 = insertelement <4 x i32> undef, i32 %t2431, i64 0
  %3190 = shufflevector <4 x i32> %3189, <4 x i32> undef, <4 x i32> zeroinitializer
  %3191 = add <4 x i32> %3190, <i32 -1, i32 0, i32 1, i32 2>
  %3192 = add <4 x i32> %3191, %t2438
  %3193 = extractelement <4 x i32> %3192, i64 0
  %3194 = sext i32 %3193 to i64
  %3195 = getelementptr inbounds float, ptr %f4.host, i64 %3194
  %3196 = load float, ptr %3195, align 4, !tbaa !44
  %3197 = insertelement <4 x float> undef, float %3196, i64 0
  %3198 = extractelement <4 x i32> %3192, i64 1
  %3199 = sext i32 %3198 to i64
  %3200 = getelementptr inbounds float, ptr %f4.host, i64 %3199
  %3201 = load float, ptr %3200, align 4, !tbaa !44
  %3202 = insertelement <4 x float> %3197, float %3201, i64 1
  %3203 = extractelement <4 x i32> %3192, i64 2
  %3204 = sext i32 %3203 to i64
  %3205 = getelementptr inbounds float, ptr %f4.host, i64 %3204
  %3206 = load float, ptr %3205, align 4, !tbaa !44
  %3207 = insertelement <4 x float> %3202, float %3206, i64 2
  %3208 = extractelement <4 x i32> %3192, i64 3
  %3209 = sext i32 %3208 to i64
  %3210 = getelementptr inbounds float, ptr %f4.host, i64 %3209
  %3211 = load float, ptr %3210, align 4, !tbaa !44
  %3212 = insertelement <4 x float> %3207, float %3211, i64 3
  %3213 = fmul <4 x float> %3212, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3214 = fadd <4 x float> %3188, %3213
  %3215 = fmul <4 x float> %3214, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3216 = fadd <4 x float> %3163, %3215
  %3217 = extractelement <4 x i32> %t2429, i64 0
  %3218 = sext i32 %3217 to i64
  %3219 = getelementptr inbounds float, ptr %f0.host, i64 %3218
  %3220 = load float, ptr %3219, align 4, !tbaa !6
  %3221 = insertelement <4 x float> undef, float %3220, i64 0
  %3222 = extractelement <4 x i32> %t2429, i64 1
  %3223 = sext i32 %3222 to i64
  %3224 = getelementptr inbounds float, ptr %f0.host, i64 %3223
  %3225 = load float, ptr %3224, align 4, !tbaa !6
  %3226 = insertelement <4 x float> %3221, float %3225, i64 1
  %3227 = extractelement <4 x i32> %t2429, i64 2
  %3228 = sext i32 %3227 to i64
  %3229 = getelementptr inbounds float, ptr %f0.host, i64 %3228
  %3230 = load float, ptr %3229, align 4, !tbaa !6
  %3231 = insertelement <4 x float> %3226, float %3230, i64 2
  %3232 = extractelement <4 x i32> %t2429, i64 3
  %3233 = sext i32 %3232 to i64
  %3234 = getelementptr inbounds float, ptr %f0.host, i64 %3233
  %3235 = load float, ptr %3234, align 4, !tbaa !6
  %3236 = insertelement <4 x float> %3231, float %3235, i64 3
  %3237 = fsub <4 x float> %t2397, %t2426
  %3238 = fmul <4 x float> %2794, %3237
  %3239 = fadd <4 x float> %t2426, %3238
  %3240 = fadd <4 x float> %3239, %3236
  %3241 = fsub <4 x float> %3240, %3216
  %3242 = fsub <4 x float> %t2399, %t2424
  %3243 = fmul <4 x float> %3242, %3241
  %3244 = add nsw <4 x i32> %t2433, %3114
  %3245 = extractelement <4 x i32> %3244, i64 0
  %3246 = sext i32 %3245 to i64
  %3247 = getelementptr inbounds float, ptr %f4.host, i64 %3246
  %3248 = load float, ptr %3247, align 4, !tbaa !44
  %3249 = insertelement <4 x float> undef, float %3248, i64 0
  %3250 = extractelement <4 x i32> %3244, i64 1
  %3251 = sext i32 %3250 to i64
  %3252 = getelementptr inbounds float, ptr %f4.host, i64 %3251
  %3253 = load float, ptr %3252, align 4, !tbaa !44
  %3254 = insertelement <4 x float> %3249, float %3253, i64 1
  %3255 = extractelement <4 x i32> %3244, i64 2
  %3256 = sext i32 %3255 to i64
  %3257 = getelementptr inbounds float, ptr %f4.host, i64 %3256
  %3258 = load float, ptr %3257, align 4, !tbaa !44
  %3259 = insertelement <4 x float> %3254, float %3258, i64 2
  %3260 = extractelement <4 x i32> %3244, i64 3
  %3261 = sext i32 %3260 to i64
  %3262 = getelementptr inbounds float, ptr %f4.host, i64 %3261
  %3263 = load float, ptr %3262, align 4, !tbaa !44
  %3264 = insertelement <4 x float> %3259, float %3263, i64 3
  %3265 = fmul <4 x float> %3264, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3266 = add <4 x i32> %t2433, %3138
  %3267 = add <4 x i32> %3266, <i32 -1, i32 0, i32 1, i32 2>
  %3268 = extractelement <4 x i32> %3267, i64 0
  %3269 = sext i32 %3268 to i64
  %3270 = getelementptr inbounds float, ptr %f4.host, i64 %3269
  %3271 = load float, ptr %3270, align 4, !tbaa !44
  %3272 = insertelement <4 x float> undef, float %3271, i64 0
  %3273 = extractelement <4 x i32> %3267, i64 1
  %3274 = sext i32 %3273 to i64
  %3275 = getelementptr inbounds float, ptr %f4.host, i64 %3274
  %3276 = load float, ptr %3275, align 4, !tbaa !44
  %3277 = insertelement <4 x float> %3272, float %3276, i64 1
  %3278 = extractelement <4 x i32> %3267, i64 2
  %3279 = sext i32 %3278 to i64
  %3280 = getelementptr inbounds float, ptr %f4.host, i64 %3279
  %3281 = load float, ptr %3280, align 4, !tbaa !44
  %3282 = insertelement <4 x float> %3277, float %3281, i64 2
  %3283 = extractelement <4 x i32> %3267, i64 3
  %3284 = sext i32 %3283 to i64
  %3285 = getelementptr inbounds float, ptr %f4.host, i64 %3284
  %3286 = load float, ptr %3285, align 4, !tbaa !44
  %3287 = insertelement <4 x float> %3282, float %3286, i64 3
  %3288 = fmul <4 x float> %3287, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3289 = fadd <4 x float> %3265, %3288
  %3290 = fmul <4 x float> %3289, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3291 = add nsw <4 x i32> %t2433, %3166
  %3292 = extractelement <4 x i32> %3291, i64 0
  %3293 = sext i32 %3292 to i64
  %3294 = getelementptr inbounds float, ptr %f4.host, i64 %3293
  %3295 = load float, ptr %3294, align 4, !tbaa !44
  %3296 = insertelement <4 x float> undef, float %3295, i64 0
  %3297 = extractelement <4 x i32> %3291, i64 1
  %3298 = sext i32 %3297 to i64
  %3299 = getelementptr inbounds float, ptr %f4.host, i64 %3298
  %3300 = load float, ptr %3299, align 4, !tbaa !44
  %3301 = insertelement <4 x float> %3296, float %3300, i64 1
  %3302 = extractelement <4 x i32> %3291, i64 2
  %3303 = sext i32 %3302 to i64
  %3304 = getelementptr inbounds float, ptr %f4.host, i64 %3303
  %3305 = load float, ptr %3304, align 4, !tbaa !44
  %3306 = insertelement <4 x float> %3301, float %3305, i64 2
  %3307 = extractelement <4 x i32> %3291, i64 3
  %3308 = sext i32 %3307 to i64
  %3309 = getelementptr inbounds float, ptr %f4.host, i64 %3308
  %3310 = load float, ptr %3309, align 4, !tbaa !44
  %3311 = insertelement <4 x float> %3306, float %3310, i64 3
  %3312 = fmul <4 x float> %3311, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3313 = add <4 x i32> %t2433, %3190
  %3314 = add <4 x i32> %3313, <i32 -1, i32 0, i32 1, i32 2>
  %3315 = extractelement <4 x i32> %3314, i64 0
  %3316 = sext i32 %3315 to i64
  %3317 = getelementptr inbounds float, ptr %f4.host, i64 %3316
  %3318 = load float, ptr %3317, align 4, !tbaa !44
  %3319 = insertelement <4 x float> undef, float %3318, i64 0
  %3320 = extractelement <4 x i32> %3314, i64 1
  %3321 = sext i32 %3320 to i64
  %3322 = getelementptr inbounds float, ptr %f4.host, i64 %3321
  %3323 = load float, ptr %3322, align 4, !tbaa !44
  %3324 = insertelement <4 x float> %3319, float %3323, i64 1
  %3325 = extractelement <4 x i32> %3314, i64 2
  %3326 = sext i32 %3325 to i64
  %3327 = getelementptr inbounds float, ptr %f4.host, i64 %3326
  %3328 = load float, ptr %3327, align 4, !tbaa !44
  %3329 = insertelement <4 x float> %3324, float %3328, i64 2
  %3330 = extractelement <4 x i32> %3314, i64 3
  %3331 = sext i32 %3330 to i64
  %3332 = getelementptr inbounds float, ptr %f4.host, i64 %3331
  %3333 = load float, ptr %3332, align 4, !tbaa !44
  %3334 = insertelement <4 x float> %3329, float %3333, i64 3
  %3335 = fmul <4 x float> %3334, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3336 = fadd <4 x float> %3312, %3335
  %3337 = fmul <4 x float> %3336, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3338 = fadd <4 x float> %3290, %3337
  %3339 = add nsw <4 x i32> %t2429, <i32 256, i32 256, i32 256, i32 256>
  %3340 = extractelement <4 x i32> %3339, i64 0
  %3341 = sext i32 %3340 to i64
  %3342 = getelementptr inbounds float, ptr %f0.host, i64 %3341
  %3343 = load float, ptr %3342, align 4, !tbaa !6
  %3344 = insertelement <4 x float> undef, float %3343, i64 0
  %3345 = extractelement <4 x i32> %3339, i64 1
  %3346 = sext i32 %3345 to i64
  %3347 = getelementptr inbounds float, ptr %f0.host, i64 %3346
  %3348 = load float, ptr %3347, align 4, !tbaa !6
  %3349 = insertelement <4 x float> %3344, float %3348, i64 1
  %3350 = extractelement <4 x i32> %3339, i64 2
  %3351 = sext i32 %3350 to i64
  %3352 = getelementptr inbounds float, ptr %f0.host, i64 %3351
  %3353 = load float, ptr %3352, align 4, !tbaa !6
  %3354 = insertelement <4 x float> %3349, float %3353, i64 2
  %3355 = extractelement <4 x i32> %3339, i64 3
  %3356 = sext i32 %3355 to i64
  %3357 = getelementptr inbounds float, ptr %f0.host, i64 %3356
  %3358 = load float, ptr %3357, align 4, !tbaa !6
  %3359 = insertelement <4 x float> %3354, float %3358, i64 3
  %3360 = fsub <4 x float> %t2397, %t2425
  %3361 = fmul <4 x float> %2794, %3360
  %3362 = fadd <4 x float> %t2425, %3361
  %3363 = fadd <4 x float> %3362, %3359
  %3364 = fsub <4 x float> %3363, %3338
  %3365 = fsub <4 x float> %t2424, %t2399
  %3366 = fadd <4 x float> %3365, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3367 = fmul <4 x float> %3366, %3364
  %3368 = fadd <4 x float> %3243, %3367
  %3369 = sext i32 %2821 to i64
  %3370 = sub nsw i64 %3369, %2143
  %3371 = add nsw i64 %3370, %2795
  %3372 = getelementptr inbounds float, ptr %222, i64 %3371
  %3373 = load <4 x float>, ptr %3372, align 4, !tbaa !70
  %3374 = fmul <4 x float> %3373, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3375 = sext i32 %t2422 to i64
  %3376 = sub nsw i64 %3375, %2143
  %3377 = add nsw i64 %2796, %3376
  %3378 = getelementptr inbounds float, ptr %222, i64 %3377
  %3379 = load <4 x float>, ptr %3378, align 4, !tbaa !70
  %3380 = fmul <4 x float> %3379, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3381 = fadd <4 x float> %3374, %3380
  %3382 = fmul <4 x float> %3381, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3383 = add nsw i64 %3370, %2797
  %3384 = getelementptr inbounds float, ptr %222, i64 %3383
  %3385 = load <4 x float>, ptr %3384, align 4, !tbaa !70
  %3386 = fmul <4 x float> %3385, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3387 = add nsw i64 %2798, %3376
  %3388 = getelementptr inbounds float, ptr %222, i64 %3387
  %3389 = load <4 x float>, ptr %3388, align 4, !tbaa !70
  %3390 = fmul <4 x float> %3389, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3391 = fadd <4 x float> %3386, %3390
  %3392 = fmul <4 x float> %3391, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3393 = fadd <4 x float> %3382, %3392
  %3394 = fadd <4 x float> %3368, %3393
  %3395 = shufflevector <4 x float> %3111, <4 x float> %3394, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %3396 = sext i32 %f125.s0.v3.v366.base to i64
  %3397 = sub nsw i64 %3396, %2799
  %3398 = getelementptr inbounds float, ptr %2766, i64 %3397
  store <8 x float> %3395, ptr %3398, align 4, !tbaa !72
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next407 = add i32 %lsr.iv406, 8
  %.not150 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not150, label %"consume f125", label %"for f125.s0.v3.v3"

"consume f125":                                   ; preds = %"for f125.s0.v3.v3", %"produce f125"
  %3399 = add nsw i32 %local_laplacian.extent.0, 7
  %3400 = ashr i32 %3399, 3
  %3401 = icmp sgt i32 %local_laplacian.extent.0, 0
  %3402 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %3403 = shl nsw i64 %75, 1
  %3404 = add nsw i64 %6, 1
  %3405 = sub nsw i64 %3402, %10
  br i1 %3401, label %"for local_laplacian.s0.v3.v3.preheader", label %"consume f125.if.then.i253_crit_edge", !prof !5

"consume f125.if.then.i253_crit_edge":            ; preds = %"consume f125"
  %.pre337 = sext i32 %195 to i64
  %.pre339 = add nsw i32 %input.min.0, %input.extent.0
  %.pre341 = add nsw i32 %.pre339, -1
  %.pre346 = mul nsw i32 %input.stride.2, %b1146
  %.pre348 = mul nsw i32 %input.stride.1, %b1148
  %.pre350 = add nsw i32 %.pre348, %input.min.0
  %.pre352 = add nsw i32 %.pre350, %.pre346
  %.pre354 = add nsw i32 %b1146, %input.extent.2
  %.pre356 = add nsw i32 %.pre354, -1
  %.pre357 = insertelement <8 x i32> undef, i32 %.pre341, i64 0
  %.pre359 = shufflevector <8 x i32> %.pre357, <8 x i32> undef, <8 x i32> zeroinitializer
  %.pre360 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %.pre362 = shufflevector <8 x i32> %.pre360, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %if.then.i253

"for local_laplacian.s0.v3.v3.preheader":         ; preds = %"consume f125"
  %3406 = icmp sgt i32 %local_laplacian.extent.2, 0
  %reass.add229 = sub nsw i64 %3402, %66
  %reass.mul230 = mul nsw i64 %reass.add229, %73
  %3407 = mul nsw i64 %3405, %3404
  %3408 = sub i64 %3407, %8
  %3409 = mul nsw i32 %input.stride.2, %b1146
  %3410 = mul nsw i32 %input.stride.1, %b1148
  %3411 = add nsw i32 %3410, %input.min.0
  %3412 = add nsw i32 %3411, %3409
  %3413 = add nsw i32 %b1146, %input.extent.2
  %b885 = add nsw i32 %3413, -1
  %3414 = mul nsw i32 %local_laplacian.s0.v4.v4.base, %input.stride.1
  %3415 = add nsw i32 %input.min.0, %input.extent.0
  %3416 = add nsw i32 %3415, -1
  %3417 = insertelement <8 x i32> undef, i32 %3416, i64 0
  %b887 = shufflevector <8 x i32> %3417, <8 x i32> undef, <8 x i32> zeroinitializer
  %3418 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b886 = shufflevector <8 x i32> %3418, <8 x i32> undef, <8 x i32> zeroinitializer
  %3419 = sext i32 %195 to i64
  br label %"for local_laplacian.s0.v3.v3"

"for local_laplacian.s0.v3.v3":                   ; preds = %"end for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3.preheader"
  %local_laplacian.s0.v3.v3 = phi i32 [ %3708, %"end for local_laplacian.s0.v5" ], [ 0, %"for local_laplacian.s0.v3.v3.preheader" ]
  br i1 %3406, label %"for local_laplacian.s0.v5.preheader", label %"end for local_laplacian.s0.v5", !prof !5

"for local_laplacian.s0.v5.preheader":            ; preds = %"for local_laplacian.s0.v3.v3"
  %3420 = shl nsw i32 %local_laplacian.s0.v3.v3, 3
  %a879 = add nsw i32 %3420, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a879)
  %3421 = sext i32 %local_laplacian.s0.v3.v277.base to i64
  %3422 = sub nsw i64 %3421, %62
  %3423 = add i64 %3422, %reass.mul230
  %scevgep399 = getelementptr i16, ptr %local_laplacian.host, i64 %3423
  %3424 = add i64 %3408, %3421
  %3425 = getelementptr inbounds float, ptr %f2.host, i64 %3424
  %3426 = load <8 x float>, ptr %3425, align 4, !tbaa !42
  %3427 = fadd <8 x float> %3426, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3428 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base, i64 0
  %3429 = shufflevector <8 x i32> %3428, <8 x i32> undef, <8 x i32> zeroinitializer
  %a885 = add nsw <8 x i32> %3429, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a884 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b887, <8 x i32> %a885)
  %3430 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a884, <8 x i32> %b886)
  %3431 = sub nsw i64 %3421, %3419
  %3432 = getelementptr inbounds float, ptr %2766, i64 %3431
  %3433 = load <8 x float>, ptr %3432, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5"

if.then.i253:                                     ; preds = %"end for local_laplacian.s0.v5", %"consume f125.if.then.i253_crit_edge"
  %b1020.pre-phi = phi <8 x i32> [ %.pre362, %"consume f125.if.then.i253_crit_edge" ], [ %b886, %"end for local_laplacian.s0.v5" ]
  %b1021.pre-phi = phi <8 x i32> [ %.pre359, %"consume f125.if.then.i253_crit_edge" ], [ %b887, %"end for local_laplacian.s0.v5" ]
  %b1019.pre-phi = phi i32 [ %.pre356, %"consume f125.if.then.i253_crit_edge" ], [ %b885, %"end for local_laplacian.s0.v5" ]
  %.pre-phi355 = phi i32 [ %.pre354, %"consume f125.if.then.i253_crit_edge" ], [ %3413, %"end for local_laplacian.s0.v5" ]
  %.pre-phi353 = phi i32 [ %.pre352, %"consume f125.if.then.i253_crit_edge" ], [ %3412, %"end for local_laplacian.s0.v5" ]
  %b1014.pre-phi = phi i32 [ %.pre341, %"consume f125.if.then.i253_crit_edge" ], [ %3416, %"end for local_laplacian.s0.v5" ]
  %.pre-phi340 = phi i32 [ %.pre339, %"consume f125.if.then.i253_crit_edge" ], [ %3415, %"end for local_laplacian.s0.v5" ]
  %.pre-phi338 = phi i64 [ %.pre337, %"consume f125.if.then.i253_crit_edge" ], [ %3419, %"end for local_laplacian.s0.v5" ]
  tail call void @halide_free(ptr %__user_context, ptr nonnull %2766) #7
  %3434 = shl nsw i64 %64, 2
  %3435 = add i32 %a1120, 1
  %3436 = xor i32 %f4.v4.min_realized, -1
  %3437 = add i32 %local_laplacian.s0.v4.v4.base, 1
  %3438 = and i32 %3437, 1
  %3439 = icmp ne i32 %3438, 0
  %3440 = shl i32 %3435, 1
  %3441 = and i32 %3440, 2
  %3442 = sub i32 %3437, %f2.v4.min_realized
  %3443 = add i32 %f2.v3.extent_realized.s, 1
  %3444 = mul i32 %3442, %3443
  %3445 = sub i32 %a1120, %f2.v3.min_realized
  %3446 = add i32 %3445, %3444
  %3447 = shl i32 %a1120, 1
  %3448 = and i32 %3447, 2
  %3449 = add nsw i64 %3402, 1
  %3450 = mul nsw i64 %3449, %73
  %3451 = mul nsw i64 %73, %66
  %3452 = add nsw i64 %3451, %62
  %3453 = sub i64 %3450, %3452
  %3454 = mul nsw i64 %75, %69
  %3455 = add i64 %3452, %3454
  %3456 = sub i64 %3450, %3455
  %3457 = mul nsw i64 %3449, %53
  %3458 = mul nsw i64 %50, %53
  %3459 = mul nsw i64 %b1037, %55
  %3460 = add nsw i64 %3458, %48
  %3461 = add i64 %3460, %3459
  %3462 = sub i64 %3457, %3461
  %3463 = shl nsw i64 %55, 1
  %3464 = add i32 %b1028, %local_laplacian.extent.2
  %a886 = sub nsw i32 %b793, %106
  %3465 = icmp sgt i32 %108, %b793
  %f129.s0.v3.v3.epilogue.s = select i1 %3465, i32 %a886, i32 %109
  %3466 = lshr i32 %f129.s0.v3.v3.epilogue.s, 3
  %a887 = add nuw nsw i32 %3466, 1
  %.inv141 = icmp sgt i32 %f129.s0.v3.v3.epilogue.s, -1
  %3467 = select i1 %.inv141, i32 %a887, i32 0
  %3468 = shl nsw i32 %106, 1
  %3469 = and i32 %3468, 2
  %3470 = sub i32 %106, %f75.v3.min_realized
  %3471 = sub i32 %106, %f7.v3.min_realized
  %.not142 = icmp slt i32 %123, %3467
  %3472 = shl nsw i32 %b793, 1
  %3473 = and i32 %3472, 2
  %3474 = ashr i32 %b787, 5
  %t2480 = add nsw i32 %3473, %3474
  %3475 = sub i32 %b793, %f75.v3.min_realized
  %3476 = sub nsw i32 %b793, %f7.v3.min_realized
  %3477 = add nsw i32 %95, -67
  %3478 = lshr i32 %3477, 3
  %3479 = and i32 %3478, 2
  %3480 = ashr i32 %3477, 5
  %t2502 = add nsw i32 %3479, %3480
  %3481 = sub nsw i32 %3474, %f8.v3.min_realized
  %3482 = sub nsw i32 %t2480, %f8.v3.min_realized
  %3483 = sext i32 %3474 to i64
  %3484 = sub nsw i64 %3483, %4
  %3485 = sext i32 %t2480 to i64
  %3486 = xor i64 %4, -1
  %3487 = add nsw i64 %3486, %3485
  %3488 = sub nsw i32 %3480, %f8.v3.min_realized
  %3489 = sub nsw i32 %t2502, %f8.v3.min_realized
  %3490 = sext i32 %3480 to i64
  %3491 = sub nsw i64 %3490, %4
  %3492 = sext i32 %t2502 to i64
  %3493 = xor i64 %4, -1
  %3494 = add nsw i64 %3493, %3492
  %narrow144 = sub nsw i32 %b793, %f129.v3.min_realized
  %3495 = sext i32 %narrow144 to i64
  %a906 = sub nsw i32 %b792, %99
  %3496 = icmp sgt i32 %101, %b792
  %f128.s0.v3.v3.epilogue.s = select i1 %3496, i32 %a906, i32 %102
  %3497 = lshr i32 %f128.s0.v3.v3.epilogue.s, 3
  %a907 = add nuw nsw i32 %3497, 1
  %.inv128 = icmp sgt i32 %f128.s0.v3.v3.epilogue.s, -1
  %3498 = select i1 %.inv128, i32 %a907, i32 0
  %3499 = shl nsw i32 %99, 1
  %3500 = and i32 %3499, 2
  %3501 = sub i32 %99, %f74.v3.min_realized
  %3502 = sub i32 %99, %f6.v3.min_realized
  %.not129 = icmp slt i32 %122, %3498
  %3503 = shl nsw i32 %b792, 1
  %3504 = and i32 %3503, 2
  %3505 = ashr i32 %b786, 4
  %t2557 = add nsw i32 %3504, %3505
  %3506 = sub i32 %b792, %f74.v3.min_realized
  %3507 = sub nsw i32 %b792, %f6.v3.min_realized
  %3508 = sub nsw i32 %t2557, %f7.v3.min_realized
  %3509 = sub nsw i32 %3505, %f7.v3.min_realized
  %3510 = add nsw i32 %95, -35
  %3511 = lshr i32 %3510, 2
  %3512 = and i32 %3511, 2
  %3513 = ashr i32 %3510, 4
  %t2579 = add nsw i32 %3512, %3513
  %3514 = sub nsw i32 %t2579, %f7.v3.min_realized
  %3515 = sub nsw i32 %3513, %f7.v3.min_realized
  %narrow130 = sub nsw i32 %3505, %f129.v3.min_realized
  %3516 = sext i32 %narrow130 to i64
  %3517 = xor i32 %f129.v3.min_realized, -1
  %narrow363 = add nsw i32 %t2557, %3517
  %3518 = sext i32 %narrow363 to i64
  %narrow132 = sub nsw i32 %3513, %f129.v3.min_realized
  %3519 = sext i32 %narrow132 to i64
  %3520 = xor i32 %f129.v3.min_realized, -1
  %narrow364 = add nsw i32 %t2579, %3520
  %3521 = sext i32 %narrow364 to i64
  %narrow135 = sub nsw i32 %b792, %f128.v3.min_realized
  %3522 = sext i32 %narrow135 to i64
  %a926 = sub nsw i32 %b801, %135
  %3523 = icmp sgt i32 %137, %b801
  %f127.s0.v3.v3.epilogue.s = select i1 %3523, i32 %a926, i32 %138
  %3524 = lshr i32 %f127.s0.v3.v3.epilogue.s, 3
  %a927 = add nuw nsw i32 %3524, 1
  %.inv = icmp sgt i32 %f127.s0.v3.v3.epilogue.s, -1
  %3525 = select i1 %.inv, i32 %a927, i32 0
  %3526 = shl nsw i32 %135, 1
  %3527 = and i32 %3526, 2
  %3528 = sub i32 %135, %f73.v3.min_realized
  %3529 = sub i32 %135, %f5.v3.min_realized
  %.not119 = icmp slt i32 %139, %3525
  %3530 = shl nsw i32 %b801, 1
  %3531 = and i32 %3530, 2
  %3532 = ashr i32 %b795, 3
  %t2634 = add nsw i32 %3531, %3532
  %3533 = sub i32 %b801, %f73.v3.min_realized
  %3534 = sub nsw i32 %b801, %f5.v3.min_realized
  %3535 = sub nsw i32 %t2634, %f6.v3.min_realized
  %3536 = sub nsw i32 %3532, %f6.v3.min_realized
  %3537 = add nsw i32 %95, -19
  %3538 = lshr i32 %3537, 1
  %3539 = and i32 %3538, 2
  %3540 = ashr i32 %3537, 3
  %t2656 = add nsw i32 %3539, %3540
  %3541 = sub nsw i32 %t2656, %f6.v3.min_realized
  %3542 = sub nsw i32 %3540, %f6.v3.min_realized
  %narrow120 = sub nsw i32 %3532, %f128.v3.min_realized
  %3543 = sext i32 %narrow120 to i64
  %3544 = xor i32 %f128.v3.min_realized, -1
  %narrow365 = add nsw i32 %t2634, %3544
  %3545 = sext i32 %narrow365 to i64
  %narrow122 = sub nsw i32 %3540, %f128.v3.min_realized
  %3546 = sext i32 %narrow122 to i64
  %3547 = xor i32 %f128.v3.min_realized, -1
  %narrow366 = add nsw i32 %t2656, %3547
  %3548 = sext i32 %narrow366 to i64
  %3549 = sext i32 %b801 to i64
  %3550 = sub nsw i64 %3549, %1516
  %a946 = sub nsw i32 %b806, %161
  %3551 = icmp sgt i32 %166, %b806
  %f126.s0.v3.v3.epilogue.s = select i1 %3551, i32 %a946, i32 %167
  %3552 = add nsw i32 %f126.s0.v3.v3.epilogue.s, 9
  %a947 = lshr i32 %3552, 3
  %3553 = icmp sgt i32 %f126.s0.v3.v3.epilogue.s, -2
  %3554 = select i1 %3553, i32 %a947, i32 0
  %.not201 = icmp eq i32 %3554, 0
  %3555 = sub i32 %161, %f72.v3.min_realized
  %3556 = sub i32 %161, %f4.v3.min_realized
  %3557 = and i32 %a1120, 2
  %3558 = xor i32 %f126.v3.min_realized, -1
  %3559 = sext i32 %3558 to i64
  %3560 = icmp sgt i32 %2132, %3554
  %3561 = and i32 %162, 2
  %3562 = ashr i32 %162, 2
  %t2711 = add nsw i32 %3562, %3561
  %3563 = sub i32 %b806, %f72.v3.min_realized
  %3564 = sub nsw i32 %b806, %f4.v3.min_realized
  %3565 = sub nsw i32 %t2711, %f5.v3.min_realized
  %3566 = sub nsw i32 %3562, %f5.v3.min_realized
  %3567 = add nsw i32 %95, -11
  %3568 = and i32 %3567, 2
  %3569 = ashr i32 %3567, 2
  %t2733 = add nsw i32 %3569, %3568
  %3570 = sub nsw i32 %t2733, %f5.v3.min_realized
  %3571 = sub nsw i32 %3569, %f5.v3.min_realized
  %3572 = sext i32 %3562 to i64
  %3573 = sub nsw i64 %3572, %1516
  %3574 = sext i32 %t2711 to i64
  %3575 = xor i64 %1516, -1
  %3576 = add nsw i64 %3575, %3574
  %3577 = sext i32 %3569 to i64
  %3578 = sub nsw i64 %3577, %1516
  %3579 = sext i32 %t2733 to i64
  %3580 = xor i64 %1516, -1
  %3581 = add nsw i64 %3580, %3579
  %3582 = sext i32 %b806 to i64
  %3583 = sub nsw i64 %3582, %2143
  %a970 = lshr i32 %197, 3
  %3584 = icmp sgt i32 %197, 7
  %3585 = select i1 %3584, i32 %a970, i32 0
  %.not200 = icmp eq i32 %3585, 0
  %3586 = mul nsw i64 %.pre-phi338, -4
  %3587 = fdiv float 1.000000e+00, %230
  %3588 = insertelement <4 x float> undef, float %3587, i64 0
  %3589 = shufflevector <4 x float> %3588, <4 x float> undef, <4 x i32> zeroinitializer
  %3590 = xor i32 %158, -1
  %3591 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %3592 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %3591
  %.neg251 = shufflevector <4 x i32> %3592, <4 x i32> poison, <4 x i32> zeroinitializer
  %3593 = shl nsw i32 %levels, 8
  %3594 = add nsw i32 %3593, -256
  %3595 = insertelement <4 x i32> undef, i32 %3594, i64 0
  %b978 = shufflevector <4 x i32> %3595, <4 x i32> undef, <4 x i32> zeroinitializer
  %3596 = ashr i32 %3435, 1
  %3597 = insertelement <4 x float> undef, float %beta, i64 0
  %3598 = shufflevector <4 x float> %3597, <4 x float> undef, <4 x i32> zeroinitializer
  %3599 = add nsw i32 %3448, %161
  %3600 = add nsw i32 %3441, %3596
  %3601 = icmp sgt i32 %2769, %3585
  %3602 = shl i32 %95, 1
  %3603 = and i32 %3602, 2
  %3604 = ashr i32 %95, 1
  %t2801 = add nsw i32 %3603, %3604
  %3605 = sub i32 %95, %f2.v3.min_realized
  %3606 = sub nsw i32 %t2801, %f4.v3.min_realized
  %3607 = sub nsw i32 %3604, %f4.v3.min_realized
  %3608 = add nsw i32 %95, -7
  %3609 = shl i32 %3608, 1
  %3610 = and i32 %3609, 2
  %3611 = ashr i32 %3608, 1
  %t2828 = add nsw i32 %3610, %3611
  %3612 = sub nsw i32 %t2828, %f4.v3.min_realized
  %3613 = sub nsw i32 %3611, %f4.v3.min_realized
  %t2826 = add i32 %3607, -4
  %t2825 = add i32 %3606, -4
  %3614 = sext i32 %3604 to i64
  %3615 = sub nsw i64 %3614, %2143
  %3616 = add nsw i64 %3615, -4
  %3617 = sext i32 %t2801 to i64
  %3618 = sub nsw i64 %3617, %2143
  %3619 = add nsw i64 %3618, -5
  %3620 = sext i32 %3611 to i64
  %3621 = sub nsw i64 %3620, %2143
  %3622 = sext i32 %t2828 to i64
  %3623 = xor i64 %2143, -1
  %3624 = add nsw i64 %3623, %3622
  %3625 = add nsw i64 %58, -8
  %3626 = add nsw i64 %3625, %62
  %3627 = sub nsw i64 %3626, %.pre-phi338
  %3628 = sub nsw i32 %input.min.0, %local_laplacian.min.0
  %3629 = add nsw i32 %3628, 7
  %a1006 = lshr i32 %3629, 3
  %3630 = icmp sgt i32 %3628, 0
  %3631 = select i1 %3630, i32 %a1006, i32 0
  %local_laplacian.s0.v3.v3.prologue = tail call i32 @llvm.smin.i32(i32 %3400, i32 %3631)
  %3632 = sub nsw i32 %.pre-phi340, %local_laplacian.min.0
  %3633 = ashr i32 %3632, 3
  %a1011 = add nsw i32 %3633, -1
  %3634 = tail call i32 @llvm.smin.i32(i32 %b1014.pre-phi, i32 %b816)
  %3635 = sub nsw i32 %3634, %local_laplacian.min.0
  %b1013 = ashr i32 %3635, 3
  %.not175 = icmp slt i32 %b1013, %3633
  %a1010 = select i1 %.not175, i32 %b1013, i32 %a1011
  %3636 = add nsw i32 %local_laplacian.extent.0, -1
  %b1012 = ashr i32 %3636, 3
  %3637 = tail call i32 @llvm.smin.i32(i32 %b1012, i32 %a1010)
  %b1009 = add nsw i32 %3637, 1
  %local_laplacian.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v3.v3.prologue, i32 %b1009)
  %3638 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, 0
  %3639 = icmp slt i32 %b1028, %3464
  %.not176 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, %3637
  %a1021 = tail call i32 @llvm.smax.i32(i32 %b1146, i32 %b1028)
  %local_laplacian.s0.v5.prologue = tail call i32 @llvm.smin.i32(i32 %3464, i32 %a1021)
  %a1023 = tail call i32 @llvm.smin.i32(i32 %3464, i32 %.pre-phi355)
  %local_laplacian.s0.v5.epilogue = tail call i32 @llvm.smax.i32(i32 %a1023, i32 %local_laplacian.s0.v5.prologue)
  %3640 = icmp slt i32 %b1028, %local_laplacian.s0.v5.prologue
  %3641 = icmp slt i32 %local_laplacian.s0.v5.prologue, %a1023
  %3642 = icmp slt i32 %local_laplacian.s0.v5.epilogue, %3464
  %3643 = add nsw i64 %46, -1
  %b1032 = add nsw i64 %3643, %b1037
  %3644 = sub nsw i32 %local_laplacian.s0.v5.epilogue, %local_laplacian.s0.v5.prologue
  %3645 = sext i32 %local_laplacian.s0.v5.prologue to i64
  %3646 = mul nsw i64 %75, %3645
  %3647 = mul nsw i64 %3645, %55
  %3648 = sext i32 %local_laplacian.s0.v5.epilogue to i64
  %3649 = mul nsw i64 %75, %3648
  %3650 = icmp slt i32 %local_laplacian.s0.v3.v3.epilogue, %3400
  %3651 = sext i32 %3443 to i64
  %3652 = sext i32 %3605 to i64
  br label %"produce f12919"

"for local_laplacian.s0.v5":                      ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v5.preheader"
  %lsr.iv400 = phi ptr [ %scevgep399, %"for local_laplacian.s0.v5.preheader" ], [ %scevgep402, %"for local_laplacian.s0.v5" ]
  %lsr.iv397 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5.preheader" ], [ %lsr.iv.next398, %"for local_laplacian.s0.v5" ]
  %a883 = phi i32 [ %b1028, %"for local_laplacian.s0.v5.preheader" ], [ %3707, %"for local_laplacian.s0.v5" ]
  %a882 = tail call i32 @llvm.smin.i32(i32 %b885, i32 %a883)
  %3653 = tail call i32 @llvm.smax.i32(i32 %a882, i32 %b1146)
  %3654 = mul nsw i32 %3653, %input.stride.2
  %.scalar = add i32 %3654, %3414
  %.scalar328 = sub i32 %.scalar, %3412
  %3655 = insertelement <8 x i32> undef, i32 %.scalar328, i64 0
  %3656 = shufflevector <8 x i32> %3655, <8 x i32> poison, <8 x i32> zeroinitializer
  %3657 = add <8 x i32> %3656, %3430
  %3658 = extractelement <8 x i32> %3657, i64 0
  %3659 = sext i32 %3658 to i64
  %3660 = getelementptr inbounds i16, ptr %input.host, i64 %3659
  %3661 = load i16, ptr %3660, align 2, !tbaa !40
  %3662 = insertelement <8 x i16> undef, i16 %3661, i64 0
  %3663 = extractelement <8 x i32> %3657, i64 1
  %3664 = sext i32 %3663 to i64
  %3665 = getelementptr inbounds i16, ptr %input.host, i64 %3664
  %3666 = load i16, ptr %3665, align 2, !tbaa !40
  %3667 = insertelement <8 x i16> %3662, i16 %3666, i64 1
  %3668 = extractelement <8 x i32> %3657, i64 2
  %3669 = sext i32 %3668 to i64
  %3670 = getelementptr inbounds i16, ptr %input.host, i64 %3669
  %3671 = load i16, ptr %3670, align 2, !tbaa !40
  %3672 = insertelement <8 x i16> %3667, i16 %3671, i64 2
  %3673 = extractelement <8 x i32> %3657, i64 3
  %3674 = sext i32 %3673 to i64
  %3675 = getelementptr inbounds i16, ptr %input.host, i64 %3674
  %3676 = load i16, ptr %3675, align 2, !tbaa !40
  %3677 = insertelement <8 x i16> %3672, i16 %3676, i64 3
  %3678 = extractelement <8 x i32> %3657, i64 4
  %3679 = sext i32 %3678 to i64
  %3680 = getelementptr inbounds i16, ptr %input.host, i64 %3679
  %3681 = load i16, ptr %3680, align 2, !tbaa !40
  %3682 = insertelement <8 x i16> %3677, i16 %3681, i64 4
  %3683 = extractelement <8 x i32> %3657, i64 5
  %3684 = sext i32 %3683 to i64
  %3685 = getelementptr inbounds i16, ptr %input.host, i64 %3684
  %3686 = load i16, ptr %3685, align 2, !tbaa !40
  %3687 = insertelement <8 x i16> %3682, i16 %3686, i64 5
  %3688 = extractelement <8 x i32> %3657, i64 6
  %3689 = sext i32 %3688 to i64
  %3690 = getelementptr inbounds i16, ptr %input.host, i64 %3689
  %3691 = load i16, ptr %3690, align 2, !tbaa !40
  %3692 = insertelement <8 x i16> %3687, i16 %3691, i64 6
  %3693 = extractelement <8 x i32> %3657, i64 7
  %3694 = sext i32 %3693 to i64
  %3695 = getelementptr inbounds i16, ptr %input.host, i64 %3694
  %3696 = load i16, ptr %3695, align 2, !tbaa !40
  %3697 = insertelement <8 x i16> %3692, i16 %3696, i64 7
  %3698 = uitofp <8 x i16> %3697 to <8 x float>
  %3699 = fmul <8 x float> %3698, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3700 = fadd <8 x float> %3699, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3701 = fmul <8 x float> %3433, %3700
  %a881 = fdiv <8 x float> %3701, %3427
  %3702 = fcmp olt <8 x float> %a881, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a880 = select <8 x i1> %3702, <8 x float> %a881, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3703 = fcmp ogt <8 x float> %a880, zeroinitializer
  %3704 = select <8 x i1> %3703, <8 x float> %a880, <8 x float> zeroinitializer
  %3705 = fmul <8 x float> %3704, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3706 = fptoui <8 x float> %3705 to <8 x i16>
  store <8 x i16> %3706, ptr %lsr.iv400, align 2, !tbaa !74
  %3707 = add nsw i32 %a883, 1
  %lsr.iv.next398 = add i32 %lsr.iv397, -1
  %scevgep402 = getelementptr i1, ptr %lsr.iv400, i64 %3403
  %.not149 = icmp eq i32 %lsr.iv.next398, 0
  br i1 %.not149, label %"end for local_laplacian.s0.v5", label %"for local_laplacian.s0.v5"

"end for local_laplacian.s0.v5":                  ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3"
  %3708 = add nuw nsw i32 %local_laplacian.s0.v3.v3, 1
  %.not148 = icmp eq i32 %3708, %3400
  br i1 %.not148, label %if.then.i253, label %"for local_laplacian.s0.v3.v3"

if.then.i256:                                     ; preds = %if.then.i268
  tail call void @halide_free(ptr %__user_context, ptr nonnull %128) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %154) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %193) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %222) #7
  br label %destructor_block.thread

"produce f12919":                                 ; preds = %if.then.i268, %if.then.i253
  %indvars.iv325 = phi i64 [ %indvars.iv.next326, %if.then.i268 ], [ 1, %if.then.i253 ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %if.then.i268 ], [ %3462, %if.then.i253 ]
  %lsr.iv367 = phi i64 [ %lsr.iv.next368, %if.then.i268 ], [ %3456, %if.then.i253 ]
  %lsr.iv349 = phi i64 [ %lsr.iv.next350, %if.then.i268 ], [ %3453, %if.then.i253 ]
  %lsr.iv329 = phi i32 [ %lsr.iv.next330, %if.then.i268 ], [ %3446, %if.then.i253 ]
  %lsr.iv319 = phi i1 [ %lsr.iv.next320, %if.then.i268 ], [ %3439, %if.then.i253 ]
  %3709 = select i1 %lsr.iv319, i32 2, i32 0
  %3710 = add nsw i64 %indvars.iv325, %3402
  %3711 = trunc i64 %3710 to i32
  %3712 = add i32 %3711, 13
  %3713 = and i32 %3712, 15
  %3714 = icmp eq i32 %3713, 15
  br i1 %3714, label %true_bb21, label %"produce f12832"

true_bb21:                                        ; preds = %"produce f12919"
  br i1 %.inv141, label %"for f129.s0.v3.v324.preheader", label %"end for f129.s0.v3.v325", !prof !5

"for f129.s0.v3.v324.preheader":                  ; preds = %true_bb21
  %3715 = trunc i64 %3710 to i32
  %3716 = add i32 %3715, 45
  %3717 = ashr i32 %3716, 4
  %3718 = shl nsw i32 %3717, 1
  %3719 = and i32 %3718, 2
  %3720 = ashr i32 %3716, 5
  %t2440 = add nsw i32 %3719, %3720
  %3721 = sub i32 %3717, %f75.v4.min_realized
  %3722 = mul i32 %3721, %228
  %3723 = add i32 %3470, %3722
  %3724 = add nsw i32 %t2440, %238
  %t2447 = mul nsw i32 %3724, %235
  %3725 = sub nsw i32 %3720, %237
  %t2449 = mul nsw i32 %3725, %235
  %3726 = sub i32 %3717, %f7.v4.min_realized
  %3727 = mul i32 %3726, %f7.stride.1
  %3728 = add i32 %3471, %3727
  %3729 = add i32 %t2440, %243
  %t2454 = mul nsw i32 %3729, %242
  %3730 = sub nsw i32 %3720, %f8.v4.min_realized
  %t2459 = mul nsw i32 %3730, %242
  %3731 = sext i32 %t2449 to i64
  %3732 = add nsw i64 %3731, -1
  %3733 = sext i32 %t2447 to i64
  %3734 = add nsw i64 %3733, -1
  %narrow146 = sub nsw i32 %3717, %225
  %3735 = sext i32 %narrow146 to i64
  %3736 = mul nsw i64 %250, %3735
  %3737 = add nsw i64 %3736, %.neg218
  br label %"for f129.s0.v3.v324"

"for f129.s0.v3.v324":                            ; preds = %"for f129.s0.v3.v324.preheader", %"for f129.s0.v3.v324"
  %lsr.iv285 = phi i32 [ %lsr.iv.next286, %"for f129.s0.v3.v324" ], [ 0, %"for f129.s0.v3.v324.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f129.s0.v3.v324" ], [ %a887, %"for f129.s0.v3.v324.preheader" ]
  %3738 = add i32 %lsr.iv285, %106
  %3739 = ashr i32 %3738, 1
  %t2441 = add nsw i32 %3739, %3469
  %3740 = add i32 %3723, %lsr.iv285
  %3741 = sext i32 %3740 to i64
  %3742 = getelementptr inbounds float, ptr %f75.host, i64 %3741
  %3743 = load <4 x float>, ptr %3742, align 4, !tbaa !13
  %3744 = add nsw i64 %3741, 4
  %3745 = getelementptr inbounds float, ptr %f75.host, i64 %3744
  %3746 = load <4 x float>, ptr %3745, align 4, !tbaa !13
  %3747 = shufflevector <4 x float> %3743, <4 x float> %3746, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2443 = fmul <4 x float> %232, %3747
  %a888 = fptosi <4 x float> %t2443 to <4 x i32>
  %a891 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a888)
  %3748 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a891, <4 x i32> zeroinitializer)
  %3749 = sitofp <4 x i32> %3748 to <4 x float>
  %t2445 = fsub <4 x float> %t2443, %3749
  %3750 = add i32 %3728, %lsr.iv285
  %t2452 = sub nsw <4 x i32> %3748, %241
  %t2456 = mul nsw <4 x i32> %t2452, %245
  %3751 = add nsw <4 x i32> %t2452, <i32 1, i32 1, i32 1, i32 1>
  %t2462 = mul nsw <4 x i32> %3751, %245
  %3752 = add i32 %3738, 1
  %3753 = shl i32 %3752, 1
  %3754 = and i32 %3753, 2
  %3755 = ashr i32 %3752, 1
  %t2463 = add nsw i32 %3754, %3755
  %3756 = shufflevector <4 x float> %3743, <4 x float> %3746, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2464 = fmul <4 x float> %232, %3756
  %a892 = fptosi <4 x float> %t2464 to <4 x i32>
  %a895 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a892)
  %3757 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a895, <4 x i32> zeroinitializer)
  %3758 = sitofp <4 x i32> %3757 to <4 x float>
  %t2466 = fsub <4 x float> %t2464, %3758
  %t2469 = sub nsw <4 x i32> %3757, %241
  %t2472 = mul nsw <4 x i32> %t2469, %245
  %3759 = add nsw <4 x i32> %t2469, <i32 1, i32 1, i32 1, i32 1>
  %t2477 = mul nsw <4 x i32> %3759, %245
  %3760 = sub nsw i32 %3739, %f8.v3.min_realized
  %3761 = add nsw i32 %3760, %t2459
  %3762 = insertelement <4 x i32> undef, i32 %3761, i64 0
  %3763 = shufflevector <4 x i32> %3762, <4 x i32> undef, <4 x i32> zeroinitializer
  %3764 = add nsw <4 x i32> %3763, <i32 0, i32 1, i32 2, i32 3>
  %3765 = add nsw <4 x i32> %t2462, %3764
  %3766 = extractelement <4 x i32> %3765, i64 0
  %3767 = sext i32 %3766 to i64
  %3768 = getelementptr inbounds float, ptr %f8.host, i64 %3767
  %3769 = load float, ptr %3768, align 4, !tbaa !36
  %3770 = insertelement <4 x float> undef, float %3769, i64 0
  %3771 = extractelement <4 x i32> %3765, i64 1
  %3772 = sext i32 %3771 to i64
  %3773 = getelementptr inbounds float, ptr %f8.host, i64 %3772
  %3774 = load float, ptr %3773, align 4, !tbaa !36
  %3775 = insertelement <4 x float> %3770, float %3774, i64 1
  %3776 = extractelement <4 x i32> %3765, i64 2
  %3777 = sext i32 %3776 to i64
  %3778 = getelementptr inbounds float, ptr %f8.host, i64 %3777
  %3779 = load float, ptr %3778, align 4, !tbaa !36
  %3780 = insertelement <4 x float> %3775, float %3779, i64 2
  %3781 = extractelement <4 x i32> %3765, i64 3
  %3782 = sext i32 %3781 to i64
  %3783 = getelementptr inbounds float, ptr %f8.host, i64 %3782
  %3784 = load float, ptr %3783, align 4, !tbaa !36
  %3785 = insertelement <4 x float> %3780, float %3784, i64 3
  %3786 = fmul <4 x float> %3785, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3787 = sub nsw i32 %t2441, %f8.v3.min_realized
  %3788 = add nsw i32 %3787, %t2459
  %3789 = insertelement <4 x i32> undef, i32 %3788, i64 0
  %3790 = shufflevector <4 x i32> %3789, <4 x i32> undef, <4 x i32> zeroinitializer
  %3791 = add <4 x i32> %3790, <i32 -1, i32 0, i32 1, i32 2>
  %3792 = add <4 x i32> %3791, %t2462
  %3793 = extractelement <4 x i32> %3792, i64 0
  %3794 = sext i32 %3793 to i64
  %3795 = getelementptr inbounds float, ptr %f8.host, i64 %3794
  %3796 = load float, ptr %3795, align 4, !tbaa !36
  %3797 = insertelement <4 x float> undef, float %3796, i64 0
  %3798 = extractelement <4 x i32> %3792, i64 1
  %3799 = sext i32 %3798 to i64
  %3800 = getelementptr inbounds float, ptr %f8.host, i64 %3799
  %3801 = load float, ptr %3800, align 4, !tbaa !36
  %3802 = insertelement <4 x float> %3797, float %3801, i64 1
  %3803 = extractelement <4 x i32> %3792, i64 2
  %3804 = sext i32 %3803 to i64
  %3805 = getelementptr inbounds float, ptr %f8.host, i64 %3804
  %3806 = load float, ptr %3805, align 4, !tbaa !36
  %3807 = insertelement <4 x float> %3802, float %3806, i64 2
  %3808 = extractelement <4 x i32> %3792, i64 3
  %3809 = sext i32 %3808 to i64
  %3810 = getelementptr inbounds float, ptr %f8.host, i64 %3809
  %3811 = load float, ptr %3810, align 4, !tbaa !36
  %3812 = insertelement <4 x float> %3807, float %3811, i64 3
  %3813 = fmul <4 x float> %3812, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3814 = fadd <4 x float> %3786, %3813
  %3815 = fmul <4 x float> %3814, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3816 = add nsw i32 %3760, %t2454
  %3817 = insertelement <4 x i32> undef, i32 %3816, i64 0
  %3818 = shufflevector <4 x i32> %3817, <4 x i32> undef, <4 x i32> zeroinitializer
  %3819 = add nsw <4 x i32> %3818, <i32 0, i32 1, i32 2, i32 3>
  %3820 = add nsw <4 x i32> %t2462, %3819
  %3821 = extractelement <4 x i32> %3820, i64 0
  %3822 = sext i32 %3821 to i64
  %3823 = getelementptr inbounds float, ptr %f8.host, i64 %3822
  %3824 = load float, ptr %3823, align 4, !tbaa !36
  %3825 = insertelement <4 x float> undef, float %3824, i64 0
  %3826 = extractelement <4 x i32> %3820, i64 1
  %3827 = sext i32 %3826 to i64
  %3828 = getelementptr inbounds float, ptr %f8.host, i64 %3827
  %3829 = load float, ptr %3828, align 4, !tbaa !36
  %3830 = insertelement <4 x float> %3825, float %3829, i64 1
  %3831 = extractelement <4 x i32> %3820, i64 2
  %3832 = sext i32 %3831 to i64
  %3833 = getelementptr inbounds float, ptr %f8.host, i64 %3832
  %3834 = load float, ptr %3833, align 4, !tbaa !36
  %3835 = insertelement <4 x float> %3830, float %3834, i64 2
  %3836 = extractelement <4 x i32> %3820, i64 3
  %3837 = sext i32 %3836 to i64
  %3838 = getelementptr inbounds float, ptr %f8.host, i64 %3837
  %3839 = load float, ptr %3838, align 4, !tbaa !36
  %3840 = insertelement <4 x float> %3835, float %3839, i64 3
  %3841 = fmul <4 x float> %3840, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3842 = add nsw i32 %3787, %t2454
  %3843 = insertelement <4 x i32> undef, i32 %3842, i64 0
  %3844 = shufflevector <4 x i32> %3843, <4 x i32> undef, <4 x i32> zeroinitializer
  %3845 = add <4 x i32> %3844, <i32 -1, i32 0, i32 1, i32 2>
  %3846 = add <4 x i32> %3845, %t2462
  %3847 = extractelement <4 x i32> %3846, i64 0
  %3848 = sext i32 %3847 to i64
  %3849 = getelementptr inbounds float, ptr %f8.host, i64 %3848
  %3850 = load float, ptr %3849, align 4, !tbaa !36
  %3851 = insertelement <4 x float> undef, float %3850, i64 0
  %3852 = extractelement <4 x i32> %3846, i64 1
  %3853 = sext i32 %3852 to i64
  %3854 = getelementptr inbounds float, ptr %f8.host, i64 %3853
  %3855 = load float, ptr %3854, align 4, !tbaa !36
  %3856 = insertelement <4 x float> %3851, float %3855, i64 1
  %3857 = extractelement <4 x i32> %3846, i64 2
  %3858 = sext i32 %3857 to i64
  %3859 = getelementptr inbounds float, ptr %f8.host, i64 %3858
  %3860 = load float, ptr %3859, align 4, !tbaa !36
  %3861 = insertelement <4 x float> %3856, float %3860, i64 2
  %3862 = extractelement <4 x i32> %3846, i64 3
  %3863 = sext i32 %3862 to i64
  %3864 = getelementptr inbounds float, ptr %f8.host, i64 %3863
  %3865 = load float, ptr %3864, align 4, !tbaa !36
  %3866 = insertelement <4 x float> %3861, float %3865, i64 3
  %3867 = fmul <4 x float> %3866, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3868 = fadd <4 x float> %3841, %3867
  %3869 = fmul <4 x float> %3868, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3870 = fadd <4 x float> %3815, %3869
  %3871 = mul nsw <4 x i32> %3751, %248
  %3872 = insertelement <4 x i32> undef, i32 %3750, i64 0
  %3873 = shufflevector <4 x i32> %3872, <4 x i32> undef, <4 x i32> zeroinitializer
  %3874 = add nsw <4 x i32> %3873, <i32 0, i32 2, i32 4, i32 6>
  %3875 = add nsw <4 x i32> %3871, %3874
  %3876 = extractelement <4 x i32> %3875, i64 0
  %3877 = sext i32 %3876 to i64
  %3878 = getelementptr inbounds float, ptr %f7.host, i64 %3877
  %3879 = load float, ptr %3878, align 4, !tbaa !54
  %3880 = insertelement <4 x float> undef, float %3879, i64 0
  %3881 = extractelement <4 x i32> %3875, i64 1
  %3882 = sext i32 %3881 to i64
  %3883 = getelementptr inbounds float, ptr %f7.host, i64 %3882
  %3884 = load float, ptr %3883, align 4, !tbaa !54
  %3885 = insertelement <4 x float> %3880, float %3884, i64 1
  %3886 = extractelement <4 x i32> %3875, i64 2
  %3887 = sext i32 %3886 to i64
  %3888 = getelementptr inbounds float, ptr %f7.host, i64 %3887
  %3889 = load float, ptr %3888, align 4, !tbaa !54
  %3890 = insertelement <4 x float> %3885, float %3889, i64 2
  %3891 = extractelement <4 x i32> %3875, i64 3
  %3892 = sext i32 %3891 to i64
  %3893 = getelementptr inbounds float, ptr %f7.host, i64 %3892
  %3894 = load float, ptr %3893, align 4, !tbaa !54
  %3895 = insertelement <4 x float> %3890, float %3894, i64 3
  %3896 = fsub <4 x float> %3895, %3870
  %3897 = fmul <4 x float> %t2445, %3896
  %3898 = add nsw <4 x i32> %t2456, %3764
  %3899 = extractelement <4 x i32> %3898, i64 0
  %3900 = sext i32 %3899 to i64
  %3901 = getelementptr inbounds float, ptr %f8.host, i64 %3900
  %3902 = load float, ptr %3901, align 4, !tbaa !36
  %3903 = insertelement <4 x float> undef, float %3902, i64 0
  %3904 = extractelement <4 x i32> %3898, i64 1
  %3905 = sext i32 %3904 to i64
  %3906 = getelementptr inbounds float, ptr %f8.host, i64 %3905
  %3907 = load float, ptr %3906, align 4, !tbaa !36
  %3908 = insertelement <4 x float> %3903, float %3907, i64 1
  %3909 = extractelement <4 x i32> %3898, i64 2
  %3910 = sext i32 %3909 to i64
  %3911 = getelementptr inbounds float, ptr %f8.host, i64 %3910
  %3912 = load float, ptr %3911, align 4, !tbaa !36
  %3913 = insertelement <4 x float> %3908, float %3912, i64 2
  %3914 = extractelement <4 x i32> %3898, i64 3
  %3915 = sext i32 %3914 to i64
  %3916 = getelementptr inbounds float, ptr %f8.host, i64 %3915
  %3917 = load float, ptr %3916, align 4, !tbaa !36
  %3918 = insertelement <4 x float> %3913, float %3917, i64 3
  %3919 = fmul <4 x float> %3918, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3920 = add <4 x i32> %3791, %t2456
  %3921 = extractelement <4 x i32> %3920, i64 0
  %3922 = sext i32 %3921 to i64
  %3923 = getelementptr inbounds float, ptr %f8.host, i64 %3922
  %3924 = load float, ptr %3923, align 4, !tbaa !36
  %3925 = insertelement <4 x float> undef, float %3924, i64 0
  %3926 = extractelement <4 x i32> %3920, i64 1
  %3927 = sext i32 %3926 to i64
  %3928 = getelementptr inbounds float, ptr %f8.host, i64 %3927
  %3929 = load float, ptr %3928, align 4, !tbaa !36
  %3930 = insertelement <4 x float> %3925, float %3929, i64 1
  %3931 = extractelement <4 x i32> %3920, i64 2
  %3932 = sext i32 %3931 to i64
  %3933 = getelementptr inbounds float, ptr %f8.host, i64 %3932
  %3934 = load float, ptr %3933, align 4, !tbaa !36
  %3935 = insertelement <4 x float> %3930, float %3934, i64 2
  %3936 = extractelement <4 x i32> %3920, i64 3
  %3937 = sext i32 %3936 to i64
  %3938 = getelementptr inbounds float, ptr %f8.host, i64 %3937
  %3939 = load float, ptr %3938, align 4, !tbaa !36
  %3940 = insertelement <4 x float> %3935, float %3939, i64 3
  %3941 = fmul <4 x float> %3940, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3942 = fadd <4 x float> %3919, %3941
  %3943 = fmul <4 x float> %3942, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3944 = add nsw <4 x i32> %t2456, %3819
  %3945 = extractelement <4 x i32> %3944, i64 0
  %3946 = sext i32 %3945 to i64
  %3947 = getelementptr inbounds float, ptr %f8.host, i64 %3946
  %3948 = load float, ptr %3947, align 4, !tbaa !36
  %3949 = insertelement <4 x float> undef, float %3948, i64 0
  %3950 = extractelement <4 x i32> %3944, i64 1
  %3951 = sext i32 %3950 to i64
  %3952 = getelementptr inbounds float, ptr %f8.host, i64 %3951
  %3953 = load float, ptr %3952, align 4, !tbaa !36
  %3954 = insertelement <4 x float> %3949, float %3953, i64 1
  %3955 = extractelement <4 x i32> %3944, i64 2
  %3956 = sext i32 %3955 to i64
  %3957 = getelementptr inbounds float, ptr %f8.host, i64 %3956
  %3958 = load float, ptr %3957, align 4, !tbaa !36
  %3959 = insertelement <4 x float> %3954, float %3958, i64 2
  %3960 = extractelement <4 x i32> %3944, i64 3
  %3961 = sext i32 %3960 to i64
  %3962 = getelementptr inbounds float, ptr %f8.host, i64 %3961
  %3963 = load float, ptr %3962, align 4, !tbaa !36
  %3964 = insertelement <4 x float> %3959, float %3963, i64 3
  %3965 = fmul <4 x float> %3964, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3966 = add <4 x i32> %3845, %t2456
  %3967 = extractelement <4 x i32> %3966, i64 0
  %3968 = sext i32 %3967 to i64
  %3969 = getelementptr inbounds float, ptr %f8.host, i64 %3968
  %3970 = load float, ptr %3969, align 4, !tbaa !36
  %3971 = insertelement <4 x float> undef, float %3970, i64 0
  %3972 = extractelement <4 x i32> %3966, i64 1
  %3973 = sext i32 %3972 to i64
  %3974 = getelementptr inbounds float, ptr %f8.host, i64 %3973
  %3975 = load float, ptr %3974, align 4, !tbaa !36
  %3976 = insertelement <4 x float> %3971, float %3975, i64 1
  %3977 = extractelement <4 x i32> %3966, i64 2
  %3978 = sext i32 %3977 to i64
  %3979 = getelementptr inbounds float, ptr %f8.host, i64 %3978
  %3980 = load float, ptr %3979, align 4, !tbaa !36
  %3981 = insertelement <4 x float> %3976, float %3980, i64 2
  %3982 = extractelement <4 x i32> %3966, i64 3
  %3983 = sext i32 %3982 to i64
  %3984 = getelementptr inbounds float, ptr %f8.host, i64 %3983
  %3985 = load float, ptr %3984, align 4, !tbaa !36
  %3986 = insertelement <4 x float> %3981, float %3985, i64 3
  %3987 = fmul <4 x float> %3986, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3988 = fadd <4 x float> %3965, %3987
  %3989 = fmul <4 x float> %3988, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3990 = fadd <4 x float> %3943, %3989
  %3991 = mul nsw <4 x i32> %t2452, %248
  %3992 = add nsw <4 x i32> %3991, %3874
  %3993 = extractelement <4 x i32> %3992, i64 0
  %3994 = sext i32 %3993 to i64
  %3995 = getelementptr inbounds float, ptr %f7.host, i64 %3994
  %3996 = load float, ptr %3995, align 4, !tbaa !54
  %3997 = insertelement <4 x float> undef, float %3996, i64 0
  %3998 = extractelement <4 x i32> %3992, i64 1
  %3999 = sext i32 %3998 to i64
  %4000 = getelementptr inbounds float, ptr %f7.host, i64 %3999
  %4001 = load float, ptr %4000, align 4, !tbaa !54
  %4002 = insertelement <4 x float> %3997, float %4001, i64 1
  %4003 = extractelement <4 x i32> %3992, i64 2
  %4004 = sext i32 %4003 to i64
  %4005 = getelementptr inbounds float, ptr %f7.host, i64 %4004
  %4006 = load float, ptr %4005, align 4, !tbaa !54
  %4007 = insertelement <4 x float> %4002, float %4006, i64 2
  %4008 = extractelement <4 x i32> %3992, i64 3
  %4009 = sext i32 %4008 to i64
  %4010 = getelementptr inbounds float, ptr %f7.host, i64 %4009
  %4011 = load float, ptr %4010, align 4, !tbaa !54
  %4012 = insertelement <4 x float> %4007, float %4011, i64 3
  %4013 = fsub <4 x float> %4012, %3990
  %4014 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2445
  %4015 = fmul <4 x float> %4014, %4013
  %4016 = fadd <4 x float> %3897, %4015
  %4017 = sext i32 %3739 to i64
  %4018 = sub nsw i64 %4017, %4
  %4019 = add nsw i64 %4018, %3731
  %4020 = getelementptr inbounds float, ptr %f130.host, i64 %4019
  %4021 = load <4 x float>, ptr %4020, align 4, !tbaa !38
  %4022 = fmul <4 x float> %4021, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4023 = sext i32 %t2441 to i64
  %4024 = sub nsw i64 %4023, %4
  %4025 = add nsw i64 %3732, %4024
  %4026 = getelementptr inbounds float, ptr %f130.host, i64 %4025
  %4027 = load <4 x float>, ptr %4026, align 4, !tbaa !38
  %4028 = fmul <4 x float> %4027, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4029 = fadd <4 x float> %4022, %4028
  %4030 = fmul <4 x float> %4029, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4031 = add nsw i64 %4018, %3733
  %4032 = getelementptr inbounds float, ptr %f130.host, i64 %4031
  %4033 = load <4 x float>, ptr %4032, align 4, !tbaa !38
  %4034 = fmul <4 x float> %4033, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4035 = add nsw i64 %3734, %4024
  %4036 = getelementptr inbounds float, ptr %f130.host, i64 %4035
  %4037 = load <4 x float>, ptr %4036, align 4, !tbaa !38
  %4038 = fmul <4 x float> %4037, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4039 = fadd <4 x float> %4034, %4038
  %4040 = fmul <4 x float> %4039, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4041 = fadd <4 x float> %4030, %4040
  %4042 = fadd <4 x float> %4016, %4041
  %4043 = sub nsw i32 %3755, %f8.v3.min_realized
  %4044 = add nsw i32 %4043, %t2459
  %4045 = insertelement <4 x i32> undef, i32 %4044, i64 0
  %4046 = shufflevector <4 x i32> %4045, <4 x i32> undef, <4 x i32> zeroinitializer
  %4047 = add nsw <4 x i32> %4046, <i32 0, i32 1, i32 2, i32 3>
  %4048 = add nsw <4 x i32> %t2477, %4047
  %4049 = extractelement <4 x i32> %4048, i64 0
  %4050 = sext i32 %4049 to i64
  %4051 = getelementptr inbounds float, ptr %f8.host, i64 %4050
  %4052 = load float, ptr %4051, align 4, !tbaa !36
  %4053 = insertelement <4 x float> undef, float %4052, i64 0
  %4054 = extractelement <4 x i32> %4048, i64 1
  %4055 = sext i32 %4054 to i64
  %4056 = getelementptr inbounds float, ptr %f8.host, i64 %4055
  %4057 = load float, ptr %4056, align 4, !tbaa !36
  %4058 = insertelement <4 x float> %4053, float %4057, i64 1
  %4059 = extractelement <4 x i32> %4048, i64 2
  %4060 = sext i32 %4059 to i64
  %4061 = getelementptr inbounds float, ptr %f8.host, i64 %4060
  %4062 = load float, ptr %4061, align 4, !tbaa !36
  %4063 = insertelement <4 x float> %4058, float %4062, i64 2
  %4064 = extractelement <4 x i32> %4048, i64 3
  %4065 = sext i32 %4064 to i64
  %4066 = getelementptr inbounds float, ptr %f8.host, i64 %4065
  %4067 = load float, ptr %4066, align 4, !tbaa !36
  %4068 = insertelement <4 x float> %4063, float %4067, i64 3
  %4069 = fmul <4 x float> %4068, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4070 = sub nsw i32 %t2463, %f8.v3.min_realized
  %4071 = add nsw i32 %4070, %t2459
  %4072 = insertelement <4 x i32> undef, i32 %4071, i64 0
  %4073 = shufflevector <4 x i32> %4072, <4 x i32> undef, <4 x i32> zeroinitializer
  %4074 = add <4 x i32> %4073, <i32 -1, i32 0, i32 1, i32 2>
  %4075 = add <4 x i32> %4074, %t2477
  %4076 = extractelement <4 x i32> %4075, i64 0
  %4077 = sext i32 %4076 to i64
  %4078 = getelementptr inbounds float, ptr %f8.host, i64 %4077
  %4079 = load float, ptr %4078, align 4, !tbaa !36
  %4080 = insertelement <4 x float> undef, float %4079, i64 0
  %4081 = extractelement <4 x i32> %4075, i64 1
  %4082 = sext i32 %4081 to i64
  %4083 = getelementptr inbounds float, ptr %f8.host, i64 %4082
  %4084 = load float, ptr %4083, align 4, !tbaa !36
  %4085 = insertelement <4 x float> %4080, float %4084, i64 1
  %4086 = extractelement <4 x i32> %4075, i64 2
  %4087 = sext i32 %4086 to i64
  %4088 = getelementptr inbounds float, ptr %f8.host, i64 %4087
  %4089 = load float, ptr %4088, align 4, !tbaa !36
  %4090 = insertelement <4 x float> %4085, float %4089, i64 2
  %4091 = extractelement <4 x i32> %4075, i64 3
  %4092 = sext i32 %4091 to i64
  %4093 = getelementptr inbounds float, ptr %f8.host, i64 %4092
  %4094 = load float, ptr %4093, align 4, !tbaa !36
  %4095 = insertelement <4 x float> %4090, float %4094, i64 3
  %4096 = fmul <4 x float> %4095, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4097 = fadd <4 x float> %4069, %4096
  %4098 = fmul <4 x float> %4097, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4099 = add nsw i32 %4043, %t2454
  %4100 = insertelement <4 x i32> undef, i32 %4099, i64 0
  %4101 = shufflevector <4 x i32> %4100, <4 x i32> undef, <4 x i32> zeroinitializer
  %4102 = add nsw <4 x i32> %4101, <i32 0, i32 1, i32 2, i32 3>
  %4103 = add nsw <4 x i32> %t2477, %4102
  %4104 = extractelement <4 x i32> %4103, i64 0
  %4105 = sext i32 %4104 to i64
  %4106 = getelementptr inbounds float, ptr %f8.host, i64 %4105
  %4107 = load float, ptr %4106, align 4, !tbaa !36
  %4108 = insertelement <4 x float> undef, float %4107, i64 0
  %4109 = extractelement <4 x i32> %4103, i64 1
  %4110 = sext i32 %4109 to i64
  %4111 = getelementptr inbounds float, ptr %f8.host, i64 %4110
  %4112 = load float, ptr %4111, align 4, !tbaa !36
  %4113 = insertelement <4 x float> %4108, float %4112, i64 1
  %4114 = extractelement <4 x i32> %4103, i64 2
  %4115 = sext i32 %4114 to i64
  %4116 = getelementptr inbounds float, ptr %f8.host, i64 %4115
  %4117 = load float, ptr %4116, align 4, !tbaa !36
  %4118 = insertelement <4 x float> %4113, float %4117, i64 2
  %4119 = extractelement <4 x i32> %4103, i64 3
  %4120 = sext i32 %4119 to i64
  %4121 = getelementptr inbounds float, ptr %f8.host, i64 %4120
  %4122 = load float, ptr %4121, align 4, !tbaa !36
  %4123 = insertelement <4 x float> %4118, float %4122, i64 3
  %4124 = fmul <4 x float> %4123, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4125 = add nsw i32 %4070, %t2454
  %4126 = insertelement <4 x i32> undef, i32 %4125, i64 0
  %4127 = shufflevector <4 x i32> %4126, <4 x i32> undef, <4 x i32> zeroinitializer
  %4128 = add <4 x i32> %4127, <i32 -1, i32 0, i32 1, i32 2>
  %4129 = add <4 x i32> %4128, %t2477
  %4130 = extractelement <4 x i32> %4129, i64 0
  %4131 = sext i32 %4130 to i64
  %4132 = getelementptr inbounds float, ptr %f8.host, i64 %4131
  %4133 = load float, ptr %4132, align 4, !tbaa !36
  %4134 = insertelement <4 x float> undef, float %4133, i64 0
  %4135 = extractelement <4 x i32> %4129, i64 1
  %4136 = sext i32 %4135 to i64
  %4137 = getelementptr inbounds float, ptr %f8.host, i64 %4136
  %4138 = load float, ptr %4137, align 4, !tbaa !36
  %4139 = insertelement <4 x float> %4134, float %4138, i64 1
  %4140 = extractelement <4 x i32> %4129, i64 2
  %4141 = sext i32 %4140 to i64
  %4142 = getelementptr inbounds float, ptr %f8.host, i64 %4141
  %4143 = load float, ptr %4142, align 4, !tbaa !36
  %4144 = insertelement <4 x float> %4139, float %4143, i64 2
  %4145 = extractelement <4 x i32> %4129, i64 3
  %4146 = sext i32 %4145 to i64
  %4147 = getelementptr inbounds float, ptr %f8.host, i64 %4146
  %4148 = load float, ptr %4147, align 4, !tbaa !36
  %4149 = insertelement <4 x float> %4144, float %4148, i64 3
  %4150 = fmul <4 x float> %4149, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4151 = fadd <4 x float> %4124, %4150
  %4152 = fmul <4 x float> %4151, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4153 = fadd <4 x float> %4098, %4152
  %4154 = mul nsw <4 x i32> %3759, %248
  %4155 = add i32 %3750, 1
  %4156 = insertelement <4 x i32> undef, i32 %4155, i64 0
  %4157 = shufflevector <4 x i32> %4156, <4 x i32> undef, <4 x i32> zeroinitializer
  %4158 = add nsw <4 x i32> %4157, <i32 0, i32 2, i32 4, i32 6>
  %4159 = add nsw <4 x i32> %4154, %4158
  %4160 = extractelement <4 x i32> %4159, i64 0
  %4161 = sext i32 %4160 to i64
  %4162 = getelementptr inbounds float, ptr %f7.host, i64 %4161
  %4163 = load float, ptr %4162, align 4, !tbaa !54
  %4164 = insertelement <4 x float> undef, float %4163, i64 0
  %4165 = extractelement <4 x i32> %4159, i64 1
  %4166 = sext i32 %4165 to i64
  %4167 = getelementptr inbounds float, ptr %f7.host, i64 %4166
  %4168 = load float, ptr %4167, align 4, !tbaa !54
  %4169 = insertelement <4 x float> %4164, float %4168, i64 1
  %4170 = extractelement <4 x i32> %4159, i64 2
  %4171 = sext i32 %4170 to i64
  %4172 = getelementptr inbounds float, ptr %f7.host, i64 %4171
  %4173 = load float, ptr %4172, align 4, !tbaa !54
  %4174 = insertelement <4 x float> %4169, float %4173, i64 2
  %4175 = extractelement <4 x i32> %4159, i64 3
  %4176 = sext i32 %4175 to i64
  %4177 = getelementptr inbounds float, ptr %f7.host, i64 %4176
  %4178 = load float, ptr %4177, align 4, !tbaa !54
  %4179 = insertelement <4 x float> %4174, float %4178, i64 3
  %4180 = fsub <4 x float> %4179, %4153
  %4181 = fmul <4 x float> %t2466, %4180
  %4182 = add nsw <4 x i32> %t2472, %4047
  %4183 = extractelement <4 x i32> %4182, i64 0
  %4184 = sext i32 %4183 to i64
  %4185 = getelementptr inbounds float, ptr %f8.host, i64 %4184
  %4186 = load float, ptr %4185, align 4, !tbaa !36
  %4187 = insertelement <4 x float> undef, float %4186, i64 0
  %4188 = extractelement <4 x i32> %4182, i64 1
  %4189 = sext i32 %4188 to i64
  %4190 = getelementptr inbounds float, ptr %f8.host, i64 %4189
  %4191 = load float, ptr %4190, align 4, !tbaa !36
  %4192 = insertelement <4 x float> %4187, float %4191, i64 1
  %4193 = extractelement <4 x i32> %4182, i64 2
  %4194 = sext i32 %4193 to i64
  %4195 = getelementptr inbounds float, ptr %f8.host, i64 %4194
  %4196 = load float, ptr %4195, align 4, !tbaa !36
  %4197 = insertelement <4 x float> %4192, float %4196, i64 2
  %4198 = extractelement <4 x i32> %4182, i64 3
  %4199 = sext i32 %4198 to i64
  %4200 = getelementptr inbounds float, ptr %f8.host, i64 %4199
  %4201 = load float, ptr %4200, align 4, !tbaa !36
  %4202 = insertelement <4 x float> %4197, float %4201, i64 3
  %4203 = fmul <4 x float> %4202, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4204 = add <4 x i32> %t2472, %4073
  %4205 = add <4 x i32> %4204, <i32 -1, i32 0, i32 1, i32 2>
  %4206 = extractelement <4 x i32> %4205, i64 0
  %4207 = sext i32 %4206 to i64
  %4208 = getelementptr inbounds float, ptr %f8.host, i64 %4207
  %4209 = load float, ptr %4208, align 4, !tbaa !36
  %4210 = insertelement <4 x float> undef, float %4209, i64 0
  %4211 = extractelement <4 x i32> %4205, i64 1
  %4212 = sext i32 %4211 to i64
  %4213 = getelementptr inbounds float, ptr %f8.host, i64 %4212
  %4214 = load float, ptr %4213, align 4, !tbaa !36
  %4215 = insertelement <4 x float> %4210, float %4214, i64 1
  %4216 = extractelement <4 x i32> %4205, i64 2
  %4217 = sext i32 %4216 to i64
  %4218 = getelementptr inbounds float, ptr %f8.host, i64 %4217
  %4219 = load float, ptr %4218, align 4, !tbaa !36
  %4220 = insertelement <4 x float> %4215, float %4219, i64 2
  %4221 = extractelement <4 x i32> %4205, i64 3
  %4222 = sext i32 %4221 to i64
  %4223 = getelementptr inbounds float, ptr %f8.host, i64 %4222
  %4224 = load float, ptr %4223, align 4, !tbaa !36
  %4225 = insertelement <4 x float> %4220, float %4224, i64 3
  %4226 = fmul <4 x float> %4225, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4227 = fadd <4 x float> %4203, %4226
  %4228 = fmul <4 x float> %4227, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4229 = add nsw <4 x i32> %t2472, %4102
  %4230 = extractelement <4 x i32> %4229, i64 0
  %4231 = sext i32 %4230 to i64
  %4232 = getelementptr inbounds float, ptr %f8.host, i64 %4231
  %4233 = load float, ptr %4232, align 4, !tbaa !36
  %4234 = insertelement <4 x float> undef, float %4233, i64 0
  %4235 = extractelement <4 x i32> %4229, i64 1
  %4236 = sext i32 %4235 to i64
  %4237 = getelementptr inbounds float, ptr %f8.host, i64 %4236
  %4238 = load float, ptr %4237, align 4, !tbaa !36
  %4239 = insertelement <4 x float> %4234, float %4238, i64 1
  %4240 = extractelement <4 x i32> %4229, i64 2
  %4241 = sext i32 %4240 to i64
  %4242 = getelementptr inbounds float, ptr %f8.host, i64 %4241
  %4243 = load float, ptr %4242, align 4, !tbaa !36
  %4244 = insertelement <4 x float> %4239, float %4243, i64 2
  %4245 = extractelement <4 x i32> %4229, i64 3
  %4246 = sext i32 %4245 to i64
  %4247 = getelementptr inbounds float, ptr %f8.host, i64 %4246
  %4248 = load float, ptr %4247, align 4, !tbaa !36
  %4249 = insertelement <4 x float> %4244, float %4248, i64 3
  %4250 = fmul <4 x float> %4249, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4251 = add <4 x i32> %t2472, %4127
  %4252 = add <4 x i32> %4251, <i32 -1, i32 0, i32 1, i32 2>
  %4253 = extractelement <4 x i32> %4252, i64 0
  %4254 = sext i32 %4253 to i64
  %4255 = getelementptr inbounds float, ptr %f8.host, i64 %4254
  %4256 = load float, ptr %4255, align 4, !tbaa !36
  %4257 = insertelement <4 x float> undef, float %4256, i64 0
  %4258 = extractelement <4 x i32> %4252, i64 1
  %4259 = sext i32 %4258 to i64
  %4260 = getelementptr inbounds float, ptr %f8.host, i64 %4259
  %4261 = load float, ptr %4260, align 4, !tbaa !36
  %4262 = insertelement <4 x float> %4257, float %4261, i64 1
  %4263 = extractelement <4 x i32> %4252, i64 2
  %4264 = sext i32 %4263 to i64
  %4265 = getelementptr inbounds float, ptr %f8.host, i64 %4264
  %4266 = load float, ptr %4265, align 4, !tbaa !36
  %4267 = insertelement <4 x float> %4262, float %4266, i64 2
  %4268 = extractelement <4 x i32> %4252, i64 3
  %4269 = sext i32 %4268 to i64
  %4270 = getelementptr inbounds float, ptr %f8.host, i64 %4269
  %4271 = load float, ptr %4270, align 4, !tbaa !36
  %4272 = insertelement <4 x float> %4267, float %4271, i64 3
  %4273 = fmul <4 x float> %4272, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4274 = fadd <4 x float> %4250, %4273
  %4275 = fmul <4 x float> %4274, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4276 = fadd <4 x float> %4228, %4275
  %4277 = mul nsw <4 x i32> %t2469, %248
  %4278 = add nsw <4 x i32> %4277, %4158
  %4279 = extractelement <4 x i32> %4278, i64 0
  %4280 = sext i32 %4279 to i64
  %4281 = getelementptr inbounds float, ptr %f7.host, i64 %4280
  %4282 = load float, ptr %4281, align 4, !tbaa !54
  %4283 = insertelement <4 x float> undef, float %4282, i64 0
  %4284 = extractelement <4 x i32> %4278, i64 1
  %4285 = sext i32 %4284 to i64
  %4286 = getelementptr inbounds float, ptr %f7.host, i64 %4285
  %4287 = load float, ptr %4286, align 4, !tbaa !54
  %4288 = insertelement <4 x float> %4283, float %4287, i64 1
  %4289 = extractelement <4 x i32> %4278, i64 2
  %4290 = sext i32 %4289 to i64
  %4291 = getelementptr inbounds float, ptr %f7.host, i64 %4290
  %4292 = load float, ptr %4291, align 4, !tbaa !54
  %4293 = insertelement <4 x float> %4288, float %4292, i64 2
  %4294 = extractelement <4 x i32> %4278, i64 3
  %4295 = sext i32 %4294 to i64
  %4296 = getelementptr inbounds float, ptr %f7.host, i64 %4295
  %4297 = load float, ptr %4296, align 4, !tbaa !54
  %4298 = insertelement <4 x float> %4293, float %4297, i64 3
  %4299 = fsub <4 x float> %4298, %4276
  %4300 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2466
  %4301 = fmul <4 x float> %4300, %4299
  %4302 = fadd <4 x float> %4181, %4301
  %4303 = sext i32 %3755 to i64
  %4304 = sub nsw i64 %4303, %4
  %4305 = add nsw i64 %4304, %3731
  %4306 = getelementptr inbounds float, ptr %f130.host, i64 %4305
  %4307 = load <4 x float>, ptr %4306, align 4, !tbaa !38
  %4308 = fmul <4 x float> %4307, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4309 = sext i32 %t2463 to i64
  %4310 = sub nsw i64 %4309, %4
  %4311 = add nsw i64 %3732, %4310
  %4312 = getelementptr inbounds float, ptr %f130.host, i64 %4311
  %4313 = load <4 x float>, ptr %4312, align 4, !tbaa !38
  %4314 = fmul <4 x float> %4313, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4315 = fadd <4 x float> %4308, %4314
  %4316 = fmul <4 x float> %4315, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4317 = add nsw i64 %4304, %3733
  %4318 = getelementptr inbounds float, ptr %f130.host, i64 %4317
  %4319 = load <4 x float>, ptr %4318, align 4, !tbaa !38
  %4320 = fmul <4 x float> %4319, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4321 = add nsw i64 %3734, %4310
  %4322 = getelementptr inbounds float, ptr %f130.host, i64 %4321
  %4323 = load <4 x float>, ptr %4322, align 4, !tbaa !38
  %4324 = fmul <4 x float> %4323, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4325 = fadd <4 x float> %4320, %4324
  %4326 = fmul <4 x float> %4325, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4327 = fadd <4 x float> %4316, %4326
  %4328 = fadd <4 x float> %4302, %4327
  %4329 = shufflevector <4 x float> %4042, <4 x float> %4328, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %4330 = sext i32 %3738 to i64
  %4331 = add nsw i64 %3737, %4330
  %4332 = getelementptr inbounds float, ptr %128, i64 %4331
  store <8 x float> %4329, ptr %4332, align 4, !tbaa !64
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %lsr.iv.next286 = add nuw i32 %lsr.iv285, 8
  %.not147 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not147, label %"end for f129.s0.v3.v325", label %"for f129.s0.v3.v324"

"end for f129.s0.v3.v325":                        ; preds = %"for f129.s0.v3.v324", %true_bb21
  br i1 %.not142, label %"produce f12832", label %"for f129.s0.v3.v328.preheader", !prof !4

"for f129.s0.v3.v328.preheader":                  ; preds = %"end for f129.s0.v3.v325"
  %4333 = trunc i64 %3710 to i32
  %4334 = add i32 %4333, 45
  %4335 = ashr i32 %4334, 4
  %4336 = shl nsw i32 %4335, 1
  %4337 = and i32 %4336, 2
  %4338 = ashr i32 %4334, 5
  %t2478 = add nsw i32 %4337, %4338
  %4339 = sub nsw i32 %4335, %f75.v4.min_realized
  %4340 = mul nsw i32 %4339, %228
  %t2481 = add nsw i32 %3475, %4340
  %4341 = sext i32 %t2481 to i64
  %4342 = getelementptr inbounds float, ptr %f75.host, i64 %4341
  %4343 = load <4 x float>, ptr %4342, align 4, !tbaa !13
  %4344 = add nsw i64 %4341, 4
  %4345 = getelementptr inbounds float, ptr %f75.host, i64 %4344
  %4346 = load <4 x float>, ptr %4345, align 4, !tbaa !13
  %4347 = shufflevector <4 x float> %4343, <4 x float> %4346, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2482 = fmul <4 x float> %232, %4347
  %a898 = fptosi <4 x float> %t2482 to <4 x i32>
  %a901 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a898)
  %4348 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a901, <4 x i32> zeroinitializer)
  %4349 = sitofp <4 x i32> %4348 to <4 x float>
  %t2484 = fsub <4 x float> %t2482, %4349
  %4350 = add nsw i32 %t2478, %238
  %t2486 = mul nsw i32 %4350, %235
  %4351 = sub nsw i32 %4338, %237
  %t2488 = mul nsw i32 %4351, %235
  %4352 = sub nsw i32 %4335, %f7.v4.min_realized
  %4353 = mul nsw i32 %4352, %f7.stride.1
  %t2489 = add nsw i32 %4353, %3476
  %t2491 = sub nsw <4 x i32> %4348, %241
  %4354 = add i32 %t2478, %243
  %t2493 = mul nsw i32 %4354, %242
  %t2495 = mul nsw <4 x i32> %t2491, %245
  %4355 = sub nsw i32 %4338, %f8.v4.min_realized
  %t2498 = mul nsw i32 %4355, %242
  %4356 = add nsw <4 x i32> %t2491, <i32 1, i32 1, i32 1, i32 1>
  %t2501 = mul nsw <4 x i32> %4356, %245
  %4357 = shufflevector <4 x float> %4343, <4 x float> %4346, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2503 = fmul <4 x float> %232, %4357
  %a902 = fptosi <4 x float> %t2503 to <4 x i32>
  %a905 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a902)
  %4358 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a905, <4 x i32> zeroinitializer)
  %4359 = sitofp <4 x i32> %4358 to <4 x float>
  %t2505 = fsub <4 x float> %t2503, %4359
  %t2508 = sub nsw <4 x i32> %4358, %241
  %t2511 = mul nsw <4 x i32> %t2508, %245
  %4360 = add nsw <4 x i32> %t2508, <i32 1, i32 1, i32 1, i32 1>
  %t2516 = mul nsw <4 x i32> %4360, %245
  %4361 = add nsw i32 %t2498, %3481
  %4362 = insertelement <4 x i32> undef, i32 %4361, i64 0
  %4363 = shufflevector <4 x i32> %4362, <4 x i32> undef, <4 x i32> zeroinitializer
  %4364 = add nsw <4 x i32> %4363, <i32 0, i32 1, i32 2, i32 3>
  %4365 = add nsw <4 x i32> %t2501, %4364
  %4366 = extractelement <4 x i32> %4365, i64 0
  %4367 = sext i32 %4366 to i64
  %4368 = getelementptr inbounds float, ptr %f8.host, i64 %4367
  %4369 = load float, ptr %4368, align 4, !tbaa !36
  %4370 = insertelement <4 x float> undef, float %4369, i64 0
  %4371 = extractelement <4 x i32> %4365, i64 1
  %4372 = sext i32 %4371 to i64
  %4373 = getelementptr inbounds float, ptr %f8.host, i64 %4372
  %4374 = load float, ptr %4373, align 4, !tbaa !36
  %4375 = insertelement <4 x float> %4370, float %4374, i64 1
  %4376 = extractelement <4 x i32> %4365, i64 2
  %4377 = sext i32 %4376 to i64
  %4378 = getelementptr inbounds float, ptr %f8.host, i64 %4377
  %4379 = load float, ptr %4378, align 4, !tbaa !36
  %4380 = insertelement <4 x float> %4375, float %4379, i64 2
  %4381 = extractelement <4 x i32> %4365, i64 3
  %4382 = sext i32 %4381 to i64
  %4383 = getelementptr inbounds float, ptr %f8.host, i64 %4382
  %4384 = load float, ptr %4383, align 4, !tbaa !36
  %4385 = insertelement <4 x float> %4380, float %4384, i64 3
  %4386 = fmul <4 x float> %4385, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4387 = add nsw i32 %t2498, %3482
  %4388 = insertelement <4 x i32> undef, i32 %4387, i64 0
  %4389 = shufflevector <4 x i32> %4388, <4 x i32> undef, <4 x i32> zeroinitializer
  %4390 = add <4 x i32> %4389, <i32 -1, i32 0, i32 1, i32 2>
  %4391 = add <4 x i32> %4390, %t2501
  %4392 = extractelement <4 x i32> %4391, i64 0
  %4393 = sext i32 %4392 to i64
  %4394 = getelementptr inbounds float, ptr %f8.host, i64 %4393
  %4395 = load float, ptr %4394, align 4, !tbaa !36
  %4396 = insertelement <4 x float> undef, float %4395, i64 0
  %4397 = extractelement <4 x i32> %4391, i64 1
  %4398 = sext i32 %4397 to i64
  %4399 = getelementptr inbounds float, ptr %f8.host, i64 %4398
  %4400 = load float, ptr %4399, align 4, !tbaa !36
  %4401 = insertelement <4 x float> %4396, float %4400, i64 1
  %4402 = extractelement <4 x i32> %4391, i64 2
  %4403 = sext i32 %4402 to i64
  %4404 = getelementptr inbounds float, ptr %f8.host, i64 %4403
  %4405 = load float, ptr %4404, align 4, !tbaa !36
  %4406 = insertelement <4 x float> %4401, float %4405, i64 2
  %4407 = extractelement <4 x i32> %4391, i64 3
  %4408 = sext i32 %4407 to i64
  %4409 = getelementptr inbounds float, ptr %f8.host, i64 %4408
  %4410 = load float, ptr %4409, align 4, !tbaa !36
  %4411 = insertelement <4 x float> %4406, float %4410, i64 3
  %4412 = fmul <4 x float> %4411, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4413 = fadd <4 x float> %4386, %4412
  %4414 = fmul <4 x float> %4413, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4415 = add nsw i32 %t2493, %3481
  %4416 = insertelement <4 x i32> undef, i32 %4415, i64 0
  %4417 = shufflevector <4 x i32> %4416, <4 x i32> undef, <4 x i32> zeroinitializer
  %4418 = add nsw <4 x i32> %4417, <i32 0, i32 1, i32 2, i32 3>
  %4419 = add nsw <4 x i32> %t2501, %4418
  %4420 = extractelement <4 x i32> %4419, i64 0
  %4421 = sext i32 %4420 to i64
  %4422 = getelementptr inbounds float, ptr %f8.host, i64 %4421
  %4423 = load float, ptr %4422, align 4, !tbaa !36
  %4424 = insertelement <4 x float> undef, float %4423, i64 0
  %4425 = extractelement <4 x i32> %4419, i64 1
  %4426 = sext i32 %4425 to i64
  %4427 = getelementptr inbounds float, ptr %f8.host, i64 %4426
  %4428 = load float, ptr %4427, align 4, !tbaa !36
  %4429 = insertelement <4 x float> %4424, float %4428, i64 1
  %4430 = extractelement <4 x i32> %4419, i64 2
  %4431 = sext i32 %4430 to i64
  %4432 = getelementptr inbounds float, ptr %f8.host, i64 %4431
  %4433 = load float, ptr %4432, align 4, !tbaa !36
  %4434 = insertelement <4 x float> %4429, float %4433, i64 2
  %4435 = extractelement <4 x i32> %4419, i64 3
  %4436 = sext i32 %4435 to i64
  %4437 = getelementptr inbounds float, ptr %f8.host, i64 %4436
  %4438 = load float, ptr %4437, align 4, !tbaa !36
  %4439 = insertelement <4 x float> %4434, float %4438, i64 3
  %4440 = fmul <4 x float> %4439, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4441 = add nsw i32 %t2493, %3482
  %4442 = insertelement <4 x i32> undef, i32 %4441, i64 0
  %4443 = shufflevector <4 x i32> %4442, <4 x i32> undef, <4 x i32> zeroinitializer
  %4444 = add <4 x i32> %4443, <i32 -1, i32 0, i32 1, i32 2>
  %4445 = add <4 x i32> %4444, %t2501
  %4446 = extractelement <4 x i32> %4445, i64 0
  %4447 = sext i32 %4446 to i64
  %4448 = getelementptr inbounds float, ptr %f8.host, i64 %4447
  %4449 = load float, ptr %4448, align 4, !tbaa !36
  %4450 = insertelement <4 x float> undef, float %4449, i64 0
  %4451 = extractelement <4 x i32> %4445, i64 1
  %4452 = sext i32 %4451 to i64
  %4453 = getelementptr inbounds float, ptr %f8.host, i64 %4452
  %4454 = load float, ptr %4453, align 4, !tbaa !36
  %4455 = insertelement <4 x float> %4450, float %4454, i64 1
  %4456 = extractelement <4 x i32> %4445, i64 2
  %4457 = sext i32 %4456 to i64
  %4458 = getelementptr inbounds float, ptr %f8.host, i64 %4457
  %4459 = load float, ptr %4458, align 4, !tbaa !36
  %4460 = insertelement <4 x float> %4455, float %4459, i64 2
  %4461 = extractelement <4 x i32> %4445, i64 3
  %4462 = sext i32 %4461 to i64
  %4463 = getelementptr inbounds float, ptr %f8.host, i64 %4462
  %4464 = load float, ptr %4463, align 4, !tbaa !36
  %4465 = insertelement <4 x float> %4460, float %4464, i64 3
  %4466 = fmul <4 x float> %4465, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4467 = fadd <4 x float> %4440, %4466
  %4468 = fmul <4 x float> %4467, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4469 = fadd <4 x float> %4414, %4468
  %4470 = mul nsw <4 x i32> %4356, %248
  %4471 = insertelement <4 x i32> undef, i32 %t2489, i64 0
  %4472 = shufflevector <4 x i32> %4471, <4 x i32> undef, <4 x i32> zeroinitializer
  %4473 = add nsw <4 x i32> %4472, <i32 0, i32 2, i32 4, i32 6>
  %4474 = add nsw <4 x i32> %4470, %4473
  %4475 = extractelement <4 x i32> %4474, i64 0
  %4476 = sext i32 %4475 to i64
  %4477 = getelementptr inbounds float, ptr %f7.host, i64 %4476
  %4478 = load float, ptr %4477, align 4, !tbaa !54
  %4479 = insertelement <4 x float> undef, float %4478, i64 0
  %4480 = extractelement <4 x i32> %4474, i64 1
  %4481 = sext i32 %4480 to i64
  %4482 = getelementptr inbounds float, ptr %f7.host, i64 %4481
  %4483 = load float, ptr %4482, align 4, !tbaa !54
  %4484 = insertelement <4 x float> %4479, float %4483, i64 1
  %4485 = extractelement <4 x i32> %4474, i64 2
  %4486 = sext i32 %4485 to i64
  %4487 = getelementptr inbounds float, ptr %f7.host, i64 %4486
  %4488 = load float, ptr %4487, align 4, !tbaa !54
  %4489 = insertelement <4 x float> %4484, float %4488, i64 2
  %4490 = extractelement <4 x i32> %4474, i64 3
  %4491 = sext i32 %4490 to i64
  %4492 = getelementptr inbounds float, ptr %f7.host, i64 %4491
  %4493 = load float, ptr %4492, align 4, !tbaa !54
  %4494 = insertelement <4 x float> %4489, float %4493, i64 3
  %4495 = fsub <4 x float> %4494, %4469
  %4496 = fmul <4 x float> %t2484, %4495
  %4497 = add nsw <4 x i32> %t2495, %4364
  %4498 = extractelement <4 x i32> %4497, i64 0
  %4499 = sext i32 %4498 to i64
  %4500 = getelementptr inbounds float, ptr %f8.host, i64 %4499
  %4501 = load float, ptr %4500, align 4, !tbaa !36
  %4502 = insertelement <4 x float> undef, float %4501, i64 0
  %4503 = extractelement <4 x i32> %4497, i64 1
  %4504 = sext i32 %4503 to i64
  %4505 = getelementptr inbounds float, ptr %f8.host, i64 %4504
  %4506 = load float, ptr %4505, align 4, !tbaa !36
  %4507 = insertelement <4 x float> %4502, float %4506, i64 1
  %4508 = extractelement <4 x i32> %4497, i64 2
  %4509 = sext i32 %4508 to i64
  %4510 = getelementptr inbounds float, ptr %f8.host, i64 %4509
  %4511 = load float, ptr %4510, align 4, !tbaa !36
  %4512 = insertelement <4 x float> %4507, float %4511, i64 2
  %4513 = extractelement <4 x i32> %4497, i64 3
  %4514 = sext i32 %4513 to i64
  %4515 = getelementptr inbounds float, ptr %f8.host, i64 %4514
  %4516 = load float, ptr %4515, align 4, !tbaa !36
  %4517 = insertelement <4 x float> %4512, float %4516, i64 3
  %4518 = fmul <4 x float> %4517, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4519 = add <4 x i32> %4390, %t2495
  %4520 = extractelement <4 x i32> %4519, i64 0
  %4521 = sext i32 %4520 to i64
  %4522 = getelementptr inbounds float, ptr %f8.host, i64 %4521
  %4523 = load float, ptr %4522, align 4, !tbaa !36
  %4524 = insertelement <4 x float> undef, float %4523, i64 0
  %4525 = extractelement <4 x i32> %4519, i64 1
  %4526 = sext i32 %4525 to i64
  %4527 = getelementptr inbounds float, ptr %f8.host, i64 %4526
  %4528 = load float, ptr %4527, align 4, !tbaa !36
  %4529 = insertelement <4 x float> %4524, float %4528, i64 1
  %4530 = extractelement <4 x i32> %4519, i64 2
  %4531 = sext i32 %4530 to i64
  %4532 = getelementptr inbounds float, ptr %f8.host, i64 %4531
  %4533 = load float, ptr %4532, align 4, !tbaa !36
  %4534 = insertelement <4 x float> %4529, float %4533, i64 2
  %4535 = extractelement <4 x i32> %4519, i64 3
  %4536 = sext i32 %4535 to i64
  %4537 = getelementptr inbounds float, ptr %f8.host, i64 %4536
  %4538 = load float, ptr %4537, align 4, !tbaa !36
  %4539 = insertelement <4 x float> %4534, float %4538, i64 3
  %4540 = fmul <4 x float> %4539, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4541 = fadd <4 x float> %4518, %4540
  %4542 = fmul <4 x float> %4541, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4543 = add nsw <4 x i32> %t2495, %4418
  %4544 = extractelement <4 x i32> %4543, i64 0
  %4545 = sext i32 %4544 to i64
  %4546 = getelementptr inbounds float, ptr %f8.host, i64 %4545
  %4547 = load float, ptr %4546, align 4, !tbaa !36
  %4548 = insertelement <4 x float> undef, float %4547, i64 0
  %4549 = extractelement <4 x i32> %4543, i64 1
  %4550 = sext i32 %4549 to i64
  %4551 = getelementptr inbounds float, ptr %f8.host, i64 %4550
  %4552 = load float, ptr %4551, align 4, !tbaa !36
  %4553 = insertelement <4 x float> %4548, float %4552, i64 1
  %4554 = extractelement <4 x i32> %4543, i64 2
  %4555 = sext i32 %4554 to i64
  %4556 = getelementptr inbounds float, ptr %f8.host, i64 %4555
  %4557 = load float, ptr %4556, align 4, !tbaa !36
  %4558 = insertelement <4 x float> %4553, float %4557, i64 2
  %4559 = extractelement <4 x i32> %4543, i64 3
  %4560 = sext i32 %4559 to i64
  %4561 = getelementptr inbounds float, ptr %f8.host, i64 %4560
  %4562 = load float, ptr %4561, align 4, !tbaa !36
  %4563 = insertelement <4 x float> %4558, float %4562, i64 3
  %4564 = fmul <4 x float> %4563, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4565 = add <4 x i32> %4444, %t2495
  %4566 = extractelement <4 x i32> %4565, i64 0
  %4567 = sext i32 %4566 to i64
  %4568 = getelementptr inbounds float, ptr %f8.host, i64 %4567
  %4569 = load float, ptr %4568, align 4, !tbaa !36
  %4570 = insertelement <4 x float> undef, float %4569, i64 0
  %4571 = extractelement <4 x i32> %4565, i64 1
  %4572 = sext i32 %4571 to i64
  %4573 = getelementptr inbounds float, ptr %f8.host, i64 %4572
  %4574 = load float, ptr %4573, align 4, !tbaa !36
  %4575 = insertelement <4 x float> %4570, float %4574, i64 1
  %4576 = extractelement <4 x i32> %4565, i64 2
  %4577 = sext i32 %4576 to i64
  %4578 = getelementptr inbounds float, ptr %f8.host, i64 %4577
  %4579 = load float, ptr %4578, align 4, !tbaa !36
  %4580 = insertelement <4 x float> %4575, float %4579, i64 2
  %4581 = extractelement <4 x i32> %4565, i64 3
  %4582 = sext i32 %4581 to i64
  %4583 = getelementptr inbounds float, ptr %f8.host, i64 %4582
  %4584 = load float, ptr %4583, align 4, !tbaa !36
  %4585 = insertelement <4 x float> %4580, float %4584, i64 3
  %4586 = fmul <4 x float> %4585, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4587 = fadd <4 x float> %4564, %4586
  %4588 = fmul <4 x float> %4587, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4589 = fadd <4 x float> %4542, %4588
  %4590 = mul nsw <4 x i32> %t2491, %248
  %4591 = add nsw <4 x i32> %4590, %4473
  %4592 = extractelement <4 x i32> %4591, i64 0
  %4593 = sext i32 %4592 to i64
  %4594 = getelementptr inbounds float, ptr %f7.host, i64 %4593
  %4595 = load float, ptr %4594, align 4, !tbaa !54
  %4596 = insertelement <4 x float> undef, float %4595, i64 0
  %4597 = extractelement <4 x i32> %4591, i64 1
  %4598 = sext i32 %4597 to i64
  %4599 = getelementptr inbounds float, ptr %f7.host, i64 %4598
  %4600 = load float, ptr %4599, align 4, !tbaa !54
  %4601 = insertelement <4 x float> %4596, float %4600, i64 1
  %4602 = extractelement <4 x i32> %4591, i64 2
  %4603 = sext i32 %4602 to i64
  %4604 = getelementptr inbounds float, ptr %f7.host, i64 %4603
  %4605 = load float, ptr %4604, align 4, !tbaa !54
  %4606 = insertelement <4 x float> %4601, float %4605, i64 2
  %4607 = extractelement <4 x i32> %4591, i64 3
  %4608 = sext i32 %4607 to i64
  %4609 = getelementptr inbounds float, ptr %f7.host, i64 %4608
  %4610 = load float, ptr %4609, align 4, !tbaa !54
  %4611 = insertelement <4 x float> %4606, float %4610, i64 3
  %4612 = fsub <4 x float> %4611, %4589
  %4613 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2484
  %4614 = fmul <4 x float> %4613, %4612
  %4615 = fadd <4 x float> %4496, %4614
  %4616 = sext i32 %t2488 to i64
  %4617 = add nsw i64 %3484, %4616
  %4618 = getelementptr inbounds float, ptr %f130.host, i64 %4617
  %4619 = load <4 x float>, ptr %4618, align 4, !tbaa !38
  %4620 = fmul <4 x float> %4619, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4621 = add nsw i64 %3487, %4616
  %4622 = getelementptr inbounds float, ptr %f130.host, i64 %4621
  %4623 = load <4 x float>, ptr %4622, align 4, !tbaa !38
  %4624 = fmul <4 x float> %4623, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4625 = fadd <4 x float> %4620, %4624
  %4626 = fmul <4 x float> %4625, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4627 = sext i32 %t2486 to i64
  %4628 = add nsw i64 %3484, %4627
  %4629 = getelementptr inbounds float, ptr %f130.host, i64 %4628
  %4630 = load <4 x float>, ptr %4629, align 4, !tbaa !38
  %4631 = fmul <4 x float> %4630, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4632 = add nsw i64 %3487, %4627
  %4633 = getelementptr inbounds float, ptr %f130.host, i64 %4632
  %4634 = load <4 x float>, ptr %4633, align 4, !tbaa !38
  %4635 = fmul <4 x float> %4634, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4636 = fadd <4 x float> %4631, %4635
  %4637 = fmul <4 x float> %4636, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4638 = fadd <4 x float> %4626, %4637
  %4639 = fadd <4 x float> %4615, %4638
  %4640 = add nsw i32 %t2498, %3488
  %4641 = insertelement <4 x i32> undef, i32 %4640, i64 0
  %4642 = shufflevector <4 x i32> %4641, <4 x i32> undef, <4 x i32> zeroinitializer
  %4643 = add nsw <4 x i32> %4642, <i32 0, i32 1, i32 2, i32 3>
  %4644 = add nsw <4 x i32> %t2516, %4643
  %4645 = extractelement <4 x i32> %4644, i64 0
  %4646 = sext i32 %4645 to i64
  %4647 = getelementptr inbounds float, ptr %f8.host, i64 %4646
  %4648 = load float, ptr %4647, align 4, !tbaa !36
  %4649 = insertelement <4 x float> undef, float %4648, i64 0
  %4650 = extractelement <4 x i32> %4644, i64 1
  %4651 = sext i32 %4650 to i64
  %4652 = getelementptr inbounds float, ptr %f8.host, i64 %4651
  %4653 = load float, ptr %4652, align 4, !tbaa !36
  %4654 = insertelement <4 x float> %4649, float %4653, i64 1
  %4655 = extractelement <4 x i32> %4644, i64 2
  %4656 = sext i32 %4655 to i64
  %4657 = getelementptr inbounds float, ptr %f8.host, i64 %4656
  %4658 = load float, ptr %4657, align 4, !tbaa !36
  %4659 = insertelement <4 x float> %4654, float %4658, i64 2
  %4660 = extractelement <4 x i32> %4644, i64 3
  %4661 = sext i32 %4660 to i64
  %4662 = getelementptr inbounds float, ptr %f8.host, i64 %4661
  %4663 = load float, ptr %4662, align 4, !tbaa !36
  %4664 = insertelement <4 x float> %4659, float %4663, i64 3
  %4665 = fmul <4 x float> %4664, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4666 = add nsw i32 %t2498, %3489
  %4667 = insertelement <4 x i32> undef, i32 %4666, i64 0
  %4668 = shufflevector <4 x i32> %4667, <4 x i32> undef, <4 x i32> zeroinitializer
  %4669 = add <4 x i32> %4668, <i32 -1, i32 0, i32 1, i32 2>
  %4670 = add <4 x i32> %4669, %t2516
  %4671 = extractelement <4 x i32> %4670, i64 0
  %4672 = sext i32 %4671 to i64
  %4673 = getelementptr inbounds float, ptr %f8.host, i64 %4672
  %4674 = load float, ptr %4673, align 4, !tbaa !36
  %4675 = insertelement <4 x float> undef, float %4674, i64 0
  %4676 = extractelement <4 x i32> %4670, i64 1
  %4677 = sext i32 %4676 to i64
  %4678 = getelementptr inbounds float, ptr %f8.host, i64 %4677
  %4679 = load float, ptr %4678, align 4, !tbaa !36
  %4680 = insertelement <4 x float> %4675, float %4679, i64 1
  %4681 = extractelement <4 x i32> %4670, i64 2
  %4682 = sext i32 %4681 to i64
  %4683 = getelementptr inbounds float, ptr %f8.host, i64 %4682
  %4684 = load float, ptr %4683, align 4, !tbaa !36
  %4685 = insertelement <4 x float> %4680, float %4684, i64 2
  %4686 = extractelement <4 x i32> %4670, i64 3
  %4687 = sext i32 %4686 to i64
  %4688 = getelementptr inbounds float, ptr %f8.host, i64 %4687
  %4689 = load float, ptr %4688, align 4, !tbaa !36
  %4690 = insertelement <4 x float> %4685, float %4689, i64 3
  %4691 = fmul <4 x float> %4690, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4692 = fadd <4 x float> %4665, %4691
  %4693 = fmul <4 x float> %4692, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4694 = add nsw i32 %t2493, %3488
  %4695 = insertelement <4 x i32> undef, i32 %4694, i64 0
  %4696 = shufflevector <4 x i32> %4695, <4 x i32> undef, <4 x i32> zeroinitializer
  %4697 = add nsw <4 x i32> %4696, <i32 0, i32 1, i32 2, i32 3>
  %4698 = add nsw <4 x i32> %t2516, %4697
  %4699 = extractelement <4 x i32> %4698, i64 0
  %4700 = sext i32 %4699 to i64
  %4701 = getelementptr inbounds float, ptr %f8.host, i64 %4700
  %4702 = load float, ptr %4701, align 4, !tbaa !36
  %4703 = insertelement <4 x float> undef, float %4702, i64 0
  %4704 = extractelement <4 x i32> %4698, i64 1
  %4705 = sext i32 %4704 to i64
  %4706 = getelementptr inbounds float, ptr %f8.host, i64 %4705
  %4707 = load float, ptr %4706, align 4, !tbaa !36
  %4708 = insertelement <4 x float> %4703, float %4707, i64 1
  %4709 = extractelement <4 x i32> %4698, i64 2
  %4710 = sext i32 %4709 to i64
  %4711 = getelementptr inbounds float, ptr %f8.host, i64 %4710
  %4712 = load float, ptr %4711, align 4, !tbaa !36
  %4713 = insertelement <4 x float> %4708, float %4712, i64 2
  %4714 = extractelement <4 x i32> %4698, i64 3
  %4715 = sext i32 %4714 to i64
  %4716 = getelementptr inbounds float, ptr %f8.host, i64 %4715
  %4717 = load float, ptr %4716, align 4, !tbaa !36
  %4718 = insertelement <4 x float> %4713, float %4717, i64 3
  %4719 = fmul <4 x float> %4718, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4720 = add nsw i32 %t2493, %3489
  %4721 = insertelement <4 x i32> undef, i32 %4720, i64 0
  %4722 = shufflevector <4 x i32> %4721, <4 x i32> undef, <4 x i32> zeroinitializer
  %4723 = add <4 x i32> %4722, <i32 -1, i32 0, i32 1, i32 2>
  %4724 = add <4 x i32> %4723, %t2516
  %4725 = extractelement <4 x i32> %4724, i64 0
  %4726 = sext i32 %4725 to i64
  %4727 = getelementptr inbounds float, ptr %f8.host, i64 %4726
  %4728 = load float, ptr %4727, align 4, !tbaa !36
  %4729 = insertelement <4 x float> undef, float %4728, i64 0
  %4730 = extractelement <4 x i32> %4724, i64 1
  %4731 = sext i32 %4730 to i64
  %4732 = getelementptr inbounds float, ptr %f8.host, i64 %4731
  %4733 = load float, ptr %4732, align 4, !tbaa !36
  %4734 = insertelement <4 x float> %4729, float %4733, i64 1
  %4735 = extractelement <4 x i32> %4724, i64 2
  %4736 = sext i32 %4735 to i64
  %4737 = getelementptr inbounds float, ptr %f8.host, i64 %4736
  %4738 = load float, ptr %4737, align 4, !tbaa !36
  %4739 = insertelement <4 x float> %4734, float %4738, i64 2
  %4740 = extractelement <4 x i32> %4724, i64 3
  %4741 = sext i32 %4740 to i64
  %4742 = getelementptr inbounds float, ptr %f8.host, i64 %4741
  %4743 = load float, ptr %4742, align 4, !tbaa !36
  %4744 = insertelement <4 x float> %4739, float %4743, i64 3
  %4745 = fmul <4 x float> %4744, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4746 = fadd <4 x float> %4719, %4745
  %4747 = fmul <4 x float> %4746, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4748 = fadd <4 x float> %4693, %4747
  %4749 = mul nsw <4 x i32> %4360, %248
  %4750 = add nsw i32 %t2489, 1
  %4751 = insertelement <4 x i32> undef, i32 %4750, i64 0
  %4752 = shufflevector <4 x i32> %4751, <4 x i32> undef, <4 x i32> zeroinitializer
  %4753 = add nsw <4 x i32> %4752, <i32 0, i32 2, i32 4, i32 6>
  %4754 = add nsw <4 x i32> %4749, %4753
  %4755 = extractelement <4 x i32> %4754, i64 0
  %4756 = sext i32 %4755 to i64
  %4757 = getelementptr inbounds float, ptr %f7.host, i64 %4756
  %4758 = load float, ptr %4757, align 4, !tbaa !54
  %4759 = insertelement <4 x float> undef, float %4758, i64 0
  %4760 = extractelement <4 x i32> %4754, i64 1
  %4761 = sext i32 %4760 to i64
  %4762 = getelementptr inbounds float, ptr %f7.host, i64 %4761
  %4763 = load float, ptr %4762, align 4, !tbaa !54
  %4764 = insertelement <4 x float> %4759, float %4763, i64 1
  %4765 = extractelement <4 x i32> %4754, i64 2
  %4766 = sext i32 %4765 to i64
  %4767 = getelementptr inbounds float, ptr %f7.host, i64 %4766
  %4768 = load float, ptr %4767, align 4, !tbaa !54
  %4769 = insertelement <4 x float> %4764, float %4768, i64 2
  %4770 = extractelement <4 x i32> %4754, i64 3
  %4771 = sext i32 %4770 to i64
  %4772 = getelementptr inbounds float, ptr %f7.host, i64 %4771
  %4773 = load float, ptr %4772, align 4, !tbaa !54
  %4774 = insertelement <4 x float> %4769, float %4773, i64 3
  %4775 = fsub <4 x float> %4774, %4748
  %4776 = fmul <4 x float> %t2505, %4775
  %4777 = add nsw <4 x i32> %t2511, %4643
  %4778 = extractelement <4 x i32> %4777, i64 0
  %4779 = sext i32 %4778 to i64
  %4780 = getelementptr inbounds float, ptr %f8.host, i64 %4779
  %4781 = load float, ptr %4780, align 4, !tbaa !36
  %4782 = insertelement <4 x float> undef, float %4781, i64 0
  %4783 = extractelement <4 x i32> %4777, i64 1
  %4784 = sext i32 %4783 to i64
  %4785 = getelementptr inbounds float, ptr %f8.host, i64 %4784
  %4786 = load float, ptr %4785, align 4, !tbaa !36
  %4787 = insertelement <4 x float> %4782, float %4786, i64 1
  %4788 = extractelement <4 x i32> %4777, i64 2
  %4789 = sext i32 %4788 to i64
  %4790 = getelementptr inbounds float, ptr %f8.host, i64 %4789
  %4791 = load float, ptr %4790, align 4, !tbaa !36
  %4792 = insertelement <4 x float> %4787, float %4791, i64 2
  %4793 = extractelement <4 x i32> %4777, i64 3
  %4794 = sext i32 %4793 to i64
  %4795 = getelementptr inbounds float, ptr %f8.host, i64 %4794
  %4796 = load float, ptr %4795, align 4, !tbaa !36
  %4797 = insertelement <4 x float> %4792, float %4796, i64 3
  %4798 = fmul <4 x float> %4797, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4799 = add <4 x i32> %4669, %t2511
  %4800 = extractelement <4 x i32> %4799, i64 0
  %4801 = sext i32 %4800 to i64
  %4802 = getelementptr inbounds float, ptr %f8.host, i64 %4801
  %4803 = load float, ptr %4802, align 4, !tbaa !36
  %4804 = insertelement <4 x float> undef, float %4803, i64 0
  %4805 = extractelement <4 x i32> %4799, i64 1
  %4806 = sext i32 %4805 to i64
  %4807 = getelementptr inbounds float, ptr %f8.host, i64 %4806
  %4808 = load float, ptr %4807, align 4, !tbaa !36
  %4809 = insertelement <4 x float> %4804, float %4808, i64 1
  %4810 = extractelement <4 x i32> %4799, i64 2
  %4811 = sext i32 %4810 to i64
  %4812 = getelementptr inbounds float, ptr %f8.host, i64 %4811
  %4813 = load float, ptr %4812, align 4, !tbaa !36
  %4814 = insertelement <4 x float> %4809, float %4813, i64 2
  %4815 = extractelement <4 x i32> %4799, i64 3
  %4816 = sext i32 %4815 to i64
  %4817 = getelementptr inbounds float, ptr %f8.host, i64 %4816
  %4818 = load float, ptr %4817, align 4, !tbaa !36
  %4819 = insertelement <4 x float> %4814, float %4818, i64 3
  %4820 = fmul <4 x float> %4819, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4821 = fadd <4 x float> %4798, %4820
  %4822 = fmul <4 x float> %4821, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4823 = add nsw <4 x i32> %t2511, %4697
  %4824 = extractelement <4 x i32> %4823, i64 0
  %4825 = sext i32 %4824 to i64
  %4826 = getelementptr inbounds float, ptr %f8.host, i64 %4825
  %4827 = load float, ptr %4826, align 4, !tbaa !36
  %4828 = insertelement <4 x float> undef, float %4827, i64 0
  %4829 = extractelement <4 x i32> %4823, i64 1
  %4830 = sext i32 %4829 to i64
  %4831 = getelementptr inbounds float, ptr %f8.host, i64 %4830
  %4832 = load float, ptr %4831, align 4, !tbaa !36
  %4833 = insertelement <4 x float> %4828, float %4832, i64 1
  %4834 = extractelement <4 x i32> %4823, i64 2
  %4835 = sext i32 %4834 to i64
  %4836 = getelementptr inbounds float, ptr %f8.host, i64 %4835
  %4837 = load float, ptr %4836, align 4, !tbaa !36
  %4838 = insertelement <4 x float> %4833, float %4837, i64 2
  %4839 = extractelement <4 x i32> %4823, i64 3
  %4840 = sext i32 %4839 to i64
  %4841 = getelementptr inbounds float, ptr %f8.host, i64 %4840
  %4842 = load float, ptr %4841, align 4, !tbaa !36
  %4843 = insertelement <4 x float> %4838, float %4842, i64 3
  %4844 = fmul <4 x float> %4843, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4845 = add <4 x i32> %4723, %t2511
  %4846 = extractelement <4 x i32> %4845, i64 0
  %4847 = sext i32 %4846 to i64
  %4848 = getelementptr inbounds float, ptr %f8.host, i64 %4847
  %4849 = load float, ptr %4848, align 4, !tbaa !36
  %4850 = insertelement <4 x float> undef, float %4849, i64 0
  %4851 = extractelement <4 x i32> %4845, i64 1
  %4852 = sext i32 %4851 to i64
  %4853 = getelementptr inbounds float, ptr %f8.host, i64 %4852
  %4854 = load float, ptr %4853, align 4, !tbaa !36
  %4855 = insertelement <4 x float> %4850, float %4854, i64 1
  %4856 = extractelement <4 x i32> %4845, i64 2
  %4857 = sext i32 %4856 to i64
  %4858 = getelementptr inbounds float, ptr %f8.host, i64 %4857
  %4859 = load float, ptr %4858, align 4, !tbaa !36
  %4860 = insertelement <4 x float> %4855, float %4859, i64 2
  %4861 = extractelement <4 x i32> %4845, i64 3
  %4862 = sext i32 %4861 to i64
  %4863 = getelementptr inbounds float, ptr %f8.host, i64 %4862
  %4864 = load float, ptr %4863, align 4, !tbaa !36
  %4865 = insertelement <4 x float> %4860, float %4864, i64 3
  %4866 = fmul <4 x float> %4865, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4867 = fadd <4 x float> %4844, %4866
  %4868 = fmul <4 x float> %4867, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4869 = fadd <4 x float> %4822, %4868
  %4870 = mul nsw <4 x i32> %t2508, %248
  %4871 = add nsw <4 x i32> %4870, %4753
  %4872 = extractelement <4 x i32> %4871, i64 0
  %4873 = sext i32 %4872 to i64
  %4874 = getelementptr inbounds float, ptr %f7.host, i64 %4873
  %4875 = load float, ptr %4874, align 4, !tbaa !54
  %4876 = insertelement <4 x float> undef, float %4875, i64 0
  %4877 = extractelement <4 x i32> %4871, i64 1
  %4878 = sext i32 %4877 to i64
  %4879 = getelementptr inbounds float, ptr %f7.host, i64 %4878
  %4880 = load float, ptr %4879, align 4, !tbaa !54
  %4881 = insertelement <4 x float> %4876, float %4880, i64 1
  %4882 = extractelement <4 x i32> %4871, i64 2
  %4883 = sext i32 %4882 to i64
  %4884 = getelementptr inbounds float, ptr %f7.host, i64 %4883
  %4885 = load float, ptr %4884, align 4, !tbaa !54
  %4886 = insertelement <4 x float> %4881, float %4885, i64 2
  %4887 = extractelement <4 x i32> %4871, i64 3
  %4888 = sext i32 %4887 to i64
  %4889 = getelementptr inbounds float, ptr %f7.host, i64 %4888
  %4890 = load float, ptr %4889, align 4, !tbaa !54
  %4891 = insertelement <4 x float> %4886, float %4890, i64 3
  %4892 = fsub <4 x float> %4891, %4869
  %4893 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2505
  %4894 = fmul <4 x float> %4893, %4892
  %4895 = fadd <4 x float> %4776, %4894
  %4896 = add nsw i64 %3491, %4616
  %4897 = getelementptr inbounds float, ptr %f130.host, i64 %4896
  %4898 = load <4 x float>, ptr %4897, align 4, !tbaa !38
  %4899 = fmul <4 x float> %4898, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4900 = add nsw i64 %3494, %4616
  %4901 = getelementptr inbounds float, ptr %f130.host, i64 %4900
  %4902 = load <4 x float>, ptr %4901, align 4, !tbaa !38
  %4903 = fmul <4 x float> %4902, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4904 = fadd <4 x float> %4899, %4903
  %4905 = fmul <4 x float> %4904, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4906 = add nsw i64 %3491, %4627
  %4907 = getelementptr inbounds float, ptr %f130.host, i64 %4906
  %4908 = load <4 x float>, ptr %4907, align 4, !tbaa !38
  %4909 = fmul <4 x float> %4908, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4910 = add nsw i64 %3494, %4627
  %4911 = getelementptr inbounds float, ptr %f130.host, i64 %4910
  %4912 = load <4 x float>, ptr %4911, align 4, !tbaa !38
  %4913 = fmul <4 x float> %4912, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4914 = fadd <4 x float> %4909, %4913
  %4915 = fmul <4 x float> %4914, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4916 = fadd <4 x float> %4905, %4915
  %4917 = fadd <4 x float> %4895, %4916
  %4918 = shufflevector <4 x float> %4639, <4 x float> %4917, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow143 = sub nsw i32 %4335, %225
  %4919 = sext i32 %narrow143 to i64
  %4920 = mul nsw i64 %250, %4919
  %4921 = add nsw i64 %4920, %3495
  %4922 = getelementptr inbounds float, ptr %128, i64 %4921
  store <8 x float> %4918, ptr %4922, align 4, !tbaa !64
  br label %"produce f12832"

"produce f12832":                                 ; preds = %"for f129.s0.v3.v328.preheader", %"end for f129.s0.v3.v325", %"produce f12919"
  %4923 = trunc i64 %3710 to i32
  %4924 = add i32 %4923, 5
  %4925 = and i32 %4924, 7
  %4926 = icmp eq i32 %4925, 7
  br i1 %4926, label %true_bb34, label %"produce f12745"

true_bb34:                                        ; preds = %"produce f12832"
  br i1 %.inv128, label %"for f128.s0.v3.v337.preheader", label %"end for f128.s0.v3.v338", !prof !5

"for f128.s0.v3.v337.preheader":                  ; preds = %true_bb34
  %4927 = trunc i64 %3710 to i32
  %4928 = add i32 %4927, 21
  %4929 = ashr i32 %4928, 3
  %4930 = shl nsw i32 %4929, 1
  %4931 = and i32 %4930, 2
  %4932 = ashr i32 %4928, 4
  %t2517 = add nsw i32 %4931, %4932
  %4933 = sub nsw i32 %4929, %f74.v4.min_realized
  %4934 = mul nsw i32 %4933, %879
  %4935 = add i32 %3501, %4934
  %4936 = add nsw i32 %t2517, %880
  %t2524 = mul nsw i32 %4936, %117
  %4937 = sub nsw i32 %4932, %225
  %t2526 = mul nsw i32 %4937, %117
  %4938 = sub nsw i32 %4929, %f6.v4.min_realized
  %4939 = mul nsw i32 %4938, %f6.stride.1
  %4940 = add i32 %3502, %4939
  %4941 = add i32 %t2517, %881
  %4942 = mul nsw i32 %4941, %f7.stride.1
  %4943 = sub nsw i32 %4932, %f7.v4.min_realized
  %4944 = mul nsw i32 %4943, %f7.stride.1
  %4945 = sext i32 %t2526 to i64
  %4946 = add nsw i64 %4945, -1
  %4947 = sext i32 %t2524 to i64
  %4948 = add nsw i64 %4947, -1
  %narrow139 = sub nsw i32 %4929, %876
  %4949 = sext i32 %narrow139 to i64
  %4950 = mul nsw i64 %887, %4949
  %4951 = add nsw i64 %4950, %.neg219
  br label %"for f128.s0.v3.v337"

"for f128.s0.v3.v337":                            ; preds = %"for f128.s0.v3.v337.preheader", %"for f128.s0.v3.v337"
  %lsr.iv291 = phi i32 [ %lsr.iv.next292, %"for f128.s0.v3.v337" ], [ 0, %"for f128.s0.v3.v337.preheader" ]
  %lsr.iv289 = phi i32 [ %lsr.iv.next290, %"for f128.s0.v3.v337" ], [ %a907, %"for f128.s0.v3.v337.preheader" ]
  %4952 = add i32 %lsr.iv291, %99
  %4953 = ashr i32 %4952, 1
  %t2518 = add nsw i32 %4953, %3500
  %4954 = add i32 %4935, %lsr.iv291
  %4955 = sext i32 %4954 to i64
  %4956 = getelementptr inbounds float, ptr %f74.host, i64 %4955
  %4957 = load <4 x float>, ptr %4956, align 4, !tbaa !56
  %4958 = add nsw i64 %4955, 4
  %4959 = getelementptr inbounds float, ptr %f74.host, i64 %4958
  %4960 = load <4 x float>, ptr %4959, align 4, !tbaa !56
  %4961 = shufflevector <4 x float> %4957, <4 x float> %4960, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2520 = fmul <4 x float> %232, %4961
  %a908 = fptosi <4 x float> %t2520 to <4 x i32>
  %a911 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a908)
  %4962 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a911, <4 x i32> zeroinitializer)
  %4963 = sitofp <4 x i32> %4962 to <4 x float>
  %t2522 = fsub <4 x float> %t2520, %4963
  %4964 = add i32 %4940, %lsr.iv291
  %t2529 = sub nsw <4 x i32> %4962, %241
  %4965 = sub nsw i32 %t2518, %f7.v3.min_realized
  %t2532 = add nsw i32 %4965, %4942
  %t2533 = mul nsw <4 x i32> %t2529, %248
  %4966 = sub nsw i32 %4953, %f7.v3.min_realized
  %t2535 = add nsw i32 %4966, %4942
  %t2537 = add nsw i32 %4965, %4944
  %t2538 = add nsw i32 %4966, %4944
  %4967 = add nsw <4 x i32> %t2529, <i32 1, i32 1, i32 1, i32 1>
  %t2539 = mul nsw <4 x i32> %4967, %248
  %4968 = add i32 %4952, 1
  %4969 = shl i32 %4968, 1
  %4970 = and i32 %4969, 2
  %4971 = ashr i32 %4968, 1
  %t2540 = add nsw i32 %4970, %4971
  %4972 = shufflevector <4 x float> %4957, <4 x float> %4960, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2541 = fmul <4 x float> %232, %4972
  %a912 = fptosi <4 x float> %t2541 to <4 x i32>
  %a915 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a912)
  %4973 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a915, <4 x i32> zeroinitializer)
  %4974 = sitofp <4 x i32> %4973 to <4 x float>
  %t2543 = fsub <4 x float> %t2541, %4974
  %t2546 = sub nsw <4 x i32> %4973, %241
  %4975 = sub nsw i32 %t2540, %f7.v3.min_realized
  %t2548 = add nsw i32 %4975, %4942
  %t2549 = mul nsw <4 x i32> %t2546, %248
  %4976 = sub nsw i32 %4971, %f7.v3.min_realized
  %t2551 = add nsw i32 %4976, %4942
  %t2552 = add nsw i32 %4975, %4944
  %t2553 = add nsw i32 %4976, %4944
  %4977 = add nsw <4 x i32> %t2546, <i32 1, i32 1, i32 1, i32 1>
  %t2554 = mul nsw <4 x i32> %4977, %248
  %4978 = insertelement <4 x i32> undef, i32 %t2538, i64 0
  %4979 = shufflevector <4 x i32> %4978, <4 x i32> undef, <4 x i32> zeroinitializer
  %4980 = add nsw <4 x i32> %4979, <i32 0, i32 1, i32 2, i32 3>
  %4981 = add nsw <4 x i32> %t2539, %4980
  %4982 = extractelement <4 x i32> %4981, i64 0
  %4983 = sext i32 %4982 to i64
  %4984 = getelementptr inbounds float, ptr %f7.host, i64 %4983
  %4985 = load float, ptr %4984, align 4, !tbaa !54
  %4986 = insertelement <4 x float> undef, float %4985, i64 0
  %4987 = extractelement <4 x i32> %4981, i64 1
  %4988 = sext i32 %4987 to i64
  %4989 = getelementptr inbounds float, ptr %f7.host, i64 %4988
  %4990 = load float, ptr %4989, align 4, !tbaa !54
  %4991 = insertelement <4 x float> %4986, float %4990, i64 1
  %4992 = extractelement <4 x i32> %4981, i64 2
  %4993 = sext i32 %4992 to i64
  %4994 = getelementptr inbounds float, ptr %f7.host, i64 %4993
  %4995 = load float, ptr %4994, align 4, !tbaa !54
  %4996 = insertelement <4 x float> %4991, float %4995, i64 2
  %4997 = extractelement <4 x i32> %4981, i64 3
  %4998 = sext i32 %4997 to i64
  %4999 = getelementptr inbounds float, ptr %f7.host, i64 %4998
  %5000 = load float, ptr %4999, align 4, !tbaa !54
  %5001 = insertelement <4 x float> %4996, float %5000, i64 3
  %5002 = fmul <4 x float> %5001, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5003 = insertelement <4 x i32> undef, i32 %t2537, i64 0
  %5004 = shufflevector <4 x i32> %5003, <4 x i32> undef, <4 x i32> zeroinitializer
  %5005 = add <4 x i32> %5004, <i32 -1, i32 0, i32 1, i32 2>
  %5006 = add <4 x i32> %5005, %t2539
  %5007 = extractelement <4 x i32> %5006, i64 0
  %5008 = sext i32 %5007 to i64
  %5009 = getelementptr inbounds float, ptr %f7.host, i64 %5008
  %5010 = load float, ptr %5009, align 4, !tbaa !54
  %5011 = insertelement <4 x float> undef, float %5010, i64 0
  %5012 = extractelement <4 x i32> %5006, i64 1
  %5013 = sext i32 %5012 to i64
  %5014 = getelementptr inbounds float, ptr %f7.host, i64 %5013
  %5015 = load float, ptr %5014, align 4, !tbaa !54
  %5016 = insertelement <4 x float> %5011, float %5015, i64 1
  %5017 = extractelement <4 x i32> %5006, i64 2
  %5018 = sext i32 %5017 to i64
  %5019 = getelementptr inbounds float, ptr %f7.host, i64 %5018
  %5020 = load float, ptr %5019, align 4, !tbaa !54
  %5021 = insertelement <4 x float> %5016, float %5020, i64 2
  %5022 = extractelement <4 x i32> %5006, i64 3
  %5023 = sext i32 %5022 to i64
  %5024 = getelementptr inbounds float, ptr %f7.host, i64 %5023
  %5025 = load float, ptr %5024, align 4, !tbaa !54
  %5026 = insertelement <4 x float> %5021, float %5025, i64 3
  %5027 = fmul <4 x float> %5026, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5028 = fadd <4 x float> %5002, %5027
  %5029 = fmul <4 x float> %5028, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5030 = insertelement <4 x i32> undef, i32 %t2535, i64 0
  %5031 = shufflevector <4 x i32> %5030, <4 x i32> undef, <4 x i32> zeroinitializer
  %5032 = add nsw <4 x i32> %5031, <i32 0, i32 1, i32 2, i32 3>
  %5033 = add nsw <4 x i32> %t2539, %5032
  %5034 = extractelement <4 x i32> %5033, i64 0
  %5035 = sext i32 %5034 to i64
  %5036 = getelementptr inbounds float, ptr %f7.host, i64 %5035
  %5037 = load float, ptr %5036, align 4, !tbaa !54
  %5038 = insertelement <4 x float> undef, float %5037, i64 0
  %5039 = extractelement <4 x i32> %5033, i64 1
  %5040 = sext i32 %5039 to i64
  %5041 = getelementptr inbounds float, ptr %f7.host, i64 %5040
  %5042 = load float, ptr %5041, align 4, !tbaa !54
  %5043 = insertelement <4 x float> %5038, float %5042, i64 1
  %5044 = extractelement <4 x i32> %5033, i64 2
  %5045 = sext i32 %5044 to i64
  %5046 = getelementptr inbounds float, ptr %f7.host, i64 %5045
  %5047 = load float, ptr %5046, align 4, !tbaa !54
  %5048 = insertelement <4 x float> %5043, float %5047, i64 2
  %5049 = extractelement <4 x i32> %5033, i64 3
  %5050 = sext i32 %5049 to i64
  %5051 = getelementptr inbounds float, ptr %f7.host, i64 %5050
  %5052 = load float, ptr %5051, align 4, !tbaa !54
  %5053 = insertelement <4 x float> %5048, float %5052, i64 3
  %5054 = fmul <4 x float> %5053, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5055 = insertelement <4 x i32> undef, i32 %t2532, i64 0
  %5056 = shufflevector <4 x i32> %5055, <4 x i32> undef, <4 x i32> zeroinitializer
  %5057 = add <4 x i32> %5056, <i32 -1, i32 0, i32 1, i32 2>
  %5058 = add <4 x i32> %5057, %t2539
  %5059 = extractelement <4 x i32> %5058, i64 0
  %5060 = sext i32 %5059 to i64
  %5061 = getelementptr inbounds float, ptr %f7.host, i64 %5060
  %5062 = load float, ptr %5061, align 4, !tbaa !54
  %5063 = insertelement <4 x float> undef, float %5062, i64 0
  %5064 = extractelement <4 x i32> %5058, i64 1
  %5065 = sext i32 %5064 to i64
  %5066 = getelementptr inbounds float, ptr %f7.host, i64 %5065
  %5067 = load float, ptr %5066, align 4, !tbaa !54
  %5068 = insertelement <4 x float> %5063, float %5067, i64 1
  %5069 = extractelement <4 x i32> %5058, i64 2
  %5070 = sext i32 %5069 to i64
  %5071 = getelementptr inbounds float, ptr %f7.host, i64 %5070
  %5072 = load float, ptr %5071, align 4, !tbaa !54
  %5073 = insertelement <4 x float> %5068, float %5072, i64 2
  %5074 = extractelement <4 x i32> %5058, i64 3
  %5075 = sext i32 %5074 to i64
  %5076 = getelementptr inbounds float, ptr %f7.host, i64 %5075
  %5077 = load float, ptr %5076, align 4, !tbaa !54
  %5078 = insertelement <4 x float> %5073, float %5077, i64 3
  %5079 = fmul <4 x float> %5078, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5080 = fadd <4 x float> %5054, %5079
  %5081 = fmul <4 x float> %5080, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5082 = fadd <4 x float> %5029, %5081
  %5083 = mul nsw <4 x i32> %4967, %884
  %5084 = insertelement <4 x i32> undef, i32 %4964, i64 0
  %5085 = shufflevector <4 x i32> %5084, <4 x i32> undef, <4 x i32> zeroinitializer
  %5086 = add nsw <4 x i32> %5085, <i32 0, i32 2, i32 4, i32 6>
  %5087 = add nsw <4 x i32> %5083, %5086
  %5088 = extractelement <4 x i32> %5087, i64 0
  %5089 = sext i32 %5088 to i64
  %5090 = getelementptr inbounds float, ptr %f6.host, i64 %5089
  %5091 = load float, ptr %5090, align 4, !tbaa !50
  %5092 = insertelement <4 x float> undef, float %5091, i64 0
  %5093 = extractelement <4 x i32> %5087, i64 1
  %5094 = sext i32 %5093 to i64
  %5095 = getelementptr inbounds float, ptr %f6.host, i64 %5094
  %5096 = load float, ptr %5095, align 4, !tbaa !50
  %5097 = insertelement <4 x float> %5092, float %5096, i64 1
  %5098 = extractelement <4 x i32> %5087, i64 2
  %5099 = sext i32 %5098 to i64
  %5100 = getelementptr inbounds float, ptr %f6.host, i64 %5099
  %5101 = load float, ptr %5100, align 4, !tbaa !50
  %5102 = insertelement <4 x float> %5097, float %5101, i64 2
  %5103 = extractelement <4 x i32> %5087, i64 3
  %5104 = sext i32 %5103 to i64
  %5105 = getelementptr inbounds float, ptr %f6.host, i64 %5104
  %5106 = load float, ptr %5105, align 4, !tbaa !50
  %5107 = insertelement <4 x float> %5102, float %5106, i64 3
  %5108 = fsub <4 x float> %5107, %5082
  %5109 = fmul <4 x float> %t2522, %5108
  %5110 = add nsw <4 x i32> %t2533, %4980
  %5111 = extractelement <4 x i32> %5110, i64 0
  %5112 = sext i32 %5111 to i64
  %5113 = getelementptr inbounds float, ptr %f7.host, i64 %5112
  %5114 = load float, ptr %5113, align 4, !tbaa !54
  %5115 = insertelement <4 x float> undef, float %5114, i64 0
  %5116 = extractelement <4 x i32> %5110, i64 1
  %5117 = sext i32 %5116 to i64
  %5118 = getelementptr inbounds float, ptr %f7.host, i64 %5117
  %5119 = load float, ptr %5118, align 4, !tbaa !54
  %5120 = insertelement <4 x float> %5115, float %5119, i64 1
  %5121 = extractelement <4 x i32> %5110, i64 2
  %5122 = sext i32 %5121 to i64
  %5123 = getelementptr inbounds float, ptr %f7.host, i64 %5122
  %5124 = load float, ptr %5123, align 4, !tbaa !54
  %5125 = insertelement <4 x float> %5120, float %5124, i64 2
  %5126 = extractelement <4 x i32> %5110, i64 3
  %5127 = sext i32 %5126 to i64
  %5128 = getelementptr inbounds float, ptr %f7.host, i64 %5127
  %5129 = load float, ptr %5128, align 4, !tbaa !54
  %5130 = insertelement <4 x float> %5125, float %5129, i64 3
  %5131 = fmul <4 x float> %5130, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5132 = add <4 x i32> %5005, %t2533
  %5133 = extractelement <4 x i32> %5132, i64 0
  %5134 = sext i32 %5133 to i64
  %5135 = getelementptr inbounds float, ptr %f7.host, i64 %5134
  %5136 = load float, ptr %5135, align 4, !tbaa !54
  %5137 = insertelement <4 x float> undef, float %5136, i64 0
  %5138 = extractelement <4 x i32> %5132, i64 1
  %5139 = sext i32 %5138 to i64
  %5140 = getelementptr inbounds float, ptr %f7.host, i64 %5139
  %5141 = load float, ptr %5140, align 4, !tbaa !54
  %5142 = insertelement <4 x float> %5137, float %5141, i64 1
  %5143 = extractelement <4 x i32> %5132, i64 2
  %5144 = sext i32 %5143 to i64
  %5145 = getelementptr inbounds float, ptr %f7.host, i64 %5144
  %5146 = load float, ptr %5145, align 4, !tbaa !54
  %5147 = insertelement <4 x float> %5142, float %5146, i64 2
  %5148 = extractelement <4 x i32> %5132, i64 3
  %5149 = sext i32 %5148 to i64
  %5150 = getelementptr inbounds float, ptr %f7.host, i64 %5149
  %5151 = load float, ptr %5150, align 4, !tbaa !54
  %5152 = insertelement <4 x float> %5147, float %5151, i64 3
  %5153 = fmul <4 x float> %5152, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5154 = fadd <4 x float> %5131, %5153
  %5155 = fmul <4 x float> %5154, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5156 = add nsw <4 x i32> %t2533, %5032
  %5157 = extractelement <4 x i32> %5156, i64 0
  %5158 = sext i32 %5157 to i64
  %5159 = getelementptr inbounds float, ptr %f7.host, i64 %5158
  %5160 = load float, ptr %5159, align 4, !tbaa !54
  %5161 = insertelement <4 x float> undef, float %5160, i64 0
  %5162 = extractelement <4 x i32> %5156, i64 1
  %5163 = sext i32 %5162 to i64
  %5164 = getelementptr inbounds float, ptr %f7.host, i64 %5163
  %5165 = load float, ptr %5164, align 4, !tbaa !54
  %5166 = insertelement <4 x float> %5161, float %5165, i64 1
  %5167 = extractelement <4 x i32> %5156, i64 2
  %5168 = sext i32 %5167 to i64
  %5169 = getelementptr inbounds float, ptr %f7.host, i64 %5168
  %5170 = load float, ptr %5169, align 4, !tbaa !54
  %5171 = insertelement <4 x float> %5166, float %5170, i64 2
  %5172 = extractelement <4 x i32> %5156, i64 3
  %5173 = sext i32 %5172 to i64
  %5174 = getelementptr inbounds float, ptr %f7.host, i64 %5173
  %5175 = load float, ptr %5174, align 4, !tbaa !54
  %5176 = insertelement <4 x float> %5171, float %5175, i64 3
  %5177 = fmul <4 x float> %5176, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5178 = add <4 x i32> %5057, %t2533
  %5179 = extractelement <4 x i32> %5178, i64 0
  %5180 = sext i32 %5179 to i64
  %5181 = getelementptr inbounds float, ptr %f7.host, i64 %5180
  %5182 = load float, ptr %5181, align 4, !tbaa !54
  %5183 = insertelement <4 x float> undef, float %5182, i64 0
  %5184 = extractelement <4 x i32> %5178, i64 1
  %5185 = sext i32 %5184 to i64
  %5186 = getelementptr inbounds float, ptr %f7.host, i64 %5185
  %5187 = load float, ptr %5186, align 4, !tbaa !54
  %5188 = insertelement <4 x float> %5183, float %5187, i64 1
  %5189 = extractelement <4 x i32> %5178, i64 2
  %5190 = sext i32 %5189 to i64
  %5191 = getelementptr inbounds float, ptr %f7.host, i64 %5190
  %5192 = load float, ptr %5191, align 4, !tbaa !54
  %5193 = insertelement <4 x float> %5188, float %5192, i64 2
  %5194 = extractelement <4 x i32> %5178, i64 3
  %5195 = sext i32 %5194 to i64
  %5196 = getelementptr inbounds float, ptr %f7.host, i64 %5195
  %5197 = load float, ptr %5196, align 4, !tbaa !54
  %5198 = insertelement <4 x float> %5193, float %5197, i64 3
  %5199 = fmul <4 x float> %5198, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5200 = fadd <4 x float> %5177, %5199
  %5201 = fmul <4 x float> %5200, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5202 = fadd <4 x float> %5155, %5201
  %5203 = mul nsw <4 x i32> %t2529, %884
  %5204 = add nsw <4 x i32> %5203, %5086
  %5205 = extractelement <4 x i32> %5204, i64 0
  %5206 = sext i32 %5205 to i64
  %5207 = getelementptr inbounds float, ptr %f6.host, i64 %5206
  %5208 = load float, ptr %5207, align 4, !tbaa !50
  %5209 = insertelement <4 x float> undef, float %5208, i64 0
  %5210 = extractelement <4 x i32> %5204, i64 1
  %5211 = sext i32 %5210 to i64
  %5212 = getelementptr inbounds float, ptr %f6.host, i64 %5211
  %5213 = load float, ptr %5212, align 4, !tbaa !50
  %5214 = insertelement <4 x float> %5209, float %5213, i64 1
  %5215 = extractelement <4 x i32> %5204, i64 2
  %5216 = sext i32 %5215 to i64
  %5217 = getelementptr inbounds float, ptr %f6.host, i64 %5216
  %5218 = load float, ptr %5217, align 4, !tbaa !50
  %5219 = insertelement <4 x float> %5214, float %5218, i64 2
  %5220 = extractelement <4 x i32> %5204, i64 3
  %5221 = sext i32 %5220 to i64
  %5222 = getelementptr inbounds float, ptr %f6.host, i64 %5221
  %5223 = load float, ptr %5222, align 4, !tbaa !50
  %5224 = insertelement <4 x float> %5219, float %5223, i64 3
  %5225 = fsub <4 x float> %5224, %5202
  %5226 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2522
  %5227 = fmul <4 x float> %5226, %5225
  %5228 = fadd <4 x float> %5109, %5227
  %narrow137 = sub nsw i32 %4953, %f129.v3.min_realized
  %5229 = sext i32 %narrow137 to i64
  %5230 = add nsw i64 %5229, %4945
  %5231 = getelementptr inbounds float, ptr %128, i64 %5230
  %5232 = load <4 x float>, ptr %5231, align 4, !tbaa !64
  %5233 = fmul <4 x float> %5232, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5234 = sext i32 %t2518 to i64
  %5235 = sub nsw i64 %5234, %885
  %5236 = add nsw i64 %4946, %5235
  %5237 = getelementptr inbounds float, ptr %128, i64 %5236
  %5238 = load <4 x float>, ptr %5237, align 4, !tbaa !64
  %5239 = fmul <4 x float> %5238, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5240 = fadd <4 x float> %5233, %5239
  %5241 = fmul <4 x float> %5240, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5242 = add nsw i64 %5229, %4947
  %5243 = getelementptr inbounds float, ptr %128, i64 %5242
  %5244 = load <4 x float>, ptr %5243, align 4, !tbaa !64
  %5245 = fmul <4 x float> %5244, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5246 = add nsw i64 %4948, %5235
  %5247 = getelementptr inbounds float, ptr %128, i64 %5246
  %5248 = load <4 x float>, ptr %5247, align 4, !tbaa !64
  %5249 = fmul <4 x float> %5248, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5250 = fadd <4 x float> %5245, %5249
  %5251 = fmul <4 x float> %5250, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5252 = fadd <4 x float> %5241, %5251
  %5253 = fadd <4 x float> %5228, %5252
  %5254 = insertelement <4 x i32> undef, i32 %t2553, i64 0
  %5255 = shufflevector <4 x i32> %5254, <4 x i32> undef, <4 x i32> zeroinitializer
  %5256 = add nsw <4 x i32> %5255, <i32 0, i32 1, i32 2, i32 3>
  %5257 = add nsw <4 x i32> %t2554, %5256
  %5258 = extractelement <4 x i32> %5257, i64 0
  %5259 = sext i32 %5258 to i64
  %5260 = getelementptr inbounds float, ptr %f7.host, i64 %5259
  %5261 = load float, ptr %5260, align 4, !tbaa !54
  %5262 = insertelement <4 x float> undef, float %5261, i64 0
  %5263 = extractelement <4 x i32> %5257, i64 1
  %5264 = sext i32 %5263 to i64
  %5265 = getelementptr inbounds float, ptr %f7.host, i64 %5264
  %5266 = load float, ptr %5265, align 4, !tbaa !54
  %5267 = insertelement <4 x float> %5262, float %5266, i64 1
  %5268 = extractelement <4 x i32> %5257, i64 2
  %5269 = sext i32 %5268 to i64
  %5270 = getelementptr inbounds float, ptr %f7.host, i64 %5269
  %5271 = load float, ptr %5270, align 4, !tbaa !54
  %5272 = insertelement <4 x float> %5267, float %5271, i64 2
  %5273 = extractelement <4 x i32> %5257, i64 3
  %5274 = sext i32 %5273 to i64
  %5275 = getelementptr inbounds float, ptr %f7.host, i64 %5274
  %5276 = load float, ptr %5275, align 4, !tbaa !54
  %5277 = insertelement <4 x float> %5272, float %5276, i64 3
  %5278 = fmul <4 x float> %5277, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5279 = insertelement <4 x i32> undef, i32 %t2552, i64 0
  %5280 = shufflevector <4 x i32> %5279, <4 x i32> undef, <4 x i32> zeroinitializer
  %5281 = add <4 x i32> %5280, <i32 -1, i32 0, i32 1, i32 2>
  %5282 = add <4 x i32> %5281, %t2554
  %5283 = extractelement <4 x i32> %5282, i64 0
  %5284 = sext i32 %5283 to i64
  %5285 = getelementptr inbounds float, ptr %f7.host, i64 %5284
  %5286 = load float, ptr %5285, align 4, !tbaa !54
  %5287 = insertelement <4 x float> undef, float %5286, i64 0
  %5288 = extractelement <4 x i32> %5282, i64 1
  %5289 = sext i32 %5288 to i64
  %5290 = getelementptr inbounds float, ptr %f7.host, i64 %5289
  %5291 = load float, ptr %5290, align 4, !tbaa !54
  %5292 = insertelement <4 x float> %5287, float %5291, i64 1
  %5293 = extractelement <4 x i32> %5282, i64 2
  %5294 = sext i32 %5293 to i64
  %5295 = getelementptr inbounds float, ptr %f7.host, i64 %5294
  %5296 = load float, ptr %5295, align 4, !tbaa !54
  %5297 = insertelement <4 x float> %5292, float %5296, i64 2
  %5298 = extractelement <4 x i32> %5282, i64 3
  %5299 = sext i32 %5298 to i64
  %5300 = getelementptr inbounds float, ptr %f7.host, i64 %5299
  %5301 = load float, ptr %5300, align 4, !tbaa !54
  %5302 = insertelement <4 x float> %5297, float %5301, i64 3
  %5303 = fmul <4 x float> %5302, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5304 = fadd <4 x float> %5278, %5303
  %5305 = fmul <4 x float> %5304, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5306 = insertelement <4 x i32> undef, i32 %t2551, i64 0
  %5307 = shufflevector <4 x i32> %5306, <4 x i32> undef, <4 x i32> zeroinitializer
  %5308 = add nsw <4 x i32> %5307, <i32 0, i32 1, i32 2, i32 3>
  %5309 = add nsw <4 x i32> %t2554, %5308
  %5310 = extractelement <4 x i32> %5309, i64 0
  %5311 = sext i32 %5310 to i64
  %5312 = getelementptr inbounds float, ptr %f7.host, i64 %5311
  %5313 = load float, ptr %5312, align 4, !tbaa !54
  %5314 = insertelement <4 x float> undef, float %5313, i64 0
  %5315 = extractelement <4 x i32> %5309, i64 1
  %5316 = sext i32 %5315 to i64
  %5317 = getelementptr inbounds float, ptr %f7.host, i64 %5316
  %5318 = load float, ptr %5317, align 4, !tbaa !54
  %5319 = insertelement <4 x float> %5314, float %5318, i64 1
  %5320 = extractelement <4 x i32> %5309, i64 2
  %5321 = sext i32 %5320 to i64
  %5322 = getelementptr inbounds float, ptr %f7.host, i64 %5321
  %5323 = load float, ptr %5322, align 4, !tbaa !54
  %5324 = insertelement <4 x float> %5319, float %5323, i64 2
  %5325 = extractelement <4 x i32> %5309, i64 3
  %5326 = sext i32 %5325 to i64
  %5327 = getelementptr inbounds float, ptr %f7.host, i64 %5326
  %5328 = load float, ptr %5327, align 4, !tbaa !54
  %5329 = insertelement <4 x float> %5324, float %5328, i64 3
  %5330 = fmul <4 x float> %5329, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5331 = insertelement <4 x i32> undef, i32 %t2548, i64 0
  %5332 = shufflevector <4 x i32> %5331, <4 x i32> undef, <4 x i32> zeroinitializer
  %5333 = add <4 x i32> %5332, <i32 -1, i32 0, i32 1, i32 2>
  %5334 = add <4 x i32> %5333, %t2554
  %5335 = extractelement <4 x i32> %5334, i64 0
  %5336 = sext i32 %5335 to i64
  %5337 = getelementptr inbounds float, ptr %f7.host, i64 %5336
  %5338 = load float, ptr %5337, align 4, !tbaa !54
  %5339 = insertelement <4 x float> undef, float %5338, i64 0
  %5340 = extractelement <4 x i32> %5334, i64 1
  %5341 = sext i32 %5340 to i64
  %5342 = getelementptr inbounds float, ptr %f7.host, i64 %5341
  %5343 = load float, ptr %5342, align 4, !tbaa !54
  %5344 = insertelement <4 x float> %5339, float %5343, i64 1
  %5345 = extractelement <4 x i32> %5334, i64 2
  %5346 = sext i32 %5345 to i64
  %5347 = getelementptr inbounds float, ptr %f7.host, i64 %5346
  %5348 = load float, ptr %5347, align 4, !tbaa !54
  %5349 = insertelement <4 x float> %5344, float %5348, i64 2
  %5350 = extractelement <4 x i32> %5334, i64 3
  %5351 = sext i32 %5350 to i64
  %5352 = getelementptr inbounds float, ptr %f7.host, i64 %5351
  %5353 = load float, ptr %5352, align 4, !tbaa !54
  %5354 = insertelement <4 x float> %5349, float %5353, i64 3
  %5355 = fmul <4 x float> %5354, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5356 = fadd <4 x float> %5330, %5355
  %5357 = fmul <4 x float> %5356, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5358 = fadd <4 x float> %5305, %5357
  %5359 = mul nsw <4 x i32> %4977, %884
  %5360 = add i32 %4964, 1
  %5361 = insertelement <4 x i32> undef, i32 %5360, i64 0
  %5362 = shufflevector <4 x i32> %5361, <4 x i32> undef, <4 x i32> zeroinitializer
  %5363 = add nsw <4 x i32> %5362, <i32 0, i32 2, i32 4, i32 6>
  %5364 = add nsw <4 x i32> %5359, %5363
  %5365 = extractelement <4 x i32> %5364, i64 0
  %5366 = sext i32 %5365 to i64
  %5367 = getelementptr inbounds float, ptr %f6.host, i64 %5366
  %5368 = load float, ptr %5367, align 4, !tbaa !50
  %5369 = insertelement <4 x float> undef, float %5368, i64 0
  %5370 = extractelement <4 x i32> %5364, i64 1
  %5371 = sext i32 %5370 to i64
  %5372 = getelementptr inbounds float, ptr %f6.host, i64 %5371
  %5373 = load float, ptr %5372, align 4, !tbaa !50
  %5374 = insertelement <4 x float> %5369, float %5373, i64 1
  %5375 = extractelement <4 x i32> %5364, i64 2
  %5376 = sext i32 %5375 to i64
  %5377 = getelementptr inbounds float, ptr %f6.host, i64 %5376
  %5378 = load float, ptr %5377, align 4, !tbaa !50
  %5379 = insertelement <4 x float> %5374, float %5378, i64 2
  %5380 = extractelement <4 x i32> %5364, i64 3
  %5381 = sext i32 %5380 to i64
  %5382 = getelementptr inbounds float, ptr %f6.host, i64 %5381
  %5383 = load float, ptr %5382, align 4, !tbaa !50
  %5384 = insertelement <4 x float> %5379, float %5383, i64 3
  %5385 = fsub <4 x float> %5384, %5358
  %5386 = fmul <4 x float> %t2543, %5385
  %5387 = add nsw <4 x i32> %t2549, %5256
  %5388 = extractelement <4 x i32> %5387, i64 0
  %5389 = sext i32 %5388 to i64
  %5390 = getelementptr inbounds float, ptr %f7.host, i64 %5389
  %5391 = load float, ptr %5390, align 4, !tbaa !54
  %5392 = insertelement <4 x float> undef, float %5391, i64 0
  %5393 = extractelement <4 x i32> %5387, i64 1
  %5394 = sext i32 %5393 to i64
  %5395 = getelementptr inbounds float, ptr %f7.host, i64 %5394
  %5396 = load float, ptr %5395, align 4, !tbaa !54
  %5397 = insertelement <4 x float> %5392, float %5396, i64 1
  %5398 = extractelement <4 x i32> %5387, i64 2
  %5399 = sext i32 %5398 to i64
  %5400 = getelementptr inbounds float, ptr %f7.host, i64 %5399
  %5401 = load float, ptr %5400, align 4, !tbaa !54
  %5402 = insertelement <4 x float> %5397, float %5401, i64 2
  %5403 = extractelement <4 x i32> %5387, i64 3
  %5404 = sext i32 %5403 to i64
  %5405 = getelementptr inbounds float, ptr %f7.host, i64 %5404
  %5406 = load float, ptr %5405, align 4, !tbaa !54
  %5407 = insertelement <4 x float> %5402, float %5406, i64 3
  %5408 = fmul <4 x float> %5407, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5409 = add <4 x i32> %t2549, %5280
  %5410 = add <4 x i32> %5409, <i32 -1, i32 0, i32 1, i32 2>
  %5411 = extractelement <4 x i32> %5410, i64 0
  %5412 = sext i32 %5411 to i64
  %5413 = getelementptr inbounds float, ptr %f7.host, i64 %5412
  %5414 = load float, ptr %5413, align 4, !tbaa !54
  %5415 = insertelement <4 x float> undef, float %5414, i64 0
  %5416 = extractelement <4 x i32> %5410, i64 1
  %5417 = sext i32 %5416 to i64
  %5418 = getelementptr inbounds float, ptr %f7.host, i64 %5417
  %5419 = load float, ptr %5418, align 4, !tbaa !54
  %5420 = insertelement <4 x float> %5415, float %5419, i64 1
  %5421 = extractelement <4 x i32> %5410, i64 2
  %5422 = sext i32 %5421 to i64
  %5423 = getelementptr inbounds float, ptr %f7.host, i64 %5422
  %5424 = load float, ptr %5423, align 4, !tbaa !54
  %5425 = insertelement <4 x float> %5420, float %5424, i64 2
  %5426 = extractelement <4 x i32> %5410, i64 3
  %5427 = sext i32 %5426 to i64
  %5428 = getelementptr inbounds float, ptr %f7.host, i64 %5427
  %5429 = load float, ptr %5428, align 4, !tbaa !54
  %5430 = insertelement <4 x float> %5425, float %5429, i64 3
  %5431 = fmul <4 x float> %5430, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5432 = fadd <4 x float> %5408, %5431
  %5433 = fmul <4 x float> %5432, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5434 = add nsw <4 x i32> %t2549, %5308
  %5435 = extractelement <4 x i32> %5434, i64 0
  %5436 = sext i32 %5435 to i64
  %5437 = getelementptr inbounds float, ptr %f7.host, i64 %5436
  %5438 = load float, ptr %5437, align 4, !tbaa !54
  %5439 = insertelement <4 x float> undef, float %5438, i64 0
  %5440 = extractelement <4 x i32> %5434, i64 1
  %5441 = sext i32 %5440 to i64
  %5442 = getelementptr inbounds float, ptr %f7.host, i64 %5441
  %5443 = load float, ptr %5442, align 4, !tbaa !54
  %5444 = insertelement <4 x float> %5439, float %5443, i64 1
  %5445 = extractelement <4 x i32> %5434, i64 2
  %5446 = sext i32 %5445 to i64
  %5447 = getelementptr inbounds float, ptr %f7.host, i64 %5446
  %5448 = load float, ptr %5447, align 4, !tbaa !54
  %5449 = insertelement <4 x float> %5444, float %5448, i64 2
  %5450 = extractelement <4 x i32> %5434, i64 3
  %5451 = sext i32 %5450 to i64
  %5452 = getelementptr inbounds float, ptr %f7.host, i64 %5451
  %5453 = load float, ptr %5452, align 4, !tbaa !54
  %5454 = insertelement <4 x float> %5449, float %5453, i64 3
  %5455 = fmul <4 x float> %5454, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5456 = add <4 x i32> %t2549, %5332
  %5457 = add <4 x i32> %5456, <i32 -1, i32 0, i32 1, i32 2>
  %5458 = extractelement <4 x i32> %5457, i64 0
  %5459 = sext i32 %5458 to i64
  %5460 = getelementptr inbounds float, ptr %f7.host, i64 %5459
  %5461 = load float, ptr %5460, align 4, !tbaa !54
  %5462 = insertelement <4 x float> undef, float %5461, i64 0
  %5463 = extractelement <4 x i32> %5457, i64 1
  %5464 = sext i32 %5463 to i64
  %5465 = getelementptr inbounds float, ptr %f7.host, i64 %5464
  %5466 = load float, ptr %5465, align 4, !tbaa !54
  %5467 = insertelement <4 x float> %5462, float %5466, i64 1
  %5468 = extractelement <4 x i32> %5457, i64 2
  %5469 = sext i32 %5468 to i64
  %5470 = getelementptr inbounds float, ptr %f7.host, i64 %5469
  %5471 = load float, ptr %5470, align 4, !tbaa !54
  %5472 = insertelement <4 x float> %5467, float %5471, i64 2
  %5473 = extractelement <4 x i32> %5457, i64 3
  %5474 = sext i32 %5473 to i64
  %5475 = getelementptr inbounds float, ptr %f7.host, i64 %5474
  %5476 = load float, ptr %5475, align 4, !tbaa !54
  %5477 = insertelement <4 x float> %5472, float %5476, i64 3
  %5478 = fmul <4 x float> %5477, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5479 = fadd <4 x float> %5455, %5478
  %5480 = fmul <4 x float> %5479, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5481 = fadd <4 x float> %5433, %5480
  %5482 = mul nsw <4 x i32> %t2546, %884
  %5483 = add nsw <4 x i32> %5482, %5363
  %5484 = extractelement <4 x i32> %5483, i64 0
  %5485 = sext i32 %5484 to i64
  %5486 = getelementptr inbounds float, ptr %f6.host, i64 %5485
  %5487 = load float, ptr %5486, align 4, !tbaa !50
  %5488 = insertelement <4 x float> undef, float %5487, i64 0
  %5489 = extractelement <4 x i32> %5483, i64 1
  %5490 = sext i32 %5489 to i64
  %5491 = getelementptr inbounds float, ptr %f6.host, i64 %5490
  %5492 = load float, ptr %5491, align 4, !tbaa !50
  %5493 = insertelement <4 x float> %5488, float %5492, i64 1
  %5494 = extractelement <4 x i32> %5483, i64 2
  %5495 = sext i32 %5494 to i64
  %5496 = getelementptr inbounds float, ptr %f6.host, i64 %5495
  %5497 = load float, ptr %5496, align 4, !tbaa !50
  %5498 = insertelement <4 x float> %5493, float %5497, i64 2
  %5499 = extractelement <4 x i32> %5483, i64 3
  %5500 = sext i32 %5499 to i64
  %5501 = getelementptr inbounds float, ptr %f6.host, i64 %5500
  %5502 = load float, ptr %5501, align 4, !tbaa !50
  %5503 = insertelement <4 x float> %5498, float %5502, i64 3
  %5504 = fsub <4 x float> %5503, %5481
  %5505 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2543
  %5506 = fmul <4 x float> %5505, %5504
  %5507 = fadd <4 x float> %5386, %5506
  %narrow138 = sub nsw i32 %4971, %f129.v3.min_realized
  %5508 = sext i32 %narrow138 to i64
  %5509 = add nsw i64 %5508, %4945
  %5510 = getelementptr inbounds float, ptr %128, i64 %5509
  %5511 = load <4 x float>, ptr %5510, align 4, !tbaa !64
  %5512 = fmul <4 x float> %5511, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5513 = sext i32 %t2540 to i64
  %5514 = sub nsw i64 %5513, %885
  %5515 = add nsw i64 %4946, %5514
  %5516 = getelementptr inbounds float, ptr %128, i64 %5515
  %5517 = load <4 x float>, ptr %5516, align 4, !tbaa !64
  %5518 = fmul <4 x float> %5517, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5519 = fadd <4 x float> %5512, %5518
  %5520 = fmul <4 x float> %5519, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5521 = add nsw i64 %5508, %4947
  %5522 = getelementptr inbounds float, ptr %128, i64 %5521
  %5523 = load <4 x float>, ptr %5522, align 4, !tbaa !64
  %5524 = fmul <4 x float> %5523, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5525 = add nsw i64 %4948, %5514
  %5526 = getelementptr inbounds float, ptr %128, i64 %5525
  %5527 = load <4 x float>, ptr %5526, align 4, !tbaa !64
  %5528 = fmul <4 x float> %5527, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5529 = fadd <4 x float> %5524, %5528
  %5530 = fmul <4 x float> %5529, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5531 = fadd <4 x float> %5520, %5530
  %5532 = fadd <4 x float> %5507, %5531
  %5533 = shufflevector <4 x float> %5253, <4 x float> %5532, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %5534 = sext i32 %4952 to i64
  %5535 = add nsw i64 %4951, %5534
  %5536 = getelementptr inbounds float, ptr %154, i64 %5535
  store <8 x float> %5533, ptr %5536, align 4, !tbaa !66
  %lsr.iv.next290 = add nsw i32 %lsr.iv289, -1
  %lsr.iv.next292 = add nuw i32 %lsr.iv291, 8
  %.not140 = icmp eq i32 %lsr.iv.next290, 0
  br i1 %.not140, label %"end for f128.s0.v3.v338", label %"for f128.s0.v3.v337"

"end for f128.s0.v3.v338":                        ; preds = %"for f128.s0.v3.v337", %true_bb34
  br i1 %.not129, label %"produce f12745", label %"for f128.s0.v3.v341.preheader", !prof !4

"for f128.s0.v3.v341.preheader":                  ; preds = %"end for f128.s0.v3.v338"
  %5537 = trunc i64 %3710 to i32
  %5538 = add i32 %5537, 21
  %5539 = ashr i32 %5538, 3
  %5540 = shl nsw i32 %5539, 1
  %5541 = and i32 %5540, 2
  %5542 = ashr i32 %5538, 4
  %t2555 = add nsw i32 %5541, %5542
  %5543 = sub nsw i32 %5539, %f74.v4.min_realized
  %5544 = mul nsw i32 %5543, %879
  %t2558 = add nsw i32 %3506, %5544
  %5545 = sext i32 %t2558 to i64
  %5546 = getelementptr inbounds float, ptr %f74.host, i64 %5545
  %5547 = load <4 x float>, ptr %5546, align 4, !tbaa !56
  %5548 = add nsw i64 %5545, 4
  %5549 = getelementptr inbounds float, ptr %f74.host, i64 %5548
  %5550 = load <4 x float>, ptr %5549, align 4, !tbaa !56
  %5551 = shufflevector <4 x float> %5547, <4 x float> %5550, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2559 = fmul <4 x float> %232, %5551
  %a918 = fptosi <4 x float> %t2559 to <4 x i32>
  %a921 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a918)
  %5552 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a921, <4 x i32> zeroinitializer)
  %5553 = sitofp <4 x i32> %5552 to <4 x float>
  %t2561 = fsub <4 x float> %t2559, %5553
  %5554 = add nsw i32 %t2555, %880
  %t2563 = mul nsw i32 %5554, %117
  %5555 = sub nsw i32 %5542, %225
  %t2565 = mul nsw i32 %5555, %117
  %5556 = sub nsw i32 %5539, %f6.v4.min_realized
  %5557 = mul nsw i32 %5556, %f6.stride.1
  %t2566 = add nsw i32 %5557, %3507
  %t2568 = sub nsw <4 x i32> %5552, %241
  %5558 = add i32 %t2555, %881
  %5559 = mul nsw i32 %5558, %f7.stride.1
  %t2571 = add nsw i32 %5559, %3508
  %t2572 = mul nsw <4 x i32> %t2568, %248
  %t2574 = add nsw i32 %5559, %3509
  %5560 = sub nsw i32 %5542, %f7.v4.min_realized
  %5561 = mul nsw i32 %5560, %f7.stride.1
  %t2576 = add nsw i32 %5561, %3508
  %t2577 = add nsw i32 %5561, %3509
  %5562 = add nsw <4 x i32> %t2568, <i32 1, i32 1, i32 1, i32 1>
  %t2578 = mul nsw <4 x i32> %5562, %248
  %5563 = shufflevector <4 x float> %5547, <4 x float> %5550, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2580 = fmul <4 x float> %232, %5563
  %a922 = fptosi <4 x float> %t2580 to <4 x i32>
  %a925 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a922)
  %5564 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a925, <4 x i32> zeroinitializer)
  %5565 = sitofp <4 x i32> %5564 to <4 x float>
  %t2582 = fsub <4 x float> %t2580, %5565
  %t2585 = sub nsw <4 x i32> %5564, %241
  %t2587 = add nsw i32 %5559, %3514
  %t2588 = mul nsw <4 x i32> %t2585, %248
  %t2590 = add nsw i32 %5559, %3515
  %t2591 = add nsw i32 %5561, %3514
  %t2592 = add nsw i32 %5561, %3515
  %5566 = add nsw <4 x i32> %t2585, <i32 1, i32 1, i32 1, i32 1>
  %t2593 = mul nsw <4 x i32> %5566, %248
  %5567 = insertelement <4 x i32> undef, i32 %t2577, i64 0
  %5568 = shufflevector <4 x i32> %5567, <4 x i32> undef, <4 x i32> zeroinitializer
  %5569 = add nsw <4 x i32> %5568, <i32 0, i32 1, i32 2, i32 3>
  %5570 = add nsw <4 x i32> %t2578, %5569
  %5571 = extractelement <4 x i32> %5570, i64 0
  %5572 = sext i32 %5571 to i64
  %5573 = getelementptr inbounds float, ptr %f7.host, i64 %5572
  %5574 = load float, ptr %5573, align 4, !tbaa !54
  %5575 = insertelement <4 x float> undef, float %5574, i64 0
  %5576 = extractelement <4 x i32> %5570, i64 1
  %5577 = sext i32 %5576 to i64
  %5578 = getelementptr inbounds float, ptr %f7.host, i64 %5577
  %5579 = load float, ptr %5578, align 4, !tbaa !54
  %5580 = insertelement <4 x float> %5575, float %5579, i64 1
  %5581 = extractelement <4 x i32> %5570, i64 2
  %5582 = sext i32 %5581 to i64
  %5583 = getelementptr inbounds float, ptr %f7.host, i64 %5582
  %5584 = load float, ptr %5583, align 4, !tbaa !54
  %5585 = insertelement <4 x float> %5580, float %5584, i64 2
  %5586 = extractelement <4 x i32> %5570, i64 3
  %5587 = sext i32 %5586 to i64
  %5588 = getelementptr inbounds float, ptr %f7.host, i64 %5587
  %5589 = load float, ptr %5588, align 4, !tbaa !54
  %5590 = insertelement <4 x float> %5585, float %5589, i64 3
  %5591 = fmul <4 x float> %5590, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5592 = insertelement <4 x i32> undef, i32 %t2576, i64 0
  %5593 = shufflevector <4 x i32> %5592, <4 x i32> undef, <4 x i32> zeroinitializer
  %5594 = add <4 x i32> %5593, <i32 -1, i32 0, i32 1, i32 2>
  %5595 = add <4 x i32> %5594, %t2578
  %5596 = extractelement <4 x i32> %5595, i64 0
  %5597 = sext i32 %5596 to i64
  %5598 = getelementptr inbounds float, ptr %f7.host, i64 %5597
  %5599 = load float, ptr %5598, align 4, !tbaa !54
  %5600 = insertelement <4 x float> undef, float %5599, i64 0
  %5601 = extractelement <4 x i32> %5595, i64 1
  %5602 = sext i32 %5601 to i64
  %5603 = getelementptr inbounds float, ptr %f7.host, i64 %5602
  %5604 = load float, ptr %5603, align 4, !tbaa !54
  %5605 = insertelement <4 x float> %5600, float %5604, i64 1
  %5606 = extractelement <4 x i32> %5595, i64 2
  %5607 = sext i32 %5606 to i64
  %5608 = getelementptr inbounds float, ptr %f7.host, i64 %5607
  %5609 = load float, ptr %5608, align 4, !tbaa !54
  %5610 = insertelement <4 x float> %5605, float %5609, i64 2
  %5611 = extractelement <4 x i32> %5595, i64 3
  %5612 = sext i32 %5611 to i64
  %5613 = getelementptr inbounds float, ptr %f7.host, i64 %5612
  %5614 = load float, ptr %5613, align 4, !tbaa !54
  %5615 = insertelement <4 x float> %5610, float %5614, i64 3
  %5616 = fmul <4 x float> %5615, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5617 = fadd <4 x float> %5591, %5616
  %5618 = fmul <4 x float> %5617, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5619 = insertelement <4 x i32> undef, i32 %t2574, i64 0
  %5620 = shufflevector <4 x i32> %5619, <4 x i32> undef, <4 x i32> zeroinitializer
  %5621 = add nsw <4 x i32> %5620, <i32 0, i32 1, i32 2, i32 3>
  %5622 = add nsw <4 x i32> %t2578, %5621
  %5623 = extractelement <4 x i32> %5622, i64 0
  %5624 = sext i32 %5623 to i64
  %5625 = getelementptr inbounds float, ptr %f7.host, i64 %5624
  %5626 = load float, ptr %5625, align 4, !tbaa !54
  %5627 = insertelement <4 x float> undef, float %5626, i64 0
  %5628 = extractelement <4 x i32> %5622, i64 1
  %5629 = sext i32 %5628 to i64
  %5630 = getelementptr inbounds float, ptr %f7.host, i64 %5629
  %5631 = load float, ptr %5630, align 4, !tbaa !54
  %5632 = insertelement <4 x float> %5627, float %5631, i64 1
  %5633 = extractelement <4 x i32> %5622, i64 2
  %5634 = sext i32 %5633 to i64
  %5635 = getelementptr inbounds float, ptr %f7.host, i64 %5634
  %5636 = load float, ptr %5635, align 4, !tbaa !54
  %5637 = insertelement <4 x float> %5632, float %5636, i64 2
  %5638 = extractelement <4 x i32> %5622, i64 3
  %5639 = sext i32 %5638 to i64
  %5640 = getelementptr inbounds float, ptr %f7.host, i64 %5639
  %5641 = load float, ptr %5640, align 4, !tbaa !54
  %5642 = insertelement <4 x float> %5637, float %5641, i64 3
  %5643 = fmul <4 x float> %5642, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5644 = insertelement <4 x i32> undef, i32 %t2571, i64 0
  %5645 = shufflevector <4 x i32> %5644, <4 x i32> undef, <4 x i32> zeroinitializer
  %5646 = add <4 x i32> %5645, <i32 -1, i32 0, i32 1, i32 2>
  %5647 = add <4 x i32> %5646, %t2578
  %5648 = extractelement <4 x i32> %5647, i64 0
  %5649 = sext i32 %5648 to i64
  %5650 = getelementptr inbounds float, ptr %f7.host, i64 %5649
  %5651 = load float, ptr %5650, align 4, !tbaa !54
  %5652 = insertelement <4 x float> undef, float %5651, i64 0
  %5653 = extractelement <4 x i32> %5647, i64 1
  %5654 = sext i32 %5653 to i64
  %5655 = getelementptr inbounds float, ptr %f7.host, i64 %5654
  %5656 = load float, ptr %5655, align 4, !tbaa !54
  %5657 = insertelement <4 x float> %5652, float %5656, i64 1
  %5658 = extractelement <4 x i32> %5647, i64 2
  %5659 = sext i32 %5658 to i64
  %5660 = getelementptr inbounds float, ptr %f7.host, i64 %5659
  %5661 = load float, ptr %5660, align 4, !tbaa !54
  %5662 = insertelement <4 x float> %5657, float %5661, i64 2
  %5663 = extractelement <4 x i32> %5647, i64 3
  %5664 = sext i32 %5663 to i64
  %5665 = getelementptr inbounds float, ptr %f7.host, i64 %5664
  %5666 = load float, ptr %5665, align 4, !tbaa !54
  %5667 = insertelement <4 x float> %5662, float %5666, i64 3
  %5668 = fmul <4 x float> %5667, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5669 = fadd <4 x float> %5643, %5668
  %5670 = fmul <4 x float> %5669, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5671 = fadd <4 x float> %5618, %5670
  %5672 = mul nsw <4 x i32> %5562, %884
  %5673 = insertelement <4 x i32> undef, i32 %t2566, i64 0
  %5674 = shufflevector <4 x i32> %5673, <4 x i32> undef, <4 x i32> zeroinitializer
  %5675 = add nsw <4 x i32> %5674, <i32 0, i32 2, i32 4, i32 6>
  %5676 = add nsw <4 x i32> %5672, %5675
  %5677 = extractelement <4 x i32> %5676, i64 0
  %5678 = sext i32 %5677 to i64
  %5679 = getelementptr inbounds float, ptr %f6.host, i64 %5678
  %5680 = load float, ptr %5679, align 4, !tbaa !50
  %5681 = insertelement <4 x float> undef, float %5680, i64 0
  %5682 = extractelement <4 x i32> %5676, i64 1
  %5683 = sext i32 %5682 to i64
  %5684 = getelementptr inbounds float, ptr %f6.host, i64 %5683
  %5685 = load float, ptr %5684, align 4, !tbaa !50
  %5686 = insertelement <4 x float> %5681, float %5685, i64 1
  %5687 = extractelement <4 x i32> %5676, i64 2
  %5688 = sext i32 %5687 to i64
  %5689 = getelementptr inbounds float, ptr %f6.host, i64 %5688
  %5690 = load float, ptr %5689, align 4, !tbaa !50
  %5691 = insertelement <4 x float> %5686, float %5690, i64 2
  %5692 = extractelement <4 x i32> %5676, i64 3
  %5693 = sext i32 %5692 to i64
  %5694 = getelementptr inbounds float, ptr %f6.host, i64 %5693
  %5695 = load float, ptr %5694, align 4, !tbaa !50
  %5696 = insertelement <4 x float> %5691, float %5695, i64 3
  %5697 = fsub <4 x float> %5696, %5671
  %5698 = fmul <4 x float> %t2561, %5697
  %5699 = add nsw <4 x i32> %t2572, %5569
  %5700 = extractelement <4 x i32> %5699, i64 0
  %5701 = sext i32 %5700 to i64
  %5702 = getelementptr inbounds float, ptr %f7.host, i64 %5701
  %5703 = load float, ptr %5702, align 4, !tbaa !54
  %5704 = insertelement <4 x float> undef, float %5703, i64 0
  %5705 = extractelement <4 x i32> %5699, i64 1
  %5706 = sext i32 %5705 to i64
  %5707 = getelementptr inbounds float, ptr %f7.host, i64 %5706
  %5708 = load float, ptr %5707, align 4, !tbaa !54
  %5709 = insertelement <4 x float> %5704, float %5708, i64 1
  %5710 = extractelement <4 x i32> %5699, i64 2
  %5711 = sext i32 %5710 to i64
  %5712 = getelementptr inbounds float, ptr %f7.host, i64 %5711
  %5713 = load float, ptr %5712, align 4, !tbaa !54
  %5714 = insertelement <4 x float> %5709, float %5713, i64 2
  %5715 = extractelement <4 x i32> %5699, i64 3
  %5716 = sext i32 %5715 to i64
  %5717 = getelementptr inbounds float, ptr %f7.host, i64 %5716
  %5718 = load float, ptr %5717, align 4, !tbaa !54
  %5719 = insertelement <4 x float> %5714, float %5718, i64 3
  %5720 = fmul <4 x float> %5719, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5721 = add <4 x i32> %5594, %t2572
  %5722 = extractelement <4 x i32> %5721, i64 0
  %5723 = sext i32 %5722 to i64
  %5724 = getelementptr inbounds float, ptr %f7.host, i64 %5723
  %5725 = load float, ptr %5724, align 4, !tbaa !54
  %5726 = insertelement <4 x float> undef, float %5725, i64 0
  %5727 = extractelement <4 x i32> %5721, i64 1
  %5728 = sext i32 %5727 to i64
  %5729 = getelementptr inbounds float, ptr %f7.host, i64 %5728
  %5730 = load float, ptr %5729, align 4, !tbaa !54
  %5731 = insertelement <4 x float> %5726, float %5730, i64 1
  %5732 = extractelement <4 x i32> %5721, i64 2
  %5733 = sext i32 %5732 to i64
  %5734 = getelementptr inbounds float, ptr %f7.host, i64 %5733
  %5735 = load float, ptr %5734, align 4, !tbaa !54
  %5736 = insertelement <4 x float> %5731, float %5735, i64 2
  %5737 = extractelement <4 x i32> %5721, i64 3
  %5738 = sext i32 %5737 to i64
  %5739 = getelementptr inbounds float, ptr %f7.host, i64 %5738
  %5740 = load float, ptr %5739, align 4, !tbaa !54
  %5741 = insertelement <4 x float> %5736, float %5740, i64 3
  %5742 = fmul <4 x float> %5741, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5743 = fadd <4 x float> %5720, %5742
  %5744 = fmul <4 x float> %5743, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5745 = add nsw <4 x i32> %t2572, %5621
  %5746 = extractelement <4 x i32> %5745, i64 0
  %5747 = sext i32 %5746 to i64
  %5748 = getelementptr inbounds float, ptr %f7.host, i64 %5747
  %5749 = load float, ptr %5748, align 4, !tbaa !54
  %5750 = insertelement <4 x float> undef, float %5749, i64 0
  %5751 = extractelement <4 x i32> %5745, i64 1
  %5752 = sext i32 %5751 to i64
  %5753 = getelementptr inbounds float, ptr %f7.host, i64 %5752
  %5754 = load float, ptr %5753, align 4, !tbaa !54
  %5755 = insertelement <4 x float> %5750, float %5754, i64 1
  %5756 = extractelement <4 x i32> %5745, i64 2
  %5757 = sext i32 %5756 to i64
  %5758 = getelementptr inbounds float, ptr %f7.host, i64 %5757
  %5759 = load float, ptr %5758, align 4, !tbaa !54
  %5760 = insertelement <4 x float> %5755, float %5759, i64 2
  %5761 = extractelement <4 x i32> %5745, i64 3
  %5762 = sext i32 %5761 to i64
  %5763 = getelementptr inbounds float, ptr %f7.host, i64 %5762
  %5764 = load float, ptr %5763, align 4, !tbaa !54
  %5765 = insertelement <4 x float> %5760, float %5764, i64 3
  %5766 = fmul <4 x float> %5765, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5767 = add <4 x i32> %5646, %t2572
  %5768 = extractelement <4 x i32> %5767, i64 0
  %5769 = sext i32 %5768 to i64
  %5770 = getelementptr inbounds float, ptr %f7.host, i64 %5769
  %5771 = load float, ptr %5770, align 4, !tbaa !54
  %5772 = insertelement <4 x float> undef, float %5771, i64 0
  %5773 = extractelement <4 x i32> %5767, i64 1
  %5774 = sext i32 %5773 to i64
  %5775 = getelementptr inbounds float, ptr %f7.host, i64 %5774
  %5776 = load float, ptr %5775, align 4, !tbaa !54
  %5777 = insertelement <4 x float> %5772, float %5776, i64 1
  %5778 = extractelement <4 x i32> %5767, i64 2
  %5779 = sext i32 %5778 to i64
  %5780 = getelementptr inbounds float, ptr %f7.host, i64 %5779
  %5781 = load float, ptr %5780, align 4, !tbaa !54
  %5782 = insertelement <4 x float> %5777, float %5781, i64 2
  %5783 = extractelement <4 x i32> %5767, i64 3
  %5784 = sext i32 %5783 to i64
  %5785 = getelementptr inbounds float, ptr %f7.host, i64 %5784
  %5786 = load float, ptr %5785, align 4, !tbaa !54
  %5787 = insertelement <4 x float> %5782, float %5786, i64 3
  %5788 = fmul <4 x float> %5787, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5789 = fadd <4 x float> %5766, %5788
  %5790 = fmul <4 x float> %5789, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5791 = fadd <4 x float> %5744, %5790
  %5792 = mul nsw <4 x i32> %t2568, %884
  %5793 = add nsw <4 x i32> %5792, %5675
  %5794 = extractelement <4 x i32> %5793, i64 0
  %5795 = sext i32 %5794 to i64
  %5796 = getelementptr inbounds float, ptr %f6.host, i64 %5795
  %5797 = load float, ptr %5796, align 4, !tbaa !50
  %5798 = insertelement <4 x float> undef, float %5797, i64 0
  %5799 = extractelement <4 x i32> %5793, i64 1
  %5800 = sext i32 %5799 to i64
  %5801 = getelementptr inbounds float, ptr %f6.host, i64 %5800
  %5802 = load float, ptr %5801, align 4, !tbaa !50
  %5803 = insertelement <4 x float> %5798, float %5802, i64 1
  %5804 = extractelement <4 x i32> %5793, i64 2
  %5805 = sext i32 %5804 to i64
  %5806 = getelementptr inbounds float, ptr %f6.host, i64 %5805
  %5807 = load float, ptr %5806, align 4, !tbaa !50
  %5808 = insertelement <4 x float> %5803, float %5807, i64 2
  %5809 = extractelement <4 x i32> %5793, i64 3
  %5810 = sext i32 %5809 to i64
  %5811 = getelementptr inbounds float, ptr %f6.host, i64 %5810
  %5812 = load float, ptr %5811, align 4, !tbaa !50
  %5813 = insertelement <4 x float> %5808, float %5812, i64 3
  %5814 = fsub <4 x float> %5813, %5791
  %5815 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2561
  %5816 = fmul <4 x float> %5815, %5814
  %5817 = fadd <4 x float> %5698, %5816
  %5818 = sext i32 %t2565 to i64
  %5819 = add nsw i64 %5818, %3516
  %5820 = getelementptr inbounds float, ptr %128, i64 %5819
  %5821 = load <4 x float>, ptr %5820, align 4, !tbaa !64
  %5822 = fmul <4 x float> %5821, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5823 = add nsw i64 %3518, %5818
  %5824 = getelementptr inbounds float, ptr %128, i64 %5823
  %5825 = load <4 x float>, ptr %5824, align 4, !tbaa !64
  %5826 = fmul <4 x float> %5825, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5827 = fadd <4 x float> %5822, %5826
  %5828 = fmul <4 x float> %5827, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5829 = sext i32 %t2563 to i64
  %5830 = add nsw i64 %5829, %3516
  %5831 = getelementptr inbounds float, ptr %128, i64 %5830
  %5832 = load <4 x float>, ptr %5831, align 4, !tbaa !64
  %5833 = fmul <4 x float> %5832, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5834 = add nsw i64 %3518, %5829
  %5835 = getelementptr inbounds float, ptr %128, i64 %5834
  %5836 = load <4 x float>, ptr %5835, align 4, !tbaa !64
  %5837 = fmul <4 x float> %5836, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5838 = fadd <4 x float> %5833, %5837
  %5839 = fmul <4 x float> %5838, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5840 = fadd <4 x float> %5828, %5839
  %5841 = fadd <4 x float> %5817, %5840
  %5842 = insertelement <4 x i32> undef, i32 %t2592, i64 0
  %5843 = shufflevector <4 x i32> %5842, <4 x i32> undef, <4 x i32> zeroinitializer
  %5844 = add nsw <4 x i32> %5843, <i32 0, i32 1, i32 2, i32 3>
  %5845 = add nsw <4 x i32> %t2593, %5844
  %5846 = extractelement <4 x i32> %5845, i64 0
  %5847 = sext i32 %5846 to i64
  %5848 = getelementptr inbounds float, ptr %f7.host, i64 %5847
  %5849 = load float, ptr %5848, align 4, !tbaa !54
  %5850 = insertelement <4 x float> undef, float %5849, i64 0
  %5851 = extractelement <4 x i32> %5845, i64 1
  %5852 = sext i32 %5851 to i64
  %5853 = getelementptr inbounds float, ptr %f7.host, i64 %5852
  %5854 = load float, ptr %5853, align 4, !tbaa !54
  %5855 = insertelement <4 x float> %5850, float %5854, i64 1
  %5856 = extractelement <4 x i32> %5845, i64 2
  %5857 = sext i32 %5856 to i64
  %5858 = getelementptr inbounds float, ptr %f7.host, i64 %5857
  %5859 = load float, ptr %5858, align 4, !tbaa !54
  %5860 = insertelement <4 x float> %5855, float %5859, i64 2
  %5861 = extractelement <4 x i32> %5845, i64 3
  %5862 = sext i32 %5861 to i64
  %5863 = getelementptr inbounds float, ptr %f7.host, i64 %5862
  %5864 = load float, ptr %5863, align 4, !tbaa !54
  %5865 = insertelement <4 x float> %5860, float %5864, i64 3
  %5866 = fmul <4 x float> %5865, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5867 = insertelement <4 x i32> undef, i32 %t2591, i64 0
  %5868 = shufflevector <4 x i32> %5867, <4 x i32> undef, <4 x i32> zeroinitializer
  %5869 = add <4 x i32> %5868, <i32 -1, i32 0, i32 1, i32 2>
  %5870 = add <4 x i32> %5869, %t2593
  %5871 = extractelement <4 x i32> %5870, i64 0
  %5872 = sext i32 %5871 to i64
  %5873 = getelementptr inbounds float, ptr %f7.host, i64 %5872
  %5874 = load float, ptr %5873, align 4, !tbaa !54
  %5875 = insertelement <4 x float> undef, float %5874, i64 0
  %5876 = extractelement <4 x i32> %5870, i64 1
  %5877 = sext i32 %5876 to i64
  %5878 = getelementptr inbounds float, ptr %f7.host, i64 %5877
  %5879 = load float, ptr %5878, align 4, !tbaa !54
  %5880 = insertelement <4 x float> %5875, float %5879, i64 1
  %5881 = extractelement <4 x i32> %5870, i64 2
  %5882 = sext i32 %5881 to i64
  %5883 = getelementptr inbounds float, ptr %f7.host, i64 %5882
  %5884 = load float, ptr %5883, align 4, !tbaa !54
  %5885 = insertelement <4 x float> %5880, float %5884, i64 2
  %5886 = extractelement <4 x i32> %5870, i64 3
  %5887 = sext i32 %5886 to i64
  %5888 = getelementptr inbounds float, ptr %f7.host, i64 %5887
  %5889 = load float, ptr %5888, align 4, !tbaa !54
  %5890 = insertelement <4 x float> %5885, float %5889, i64 3
  %5891 = fmul <4 x float> %5890, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5892 = fadd <4 x float> %5866, %5891
  %5893 = fmul <4 x float> %5892, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5894 = insertelement <4 x i32> undef, i32 %t2590, i64 0
  %5895 = shufflevector <4 x i32> %5894, <4 x i32> undef, <4 x i32> zeroinitializer
  %5896 = add nsw <4 x i32> %5895, <i32 0, i32 1, i32 2, i32 3>
  %5897 = add nsw <4 x i32> %t2593, %5896
  %5898 = extractelement <4 x i32> %5897, i64 0
  %5899 = sext i32 %5898 to i64
  %5900 = getelementptr inbounds float, ptr %f7.host, i64 %5899
  %5901 = load float, ptr %5900, align 4, !tbaa !54
  %5902 = insertelement <4 x float> undef, float %5901, i64 0
  %5903 = extractelement <4 x i32> %5897, i64 1
  %5904 = sext i32 %5903 to i64
  %5905 = getelementptr inbounds float, ptr %f7.host, i64 %5904
  %5906 = load float, ptr %5905, align 4, !tbaa !54
  %5907 = insertelement <4 x float> %5902, float %5906, i64 1
  %5908 = extractelement <4 x i32> %5897, i64 2
  %5909 = sext i32 %5908 to i64
  %5910 = getelementptr inbounds float, ptr %f7.host, i64 %5909
  %5911 = load float, ptr %5910, align 4, !tbaa !54
  %5912 = insertelement <4 x float> %5907, float %5911, i64 2
  %5913 = extractelement <4 x i32> %5897, i64 3
  %5914 = sext i32 %5913 to i64
  %5915 = getelementptr inbounds float, ptr %f7.host, i64 %5914
  %5916 = load float, ptr %5915, align 4, !tbaa !54
  %5917 = insertelement <4 x float> %5912, float %5916, i64 3
  %5918 = fmul <4 x float> %5917, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5919 = insertelement <4 x i32> undef, i32 %t2587, i64 0
  %5920 = shufflevector <4 x i32> %5919, <4 x i32> undef, <4 x i32> zeroinitializer
  %5921 = add <4 x i32> %5920, <i32 -1, i32 0, i32 1, i32 2>
  %5922 = add <4 x i32> %5921, %t2593
  %5923 = extractelement <4 x i32> %5922, i64 0
  %5924 = sext i32 %5923 to i64
  %5925 = getelementptr inbounds float, ptr %f7.host, i64 %5924
  %5926 = load float, ptr %5925, align 4, !tbaa !54
  %5927 = insertelement <4 x float> undef, float %5926, i64 0
  %5928 = extractelement <4 x i32> %5922, i64 1
  %5929 = sext i32 %5928 to i64
  %5930 = getelementptr inbounds float, ptr %f7.host, i64 %5929
  %5931 = load float, ptr %5930, align 4, !tbaa !54
  %5932 = insertelement <4 x float> %5927, float %5931, i64 1
  %5933 = extractelement <4 x i32> %5922, i64 2
  %5934 = sext i32 %5933 to i64
  %5935 = getelementptr inbounds float, ptr %f7.host, i64 %5934
  %5936 = load float, ptr %5935, align 4, !tbaa !54
  %5937 = insertelement <4 x float> %5932, float %5936, i64 2
  %5938 = extractelement <4 x i32> %5922, i64 3
  %5939 = sext i32 %5938 to i64
  %5940 = getelementptr inbounds float, ptr %f7.host, i64 %5939
  %5941 = load float, ptr %5940, align 4, !tbaa !54
  %5942 = insertelement <4 x float> %5937, float %5941, i64 3
  %5943 = fmul <4 x float> %5942, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5944 = fadd <4 x float> %5918, %5943
  %5945 = fmul <4 x float> %5944, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5946 = fadd <4 x float> %5893, %5945
  %5947 = mul nsw <4 x i32> %5566, %884
  %5948 = add nsw i32 %t2566, 1
  %5949 = insertelement <4 x i32> undef, i32 %5948, i64 0
  %5950 = shufflevector <4 x i32> %5949, <4 x i32> undef, <4 x i32> zeroinitializer
  %5951 = add nsw <4 x i32> %5950, <i32 0, i32 2, i32 4, i32 6>
  %5952 = add nsw <4 x i32> %5947, %5951
  %5953 = extractelement <4 x i32> %5952, i64 0
  %5954 = sext i32 %5953 to i64
  %5955 = getelementptr inbounds float, ptr %f6.host, i64 %5954
  %5956 = load float, ptr %5955, align 4, !tbaa !50
  %5957 = insertelement <4 x float> undef, float %5956, i64 0
  %5958 = extractelement <4 x i32> %5952, i64 1
  %5959 = sext i32 %5958 to i64
  %5960 = getelementptr inbounds float, ptr %f6.host, i64 %5959
  %5961 = load float, ptr %5960, align 4, !tbaa !50
  %5962 = insertelement <4 x float> %5957, float %5961, i64 1
  %5963 = extractelement <4 x i32> %5952, i64 2
  %5964 = sext i32 %5963 to i64
  %5965 = getelementptr inbounds float, ptr %f6.host, i64 %5964
  %5966 = load float, ptr %5965, align 4, !tbaa !50
  %5967 = insertelement <4 x float> %5962, float %5966, i64 2
  %5968 = extractelement <4 x i32> %5952, i64 3
  %5969 = sext i32 %5968 to i64
  %5970 = getelementptr inbounds float, ptr %f6.host, i64 %5969
  %5971 = load float, ptr %5970, align 4, !tbaa !50
  %5972 = insertelement <4 x float> %5967, float %5971, i64 3
  %5973 = fsub <4 x float> %5972, %5946
  %5974 = fmul <4 x float> %t2582, %5973
  %5975 = add nsw <4 x i32> %t2588, %5844
  %5976 = extractelement <4 x i32> %5975, i64 0
  %5977 = sext i32 %5976 to i64
  %5978 = getelementptr inbounds float, ptr %f7.host, i64 %5977
  %5979 = load float, ptr %5978, align 4, !tbaa !54
  %5980 = insertelement <4 x float> undef, float %5979, i64 0
  %5981 = extractelement <4 x i32> %5975, i64 1
  %5982 = sext i32 %5981 to i64
  %5983 = getelementptr inbounds float, ptr %f7.host, i64 %5982
  %5984 = load float, ptr %5983, align 4, !tbaa !54
  %5985 = insertelement <4 x float> %5980, float %5984, i64 1
  %5986 = extractelement <4 x i32> %5975, i64 2
  %5987 = sext i32 %5986 to i64
  %5988 = getelementptr inbounds float, ptr %f7.host, i64 %5987
  %5989 = load float, ptr %5988, align 4, !tbaa !54
  %5990 = insertelement <4 x float> %5985, float %5989, i64 2
  %5991 = extractelement <4 x i32> %5975, i64 3
  %5992 = sext i32 %5991 to i64
  %5993 = getelementptr inbounds float, ptr %f7.host, i64 %5992
  %5994 = load float, ptr %5993, align 4, !tbaa !54
  %5995 = insertelement <4 x float> %5990, float %5994, i64 3
  %5996 = fmul <4 x float> %5995, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5997 = add <4 x i32> %5869, %t2588
  %5998 = extractelement <4 x i32> %5997, i64 0
  %5999 = sext i32 %5998 to i64
  %6000 = getelementptr inbounds float, ptr %f7.host, i64 %5999
  %6001 = load float, ptr %6000, align 4, !tbaa !54
  %6002 = insertelement <4 x float> undef, float %6001, i64 0
  %6003 = extractelement <4 x i32> %5997, i64 1
  %6004 = sext i32 %6003 to i64
  %6005 = getelementptr inbounds float, ptr %f7.host, i64 %6004
  %6006 = load float, ptr %6005, align 4, !tbaa !54
  %6007 = insertelement <4 x float> %6002, float %6006, i64 1
  %6008 = extractelement <4 x i32> %5997, i64 2
  %6009 = sext i32 %6008 to i64
  %6010 = getelementptr inbounds float, ptr %f7.host, i64 %6009
  %6011 = load float, ptr %6010, align 4, !tbaa !54
  %6012 = insertelement <4 x float> %6007, float %6011, i64 2
  %6013 = extractelement <4 x i32> %5997, i64 3
  %6014 = sext i32 %6013 to i64
  %6015 = getelementptr inbounds float, ptr %f7.host, i64 %6014
  %6016 = load float, ptr %6015, align 4, !tbaa !54
  %6017 = insertelement <4 x float> %6012, float %6016, i64 3
  %6018 = fmul <4 x float> %6017, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6019 = fadd <4 x float> %5996, %6018
  %6020 = fmul <4 x float> %6019, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6021 = add nsw <4 x i32> %t2588, %5896
  %6022 = extractelement <4 x i32> %6021, i64 0
  %6023 = sext i32 %6022 to i64
  %6024 = getelementptr inbounds float, ptr %f7.host, i64 %6023
  %6025 = load float, ptr %6024, align 4, !tbaa !54
  %6026 = insertelement <4 x float> undef, float %6025, i64 0
  %6027 = extractelement <4 x i32> %6021, i64 1
  %6028 = sext i32 %6027 to i64
  %6029 = getelementptr inbounds float, ptr %f7.host, i64 %6028
  %6030 = load float, ptr %6029, align 4, !tbaa !54
  %6031 = insertelement <4 x float> %6026, float %6030, i64 1
  %6032 = extractelement <4 x i32> %6021, i64 2
  %6033 = sext i32 %6032 to i64
  %6034 = getelementptr inbounds float, ptr %f7.host, i64 %6033
  %6035 = load float, ptr %6034, align 4, !tbaa !54
  %6036 = insertelement <4 x float> %6031, float %6035, i64 2
  %6037 = extractelement <4 x i32> %6021, i64 3
  %6038 = sext i32 %6037 to i64
  %6039 = getelementptr inbounds float, ptr %f7.host, i64 %6038
  %6040 = load float, ptr %6039, align 4, !tbaa !54
  %6041 = insertelement <4 x float> %6036, float %6040, i64 3
  %6042 = fmul <4 x float> %6041, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6043 = add <4 x i32> %5921, %t2588
  %6044 = extractelement <4 x i32> %6043, i64 0
  %6045 = sext i32 %6044 to i64
  %6046 = getelementptr inbounds float, ptr %f7.host, i64 %6045
  %6047 = load float, ptr %6046, align 4, !tbaa !54
  %6048 = insertelement <4 x float> undef, float %6047, i64 0
  %6049 = extractelement <4 x i32> %6043, i64 1
  %6050 = sext i32 %6049 to i64
  %6051 = getelementptr inbounds float, ptr %f7.host, i64 %6050
  %6052 = load float, ptr %6051, align 4, !tbaa !54
  %6053 = insertelement <4 x float> %6048, float %6052, i64 1
  %6054 = extractelement <4 x i32> %6043, i64 2
  %6055 = sext i32 %6054 to i64
  %6056 = getelementptr inbounds float, ptr %f7.host, i64 %6055
  %6057 = load float, ptr %6056, align 4, !tbaa !54
  %6058 = insertelement <4 x float> %6053, float %6057, i64 2
  %6059 = extractelement <4 x i32> %6043, i64 3
  %6060 = sext i32 %6059 to i64
  %6061 = getelementptr inbounds float, ptr %f7.host, i64 %6060
  %6062 = load float, ptr %6061, align 4, !tbaa !54
  %6063 = insertelement <4 x float> %6058, float %6062, i64 3
  %6064 = fmul <4 x float> %6063, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6065 = fadd <4 x float> %6042, %6064
  %6066 = fmul <4 x float> %6065, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6067 = fadd <4 x float> %6020, %6066
  %6068 = mul nsw <4 x i32> %t2585, %884
  %6069 = add nsw <4 x i32> %6068, %5951
  %6070 = extractelement <4 x i32> %6069, i64 0
  %6071 = sext i32 %6070 to i64
  %6072 = getelementptr inbounds float, ptr %f6.host, i64 %6071
  %6073 = load float, ptr %6072, align 4, !tbaa !50
  %6074 = insertelement <4 x float> undef, float %6073, i64 0
  %6075 = extractelement <4 x i32> %6069, i64 1
  %6076 = sext i32 %6075 to i64
  %6077 = getelementptr inbounds float, ptr %f6.host, i64 %6076
  %6078 = load float, ptr %6077, align 4, !tbaa !50
  %6079 = insertelement <4 x float> %6074, float %6078, i64 1
  %6080 = extractelement <4 x i32> %6069, i64 2
  %6081 = sext i32 %6080 to i64
  %6082 = getelementptr inbounds float, ptr %f6.host, i64 %6081
  %6083 = load float, ptr %6082, align 4, !tbaa !50
  %6084 = insertelement <4 x float> %6079, float %6083, i64 2
  %6085 = extractelement <4 x i32> %6069, i64 3
  %6086 = sext i32 %6085 to i64
  %6087 = getelementptr inbounds float, ptr %f6.host, i64 %6086
  %6088 = load float, ptr %6087, align 4, !tbaa !50
  %6089 = insertelement <4 x float> %6084, float %6088, i64 3
  %6090 = fsub <4 x float> %6089, %6067
  %6091 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2582
  %6092 = fmul <4 x float> %6091, %6090
  %6093 = fadd <4 x float> %5974, %6092
  %6094 = add nsw i64 %5818, %3519
  %6095 = getelementptr inbounds float, ptr %128, i64 %6094
  %6096 = load <4 x float>, ptr %6095, align 4, !tbaa !64
  %6097 = fmul <4 x float> %6096, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6098 = add nsw i64 %3521, %5818
  %6099 = getelementptr inbounds float, ptr %128, i64 %6098
  %6100 = load <4 x float>, ptr %6099, align 4, !tbaa !64
  %6101 = fmul <4 x float> %6100, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6102 = fadd <4 x float> %6097, %6101
  %6103 = fmul <4 x float> %6102, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6104 = add nsw i64 %5829, %3519
  %6105 = getelementptr inbounds float, ptr %128, i64 %6104
  %6106 = load <4 x float>, ptr %6105, align 4, !tbaa !64
  %6107 = fmul <4 x float> %6106, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6108 = add nsw i64 %3521, %5829
  %6109 = getelementptr inbounds float, ptr %128, i64 %6108
  %6110 = load <4 x float>, ptr %6109, align 4, !tbaa !64
  %6111 = fmul <4 x float> %6110, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6112 = fadd <4 x float> %6107, %6111
  %6113 = fmul <4 x float> %6112, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6114 = fadd <4 x float> %6103, %6113
  %6115 = fadd <4 x float> %6093, %6114
  %6116 = shufflevector <4 x float> %5841, <4 x float> %6115, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow134 = sub nsw i32 %5539, %876
  %6117 = sext i32 %narrow134 to i64
  %6118 = mul nsw i64 %887, %6117
  %6119 = add nsw i64 %6118, %3522
  %6120 = getelementptr inbounds float, ptr %154, i64 %6119
  store <8 x float> %6116, ptr %6120, align 4, !tbaa !66
  br label %"produce f12745"

"produce f12745":                                 ; preds = %"for f128.s0.v3.v341.preheader", %"end for f128.s0.v3.v338", %"produce f12832"
  %6121 = trunc i64 %3710 to i32
  %6122 = add i32 %6121, 1
  %6123 = and i32 %6122, 3
  %6124 = icmp eq i32 %6123, 3
  br i1 %6124, label %true_bb47, label %"produce f12658"

true_bb47:                                        ; preds = %"produce f12745"
  br i1 %.inv, label %"for f127.s0.v3.v350.preheader", label %"end for f127.s0.v3.v351", !prof !5

"for f127.s0.v3.v350.preheader":                  ; preds = %true_bb47
  %6125 = trunc i64 %3710 to i32
  %6126 = add i32 %6125, 9
  %6127 = ashr i32 %6126, 2
  %6128 = shl nsw i32 %6127, 1
  %6129 = and i32 %6128, 2
  %6130 = ashr i32 %6126, 3
  %t2594 = add nsw i32 %6129, %6130
  %6131 = sub nsw i32 %6127, %f73.v4.min_realized
  %6132 = mul nsw i32 %6131, %1506
  %6133 = add i32 %3528, %6132
  %6134 = add nsw i32 %t2594, %1507
  %t2601 = mul nsw i32 %6134, %147
  %6135 = sub nsw i32 %6130, %876
  %t2603 = mul nsw i32 %6135, %147
  %6136 = sub nsw i32 %6127, %f5.v4.min_realized
  %6137 = mul nsw i32 %6136, %f5.stride.1
  %6138 = add i32 %3529, %6137
  %6139 = add i32 %t2594, %1508
  %6140 = mul nsw i32 %6139, %f6.stride.1
  %6141 = sub nsw i32 %6130, %f6.v4.min_realized
  %6142 = mul nsw i32 %6141, %f6.stride.1
  %6143 = sext i32 %t2603 to i64
  %6144 = add nsw i64 %6143, -1
  %6145 = sext i32 %t2601 to i64
  %6146 = add nsw i64 %6145, -1
  %6147 = sext i32 %6127 to i64
  %6148 = sub nsw i64 %6147, %1515
  %6149 = mul nsw i64 %6148, %1514
  %6150 = sub nsw i64 %6149, %1516
  br label %"for f127.s0.v3.v350"

"for f127.s0.v3.v350":                            ; preds = %"for f127.s0.v3.v350.preheader", %"for f127.s0.v3.v350"
  %lsr.iv297 = phi i32 [ %lsr.iv.next298, %"for f127.s0.v3.v350" ], [ 0, %"for f127.s0.v3.v350.preheader" ]
  %lsr.iv295 = phi i32 [ %lsr.iv.next296, %"for f127.s0.v3.v350" ], [ %a927, %"for f127.s0.v3.v350.preheader" ]
  %6151 = add i32 %lsr.iv297, %135
  %6152 = ashr i32 %6151, 1
  %t2595 = add nsw i32 %6152, %3527
  %6153 = add i32 %6133, %lsr.iv297
  %6154 = sext i32 %6153 to i64
  %6155 = getelementptr inbounds float, ptr %f73.host, i64 %6154
  %6156 = load <4 x float>, ptr %6155, align 4, !tbaa !52
  %6157 = add nsw i64 %6154, 4
  %6158 = getelementptr inbounds float, ptr %f73.host, i64 %6157
  %6159 = load <4 x float>, ptr %6158, align 4, !tbaa !52
  %6160 = shufflevector <4 x float> %6156, <4 x float> %6159, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2597 = fmul <4 x float> %232, %6160
  %a928 = fptosi <4 x float> %t2597 to <4 x i32>
  %a931 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a928)
  %6161 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a931, <4 x i32> zeroinitializer)
  %6162 = sitofp <4 x i32> %6161 to <4 x float>
  %t2599 = fsub <4 x float> %t2597, %6162
  %6163 = add i32 %6138, %lsr.iv297
  %t2606 = sub nsw <4 x i32> %6161, %241
  %6164 = sub nsw i32 %t2595, %f6.v3.min_realized
  %t2609 = add nsw i32 %6164, %6140
  %t2610 = mul nsw <4 x i32> %t2606, %884
  %6165 = sub nsw i32 %6152, %f6.v3.min_realized
  %t2612 = add nsw i32 %6165, %6140
  %t2614 = add nsw i32 %6164, %6142
  %t2615 = add nsw i32 %6165, %6142
  %6166 = add nsw <4 x i32> %t2606, <i32 1, i32 1, i32 1, i32 1>
  %t2616 = mul nsw <4 x i32> %6166, %884
  %6167 = add i32 %6151, 1
  %6168 = shl i32 %6167, 1
  %6169 = and i32 %6168, 2
  %6170 = ashr i32 %6167, 1
  %t2617 = add nsw i32 %6169, %6170
  %6171 = shufflevector <4 x float> %6156, <4 x float> %6159, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2618 = fmul <4 x float> %232, %6171
  %a932 = fptosi <4 x float> %t2618 to <4 x i32>
  %a935 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a932)
  %6172 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a935, <4 x i32> zeroinitializer)
  %6173 = sitofp <4 x i32> %6172 to <4 x float>
  %t2620 = fsub <4 x float> %t2618, %6173
  %t2623 = sub nsw <4 x i32> %6172, %241
  %6174 = sub nsw i32 %t2617, %f6.v3.min_realized
  %t2625 = add nsw i32 %6174, %6140
  %t2626 = mul nsw <4 x i32> %t2623, %884
  %6175 = sub nsw i32 %6170, %f6.v3.min_realized
  %t2628 = add nsw i32 %6175, %6140
  %t2629 = add nsw i32 %6174, %6142
  %t2630 = add nsw i32 %6175, %6142
  %6176 = add nsw <4 x i32> %t2623, <i32 1, i32 1, i32 1, i32 1>
  %t2631 = mul nsw <4 x i32> %6176, %884
  %6177 = insertelement <4 x i32> undef, i32 %t2615, i64 0
  %6178 = shufflevector <4 x i32> %6177, <4 x i32> undef, <4 x i32> zeroinitializer
  %6179 = add nsw <4 x i32> %6178, <i32 0, i32 1, i32 2, i32 3>
  %6180 = add nsw <4 x i32> %t2616, %6179
  %6181 = extractelement <4 x i32> %6180, i64 0
  %6182 = sext i32 %6181 to i64
  %6183 = getelementptr inbounds float, ptr %f6.host, i64 %6182
  %6184 = load float, ptr %6183, align 4, !tbaa !50
  %6185 = insertelement <4 x float> undef, float %6184, i64 0
  %6186 = extractelement <4 x i32> %6180, i64 1
  %6187 = sext i32 %6186 to i64
  %6188 = getelementptr inbounds float, ptr %f6.host, i64 %6187
  %6189 = load float, ptr %6188, align 4, !tbaa !50
  %6190 = insertelement <4 x float> %6185, float %6189, i64 1
  %6191 = extractelement <4 x i32> %6180, i64 2
  %6192 = sext i32 %6191 to i64
  %6193 = getelementptr inbounds float, ptr %f6.host, i64 %6192
  %6194 = load float, ptr %6193, align 4, !tbaa !50
  %6195 = insertelement <4 x float> %6190, float %6194, i64 2
  %6196 = extractelement <4 x i32> %6180, i64 3
  %6197 = sext i32 %6196 to i64
  %6198 = getelementptr inbounds float, ptr %f6.host, i64 %6197
  %6199 = load float, ptr %6198, align 4, !tbaa !50
  %6200 = insertelement <4 x float> %6195, float %6199, i64 3
  %6201 = fmul <4 x float> %6200, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6202 = insertelement <4 x i32> undef, i32 %t2614, i64 0
  %6203 = shufflevector <4 x i32> %6202, <4 x i32> undef, <4 x i32> zeroinitializer
  %6204 = add <4 x i32> %6203, <i32 -1, i32 0, i32 1, i32 2>
  %6205 = add <4 x i32> %6204, %t2616
  %6206 = extractelement <4 x i32> %6205, i64 0
  %6207 = sext i32 %6206 to i64
  %6208 = getelementptr inbounds float, ptr %f6.host, i64 %6207
  %6209 = load float, ptr %6208, align 4, !tbaa !50
  %6210 = insertelement <4 x float> undef, float %6209, i64 0
  %6211 = extractelement <4 x i32> %6205, i64 1
  %6212 = sext i32 %6211 to i64
  %6213 = getelementptr inbounds float, ptr %f6.host, i64 %6212
  %6214 = load float, ptr %6213, align 4, !tbaa !50
  %6215 = insertelement <4 x float> %6210, float %6214, i64 1
  %6216 = extractelement <4 x i32> %6205, i64 2
  %6217 = sext i32 %6216 to i64
  %6218 = getelementptr inbounds float, ptr %f6.host, i64 %6217
  %6219 = load float, ptr %6218, align 4, !tbaa !50
  %6220 = insertelement <4 x float> %6215, float %6219, i64 2
  %6221 = extractelement <4 x i32> %6205, i64 3
  %6222 = sext i32 %6221 to i64
  %6223 = getelementptr inbounds float, ptr %f6.host, i64 %6222
  %6224 = load float, ptr %6223, align 4, !tbaa !50
  %6225 = insertelement <4 x float> %6220, float %6224, i64 3
  %6226 = fmul <4 x float> %6225, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6227 = fadd <4 x float> %6201, %6226
  %6228 = fmul <4 x float> %6227, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6229 = insertelement <4 x i32> undef, i32 %t2612, i64 0
  %6230 = shufflevector <4 x i32> %6229, <4 x i32> undef, <4 x i32> zeroinitializer
  %6231 = add nsw <4 x i32> %6230, <i32 0, i32 1, i32 2, i32 3>
  %6232 = add nsw <4 x i32> %t2616, %6231
  %6233 = extractelement <4 x i32> %6232, i64 0
  %6234 = sext i32 %6233 to i64
  %6235 = getelementptr inbounds float, ptr %f6.host, i64 %6234
  %6236 = load float, ptr %6235, align 4, !tbaa !50
  %6237 = insertelement <4 x float> undef, float %6236, i64 0
  %6238 = extractelement <4 x i32> %6232, i64 1
  %6239 = sext i32 %6238 to i64
  %6240 = getelementptr inbounds float, ptr %f6.host, i64 %6239
  %6241 = load float, ptr %6240, align 4, !tbaa !50
  %6242 = insertelement <4 x float> %6237, float %6241, i64 1
  %6243 = extractelement <4 x i32> %6232, i64 2
  %6244 = sext i32 %6243 to i64
  %6245 = getelementptr inbounds float, ptr %f6.host, i64 %6244
  %6246 = load float, ptr %6245, align 4, !tbaa !50
  %6247 = insertelement <4 x float> %6242, float %6246, i64 2
  %6248 = extractelement <4 x i32> %6232, i64 3
  %6249 = sext i32 %6248 to i64
  %6250 = getelementptr inbounds float, ptr %f6.host, i64 %6249
  %6251 = load float, ptr %6250, align 4, !tbaa !50
  %6252 = insertelement <4 x float> %6247, float %6251, i64 3
  %6253 = fmul <4 x float> %6252, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6254 = insertelement <4 x i32> undef, i32 %t2609, i64 0
  %6255 = shufflevector <4 x i32> %6254, <4 x i32> undef, <4 x i32> zeroinitializer
  %6256 = add <4 x i32> %6255, <i32 -1, i32 0, i32 1, i32 2>
  %6257 = add <4 x i32> %6256, %t2616
  %6258 = extractelement <4 x i32> %6257, i64 0
  %6259 = sext i32 %6258 to i64
  %6260 = getelementptr inbounds float, ptr %f6.host, i64 %6259
  %6261 = load float, ptr %6260, align 4, !tbaa !50
  %6262 = insertelement <4 x float> undef, float %6261, i64 0
  %6263 = extractelement <4 x i32> %6257, i64 1
  %6264 = sext i32 %6263 to i64
  %6265 = getelementptr inbounds float, ptr %f6.host, i64 %6264
  %6266 = load float, ptr %6265, align 4, !tbaa !50
  %6267 = insertelement <4 x float> %6262, float %6266, i64 1
  %6268 = extractelement <4 x i32> %6257, i64 2
  %6269 = sext i32 %6268 to i64
  %6270 = getelementptr inbounds float, ptr %f6.host, i64 %6269
  %6271 = load float, ptr %6270, align 4, !tbaa !50
  %6272 = insertelement <4 x float> %6267, float %6271, i64 2
  %6273 = extractelement <4 x i32> %6257, i64 3
  %6274 = sext i32 %6273 to i64
  %6275 = getelementptr inbounds float, ptr %f6.host, i64 %6274
  %6276 = load float, ptr %6275, align 4, !tbaa !50
  %6277 = insertelement <4 x float> %6272, float %6276, i64 3
  %6278 = fmul <4 x float> %6277, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6279 = fadd <4 x float> %6253, %6278
  %6280 = fmul <4 x float> %6279, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6281 = fadd <4 x float> %6228, %6280
  %6282 = mul nsw <4 x i32> %6166, %1511
  %6283 = insertelement <4 x i32> undef, i32 %6163, i64 0
  %6284 = shufflevector <4 x i32> %6283, <4 x i32> undef, <4 x i32> zeroinitializer
  %6285 = add nsw <4 x i32> %6284, <i32 0, i32 2, i32 4, i32 6>
  %6286 = add nsw <4 x i32> %6282, %6285
  %6287 = extractelement <4 x i32> %6286, i64 0
  %6288 = sext i32 %6287 to i64
  %6289 = getelementptr inbounds float, ptr %f5.host, i64 %6288
  %6290 = load float, ptr %6289, align 4, !tbaa !46
  %6291 = insertelement <4 x float> undef, float %6290, i64 0
  %6292 = extractelement <4 x i32> %6286, i64 1
  %6293 = sext i32 %6292 to i64
  %6294 = getelementptr inbounds float, ptr %f5.host, i64 %6293
  %6295 = load float, ptr %6294, align 4, !tbaa !46
  %6296 = insertelement <4 x float> %6291, float %6295, i64 1
  %6297 = extractelement <4 x i32> %6286, i64 2
  %6298 = sext i32 %6297 to i64
  %6299 = getelementptr inbounds float, ptr %f5.host, i64 %6298
  %6300 = load float, ptr %6299, align 4, !tbaa !46
  %6301 = insertelement <4 x float> %6296, float %6300, i64 2
  %6302 = extractelement <4 x i32> %6286, i64 3
  %6303 = sext i32 %6302 to i64
  %6304 = getelementptr inbounds float, ptr %f5.host, i64 %6303
  %6305 = load float, ptr %6304, align 4, !tbaa !46
  %6306 = insertelement <4 x float> %6301, float %6305, i64 3
  %6307 = fsub <4 x float> %6306, %6281
  %6308 = fmul <4 x float> %t2599, %6307
  %6309 = add nsw <4 x i32> %t2610, %6179
  %6310 = extractelement <4 x i32> %6309, i64 0
  %6311 = sext i32 %6310 to i64
  %6312 = getelementptr inbounds float, ptr %f6.host, i64 %6311
  %6313 = load float, ptr %6312, align 4, !tbaa !50
  %6314 = insertelement <4 x float> undef, float %6313, i64 0
  %6315 = extractelement <4 x i32> %6309, i64 1
  %6316 = sext i32 %6315 to i64
  %6317 = getelementptr inbounds float, ptr %f6.host, i64 %6316
  %6318 = load float, ptr %6317, align 4, !tbaa !50
  %6319 = insertelement <4 x float> %6314, float %6318, i64 1
  %6320 = extractelement <4 x i32> %6309, i64 2
  %6321 = sext i32 %6320 to i64
  %6322 = getelementptr inbounds float, ptr %f6.host, i64 %6321
  %6323 = load float, ptr %6322, align 4, !tbaa !50
  %6324 = insertelement <4 x float> %6319, float %6323, i64 2
  %6325 = extractelement <4 x i32> %6309, i64 3
  %6326 = sext i32 %6325 to i64
  %6327 = getelementptr inbounds float, ptr %f6.host, i64 %6326
  %6328 = load float, ptr %6327, align 4, !tbaa !50
  %6329 = insertelement <4 x float> %6324, float %6328, i64 3
  %6330 = fmul <4 x float> %6329, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6331 = add <4 x i32> %6204, %t2610
  %6332 = extractelement <4 x i32> %6331, i64 0
  %6333 = sext i32 %6332 to i64
  %6334 = getelementptr inbounds float, ptr %f6.host, i64 %6333
  %6335 = load float, ptr %6334, align 4, !tbaa !50
  %6336 = insertelement <4 x float> undef, float %6335, i64 0
  %6337 = extractelement <4 x i32> %6331, i64 1
  %6338 = sext i32 %6337 to i64
  %6339 = getelementptr inbounds float, ptr %f6.host, i64 %6338
  %6340 = load float, ptr %6339, align 4, !tbaa !50
  %6341 = insertelement <4 x float> %6336, float %6340, i64 1
  %6342 = extractelement <4 x i32> %6331, i64 2
  %6343 = sext i32 %6342 to i64
  %6344 = getelementptr inbounds float, ptr %f6.host, i64 %6343
  %6345 = load float, ptr %6344, align 4, !tbaa !50
  %6346 = insertelement <4 x float> %6341, float %6345, i64 2
  %6347 = extractelement <4 x i32> %6331, i64 3
  %6348 = sext i32 %6347 to i64
  %6349 = getelementptr inbounds float, ptr %f6.host, i64 %6348
  %6350 = load float, ptr %6349, align 4, !tbaa !50
  %6351 = insertelement <4 x float> %6346, float %6350, i64 3
  %6352 = fmul <4 x float> %6351, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6353 = fadd <4 x float> %6330, %6352
  %6354 = fmul <4 x float> %6353, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6355 = add nsw <4 x i32> %t2610, %6231
  %6356 = extractelement <4 x i32> %6355, i64 0
  %6357 = sext i32 %6356 to i64
  %6358 = getelementptr inbounds float, ptr %f6.host, i64 %6357
  %6359 = load float, ptr %6358, align 4, !tbaa !50
  %6360 = insertelement <4 x float> undef, float %6359, i64 0
  %6361 = extractelement <4 x i32> %6355, i64 1
  %6362 = sext i32 %6361 to i64
  %6363 = getelementptr inbounds float, ptr %f6.host, i64 %6362
  %6364 = load float, ptr %6363, align 4, !tbaa !50
  %6365 = insertelement <4 x float> %6360, float %6364, i64 1
  %6366 = extractelement <4 x i32> %6355, i64 2
  %6367 = sext i32 %6366 to i64
  %6368 = getelementptr inbounds float, ptr %f6.host, i64 %6367
  %6369 = load float, ptr %6368, align 4, !tbaa !50
  %6370 = insertelement <4 x float> %6365, float %6369, i64 2
  %6371 = extractelement <4 x i32> %6355, i64 3
  %6372 = sext i32 %6371 to i64
  %6373 = getelementptr inbounds float, ptr %f6.host, i64 %6372
  %6374 = load float, ptr %6373, align 4, !tbaa !50
  %6375 = insertelement <4 x float> %6370, float %6374, i64 3
  %6376 = fmul <4 x float> %6375, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6377 = add <4 x i32> %6256, %t2610
  %6378 = extractelement <4 x i32> %6377, i64 0
  %6379 = sext i32 %6378 to i64
  %6380 = getelementptr inbounds float, ptr %f6.host, i64 %6379
  %6381 = load float, ptr %6380, align 4, !tbaa !50
  %6382 = insertelement <4 x float> undef, float %6381, i64 0
  %6383 = extractelement <4 x i32> %6377, i64 1
  %6384 = sext i32 %6383 to i64
  %6385 = getelementptr inbounds float, ptr %f6.host, i64 %6384
  %6386 = load float, ptr %6385, align 4, !tbaa !50
  %6387 = insertelement <4 x float> %6382, float %6386, i64 1
  %6388 = extractelement <4 x i32> %6377, i64 2
  %6389 = sext i32 %6388 to i64
  %6390 = getelementptr inbounds float, ptr %f6.host, i64 %6389
  %6391 = load float, ptr %6390, align 4, !tbaa !50
  %6392 = insertelement <4 x float> %6387, float %6391, i64 2
  %6393 = extractelement <4 x i32> %6377, i64 3
  %6394 = sext i32 %6393 to i64
  %6395 = getelementptr inbounds float, ptr %f6.host, i64 %6394
  %6396 = load float, ptr %6395, align 4, !tbaa !50
  %6397 = insertelement <4 x float> %6392, float %6396, i64 3
  %6398 = fmul <4 x float> %6397, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6399 = fadd <4 x float> %6376, %6398
  %6400 = fmul <4 x float> %6399, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6401 = fadd <4 x float> %6354, %6400
  %6402 = mul nsw <4 x i32> %t2606, %1511
  %6403 = add nsw <4 x i32> %6402, %6285
  %6404 = extractelement <4 x i32> %6403, i64 0
  %6405 = sext i32 %6404 to i64
  %6406 = getelementptr inbounds float, ptr %f5.host, i64 %6405
  %6407 = load float, ptr %6406, align 4, !tbaa !46
  %6408 = insertelement <4 x float> undef, float %6407, i64 0
  %6409 = extractelement <4 x i32> %6403, i64 1
  %6410 = sext i32 %6409 to i64
  %6411 = getelementptr inbounds float, ptr %f5.host, i64 %6410
  %6412 = load float, ptr %6411, align 4, !tbaa !46
  %6413 = insertelement <4 x float> %6408, float %6412, i64 1
  %6414 = extractelement <4 x i32> %6403, i64 2
  %6415 = sext i32 %6414 to i64
  %6416 = getelementptr inbounds float, ptr %f5.host, i64 %6415
  %6417 = load float, ptr %6416, align 4, !tbaa !46
  %6418 = insertelement <4 x float> %6413, float %6417, i64 2
  %6419 = extractelement <4 x i32> %6403, i64 3
  %6420 = sext i32 %6419 to i64
  %6421 = getelementptr inbounds float, ptr %f5.host, i64 %6420
  %6422 = load float, ptr %6421, align 4, !tbaa !46
  %6423 = insertelement <4 x float> %6418, float %6422, i64 3
  %6424 = fsub <4 x float> %6423, %6401
  %6425 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2599
  %6426 = fmul <4 x float> %6425, %6424
  %6427 = fadd <4 x float> %6308, %6426
  %narrow125 = sub nsw i32 %6152, %f128.v3.min_realized
  %6428 = sext i32 %narrow125 to i64
  %6429 = add nsw i64 %6428, %6143
  %6430 = getelementptr inbounds float, ptr %154, i64 %6429
  %6431 = load <4 x float>, ptr %6430, align 4, !tbaa !66
  %6432 = fmul <4 x float> %6431, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6433 = sext i32 %t2595 to i64
  %6434 = sub nsw i64 %6433, %1512
  %6435 = add nsw i64 %6144, %6434
  %6436 = getelementptr inbounds float, ptr %154, i64 %6435
  %6437 = load <4 x float>, ptr %6436, align 4, !tbaa !66
  %6438 = fmul <4 x float> %6437, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6439 = fadd <4 x float> %6432, %6438
  %6440 = fmul <4 x float> %6439, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6441 = add nsw i64 %6428, %6145
  %6442 = getelementptr inbounds float, ptr %154, i64 %6441
  %6443 = load <4 x float>, ptr %6442, align 4, !tbaa !66
  %6444 = fmul <4 x float> %6443, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6445 = add nsw i64 %6146, %6434
  %6446 = getelementptr inbounds float, ptr %154, i64 %6445
  %6447 = load <4 x float>, ptr %6446, align 4, !tbaa !66
  %6448 = fmul <4 x float> %6447, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6449 = fadd <4 x float> %6444, %6448
  %6450 = fmul <4 x float> %6449, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6451 = fadd <4 x float> %6440, %6450
  %6452 = fadd <4 x float> %6427, %6451
  %6453 = insertelement <4 x i32> undef, i32 %t2630, i64 0
  %6454 = shufflevector <4 x i32> %6453, <4 x i32> undef, <4 x i32> zeroinitializer
  %6455 = add nsw <4 x i32> %6454, <i32 0, i32 1, i32 2, i32 3>
  %6456 = add nsw <4 x i32> %t2631, %6455
  %6457 = extractelement <4 x i32> %6456, i64 0
  %6458 = sext i32 %6457 to i64
  %6459 = getelementptr inbounds float, ptr %f6.host, i64 %6458
  %6460 = load float, ptr %6459, align 4, !tbaa !50
  %6461 = insertelement <4 x float> undef, float %6460, i64 0
  %6462 = extractelement <4 x i32> %6456, i64 1
  %6463 = sext i32 %6462 to i64
  %6464 = getelementptr inbounds float, ptr %f6.host, i64 %6463
  %6465 = load float, ptr %6464, align 4, !tbaa !50
  %6466 = insertelement <4 x float> %6461, float %6465, i64 1
  %6467 = extractelement <4 x i32> %6456, i64 2
  %6468 = sext i32 %6467 to i64
  %6469 = getelementptr inbounds float, ptr %f6.host, i64 %6468
  %6470 = load float, ptr %6469, align 4, !tbaa !50
  %6471 = insertelement <4 x float> %6466, float %6470, i64 2
  %6472 = extractelement <4 x i32> %6456, i64 3
  %6473 = sext i32 %6472 to i64
  %6474 = getelementptr inbounds float, ptr %f6.host, i64 %6473
  %6475 = load float, ptr %6474, align 4, !tbaa !50
  %6476 = insertelement <4 x float> %6471, float %6475, i64 3
  %6477 = fmul <4 x float> %6476, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6478 = insertelement <4 x i32> undef, i32 %t2629, i64 0
  %6479 = shufflevector <4 x i32> %6478, <4 x i32> undef, <4 x i32> zeroinitializer
  %6480 = add <4 x i32> %6479, <i32 -1, i32 0, i32 1, i32 2>
  %6481 = add <4 x i32> %6480, %t2631
  %6482 = extractelement <4 x i32> %6481, i64 0
  %6483 = sext i32 %6482 to i64
  %6484 = getelementptr inbounds float, ptr %f6.host, i64 %6483
  %6485 = load float, ptr %6484, align 4, !tbaa !50
  %6486 = insertelement <4 x float> undef, float %6485, i64 0
  %6487 = extractelement <4 x i32> %6481, i64 1
  %6488 = sext i32 %6487 to i64
  %6489 = getelementptr inbounds float, ptr %f6.host, i64 %6488
  %6490 = load float, ptr %6489, align 4, !tbaa !50
  %6491 = insertelement <4 x float> %6486, float %6490, i64 1
  %6492 = extractelement <4 x i32> %6481, i64 2
  %6493 = sext i32 %6492 to i64
  %6494 = getelementptr inbounds float, ptr %f6.host, i64 %6493
  %6495 = load float, ptr %6494, align 4, !tbaa !50
  %6496 = insertelement <4 x float> %6491, float %6495, i64 2
  %6497 = extractelement <4 x i32> %6481, i64 3
  %6498 = sext i32 %6497 to i64
  %6499 = getelementptr inbounds float, ptr %f6.host, i64 %6498
  %6500 = load float, ptr %6499, align 4, !tbaa !50
  %6501 = insertelement <4 x float> %6496, float %6500, i64 3
  %6502 = fmul <4 x float> %6501, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6503 = fadd <4 x float> %6477, %6502
  %6504 = fmul <4 x float> %6503, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6505 = insertelement <4 x i32> undef, i32 %t2628, i64 0
  %6506 = shufflevector <4 x i32> %6505, <4 x i32> undef, <4 x i32> zeroinitializer
  %6507 = add nsw <4 x i32> %6506, <i32 0, i32 1, i32 2, i32 3>
  %6508 = add nsw <4 x i32> %t2631, %6507
  %6509 = extractelement <4 x i32> %6508, i64 0
  %6510 = sext i32 %6509 to i64
  %6511 = getelementptr inbounds float, ptr %f6.host, i64 %6510
  %6512 = load float, ptr %6511, align 4, !tbaa !50
  %6513 = insertelement <4 x float> undef, float %6512, i64 0
  %6514 = extractelement <4 x i32> %6508, i64 1
  %6515 = sext i32 %6514 to i64
  %6516 = getelementptr inbounds float, ptr %f6.host, i64 %6515
  %6517 = load float, ptr %6516, align 4, !tbaa !50
  %6518 = insertelement <4 x float> %6513, float %6517, i64 1
  %6519 = extractelement <4 x i32> %6508, i64 2
  %6520 = sext i32 %6519 to i64
  %6521 = getelementptr inbounds float, ptr %f6.host, i64 %6520
  %6522 = load float, ptr %6521, align 4, !tbaa !50
  %6523 = insertelement <4 x float> %6518, float %6522, i64 2
  %6524 = extractelement <4 x i32> %6508, i64 3
  %6525 = sext i32 %6524 to i64
  %6526 = getelementptr inbounds float, ptr %f6.host, i64 %6525
  %6527 = load float, ptr %6526, align 4, !tbaa !50
  %6528 = insertelement <4 x float> %6523, float %6527, i64 3
  %6529 = fmul <4 x float> %6528, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6530 = insertelement <4 x i32> undef, i32 %t2625, i64 0
  %6531 = shufflevector <4 x i32> %6530, <4 x i32> undef, <4 x i32> zeroinitializer
  %6532 = add <4 x i32> %6531, <i32 -1, i32 0, i32 1, i32 2>
  %6533 = add <4 x i32> %6532, %t2631
  %6534 = extractelement <4 x i32> %6533, i64 0
  %6535 = sext i32 %6534 to i64
  %6536 = getelementptr inbounds float, ptr %f6.host, i64 %6535
  %6537 = load float, ptr %6536, align 4, !tbaa !50
  %6538 = insertelement <4 x float> undef, float %6537, i64 0
  %6539 = extractelement <4 x i32> %6533, i64 1
  %6540 = sext i32 %6539 to i64
  %6541 = getelementptr inbounds float, ptr %f6.host, i64 %6540
  %6542 = load float, ptr %6541, align 4, !tbaa !50
  %6543 = insertelement <4 x float> %6538, float %6542, i64 1
  %6544 = extractelement <4 x i32> %6533, i64 2
  %6545 = sext i32 %6544 to i64
  %6546 = getelementptr inbounds float, ptr %f6.host, i64 %6545
  %6547 = load float, ptr %6546, align 4, !tbaa !50
  %6548 = insertelement <4 x float> %6543, float %6547, i64 2
  %6549 = extractelement <4 x i32> %6533, i64 3
  %6550 = sext i32 %6549 to i64
  %6551 = getelementptr inbounds float, ptr %f6.host, i64 %6550
  %6552 = load float, ptr %6551, align 4, !tbaa !50
  %6553 = insertelement <4 x float> %6548, float %6552, i64 3
  %6554 = fmul <4 x float> %6553, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6555 = fadd <4 x float> %6529, %6554
  %6556 = fmul <4 x float> %6555, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6557 = fadd <4 x float> %6504, %6556
  %6558 = mul nsw <4 x i32> %6176, %1511
  %6559 = add i32 %6163, 1
  %6560 = insertelement <4 x i32> undef, i32 %6559, i64 0
  %6561 = shufflevector <4 x i32> %6560, <4 x i32> undef, <4 x i32> zeroinitializer
  %6562 = add nsw <4 x i32> %6561, <i32 0, i32 2, i32 4, i32 6>
  %6563 = add nsw <4 x i32> %6558, %6562
  %6564 = extractelement <4 x i32> %6563, i64 0
  %6565 = sext i32 %6564 to i64
  %6566 = getelementptr inbounds float, ptr %f5.host, i64 %6565
  %6567 = load float, ptr %6566, align 4, !tbaa !46
  %6568 = insertelement <4 x float> undef, float %6567, i64 0
  %6569 = extractelement <4 x i32> %6563, i64 1
  %6570 = sext i32 %6569 to i64
  %6571 = getelementptr inbounds float, ptr %f5.host, i64 %6570
  %6572 = load float, ptr %6571, align 4, !tbaa !46
  %6573 = insertelement <4 x float> %6568, float %6572, i64 1
  %6574 = extractelement <4 x i32> %6563, i64 2
  %6575 = sext i32 %6574 to i64
  %6576 = getelementptr inbounds float, ptr %f5.host, i64 %6575
  %6577 = load float, ptr %6576, align 4, !tbaa !46
  %6578 = insertelement <4 x float> %6573, float %6577, i64 2
  %6579 = extractelement <4 x i32> %6563, i64 3
  %6580 = sext i32 %6579 to i64
  %6581 = getelementptr inbounds float, ptr %f5.host, i64 %6580
  %6582 = load float, ptr %6581, align 4, !tbaa !46
  %6583 = insertelement <4 x float> %6578, float %6582, i64 3
  %6584 = fsub <4 x float> %6583, %6557
  %6585 = fmul <4 x float> %t2620, %6584
  %6586 = add nsw <4 x i32> %t2626, %6455
  %6587 = extractelement <4 x i32> %6586, i64 0
  %6588 = sext i32 %6587 to i64
  %6589 = getelementptr inbounds float, ptr %f6.host, i64 %6588
  %6590 = load float, ptr %6589, align 4, !tbaa !50
  %6591 = insertelement <4 x float> undef, float %6590, i64 0
  %6592 = extractelement <4 x i32> %6586, i64 1
  %6593 = sext i32 %6592 to i64
  %6594 = getelementptr inbounds float, ptr %f6.host, i64 %6593
  %6595 = load float, ptr %6594, align 4, !tbaa !50
  %6596 = insertelement <4 x float> %6591, float %6595, i64 1
  %6597 = extractelement <4 x i32> %6586, i64 2
  %6598 = sext i32 %6597 to i64
  %6599 = getelementptr inbounds float, ptr %f6.host, i64 %6598
  %6600 = load float, ptr %6599, align 4, !tbaa !50
  %6601 = insertelement <4 x float> %6596, float %6600, i64 2
  %6602 = extractelement <4 x i32> %6586, i64 3
  %6603 = sext i32 %6602 to i64
  %6604 = getelementptr inbounds float, ptr %f6.host, i64 %6603
  %6605 = load float, ptr %6604, align 4, !tbaa !50
  %6606 = insertelement <4 x float> %6601, float %6605, i64 3
  %6607 = fmul <4 x float> %6606, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6608 = add <4 x i32> %t2626, %6479
  %6609 = add <4 x i32> %6608, <i32 -1, i32 0, i32 1, i32 2>
  %6610 = extractelement <4 x i32> %6609, i64 0
  %6611 = sext i32 %6610 to i64
  %6612 = getelementptr inbounds float, ptr %f6.host, i64 %6611
  %6613 = load float, ptr %6612, align 4, !tbaa !50
  %6614 = insertelement <4 x float> undef, float %6613, i64 0
  %6615 = extractelement <4 x i32> %6609, i64 1
  %6616 = sext i32 %6615 to i64
  %6617 = getelementptr inbounds float, ptr %f6.host, i64 %6616
  %6618 = load float, ptr %6617, align 4, !tbaa !50
  %6619 = insertelement <4 x float> %6614, float %6618, i64 1
  %6620 = extractelement <4 x i32> %6609, i64 2
  %6621 = sext i32 %6620 to i64
  %6622 = getelementptr inbounds float, ptr %f6.host, i64 %6621
  %6623 = load float, ptr %6622, align 4, !tbaa !50
  %6624 = insertelement <4 x float> %6619, float %6623, i64 2
  %6625 = extractelement <4 x i32> %6609, i64 3
  %6626 = sext i32 %6625 to i64
  %6627 = getelementptr inbounds float, ptr %f6.host, i64 %6626
  %6628 = load float, ptr %6627, align 4, !tbaa !50
  %6629 = insertelement <4 x float> %6624, float %6628, i64 3
  %6630 = fmul <4 x float> %6629, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6631 = fadd <4 x float> %6607, %6630
  %6632 = fmul <4 x float> %6631, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6633 = add nsw <4 x i32> %t2626, %6507
  %6634 = extractelement <4 x i32> %6633, i64 0
  %6635 = sext i32 %6634 to i64
  %6636 = getelementptr inbounds float, ptr %f6.host, i64 %6635
  %6637 = load float, ptr %6636, align 4, !tbaa !50
  %6638 = insertelement <4 x float> undef, float %6637, i64 0
  %6639 = extractelement <4 x i32> %6633, i64 1
  %6640 = sext i32 %6639 to i64
  %6641 = getelementptr inbounds float, ptr %f6.host, i64 %6640
  %6642 = load float, ptr %6641, align 4, !tbaa !50
  %6643 = insertelement <4 x float> %6638, float %6642, i64 1
  %6644 = extractelement <4 x i32> %6633, i64 2
  %6645 = sext i32 %6644 to i64
  %6646 = getelementptr inbounds float, ptr %f6.host, i64 %6645
  %6647 = load float, ptr %6646, align 4, !tbaa !50
  %6648 = insertelement <4 x float> %6643, float %6647, i64 2
  %6649 = extractelement <4 x i32> %6633, i64 3
  %6650 = sext i32 %6649 to i64
  %6651 = getelementptr inbounds float, ptr %f6.host, i64 %6650
  %6652 = load float, ptr %6651, align 4, !tbaa !50
  %6653 = insertelement <4 x float> %6648, float %6652, i64 3
  %6654 = fmul <4 x float> %6653, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6655 = add <4 x i32> %t2626, %6531
  %6656 = add <4 x i32> %6655, <i32 -1, i32 0, i32 1, i32 2>
  %6657 = extractelement <4 x i32> %6656, i64 0
  %6658 = sext i32 %6657 to i64
  %6659 = getelementptr inbounds float, ptr %f6.host, i64 %6658
  %6660 = load float, ptr %6659, align 4, !tbaa !50
  %6661 = insertelement <4 x float> undef, float %6660, i64 0
  %6662 = extractelement <4 x i32> %6656, i64 1
  %6663 = sext i32 %6662 to i64
  %6664 = getelementptr inbounds float, ptr %f6.host, i64 %6663
  %6665 = load float, ptr %6664, align 4, !tbaa !50
  %6666 = insertelement <4 x float> %6661, float %6665, i64 1
  %6667 = extractelement <4 x i32> %6656, i64 2
  %6668 = sext i32 %6667 to i64
  %6669 = getelementptr inbounds float, ptr %f6.host, i64 %6668
  %6670 = load float, ptr %6669, align 4, !tbaa !50
  %6671 = insertelement <4 x float> %6666, float %6670, i64 2
  %6672 = extractelement <4 x i32> %6656, i64 3
  %6673 = sext i32 %6672 to i64
  %6674 = getelementptr inbounds float, ptr %f6.host, i64 %6673
  %6675 = load float, ptr %6674, align 4, !tbaa !50
  %6676 = insertelement <4 x float> %6671, float %6675, i64 3
  %6677 = fmul <4 x float> %6676, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6678 = fadd <4 x float> %6654, %6677
  %6679 = fmul <4 x float> %6678, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6680 = fadd <4 x float> %6632, %6679
  %6681 = mul nsw <4 x i32> %t2623, %1511
  %6682 = add nsw <4 x i32> %6681, %6562
  %6683 = extractelement <4 x i32> %6682, i64 0
  %6684 = sext i32 %6683 to i64
  %6685 = getelementptr inbounds float, ptr %f5.host, i64 %6684
  %6686 = load float, ptr %6685, align 4, !tbaa !46
  %6687 = insertelement <4 x float> undef, float %6686, i64 0
  %6688 = extractelement <4 x i32> %6682, i64 1
  %6689 = sext i32 %6688 to i64
  %6690 = getelementptr inbounds float, ptr %f5.host, i64 %6689
  %6691 = load float, ptr %6690, align 4, !tbaa !46
  %6692 = insertelement <4 x float> %6687, float %6691, i64 1
  %6693 = extractelement <4 x i32> %6682, i64 2
  %6694 = sext i32 %6693 to i64
  %6695 = getelementptr inbounds float, ptr %f5.host, i64 %6694
  %6696 = load float, ptr %6695, align 4, !tbaa !46
  %6697 = insertelement <4 x float> %6692, float %6696, i64 2
  %6698 = extractelement <4 x i32> %6682, i64 3
  %6699 = sext i32 %6698 to i64
  %6700 = getelementptr inbounds float, ptr %f5.host, i64 %6699
  %6701 = load float, ptr %6700, align 4, !tbaa !46
  %6702 = insertelement <4 x float> %6697, float %6701, i64 3
  %6703 = fsub <4 x float> %6702, %6680
  %6704 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2620
  %6705 = fmul <4 x float> %6704, %6703
  %6706 = fadd <4 x float> %6585, %6705
  %narrow126 = sub nsw i32 %6170, %f128.v3.min_realized
  %6707 = sext i32 %narrow126 to i64
  %6708 = add nsw i64 %6707, %6143
  %6709 = getelementptr inbounds float, ptr %154, i64 %6708
  %6710 = load <4 x float>, ptr %6709, align 4, !tbaa !66
  %6711 = fmul <4 x float> %6710, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6712 = sext i32 %t2617 to i64
  %6713 = sub nsw i64 %6712, %1512
  %6714 = add nsw i64 %6144, %6713
  %6715 = getelementptr inbounds float, ptr %154, i64 %6714
  %6716 = load <4 x float>, ptr %6715, align 4, !tbaa !66
  %6717 = fmul <4 x float> %6716, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6718 = fadd <4 x float> %6711, %6717
  %6719 = fmul <4 x float> %6718, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6720 = add nsw i64 %6707, %6145
  %6721 = getelementptr inbounds float, ptr %154, i64 %6720
  %6722 = load <4 x float>, ptr %6721, align 4, !tbaa !66
  %6723 = fmul <4 x float> %6722, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6724 = add nsw i64 %6146, %6713
  %6725 = getelementptr inbounds float, ptr %154, i64 %6724
  %6726 = load <4 x float>, ptr %6725, align 4, !tbaa !66
  %6727 = fmul <4 x float> %6726, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6728 = fadd <4 x float> %6723, %6727
  %6729 = fmul <4 x float> %6728, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6730 = fadd <4 x float> %6719, %6729
  %6731 = fadd <4 x float> %6706, %6730
  %6732 = shufflevector <4 x float> %6452, <4 x float> %6731, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %6733 = sext i32 %6151 to i64
  %6734 = add nsw i64 %6150, %6733
  %6735 = getelementptr inbounds float, ptr %193, i64 %6734
  store <8 x float> %6732, ptr %6735, align 4, !tbaa !68
  %lsr.iv.next296 = add nsw i32 %lsr.iv295, -1
  %lsr.iv.next298 = add nuw i32 %lsr.iv297, 8
  %.not127 = icmp eq i32 %lsr.iv.next296, 0
  br i1 %.not127, label %"end for f127.s0.v3.v351", label %"for f127.s0.v3.v350"

"end for f127.s0.v3.v351":                        ; preds = %"for f127.s0.v3.v350", %true_bb47
  br i1 %.not119, label %"produce f12658", label %"for f127.s0.v3.v354.preheader", !prof !4

"for f127.s0.v3.v354.preheader":                  ; preds = %"end for f127.s0.v3.v351"
  %6736 = trunc i64 %3710 to i32
  %6737 = add i32 %6736, 9
  %6738 = ashr i32 %6737, 2
  %6739 = shl nsw i32 %6738, 1
  %6740 = and i32 %6739, 2
  %6741 = ashr i32 %6737, 3
  %t2632 = add nsw i32 %6740, %6741
  %6742 = sub nsw i32 %6738, %f73.v4.min_realized
  %6743 = mul nsw i32 %6742, %1506
  %t2635 = add nsw i32 %3533, %6743
  %6744 = sext i32 %t2635 to i64
  %6745 = getelementptr inbounds float, ptr %f73.host, i64 %6744
  %6746 = load <4 x float>, ptr %6745, align 4, !tbaa !52
  %6747 = add nsw i64 %6744, 4
  %6748 = getelementptr inbounds float, ptr %f73.host, i64 %6747
  %6749 = load <4 x float>, ptr %6748, align 4, !tbaa !52
  %6750 = shufflevector <4 x float> %6746, <4 x float> %6749, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2636 = fmul <4 x float> %232, %6750
  %a938 = fptosi <4 x float> %t2636 to <4 x i32>
  %a941 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a938)
  %6751 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a941, <4 x i32> zeroinitializer)
  %6752 = sitofp <4 x i32> %6751 to <4 x float>
  %t2638 = fsub <4 x float> %t2636, %6752
  %6753 = add nsw i32 %t2632, %1507
  %t2640 = mul nsw i32 %6753, %147
  %6754 = sub nsw i32 %6741, %876
  %t2642 = mul nsw i32 %6754, %147
  %6755 = sub nsw i32 %6738, %f5.v4.min_realized
  %6756 = mul nsw i32 %6755, %f5.stride.1
  %t2643 = add nsw i32 %6756, %3534
  %t2645 = sub nsw <4 x i32> %6751, %241
  %6757 = add i32 %t2632, %1508
  %6758 = mul nsw i32 %6757, %f6.stride.1
  %t2648 = add nsw i32 %6758, %3535
  %t2649 = mul nsw <4 x i32> %t2645, %884
  %t2651 = add nsw i32 %6758, %3536
  %6759 = sub nsw i32 %6741, %f6.v4.min_realized
  %6760 = mul nsw i32 %6759, %f6.stride.1
  %t2653 = add nsw i32 %6760, %3535
  %t2654 = add nsw i32 %6760, %3536
  %6761 = add nsw <4 x i32> %t2645, <i32 1, i32 1, i32 1, i32 1>
  %t2655 = mul nsw <4 x i32> %6761, %884
  %6762 = shufflevector <4 x float> %6746, <4 x float> %6749, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2657 = fmul <4 x float> %232, %6762
  %a942 = fptosi <4 x float> %t2657 to <4 x i32>
  %a945 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a942)
  %6763 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a945, <4 x i32> zeroinitializer)
  %6764 = sitofp <4 x i32> %6763 to <4 x float>
  %t2659 = fsub <4 x float> %t2657, %6764
  %t2662 = sub nsw <4 x i32> %6763, %241
  %t2664 = add nsw i32 %6758, %3541
  %t2665 = mul nsw <4 x i32> %t2662, %884
  %t2667 = add nsw i32 %6758, %3542
  %t2668 = add nsw i32 %6760, %3541
  %t2669 = add nsw i32 %6760, %3542
  %6765 = add nsw <4 x i32> %t2662, <i32 1, i32 1, i32 1, i32 1>
  %t2670 = mul nsw <4 x i32> %6765, %884
  %6766 = insertelement <4 x i32> undef, i32 %t2654, i64 0
  %6767 = shufflevector <4 x i32> %6766, <4 x i32> undef, <4 x i32> zeroinitializer
  %6768 = add nsw <4 x i32> %6767, <i32 0, i32 1, i32 2, i32 3>
  %6769 = add nsw <4 x i32> %t2655, %6768
  %6770 = extractelement <4 x i32> %6769, i64 0
  %6771 = sext i32 %6770 to i64
  %6772 = getelementptr inbounds float, ptr %f6.host, i64 %6771
  %6773 = load float, ptr %6772, align 4, !tbaa !50
  %6774 = insertelement <4 x float> undef, float %6773, i64 0
  %6775 = extractelement <4 x i32> %6769, i64 1
  %6776 = sext i32 %6775 to i64
  %6777 = getelementptr inbounds float, ptr %f6.host, i64 %6776
  %6778 = load float, ptr %6777, align 4, !tbaa !50
  %6779 = insertelement <4 x float> %6774, float %6778, i64 1
  %6780 = extractelement <4 x i32> %6769, i64 2
  %6781 = sext i32 %6780 to i64
  %6782 = getelementptr inbounds float, ptr %f6.host, i64 %6781
  %6783 = load float, ptr %6782, align 4, !tbaa !50
  %6784 = insertelement <4 x float> %6779, float %6783, i64 2
  %6785 = extractelement <4 x i32> %6769, i64 3
  %6786 = sext i32 %6785 to i64
  %6787 = getelementptr inbounds float, ptr %f6.host, i64 %6786
  %6788 = load float, ptr %6787, align 4, !tbaa !50
  %6789 = insertelement <4 x float> %6784, float %6788, i64 3
  %6790 = fmul <4 x float> %6789, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6791 = insertelement <4 x i32> undef, i32 %t2653, i64 0
  %6792 = shufflevector <4 x i32> %6791, <4 x i32> undef, <4 x i32> zeroinitializer
  %6793 = add <4 x i32> %6792, <i32 -1, i32 0, i32 1, i32 2>
  %6794 = add <4 x i32> %6793, %t2655
  %6795 = extractelement <4 x i32> %6794, i64 0
  %6796 = sext i32 %6795 to i64
  %6797 = getelementptr inbounds float, ptr %f6.host, i64 %6796
  %6798 = load float, ptr %6797, align 4, !tbaa !50
  %6799 = insertelement <4 x float> undef, float %6798, i64 0
  %6800 = extractelement <4 x i32> %6794, i64 1
  %6801 = sext i32 %6800 to i64
  %6802 = getelementptr inbounds float, ptr %f6.host, i64 %6801
  %6803 = load float, ptr %6802, align 4, !tbaa !50
  %6804 = insertelement <4 x float> %6799, float %6803, i64 1
  %6805 = extractelement <4 x i32> %6794, i64 2
  %6806 = sext i32 %6805 to i64
  %6807 = getelementptr inbounds float, ptr %f6.host, i64 %6806
  %6808 = load float, ptr %6807, align 4, !tbaa !50
  %6809 = insertelement <4 x float> %6804, float %6808, i64 2
  %6810 = extractelement <4 x i32> %6794, i64 3
  %6811 = sext i32 %6810 to i64
  %6812 = getelementptr inbounds float, ptr %f6.host, i64 %6811
  %6813 = load float, ptr %6812, align 4, !tbaa !50
  %6814 = insertelement <4 x float> %6809, float %6813, i64 3
  %6815 = fmul <4 x float> %6814, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6816 = fadd <4 x float> %6790, %6815
  %6817 = fmul <4 x float> %6816, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6818 = insertelement <4 x i32> undef, i32 %t2651, i64 0
  %6819 = shufflevector <4 x i32> %6818, <4 x i32> undef, <4 x i32> zeroinitializer
  %6820 = add nsw <4 x i32> %6819, <i32 0, i32 1, i32 2, i32 3>
  %6821 = add nsw <4 x i32> %t2655, %6820
  %6822 = extractelement <4 x i32> %6821, i64 0
  %6823 = sext i32 %6822 to i64
  %6824 = getelementptr inbounds float, ptr %f6.host, i64 %6823
  %6825 = load float, ptr %6824, align 4, !tbaa !50
  %6826 = insertelement <4 x float> undef, float %6825, i64 0
  %6827 = extractelement <4 x i32> %6821, i64 1
  %6828 = sext i32 %6827 to i64
  %6829 = getelementptr inbounds float, ptr %f6.host, i64 %6828
  %6830 = load float, ptr %6829, align 4, !tbaa !50
  %6831 = insertelement <4 x float> %6826, float %6830, i64 1
  %6832 = extractelement <4 x i32> %6821, i64 2
  %6833 = sext i32 %6832 to i64
  %6834 = getelementptr inbounds float, ptr %f6.host, i64 %6833
  %6835 = load float, ptr %6834, align 4, !tbaa !50
  %6836 = insertelement <4 x float> %6831, float %6835, i64 2
  %6837 = extractelement <4 x i32> %6821, i64 3
  %6838 = sext i32 %6837 to i64
  %6839 = getelementptr inbounds float, ptr %f6.host, i64 %6838
  %6840 = load float, ptr %6839, align 4, !tbaa !50
  %6841 = insertelement <4 x float> %6836, float %6840, i64 3
  %6842 = fmul <4 x float> %6841, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6843 = insertelement <4 x i32> undef, i32 %t2648, i64 0
  %6844 = shufflevector <4 x i32> %6843, <4 x i32> undef, <4 x i32> zeroinitializer
  %6845 = add <4 x i32> %6844, <i32 -1, i32 0, i32 1, i32 2>
  %6846 = add <4 x i32> %6845, %t2655
  %6847 = extractelement <4 x i32> %6846, i64 0
  %6848 = sext i32 %6847 to i64
  %6849 = getelementptr inbounds float, ptr %f6.host, i64 %6848
  %6850 = load float, ptr %6849, align 4, !tbaa !50
  %6851 = insertelement <4 x float> undef, float %6850, i64 0
  %6852 = extractelement <4 x i32> %6846, i64 1
  %6853 = sext i32 %6852 to i64
  %6854 = getelementptr inbounds float, ptr %f6.host, i64 %6853
  %6855 = load float, ptr %6854, align 4, !tbaa !50
  %6856 = insertelement <4 x float> %6851, float %6855, i64 1
  %6857 = extractelement <4 x i32> %6846, i64 2
  %6858 = sext i32 %6857 to i64
  %6859 = getelementptr inbounds float, ptr %f6.host, i64 %6858
  %6860 = load float, ptr %6859, align 4, !tbaa !50
  %6861 = insertelement <4 x float> %6856, float %6860, i64 2
  %6862 = extractelement <4 x i32> %6846, i64 3
  %6863 = sext i32 %6862 to i64
  %6864 = getelementptr inbounds float, ptr %f6.host, i64 %6863
  %6865 = load float, ptr %6864, align 4, !tbaa !50
  %6866 = insertelement <4 x float> %6861, float %6865, i64 3
  %6867 = fmul <4 x float> %6866, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6868 = fadd <4 x float> %6842, %6867
  %6869 = fmul <4 x float> %6868, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6870 = fadd <4 x float> %6817, %6869
  %6871 = mul nsw <4 x i32> %6761, %1511
  %6872 = insertelement <4 x i32> undef, i32 %t2643, i64 0
  %6873 = shufflevector <4 x i32> %6872, <4 x i32> undef, <4 x i32> zeroinitializer
  %6874 = add nsw <4 x i32> %6873, <i32 0, i32 2, i32 4, i32 6>
  %6875 = add nsw <4 x i32> %6871, %6874
  %6876 = extractelement <4 x i32> %6875, i64 0
  %6877 = sext i32 %6876 to i64
  %6878 = getelementptr inbounds float, ptr %f5.host, i64 %6877
  %6879 = load float, ptr %6878, align 4, !tbaa !46
  %6880 = insertelement <4 x float> undef, float %6879, i64 0
  %6881 = extractelement <4 x i32> %6875, i64 1
  %6882 = sext i32 %6881 to i64
  %6883 = getelementptr inbounds float, ptr %f5.host, i64 %6882
  %6884 = load float, ptr %6883, align 4, !tbaa !46
  %6885 = insertelement <4 x float> %6880, float %6884, i64 1
  %6886 = extractelement <4 x i32> %6875, i64 2
  %6887 = sext i32 %6886 to i64
  %6888 = getelementptr inbounds float, ptr %f5.host, i64 %6887
  %6889 = load float, ptr %6888, align 4, !tbaa !46
  %6890 = insertelement <4 x float> %6885, float %6889, i64 2
  %6891 = extractelement <4 x i32> %6875, i64 3
  %6892 = sext i32 %6891 to i64
  %6893 = getelementptr inbounds float, ptr %f5.host, i64 %6892
  %6894 = load float, ptr %6893, align 4, !tbaa !46
  %6895 = insertelement <4 x float> %6890, float %6894, i64 3
  %6896 = fsub <4 x float> %6895, %6870
  %6897 = fmul <4 x float> %t2638, %6896
  %6898 = add nsw <4 x i32> %t2649, %6768
  %6899 = extractelement <4 x i32> %6898, i64 0
  %6900 = sext i32 %6899 to i64
  %6901 = getelementptr inbounds float, ptr %f6.host, i64 %6900
  %6902 = load float, ptr %6901, align 4, !tbaa !50
  %6903 = insertelement <4 x float> undef, float %6902, i64 0
  %6904 = extractelement <4 x i32> %6898, i64 1
  %6905 = sext i32 %6904 to i64
  %6906 = getelementptr inbounds float, ptr %f6.host, i64 %6905
  %6907 = load float, ptr %6906, align 4, !tbaa !50
  %6908 = insertelement <4 x float> %6903, float %6907, i64 1
  %6909 = extractelement <4 x i32> %6898, i64 2
  %6910 = sext i32 %6909 to i64
  %6911 = getelementptr inbounds float, ptr %f6.host, i64 %6910
  %6912 = load float, ptr %6911, align 4, !tbaa !50
  %6913 = insertelement <4 x float> %6908, float %6912, i64 2
  %6914 = extractelement <4 x i32> %6898, i64 3
  %6915 = sext i32 %6914 to i64
  %6916 = getelementptr inbounds float, ptr %f6.host, i64 %6915
  %6917 = load float, ptr %6916, align 4, !tbaa !50
  %6918 = insertelement <4 x float> %6913, float %6917, i64 3
  %6919 = fmul <4 x float> %6918, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6920 = add <4 x i32> %6793, %t2649
  %6921 = extractelement <4 x i32> %6920, i64 0
  %6922 = sext i32 %6921 to i64
  %6923 = getelementptr inbounds float, ptr %f6.host, i64 %6922
  %6924 = load float, ptr %6923, align 4, !tbaa !50
  %6925 = insertelement <4 x float> undef, float %6924, i64 0
  %6926 = extractelement <4 x i32> %6920, i64 1
  %6927 = sext i32 %6926 to i64
  %6928 = getelementptr inbounds float, ptr %f6.host, i64 %6927
  %6929 = load float, ptr %6928, align 4, !tbaa !50
  %6930 = insertelement <4 x float> %6925, float %6929, i64 1
  %6931 = extractelement <4 x i32> %6920, i64 2
  %6932 = sext i32 %6931 to i64
  %6933 = getelementptr inbounds float, ptr %f6.host, i64 %6932
  %6934 = load float, ptr %6933, align 4, !tbaa !50
  %6935 = insertelement <4 x float> %6930, float %6934, i64 2
  %6936 = extractelement <4 x i32> %6920, i64 3
  %6937 = sext i32 %6936 to i64
  %6938 = getelementptr inbounds float, ptr %f6.host, i64 %6937
  %6939 = load float, ptr %6938, align 4, !tbaa !50
  %6940 = insertelement <4 x float> %6935, float %6939, i64 3
  %6941 = fmul <4 x float> %6940, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6942 = fadd <4 x float> %6919, %6941
  %6943 = fmul <4 x float> %6942, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6944 = add nsw <4 x i32> %t2649, %6820
  %6945 = extractelement <4 x i32> %6944, i64 0
  %6946 = sext i32 %6945 to i64
  %6947 = getelementptr inbounds float, ptr %f6.host, i64 %6946
  %6948 = load float, ptr %6947, align 4, !tbaa !50
  %6949 = insertelement <4 x float> undef, float %6948, i64 0
  %6950 = extractelement <4 x i32> %6944, i64 1
  %6951 = sext i32 %6950 to i64
  %6952 = getelementptr inbounds float, ptr %f6.host, i64 %6951
  %6953 = load float, ptr %6952, align 4, !tbaa !50
  %6954 = insertelement <4 x float> %6949, float %6953, i64 1
  %6955 = extractelement <4 x i32> %6944, i64 2
  %6956 = sext i32 %6955 to i64
  %6957 = getelementptr inbounds float, ptr %f6.host, i64 %6956
  %6958 = load float, ptr %6957, align 4, !tbaa !50
  %6959 = insertelement <4 x float> %6954, float %6958, i64 2
  %6960 = extractelement <4 x i32> %6944, i64 3
  %6961 = sext i32 %6960 to i64
  %6962 = getelementptr inbounds float, ptr %f6.host, i64 %6961
  %6963 = load float, ptr %6962, align 4, !tbaa !50
  %6964 = insertelement <4 x float> %6959, float %6963, i64 3
  %6965 = fmul <4 x float> %6964, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6966 = add <4 x i32> %6845, %t2649
  %6967 = extractelement <4 x i32> %6966, i64 0
  %6968 = sext i32 %6967 to i64
  %6969 = getelementptr inbounds float, ptr %f6.host, i64 %6968
  %6970 = load float, ptr %6969, align 4, !tbaa !50
  %6971 = insertelement <4 x float> undef, float %6970, i64 0
  %6972 = extractelement <4 x i32> %6966, i64 1
  %6973 = sext i32 %6972 to i64
  %6974 = getelementptr inbounds float, ptr %f6.host, i64 %6973
  %6975 = load float, ptr %6974, align 4, !tbaa !50
  %6976 = insertelement <4 x float> %6971, float %6975, i64 1
  %6977 = extractelement <4 x i32> %6966, i64 2
  %6978 = sext i32 %6977 to i64
  %6979 = getelementptr inbounds float, ptr %f6.host, i64 %6978
  %6980 = load float, ptr %6979, align 4, !tbaa !50
  %6981 = insertelement <4 x float> %6976, float %6980, i64 2
  %6982 = extractelement <4 x i32> %6966, i64 3
  %6983 = sext i32 %6982 to i64
  %6984 = getelementptr inbounds float, ptr %f6.host, i64 %6983
  %6985 = load float, ptr %6984, align 4, !tbaa !50
  %6986 = insertelement <4 x float> %6981, float %6985, i64 3
  %6987 = fmul <4 x float> %6986, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6988 = fadd <4 x float> %6965, %6987
  %6989 = fmul <4 x float> %6988, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6990 = fadd <4 x float> %6943, %6989
  %6991 = mul nsw <4 x i32> %t2645, %1511
  %6992 = add nsw <4 x i32> %6991, %6874
  %6993 = extractelement <4 x i32> %6992, i64 0
  %6994 = sext i32 %6993 to i64
  %6995 = getelementptr inbounds float, ptr %f5.host, i64 %6994
  %6996 = load float, ptr %6995, align 4, !tbaa !46
  %6997 = insertelement <4 x float> undef, float %6996, i64 0
  %6998 = extractelement <4 x i32> %6992, i64 1
  %6999 = sext i32 %6998 to i64
  %7000 = getelementptr inbounds float, ptr %f5.host, i64 %6999
  %7001 = load float, ptr %7000, align 4, !tbaa !46
  %7002 = insertelement <4 x float> %6997, float %7001, i64 1
  %7003 = extractelement <4 x i32> %6992, i64 2
  %7004 = sext i32 %7003 to i64
  %7005 = getelementptr inbounds float, ptr %f5.host, i64 %7004
  %7006 = load float, ptr %7005, align 4, !tbaa !46
  %7007 = insertelement <4 x float> %7002, float %7006, i64 2
  %7008 = extractelement <4 x i32> %6992, i64 3
  %7009 = sext i32 %7008 to i64
  %7010 = getelementptr inbounds float, ptr %f5.host, i64 %7009
  %7011 = load float, ptr %7010, align 4, !tbaa !46
  %7012 = insertelement <4 x float> %7007, float %7011, i64 3
  %7013 = fsub <4 x float> %7012, %6990
  %7014 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2638
  %7015 = fmul <4 x float> %7014, %7013
  %7016 = fadd <4 x float> %6897, %7015
  %7017 = sext i32 %t2642 to i64
  %7018 = add nsw i64 %7017, %3543
  %7019 = getelementptr inbounds float, ptr %154, i64 %7018
  %7020 = load <4 x float>, ptr %7019, align 4, !tbaa !66
  %7021 = fmul <4 x float> %7020, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7022 = add nsw i64 %3545, %7017
  %7023 = getelementptr inbounds float, ptr %154, i64 %7022
  %7024 = load <4 x float>, ptr %7023, align 4, !tbaa !66
  %7025 = fmul <4 x float> %7024, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7026 = fadd <4 x float> %7021, %7025
  %7027 = fmul <4 x float> %7026, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7028 = sext i32 %t2640 to i64
  %7029 = add nsw i64 %7028, %3543
  %7030 = getelementptr inbounds float, ptr %154, i64 %7029
  %7031 = load <4 x float>, ptr %7030, align 4, !tbaa !66
  %7032 = fmul <4 x float> %7031, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7033 = add nsw i64 %3545, %7028
  %7034 = getelementptr inbounds float, ptr %154, i64 %7033
  %7035 = load <4 x float>, ptr %7034, align 4, !tbaa !66
  %7036 = fmul <4 x float> %7035, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7037 = fadd <4 x float> %7032, %7036
  %7038 = fmul <4 x float> %7037, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7039 = fadd <4 x float> %7027, %7038
  %7040 = fadd <4 x float> %7016, %7039
  %7041 = insertelement <4 x i32> undef, i32 %t2669, i64 0
  %7042 = shufflevector <4 x i32> %7041, <4 x i32> undef, <4 x i32> zeroinitializer
  %7043 = add nsw <4 x i32> %7042, <i32 0, i32 1, i32 2, i32 3>
  %7044 = add nsw <4 x i32> %t2670, %7043
  %7045 = extractelement <4 x i32> %7044, i64 0
  %7046 = sext i32 %7045 to i64
  %7047 = getelementptr inbounds float, ptr %f6.host, i64 %7046
  %7048 = load float, ptr %7047, align 4, !tbaa !50
  %7049 = insertelement <4 x float> undef, float %7048, i64 0
  %7050 = extractelement <4 x i32> %7044, i64 1
  %7051 = sext i32 %7050 to i64
  %7052 = getelementptr inbounds float, ptr %f6.host, i64 %7051
  %7053 = load float, ptr %7052, align 4, !tbaa !50
  %7054 = insertelement <4 x float> %7049, float %7053, i64 1
  %7055 = extractelement <4 x i32> %7044, i64 2
  %7056 = sext i32 %7055 to i64
  %7057 = getelementptr inbounds float, ptr %f6.host, i64 %7056
  %7058 = load float, ptr %7057, align 4, !tbaa !50
  %7059 = insertelement <4 x float> %7054, float %7058, i64 2
  %7060 = extractelement <4 x i32> %7044, i64 3
  %7061 = sext i32 %7060 to i64
  %7062 = getelementptr inbounds float, ptr %f6.host, i64 %7061
  %7063 = load float, ptr %7062, align 4, !tbaa !50
  %7064 = insertelement <4 x float> %7059, float %7063, i64 3
  %7065 = fmul <4 x float> %7064, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7066 = insertelement <4 x i32> undef, i32 %t2668, i64 0
  %7067 = shufflevector <4 x i32> %7066, <4 x i32> undef, <4 x i32> zeroinitializer
  %7068 = add <4 x i32> %7067, <i32 -1, i32 0, i32 1, i32 2>
  %7069 = add <4 x i32> %7068, %t2670
  %7070 = extractelement <4 x i32> %7069, i64 0
  %7071 = sext i32 %7070 to i64
  %7072 = getelementptr inbounds float, ptr %f6.host, i64 %7071
  %7073 = load float, ptr %7072, align 4, !tbaa !50
  %7074 = insertelement <4 x float> undef, float %7073, i64 0
  %7075 = extractelement <4 x i32> %7069, i64 1
  %7076 = sext i32 %7075 to i64
  %7077 = getelementptr inbounds float, ptr %f6.host, i64 %7076
  %7078 = load float, ptr %7077, align 4, !tbaa !50
  %7079 = insertelement <4 x float> %7074, float %7078, i64 1
  %7080 = extractelement <4 x i32> %7069, i64 2
  %7081 = sext i32 %7080 to i64
  %7082 = getelementptr inbounds float, ptr %f6.host, i64 %7081
  %7083 = load float, ptr %7082, align 4, !tbaa !50
  %7084 = insertelement <4 x float> %7079, float %7083, i64 2
  %7085 = extractelement <4 x i32> %7069, i64 3
  %7086 = sext i32 %7085 to i64
  %7087 = getelementptr inbounds float, ptr %f6.host, i64 %7086
  %7088 = load float, ptr %7087, align 4, !tbaa !50
  %7089 = insertelement <4 x float> %7084, float %7088, i64 3
  %7090 = fmul <4 x float> %7089, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7091 = fadd <4 x float> %7065, %7090
  %7092 = fmul <4 x float> %7091, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7093 = insertelement <4 x i32> undef, i32 %t2667, i64 0
  %7094 = shufflevector <4 x i32> %7093, <4 x i32> undef, <4 x i32> zeroinitializer
  %7095 = add nsw <4 x i32> %7094, <i32 0, i32 1, i32 2, i32 3>
  %7096 = add nsw <4 x i32> %t2670, %7095
  %7097 = extractelement <4 x i32> %7096, i64 0
  %7098 = sext i32 %7097 to i64
  %7099 = getelementptr inbounds float, ptr %f6.host, i64 %7098
  %7100 = load float, ptr %7099, align 4, !tbaa !50
  %7101 = insertelement <4 x float> undef, float %7100, i64 0
  %7102 = extractelement <4 x i32> %7096, i64 1
  %7103 = sext i32 %7102 to i64
  %7104 = getelementptr inbounds float, ptr %f6.host, i64 %7103
  %7105 = load float, ptr %7104, align 4, !tbaa !50
  %7106 = insertelement <4 x float> %7101, float %7105, i64 1
  %7107 = extractelement <4 x i32> %7096, i64 2
  %7108 = sext i32 %7107 to i64
  %7109 = getelementptr inbounds float, ptr %f6.host, i64 %7108
  %7110 = load float, ptr %7109, align 4, !tbaa !50
  %7111 = insertelement <4 x float> %7106, float %7110, i64 2
  %7112 = extractelement <4 x i32> %7096, i64 3
  %7113 = sext i32 %7112 to i64
  %7114 = getelementptr inbounds float, ptr %f6.host, i64 %7113
  %7115 = load float, ptr %7114, align 4, !tbaa !50
  %7116 = insertelement <4 x float> %7111, float %7115, i64 3
  %7117 = fmul <4 x float> %7116, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7118 = insertelement <4 x i32> undef, i32 %t2664, i64 0
  %7119 = shufflevector <4 x i32> %7118, <4 x i32> undef, <4 x i32> zeroinitializer
  %7120 = add <4 x i32> %7119, <i32 -1, i32 0, i32 1, i32 2>
  %7121 = add <4 x i32> %7120, %t2670
  %7122 = extractelement <4 x i32> %7121, i64 0
  %7123 = sext i32 %7122 to i64
  %7124 = getelementptr inbounds float, ptr %f6.host, i64 %7123
  %7125 = load float, ptr %7124, align 4, !tbaa !50
  %7126 = insertelement <4 x float> undef, float %7125, i64 0
  %7127 = extractelement <4 x i32> %7121, i64 1
  %7128 = sext i32 %7127 to i64
  %7129 = getelementptr inbounds float, ptr %f6.host, i64 %7128
  %7130 = load float, ptr %7129, align 4, !tbaa !50
  %7131 = insertelement <4 x float> %7126, float %7130, i64 1
  %7132 = extractelement <4 x i32> %7121, i64 2
  %7133 = sext i32 %7132 to i64
  %7134 = getelementptr inbounds float, ptr %f6.host, i64 %7133
  %7135 = load float, ptr %7134, align 4, !tbaa !50
  %7136 = insertelement <4 x float> %7131, float %7135, i64 2
  %7137 = extractelement <4 x i32> %7121, i64 3
  %7138 = sext i32 %7137 to i64
  %7139 = getelementptr inbounds float, ptr %f6.host, i64 %7138
  %7140 = load float, ptr %7139, align 4, !tbaa !50
  %7141 = insertelement <4 x float> %7136, float %7140, i64 3
  %7142 = fmul <4 x float> %7141, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7143 = fadd <4 x float> %7117, %7142
  %7144 = fmul <4 x float> %7143, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7145 = fadd <4 x float> %7092, %7144
  %7146 = mul nsw <4 x i32> %6765, %1511
  %7147 = add nsw i32 %t2643, 1
  %7148 = insertelement <4 x i32> undef, i32 %7147, i64 0
  %7149 = shufflevector <4 x i32> %7148, <4 x i32> undef, <4 x i32> zeroinitializer
  %7150 = add nsw <4 x i32> %7149, <i32 0, i32 2, i32 4, i32 6>
  %7151 = add nsw <4 x i32> %7146, %7150
  %7152 = extractelement <4 x i32> %7151, i64 0
  %7153 = sext i32 %7152 to i64
  %7154 = getelementptr inbounds float, ptr %f5.host, i64 %7153
  %7155 = load float, ptr %7154, align 4, !tbaa !46
  %7156 = insertelement <4 x float> undef, float %7155, i64 0
  %7157 = extractelement <4 x i32> %7151, i64 1
  %7158 = sext i32 %7157 to i64
  %7159 = getelementptr inbounds float, ptr %f5.host, i64 %7158
  %7160 = load float, ptr %7159, align 4, !tbaa !46
  %7161 = insertelement <4 x float> %7156, float %7160, i64 1
  %7162 = extractelement <4 x i32> %7151, i64 2
  %7163 = sext i32 %7162 to i64
  %7164 = getelementptr inbounds float, ptr %f5.host, i64 %7163
  %7165 = load float, ptr %7164, align 4, !tbaa !46
  %7166 = insertelement <4 x float> %7161, float %7165, i64 2
  %7167 = extractelement <4 x i32> %7151, i64 3
  %7168 = sext i32 %7167 to i64
  %7169 = getelementptr inbounds float, ptr %f5.host, i64 %7168
  %7170 = load float, ptr %7169, align 4, !tbaa !46
  %7171 = insertelement <4 x float> %7166, float %7170, i64 3
  %7172 = fsub <4 x float> %7171, %7145
  %7173 = fmul <4 x float> %t2659, %7172
  %7174 = add nsw <4 x i32> %t2665, %7043
  %7175 = extractelement <4 x i32> %7174, i64 0
  %7176 = sext i32 %7175 to i64
  %7177 = getelementptr inbounds float, ptr %f6.host, i64 %7176
  %7178 = load float, ptr %7177, align 4, !tbaa !50
  %7179 = insertelement <4 x float> undef, float %7178, i64 0
  %7180 = extractelement <4 x i32> %7174, i64 1
  %7181 = sext i32 %7180 to i64
  %7182 = getelementptr inbounds float, ptr %f6.host, i64 %7181
  %7183 = load float, ptr %7182, align 4, !tbaa !50
  %7184 = insertelement <4 x float> %7179, float %7183, i64 1
  %7185 = extractelement <4 x i32> %7174, i64 2
  %7186 = sext i32 %7185 to i64
  %7187 = getelementptr inbounds float, ptr %f6.host, i64 %7186
  %7188 = load float, ptr %7187, align 4, !tbaa !50
  %7189 = insertelement <4 x float> %7184, float %7188, i64 2
  %7190 = extractelement <4 x i32> %7174, i64 3
  %7191 = sext i32 %7190 to i64
  %7192 = getelementptr inbounds float, ptr %f6.host, i64 %7191
  %7193 = load float, ptr %7192, align 4, !tbaa !50
  %7194 = insertelement <4 x float> %7189, float %7193, i64 3
  %7195 = fmul <4 x float> %7194, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7196 = add <4 x i32> %7068, %t2665
  %7197 = extractelement <4 x i32> %7196, i64 0
  %7198 = sext i32 %7197 to i64
  %7199 = getelementptr inbounds float, ptr %f6.host, i64 %7198
  %7200 = load float, ptr %7199, align 4, !tbaa !50
  %7201 = insertelement <4 x float> undef, float %7200, i64 0
  %7202 = extractelement <4 x i32> %7196, i64 1
  %7203 = sext i32 %7202 to i64
  %7204 = getelementptr inbounds float, ptr %f6.host, i64 %7203
  %7205 = load float, ptr %7204, align 4, !tbaa !50
  %7206 = insertelement <4 x float> %7201, float %7205, i64 1
  %7207 = extractelement <4 x i32> %7196, i64 2
  %7208 = sext i32 %7207 to i64
  %7209 = getelementptr inbounds float, ptr %f6.host, i64 %7208
  %7210 = load float, ptr %7209, align 4, !tbaa !50
  %7211 = insertelement <4 x float> %7206, float %7210, i64 2
  %7212 = extractelement <4 x i32> %7196, i64 3
  %7213 = sext i32 %7212 to i64
  %7214 = getelementptr inbounds float, ptr %f6.host, i64 %7213
  %7215 = load float, ptr %7214, align 4, !tbaa !50
  %7216 = insertelement <4 x float> %7211, float %7215, i64 3
  %7217 = fmul <4 x float> %7216, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7218 = fadd <4 x float> %7195, %7217
  %7219 = fmul <4 x float> %7218, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7220 = add nsw <4 x i32> %t2665, %7095
  %7221 = extractelement <4 x i32> %7220, i64 0
  %7222 = sext i32 %7221 to i64
  %7223 = getelementptr inbounds float, ptr %f6.host, i64 %7222
  %7224 = load float, ptr %7223, align 4, !tbaa !50
  %7225 = insertelement <4 x float> undef, float %7224, i64 0
  %7226 = extractelement <4 x i32> %7220, i64 1
  %7227 = sext i32 %7226 to i64
  %7228 = getelementptr inbounds float, ptr %f6.host, i64 %7227
  %7229 = load float, ptr %7228, align 4, !tbaa !50
  %7230 = insertelement <4 x float> %7225, float %7229, i64 1
  %7231 = extractelement <4 x i32> %7220, i64 2
  %7232 = sext i32 %7231 to i64
  %7233 = getelementptr inbounds float, ptr %f6.host, i64 %7232
  %7234 = load float, ptr %7233, align 4, !tbaa !50
  %7235 = insertelement <4 x float> %7230, float %7234, i64 2
  %7236 = extractelement <4 x i32> %7220, i64 3
  %7237 = sext i32 %7236 to i64
  %7238 = getelementptr inbounds float, ptr %f6.host, i64 %7237
  %7239 = load float, ptr %7238, align 4, !tbaa !50
  %7240 = insertelement <4 x float> %7235, float %7239, i64 3
  %7241 = fmul <4 x float> %7240, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7242 = add <4 x i32> %7120, %t2665
  %7243 = extractelement <4 x i32> %7242, i64 0
  %7244 = sext i32 %7243 to i64
  %7245 = getelementptr inbounds float, ptr %f6.host, i64 %7244
  %7246 = load float, ptr %7245, align 4, !tbaa !50
  %7247 = insertelement <4 x float> undef, float %7246, i64 0
  %7248 = extractelement <4 x i32> %7242, i64 1
  %7249 = sext i32 %7248 to i64
  %7250 = getelementptr inbounds float, ptr %f6.host, i64 %7249
  %7251 = load float, ptr %7250, align 4, !tbaa !50
  %7252 = insertelement <4 x float> %7247, float %7251, i64 1
  %7253 = extractelement <4 x i32> %7242, i64 2
  %7254 = sext i32 %7253 to i64
  %7255 = getelementptr inbounds float, ptr %f6.host, i64 %7254
  %7256 = load float, ptr %7255, align 4, !tbaa !50
  %7257 = insertelement <4 x float> %7252, float %7256, i64 2
  %7258 = extractelement <4 x i32> %7242, i64 3
  %7259 = sext i32 %7258 to i64
  %7260 = getelementptr inbounds float, ptr %f6.host, i64 %7259
  %7261 = load float, ptr %7260, align 4, !tbaa !50
  %7262 = insertelement <4 x float> %7257, float %7261, i64 3
  %7263 = fmul <4 x float> %7262, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7264 = fadd <4 x float> %7241, %7263
  %7265 = fmul <4 x float> %7264, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7266 = fadd <4 x float> %7219, %7265
  %7267 = mul nsw <4 x i32> %t2662, %1511
  %7268 = add nsw <4 x i32> %7267, %7150
  %7269 = extractelement <4 x i32> %7268, i64 0
  %7270 = sext i32 %7269 to i64
  %7271 = getelementptr inbounds float, ptr %f5.host, i64 %7270
  %7272 = load float, ptr %7271, align 4, !tbaa !46
  %7273 = insertelement <4 x float> undef, float %7272, i64 0
  %7274 = extractelement <4 x i32> %7268, i64 1
  %7275 = sext i32 %7274 to i64
  %7276 = getelementptr inbounds float, ptr %f5.host, i64 %7275
  %7277 = load float, ptr %7276, align 4, !tbaa !46
  %7278 = insertelement <4 x float> %7273, float %7277, i64 1
  %7279 = extractelement <4 x i32> %7268, i64 2
  %7280 = sext i32 %7279 to i64
  %7281 = getelementptr inbounds float, ptr %f5.host, i64 %7280
  %7282 = load float, ptr %7281, align 4, !tbaa !46
  %7283 = insertelement <4 x float> %7278, float %7282, i64 2
  %7284 = extractelement <4 x i32> %7268, i64 3
  %7285 = sext i32 %7284 to i64
  %7286 = getelementptr inbounds float, ptr %f5.host, i64 %7285
  %7287 = load float, ptr %7286, align 4, !tbaa !46
  %7288 = insertelement <4 x float> %7283, float %7287, i64 3
  %7289 = fsub <4 x float> %7288, %7266
  %7290 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2659
  %7291 = fmul <4 x float> %7290, %7289
  %7292 = fadd <4 x float> %7173, %7291
  %7293 = add nsw i64 %7017, %3546
  %7294 = getelementptr inbounds float, ptr %154, i64 %7293
  %7295 = load <4 x float>, ptr %7294, align 4, !tbaa !66
  %7296 = fmul <4 x float> %7295, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7297 = add nsw i64 %3548, %7017
  %7298 = getelementptr inbounds float, ptr %154, i64 %7297
  %7299 = load <4 x float>, ptr %7298, align 4, !tbaa !66
  %7300 = fmul <4 x float> %7299, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7301 = fadd <4 x float> %7296, %7300
  %7302 = fmul <4 x float> %7301, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7303 = add nsw i64 %7028, %3546
  %7304 = getelementptr inbounds float, ptr %154, i64 %7303
  %7305 = load <4 x float>, ptr %7304, align 4, !tbaa !66
  %7306 = fmul <4 x float> %7305, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7307 = add nsw i64 %3548, %7028
  %7308 = getelementptr inbounds float, ptr %154, i64 %7307
  %7309 = load <4 x float>, ptr %7308, align 4, !tbaa !66
  %7310 = fmul <4 x float> %7309, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7311 = fadd <4 x float> %7306, %7310
  %7312 = fmul <4 x float> %7311, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7313 = fadd <4 x float> %7302, %7312
  %7314 = fadd <4 x float> %7292, %7313
  %7315 = shufflevector <4 x float> %7040, <4 x float> %7314, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7316 = sext i32 %6738 to i64
  %7317 = sub nsw i64 %7316, %1515
  %7318 = mul nsw i64 %7317, %1514
  %7319 = add nsw i64 %3550, %7318
  %7320 = getelementptr inbounds float, ptr %193, i64 %7319
  store <8 x float> %7315, ptr %7320, align 4, !tbaa !68
  br label %"produce f12658"

"produce f12658":                                 ; preds = %"for f127.s0.v3.v354.preheader", %"end for f127.s0.v3.v351", %"produce f12745"
  %7321 = trunc i64 %3710 to i32
  %7322 = and i32 %7321, 1
  %.not104.not = icmp eq i32 %7322, 0
  br i1 %.not104.not, label %true_bb60, label %"assert succeeded72"

true_bb60:                                        ; preds = %"produce f12658"
  br i1 %.not201, label %"end for f126.s0.v3.v364", label %"for f126.s0.v3.v363.preheader", !prof !4

"for f126.s0.v3.v363.preheader":                  ; preds = %true_bb60
  %7323 = trunc i64 %3710 to i32
  %7324 = add i32 %7323, 3
  %7325 = ashr i32 %7324, 1
  %7326 = and i32 %7324, 2
  %7327 = ashr i32 %7324, 2
  %t2671 = add nsw i32 %7327, %7326
  %7328 = sub nsw i32 %7325, %f72.v4.min_realized
  %7329 = mul nsw i32 %7328, %2134
  %7330 = add i32 %3555, %7329
  %7331 = add nsw i32 %t2671, %2135
  %t2678 = mul nsw i32 %7331, %178
  %7332 = sub nsw i32 %7327, %f127.v4.min_realized
  %t2680 = mul nsw i32 %7332, %178
  %7333 = sub nsw i32 %7325, %f4.v4.min_realized
  %7334 = mul nsw i32 %7333, %f4.stride.1
  %7335 = add i32 %3556, %7334
  %7336 = add i32 %t2671, %2136
  %7337 = mul nsw i32 %7336, %f5.stride.1
  %7338 = sub nsw i32 %7327, %f5.v4.min_realized
  %7339 = mul nsw i32 %7338, %f5.stride.1
  %7340 = sext i32 %t2680 to i64
  %7341 = add nsw i64 %7340, -1
  %7342 = sext i32 %t2678 to i64
  %7343 = add nsw i64 %7342, -1
  %7344 = sext i32 %7325 to i64
  %7345 = sub nsw i64 %7344, %2142
  %7346 = mul nsw i64 %7345, %2141
  %7347 = add nsw i64 %7346, %3559
  br label %"for f126.s0.v3.v363"

"for f126.s0.v3.v363":                            ; preds = %"for f126.s0.v3.v363.preheader", %"for f126.s0.v3.v363"
  %lsr.iv303 = phi i32 [ %lsr.iv.next304, %"for f126.s0.v3.v363" ], [ 0, %"for f126.s0.v3.v363.preheader" ]
  %lsr.iv301 = phi i32 [ %lsr.iv.next302, %"for f126.s0.v3.v363" ], [ %a947, %"for f126.s0.v3.v363.preheader" ]
  %7348 = add i32 %lsr.iv303, %161
  %7349 = add i32 %7348, -1
  %7350 = shl i32 %7349, 1
  %7351 = and i32 %7350, 2
  %7352 = ashr i32 %7349, 1
  %t2672 = add nsw i32 %7351, %7352
  %7353 = add i32 %7330, %lsr.iv303
  %7354 = sext i32 %7353 to i64
  %7355 = add nsw i64 %7354, -2
  %7356 = getelementptr inbounds float, ptr %f72.host, i64 %7355
  %7357 = load <4 x float>, ptr %7356, align 4, !tbaa !48
  %7358 = add nsw i64 %7354, 2
  %7359 = getelementptr inbounds float, ptr %f72.host, i64 %7358
  %7360 = load <4 x float>, ptr %7359, align 4, !tbaa !48
  %7361 = shufflevector <4 x float> %7357, <4 x float> %7360, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2674 = fmul <4 x float> %232, %7361
  %a948 = fptosi <4 x float> %t2674 to <4 x i32>
  %a951 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a948)
  %7362 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a951, <4 x i32> zeroinitializer)
  %7363 = sitofp <4 x i32> %7362 to <4 x float>
  %t2676 = fsub <4 x float> %t2674, %7363
  %7364 = add i32 %7335, %lsr.iv303
  %t2683 = sub nsw <4 x i32> %7362, %241
  %7365 = sub nsw i32 %t2672, %f5.v3.min_realized
  %t2686 = add nsw i32 %7365, %7337
  %t2687 = mul nsw <4 x i32> %t2683, %1511
  %7366 = sub nsw i32 %7352, %f5.v3.min_realized
  %t2689 = add nsw i32 %7366, %7337
  %t2691 = add nsw i32 %7365, %7339
  %t2692 = add nsw i32 %7366, %7339
  %7367 = add nsw <4 x i32> %t2683, <i32 1, i32 1, i32 1, i32 1>
  %t2693 = mul nsw <4 x i32> %7367, %1511
  %7368 = ashr i32 %7348, 1
  %t2694 = add nsw i32 %7368, %3557
  %7369 = getelementptr inbounds float, ptr %f72.host, i64 %7354
  %7370 = load <4 x float>, ptr %7369, align 4, !tbaa !48
  %7371 = add nsw i64 %7354, 4
  %7372 = getelementptr inbounds float, ptr %f72.host, i64 %7371
  %7373 = load <4 x float>, ptr %7372, align 4, !tbaa !48
  %7374 = shufflevector <4 x float> %7370, <4 x float> %7373, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2695 = fmul <4 x float> %232, %7374
  %a952 = fptosi <4 x float> %t2695 to <4 x i32>
  %a955 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a952)
  %7375 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a955, <4 x i32> zeroinitializer)
  %7376 = sitofp <4 x i32> %7375 to <4 x float>
  %t2697 = fsub <4 x float> %t2695, %7376
  %t2700 = sub nsw <4 x i32> %7375, %241
  %7377 = sub nsw i32 %t2694, %f5.v3.min_realized
  %t2702 = add nsw i32 %7377, %7337
  %t2703 = mul nsw <4 x i32> %t2700, %1511
  %7378 = sub nsw i32 %7368, %f5.v3.min_realized
  %t2705 = add nsw i32 %7378, %7337
  %t2706 = add nsw i32 %7377, %7339
  %t2707 = add nsw i32 %7378, %7339
  %7379 = add nsw <4 x i32> %t2700, <i32 1, i32 1, i32 1, i32 1>
  %t2708 = mul nsw <4 x i32> %7379, %1511
  %7380 = insertelement <4 x i32> undef, i32 %t2692, i64 0
  %7381 = shufflevector <4 x i32> %7380, <4 x i32> undef, <4 x i32> zeroinitializer
  %7382 = add nsw <4 x i32> %7381, <i32 0, i32 1, i32 2, i32 3>
  %7383 = add nsw <4 x i32> %t2693, %7382
  %7384 = extractelement <4 x i32> %7383, i64 0
  %7385 = sext i32 %7384 to i64
  %7386 = getelementptr inbounds float, ptr %f5.host, i64 %7385
  %7387 = load float, ptr %7386, align 4, !tbaa !46
  %7388 = insertelement <4 x float> undef, float %7387, i64 0
  %7389 = extractelement <4 x i32> %7383, i64 1
  %7390 = sext i32 %7389 to i64
  %7391 = getelementptr inbounds float, ptr %f5.host, i64 %7390
  %7392 = load float, ptr %7391, align 4, !tbaa !46
  %7393 = insertelement <4 x float> %7388, float %7392, i64 1
  %7394 = extractelement <4 x i32> %7383, i64 2
  %7395 = sext i32 %7394 to i64
  %7396 = getelementptr inbounds float, ptr %f5.host, i64 %7395
  %7397 = load float, ptr %7396, align 4, !tbaa !46
  %7398 = insertelement <4 x float> %7393, float %7397, i64 2
  %7399 = extractelement <4 x i32> %7383, i64 3
  %7400 = sext i32 %7399 to i64
  %7401 = getelementptr inbounds float, ptr %f5.host, i64 %7400
  %7402 = load float, ptr %7401, align 4, !tbaa !46
  %7403 = insertelement <4 x float> %7398, float %7402, i64 3
  %7404 = fmul <4 x float> %7403, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7405 = insertelement <4 x i32> undef, i32 %t2691, i64 0
  %7406 = shufflevector <4 x i32> %7405, <4 x i32> undef, <4 x i32> zeroinitializer
  %7407 = add <4 x i32> %7406, <i32 -1, i32 0, i32 1, i32 2>
  %7408 = add <4 x i32> %7407, %t2693
  %7409 = extractelement <4 x i32> %7408, i64 0
  %7410 = sext i32 %7409 to i64
  %7411 = getelementptr inbounds float, ptr %f5.host, i64 %7410
  %7412 = load float, ptr %7411, align 4, !tbaa !46
  %7413 = insertelement <4 x float> undef, float %7412, i64 0
  %7414 = extractelement <4 x i32> %7408, i64 1
  %7415 = sext i32 %7414 to i64
  %7416 = getelementptr inbounds float, ptr %f5.host, i64 %7415
  %7417 = load float, ptr %7416, align 4, !tbaa !46
  %7418 = insertelement <4 x float> %7413, float %7417, i64 1
  %7419 = extractelement <4 x i32> %7408, i64 2
  %7420 = sext i32 %7419 to i64
  %7421 = getelementptr inbounds float, ptr %f5.host, i64 %7420
  %7422 = load float, ptr %7421, align 4, !tbaa !46
  %7423 = insertelement <4 x float> %7418, float %7422, i64 2
  %7424 = extractelement <4 x i32> %7408, i64 3
  %7425 = sext i32 %7424 to i64
  %7426 = getelementptr inbounds float, ptr %f5.host, i64 %7425
  %7427 = load float, ptr %7426, align 4, !tbaa !46
  %7428 = insertelement <4 x float> %7423, float %7427, i64 3
  %7429 = fmul <4 x float> %7428, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7430 = fadd <4 x float> %7404, %7429
  %7431 = fmul <4 x float> %7430, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7432 = insertelement <4 x i32> undef, i32 %t2689, i64 0
  %7433 = shufflevector <4 x i32> %7432, <4 x i32> undef, <4 x i32> zeroinitializer
  %7434 = add nsw <4 x i32> %7433, <i32 0, i32 1, i32 2, i32 3>
  %7435 = add nsw <4 x i32> %t2693, %7434
  %7436 = extractelement <4 x i32> %7435, i64 0
  %7437 = sext i32 %7436 to i64
  %7438 = getelementptr inbounds float, ptr %f5.host, i64 %7437
  %7439 = load float, ptr %7438, align 4, !tbaa !46
  %7440 = insertelement <4 x float> undef, float %7439, i64 0
  %7441 = extractelement <4 x i32> %7435, i64 1
  %7442 = sext i32 %7441 to i64
  %7443 = getelementptr inbounds float, ptr %f5.host, i64 %7442
  %7444 = load float, ptr %7443, align 4, !tbaa !46
  %7445 = insertelement <4 x float> %7440, float %7444, i64 1
  %7446 = extractelement <4 x i32> %7435, i64 2
  %7447 = sext i32 %7446 to i64
  %7448 = getelementptr inbounds float, ptr %f5.host, i64 %7447
  %7449 = load float, ptr %7448, align 4, !tbaa !46
  %7450 = insertelement <4 x float> %7445, float %7449, i64 2
  %7451 = extractelement <4 x i32> %7435, i64 3
  %7452 = sext i32 %7451 to i64
  %7453 = getelementptr inbounds float, ptr %f5.host, i64 %7452
  %7454 = load float, ptr %7453, align 4, !tbaa !46
  %7455 = insertelement <4 x float> %7450, float %7454, i64 3
  %7456 = fmul <4 x float> %7455, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7457 = insertelement <4 x i32> undef, i32 %t2686, i64 0
  %7458 = shufflevector <4 x i32> %7457, <4 x i32> undef, <4 x i32> zeroinitializer
  %7459 = add <4 x i32> %7458, <i32 -1, i32 0, i32 1, i32 2>
  %7460 = add <4 x i32> %7459, %t2693
  %7461 = extractelement <4 x i32> %7460, i64 0
  %7462 = sext i32 %7461 to i64
  %7463 = getelementptr inbounds float, ptr %f5.host, i64 %7462
  %7464 = load float, ptr %7463, align 4, !tbaa !46
  %7465 = insertelement <4 x float> undef, float %7464, i64 0
  %7466 = extractelement <4 x i32> %7460, i64 1
  %7467 = sext i32 %7466 to i64
  %7468 = getelementptr inbounds float, ptr %f5.host, i64 %7467
  %7469 = load float, ptr %7468, align 4, !tbaa !46
  %7470 = insertelement <4 x float> %7465, float %7469, i64 1
  %7471 = extractelement <4 x i32> %7460, i64 2
  %7472 = sext i32 %7471 to i64
  %7473 = getelementptr inbounds float, ptr %f5.host, i64 %7472
  %7474 = load float, ptr %7473, align 4, !tbaa !46
  %7475 = insertelement <4 x float> %7470, float %7474, i64 2
  %7476 = extractelement <4 x i32> %7460, i64 3
  %7477 = sext i32 %7476 to i64
  %7478 = getelementptr inbounds float, ptr %f5.host, i64 %7477
  %7479 = load float, ptr %7478, align 4, !tbaa !46
  %7480 = insertelement <4 x float> %7475, float %7479, i64 3
  %7481 = fmul <4 x float> %7480, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7482 = fadd <4 x float> %7456, %7481
  %7483 = fmul <4 x float> %7482, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7484 = fadd <4 x float> %7431, %7483
  %7485 = mul nsw <4 x i32> %7367, %2139
  %7486 = add i32 %7364, -1
  %7487 = insertelement <4 x i32> undef, i32 %7486, i64 0
  %7488 = shufflevector <4 x i32> %7487, <4 x i32> undef, <4 x i32> zeroinitializer
  %7489 = add nsw <4 x i32> %7488, <i32 0, i32 2, i32 4, i32 6>
  %7490 = add nsw <4 x i32> %7485, %7489
  %7491 = extractelement <4 x i32> %7490, i64 0
  %7492 = sext i32 %7491 to i64
  %7493 = getelementptr inbounds float, ptr %f4.host, i64 %7492
  %7494 = load float, ptr %7493, align 4, !tbaa !44
  %7495 = insertelement <4 x float> undef, float %7494, i64 0
  %7496 = extractelement <4 x i32> %7490, i64 1
  %7497 = sext i32 %7496 to i64
  %7498 = getelementptr inbounds float, ptr %f4.host, i64 %7497
  %7499 = load float, ptr %7498, align 4, !tbaa !44
  %7500 = insertelement <4 x float> %7495, float %7499, i64 1
  %7501 = extractelement <4 x i32> %7490, i64 2
  %7502 = sext i32 %7501 to i64
  %7503 = getelementptr inbounds float, ptr %f4.host, i64 %7502
  %7504 = load float, ptr %7503, align 4, !tbaa !44
  %7505 = insertelement <4 x float> %7500, float %7504, i64 2
  %7506 = extractelement <4 x i32> %7490, i64 3
  %7507 = sext i32 %7506 to i64
  %7508 = getelementptr inbounds float, ptr %f4.host, i64 %7507
  %7509 = load float, ptr %7508, align 4, !tbaa !44
  %7510 = insertelement <4 x float> %7505, float %7509, i64 3
  %7511 = fsub <4 x float> %7510, %7484
  %7512 = fmul <4 x float> %t2676, %7511
  %7513 = add nsw <4 x i32> %t2687, %7382
  %7514 = extractelement <4 x i32> %7513, i64 0
  %7515 = sext i32 %7514 to i64
  %7516 = getelementptr inbounds float, ptr %f5.host, i64 %7515
  %7517 = load float, ptr %7516, align 4, !tbaa !46
  %7518 = insertelement <4 x float> undef, float %7517, i64 0
  %7519 = extractelement <4 x i32> %7513, i64 1
  %7520 = sext i32 %7519 to i64
  %7521 = getelementptr inbounds float, ptr %f5.host, i64 %7520
  %7522 = load float, ptr %7521, align 4, !tbaa !46
  %7523 = insertelement <4 x float> %7518, float %7522, i64 1
  %7524 = extractelement <4 x i32> %7513, i64 2
  %7525 = sext i32 %7524 to i64
  %7526 = getelementptr inbounds float, ptr %f5.host, i64 %7525
  %7527 = load float, ptr %7526, align 4, !tbaa !46
  %7528 = insertelement <4 x float> %7523, float %7527, i64 2
  %7529 = extractelement <4 x i32> %7513, i64 3
  %7530 = sext i32 %7529 to i64
  %7531 = getelementptr inbounds float, ptr %f5.host, i64 %7530
  %7532 = load float, ptr %7531, align 4, !tbaa !46
  %7533 = insertelement <4 x float> %7528, float %7532, i64 3
  %7534 = fmul <4 x float> %7533, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7535 = add <4 x i32> %t2687, %7406
  %7536 = add <4 x i32> %7535, <i32 -1, i32 0, i32 1, i32 2>
  %7537 = extractelement <4 x i32> %7536, i64 0
  %7538 = sext i32 %7537 to i64
  %7539 = getelementptr inbounds float, ptr %f5.host, i64 %7538
  %7540 = load float, ptr %7539, align 4, !tbaa !46
  %7541 = insertelement <4 x float> undef, float %7540, i64 0
  %7542 = extractelement <4 x i32> %7536, i64 1
  %7543 = sext i32 %7542 to i64
  %7544 = getelementptr inbounds float, ptr %f5.host, i64 %7543
  %7545 = load float, ptr %7544, align 4, !tbaa !46
  %7546 = insertelement <4 x float> %7541, float %7545, i64 1
  %7547 = extractelement <4 x i32> %7536, i64 2
  %7548 = sext i32 %7547 to i64
  %7549 = getelementptr inbounds float, ptr %f5.host, i64 %7548
  %7550 = load float, ptr %7549, align 4, !tbaa !46
  %7551 = insertelement <4 x float> %7546, float %7550, i64 2
  %7552 = extractelement <4 x i32> %7536, i64 3
  %7553 = sext i32 %7552 to i64
  %7554 = getelementptr inbounds float, ptr %f5.host, i64 %7553
  %7555 = load float, ptr %7554, align 4, !tbaa !46
  %7556 = insertelement <4 x float> %7551, float %7555, i64 3
  %7557 = fmul <4 x float> %7556, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7558 = fadd <4 x float> %7534, %7557
  %7559 = fmul <4 x float> %7558, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7560 = add nsw <4 x i32> %t2687, %7434
  %7561 = extractelement <4 x i32> %7560, i64 0
  %7562 = sext i32 %7561 to i64
  %7563 = getelementptr inbounds float, ptr %f5.host, i64 %7562
  %7564 = load float, ptr %7563, align 4, !tbaa !46
  %7565 = insertelement <4 x float> undef, float %7564, i64 0
  %7566 = extractelement <4 x i32> %7560, i64 1
  %7567 = sext i32 %7566 to i64
  %7568 = getelementptr inbounds float, ptr %f5.host, i64 %7567
  %7569 = load float, ptr %7568, align 4, !tbaa !46
  %7570 = insertelement <4 x float> %7565, float %7569, i64 1
  %7571 = extractelement <4 x i32> %7560, i64 2
  %7572 = sext i32 %7571 to i64
  %7573 = getelementptr inbounds float, ptr %f5.host, i64 %7572
  %7574 = load float, ptr %7573, align 4, !tbaa !46
  %7575 = insertelement <4 x float> %7570, float %7574, i64 2
  %7576 = extractelement <4 x i32> %7560, i64 3
  %7577 = sext i32 %7576 to i64
  %7578 = getelementptr inbounds float, ptr %f5.host, i64 %7577
  %7579 = load float, ptr %7578, align 4, !tbaa !46
  %7580 = insertelement <4 x float> %7575, float %7579, i64 3
  %7581 = fmul <4 x float> %7580, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7582 = add <4 x i32> %t2687, %7458
  %7583 = add <4 x i32> %7582, <i32 -1, i32 0, i32 1, i32 2>
  %7584 = extractelement <4 x i32> %7583, i64 0
  %7585 = sext i32 %7584 to i64
  %7586 = getelementptr inbounds float, ptr %f5.host, i64 %7585
  %7587 = load float, ptr %7586, align 4, !tbaa !46
  %7588 = insertelement <4 x float> undef, float %7587, i64 0
  %7589 = extractelement <4 x i32> %7583, i64 1
  %7590 = sext i32 %7589 to i64
  %7591 = getelementptr inbounds float, ptr %f5.host, i64 %7590
  %7592 = load float, ptr %7591, align 4, !tbaa !46
  %7593 = insertelement <4 x float> %7588, float %7592, i64 1
  %7594 = extractelement <4 x i32> %7583, i64 2
  %7595 = sext i32 %7594 to i64
  %7596 = getelementptr inbounds float, ptr %f5.host, i64 %7595
  %7597 = load float, ptr %7596, align 4, !tbaa !46
  %7598 = insertelement <4 x float> %7593, float %7597, i64 2
  %7599 = extractelement <4 x i32> %7583, i64 3
  %7600 = sext i32 %7599 to i64
  %7601 = getelementptr inbounds float, ptr %f5.host, i64 %7600
  %7602 = load float, ptr %7601, align 4, !tbaa !46
  %7603 = insertelement <4 x float> %7598, float %7602, i64 3
  %7604 = fmul <4 x float> %7603, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7605 = fadd <4 x float> %7581, %7604
  %7606 = fmul <4 x float> %7605, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7607 = fadd <4 x float> %7559, %7606
  %7608 = mul nsw <4 x i32> %t2683, %2139
  %7609 = add nsw <4 x i32> %7608, %7489
  %7610 = extractelement <4 x i32> %7609, i64 0
  %7611 = sext i32 %7610 to i64
  %7612 = getelementptr inbounds float, ptr %f4.host, i64 %7611
  %7613 = load float, ptr %7612, align 4, !tbaa !44
  %7614 = insertelement <4 x float> undef, float %7613, i64 0
  %7615 = extractelement <4 x i32> %7609, i64 1
  %7616 = sext i32 %7615 to i64
  %7617 = getelementptr inbounds float, ptr %f4.host, i64 %7616
  %7618 = load float, ptr %7617, align 4, !tbaa !44
  %7619 = insertelement <4 x float> %7614, float %7618, i64 1
  %7620 = extractelement <4 x i32> %7609, i64 2
  %7621 = sext i32 %7620 to i64
  %7622 = getelementptr inbounds float, ptr %f4.host, i64 %7621
  %7623 = load float, ptr %7622, align 4, !tbaa !44
  %7624 = insertelement <4 x float> %7619, float %7623, i64 2
  %7625 = extractelement <4 x i32> %7609, i64 3
  %7626 = sext i32 %7625 to i64
  %7627 = getelementptr inbounds float, ptr %f4.host, i64 %7626
  %7628 = load float, ptr %7627, align 4, !tbaa !44
  %7629 = insertelement <4 x float> %7624, float %7628, i64 3
  %7630 = fsub <4 x float> %7629, %7607
  %7631 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2676
  %7632 = fmul <4 x float> %7631, %7630
  %7633 = fadd <4 x float> %7512, %7632
  %7634 = sext i32 %7352 to i64
  %7635 = sub nsw i64 %7634, %1516
  %7636 = add nsw i64 %7635, %7340
  %7637 = getelementptr inbounds float, ptr %193, i64 %7636
  %7638 = load <4 x float>, ptr %7637, align 4, !tbaa !68
  %7639 = fmul <4 x float> %7638, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7640 = sext i32 %t2672 to i64
  %7641 = sub nsw i64 %7640, %1516
  %7642 = add nsw i64 %7341, %7641
  %7643 = getelementptr inbounds float, ptr %193, i64 %7642
  %7644 = load <4 x float>, ptr %7643, align 4, !tbaa !68
  %7645 = fmul <4 x float> %7644, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7646 = fadd <4 x float> %7639, %7645
  %7647 = fmul <4 x float> %7646, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7648 = add nsw i64 %7635, %7342
  %7649 = getelementptr inbounds float, ptr %193, i64 %7648
  %7650 = load <4 x float>, ptr %7649, align 4, !tbaa !68
  %7651 = fmul <4 x float> %7650, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7652 = add nsw i64 %7343, %7641
  %7653 = getelementptr inbounds float, ptr %193, i64 %7652
  %7654 = load <4 x float>, ptr %7653, align 4, !tbaa !68
  %7655 = fmul <4 x float> %7654, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7656 = fadd <4 x float> %7651, %7655
  %7657 = fmul <4 x float> %7656, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7658 = fadd <4 x float> %7647, %7657
  %7659 = fadd <4 x float> %7633, %7658
  %7660 = insertelement <4 x i32> undef, i32 %t2707, i64 0
  %7661 = shufflevector <4 x i32> %7660, <4 x i32> undef, <4 x i32> zeroinitializer
  %7662 = add nsw <4 x i32> %7661, <i32 0, i32 1, i32 2, i32 3>
  %7663 = add nsw <4 x i32> %t2708, %7662
  %7664 = extractelement <4 x i32> %7663, i64 0
  %7665 = sext i32 %7664 to i64
  %7666 = getelementptr inbounds float, ptr %f5.host, i64 %7665
  %7667 = load float, ptr %7666, align 4, !tbaa !46
  %7668 = insertelement <4 x float> undef, float %7667, i64 0
  %7669 = extractelement <4 x i32> %7663, i64 1
  %7670 = sext i32 %7669 to i64
  %7671 = getelementptr inbounds float, ptr %f5.host, i64 %7670
  %7672 = load float, ptr %7671, align 4, !tbaa !46
  %7673 = insertelement <4 x float> %7668, float %7672, i64 1
  %7674 = extractelement <4 x i32> %7663, i64 2
  %7675 = sext i32 %7674 to i64
  %7676 = getelementptr inbounds float, ptr %f5.host, i64 %7675
  %7677 = load float, ptr %7676, align 4, !tbaa !46
  %7678 = insertelement <4 x float> %7673, float %7677, i64 2
  %7679 = extractelement <4 x i32> %7663, i64 3
  %7680 = sext i32 %7679 to i64
  %7681 = getelementptr inbounds float, ptr %f5.host, i64 %7680
  %7682 = load float, ptr %7681, align 4, !tbaa !46
  %7683 = insertelement <4 x float> %7678, float %7682, i64 3
  %7684 = fmul <4 x float> %7683, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7685 = insertelement <4 x i32> undef, i32 %t2706, i64 0
  %7686 = shufflevector <4 x i32> %7685, <4 x i32> undef, <4 x i32> zeroinitializer
  %7687 = add <4 x i32> %7686, <i32 -1, i32 0, i32 1, i32 2>
  %7688 = add <4 x i32> %7687, %t2708
  %7689 = extractelement <4 x i32> %7688, i64 0
  %7690 = sext i32 %7689 to i64
  %7691 = getelementptr inbounds float, ptr %f5.host, i64 %7690
  %7692 = load float, ptr %7691, align 4, !tbaa !46
  %7693 = insertelement <4 x float> undef, float %7692, i64 0
  %7694 = extractelement <4 x i32> %7688, i64 1
  %7695 = sext i32 %7694 to i64
  %7696 = getelementptr inbounds float, ptr %f5.host, i64 %7695
  %7697 = load float, ptr %7696, align 4, !tbaa !46
  %7698 = insertelement <4 x float> %7693, float %7697, i64 1
  %7699 = extractelement <4 x i32> %7688, i64 2
  %7700 = sext i32 %7699 to i64
  %7701 = getelementptr inbounds float, ptr %f5.host, i64 %7700
  %7702 = load float, ptr %7701, align 4, !tbaa !46
  %7703 = insertelement <4 x float> %7698, float %7702, i64 2
  %7704 = extractelement <4 x i32> %7688, i64 3
  %7705 = sext i32 %7704 to i64
  %7706 = getelementptr inbounds float, ptr %f5.host, i64 %7705
  %7707 = load float, ptr %7706, align 4, !tbaa !46
  %7708 = insertelement <4 x float> %7703, float %7707, i64 3
  %7709 = fmul <4 x float> %7708, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7710 = fadd <4 x float> %7684, %7709
  %7711 = fmul <4 x float> %7710, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7712 = insertelement <4 x i32> undef, i32 %t2705, i64 0
  %7713 = shufflevector <4 x i32> %7712, <4 x i32> undef, <4 x i32> zeroinitializer
  %7714 = add nsw <4 x i32> %7713, <i32 0, i32 1, i32 2, i32 3>
  %7715 = add nsw <4 x i32> %t2708, %7714
  %7716 = extractelement <4 x i32> %7715, i64 0
  %7717 = sext i32 %7716 to i64
  %7718 = getelementptr inbounds float, ptr %f5.host, i64 %7717
  %7719 = load float, ptr %7718, align 4, !tbaa !46
  %7720 = insertelement <4 x float> undef, float %7719, i64 0
  %7721 = extractelement <4 x i32> %7715, i64 1
  %7722 = sext i32 %7721 to i64
  %7723 = getelementptr inbounds float, ptr %f5.host, i64 %7722
  %7724 = load float, ptr %7723, align 4, !tbaa !46
  %7725 = insertelement <4 x float> %7720, float %7724, i64 1
  %7726 = extractelement <4 x i32> %7715, i64 2
  %7727 = sext i32 %7726 to i64
  %7728 = getelementptr inbounds float, ptr %f5.host, i64 %7727
  %7729 = load float, ptr %7728, align 4, !tbaa !46
  %7730 = insertelement <4 x float> %7725, float %7729, i64 2
  %7731 = extractelement <4 x i32> %7715, i64 3
  %7732 = sext i32 %7731 to i64
  %7733 = getelementptr inbounds float, ptr %f5.host, i64 %7732
  %7734 = load float, ptr %7733, align 4, !tbaa !46
  %7735 = insertelement <4 x float> %7730, float %7734, i64 3
  %7736 = fmul <4 x float> %7735, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7737 = insertelement <4 x i32> undef, i32 %t2702, i64 0
  %7738 = shufflevector <4 x i32> %7737, <4 x i32> undef, <4 x i32> zeroinitializer
  %7739 = add <4 x i32> %7738, <i32 -1, i32 0, i32 1, i32 2>
  %7740 = add <4 x i32> %7739, %t2708
  %7741 = extractelement <4 x i32> %7740, i64 0
  %7742 = sext i32 %7741 to i64
  %7743 = getelementptr inbounds float, ptr %f5.host, i64 %7742
  %7744 = load float, ptr %7743, align 4, !tbaa !46
  %7745 = insertelement <4 x float> undef, float %7744, i64 0
  %7746 = extractelement <4 x i32> %7740, i64 1
  %7747 = sext i32 %7746 to i64
  %7748 = getelementptr inbounds float, ptr %f5.host, i64 %7747
  %7749 = load float, ptr %7748, align 4, !tbaa !46
  %7750 = insertelement <4 x float> %7745, float %7749, i64 1
  %7751 = extractelement <4 x i32> %7740, i64 2
  %7752 = sext i32 %7751 to i64
  %7753 = getelementptr inbounds float, ptr %f5.host, i64 %7752
  %7754 = load float, ptr %7753, align 4, !tbaa !46
  %7755 = insertelement <4 x float> %7750, float %7754, i64 2
  %7756 = extractelement <4 x i32> %7740, i64 3
  %7757 = sext i32 %7756 to i64
  %7758 = getelementptr inbounds float, ptr %f5.host, i64 %7757
  %7759 = load float, ptr %7758, align 4, !tbaa !46
  %7760 = insertelement <4 x float> %7755, float %7759, i64 3
  %7761 = fmul <4 x float> %7760, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7762 = fadd <4 x float> %7736, %7761
  %7763 = fmul <4 x float> %7762, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7764 = fadd <4 x float> %7711, %7763
  %7765 = mul nsw <4 x i32> %7379, %2139
  %7766 = insertelement <4 x i32> undef, i32 %7364, i64 0
  %7767 = shufflevector <4 x i32> %7766, <4 x i32> undef, <4 x i32> zeroinitializer
  %7768 = add nsw <4 x i32> %7767, <i32 0, i32 2, i32 4, i32 6>
  %7769 = add nsw <4 x i32> %7765, %7768
  %7770 = extractelement <4 x i32> %7769, i64 0
  %7771 = sext i32 %7770 to i64
  %7772 = getelementptr inbounds float, ptr %f4.host, i64 %7771
  %7773 = load float, ptr %7772, align 4, !tbaa !44
  %7774 = insertelement <4 x float> undef, float %7773, i64 0
  %7775 = extractelement <4 x i32> %7769, i64 1
  %7776 = sext i32 %7775 to i64
  %7777 = getelementptr inbounds float, ptr %f4.host, i64 %7776
  %7778 = load float, ptr %7777, align 4, !tbaa !44
  %7779 = insertelement <4 x float> %7774, float %7778, i64 1
  %7780 = extractelement <4 x i32> %7769, i64 2
  %7781 = sext i32 %7780 to i64
  %7782 = getelementptr inbounds float, ptr %f4.host, i64 %7781
  %7783 = load float, ptr %7782, align 4, !tbaa !44
  %7784 = insertelement <4 x float> %7779, float %7783, i64 2
  %7785 = extractelement <4 x i32> %7769, i64 3
  %7786 = sext i32 %7785 to i64
  %7787 = getelementptr inbounds float, ptr %f4.host, i64 %7786
  %7788 = load float, ptr %7787, align 4, !tbaa !44
  %7789 = insertelement <4 x float> %7784, float %7788, i64 3
  %7790 = fsub <4 x float> %7789, %7764
  %7791 = fmul <4 x float> %t2697, %7790
  %7792 = add nsw <4 x i32> %t2703, %7662
  %7793 = extractelement <4 x i32> %7792, i64 0
  %7794 = sext i32 %7793 to i64
  %7795 = getelementptr inbounds float, ptr %f5.host, i64 %7794
  %7796 = load float, ptr %7795, align 4, !tbaa !46
  %7797 = insertelement <4 x float> undef, float %7796, i64 0
  %7798 = extractelement <4 x i32> %7792, i64 1
  %7799 = sext i32 %7798 to i64
  %7800 = getelementptr inbounds float, ptr %f5.host, i64 %7799
  %7801 = load float, ptr %7800, align 4, !tbaa !46
  %7802 = insertelement <4 x float> %7797, float %7801, i64 1
  %7803 = extractelement <4 x i32> %7792, i64 2
  %7804 = sext i32 %7803 to i64
  %7805 = getelementptr inbounds float, ptr %f5.host, i64 %7804
  %7806 = load float, ptr %7805, align 4, !tbaa !46
  %7807 = insertelement <4 x float> %7802, float %7806, i64 2
  %7808 = extractelement <4 x i32> %7792, i64 3
  %7809 = sext i32 %7808 to i64
  %7810 = getelementptr inbounds float, ptr %f5.host, i64 %7809
  %7811 = load float, ptr %7810, align 4, !tbaa !46
  %7812 = insertelement <4 x float> %7807, float %7811, i64 3
  %7813 = fmul <4 x float> %7812, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7814 = add <4 x i32> %7687, %t2703
  %7815 = extractelement <4 x i32> %7814, i64 0
  %7816 = sext i32 %7815 to i64
  %7817 = getelementptr inbounds float, ptr %f5.host, i64 %7816
  %7818 = load float, ptr %7817, align 4, !tbaa !46
  %7819 = insertelement <4 x float> undef, float %7818, i64 0
  %7820 = extractelement <4 x i32> %7814, i64 1
  %7821 = sext i32 %7820 to i64
  %7822 = getelementptr inbounds float, ptr %f5.host, i64 %7821
  %7823 = load float, ptr %7822, align 4, !tbaa !46
  %7824 = insertelement <4 x float> %7819, float %7823, i64 1
  %7825 = extractelement <4 x i32> %7814, i64 2
  %7826 = sext i32 %7825 to i64
  %7827 = getelementptr inbounds float, ptr %f5.host, i64 %7826
  %7828 = load float, ptr %7827, align 4, !tbaa !46
  %7829 = insertelement <4 x float> %7824, float %7828, i64 2
  %7830 = extractelement <4 x i32> %7814, i64 3
  %7831 = sext i32 %7830 to i64
  %7832 = getelementptr inbounds float, ptr %f5.host, i64 %7831
  %7833 = load float, ptr %7832, align 4, !tbaa !46
  %7834 = insertelement <4 x float> %7829, float %7833, i64 3
  %7835 = fmul <4 x float> %7834, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7836 = fadd <4 x float> %7813, %7835
  %7837 = fmul <4 x float> %7836, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7838 = add nsw <4 x i32> %t2703, %7714
  %7839 = extractelement <4 x i32> %7838, i64 0
  %7840 = sext i32 %7839 to i64
  %7841 = getelementptr inbounds float, ptr %f5.host, i64 %7840
  %7842 = load float, ptr %7841, align 4, !tbaa !46
  %7843 = insertelement <4 x float> undef, float %7842, i64 0
  %7844 = extractelement <4 x i32> %7838, i64 1
  %7845 = sext i32 %7844 to i64
  %7846 = getelementptr inbounds float, ptr %f5.host, i64 %7845
  %7847 = load float, ptr %7846, align 4, !tbaa !46
  %7848 = insertelement <4 x float> %7843, float %7847, i64 1
  %7849 = extractelement <4 x i32> %7838, i64 2
  %7850 = sext i32 %7849 to i64
  %7851 = getelementptr inbounds float, ptr %f5.host, i64 %7850
  %7852 = load float, ptr %7851, align 4, !tbaa !46
  %7853 = insertelement <4 x float> %7848, float %7852, i64 2
  %7854 = extractelement <4 x i32> %7838, i64 3
  %7855 = sext i32 %7854 to i64
  %7856 = getelementptr inbounds float, ptr %f5.host, i64 %7855
  %7857 = load float, ptr %7856, align 4, !tbaa !46
  %7858 = insertelement <4 x float> %7853, float %7857, i64 3
  %7859 = fmul <4 x float> %7858, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7860 = add <4 x i32> %7739, %t2703
  %7861 = extractelement <4 x i32> %7860, i64 0
  %7862 = sext i32 %7861 to i64
  %7863 = getelementptr inbounds float, ptr %f5.host, i64 %7862
  %7864 = load float, ptr %7863, align 4, !tbaa !46
  %7865 = insertelement <4 x float> undef, float %7864, i64 0
  %7866 = extractelement <4 x i32> %7860, i64 1
  %7867 = sext i32 %7866 to i64
  %7868 = getelementptr inbounds float, ptr %f5.host, i64 %7867
  %7869 = load float, ptr %7868, align 4, !tbaa !46
  %7870 = insertelement <4 x float> %7865, float %7869, i64 1
  %7871 = extractelement <4 x i32> %7860, i64 2
  %7872 = sext i32 %7871 to i64
  %7873 = getelementptr inbounds float, ptr %f5.host, i64 %7872
  %7874 = load float, ptr %7873, align 4, !tbaa !46
  %7875 = insertelement <4 x float> %7870, float %7874, i64 2
  %7876 = extractelement <4 x i32> %7860, i64 3
  %7877 = sext i32 %7876 to i64
  %7878 = getelementptr inbounds float, ptr %f5.host, i64 %7877
  %7879 = load float, ptr %7878, align 4, !tbaa !46
  %7880 = insertelement <4 x float> %7875, float %7879, i64 3
  %7881 = fmul <4 x float> %7880, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7882 = fadd <4 x float> %7859, %7881
  %7883 = fmul <4 x float> %7882, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7884 = fadd <4 x float> %7837, %7883
  %7885 = mul nsw <4 x i32> %t2700, %2139
  %7886 = add nsw <4 x i32> %7885, %7768
  %7887 = extractelement <4 x i32> %7886, i64 0
  %7888 = sext i32 %7887 to i64
  %7889 = getelementptr inbounds float, ptr %f4.host, i64 %7888
  %7890 = load float, ptr %7889, align 4, !tbaa !44
  %7891 = insertelement <4 x float> undef, float %7890, i64 0
  %7892 = extractelement <4 x i32> %7886, i64 1
  %7893 = sext i32 %7892 to i64
  %7894 = getelementptr inbounds float, ptr %f4.host, i64 %7893
  %7895 = load float, ptr %7894, align 4, !tbaa !44
  %7896 = insertelement <4 x float> %7891, float %7895, i64 1
  %7897 = extractelement <4 x i32> %7886, i64 2
  %7898 = sext i32 %7897 to i64
  %7899 = getelementptr inbounds float, ptr %f4.host, i64 %7898
  %7900 = load float, ptr %7899, align 4, !tbaa !44
  %7901 = insertelement <4 x float> %7896, float %7900, i64 2
  %7902 = extractelement <4 x i32> %7886, i64 3
  %7903 = sext i32 %7902 to i64
  %7904 = getelementptr inbounds float, ptr %f4.host, i64 %7903
  %7905 = load float, ptr %7904, align 4, !tbaa !44
  %7906 = insertelement <4 x float> %7901, float %7905, i64 3
  %7907 = fsub <4 x float> %7906, %7884
  %7908 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2697
  %7909 = fmul <4 x float> %7908, %7907
  %7910 = fadd <4 x float> %7791, %7909
  %7911 = sext i32 %7368 to i64
  %7912 = sub nsw i64 %7911, %1516
  %7913 = add nsw i64 %7912, %7340
  %7914 = getelementptr inbounds float, ptr %193, i64 %7913
  %7915 = load <4 x float>, ptr %7914, align 4, !tbaa !68
  %7916 = fmul <4 x float> %7915, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7917 = sext i32 %t2694 to i64
  %7918 = sub nsw i64 %7917, %1516
  %7919 = add nsw i64 %7341, %7918
  %7920 = getelementptr inbounds float, ptr %193, i64 %7919
  %7921 = load <4 x float>, ptr %7920, align 4, !tbaa !68
  %7922 = fmul <4 x float> %7921, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7923 = fadd <4 x float> %7916, %7922
  %7924 = fmul <4 x float> %7923, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7925 = add nsw i64 %7912, %7342
  %7926 = getelementptr inbounds float, ptr %193, i64 %7925
  %7927 = load <4 x float>, ptr %7926, align 4, !tbaa !68
  %7928 = fmul <4 x float> %7927, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7929 = add nsw i64 %7343, %7918
  %7930 = getelementptr inbounds float, ptr %193, i64 %7929
  %7931 = load <4 x float>, ptr %7930, align 4, !tbaa !68
  %7932 = fmul <4 x float> %7931, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7933 = fadd <4 x float> %7928, %7932
  %7934 = fmul <4 x float> %7933, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7935 = fadd <4 x float> %7924, %7934
  %7936 = fadd <4 x float> %7910, %7935
  %7937 = shufflevector <4 x float> %7659, <4 x float> %7936, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7938 = sext i32 %7348 to i64
  %7939 = add nsw i64 %7347, %7938
  %7940 = getelementptr inbounds float, ptr %222, i64 %7939
  store <8 x float> %7937, ptr %7940, align 4, !tbaa !70
  %lsr.iv.next302 = add i32 %lsr.iv301, -1
  %lsr.iv.next304 = add nuw i32 %lsr.iv303, 8
  %.not118 = icmp eq i32 %lsr.iv.next302, 0
  br i1 %.not118, label %"end for f126.s0.v3.v364", label %"for f126.s0.v3.v363"

"end for f126.s0.v3.v364":                        ; preds = %"for f126.s0.v3.v363", %true_bb60
  br i1 %3560, label %"for f126.s0.v3.v366.preheader", label %"assert succeeded72", !prof !5

"for f126.s0.v3.v366.preheader":                  ; preds = %"end for f126.s0.v3.v364"
  %7941 = trunc i64 %3710 to i32
  %7942 = add i32 %7941, 3
  %7943 = ashr i32 %7942, 1
  %7944 = and i32 %7942, 2
  %7945 = ashr i32 %7942, 2
  %t2709 = add nsw i32 %7945, %7944
  %7946 = sub nsw i32 %7943, %f72.v4.min_realized
  %7947 = mul nsw i32 %7946, %2134
  %t2712 = add nsw i32 %3563, %7947
  %7948 = sext i32 %t2712 to i64
  %7949 = getelementptr inbounds float, ptr %f72.host, i64 %7948
  %7950 = load <4 x float>, ptr %7949, align 4, !tbaa !48
  %7951 = add nsw i64 %7948, 4
  %7952 = getelementptr inbounds float, ptr %f72.host, i64 %7951
  %7953 = load <4 x float>, ptr %7952, align 4, !tbaa !48
  %7954 = shufflevector <4 x float> %7950, <4 x float> %7953, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2713 = fmul <4 x float> %232, %7954
  %a958 = fptosi <4 x float> %t2713 to <4 x i32>
  %a961 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a958)
  %7955 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a961, <4 x i32> zeroinitializer)
  %7956 = sitofp <4 x i32> %7955 to <4 x float>
  %t2715 = fsub <4 x float> %t2713, %7956
  %7957 = add nsw i32 %t2709, %2135
  %t2717 = mul nsw i32 %7957, %178
  %7958 = sub nsw i32 %7945, %f127.v4.min_realized
  %t2719 = mul nsw i32 %7958, %178
  %7959 = sub nsw i32 %7943, %f4.v4.min_realized
  %7960 = mul nsw i32 %7959, %f4.stride.1
  %t2720 = add nsw i32 %7960, %3564
  %t2722 = sub nsw <4 x i32> %7955, %241
  %7961 = add i32 %t2709, %2136
  %7962 = mul nsw i32 %7961, %f5.stride.1
  %t2725 = add nsw i32 %7962, %3565
  %t2726 = mul nsw <4 x i32> %t2722, %1511
  %t2728 = add nsw i32 %7962, %3566
  %7963 = sub nsw i32 %7945, %f5.v4.min_realized
  %7964 = mul nsw i32 %7963, %f5.stride.1
  %t2730 = add nsw i32 %7964, %3565
  %t2731 = add nsw i32 %7964, %3566
  %7965 = add nsw <4 x i32> %t2722, <i32 1, i32 1, i32 1, i32 1>
  %t2732 = mul nsw <4 x i32> %7965, %1511
  %7966 = shufflevector <4 x float> %7950, <4 x float> %7953, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2734 = fmul <4 x float> %232, %7966
  %a962 = fptosi <4 x float> %t2734 to <4 x i32>
  %a965 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a962)
  %7967 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a965, <4 x i32> zeroinitializer)
  %7968 = sitofp <4 x i32> %7967 to <4 x float>
  %t2736 = fsub <4 x float> %t2734, %7968
  %t2739 = sub nsw <4 x i32> %7967, %241
  %t2741 = add nsw i32 %7962, %3570
  %t2742 = mul nsw <4 x i32> %t2739, %1511
  %t2744 = add nsw i32 %7962, %3571
  %t2745 = add nsw i32 %7964, %3570
  %t2746 = add nsw i32 %7964, %3571
  %7969 = add nsw <4 x i32> %t2739, <i32 1, i32 1, i32 1, i32 1>
  %t2747 = mul nsw <4 x i32> %7969, %1511
  %7970 = insertelement <4 x i32> undef, i32 %t2731, i64 0
  %7971 = shufflevector <4 x i32> %7970, <4 x i32> undef, <4 x i32> zeroinitializer
  %7972 = add nsw <4 x i32> %7971, <i32 0, i32 1, i32 2, i32 3>
  %7973 = add nsw <4 x i32> %t2732, %7972
  %7974 = extractelement <4 x i32> %7973, i64 0
  %7975 = sext i32 %7974 to i64
  %7976 = getelementptr inbounds float, ptr %f5.host, i64 %7975
  %7977 = load float, ptr %7976, align 4, !tbaa !46
  %7978 = insertelement <4 x float> undef, float %7977, i64 0
  %7979 = extractelement <4 x i32> %7973, i64 1
  %7980 = sext i32 %7979 to i64
  %7981 = getelementptr inbounds float, ptr %f5.host, i64 %7980
  %7982 = load float, ptr %7981, align 4, !tbaa !46
  %7983 = insertelement <4 x float> %7978, float %7982, i64 1
  %7984 = extractelement <4 x i32> %7973, i64 2
  %7985 = sext i32 %7984 to i64
  %7986 = getelementptr inbounds float, ptr %f5.host, i64 %7985
  %7987 = load float, ptr %7986, align 4, !tbaa !46
  %7988 = insertelement <4 x float> %7983, float %7987, i64 2
  %7989 = extractelement <4 x i32> %7973, i64 3
  %7990 = sext i32 %7989 to i64
  %7991 = getelementptr inbounds float, ptr %f5.host, i64 %7990
  %7992 = load float, ptr %7991, align 4, !tbaa !46
  %7993 = insertelement <4 x float> %7988, float %7992, i64 3
  %7994 = fmul <4 x float> %7993, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7995 = insertelement <4 x i32> undef, i32 %t2730, i64 0
  %7996 = shufflevector <4 x i32> %7995, <4 x i32> undef, <4 x i32> zeroinitializer
  %7997 = add <4 x i32> %7996, <i32 -1, i32 0, i32 1, i32 2>
  %7998 = add <4 x i32> %7997, %t2732
  %7999 = extractelement <4 x i32> %7998, i64 0
  %8000 = sext i32 %7999 to i64
  %8001 = getelementptr inbounds float, ptr %f5.host, i64 %8000
  %8002 = load float, ptr %8001, align 4, !tbaa !46
  %8003 = insertelement <4 x float> undef, float %8002, i64 0
  %8004 = extractelement <4 x i32> %7998, i64 1
  %8005 = sext i32 %8004 to i64
  %8006 = getelementptr inbounds float, ptr %f5.host, i64 %8005
  %8007 = load float, ptr %8006, align 4, !tbaa !46
  %8008 = insertelement <4 x float> %8003, float %8007, i64 1
  %8009 = extractelement <4 x i32> %7998, i64 2
  %8010 = sext i32 %8009 to i64
  %8011 = getelementptr inbounds float, ptr %f5.host, i64 %8010
  %8012 = load float, ptr %8011, align 4, !tbaa !46
  %8013 = insertelement <4 x float> %8008, float %8012, i64 2
  %8014 = extractelement <4 x i32> %7998, i64 3
  %8015 = sext i32 %8014 to i64
  %8016 = getelementptr inbounds float, ptr %f5.host, i64 %8015
  %8017 = load float, ptr %8016, align 4, !tbaa !46
  %8018 = insertelement <4 x float> %8013, float %8017, i64 3
  %8019 = fmul <4 x float> %8018, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8020 = fadd <4 x float> %7994, %8019
  %8021 = fmul <4 x float> %8020, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8022 = insertelement <4 x i32> undef, i32 %t2728, i64 0
  %8023 = shufflevector <4 x i32> %8022, <4 x i32> undef, <4 x i32> zeroinitializer
  %8024 = add nsw <4 x i32> %8023, <i32 0, i32 1, i32 2, i32 3>
  %8025 = add nsw <4 x i32> %t2732, %8024
  %8026 = extractelement <4 x i32> %8025, i64 0
  %8027 = sext i32 %8026 to i64
  %8028 = getelementptr inbounds float, ptr %f5.host, i64 %8027
  %8029 = load float, ptr %8028, align 4, !tbaa !46
  %8030 = insertelement <4 x float> undef, float %8029, i64 0
  %8031 = extractelement <4 x i32> %8025, i64 1
  %8032 = sext i32 %8031 to i64
  %8033 = getelementptr inbounds float, ptr %f5.host, i64 %8032
  %8034 = load float, ptr %8033, align 4, !tbaa !46
  %8035 = insertelement <4 x float> %8030, float %8034, i64 1
  %8036 = extractelement <4 x i32> %8025, i64 2
  %8037 = sext i32 %8036 to i64
  %8038 = getelementptr inbounds float, ptr %f5.host, i64 %8037
  %8039 = load float, ptr %8038, align 4, !tbaa !46
  %8040 = insertelement <4 x float> %8035, float %8039, i64 2
  %8041 = extractelement <4 x i32> %8025, i64 3
  %8042 = sext i32 %8041 to i64
  %8043 = getelementptr inbounds float, ptr %f5.host, i64 %8042
  %8044 = load float, ptr %8043, align 4, !tbaa !46
  %8045 = insertelement <4 x float> %8040, float %8044, i64 3
  %8046 = fmul <4 x float> %8045, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8047 = insertelement <4 x i32> undef, i32 %t2725, i64 0
  %8048 = shufflevector <4 x i32> %8047, <4 x i32> undef, <4 x i32> zeroinitializer
  %8049 = add <4 x i32> %8048, <i32 -1, i32 0, i32 1, i32 2>
  %8050 = add <4 x i32> %8049, %t2732
  %8051 = extractelement <4 x i32> %8050, i64 0
  %8052 = sext i32 %8051 to i64
  %8053 = getelementptr inbounds float, ptr %f5.host, i64 %8052
  %8054 = load float, ptr %8053, align 4, !tbaa !46
  %8055 = insertelement <4 x float> undef, float %8054, i64 0
  %8056 = extractelement <4 x i32> %8050, i64 1
  %8057 = sext i32 %8056 to i64
  %8058 = getelementptr inbounds float, ptr %f5.host, i64 %8057
  %8059 = load float, ptr %8058, align 4, !tbaa !46
  %8060 = insertelement <4 x float> %8055, float %8059, i64 1
  %8061 = extractelement <4 x i32> %8050, i64 2
  %8062 = sext i32 %8061 to i64
  %8063 = getelementptr inbounds float, ptr %f5.host, i64 %8062
  %8064 = load float, ptr %8063, align 4, !tbaa !46
  %8065 = insertelement <4 x float> %8060, float %8064, i64 2
  %8066 = extractelement <4 x i32> %8050, i64 3
  %8067 = sext i32 %8066 to i64
  %8068 = getelementptr inbounds float, ptr %f5.host, i64 %8067
  %8069 = load float, ptr %8068, align 4, !tbaa !46
  %8070 = insertelement <4 x float> %8065, float %8069, i64 3
  %8071 = fmul <4 x float> %8070, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8072 = fadd <4 x float> %8046, %8071
  %8073 = fmul <4 x float> %8072, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8074 = fadd <4 x float> %8021, %8073
  %8075 = mul nsw <4 x i32> %7965, %2139
  %8076 = insertelement <4 x i32> undef, i32 %t2720, i64 0
  %8077 = shufflevector <4 x i32> %8076, <4 x i32> undef, <4 x i32> zeroinitializer
  %8078 = add nsw <4 x i32> %8077, <i32 0, i32 2, i32 4, i32 6>
  %8079 = add nsw <4 x i32> %8075, %8078
  %8080 = extractelement <4 x i32> %8079, i64 0
  %8081 = sext i32 %8080 to i64
  %8082 = getelementptr inbounds float, ptr %f4.host, i64 %8081
  %8083 = load float, ptr %8082, align 4, !tbaa !44
  %8084 = insertelement <4 x float> undef, float %8083, i64 0
  %8085 = extractelement <4 x i32> %8079, i64 1
  %8086 = sext i32 %8085 to i64
  %8087 = getelementptr inbounds float, ptr %f4.host, i64 %8086
  %8088 = load float, ptr %8087, align 4, !tbaa !44
  %8089 = insertelement <4 x float> %8084, float %8088, i64 1
  %8090 = extractelement <4 x i32> %8079, i64 2
  %8091 = sext i32 %8090 to i64
  %8092 = getelementptr inbounds float, ptr %f4.host, i64 %8091
  %8093 = load float, ptr %8092, align 4, !tbaa !44
  %8094 = insertelement <4 x float> %8089, float %8093, i64 2
  %8095 = extractelement <4 x i32> %8079, i64 3
  %8096 = sext i32 %8095 to i64
  %8097 = getelementptr inbounds float, ptr %f4.host, i64 %8096
  %8098 = load float, ptr %8097, align 4, !tbaa !44
  %8099 = insertelement <4 x float> %8094, float %8098, i64 3
  %8100 = fsub <4 x float> %8099, %8074
  %8101 = fmul <4 x float> %t2715, %8100
  %8102 = add nsw <4 x i32> %t2726, %7972
  %8103 = extractelement <4 x i32> %8102, i64 0
  %8104 = sext i32 %8103 to i64
  %8105 = getelementptr inbounds float, ptr %f5.host, i64 %8104
  %8106 = load float, ptr %8105, align 4, !tbaa !46
  %8107 = insertelement <4 x float> undef, float %8106, i64 0
  %8108 = extractelement <4 x i32> %8102, i64 1
  %8109 = sext i32 %8108 to i64
  %8110 = getelementptr inbounds float, ptr %f5.host, i64 %8109
  %8111 = load float, ptr %8110, align 4, !tbaa !46
  %8112 = insertelement <4 x float> %8107, float %8111, i64 1
  %8113 = extractelement <4 x i32> %8102, i64 2
  %8114 = sext i32 %8113 to i64
  %8115 = getelementptr inbounds float, ptr %f5.host, i64 %8114
  %8116 = load float, ptr %8115, align 4, !tbaa !46
  %8117 = insertelement <4 x float> %8112, float %8116, i64 2
  %8118 = extractelement <4 x i32> %8102, i64 3
  %8119 = sext i32 %8118 to i64
  %8120 = getelementptr inbounds float, ptr %f5.host, i64 %8119
  %8121 = load float, ptr %8120, align 4, !tbaa !46
  %8122 = insertelement <4 x float> %8117, float %8121, i64 3
  %8123 = fmul <4 x float> %8122, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8124 = add <4 x i32> %7997, %t2726
  %8125 = extractelement <4 x i32> %8124, i64 0
  %8126 = sext i32 %8125 to i64
  %8127 = getelementptr inbounds float, ptr %f5.host, i64 %8126
  %8128 = load float, ptr %8127, align 4, !tbaa !46
  %8129 = insertelement <4 x float> undef, float %8128, i64 0
  %8130 = extractelement <4 x i32> %8124, i64 1
  %8131 = sext i32 %8130 to i64
  %8132 = getelementptr inbounds float, ptr %f5.host, i64 %8131
  %8133 = load float, ptr %8132, align 4, !tbaa !46
  %8134 = insertelement <4 x float> %8129, float %8133, i64 1
  %8135 = extractelement <4 x i32> %8124, i64 2
  %8136 = sext i32 %8135 to i64
  %8137 = getelementptr inbounds float, ptr %f5.host, i64 %8136
  %8138 = load float, ptr %8137, align 4, !tbaa !46
  %8139 = insertelement <4 x float> %8134, float %8138, i64 2
  %8140 = extractelement <4 x i32> %8124, i64 3
  %8141 = sext i32 %8140 to i64
  %8142 = getelementptr inbounds float, ptr %f5.host, i64 %8141
  %8143 = load float, ptr %8142, align 4, !tbaa !46
  %8144 = insertelement <4 x float> %8139, float %8143, i64 3
  %8145 = fmul <4 x float> %8144, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8146 = fadd <4 x float> %8123, %8145
  %8147 = fmul <4 x float> %8146, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8148 = add nsw <4 x i32> %t2726, %8024
  %8149 = extractelement <4 x i32> %8148, i64 0
  %8150 = sext i32 %8149 to i64
  %8151 = getelementptr inbounds float, ptr %f5.host, i64 %8150
  %8152 = load float, ptr %8151, align 4, !tbaa !46
  %8153 = insertelement <4 x float> undef, float %8152, i64 0
  %8154 = extractelement <4 x i32> %8148, i64 1
  %8155 = sext i32 %8154 to i64
  %8156 = getelementptr inbounds float, ptr %f5.host, i64 %8155
  %8157 = load float, ptr %8156, align 4, !tbaa !46
  %8158 = insertelement <4 x float> %8153, float %8157, i64 1
  %8159 = extractelement <4 x i32> %8148, i64 2
  %8160 = sext i32 %8159 to i64
  %8161 = getelementptr inbounds float, ptr %f5.host, i64 %8160
  %8162 = load float, ptr %8161, align 4, !tbaa !46
  %8163 = insertelement <4 x float> %8158, float %8162, i64 2
  %8164 = extractelement <4 x i32> %8148, i64 3
  %8165 = sext i32 %8164 to i64
  %8166 = getelementptr inbounds float, ptr %f5.host, i64 %8165
  %8167 = load float, ptr %8166, align 4, !tbaa !46
  %8168 = insertelement <4 x float> %8163, float %8167, i64 3
  %8169 = fmul <4 x float> %8168, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8170 = add <4 x i32> %8049, %t2726
  %8171 = extractelement <4 x i32> %8170, i64 0
  %8172 = sext i32 %8171 to i64
  %8173 = getelementptr inbounds float, ptr %f5.host, i64 %8172
  %8174 = load float, ptr %8173, align 4, !tbaa !46
  %8175 = insertelement <4 x float> undef, float %8174, i64 0
  %8176 = extractelement <4 x i32> %8170, i64 1
  %8177 = sext i32 %8176 to i64
  %8178 = getelementptr inbounds float, ptr %f5.host, i64 %8177
  %8179 = load float, ptr %8178, align 4, !tbaa !46
  %8180 = insertelement <4 x float> %8175, float %8179, i64 1
  %8181 = extractelement <4 x i32> %8170, i64 2
  %8182 = sext i32 %8181 to i64
  %8183 = getelementptr inbounds float, ptr %f5.host, i64 %8182
  %8184 = load float, ptr %8183, align 4, !tbaa !46
  %8185 = insertelement <4 x float> %8180, float %8184, i64 2
  %8186 = extractelement <4 x i32> %8170, i64 3
  %8187 = sext i32 %8186 to i64
  %8188 = getelementptr inbounds float, ptr %f5.host, i64 %8187
  %8189 = load float, ptr %8188, align 4, !tbaa !46
  %8190 = insertelement <4 x float> %8185, float %8189, i64 3
  %8191 = fmul <4 x float> %8190, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8192 = fadd <4 x float> %8169, %8191
  %8193 = fmul <4 x float> %8192, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8194 = fadd <4 x float> %8147, %8193
  %8195 = mul nsw <4 x i32> %t2722, %2139
  %8196 = add nsw <4 x i32> %8195, %8078
  %8197 = extractelement <4 x i32> %8196, i64 0
  %8198 = sext i32 %8197 to i64
  %8199 = getelementptr inbounds float, ptr %f4.host, i64 %8198
  %8200 = load float, ptr %8199, align 4, !tbaa !44
  %8201 = insertelement <4 x float> undef, float %8200, i64 0
  %8202 = extractelement <4 x i32> %8196, i64 1
  %8203 = sext i32 %8202 to i64
  %8204 = getelementptr inbounds float, ptr %f4.host, i64 %8203
  %8205 = load float, ptr %8204, align 4, !tbaa !44
  %8206 = insertelement <4 x float> %8201, float %8205, i64 1
  %8207 = extractelement <4 x i32> %8196, i64 2
  %8208 = sext i32 %8207 to i64
  %8209 = getelementptr inbounds float, ptr %f4.host, i64 %8208
  %8210 = load float, ptr %8209, align 4, !tbaa !44
  %8211 = insertelement <4 x float> %8206, float %8210, i64 2
  %8212 = extractelement <4 x i32> %8196, i64 3
  %8213 = sext i32 %8212 to i64
  %8214 = getelementptr inbounds float, ptr %f4.host, i64 %8213
  %8215 = load float, ptr %8214, align 4, !tbaa !44
  %8216 = insertelement <4 x float> %8211, float %8215, i64 3
  %8217 = fsub <4 x float> %8216, %8194
  %8218 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2715
  %8219 = fmul <4 x float> %8218, %8217
  %8220 = fadd <4 x float> %8101, %8219
  %8221 = sext i32 %t2719 to i64
  %8222 = add nsw i64 %3573, %8221
  %8223 = getelementptr inbounds float, ptr %193, i64 %8222
  %8224 = load <4 x float>, ptr %8223, align 4, !tbaa !68
  %8225 = fmul <4 x float> %8224, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8226 = add nsw i64 %3576, %8221
  %8227 = getelementptr inbounds float, ptr %193, i64 %8226
  %8228 = load <4 x float>, ptr %8227, align 4, !tbaa !68
  %8229 = fmul <4 x float> %8228, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8230 = fadd <4 x float> %8225, %8229
  %8231 = fmul <4 x float> %8230, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8232 = sext i32 %t2717 to i64
  %8233 = add nsw i64 %3573, %8232
  %8234 = getelementptr inbounds float, ptr %193, i64 %8233
  %8235 = load <4 x float>, ptr %8234, align 4, !tbaa !68
  %8236 = fmul <4 x float> %8235, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8237 = add nsw i64 %3576, %8232
  %8238 = getelementptr inbounds float, ptr %193, i64 %8237
  %8239 = load <4 x float>, ptr %8238, align 4, !tbaa !68
  %8240 = fmul <4 x float> %8239, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8241 = fadd <4 x float> %8236, %8240
  %8242 = fmul <4 x float> %8241, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8243 = fadd <4 x float> %8231, %8242
  %8244 = fadd <4 x float> %8220, %8243
  %8245 = insertelement <4 x i32> undef, i32 %t2746, i64 0
  %8246 = shufflevector <4 x i32> %8245, <4 x i32> undef, <4 x i32> zeroinitializer
  %8247 = add nsw <4 x i32> %8246, <i32 0, i32 1, i32 2, i32 3>
  %8248 = add nsw <4 x i32> %t2747, %8247
  %8249 = extractelement <4 x i32> %8248, i64 0
  %8250 = sext i32 %8249 to i64
  %8251 = getelementptr inbounds float, ptr %f5.host, i64 %8250
  %8252 = load float, ptr %8251, align 4, !tbaa !46
  %8253 = insertelement <4 x float> undef, float %8252, i64 0
  %8254 = extractelement <4 x i32> %8248, i64 1
  %8255 = sext i32 %8254 to i64
  %8256 = getelementptr inbounds float, ptr %f5.host, i64 %8255
  %8257 = load float, ptr %8256, align 4, !tbaa !46
  %8258 = insertelement <4 x float> %8253, float %8257, i64 1
  %8259 = extractelement <4 x i32> %8248, i64 2
  %8260 = sext i32 %8259 to i64
  %8261 = getelementptr inbounds float, ptr %f5.host, i64 %8260
  %8262 = load float, ptr %8261, align 4, !tbaa !46
  %8263 = insertelement <4 x float> %8258, float %8262, i64 2
  %8264 = extractelement <4 x i32> %8248, i64 3
  %8265 = sext i32 %8264 to i64
  %8266 = getelementptr inbounds float, ptr %f5.host, i64 %8265
  %8267 = load float, ptr %8266, align 4, !tbaa !46
  %8268 = insertelement <4 x float> %8263, float %8267, i64 3
  %8269 = fmul <4 x float> %8268, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8270 = insertelement <4 x i32> undef, i32 %t2745, i64 0
  %8271 = shufflevector <4 x i32> %8270, <4 x i32> undef, <4 x i32> zeroinitializer
  %8272 = add <4 x i32> %8271, <i32 -1, i32 0, i32 1, i32 2>
  %8273 = add <4 x i32> %8272, %t2747
  %8274 = extractelement <4 x i32> %8273, i64 0
  %8275 = sext i32 %8274 to i64
  %8276 = getelementptr inbounds float, ptr %f5.host, i64 %8275
  %8277 = load float, ptr %8276, align 4, !tbaa !46
  %8278 = insertelement <4 x float> undef, float %8277, i64 0
  %8279 = extractelement <4 x i32> %8273, i64 1
  %8280 = sext i32 %8279 to i64
  %8281 = getelementptr inbounds float, ptr %f5.host, i64 %8280
  %8282 = load float, ptr %8281, align 4, !tbaa !46
  %8283 = insertelement <4 x float> %8278, float %8282, i64 1
  %8284 = extractelement <4 x i32> %8273, i64 2
  %8285 = sext i32 %8284 to i64
  %8286 = getelementptr inbounds float, ptr %f5.host, i64 %8285
  %8287 = load float, ptr %8286, align 4, !tbaa !46
  %8288 = insertelement <4 x float> %8283, float %8287, i64 2
  %8289 = extractelement <4 x i32> %8273, i64 3
  %8290 = sext i32 %8289 to i64
  %8291 = getelementptr inbounds float, ptr %f5.host, i64 %8290
  %8292 = load float, ptr %8291, align 4, !tbaa !46
  %8293 = insertelement <4 x float> %8288, float %8292, i64 3
  %8294 = fmul <4 x float> %8293, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8295 = fadd <4 x float> %8269, %8294
  %8296 = fmul <4 x float> %8295, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8297 = insertelement <4 x i32> undef, i32 %t2744, i64 0
  %8298 = shufflevector <4 x i32> %8297, <4 x i32> undef, <4 x i32> zeroinitializer
  %8299 = add nsw <4 x i32> %8298, <i32 0, i32 1, i32 2, i32 3>
  %8300 = add nsw <4 x i32> %t2747, %8299
  %8301 = extractelement <4 x i32> %8300, i64 0
  %8302 = sext i32 %8301 to i64
  %8303 = getelementptr inbounds float, ptr %f5.host, i64 %8302
  %8304 = load float, ptr %8303, align 4, !tbaa !46
  %8305 = insertelement <4 x float> undef, float %8304, i64 0
  %8306 = extractelement <4 x i32> %8300, i64 1
  %8307 = sext i32 %8306 to i64
  %8308 = getelementptr inbounds float, ptr %f5.host, i64 %8307
  %8309 = load float, ptr %8308, align 4, !tbaa !46
  %8310 = insertelement <4 x float> %8305, float %8309, i64 1
  %8311 = extractelement <4 x i32> %8300, i64 2
  %8312 = sext i32 %8311 to i64
  %8313 = getelementptr inbounds float, ptr %f5.host, i64 %8312
  %8314 = load float, ptr %8313, align 4, !tbaa !46
  %8315 = insertelement <4 x float> %8310, float %8314, i64 2
  %8316 = extractelement <4 x i32> %8300, i64 3
  %8317 = sext i32 %8316 to i64
  %8318 = getelementptr inbounds float, ptr %f5.host, i64 %8317
  %8319 = load float, ptr %8318, align 4, !tbaa !46
  %8320 = insertelement <4 x float> %8315, float %8319, i64 3
  %8321 = fmul <4 x float> %8320, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8322 = insertelement <4 x i32> undef, i32 %t2741, i64 0
  %8323 = shufflevector <4 x i32> %8322, <4 x i32> undef, <4 x i32> zeroinitializer
  %8324 = add <4 x i32> %8323, <i32 -1, i32 0, i32 1, i32 2>
  %8325 = add <4 x i32> %8324, %t2747
  %8326 = extractelement <4 x i32> %8325, i64 0
  %8327 = sext i32 %8326 to i64
  %8328 = getelementptr inbounds float, ptr %f5.host, i64 %8327
  %8329 = load float, ptr %8328, align 4, !tbaa !46
  %8330 = insertelement <4 x float> undef, float %8329, i64 0
  %8331 = extractelement <4 x i32> %8325, i64 1
  %8332 = sext i32 %8331 to i64
  %8333 = getelementptr inbounds float, ptr %f5.host, i64 %8332
  %8334 = load float, ptr %8333, align 4, !tbaa !46
  %8335 = insertelement <4 x float> %8330, float %8334, i64 1
  %8336 = extractelement <4 x i32> %8325, i64 2
  %8337 = sext i32 %8336 to i64
  %8338 = getelementptr inbounds float, ptr %f5.host, i64 %8337
  %8339 = load float, ptr %8338, align 4, !tbaa !46
  %8340 = insertelement <4 x float> %8335, float %8339, i64 2
  %8341 = extractelement <4 x i32> %8325, i64 3
  %8342 = sext i32 %8341 to i64
  %8343 = getelementptr inbounds float, ptr %f5.host, i64 %8342
  %8344 = load float, ptr %8343, align 4, !tbaa !46
  %8345 = insertelement <4 x float> %8340, float %8344, i64 3
  %8346 = fmul <4 x float> %8345, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8347 = fadd <4 x float> %8321, %8346
  %8348 = fmul <4 x float> %8347, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8349 = fadd <4 x float> %8296, %8348
  %8350 = mul nsw <4 x i32> %7969, %2139
  %8351 = add nsw i32 %t2720, 1
  %8352 = insertelement <4 x i32> undef, i32 %8351, i64 0
  %8353 = shufflevector <4 x i32> %8352, <4 x i32> undef, <4 x i32> zeroinitializer
  %8354 = add nsw <4 x i32> %8353, <i32 0, i32 2, i32 4, i32 6>
  %8355 = add nsw <4 x i32> %8350, %8354
  %8356 = extractelement <4 x i32> %8355, i64 0
  %8357 = sext i32 %8356 to i64
  %8358 = getelementptr inbounds float, ptr %f4.host, i64 %8357
  %8359 = load float, ptr %8358, align 4, !tbaa !44
  %8360 = insertelement <4 x float> undef, float %8359, i64 0
  %8361 = extractelement <4 x i32> %8355, i64 1
  %8362 = sext i32 %8361 to i64
  %8363 = getelementptr inbounds float, ptr %f4.host, i64 %8362
  %8364 = load float, ptr %8363, align 4, !tbaa !44
  %8365 = insertelement <4 x float> %8360, float %8364, i64 1
  %8366 = extractelement <4 x i32> %8355, i64 2
  %8367 = sext i32 %8366 to i64
  %8368 = getelementptr inbounds float, ptr %f4.host, i64 %8367
  %8369 = load float, ptr %8368, align 4, !tbaa !44
  %8370 = insertelement <4 x float> %8365, float %8369, i64 2
  %8371 = extractelement <4 x i32> %8355, i64 3
  %8372 = sext i32 %8371 to i64
  %8373 = getelementptr inbounds float, ptr %f4.host, i64 %8372
  %8374 = load float, ptr %8373, align 4, !tbaa !44
  %8375 = insertelement <4 x float> %8370, float %8374, i64 3
  %8376 = fsub <4 x float> %8375, %8349
  %8377 = fmul <4 x float> %t2736, %8376
  %8378 = add nsw <4 x i32> %t2742, %8247
  %8379 = extractelement <4 x i32> %8378, i64 0
  %8380 = sext i32 %8379 to i64
  %8381 = getelementptr inbounds float, ptr %f5.host, i64 %8380
  %8382 = load float, ptr %8381, align 4, !tbaa !46
  %8383 = insertelement <4 x float> undef, float %8382, i64 0
  %8384 = extractelement <4 x i32> %8378, i64 1
  %8385 = sext i32 %8384 to i64
  %8386 = getelementptr inbounds float, ptr %f5.host, i64 %8385
  %8387 = load float, ptr %8386, align 4, !tbaa !46
  %8388 = insertelement <4 x float> %8383, float %8387, i64 1
  %8389 = extractelement <4 x i32> %8378, i64 2
  %8390 = sext i32 %8389 to i64
  %8391 = getelementptr inbounds float, ptr %f5.host, i64 %8390
  %8392 = load float, ptr %8391, align 4, !tbaa !46
  %8393 = insertelement <4 x float> %8388, float %8392, i64 2
  %8394 = extractelement <4 x i32> %8378, i64 3
  %8395 = sext i32 %8394 to i64
  %8396 = getelementptr inbounds float, ptr %f5.host, i64 %8395
  %8397 = load float, ptr %8396, align 4, !tbaa !46
  %8398 = insertelement <4 x float> %8393, float %8397, i64 3
  %8399 = fmul <4 x float> %8398, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8400 = add <4 x i32> %8272, %t2742
  %8401 = extractelement <4 x i32> %8400, i64 0
  %8402 = sext i32 %8401 to i64
  %8403 = getelementptr inbounds float, ptr %f5.host, i64 %8402
  %8404 = load float, ptr %8403, align 4, !tbaa !46
  %8405 = insertelement <4 x float> undef, float %8404, i64 0
  %8406 = extractelement <4 x i32> %8400, i64 1
  %8407 = sext i32 %8406 to i64
  %8408 = getelementptr inbounds float, ptr %f5.host, i64 %8407
  %8409 = load float, ptr %8408, align 4, !tbaa !46
  %8410 = insertelement <4 x float> %8405, float %8409, i64 1
  %8411 = extractelement <4 x i32> %8400, i64 2
  %8412 = sext i32 %8411 to i64
  %8413 = getelementptr inbounds float, ptr %f5.host, i64 %8412
  %8414 = load float, ptr %8413, align 4, !tbaa !46
  %8415 = insertelement <4 x float> %8410, float %8414, i64 2
  %8416 = extractelement <4 x i32> %8400, i64 3
  %8417 = sext i32 %8416 to i64
  %8418 = getelementptr inbounds float, ptr %f5.host, i64 %8417
  %8419 = load float, ptr %8418, align 4, !tbaa !46
  %8420 = insertelement <4 x float> %8415, float %8419, i64 3
  %8421 = fmul <4 x float> %8420, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8422 = fadd <4 x float> %8399, %8421
  %8423 = fmul <4 x float> %8422, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8424 = add nsw <4 x i32> %t2742, %8299
  %8425 = extractelement <4 x i32> %8424, i64 0
  %8426 = sext i32 %8425 to i64
  %8427 = getelementptr inbounds float, ptr %f5.host, i64 %8426
  %8428 = load float, ptr %8427, align 4, !tbaa !46
  %8429 = insertelement <4 x float> undef, float %8428, i64 0
  %8430 = extractelement <4 x i32> %8424, i64 1
  %8431 = sext i32 %8430 to i64
  %8432 = getelementptr inbounds float, ptr %f5.host, i64 %8431
  %8433 = load float, ptr %8432, align 4, !tbaa !46
  %8434 = insertelement <4 x float> %8429, float %8433, i64 1
  %8435 = extractelement <4 x i32> %8424, i64 2
  %8436 = sext i32 %8435 to i64
  %8437 = getelementptr inbounds float, ptr %f5.host, i64 %8436
  %8438 = load float, ptr %8437, align 4, !tbaa !46
  %8439 = insertelement <4 x float> %8434, float %8438, i64 2
  %8440 = extractelement <4 x i32> %8424, i64 3
  %8441 = sext i32 %8440 to i64
  %8442 = getelementptr inbounds float, ptr %f5.host, i64 %8441
  %8443 = load float, ptr %8442, align 4, !tbaa !46
  %8444 = insertelement <4 x float> %8439, float %8443, i64 3
  %8445 = fmul <4 x float> %8444, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8446 = add <4 x i32> %8324, %t2742
  %8447 = extractelement <4 x i32> %8446, i64 0
  %8448 = sext i32 %8447 to i64
  %8449 = getelementptr inbounds float, ptr %f5.host, i64 %8448
  %8450 = load float, ptr %8449, align 4, !tbaa !46
  %8451 = insertelement <4 x float> undef, float %8450, i64 0
  %8452 = extractelement <4 x i32> %8446, i64 1
  %8453 = sext i32 %8452 to i64
  %8454 = getelementptr inbounds float, ptr %f5.host, i64 %8453
  %8455 = load float, ptr %8454, align 4, !tbaa !46
  %8456 = insertelement <4 x float> %8451, float %8455, i64 1
  %8457 = extractelement <4 x i32> %8446, i64 2
  %8458 = sext i32 %8457 to i64
  %8459 = getelementptr inbounds float, ptr %f5.host, i64 %8458
  %8460 = load float, ptr %8459, align 4, !tbaa !46
  %8461 = insertelement <4 x float> %8456, float %8460, i64 2
  %8462 = extractelement <4 x i32> %8446, i64 3
  %8463 = sext i32 %8462 to i64
  %8464 = getelementptr inbounds float, ptr %f5.host, i64 %8463
  %8465 = load float, ptr %8464, align 4, !tbaa !46
  %8466 = insertelement <4 x float> %8461, float %8465, i64 3
  %8467 = fmul <4 x float> %8466, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8468 = fadd <4 x float> %8445, %8467
  %8469 = fmul <4 x float> %8468, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8470 = fadd <4 x float> %8423, %8469
  %8471 = mul nsw <4 x i32> %t2739, %2139
  %8472 = add nsw <4 x i32> %8471, %8354
  %8473 = extractelement <4 x i32> %8472, i64 0
  %8474 = sext i32 %8473 to i64
  %8475 = getelementptr inbounds float, ptr %f4.host, i64 %8474
  %8476 = load float, ptr %8475, align 4, !tbaa !44
  %8477 = insertelement <4 x float> undef, float %8476, i64 0
  %8478 = extractelement <4 x i32> %8472, i64 1
  %8479 = sext i32 %8478 to i64
  %8480 = getelementptr inbounds float, ptr %f4.host, i64 %8479
  %8481 = load float, ptr %8480, align 4, !tbaa !44
  %8482 = insertelement <4 x float> %8477, float %8481, i64 1
  %8483 = extractelement <4 x i32> %8472, i64 2
  %8484 = sext i32 %8483 to i64
  %8485 = getelementptr inbounds float, ptr %f4.host, i64 %8484
  %8486 = load float, ptr %8485, align 4, !tbaa !44
  %8487 = insertelement <4 x float> %8482, float %8486, i64 2
  %8488 = extractelement <4 x i32> %8472, i64 3
  %8489 = sext i32 %8488 to i64
  %8490 = getelementptr inbounds float, ptr %f4.host, i64 %8489
  %8491 = load float, ptr %8490, align 4, !tbaa !44
  %8492 = insertelement <4 x float> %8487, float %8491, i64 3
  %8493 = fsub <4 x float> %8492, %8470
  %8494 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2736
  %8495 = fmul <4 x float> %8494, %8493
  %8496 = fadd <4 x float> %8377, %8495
  %8497 = add nsw i64 %3578, %8221
  %8498 = getelementptr inbounds float, ptr %193, i64 %8497
  %8499 = load <4 x float>, ptr %8498, align 4, !tbaa !68
  %8500 = fmul <4 x float> %8499, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8501 = add nsw i64 %3581, %8221
  %8502 = getelementptr inbounds float, ptr %193, i64 %8501
  %8503 = load <4 x float>, ptr %8502, align 4, !tbaa !68
  %8504 = fmul <4 x float> %8503, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8505 = fadd <4 x float> %8500, %8504
  %8506 = fmul <4 x float> %8505, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8507 = add nsw i64 %3578, %8232
  %8508 = getelementptr inbounds float, ptr %193, i64 %8507
  %8509 = load <4 x float>, ptr %8508, align 4, !tbaa !68
  %8510 = fmul <4 x float> %8509, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8511 = add nsw i64 %3581, %8232
  %8512 = getelementptr inbounds float, ptr %193, i64 %8511
  %8513 = load <4 x float>, ptr %8512, align 4, !tbaa !68
  %8514 = fmul <4 x float> %8513, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8515 = fadd <4 x float> %8510, %8514
  %8516 = fmul <4 x float> %8515, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8517 = fadd <4 x float> %8506, %8516
  %8518 = fadd <4 x float> %8496, %8517
  %8519 = shufflevector <4 x float> %8244, <4 x float> %8518, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %8520 = sext i32 %7943 to i64
  %8521 = sub nsw i64 %8520, %2142
  %8522 = mul nsw i64 %8521, %2141
  %8523 = add nsw i64 %3583, %8522
  %8524 = getelementptr inbounds float, ptr %222, i64 %8523
  store <8 x float> %8519, ptr %8524, align 4, !tbaa !70
  br label %"assert succeeded72"

"assert succeeded72":                             ; preds = %"for f126.s0.v3.v366.preheader", %"produce f12658", %"end for f126.s0.v3.v364"
  %8525 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2765)
  %.not105 = icmp eq ptr %8525, null
  br i1 %.not105, label %"assert failed73", label %"produce f12576", !prof !4

"assert failed73":                                ; preds = %"assert succeeded72"
  %8526 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f12576":                                 ; preds = %"assert succeeded72"
  br i1 %.not200, label %"end for f125.s0.v3.v378", label %"for f125.s0.v3.v377.preheader", !prof !4

"for f125.s0.v3.v377.preheader":                  ; preds = %"produce f12576"
  %scevgep = getelementptr i8, ptr %8525, i64 %3434
  %scevgep309 = getelementptr i8, ptr %scevgep, i64 %3586
  %8527 = add i32 %3709, %3436
  %8528 = shl nuw nsw i32 %7322, 1
  %8529 = ashr i32 %7321, 1
  %t2749 = add nsw i32 %8529, %3590
  %8530 = add i32 %t2749, %8528
  %t2763 = mul nsw i32 %8530, %207
  %8531 = sub nsw i32 %8529, %158
  %t2765 = mul nsw i32 %8531, %207
  %8532 = add i32 %8527, %8529
  %8533 = mul i32 %8532, %f4.stride.1
  %8534 = sub nsw i32 %8529, %f4.v4.min_realized
  %8535 = mul nsw i32 %8534, %f4.stride.1
  %8536 = sext i32 %t2765 to i64
  %8537 = add nsw i64 %8536, -1
  %8538 = sext i32 %t2763 to i64
  %8539 = add nsw i64 %8538, -1
  br label %"for f125.s0.v3.v377"

"for f125.s0.v3.v377":                            ; preds = %"for f125.s0.v3.v377", %"for f125.s0.v3.v377.preheader"
  %lsr.iv331 = phi i32 [ %lsr.iv329, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next332, %"for f125.s0.v3.v377" ]
  %lsr.iv311 = phi i64 [ 0, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next312, %"for f125.s0.v3.v377" ]
  %lsr.iv307 = phi i32 [ %a970, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next308, %"for f125.s0.v3.v377" ]
  %8540 = sext i32 %lsr.iv331 to i64
  %8541 = getelementptr inbounds float, ptr %f2.host, i64 %8540
  %8542 = load <4 x float>, ptr %8541, align 4, !tbaa !42
  %8543 = add nsw i64 %8540, 4
  %8544 = getelementptr inbounds float, ptr %f2.host, i64 %8543
  %8545 = load <4 x float>, ptr %8544, align 4, !tbaa !42
  %t2754 = shufflevector <4 x float> %8542, <4 x float> %8545, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2755 = shufflevector <4 x float> %8542, <4 x float> %8545, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2756 = fmul <4 x float> %232, %t2754
  %t2757 = fmul <4 x float> %232, %t2755
  %a971 = fptosi <4 x float> %t2757 to <4 x i32>
  %a978 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a971)
  %8546 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a978, <4 x i32> zeroinitializer)
  %t2759 = sitofp <4 x i32> %8546 to <4 x float>
  %t2760 = fmul <4 x float> %3589, %t2759
  %8547 = add nuw nsw <4 x i32> %8546, <i32 1, i32 1, i32 1, i32 1>
  %8548 = sitofp <4 x i32> %8547 to <4 x float>
  %t2761 = fmul <4 x float> %3589, %8548
  %8549 = fmul <4 x float> %t2757, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a976 = fptosi <4 x float> %8549 to <4 x i32>
  %a975 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a976)
  %8550 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a975, <4 x i32> zeroinitializer)
  %8551 = shl <4 x i32> %8546, <i32 8, i32 8, i32 8, i32 8>
  %.neg253 = sub <4 x i32> %.neg251, %8551
  %t2766 = add <4 x i32> %.neg253, %8550
  %t2771 = sub nsw <4 x i32> %8546, %241
  %t2772 = mul nsw <4 x i32> %t2771, %2139
  %8552 = add nsw <4 x i32> %t2771, <i32 1, i32 1, i32 1, i32 1>
  %t2778 = mul nsw <4 x i32> %8552, %2139
  %a979 = fptosi <4 x float> %t2756 to <4 x i32>
  %a986 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a979)
  %8553 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a986, <4 x i32> zeroinitializer)
  %t2782 = sitofp <4 x i32> %8553 to <4 x float>
  %t2783 = fmul <4 x float> %3589, %t2782
  %8554 = add nuw nsw <4 x i32> %8553, <i32 1, i32 1, i32 1, i32 1>
  %8555 = sitofp <4 x i32> %8554 to <4 x float>
  %t2784 = fmul <4 x float> %3589, %8555
  %8556 = fmul <4 x float> %t2756, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a984 = fptosi <4 x float> %8556 to <4 x i32>
  %a983 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a984)
  %8557 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a983, <4 x i32> zeroinitializer)
  %8558 = shl <4 x i32> %8553, <i32 8, i32 8, i32 8, i32 8>
  %.neg255 = sub <4 x i32> %.neg251, %8558
  %t2787 = add <4 x i32> %.neg255, %8557
  %t2790 = sub nsw <4 x i32> %8553, %241
  %t2791 = mul nsw <4 x i32> %t2790, %2139
  %8559 = add nsw <4 x i32> %t2790, <i32 1, i32 1, i32 1, i32 1>
  %t2796 = mul nsw <4 x i32> %8559, %2139
  %8560 = trunc i64 %lsr.iv311 to i32
  %8561 = sub i32 %8560, %f4.v3.min_realized
  %8562 = add i32 %8535, %8561
  %tmp336 = add i32 %8562, %161
  %8563 = insertelement <4 x i32> undef, i32 %tmp336, i64 0
  %8564 = shufflevector <4 x i32> %8563, <4 x i32> undef, <4 x i32> zeroinitializer
  %8565 = add nsw <4 x i32> %8564, <i32 0, i32 1, i32 2, i32 3>
  %8566 = add nsw <4 x i32> %t2778, %8565
  %8567 = extractelement <4 x i32> %8566, i64 0
  %8568 = sext i32 %8567 to i64
  %8569 = getelementptr inbounds float, ptr %f4.host, i64 %8568
  %8570 = load float, ptr %8569, align 4, !tbaa !44
  %8571 = insertelement <4 x float> undef, float %8570, i64 0
  %8572 = extractelement <4 x i32> %8566, i64 1
  %8573 = sext i32 %8572 to i64
  %8574 = getelementptr inbounds float, ptr %f4.host, i64 %8573
  %8575 = load float, ptr %8574, align 4, !tbaa !44
  %8576 = insertelement <4 x float> %8571, float %8575, i64 1
  %8577 = extractelement <4 x i32> %8566, i64 2
  %8578 = sext i32 %8577 to i64
  %8579 = getelementptr inbounds float, ptr %f4.host, i64 %8578
  %8580 = load float, ptr %8579, align 4, !tbaa !44
  %8581 = insertelement <4 x float> %8576, float %8580, i64 2
  %8582 = extractelement <4 x i32> %8566, i64 3
  %8583 = sext i32 %8582 to i64
  %8584 = getelementptr inbounds float, ptr %f4.host, i64 %8583
  %8585 = load float, ptr %8584, align 4, !tbaa !44
  %8586 = insertelement <4 x float> %8581, float %8585, i64 3
  %8587 = fmul <4 x float> %8586, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8588 = trunc i64 %lsr.iv311 to i32
  %8589 = sub i32 %8588, %f4.v3.min_realized
  %8590 = add i32 %8589, %3448
  %8591 = add i32 %8590, %161
  %tmp342 = add i32 %8591, %8535
  %8592 = insertelement <4 x i32> undef, i32 %tmp342, i64 0
  %8593 = shufflevector <4 x i32> %8592, <4 x i32> undef, <4 x i32> zeroinitializer
  %8594 = add <4 x i32> %8593, <i32 -1, i32 0, i32 1, i32 2>
  %8595 = add <4 x i32> %8594, %t2778
  %8596 = extractelement <4 x i32> %8595, i64 0
  %8597 = sext i32 %8596 to i64
  %8598 = getelementptr inbounds float, ptr %f4.host, i64 %8597
  %8599 = load float, ptr %8598, align 4, !tbaa !44
  %8600 = insertelement <4 x float> undef, float %8599, i64 0
  %8601 = extractelement <4 x i32> %8595, i64 1
  %8602 = sext i32 %8601 to i64
  %8603 = getelementptr inbounds float, ptr %f4.host, i64 %8602
  %8604 = load float, ptr %8603, align 4, !tbaa !44
  %8605 = insertelement <4 x float> %8600, float %8604, i64 1
  %8606 = extractelement <4 x i32> %8595, i64 2
  %8607 = sext i32 %8606 to i64
  %8608 = getelementptr inbounds float, ptr %f4.host, i64 %8607
  %8609 = load float, ptr %8608, align 4, !tbaa !44
  %8610 = insertelement <4 x float> %8605, float %8609, i64 2
  %8611 = extractelement <4 x i32> %8595, i64 3
  %8612 = sext i32 %8611 to i64
  %8613 = getelementptr inbounds float, ptr %f4.host, i64 %8612
  %8614 = load float, ptr %8613, align 4, !tbaa !44
  %8615 = insertelement <4 x float> %8610, float %8614, i64 3
  %8616 = fmul <4 x float> %8615, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8617 = fadd <4 x float> %8587, %8616
  %8618 = fmul <4 x float> %8617, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8619 = add i32 %8533, %8561
  %tmp338 = add i32 %8619, %161
  %8620 = insertelement <4 x i32> undef, i32 %tmp338, i64 0
  %8621 = shufflevector <4 x i32> %8620, <4 x i32> undef, <4 x i32> zeroinitializer
  %8622 = add nsw <4 x i32> %8621, <i32 0, i32 1, i32 2, i32 3>
  %8623 = add nsw <4 x i32> %t2778, %8622
  %8624 = extractelement <4 x i32> %8623, i64 0
  %8625 = sext i32 %8624 to i64
  %8626 = getelementptr inbounds float, ptr %f4.host, i64 %8625
  %8627 = load float, ptr %8626, align 4, !tbaa !44
  %8628 = insertelement <4 x float> undef, float %8627, i64 0
  %8629 = extractelement <4 x i32> %8623, i64 1
  %8630 = sext i32 %8629 to i64
  %8631 = getelementptr inbounds float, ptr %f4.host, i64 %8630
  %8632 = load float, ptr %8631, align 4, !tbaa !44
  %8633 = insertelement <4 x float> %8628, float %8632, i64 1
  %8634 = extractelement <4 x i32> %8623, i64 2
  %8635 = sext i32 %8634 to i64
  %8636 = getelementptr inbounds float, ptr %f4.host, i64 %8635
  %8637 = load float, ptr %8636, align 4, !tbaa !44
  %8638 = insertelement <4 x float> %8633, float %8637, i64 2
  %8639 = extractelement <4 x i32> %8623, i64 3
  %8640 = sext i32 %8639 to i64
  %8641 = getelementptr inbounds float, ptr %f4.host, i64 %8640
  %8642 = load float, ptr %8641, align 4, !tbaa !44
  %8643 = insertelement <4 x float> %8638, float %8642, i64 3
  %8644 = fmul <4 x float> %8643, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp344 = add i32 %8591, %8533
  %8645 = insertelement <4 x i32> undef, i32 %tmp344, i64 0
  %8646 = shufflevector <4 x i32> %8645, <4 x i32> undef, <4 x i32> zeroinitializer
  %8647 = add <4 x i32> %8646, <i32 -1, i32 0, i32 1, i32 2>
  %8648 = add <4 x i32> %8647, %t2778
  %8649 = extractelement <4 x i32> %8648, i64 0
  %8650 = sext i32 %8649 to i64
  %8651 = getelementptr inbounds float, ptr %f4.host, i64 %8650
  %8652 = load float, ptr %8651, align 4, !tbaa !44
  %8653 = insertelement <4 x float> undef, float %8652, i64 0
  %8654 = extractelement <4 x i32> %8648, i64 1
  %8655 = sext i32 %8654 to i64
  %8656 = getelementptr inbounds float, ptr %f4.host, i64 %8655
  %8657 = load float, ptr %8656, align 4, !tbaa !44
  %8658 = insertelement <4 x float> %8653, float %8657, i64 1
  %8659 = extractelement <4 x i32> %8648, i64 2
  %8660 = sext i32 %8659 to i64
  %8661 = getelementptr inbounds float, ptr %f4.host, i64 %8660
  %8662 = load float, ptr %8661, align 4, !tbaa !44
  %8663 = insertelement <4 x float> %8658, float %8662, i64 2
  %8664 = extractelement <4 x i32> %8648, i64 3
  %8665 = sext i32 %8664 to i64
  %8666 = getelementptr inbounds float, ptr %f4.host, i64 %8665
  %8667 = load float, ptr %8666, align 4, !tbaa !44
  %8668 = insertelement <4 x float> %8663, float %8667, i64 3
  %8669 = fmul <4 x float> %8668, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8670 = fadd <4 x float> %8644, %8669
  %8671 = fmul <4 x float> %8670, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8672 = fadd <4 x float> %8618, %8671
  %8673 = extractelement <4 x i32> %t2766, i64 0
  %8674 = sext i32 %8673 to i64
  %8675 = getelementptr inbounds float, ptr %f0.host, i64 %8674
  %8676 = load float, ptr %8675, align 4, !tbaa !6
  %8677 = insertelement <4 x float> undef, float %8676, i64 0
  %8678 = extractelement <4 x i32> %t2766, i64 1
  %8679 = sext i32 %8678 to i64
  %8680 = getelementptr inbounds float, ptr %f0.host, i64 %8679
  %8681 = load float, ptr %8680, align 4, !tbaa !6
  %8682 = insertelement <4 x float> %8677, float %8681, i64 1
  %8683 = extractelement <4 x i32> %t2766, i64 2
  %8684 = sext i32 %8683 to i64
  %8685 = getelementptr inbounds float, ptr %f0.host, i64 %8684
  %8686 = load float, ptr %8685, align 4, !tbaa !6
  %8687 = insertelement <4 x float> %8682, float %8686, i64 2
  %8688 = extractelement <4 x i32> %t2766, i64 3
  %8689 = sext i32 %8688 to i64
  %8690 = getelementptr inbounds float, ptr %f0.host, i64 %8689
  %8691 = load float, ptr %8690, align 4, !tbaa !6
  %8692 = insertelement <4 x float> %8687, float %8691, i64 3
  %8693 = fsub <4 x float> %t2755, %t2761
  %8694 = fmul <4 x float> %3598, %8693
  %8695 = fadd <4 x float> %t2761, %8694
  %8696 = fadd <4 x float> %8695, %8692
  %8697 = fsub <4 x float> %8696, %8672
  %8698 = fsub <4 x float> %t2757, %t2759
  %8699 = fmul <4 x float> %8698, %8697
  %8700 = add nsw <4 x i32> %t2772, %8565
  %8701 = extractelement <4 x i32> %8700, i64 0
  %8702 = sext i32 %8701 to i64
  %8703 = getelementptr inbounds float, ptr %f4.host, i64 %8702
  %8704 = load float, ptr %8703, align 4, !tbaa !44
  %8705 = insertelement <4 x float> undef, float %8704, i64 0
  %8706 = extractelement <4 x i32> %8700, i64 1
  %8707 = sext i32 %8706 to i64
  %8708 = getelementptr inbounds float, ptr %f4.host, i64 %8707
  %8709 = load float, ptr %8708, align 4, !tbaa !44
  %8710 = insertelement <4 x float> %8705, float %8709, i64 1
  %8711 = extractelement <4 x i32> %8700, i64 2
  %8712 = sext i32 %8711 to i64
  %8713 = getelementptr inbounds float, ptr %f4.host, i64 %8712
  %8714 = load float, ptr %8713, align 4, !tbaa !44
  %8715 = insertelement <4 x float> %8710, float %8714, i64 2
  %8716 = extractelement <4 x i32> %8700, i64 3
  %8717 = sext i32 %8716 to i64
  %8718 = getelementptr inbounds float, ptr %f4.host, i64 %8717
  %8719 = load float, ptr %8718, align 4, !tbaa !44
  %8720 = insertelement <4 x float> %8715, float %8719, i64 3
  %8721 = fmul <4 x float> %8720, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8722 = add <4 x i32> %8594, %t2772
  %8723 = extractelement <4 x i32> %8722, i64 0
  %8724 = sext i32 %8723 to i64
  %8725 = getelementptr inbounds float, ptr %f4.host, i64 %8724
  %8726 = load float, ptr %8725, align 4, !tbaa !44
  %8727 = insertelement <4 x float> undef, float %8726, i64 0
  %8728 = extractelement <4 x i32> %8722, i64 1
  %8729 = sext i32 %8728 to i64
  %8730 = getelementptr inbounds float, ptr %f4.host, i64 %8729
  %8731 = load float, ptr %8730, align 4, !tbaa !44
  %8732 = insertelement <4 x float> %8727, float %8731, i64 1
  %8733 = extractelement <4 x i32> %8722, i64 2
  %8734 = sext i32 %8733 to i64
  %8735 = getelementptr inbounds float, ptr %f4.host, i64 %8734
  %8736 = load float, ptr %8735, align 4, !tbaa !44
  %8737 = insertelement <4 x float> %8732, float %8736, i64 2
  %8738 = extractelement <4 x i32> %8722, i64 3
  %8739 = sext i32 %8738 to i64
  %8740 = getelementptr inbounds float, ptr %f4.host, i64 %8739
  %8741 = load float, ptr %8740, align 4, !tbaa !44
  %8742 = insertelement <4 x float> %8737, float %8741, i64 3
  %8743 = fmul <4 x float> %8742, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8744 = fadd <4 x float> %8721, %8743
  %8745 = fmul <4 x float> %8744, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8746 = add nsw <4 x i32> %t2772, %8622
  %8747 = extractelement <4 x i32> %8746, i64 0
  %8748 = sext i32 %8747 to i64
  %8749 = getelementptr inbounds float, ptr %f4.host, i64 %8748
  %8750 = load float, ptr %8749, align 4, !tbaa !44
  %8751 = insertelement <4 x float> undef, float %8750, i64 0
  %8752 = extractelement <4 x i32> %8746, i64 1
  %8753 = sext i32 %8752 to i64
  %8754 = getelementptr inbounds float, ptr %f4.host, i64 %8753
  %8755 = load float, ptr %8754, align 4, !tbaa !44
  %8756 = insertelement <4 x float> %8751, float %8755, i64 1
  %8757 = extractelement <4 x i32> %8746, i64 2
  %8758 = sext i32 %8757 to i64
  %8759 = getelementptr inbounds float, ptr %f4.host, i64 %8758
  %8760 = load float, ptr %8759, align 4, !tbaa !44
  %8761 = insertelement <4 x float> %8756, float %8760, i64 2
  %8762 = extractelement <4 x i32> %8746, i64 3
  %8763 = sext i32 %8762 to i64
  %8764 = getelementptr inbounds float, ptr %f4.host, i64 %8763
  %8765 = load float, ptr %8764, align 4, !tbaa !44
  %8766 = insertelement <4 x float> %8761, float %8765, i64 3
  %8767 = fmul <4 x float> %8766, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8768 = add <4 x i32> %8647, %t2772
  %8769 = extractelement <4 x i32> %8768, i64 0
  %8770 = sext i32 %8769 to i64
  %8771 = getelementptr inbounds float, ptr %f4.host, i64 %8770
  %8772 = load float, ptr %8771, align 4, !tbaa !44
  %8773 = insertelement <4 x float> undef, float %8772, i64 0
  %8774 = extractelement <4 x i32> %8768, i64 1
  %8775 = sext i32 %8774 to i64
  %8776 = getelementptr inbounds float, ptr %f4.host, i64 %8775
  %8777 = load float, ptr %8776, align 4, !tbaa !44
  %8778 = insertelement <4 x float> %8773, float %8777, i64 1
  %8779 = extractelement <4 x i32> %8768, i64 2
  %8780 = sext i32 %8779 to i64
  %8781 = getelementptr inbounds float, ptr %f4.host, i64 %8780
  %8782 = load float, ptr %8781, align 4, !tbaa !44
  %8783 = insertelement <4 x float> %8778, float %8782, i64 2
  %8784 = extractelement <4 x i32> %8768, i64 3
  %8785 = sext i32 %8784 to i64
  %8786 = getelementptr inbounds float, ptr %f4.host, i64 %8785
  %8787 = load float, ptr %8786, align 4, !tbaa !44
  %8788 = insertelement <4 x float> %8783, float %8787, i64 3
  %8789 = fmul <4 x float> %8788, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8790 = fadd <4 x float> %8767, %8789
  %8791 = fmul <4 x float> %8790, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8792 = fadd <4 x float> %8745, %8791
  %8793 = add nsw <4 x i32> %t2766, <i32 256, i32 256, i32 256, i32 256>
  %8794 = extractelement <4 x i32> %8793, i64 0
  %8795 = sext i32 %8794 to i64
  %8796 = getelementptr inbounds float, ptr %f0.host, i64 %8795
  %8797 = load float, ptr %8796, align 4, !tbaa !6
  %8798 = insertelement <4 x float> undef, float %8797, i64 0
  %8799 = extractelement <4 x i32> %8793, i64 1
  %8800 = sext i32 %8799 to i64
  %8801 = getelementptr inbounds float, ptr %f0.host, i64 %8800
  %8802 = load float, ptr %8801, align 4, !tbaa !6
  %8803 = insertelement <4 x float> %8798, float %8802, i64 1
  %8804 = extractelement <4 x i32> %8793, i64 2
  %8805 = sext i32 %8804 to i64
  %8806 = getelementptr inbounds float, ptr %f0.host, i64 %8805
  %8807 = load float, ptr %8806, align 4, !tbaa !6
  %8808 = insertelement <4 x float> %8803, float %8807, i64 2
  %8809 = extractelement <4 x i32> %8793, i64 3
  %8810 = sext i32 %8809 to i64
  %8811 = getelementptr inbounds float, ptr %f0.host, i64 %8810
  %8812 = load float, ptr %8811, align 4, !tbaa !6
  %8813 = insertelement <4 x float> %8808, float %8812, i64 3
  %8814 = fsub <4 x float> %t2755, %t2760
  %8815 = fmul <4 x float> %3598, %8814
  %8816 = fadd <4 x float> %t2760, %8815
  %8817 = fadd <4 x float> %8816, %8813
  %8818 = fsub <4 x float> %8817, %8792
  %8819 = fsub <4 x float> %t2759, %t2757
  %8820 = fadd <4 x float> %8819, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8821 = fmul <4 x float> %8820, %8818
  %8822 = fadd <4 x float> %8699, %8821
  %tmp334 = add i32 %161, %8588
  %8823 = sext i32 %tmp334 to i64
  %8824 = sub nsw i64 %8823, %2143
  %8825 = add nsw i64 %8824, %8536
  %8826 = getelementptr inbounds float, ptr %222, i64 %8825
  %8827 = load <4 x float>, ptr %8826, align 4, !tbaa !70
  %8828 = fmul <4 x float> %8827, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp340 = add i32 %3599, %8588
  %8829 = sext i32 %tmp340 to i64
  %8830 = sub nsw i64 %8829, %2143
  %8831 = add nsw i64 %8537, %8830
  %8832 = getelementptr inbounds float, ptr %222, i64 %8831
  %8833 = load <4 x float>, ptr %8832, align 4, !tbaa !70
  %8834 = fmul <4 x float> %8833, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8835 = fadd <4 x float> %8828, %8834
  %8836 = fmul <4 x float> %8835, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8837 = add nsw i64 %8824, %8538
  %8838 = getelementptr inbounds float, ptr %222, i64 %8837
  %8839 = load <4 x float>, ptr %8838, align 4, !tbaa !70
  %8840 = fmul <4 x float> %8839, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8841 = add nsw i64 %8539, %8830
  %8842 = getelementptr inbounds float, ptr %222, i64 %8841
  %8843 = load <4 x float>, ptr %8842, align 4, !tbaa !70
  %8844 = fmul <4 x float> %8843, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8845 = fadd <4 x float> %8840, %8844
  %8846 = fmul <4 x float> %8845, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8847 = fadd <4 x float> %8836, %8846
  %8848 = fadd <4 x float> %8822, %8847
  %tmp318 = add i32 %8562, %3596
  %8849 = insertelement <4 x i32> undef, i32 %tmp318, i64 0
  %8850 = shufflevector <4 x i32> %8849, <4 x i32> undef, <4 x i32> zeroinitializer
  %8851 = add nsw <4 x i32> %8850, <i32 0, i32 1, i32 2, i32 3>
  %8852 = add nsw <4 x i32> %t2796, %8851
  %8853 = extractelement <4 x i32> %8852, i64 0
  %8854 = sext i32 %8853 to i64
  %8855 = getelementptr inbounds float, ptr %f4.host, i64 %8854
  %8856 = load float, ptr %8855, align 4, !tbaa !44
  %8857 = insertelement <4 x float> undef, float %8856, i64 0
  %8858 = extractelement <4 x i32> %8852, i64 1
  %8859 = sext i32 %8858 to i64
  %8860 = getelementptr inbounds float, ptr %f4.host, i64 %8859
  %8861 = load float, ptr %8860, align 4, !tbaa !44
  %8862 = insertelement <4 x float> %8857, float %8861, i64 1
  %8863 = extractelement <4 x i32> %8852, i64 2
  %8864 = sext i32 %8863 to i64
  %8865 = getelementptr inbounds float, ptr %f4.host, i64 %8864
  %8866 = load float, ptr %8865, align 4, !tbaa !44
  %8867 = insertelement <4 x float> %8862, float %8866, i64 2
  %8868 = extractelement <4 x i32> %8852, i64 3
  %8869 = sext i32 %8868 to i64
  %8870 = getelementptr inbounds float, ptr %f4.host, i64 %8869
  %8871 = load float, ptr %8870, align 4, !tbaa !44
  %8872 = insertelement <4 x float> %8867, float %8871, i64 3
  %8873 = fmul <4 x float> %8872, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8874 = add i32 %8589, %3441
  %8875 = add i32 %8874, %3596
  %tmp326 = add i32 %8875, %8535
  %8876 = insertelement <4 x i32> undef, i32 %tmp326, i64 0
  %8877 = shufflevector <4 x i32> %8876, <4 x i32> undef, <4 x i32> zeroinitializer
  %8878 = add <4 x i32> %8877, <i32 -1, i32 0, i32 1, i32 2>
  %8879 = add <4 x i32> %8878, %t2796
  %8880 = extractelement <4 x i32> %8879, i64 0
  %8881 = sext i32 %8880 to i64
  %8882 = getelementptr inbounds float, ptr %f4.host, i64 %8881
  %8883 = load float, ptr %8882, align 4, !tbaa !44
  %8884 = insertelement <4 x float> undef, float %8883, i64 0
  %8885 = extractelement <4 x i32> %8879, i64 1
  %8886 = sext i32 %8885 to i64
  %8887 = getelementptr inbounds float, ptr %f4.host, i64 %8886
  %8888 = load float, ptr %8887, align 4, !tbaa !44
  %8889 = insertelement <4 x float> %8884, float %8888, i64 1
  %8890 = extractelement <4 x i32> %8879, i64 2
  %8891 = sext i32 %8890 to i64
  %8892 = getelementptr inbounds float, ptr %f4.host, i64 %8891
  %8893 = load float, ptr %8892, align 4, !tbaa !44
  %8894 = insertelement <4 x float> %8889, float %8893, i64 2
  %8895 = extractelement <4 x i32> %8879, i64 3
  %8896 = sext i32 %8895 to i64
  %8897 = getelementptr inbounds float, ptr %f4.host, i64 %8896
  %8898 = load float, ptr %8897, align 4, !tbaa !44
  %8899 = insertelement <4 x float> %8894, float %8898, i64 3
  %8900 = fmul <4 x float> %8899, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8901 = fadd <4 x float> %8873, %8900
  %8902 = fmul <4 x float> %8901, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp322 = add i32 %8619, %3596
  %8903 = insertelement <4 x i32> undef, i32 %tmp322, i64 0
  %8904 = shufflevector <4 x i32> %8903, <4 x i32> undef, <4 x i32> zeroinitializer
  %8905 = add nsw <4 x i32> %8904, <i32 0, i32 1, i32 2, i32 3>
  %8906 = add nsw <4 x i32> %t2796, %8905
  %8907 = extractelement <4 x i32> %8906, i64 0
  %8908 = sext i32 %8907 to i64
  %8909 = getelementptr inbounds float, ptr %f4.host, i64 %8908
  %8910 = load float, ptr %8909, align 4, !tbaa !44
  %8911 = insertelement <4 x float> undef, float %8910, i64 0
  %8912 = extractelement <4 x i32> %8906, i64 1
  %8913 = sext i32 %8912 to i64
  %8914 = getelementptr inbounds float, ptr %f4.host, i64 %8913
  %8915 = load float, ptr %8914, align 4, !tbaa !44
  %8916 = insertelement <4 x float> %8911, float %8915, i64 1
  %8917 = extractelement <4 x i32> %8906, i64 2
  %8918 = sext i32 %8917 to i64
  %8919 = getelementptr inbounds float, ptr %f4.host, i64 %8918
  %8920 = load float, ptr %8919, align 4, !tbaa !44
  %8921 = insertelement <4 x float> %8916, float %8920, i64 2
  %8922 = extractelement <4 x i32> %8906, i64 3
  %8923 = sext i32 %8922 to i64
  %8924 = getelementptr inbounds float, ptr %f4.host, i64 %8923
  %8925 = load float, ptr %8924, align 4, !tbaa !44
  %8926 = insertelement <4 x float> %8921, float %8925, i64 3
  %8927 = fmul <4 x float> %8926, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp328 = add i32 %8875, %8533
  %8928 = insertelement <4 x i32> undef, i32 %tmp328, i64 0
  %8929 = shufflevector <4 x i32> %8928, <4 x i32> undef, <4 x i32> zeroinitializer
  %8930 = add <4 x i32> %8929, <i32 -1, i32 0, i32 1, i32 2>
  %8931 = add <4 x i32> %8930, %t2796
  %8932 = extractelement <4 x i32> %8931, i64 0
  %8933 = sext i32 %8932 to i64
  %8934 = getelementptr inbounds float, ptr %f4.host, i64 %8933
  %8935 = load float, ptr %8934, align 4, !tbaa !44
  %8936 = insertelement <4 x float> undef, float %8935, i64 0
  %8937 = extractelement <4 x i32> %8931, i64 1
  %8938 = sext i32 %8937 to i64
  %8939 = getelementptr inbounds float, ptr %f4.host, i64 %8938
  %8940 = load float, ptr %8939, align 4, !tbaa !44
  %8941 = insertelement <4 x float> %8936, float %8940, i64 1
  %8942 = extractelement <4 x i32> %8931, i64 2
  %8943 = sext i32 %8942 to i64
  %8944 = getelementptr inbounds float, ptr %f4.host, i64 %8943
  %8945 = load float, ptr %8944, align 4, !tbaa !44
  %8946 = insertelement <4 x float> %8941, float %8945, i64 2
  %8947 = extractelement <4 x i32> %8931, i64 3
  %8948 = sext i32 %8947 to i64
  %8949 = getelementptr inbounds float, ptr %f4.host, i64 %8948
  %8950 = load float, ptr %8949, align 4, !tbaa !44
  %8951 = insertelement <4 x float> %8946, float %8950, i64 3
  %8952 = fmul <4 x float> %8951, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8953 = fadd <4 x float> %8927, %8952
  %8954 = fmul <4 x float> %8953, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8955 = fadd <4 x float> %8902, %8954
  %8956 = extractelement <4 x i32> %t2787, i64 0
  %8957 = sext i32 %8956 to i64
  %8958 = getelementptr inbounds float, ptr %f0.host, i64 %8957
  %8959 = load float, ptr %8958, align 4, !tbaa !6
  %8960 = insertelement <4 x float> undef, float %8959, i64 0
  %8961 = extractelement <4 x i32> %t2787, i64 1
  %8962 = sext i32 %8961 to i64
  %8963 = getelementptr inbounds float, ptr %f0.host, i64 %8962
  %8964 = load float, ptr %8963, align 4, !tbaa !6
  %8965 = insertelement <4 x float> %8960, float %8964, i64 1
  %8966 = extractelement <4 x i32> %t2787, i64 2
  %8967 = sext i32 %8966 to i64
  %8968 = getelementptr inbounds float, ptr %f0.host, i64 %8967
  %8969 = load float, ptr %8968, align 4, !tbaa !6
  %8970 = insertelement <4 x float> %8965, float %8969, i64 2
  %8971 = extractelement <4 x i32> %t2787, i64 3
  %8972 = sext i32 %8971 to i64
  %8973 = getelementptr inbounds float, ptr %f0.host, i64 %8972
  %8974 = load float, ptr %8973, align 4, !tbaa !6
  %8975 = insertelement <4 x float> %8970, float %8974, i64 3
  %8976 = fsub <4 x float> %t2754, %t2784
  %8977 = fmul <4 x float> %3598, %8976
  %8978 = fadd <4 x float> %t2784, %8977
  %8979 = fadd <4 x float> %8978, %8975
  %8980 = fsub <4 x float> %8979, %8955
  %8981 = fsub <4 x float> %t2756, %t2782
  %8982 = fmul <4 x float> %8981, %8980
  %8983 = add nsw <4 x i32> %t2791, %8851
  %8984 = extractelement <4 x i32> %8983, i64 0
  %8985 = sext i32 %8984 to i64
  %8986 = getelementptr inbounds float, ptr %f4.host, i64 %8985
  %8987 = load float, ptr %8986, align 4, !tbaa !44
  %8988 = insertelement <4 x float> undef, float %8987, i64 0
  %8989 = extractelement <4 x i32> %8983, i64 1
  %8990 = sext i32 %8989 to i64
  %8991 = getelementptr inbounds float, ptr %f4.host, i64 %8990
  %8992 = load float, ptr %8991, align 4, !tbaa !44
  %8993 = insertelement <4 x float> %8988, float %8992, i64 1
  %8994 = extractelement <4 x i32> %8983, i64 2
  %8995 = sext i32 %8994 to i64
  %8996 = getelementptr inbounds float, ptr %f4.host, i64 %8995
  %8997 = load float, ptr %8996, align 4, !tbaa !44
  %8998 = insertelement <4 x float> %8993, float %8997, i64 2
  %8999 = extractelement <4 x i32> %8983, i64 3
  %9000 = sext i32 %8999 to i64
  %9001 = getelementptr inbounds float, ptr %f4.host, i64 %9000
  %9002 = load float, ptr %9001, align 4, !tbaa !44
  %9003 = insertelement <4 x float> %8998, float %9002, i64 3
  %9004 = fmul <4 x float> %9003, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9005 = add <4 x i32> %8878, %t2791
  %9006 = extractelement <4 x i32> %9005, i64 0
  %9007 = sext i32 %9006 to i64
  %9008 = getelementptr inbounds float, ptr %f4.host, i64 %9007
  %9009 = load float, ptr %9008, align 4, !tbaa !44
  %9010 = insertelement <4 x float> undef, float %9009, i64 0
  %9011 = extractelement <4 x i32> %9005, i64 1
  %9012 = sext i32 %9011 to i64
  %9013 = getelementptr inbounds float, ptr %f4.host, i64 %9012
  %9014 = load float, ptr %9013, align 4, !tbaa !44
  %9015 = insertelement <4 x float> %9010, float %9014, i64 1
  %9016 = extractelement <4 x i32> %9005, i64 2
  %9017 = sext i32 %9016 to i64
  %9018 = getelementptr inbounds float, ptr %f4.host, i64 %9017
  %9019 = load float, ptr %9018, align 4, !tbaa !44
  %9020 = insertelement <4 x float> %9015, float %9019, i64 2
  %9021 = extractelement <4 x i32> %9005, i64 3
  %9022 = sext i32 %9021 to i64
  %9023 = getelementptr inbounds float, ptr %f4.host, i64 %9022
  %9024 = load float, ptr %9023, align 4, !tbaa !44
  %9025 = insertelement <4 x float> %9020, float %9024, i64 3
  %9026 = fmul <4 x float> %9025, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9027 = fadd <4 x float> %9004, %9026
  %9028 = fmul <4 x float> %9027, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9029 = add nsw <4 x i32> %t2791, %8905
  %9030 = extractelement <4 x i32> %9029, i64 0
  %9031 = sext i32 %9030 to i64
  %9032 = getelementptr inbounds float, ptr %f4.host, i64 %9031
  %9033 = load float, ptr %9032, align 4, !tbaa !44
  %9034 = insertelement <4 x float> undef, float %9033, i64 0
  %9035 = extractelement <4 x i32> %9029, i64 1
  %9036 = sext i32 %9035 to i64
  %9037 = getelementptr inbounds float, ptr %f4.host, i64 %9036
  %9038 = load float, ptr %9037, align 4, !tbaa !44
  %9039 = insertelement <4 x float> %9034, float %9038, i64 1
  %9040 = extractelement <4 x i32> %9029, i64 2
  %9041 = sext i32 %9040 to i64
  %9042 = getelementptr inbounds float, ptr %f4.host, i64 %9041
  %9043 = load float, ptr %9042, align 4, !tbaa !44
  %9044 = insertelement <4 x float> %9039, float %9043, i64 2
  %9045 = extractelement <4 x i32> %9029, i64 3
  %9046 = sext i32 %9045 to i64
  %9047 = getelementptr inbounds float, ptr %f4.host, i64 %9046
  %9048 = load float, ptr %9047, align 4, !tbaa !44
  %9049 = insertelement <4 x float> %9044, float %9048, i64 3
  %9050 = fmul <4 x float> %9049, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9051 = add <4 x i32> %8930, %t2791
  %9052 = extractelement <4 x i32> %9051, i64 0
  %9053 = sext i32 %9052 to i64
  %9054 = getelementptr inbounds float, ptr %f4.host, i64 %9053
  %9055 = load float, ptr %9054, align 4, !tbaa !44
  %9056 = insertelement <4 x float> undef, float %9055, i64 0
  %9057 = extractelement <4 x i32> %9051, i64 1
  %9058 = sext i32 %9057 to i64
  %9059 = getelementptr inbounds float, ptr %f4.host, i64 %9058
  %9060 = load float, ptr %9059, align 4, !tbaa !44
  %9061 = insertelement <4 x float> %9056, float %9060, i64 1
  %9062 = extractelement <4 x i32> %9051, i64 2
  %9063 = sext i32 %9062 to i64
  %9064 = getelementptr inbounds float, ptr %f4.host, i64 %9063
  %9065 = load float, ptr %9064, align 4, !tbaa !44
  %9066 = insertelement <4 x float> %9061, float %9065, i64 2
  %9067 = extractelement <4 x i32> %9051, i64 3
  %9068 = sext i32 %9067 to i64
  %9069 = getelementptr inbounds float, ptr %f4.host, i64 %9068
  %9070 = load float, ptr %9069, align 4, !tbaa !44
  %9071 = insertelement <4 x float> %9066, float %9070, i64 3
  %9072 = fmul <4 x float> %9071, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9073 = fadd <4 x float> %9050, %9072
  %9074 = fmul <4 x float> %9073, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9075 = fadd <4 x float> %9028, %9074
  %9076 = add nsw <4 x i32> %t2787, <i32 256, i32 256, i32 256, i32 256>
  %9077 = extractelement <4 x i32> %9076, i64 0
  %9078 = sext i32 %9077 to i64
  %9079 = getelementptr inbounds float, ptr %f0.host, i64 %9078
  %9080 = load float, ptr %9079, align 4, !tbaa !6
  %9081 = insertelement <4 x float> undef, float %9080, i64 0
  %9082 = extractelement <4 x i32> %9076, i64 1
  %9083 = sext i32 %9082 to i64
  %9084 = getelementptr inbounds float, ptr %f0.host, i64 %9083
  %9085 = load float, ptr %9084, align 4, !tbaa !6
  %9086 = insertelement <4 x float> %9081, float %9085, i64 1
  %9087 = extractelement <4 x i32> %9076, i64 2
  %9088 = sext i32 %9087 to i64
  %9089 = getelementptr inbounds float, ptr %f0.host, i64 %9088
  %9090 = load float, ptr %9089, align 4, !tbaa !6
  %9091 = insertelement <4 x float> %9086, float %9090, i64 2
  %9092 = extractelement <4 x i32> %9076, i64 3
  %9093 = sext i32 %9092 to i64
  %9094 = getelementptr inbounds float, ptr %f0.host, i64 %9093
  %9095 = load float, ptr %9094, align 4, !tbaa !6
  %9096 = insertelement <4 x float> %9091, float %9095, i64 3
  %9097 = fsub <4 x float> %t2754, %t2783
  %9098 = fmul <4 x float> %3598, %9097
  %9099 = fadd <4 x float> %t2783, %9098
  %9100 = fadd <4 x float> %9099, %9096
  %9101 = fsub <4 x float> %9100, %9075
  %9102 = fsub <4 x float> %t2782, %t2756
  %9103 = fadd <4 x float> %9102, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9104 = fmul <4 x float> %9103, %9101
  %9105 = fadd <4 x float> %8982, %9104
  %tmp316 = add i32 %3596, %8588
  %9106 = sext i32 %tmp316 to i64
  %9107 = sub nsw i64 %9106, %2143
  %9108 = add nsw i64 %9107, %8536
  %9109 = getelementptr inbounds float, ptr %222, i64 %9108
  %9110 = load <4 x float>, ptr %9109, align 4, !tbaa !70
  %9111 = fmul <4 x float> %9110, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp324 = add i32 %3600, %8588
  %9112 = sext i32 %tmp324 to i64
  %9113 = sub nsw i64 %9112, %2143
  %9114 = add nsw i64 %8537, %9113
  %9115 = getelementptr inbounds float, ptr %222, i64 %9114
  %9116 = load <4 x float>, ptr %9115, align 4, !tbaa !70
  %9117 = fmul <4 x float> %9116, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9118 = fadd <4 x float> %9111, %9117
  %9119 = fmul <4 x float> %9118, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9120 = add nsw i64 %9107, %8538
  %9121 = getelementptr inbounds float, ptr %222, i64 %9120
  %9122 = load <4 x float>, ptr %9121, align 4, !tbaa !70
  %9123 = fmul <4 x float> %9122, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9124 = add nsw i64 %8539, %9113
  %9125 = getelementptr inbounds float, ptr %222, i64 %9124
  %9126 = load <4 x float>, ptr %9125, align 4, !tbaa !70
  %9127 = fmul <4 x float> %9126, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9128 = fadd <4 x float> %9123, %9127
  %9129 = fmul <4 x float> %9128, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9130 = fadd <4 x float> %9119, %9129
  %9131 = fadd <4 x float> %9105, %9130
  %9132 = shufflevector <4 x float> %8848, <4 x float> %9131, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %9133 = shl i64 %lsr.iv311, 3
  %uglygep = getelementptr i8, ptr %scevgep309, i64 %9133
  store <8 x float> %9132, ptr %uglygep, align 4, !tbaa !72
  %lsr.iv.next308 = add i32 %lsr.iv307, -1
  %lsr.iv.next312 = add nuw nsw i64 %lsr.iv311, 4
  %lsr.iv.next332 = add i32 %lsr.iv331, 8
  %.not116 = icmp eq i32 %lsr.iv.next308, 0
  br i1 %.not116, label %"end for f125.s0.v3.v378", label %"for f125.s0.v3.v377"

"end for f125.s0.v3.v378":                        ; preds = %"for f125.s0.v3.v377", %"produce f12576"
  br i1 %3601, label %"for f125.s0.v3.v380.preheader", label %"consume f12583", !prof !5

"for f125.s0.v3.v380.preheader":                  ; preds = %"end for f125.s0.v3.v378"
  %9134 = shl nuw nsw i32 %7322, 1
  %9135 = ashr i32 %7321, 1
  %t2799 = add nsw i32 %9134, %9135
  %9136 = sub nsw i64 %3710, %10
  %9137 = mul nsw i64 %9136, %3651
  %9138 = add nsw i64 %9137, %3652
  %9139 = add nsw i64 %9138, -8
  %9140 = getelementptr inbounds float, ptr %f2.host, i64 %9139
  %9141 = load <4 x float>, ptr %9140, align 4, !tbaa !42
  %9142 = add nsw i64 %9138, -4
  %9143 = getelementptr inbounds float, ptr %f2.host, i64 %9142
  %9144 = load <4 x float>, ptr %9143, align 4, !tbaa !42
  %t2803 = shufflevector <4 x float> %9141, <4 x float> %9144, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2804 = shufflevector <4 x float> %9141, <4 x float> %9144, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2805 = fmul <4 x float> %232, %t2803
  %t2806 = fmul <4 x float> %232, %t2804
  %a989 = fptosi <4 x float> %t2806 to <4 x i32>
  %a996 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a989)
  %9145 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a996, <4 x i32> zeroinitializer)
  %t2808 = sitofp <4 x i32> %9145 to <4 x float>
  %t2809 = fmul <4 x float> %3589, %t2808
  %9146 = add nuw nsw <4 x i32> %9145, <i32 1, i32 1, i32 1, i32 1>
  %9147 = sitofp <4 x i32> %9146 to <4 x float>
  %t2810 = fmul <4 x float> %3589, %9147
  %9148 = add i32 %t2799, %3590
  %t2812 = mul nsw i32 %9148, %207
  %9149 = sub nsw i32 %9135, %158
  %t2814 = mul nsw i32 %9149, %207
  %9150 = fmul <4 x float> %t2806, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a994 = fptosi <4 x float> %9150 to <4 x i32>
  %a993 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a994)
  %9151 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a993, <4 x i32> zeroinitializer)
  %9152 = shl <4 x i32> %9145, <i32 8, i32 8, i32 8, i32 8>
  %.neg258 = sub <4 x i32> %.neg251, %9152
  %t2815 = add <4 x i32> %.neg258, %9151
  %9153 = add i32 %t2799, %3436
  %9154 = mul nsw i32 %9153, %f4.stride.1
  %t2820 = sub nsw <4 x i32> %9145, %241
  %t2821 = mul nsw <4 x i32> %t2820, %2139
  %9155 = sub nsw i32 %9135, %f4.v4.min_realized
  %9156 = mul nsw i32 %9155, %f4.stride.1
  %9157 = add nsw <4 x i32> %t2820, <i32 1, i32 1, i32 1, i32 1>
  %t2827 = mul nsw <4 x i32> %9157, %2139
  %a997 = fptosi <4 x float> %t2805 to <4 x i32>
  %a1004 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a997)
  %9158 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1004, <4 x i32> zeroinitializer)
  %t2830 = sitofp <4 x i32> %9158 to <4 x float>
  %t2831 = fmul <4 x float> %3589, %t2830
  %9159 = add nuw nsw <4 x i32> %9158, <i32 1, i32 1, i32 1, i32 1>
  %9160 = sitofp <4 x i32> %9159 to <4 x float>
  %t2832 = fmul <4 x float> %3589, %9160
  %9161 = fmul <4 x float> %t2805, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1002 = fptosi <4 x float> %9161 to <4 x i32>
  %a1001 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a1002)
  %9162 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1001, <4 x i32> zeroinitializer)
  %9163 = shl <4 x i32> %9158, <i32 8, i32 8, i32 8, i32 8>
  %.neg260 = sub <4 x i32> %.neg251, %9163
  %t2835 = add <4 x i32> %.neg260, %9162
  %t2837 = add nsw i32 %9154, %3612
  %t2838 = sub nsw <4 x i32> %9158, %241
  %t2839 = mul nsw <4 x i32> %t2838, %2139
  %t2841 = add nsw i32 %9154, %3613
  %t2842 = add nsw i32 %9156, %3612
  %t2843 = add nsw i32 %9156, %3613
  %9164 = add nsw <4 x i32> %t2838, <i32 1, i32 1, i32 1, i32 1>
  %t2844 = mul nsw <4 x i32> %9164, %2139
  %9165 = add i32 %t2826, %9156
  %9166 = insertelement <4 x i32> undef, i32 %9165, i64 0
  %9167 = shufflevector <4 x i32> %9166, <4 x i32> undef, <4 x i32> zeroinitializer
  %9168 = add nsw <4 x i32> %9167, <i32 0, i32 1, i32 2, i32 3>
  %9169 = add nsw <4 x i32> %t2827, %9168
  %9170 = extractelement <4 x i32> %9169, i64 0
  %9171 = sext i32 %9170 to i64
  %9172 = getelementptr inbounds float, ptr %f4.host, i64 %9171
  %9173 = load float, ptr %9172, align 4, !tbaa !44
  %9174 = insertelement <4 x float> undef, float %9173, i64 0
  %9175 = extractelement <4 x i32> %9169, i64 1
  %9176 = sext i32 %9175 to i64
  %9177 = getelementptr inbounds float, ptr %f4.host, i64 %9176
  %9178 = load float, ptr %9177, align 4, !tbaa !44
  %9179 = insertelement <4 x float> %9174, float %9178, i64 1
  %9180 = extractelement <4 x i32> %9169, i64 2
  %9181 = sext i32 %9180 to i64
  %9182 = getelementptr inbounds float, ptr %f4.host, i64 %9181
  %9183 = load float, ptr %9182, align 4, !tbaa !44
  %9184 = insertelement <4 x float> %9179, float %9183, i64 2
  %9185 = extractelement <4 x i32> %9169, i64 3
  %9186 = sext i32 %9185 to i64
  %9187 = getelementptr inbounds float, ptr %f4.host, i64 %9186
  %9188 = load float, ptr %9187, align 4, !tbaa !44
  %9189 = insertelement <4 x float> %9184, float %9188, i64 3
  %9190 = fmul <4 x float> %9189, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9191 = add i32 %t2825, %9156
  %9192 = insertelement <4 x i32> undef, i32 %9191, i64 0
  %9193 = shufflevector <4 x i32> %9192, <4 x i32> undef, <4 x i32> zeroinitializer
  %9194 = add <4 x i32> %9193, <i32 -1, i32 0, i32 1, i32 2>
  %9195 = add <4 x i32> %9194, %t2827
  %9196 = extractelement <4 x i32> %9195, i64 0
  %9197 = sext i32 %9196 to i64
  %9198 = getelementptr inbounds float, ptr %f4.host, i64 %9197
  %9199 = load float, ptr %9198, align 4, !tbaa !44
  %9200 = insertelement <4 x float> undef, float %9199, i64 0
  %9201 = extractelement <4 x i32> %9195, i64 1
  %9202 = sext i32 %9201 to i64
  %9203 = getelementptr inbounds float, ptr %f4.host, i64 %9202
  %9204 = load float, ptr %9203, align 4, !tbaa !44
  %9205 = insertelement <4 x float> %9200, float %9204, i64 1
  %9206 = extractelement <4 x i32> %9195, i64 2
  %9207 = sext i32 %9206 to i64
  %9208 = getelementptr inbounds float, ptr %f4.host, i64 %9207
  %9209 = load float, ptr %9208, align 4, !tbaa !44
  %9210 = insertelement <4 x float> %9205, float %9209, i64 2
  %9211 = extractelement <4 x i32> %9195, i64 3
  %9212 = sext i32 %9211 to i64
  %9213 = getelementptr inbounds float, ptr %f4.host, i64 %9212
  %9214 = load float, ptr %9213, align 4, !tbaa !44
  %9215 = insertelement <4 x float> %9210, float %9214, i64 3
  %9216 = fmul <4 x float> %9215, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9217 = fadd <4 x float> %9190, %9216
  %9218 = fmul <4 x float> %9217, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9219 = add i32 %t2826, %9154
  %9220 = insertelement <4 x i32> undef, i32 %9219, i64 0
  %9221 = shufflevector <4 x i32> %9220, <4 x i32> undef, <4 x i32> zeroinitializer
  %9222 = add nsw <4 x i32> %9221, <i32 0, i32 1, i32 2, i32 3>
  %9223 = add nsw <4 x i32> %t2827, %9222
  %9224 = extractelement <4 x i32> %9223, i64 0
  %9225 = sext i32 %9224 to i64
  %9226 = getelementptr inbounds float, ptr %f4.host, i64 %9225
  %9227 = load float, ptr %9226, align 4, !tbaa !44
  %9228 = insertelement <4 x float> undef, float %9227, i64 0
  %9229 = extractelement <4 x i32> %9223, i64 1
  %9230 = sext i32 %9229 to i64
  %9231 = getelementptr inbounds float, ptr %f4.host, i64 %9230
  %9232 = load float, ptr %9231, align 4, !tbaa !44
  %9233 = insertelement <4 x float> %9228, float %9232, i64 1
  %9234 = extractelement <4 x i32> %9223, i64 2
  %9235 = sext i32 %9234 to i64
  %9236 = getelementptr inbounds float, ptr %f4.host, i64 %9235
  %9237 = load float, ptr %9236, align 4, !tbaa !44
  %9238 = insertelement <4 x float> %9233, float %9237, i64 2
  %9239 = extractelement <4 x i32> %9223, i64 3
  %9240 = sext i32 %9239 to i64
  %9241 = getelementptr inbounds float, ptr %f4.host, i64 %9240
  %9242 = load float, ptr %9241, align 4, !tbaa !44
  %9243 = insertelement <4 x float> %9238, float %9242, i64 3
  %9244 = fmul <4 x float> %9243, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9245 = add i32 %t2825, %9154
  %9246 = insertelement <4 x i32> undef, i32 %9245, i64 0
  %9247 = shufflevector <4 x i32> %9246, <4 x i32> undef, <4 x i32> zeroinitializer
  %9248 = add <4 x i32> %9247, <i32 -1, i32 0, i32 1, i32 2>
  %9249 = add <4 x i32> %9248, %t2827
  %9250 = extractelement <4 x i32> %9249, i64 0
  %9251 = sext i32 %9250 to i64
  %9252 = getelementptr inbounds float, ptr %f4.host, i64 %9251
  %9253 = load float, ptr %9252, align 4, !tbaa !44
  %9254 = insertelement <4 x float> undef, float %9253, i64 0
  %9255 = extractelement <4 x i32> %9249, i64 1
  %9256 = sext i32 %9255 to i64
  %9257 = getelementptr inbounds float, ptr %f4.host, i64 %9256
  %9258 = load float, ptr %9257, align 4, !tbaa !44
  %9259 = insertelement <4 x float> %9254, float %9258, i64 1
  %9260 = extractelement <4 x i32> %9249, i64 2
  %9261 = sext i32 %9260 to i64
  %9262 = getelementptr inbounds float, ptr %f4.host, i64 %9261
  %9263 = load float, ptr %9262, align 4, !tbaa !44
  %9264 = insertelement <4 x float> %9259, float %9263, i64 2
  %9265 = extractelement <4 x i32> %9249, i64 3
  %9266 = sext i32 %9265 to i64
  %9267 = getelementptr inbounds float, ptr %f4.host, i64 %9266
  %9268 = load float, ptr %9267, align 4, !tbaa !44
  %9269 = insertelement <4 x float> %9264, float %9268, i64 3
  %9270 = fmul <4 x float> %9269, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9271 = fadd <4 x float> %9244, %9270
  %9272 = fmul <4 x float> %9271, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9273 = fadd <4 x float> %9218, %9272
  %9274 = extractelement <4 x i32> %t2815, i64 0
  %9275 = sext i32 %9274 to i64
  %9276 = getelementptr inbounds float, ptr %f0.host, i64 %9275
  %9277 = load float, ptr %9276, align 4, !tbaa !6
  %9278 = insertelement <4 x float> undef, float %9277, i64 0
  %9279 = extractelement <4 x i32> %t2815, i64 1
  %9280 = sext i32 %9279 to i64
  %9281 = getelementptr inbounds float, ptr %f0.host, i64 %9280
  %9282 = load float, ptr %9281, align 4, !tbaa !6
  %9283 = insertelement <4 x float> %9278, float %9282, i64 1
  %9284 = extractelement <4 x i32> %t2815, i64 2
  %9285 = sext i32 %9284 to i64
  %9286 = getelementptr inbounds float, ptr %f0.host, i64 %9285
  %9287 = load float, ptr %9286, align 4, !tbaa !6
  %9288 = insertelement <4 x float> %9283, float %9287, i64 2
  %9289 = extractelement <4 x i32> %t2815, i64 3
  %9290 = sext i32 %9289 to i64
  %9291 = getelementptr inbounds float, ptr %f0.host, i64 %9290
  %9292 = load float, ptr %9291, align 4, !tbaa !6
  %9293 = insertelement <4 x float> %9288, float %9292, i64 3
  %9294 = fsub <4 x float> %t2804, %t2810
  %9295 = fmul <4 x float> %3598, %9294
  %9296 = fadd <4 x float> %t2810, %9295
  %9297 = fadd <4 x float> %9296, %9293
  %9298 = fsub <4 x float> %9297, %9273
  %9299 = fsub <4 x float> %t2806, %t2808
  %9300 = fmul <4 x float> %9299, %9298
  %9301 = add nsw <4 x i32> %t2821, %9168
  %9302 = extractelement <4 x i32> %9301, i64 0
  %9303 = sext i32 %9302 to i64
  %9304 = getelementptr inbounds float, ptr %f4.host, i64 %9303
  %9305 = load float, ptr %9304, align 4, !tbaa !44
  %9306 = insertelement <4 x float> undef, float %9305, i64 0
  %9307 = extractelement <4 x i32> %9301, i64 1
  %9308 = sext i32 %9307 to i64
  %9309 = getelementptr inbounds float, ptr %f4.host, i64 %9308
  %9310 = load float, ptr %9309, align 4, !tbaa !44
  %9311 = insertelement <4 x float> %9306, float %9310, i64 1
  %9312 = extractelement <4 x i32> %9301, i64 2
  %9313 = sext i32 %9312 to i64
  %9314 = getelementptr inbounds float, ptr %f4.host, i64 %9313
  %9315 = load float, ptr %9314, align 4, !tbaa !44
  %9316 = insertelement <4 x float> %9311, float %9315, i64 2
  %9317 = extractelement <4 x i32> %9301, i64 3
  %9318 = sext i32 %9317 to i64
  %9319 = getelementptr inbounds float, ptr %f4.host, i64 %9318
  %9320 = load float, ptr %9319, align 4, !tbaa !44
  %9321 = insertelement <4 x float> %9316, float %9320, i64 3
  %9322 = fmul <4 x float> %9321, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9323 = add <4 x i32> %9194, %t2821
  %9324 = extractelement <4 x i32> %9323, i64 0
  %9325 = sext i32 %9324 to i64
  %9326 = getelementptr inbounds float, ptr %f4.host, i64 %9325
  %9327 = load float, ptr %9326, align 4, !tbaa !44
  %9328 = insertelement <4 x float> undef, float %9327, i64 0
  %9329 = extractelement <4 x i32> %9323, i64 1
  %9330 = sext i32 %9329 to i64
  %9331 = getelementptr inbounds float, ptr %f4.host, i64 %9330
  %9332 = load float, ptr %9331, align 4, !tbaa !44
  %9333 = insertelement <4 x float> %9328, float %9332, i64 1
  %9334 = extractelement <4 x i32> %9323, i64 2
  %9335 = sext i32 %9334 to i64
  %9336 = getelementptr inbounds float, ptr %f4.host, i64 %9335
  %9337 = load float, ptr %9336, align 4, !tbaa !44
  %9338 = insertelement <4 x float> %9333, float %9337, i64 2
  %9339 = extractelement <4 x i32> %9323, i64 3
  %9340 = sext i32 %9339 to i64
  %9341 = getelementptr inbounds float, ptr %f4.host, i64 %9340
  %9342 = load float, ptr %9341, align 4, !tbaa !44
  %9343 = insertelement <4 x float> %9338, float %9342, i64 3
  %9344 = fmul <4 x float> %9343, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9345 = fadd <4 x float> %9322, %9344
  %9346 = fmul <4 x float> %9345, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9347 = add nsw <4 x i32> %t2821, %9222
  %9348 = extractelement <4 x i32> %9347, i64 0
  %9349 = sext i32 %9348 to i64
  %9350 = getelementptr inbounds float, ptr %f4.host, i64 %9349
  %9351 = load float, ptr %9350, align 4, !tbaa !44
  %9352 = insertelement <4 x float> undef, float %9351, i64 0
  %9353 = extractelement <4 x i32> %9347, i64 1
  %9354 = sext i32 %9353 to i64
  %9355 = getelementptr inbounds float, ptr %f4.host, i64 %9354
  %9356 = load float, ptr %9355, align 4, !tbaa !44
  %9357 = insertelement <4 x float> %9352, float %9356, i64 1
  %9358 = extractelement <4 x i32> %9347, i64 2
  %9359 = sext i32 %9358 to i64
  %9360 = getelementptr inbounds float, ptr %f4.host, i64 %9359
  %9361 = load float, ptr %9360, align 4, !tbaa !44
  %9362 = insertelement <4 x float> %9357, float %9361, i64 2
  %9363 = extractelement <4 x i32> %9347, i64 3
  %9364 = sext i32 %9363 to i64
  %9365 = getelementptr inbounds float, ptr %f4.host, i64 %9364
  %9366 = load float, ptr %9365, align 4, !tbaa !44
  %9367 = insertelement <4 x float> %9362, float %9366, i64 3
  %9368 = fmul <4 x float> %9367, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9369 = add <4 x i32> %9248, %t2821
  %9370 = extractelement <4 x i32> %9369, i64 0
  %9371 = sext i32 %9370 to i64
  %9372 = getelementptr inbounds float, ptr %f4.host, i64 %9371
  %9373 = load float, ptr %9372, align 4, !tbaa !44
  %9374 = insertelement <4 x float> undef, float %9373, i64 0
  %9375 = extractelement <4 x i32> %9369, i64 1
  %9376 = sext i32 %9375 to i64
  %9377 = getelementptr inbounds float, ptr %f4.host, i64 %9376
  %9378 = load float, ptr %9377, align 4, !tbaa !44
  %9379 = insertelement <4 x float> %9374, float %9378, i64 1
  %9380 = extractelement <4 x i32> %9369, i64 2
  %9381 = sext i32 %9380 to i64
  %9382 = getelementptr inbounds float, ptr %f4.host, i64 %9381
  %9383 = load float, ptr %9382, align 4, !tbaa !44
  %9384 = insertelement <4 x float> %9379, float %9383, i64 2
  %9385 = extractelement <4 x i32> %9369, i64 3
  %9386 = sext i32 %9385 to i64
  %9387 = getelementptr inbounds float, ptr %f4.host, i64 %9386
  %9388 = load float, ptr %9387, align 4, !tbaa !44
  %9389 = insertelement <4 x float> %9384, float %9388, i64 3
  %9390 = fmul <4 x float> %9389, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9391 = fadd <4 x float> %9368, %9390
  %9392 = fmul <4 x float> %9391, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9393 = fadd <4 x float> %9346, %9392
  %9394 = add nsw <4 x i32> %t2815, <i32 256, i32 256, i32 256, i32 256>
  %9395 = extractelement <4 x i32> %9394, i64 0
  %9396 = sext i32 %9395 to i64
  %9397 = getelementptr inbounds float, ptr %f0.host, i64 %9396
  %9398 = load float, ptr %9397, align 4, !tbaa !6
  %9399 = insertelement <4 x float> undef, float %9398, i64 0
  %9400 = extractelement <4 x i32> %9394, i64 1
  %9401 = sext i32 %9400 to i64
  %9402 = getelementptr inbounds float, ptr %f0.host, i64 %9401
  %9403 = load float, ptr %9402, align 4, !tbaa !6
  %9404 = insertelement <4 x float> %9399, float %9403, i64 1
  %9405 = extractelement <4 x i32> %9394, i64 2
  %9406 = sext i32 %9405 to i64
  %9407 = getelementptr inbounds float, ptr %f0.host, i64 %9406
  %9408 = load float, ptr %9407, align 4, !tbaa !6
  %9409 = insertelement <4 x float> %9404, float %9408, i64 2
  %9410 = extractelement <4 x i32> %9394, i64 3
  %9411 = sext i32 %9410 to i64
  %9412 = getelementptr inbounds float, ptr %f0.host, i64 %9411
  %9413 = load float, ptr %9412, align 4, !tbaa !6
  %9414 = insertelement <4 x float> %9409, float %9413, i64 3
  %9415 = fsub <4 x float> %t2804, %t2809
  %9416 = fmul <4 x float> %3598, %9415
  %9417 = fadd <4 x float> %t2809, %9416
  %9418 = fadd <4 x float> %9417, %9414
  %9419 = fsub <4 x float> %9418, %9393
  %9420 = fsub <4 x float> %t2808, %t2806
  %9421 = fadd <4 x float> %9420, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9422 = fmul <4 x float> %9421, %9419
  %9423 = fadd <4 x float> %9300, %9422
  %9424 = sext i32 %t2814 to i64
  %9425 = add nsw i64 %3616, %9424
  %9426 = getelementptr inbounds float, ptr %222, i64 %9425
  %9427 = load <4 x float>, ptr %9426, align 4, !tbaa !70
  %9428 = fmul <4 x float> %9427, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9429 = add nsw i64 %3619, %9424
  %9430 = getelementptr inbounds float, ptr %222, i64 %9429
  %9431 = load <4 x float>, ptr %9430, align 4, !tbaa !70
  %9432 = fmul <4 x float> %9431, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9433 = fadd <4 x float> %9428, %9432
  %9434 = fmul <4 x float> %9433, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9435 = sext i32 %t2812 to i64
  %9436 = add nsw i64 %3616, %9435
  %9437 = getelementptr inbounds float, ptr %222, i64 %9436
  %9438 = load <4 x float>, ptr %9437, align 4, !tbaa !70
  %9439 = fmul <4 x float> %9438, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9440 = add nsw i64 %3619, %9435
  %9441 = getelementptr inbounds float, ptr %222, i64 %9440
  %9442 = load <4 x float>, ptr %9441, align 4, !tbaa !70
  %9443 = fmul <4 x float> %9442, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9444 = fadd <4 x float> %9439, %9443
  %9445 = fmul <4 x float> %9444, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9446 = fadd <4 x float> %9434, %9445
  %9447 = fadd <4 x float> %9423, %9446
  %9448 = insertelement <4 x i32> undef, i32 %t2843, i64 0
  %9449 = shufflevector <4 x i32> %9448, <4 x i32> undef, <4 x i32> zeroinitializer
  %9450 = add nsw <4 x i32> %9449, <i32 0, i32 1, i32 2, i32 3>
  %9451 = add nsw <4 x i32> %t2844, %9450
  %9452 = extractelement <4 x i32> %9451, i64 0
  %9453 = sext i32 %9452 to i64
  %9454 = getelementptr inbounds float, ptr %f4.host, i64 %9453
  %9455 = load float, ptr %9454, align 4, !tbaa !44
  %9456 = insertelement <4 x float> undef, float %9455, i64 0
  %9457 = extractelement <4 x i32> %9451, i64 1
  %9458 = sext i32 %9457 to i64
  %9459 = getelementptr inbounds float, ptr %f4.host, i64 %9458
  %9460 = load float, ptr %9459, align 4, !tbaa !44
  %9461 = insertelement <4 x float> %9456, float %9460, i64 1
  %9462 = extractelement <4 x i32> %9451, i64 2
  %9463 = sext i32 %9462 to i64
  %9464 = getelementptr inbounds float, ptr %f4.host, i64 %9463
  %9465 = load float, ptr %9464, align 4, !tbaa !44
  %9466 = insertelement <4 x float> %9461, float %9465, i64 2
  %9467 = extractelement <4 x i32> %9451, i64 3
  %9468 = sext i32 %9467 to i64
  %9469 = getelementptr inbounds float, ptr %f4.host, i64 %9468
  %9470 = load float, ptr %9469, align 4, !tbaa !44
  %9471 = insertelement <4 x float> %9466, float %9470, i64 3
  %9472 = fmul <4 x float> %9471, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9473 = insertelement <4 x i32> undef, i32 %t2842, i64 0
  %9474 = shufflevector <4 x i32> %9473, <4 x i32> undef, <4 x i32> zeroinitializer
  %9475 = add <4 x i32> %9474, <i32 -1, i32 0, i32 1, i32 2>
  %9476 = add <4 x i32> %9475, %t2844
  %9477 = extractelement <4 x i32> %9476, i64 0
  %9478 = sext i32 %9477 to i64
  %9479 = getelementptr inbounds float, ptr %f4.host, i64 %9478
  %9480 = load float, ptr %9479, align 4, !tbaa !44
  %9481 = insertelement <4 x float> undef, float %9480, i64 0
  %9482 = extractelement <4 x i32> %9476, i64 1
  %9483 = sext i32 %9482 to i64
  %9484 = getelementptr inbounds float, ptr %f4.host, i64 %9483
  %9485 = load float, ptr %9484, align 4, !tbaa !44
  %9486 = insertelement <4 x float> %9481, float %9485, i64 1
  %9487 = extractelement <4 x i32> %9476, i64 2
  %9488 = sext i32 %9487 to i64
  %9489 = getelementptr inbounds float, ptr %f4.host, i64 %9488
  %9490 = load float, ptr %9489, align 4, !tbaa !44
  %9491 = insertelement <4 x float> %9486, float %9490, i64 2
  %9492 = extractelement <4 x i32> %9476, i64 3
  %9493 = sext i32 %9492 to i64
  %9494 = getelementptr inbounds float, ptr %f4.host, i64 %9493
  %9495 = load float, ptr %9494, align 4, !tbaa !44
  %9496 = insertelement <4 x float> %9491, float %9495, i64 3
  %9497 = fmul <4 x float> %9496, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9498 = fadd <4 x float> %9472, %9497
  %9499 = fmul <4 x float> %9498, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9500 = insertelement <4 x i32> undef, i32 %t2841, i64 0
  %9501 = shufflevector <4 x i32> %9500, <4 x i32> undef, <4 x i32> zeroinitializer
  %9502 = add nsw <4 x i32> %9501, <i32 0, i32 1, i32 2, i32 3>
  %9503 = add nsw <4 x i32> %t2844, %9502
  %9504 = extractelement <4 x i32> %9503, i64 0
  %9505 = sext i32 %9504 to i64
  %9506 = getelementptr inbounds float, ptr %f4.host, i64 %9505
  %9507 = load float, ptr %9506, align 4, !tbaa !44
  %9508 = insertelement <4 x float> undef, float %9507, i64 0
  %9509 = extractelement <4 x i32> %9503, i64 1
  %9510 = sext i32 %9509 to i64
  %9511 = getelementptr inbounds float, ptr %f4.host, i64 %9510
  %9512 = load float, ptr %9511, align 4, !tbaa !44
  %9513 = insertelement <4 x float> %9508, float %9512, i64 1
  %9514 = extractelement <4 x i32> %9503, i64 2
  %9515 = sext i32 %9514 to i64
  %9516 = getelementptr inbounds float, ptr %f4.host, i64 %9515
  %9517 = load float, ptr %9516, align 4, !tbaa !44
  %9518 = insertelement <4 x float> %9513, float %9517, i64 2
  %9519 = extractelement <4 x i32> %9503, i64 3
  %9520 = sext i32 %9519 to i64
  %9521 = getelementptr inbounds float, ptr %f4.host, i64 %9520
  %9522 = load float, ptr %9521, align 4, !tbaa !44
  %9523 = insertelement <4 x float> %9518, float %9522, i64 3
  %9524 = fmul <4 x float> %9523, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9525 = insertelement <4 x i32> undef, i32 %t2837, i64 0
  %9526 = shufflevector <4 x i32> %9525, <4 x i32> undef, <4 x i32> zeroinitializer
  %9527 = add <4 x i32> %9526, <i32 -1, i32 0, i32 1, i32 2>
  %9528 = add <4 x i32> %9527, %t2844
  %9529 = extractelement <4 x i32> %9528, i64 0
  %9530 = sext i32 %9529 to i64
  %9531 = getelementptr inbounds float, ptr %f4.host, i64 %9530
  %9532 = load float, ptr %9531, align 4, !tbaa !44
  %9533 = insertelement <4 x float> undef, float %9532, i64 0
  %9534 = extractelement <4 x i32> %9528, i64 1
  %9535 = sext i32 %9534 to i64
  %9536 = getelementptr inbounds float, ptr %f4.host, i64 %9535
  %9537 = load float, ptr %9536, align 4, !tbaa !44
  %9538 = insertelement <4 x float> %9533, float %9537, i64 1
  %9539 = extractelement <4 x i32> %9528, i64 2
  %9540 = sext i32 %9539 to i64
  %9541 = getelementptr inbounds float, ptr %f4.host, i64 %9540
  %9542 = load float, ptr %9541, align 4, !tbaa !44
  %9543 = insertelement <4 x float> %9538, float %9542, i64 2
  %9544 = extractelement <4 x i32> %9528, i64 3
  %9545 = sext i32 %9544 to i64
  %9546 = getelementptr inbounds float, ptr %f4.host, i64 %9545
  %9547 = load float, ptr %9546, align 4, !tbaa !44
  %9548 = insertelement <4 x float> %9543, float %9547, i64 3
  %9549 = fmul <4 x float> %9548, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9550 = fadd <4 x float> %9524, %9549
  %9551 = fmul <4 x float> %9550, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9552 = fadd <4 x float> %9499, %9551
  %9553 = extractelement <4 x i32> %t2835, i64 0
  %9554 = sext i32 %9553 to i64
  %9555 = getelementptr inbounds float, ptr %f0.host, i64 %9554
  %9556 = load float, ptr %9555, align 4, !tbaa !6
  %9557 = insertelement <4 x float> undef, float %9556, i64 0
  %9558 = extractelement <4 x i32> %t2835, i64 1
  %9559 = sext i32 %9558 to i64
  %9560 = getelementptr inbounds float, ptr %f0.host, i64 %9559
  %9561 = load float, ptr %9560, align 4, !tbaa !6
  %9562 = insertelement <4 x float> %9557, float %9561, i64 1
  %9563 = extractelement <4 x i32> %t2835, i64 2
  %9564 = sext i32 %9563 to i64
  %9565 = getelementptr inbounds float, ptr %f0.host, i64 %9564
  %9566 = load float, ptr %9565, align 4, !tbaa !6
  %9567 = insertelement <4 x float> %9562, float %9566, i64 2
  %9568 = extractelement <4 x i32> %t2835, i64 3
  %9569 = sext i32 %9568 to i64
  %9570 = getelementptr inbounds float, ptr %f0.host, i64 %9569
  %9571 = load float, ptr %9570, align 4, !tbaa !6
  %9572 = insertelement <4 x float> %9567, float %9571, i64 3
  %9573 = fsub <4 x float> %t2803, %t2832
  %9574 = fmul <4 x float> %3598, %9573
  %9575 = fadd <4 x float> %t2832, %9574
  %9576 = fadd <4 x float> %9575, %9572
  %9577 = fsub <4 x float> %9576, %9552
  %9578 = fsub <4 x float> %t2805, %t2830
  %9579 = fmul <4 x float> %9578, %9577
  %9580 = add nsw <4 x i32> %t2839, %9450
  %9581 = extractelement <4 x i32> %9580, i64 0
  %9582 = sext i32 %9581 to i64
  %9583 = getelementptr inbounds float, ptr %f4.host, i64 %9582
  %9584 = load float, ptr %9583, align 4, !tbaa !44
  %9585 = insertelement <4 x float> undef, float %9584, i64 0
  %9586 = extractelement <4 x i32> %9580, i64 1
  %9587 = sext i32 %9586 to i64
  %9588 = getelementptr inbounds float, ptr %f4.host, i64 %9587
  %9589 = load float, ptr %9588, align 4, !tbaa !44
  %9590 = insertelement <4 x float> %9585, float %9589, i64 1
  %9591 = extractelement <4 x i32> %9580, i64 2
  %9592 = sext i32 %9591 to i64
  %9593 = getelementptr inbounds float, ptr %f4.host, i64 %9592
  %9594 = load float, ptr %9593, align 4, !tbaa !44
  %9595 = insertelement <4 x float> %9590, float %9594, i64 2
  %9596 = extractelement <4 x i32> %9580, i64 3
  %9597 = sext i32 %9596 to i64
  %9598 = getelementptr inbounds float, ptr %f4.host, i64 %9597
  %9599 = load float, ptr %9598, align 4, !tbaa !44
  %9600 = insertelement <4 x float> %9595, float %9599, i64 3
  %9601 = fmul <4 x float> %9600, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9602 = add <4 x i32> %9475, %t2839
  %9603 = extractelement <4 x i32> %9602, i64 0
  %9604 = sext i32 %9603 to i64
  %9605 = getelementptr inbounds float, ptr %f4.host, i64 %9604
  %9606 = load float, ptr %9605, align 4, !tbaa !44
  %9607 = insertelement <4 x float> undef, float %9606, i64 0
  %9608 = extractelement <4 x i32> %9602, i64 1
  %9609 = sext i32 %9608 to i64
  %9610 = getelementptr inbounds float, ptr %f4.host, i64 %9609
  %9611 = load float, ptr %9610, align 4, !tbaa !44
  %9612 = insertelement <4 x float> %9607, float %9611, i64 1
  %9613 = extractelement <4 x i32> %9602, i64 2
  %9614 = sext i32 %9613 to i64
  %9615 = getelementptr inbounds float, ptr %f4.host, i64 %9614
  %9616 = load float, ptr %9615, align 4, !tbaa !44
  %9617 = insertelement <4 x float> %9612, float %9616, i64 2
  %9618 = extractelement <4 x i32> %9602, i64 3
  %9619 = sext i32 %9618 to i64
  %9620 = getelementptr inbounds float, ptr %f4.host, i64 %9619
  %9621 = load float, ptr %9620, align 4, !tbaa !44
  %9622 = insertelement <4 x float> %9617, float %9621, i64 3
  %9623 = fmul <4 x float> %9622, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9624 = fadd <4 x float> %9601, %9623
  %9625 = fmul <4 x float> %9624, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9626 = add nsw <4 x i32> %t2839, %9502
  %9627 = extractelement <4 x i32> %9626, i64 0
  %9628 = sext i32 %9627 to i64
  %9629 = getelementptr inbounds float, ptr %f4.host, i64 %9628
  %9630 = load float, ptr %9629, align 4, !tbaa !44
  %9631 = insertelement <4 x float> undef, float %9630, i64 0
  %9632 = extractelement <4 x i32> %9626, i64 1
  %9633 = sext i32 %9632 to i64
  %9634 = getelementptr inbounds float, ptr %f4.host, i64 %9633
  %9635 = load float, ptr %9634, align 4, !tbaa !44
  %9636 = insertelement <4 x float> %9631, float %9635, i64 1
  %9637 = extractelement <4 x i32> %9626, i64 2
  %9638 = sext i32 %9637 to i64
  %9639 = getelementptr inbounds float, ptr %f4.host, i64 %9638
  %9640 = load float, ptr %9639, align 4, !tbaa !44
  %9641 = insertelement <4 x float> %9636, float %9640, i64 2
  %9642 = extractelement <4 x i32> %9626, i64 3
  %9643 = sext i32 %9642 to i64
  %9644 = getelementptr inbounds float, ptr %f4.host, i64 %9643
  %9645 = load float, ptr %9644, align 4, !tbaa !44
  %9646 = insertelement <4 x float> %9641, float %9645, i64 3
  %9647 = fmul <4 x float> %9646, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9648 = add <4 x i32> %9527, %t2839
  %9649 = extractelement <4 x i32> %9648, i64 0
  %9650 = sext i32 %9649 to i64
  %9651 = getelementptr inbounds float, ptr %f4.host, i64 %9650
  %9652 = load float, ptr %9651, align 4, !tbaa !44
  %9653 = insertelement <4 x float> undef, float %9652, i64 0
  %9654 = extractelement <4 x i32> %9648, i64 1
  %9655 = sext i32 %9654 to i64
  %9656 = getelementptr inbounds float, ptr %f4.host, i64 %9655
  %9657 = load float, ptr %9656, align 4, !tbaa !44
  %9658 = insertelement <4 x float> %9653, float %9657, i64 1
  %9659 = extractelement <4 x i32> %9648, i64 2
  %9660 = sext i32 %9659 to i64
  %9661 = getelementptr inbounds float, ptr %f4.host, i64 %9660
  %9662 = load float, ptr %9661, align 4, !tbaa !44
  %9663 = insertelement <4 x float> %9658, float %9662, i64 2
  %9664 = extractelement <4 x i32> %9648, i64 3
  %9665 = sext i32 %9664 to i64
  %9666 = getelementptr inbounds float, ptr %f4.host, i64 %9665
  %9667 = load float, ptr %9666, align 4, !tbaa !44
  %9668 = insertelement <4 x float> %9663, float %9667, i64 3
  %9669 = fmul <4 x float> %9668, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9670 = fadd <4 x float> %9647, %9669
  %9671 = fmul <4 x float> %9670, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9672 = fadd <4 x float> %9625, %9671
  %9673 = add nsw <4 x i32> %t2835, <i32 256, i32 256, i32 256, i32 256>
  %9674 = extractelement <4 x i32> %9673, i64 0
  %9675 = sext i32 %9674 to i64
  %9676 = getelementptr inbounds float, ptr %f0.host, i64 %9675
  %9677 = load float, ptr %9676, align 4, !tbaa !6
  %9678 = insertelement <4 x float> undef, float %9677, i64 0
  %9679 = extractelement <4 x i32> %9673, i64 1
  %9680 = sext i32 %9679 to i64
  %9681 = getelementptr inbounds float, ptr %f0.host, i64 %9680
  %9682 = load float, ptr %9681, align 4, !tbaa !6
  %9683 = insertelement <4 x float> %9678, float %9682, i64 1
  %9684 = extractelement <4 x i32> %9673, i64 2
  %9685 = sext i32 %9684 to i64
  %9686 = getelementptr inbounds float, ptr %f0.host, i64 %9685
  %9687 = load float, ptr %9686, align 4, !tbaa !6
  %9688 = insertelement <4 x float> %9683, float %9687, i64 2
  %9689 = extractelement <4 x i32> %9673, i64 3
  %9690 = sext i32 %9689 to i64
  %9691 = getelementptr inbounds float, ptr %f0.host, i64 %9690
  %9692 = load float, ptr %9691, align 4, !tbaa !6
  %9693 = insertelement <4 x float> %9688, float %9692, i64 3
  %9694 = fsub <4 x float> %t2803, %t2831
  %9695 = fmul <4 x float> %3598, %9694
  %9696 = fadd <4 x float> %t2831, %9695
  %9697 = fadd <4 x float> %9696, %9693
  %9698 = fsub <4 x float> %9697, %9672
  %9699 = fsub <4 x float> %t2830, %t2805
  %9700 = fadd <4 x float> %9699, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9701 = fmul <4 x float> %9700, %9698
  %9702 = fadd <4 x float> %9579, %9701
  %9703 = add nsw i64 %3621, %9424
  %9704 = getelementptr inbounds float, ptr %222, i64 %9703
  %9705 = load <4 x float>, ptr %9704, align 4, !tbaa !70
  %9706 = fmul <4 x float> %9705, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9707 = add nsw i64 %3624, %9424
  %9708 = getelementptr inbounds float, ptr %222, i64 %9707
  %9709 = load <4 x float>, ptr %9708, align 4, !tbaa !70
  %9710 = fmul <4 x float> %9709, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9711 = fadd <4 x float> %9706, %9710
  %9712 = fmul <4 x float> %9711, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9713 = add nsw i64 %3621, %9435
  %9714 = getelementptr inbounds float, ptr %222, i64 %9713
  %9715 = load <4 x float>, ptr %9714, align 4, !tbaa !70
  %9716 = fmul <4 x float> %9715, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9717 = add nsw i64 %3624, %9435
  %9718 = getelementptr inbounds float, ptr %222, i64 %9717
  %9719 = load <4 x float>, ptr %9718, align 4, !tbaa !70
  %9720 = fmul <4 x float> %9719, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9721 = fadd <4 x float> %9716, %9720
  %9722 = fmul <4 x float> %9721, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9723 = fadd <4 x float> %9712, %9722
  %9724 = fadd <4 x float> %9702, %9723
  %9725 = shufflevector <4 x float> %9447, <4 x float> %9724, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %9726 = getelementptr inbounds float, ptr %8525, i64 %3627
  store <8 x float> %9725, ptr %9726, align 4, !tbaa !72
  br label %"consume f12583"

"consume f12583":                                 ; preds = %"for f125.s0.v3.v380.preheader", %"end for f125.s0.v3.v378"
  br i1 %3638, label %"for local_laplacian.s0.v3.v384.preheader", label %"end for local_laplacian.s0.v3.v385", !prof !5

"for local_laplacian.s0.v3.v384.preheader":       ; preds = %"consume f12583"
  %9727 = add nsw i64 %3405, %indvars.iv325
  %9728 = mul nsw i64 %9727, %3404
  %9729 = sub i64 %9728, %8
  %9730 = trunc i64 %3710 to i32
  %9731 = mul i32 %input.stride.1, %9730
  br label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v384":                 ; preds = %"for local_laplacian.s0.v3.v384.preheader", %"end for local_laplacian.s0.v589"
  %local_laplacian.s0.v3.v386 = phi i32 [ %9811, %"end for local_laplacian.s0.v589" ], [ 0, %"for local_laplacian.s0.v3.v384.preheader" ]
  br i1 %3639, label %"for local_laplacian.s0.v588.preheader", label %"end for local_laplacian.s0.v589", !prof !5

"for local_laplacian.s0.v588.preheader":          ; preds = %"for local_laplacian.s0.v3.v384"
  %9732 = shl nsw i32 %local_laplacian.s0.v3.v386, 3
  %a1013 = add nsw i32 %9732, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base87 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1013)
  %9733 = sext i32 %local_laplacian.s0.v3.v277.base87 to i64
  %9734 = add i64 %lsr.iv349, %9733
  %scevgep351 = getelementptr i16, ptr %local_laplacian.host, i64 %9734
  %9735 = add i64 %9729, %9733
  %9736 = getelementptr inbounds float, ptr %f2.host, i64 %9735
  %9737 = load <8 x float>, ptr %9736, align 4, !tbaa !42
  %9738 = fadd <8 x float> %9737, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9739 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base87, i64 0
  %9740 = shufflevector <8 x i32> %9739, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1019 = add nsw <8 x i32> %9740, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1018 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1019)
  %9741 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1018, <8 x i32> %b1020.pre-phi)
  %9742 = sub nsw i64 %9733, %.pre-phi338
  %9743 = getelementptr inbounds float, ptr %8525, i64 %9742
  %9744 = load <8 x float>, ptr %9743, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v3.v385":             ; preds = %"end for local_laplacian.s0.v589", %"consume f12583"
  br i1 %.not176, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390.preheader", !prof !4

"for local_laplacian.s0.v3.v390.preheader":       ; preds = %"end for local_laplacian.s0.v3.v385"
  %9745 = sub nsw i64 %3710, %10
  %9746 = mul nsw i64 %9745, %3404
  %9747 = sub i64 %9746, %8
  %9748 = mul nsw i64 %3710, %53
  %9749 = sub i64 %9748, %3461
  %9750 = add i64 %lsr.iv367, %3646
  %9751 = add i64 %lsr.iv374, %3647
  %9752 = add nsw i64 %3405, %indvars.iv325
  %9753 = mul nsw i64 %9752, %3404
  %9754 = sub i64 %9753, %8
  %9755 = add i64 %lsr.iv367, %3649
  br label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v588":                    ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v588.preheader"
  %lsr.iv352 = phi ptr [ %scevgep351, %"for local_laplacian.s0.v588.preheader" ], [ %scevgep354, %"for local_laplacian.s0.v588" ]
  %lsr.iv347 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v588.preheader" ], [ %lsr.iv.next348, %"for local_laplacian.s0.v588" ]
  %a1017 = phi i32 [ %b1028, %"for local_laplacian.s0.v588.preheader" ], [ %9810, %"for local_laplacian.s0.v588" ]
  %a1016 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1017)
  %9756 = tail call i32 @llvm.smax.i32(i32 %a1016, i32 %b1146)
  %9757 = mul nsw i32 %9756, %input.stride.2
  %.scalar329 = add i32 %9757, %9731
  %.scalar330 = sub i32 %.scalar329, %.pre-phi353
  %9758 = insertelement <8 x i32> undef, i32 %.scalar330, i64 0
  %9759 = shufflevector <8 x i32> %9758, <8 x i32> poison, <8 x i32> zeroinitializer
  %9760 = add <8 x i32> %9759, %9741
  %9761 = extractelement <8 x i32> %9760, i64 0
  %9762 = sext i32 %9761 to i64
  %9763 = getelementptr inbounds i16, ptr %input.host, i64 %9762
  %9764 = load i16, ptr %9763, align 2, !tbaa !40
  %9765 = insertelement <8 x i16> undef, i16 %9764, i64 0
  %9766 = extractelement <8 x i32> %9760, i64 1
  %9767 = sext i32 %9766 to i64
  %9768 = getelementptr inbounds i16, ptr %input.host, i64 %9767
  %9769 = load i16, ptr %9768, align 2, !tbaa !40
  %9770 = insertelement <8 x i16> %9765, i16 %9769, i64 1
  %9771 = extractelement <8 x i32> %9760, i64 2
  %9772 = sext i32 %9771 to i64
  %9773 = getelementptr inbounds i16, ptr %input.host, i64 %9772
  %9774 = load i16, ptr %9773, align 2, !tbaa !40
  %9775 = insertelement <8 x i16> %9770, i16 %9774, i64 2
  %9776 = extractelement <8 x i32> %9760, i64 3
  %9777 = sext i32 %9776 to i64
  %9778 = getelementptr inbounds i16, ptr %input.host, i64 %9777
  %9779 = load i16, ptr %9778, align 2, !tbaa !40
  %9780 = insertelement <8 x i16> %9775, i16 %9779, i64 3
  %9781 = extractelement <8 x i32> %9760, i64 4
  %9782 = sext i32 %9781 to i64
  %9783 = getelementptr inbounds i16, ptr %input.host, i64 %9782
  %9784 = load i16, ptr %9783, align 2, !tbaa !40
  %9785 = insertelement <8 x i16> %9780, i16 %9784, i64 4
  %9786 = extractelement <8 x i32> %9760, i64 5
  %9787 = sext i32 %9786 to i64
  %9788 = getelementptr inbounds i16, ptr %input.host, i64 %9787
  %9789 = load i16, ptr %9788, align 2, !tbaa !40
  %9790 = insertelement <8 x i16> %9785, i16 %9789, i64 5
  %9791 = extractelement <8 x i32> %9760, i64 6
  %9792 = sext i32 %9791 to i64
  %9793 = getelementptr inbounds i16, ptr %input.host, i64 %9792
  %9794 = load i16, ptr %9793, align 2, !tbaa !40
  %9795 = insertelement <8 x i16> %9790, i16 %9794, i64 6
  %9796 = extractelement <8 x i32> %9760, i64 7
  %9797 = sext i32 %9796 to i64
  %9798 = getelementptr inbounds i16, ptr %input.host, i64 %9797
  %9799 = load i16, ptr %9798, align 2, !tbaa !40
  %9800 = insertelement <8 x i16> %9795, i16 %9799, i64 7
  %9801 = uitofp <8 x i16> %9800 to <8 x float>
  %9802 = fmul <8 x float> %9801, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9803 = fadd <8 x float> %9802, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9804 = fmul <8 x float> %9744, %9803
  %a1015 = fdiv <8 x float> %9804, %9738
  %9805 = fcmp olt <8 x float> %a1015, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1014 = select <8 x i1> %9805, <8 x float> %a1015, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9806 = fcmp ogt <8 x float> %a1014, zeroinitializer
  %9807 = select <8 x i1> %9806, <8 x float> %a1014, <8 x float> zeroinitializer
  %9808 = fmul <8 x float> %9807, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9809 = fptoui <8 x float> %9808 to <8 x i16>
  store <8 x i16> %9809, ptr %lsr.iv352, align 2, !tbaa !74
  %9810 = add nsw i32 %a1017, 1
  %lsr.iv.next348 = add i32 %lsr.iv347, -1
  %scevgep354 = getelementptr i1, ptr %lsr.iv352, i64 %3403
  %.not114 = icmp eq i32 %lsr.iv.next348, 0
  br i1 %.not114, label %"end for local_laplacian.s0.v589", label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v589":                ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v3.v384"
  %9811 = add nuw nsw i32 %local_laplacian.s0.v3.v386, 1
  %.not113 = icmp eq i32 %9811, %local_laplacian.s0.v3.v3.prologue
  br i1 %.not113, label %"end for local_laplacian.s0.v3.v385", label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v390":                 ; preds = %"for local_laplacian.s0.v3.v390.preheader", %"end for local_laplacian.s0.v5100"
  %local_laplacian.s0.v3.v392 = phi i32 [ %9886, %"end for local_laplacian.s0.v5100" ], [ %local_laplacian.s0.v3.v3.prologue, %"for local_laplacian.s0.v3.v390.preheader" ]
  %9812 = shl nsw i32 %local_laplacian.s0.v3.v392, 3
  %a1020 = add nsw i32 %9812, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base93 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1020)
  br i1 %3640, label %"for local_laplacian.s0.v594.preheader", label %"end for local_laplacian.s0.v595", !prof !5

"for local_laplacian.s0.v594.preheader":          ; preds = %"for local_laplacian.s0.v3.v390"
  %9813 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %9814 = add i64 %lsr.iv349, %9813
  %scevgep360 = getelementptr i16, ptr %local_laplacian.host, i64 %9814
  %9815 = add i64 %9747, %9813
  %9816 = getelementptr inbounds float, ptr %f2.host, i64 %9815
  %9817 = load <8 x float>, ptr %9816, align 4, !tbaa !42
  %9818 = fadd <8 x float> %9817, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9819 = add i64 %9749, %9813
  %9820 = sub nsw i64 %9813, %.pre-phi338
  %9821 = getelementptr inbounds float, ptr %8525, i64 %9820
  %9822 = load <8 x float>, ptr %9821, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v3.v391":             ; preds = %"end for local_laplacian.s0.v5100", %"end for local_laplacian.s0.v3.v385"
  br i1 %3650, label %"for local_laplacian.s0.v3.v3102.preheader", label %if.then.i268, !prof !5

"for local_laplacian.s0.v3.v3102.preheader":      ; preds = %"end for local_laplacian.s0.v3.v391"
  %9823 = add nsw i64 %3405, %indvars.iv325
  %9824 = mul nsw i64 %9823, %3404
  %9825 = sub i64 %9824, %8
  %9826 = trunc i64 %3710 to i32
  %9827 = mul i32 %input.stride.1, %9826
  br label %"for local_laplacian.s0.v3.v3102"

"for local_laplacian.s0.v594":                    ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v594.preheader"
  %lsr.iv361 = phi ptr [ %scevgep360, %"for local_laplacian.s0.v594.preheader" ], [ %scevgep363, %"for local_laplacian.s0.v594" ]
  %lsr.iv356 = phi i64 [ %69, %"for local_laplacian.s0.v594.preheader" ], [ %lsr.iv.next357, %"for local_laplacian.s0.v594" ]
  %a1029 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv356)
  %9828 = tail call i64 @llvm.smax.i64(i64 %a1029, i64 %b1037)
  %9829 = mul nsw i64 %9828, %55
  %9830 = add i64 %9819, %9829
  %9831 = getelementptr inbounds i16, ptr %input.host, i64 %9830
  %9832 = load <8 x i16>, ptr %9831, align 2, !tbaa !40
  %9833 = uitofp <8 x i16> %9832 to <8 x float>
  %9834 = fmul <8 x float> %9833, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9835 = fadd <8 x float> %9834, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9836 = fmul <8 x float> %9822, %9835
  %a1028 = fdiv <8 x float> %9836, %9818
  %9837 = fcmp olt <8 x float> %a1028, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1027 = select <8 x i1> %9837, <8 x float> %a1028, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9838 = fcmp ogt <8 x float> %a1027, zeroinitializer
  %9839 = select <8 x i1> %9838, <8 x float> %a1027, <8 x float> zeroinitializer
  %9840 = fmul <8 x float> %9839, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9841 = fptoui <8 x float> %9840 to <8 x i16>
  store <8 x i16> %9841, ptr %lsr.iv361, align 2, !tbaa !74
  %lsr.iv.next357 = add nsw i64 %lsr.iv356, 1
  %tmp358 = trunc i64 %lsr.iv.next357 to i32
  %scevgep363 = getelementptr i1, ptr %lsr.iv361, i64 %3403
  %.not112 = icmp eq i32 %local_laplacian.s0.v5.prologue, %tmp358
  br i1 %.not112, label %"end for local_laplacian.s0.v595", label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v595":                ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v3.v390"
  br i1 %3641, label %"for local_laplacian.s0.v596.preheader", label %"end for local_laplacian.s0.v597", !prof !5

"for local_laplacian.s0.v596.preheader":          ; preds = %"end for local_laplacian.s0.v595"
  %9842 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %9843 = add i64 %9750, %9842
  %scevgep369 = getelementptr i16, ptr %local_laplacian.host, i64 %9843
  %9844 = add i64 %9751, %9842
  %scevgep376 = getelementptr i16, ptr %input.host, i64 %9844
  %9845 = add i64 %9754, %9842
  %9846 = getelementptr inbounds float, ptr %f2.host, i64 %9845
  %9847 = load <8 x float>, ptr %9846, align 4, !tbaa !42
  %9848 = fadd <8 x float> %9847, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9849 = sub nsw i64 %9842, %.pre-phi338
  %9850 = getelementptr inbounds float, ptr %8525, i64 %9849
  %9851 = load <8 x float>, ptr %9850, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v596"

"for local_laplacian.s0.v596":                    ; preds = %"for local_laplacian.s0.v596", %"for local_laplacian.s0.v596.preheader"
  %lsr.iv377 = phi ptr [ %scevgep376, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep379, %"for local_laplacian.s0.v596" ]
  %lsr.iv370 = phi ptr [ %scevgep369, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep372, %"for local_laplacian.s0.v596" ]
  %lsr.iv365 = phi i32 [ %3644, %"for local_laplacian.s0.v596.preheader" ], [ %lsr.iv.next366, %"for local_laplacian.s0.v596" ]
  %9852 = load <8 x i16>, ptr %lsr.iv377, align 2, !tbaa !40
  %9853 = uitofp <8 x i16> %9852 to <8 x float>
  %9854 = fmul <8 x float> %9853, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9855 = fadd <8 x float> %9854, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9856 = fmul <8 x float> %9851, %9855
  %a1032 = fdiv <8 x float> %9856, %9848
  %9857 = fcmp olt <8 x float> %a1032, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1031 = select <8 x i1> %9857, <8 x float> %a1032, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9858 = fcmp ogt <8 x float> %a1031, zeroinitializer
  %9859 = select <8 x i1> %9858, <8 x float> %a1031, <8 x float> zeroinitializer
  %9860 = fmul <8 x float> %9859, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9861 = fptoui <8 x float> %9860 to <8 x i16>
  store <8 x i16> %9861, ptr %lsr.iv370, align 2, !tbaa !74
  %lsr.iv.next366 = add i32 %lsr.iv365, -1
  %scevgep372 = getelementptr i1, ptr %lsr.iv370, i64 %3403
  %scevgep379 = getelementptr i1, ptr %lsr.iv377, i64 %3463
  %.not111 = icmp eq i32 %lsr.iv.next366, 0
  br i1 %.not111, label %"end for local_laplacian.s0.v597", label %"for local_laplacian.s0.v596"

"end for local_laplacian.s0.v597":                ; preds = %"for local_laplacian.s0.v596", %"end for local_laplacian.s0.v595"
  br i1 %3642, label %"for local_laplacian.s0.v599.preheader", label %"end for local_laplacian.s0.v5100", !prof !5

"for local_laplacian.s0.v599.preheader":          ; preds = %"end for local_laplacian.s0.v597"
  %9862 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %9863 = add i64 %9755, %9862
  %scevgep385 = getelementptr i16, ptr %local_laplacian.host, i64 %9863
  %9864 = add i64 %9747, %9862
  %9865 = getelementptr inbounds float, ptr %f2.host, i64 %9864
  %9866 = load <8 x float>, ptr %9865, align 4, !tbaa !42
  %9867 = fadd <8 x float> %9866, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9868 = add i64 %9749, %9862
  %9869 = sub nsw i64 %9862, %.pre-phi338
  %9870 = getelementptr inbounds float, ptr %8525, i64 %9869
  %9871 = load <8 x float>, ptr %9870, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v599"

"for local_laplacian.s0.v599":                    ; preds = %"for local_laplacian.s0.v599", %"for local_laplacian.s0.v599.preheader"
  %lsr.iv386 = phi ptr [ %scevgep385, %"for local_laplacian.s0.v599.preheader" ], [ %scevgep388, %"for local_laplacian.s0.v599" ]
  %lsr.iv381 = phi i64 [ %3648, %"for local_laplacian.s0.v599.preheader" ], [ %lsr.iv.next382, %"for local_laplacian.s0.v599" ]
  %a1035 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv381)
  %9872 = tail call i64 @llvm.smax.i64(i64 %a1035, i64 %b1037)
  %9873 = mul nsw i64 %9872, %55
  %9874 = add i64 %9868, %9873
  %9875 = getelementptr inbounds i16, ptr %input.host, i64 %9874
  %9876 = load <8 x i16>, ptr %9875, align 2, !tbaa !40
  %9877 = uitofp <8 x i16> %9876 to <8 x float>
  %9878 = fmul <8 x float> %9877, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9879 = fadd <8 x float> %9878, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9880 = fmul <8 x float> %9871, %9879
  %a1034 = fdiv <8 x float> %9880, %9867
  %9881 = fcmp olt <8 x float> %a1034, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1033 = select <8 x i1> %9881, <8 x float> %a1034, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9882 = fcmp ogt <8 x float> %a1033, zeroinitializer
  %9883 = select <8 x i1> %9882, <8 x float> %a1033, <8 x float> zeroinitializer
  %9884 = fmul <8 x float> %9883, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9885 = fptoui <8 x float> %9884 to <8 x i16>
  store <8 x i16> %9885, ptr %lsr.iv386, align 2, !tbaa !74
  %lsr.iv.next382 = add nsw i64 %lsr.iv381, 1
  %tmp383 = trunc i64 %lsr.iv.next382 to i32
  %scevgep388 = getelementptr i1, ptr %lsr.iv386, i64 %3403
  %.not110 = icmp eq i32 %3464, %tmp383
  br i1 %.not110, label %"end for local_laplacian.s0.v5100", label %"for local_laplacian.s0.v599"

"end for local_laplacian.s0.v5100":               ; preds = %"for local_laplacian.s0.v599", %"end for local_laplacian.s0.v597"
  %9886 = add nsw i32 %local_laplacian.s0.v3.v392, 1
  %.not109 = icmp eq i32 %9886, %local_laplacian.s0.v3.v3.epilogue
  br i1 %.not109, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v3.v3102":                ; preds = %"for local_laplacian.s0.v3.v3102.preheader", %"end for local_laplacian.s0.v5107"
  %local_laplacian.s0.v3.v3104 = phi i32 [ %9955, %"end for local_laplacian.s0.v5107" ], [ %local_laplacian.s0.v3.v3.epilogue, %"for local_laplacian.s0.v3.v3102.preheader" ]
  br i1 %3639, label %"for local_laplacian.s0.v5106.preheader", label %"end for local_laplacian.s0.v5107", !prof !5

"for local_laplacian.s0.v5106.preheader":         ; preds = %"for local_laplacian.s0.v3.v3102"
  %9887 = shl nsw i32 %local_laplacian.s0.v3.v3104, 3
  %a1037 = add nsw i32 %9887, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base105 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1037)
  %9888 = sext i32 %local_laplacian.s0.v3.v277.base105 to i64
  %9889 = add i64 %lsr.iv349, %9888
  %scevgep392 = getelementptr i16, ptr %local_laplacian.host, i64 %9889
  %9890 = add i64 %9825, %9888
  %9891 = getelementptr inbounds float, ptr %f2.host, i64 %9890
  %9892 = load <8 x float>, ptr %9891, align 4, !tbaa !42
  %9893 = fadd <8 x float> %9892, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9894 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base105, i64 0
  %9895 = shufflevector <8 x i32> %9894, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1043 = add nsw <8 x i32> %9895, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1042 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1043)
  %9896 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1042, <8 x i32> %b1020.pre-phi)
  %9897 = sub nsw i64 %9888, %.pre-phi338
  %9898 = getelementptr inbounds float, ptr %8525, i64 %9897
  %9899 = load <8 x float>, ptr %9898, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5106"

if.then.i268:                                     ; preds = %"end for local_laplacian.s0.v5107", %"end for local_laplacian.s0.v3.v391"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %8525) #7
  %indvars.iv.next326 = add nuw nsw i64 %indvars.iv325, 1
  %lsr.iv.next320 = xor i1 %lsr.iv319, true
  %lsr.iv.next330 = add i32 %lsr.iv329, %3443
  %lsr.iv.next350 = add i64 %lsr.iv349, %73
  %lsr.iv.next368 = add i64 %lsr.iv367, %73
  %lsr.iv.next375 = add i64 %lsr.iv374, %53
  %.not106 = icmp eq i64 %indvars.iv.next326, 64
  br i1 %.not106, label %if.then.i256, label %"produce f12919"

"for local_laplacian.s0.v5106":                   ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v5106.preheader"
  %lsr.iv393 = phi ptr [ %scevgep392, %"for local_laplacian.s0.v5106.preheader" ], [ %scevgep395, %"for local_laplacian.s0.v5106" ]
  %lsr.iv390 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5106.preheader" ], [ %lsr.iv.next391, %"for local_laplacian.s0.v5106" ]
  %a1041 = phi i32 [ %b1028, %"for local_laplacian.s0.v5106.preheader" ], [ %9954, %"for local_laplacian.s0.v5106" ]
  %a1040 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1041)
  %9900 = tail call i32 @llvm.smax.i32(i32 %a1040, i32 %b1146)
  %9901 = mul nsw i32 %9900, %input.stride.2
  %.scalar331 = add i32 %9901, %9827
  %.scalar332 = sub i32 %.scalar331, %.pre-phi353
  %9902 = insertelement <8 x i32> undef, i32 %.scalar332, i64 0
  %9903 = shufflevector <8 x i32> %9902, <8 x i32> poison, <8 x i32> zeroinitializer
  %9904 = add <8 x i32> %9903, %9896
  %9905 = extractelement <8 x i32> %9904, i64 0
  %9906 = sext i32 %9905 to i64
  %9907 = getelementptr inbounds i16, ptr %input.host, i64 %9906
  %9908 = load i16, ptr %9907, align 2, !tbaa !40
  %9909 = insertelement <8 x i16> undef, i16 %9908, i64 0
  %9910 = extractelement <8 x i32> %9904, i64 1
  %9911 = sext i32 %9910 to i64
  %9912 = getelementptr inbounds i16, ptr %input.host, i64 %9911
  %9913 = load i16, ptr %9912, align 2, !tbaa !40
  %9914 = insertelement <8 x i16> %9909, i16 %9913, i64 1
  %9915 = extractelement <8 x i32> %9904, i64 2
  %9916 = sext i32 %9915 to i64
  %9917 = getelementptr inbounds i16, ptr %input.host, i64 %9916
  %9918 = load i16, ptr %9917, align 2, !tbaa !40
  %9919 = insertelement <8 x i16> %9914, i16 %9918, i64 2
  %9920 = extractelement <8 x i32> %9904, i64 3
  %9921 = sext i32 %9920 to i64
  %9922 = getelementptr inbounds i16, ptr %input.host, i64 %9921
  %9923 = load i16, ptr %9922, align 2, !tbaa !40
  %9924 = insertelement <8 x i16> %9919, i16 %9923, i64 3
  %9925 = extractelement <8 x i32> %9904, i64 4
  %9926 = sext i32 %9925 to i64
  %9927 = getelementptr inbounds i16, ptr %input.host, i64 %9926
  %9928 = load i16, ptr %9927, align 2, !tbaa !40
  %9929 = insertelement <8 x i16> %9924, i16 %9928, i64 4
  %9930 = extractelement <8 x i32> %9904, i64 5
  %9931 = sext i32 %9930 to i64
  %9932 = getelementptr inbounds i16, ptr %input.host, i64 %9931
  %9933 = load i16, ptr %9932, align 2, !tbaa !40
  %9934 = insertelement <8 x i16> %9929, i16 %9933, i64 5
  %9935 = extractelement <8 x i32> %9904, i64 6
  %9936 = sext i32 %9935 to i64
  %9937 = getelementptr inbounds i16, ptr %input.host, i64 %9936
  %9938 = load i16, ptr %9937, align 2, !tbaa !40
  %9939 = insertelement <8 x i16> %9934, i16 %9938, i64 6
  %9940 = extractelement <8 x i32> %9904, i64 7
  %9941 = sext i32 %9940 to i64
  %9942 = getelementptr inbounds i16, ptr %input.host, i64 %9941
  %9943 = load i16, ptr %9942, align 2, !tbaa !40
  %9944 = insertelement <8 x i16> %9939, i16 %9943, i64 7
  %9945 = uitofp <8 x i16> %9944 to <8 x float>
  %9946 = fmul <8 x float> %9945, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9947 = fadd <8 x float> %9946, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9948 = fmul <8 x float> %9899, %9947
  %a1039 = fdiv <8 x float> %9948, %9893
  %9949 = fcmp olt <8 x float> %a1039, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1038 = select <8 x i1> %9949, <8 x float> %a1039, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9950 = fcmp ogt <8 x float> %a1038, zeroinitializer
  %9951 = select <8 x i1> %9950, <8 x float> %a1038, <8 x float> zeroinitializer
  %9952 = fmul <8 x float> %9951, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9953 = fptoui <8 x float> %9952 to <8 x i16>
  store <8 x i16> %9953, ptr %lsr.iv393, align 2, !tbaa !74
  %9954 = add nsw i32 %a1041, 1
  %lsr.iv.next391 = add i32 %lsr.iv390, -1
  %scevgep395 = getelementptr i1, ptr %lsr.iv393, i64 %3403
  %.not108 = icmp eq i32 %lsr.iv.next391, 0
  br i1 %.not108, label %"end for local_laplacian.s0.v5107", label %"for local_laplacian.s0.v5106"

"end for local_laplacian.s0.v5107":               ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v3.v3102"
  %9955 = add nsw i32 %local_laplacian.s0.v3.v3104, 1
  %.not107 = icmp eq i32 %9955, %3400
  br i1 %.not107, label %if.then.i268, label %"for local_laplacian.s0.v3.v3102"

"assert failed112":                               ; preds = %false_bb
  %9956 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %120, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded113":                            ; preds = %false_bb
  %9957 = add nuw nsw i64 %120, 4
  %9958 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9957)
  %.not76 = icmp eq ptr %9958, null
  br i1 %.not76, label %"assert failed114", label %"assert succeeded115", !prof !4

"assert failed114":                               ; preds = %"assert succeeded113"
  %9959 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded115":                            ; preds = %"assert succeeded113"
  %a1055 = add nsw i32 %a1120, -6
  %b1057 = add nsw i32 %95, -23
  %9960 = tail call i32 @llvm.smin.i32(i32 %b1057, i32 %a1055)
  %9961 = ashr i32 %9960, 3
  %a1054 = add nsw i32 %9961, -1
  %b1056 = ashr i32 %96, 3
  %.not160 = icmp slt i32 %b1056, %9961
  %f128.v3.min_realized117 = select i1 %.not160, i32 %b1056, i32 %a1054
  %9962 = ashr i32 %a1055, 2
  %9963 = add nsw i32 %95, 5
  %9964 = ashr i32 %9963, 2
  %9965 = sub nsw i32 %9964, %9962
  %9966 = lshr i32 %9965, 3
  %9967 = and i32 %9965, -8
  %a1061 = add nsw i32 %9967, %9962
  %b1063 = ashr i32 %b1057, 2
  %9968 = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %a1061)
  %9969 = add nsw i32 %9968, 9
  %a1060 = ashr i32 %9969, 1
  %b1062 = add nsw i32 %104, 7
  %9970 = tail call i32 @llvm.smax.i32(i32 %a1060, i32 %b1062)
  %f128.v3.extent_realized.s118 = sub nsw i32 %9970, %f128.v3.min_realized117
  %t3094 = and i32 %113, 7
  %9971 = add nuw nsw i32 %t3094, 99
  %9972 = lshr i32 %9971, 3
  %9973 = zext i32 %9972 to i64
  %9974 = add nsw i32 %f128.v3.extent_realized.s118, 1
  %9975 = zext i32 %9974 to i64
  %9976 = shl nuw nsw i64 %9975, 2
  %9977 = mul nuw nsw i64 %9976, %9973
  %9978 = icmp ult i64 %9977, 2147483648
  br i1 %9978, label %"assert succeeded120", label %"assert failed119", !prof !5

"assert failed119":                               ; preds = %"assert succeeded115"
  %9979 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %9977, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded120":                            ; preds = %"assert succeeded115"
  %9980 = add nuw nsw i64 %9977, 4
  %9981 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9980)
  %.not77 = icmp eq ptr %9981, null
  br i1 %.not77, label %"assert failed121", label %"assert succeeded122", !prof !4

"assert failed121":                               ; preds = %"assert succeeded120"
  %9982 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded122":                            ; preds = %"assert succeeded120"
  %9983 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a1064 = add nsw i32 %9983, -1
  %9984 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b1066 = ashr i32 %9984, 1
  %.not161 = icmp slt i32 %b1066, %9983
  %9985 = select i1 %.not161, i32 %b1066, i32 %a1064
  %9986 = ashr i32 %9985, 1
  %a1063 = add nsw i32 %9986, -1
  %9987 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b1065 = ashr i32 %9987, 2
  %.not162 = icmp slt i32 %b1065, %9986
  %f127.v4.min_realized124 = select i1 %.not162, i32 %b1065, i32 %a1063
  %9988 = ashr i32 %a1120, 1
  %a1066 = add nsw i32 %9988, -1
  %9989 = add nsw i32 %95, -13
  %b1068 = ashr i32 %9989, 1
  %.not163 = icmp slt i32 %b1068, %9988
  %9990 = select i1 %.not163, i32 %b1068, i32 %a1066
  %9991 = ashr i32 %9990, 1
  %a1065 = add nsw i32 %9991, -1
  %b1067 = ashr i32 %9960, 2
  %.not164 = icmp slt i32 %b1067, %9991
  %f127.v3.min_realized125 = select i1 %.not164, i32 %b1067, i32 %a1065
  %9992 = add nsw i32 %95, 1
  %9993 = ashr i32 %9992, 1
  %9994 = sub nsw i32 %9993, %9988
  %9995 = add nsw i32 %9994, 1
  %9996 = and i32 %9995, -8
  %9997 = add nsw i32 %9996, %9988
  %a1072 = add nsw i32 %9997, -1
  %.not165 = icmp slt i32 %b1068, %9997
  %9998 = select i1 %.not165, i32 %b1068, i32 %a1072
  %9999 = add nsw i32 %9998, 9
  %a1071 = ashr i32 %9999, 1
  %b1073 = add nsw i32 %9968, 7
  %10000 = tail call i32 @llvm.smax.i32(i32 %a1071, i32 %b1073)
  %f127.v3.extent_realized.s126 = sub nsw i32 %10000, %f127.v3.min_realized125
  %10001 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %10002 = ashr i32 %10001, 2
  %t3095 = add nsw i32 %10002, 1
  %10003 = sub nsw i32 %t3095, %f127.v4.min_realized124
  %10004 = zext i32 %10003 to i64
  %10005 = add nsw i32 %f127.v3.extent_realized.s126, 1
  %10006 = zext i32 %10005 to i64
  %10007 = shl nuw nsw i64 %10006, 2
  %10008 = mul i64 %10007, %10004
  %10009 = icmp ult i64 %10008, 2147483648
  %10010 = and i64 %10007, 4294967292
  %10011 = mul nuw i64 %10010, %10004
  %10012 = lshr i64 %10011, 32
  %10013 = lshr i64 %10006, 30
  %10014 = mul nuw nsw i64 %10013, %10004
  %10015 = add nuw nsw i64 %10012, %10014
  %10016 = icmp ult i64 %10015, 4294967296
  %10017 = and i1 %10009, %10016
  br i1 %10017, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"assert succeeded122"
  %10018 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %10008, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded128":                            ; preds = %"assert succeeded122"
  %10019 = add nuw nsw i64 %10008, 4
  %10020 = tail call ptr @halide_malloc(ptr %__user_context, i64 %10019)
  %.not196 = icmp eq ptr %10020, null
  br i1 %.not196, label %"assert failed129", label %"assert succeeded130", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %10021 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded130":                            ; preds = %"assert succeeded128"
  %b1078 = add nsw i32 %95, -8
  %10022 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1120)
  %10023 = ashr i32 %10022, 1
  %a1075 = add nsw i32 %10023, -1
  %.not166 = icmp slt i32 %9990, %10023
  %f126.v3.min_realized133 = select i1 %.not166, i32 %9990, i32 %a1075
  %10024 = sub nsw i32 %95, %a1120
  %10025 = add nsw i32 %10024, -1
  %10026 = and i32 %10025, -8
  %a1082 = add nsw i32 %10026, %a1120
  %10027 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1082)
  %10028 = add nsw i32 %10027, 9
  %a1081 = ashr i32 %10028, 1
  %b1083 = add nsw i32 %9998, 7
  %10029 = tail call i32 @llvm.smax.i32(i32 %a1081, i32 %b1083)
  %f126.v3.extent_realized.s134 = sub nsw i32 %10029, %f126.v3.min_realized133
  %10030 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %10031 = ashr i32 %10030, 1
  %t3096 = add nsw i32 %10031, 1
  %10032 = sub i32 %t3096, %9985
  %10033 = zext i32 %10032 to i64
  %10034 = add nsw i32 %f126.v3.extent_realized.s134, 1
  %10035 = zext i32 %10034 to i64
  %10036 = shl nuw nsw i64 %10035, 2
  %10037 = mul i64 %10036, %10033
  %10038 = icmp ult i64 %10037, 2147483648
  %10039 = and i64 %10036, 4294967292
  %10040 = mul nuw i64 %10039, %10033
  %10041 = lshr i64 %10040, 32
  %10042 = lshr i64 %10035, 30
  %10043 = mul nuw nsw i64 %10042, %10033
  %10044 = add nuw nsw i64 %10041, %10043
  %10045 = icmp ult i64 %10044, 4294967296
  %10046 = and i1 %10038, %10045
  br i1 %10046, label %"assert succeeded136", label %"assert failed135", !prof !5

"assert failed135":                               ; preds = %"assert succeeded130"
  %10047 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %10037, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded136":                            ; preds = %"assert succeeded130"
  %10048 = add nuw nsw i64 %10037, 4
  %10049 = tail call ptr @halide_malloc(ptr %__user_context, i64 %10048)
  %.not197 = icmp eq ptr %10049, null
  br i1 %.not197, label %"assert failed137", label %"for local_laplacian.s0.v4.v4140.preheader", !prof !4

"assert failed137":                               ; preds = %"assert succeeded136"
  %10050 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"for local_laplacian.s0.v4.v4140.preheader":      ; preds = %"assert succeeded136"
  %10051 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %reass.add = sub nsw i64 %10051, %66
  %reass.mul = mul nsw i64 %reass.add, %73
  %10052 = sub i64 %reass.mul, %62
  %10053 = shl nsw i64 %75, 1
  %10054 = tail call i32 @llvm.smax.i32(i32 %10024, i32 8)
  %t3097 = zext i32 %10054 to i64
  %10055 = shl nuw nsw i64 %t3097, 2
  %10056 = icmp ult i32 %10054, 536870912
  %10057 = add nuw nsw i32 %125, 1
  %10058 = icmp slt i32 %109, 0
  %10059 = add nsw i32 %f75.v3.extent_realized.s, 1
  %10060 = add nsw i32 %levels, -1
  %10061 = sitofp i32 %10060 to float
  %10062 = insertelement <4 x float> undef, float %10061, i64 0
  %10063 = shufflevector <4 x float> %10062, <4 x float> undef, <4 x i32> zeroinitializer
  %10064 = add nsw i32 %levels, -2
  %10065 = insertelement <4 x i32> undef, i32 %10064, i64 0
  %b1087 = shufflevector <4 x i32> %10065, <4 x i32> undef, <4 x i32> zeroinitializer
  %10066 = add nsw i32 %f130.v3.extent_realized.s, 1
  %10067 = add nsw i32 %local_laplacian.min.1.required, -62
  %10068 = ashr i32 %10067, 5
  %10069 = xor i32 %10068, -1
  %10070 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %10071 = insertelement <4 x i32> undef, i32 %10070, i64 0
  %10072 = shufflevector <4 x i32> %10071, <4 x i32> undef, <4 x i32> zeroinitializer
  %10073 = add nsw i32 %f8.v3.extent_realized.s, 1
  %10074 = xor i32 %f8.v4.min_realized, -1
  %10075 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %10076 = shufflevector <4 x i32> %10075, <4 x i32> undef, <4 x i32> zeroinitializer
  %10077 = add nsw i32 %f7.v3.extent_realized.s, 1
  %10078 = insertelement <4 x i32> undef, i32 %10077, i64 0
  %10079 = shufflevector <4 x i32> %10078, <4 x i32> undef, <4 x i32> zeroinitializer
  %10080 = sext i32 %f129.v3.extent_realized.s to i64
  %10081 = add nsw i64 %10080, 1
  %10082 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %10083 = ashr i32 %10082, 4
  %10084 = sext i32 %10083 to i64
  %narrow = sub nsw i32 0, %f129.v3.min_realized
  %.neg205 = sext i32 %narrow to i64
  %10085 = add nuw nsw i32 %124, 1
  %10086 = icmp slt i32 %102, 0
  %10087 = add nsw i32 %f74.v3.extent_realized.s, 1
  %10088 = xor i32 %10083, -1
  %10089 = xor i32 %f7.v4.min_realized, -1
  %10090 = add nsw i32 %f6.v3.extent_realized.s, 1
  %10091 = insertelement <4 x i32> undef, i32 %10090, i64 0
  %10092 = shufflevector <4 x i32> %10091, <4 x i32> undef, <4 x i32> zeroinitializer
  %10093 = sext i32 %f129.v3.min_realized to i64
  %10094 = sext i32 %f128.v3.extent_realized.s118 to i64
  %10095 = add nsw i64 %10094, 1
  %10096 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %10097 = ashr i32 %10096, 3
  %10098 = sext i32 %10097 to i64
  %narrow274 = sub nsw i32 0, %f128.v3.min_realized117
  %.neg206 = sext i32 %narrow274 to i64
  %10099 = add nuw nsw i32 %9966, 1
  %10100 = icmp slt i32 %9965, 0
  %10101 = add nsw i32 %f73.v3.extent_realized.s, 1
  %10102 = xor i32 %10097, -1
  %10103 = xor i32 %f6.v4.min_realized, -1
  %10104 = add nsw i32 %f5.v3.extent_realized.s, 1
  %10105 = insertelement <4 x i32> undef, i32 %10104, i64 0
  %10106 = shufflevector <4 x i32> %10105, <4 x i32> undef, <4 x i32> zeroinitializer
  %10107 = sext i32 %f128.v3.min_realized117 to i64
  %10108 = sext i32 %f127.v3.extent_realized.s126 to i64
  %10109 = add nsw i64 %10108, 1
  %10110 = sext i32 %f127.v4.min_realized124 to i64
  %10111 = sext i32 %f127.v3.min_realized125 to i64
  %10112 = add nsw i32 %9994, 9
  %10113 = lshr i32 %10112, 3
  %10114 = icmp slt i32 %9994, -1
  %10115 = add nsw i32 %f72.v3.extent_realized.s, 1
  %10116 = xor i32 %f127.v4.min_realized124, -1
  %10117 = xor i32 %f5.v4.min_realized, -1
  %10118 = add nsw i32 %f4.v3.extent_realized.s, 1
  %10119 = insertelement <4 x i32> undef, i32 %10118, i64 0
  %10120 = shufflevector <4 x i32> %10119, <4 x i32> undef, <4 x i32> zeroinitializer
  %10121 = sext i32 %f126.v3.extent_realized.s134 to i64
  %10122 = add nsw i64 %10121, 1
  %10123 = sext i32 %9985 to i64
  %10124 = sext i32 %f126.v3.min_realized133 to i64
  %10125 = add nuw nsw i64 %10055, 4
  %10126 = add nsw i32 %10024, 7
  %10127 = lshr i32 %10126, 3
  %10128 = icmp sgt i32 %10024, 0
  %10129 = add nsw i32 %f2.v3.extent_realized.s, 1
  %10130 = fdiv float 1.000000e+00, %10061
  %10131 = insertelement <4 x float> undef, float %10130, i64 0
  %10132 = shufflevector <4 x float> %10131, <4 x float> undef, <4 x i32> zeroinitializer
  %10133 = xor i32 %9985, -1
  %10134 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %10135 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %10134
  %.neg209 = shufflevector <4 x i32> %10135, <4 x i32> poison, <4 x i32> zeroinitializer
  %10136 = shl nsw i32 %levels, 8
  %10137 = add nsw i32 %10136, -256
  %10138 = insertelement <4 x i32> undef, i32 %10137, i64 0
  %b1132 = shufflevector <4 x i32> %10138, <4 x i32> undef, <4 x i32> zeroinitializer
  %10139 = xor i32 %f4.v4.min_realized, -1
  %10140 = insertelement <4 x float> undef, float %beta, i64 0
  %10141 = shufflevector <4 x float> %10140, <4 x float> undef, <4 x i32> zeroinitializer
  %10142 = sext i32 %10022 to i64
  %10143 = add nsw i32 %local_laplacian.extent.0, 7
  %10144 = ashr i32 %10143, 3
  %10145 = icmp sgt i32 %local_laplacian.extent.0, 0
  %10146 = icmp sgt i32 %local_laplacian.extent.2, 0
  %10147 = add nsw i64 %6, 1
  %10148 = sub nsw i64 %10051, %10
  %10149 = mul nsw i32 %input.stride.2, %b1146
  %10150 = mul nsw i32 %input.stride.1, %b1148
  %10151 = add nsw i32 %10150, %input.min.0
  %10152 = add nsw i32 %10151, %10149
  %10153 = add nsw i32 %b1146, %input.extent.2
  %b1147 = add nsw i32 %10153, -1
  %10154 = add i32 %input.extent.1, -1
  %b1149 = add i32 %10154, %b1148
  %10155 = add nsw i32 %input.min.0, %input.extent.0
  %10156 = add nsw i32 %10155, -1
  %10157 = insertelement <8 x i32> undef, i32 %10156, i64 0
  %b1151 = shufflevector <8 x i32> %10157, <8 x i32> undef, <8 x i32> zeroinitializer
  %10158 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b1150 = shufflevector <8 x i32> %10158, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %"produce f129143"

if.then.i271:                                     ; preds = %if.then.i283
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9958) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9981) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %10020) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %10049) #7
  br label %destructor_block.thread

"produce f129143":                                ; preds = %if.then.i283, %"for local_laplacian.s0.v4.v4140.preheader"
  %indvars.iv306 = phi i64 [ %indvars.iv.next307, %if.then.i283 ], [ 0, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %lsr.iv446 = phi i64 [ %lsr.iv.next447, %if.then.i283 ], [ %10052, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %10159 = icmp ne i64 %indvars.iv306, 0
  %10160 = trunc i64 %indvars.iv306 to i32
  %10161 = add nsw i32 %local_laplacian.s0.v4.v4.base, %10160
  %10162 = add nsw i32 %10161, 3
  %10163 = ashr i32 %10162, 1
  %10164 = ashr i32 %10161, 1
  %10165 = add nsw i32 %10164, -1
  %10166 = sext i1 %10159 to i32
  %10167 = and i32 %10163, %10166
  %10168 = select i1 %10159, i32 0, i32 %10165
  %f126.s0.v4.min_2 = or i32 %10167, %10168
  %10169 = add nsw i32 %10161, 9
  %10170 = ashr i32 %10169, 2
  %10171 = add nsw i32 %10161, -6
  %10172 = ashr i32 %10171, 2
  %10173 = and i32 %10170, %10166
  %10174 = select i1 %10159, i32 0, i32 %10172
  %f127.s0.v4.min_2 = or i32 %10173, %10174
  %10175 = add nsw i32 %10161, 21
  %10176 = ashr i32 %10175, 3
  %10177 = add nsw i32 %10161, -14
  %10178 = ashr i32 %10177, 3
  %10179 = and i32 %10176, %10166
  %10180 = select i1 %10159, i32 0, i32 %10178
  %f128.s0.v4.min_2 = or i32 %10179, %10180
  %10181 = add nsw i32 %10161, 45
  %10182 = ashr i32 %10181, 4
  %10183 = add nsw i32 %10161, -30
  %10184 = ashr i32 %10183, 4
  %10185 = and i32 %10182, %10166
  %10186 = select i1 %10159, i32 0, i32 %10184
  %f129.s0.v4.min_2 = or i32 %10185, %10186
  %10187 = add nsw i32 %10161, 30
  %10188 = ashr i32 %10187, 4
  %.not78 = icmp sgt i32 %f129.s0.v4.min_2, %10188
  %brmerge = select i1 %.not78, i1 true, i1 %10058
  br i1 %brmerge, label %"produce f128153", label %"for f129.s0.v4145.us.preheader", !prof !27

"for f129.s0.v4145.us.preheader":                 ; preds = %"produce f129143"
  %10189 = sext i32 %f129.s0.v4.min_2 to i64
  %sext = sext i32 %10188 to i64
  br label %"for f129.s0.v4145.us"

"for f129.s0.v4145.us":                           ; preds = %"for f129.s0.v4145.us.preheader", %"end for f129.s0.v3.v3149.loopexit.us"
  %indvars.iv = phi i64 [ %10189, %"for f129.s0.v4145.us.preheader" ], [ %indvars.iv.next, %"end for f129.s0.v3.v3149.loopexit.us" ]
  %10190 = trunc i64 %indvars.iv to i32
  %10191 = shl i32 %10190, 1
  %10192 = and i32 %10191, 2
  %10193 = ashr i32 %10190, 1
  %t2863.us = add nsw i32 %10192, %10193
  %10194 = trunc i64 %indvars.iv to i32
  %10195 = sub i32 %10194, %f75.v4.min_realized
  %10196 = mul i32 %10195, %10059
  %10197 = sub i32 %10196, %f75.v3.min_realized
  %10198 = add nsw i32 %t2863.us, %10069
  %t2870.us = mul nsw i32 %10198, %10066
  %10199 = sub nsw i32 %10193, %10068
  %t2872.us = mul nsw i32 %10199, %10066
  %10200 = add i32 %t2863.us, %10074
  %t2877.us = mul nsw i32 %10200, %10073
  %10201 = sub nsw i32 %10193, %f8.v4.min_realized
  %t2882.us = mul nsw i32 %10201, %10073
  %10202 = sext i32 %t2872.us to i64
  %10203 = add nsw i64 %10202, -1
  %10204 = sext i32 %t2870.us to i64
  %10205 = add nsw i64 %10204, -1
  %10206 = sub nsw i64 %indvars.iv, %10084
  %10207 = mul nsw i64 %10206, %10081
  %10208 = add i64 %10207, %.neg205
  %10209 = trunc i64 %indvars.iv to i32
  %10210 = sub i32 %10209, %f7.v4.min_realized
  %10211 = mul i32 %10210, %f7.stride.1
  br label %"for f129.s0.v3.v3148.us"

"for f129.s0.v3.v3148.us":                        ; preds = %"for f129.s0.v4145.us", %"for f129.s0.v3.v3148.us"
  %lsr.iv426.us = phi i32 [ %lsr.iv.next427.us, %"for f129.s0.v3.v3148.us" ], [ 0, %"for f129.s0.v4145.us" ]
  %lsr.iv424.us = phi i32 [ %lsr.iv.next425.us, %"for f129.s0.v3.v3148.us" ], [ %10057, %"for f129.s0.v4145.us" ]
  %10212 = add i32 %lsr.iv426.us, %106
  %f129.s0.v3.v363.base151.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %10212)
  %10213 = shl i32 %f129.s0.v3.v363.base151.us, 1
  %10214 = and i32 %10213, 2
  %10215 = ashr i32 %f129.s0.v3.v363.base151.us, 1
  %t2864.us = add nsw i32 %10214, %10215
  %t2865.us = add i32 %10197, %f129.s0.v3.v363.base151.us
  %10216 = sext i32 %t2865.us to i64
  %10217 = getelementptr inbounds float, ptr %f75.host, i64 %10216
  %10218 = load <4 x float>, ptr %10217, align 4, !tbaa !13
  %10219 = add nsw i64 %10216, 4
  %10220 = getelementptr inbounds float, ptr %f75.host, i64 %10219
  %10221 = load <4 x float>, ptr %10220, align 4, !tbaa !13
  %10222 = shufflevector <4 x float> %10218, <4 x float> %10221, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2866.us = fmul <4 x float> %10063, %10222
  %a1085.us = fptosi <4 x float> %t2866.us to <4 x i32>
  %a1088.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1085.us)
  %10223 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1088.us, <4 x i32> zeroinitializer)
  %10224 = sitofp <4 x i32> %10223 to <4 x float>
  %t2868.us = fsub <4 x float> %t2866.us, %10224
  %10225 = sub nsw i32 %f129.s0.v3.v363.base151.us, %f7.v3.min_realized
  %t2873.us = add nsw i32 %10225, %10211
  %t2875.us = sub nsw <4 x i32> %10223, %10072
  %t2879.us = mul nsw <4 x i32> %t2875.us, %10076
  %10226 = add nsw <4 x i32> %t2875.us, <i32 1, i32 1, i32 1, i32 1>
  %t2885.us = mul nsw <4 x i32> %10226, %10076
  %10227 = add nsw i32 %f129.s0.v3.v363.base151.us, 1
  %10228 = shl i32 %10227, 1
  %10229 = and i32 %10228, 2
  %10230 = ashr i32 %10227, 1
  %t2886.us = add nsw i32 %10229, %10230
  %10231 = shufflevector <4 x float> %10218, <4 x float> %10221, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2887.us = fmul <4 x float> %10063, %10231
  %a1089.us = fptosi <4 x float> %t2887.us to <4 x i32>
  %a1092.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1089.us)
  %10232 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1092.us, <4 x i32> zeroinitializer)
  %10233 = sitofp <4 x i32> %10232 to <4 x float>
  %t2889.us = fsub <4 x float> %t2887.us, %10233
  %t2892.us = sub nsw <4 x i32> %10232, %10072
  %t2895.us = mul nsw <4 x i32> %t2892.us, %10076
  %10234 = add nsw <4 x i32> %t2892.us, <i32 1, i32 1, i32 1, i32 1>
  %t2900.us = mul nsw <4 x i32> %10234, %10076
  %10235 = sub nsw i32 %10215, %f8.v3.min_realized
  %10236 = add nsw i32 %10235, %t2882.us
  %10237 = insertelement <4 x i32> undef, i32 %10236, i64 0
  %10238 = shufflevector <4 x i32> %10237, <4 x i32> undef, <4 x i32> zeroinitializer
  %10239 = add nsw <4 x i32> %10238, <i32 0, i32 1, i32 2, i32 3>
  %10240 = add nsw <4 x i32> %t2885.us, %10239
  %10241 = extractelement <4 x i32> %10240, i64 0
  %10242 = sext i32 %10241 to i64
  %10243 = getelementptr inbounds float, ptr %f8.host, i64 %10242
  %10244 = load float, ptr %10243, align 4, !tbaa !36
  %10245 = insertelement <4 x float> undef, float %10244, i64 0
  %10246 = extractelement <4 x i32> %10240, i64 1
  %10247 = sext i32 %10246 to i64
  %10248 = getelementptr inbounds float, ptr %f8.host, i64 %10247
  %10249 = load float, ptr %10248, align 4, !tbaa !36
  %10250 = insertelement <4 x float> %10245, float %10249, i64 1
  %10251 = extractelement <4 x i32> %10240, i64 2
  %10252 = sext i32 %10251 to i64
  %10253 = getelementptr inbounds float, ptr %f8.host, i64 %10252
  %10254 = load float, ptr %10253, align 4, !tbaa !36
  %10255 = insertelement <4 x float> %10250, float %10254, i64 2
  %10256 = extractelement <4 x i32> %10240, i64 3
  %10257 = sext i32 %10256 to i64
  %10258 = getelementptr inbounds float, ptr %f8.host, i64 %10257
  %10259 = load float, ptr %10258, align 4, !tbaa !36
  %10260 = insertelement <4 x float> %10255, float %10259, i64 3
  %10261 = fmul <4 x float> %10260, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10262 = sub nsw i32 %t2864.us, %f8.v3.min_realized
  %10263 = add nsw i32 %10262, %t2882.us
  %10264 = insertelement <4 x i32> undef, i32 %10263, i64 0
  %10265 = shufflevector <4 x i32> %10264, <4 x i32> undef, <4 x i32> zeroinitializer
  %10266 = add <4 x i32> %10265, <i32 -1, i32 0, i32 1, i32 2>
  %10267 = add <4 x i32> %10266, %t2885.us
  %10268 = extractelement <4 x i32> %10267, i64 0
  %10269 = sext i32 %10268 to i64
  %10270 = getelementptr inbounds float, ptr %f8.host, i64 %10269
  %10271 = load float, ptr %10270, align 4, !tbaa !36
  %10272 = insertelement <4 x float> undef, float %10271, i64 0
  %10273 = extractelement <4 x i32> %10267, i64 1
  %10274 = sext i32 %10273 to i64
  %10275 = getelementptr inbounds float, ptr %f8.host, i64 %10274
  %10276 = load float, ptr %10275, align 4, !tbaa !36
  %10277 = insertelement <4 x float> %10272, float %10276, i64 1
  %10278 = extractelement <4 x i32> %10267, i64 2
  %10279 = sext i32 %10278 to i64
  %10280 = getelementptr inbounds float, ptr %f8.host, i64 %10279
  %10281 = load float, ptr %10280, align 4, !tbaa !36
  %10282 = insertelement <4 x float> %10277, float %10281, i64 2
  %10283 = extractelement <4 x i32> %10267, i64 3
  %10284 = sext i32 %10283 to i64
  %10285 = getelementptr inbounds float, ptr %f8.host, i64 %10284
  %10286 = load float, ptr %10285, align 4, !tbaa !36
  %10287 = insertelement <4 x float> %10282, float %10286, i64 3
  %10288 = fmul <4 x float> %10287, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10289 = fadd <4 x float> %10261, %10288
  %10290 = fmul <4 x float> %10289, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10291 = add nsw i32 %10235, %t2877.us
  %10292 = insertelement <4 x i32> undef, i32 %10291, i64 0
  %10293 = shufflevector <4 x i32> %10292, <4 x i32> undef, <4 x i32> zeroinitializer
  %10294 = add nsw <4 x i32> %10293, <i32 0, i32 1, i32 2, i32 3>
  %10295 = add nsw <4 x i32> %t2885.us, %10294
  %10296 = extractelement <4 x i32> %10295, i64 0
  %10297 = sext i32 %10296 to i64
  %10298 = getelementptr inbounds float, ptr %f8.host, i64 %10297
  %10299 = load float, ptr %10298, align 4, !tbaa !36
  %10300 = insertelement <4 x float> undef, float %10299, i64 0
  %10301 = extractelement <4 x i32> %10295, i64 1
  %10302 = sext i32 %10301 to i64
  %10303 = getelementptr inbounds float, ptr %f8.host, i64 %10302
  %10304 = load float, ptr %10303, align 4, !tbaa !36
  %10305 = insertelement <4 x float> %10300, float %10304, i64 1
  %10306 = extractelement <4 x i32> %10295, i64 2
  %10307 = sext i32 %10306 to i64
  %10308 = getelementptr inbounds float, ptr %f8.host, i64 %10307
  %10309 = load float, ptr %10308, align 4, !tbaa !36
  %10310 = insertelement <4 x float> %10305, float %10309, i64 2
  %10311 = extractelement <4 x i32> %10295, i64 3
  %10312 = sext i32 %10311 to i64
  %10313 = getelementptr inbounds float, ptr %f8.host, i64 %10312
  %10314 = load float, ptr %10313, align 4, !tbaa !36
  %10315 = insertelement <4 x float> %10310, float %10314, i64 3
  %10316 = fmul <4 x float> %10315, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10317 = add nsw i32 %10262, %t2877.us
  %10318 = insertelement <4 x i32> undef, i32 %10317, i64 0
  %10319 = shufflevector <4 x i32> %10318, <4 x i32> undef, <4 x i32> zeroinitializer
  %10320 = add <4 x i32> %10319, <i32 -1, i32 0, i32 1, i32 2>
  %10321 = add <4 x i32> %10320, %t2885.us
  %10322 = extractelement <4 x i32> %10321, i64 0
  %10323 = sext i32 %10322 to i64
  %10324 = getelementptr inbounds float, ptr %f8.host, i64 %10323
  %10325 = load float, ptr %10324, align 4, !tbaa !36
  %10326 = insertelement <4 x float> undef, float %10325, i64 0
  %10327 = extractelement <4 x i32> %10321, i64 1
  %10328 = sext i32 %10327 to i64
  %10329 = getelementptr inbounds float, ptr %f8.host, i64 %10328
  %10330 = load float, ptr %10329, align 4, !tbaa !36
  %10331 = insertelement <4 x float> %10326, float %10330, i64 1
  %10332 = extractelement <4 x i32> %10321, i64 2
  %10333 = sext i32 %10332 to i64
  %10334 = getelementptr inbounds float, ptr %f8.host, i64 %10333
  %10335 = load float, ptr %10334, align 4, !tbaa !36
  %10336 = insertelement <4 x float> %10331, float %10335, i64 2
  %10337 = extractelement <4 x i32> %10321, i64 3
  %10338 = sext i32 %10337 to i64
  %10339 = getelementptr inbounds float, ptr %f8.host, i64 %10338
  %10340 = load float, ptr %10339, align 4, !tbaa !36
  %10341 = insertelement <4 x float> %10336, float %10340, i64 3
  %10342 = fmul <4 x float> %10341, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10343 = fadd <4 x float> %10316, %10342
  %10344 = fmul <4 x float> %10343, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10345 = fadd <4 x float> %10290, %10344
  %10346 = mul nsw <4 x i32> %10226, %10079
  %10347 = insertelement <4 x i32> undef, i32 %t2873.us, i64 0
  %10348 = shufflevector <4 x i32> %10347, <4 x i32> undef, <4 x i32> zeroinitializer
  %10349 = add nsw <4 x i32> %10348, <i32 0, i32 2, i32 4, i32 6>
  %10350 = add nsw <4 x i32> %10346, %10349
  %10351 = extractelement <4 x i32> %10350, i64 0
  %10352 = sext i32 %10351 to i64
  %10353 = getelementptr inbounds float, ptr %f7.host, i64 %10352
  %10354 = load float, ptr %10353, align 4, !tbaa !54
  %10355 = insertelement <4 x float> undef, float %10354, i64 0
  %10356 = extractelement <4 x i32> %10350, i64 1
  %10357 = sext i32 %10356 to i64
  %10358 = getelementptr inbounds float, ptr %f7.host, i64 %10357
  %10359 = load float, ptr %10358, align 4, !tbaa !54
  %10360 = insertelement <4 x float> %10355, float %10359, i64 1
  %10361 = extractelement <4 x i32> %10350, i64 2
  %10362 = sext i32 %10361 to i64
  %10363 = getelementptr inbounds float, ptr %f7.host, i64 %10362
  %10364 = load float, ptr %10363, align 4, !tbaa !54
  %10365 = insertelement <4 x float> %10360, float %10364, i64 2
  %10366 = extractelement <4 x i32> %10350, i64 3
  %10367 = sext i32 %10366 to i64
  %10368 = getelementptr inbounds float, ptr %f7.host, i64 %10367
  %10369 = load float, ptr %10368, align 4, !tbaa !54
  %10370 = insertelement <4 x float> %10365, float %10369, i64 3
  %10371 = fsub <4 x float> %10370, %10345
  %10372 = fmul <4 x float> %t2868.us, %10371
  %10373 = add nsw <4 x i32> %t2879.us, %10239
  %10374 = extractelement <4 x i32> %10373, i64 0
  %10375 = sext i32 %10374 to i64
  %10376 = getelementptr inbounds float, ptr %f8.host, i64 %10375
  %10377 = load float, ptr %10376, align 4, !tbaa !36
  %10378 = insertelement <4 x float> undef, float %10377, i64 0
  %10379 = extractelement <4 x i32> %10373, i64 1
  %10380 = sext i32 %10379 to i64
  %10381 = getelementptr inbounds float, ptr %f8.host, i64 %10380
  %10382 = load float, ptr %10381, align 4, !tbaa !36
  %10383 = insertelement <4 x float> %10378, float %10382, i64 1
  %10384 = extractelement <4 x i32> %10373, i64 2
  %10385 = sext i32 %10384 to i64
  %10386 = getelementptr inbounds float, ptr %f8.host, i64 %10385
  %10387 = load float, ptr %10386, align 4, !tbaa !36
  %10388 = insertelement <4 x float> %10383, float %10387, i64 2
  %10389 = extractelement <4 x i32> %10373, i64 3
  %10390 = sext i32 %10389 to i64
  %10391 = getelementptr inbounds float, ptr %f8.host, i64 %10390
  %10392 = load float, ptr %10391, align 4, !tbaa !36
  %10393 = insertelement <4 x float> %10388, float %10392, i64 3
  %10394 = fmul <4 x float> %10393, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10395 = add <4 x i32> %t2879.us, %10265
  %10396 = add <4 x i32> %10395, <i32 -1, i32 0, i32 1, i32 2>
  %10397 = extractelement <4 x i32> %10396, i64 0
  %10398 = sext i32 %10397 to i64
  %10399 = getelementptr inbounds float, ptr %f8.host, i64 %10398
  %10400 = load float, ptr %10399, align 4, !tbaa !36
  %10401 = insertelement <4 x float> undef, float %10400, i64 0
  %10402 = extractelement <4 x i32> %10396, i64 1
  %10403 = sext i32 %10402 to i64
  %10404 = getelementptr inbounds float, ptr %f8.host, i64 %10403
  %10405 = load float, ptr %10404, align 4, !tbaa !36
  %10406 = insertelement <4 x float> %10401, float %10405, i64 1
  %10407 = extractelement <4 x i32> %10396, i64 2
  %10408 = sext i32 %10407 to i64
  %10409 = getelementptr inbounds float, ptr %f8.host, i64 %10408
  %10410 = load float, ptr %10409, align 4, !tbaa !36
  %10411 = insertelement <4 x float> %10406, float %10410, i64 2
  %10412 = extractelement <4 x i32> %10396, i64 3
  %10413 = sext i32 %10412 to i64
  %10414 = getelementptr inbounds float, ptr %f8.host, i64 %10413
  %10415 = load float, ptr %10414, align 4, !tbaa !36
  %10416 = insertelement <4 x float> %10411, float %10415, i64 3
  %10417 = fmul <4 x float> %10416, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10418 = fadd <4 x float> %10394, %10417
  %10419 = fmul <4 x float> %10418, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10420 = add nsw <4 x i32> %t2879.us, %10294
  %10421 = extractelement <4 x i32> %10420, i64 0
  %10422 = sext i32 %10421 to i64
  %10423 = getelementptr inbounds float, ptr %f8.host, i64 %10422
  %10424 = load float, ptr %10423, align 4, !tbaa !36
  %10425 = insertelement <4 x float> undef, float %10424, i64 0
  %10426 = extractelement <4 x i32> %10420, i64 1
  %10427 = sext i32 %10426 to i64
  %10428 = getelementptr inbounds float, ptr %f8.host, i64 %10427
  %10429 = load float, ptr %10428, align 4, !tbaa !36
  %10430 = insertelement <4 x float> %10425, float %10429, i64 1
  %10431 = extractelement <4 x i32> %10420, i64 2
  %10432 = sext i32 %10431 to i64
  %10433 = getelementptr inbounds float, ptr %f8.host, i64 %10432
  %10434 = load float, ptr %10433, align 4, !tbaa !36
  %10435 = insertelement <4 x float> %10430, float %10434, i64 2
  %10436 = extractelement <4 x i32> %10420, i64 3
  %10437 = sext i32 %10436 to i64
  %10438 = getelementptr inbounds float, ptr %f8.host, i64 %10437
  %10439 = load float, ptr %10438, align 4, !tbaa !36
  %10440 = insertelement <4 x float> %10435, float %10439, i64 3
  %10441 = fmul <4 x float> %10440, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10442 = add <4 x i32> %t2879.us, %10319
  %10443 = add <4 x i32> %10442, <i32 -1, i32 0, i32 1, i32 2>
  %10444 = extractelement <4 x i32> %10443, i64 0
  %10445 = sext i32 %10444 to i64
  %10446 = getelementptr inbounds float, ptr %f8.host, i64 %10445
  %10447 = load float, ptr %10446, align 4, !tbaa !36
  %10448 = insertelement <4 x float> undef, float %10447, i64 0
  %10449 = extractelement <4 x i32> %10443, i64 1
  %10450 = sext i32 %10449 to i64
  %10451 = getelementptr inbounds float, ptr %f8.host, i64 %10450
  %10452 = load float, ptr %10451, align 4, !tbaa !36
  %10453 = insertelement <4 x float> %10448, float %10452, i64 1
  %10454 = extractelement <4 x i32> %10443, i64 2
  %10455 = sext i32 %10454 to i64
  %10456 = getelementptr inbounds float, ptr %f8.host, i64 %10455
  %10457 = load float, ptr %10456, align 4, !tbaa !36
  %10458 = insertelement <4 x float> %10453, float %10457, i64 2
  %10459 = extractelement <4 x i32> %10443, i64 3
  %10460 = sext i32 %10459 to i64
  %10461 = getelementptr inbounds float, ptr %f8.host, i64 %10460
  %10462 = load float, ptr %10461, align 4, !tbaa !36
  %10463 = insertelement <4 x float> %10458, float %10462, i64 3
  %10464 = fmul <4 x float> %10463, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10465 = fadd <4 x float> %10441, %10464
  %10466 = fmul <4 x float> %10465, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10467 = fadd <4 x float> %10419, %10466
  %10468 = mul nsw <4 x i32> %t2875.us, %10079
  %10469 = add nsw <4 x i32> %10468, %10349
  %10470 = extractelement <4 x i32> %10469, i64 0
  %10471 = sext i32 %10470 to i64
  %10472 = getelementptr inbounds float, ptr %f7.host, i64 %10471
  %10473 = load float, ptr %10472, align 4, !tbaa !54
  %10474 = insertelement <4 x float> undef, float %10473, i64 0
  %10475 = extractelement <4 x i32> %10469, i64 1
  %10476 = sext i32 %10475 to i64
  %10477 = getelementptr inbounds float, ptr %f7.host, i64 %10476
  %10478 = load float, ptr %10477, align 4, !tbaa !54
  %10479 = insertelement <4 x float> %10474, float %10478, i64 1
  %10480 = extractelement <4 x i32> %10469, i64 2
  %10481 = sext i32 %10480 to i64
  %10482 = getelementptr inbounds float, ptr %f7.host, i64 %10481
  %10483 = load float, ptr %10482, align 4, !tbaa !54
  %10484 = insertelement <4 x float> %10479, float %10483, i64 2
  %10485 = extractelement <4 x i32> %10469, i64 3
  %10486 = sext i32 %10485 to i64
  %10487 = getelementptr inbounds float, ptr %f7.host, i64 %10486
  %10488 = load float, ptr %10487, align 4, !tbaa !54
  %10489 = insertelement <4 x float> %10484, float %10488, i64 3
  %10490 = fsub <4 x float> %10489, %10467
  %10491 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2868.us
  %10492 = fmul <4 x float> %10491, %10490
  %10493 = fadd <4 x float> %10372, %10492
  %10494 = sext i32 %10215 to i64
  %10495 = sub nsw i64 %10494, %4
  %10496 = add nsw i64 %10495, %10202
  %10497 = getelementptr inbounds float, ptr %f130.host, i64 %10496
  %10498 = load <4 x float>, ptr %10497, align 4, !tbaa !38
  %10499 = fmul <4 x float> %10498, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10500 = sext i32 %t2864.us to i64
  %10501 = sub nsw i64 %10500, %4
  %10502 = add nsw i64 %10203, %10501
  %10503 = getelementptr inbounds float, ptr %f130.host, i64 %10502
  %10504 = load <4 x float>, ptr %10503, align 4, !tbaa !38
  %10505 = fmul <4 x float> %10504, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10506 = fadd <4 x float> %10499, %10505
  %10507 = fmul <4 x float> %10506, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10508 = add nsw i64 %10495, %10204
  %10509 = getelementptr inbounds float, ptr %f130.host, i64 %10508
  %10510 = load <4 x float>, ptr %10509, align 4, !tbaa !38
  %10511 = fmul <4 x float> %10510, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10512 = add nsw i64 %10205, %10501
  %10513 = getelementptr inbounds float, ptr %f130.host, i64 %10512
  %10514 = load <4 x float>, ptr %10513, align 4, !tbaa !38
  %10515 = fmul <4 x float> %10514, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10516 = fadd <4 x float> %10511, %10515
  %10517 = fmul <4 x float> %10516, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10518 = fadd <4 x float> %10507, %10517
  %10519 = fadd <4 x float> %10493, %10518
  %10520 = sub nsw i32 %10230, %f8.v3.min_realized
  %10521 = add nsw i32 %10520, %t2882.us
  %10522 = insertelement <4 x i32> undef, i32 %10521, i64 0
  %10523 = shufflevector <4 x i32> %10522, <4 x i32> undef, <4 x i32> zeroinitializer
  %10524 = add nsw <4 x i32> %10523, <i32 0, i32 1, i32 2, i32 3>
  %10525 = add nsw <4 x i32> %t2900.us, %10524
  %10526 = extractelement <4 x i32> %10525, i64 0
  %10527 = sext i32 %10526 to i64
  %10528 = getelementptr inbounds float, ptr %f8.host, i64 %10527
  %10529 = load float, ptr %10528, align 4, !tbaa !36
  %10530 = insertelement <4 x float> undef, float %10529, i64 0
  %10531 = extractelement <4 x i32> %10525, i64 1
  %10532 = sext i32 %10531 to i64
  %10533 = getelementptr inbounds float, ptr %f8.host, i64 %10532
  %10534 = load float, ptr %10533, align 4, !tbaa !36
  %10535 = insertelement <4 x float> %10530, float %10534, i64 1
  %10536 = extractelement <4 x i32> %10525, i64 2
  %10537 = sext i32 %10536 to i64
  %10538 = getelementptr inbounds float, ptr %f8.host, i64 %10537
  %10539 = load float, ptr %10538, align 4, !tbaa !36
  %10540 = insertelement <4 x float> %10535, float %10539, i64 2
  %10541 = extractelement <4 x i32> %10525, i64 3
  %10542 = sext i32 %10541 to i64
  %10543 = getelementptr inbounds float, ptr %f8.host, i64 %10542
  %10544 = load float, ptr %10543, align 4, !tbaa !36
  %10545 = insertelement <4 x float> %10540, float %10544, i64 3
  %10546 = fmul <4 x float> %10545, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10547 = sub nsw i32 %t2886.us, %f8.v3.min_realized
  %10548 = add nsw i32 %10547, %t2882.us
  %10549 = insertelement <4 x i32> undef, i32 %10548, i64 0
  %10550 = shufflevector <4 x i32> %10549, <4 x i32> undef, <4 x i32> zeroinitializer
  %10551 = add nsw <4 x i32> %10550, <i32 0, i32 1, i32 2, i32 3>
  %10552 = add <4 x i32> %t2900.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10553 = add <4 x i32> %10552, %10551
  %10554 = extractelement <4 x i32> %10553, i64 0
  %10555 = sext i32 %10554 to i64
  %10556 = getelementptr inbounds float, ptr %f8.host, i64 %10555
  %10557 = load float, ptr %10556, align 4, !tbaa !36
  %10558 = insertelement <4 x float> undef, float %10557, i64 0
  %10559 = extractelement <4 x i32> %10553, i64 1
  %10560 = sext i32 %10559 to i64
  %10561 = getelementptr inbounds float, ptr %f8.host, i64 %10560
  %10562 = load float, ptr %10561, align 4, !tbaa !36
  %10563 = insertelement <4 x float> %10558, float %10562, i64 1
  %10564 = extractelement <4 x i32> %10553, i64 2
  %10565 = sext i32 %10564 to i64
  %10566 = getelementptr inbounds float, ptr %f8.host, i64 %10565
  %10567 = load float, ptr %10566, align 4, !tbaa !36
  %10568 = insertelement <4 x float> %10563, float %10567, i64 2
  %10569 = extractelement <4 x i32> %10553, i64 3
  %10570 = sext i32 %10569 to i64
  %10571 = getelementptr inbounds float, ptr %f8.host, i64 %10570
  %10572 = load float, ptr %10571, align 4, !tbaa !36
  %10573 = insertelement <4 x float> %10568, float %10572, i64 3
  %10574 = fmul <4 x float> %10573, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10575 = fadd <4 x float> %10546, %10574
  %10576 = fmul <4 x float> %10575, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10577 = add nsw i32 %10520, %t2877.us
  %10578 = insertelement <4 x i32> undef, i32 %10577, i64 0
  %10579 = shufflevector <4 x i32> %10578, <4 x i32> undef, <4 x i32> zeroinitializer
  %10580 = add nsw <4 x i32> %10579, <i32 0, i32 1, i32 2, i32 3>
  %10581 = add nsw <4 x i32> %t2900.us, %10580
  %10582 = extractelement <4 x i32> %10581, i64 0
  %10583 = sext i32 %10582 to i64
  %10584 = getelementptr inbounds float, ptr %f8.host, i64 %10583
  %10585 = load float, ptr %10584, align 4, !tbaa !36
  %10586 = insertelement <4 x float> undef, float %10585, i64 0
  %10587 = extractelement <4 x i32> %10581, i64 1
  %10588 = sext i32 %10587 to i64
  %10589 = getelementptr inbounds float, ptr %f8.host, i64 %10588
  %10590 = load float, ptr %10589, align 4, !tbaa !36
  %10591 = insertelement <4 x float> %10586, float %10590, i64 1
  %10592 = extractelement <4 x i32> %10581, i64 2
  %10593 = sext i32 %10592 to i64
  %10594 = getelementptr inbounds float, ptr %f8.host, i64 %10593
  %10595 = load float, ptr %10594, align 4, !tbaa !36
  %10596 = insertelement <4 x float> %10591, float %10595, i64 2
  %10597 = extractelement <4 x i32> %10581, i64 3
  %10598 = sext i32 %10597 to i64
  %10599 = getelementptr inbounds float, ptr %f8.host, i64 %10598
  %10600 = load float, ptr %10599, align 4, !tbaa !36
  %10601 = insertelement <4 x float> %10596, float %10600, i64 3
  %10602 = fmul <4 x float> %10601, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10603 = add nsw i32 %10547, %t2877.us
  %10604 = insertelement <4 x i32> undef, i32 %10603, i64 0
  %10605 = shufflevector <4 x i32> %10604, <4 x i32> undef, <4 x i32> zeroinitializer
  %10606 = add nsw <4 x i32> %10605, <i32 0, i32 1, i32 2, i32 3>
  %10607 = add <4 x i32> %10552, %10606
  %10608 = extractelement <4 x i32> %10607, i64 0
  %10609 = sext i32 %10608 to i64
  %10610 = getelementptr inbounds float, ptr %f8.host, i64 %10609
  %10611 = load float, ptr %10610, align 4, !tbaa !36
  %10612 = insertelement <4 x float> undef, float %10611, i64 0
  %10613 = extractelement <4 x i32> %10607, i64 1
  %10614 = sext i32 %10613 to i64
  %10615 = getelementptr inbounds float, ptr %f8.host, i64 %10614
  %10616 = load float, ptr %10615, align 4, !tbaa !36
  %10617 = insertelement <4 x float> %10612, float %10616, i64 1
  %10618 = extractelement <4 x i32> %10607, i64 2
  %10619 = sext i32 %10618 to i64
  %10620 = getelementptr inbounds float, ptr %f8.host, i64 %10619
  %10621 = load float, ptr %10620, align 4, !tbaa !36
  %10622 = insertelement <4 x float> %10617, float %10621, i64 2
  %10623 = extractelement <4 x i32> %10607, i64 3
  %10624 = sext i32 %10623 to i64
  %10625 = getelementptr inbounds float, ptr %f8.host, i64 %10624
  %10626 = load float, ptr %10625, align 4, !tbaa !36
  %10627 = insertelement <4 x float> %10622, float %10626, i64 3
  %10628 = fmul <4 x float> %10627, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10629 = fadd <4 x float> %10602, %10628
  %10630 = fmul <4 x float> %10629, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10631 = fadd <4 x float> %10576, %10630
  %10632 = mul nsw <4 x i32> %10234, %10079
  %10633 = add nsw i32 %t2873.us, 1
  %10634 = insertelement <4 x i32> undef, i32 %10633, i64 0
  %10635 = shufflevector <4 x i32> %10634, <4 x i32> undef, <4 x i32> zeroinitializer
  %10636 = add nsw <4 x i32> %10635, <i32 0, i32 2, i32 4, i32 6>
  %10637 = add nsw <4 x i32> %10632, %10636
  %10638 = extractelement <4 x i32> %10637, i64 0
  %10639 = sext i32 %10638 to i64
  %10640 = getelementptr inbounds float, ptr %f7.host, i64 %10639
  %10641 = load float, ptr %10640, align 4, !tbaa !54
  %10642 = insertelement <4 x float> undef, float %10641, i64 0
  %10643 = extractelement <4 x i32> %10637, i64 1
  %10644 = sext i32 %10643 to i64
  %10645 = getelementptr inbounds float, ptr %f7.host, i64 %10644
  %10646 = load float, ptr %10645, align 4, !tbaa !54
  %10647 = insertelement <4 x float> %10642, float %10646, i64 1
  %10648 = extractelement <4 x i32> %10637, i64 2
  %10649 = sext i32 %10648 to i64
  %10650 = getelementptr inbounds float, ptr %f7.host, i64 %10649
  %10651 = load float, ptr %10650, align 4, !tbaa !54
  %10652 = insertelement <4 x float> %10647, float %10651, i64 2
  %10653 = extractelement <4 x i32> %10637, i64 3
  %10654 = sext i32 %10653 to i64
  %10655 = getelementptr inbounds float, ptr %f7.host, i64 %10654
  %10656 = load float, ptr %10655, align 4, !tbaa !54
  %10657 = insertelement <4 x float> %10652, float %10656, i64 3
  %10658 = fsub <4 x float> %10657, %10631
  %10659 = fmul <4 x float> %t2889.us, %10658
  %10660 = add nsw <4 x i32> %t2895.us, %10524
  %10661 = extractelement <4 x i32> %10660, i64 0
  %10662 = sext i32 %10661 to i64
  %10663 = getelementptr inbounds float, ptr %f8.host, i64 %10662
  %10664 = load float, ptr %10663, align 4, !tbaa !36
  %10665 = insertelement <4 x float> undef, float %10664, i64 0
  %10666 = extractelement <4 x i32> %10660, i64 1
  %10667 = sext i32 %10666 to i64
  %10668 = getelementptr inbounds float, ptr %f8.host, i64 %10667
  %10669 = load float, ptr %10668, align 4, !tbaa !36
  %10670 = insertelement <4 x float> %10665, float %10669, i64 1
  %10671 = extractelement <4 x i32> %10660, i64 2
  %10672 = sext i32 %10671 to i64
  %10673 = getelementptr inbounds float, ptr %f8.host, i64 %10672
  %10674 = load float, ptr %10673, align 4, !tbaa !36
  %10675 = insertelement <4 x float> %10670, float %10674, i64 2
  %10676 = extractelement <4 x i32> %10660, i64 3
  %10677 = sext i32 %10676 to i64
  %10678 = getelementptr inbounds float, ptr %f8.host, i64 %10677
  %10679 = load float, ptr %10678, align 4, !tbaa !36
  %10680 = insertelement <4 x float> %10675, float %10679, i64 3
  %10681 = fmul <4 x float> %10680, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10682 = add <4 x i32> %t2895.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10683 = add <4 x i32> %10682, %10551
  %10684 = extractelement <4 x i32> %10683, i64 0
  %10685 = sext i32 %10684 to i64
  %10686 = getelementptr inbounds float, ptr %f8.host, i64 %10685
  %10687 = load float, ptr %10686, align 4, !tbaa !36
  %10688 = insertelement <4 x float> undef, float %10687, i64 0
  %10689 = extractelement <4 x i32> %10683, i64 1
  %10690 = sext i32 %10689 to i64
  %10691 = getelementptr inbounds float, ptr %f8.host, i64 %10690
  %10692 = load float, ptr %10691, align 4, !tbaa !36
  %10693 = insertelement <4 x float> %10688, float %10692, i64 1
  %10694 = extractelement <4 x i32> %10683, i64 2
  %10695 = sext i32 %10694 to i64
  %10696 = getelementptr inbounds float, ptr %f8.host, i64 %10695
  %10697 = load float, ptr %10696, align 4, !tbaa !36
  %10698 = insertelement <4 x float> %10693, float %10697, i64 2
  %10699 = extractelement <4 x i32> %10683, i64 3
  %10700 = sext i32 %10699 to i64
  %10701 = getelementptr inbounds float, ptr %f8.host, i64 %10700
  %10702 = load float, ptr %10701, align 4, !tbaa !36
  %10703 = insertelement <4 x float> %10698, float %10702, i64 3
  %10704 = fmul <4 x float> %10703, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10705 = fadd <4 x float> %10681, %10704
  %10706 = fmul <4 x float> %10705, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10707 = add nsw <4 x i32> %t2895.us, %10580
  %10708 = extractelement <4 x i32> %10707, i64 0
  %10709 = sext i32 %10708 to i64
  %10710 = getelementptr inbounds float, ptr %f8.host, i64 %10709
  %10711 = load float, ptr %10710, align 4, !tbaa !36
  %10712 = insertelement <4 x float> undef, float %10711, i64 0
  %10713 = extractelement <4 x i32> %10707, i64 1
  %10714 = sext i32 %10713 to i64
  %10715 = getelementptr inbounds float, ptr %f8.host, i64 %10714
  %10716 = load float, ptr %10715, align 4, !tbaa !36
  %10717 = insertelement <4 x float> %10712, float %10716, i64 1
  %10718 = extractelement <4 x i32> %10707, i64 2
  %10719 = sext i32 %10718 to i64
  %10720 = getelementptr inbounds float, ptr %f8.host, i64 %10719
  %10721 = load float, ptr %10720, align 4, !tbaa !36
  %10722 = insertelement <4 x float> %10717, float %10721, i64 2
  %10723 = extractelement <4 x i32> %10707, i64 3
  %10724 = sext i32 %10723 to i64
  %10725 = getelementptr inbounds float, ptr %f8.host, i64 %10724
  %10726 = load float, ptr %10725, align 4, !tbaa !36
  %10727 = insertelement <4 x float> %10722, float %10726, i64 3
  %10728 = fmul <4 x float> %10727, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10729 = add <4 x i32> %10682, %10606
  %10730 = extractelement <4 x i32> %10729, i64 0
  %10731 = sext i32 %10730 to i64
  %10732 = getelementptr inbounds float, ptr %f8.host, i64 %10731
  %10733 = load float, ptr %10732, align 4, !tbaa !36
  %10734 = insertelement <4 x float> undef, float %10733, i64 0
  %10735 = extractelement <4 x i32> %10729, i64 1
  %10736 = sext i32 %10735 to i64
  %10737 = getelementptr inbounds float, ptr %f8.host, i64 %10736
  %10738 = load float, ptr %10737, align 4, !tbaa !36
  %10739 = insertelement <4 x float> %10734, float %10738, i64 1
  %10740 = extractelement <4 x i32> %10729, i64 2
  %10741 = sext i32 %10740 to i64
  %10742 = getelementptr inbounds float, ptr %f8.host, i64 %10741
  %10743 = load float, ptr %10742, align 4, !tbaa !36
  %10744 = insertelement <4 x float> %10739, float %10743, i64 2
  %10745 = extractelement <4 x i32> %10729, i64 3
  %10746 = sext i32 %10745 to i64
  %10747 = getelementptr inbounds float, ptr %f8.host, i64 %10746
  %10748 = load float, ptr %10747, align 4, !tbaa !36
  %10749 = insertelement <4 x float> %10744, float %10748, i64 3
  %10750 = fmul <4 x float> %10749, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10751 = fadd <4 x float> %10728, %10750
  %10752 = fmul <4 x float> %10751, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10753 = fadd <4 x float> %10706, %10752
  %10754 = mul nsw <4 x i32> %t2892.us, %10079
  %10755 = add nsw <4 x i32> %10754, %10636
  %10756 = extractelement <4 x i32> %10755, i64 0
  %10757 = sext i32 %10756 to i64
  %10758 = getelementptr inbounds float, ptr %f7.host, i64 %10757
  %10759 = load float, ptr %10758, align 4, !tbaa !54
  %10760 = insertelement <4 x float> undef, float %10759, i64 0
  %10761 = extractelement <4 x i32> %10755, i64 1
  %10762 = sext i32 %10761 to i64
  %10763 = getelementptr inbounds float, ptr %f7.host, i64 %10762
  %10764 = load float, ptr %10763, align 4, !tbaa !54
  %10765 = insertelement <4 x float> %10760, float %10764, i64 1
  %10766 = extractelement <4 x i32> %10755, i64 2
  %10767 = sext i32 %10766 to i64
  %10768 = getelementptr inbounds float, ptr %f7.host, i64 %10767
  %10769 = load float, ptr %10768, align 4, !tbaa !54
  %10770 = insertelement <4 x float> %10765, float %10769, i64 2
  %10771 = extractelement <4 x i32> %10755, i64 3
  %10772 = sext i32 %10771 to i64
  %10773 = getelementptr inbounds float, ptr %f7.host, i64 %10772
  %10774 = load float, ptr %10773, align 4, !tbaa !54
  %10775 = insertelement <4 x float> %10770, float %10774, i64 3
  %10776 = fsub <4 x float> %10775, %10753
  %10777 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2889.us
  %10778 = fmul <4 x float> %10777, %10776
  %10779 = fadd <4 x float> %10659, %10778
  %10780 = sext i32 %10230 to i64
  %10781 = sub nsw i64 %10780, %4
  %10782 = add nsw i64 %10781, %10202
  %10783 = getelementptr inbounds float, ptr %f130.host, i64 %10782
  %10784 = load <4 x float>, ptr %10783, align 4, !tbaa !38
  %10785 = fmul <4 x float> %10784, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10786 = sext i32 %t2886.us to i64
  %10787 = sub nsw i64 %10786, %4
  %10788 = add nsw i64 %10203, %10787
  %10789 = getelementptr inbounds float, ptr %f130.host, i64 %10788
  %10790 = load <4 x float>, ptr %10789, align 4, !tbaa !38
  %10791 = fmul <4 x float> %10790, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10792 = fadd <4 x float> %10785, %10791
  %10793 = fmul <4 x float> %10792, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10794 = add nsw i64 %10781, %10204
  %10795 = getelementptr inbounds float, ptr %f130.host, i64 %10794
  %10796 = load <4 x float>, ptr %10795, align 4, !tbaa !38
  %10797 = fmul <4 x float> %10796, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10798 = add nsw i64 %10205, %10787
  %10799 = getelementptr inbounds float, ptr %f130.host, i64 %10798
  %10800 = load <4 x float>, ptr %10799, align 4, !tbaa !38
  %10801 = fmul <4 x float> %10800, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10802 = fadd <4 x float> %10797, %10801
  %10803 = fmul <4 x float> %10802, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10804 = fadd <4 x float> %10793, %10803
  %10805 = fadd <4 x float> %10779, %10804
  %10806 = shufflevector <4 x float> %10519, <4 x float> %10805, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %10807 = sext i32 %f129.s0.v3.v363.base151.us to i64
  %10808 = add i64 %10208, %10807
  %10809 = getelementptr inbounds float, ptr %9958, i64 %10808
  store <8 x float> %10806, ptr %10809, align 4, !tbaa !64
  %lsr.iv.next425.us = add nsw i32 %lsr.iv424.us, -1
  %lsr.iv.next427.us = add i32 %lsr.iv426.us, 8
  %.not96.us = icmp eq i32 %lsr.iv.next425.us, 0
  br i1 %.not96.us, label %"end for f129.s0.v3.v3149.loopexit.us", label %"for f129.s0.v3.v3148.us"

"end for f129.s0.v3.v3149.loopexit.us":           ; preds = %"for f129.s0.v3.v3148.us"
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %10810 = icmp eq i64 %indvars.iv, %sext
  br i1 %10810, label %"produce f128153", label %"for f129.s0.v4145.us"

"produce f128153":                                ; preds = %"end for f129.s0.v3.v3149.loopexit.us", %"produce f129143"
  %10811 = add nsw i32 %10161, 14
  %10812 = ashr i32 %10811, 3
  %.not79 = icmp sgt i32 %f128.s0.v4.min_2, %10812
  %brmerge446 = select i1 %.not79, i1 true, i1 %10086
  br i1 %brmerge446, label %"produce f127163", label %"for f128.s0.v4155.us.preheader", !prof !27

"for f128.s0.v4155.us.preheader":                 ; preds = %"produce f128153"
  %10813 = sext i32 %f128.s0.v4.min_2 to i64
  %sext296 = sext i32 %10812 to i64
  br label %"for f128.s0.v4155.us"

"for f128.s0.v4155.us":                           ; preds = %"for f128.s0.v4155.us.preheader", %"end for f128.s0.v3.v3159.loopexit.us"
  %indvars.iv294 = phi i64 [ %10813, %"for f128.s0.v4155.us.preheader" ], [ %indvars.iv.next295, %"end for f128.s0.v3.v3159.loopexit.us" ]
  %10814 = trunc i64 %indvars.iv294 to i32
  %10815 = shl i32 %10814, 1
  %10816 = and i32 %10815, 2
  %10817 = ashr i32 %10814, 1
  %t2901.us = add nsw i32 %10816, %10817
  %10818 = trunc i64 %indvars.iv294 to i32
  %10819 = sub i32 %10818, %f74.v4.min_realized
  %10820 = mul i32 %10819, %10087
  %10821 = sub i32 %10820, %f74.v3.min_realized
  %10822 = add nsw i32 %t2901.us, %10088
  %t2908.us = mul nsw i32 %10822, %117
  %10823 = sub nsw i32 %10817, %10083
  %t2910.us = mul nsw i32 %10823, %117
  %10824 = add i32 %t2901.us, %10089
  %10825 = mul nsw i32 %10824, %f7.stride.1
  %10826 = sub nsw i32 %10817, %f7.v4.min_realized
  %10827 = mul nsw i32 %10826, %f7.stride.1
  %10828 = sext i32 %t2910.us to i64
  %10829 = add nsw i64 %10828, -1
  %10830 = sext i32 %t2908.us to i64
  %10831 = add nsw i64 %10830, -1
  %10832 = sub nsw i64 %indvars.iv294, %10098
  %10833 = mul nsw i64 %10832, %10095
  %10834 = add i64 %10833, %.neg206
  %10835 = trunc i64 %indvars.iv294 to i32
  %10836 = sub i32 %10835, %f6.v4.min_realized
  %10837 = mul i32 %10836, %f6.stride.1
  br label %"for f128.s0.v3.v3158.us"

"for f128.s0.v3.v3158.us":                        ; preds = %"for f128.s0.v4155.us", %"for f128.s0.v3.v3158.us"
  %lsr.iv430.us = phi i32 [ %lsr.iv.next431.us, %"for f128.s0.v3.v3158.us" ], [ 0, %"for f128.s0.v4155.us" ]
  %lsr.iv428.us = phi i32 [ %lsr.iv.next429.us, %"for f128.s0.v3.v3158.us" ], [ %10085, %"for f128.s0.v4155.us" ]
  %10838 = add i32 %lsr.iv430.us, %99
  %f128.s0.v3.v343.base161.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %10838)
  %10839 = shl i32 %f128.s0.v3.v343.base161.us, 1
  %10840 = and i32 %10839, 2
  %10841 = ashr i32 %f128.s0.v3.v343.base161.us, 1
  %t2902.us = add nsw i32 %10840, %10841
  %t2903.us = add i32 %10821, %f128.s0.v3.v343.base161.us
  %10842 = sext i32 %t2903.us to i64
  %10843 = getelementptr inbounds float, ptr %f74.host, i64 %10842
  %10844 = load <4 x float>, ptr %10843, align 4, !tbaa !56
  %10845 = add nsw i64 %10842, 4
  %10846 = getelementptr inbounds float, ptr %f74.host, i64 %10845
  %10847 = load <4 x float>, ptr %10846, align 4, !tbaa !56
  %10848 = shufflevector <4 x float> %10844, <4 x float> %10847, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2904.us = fmul <4 x float> %10063, %10848
  %a1094.us = fptosi <4 x float> %t2904.us to <4 x i32>
  %a1097.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1094.us)
  %10849 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1097.us, <4 x i32> zeroinitializer)
  %10850 = sitofp <4 x i32> %10849 to <4 x float>
  %t2906.us = fsub <4 x float> %t2904.us, %10850
  %10851 = sub nsw i32 %f128.s0.v3.v343.base161.us, %f6.v3.min_realized
  %t2911.us = add nsw i32 %10851, %10837
  %t2913.us = sub nsw <4 x i32> %10849, %10072
  %10852 = sub nsw i32 %t2902.us, %f7.v3.min_realized
  %t2916.us = add nsw i32 %10852, %10825
  %t2917.us = mul nsw <4 x i32> %t2913.us, %10079
  %10853 = sub nsw i32 %10841, %f7.v3.min_realized
  %t2919.us = add nsw i32 %10853, %10825
  %t2921.us = add nsw i32 %10852, %10827
  %t2922.us = add nsw i32 %10853, %10827
  %10854 = add nsw <4 x i32> %t2913.us, <i32 1, i32 1, i32 1, i32 1>
  %t2923.us = mul nsw <4 x i32> %10854, %10079
  %10855 = add nsw i32 %f128.s0.v3.v343.base161.us, 1
  %10856 = shl i32 %10855, 1
  %10857 = and i32 %10856, 2
  %10858 = ashr i32 %10855, 1
  %t2924.us = add nsw i32 %10857, %10858
  %10859 = shufflevector <4 x float> %10844, <4 x float> %10847, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2925.us = fmul <4 x float> %10063, %10859
  %a1098.us = fptosi <4 x float> %t2925.us to <4 x i32>
  %a1101.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1098.us)
  %10860 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1101.us, <4 x i32> zeroinitializer)
  %10861 = sitofp <4 x i32> %10860 to <4 x float>
  %t2927.us = fsub <4 x float> %t2925.us, %10861
  %t2930.us = sub nsw <4 x i32> %10860, %10072
  %10862 = sub nsw i32 %t2924.us, %f7.v3.min_realized
  %t2932.us = add nsw i32 %10862, %10825
  %t2933.us = mul nsw <4 x i32> %t2930.us, %10079
  %10863 = sub nsw i32 %10858, %f7.v3.min_realized
  %t2935.us = add nsw i32 %10863, %10825
  %t2936.us = add nsw i32 %10862, %10827
  %t2937.us = add nsw i32 %10863, %10827
  %10864 = add nsw <4 x i32> %t2930.us, <i32 1, i32 1, i32 1, i32 1>
  %t2938.us = mul nsw <4 x i32> %10864, %10079
  %10865 = insertelement <4 x i32> undef, i32 %t2922.us, i64 0
  %10866 = shufflevector <4 x i32> %10865, <4 x i32> undef, <4 x i32> zeroinitializer
  %10867 = add nsw <4 x i32> %10866, <i32 0, i32 1, i32 2, i32 3>
  %10868 = add nsw <4 x i32> %t2923.us, %10867
  %10869 = extractelement <4 x i32> %10868, i64 0
  %10870 = sext i32 %10869 to i64
  %10871 = getelementptr inbounds float, ptr %f7.host, i64 %10870
  %10872 = load float, ptr %10871, align 4, !tbaa !54
  %10873 = insertelement <4 x float> undef, float %10872, i64 0
  %10874 = extractelement <4 x i32> %10868, i64 1
  %10875 = sext i32 %10874 to i64
  %10876 = getelementptr inbounds float, ptr %f7.host, i64 %10875
  %10877 = load float, ptr %10876, align 4, !tbaa !54
  %10878 = insertelement <4 x float> %10873, float %10877, i64 1
  %10879 = extractelement <4 x i32> %10868, i64 2
  %10880 = sext i32 %10879 to i64
  %10881 = getelementptr inbounds float, ptr %f7.host, i64 %10880
  %10882 = load float, ptr %10881, align 4, !tbaa !54
  %10883 = insertelement <4 x float> %10878, float %10882, i64 2
  %10884 = extractelement <4 x i32> %10868, i64 3
  %10885 = sext i32 %10884 to i64
  %10886 = getelementptr inbounds float, ptr %f7.host, i64 %10885
  %10887 = load float, ptr %10886, align 4, !tbaa !54
  %10888 = insertelement <4 x float> %10883, float %10887, i64 3
  %10889 = fmul <4 x float> %10888, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10890 = insertelement <4 x i32> undef, i32 %t2921.us, i64 0
  %10891 = shufflevector <4 x i32> %10890, <4 x i32> undef, <4 x i32> zeroinitializer
  %10892 = add <4 x i32> %10891, <i32 -1, i32 0, i32 1, i32 2>
  %10893 = add <4 x i32> %10892, %t2923.us
  %10894 = extractelement <4 x i32> %10893, i64 0
  %10895 = sext i32 %10894 to i64
  %10896 = getelementptr inbounds float, ptr %f7.host, i64 %10895
  %10897 = load float, ptr %10896, align 4, !tbaa !54
  %10898 = insertelement <4 x float> undef, float %10897, i64 0
  %10899 = extractelement <4 x i32> %10893, i64 1
  %10900 = sext i32 %10899 to i64
  %10901 = getelementptr inbounds float, ptr %f7.host, i64 %10900
  %10902 = load float, ptr %10901, align 4, !tbaa !54
  %10903 = insertelement <4 x float> %10898, float %10902, i64 1
  %10904 = extractelement <4 x i32> %10893, i64 2
  %10905 = sext i32 %10904 to i64
  %10906 = getelementptr inbounds float, ptr %f7.host, i64 %10905
  %10907 = load float, ptr %10906, align 4, !tbaa !54
  %10908 = insertelement <4 x float> %10903, float %10907, i64 2
  %10909 = extractelement <4 x i32> %10893, i64 3
  %10910 = sext i32 %10909 to i64
  %10911 = getelementptr inbounds float, ptr %f7.host, i64 %10910
  %10912 = load float, ptr %10911, align 4, !tbaa !54
  %10913 = insertelement <4 x float> %10908, float %10912, i64 3
  %10914 = fmul <4 x float> %10913, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10915 = fadd <4 x float> %10889, %10914
  %10916 = fmul <4 x float> %10915, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10917 = insertelement <4 x i32> undef, i32 %t2919.us, i64 0
  %10918 = shufflevector <4 x i32> %10917, <4 x i32> undef, <4 x i32> zeroinitializer
  %10919 = add nsw <4 x i32> %10918, <i32 0, i32 1, i32 2, i32 3>
  %10920 = add nsw <4 x i32> %t2923.us, %10919
  %10921 = extractelement <4 x i32> %10920, i64 0
  %10922 = sext i32 %10921 to i64
  %10923 = getelementptr inbounds float, ptr %f7.host, i64 %10922
  %10924 = load float, ptr %10923, align 4, !tbaa !54
  %10925 = insertelement <4 x float> undef, float %10924, i64 0
  %10926 = extractelement <4 x i32> %10920, i64 1
  %10927 = sext i32 %10926 to i64
  %10928 = getelementptr inbounds float, ptr %f7.host, i64 %10927
  %10929 = load float, ptr %10928, align 4, !tbaa !54
  %10930 = insertelement <4 x float> %10925, float %10929, i64 1
  %10931 = extractelement <4 x i32> %10920, i64 2
  %10932 = sext i32 %10931 to i64
  %10933 = getelementptr inbounds float, ptr %f7.host, i64 %10932
  %10934 = load float, ptr %10933, align 4, !tbaa !54
  %10935 = insertelement <4 x float> %10930, float %10934, i64 2
  %10936 = extractelement <4 x i32> %10920, i64 3
  %10937 = sext i32 %10936 to i64
  %10938 = getelementptr inbounds float, ptr %f7.host, i64 %10937
  %10939 = load float, ptr %10938, align 4, !tbaa !54
  %10940 = insertelement <4 x float> %10935, float %10939, i64 3
  %10941 = fmul <4 x float> %10940, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10942 = insertelement <4 x i32> undef, i32 %t2916.us, i64 0
  %10943 = shufflevector <4 x i32> %10942, <4 x i32> undef, <4 x i32> zeroinitializer
  %10944 = add <4 x i32> %10943, <i32 -1, i32 0, i32 1, i32 2>
  %10945 = add <4 x i32> %10944, %t2923.us
  %10946 = extractelement <4 x i32> %10945, i64 0
  %10947 = sext i32 %10946 to i64
  %10948 = getelementptr inbounds float, ptr %f7.host, i64 %10947
  %10949 = load float, ptr %10948, align 4, !tbaa !54
  %10950 = insertelement <4 x float> undef, float %10949, i64 0
  %10951 = extractelement <4 x i32> %10945, i64 1
  %10952 = sext i32 %10951 to i64
  %10953 = getelementptr inbounds float, ptr %f7.host, i64 %10952
  %10954 = load float, ptr %10953, align 4, !tbaa !54
  %10955 = insertelement <4 x float> %10950, float %10954, i64 1
  %10956 = extractelement <4 x i32> %10945, i64 2
  %10957 = sext i32 %10956 to i64
  %10958 = getelementptr inbounds float, ptr %f7.host, i64 %10957
  %10959 = load float, ptr %10958, align 4, !tbaa !54
  %10960 = insertelement <4 x float> %10955, float %10959, i64 2
  %10961 = extractelement <4 x i32> %10945, i64 3
  %10962 = sext i32 %10961 to i64
  %10963 = getelementptr inbounds float, ptr %f7.host, i64 %10962
  %10964 = load float, ptr %10963, align 4, !tbaa !54
  %10965 = insertelement <4 x float> %10960, float %10964, i64 3
  %10966 = fmul <4 x float> %10965, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10967 = fadd <4 x float> %10941, %10966
  %10968 = fmul <4 x float> %10967, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10969 = fadd <4 x float> %10916, %10968
  %10970 = mul nsw <4 x i32> %10854, %10092
  %10971 = insertelement <4 x i32> undef, i32 %t2911.us, i64 0
  %10972 = shufflevector <4 x i32> %10971, <4 x i32> undef, <4 x i32> zeroinitializer
  %10973 = add nsw <4 x i32> %10972, <i32 0, i32 2, i32 4, i32 6>
  %10974 = add nsw <4 x i32> %10970, %10973
  %10975 = extractelement <4 x i32> %10974, i64 0
  %10976 = sext i32 %10975 to i64
  %10977 = getelementptr inbounds float, ptr %f6.host, i64 %10976
  %10978 = load float, ptr %10977, align 4, !tbaa !50
  %10979 = insertelement <4 x float> undef, float %10978, i64 0
  %10980 = extractelement <4 x i32> %10974, i64 1
  %10981 = sext i32 %10980 to i64
  %10982 = getelementptr inbounds float, ptr %f6.host, i64 %10981
  %10983 = load float, ptr %10982, align 4, !tbaa !50
  %10984 = insertelement <4 x float> %10979, float %10983, i64 1
  %10985 = extractelement <4 x i32> %10974, i64 2
  %10986 = sext i32 %10985 to i64
  %10987 = getelementptr inbounds float, ptr %f6.host, i64 %10986
  %10988 = load float, ptr %10987, align 4, !tbaa !50
  %10989 = insertelement <4 x float> %10984, float %10988, i64 2
  %10990 = extractelement <4 x i32> %10974, i64 3
  %10991 = sext i32 %10990 to i64
  %10992 = getelementptr inbounds float, ptr %f6.host, i64 %10991
  %10993 = load float, ptr %10992, align 4, !tbaa !50
  %10994 = insertelement <4 x float> %10989, float %10993, i64 3
  %10995 = fsub <4 x float> %10994, %10969
  %10996 = fmul <4 x float> %t2906.us, %10995
  %10997 = add nsw <4 x i32> %t2917.us, %10867
  %10998 = extractelement <4 x i32> %10997, i64 0
  %10999 = sext i32 %10998 to i64
  %11000 = getelementptr inbounds float, ptr %f7.host, i64 %10999
  %11001 = load float, ptr %11000, align 4, !tbaa !54
  %11002 = insertelement <4 x float> undef, float %11001, i64 0
  %11003 = extractelement <4 x i32> %10997, i64 1
  %11004 = sext i32 %11003 to i64
  %11005 = getelementptr inbounds float, ptr %f7.host, i64 %11004
  %11006 = load float, ptr %11005, align 4, !tbaa !54
  %11007 = insertelement <4 x float> %11002, float %11006, i64 1
  %11008 = extractelement <4 x i32> %10997, i64 2
  %11009 = sext i32 %11008 to i64
  %11010 = getelementptr inbounds float, ptr %f7.host, i64 %11009
  %11011 = load float, ptr %11010, align 4, !tbaa !54
  %11012 = insertelement <4 x float> %11007, float %11011, i64 2
  %11013 = extractelement <4 x i32> %10997, i64 3
  %11014 = sext i32 %11013 to i64
  %11015 = getelementptr inbounds float, ptr %f7.host, i64 %11014
  %11016 = load float, ptr %11015, align 4, !tbaa !54
  %11017 = insertelement <4 x float> %11012, float %11016, i64 3
  %11018 = fmul <4 x float> %11017, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11019 = add <4 x i32> %t2917.us, %10891
  %11020 = add <4 x i32> %11019, <i32 -1, i32 0, i32 1, i32 2>
  %11021 = extractelement <4 x i32> %11020, i64 0
  %11022 = sext i32 %11021 to i64
  %11023 = getelementptr inbounds float, ptr %f7.host, i64 %11022
  %11024 = load float, ptr %11023, align 4, !tbaa !54
  %11025 = insertelement <4 x float> undef, float %11024, i64 0
  %11026 = extractelement <4 x i32> %11020, i64 1
  %11027 = sext i32 %11026 to i64
  %11028 = getelementptr inbounds float, ptr %f7.host, i64 %11027
  %11029 = load float, ptr %11028, align 4, !tbaa !54
  %11030 = insertelement <4 x float> %11025, float %11029, i64 1
  %11031 = extractelement <4 x i32> %11020, i64 2
  %11032 = sext i32 %11031 to i64
  %11033 = getelementptr inbounds float, ptr %f7.host, i64 %11032
  %11034 = load float, ptr %11033, align 4, !tbaa !54
  %11035 = insertelement <4 x float> %11030, float %11034, i64 2
  %11036 = extractelement <4 x i32> %11020, i64 3
  %11037 = sext i32 %11036 to i64
  %11038 = getelementptr inbounds float, ptr %f7.host, i64 %11037
  %11039 = load float, ptr %11038, align 4, !tbaa !54
  %11040 = insertelement <4 x float> %11035, float %11039, i64 3
  %11041 = fmul <4 x float> %11040, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11042 = fadd <4 x float> %11018, %11041
  %11043 = fmul <4 x float> %11042, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11044 = add nsw <4 x i32> %t2917.us, %10919
  %11045 = extractelement <4 x i32> %11044, i64 0
  %11046 = sext i32 %11045 to i64
  %11047 = getelementptr inbounds float, ptr %f7.host, i64 %11046
  %11048 = load float, ptr %11047, align 4, !tbaa !54
  %11049 = insertelement <4 x float> undef, float %11048, i64 0
  %11050 = extractelement <4 x i32> %11044, i64 1
  %11051 = sext i32 %11050 to i64
  %11052 = getelementptr inbounds float, ptr %f7.host, i64 %11051
  %11053 = load float, ptr %11052, align 4, !tbaa !54
  %11054 = insertelement <4 x float> %11049, float %11053, i64 1
  %11055 = extractelement <4 x i32> %11044, i64 2
  %11056 = sext i32 %11055 to i64
  %11057 = getelementptr inbounds float, ptr %f7.host, i64 %11056
  %11058 = load float, ptr %11057, align 4, !tbaa !54
  %11059 = insertelement <4 x float> %11054, float %11058, i64 2
  %11060 = extractelement <4 x i32> %11044, i64 3
  %11061 = sext i32 %11060 to i64
  %11062 = getelementptr inbounds float, ptr %f7.host, i64 %11061
  %11063 = load float, ptr %11062, align 4, !tbaa !54
  %11064 = insertelement <4 x float> %11059, float %11063, i64 3
  %11065 = fmul <4 x float> %11064, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11066 = add <4 x i32> %t2917.us, %10943
  %11067 = add <4 x i32> %11066, <i32 -1, i32 0, i32 1, i32 2>
  %11068 = extractelement <4 x i32> %11067, i64 0
  %11069 = sext i32 %11068 to i64
  %11070 = getelementptr inbounds float, ptr %f7.host, i64 %11069
  %11071 = load float, ptr %11070, align 4, !tbaa !54
  %11072 = insertelement <4 x float> undef, float %11071, i64 0
  %11073 = extractelement <4 x i32> %11067, i64 1
  %11074 = sext i32 %11073 to i64
  %11075 = getelementptr inbounds float, ptr %f7.host, i64 %11074
  %11076 = load float, ptr %11075, align 4, !tbaa !54
  %11077 = insertelement <4 x float> %11072, float %11076, i64 1
  %11078 = extractelement <4 x i32> %11067, i64 2
  %11079 = sext i32 %11078 to i64
  %11080 = getelementptr inbounds float, ptr %f7.host, i64 %11079
  %11081 = load float, ptr %11080, align 4, !tbaa !54
  %11082 = insertelement <4 x float> %11077, float %11081, i64 2
  %11083 = extractelement <4 x i32> %11067, i64 3
  %11084 = sext i32 %11083 to i64
  %11085 = getelementptr inbounds float, ptr %f7.host, i64 %11084
  %11086 = load float, ptr %11085, align 4, !tbaa !54
  %11087 = insertelement <4 x float> %11082, float %11086, i64 3
  %11088 = fmul <4 x float> %11087, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11089 = fadd <4 x float> %11065, %11088
  %11090 = fmul <4 x float> %11089, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11091 = fadd <4 x float> %11043, %11090
  %11092 = mul nsw <4 x i32> %t2913.us, %10092
  %11093 = add nsw <4 x i32> %11092, %10973
  %11094 = extractelement <4 x i32> %11093, i64 0
  %11095 = sext i32 %11094 to i64
  %11096 = getelementptr inbounds float, ptr %f6.host, i64 %11095
  %11097 = load float, ptr %11096, align 4, !tbaa !50
  %11098 = insertelement <4 x float> undef, float %11097, i64 0
  %11099 = extractelement <4 x i32> %11093, i64 1
  %11100 = sext i32 %11099 to i64
  %11101 = getelementptr inbounds float, ptr %f6.host, i64 %11100
  %11102 = load float, ptr %11101, align 4, !tbaa !50
  %11103 = insertelement <4 x float> %11098, float %11102, i64 1
  %11104 = extractelement <4 x i32> %11093, i64 2
  %11105 = sext i32 %11104 to i64
  %11106 = getelementptr inbounds float, ptr %f6.host, i64 %11105
  %11107 = load float, ptr %11106, align 4, !tbaa !50
  %11108 = insertelement <4 x float> %11103, float %11107, i64 2
  %11109 = extractelement <4 x i32> %11093, i64 3
  %11110 = sext i32 %11109 to i64
  %11111 = getelementptr inbounds float, ptr %f6.host, i64 %11110
  %11112 = load float, ptr %11111, align 4, !tbaa !50
  %11113 = insertelement <4 x float> %11108, float %11112, i64 3
  %11114 = fsub <4 x float> %11113, %11091
  %11115 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2906.us
  %11116 = fmul <4 x float> %11115, %11114
  %11117 = fadd <4 x float> %10996, %11116
  %narrow92.us = sub nsw i32 %10841, %f129.v3.min_realized
  %11118 = sext i32 %narrow92.us to i64
  %11119 = add nsw i64 %11118, %10828
  %11120 = getelementptr inbounds float, ptr %9958, i64 %11119
  %11121 = load <4 x float>, ptr %11120, align 4, !tbaa !64
  %11122 = fmul <4 x float> %11121, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11123 = sext i32 %t2902.us to i64
  %11124 = sub nsw i64 %11123, %10093
  %11125 = add nsw i64 %10829, %11124
  %11126 = getelementptr inbounds float, ptr %9958, i64 %11125
  %11127 = load <4 x float>, ptr %11126, align 4, !tbaa !64
  %11128 = fmul <4 x float> %11127, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11129 = fadd <4 x float> %11122, %11128
  %11130 = fmul <4 x float> %11129, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11131 = add nsw i64 %11118, %10830
  %11132 = getelementptr inbounds float, ptr %9958, i64 %11131
  %11133 = load <4 x float>, ptr %11132, align 4, !tbaa !64
  %11134 = fmul <4 x float> %11133, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11135 = add nsw i64 %10831, %11124
  %11136 = getelementptr inbounds float, ptr %9958, i64 %11135
  %11137 = load <4 x float>, ptr %11136, align 4, !tbaa !64
  %11138 = fmul <4 x float> %11137, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11139 = fadd <4 x float> %11134, %11138
  %11140 = fmul <4 x float> %11139, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11141 = fadd <4 x float> %11130, %11140
  %11142 = fadd <4 x float> %11117, %11141
  %11143 = insertelement <4 x i32> undef, i32 %t2937.us, i64 0
  %11144 = shufflevector <4 x i32> %11143, <4 x i32> undef, <4 x i32> zeroinitializer
  %11145 = add nsw <4 x i32> %11144, <i32 0, i32 1, i32 2, i32 3>
  %11146 = add nsw <4 x i32> %t2938.us, %11145
  %11147 = extractelement <4 x i32> %11146, i64 0
  %11148 = sext i32 %11147 to i64
  %11149 = getelementptr inbounds float, ptr %f7.host, i64 %11148
  %11150 = load float, ptr %11149, align 4, !tbaa !54
  %11151 = insertelement <4 x float> undef, float %11150, i64 0
  %11152 = extractelement <4 x i32> %11146, i64 1
  %11153 = sext i32 %11152 to i64
  %11154 = getelementptr inbounds float, ptr %f7.host, i64 %11153
  %11155 = load float, ptr %11154, align 4, !tbaa !54
  %11156 = insertelement <4 x float> %11151, float %11155, i64 1
  %11157 = extractelement <4 x i32> %11146, i64 2
  %11158 = sext i32 %11157 to i64
  %11159 = getelementptr inbounds float, ptr %f7.host, i64 %11158
  %11160 = load float, ptr %11159, align 4, !tbaa !54
  %11161 = insertelement <4 x float> %11156, float %11160, i64 2
  %11162 = extractelement <4 x i32> %11146, i64 3
  %11163 = sext i32 %11162 to i64
  %11164 = getelementptr inbounds float, ptr %f7.host, i64 %11163
  %11165 = load float, ptr %11164, align 4, !tbaa !54
  %11166 = insertelement <4 x float> %11161, float %11165, i64 3
  %11167 = fmul <4 x float> %11166, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11168 = insertelement <4 x i32> undef, i32 %t2936.us, i64 0
  %11169 = shufflevector <4 x i32> %11168, <4 x i32> undef, <4 x i32> zeroinitializer
  %11170 = add nsw <4 x i32> %11169, <i32 0, i32 1, i32 2, i32 3>
  %11171 = add <4 x i32> %t2938.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11172 = add <4 x i32> %11171, %11170
  %11173 = extractelement <4 x i32> %11172, i64 0
  %11174 = sext i32 %11173 to i64
  %11175 = getelementptr inbounds float, ptr %f7.host, i64 %11174
  %11176 = load float, ptr %11175, align 4, !tbaa !54
  %11177 = insertelement <4 x float> undef, float %11176, i64 0
  %11178 = extractelement <4 x i32> %11172, i64 1
  %11179 = sext i32 %11178 to i64
  %11180 = getelementptr inbounds float, ptr %f7.host, i64 %11179
  %11181 = load float, ptr %11180, align 4, !tbaa !54
  %11182 = insertelement <4 x float> %11177, float %11181, i64 1
  %11183 = extractelement <4 x i32> %11172, i64 2
  %11184 = sext i32 %11183 to i64
  %11185 = getelementptr inbounds float, ptr %f7.host, i64 %11184
  %11186 = load float, ptr %11185, align 4, !tbaa !54
  %11187 = insertelement <4 x float> %11182, float %11186, i64 2
  %11188 = extractelement <4 x i32> %11172, i64 3
  %11189 = sext i32 %11188 to i64
  %11190 = getelementptr inbounds float, ptr %f7.host, i64 %11189
  %11191 = load float, ptr %11190, align 4, !tbaa !54
  %11192 = insertelement <4 x float> %11187, float %11191, i64 3
  %11193 = fmul <4 x float> %11192, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11194 = fadd <4 x float> %11167, %11193
  %11195 = fmul <4 x float> %11194, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11196 = insertelement <4 x i32> undef, i32 %t2935.us, i64 0
  %11197 = shufflevector <4 x i32> %11196, <4 x i32> undef, <4 x i32> zeroinitializer
  %11198 = add nsw <4 x i32> %11197, <i32 0, i32 1, i32 2, i32 3>
  %11199 = add nsw <4 x i32> %t2938.us, %11198
  %11200 = extractelement <4 x i32> %11199, i64 0
  %11201 = sext i32 %11200 to i64
  %11202 = getelementptr inbounds float, ptr %f7.host, i64 %11201
  %11203 = load float, ptr %11202, align 4, !tbaa !54
  %11204 = insertelement <4 x float> undef, float %11203, i64 0
  %11205 = extractelement <4 x i32> %11199, i64 1
  %11206 = sext i32 %11205 to i64
  %11207 = getelementptr inbounds float, ptr %f7.host, i64 %11206
  %11208 = load float, ptr %11207, align 4, !tbaa !54
  %11209 = insertelement <4 x float> %11204, float %11208, i64 1
  %11210 = extractelement <4 x i32> %11199, i64 2
  %11211 = sext i32 %11210 to i64
  %11212 = getelementptr inbounds float, ptr %f7.host, i64 %11211
  %11213 = load float, ptr %11212, align 4, !tbaa !54
  %11214 = insertelement <4 x float> %11209, float %11213, i64 2
  %11215 = extractelement <4 x i32> %11199, i64 3
  %11216 = sext i32 %11215 to i64
  %11217 = getelementptr inbounds float, ptr %f7.host, i64 %11216
  %11218 = load float, ptr %11217, align 4, !tbaa !54
  %11219 = insertelement <4 x float> %11214, float %11218, i64 3
  %11220 = fmul <4 x float> %11219, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11221 = insertelement <4 x i32> undef, i32 %t2932.us, i64 0
  %11222 = shufflevector <4 x i32> %11221, <4 x i32> undef, <4 x i32> zeroinitializer
  %11223 = add nsw <4 x i32> %11222, <i32 0, i32 1, i32 2, i32 3>
  %11224 = add <4 x i32> %11171, %11223
  %11225 = extractelement <4 x i32> %11224, i64 0
  %11226 = sext i32 %11225 to i64
  %11227 = getelementptr inbounds float, ptr %f7.host, i64 %11226
  %11228 = load float, ptr %11227, align 4, !tbaa !54
  %11229 = insertelement <4 x float> undef, float %11228, i64 0
  %11230 = extractelement <4 x i32> %11224, i64 1
  %11231 = sext i32 %11230 to i64
  %11232 = getelementptr inbounds float, ptr %f7.host, i64 %11231
  %11233 = load float, ptr %11232, align 4, !tbaa !54
  %11234 = insertelement <4 x float> %11229, float %11233, i64 1
  %11235 = extractelement <4 x i32> %11224, i64 2
  %11236 = sext i32 %11235 to i64
  %11237 = getelementptr inbounds float, ptr %f7.host, i64 %11236
  %11238 = load float, ptr %11237, align 4, !tbaa !54
  %11239 = insertelement <4 x float> %11234, float %11238, i64 2
  %11240 = extractelement <4 x i32> %11224, i64 3
  %11241 = sext i32 %11240 to i64
  %11242 = getelementptr inbounds float, ptr %f7.host, i64 %11241
  %11243 = load float, ptr %11242, align 4, !tbaa !54
  %11244 = insertelement <4 x float> %11239, float %11243, i64 3
  %11245 = fmul <4 x float> %11244, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11246 = fadd <4 x float> %11220, %11245
  %11247 = fmul <4 x float> %11246, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11248 = fadd <4 x float> %11195, %11247
  %11249 = mul nsw <4 x i32> %10864, %10092
  %11250 = add nsw i32 %t2911.us, 1
  %11251 = insertelement <4 x i32> undef, i32 %11250, i64 0
  %11252 = shufflevector <4 x i32> %11251, <4 x i32> undef, <4 x i32> zeroinitializer
  %11253 = add nsw <4 x i32> %11252, <i32 0, i32 2, i32 4, i32 6>
  %11254 = add nsw <4 x i32> %11249, %11253
  %11255 = extractelement <4 x i32> %11254, i64 0
  %11256 = sext i32 %11255 to i64
  %11257 = getelementptr inbounds float, ptr %f6.host, i64 %11256
  %11258 = load float, ptr %11257, align 4, !tbaa !50
  %11259 = insertelement <4 x float> undef, float %11258, i64 0
  %11260 = extractelement <4 x i32> %11254, i64 1
  %11261 = sext i32 %11260 to i64
  %11262 = getelementptr inbounds float, ptr %f6.host, i64 %11261
  %11263 = load float, ptr %11262, align 4, !tbaa !50
  %11264 = insertelement <4 x float> %11259, float %11263, i64 1
  %11265 = extractelement <4 x i32> %11254, i64 2
  %11266 = sext i32 %11265 to i64
  %11267 = getelementptr inbounds float, ptr %f6.host, i64 %11266
  %11268 = load float, ptr %11267, align 4, !tbaa !50
  %11269 = insertelement <4 x float> %11264, float %11268, i64 2
  %11270 = extractelement <4 x i32> %11254, i64 3
  %11271 = sext i32 %11270 to i64
  %11272 = getelementptr inbounds float, ptr %f6.host, i64 %11271
  %11273 = load float, ptr %11272, align 4, !tbaa !50
  %11274 = insertelement <4 x float> %11269, float %11273, i64 3
  %11275 = fsub <4 x float> %11274, %11248
  %11276 = fmul <4 x float> %t2927.us, %11275
  %11277 = add nsw <4 x i32> %t2933.us, %11145
  %11278 = extractelement <4 x i32> %11277, i64 0
  %11279 = sext i32 %11278 to i64
  %11280 = getelementptr inbounds float, ptr %f7.host, i64 %11279
  %11281 = load float, ptr %11280, align 4, !tbaa !54
  %11282 = insertelement <4 x float> undef, float %11281, i64 0
  %11283 = extractelement <4 x i32> %11277, i64 1
  %11284 = sext i32 %11283 to i64
  %11285 = getelementptr inbounds float, ptr %f7.host, i64 %11284
  %11286 = load float, ptr %11285, align 4, !tbaa !54
  %11287 = insertelement <4 x float> %11282, float %11286, i64 1
  %11288 = extractelement <4 x i32> %11277, i64 2
  %11289 = sext i32 %11288 to i64
  %11290 = getelementptr inbounds float, ptr %f7.host, i64 %11289
  %11291 = load float, ptr %11290, align 4, !tbaa !54
  %11292 = insertelement <4 x float> %11287, float %11291, i64 2
  %11293 = extractelement <4 x i32> %11277, i64 3
  %11294 = sext i32 %11293 to i64
  %11295 = getelementptr inbounds float, ptr %f7.host, i64 %11294
  %11296 = load float, ptr %11295, align 4, !tbaa !54
  %11297 = insertelement <4 x float> %11292, float %11296, i64 3
  %11298 = fmul <4 x float> %11297, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11299 = add <4 x i32> %t2933.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11300 = add <4 x i32> %11299, %11170
  %11301 = extractelement <4 x i32> %11300, i64 0
  %11302 = sext i32 %11301 to i64
  %11303 = getelementptr inbounds float, ptr %f7.host, i64 %11302
  %11304 = load float, ptr %11303, align 4, !tbaa !54
  %11305 = insertelement <4 x float> undef, float %11304, i64 0
  %11306 = extractelement <4 x i32> %11300, i64 1
  %11307 = sext i32 %11306 to i64
  %11308 = getelementptr inbounds float, ptr %f7.host, i64 %11307
  %11309 = load float, ptr %11308, align 4, !tbaa !54
  %11310 = insertelement <4 x float> %11305, float %11309, i64 1
  %11311 = extractelement <4 x i32> %11300, i64 2
  %11312 = sext i32 %11311 to i64
  %11313 = getelementptr inbounds float, ptr %f7.host, i64 %11312
  %11314 = load float, ptr %11313, align 4, !tbaa !54
  %11315 = insertelement <4 x float> %11310, float %11314, i64 2
  %11316 = extractelement <4 x i32> %11300, i64 3
  %11317 = sext i32 %11316 to i64
  %11318 = getelementptr inbounds float, ptr %f7.host, i64 %11317
  %11319 = load float, ptr %11318, align 4, !tbaa !54
  %11320 = insertelement <4 x float> %11315, float %11319, i64 3
  %11321 = fmul <4 x float> %11320, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11322 = fadd <4 x float> %11298, %11321
  %11323 = fmul <4 x float> %11322, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11324 = add nsw <4 x i32> %t2933.us, %11198
  %11325 = extractelement <4 x i32> %11324, i64 0
  %11326 = sext i32 %11325 to i64
  %11327 = getelementptr inbounds float, ptr %f7.host, i64 %11326
  %11328 = load float, ptr %11327, align 4, !tbaa !54
  %11329 = insertelement <4 x float> undef, float %11328, i64 0
  %11330 = extractelement <4 x i32> %11324, i64 1
  %11331 = sext i32 %11330 to i64
  %11332 = getelementptr inbounds float, ptr %f7.host, i64 %11331
  %11333 = load float, ptr %11332, align 4, !tbaa !54
  %11334 = insertelement <4 x float> %11329, float %11333, i64 1
  %11335 = extractelement <4 x i32> %11324, i64 2
  %11336 = sext i32 %11335 to i64
  %11337 = getelementptr inbounds float, ptr %f7.host, i64 %11336
  %11338 = load float, ptr %11337, align 4, !tbaa !54
  %11339 = insertelement <4 x float> %11334, float %11338, i64 2
  %11340 = extractelement <4 x i32> %11324, i64 3
  %11341 = sext i32 %11340 to i64
  %11342 = getelementptr inbounds float, ptr %f7.host, i64 %11341
  %11343 = load float, ptr %11342, align 4, !tbaa !54
  %11344 = insertelement <4 x float> %11339, float %11343, i64 3
  %11345 = fmul <4 x float> %11344, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11346 = add <4 x i32> %11299, %11223
  %11347 = extractelement <4 x i32> %11346, i64 0
  %11348 = sext i32 %11347 to i64
  %11349 = getelementptr inbounds float, ptr %f7.host, i64 %11348
  %11350 = load float, ptr %11349, align 4, !tbaa !54
  %11351 = insertelement <4 x float> undef, float %11350, i64 0
  %11352 = extractelement <4 x i32> %11346, i64 1
  %11353 = sext i32 %11352 to i64
  %11354 = getelementptr inbounds float, ptr %f7.host, i64 %11353
  %11355 = load float, ptr %11354, align 4, !tbaa !54
  %11356 = insertelement <4 x float> %11351, float %11355, i64 1
  %11357 = extractelement <4 x i32> %11346, i64 2
  %11358 = sext i32 %11357 to i64
  %11359 = getelementptr inbounds float, ptr %f7.host, i64 %11358
  %11360 = load float, ptr %11359, align 4, !tbaa !54
  %11361 = insertelement <4 x float> %11356, float %11360, i64 2
  %11362 = extractelement <4 x i32> %11346, i64 3
  %11363 = sext i32 %11362 to i64
  %11364 = getelementptr inbounds float, ptr %f7.host, i64 %11363
  %11365 = load float, ptr %11364, align 4, !tbaa !54
  %11366 = insertelement <4 x float> %11361, float %11365, i64 3
  %11367 = fmul <4 x float> %11366, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11368 = fadd <4 x float> %11345, %11367
  %11369 = fmul <4 x float> %11368, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11370 = fadd <4 x float> %11323, %11369
  %11371 = mul nsw <4 x i32> %t2930.us, %10092
  %11372 = add nsw <4 x i32> %11371, %11253
  %11373 = extractelement <4 x i32> %11372, i64 0
  %11374 = sext i32 %11373 to i64
  %11375 = getelementptr inbounds float, ptr %f6.host, i64 %11374
  %11376 = load float, ptr %11375, align 4, !tbaa !50
  %11377 = insertelement <4 x float> undef, float %11376, i64 0
  %11378 = extractelement <4 x i32> %11372, i64 1
  %11379 = sext i32 %11378 to i64
  %11380 = getelementptr inbounds float, ptr %f6.host, i64 %11379
  %11381 = load float, ptr %11380, align 4, !tbaa !50
  %11382 = insertelement <4 x float> %11377, float %11381, i64 1
  %11383 = extractelement <4 x i32> %11372, i64 2
  %11384 = sext i32 %11383 to i64
  %11385 = getelementptr inbounds float, ptr %f6.host, i64 %11384
  %11386 = load float, ptr %11385, align 4, !tbaa !50
  %11387 = insertelement <4 x float> %11382, float %11386, i64 2
  %11388 = extractelement <4 x i32> %11372, i64 3
  %11389 = sext i32 %11388 to i64
  %11390 = getelementptr inbounds float, ptr %f6.host, i64 %11389
  %11391 = load float, ptr %11390, align 4, !tbaa !50
  %11392 = insertelement <4 x float> %11387, float %11391, i64 3
  %11393 = fsub <4 x float> %11392, %11370
  %11394 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2927.us
  %11395 = fmul <4 x float> %11394, %11393
  %11396 = fadd <4 x float> %11276, %11395
  %narrow93.us = sub nsw i32 %10858, %f129.v3.min_realized
  %11397 = sext i32 %narrow93.us to i64
  %11398 = add nsw i64 %11397, %10828
  %11399 = getelementptr inbounds float, ptr %9958, i64 %11398
  %11400 = load <4 x float>, ptr %11399, align 4, !tbaa !64
  %11401 = fmul <4 x float> %11400, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11402 = sext i32 %t2924.us to i64
  %11403 = sub nsw i64 %11402, %10093
  %11404 = add nsw i64 %10829, %11403
  %11405 = getelementptr inbounds float, ptr %9958, i64 %11404
  %11406 = load <4 x float>, ptr %11405, align 4, !tbaa !64
  %11407 = fmul <4 x float> %11406, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11408 = fadd <4 x float> %11401, %11407
  %11409 = fmul <4 x float> %11408, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11410 = add nsw i64 %11397, %10830
  %11411 = getelementptr inbounds float, ptr %9958, i64 %11410
  %11412 = load <4 x float>, ptr %11411, align 4, !tbaa !64
  %11413 = fmul <4 x float> %11412, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11414 = add nsw i64 %10831, %11403
  %11415 = getelementptr inbounds float, ptr %9958, i64 %11414
  %11416 = load <4 x float>, ptr %11415, align 4, !tbaa !64
  %11417 = fmul <4 x float> %11416, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11418 = fadd <4 x float> %11413, %11417
  %11419 = fmul <4 x float> %11418, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11420 = fadd <4 x float> %11409, %11419
  %11421 = fadd <4 x float> %11396, %11420
  %11422 = shufflevector <4 x float> %11142, <4 x float> %11421, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %11423 = sext i32 %f128.s0.v3.v343.base161.us to i64
  %11424 = add i64 %10834, %11423
  %11425 = getelementptr inbounds float, ptr %9981, i64 %11424
  store <8 x float> %11422, ptr %11425, align 4, !tbaa !66
  %lsr.iv.next429.us = add nsw i32 %lsr.iv428.us, -1
  %lsr.iv.next431.us = add i32 %lsr.iv430.us, 8
  %.not94.us = icmp eq i32 %lsr.iv.next429.us, 0
  br i1 %.not94.us, label %"end for f128.s0.v3.v3159.loopexit.us", label %"for f128.s0.v3.v3158.us"

"end for f128.s0.v3.v3159.loopexit.us":           ; preds = %"for f128.s0.v3.v3158.us"
  %indvars.iv.next295 = add nsw i64 %indvars.iv294, 1
  %11426 = icmp eq i64 %indvars.iv294, %sext296
  br i1 %11426, label %"produce f127163", label %"for f128.s0.v4155.us"

"produce f127163":                                ; preds = %"end for f128.s0.v3.v3159.loopexit.us", %"produce f128153"
  %11427 = add nsw i32 %10161, 6
  %11428 = ashr i32 %11427, 2
  %.not80 = icmp sgt i32 %f127.s0.v4.min_2, %11428
  %brmerge448 = select i1 %.not80, i1 true, i1 %10100
  br i1 %brmerge448, label %"produce f126173", label %"for f127.s0.v4165.us.preheader", !prof !27

"for f127.s0.v4165.us.preheader":                 ; preds = %"produce f127163"
  %11429 = sext i32 %f127.s0.v4.min_2 to i64
  %sext300 = sext i32 %11428 to i64
  br label %"for f127.s0.v4165.us"

"for f127.s0.v4165.us":                           ; preds = %"for f127.s0.v4165.us.preheader", %"end for f127.s0.v3.v3169.loopexit.us"
  %indvars.iv298 = phi i64 [ %11429, %"for f127.s0.v4165.us.preheader" ], [ %indvars.iv.next299, %"end for f127.s0.v3.v3169.loopexit.us" ]
  %11430 = trunc i64 %indvars.iv298 to i32
  %11431 = shl i32 %11430, 1
  %11432 = and i32 %11431, 2
  %11433 = ashr i32 %11430, 1
  %t2939.us = add nsw i32 %11432, %11433
  %11434 = trunc i64 %indvars.iv298 to i32
  %11435 = sub i32 %11434, %f73.v4.min_realized
  %11436 = mul i32 %11435, %10101
  %11437 = sub i32 %11436, %f73.v3.min_realized
  %11438 = add nsw i32 %t2939.us, %10102
  %t2946.us = mul nsw i32 %11438, %9974
  %11439 = sub nsw i32 %11433, %10097
  %t2948.us = mul nsw i32 %11439, %9974
  %11440 = add i32 %t2939.us, %10103
  %11441 = mul nsw i32 %11440, %f6.stride.1
  %11442 = sub nsw i32 %11433, %f6.v4.min_realized
  %11443 = mul nsw i32 %11442, %f6.stride.1
  %11444 = sext i32 %t2948.us to i64
  %11445 = add nsw i64 %11444, -1
  %11446 = sext i32 %t2946.us to i64
  %11447 = add nsw i64 %11446, -1
  %11448 = sub nsw i64 %indvars.iv298, %10110
  %11449 = mul nsw i64 %11448, %10109
  %11450 = sub i64 %11449, %10111
  %11451 = trunc i64 %indvars.iv298 to i32
  %11452 = sub i32 %11451, %f5.v4.min_realized
  %11453 = mul i32 %11452, %f5.stride.1
  br label %"for f127.s0.v3.v3168.us"

"for f127.s0.v3.v3168.us":                        ; preds = %"for f127.s0.v4165.us", %"for f127.s0.v3.v3168.us"
  %lsr.iv434.us = phi i32 [ %lsr.iv.next435.us, %"for f127.s0.v3.v3168.us" ], [ 0, %"for f127.s0.v4165.us" ]
  %lsr.iv432.us = phi i32 [ %lsr.iv.next433.us, %"for f127.s0.v3.v3168.us" ], [ %10099, %"for f127.s0.v4165.us" ]
  %11454 = add i32 %lsr.iv434.us, %9962
  %f127.s0.v3.v323.base171.us = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %11454)
  %11455 = shl i32 %f127.s0.v3.v323.base171.us, 1
  %11456 = and i32 %11455, 2
  %11457 = ashr i32 %f127.s0.v3.v323.base171.us, 1
  %t2940.us = add nsw i32 %11456, %11457
  %t2941.us = add i32 %11437, %f127.s0.v3.v323.base171.us
  %11458 = sext i32 %t2941.us to i64
  %11459 = getelementptr inbounds float, ptr %f73.host, i64 %11458
  %11460 = load <4 x float>, ptr %11459, align 4, !tbaa !52
  %11461 = add nsw i64 %11458, 4
  %11462 = getelementptr inbounds float, ptr %f73.host, i64 %11461
  %11463 = load <4 x float>, ptr %11462, align 4, !tbaa !52
  %11464 = shufflevector <4 x float> %11460, <4 x float> %11463, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2942.us = fmul <4 x float> %10063, %11464
  %a1103.us = fptosi <4 x float> %t2942.us to <4 x i32>
  %a1106.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1103.us)
  %11465 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1106.us, <4 x i32> zeroinitializer)
  %11466 = sitofp <4 x i32> %11465 to <4 x float>
  %t2944.us = fsub <4 x float> %t2942.us, %11466
  %11467 = sub nsw i32 %f127.s0.v3.v323.base171.us, %f5.v3.min_realized
  %t2949.us = add nsw i32 %11467, %11453
  %t2951.us = sub nsw <4 x i32> %11465, %10072
  %11468 = sub nsw i32 %t2940.us, %f6.v3.min_realized
  %t2954.us = add nsw i32 %11468, %11441
  %t2955.us = mul nsw <4 x i32> %t2951.us, %10092
  %11469 = sub nsw i32 %11457, %f6.v3.min_realized
  %t2957.us = add nsw i32 %11469, %11441
  %t2959.us = add nsw i32 %11468, %11443
  %t2960.us = add nsw i32 %11469, %11443
  %11470 = add nsw <4 x i32> %t2951.us, <i32 1, i32 1, i32 1, i32 1>
  %t2961.us = mul nsw <4 x i32> %11470, %10092
  %11471 = add nsw i32 %f127.s0.v3.v323.base171.us, 1
  %11472 = shl i32 %11471, 1
  %11473 = and i32 %11472, 2
  %11474 = ashr i32 %11471, 1
  %t2962.us = add nsw i32 %11473, %11474
  %11475 = shufflevector <4 x float> %11460, <4 x float> %11463, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2963.us = fmul <4 x float> %10063, %11475
  %a1107.us = fptosi <4 x float> %t2963.us to <4 x i32>
  %a1110.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1107.us)
  %11476 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1110.us, <4 x i32> zeroinitializer)
  %11477 = sitofp <4 x i32> %11476 to <4 x float>
  %t2965.us = fsub <4 x float> %t2963.us, %11477
  %t2968.us = sub nsw <4 x i32> %11476, %10072
  %11478 = sub nsw i32 %t2962.us, %f6.v3.min_realized
  %t2970.us = add nsw i32 %11478, %11441
  %t2971.us = mul nsw <4 x i32> %t2968.us, %10092
  %11479 = sub nsw i32 %11474, %f6.v3.min_realized
  %t2973.us = add nsw i32 %11479, %11441
  %t2974.us = add nsw i32 %11478, %11443
  %t2975.us = add nsw i32 %11479, %11443
  %11480 = add nsw <4 x i32> %t2968.us, <i32 1, i32 1, i32 1, i32 1>
  %t2976.us = mul nsw <4 x i32> %11480, %10092
  %11481 = insertelement <4 x i32> undef, i32 %t2960.us, i64 0
  %11482 = shufflevector <4 x i32> %11481, <4 x i32> undef, <4 x i32> zeroinitializer
  %11483 = add nsw <4 x i32> %11482, <i32 0, i32 1, i32 2, i32 3>
  %11484 = add nsw <4 x i32> %t2961.us, %11483
  %11485 = extractelement <4 x i32> %11484, i64 0
  %11486 = sext i32 %11485 to i64
  %11487 = getelementptr inbounds float, ptr %f6.host, i64 %11486
  %11488 = load float, ptr %11487, align 4, !tbaa !50
  %11489 = insertelement <4 x float> undef, float %11488, i64 0
  %11490 = extractelement <4 x i32> %11484, i64 1
  %11491 = sext i32 %11490 to i64
  %11492 = getelementptr inbounds float, ptr %f6.host, i64 %11491
  %11493 = load float, ptr %11492, align 4, !tbaa !50
  %11494 = insertelement <4 x float> %11489, float %11493, i64 1
  %11495 = extractelement <4 x i32> %11484, i64 2
  %11496 = sext i32 %11495 to i64
  %11497 = getelementptr inbounds float, ptr %f6.host, i64 %11496
  %11498 = load float, ptr %11497, align 4, !tbaa !50
  %11499 = insertelement <4 x float> %11494, float %11498, i64 2
  %11500 = extractelement <4 x i32> %11484, i64 3
  %11501 = sext i32 %11500 to i64
  %11502 = getelementptr inbounds float, ptr %f6.host, i64 %11501
  %11503 = load float, ptr %11502, align 4, !tbaa !50
  %11504 = insertelement <4 x float> %11499, float %11503, i64 3
  %11505 = fmul <4 x float> %11504, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11506 = insertelement <4 x i32> undef, i32 %t2959.us, i64 0
  %11507 = shufflevector <4 x i32> %11506, <4 x i32> undef, <4 x i32> zeroinitializer
  %11508 = add <4 x i32> %11507, <i32 -1, i32 0, i32 1, i32 2>
  %11509 = add <4 x i32> %11508, %t2961.us
  %11510 = extractelement <4 x i32> %11509, i64 0
  %11511 = sext i32 %11510 to i64
  %11512 = getelementptr inbounds float, ptr %f6.host, i64 %11511
  %11513 = load float, ptr %11512, align 4, !tbaa !50
  %11514 = insertelement <4 x float> undef, float %11513, i64 0
  %11515 = extractelement <4 x i32> %11509, i64 1
  %11516 = sext i32 %11515 to i64
  %11517 = getelementptr inbounds float, ptr %f6.host, i64 %11516
  %11518 = load float, ptr %11517, align 4, !tbaa !50
  %11519 = insertelement <4 x float> %11514, float %11518, i64 1
  %11520 = extractelement <4 x i32> %11509, i64 2
  %11521 = sext i32 %11520 to i64
  %11522 = getelementptr inbounds float, ptr %f6.host, i64 %11521
  %11523 = load float, ptr %11522, align 4, !tbaa !50
  %11524 = insertelement <4 x float> %11519, float %11523, i64 2
  %11525 = extractelement <4 x i32> %11509, i64 3
  %11526 = sext i32 %11525 to i64
  %11527 = getelementptr inbounds float, ptr %f6.host, i64 %11526
  %11528 = load float, ptr %11527, align 4, !tbaa !50
  %11529 = insertelement <4 x float> %11524, float %11528, i64 3
  %11530 = fmul <4 x float> %11529, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11531 = fadd <4 x float> %11505, %11530
  %11532 = fmul <4 x float> %11531, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11533 = insertelement <4 x i32> undef, i32 %t2957.us, i64 0
  %11534 = shufflevector <4 x i32> %11533, <4 x i32> undef, <4 x i32> zeroinitializer
  %11535 = add nsw <4 x i32> %11534, <i32 0, i32 1, i32 2, i32 3>
  %11536 = add nsw <4 x i32> %t2961.us, %11535
  %11537 = extractelement <4 x i32> %11536, i64 0
  %11538 = sext i32 %11537 to i64
  %11539 = getelementptr inbounds float, ptr %f6.host, i64 %11538
  %11540 = load float, ptr %11539, align 4, !tbaa !50
  %11541 = insertelement <4 x float> undef, float %11540, i64 0
  %11542 = extractelement <4 x i32> %11536, i64 1
  %11543 = sext i32 %11542 to i64
  %11544 = getelementptr inbounds float, ptr %f6.host, i64 %11543
  %11545 = load float, ptr %11544, align 4, !tbaa !50
  %11546 = insertelement <4 x float> %11541, float %11545, i64 1
  %11547 = extractelement <4 x i32> %11536, i64 2
  %11548 = sext i32 %11547 to i64
  %11549 = getelementptr inbounds float, ptr %f6.host, i64 %11548
  %11550 = load float, ptr %11549, align 4, !tbaa !50
  %11551 = insertelement <4 x float> %11546, float %11550, i64 2
  %11552 = extractelement <4 x i32> %11536, i64 3
  %11553 = sext i32 %11552 to i64
  %11554 = getelementptr inbounds float, ptr %f6.host, i64 %11553
  %11555 = load float, ptr %11554, align 4, !tbaa !50
  %11556 = insertelement <4 x float> %11551, float %11555, i64 3
  %11557 = fmul <4 x float> %11556, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11558 = insertelement <4 x i32> undef, i32 %t2954.us, i64 0
  %11559 = shufflevector <4 x i32> %11558, <4 x i32> undef, <4 x i32> zeroinitializer
  %11560 = add <4 x i32> %11559, <i32 -1, i32 0, i32 1, i32 2>
  %11561 = add <4 x i32> %11560, %t2961.us
  %11562 = extractelement <4 x i32> %11561, i64 0
  %11563 = sext i32 %11562 to i64
  %11564 = getelementptr inbounds float, ptr %f6.host, i64 %11563
  %11565 = load float, ptr %11564, align 4, !tbaa !50
  %11566 = insertelement <4 x float> undef, float %11565, i64 0
  %11567 = extractelement <4 x i32> %11561, i64 1
  %11568 = sext i32 %11567 to i64
  %11569 = getelementptr inbounds float, ptr %f6.host, i64 %11568
  %11570 = load float, ptr %11569, align 4, !tbaa !50
  %11571 = insertelement <4 x float> %11566, float %11570, i64 1
  %11572 = extractelement <4 x i32> %11561, i64 2
  %11573 = sext i32 %11572 to i64
  %11574 = getelementptr inbounds float, ptr %f6.host, i64 %11573
  %11575 = load float, ptr %11574, align 4, !tbaa !50
  %11576 = insertelement <4 x float> %11571, float %11575, i64 2
  %11577 = extractelement <4 x i32> %11561, i64 3
  %11578 = sext i32 %11577 to i64
  %11579 = getelementptr inbounds float, ptr %f6.host, i64 %11578
  %11580 = load float, ptr %11579, align 4, !tbaa !50
  %11581 = insertelement <4 x float> %11576, float %11580, i64 3
  %11582 = fmul <4 x float> %11581, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11583 = fadd <4 x float> %11557, %11582
  %11584 = fmul <4 x float> %11583, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11585 = fadd <4 x float> %11532, %11584
  %11586 = mul nsw <4 x i32> %11470, %10106
  %11587 = insertelement <4 x i32> undef, i32 %t2949.us, i64 0
  %11588 = shufflevector <4 x i32> %11587, <4 x i32> undef, <4 x i32> zeroinitializer
  %11589 = add nsw <4 x i32> %11588, <i32 0, i32 2, i32 4, i32 6>
  %11590 = add nsw <4 x i32> %11586, %11589
  %11591 = extractelement <4 x i32> %11590, i64 0
  %11592 = sext i32 %11591 to i64
  %11593 = getelementptr inbounds float, ptr %f5.host, i64 %11592
  %11594 = load float, ptr %11593, align 4, !tbaa !46
  %11595 = insertelement <4 x float> undef, float %11594, i64 0
  %11596 = extractelement <4 x i32> %11590, i64 1
  %11597 = sext i32 %11596 to i64
  %11598 = getelementptr inbounds float, ptr %f5.host, i64 %11597
  %11599 = load float, ptr %11598, align 4, !tbaa !46
  %11600 = insertelement <4 x float> %11595, float %11599, i64 1
  %11601 = extractelement <4 x i32> %11590, i64 2
  %11602 = sext i32 %11601 to i64
  %11603 = getelementptr inbounds float, ptr %f5.host, i64 %11602
  %11604 = load float, ptr %11603, align 4, !tbaa !46
  %11605 = insertelement <4 x float> %11600, float %11604, i64 2
  %11606 = extractelement <4 x i32> %11590, i64 3
  %11607 = sext i32 %11606 to i64
  %11608 = getelementptr inbounds float, ptr %f5.host, i64 %11607
  %11609 = load float, ptr %11608, align 4, !tbaa !46
  %11610 = insertelement <4 x float> %11605, float %11609, i64 3
  %11611 = fsub <4 x float> %11610, %11585
  %11612 = fmul <4 x float> %t2944.us, %11611
  %11613 = add nsw <4 x i32> %t2955.us, %11483
  %11614 = extractelement <4 x i32> %11613, i64 0
  %11615 = sext i32 %11614 to i64
  %11616 = getelementptr inbounds float, ptr %f6.host, i64 %11615
  %11617 = load float, ptr %11616, align 4, !tbaa !50
  %11618 = insertelement <4 x float> undef, float %11617, i64 0
  %11619 = extractelement <4 x i32> %11613, i64 1
  %11620 = sext i32 %11619 to i64
  %11621 = getelementptr inbounds float, ptr %f6.host, i64 %11620
  %11622 = load float, ptr %11621, align 4, !tbaa !50
  %11623 = insertelement <4 x float> %11618, float %11622, i64 1
  %11624 = extractelement <4 x i32> %11613, i64 2
  %11625 = sext i32 %11624 to i64
  %11626 = getelementptr inbounds float, ptr %f6.host, i64 %11625
  %11627 = load float, ptr %11626, align 4, !tbaa !50
  %11628 = insertelement <4 x float> %11623, float %11627, i64 2
  %11629 = extractelement <4 x i32> %11613, i64 3
  %11630 = sext i32 %11629 to i64
  %11631 = getelementptr inbounds float, ptr %f6.host, i64 %11630
  %11632 = load float, ptr %11631, align 4, !tbaa !50
  %11633 = insertelement <4 x float> %11628, float %11632, i64 3
  %11634 = fmul <4 x float> %11633, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11635 = add <4 x i32> %t2955.us, %11507
  %11636 = add <4 x i32> %11635, <i32 -1, i32 0, i32 1, i32 2>
  %11637 = extractelement <4 x i32> %11636, i64 0
  %11638 = sext i32 %11637 to i64
  %11639 = getelementptr inbounds float, ptr %f6.host, i64 %11638
  %11640 = load float, ptr %11639, align 4, !tbaa !50
  %11641 = insertelement <4 x float> undef, float %11640, i64 0
  %11642 = extractelement <4 x i32> %11636, i64 1
  %11643 = sext i32 %11642 to i64
  %11644 = getelementptr inbounds float, ptr %f6.host, i64 %11643
  %11645 = load float, ptr %11644, align 4, !tbaa !50
  %11646 = insertelement <4 x float> %11641, float %11645, i64 1
  %11647 = extractelement <4 x i32> %11636, i64 2
  %11648 = sext i32 %11647 to i64
  %11649 = getelementptr inbounds float, ptr %f6.host, i64 %11648
  %11650 = load float, ptr %11649, align 4, !tbaa !50
  %11651 = insertelement <4 x float> %11646, float %11650, i64 2
  %11652 = extractelement <4 x i32> %11636, i64 3
  %11653 = sext i32 %11652 to i64
  %11654 = getelementptr inbounds float, ptr %f6.host, i64 %11653
  %11655 = load float, ptr %11654, align 4, !tbaa !50
  %11656 = insertelement <4 x float> %11651, float %11655, i64 3
  %11657 = fmul <4 x float> %11656, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11658 = fadd <4 x float> %11634, %11657
  %11659 = fmul <4 x float> %11658, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11660 = add nsw <4 x i32> %t2955.us, %11535
  %11661 = extractelement <4 x i32> %11660, i64 0
  %11662 = sext i32 %11661 to i64
  %11663 = getelementptr inbounds float, ptr %f6.host, i64 %11662
  %11664 = load float, ptr %11663, align 4, !tbaa !50
  %11665 = insertelement <4 x float> undef, float %11664, i64 0
  %11666 = extractelement <4 x i32> %11660, i64 1
  %11667 = sext i32 %11666 to i64
  %11668 = getelementptr inbounds float, ptr %f6.host, i64 %11667
  %11669 = load float, ptr %11668, align 4, !tbaa !50
  %11670 = insertelement <4 x float> %11665, float %11669, i64 1
  %11671 = extractelement <4 x i32> %11660, i64 2
  %11672 = sext i32 %11671 to i64
  %11673 = getelementptr inbounds float, ptr %f6.host, i64 %11672
  %11674 = load float, ptr %11673, align 4, !tbaa !50
  %11675 = insertelement <4 x float> %11670, float %11674, i64 2
  %11676 = extractelement <4 x i32> %11660, i64 3
  %11677 = sext i32 %11676 to i64
  %11678 = getelementptr inbounds float, ptr %f6.host, i64 %11677
  %11679 = load float, ptr %11678, align 4, !tbaa !50
  %11680 = insertelement <4 x float> %11675, float %11679, i64 3
  %11681 = fmul <4 x float> %11680, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11682 = add <4 x i32> %t2955.us, %11559
  %11683 = add <4 x i32> %11682, <i32 -1, i32 0, i32 1, i32 2>
  %11684 = extractelement <4 x i32> %11683, i64 0
  %11685 = sext i32 %11684 to i64
  %11686 = getelementptr inbounds float, ptr %f6.host, i64 %11685
  %11687 = load float, ptr %11686, align 4, !tbaa !50
  %11688 = insertelement <4 x float> undef, float %11687, i64 0
  %11689 = extractelement <4 x i32> %11683, i64 1
  %11690 = sext i32 %11689 to i64
  %11691 = getelementptr inbounds float, ptr %f6.host, i64 %11690
  %11692 = load float, ptr %11691, align 4, !tbaa !50
  %11693 = insertelement <4 x float> %11688, float %11692, i64 1
  %11694 = extractelement <4 x i32> %11683, i64 2
  %11695 = sext i32 %11694 to i64
  %11696 = getelementptr inbounds float, ptr %f6.host, i64 %11695
  %11697 = load float, ptr %11696, align 4, !tbaa !50
  %11698 = insertelement <4 x float> %11693, float %11697, i64 2
  %11699 = extractelement <4 x i32> %11683, i64 3
  %11700 = sext i32 %11699 to i64
  %11701 = getelementptr inbounds float, ptr %f6.host, i64 %11700
  %11702 = load float, ptr %11701, align 4, !tbaa !50
  %11703 = insertelement <4 x float> %11698, float %11702, i64 3
  %11704 = fmul <4 x float> %11703, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11705 = fadd <4 x float> %11681, %11704
  %11706 = fmul <4 x float> %11705, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11707 = fadd <4 x float> %11659, %11706
  %11708 = mul nsw <4 x i32> %t2951.us, %10106
  %11709 = add nsw <4 x i32> %11708, %11589
  %11710 = extractelement <4 x i32> %11709, i64 0
  %11711 = sext i32 %11710 to i64
  %11712 = getelementptr inbounds float, ptr %f5.host, i64 %11711
  %11713 = load float, ptr %11712, align 4, !tbaa !46
  %11714 = insertelement <4 x float> undef, float %11713, i64 0
  %11715 = extractelement <4 x i32> %11709, i64 1
  %11716 = sext i32 %11715 to i64
  %11717 = getelementptr inbounds float, ptr %f5.host, i64 %11716
  %11718 = load float, ptr %11717, align 4, !tbaa !46
  %11719 = insertelement <4 x float> %11714, float %11718, i64 1
  %11720 = extractelement <4 x i32> %11709, i64 2
  %11721 = sext i32 %11720 to i64
  %11722 = getelementptr inbounds float, ptr %f5.host, i64 %11721
  %11723 = load float, ptr %11722, align 4, !tbaa !46
  %11724 = insertelement <4 x float> %11719, float %11723, i64 2
  %11725 = extractelement <4 x i32> %11709, i64 3
  %11726 = sext i32 %11725 to i64
  %11727 = getelementptr inbounds float, ptr %f5.host, i64 %11726
  %11728 = load float, ptr %11727, align 4, !tbaa !46
  %11729 = insertelement <4 x float> %11724, float %11728, i64 3
  %11730 = fsub <4 x float> %11729, %11707
  %11731 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2944.us
  %11732 = fmul <4 x float> %11731, %11730
  %11733 = fadd <4 x float> %11612, %11732
  %narrow.us = sub nsw i32 %11457, %f128.v3.min_realized117
  %11734 = sext i32 %narrow.us to i64
  %11735 = add nsw i64 %11734, %11444
  %11736 = getelementptr inbounds float, ptr %9981, i64 %11735
  %11737 = load <4 x float>, ptr %11736, align 4, !tbaa !66
  %11738 = fmul <4 x float> %11737, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11739 = sext i32 %t2940.us to i64
  %11740 = sub nsw i64 %11739, %10107
  %11741 = add nsw i64 %11445, %11740
  %11742 = getelementptr inbounds float, ptr %9981, i64 %11741
  %11743 = load <4 x float>, ptr %11742, align 4, !tbaa !66
  %11744 = fmul <4 x float> %11743, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11745 = fadd <4 x float> %11738, %11744
  %11746 = fmul <4 x float> %11745, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11747 = add nsw i64 %11734, %11446
  %11748 = getelementptr inbounds float, ptr %9981, i64 %11747
  %11749 = load <4 x float>, ptr %11748, align 4, !tbaa !66
  %11750 = fmul <4 x float> %11749, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11751 = add nsw i64 %11447, %11740
  %11752 = getelementptr inbounds float, ptr %9981, i64 %11751
  %11753 = load <4 x float>, ptr %11752, align 4, !tbaa !66
  %11754 = fmul <4 x float> %11753, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11755 = fadd <4 x float> %11750, %11754
  %11756 = fmul <4 x float> %11755, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11757 = fadd <4 x float> %11746, %11756
  %11758 = fadd <4 x float> %11733, %11757
  %11759 = insertelement <4 x i32> undef, i32 %t2975.us, i64 0
  %11760 = shufflevector <4 x i32> %11759, <4 x i32> undef, <4 x i32> zeroinitializer
  %11761 = add nsw <4 x i32> %11760, <i32 0, i32 1, i32 2, i32 3>
  %11762 = add nsw <4 x i32> %t2976.us, %11761
  %11763 = extractelement <4 x i32> %11762, i64 0
  %11764 = sext i32 %11763 to i64
  %11765 = getelementptr inbounds float, ptr %f6.host, i64 %11764
  %11766 = load float, ptr %11765, align 4, !tbaa !50
  %11767 = insertelement <4 x float> undef, float %11766, i64 0
  %11768 = extractelement <4 x i32> %11762, i64 1
  %11769 = sext i32 %11768 to i64
  %11770 = getelementptr inbounds float, ptr %f6.host, i64 %11769
  %11771 = load float, ptr %11770, align 4, !tbaa !50
  %11772 = insertelement <4 x float> %11767, float %11771, i64 1
  %11773 = extractelement <4 x i32> %11762, i64 2
  %11774 = sext i32 %11773 to i64
  %11775 = getelementptr inbounds float, ptr %f6.host, i64 %11774
  %11776 = load float, ptr %11775, align 4, !tbaa !50
  %11777 = insertelement <4 x float> %11772, float %11776, i64 2
  %11778 = extractelement <4 x i32> %11762, i64 3
  %11779 = sext i32 %11778 to i64
  %11780 = getelementptr inbounds float, ptr %f6.host, i64 %11779
  %11781 = load float, ptr %11780, align 4, !tbaa !50
  %11782 = insertelement <4 x float> %11777, float %11781, i64 3
  %11783 = fmul <4 x float> %11782, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11784 = insertelement <4 x i32> undef, i32 %t2974.us, i64 0
  %11785 = shufflevector <4 x i32> %11784, <4 x i32> undef, <4 x i32> zeroinitializer
  %11786 = add nsw <4 x i32> %11785, <i32 0, i32 1, i32 2, i32 3>
  %11787 = add <4 x i32> %t2976.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11788 = add <4 x i32> %11787, %11786
  %11789 = extractelement <4 x i32> %11788, i64 0
  %11790 = sext i32 %11789 to i64
  %11791 = getelementptr inbounds float, ptr %f6.host, i64 %11790
  %11792 = load float, ptr %11791, align 4, !tbaa !50
  %11793 = insertelement <4 x float> undef, float %11792, i64 0
  %11794 = extractelement <4 x i32> %11788, i64 1
  %11795 = sext i32 %11794 to i64
  %11796 = getelementptr inbounds float, ptr %f6.host, i64 %11795
  %11797 = load float, ptr %11796, align 4, !tbaa !50
  %11798 = insertelement <4 x float> %11793, float %11797, i64 1
  %11799 = extractelement <4 x i32> %11788, i64 2
  %11800 = sext i32 %11799 to i64
  %11801 = getelementptr inbounds float, ptr %f6.host, i64 %11800
  %11802 = load float, ptr %11801, align 4, !tbaa !50
  %11803 = insertelement <4 x float> %11798, float %11802, i64 2
  %11804 = extractelement <4 x i32> %11788, i64 3
  %11805 = sext i32 %11804 to i64
  %11806 = getelementptr inbounds float, ptr %f6.host, i64 %11805
  %11807 = load float, ptr %11806, align 4, !tbaa !50
  %11808 = insertelement <4 x float> %11803, float %11807, i64 3
  %11809 = fmul <4 x float> %11808, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11810 = fadd <4 x float> %11783, %11809
  %11811 = fmul <4 x float> %11810, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11812 = insertelement <4 x i32> undef, i32 %t2973.us, i64 0
  %11813 = shufflevector <4 x i32> %11812, <4 x i32> undef, <4 x i32> zeroinitializer
  %11814 = add nsw <4 x i32> %11813, <i32 0, i32 1, i32 2, i32 3>
  %11815 = add nsw <4 x i32> %t2976.us, %11814
  %11816 = extractelement <4 x i32> %11815, i64 0
  %11817 = sext i32 %11816 to i64
  %11818 = getelementptr inbounds float, ptr %f6.host, i64 %11817
  %11819 = load float, ptr %11818, align 4, !tbaa !50
  %11820 = insertelement <4 x float> undef, float %11819, i64 0
  %11821 = extractelement <4 x i32> %11815, i64 1
  %11822 = sext i32 %11821 to i64
  %11823 = getelementptr inbounds float, ptr %f6.host, i64 %11822
  %11824 = load float, ptr %11823, align 4, !tbaa !50
  %11825 = insertelement <4 x float> %11820, float %11824, i64 1
  %11826 = extractelement <4 x i32> %11815, i64 2
  %11827 = sext i32 %11826 to i64
  %11828 = getelementptr inbounds float, ptr %f6.host, i64 %11827
  %11829 = load float, ptr %11828, align 4, !tbaa !50
  %11830 = insertelement <4 x float> %11825, float %11829, i64 2
  %11831 = extractelement <4 x i32> %11815, i64 3
  %11832 = sext i32 %11831 to i64
  %11833 = getelementptr inbounds float, ptr %f6.host, i64 %11832
  %11834 = load float, ptr %11833, align 4, !tbaa !50
  %11835 = insertelement <4 x float> %11830, float %11834, i64 3
  %11836 = fmul <4 x float> %11835, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11837 = insertelement <4 x i32> undef, i32 %t2970.us, i64 0
  %11838 = shufflevector <4 x i32> %11837, <4 x i32> undef, <4 x i32> zeroinitializer
  %11839 = add nsw <4 x i32> %11838, <i32 0, i32 1, i32 2, i32 3>
  %11840 = add <4 x i32> %11787, %11839
  %11841 = extractelement <4 x i32> %11840, i64 0
  %11842 = sext i32 %11841 to i64
  %11843 = getelementptr inbounds float, ptr %f6.host, i64 %11842
  %11844 = load float, ptr %11843, align 4, !tbaa !50
  %11845 = insertelement <4 x float> undef, float %11844, i64 0
  %11846 = extractelement <4 x i32> %11840, i64 1
  %11847 = sext i32 %11846 to i64
  %11848 = getelementptr inbounds float, ptr %f6.host, i64 %11847
  %11849 = load float, ptr %11848, align 4, !tbaa !50
  %11850 = insertelement <4 x float> %11845, float %11849, i64 1
  %11851 = extractelement <4 x i32> %11840, i64 2
  %11852 = sext i32 %11851 to i64
  %11853 = getelementptr inbounds float, ptr %f6.host, i64 %11852
  %11854 = load float, ptr %11853, align 4, !tbaa !50
  %11855 = insertelement <4 x float> %11850, float %11854, i64 2
  %11856 = extractelement <4 x i32> %11840, i64 3
  %11857 = sext i32 %11856 to i64
  %11858 = getelementptr inbounds float, ptr %f6.host, i64 %11857
  %11859 = load float, ptr %11858, align 4, !tbaa !50
  %11860 = insertelement <4 x float> %11855, float %11859, i64 3
  %11861 = fmul <4 x float> %11860, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11862 = fadd <4 x float> %11836, %11861
  %11863 = fmul <4 x float> %11862, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11864 = fadd <4 x float> %11811, %11863
  %11865 = mul nsw <4 x i32> %11480, %10106
  %11866 = add nsw i32 %t2949.us, 1
  %11867 = insertelement <4 x i32> undef, i32 %11866, i64 0
  %11868 = shufflevector <4 x i32> %11867, <4 x i32> undef, <4 x i32> zeroinitializer
  %11869 = add nsw <4 x i32> %11868, <i32 0, i32 2, i32 4, i32 6>
  %11870 = add nsw <4 x i32> %11865, %11869
  %11871 = extractelement <4 x i32> %11870, i64 0
  %11872 = sext i32 %11871 to i64
  %11873 = getelementptr inbounds float, ptr %f5.host, i64 %11872
  %11874 = load float, ptr %11873, align 4, !tbaa !46
  %11875 = insertelement <4 x float> undef, float %11874, i64 0
  %11876 = extractelement <4 x i32> %11870, i64 1
  %11877 = sext i32 %11876 to i64
  %11878 = getelementptr inbounds float, ptr %f5.host, i64 %11877
  %11879 = load float, ptr %11878, align 4, !tbaa !46
  %11880 = insertelement <4 x float> %11875, float %11879, i64 1
  %11881 = extractelement <4 x i32> %11870, i64 2
  %11882 = sext i32 %11881 to i64
  %11883 = getelementptr inbounds float, ptr %f5.host, i64 %11882
  %11884 = load float, ptr %11883, align 4, !tbaa !46
  %11885 = insertelement <4 x float> %11880, float %11884, i64 2
  %11886 = extractelement <4 x i32> %11870, i64 3
  %11887 = sext i32 %11886 to i64
  %11888 = getelementptr inbounds float, ptr %f5.host, i64 %11887
  %11889 = load float, ptr %11888, align 4, !tbaa !46
  %11890 = insertelement <4 x float> %11885, float %11889, i64 3
  %11891 = fsub <4 x float> %11890, %11864
  %11892 = fmul <4 x float> %t2965.us, %11891
  %11893 = add nsw <4 x i32> %t2971.us, %11761
  %11894 = extractelement <4 x i32> %11893, i64 0
  %11895 = sext i32 %11894 to i64
  %11896 = getelementptr inbounds float, ptr %f6.host, i64 %11895
  %11897 = load float, ptr %11896, align 4, !tbaa !50
  %11898 = insertelement <4 x float> undef, float %11897, i64 0
  %11899 = extractelement <4 x i32> %11893, i64 1
  %11900 = sext i32 %11899 to i64
  %11901 = getelementptr inbounds float, ptr %f6.host, i64 %11900
  %11902 = load float, ptr %11901, align 4, !tbaa !50
  %11903 = insertelement <4 x float> %11898, float %11902, i64 1
  %11904 = extractelement <4 x i32> %11893, i64 2
  %11905 = sext i32 %11904 to i64
  %11906 = getelementptr inbounds float, ptr %f6.host, i64 %11905
  %11907 = load float, ptr %11906, align 4, !tbaa !50
  %11908 = insertelement <4 x float> %11903, float %11907, i64 2
  %11909 = extractelement <4 x i32> %11893, i64 3
  %11910 = sext i32 %11909 to i64
  %11911 = getelementptr inbounds float, ptr %f6.host, i64 %11910
  %11912 = load float, ptr %11911, align 4, !tbaa !50
  %11913 = insertelement <4 x float> %11908, float %11912, i64 3
  %11914 = fmul <4 x float> %11913, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11915 = add <4 x i32> %t2971.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11916 = add <4 x i32> %11915, %11786
  %11917 = extractelement <4 x i32> %11916, i64 0
  %11918 = sext i32 %11917 to i64
  %11919 = getelementptr inbounds float, ptr %f6.host, i64 %11918
  %11920 = load float, ptr %11919, align 4, !tbaa !50
  %11921 = insertelement <4 x float> undef, float %11920, i64 0
  %11922 = extractelement <4 x i32> %11916, i64 1
  %11923 = sext i32 %11922 to i64
  %11924 = getelementptr inbounds float, ptr %f6.host, i64 %11923
  %11925 = load float, ptr %11924, align 4, !tbaa !50
  %11926 = insertelement <4 x float> %11921, float %11925, i64 1
  %11927 = extractelement <4 x i32> %11916, i64 2
  %11928 = sext i32 %11927 to i64
  %11929 = getelementptr inbounds float, ptr %f6.host, i64 %11928
  %11930 = load float, ptr %11929, align 4, !tbaa !50
  %11931 = insertelement <4 x float> %11926, float %11930, i64 2
  %11932 = extractelement <4 x i32> %11916, i64 3
  %11933 = sext i32 %11932 to i64
  %11934 = getelementptr inbounds float, ptr %f6.host, i64 %11933
  %11935 = load float, ptr %11934, align 4, !tbaa !50
  %11936 = insertelement <4 x float> %11931, float %11935, i64 3
  %11937 = fmul <4 x float> %11936, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11938 = fadd <4 x float> %11914, %11937
  %11939 = fmul <4 x float> %11938, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11940 = add nsw <4 x i32> %t2971.us, %11814
  %11941 = extractelement <4 x i32> %11940, i64 0
  %11942 = sext i32 %11941 to i64
  %11943 = getelementptr inbounds float, ptr %f6.host, i64 %11942
  %11944 = load float, ptr %11943, align 4, !tbaa !50
  %11945 = insertelement <4 x float> undef, float %11944, i64 0
  %11946 = extractelement <4 x i32> %11940, i64 1
  %11947 = sext i32 %11946 to i64
  %11948 = getelementptr inbounds float, ptr %f6.host, i64 %11947
  %11949 = load float, ptr %11948, align 4, !tbaa !50
  %11950 = insertelement <4 x float> %11945, float %11949, i64 1
  %11951 = extractelement <4 x i32> %11940, i64 2
  %11952 = sext i32 %11951 to i64
  %11953 = getelementptr inbounds float, ptr %f6.host, i64 %11952
  %11954 = load float, ptr %11953, align 4, !tbaa !50
  %11955 = insertelement <4 x float> %11950, float %11954, i64 2
  %11956 = extractelement <4 x i32> %11940, i64 3
  %11957 = sext i32 %11956 to i64
  %11958 = getelementptr inbounds float, ptr %f6.host, i64 %11957
  %11959 = load float, ptr %11958, align 4, !tbaa !50
  %11960 = insertelement <4 x float> %11955, float %11959, i64 3
  %11961 = fmul <4 x float> %11960, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11962 = add <4 x i32> %11915, %11839
  %11963 = extractelement <4 x i32> %11962, i64 0
  %11964 = sext i32 %11963 to i64
  %11965 = getelementptr inbounds float, ptr %f6.host, i64 %11964
  %11966 = load float, ptr %11965, align 4, !tbaa !50
  %11967 = insertelement <4 x float> undef, float %11966, i64 0
  %11968 = extractelement <4 x i32> %11962, i64 1
  %11969 = sext i32 %11968 to i64
  %11970 = getelementptr inbounds float, ptr %f6.host, i64 %11969
  %11971 = load float, ptr %11970, align 4, !tbaa !50
  %11972 = insertelement <4 x float> %11967, float %11971, i64 1
  %11973 = extractelement <4 x i32> %11962, i64 2
  %11974 = sext i32 %11973 to i64
  %11975 = getelementptr inbounds float, ptr %f6.host, i64 %11974
  %11976 = load float, ptr %11975, align 4, !tbaa !50
  %11977 = insertelement <4 x float> %11972, float %11976, i64 2
  %11978 = extractelement <4 x i32> %11962, i64 3
  %11979 = sext i32 %11978 to i64
  %11980 = getelementptr inbounds float, ptr %f6.host, i64 %11979
  %11981 = load float, ptr %11980, align 4, !tbaa !50
  %11982 = insertelement <4 x float> %11977, float %11981, i64 3
  %11983 = fmul <4 x float> %11982, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11984 = fadd <4 x float> %11961, %11983
  %11985 = fmul <4 x float> %11984, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11986 = fadd <4 x float> %11939, %11985
  %11987 = mul nsw <4 x i32> %t2968.us, %10106
  %11988 = add nsw <4 x i32> %11987, %11869
  %11989 = extractelement <4 x i32> %11988, i64 0
  %11990 = sext i32 %11989 to i64
  %11991 = getelementptr inbounds float, ptr %f5.host, i64 %11990
  %11992 = load float, ptr %11991, align 4, !tbaa !46
  %11993 = insertelement <4 x float> undef, float %11992, i64 0
  %11994 = extractelement <4 x i32> %11988, i64 1
  %11995 = sext i32 %11994 to i64
  %11996 = getelementptr inbounds float, ptr %f5.host, i64 %11995
  %11997 = load float, ptr %11996, align 4, !tbaa !46
  %11998 = insertelement <4 x float> %11993, float %11997, i64 1
  %11999 = extractelement <4 x i32> %11988, i64 2
  %12000 = sext i32 %11999 to i64
  %12001 = getelementptr inbounds float, ptr %f5.host, i64 %12000
  %12002 = load float, ptr %12001, align 4, !tbaa !46
  %12003 = insertelement <4 x float> %11998, float %12002, i64 2
  %12004 = extractelement <4 x i32> %11988, i64 3
  %12005 = sext i32 %12004 to i64
  %12006 = getelementptr inbounds float, ptr %f5.host, i64 %12005
  %12007 = load float, ptr %12006, align 4, !tbaa !46
  %12008 = insertelement <4 x float> %12003, float %12007, i64 3
  %12009 = fsub <4 x float> %12008, %11986
  %12010 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2965.us
  %12011 = fmul <4 x float> %12010, %12009
  %12012 = fadd <4 x float> %11892, %12011
  %narrow89.us = sub nsw i32 %11474, %f128.v3.min_realized117
  %12013 = sext i32 %narrow89.us to i64
  %12014 = add nsw i64 %12013, %11444
  %12015 = getelementptr inbounds float, ptr %9981, i64 %12014
  %12016 = load <4 x float>, ptr %12015, align 4, !tbaa !66
  %12017 = fmul <4 x float> %12016, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12018 = sext i32 %t2962.us to i64
  %12019 = sub nsw i64 %12018, %10107
  %12020 = add nsw i64 %11445, %12019
  %12021 = getelementptr inbounds float, ptr %9981, i64 %12020
  %12022 = load <4 x float>, ptr %12021, align 4, !tbaa !66
  %12023 = fmul <4 x float> %12022, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12024 = fadd <4 x float> %12017, %12023
  %12025 = fmul <4 x float> %12024, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12026 = add nsw i64 %12013, %11446
  %12027 = getelementptr inbounds float, ptr %9981, i64 %12026
  %12028 = load <4 x float>, ptr %12027, align 4, !tbaa !66
  %12029 = fmul <4 x float> %12028, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12030 = add nsw i64 %11447, %12019
  %12031 = getelementptr inbounds float, ptr %9981, i64 %12030
  %12032 = load <4 x float>, ptr %12031, align 4, !tbaa !66
  %12033 = fmul <4 x float> %12032, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12034 = fadd <4 x float> %12029, %12033
  %12035 = fmul <4 x float> %12034, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12036 = fadd <4 x float> %12025, %12035
  %12037 = fadd <4 x float> %12012, %12036
  %12038 = shufflevector <4 x float> %11758, <4 x float> %12037, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %12039 = sext i32 %f127.s0.v3.v323.base171.us to i64
  %12040 = add i64 %11450, %12039
  %12041 = getelementptr inbounds float, ptr %10020, i64 %12040
  store <8 x float> %12038, ptr %12041, align 4, !tbaa !68
  %lsr.iv.next433.us = add nsw i32 %lsr.iv432.us, -1
  %lsr.iv.next435.us = add i32 %lsr.iv434.us, 8
  %.not90.us = icmp eq i32 %lsr.iv.next433.us, 0
  br i1 %.not90.us, label %"end for f127.s0.v3.v3169.loopexit.us", label %"for f127.s0.v3.v3168.us"

"end for f127.s0.v3.v3169.loopexit.us":           ; preds = %"for f127.s0.v3.v3168.us"
  %indvars.iv.next299 = add nsw i64 %indvars.iv298, 1
  %12042 = icmp eq i64 %indvars.iv298, %sext300
  br i1 %12042, label %"produce f126173", label %"for f127.s0.v4165.us"

"produce f126173":                                ; preds = %"end for f127.s0.v3.v3169.loopexit.us", %"produce f127163"
  %12043 = add nsw i32 %10164, 2
  %12044 = icmp sge i32 %f126.s0.v4.min_2, %12043
  %brmerge451 = select i1 %12044, i1 true, i1 %10114
  br i1 %brmerge451, label %"consume f126182", label %"for f126.s0.v4175.us.preheader", !prof !27

"for f126.s0.v4175.us.preheader":                 ; preds = %"produce f126173"
  %12045 = sext i32 %f126.s0.v4.min_2 to i64
  %sext304 = sext i32 %12043 to i64
  br label %"for f126.s0.v4175.us"

"for f126.s0.v4175.us":                           ; preds = %"for f126.s0.v4175.us.preheader", %"end for f126.s0.v3.v3179.loopexit.us"
  %indvars.iv302 = phi i64 [ %12045, %"for f126.s0.v4175.us.preheader" ], [ %indvars.iv.next303, %"end for f126.s0.v3.v3179.loopexit.us" ]
  %12046 = trunc i64 %indvars.iv302 to i32
  %12047 = shl i32 %12046, 1
  %12048 = and i32 %12047, 2
  %12049 = ashr i32 %12046, 1
  %t2977.us = add nsw i32 %12048, %12049
  %12050 = trunc i64 %indvars.iv302 to i32
  %12051 = sub i32 %12050, %f72.v4.min_realized
  %12052 = mul i32 %12051, %10115
  %12053 = sub i32 %12052, %f72.v3.min_realized
  %12054 = add nsw i32 %t2977.us, %10116
  %t2984.us = mul nsw i32 %12054, %10005
  %12055 = sub nsw i32 %12049, %f127.v4.min_realized124
  %t2986.us = mul nsw i32 %12055, %10005
  %12056 = add i32 %t2977.us, %10117
  %12057 = mul nsw i32 %12056, %f5.stride.1
  %12058 = sub nsw i32 %12049, %f5.v4.min_realized
  %12059 = mul nsw i32 %12058, %f5.stride.1
  %12060 = sext i32 %t2986.us to i64
  %12061 = add nsw i64 %12060, -1
  %12062 = sext i32 %t2984.us to i64
  %12063 = add nsw i64 %12062, -1
  %12064 = sub nsw i64 %indvars.iv302, %10123
  %12065 = mul nsw i64 %12064, %10122
  %12066 = sub i64 %12065, %10124
  %12067 = trunc i64 %indvars.iv302 to i32
  %12068 = sub i32 %12067, %f4.v4.min_realized
  %12069 = mul i32 %12068, %f4.stride.1
  br label %"for f126.s0.v3.v3178.us"

"for f126.s0.v3.v3178.us":                        ; preds = %"for f126.s0.v4175.us", %"for f126.s0.v3.v3178.us"
  %lsr.iv438.us = phi i32 [ %lsr.iv.next439.us, %"for f126.s0.v3.v3178.us" ], [ -1, %"for f126.s0.v4175.us" ]
  %lsr.iv436.us = phi i32 [ %lsr.iv.next437.us, %"for f126.s0.v3.v3178.us" ], [ %10113, %"for f126.s0.v4175.us" ]
  %12070 = add i32 %lsr.iv438.us, %9988
  %f126.s0.v3.v303.base181.us = tail call i32 @llvm.smin.i32(i32 %b1068, i32 %12070)
  %12071 = shl i32 %f126.s0.v3.v303.base181.us, 1
  %12072 = and i32 %12071, 2
  %12073 = ashr i32 %f126.s0.v3.v303.base181.us, 1
  %t2978.us = add nsw i32 %12072, %12073
  %t2979.us = add i32 %12053, %f126.s0.v3.v303.base181.us
  %12074 = sext i32 %t2979.us to i64
  %12075 = getelementptr inbounds float, ptr %f72.host, i64 %12074
  %12076 = load <4 x float>, ptr %12075, align 4, !tbaa !48
  %12077 = add nsw i64 %12074, 4
  %12078 = getelementptr inbounds float, ptr %f72.host, i64 %12077
  %12079 = load <4 x float>, ptr %12078, align 4, !tbaa !48
  %12080 = shufflevector <4 x float> %12076, <4 x float> %12079, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2980.us = fmul <4 x float> %10063, %12080
  %a1112.us = fptosi <4 x float> %t2980.us to <4 x i32>
  %a1115.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1112.us)
  %12081 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1115.us, <4 x i32> zeroinitializer)
  %12082 = sitofp <4 x i32> %12081 to <4 x float>
  %t2982.us = fsub <4 x float> %t2980.us, %12082
  %12083 = sub nsw i32 %f126.s0.v3.v303.base181.us, %f4.v3.min_realized
  %t2987.us = add nsw i32 %12083, %12069
  %t2989.us = sub nsw <4 x i32> %12081, %10072
  %12084 = sub nsw i32 %t2978.us, %f5.v3.min_realized
  %t2992.us = add nsw i32 %12084, %12057
  %t2993.us = mul nsw <4 x i32> %t2989.us, %10106
  %12085 = sub nsw i32 %12073, %f5.v3.min_realized
  %t2995.us = add nsw i32 %12085, %12057
  %t2997.us = add nsw i32 %12084, %12059
  %t2998.us = add nsw i32 %12085, %12059
  %12086 = add nsw <4 x i32> %t2989.us, <i32 1, i32 1, i32 1, i32 1>
  %t2999.us = mul nsw <4 x i32> %12086, %10106
  %12087 = add nsw i32 %f126.s0.v3.v303.base181.us, 1
  %12088 = shl i32 %12087, 1
  %12089 = and i32 %12088, 2
  %12090 = ashr i32 %12087, 1
  %t3000.us = add nsw i32 %12089, %12090
  %12091 = shufflevector <4 x float> %12076, <4 x float> %12079, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3001.us = fmul <4 x float> %10063, %12091
  %a1116.us = fptosi <4 x float> %t3001.us to <4 x i32>
  %a1119.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1116.us)
  %12092 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1119.us, <4 x i32> zeroinitializer)
  %12093 = sitofp <4 x i32> %12092 to <4 x float>
  %t3003.us = fsub <4 x float> %t3001.us, %12093
  %t3006.us = sub nsw <4 x i32> %12092, %10072
  %12094 = sub nsw i32 %t3000.us, %f5.v3.min_realized
  %t3008.us = add nsw i32 %12094, %12057
  %t3009.us = mul nsw <4 x i32> %t3006.us, %10106
  %12095 = sub nsw i32 %12090, %f5.v3.min_realized
  %t3011.us = add nsw i32 %12095, %12057
  %t3012.us = add nsw i32 %12094, %12059
  %t3013.us = add nsw i32 %12095, %12059
  %12096 = add nsw <4 x i32> %t3006.us, <i32 1, i32 1, i32 1, i32 1>
  %t3014.us = mul nsw <4 x i32> %12096, %10106
  %12097 = insertelement <4 x i32> undef, i32 %t2998.us, i64 0
  %12098 = shufflevector <4 x i32> %12097, <4 x i32> undef, <4 x i32> zeroinitializer
  %12099 = add nsw <4 x i32> %12098, <i32 0, i32 1, i32 2, i32 3>
  %12100 = add nsw <4 x i32> %t2999.us, %12099
  %12101 = extractelement <4 x i32> %12100, i64 0
  %12102 = sext i32 %12101 to i64
  %12103 = getelementptr inbounds float, ptr %f5.host, i64 %12102
  %12104 = load float, ptr %12103, align 4, !tbaa !46
  %12105 = insertelement <4 x float> undef, float %12104, i64 0
  %12106 = extractelement <4 x i32> %12100, i64 1
  %12107 = sext i32 %12106 to i64
  %12108 = getelementptr inbounds float, ptr %f5.host, i64 %12107
  %12109 = load float, ptr %12108, align 4, !tbaa !46
  %12110 = insertelement <4 x float> %12105, float %12109, i64 1
  %12111 = extractelement <4 x i32> %12100, i64 2
  %12112 = sext i32 %12111 to i64
  %12113 = getelementptr inbounds float, ptr %f5.host, i64 %12112
  %12114 = load float, ptr %12113, align 4, !tbaa !46
  %12115 = insertelement <4 x float> %12110, float %12114, i64 2
  %12116 = extractelement <4 x i32> %12100, i64 3
  %12117 = sext i32 %12116 to i64
  %12118 = getelementptr inbounds float, ptr %f5.host, i64 %12117
  %12119 = load float, ptr %12118, align 4, !tbaa !46
  %12120 = insertelement <4 x float> %12115, float %12119, i64 3
  %12121 = fmul <4 x float> %12120, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12122 = insertelement <4 x i32> undef, i32 %t2997.us, i64 0
  %12123 = shufflevector <4 x i32> %12122, <4 x i32> undef, <4 x i32> zeroinitializer
  %12124 = add <4 x i32> %12123, <i32 -1, i32 0, i32 1, i32 2>
  %12125 = add <4 x i32> %12124, %t2999.us
  %12126 = extractelement <4 x i32> %12125, i64 0
  %12127 = sext i32 %12126 to i64
  %12128 = getelementptr inbounds float, ptr %f5.host, i64 %12127
  %12129 = load float, ptr %12128, align 4, !tbaa !46
  %12130 = insertelement <4 x float> undef, float %12129, i64 0
  %12131 = extractelement <4 x i32> %12125, i64 1
  %12132 = sext i32 %12131 to i64
  %12133 = getelementptr inbounds float, ptr %f5.host, i64 %12132
  %12134 = load float, ptr %12133, align 4, !tbaa !46
  %12135 = insertelement <4 x float> %12130, float %12134, i64 1
  %12136 = extractelement <4 x i32> %12125, i64 2
  %12137 = sext i32 %12136 to i64
  %12138 = getelementptr inbounds float, ptr %f5.host, i64 %12137
  %12139 = load float, ptr %12138, align 4, !tbaa !46
  %12140 = insertelement <4 x float> %12135, float %12139, i64 2
  %12141 = extractelement <4 x i32> %12125, i64 3
  %12142 = sext i32 %12141 to i64
  %12143 = getelementptr inbounds float, ptr %f5.host, i64 %12142
  %12144 = load float, ptr %12143, align 4, !tbaa !46
  %12145 = insertelement <4 x float> %12140, float %12144, i64 3
  %12146 = fmul <4 x float> %12145, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12147 = fadd <4 x float> %12121, %12146
  %12148 = fmul <4 x float> %12147, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12149 = insertelement <4 x i32> undef, i32 %t2995.us, i64 0
  %12150 = shufflevector <4 x i32> %12149, <4 x i32> undef, <4 x i32> zeroinitializer
  %12151 = add nsw <4 x i32> %12150, <i32 0, i32 1, i32 2, i32 3>
  %12152 = add nsw <4 x i32> %t2999.us, %12151
  %12153 = extractelement <4 x i32> %12152, i64 0
  %12154 = sext i32 %12153 to i64
  %12155 = getelementptr inbounds float, ptr %f5.host, i64 %12154
  %12156 = load float, ptr %12155, align 4, !tbaa !46
  %12157 = insertelement <4 x float> undef, float %12156, i64 0
  %12158 = extractelement <4 x i32> %12152, i64 1
  %12159 = sext i32 %12158 to i64
  %12160 = getelementptr inbounds float, ptr %f5.host, i64 %12159
  %12161 = load float, ptr %12160, align 4, !tbaa !46
  %12162 = insertelement <4 x float> %12157, float %12161, i64 1
  %12163 = extractelement <4 x i32> %12152, i64 2
  %12164 = sext i32 %12163 to i64
  %12165 = getelementptr inbounds float, ptr %f5.host, i64 %12164
  %12166 = load float, ptr %12165, align 4, !tbaa !46
  %12167 = insertelement <4 x float> %12162, float %12166, i64 2
  %12168 = extractelement <4 x i32> %12152, i64 3
  %12169 = sext i32 %12168 to i64
  %12170 = getelementptr inbounds float, ptr %f5.host, i64 %12169
  %12171 = load float, ptr %12170, align 4, !tbaa !46
  %12172 = insertelement <4 x float> %12167, float %12171, i64 3
  %12173 = fmul <4 x float> %12172, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12174 = insertelement <4 x i32> undef, i32 %t2992.us, i64 0
  %12175 = shufflevector <4 x i32> %12174, <4 x i32> undef, <4 x i32> zeroinitializer
  %12176 = add <4 x i32> %12175, <i32 -1, i32 0, i32 1, i32 2>
  %12177 = add <4 x i32> %12176, %t2999.us
  %12178 = extractelement <4 x i32> %12177, i64 0
  %12179 = sext i32 %12178 to i64
  %12180 = getelementptr inbounds float, ptr %f5.host, i64 %12179
  %12181 = load float, ptr %12180, align 4, !tbaa !46
  %12182 = insertelement <4 x float> undef, float %12181, i64 0
  %12183 = extractelement <4 x i32> %12177, i64 1
  %12184 = sext i32 %12183 to i64
  %12185 = getelementptr inbounds float, ptr %f5.host, i64 %12184
  %12186 = load float, ptr %12185, align 4, !tbaa !46
  %12187 = insertelement <4 x float> %12182, float %12186, i64 1
  %12188 = extractelement <4 x i32> %12177, i64 2
  %12189 = sext i32 %12188 to i64
  %12190 = getelementptr inbounds float, ptr %f5.host, i64 %12189
  %12191 = load float, ptr %12190, align 4, !tbaa !46
  %12192 = insertelement <4 x float> %12187, float %12191, i64 2
  %12193 = extractelement <4 x i32> %12177, i64 3
  %12194 = sext i32 %12193 to i64
  %12195 = getelementptr inbounds float, ptr %f5.host, i64 %12194
  %12196 = load float, ptr %12195, align 4, !tbaa !46
  %12197 = insertelement <4 x float> %12192, float %12196, i64 3
  %12198 = fmul <4 x float> %12197, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12199 = fadd <4 x float> %12173, %12198
  %12200 = fmul <4 x float> %12199, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12201 = fadd <4 x float> %12148, %12200
  %12202 = mul nsw <4 x i32> %12086, %10120
  %12203 = insertelement <4 x i32> undef, i32 %t2987.us, i64 0
  %12204 = shufflevector <4 x i32> %12203, <4 x i32> undef, <4 x i32> zeroinitializer
  %12205 = add nsw <4 x i32> %12204, <i32 0, i32 2, i32 4, i32 6>
  %12206 = add nsw <4 x i32> %12202, %12205
  %12207 = extractelement <4 x i32> %12206, i64 0
  %12208 = sext i32 %12207 to i64
  %12209 = getelementptr inbounds float, ptr %f4.host, i64 %12208
  %12210 = load float, ptr %12209, align 4, !tbaa !44
  %12211 = insertelement <4 x float> undef, float %12210, i64 0
  %12212 = extractelement <4 x i32> %12206, i64 1
  %12213 = sext i32 %12212 to i64
  %12214 = getelementptr inbounds float, ptr %f4.host, i64 %12213
  %12215 = load float, ptr %12214, align 4, !tbaa !44
  %12216 = insertelement <4 x float> %12211, float %12215, i64 1
  %12217 = extractelement <4 x i32> %12206, i64 2
  %12218 = sext i32 %12217 to i64
  %12219 = getelementptr inbounds float, ptr %f4.host, i64 %12218
  %12220 = load float, ptr %12219, align 4, !tbaa !44
  %12221 = insertelement <4 x float> %12216, float %12220, i64 2
  %12222 = extractelement <4 x i32> %12206, i64 3
  %12223 = sext i32 %12222 to i64
  %12224 = getelementptr inbounds float, ptr %f4.host, i64 %12223
  %12225 = load float, ptr %12224, align 4, !tbaa !44
  %12226 = insertelement <4 x float> %12221, float %12225, i64 3
  %12227 = fsub <4 x float> %12226, %12201
  %12228 = fmul <4 x float> %t2982.us, %12227
  %12229 = add nsw <4 x i32> %t2993.us, %12099
  %12230 = extractelement <4 x i32> %12229, i64 0
  %12231 = sext i32 %12230 to i64
  %12232 = getelementptr inbounds float, ptr %f5.host, i64 %12231
  %12233 = load float, ptr %12232, align 4, !tbaa !46
  %12234 = insertelement <4 x float> undef, float %12233, i64 0
  %12235 = extractelement <4 x i32> %12229, i64 1
  %12236 = sext i32 %12235 to i64
  %12237 = getelementptr inbounds float, ptr %f5.host, i64 %12236
  %12238 = load float, ptr %12237, align 4, !tbaa !46
  %12239 = insertelement <4 x float> %12234, float %12238, i64 1
  %12240 = extractelement <4 x i32> %12229, i64 2
  %12241 = sext i32 %12240 to i64
  %12242 = getelementptr inbounds float, ptr %f5.host, i64 %12241
  %12243 = load float, ptr %12242, align 4, !tbaa !46
  %12244 = insertelement <4 x float> %12239, float %12243, i64 2
  %12245 = extractelement <4 x i32> %12229, i64 3
  %12246 = sext i32 %12245 to i64
  %12247 = getelementptr inbounds float, ptr %f5.host, i64 %12246
  %12248 = load float, ptr %12247, align 4, !tbaa !46
  %12249 = insertelement <4 x float> %12244, float %12248, i64 3
  %12250 = fmul <4 x float> %12249, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12251 = add <4 x i32> %t2993.us, %12123
  %12252 = add <4 x i32> %12251, <i32 -1, i32 0, i32 1, i32 2>
  %12253 = extractelement <4 x i32> %12252, i64 0
  %12254 = sext i32 %12253 to i64
  %12255 = getelementptr inbounds float, ptr %f5.host, i64 %12254
  %12256 = load float, ptr %12255, align 4, !tbaa !46
  %12257 = insertelement <4 x float> undef, float %12256, i64 0
  %12258 = extractelement <4 x i32> %12252, i64 1
  %12259 = sext i32 %12258 to i64
  %12260 = getelementptr inbounds float, ptr %f5.host, i64 %12259
  %12261 = load float, ptr %12260, align 4, !tbaa !46
  %12262 = insertelement <4 x float> %12257, float %12261, i64 1
  %12263 = extractelement <4 x i32> %12252, i64 2
  %12264 = sext i32 %12263 to i64
  %12265 = getelementptr inbounds float, ptr %f5.host, i64 %12264
  %12266 = load float, ptr %12265, align 4, !tbaa !46
  %12267 = insertelement <4 x float> %12262, float %12266, i64 2
  %12268 = extractelement <4 x i32> %12252, i64 3
  %12269 = sext i32 %12268 to i64
  %12270 = getelementptr inbounds float, ptr %f5.host, i64 %12269
  %12271 = load float, ptr %12270, align 4, !tbaa !46
  %12272 = insertelement <4 x float> %12267, float %12271, i64 3
  %12273 = fmul <4 x float> %12272, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12274 = fadd <4 x float> %12250, %12273
  %12275 = fmul <4 x float> %12274, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12276 = add nsw <4 x i32> %t2993.us, %12151
  %12277 = extractelement <4 x i32> %12276, i64 0
  %12278 = sext i32 %12277 to i64
  %12279 = getelementptr inbounds float, ptr %f5.host, i64 %12278
  %12280 = load float, ptr %12279, align 4, !tbaa !46
  %12281 = insertelement <4 x float> undef, float %12280, i64 0
  %12282 = extractelement <4 x i32> %12276, i64 1
  %12283 = sext i32 %12282 to i64
  %12284 = getelementptr inbounds float, ptr %f5.host, i64 %12283
  %12285 = load float, ptr %12284, align 4, !tbaa !46
  %12286 = insertelement <4 x float> %12281, float %12285, i64 1
  %12287 = extractelement <4 x i32> %12276, i64 2
  %12288 = sext i32 %12287 to i64
  %12289 = getelementptr inbounds float, ptr %f5.host, i64 %12288
  %12290 = load float, ptr %12289, align 4, !tbaa !46
  %12291 = insertelement <4 x float> %12286, float %12290, i64 2
  %12292 = extractelement <4 x i32> %12276, i64 3
  %12293 = sext i32 %12292 to i64
  %12294 = getelementptr inbounds float, ptr %f5.host, i64 %12293
  %12295 = load float, ptr %12294, align 4, !tbaa !46
  %12296 = insertelement <4 x float> %12291, float %12295, i64 3
  %12297 = fmul <4 x float> %12296, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12298 = add <4 x i32> %t2993.us, %12175
  %12299 = add <4 x i32> %12298, <i32 -1, i32 0, i32 1, i32 2>
  %12300 = extractelement <4 x i32> %12299, i64 0
  %12301 = sext i32 %12300 to i64
  %12302 = getelementptr inbounds float, ptr %f5.host, i64 %12301
  %12303 = load float, ptr %12302, align 4, !tbaa !46
  %12304 = insertelement <4 x float> undef, float %12303, i64 0
  %12305 = extractelement <4 x i32> %12299, i64 1
  %12306 = sext i32 %12305 to i64
  %12307 = getelementptr inbounds float, ptr %f5.host, i64 %12306
  %12308 = load float, ptr %12307, align 4, !tbaa !46
  %12309 = insertelement <4 x float> %12304, float %12308, i64 1
  %12310 = extractelement <4 x i32> %12299, i64 2
  %12311 = sext i32 %12310 to i64
  %12312 = getelementptr inbounds float, ptr %f5.host, i64 %12311
  %12313 = load float, ptr %12312, align 4, !tbaa !46
  %12314 = insertelement <4 x float> %12309, float %12313, i64 2
  %12315 = extractelement <4 x i32> %12299, i64 3
  %12316 = sext i32 %12315 to i64
  %12317 = getelementptr inbounds float, ptr %f5.host, i64 %12316
  %12318 = load float, ptr %12317, align 4, !tbaa !46
  %12319 = insertelement <4 x float> %12314, float %12318, i64 3
  %12320 = fmul <4 x float> %12319, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12321 = fadd <4 x float> %12297, %12320
  %12322 = fmul <4 x float> %12321, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12323 = fadd <4 x float> %12275, %12322
  %12324 = mul nsw <4 x i32> %t2989.us, %10120
  %12325 = add nsw <4 x i32> %12324, %12205
  %12326 = extractelement <4 x i32> %12325, i64 0
  %12327 = sext i32 %12326 to i64
  %12328 = getelementptr inbounds float, ptr %f4.host, i64 %12327
  %12329 = load float, ptr %12328, align 4, !tbaa !44
  %12330 = insertelement <4 x float> undef, float %12329, i64 0
  %12331 = extractelement <4 x i32> %12325, i64 1
  %12332 = sext i32 %12331 to i64
  %12333 = getelementptr inbounds float, ptr %f4.host, i64 %12332
  %12334 = load float, ptr %12333, align 4, !tbaa !44
  %12335 = insertelement <4 x float> %12330, float %12334, i64 1
  %12336 = extractelement <4 x i32> %12325, i64 2
  %12337 = sext i32 %12336 to i64
  %12338 = getelementptr inbounds float, ptr %f4.host, i64 %12337
  %12339 = load float, ptr %12338, align 4, !tbaa !44
  %12340 = insertelement <4 x float> %12335, float %12339, i64 2
  %12341 = extractelement <4 x i32> %12325, i64 3
  %12342 = sext i32 %12341 to i64
  %12343 = getelementptr inbounds float, ptr %f4.host, i64 %12342
  %12344 = load float, ptr %12343, align 4, !tbaa !44
  %12345 = insertelement <4 x float> %12340, float %12344, i64 3
  %12346 = fsub <4 x float> %12345, %12323
  %12347 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2982.us
  %12348 = fmul <4 x float> %12347, %12346
  %12349 = fadd <4 x float> %12228, %12348
  %12350 = sext i32 %12073 to i64
  %12351 = sub nsw i64 %12350, %10111
  %12352 = add nsw i64 %12351, %12060
  %12353 = getelementptr inbounds float, ptr %10020, i64 %12352
  %12354 = load <4 x float>, ptr %12353, align 4, !tbaa !68
  %12355 = fmul <4 x float> %12354, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12356 = sext i32 %t2978.us to i64
  %12357 = sub nsw i64 %12356, %10111
  %12358 = add nsw i64 %12061, %12357
  %12359 = getelementptr inbounds float, ptr %10020, i64 %12358
  %12360 = load <4 x float>, ptr %12359, align 4, !tbaa !68
  %12361 = fmul <4 x float> %12360, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12362 = fadd <4 x float> %12355, %12361
  %12363 = fmul <4 x float> %12362, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12364 = add nsw i64 %12351, %12062
  %12365 = getelementptr inbounds float, ptr %10020, i64 %12364
  %12366 = load <4 x float>, ptr %12365, align 4, !tbaa !68
  %12367 = fmul <4 x float> %12366, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12368 = add nsw i64 %12063, %12357
  %12369 = getelementptr inbounds float, ptr %10020, i64 %12368
  %12370 = load <4 x float>, ptr %12369, align 4, !tbaa !68
  %12371 = fmul <4 x float> %12370, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12372 = fadd <4 x float> %12367, %12371
  %12373 = fmul <4 x float> %12372, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12374 = fadd <4 x float> %12363, %12373
  %12375 = fadd <4 x float> %12349, %12374
  %12376 = insertelement <4 x i32> undef, i32 %t3013.us, i64 0
  %12377 = shufflevector <4 x i32> %12376, <4 x i32> undef, <4 x i32> zeroinitializer
  %12378 = add nsw <4 x i32> %12377, <i32 0, i32 1, i32 2, i32 3>
  %12379 = add nsw <4 x i32> %t3014.us, %12378
  %12380 = extractelement <4 x i32> %12379, i64 0
  %12381 = sext i32 %12380 to i64
  %12382 = getelementptr inbounds float, ptr %f5.host, i64 %12381
  %12383 = load float, ptr %12382, align 4, !tbaa !46
  %12384 = insertelement <4 x float> undef, float %12383, i64 0
  %12385 = extractelement <4 x i32> %12379, i64 1
  %12386 = sext i32 %12385 to i64
  %12387 = getelementptr inbounds float, ptr %f5.host, i64 %12386
  %12388 = load float, ptr %12387, align 4, !tbaa !46
  %12389 = insertelement <4 x float> %12384, float %12388, i64 1
  %12390 = extractelement <4 x i32> %12379, i64 2
  %12391 = sext i32 %12390 to i64
  %12392 = getelementptr inbounds float, ptr %f5.host, i64 %12391
  %12393 = load float, ptr %12392, align 4, !tbaa !46
  %12394 = insertelement <4 x float> %12389, float %12393, i64 2
  %12395 = extractelement <4 x i32> %12379, i64 3
  %12396 = sext i32 %12395 to i64
  %12397 = getelementptr inbounds float, ptr %f5.host, i64 %12396
  %12398 = load float, ptr %12397, align 4, !tbaa !46
  %12399 = insertelement <4 x float> %12394, float %12398, i64 3
  %12400 = fmul <4 x float> %12399, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12401 = insertelement <4 x i32> undef, i32 %t3012.us, i64 0
  %12402 = shufflevector <4 x i32> %12401, <4 x i32> undef, <4 x i32> zeroinitializer
  %12403 = add nsw <4 x i32> %12402, <i32 0, i32 1, i32 2, i32 3>
  %12404 = add <4 x i32> %t3014.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %12405 = add <4 x i32> %12404, %12403
  %12406 = extractelement <4 x i32> %12405, i64 0
  %12407 = sext i32 %12406 to i64
  %12408 = getelementptr inbounds float, ptr %f5.host, i64 %12407
  %12409 = load float, ptr %12408, align 4, !tbaa !46
  %12410 = insertelement <4 x float> undef, float %12409, i64 0
  %12411 = extractelement <4 x i32> %12405, i64 1
  %12412 = sext i32 %12411 to i64
  %12413 = getelementptr inbounds float, ptr %f5.host, i64 %12412
  %12414 = load float, ptr %12413, align 4, !tbaa !46
  %12415 = insertelement <4 x float> %12410, float %12414, i64 1
  %12416 = extractelement <4 x i32> %12405, i64 2
  %12417 = sext i32 %12416 to i64
  %12418 = getelementptr inbounds float, ptr %f5.host, i64 %12417
  %12419 = load float, ptr %12418, align 4, !tbaa !46
  %12420 = insertelement <4 x float> %12415, float %12419, i64 2
  %12421 = extractelement <4 x i32> %12405, i64 3
  %12422 = sext i32 %12421 to i64
  %12423 = getelementptr inbounds float, ptr %f5.host, i64 %12422
  %12424 = load float, ptr %12423, align 4, !tbaa !46
  %12425 = insertelement <4 x float> %12420, float %12424, i64 3
  %12426 = fmul <4 x float> %12425, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12427 = fadd <4 x float> %12400, %12426
  %12428 = fmul <4 x float> %12427, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12429 = insertelement <4 x i32> undef, i32 %t3011.us, i64 0
  %12430 = shufflevector <4 x i32> %12429, <4 x i32> undef, <4 x i32> zeroinitializer
  %12431 = add nsw <4 x i32> %12430, <i32 0, i32 1, i32 2, i32 3>
  %12432 = add nsw <4 x i32> %t3014.us, %12431
  %12433 = extractelement <4 x i32> %12432, i64 0
  %12434 = sext i32 %12433 to i64
  %12435 = getelementptr inbounds float, ptr %f5.host, i64 %12434
  %12436 = load float, ptr %12435, align 4, !tbaa !46
  %12437 = insertelement <4 x float> undef, float %12436, i64 0
  %12438 = extractelement <4 x i32> %12432, i64 1
  %12439 = sext i32 %12438 to i64
  %12440 = getelementptr inbounds float, ptr %f5.host, i64 %12439
  %12441 = load float, ptr %12440, align 4, !tbaa !46
  %12442 = insertelement <4 x float> %12437, float %12441, i64 1
  %12443 = extractelement <4 x i32> %12432, i64 2
  %12444 = sext i32 %12443 to i64
  %12445 = getelementptr inbounds float, ptr %f5.host, i64 %12444
  %12446 = load float, ptr %12445, align 4, !tbaa !46
  %12447 = insertelement <4 x float> %12442, float %12446, i64 2
  %12448 = extractelement <4 x i32> %12432, i64 3
  %12449 = sext i32 %12448 to i64
  %12450 = getelementptr inbounds float, ptr %f5.host, i64 %12449
  %12451 = load float, ptr %12450, align 4, !tbaa !46
  %12452 = insertelement <4 x float> %12447, float %12451, i64 3
  %12453 = fmul <4 x float> %12452, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12454 = insertelement <4 x i32> undef, i32 %t3008.us, i64 0
  %12455 = shufflevector <4 x i32> %12454, <4 x i32> undef, <4 x i32> zeroinitializer
  %12456 = add nsw <4 x i32> %12455, <i32 0, i32 1, i32 2, i32 3>
  %12457 = add <4 x i32> %12404, %12456
  %12458 = extractelement <4 x i32> %12457, i64 0
  %12459 = sext i32 %12458 to i64
  %12460 = getelementptr inbounds float, ptr %f5.host, i64 %12459
  %12461 = load float, ptr %12460, align 4, !tbaa !46
  %12462 = insertelement <4 x float> undef, float %12461, i64 0
  %12463 = extractelement <4 x i32> %12457, i64 1
  %12464 = sext i32 %12463 to i64
  %12465 = getelementptr inbounds float, ptr %f5.host, i64 %12464
  %12466 = load float, ptr %12465, align 4, !tbaa !46
  %12467 = insertelement <4 x float> %12462, float %12466, i64 1
  %12468 = extractelement <4 x i32> %12457, i64 2
  %12469 = sext i32 %12468 to i64
  %12470 = getelementptr inbounds float, ptr %f5.host, i64 %12469
  %12471 = load float, ptr %12470, align 4, !tbaa !46
  %12472 = insertelement <4 x float> %12467, float %12471, i64 2
  %12473 = extractelement <4 x i32> %12457, i64 3
  %12474 = sext i32 %12473 to i64
  %12475 = getelementptr inbounds float, ptr %f5.host, i64 %12474
  %12476 = load float, ptr %12475, align 4, !tbaa !46
  %12477 = insertelement <4 x float> %12472, float %12476, i64 3
  %12478 = fmul <4 x float> %12477, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12479 = fadd <4 x float> %12453, %12478
  %12480 = fmul <4 x float> %12479, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12481 = fadd <4 x float> %12428, %12480
  %12482 = mul nsw <4 x i32> %12096, %10120
  %12483 = add nsw i32 %t2987.us, 1
  %12484 = insertelement <4 x i32> undef, i32 %12483, i64 0
  %12485 = shufflevector <4 x i32> %12484, <4 x i32> undef, <4 x i32> zeroinitializer
  %12486 = add nsw <4 x i32> %12485, <i32 0, i32 2, i32 4, i32 6>
  %12487 = add nsw <4 x i32> %12482, %12486
  %12488 = extractelement <4 x i32> %12487, i64 0
  %12489 = sext i32 %12488 to i64
  %12490 = getelementptr inbounds float, ptr %f4.host, i64 %12489
  %12491 = load float, ptr %12490, align 4, !tbaa !44
  %12492 = insertelement <4 x float> undef, float %12491, i64 0
  %12493 = extractelement <4 x i32> %12487, i64 1
  %12494 = sext i32 %12493 to i64
  %12495 = getelementptr inbounds float, ptr %f4.host, i64 %12494
  %12496 = load float, ptr %12495, align 4, !tbaa !44
  %12497 = insertelement <4 x float> %12492, float %12496, i64 1
  %12498 = extractelement <4 x i32> %12487, i64 2
  %12499 = sext i32 %12498 to i64
  %12500 = getelementptr inbounds float, ptr %f4.host, i64 %12499
  %12501 = load float, ptr %12500, align 4, !tbaa !44
  %12502 = insertelement <4 x float> %12497, float %12501, i64 2
  %12503 = extractelement <4 x i32> %12487, i64 3
  %12504 = sext i32 %12503 to i64
  %12505 = getelementptr inbounds float, ptr %f4.host, i64 %12504
  %12506 = load float, ptr %12505, align 4, !tbaa !44
  %12507 = insertelement <4 x float> %12502, float %12506, i64 3
  %12508 = fsub <4 x float> %12507, %12481
  %12509 = fmul <4 x float> %t3003.us, %12508
  %12510 = add nsw <4 x i32> %t3009.us, %12378
  %12511 = extractelement <4 x i32> %12510, i64 0
  %12512 = sext i32 %12511 to i64
  %12513 = getelementptr inbounds float, ptr %f5.host, i64 %12512
  %12514 = load float, ptr %12513, align 4, !tbaa !46
  %12515 = insertelement <4 x float> undef, float %12514, i64 0
  %12516 = extractelement <4 x i32> %12510, i64 1
  %12517 = sext i32 %12516 to i64
  %12518 = getelementptr inbounds float, ptr %f5.host, i64 %12517
  %12519 = load float, ptr %12518, align 4, !tbaa !46
  %12520 = insertelement <4 x float> %12515, float %12519, i64 1
  %12521 = extractelement <4 x i32> %12510, i64 2
  %12522 = sext i32 %12521 to i64
  %12523 = getelementptr inbounds float, ptr %f5.host, i64 %12522
  %12524 = load float, ptr %12523, align 4, !tbaa !46
  %12525 = insertelement <4 x float> %12520, float %12524, i64 2
  %12526 = extractelement <4 x i32> %12510, i64 3
  %12527 = sext i32 %12526 to i64
  %12528 = getelementptr inbounds float, ptr %f5.host, i64 %12527
  %12529 = load float, ptr %12528, align 4, !tbaa !46
  %12530 = insertelement <4 x float> %12525, float %12529, i64 3
  %12531 = fmul <4 x float> %12530, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12532 = add <4 x i32> %t3009.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %12533 = add <4 x i32> %12532, %12403
  %12534 = extractelement <4 x i32> %12533, i64 0
  %12535 = sext i32 %12534 to i64
  %12536 = getelementptr inbounds float, ptr %f5.host, i64 %12535
  %12537 = load float, ptr %12536, align 4, !tbaa !46
  %12538 = insertelement <4 x float> undef, float %12537, i64 0
  %12539 = extractelement <4 x i32> %12533, i64 1
  %12540 = sext i32 %12539 to i64
  %12541 = getelementptr inbounds float, ptr %f5.host, i64 %12540
  %12542 = load float, ptr %12541, align 4, !tbaa !46
  %12543 = insertelement <4 x float> %12538, float %12542, i64 1
  %12544 = extractelement <4 x i32> %12533, i64 2
  %12545 = sext i32 %12544 to i64
  %12546 = getelementptr inbounds float, ptr %f5.host, i64 %12545
  %12547 = load float, ptr %12546, align 4, !tbaa !46
  %12548 = insertelement <4 x float> %12543, float %12547, i64 2
  %12549 = extractelement <4 x i32> %12533, i64 3
  %12550 = sext i32 %12549 to i64
  %12551 = getelementptr inbounds float, ptr %f5.host, i64 %12550
  %12552 = load float, ptr %12551, align 4, !tbaa !46
  %12553 = insertelement <4 x float> %12548, float %12552, i64 3
  %12554 = fmul <4 x float> %12553, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12555 = fadd <4 x float> %12531, %12554
  %12556 = fmul <4 x float> %12555, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12557 = add nsw <4 x i32> %t3009.us, %12431
  %12558 = extractelement <4 x i32> %12557, i64 0
  %12559 = sext i32 %12558 to i64
  %12560 = getelementptr inbounds float, ptr %f5.host, i64 %12559
  %12561 = load float, ptr %12560, align 4, !tbaa !46
  %12562 = insertelement <4 x float> undef, float %12561, i64 0
  %12563 = extractelement <4 x i32> %12557, i64 1
  %12564 = sext i32 %12563 to i64
  %12565 = getelementptr inbounds float, ptr %f5.host, i64 %12564
  %12566 = load float, ptr %12565, align 4, !tbaa !46
  %12567 = insertelement <4 x float> %12562, float %12566, i64 1
  %12568 = extractelement <4 x i32> %12557, i64 2
  %12569 = sext i32 %12568 to i64
  %12570 = getelementptr inbounds float, ptr %f5.host, i64 %12569
  %12571 = load float, ptr %12570, align 4, !tbaa !46
  %12572 = insertelement <4 x float> %12567, float %12571, i64 2
  %12573 = extractelement <4 x i32> %12557, i64 3
  %12574 = sext i32 %12573 to i64
  %12575 = getelementptr inbounds float, ptr %f5.host, i64 %12574
  %12576 = load float, ptr %12575, align 4, !tbaa !46
  %12577 = insertelement <4 x float> %12572, float %12576, i64 3
  %12578 = fmul <4 x float> %12577, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12579 = add <4 x i32> %12532, %12456
  %12580 = extractelement <4 x i32> %12579, i64 0
  %12581 = sext i32 %12580 to i64
  %12582 = getelementptr inbounds float, ptr %f5.host, i64 %12581
  %12583 = load float, ptr %12582, align 4, !tbaa !46
  %12584 = insertelement <4 x float> undef, float %12583, i64 0
  %12585 = extractelement <4 x i32> %12579, i64 1
  %12586 = sext i32 %12585 to i64
  %12587 = getelementptr inbounds float, ptr %f5.host, i64 %12586
  %12588 = load float, ptr %12587, align 4, !tbaa !46
  %12589 = insertelement <4 x float> %12584, float %12588, i64 1
  %12590 = extractelement <4 x i32> %12579, i64 2
  %12591 = sext i32 %12590 to i64
  %12592 = getelementptr inbounds float, ptr %f5.host, i64 %12591
  %12593 = load float, ptr %12592, align 4, !tbaa !46
  %12594 = insertelement <4 x float> %12589, float %12593, i64 2
  %12595 = extractelement <4 x i32> %12579, i64 3
  %12596 = sext i32 %12595 to i64
  %12597 = getelementptr inbounds float, ptr %f5.host, i64 %12596
  %12598 = load float, ptr %12597, align 4, !tbaa !46
  %12599 = insertelement <4 x float> %12594, float %12598, i64 3
  %12600 = fmul <4 x float> %12599, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12601 = fadd <4 x float> %12578, %12600
  %12602 = fmul <4 x float> %12601, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12603 = fadd <4 x float> %12556, %12602
  %12604 = mul nsw <4 x i32> %t3006.us, %10120
  %12605 = add nsw <4 x i32> %12604, %12486
  %12606 = extractelement <4 x i32> %12605, i64 0
  %12607 = sext i32 %12606 to i64
  %12608 = getelementptr inbounds float, ptr %f4.host, i64 %12607
  %12609 = load float, ptr %12608, align 4, !tbaa !44
  %12610 = insertelement <4 x float> undef, float %12609, i64 0
  %12611 = extractelement <4 x i32> %12605, i64 1
  %12612 = sext i32 %12611 to i64
  %12613 = getelementptr inbounds float, ptr %f4.host, i64 %12612
  %12614 = load float, ptr %12613, align 4, !tbaa !44
  %12615 = insertelement <4 x float> %12610, float %12614, i64 1
  %12616 = extractelement <4 x i32> %12605, i64 2
  %12617 = sext i32 %12616 to i64
  %12618 = getelementptr inbounds float, ptr %f4.host, i64 %12617
  %12619 = load float, ptr %12618, align 4, !tbaa !44
  %12620 = insertelement <4 x float> %12615, float %12619, i64 2
  %12621 = extractelement <4 x i32> %12605, i64 3
  %12622 = sext i32 %12621 to i64
  %12623 = getelementptr inbounds float, ptr %f4.host, i64 %12622
  %12624 = load float, ptr %12623, align 4, !tbaa !44
  %12625 = insertelement <4 x float> %12620, float %12624, i64 3
  %12626 = fsub <4 x float> %12625, %12603
  %12627 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t3003.us
  %12628 = fmul <4 x float> %12627, %12626
  %12629 = fadd <4 x float> %12509, %12628
  %12630 = sext i32 %12090 to i64
  %12631 = sub nsw i64 %12630, %10111
  %12632 = add nsw i64 %12631, %12060
  %12633 = getelementptr inbounds float, ptr %10020, i64 %12632
  %12634 = load <4 x float>, ptr %12633, align 4, !tbaa !68
  %12635 = fmul <4 x float> %12634, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12636 = sext i32 %t3000.us to i64
  %12637 = sub nsw i64 %12636, %10111
  %12638 = add nsw i64 %12061, %12637
  %12639 = getelementptr inbounds float, ptr %10020, i64 %12638
  %12640 = load <4 x float>, ptr %12639, align 4, !tbaa !68
  %12641 = fmul <4 x float> %12640, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12642 = fadd <4 x float> %12635, %12641
  %12643 = fmul <4 x float> %12642, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12644 = add nsw i64 %12631, %12062
  %12645 = getelementptr inbounds float, ptr %10020, i64 %12644
  %12646 = load <4 x float>, ptr %12645, align 4, !tbaa !68
  %12647 = fmul <4 x float> %12646, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12648 = add nsw i64 %12063, %12637
  %12649 = getelementptr inbounds float, ptr %10020, i64 %12648
  %12650 = load <4 x float>, ptr %12649, align 4, !tbaa !68
  %12651 = fmul <4 x float> %12650, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12652 = fadd <4 x float> %12647, %12651
  %12653 = fmul <4 x float> %12652, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12654 = fadd <4 x float> %12643, %12653
  %12655 = fadd <4 x float> %12629, %12654
  %12656 = shufflevector <4 x float> %12375, <4 x float> %12655, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %12657 = sext i32 %f126.s0.v3.v303.base181.us to i64
  %12658 = add i64 %12066, %12657
  %12659 = getelementptr inbounds float, ptr %10049, i64 %12658
  store <8 x float> %12656, ptr %12659, align 4, !tbaa !70
  %lsr.iv.next437.us = add i32 %lsr.iv436.us, -1
  %lsr.iv.next439.us = add i32 %lsr.iv438.us, 8
  %.not87.us = icmp eq i32 %lsr.iv.next437.us, 0
  br i1 %.not87.us, label %"end for f126.s0.v3.v3179.loopexit.us", label %"for f126.s0.v3.v3178.us"

"end for f126.s0.v3.v3179.loopexit.us":           ; preds = %"for f126.s0.v3.v3178.us"
  %indvars.iv.next303 = add nsw i64 %indvars.iv302, 1
  %12660 = icmp eq i64 %indvars.iv.next303, %sext304
  br i1 %12660, label %"consume f126182", label %"for f126.s0.v4175.us"

"consume f126182":                                ; preds = %"end for f126.s0.v3.v3179.loopexit.us", %"produce f126173"
  br i1 %10056, label %"assert succeeded185", label %"assert failed184", !prof !5

"assert failed184":                               ; preds = %"consume f126182"
  %12661 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %10055, i64 2147483647) #4
  br label %destructor_block

"assert succeeded185":                            ; preds = %"consume f126182"
  %12662 = tail call ptr @halide_malloc(ptr %__user_context, i64 %10125)
  %.not81 = icmp eq ptr %12662, null
  br i1 %.not81, label %"assert failed186", label %"produce f125189", !prof !4

"assert failed186":                               ; preds = %"assert succeeded185"
  %12663 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block

"produce f125189":                                ; preds = %"assert succeeded185"
  br i1 %10128, label %"for f125.s0.v3.v3190.preheader", label %"consume f125194", !prof !5

"for f125.s0.v3.v3190.preheader":                 ; preds = %"produce f125189"
  %12664 = shl i32 %10161, 1
  %12665 = and i32 %12664, 2
  %t3016 = add nsw i32 %12665, %10164
  %12666 = sub nsw i32 %10161, %f2.v4.min_realized
  %12667 = mul nsw i32 %12666, %10129
  %12668 = sub i32 %12667, %f2.v3.min_realized
  %12669 = add i32 %t3016, %10133
  %t3028 = mul nsw i32 %12669, %10034
  %12670 = sub nsw i32 %10164, %9985
  %t3030 = mul nsw i32 %12670, %10034
  %12671 = add i32 %t3016, %10139
  %12672 = mul nsw i32 %12671, %f4.stride.1
  %12673 = sub nsw i32 %10164, %f4.v4.min_realized
  %12674 = mul nsw i32 %12673, %f4.stride.1
  %12675 = sext i32 %t3030 to i64
  %12676 = add nsw i64 %12675, -1
  %12677 = sext i32 %t3028 to i64
  %12678 = add nsw i64 %12677, -1
  br label %"for f125.s0.v3.v3190"

"for f125.s0.v3.v3190":                           ; preds = %"for f125.s0.v3.v3190.preheader", %"for f125.s0.v3.v3190"
  %lsr.iv442 = phi i32 [ %lsr.iv.next443, %"for f125.s0.v3.v3190" ], [ %a1120, %"for f125.s0.v3.v3190.preheader" ]
  %lsr.iv440 = phi i32 [ %lsr.iv.next441, %"for f125.s0.v3.v3190" ], [ %10127, %"for f125.s0.v3.v3190.preheader" ]
  %f125.s0.v3.v366.base193 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %lsr.iv442)
  %12679 = shl i32 %f125.s0.v3.v366.base193, 1
  %12680 = and i32 %12679, 2
  %12681 = ashr i32 %f125.s0.v3.v366.base193, 1
  %t3017 = add nsw i32 %12680, %12681
  %t3018 = add i32 %12668, %f125.s0.v3.v366.base193
  %12682 = sext i32 %t3018 to i64
  %12683 = getelementptr inbounds float, ptr %f2.host, i64 %12682
  %12684 = load <4 x float>, ptr %12683, align 4, !tbaa !42
  %12685 = add nsw i64 %12682, 4
  %12686 = getelementptr inbounds float, ptr %f2.host, i64 %12685
  %12687 = load <4 x float>, ptr %12686, align 4, !tbaa !42
  %t3019 = shufflevector <4 x float> %12684, <4 x float> %12687, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3020 = shufflevector <4 x float> %12684, <4 x float> %12687, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t3021 = fmul <4 x float> %10063, %t3019
  %t3022 = fmul <4 x float> %10063, %t3020
  %a1125 = fptosi <4 x float> %t3022 to <4 x i32>
  %a1132 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1125)
  %12688 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1132, <4 x i32> zeroinitializer)
  %t3024 = sitofp <4 x i32> %12688 to <4 x float>
  %t3025 = fmul <4 x float> %10132, %t3024
  %12689 = add nuw nsw <4 x i32> %12688, <i32 1, i32 1, i32 1, i32 1>
  %12690 = sitofp <4 x i32> %12689 to <4 x float>
  %t3026 = fmul <4 x float> %10132, %12690
  %12691 = fmul <4 x float> %t3022, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1130 = fptosi <4 x float> %12691 to <4 x i32>
  %a1129 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1130)
  %12692 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1129, <4 x i32> zeroinitializer)
  %12693 = shl <4 x i32> %12688, <i32 8, i32 8, i32 8, i32 8>
  %.neg211 = sub <4 x i32> %.neg209, %12693
  %t3031 = add <4 x i32> %.neg211, %12692
  %12694 = sub nsw i32 %t3017, %f4.v3.min_realized
  %t3034 = add nsw i32 %12694, %12672
  %t3036 = sub nsw <4 x i32> %12688, %10072
  %t3037 = mul nsw <4 x i32> %t3036, %10120
  %12695 = sub nsw i32 %12681, %f4.v3.min_realized
  %t3039 = add nsw i32 %12695, %12672
  %t3041 = add nsw i32 %12694, %12674
  %t3042 = add nsw i32 %12695, %12674
  %12696 = add nsw <4 x i32> %t3036, <i32 1, i32 1, i32 1, i32 1>
  %t3043 = mul nsw <4 x i32> %12696, %10120
  %12697 = add nsw i32 %f125.s0.v3.v366.base193, 1
  %12698 = shl i32 %12697, 1
  %12699 = and i32 %12698, 2
  %12700 = ashr i32 %12697, 1
  %t3044 = add nsw i32 %12699, %12700
  %a1133 = fptosi <4 x float> %t3021 to <4 x i32>
  %a1140 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1133)
  %12701 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1140, <4 x i32> zeroinitializer)
  %t3046 = sitofp <4 x i32> %12701 to <4 x float>
  %t3047 = fmul <4 x float> %10132, %t3046
  %12702 = add nuw nsw <4 x i32> %12701, <i32 1, i32 1, i32 1, i32 1>
  %12703 = sitofp <4 x i32> %12702 to <4 x float>
  %t3048 = fmul <4 x float> %10132, %12703
  %12704 = fmul <4 x float> %t3021, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1138 = fptosi <4 x float> %12704 to <4 x i32>
  %a1137 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1138)
  %12705 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1137, <4 x i32> zeroinitializer)
  %12706 = shl <4 x i32> %12701, <i32 8, i32 8, i32 8, i32 8>
  %.neg213 = sub <4 x i32> %.neg209, %12706
  %t3051 = add <4 x i32> %.neg213, %12705
  %12707 = sub nsw i32 %t3044, %f4.v3.min_realized
  %t3053 = add nsw i32 %12707, %12672
  %t3054 = sub nsw <4 x i32> %12701, %10072
  %t3055 = mul nsw <4 x i32> %t3054, %10120
  %12708 = sub nsw i32 %12700, %f4.v3.min_realized
  %t3057 = add nsw i32 %12708, %12672
  %t3058 = add nsw i32 %12707, %12674
  %t3059 = add nsw i32 %12708, %12674
  %12709 = add nsw <4 x i32> %t3054, <i32 1, i32 1, i32 1, i32 1>
  %t3060 = mul nsw <4 x i32> %12709, %10120
  %12710 = insertelement <4 x i32> undef, i32 %t3042, i64 0
  %12711 = shufflevector <4 x i32> %12710, <4 x i32> undef, <4 x i32> zeroinitializer
  %12712 = add nsw <4 x i32> %12711, <i32 0, i32 1, i32 2, i32 3>
  %12713 = add nsw <4 x i32> %t3043, %12712
  %12714 = extractelement <4 x i32> %12713, i64 0
  %12715 = sext i32 %12714 to i64
  %12716 = getelementptr inbounds float, ptr %f4.host, i64 %12715
  %12717 = load float, ptr %12716, align 4, !tbaa !44
  %12718 = insertelement <4 x float> undef, float %12717, i64 0
  %12719 = extractelement <4 x i32> %12713, i64 1
  %12720 = sext i32 %12719 to i64
  %12721 = getelementptr inbounds float, ptr %f4.host, i64 %12720
  %12722 = load float, ptr %12721, align 4, !tbaa !44
  %12723 = insertelement <4 x float> %12718, float %12722, i64 1
  %12724 = extractelement <4 x i32> %12713, i64 2
  %12725 = sext i32 %12724 to i64
  %12726 = getelementptr inbounds float, ptr %f4.host, i64 %12725
  %12727 = load float, ptr %12726, align 4, !tbaa !44
  %12728 = insertelement <4 x float> %12723, float %12727, i64 2
  %12729 = extractelement <4 x i32> %12713, i64 3
  %12730 = sext i32 %12729 to i64
  %12731 = getelementptr inbounds float, ptr %f4.host, i64 %12730
  %12732 = load float, ptr %12731, align 4, !tbaa !44
  %12733 = insertelement <4 x float> %12728, float %12732, i64 3
  %12734 = fmul <4 x float> %12733, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12735 = insertelement <4 x i32> undef, i32 %t3041, i64 0
  %12736 = shufflevector <4 x i32> %12735, <4 x i32> undef, <4 x i32> zeroinitializer
  %12737 = add <4 x i32> %12736, <i32 -1, i32 0, i32 1, i32 2>
  %12738 = add <4 x i32> %12737, %t3043
  %12739 = extractelement <4 x i32> %12738, i64 0
  %12740 = sext i32 %12739 to i64
  %12741 = getelementptr inbounds float, ptr %f4.host, i64 %12740
  %12742 = load float, ptr %12741, align 4, !tbaa !44
  %12743 = insertelement <4 x float> undef, float %12742, i64 0
  %12744 = extractelement <4 x i32> %12738, i64 1
  %12745 = sext i32 %12744 to i64
  %12746 = getelementptr inbounds float, ptr %f4.host, i64 %12745
  %12747 = load float, ptr %12746, align 4, !tbaa !44
  %12748 = insertelement <4 x float> %12743, float %12747, i64 1
  %12749 = extractelement <4 x i32> %12738, i64 2
  %12750 = sext i32 %12749 to i64
  %12751 = getelementptr inbounds float, ptr %f4.host, i64 %12750
  %12752 = load float, ptr %12751, align 4, !tbaa !44
  %12753 = insertelement <4 x float> %12748, float %12752, i64 2
  %12754 = extractelement <4 x i32> %12738, i64 3
  %12755 = sext i32 %12754 to i64
  %12756 = getelementptr inbounds float, ptr %f4.host, i64 %12755
  %12757 = load float, ptr %12756, align 4, !tbaa !44
  %12758 = insertelement <4 x float> %12753, float %12757, i64 3
  %12759 = fmul <4 x float> %12758, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12760 = fadd <4 x float> %12734, %12759
  %12761 = fmul <4 x float> %12760, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12762 = insertelement <4 x i32> undef, i32 %t3039, i64 0
  %12763 = shufflevector <4 x i32> %12762, <4 x i32> undef, <4 x i32> zeroinitializer
  %12764 = add nsw <4 x i32> %12763, <i32 0, i32 1, i32 2, i32 3>
  %12765 = add nsw <4 x i32> %t3043, %12764
  %12766 = extractelement <4 x i32> %12765, i64 0
  %12767 = sext i32 %12766 to i64
  %12768 = getelementptr inbounds float, ptr %f4.host, i64 %12767
  %12769 = load float, ptr %12768, align 4, !tbaa !44
  %12770 = insertelement <4 x float> undef, float %12769, i64 0
  %12771 = extractelement <4 x i32> %12765, i64 1
  %12772 = sext i32 %12771 to i64
  %12773 = getelementptr inbounds float, ptr %f4.host, i64 %12772
  %12774 = load float, ptr %12773, align 4, !tbaa !44
  %12775 = insertelement <4 x float> %12770, float %12774, i64 1
  %12776 = extractelement <4 x i32> %12765, i64 2
  %12777 = sext i32 %12776 to i64
  %12778 = getelementptr inbounds float, ptr %f4.host, i64 %12777
  %12779 = load float, ptr %12778, align 4, !tbaa !44
  %12780 = insertelement <4 x float> %12775, float %12779, i64 2
  %12781 = extractelement <4 x i32> %12765, i64 3
  %12782 = sext i32 %12781 to i64
  %12783 = getelementptr inbounds float, ptr %f4.host, i64 %12782
  %12784 = load float, ptr %12783, align 4, !tbaa !44
  %12785 = insertelement <4 x float> %12780, float %12784, i64 3
  %12786 = fmul <4 x float> %12785, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12787 = insertelement <4 x i32> undef, i32 %t3034, i64 0
  %12788 = shufflevector <4 x i32> %12787, <4 x i32> undef, <4 x i32> zeroinitializer
  %12789 = add <4 x i32> %12788, <i32 -1, i32 0, i32 1, i32 2>
  %12790 = add <4 x i32> %12789, %t3043
  %12791 = extractelement <4 x i32> %12790, i64 0
  %12792 = sext i32 %12791 to i64
  %12793 = getelementptr inbounds float, ptr %f4.host, i64 %12792
  %12794 = load float, ptr %12793, align 4, !tbaa !44
  %12795 = insertelement <4 x float> undef, float %12794, i64 0
  %12796 = extractelement <4 x i32> %12790, i64 1
  %12797 = sext i32 %12796 to i64
  %12798 = getelementptr inbounds float, ptr %f4.host, i64 %12797
  %12799 = load float, ptr %12798, align 4, !tbaa !44
  %12800 = insertelement <4 x float> %12795, float %12799, i64 1
  %12801 = extractelement <4 x i32> %12790, i64 2
  %12802 = sext i32 %12801 to i64
  %12803 = getelementptr inbounds float, ptr %f4.host, i64 %12802
  %12804 = load float, ptr %12803, align 4, !tbaa !44
  %12805 = insertelement <4 x float> %12800, float %12804, i64 2
  %12806 = extractelement <4 x i32> %12790, i64 3
  %12807 = sext i32 %12806 to i64
  %12808 = getelementptr inbounds float, ptr %f4.host, i64 %12807
  %12809 = load float, ptr %12808, align 4, !tbaa !44
  %12810 = insertelement <4 x float> %12805, float %12809, i64 3
  %12811 = fmul <4 x float> %12810, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12812 = fadd <4 x float> %12786, %12811
  %12813 = fmul <4 x float> %12812, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12814 = fadd <4 x float> %12761, %12813
  %12815 = extractelement <4 x i32> %t3031, i64 0
  %12816 = sext i32 %12815 to i64
  %12817 = getelementptr inbounds float, ptr %f0.host, i64 %12816
  %12818 = load float, ptr %12817, align 4, !tbaa !6
  %12819 = insertelement <4 x float> undef, float %12818, i64 0
  %12820 = extractelement <4 x i32> %t3031, i64 1
  %12821 = sext i32 %12820 to i64
  %12822 = getelementptr inbounds float, ptr %f0.host, i64 %12821
  %12823 = load float, ptr %12822, align 4, !tbaa !6
  %12824 = insertelement <4 x float> %12819, float %12823, i64 1
  %12825 = extractelement <4 x i32> %t3031, i64 2
  %12826 = sext i32 %12825 to i64
  %12827 = getelementptr inbounds float, ptr %f0.host, i64 %12826
  %12828 = load float, ptr %12827, align 4, !tbaa !6
  %12829 = insertelement <4 x float> %12824, float %12828, i64 2
  %12830 = extractelement <4 x i32> %t3031, i64 3
  %12831 = sext i32 %12830 to i64
  %12832 = getelementptr inbounds float, ptr %f0.host, i64 %12831
  %12833 = load float, ptr %12832, align 4, !tbaa !6
  %12834 = insertelement <4 x float> %12829, float %12833, i64 3
  %12835 = fsub <4 x float> %t3020, %t3026
  %12836 = fmul <4 x float> %10141, %12835
  %12837 = fadd <4 x float> %t3026, %12836
  %12838 = fadd <4 x float> %12837, %12834
  %12839 = fsub <4 x float> %12838, %12814
  %12840 = fsub <4 x float> %t3022, %t3024
  %12841 = fmul <4 x float> %12840, %12839
  %12842 = add nsw <4 x i32> %t3037, %12712
  %12843 = extractelement <4 x i32> %12842, i64 0
  %12844 = sext i32 %12843 to i64
  %12845 = getelementptr inbounds float, ptr %f4.host, i64 %12844
  %12846 = load float, ptr %12845, align 4, !tbaa !44
  %12847 = insertelement <4 x float> undef, float %12846, i64 0
  %12848 = extractelement <4 x i32> %12842, i64 1
  %12849 = sext i32 %12848 to i64
  %12850 = getelementptr inbounds float, ptr %f4.host, i64 %12849
  %12851 = load float, ptr %12850, align 4, !tbaa !44
  %12852 = insertelement <4 x float> %12847, float %12851, i64 1
  %12853 = extractelement <4 x i32> %12842, i64 2
  %12854 = sext i32 %12853 to i64
  %12855 = getelementptr inbounds float, ptr %f4.host, i64 %12854
  %12856 = load float, ptr %12855, align 4, !tbaa !44
  %12857 = insertelement <4 x float> %12852, float %12856, i64 2
  %12858 = extractelement <4 x i32> %12842, i64 3
  %12859 = sext i32 %12858 to i64
  %12860 = getelementptr inbounds float, ptr %f4.host, i64 %12859
  %12861 = load float, ptr %12860, align 4, !tbaa !44
  %12862 = insertelement <4 x float> %12857, float %12861, i64 3
  %12863 = fmul <4 x float> %12862, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12864 = add <4 x i32> %12737, %t3037
  %12865 = extractelement <4 x i32> %12864, i64 0
  %12866 = sext i32 %12865 to i64
  %12867 = getelementptr inbounds float, ptr %f4.host, i64 %12866
  %12868 = load float, ptr %12867, align 4, !tbaa !44
  %12869 = insertelement <4 x float> undef, float %12868, i64 0
  %12870 = extractelement <4 x i32> %12864, i64 1
  %12871 = sext i32 %12870 to i64
  %12872 = getelementptr inbounds float, ptr %f4.host, i64 %12871
  %12873 = load float, ptr %12872, align 4, !tbaa !44
  %12874 = insertelement <4 x float> %12869, float %12873, i64 1
  %12875 = extractelement <4 x i32> %12864, i64 2
  %12876 = sext i32 %12875 to i64
  %12877 = getelementptr inbounds float, ptr %f4.host, i64 %12876
  %12878 = load float, ptr %12877, align 4, !tbaa !44
  %12879 = insertelement <4 x float> %12874, float %12878, i64 2
  %12880 = extractelement <4 x i32> %12864, i64 3
  %12881 = sext i32 %12880 to i64
  %12882 = getelementptr inbounds float, ptr %f4.host, i64 %12881
  %12883 = load float, ptr %12882, align 4, !tbaa !44
  %12884 = insertelement <4 x float> %12879, float %12883, i64 3
  %12885 = fmul <4 x float> %12884, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12886 = fadd <4 x float> %12863, %12885
  %12887 = fmul <4 x float> %12886, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12888 = add nsw <4 x i32> %t3037, %12764
  %12889 = extractelement <4 x i32> %12888, i64 0
  %12890 = sext i32 %12889 to i64
  %12891 = getelementptr inbounds float, ptr %f4.host, i64 %12890
  %12892 = load float, ptr %12891, align 4, !tbaa !44
  %12893 = insertelement <4 x float> undef, float %12892, i64 0
  %12894 = extractelement <4 x i32> %12888, i64 1
  %12895 = sext i32 %12894 to i64
  %12896 = getelementptr inbounds float, ptr %f4.host, i64 %12895
  %12897 = load float, ptr %12896, align 4, !tbaa !44
  %12898 = insertelement <4 x float> %12893, float %12897, i64 1
  %12899 = extractelement <4 x i32> %12888, i64 2
  %12900 = sext i32 %12899 to i64
  %12901 = getelementptr inbounds float, ptr %f4.host, i64 %12900
  %12902 = load float, ptr %12901, align 4, !tbaa !44
  %12903 = insertelement <4 x float> %12898, float %12902, i64 2
  %12904 = extractelement <4 x i32> %12888, i64 3
  %12905 = sext i32 %12904 to i64
  %12906 = getelementptr inbounds float, ptr %f4.host, i64 %12905
  %12907 = load float, ptr %12906, align 4, !tbaa !44
  %12908 = insertelement <4 x float> %12903, float %12907, i64 3
  %12909 = fmul <4 x float> %12908, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12910 = add <4 x i32> %12789, %t3037
  %12911 = extractelement <4 x i32> %12910, i64 0
  %12912 = sext i32 %12911 to i64
  %12913 = getelementptr inbounds float, ptr %f4.host, i64 %12912
  %12914 = load float, ptr %12913, align 4, !tbaa !44
  %12915 = insertelement <4 x float> undef, float %12914, i64 0
  %12916 = extractelement <4 x i32> %12910, i64 1
  %12917 = sext i32 %12916 to i64
  %12918 = getelementptr inbounds float, ptr %f4.host, i64 %12917
  %12919 = load float, ptr %12918, align 4, !tbaa !44
  %12920 = insertelement <4 x float> %12915, float %12919, i64 1
  %12921 = extractelement <4 x i32> %12910, i64 2
  %12922 = sext i32 %12921 to i64
  %12923 = getelementptr inbounds float, ptr %f4.host, i64 %12922
  %12924 = load float, ptr %12923, align 4, !tbaa !44
  %12925 = insertelement <4 x float> %12920, float %12924, i64 2
  %12926 = extractelement <4 x i32> %12910, i64 3
  %12927 = sext i32 %12926 to i64
  %12928 = getelementptr inbounds float, ptr %f4.host, i64 %12927
  %12929 = load float, ptr %12928, align 4, !tbaa !44
  %12930 = insertelement <4 x float> %12925, float %12929, i64 3
  %12931 = fmul <4 x float> %12930, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12932 = fadd <4 x float> %12909, %12931
  %12933 = fmul <4 x float> %12932, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12934 = fadd <4 x float> %12887, %12933
  %12935 = add nsw <4 x i32> %t3031, <i32 256, i32 256, i32 256, i32 256>
  %12936 = extractelement <4 x i32> %12935, i64 0
  %12937 = sext i32 %12936 to i64
  %12938 = getelementptr inbounds float, ptr %f0.host, i64 %12937
  %12939 = load float, ptr %12938, align 4, !tbaa !6
  %12940 = insertelement <4 x float> undef, float %12939, i64 0
  %12941 = extractelement <4 x i32> %12935, i64 1
  %12942 = sext i32 %12941 to i64
  %12943 = getelementptr inbounds float, ptr %f0.host, i64 %12942
  %12944 = load float, ptr %12943, align 4, !tbaa !6
  %12945 = insertelement <4 x float> %12940, float %12944, i64 1
  %12946 = extractelement <4 x i32> %12935, i64 2
  %12947 = sext i32 %12946 to i64
  %12948 = getelementptr inbounds float, ptr %f0.host, i64 %12947
  %12949 = load float, ptr %12948, align 4, !tbaa !6
  %12950 = insertelement <4 x float> %12945, float %12949, i64 2
  %12951 = extractelement <4 x i32> %12935, i64 3
  %12952 = sext i32 %12951 to i64
  %12953 = getelementptr inbounds float, ptr %f0.host, i64 %12952
  %12954 = load float, ptr %12953, align 4, !tbaa !6
  %12955 = insertelement <4 x float> %12950, float %12954, i64 3
  %12956 = fsub <4 x float> %t3020, %t3025
  %12957 = fmul <4 x float> %10141, %12956
  %12958 = fadd <4 x float> %t3025, %12957
  %12959 = fadd <4 x float> %12958, %12955
  %12960 = fsub <4 x float> %12959, %12934
  %12961 = fsub <4 x float> %t3024, %t3022
  %12962 = fadd <4 x float> %12961, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12963 = fmul <4 x float> %12962, %12960
  %12964 = fadd <4 x float> %12841, %12963
  %12965 = sext i32 %12681 to i64
  %12966 = sub nsw i64 %12965, %10124
  %12967 = add nsw i64 %12966, %12675
  %12968 = getelementptr inbounds float, ptr %10049, i64 %12967
  %12969 = load <4 x float>, ptr %12968, align 4, !tbaa !70
  %12970 = fmul <4 x float> %12969, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12971 = sext i32 %t3017 to i64
  %12972 = sub nsw i64 %12971, %10124
  %12973 = add nsw i64 %12676, %12972
  %12974 = getelementptr inbounds float, ptr %10049, i64 %12973
  %12975 = load <4 x float>, ptr %12974, align 4, !tbaa !70
  %12976 = fmul <4 x float> %12975, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12977 = fadd <4 x float> %12970, %12976
  %12978 = fmul <4 x float> %12977, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12979 = add nsw i64 %12966, %12677
  %12980 = getelementptr inbounds float, ptr %10049, i64 %12979
  %12981 = load <4 x float>, ptr %12980, align 4, !tbaa !70
  %12982 = fmul <4 x float> %12981, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12983 = add nsw i64 %12678, %12972
  %12984 = getelementptr inbounds float, ptr %10049, i64 %12983
  %12985 = load <4 x float>, ptr %12984, align 4, !tbaa !70
  %12986 = fmul <4 x float> %12985, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12987 = fadd <4 x float> %12982, %12986
  %12988 = fmul <4 x float> %12987, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12989 = fadd <4 x float> %12978, %12988
  %12990 = fadd <4 x float> %12964, %12989
  %12991 = insertelement <4 x i32> undef, i32 %t3059, i64 0
  %12992 = shufflevector <4 x i32> %12991, <4 x i32> undef, <4 x i32> zeroinitializer
  %12993 = add nsw <4 x i32> %12992, <i32 0, i32 1, i32 2, i32 3>
  %12994 = add nsw <4 x i32> %t3060, %12993
  %12995 = extractelement <4 x i32> %12994, i64 0
  %12996 = sext i32 %12995 to i64
  %12997 = getelementptr inbounds float, ptr %f4.host, i64 %12996
  %12998 = load float, ptr %12997, align 4, !tbaa !44
  %12999 = insertelement <4 x float> undef, float %12998, i64 0
  %13000 = extractelement <4 x i32> %12994, i64 1
  %13001 = sext i32 %13000 to i64
  %13002 = getelementptr inbounds float, ptr %f4.host, i64 %13001
  %13003 = load float, ptr %13002, align 4, !tbaa !44
  %13004 = insertelement <4 x float> %12999, float %13003, i64 1
  %13005 = extractelement <4 x i32> %12994, i64 2
  %13006 = sext i32 %13005 to i64
  %13007 = getelementptr inbounds float, ptr %f4.host, i64 %13006
  %13008 = load float, ptr %13007, align 4, !tbaa !44
  %13009 = insertelement <4 x float> %13004, float %13008, i64 2
  %13010 = extractelement <4 x i32> %12994, i64 3
  %13011 = sext i32 %13010 to i64
  %13012 = getelementptr inbounds float, ptr %f4.host, i64 %13011
  %13013 = load float, ptr %13012, align 4, !tbaa !44
  %13014 = insertelement <4 x float> %13009, float %13013, i64 3
  %13015 = fmul <4 x float> %13014, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13016 = insertelement <4 x i32> undef, i32 %t3058, i64 0
  %13017 = shufflevector <4 x i32> %13016, <4 x i32> undef, <4 x i32> zeroinitializer
  %13018 = add <4 x i32> %13017, <i32 -1, i32 0, i32 1, i32 2>
  %13019 = add <4 x i32> %13018, %t3060
  %13020 = extractelement <4 x i32> %13019, i64 0
  %13021 = sext i32 %13020 to i64
  %13022 = getelementptr inbounds float, ptr %f4.host, i64 %13021
  %13023 = load float, ptr %13022, align 4, !tbaa !44
  %13024 = insertelement <4 x float> undef, float %13023, i64 0
  %13025 = extractelement <4 x i32> %13019, i64 1
  %13026 = sext i32 %13025 to i64
  %13027 = getelementptr inbounds float, ptr %f4.host, i64 %13026
  %13028 = load float, ptr %13027, align 4, !tbaa !44
  %13029 = insertelement <4 x float> %13024, float %13028, i64 1
  %13030 = extractelement <4 x i32> %13019, i64 2
  %13031 = sext i32 %13030 to i64
  %13032 = getelementptr inbounds float, ptr %f4.host, i64 %13031
  %13033 = load float, ptr %13032, align 4, !tbaa !44
  %13034 = insertelement <4 x float> %13029, float %13033, i64 2
  %13035 = extractelement <4 x i32> %13019, i64 3
  %13036 = sext i32 %13035 to i64
  %13037 = getelementptr inbounds float, ptr %f4.host, i64 %13036
  %13038 = load float, ptr %13037, align 4, !tbaa !44
  %13039 = insertelement <4 x float> %13034, float %13038, i64 3
  %13040 = fmul <4 x float> %13039, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13041 = fadd <4 x float> %13015, %13040
  %13042 = fmul <4 x float> %13041, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13043 = insertelement <4 x i32> undef, i32 %t3057, i64 0
  %13044 = shufflevector <4 x i32> %13043, <4 x i32> undef, <4 x i32> zeroinitializer
  %13045 = add nsw <4 x i32> %13044, <i32 0, i32 1, i32 2, i32 3>
  %13046 = add nsw <4 x i32> %t3060, %13045
  %13047 = extractelement <4 x i32> %13046, i64 0
  %13048 = sext i32 %13047 to i64
  %13049 = getelementptr inbounds float, ptr %f4.host, i64 %13048
  %13050 = load float, ptr %13049, align 4, !tbaa !44
  %13051 = insertelement <4 x float> undef, float %13050, i64 0
  %13052 = extractelement <4 x i32> %13046, i64 1
  %13053 = sext i32 %13052 to i64
  %13054 = getelementptr inbounds float, ptr %f4.host, i64 %13053
  %13055 = load float, ptr %13054, align 4, !tbaa !44
  %13056 = insertelement <4 x float> %13051, float %13055, i64 1
  %13057 = extractelement <4 x i32> %13046, i64 2
  %13058 = sext i32 %13057 to i64
  %13059 = getelementptr inbounds float, ptr %f4.host, i64 %13058
  %13060 = load float, ptr %13059, align 4, !tbaa !44
  %13061 = insertelement <4 x float> %13056, float %13060, i64 2
  %13062 = extractelement <4 x i32> %13046, i64 3
  %13063 = sext i32 %13062 to i64
  %13064 = getelementptr inbounds float, ptr %f4.host, i64 %13063
  %13065 = load float, ptr %13064, align 4, !tbaa !44
  %13066 = insertelement <4 x float> %13061, float %13065, i64 3
  %13067 = fmul <4 x float> %13066, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13068 = insertelement <4 x i32> undef, i32 %t3053, i64 0
  %13069 = shufflevector <4 x i32> %13068, <4 x i32> undef, <4 x i32> zeroinitializer
  %13070 = add <4 x i32> %13069, <i32 -1, i32 0, i32 1, i32 2>
  %13071 = add <4 x i32> %13070, %t3060
  %13072 = extractelement <4 x i32> %13071, i64 0
  %13073 = sext i32 %13072 to i64
  %13074 = getelementptr inbounds float, ptr %f4.host, i64 %13073
  %13075 = load float, ptr %13074, align 4, !tbaa !44
  %13076 = insertelement <4 x float> undef, float %13075, i64 0
  %13077 = extractelement <4 x i32> %13071, i64 1
  %13078 = sext i32 %13077 to i64
  %13079 = getelementptr inbounds float, ptr %f4.host, i64 %13078
  %13080 = load float, ptr %13079, align 4, !tbaa !44
  %13081 = insertelement <4 x float> %13076, float %13080, i64 1
  %13082 = extractelement <4 x i32> %13071, i64 2
  %13083 = sext i32 %13082 to i64
  %13084 = getelementptr inbounds float, ptr %f4.host, i64 %13083
  %13085 = load float, ptr %13084, align 4, !tbaa !44
  %13086 = insertelement <4 x float> %13081, float %13085, i64 2
  %13087 = extractelement <4 x i32> %13071, i64 3
  %13088 = sext i32 %13087 to i64
  %13089 = getelementptr inbounds float, ptr %f4.host, i64 %13088
  %13090 = load float, ptr %13089, align 4, !tbaa !44
  %13091 = insertelement <4 x float> %13086, float %13090, i64 3
  %13092 = fmul <4 x float> %13091, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13093 = fadd <4 x float> %13067, %13092
  %13094 = fmul <4 x float> %13093, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13095 = fadd <4 x float> %13042, %13094
  %13096 = extractelement <4 x i32> %t3051, i64 0
  %13097 = sext i32 %13096 to i64
  %13098 = getelementptr inbounds float, ptr %f0.host, i64 %13097
  %13099 = load float, ptr %13098, align 4, !tbaa !6
  %13100 = insertelement <4 x float> undef, float %13099, i64 0
  %13101 = extractelement <4 x i32> %t3051, i64 1
  %13102 = sext i32 %13101 to i64
  %13103 = getelementptr inbounds float, ptr %f0.host, i64 %13102
  %13104 = load float, ptr %13103, align 4, !tbaa !6
  %13105 = insertelement <4 x float> %13100, float %13104, i64 1
  %13106 = extractelement <4 x i32> %t3051, i64 2
  %13107 = sext i32 %13106 to i64
  %13108 = getelementptr inbounds float, ptr %f0.host, i64 %13107
  %13109 = load float, ptr %13108, align 4, !tbaa !6
  %13110 = insertelement <4 x float> %13105, float %13109, i64 2
  %13111 = extractelement <4 x i32> %t3051, i64 3
  %13112 = sext i32 %13111 to i64
  %13113 = getelementptr inbounds float, ptr %f0.host, i64 %13112
  %13114 = load float, ptr %13113, align 4, !tbaa !6
  %13115 = insertelement <4 x float> %13110, float %13114, i64 3
  %13116 = fsub <4 x float> %t3019, %t3048
  %13117 = fmul <4 x float> %10141, %13116
  %13118 = fadd <4 x float> %t3048, %13117
  %13119 = fadd <4 x float> %13118, %13115
  %13120 = fsub <4 x float> %13119, %13095
  %13121 = fsub <4 x float> %t3021, %t3046
  %13122 = fmul <4 x float> %13121, %13120
  %13123 = add nsw <4 x i32> %t3055, %12993
  %13124 = extractelement <4 x i32> %13123, i64 0
  %13125 = sext i32 %13124 to i64
  %13126 = getelementptr inbounds float, ptr %f4.host, i64 %13125
  %13127 = load float, ptr %13126, align 4, !tbaa !44
  %13128 = insertelement <4 x float> undef, float %13127, i64 0
  %13129 = extractelement <4 x i32> %13123, i64 1
  %13130 = sext i32 %13129 to i64
  %13131 = getelementptr inbounds float, ptr %f4.host, i64 %13130
  %13132 = load float, ptr %13131, align 4, !tbaa !44
  %13133 = insertelement <4 x float> %13128, float %13132, i64 1
  %13134 = extractelement <4 x i32> %13123, i64 2
  %13135 = sext i32 %13134 to i64
  %13136 = getelementptr inbounds float, ptr %f4.host, i64 %13135
  %13137 = load float, ptr %13136, align 4, !tbaa !44
  %13138 = insertelement <4 x float> %13133, float %13137, i64 2
  %13139 = extractelement <4 x i32> %13123, i64 3
  %13140 = sext i32 %13139 to i64
  %13141 = getelementptr inbounds float, ptr %f4.host, i64 %13140
  %13142 = load float, ptr %13141, align 4, !tbaa !44
  %13143 = insertelement <4 x float> %13138, float %13142, i64 3
  %13144 = fmul <4 x float> %13143, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13145 = add <4 x i32> %t3055, %13017
  %13146 = add <4 x i32> %13145, <i32 -1, i32 0, i32 1, i32 2>
  %13147 = extractelement <4 x i32> %13146, i64 0
  %13148 = sext i32 %13147 to i64
  %13149 = getelementptr inbounds float, ptr %f4.host, i64 %13148
  %13150 = load float, ptr %13149, align 4, !tbaa !44
  %13151 = insertelement <4 x float> undef, float %13150, i64 0
  %13152 = extractelement <4 x i32> %13146, i64 1
  %13153 = sext i32 %13152 to i64
  %13154 = getelementptr inbounds float, ptr %f4.host, i64 %13153
  %13155 = load float, ptr %13154, align 4, !tbaa !44
  %13156 = insertelement <4 x float> %13151, float %13155, i64 1
  %13157 = extractelement <4 x i32> %13146, i64 2
  %13158 = sext i32 %13157 to i64
  %13159 = getelementptr inbounds float, ptr %f4.host, i64 %13158
  %13160 = load float, ptr %13159, align 4, !tbaa !44
  %13161 = insertelement <4 x float> %13156, float %13160, i64 2
  %13162 = extractelement <4 x i32> %13146, i64 3
  %13163 = sext i32 %13162 to i64
  %13164 = getelementptr inbounds float, ptr %f4.host, i64 %13163
  %13165 = load float, ptr %13164, align 4, !tbaa !44
  %13166 = insertelement <4 x float> %13161, float %13165, i64 3
  %13167 = fmul <4 x float> %13166, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13168 = fadd <4 x float> %13144, %13167
  %13169 = fmul <4 x float> %13168, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13170 = add nsw <4 x i32> %t3055, %13045
  %13171 = extractelement <4 x i32> %13170, i64 0
  %13172 = sext i32 %13171 to i64
  %13173 = getelementptr inbounds float, ptr %f4.host, i64 %13172
  %13174 = load float, ptr %13173, align 4, !tbaa !44
  %13175 = insertelement <4 x float> undef, float %13174, i64 0
  %13176 = extractelement <4 x i32> %13170, i64 1
  %13177 = sext i32 %13176 to i64
  %13178 = getelementptr inbounds float, ptr %f4.host, i64 %13177
  %13179 = load float, ptr %13178, align 4, !tbaa !44
  %13180 = insertelement <4 x float> %13175, float %13179, i64 1
  %13181 = extractelement <4 x i32> %13170, i64 2
  %13182 = sext i32 %13181 to i64
  %13183 = getelementptr inbounds float, ptr %f4.host, i64 %13182
  %13184 = load float, ptr %13183, align 4, !tbaa !44
  %13185 = insertelement <4 x float> %13180, float %13184, i64 2
  %13186 = extractelement <4 x i32> %13170, i64 3
  %13187 = sext i32 %13186 to i64
  %13188 = getelementptr inbounds float, ptr %f4.host, i64 %13187
  %13189 = load float, ptr %13188, align 4, !tbaa !44
  %13190 = insertelement <4 x float> %13185, float %13189, i64 3
  %13191 = fmul <4 x float> %13190, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13192 = add <4 x i32> %t3055, %13069
  %13193 = add <4 x i32> %13192, <i32 -1, i32 0, i32 1, i32 2>
  %13194 = extractelement <4 x i32> %13193, i64 0
  %13195 = sext i32 %13194 to i64
  %13196 = getelementptr inbounds float, ptr %f4.host, i64 %13195
  %13197 = load float, ptr %13196, align 4, !tbaa !44
  %13198 = insertelement <4 x float> undef, float %13197, i64 0
  %13199 = extractelement <4 x i32> %13193, i64 1
  %13200 = sext i32 %13199 to i64
  %13201 = getelementptr inbounds float, ptr %f4.host, i64 %13200
  %13202 = load float, ptr %13201, align 4, !tbaa !44
  %13203 = insertelement <4 x float> %13198, float %13202, i64 1
  %13204 = extractelement <4 x i32> %13193, i64 2
  %13205 = sext i32 %13204 to i64
  %13206 = getelementptr inbounds float, ptr %f4.host, i64 %13205
  %13207 = load float, ptr %13206, align 4, !tbaa !44
  %13208 = insertelement <4 x float> %13203, float %13207, i64 2
  %13209 = extractelement <4 x i32> %13193, i64 3
  %13210 = sext i32 %13209 to i64
  %13211 = getelementptr inbounds float, ptr %f4.host, i64 %13210
  %13212 = load float, ptr %13211, align 4, !tbaa !44
  %13213 = insertelement <4 x float> %13208, float %13212, i64 3
  %13214 = fmul <4 x float> %13213, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13215 = fadd <4 x float> %13191, %13214
  %13216 = fmul <4 x float> %13215, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13217 = fadd <4 x float> %13169, %13216
  %13218 = add nsw <4 x i32> %t3051, <i32 256, i32 256, i32 256, i32 256>
  %13219 = extractelement <4 x i32> %13218, i64 0
  %13220 = sext i32 %13219 to i64
  %13221 = getelementptr inbounds float, ptr %f0.host, i64 %13220
  %13222 = load float, ptr %13221, align 4, !tbaa !6
  %13223 = insertelement <4 x float> undef, float %13222, i64 0
  %13224 = extractelement <4 x i32> %13218, i64 1
  %13225 = sext i32 %13224 to i64
  %13226 = getelementptr inbounds float, ptr %f0.host, i64 %13225
  %13227 = load float, ptr %13226, align 4, !tbaa !6
  %13228 = insertelement <4 x float> %13223, float %13227, i64 1
  %13229 = extractelement <4 x i32> %13218, i64 2
  %13230 = sext i32 %13229 to i64
  %13231 = getelementptr inbounds float, ptr %f0.host, i64 %13230
  %13232 = load float, ptr %13231, align 4, !tbaa !6
  %13233 = insertelement <4 x float> %13228, float %13232, i64 2
  %13234 = extractelement <4 x i32> %13218, i64 3
  %13235 = sext i32 %13234 to i64
  %13236 = getelementptr inbounds float, ptr %f0.host, i64 %13235
  %13237 = load float, ptr %13236, align 4, !tbaa !6
  %13238 = insertelement <4 x float> %13233, float %13237, i64 3
  %13239 = fsub <4 x float> %t3019, %t3047
  %13240 = fmul <4 x float> %10141, %13239
  %13241 = fadd <4 x float> %t3047, %13240
  %13242 = fadd <4 x float> %13241, %13238
  %13243 = fsub <4 x float> %13242, %13217
  %13244 = fsub <4 x float> %t3046, %t3021
  %13245 = fadd <4 x float> %13244, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13246 = fmul <4 x float> %13245, %13243
  %13247 = fadd <4 x float> %13122, %13246
  %13248 = sext i32 %12700 to i64
  %13249 = sub nsw i64 %13248, %10124
  %13250 = add nsw i64 %13249, %12675
  %13251 = getelementptr inbounds float, ptr %10049, i64 %13250
  %13252 = load <4 x float>, ptr %13251, align 4, !tbaa !70
  %13253 = fmul <4 x float> %13252, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13254 = sext i32 %t3044 to i64
  %13255 = sub nsw i64 %13254, %10124
  %13256 = add nsw i64 %12676, %13255
  %13257 = getelementptr inbounds float, ptr %10049, i64 %13256
  %13258 = load <4 x float>, ptr %13257, align 4, !tbaa !70
  %13259 = fmul <4 x float> %13258, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13260 = fadd <4 x float> %13253, %13259
  %13261 = fmul <4 x float> %13260, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13262 = add nsw i64 %13249, %12677
  %13263 = getelementptr inbounds float, ptr %10049, i64 %13262
  %13264 = load <4 x float>, ptr %13263, align 4, !tbaa !70
  %13265 = fmul <4 x float> %13264, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %13266 = add nsw i64 %12678, %13255
  %13267 = getelementptr inbounds float, ptr %10049, i64 %13266
  %13268 = load <4 x float>, ptr %13267, align 4, !tbaa !70
  %13269 = fmul <4 x float> %13268, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13270 = fadd <4 x float> %13265, %13269
  %13271 = fmul <4 x float> %13270, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %13272 = fadd <4 x float> %13261, %13271
  %13273 = fadd <4 x float> %13247, %13272
  %13274 = shufflevector <4 x float> %12990, <4 x float> %13273, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %13275 = sext i32 %f125.s0.v3.v366.base193 to i64
  %13276 = sub nsw i64 %13275, %10142
  %13277 = getelementptr inbounds float, ptr %12662, i64 %13276
  store <8 x float> %13274, ptr %13277, align 4, !tbaa !72
  %lsr.iv.next441 = add i32 %lsr.iv440, -1
  %lsr.iv.next443 = add i32 %lsr.iv442, 8
  %.not85 = icmp eq i32 %lsr.iv.next441, 0
  br i1 %.not85, label %"consume f125194", label %"for f125.s0.v3.v3190"

"consume f125194":                                ; preds = %"for f125.s0.v3.v3190", %"produce f125189"
  br i1 %10145, label %"for local_laplacian.s0.v3.v3195.preheader", label %if.then.i283, !prof !5

"for local_laplacian.s0.v3.v3195.preheader":      ; preds = %"consume f125194"
  %13278 = add nsw i64 %10148, %indvars.iv306
  %13279 = mul nsw i64 %13278, %10147
  %13280 = sub i64 %13279, %8
  %a1146 = tail call i32 @llvm.smin.i32(i32 %b1149, i32 %10161)
  %13281 = tail call i32 @llvm.smax.i32(i32 %a1146, i32 %b1148)
  %13282 = mul nsw i32 %13281, %input.stride.1
  br label %"for local_laplacian.s0.v3.v3195"

"for local_laplacian.s0.v3.v3195":                ; preds = %"for local_laplacian.s0.v3.v3195.preheader", %"end for local_laplacian.s0.v5200"
  %local_laplacian.s0.v3.v3197 = phi i32 [ %13351, %"end for local_laplacian.s0.v5200" ], [ 0, %"for local_laplacian.s0.v3.v3195.preheader" ]
  br i1 %10146, label %"for local_laplacian.s0.v5199.preheader", label %"end for local_laplacian.s0.v5200", !prof !5

"for local_laplacian.s0.v5199.preheader":         ; preds = %"for local_laplacian.s0.v3.v3195"
  %13283 = shl nsw i32 %local_laplacian.s0.v3.v3197, 3
  %a1141 = add nsw i32 %13283, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base198 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1141)
  %13284 = sext i32 %local_laplacian.s0.v3.v277.base198 to i64
  %13285 = add i64 %lsr.iv446, %13284
  %scevgep448 = getelementptr i16, ptr %local_laplacian.host, i64 %13285
  %13286 = add i64 %13280, %13284
  %13287 = getelementptr inbounds float, ptr %f2.host, i64 %13286
  %13288 = load <8 x float>, ptr %13287, align 4, !tbaa !42
  %13289 = fadd <8 x float> %13288, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %13290 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base198, i64 0
  %13291 = shufflevector <8 x i32> %13290, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1149 = add nsw <8 x i32> %13291, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1148 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1151, <8 x i32> %a1149)
  %13292 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1148, <8 x i32> %b1150)
  %13293 = sub nsw i64 %13284, %10142
  %13294 = getelementptr inbounds float, ptr %12662, i64 %13293
  %13295 = load <8 x float>, ptr %13294, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5199"

if.then.i283:                                     ; preds = %"end for local_laplacian.s0.v5200", %"consume f125194"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %12662) #7
  %indvars.iv.next307 = add nuw nsw i64 %indvars.iv306, 1
  %lsr.iv.next447 = add i64 %lsr.iv446, %73
  %.not82 = icmp eq i64 %indvars.iv.next307, 64
  br i1 %.not82, label %if.then.i271, label %"produce f129143"

"for local_laplacian.s0.v5199":                   ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v5199.preheader"
  %lsr.iv449 = phi ptr [ %scevgep448, %"for local_laplacian.s0.v5199.preheader" ], [ %scevgep451, %"for local_laplacian.s0.v5199" ]
  %lsr.iv444 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5199.preheader" ], [ %lsr.iv.next445, %"for local_laplacian.s0.v5199" ]
  %a1145 = phi i32 [ %b1028, %"for local_laplacian.s0.v5199.preheader" ], [ %13350, %"for local_laplacian.s0.v5199" ]
  %a1144 = tail call i32 @llvm.smin.i32(i32 %b1147, i32 %a1145)
  %13296 = tail call i32 @llvm.smax.i32(i32 %a1144, i32 %b1146)
  %13297 = mul nsw i32 %13296, %input.stride.2
  %.scalar333 = add i32 %13297, %13282
  %.scalar334 = sub i32 %.scalar333, %10152
  %13298 = insertelement <8 x i32> undef, i32 %.scalar334, i64 0
  %13299 = shufflevector <8 x i32> %13298, <8 x i32> poison, <8 x i32> zeroinitializer
  %13300 = add <8 x i32> %13299, %13292
  %13301 = extractelement <8 x i32> %13300, i64 0
  %13302 = sext i32 %13301 to i64
  %13303 = getelementptr inbounds i16, ptr %input.host, i64 %13302
  %13304 = load i16, ptr %13303, align 2, !tbaa !40
  %13305 = insertelement <8 x i16> undef, i16 %13304, i64 0
  %13306 = extractelement <8 x i32> %13300, i64 1
  %13307 = sext i32 %13306 to i64
  %13308 = getelementptr inbounds i16, ptr %input.host, i64 %13307
  %13309 = load i16, ptr %13308, align 2, !tbaa !40
  %13310 = insertelement <8 x i16> %13305, i16 %13309, i64 1
  %13311 = extractelement <8 x i32> %13300, i64 2
  %13312 = sext i32 %13311 to i64
  %13313 = getelementptr inbounds i16, ptr %input.host, i64 %13312
  %13314 = load i16, ptr %13313, align 2, !tbaa !40
  %13315 = insertelement <8 x i16> %13310, i16 %13314, i64 2
  %13316 = extractelement <8 x i32> %13300, i64 3
  %13317 = sext i32 %13316 to i64
  %13318 = getelementptr inbounds i16, ptr %input.host, i64 %13317
  %13319 = load i16, ptr %13318, align 2, !tbaa !40
  %13320 = insertelement <8 x i16> %13315, i16 %13319, i64 3
  %13321 = extractelement <8 x i32> %13300, i64 4
  %13322 = sext i32 %13321 to i64
  %13323 = getelementptr inbounds i16, ptr %input.host, i64 %13322
  %13324 = load i16, ptr %13323, align 2, !tbaa !40
  %13325 = insertelement <8 x i16> %13320, i16 %13324, i64 4
  %13326 = extractelement <8 x i32> %13300, i64 5
  %13327 = sext i32 %13326 to i64
  %13328 = getelementptr inbounds i16, ptr %input.host, i64 %13327
  %13329 = load i16, ptr %13328, align 2, !tbaa !40
  %13330 = insertelement <8 x i16> %13325, i16 %13329, i64 5
  %13331 = extractelement <8 x i32> %13300, i64 6
  %13332 = sext i32 %13331 to i64
  %13333 = getelementptr inbounds i16, ptr %input.host, i64 %13332
  %13334 = load i16, ptr %13333, align 2, !tbaa !40
  %13335 = insertelement <8 x i16> %13330, i16 %13334, i64 6
  %13336 = extractelement <8 x i32> %13300, i64 7
  %13337 = sext i32 %13336 to i64
  %13338 = getelementptr inbounds i16, ptr %input.host, i64 %13337
  %13339 = load i16, ptr %13338, align 2, !tbaa !40
  %13340 = insertelement <8 x i16> %13335, i16 %13339, i64 7
  %13341 = uitofp <8 x i16> %13340 to <8 x float>
  %13342 = fmul <8 x float> %13341, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %13343 = fadd <8 x float> %13342, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %13344 = fmul <8 x float> %13295, %13343
  %a1143 = fdiv <8 x float> %13344, %13289
  %13345 = fcmp olt <8 x float> %a1143, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1142 = select <8 x i1> %13345, <8 x float> %a1143, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13346 = fcmp ogt <8 x float> %a1142, zeroinitializer
  %13347 = select <8 x i1> %13346, <8 x float> %a1142, <8 x float> zeroinitializer
  %13348 = fmul <8 x float> %13347, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %13349 = fptoui <8 x float> %13348 to <8 x i16>
  store <8 x i16> %13349, ptr %lsr.iv449, align 2, !tbaa !74
  %13350 = add nsw i32 %a1145, 1
  %lsr.iv.next445 = add i32 %lsr.iv444, -1
  %scevgep451 = getelementptr i1, ptr %lsr.iv449, i64 %10053
  %.not84 = icmp eq i32 %lsr.iv.next445, 0
  br i1 %.not84, label %"end for local_laplacian.s0.v5200", label %"for local_laplacian.s0.v5199"

"end for local_laplacian.s0.v5200":               ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v3.v3195"
  %13351 = add nuw nsw i32 %local_laplacian.s0.v3.v3197, 1
  %.not83 = icmp eq i32 %13351, %10144
  br i1 %.not83, label %if.then.i283, label %"for local_laplacian.s0.v3.v3195"
}

; Function Attrs: nounwind
define i32 @local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr #4 {
entry:
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %0 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %destructor_block

"assert succeeded":                               ; preds = %entry
  %.not1 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not1, label %"assert failed10", label %"assert succeeded11", !prof !4

destructor_block:                                 ; preds = %"assert succeeded11", %"assert failed10", %"assert failed"
  %1 = phi i32 [ %0, %"assert failed" ], [ %2, %"assert failed10" ], [ %__local_laplacian_result, %"assert succeeded11" ]
  ret i32 %1

"assert failed10":                                ; preds = %"assert succeeded"
  %2 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %destructor_block

"assert succeeded11":                             ; preds = %"assert succeeded"
  %__local_laplacian_result = tail call i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr nonnull %input.buffer, ptr nonnull %local_laplacian.buffer) #4
  br label %destructor_block
}

; Function Attrs: nounwind
define i32 @local_laplacian_argv(ptr nocapture readonly %0) local_unnamed_addr #4 {
entry:
  %1 = load ptr, ptr %0, align 8
  %2 = load i32, ptr %1, align 4
  %3 = getelementptr ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8
  %5 = load float, ptr %4, align 4
  %6 = getelementptr ptr, ptr %0, i64 2
  %7 = load ptr, ptr %6, align 8
  %8 = load float, ptr %7, align 4
  %9 = getelementptr ptr, ptr %0, i64 3
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %0, i64 4
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 @local_laplacian(i32 %2, float %5, float %8, ptr %10, ptr %12) #9
  ret i32 %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define nonnull ptr @local_laplacian_metadata() local_unnamed_addr #5 {
entry:
  ret ptr @local_laplacian_metadata_storage
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smin.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smax.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smin.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smax.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #6

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #3 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #4 = { nounwind }
attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nobuiltin nounwind }
attributes #8 = { nounwind memory(none) }
attributes #9 = { noinline }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 3.9.1 "}
!1 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!2 = !{i32 2, !"halide_mcpu", !"haswell"}
!3 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!4 = !{!"branch_weights", i32 0, i32 1073741824}
!5 = !{!"branch_weights", i32 1073741824, i32 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"f0", !8, i64 0}
!8 = !{!"Halide buffer"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !11, !10}
!13 = !{!14, !14, i64 0}
!14 = !{!"f75", !8, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"f76", !8, i64 0}
!17 = distinct !{!17, !10, !11}
!18 = distinct !{!18, !10}
!19 = !{!20, !20, i64 0}
!20 = !{!"f77", !8, i64 0}
!21 = distinct !{!21, !10, !11}
!22 = distinct !{!22, !10}
!23 = !{!24, !24, i64 0}
!24 = !{!"f78", !8, i64 0}
!25 = distinct !{!25, !10, !11}
!26 = distinct !{!26, !10}
!27 = !{!"branch_weights", i32 0, i32 -2147483648}
!28 = !{!29, !29, i64 0}
!29 = !{!"f10", !8, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"f132", !8, i64 0}
!32 = !{!33, !33, i64 0}
!33 = !{!"f9", !8, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"f131", !8, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"f8", !8, i64 0}
!38 = !{!39, !39, i64 0}
!39 = !{!"f130", !8, i64 0}
!40 = !{!41, !41, i64 0}
!41 = !{!"input", !8, i64 0}
!42 = !{!43, !43, i64 0}
!43 = !{!"f2", !8, i64 0}
!44 = !{!45, !45, i64 0}
!45 = !{!"f4", !8, i64 0}
!46 = !{!47, !47, i64 0}
!47 = !{!"f5", !8, i64 0}
!48 = !{!49, !49, i64 0}
!49 = !{!"f72", !8, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"f6", !8, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"f73", !8, i64 0}
!54 = !{!55, !55, i64 0}
!55 = !{!"f7", !8, i64 0}
!56 = !{!57, !57, i64 0}
!57 = !{!"f74", !8, i64 0}
!58 = distinct !{!58, !10, !11}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !10, !11}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !10, !11}
!63 = distinct !{!63, !10}
!64 = !{!65, !65, i64 0}
!65 = !{!"f129", !8, i64 0}
!66 = !{!67, !67, i64 0}
!67 = !{!"f128", !8, i64 0}
!68 = !{!69, !69, i64 0}
!69 = !{!"f127", !8, i64 0}
!70 = !{!71, !71, i64 0}
!71 = !{!"f126", !8, i64 0}
!72 = !{!73, !73, i64 0}
!73 = !{!"f125", !8, i64 0}
!74 = !{!75, !75, i64 0}
!75 = !{!"local_laplacian", !8, i64 0}
