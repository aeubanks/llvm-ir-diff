; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/Bitcode/Benchmarks/Halide/local_laplacian/local_laplacian.bc'
source_filename = "/usr/local/google/home/asbirlea/Halide/Halide/src/runtime/destructors.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.halide_filter_argument_t = type { ptr, i32, i32, %struct.halide_type_t, ptr, ptr, ptr }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_filter_metadata_t = type { i32, i32, ptr, ptr, ptr }
%closure_t.11 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t.10 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.9 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.8 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.7 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.6 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.5 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.4 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.3 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.1 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.0 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%struct.buffer_t = type { i64, ptr, [4 x i32], [4 x i32], [4 x i32], i32, i8, i8, [2 x i8] }

@str = private constant [6 x i8] c"input\00", align 32
@str.2 = private constant [16 x i8] c"local_laplacian\00", align 32
@str.3 = private constant [19 x i8] c"Input buffer input\00", align 32
@str.4 = private constant [7 x i8] c"uint16\00", align 32
@str.5 = private constant [30 x i8] c"Output buffer local_laplacian\00", align 32
@str.6 = private constant [15 x i8] c"input.stride.0\00", align 32
@str.7 = private constant [2 x i8] c"1\00", align 32
@str.8 = private constant [25 x i8] c"local_laplacian.stride.0\00", align 32
@str.9 = private constant [3 x i8] c"f0\00", align 32
@str.10 = private constant [3 x i8] c"f2\00", align 32
@str.11 = private constant [3 x i8] c"f4\00", align 32
@str.12 = private constant [3 x i8] c"f5\00", align 32
@str.13 = private constant [4 x i8] c"f72\00", align 32
@str.14 = private constant [3 x i8] c"f6\00", align 32
@str.15 = private constant [4 x i8] c"f73\00", align 32
@str.16 = private constant [3 x i8] c"f7\00", align 32
@str.17 = private constant [4 x i8] c"f74\00", align 32
@str.18 = private constant [3 x i8] c"f8\00", align 32
@str.19 = private constant [4 x i8] c"f75\00", align 32
@str.20 = private constant [3 x i8] c"f9\00", align 32
@str.21 = private constant [4 x i8] c"f76\00", align 32
@str.22 = private constant [4 x i8] c"f10\00", align 32
@str.23 = private constant [4 x i8] c"f77\00", align 32
@str.24 = private constant [4 x i8] c"f78\00", align 32
@str.26 = private constant [5 x i8] c"f131\00", align 32
@str.27 = private constant [5 x i8] c"f130\00", align 32
@str.28 = private constant [5 x i8] c"f129\00", align 32
@str.29 = private constant [5 x i8] c"f128\00", align 32
@str.30 = private constant [5 x i8] c"f127\00", align 32
@str.31 = private constant [5 x i8] c"f126\00", align 32
@str.32 = private constant [5 x i8] c"f125\00", align 32
@str.33 = private constant [7 x i8] c"levels\00", align 32
@0 = private constant i32 0
@str.34 = private constant [6 x i8] c"alpha\00", align 32
@1 = private constant float 0.000000e+00
@str.35 = private constant [5 x i8] c"beta\00", align 32
@2 = private constant float 0.000000e+00
@3 = private constant [5 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { ptr @str.33, i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, ptr @0, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.34, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @1, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.35, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @2, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str, i32 1, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.2, i32 2, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }]
@str.36 = private constant [48 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_runtime-sse41\00", align 32
@local_laplacian_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 0, i32 5, ptr @3, ptr @str.36, ptr @str.2 }

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #0

declare i32 @halide_do_par_for(ptr, ptr, i32, i32, ptr noalias) local_unnamed_addr #1

declare i32 @halide_error_access_out_of_bounds(ptr, ptr, i32, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_bad_elem_size(ptr, ptr, ptr, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_buffer_allocation_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_buffer_argument_is_null(ptr, ptr) local_unnamed_addr #1

declare i32 @halide_error_buffer_extents_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_constraint_violated(ptr, ptr, i32, ptr, i32) local_unnamed_addr #1

declare i32 @halide_error_out_of_memory(ptr) local_unnamed_addr #1

declare void @halide_free(ptr, ptr) local_unnamed_addr #1

declare noalias ptr @halide_malloc(ptr, i64) local_unnamed_addr #1

define i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr {
entry:
  %0 = alloca %closure_t.11, align 8
  %1 = alloca %closure_t.10, align 8
  %2 = alloca %closure_t.9, align 8
  %3 = alloca %closure_t.8, align 8
  %4 = alloca %closure_t.7, align 8
  %5 = alloca %closure_t.6, align 8
  %6 = alloca %closure_t.5, align 8
  %7 = alloca %closure_t.4, align 8
  %8 = alloca %closure_t.3, align 8
  %9 = alloca %closure_t.2, align 8
  %10 = alloca %closure_t.1, align 8
  %11 = alloca %closure_t.0, align 8
  %12 = alloca %closure_t, align 8
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %13 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %call_destructor.exit210.thread374

"assert succeeded":                               ; preds = %entry
  %buf_host = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 1
  %input.host = load ptr, ptr %buf_host, align 8
  %buf_extent = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 0
  %input.extent.0 = load i32, ptr %buf_extent, align 4
  %x1 = sext i32 %input.extent.0 to i64
  %buf_extent1 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 1
  %buf_extent2 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 2
  %buf_extent3 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 3
  %buf_stride = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 0
  %input.stride.0 = load i32, ptr %buf_stride, align 4
  %buf_stride4 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 1
  %input.stride.1 = load i32, ptr %buf_stride4, align 4
  %14 = sext i32 %input.stride.1 to i64
  %buf_stride5 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 2
  %input.stride.2 = load i32, ptr %buf_stride5, align 4
  %15 = sext i32 %input.stride.2 to i64
  %buf_stride6 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 3
  %buf_min = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 0
  %buf_min7 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 1
  %16 = load <2 x i32>, ptr %buf_extent1, align 4
  %17 = extractelement <2 x i32> %16, i64 0
  %18 = sext i32 %17 to i64
  %19 = extractelement <2 x i32> %16, i64 1
  %20 = sext i32 %19 to i64
  %21 = load <2 x i32>, ptr %buf_min, align 4
  %buf_min8 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 2
  %b108 = load i32, ptr %buf_min8, align 4
  %buf_min9 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 3
  %buf_elem_size = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 5
  %input.elem_size = load i32, ptr %buf_elem_size, align 4
  %.not101 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not101, label %"assert failed10", label %"assert succeeded11", !prof !4

call_destructor.exit:                             ; preds = %"assert failed197", %"assert failed195"
  %.ph = phi i32 [ %1765, %"assert failed195" ], [ %1768, %"assert failed197" ]
  %.not100191 = icmp eq i32 %.ph, 0
  br i1 %.not100191, label %call_destructor.exit290, label %call_destructor.exit225.sink.split

call_destructor.exit205:                          ; preds = %"assert failed191", %"assert failed193"
  %.ph.ph = phi i32 [ %1614, %"assert failed193" ], [ %1611, %"assert failed191" ]
  %.not100191273 = icmp eq i32 %.ph.ph, 0
  br i1 %.not100191273, label %call_destructor.exit215, label %if.then.i209

if.then.i209:                                     ; preds = %call_destructor.exit205
  call void @halide_free(ptr null, ptr nonnull %1595) #7
  br label %call_destructor.exit215

call_destructor.exit210.thread374:                ; preds = %after_bb, %"assert failed", %"assert failed10", %"assert failed61", %"assert failed63", %"assert failed65", %"assert failed67", %"assert failed69", %"assert failed71", %"assert failed73", %"assert failed75", %"assert failed77", %"assert failed79", %"assert failed81", %"assert failed83", %"assert failed85", %"assert failed87", %"assert failed89", %"assert failed91", %"assert failed93", %"assert failed95", %"assert failed97", %"assert failed99", %"assert failed101", %"assert failed103", %"assert failed105", %"produce f2", %"assert failed109", %"assert failed111", %"produce f4", %"assert failed115", %"assert failed117", %"produce f5", %"assert failed121", %"assert failed123", %"produce f72", %"assert failed127", %"assert failed129", %"produce f6", %"assert failed133", %"assert failed135", %"produce f73", %"assert failed139", %"assert failed141", %"produce f7", %"assert failed145", %"assert failed147", %"produce f74", %"assert failed151", %"assert failed153", %"produce f8", %"assert failed157", %"assert failed159", %"produce f75", %"assert failed163", %"assert failed165", %"produce f9", %"assert failed169", %"assert failed171", %"assert failed173", %"assert failed175", %"produce f10", %"assert failed179", %"assert failed181", %"assert failed183", %"assert failed185", %if.then.i292, %after_bb44.thread
  %.051.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %1196, %"assert failed185" ], [ %1196, %"assert failed183" ], [ null, %"assert failed181" ], [ null, %"assert failed179" ], [ null, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.050.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %1162, %"assert failed185" ], [ %1162, %"assert failed183" ], [ %1162, %"assert failed181" ], [ %1162, %"assert failed179" ], [ %1162, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.049.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %955, %"assert failed185" ], [ %955, %"assert failed183" ], [ %955, %"assert failed181" ], [ %955, %"assert failed179" ], [ %955, %"produce f10" ], [ %955, %"assert failed175" ], [ %955, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.048.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %918, %"assert failed185" ], [ %918, %"assert failed183" ], [ %918, %"assert failed181" ], [ %918, %"assert failed179" ], [ %918, %"produce f10" ], [ %918, %"assert failed175" ], [ %918, %"assert failed173" ], [ %918, %"assert failed171" ], [ %918, %"assert failed169" ], [ %918, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.047.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %876, %"assert failed185" ], [ %876, %"assert failed183" ], [ %876, %"assert failed181" ], [ %876, %"assert failed179" ], [ %876, %"produce f10" ], [ %876, %"assert failed175" ], [ %876, %"assert failed173" ], [ %876, %"assert failed171" ], [ %876, %"assert failed169" ], [ %876, %"produce f9" ], [ %876, %"assert failed165" ], [ %876, %"assert failed163" ], [ %876, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.046.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %836, %"assert failed185" ], [ %836, %"assert failed183" ], [ %836, %"assert failed181" ], [ %836, %"assert failed179" ], [ %836, %"produce f10" ], [ %836, %"assert failed175" ], [ %836, %"assert failed173" ], [ %836, %"assert failed171" ], [ %836, %"assert failed169" ], [ %836, %"produce f9" ], [ %836, %"assert failed165" ], [ %836, %"assert failed163" ], [ %836, %"produce f75" ], [ %836, %"assert failed159" ], [ %836, %"assert failed157" ], [ %836, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.045.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %790, %"assert failed185" ], [ %790, %"assert failed183" ], [ %790, %"assert failed181" ], [ %790, %"assert failed179" ], [ %790, %"produce f10" ], [ %790, %"assert failed175" ], [ %790, %"assert failed173" ], [ %790, %"assert failed171" ], [ %790, %"assert failed169" ], [ %790, %"produce f9" ], [ %790, %"assert failed165" ], [ %790, %"assert failed163" ], [ %790, %"produce f75" ], [ %790, %"assert failed159" ], [ %790, %"assert failed157" ], [ %790, %"produce f8" ], [ %790, %"assert failed153" ], [ %790, %"assert failed151" ], [ %790, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.044.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %734, %"assert failed185" ], [ %734, %"assert failed183" ], [ %734, %"assert failed181" ], [ %734, %"assert failed179" ], [ %734, %"produce f10" ], [ %734, %"assert failed175" ], [ %734, %"assert failed173" ], [ %734, %"assert failed171" ], [ %734, %"assert failed169" ], [ %734, %"produce f9" ], [ %734, %"assert failed165" ], [ %734, %"assert failed163" ], [ %734, %"produce f75" ], [ %734, %"assert failed159" ], [ %734, %"assert failed157" ], [ %734, %"produce f8" ], [ %734, %"assert failed153" ], [ %734, %"assert failed151" ], [ %734, %"produce f74" ], [ %734, %"assert failed147" ], [ %734, %"assert failed145" ], [ %734, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.043.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %681, %"assert failed185" ], [ %681, %"assert failed183" ], [ %681, %"assert failed181" ], [ %681, %"assert failed179" ], [ %681, %"produce f10" ], [ %681, %"assert failed175" ], [ %681, %"assert failed173" ], [ %681, %"assert failed171" ], [ %681, %"assert failed169" ], [ %681, %"produce f9" ], [ %681, %"assert failed165" ], [ %681, %"assert failed163" ], [ %681, %"produce f75" ], [ %681, %"assert failed159" ], [ %681, %"assert failed157" ], [ %681, %"produce f8" ], [ %681, %"assert failed153" ], [ %681, %"assert failed151" ], [ %681, %"produce f74" ], [ %681, %"assert failed147" ], [ %681, %"assert failed145" ], [ %681, %"produce f7" ], [ %681, %"assert failed141" ], [ %681, %"assert failed139" ], [ %681, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.042.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %625, %"assert failed185" ], [ %625, %"assert failed183" ], [ %625, %"assert failed181" ], [ %625, %"assert failed179" ], [ %625, %"produce f10" ], [ %625, %"assert failed175" ], [ %625, %"assert failed173" ], [ %625, %"assert failed171" ], [ %625, %"assert failed169" ], [ %625, %"produce f9" ], [ %625, %"assert failed165" ], [ %625, %"assert failed163" ], [ %625, %"produce f75" ], [ %625, %"assert failed159" ], [ %625, %"assert failed157" ], [ %625, %"produce f8" ], [ %625, %"assert failed153" ], [ %625, %"assert failed151" ], [ %625, %"produce f74" ], [ %625, %"assert failed147" ], [ %625, %"assert failed145" ], [ %625, %"produce f7" ], [ %625, %"assert failed141" ], [ %625, %"assert failed139" ], [ %625, %"produce f73" ], [ %625, %"assert failed135" ], [ %625, %"assert failed133" ], [ %625, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.041.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %556, %"assert failed185" ], [ %556, %"assert failed183" ], [ %556, %"assert failed181" ], [ %556, %"assert failed179" ], [ %556, %"produce f10" ], [ %556, %"assert failed175" ], [ %556, %"assert failed173" ], [ %556, %"assert failed171" ], [ %556, %"assert failed169" ], [ %556, %"produce f9" ], [ %556, %"assert failed165" ], [ %556, %"assert failed163" ], [ %556, %"produce f75" ], [ %556, %"assert failed159" ], [ %556, %"assert failed157" ], [ %556, %"produce f8" ], [ %556, %"assert failed153" ], [ %556, %"assert failed151" ], [ %556, %"produce f74" ], [ %556, %"assert failed147" ], [ %556, %"assert failed145" ], [ %556, %"produce f7" ], [ %556, %"assert failed141" ], [ %556, %"assert failed139" ], [ %556, %"produce f73" ], [ %556, %"assert failed135" ], [ %556, %"assert failed133" ], [ %556, %"produce f6" ], [ %556, %"assert failed129" ], [ %556, %"assert failed127" ], [ %556, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.040.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %500, %"assert failed185" ], [ %500, %"assert failed183" ], [ %500, %"assert failed181" ], [ %500, %"assert failed179" ], [ %500, %"produce f10" ], [ %500, %"assert failed175" ], [ %500, %"assert failed173" ], [ %500, %"assert failed171" ], [ %500, %"assert failed169" ], [ %500, %"produce f9" ], [ %500, %"assert failed165" ], [ %500, %"assert failed163" ], [ %500, %"produce f75" ], [ %500, %"assert failed159" ], [ %500, %"assert failed157" ], [ %500, %"produce f8" ], [ %500, %"assert failed153" ], [ %500, %"assert failed151" ], [ %500, %"produce f74" ], [ %500, %"assert failed147" ], [ %500, %"assert failed145" ], [ %500, %"produce f7" ], [ %500, %"assert failed141" ], [ %500, %"assert failed139" ], [ %500, %"produce f73" ], [ %500, %"assert failed135" ], [ %500, %"assert failed133" ], [ %500, %"produce f6" ], [ %500, %"assert failed129" ], [ %500, %"assert failed127" ], [ %500, %"produce f72" ], [ %500, %"assert failed123" ], [ %500, %"assert failed121" ], [ %500, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.039.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %421, %"assert failed185" ], [ %421, %"assert failed183" ], [ %421, %"assert failed181" ], [ %421, %"assert failed179" ], [ %421, %"produce f10" ], [ %421, %"assert failed175" ], [ %421, %"assert failed173" ], [ %421, %"assert failed171" ], [ %421, %"assert failed169" ], [ %421, %"produce f9" ], [ %421, %"assert failed165" ], [ %421, %"assert failed163" ], [ %421, %"produce f75" ], [ %421, %"assert failed159" ], [ %421, %"assert failed157" ], [ %421, %"produce f8" ], [ %421, %"assert failed153" ], [ %421, %"assert failed151" ], [ %421, %"produce f74" ], [ %421, %"assert failed147" ], [ %421, %"assert failed145" ], [ %421, %"produce f7" ], [ %421, %"assert failed141" ], [ %421, %"assert failed139" ], [ %421, %"produce f73" ], [ %421, %"assert failed135" ], [ %421, %"assert failed133" ], [ %421, %"produce f6" ], [ %421, %"assert failed129" ], [ %421, %"assert failed127" ], [ %421, %"produce f72" ], [ %421, %"assert failed123" ], [ %421, %"assert failed121" ], [ %421, %"produce f5" ], [ %421, %"assert failed117" ], [ %421, %"assert failed115" ], [ %421, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.038.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %338, %"assert failed185" ], [ %338, %"assert failed183" ], [ %338, %"assert failed181" ], [ %338, %"assert failed179" ], [ %338, %"produce f10" ], [ %338, %"assert failed175" ], [ %338, %"assert failed173" ], [ %338, %"assert failed171" ], [ %338, %"assert failed169" ], [ %338, %"produce f9" ], [ %338, %"assert failed165" ], [ %338, %"assert failed163" ], [ %338, %"produce f75" ], [ %338, %"assert failed159" ], [ %338, %"assert failed157" ], [ %338, %"produce f8" ], [ %338, %"assert failed153" ], [ %338, %"assert failed151" ], [ %338, %"produce f74" ], [ %338, %"assert failed147" ], [ %338, %"assert failed145" ], [ %338, %"produce f7" ], [ %338, %"assert failed141" ], [ %338, %"assert failed139" ], [ %338, %"produce f73" ], [ %338, %"assert failed135" ], [ %338, %"assert failed133" ], [ %338, %"produce f6" ], [ %338, %"assert failed129" ], [ %338, %"assert failed127" ], [ %338, %"produce f72" ], [ %338, %"assert failed123" ], [ %338, %"assert failed121" ], [ %338, %"produce f5" ], [ %338, %"assert failed117" ], [ %338, %"assert failed115" ], [ %338, %"produce f4" ], [ %338, %"assert failed111" ], [ %338, %"assert failed109" ], [ %338, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.0.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %209, %"assert failed185" ], [ %209, %"assert failed183" ], [ %209, %"assert failed181" ], [ %209, %"assert failed179" ], [ %209, %"produce f10" ], [ %209, %"assert failed175" ], [ %209, %"assert failed173" ], [ %209, %"assert failed171" ], [ %209, %"assert failed169" ], [ %209, %"produce f9" ], [ %209, %"assert failed165" ], [ %209, %"assert failed163" ], [ %209, %"produce f75" ], [ %209, %"assert failed159" ], [ %209, %"assert failed157" ], [ %209, %"produce f8" ], [ %209, %"assert failed153" ], [ %209, %"assert failed151" ], [ %209, %"produce f74" ], [ %209, %"assert failed147" ], [ %209, %"assert failed145" ], [ %209, %"produce f7" ], [ %209, %"assert failed141" ], [ %209, %"assert failed139" ], [ %209, %"produce f73" ], [ %209, %"assert failed135" ], [ %209, %"assert failed133" ], [ %209, %"produce f6" ], [ %209, %"assert failed129" ], [ %209, %"assert failed127" ], [ %209, %"produce f72" ], [ %209, %"assert failed123" ], [ %209, %"assert failed121" ], [ %209, %"produce f5" ], [ %209, %"assert failed117" ], [ %209, %"assert failed115" ], [ %209, %"produce f4" ], [ %209, %"assert failed111" ], [ %209, %"assert failed109" ], [ %209, %"produce f2" ], [ %209, %"assert failed105" ], [ %209, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.ph.ph.ph.ph = phi i32 [ 0, %if.then.i292 ], [ %1381, %"assert failed185" ], [ %1378, %"assert failed183" ], [ %1197, %"assert failed181" ], [ %1194, %"assert failed179" ], [ %1177, %"produce f10" ], [ %1163, %"assert failed175" ], [ %1160, %"assert failed173" ], [ %956, %"assert failed171" ], [ %953, %"assert failed169" ], [ %936, %"produce f9" ], [ %919, %"assert failed165" ], [ %916, %"assert failed163" ], [ %892, %"produce f75" ], [ %877, %"assert failed159" ], [ %874, %"assert failed157" ], [ %855, %"produce f8" ], [ %837, %"assert failed153" ], [ %834, %"assert failed151" ], [ %806, %"produce f74" ], [ %791, %"assert failed147" ], [ %788, %"assert failed145" ], [ %754, %"produce f7" ], [ %735, %"assert failed141" ], [ %732, %"assert failed139" ], [ %697, %"produce f73" ], [ %682, %"assert failed135" ], [ %679, %"assert failed133" ], [ %645, %"produce f6" ], [ %626, %"assert failed129" ], [ %623, %"assert failed127" ], [ %573, %"produce f72" ], [ %557, %"assert failed123" ], [ %554, %"assert failed121" ], [ %520, %"produce f5" ], [ %501, %"assert failed117" ], [ %498, %"assert failed115" ], [ %446, %"produce f4" ], [ %422, %"assert failed111" ], [ %419, %"assert failed109" ], [ %367, %"produce f2" ], [ %339, %"assert failed105" ], [ %336, %"assert failed103" ], [ %210, %"assert failed101" ], [ %207, %"assert failed99" ], [ %200, %"assert failed97" ], [ %197, %"assert failed95" ], [ %194, %"assert failed93" ], [ %192, %"assert failed91" ], [ %189, %"assert failed89" ], [ %186, %"assert failed87" ], [ %183, %"assert failed85" ], [ %180, %"assert failed83" ], [ %178, %"assert failed81" ], [ %175, %"assert failed79" ], [ %172, %"assert failed77" ], [ %170, %"assert failed75" ], [ %168, %"assert failed73" ], [ %164, %"assert failed71" ], [ %160, %"assert failed69" ], [ %158, %"assert failed67" ], [ %156, %"assert failed65" ], [ %154, %"assert failed63" ], [ %152, %"assert failed61" ], [ %27, %"assert failed10" ], [ %13, %"assert failed" ], [ 0, %after_bb44.thread ], [ 0, %after_bb ]
  %.not100191273334392 = icmp eq i32 %.ph.ph.ph.ph, 0
  br label %call_destructor.exit215

call_destructor.exit210:                          ; preds = %"assert succeeded188.thread846", %"assert succeeded188.thread", %"assert succeeded188"
  %22 = call i32 @halide_error_out_of_memory(ptr null) #4
  %.not100191273334 = icmp eq i32 %22, 0
  br i1 %.not100191273334, label %call_destructor.exit290, label %if.then.i214

if.then.i214:                                     ; preds = %call_destructor.exit210
  call void @halide_free(ptr null, ptr nonnull %1380) #7
  br label %call_destructor.exit215

call_destructor.exit215:                          ; preds = %call_destructor.exit205, %if.then.i209, %call_destructor.exit210.thread374, %if.then.i214
  %.051197249298372 = phi ptr [ %1196, %if.then.i214 ], [ %.051.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1196, %call_destructor.exit205 ], [ %1196, %if.then.i209 ]
  %.050198248299371 = phi ptr [ %1162, %if.then.i214 ], [ %.050.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1162, %call_destructor.exit205 ], [ %1162, %if.then.i209 ]
  %.049199247300370 = phi ptr [ %955, %if.then.i214 ], [ %.049.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %955, %call_destructor.exit205 ], [ %955, %if.then.i209 ]
  %.048200246301369 = phi ptr [ %918, %if.then.i214 ], [ %.048.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %918, %call_destructor.exit205 ], [ %918, %if.then.i209 ]
  %.047201245302368 = phi ptr [ %876, %if.then.i214 ], [ %.047.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %876, %call_destructor.exit205 ], [ %876, %if.then.i209 ]
  %.046202244303367 = phi ptr [ %836, %if.then.i214 ], [ %.046.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %836, %call_destructor.exit205 ], [ %836, %if.then.i209 ]
  %.045203243304366 = phi ptr [ %790, %if.then.i214 ], [ %.045.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %790, %call_destructor.exit205 ], [ %790, %if.then.i209 ]
  %.044204242305365 = phi ptr [ %734, %if.then.i214 ], [ %.044.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %734, %call_destructor.exit205 ], [ %734, %if.then.i209 ]
  %.043205241306364 = phi ptr [ %681, %if.then.i214 ], [ %.043.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %681, %call_destructor.exit205 ], [ %681, %if.then.i209 ]
  %.042206240307363 = phi ptr [ %625, %if.then.i214 ], [ %.042.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %625, %call_destructor.exit205 ], [ %625, %if.then.i209 ]
  %.041207239308362 = phi ptr [ %556, %if.then.i214 ], [ %.041.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %556, %call_destructor.exit205 ], [ %556, %if.then.i209 ]
  %.040208238309361 = phi ptr [ %500, %if.then.i214 ], [ %.040.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %500, %call_destructor.exit205 ], [ %500, %if.then.i209 ]
  %.039209237310360 = phi ptr [ %421, %if.then.i214 ], [ %.039.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %421, %call_destructor.exit205 ], [ %421, %if.then.i209 ]
  %.038210236311359 = phi ptr [ %338, %if.then.i214 ], [ %.038.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %338, %call_destructor.exit205 ], [ %338, %if.then.i209 ]
  %.0211235312358 = phi ptr [ %209, %if.then.i214 ], [ %.0.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %209, %call_destructor.exit205 ], [ %209, %if.then.i209 ]
  %23 = phi i32 [ %22, %if.then.i214 ], [ %.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %.ph.ph, %call_destructor.exit205 ], [ %.ph.ph, %if.then.i209 ]
  %.not100212234313357 = phi i1 [ false, %if.then.i214 ], [ %.not100191273334392, %call_destructor.exit210.thread374 ], [ %.not100191273, %call_destructor.exit205 ], [ false, %if.then.i209 ]
  %tobool.i216 = icmp eq ptr %.051197249298372, null
  %brmerge.i218 = or i1 %tobool.i216, %.not100212234313357
  br i1 %brmerge.i218, label %call_destructor.exit220, label %if.then.i219

if.then.i219:                                     ; preds = %call_destructor.exit215
  call void @halide_free(ptr null, ptr nonnull %.051197249298372) #7
  br label %call_destructor.exit220

call_destructor.exit220:                          ; preds = %if.then.i219, %call_destructor.exit215
  %tobool.i221 = icmp eq ptr %.050198248299371, null
  %brmerge.i223 = or i1 %tobool.i221, %.not100212234313357
  br i1 %brmerge.i223, label %call_destructor.exit225, label %call_destructor.exit225.sink.split

call_destructor.exit225.sink.split:               ; preds = %call_destructor.exit220, %call_destructor.exit
  %.sink = phi ptr [ %1613, %call_destructor.exit ], [ %.050198248299371, %call_destructor.exit220 ]
  %.049199247300370415459.ph = phi ptr [ %955, %call_destructor.exit ], [ %.049199247300370, %call_destructor.exit220 ]
  %.048200246301369416458.ph = phi ptr [ %918, %call_destructor.exit ], [ %.048200246301369, %call_destructor.exit220 ]
  %.047201245302368417457.ph = phi ptr [ %876, %call_destructor.exit ], [ %.047201245302368, %call_destructor.exit220 ]
  %.046202244303367418456.ph = phi ptr [ %836, %call_destructor.exit ], [ %.046202244303367, %call_destructor.exit220 ]
  %.045203243304366419455.ph = phi ptr [ %790, %call_destructor.exit ], [ %.045203243304366, %call_destructor.exit220 ]
  %.044204242305365420454.ph = phi ptr [ %734, %call_destructor.exit ], [ %.044204242305365, %call_destructor.exit220 ]
  %.043205241306364421453.ph = phi ptr [ %681, %call_destructor.exit ], [ %.043205241306364, %call_destructor.exit220 ]
  %.042206240307363422452.ph = phi ptr [ %625, %call_destructor.exit ], [ %.042206240307363, %call_destructor.exit220 ]
  %.041207239308362423451.ph = phi ptr [ %556, %call_destructor.exit ], [ %.041207239308362, %call_destructor.exit220 ]
  %.040208238309361424450.ph = phi ptr [ %500, %call_destructor.exit ], [ %.040208238309361, %call_destructor.exit220 ]
  %.039209237310360425449.ph = phi ptr [ %421, %call_destructor.exit ], [ %.039209237310360, %call_destructor.exit220 ]
  %.038210236311359426448.ph = phi ptr [ %338, %call_destructor.exit ], [ %.038210236311359, %call_destructor.exit220 ]
  %.0211235312358427447.ph = phi ptr [ %209, %call_destructor.exit ], [ %.0211235312358, %call_destructor.exit220 ]
  %.ph848 = phi i32 [ %.ph, %call_destructor.exit ], [ %23, %call_destructor.exit220 ]
  call void @halide_free(ptr null, ptr nonnull %.sink) #7
  br label %call_destructor.exit225

call_destructor.exit225:                          ; preds = %call_destructor.exit225.sink.split, %call_destructor.exit220
  %.049199247300370415459 = phi ptr [ %.049199247300370, %call_destructor.exit220 ], [ %.049199247300370415459.ph, %call_destructor.exit225.sink.split ]
  %.048200246301369416458 = phi ptr [ %.048200246301369, %call_destructor.exit220 ], [ %.048200246301369416458.ph, %call_destructor.exit225.sink.split ]
  %.047201245302368417457 = phi ptr [ %.047201245302368, %call_destructor.exit220 ], [ %.047201245302368417457.ph, %call_destructor.exit225.sink.split ]
  %.046202244303367418456 = phi ptr [ %.046202244303367, %call_destructor.exit220 ], [ %.046202244303367418456.ph, %call_destructor.exit225.sink.split ]
  %.045203243304366419455 = phi ptr [ %.045203243304366, %call_destructor.exit220 ], [ %.045203243304366419455.ph, %call_destructor.exit225.sink.split ]
  %.044204242305365420454 = phi ptr [ %.044204242305365, %call_destructor.exit220 ], [ %.044204242305365420454.ph, %call_destructor.exit225.sink.split ]
  %.043205241306364421453 = phi ptr [ %.043205241306364, %call_destructor.exit220 ], [ %.043205241306364421453.ph, %call_destructor.exit225.sink.split ]
  %.042206240307363422452 = phi ptr [ %.042206240307363, %call_destructor.exit220 ], [ %.042206240307363422452.ph, %call_destructor.exit225.sink.split ]
  %.041207239308362423451 = phi ptr [ %.041207239308362, %call_destructor.exit220 ], [ %.041207239308362423451.ph, %call_destructor.exit225.sink.split ]
  %.040208238309361424450 = phi ptr [ %.040208238309361, %call_destructor.exit220 ], [ %.040208238309361424450.ph, %call_destructor.exit225.sink.split ]
  %.039209237310360425449 = phi ptr [ %.039209237310360, %call_destructor.exit220 ], [ %.039209237310360425449.ph, %call_destructor.exit225.sink.split ]
  %.038210236311359426448 = phi ptr [ %.038210236311359, %call_destructor.exit220 ], [ %.038210236311359426448.ph, %call_destructor.exit225.sink.split ]
  %.0211235312358427447 = phi ptr [ %.0211235312358, %call_destructor.exit220 ], [ %.0211235312358427447.ph, %call_destructor.exit225.sink.split ]
  %24 = phi i32 [ %23, %call_destructor.exit220 ], [ %.ph848, %call_destructor.exit225.sink.split ]
  %.not100212234313357428446 = phi i1 [ %.not100212234313357, %call_destructor.exit220 ], [ false, %call_destructor.exit225.sink.split ]
  %tobool.i226 = icmp eq ptr %.049199247300370415459, null
  %brmerge.i228 = or i1 %tobool.i226, %.not100212234313357428446
  br i1 %brmerge.i228, label %call_destructor.exit230, label %if.then.i229

if.then.i229:                                     ; preds = %call_destructor.exit225
  call void @halide_free(ptr null, ptr nonnull %.049199247300370415459) #7
  br label %call_destructor.exit230

call_destructor.exit230:                          ; preds = %if.then.i229, %call_destructor.exit225
  %tobool.i231 = icmp eq ptr %.048200246301369416458, null
  %brmerge.i233 = or i1 %tobool.i231, %.not100212234313357428446
  br i1 %brmerge.i233, label %call_destructor.exit235, label %call_destructor.exit235.sink.split

call_destructor.exit235.sink.split:               ; preds = %call_destructor.exit230, %"produce local_laplacian"
  %.sink850 = phi ptr [ %1767, %"produce local_laplacian" ], [ %.048200246301369416458, %call_destructor.exit230 ]
  %.047201245302368417457477515.ph = phi ptr [ %876, %"produce local_laplacian" ], [ %.047201245302368417457, %call_destructor.exit230 ]
  %.046202244303367418456478514.ph = phi ptr [ %836, %"produce local_laplacian" ], [ %.046202244303367418456, %call_destructor.exit230 ]
  %.045203243304366419455479513.ph = phi ptr [ %790, %"produce local_laplacian" ], [ %.045203243304366419455, %call_destructor.exit230 ]
  %.044204242305365420454480512.ph = phi ptr [ %734, %"produce local_laplacian" ], [ %.044204242305365420454, %call_destructor.exit230 ]
  %.043205241306364421453481511.ph = phi ptr [ %681, %"produce local_laplacian" ], [ %.043205241306364421453, %call_destructor.exit230 ]
  %.042206240307363422452482510.ph = phi ptr [ %625, %"produce local_laplacian" ], [ %.042206240307363422452, %call_destructor.exit230 ]
  %.041207239308362423451483509.ph = phi ptr [ %556, %"produce local_laplacian" ], [ %.041207239308362423451, %call_destructor.exit230 ]
  %.040208238309361424450484508.ph = phi ptr [ %500, %"produce local_laplacian" ], [ %.040208238309361424450, %call_destructor.exit230 ]
  %.039209237310360425449485507.ph = phi ptr [ %421, %"produce local_laplacian" ], [ %.039209237310360425449, %call_destructor.exit230 ]
  %.038210236311359426448486506.ph = phi ptr [ %338, %"produce local_laplacian" ], [ %.038210236311359426448, %call_destructor.exit230 ]
  %.0211235312358427447487505.ph = phi ptr [ %209, %"produce local_laplacian" ], [ %.0211235312358427447, %call_destructor.exit230 ]
  %.ph849 = phi i32 [ %2010, %"produce local_laplacian" ], [ %24, %call_destructor.exit230 ]
  call void @halide_free(ptr null, ptr nonnull %.sink850) #7
  br label %call_destructor.exit235

call_destructor.exit235:                          ; preds = %call_destructor.exit235.sink.split, %call_destructor.exit230
  %.047201245302368417457477515 = phi ptr [ %.047201245302368417457, %call_destructor.exit230 ], [ %.047201245302368417457477515.ph, %call_destructor.exit235.sink.split ]
  %.046202244303367418456478514 = phi ptr [ %.046202244303367418456, %call_destructor.exit230 ], [ %.046202244303367418456478514.ph, %call_destructor.exit235.sink.split ]
  %.045203243304366419455479513 = phi ptr [ %.045203243304366419455, %call_destructor.exit230 ], [ %.045203243304366419455479513.ph, %call_destructor.exit235.sink.split ]
  %.044204242305365420454480512 = phi ptr [ %.044204242305365420454, %call_destructor.exit230 ], [ %.044204242305365420454480512.ph, %call_destructor.exit235.sink.split ]
  %.043205241306364421453481511 = phi ptr [ %.043205241306364421453, %call_destructor.exit230 ], [ %.043205241306364421453481511.ph, %call_destructor.exit235.sink.split ]
  %.042206240307363422452482510 = phi ptr [ %.042206240307363422452, %call_destructor.exit230 ], [ %.042206240307363422452482510.ph, %call_destructor.exit235.sink.split ]
  %.041207239308362423451483509 = phi ptr [ %.041207239308362423451, %call_destructor.exit230 ], [ %.041207239308362423451483509.ph, %call_destructor.exit235.sink.split ]
  %.040208238309361424450484508 = phi ptr [ %.040208238309361424450, %call_destructor.exit230 ], [ %.040208238309361424450484508.ph, %call_destructor.exit235.sink.split ]
  %.039209237310360425449485507 = phi ptr [ %.039209237310360425449, %call_destructor.exit230 ], [ %.039209237310360425449485507.ph, %call_destructor.exit235.sink.split ]
  %.038210236311359426448486506 = phi ptr [ %.038210236311359426448, %call_destructor.exit230 ], [ %.038210236311359426448486506.ph, %call_destructor.exit235.sink.split ]
  %.0211235312358427447487505 = phi ptr [ %.0211235312358427447, %call_destructor.exit230 ], [ %.0211235312358427447487505.ph, %call_destructor.exit235.sink.split ]
  %25 = phi i32 [ %24, %call_destructor.exit230 ], [ %.ph849, %call_destructor.exit235.sink.split ]
  %.not100212234313357428446488504 = phi i1 [ %.not100212234313357428446, %call_destructor.exit230 ], [ false, %call_destructor.exit235.sink.split ]
  %tobool.i236 = icmp eq ptr %.047201245302368417457477515, null
  %brmerge.i238 = or i1 %tobool.i236, %.not100212234313357428446488504
  br i1 %brmerge.i238, label %call_destructor.exit240, label %if.then.i239

if.then.i239:                                     ; preds = %call_destructor.exit235
  call void @halide_free(ptr null, ptr nonnull %.047201245302368417457477515) #7
  br label %call_destructor.exit240

call_destructor.exit240:                          ; preds = %if.then.i239, %call_destructor.exit235
  %tobool.i241 = icmp eq ptr %.046202244303367418456478514, null
  %brmerge.i243 = or i1 %tobool.i241, %.not100212234313357428446488504
  br i1 %brmerge.i243, label %call_destructor.exit245, label %if.then.i244

if.then.i244:                                     ; preds = %call_destructor.exit240
  call void @halide_free(ptr null, ptr nonnull %.046202244303367418456478514) #7
  br label %call_destructor.exit245

call_destructor.exit245:                          ; preds = %if.then.i244, %call_destructor.exit240
  %tobool.i246 = icmp eq ptr %.045203243304366419455479513, null
  %brmerge.i248 = or i1 %tobool.i246, %.not100212234313357428446488504
  br i1 %brmerge.i248, label %call_destructor.exit250, label %if.then.i249

if.then.i249:                                     ; preds = %call_destructor.exit245
  call void @halide_free(ptr null, ptr nonnull %.045203243304366419455479513) #7
  br label %call_destructor.exit250

call_destructor.exit250:                          ; preds = %if.then.i249, %call_destructor.exit245
  %tobool.i251 = icmp eq ptr %.044204242305365420454480512, null
  %brmerge.i253 = or i1 %tobool.i251, %.not100212234313357428446488504
  br i1 %brmerge.i253, label %call_destructor.exit255, label %if.then.i254

if.then.i254:                                     ; preds = %call_destructor.exit250
  call void @halide_free(ptr null, ptr nonnull %.044204242305365420454480512) #7
  br label %call_destructor.exit255

call_destructor.exit255:                          ; preds = %if.then.i254, %call_destructor.exit250
  %tobool.i256 = icmp eq ptr %.043205241306364421453481511, null
  %brmerge.i258 = or i1 %tobool.i256, %.not100212234313357428446488504
  br i1 %brmerge.i258, label %call_destructor.exit260, label %if.then.i259

if.then.i259:                                     ; preds = %call_destructor.exit255
  call void @halide_free(ptr null, ptr nonnull %.043205241306364421453481511) #7
  br label %call_destructor.exit260

call_destructor.exit260:                          ; preds = %if.then.i259, %call_destructor.exit255
  %tobool.i261 = icmp eq ptr %.042206240307363422452482510, null
  %brmerge.i263 = or i1 %tobool.i261, %.not100212234313357428446488504
  br i1 %brmerge.i263, label %call_destructor.exit265, label %if.then.i264

if.then.i264:                                     ; preds = %call_destructor.exit260
  call void @halide_free(ptr null, ptr nonnull %.042206240307363422452482510) #7
  br label %call_destructor.exit265

call_destructor.exit265:                          ; preds = %if.then.i264, %call_destructor.exit260
  %tobool.i266 = icmp eq ptr %.041207239308362423451483509, null
  %brmerge.i268 = or i1 %tobool.i266, %.not100212234313357428446488504
  br i1 %brmerge.i268, label %call_destructor.exit270, label %if.then.i269

if.then.i269:                                     ; preds = %call_destructor.exit265
  call void @halide_free(ptr null, ptr nonnull %.041207239308362423451483509) #7
  br label %call_destructor.exit270

call_destructor.exit270:                          ; preds = %if.then.i269, %call_destructor.exit265
  %tobool.i271 = icmp eq ptr %.040208238309361424450484508, null
  %brmerge.i273 = or i1 %tobool.i271, %.not100212234313357428446488504
  br i1 %brmerge.i273, label %call_destructor.exit275, label %if.then.i274

if.then.i274:                                     ; preds = %call_destructor.exit270
  call void @halide_free(ptr null, ptr nonnull %.040208238309361424450484508) #7
  br label %call_destructor.exit275

call_destructor.exit275:                          ; preds = %if.then.i274, %call_destructor.exit270
  %tobool.i276 = icmp eq ptr %.039209237310360425449485507, null
  %brmerge.i278 = or i1 %tobool.i276, %.not100212234313357428446488504
  br i1 %brmerge.i278, label %call_destructor.exit280, label %if.then.i279

if.then.i279:                                     ; preds = %call_destructor.exit275
  call void @halide_free(ptr null, ptr nonnull %.039209237310360425449485507) #7
  br label %call_destructor.exit280

call_destructor.exit280:                          ; preds = %if.then.i279, %call_destructor.exit275
  %tobool.i281 = icmp eq ptr %.038210236311359426448486506, null
  %brmerge.i283 = or i1 %tobool.i281, %.not100212234313357428446488504
  br i1 %brmerge.i283, label %call_destructor.exit285, label %if.then.i284

if.then.i284:                                     ; preds = %call_destructor.exit280
  call void @halide_free(ptr null, ptr nonnull %.038210236311359426448486506) #7
  br label %call_destructor.exit285

call_destructor.exit285:                          ; preds = %if.then.i284, %call_destructor.exit280
  %tobool.i286 = icmp eq ptr %.0211235312358427447487505, null
  %brmerge.i288 = or i1 %tobool.i286, %.not100212234313357428446488504
  br i1 %brmerge.i288, label %call_destructor.exit290, label %if.then.i289

if.then.i289:                                     ; preds = %call_destructor.exit285
  call void @halide_free(ptr null, ptr nonnull %.0211235312358427447487505) #7
  br label %call_destructor.exit290

call_destructor.exit290:                          ; preds = %call_destructor.exit210, %call_destructor.exit, %if.then.i289, %call_destructor.exit285
  %26 = phi i32 [ %25, %if.then.i289 ], [ %25, %call_destructor.exit285 ], [ 0, %call_destructor.exit ], [ 0, %call_destructor.exit210 ]
  ret i32 %26

"assert failed10":                                ; preds = %"assert succeeded"
  %27 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded11":                             ; preds = %"assert succeeded"
  %28 = icmp eq ptr %input.host, null
  %input.dev = load i64, ptr %input.buffer, align 8
  %29 = icmp eq i64 %input.dev, 0
  %input.host_and_dev_are_null = and i1 %28, %29
  %buf_host12 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 1
  %local_laplacian.host = load ptr, ptr %buf_host12, align 8
  %local_laplacian.dev = load i64, ptr %local_laplacian.buffer, align 8
  %30 = icmp eq i64 %local_laplacian.dev, 0
  %31 = icmp eq ptr %local_laplacian.host, null
  %local_laplacian.host_and_dev_are_null = and i1 %31, %30
  %buf_extent16 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 0
  %local_laplacian.extent.0 = load i32, ptr %buf_extent16, align 4
  %x7 = sext i32 %local_laplacian.extent.0 to i64
  %buf_extent17 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 1
  %local_laplacian.extent.1 = load i32, ptr %buf_extent17, align 4
  %32 = sext i32 %local_laplacian.extent.1 to i64
  %buf_extent18 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 2
  %local_laplacian.extent.2 = load i32, ptr %buf_extent18, align 4
  %33 = sext i32 %local_laplacian.extent.2 to i64
  %buf_extent19 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 3
  %buf_stride20 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 0
  %local_laplacian.stride.0 = load i32, ptr %buf_stride20, align 4
  %buf_stride21 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 1
  %local_laplacian.stride.1 = load i32, ptr %buf_stride21, align 4
  %34 = sext i32 %local_laplacian.stride.1 to i64
  %buf_stride22 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 2
  %local_laplacian.stride.2 = load i32, ptr %buf_stride22, align 4
  %35 = sext i32 %local_laplacian.stride.2 to i64
  %buf_stride23 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 3
  %buf_min24 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 0
  %a286 = load i32, ptr %buf_min24, align 4
  %buf_min25 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 1
  %a114 = load i32, ptr %buf_min25, align 4
  %buf_min26 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 2
  %a108 = load i32, ptr %buf_min26, align 4
  %buf_min27 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 3
  %buf_elem_size28 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 5
  %local_laplacian.elem_size = load i32, ptr %buf_elem_size28, align 4
  %36 = add nsw i32 %a114, %local_laplacian.extent.1
  %37 = add nsw i32 %36, 125
  %a0 = ashr i32 %37, 6
  %38 = add nsw i32 %36, 253
  %39 = ashr i32 %38, 7
  %40 = shl nsw i32 %39, 1
  %b2 = add nsw i32 %40, 2
  %b750 = tail call i32 @llvm.smax.i32(i32 %a0, i32 %b2)
  %41 = add nsw i32 %a114, -126
  %a1 = ashr i32 %41, 6
  %42 = add nsw i32 %a114, -254
  %43 = ashr i32 %42, 7
  %44 = shl nsw i32 %43, 1
  %b3 = add nsw i32 %44, -1
  %b748 = tail call i32 @llvm.smin.i32(i32 %b3, i32 %a1)
  %45 = add nsw i32 %a286, %local_laplacian.extent.0
  %46 = add nsw i32 %45, 125
  %a2 = ashr i32 %46, 6
  %47 = add nsw i32 %45, 253
  %48 = ashr i32 %47, 7
  %49 = shl nsw i32 %48, 1
  %b4 = add nsw i32 %49, 2
  %b753 = tail call i32 @llvm.smax.i32(i32 %a2, i32 %b4)
  %50 = add nsw i32 %a286, -126
  %a3 = ashr i32 %50, 6
  %51 = add nsw i32 %a286, -254
  %52 = ashr i32 %51, 7
  %53 = shl nsw i32 %52, 1
  %b5 = add nsw i32 %53, -1
  %b751 = tail call i32 @llvm.smin.i32(i32 %b5, i32 %a3)
  %54 = add nsw i32 %levels, -1
  %55 = sitofp i32 %54 to float
  %56 = icmp slt i32 %levels, 1
  %57 = select i1 %56, float 0.000000e+00, float %55
  %a4 = fptosi float %57 to i32
  %b6 = add nsw i32 %levels, -2
  %a742 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a4)
  %58 = select i1 %56, float %55, float 0.000000e+00
  %a5 = fptosi float %58 to i32
  %a772 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a5)
  %59 = add nsw i32 %36, 61
  %a6 = ashr i32 %59, 5
  %60 = shl nsw i32 %b750, 1
  %b8 = add nsw i32 %60, 2
  %b735 = tail call i32 @llvm.smax.i32(i32 %a6, i32 %b8)
  %61 = add nsw i32 %a114, -62
  %a7 = ashr i32 %61, 5
  %62 = shl nsw i32 %b748, 1
  %b9 = add nsw i32 %62, -1
  %b733 = tail call i32 @llvm.smin.i32(i32 %b9, i32 %a7)
  %63 = add nsw i32 %45, 61
  %a8 = ashr i32 %63, 5
  %64 = shl nsw i32 %b753, 1
  %b10 = add nsw i32 %64, 2
  %b739 = tail call i32 @llvm.smax.i32(i32 %a8, i32 %b10)
  %65 = add nsw i32 %a286, -62
  %a9 = ashr i32 %65, 5
  %66 = shl i32 %b751, 1
  %b11 = add nsw i32 %66, -1
  %b737 = tail call i32 @llvm.smin.i32(i32 %b11, i32 %a9)
  %b14 = ashr i32 %61, 6
  %67 = tail call i32 @llvm.smin.i32(i32 %b14, i32 %44)
  %a11 = add nsw i32 %67, -1
  %.not133 = icmp slt i32 %a1, %67
  %b720 = select i1 %.not133, i32 %a1, i32 %a11
  %b17 = ashr i32 %65, 6
  %68 = tail call i32 @llvm.smin.i32(i32 %b17, i32 %53)
  %a14 = add nsw i32 %68, -1
  %.not134 = icmp slt i32 %a3, %68
  %b724 = select i1 %.not134, i32 %a3, i32 %a14
  %69 = add nsw i32 %36, 29
  %a16 = ashr i32 %69, 4
  %70 = shl nsw i32 %b735, 1
  %b18 = add nsw i32 %70, 2
  %b695 = tail call i32 @llvm.smax.i32(i32 %a16, i32 %b18)
  %71 = add nsw i32 %a114, -30
  %a17 = ashr i32 %71, 4
  %72 = shl i32 %b733, 1
  %b19 = add nsw i32 %72, -1
  %a691 = tail call i32 @llvm.smin.i32(i32 %b19, i32 %a17)
  %73 = add nsw i32 %45, 29
  %a18 = ashr i32 %73, 4
  %74 = shl nsw i32 %b739, 1
  %b20 = add nsw i32 %74, 2
  %b709 = tail call i32 @llvm.smax.i32(i32 %a18, i32 %b20)
  %75 = add nsw i32 %a286, -30
  %a19 = ashr i32 %75, 4
  %76 = shl i32 %b737, 1
  %b21 = add nsw i32 %76, -1
  %a705 = tail call i32 @llvm.smin.i32(i32 %b21, i32 %a19)
  %77 = shl nsw i32 %b720, 1
  %b23 = add nsw i32 %77, -1
  %b658 = tail call i32 @llvm.smin.i32(i32 %b23, i32 %a7)
  %78 = shl nsw i32 %b724, 1
  %b25 = add nsw i32 %78, -1
  %b675 = tail call i32 @llvm.smin.i32(i32 %b25, i32 %a9)
  %79 = add nsw i32 %36, 13
  %a24 = ashr i32 %79, 3
  %80 = shl nsw i32 %b695, 1
  %b26 = add nsw i32 %80, 2
  %b624 = tail call i32 @llvm.smax.i32(i32 %a24, i32 %b26)
  %81 = add nsw i32 %a114, -14
  %a25 = ashr i32 %81, 3
  %82 = shl nsw i32 %a691, 1
  %b27 = add nsw i32 %82, -1
  %a620 = tail call i32 @llvm.smin.i32(i32 %b27, i32 %a25)
  %83 = add nsw i32 %45, 13
  %a26 = ashr i32 %83, 3
  %84 = shl nsw i32 %b709, 1
  %b28 = add nsw i32 %84, 2
  %b641 = tail call i32 @llvm.smax.i32(i32 %a26, i32 %b28)
  %85 = add nsw i32 %a286, -14
  %a27 = ashr i32 %85, 3
  %86 = shl nsw i32 %a705, 1
  %b29 = add nsw i32 %86, -1
  %a637 = tail call i32 @llvm.smin.i32(i32 %b29, i32 %a27)
  %87 = shl nsw i32 %b658, 1
  %b31 = add nsw i32 %87, -1
  %a574 = tail call i32 @llvm.smin.i32(i32 %b31, i32 %a17)
  %88 = shl nsw i32 %b675, 1
  %b33 = add nsw i32 %88, -1
  %a595 = tail call i32 @llvm.smin.i32(i32 %b33, i32 %a19)
  %89 = add nsw i32 %36, 5
  %a32 = ashr i32 %89, 2
  %90 = shl nsw i32 %b624, 1
  %b34 = add nsw i32 %90, 2
  %b539 = tail call i32 @llvm.smax.i32(i32 %a32, i32 %b34)
  %91 = add nsw i32 %a114, -6
  %a33 = ashr i32 %91, 2
  %92 = shl nsw i32 %a620, 1
  %b35 = add nsw i32 %92, -1
  %a535 = tail call i32 @llvm.smin.i32(i32 %b35, i32 %a33)
  %93 = add nsw i32 %45, 5
  %a34 = ashr i32 %93, 2
  %94 = shl nsw i32 %b641, 1
  %b36 = add nsw i32 %94, 2
  %b556 = tail call i32 @llvm.smax.i32(i32 %a34, i32 %b36)
  %95 = add nsw i32 %a286, -6
  %a35 = ashr i32 %95, 2
  %96 = shl nsw i32 %a637, 1
  %b37 = add nsw i32 %96, -1
  %a552 = tail call i32 @llvm.smin.i32(i32 %b37, i32 %a35)
  %97 = shl nsw i32 %a574, 1
  %b39 = add nsw i32 %97, -1
  %a485 = tail call i32 @llvm.smin.i32(i32 %b39, i32 %a25)
  %98 = shl nsw i32 %a595, 1
  %b41 = add nsw i32 %98, -1
  %a509 = tail call i32 @llvm.smin.i32(i32 %b41, i32 %a27)
  %99 = add nsw i32 %36, 1
  %a40 = ashr i32 %99, 1
  %100 = shl nsw i32 %b539, 1
  %b42 = add nsw i32 %100, 2
  %b448 = tail call i32 @llvm.smax.i32(i32 %a40, i32 %b42)
  %a41 = ashr i32 %a114, 1
  %b43 = shl nsw i32 %a535, 1
  %f72.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b43, i32 %a41)
  %101 = add nsw i32 %45, 1
  %a42 = ashr i32 %101, 1
  %102 = shl nsw i32 %b556, 1
  %b44 = add nsw i32 %102, 2
  %b465 = tail call i32 @llvm.smax.i32(i32 %a42, i32 %b44)
  %a43 = ashr i32 %a286, 1
  %b45 = shl nsw i32 %a552, 1
  %f72.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b45, i32 %a43)
  %103 = shl nsw i32 %a485, 1
  %b47 = add nsw i32 %103, -1
  %a392 = tail call i32 @llvm.smin.i32(i32 %b47, i32 %a33)
  %104 = shl nsw i32 %a509, 1
  %b49 = add nsw i32 %104, -1
  %a416 = tail call i32 @llvm.smin.i32(i32 %b49, i32 %a35)
  %b51 = shl nsw i32 %a392, 1
  %f4.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b51, i32 %a41)
  %b53 = shl nsw i32 %a416, 1
  %f4.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b53, i32 %a43)
  %a54 = add nsw i32 %36, -1
  %105 = shl nsw i32 %b448, 1
  %b56 = add nsw i32 %105, 2
  %a53 = tail call i32 @llvm.smax.i32(i32 %a54, i32 %b56)
  %.not135 = icmp slt i32 %a53, %36
  %b149 = select i1 %.not135, i32 %a54, i32 %a53
  %106 = shl nsw i32 %f4.s0.v4.min.s, 1
  %b59 = add nsw i32 %106, -3
  %a56 = tail call i32 @llvm.smin.i32(i32 %b59, i32 %a114)
  %107 = shl nsw i32 %f72.s0.v4.min.s, 1
  %b58 = add nsw i32 %107, -3
  %a55 = tail call i32 @llvm.smin.i32(i32 %b58, i32 %a56)
  %a145 = tail call i32 @llvm.smin.i32(i32 %a114, i32 %a55)
  %a60 = add nsw i32 %45, -1
  %108 = shl nsw i32 %b465, 1
  %b62 = add nsw i32 %108, 2
  %a59 = tail call i32 @llvm.smax.i32(i32 %a60, i32 %b62)
  %.not136 = icmp slt i32 %a59, %45
  %b185 = select i1 %.not136, i32 %a60, i32 %a59
  %109 = shl nsw i32 %f4.s0.v3.min.s, 1
  %b65 = add nsw i32 %109, -3
  %a62 = tail call i32 @llvm.smin.i32(i32 %b65, i32 %a286)
  %110 = shl nsw i32 %f72.s0.v3.min.s, 1
  %b64 = add nsw i32 %110, -3
  %a61 = tail call i32 @llvm.smin.i32(i32 %b64, i32 %a62)
  %a181 = tail call i32 @llvm.smin.i32(i32 %a286, i32 %a61)
  %111 = tail call i32 @llvm.smax.i32(i32 %a772, i32 0)
  %112 = fmul float %57, 2.560000e+02
  %a66 = fptosi float %112 to i32
  %113 = shl nsw i32 %levels, 8
  %b68 = add nsw i32 %113, -256
  %a65 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a66)
  %114 = tail call i32 @llvm.smax.i32(i32 %a65, i32 0)
  %115 = tail call i32 @llvm.smax.i32(i32 %a742, i32 0)
  %116 = shl nsw i32 %115, 8
  %117 = fmul float %58, 2.560000e+02
  %a69 = fptosi float %117 to i32
  %a68 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a69)
  %118 = tail call i32 @llvm.smax.i32(i32 %a68, i32 0)
  %b121 = sub nsw i32 %118, %116
  %b75 = add nsw i32 %b185, -7
  %a72 = tail call i32 @llvm.smin.i32(i32 %b75, i32 %a181)
  %b76 = add nsw i32 %45, -8
  %b74 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a286)
  %a71 = tail call i32 @llvm.smin.i32(i32 %b74, i32 %a72)
  %119 = add i32 %input.extent.0, -1
  %120 = extractelement <2 x i32> %21, i64 0
  %b73 = add i32 %119, %120
  %a70 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a71)
  %121 = tail call i32 @llvm.smax.i32(i32 %a70, i32 %120)
  %122 = sub nsw i32 %b185, %a181
  %123 = and i32 %122, -8
  %124 = add i32 %a181, 7
  %a78 = add i32 %124, %123
  %a77 = tail call i32 @llvm.smin.i32(i32 %b185, i32 %a78)
  %125 = add nsw i32 %local_laplacian.extent.0, -1
  %126 = and i32 %125, -8
  %127 = add nsw i32 %a286, %126
  %a79 = add nsw i32 %127, 7
  %b79 = tail call i32 @llvm.smin.i32(i32 %a60, i32 %a79)
  %a76 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b79)
  %a75 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a76)
  %128 = tail call i32 @llvm.smax.i32(i32 %a75, i32 %120)
  %b90 = add nsw i32 %b149, -31
  %a87 = tail call i32 @llvm.smin.i32(i32 %b90, i32 %a145)
  %b91 = add nsw i32 %36, -64
  %b89 = tail call i32 @llvm.smin.i32(i32 %b91, i32 %a114)
  %a86 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a87)
  %129 = extractelement <2 x i32> %21, i64 1
  %130 = add nsw i32 %129, %17
  %b88 = add nsw i32 %130, -1
  %a85 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a86)
  %131 = tail call i32 @llvm.smax.i32(i32 %a85, i32 %129)
  %132 = sub nsw i32 %b149, %a145
  %133 = ashr i32 %132, 5
  %134 = and i32 %132, -32
  %135 = add i32 %a145, 31
  %a93 = add i32 %135, %134
  %a92 = tail call i32 @llvm.smin.i32(i32 %b149, i32 %a93)
  %136 = add nsw i32 %local_laplacian.extent.1, -1
  %137 = ashr i32 %136, 6
  %138 = or i32 %136, 63
  %a94 = add i32 %138, %a114
  %b94 = tail call i32 @llvm.smin.i32(i32 %a54, i32 %a94)
  %a91 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b94)
  %a90 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a91)
  %139 = tail call i32 @llvm.smax.i32(i32 %a90, i32 %129)
  %140 = add i32 %19, -1
  %b104 = add i32 %140, %b108
  %a101 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a108)
  %141 = tail call i32 @llvm.smin.i32(i32 %a101, i32 0)
  %142 = tail call i32 @llvm.smax.i32(i32 %141, i32 %b108)
  %143 = add nsw i32 %a108, %local_laplacian.extent.2
  %a105 = add nsw i32 %143, -1
  %144 = icmp sgt i32 %143, 3
  %a104 = select i1 %144, i32 %a105, i32 2
  %a103 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a104)
  %145 = tail call i32 @llvm.smax.i32(i32 %a103, i32 %b108)
  %local_laplacian.extent.0.required.s = sub nsw i32 %b79, %b74
  %local_laplacian.extent.1.required.s = sub nsw i32 %b94, %b89
  %146 = add nsw i32 %local_laplacian.extent.1.required.s, 1
  %147 = add nsw i32 %local_laplacian.extent.0.required.s, 1
  %local_laplacian.stride.2.required = mul nsw i32 %146, %147
  br i1 %input.host_and_dev_are_null, label %after_bb, label %after_bb.thread

after_bb:                                         ; preds = %"assert succeeded11"
  %input.extent.0.required.s = sub nsw i32 %128, %121
  %148 = add nsw i32 %input.extent.0.required.s, 1
  %input.extent.1.required.s = sub nsw i32 %139, %131
  %149 = add nsw i32 %input.extent.1.required.s, 1
  %input.stride.2.required = mul nsw i32 %149, %148
  store i32 2, ptr %buf_elem_size, align 4
  store i32 %121, ptr %buf_min, align 4
  store i32 %148, ptr %buf_extent, align 4
  store i32 1, ptr %buf_stride, align 4
  store i32 %131, ptr %buf_min7, align 4
  store i32 %149, ptr %buf_extent1, align 4
  store i32 %148, ptr %buf_stride4, align 4
  store i32 %142, ptr %buf_min8, align 4
  %reass.sub574 = sub i32 %145, %142
  %150 = add i32 %reass.sub574, 1
  store i32 %150, ptr %buf_extent2, align 4
  store i32 %input.stride.2.required, ptr %buf_stride5, align 4
  store i32 0, ptr %buf_min9, align 4
  store i32 0, ptr %buf_extent3, align 4
  store i32 0, ptr %buf_stride6, align 4
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %call_destructor.exit210.thread374

after_bb.thread:                                  ; preds = %"assert succeeded11"
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %true_bb58

after_bb44.thread:                                ; preds = %after_bb.thread, %after_bb
  store i32 2, ptr %buf_elem_size28, align 4
  store i32 %b74, ptr %buf_min24, align 4
  store i32 %147, ptr %buf_extent16, align 4
  store i32 1, ptr %buf_stride20, align 4
  store i32 %b89, ptr %buf_min25, align 4
  store i32 %146, ptr %buf_extent17, align 4
  store i32 %147, ptr %buf_stride21, align 4
  store i32 %local_laplacian.stride.2.required, ptr %buf_stride22, align 4
  store i32 0, ptr %buf_min27, align 4
  store i32 0, ptr %buf_extent19, align 4
  store i32 0, ptr %buf_stride23, align 4
  br label %call_destructor.exit210.thread374

true_bb58:                                        ; preds = %after_bb.thread
  %151 = icmp eq i32 %input.elem_size, 2
  br i1 %151, label %"assert succeeded62", label %"assert failed61", !prof !5

"assert failed61":                                ; preds = %true_bb58
  %152 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.3, ptr nonnull @str.4, i32 %input.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded62":                             ; preds = %true_bb58
  %153 = icmp eq i32 %local_laplacian.elem_size, 2
  br i1 %153, label %"assert succeeded64", label %"assert failed63", !prof !5

"assert failed63":                                ; preds = %"assert succeeded62"
  %154 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.5, ptr nonnull @str.4, i32 %local_laplacian.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded64":                             ; preds = %"assert succeeded62"
  %155 = sub nsw i32 %128, %input.extent.0
  %.not102 = icmp slt i32 %155, %120
  br i1 %.not102, label %"assert succeeded66", label %"assert failed65", !prof !5

"assert failed65":                                ; preds = %"assert succeeded64"
  %156 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 0, i32 %121, i32 %128, i32 %120, i32 %b73) #4
  br label %call_destructor.exit210.thread374

"assert succeeded66":                             ; preds = %"assert succeeded64"
  %157 = sub nsw i32 %139, %17
  %.not103 = icmp slt i32 %157, %129
  br i1 %.not103, label %"assert succeeded68", label %"assert failed67", !prof !5

"assert failed67":                                ; preds = %"assert succeeded66"
  %158 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 1, i32 %131, i32 %139, i32 %129, i32 %b88) #4
  br label %call_destructor.exit210.thread374

"assert succeeded68":                             ; preds = %"assert succeeded66"
  %159 = sub nsw i32 %145, %19
  %.not104 = icmp slt i32 %159, %b108
  br i1 %.not104, label %"assert succeeded70", label %"assert failed69", !prof !5

"assert failed69":                                ; preds = %"assert succeeded68"
  %160 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 2, i32 %142, i32 %145, i32 %b108, i32 %b104) #4
  br label %call_destructor.exit210.thread374

"assert succeeded70":                             ; preds = %"assert succeeded68"
  %161 = sub nsw i32 %b79, %local_laplacian.extent.0
  %.not105 = icmp slt i32 %161, %a286
  %162 = icmp sle i32 %a286, %b76
  %163 = and i1 %162, %.not105
  br i1 %163, label %"assert succeeded72", label %"assert failed71", !prof !5

"assert failed71":                                ; preds = %"assert succeeded70"
  %164 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 0, i32 %b74, i32 %b79, i32 %a286, i32 %a60) #4
  br label %call_destructor.exit210.thread374

"assert succeeded72":                             ; preds = %"assert succeeded70"
  %165 = sub nsw i32 %b94, %local_laplacian.extent.1
  %.not106 = icmp slt i32 %165, %a114
  %166 = icmp sle i32 %a114, %b91
  %167 = and i1 %166, %.not106
  br i1 %167, label %"assert succeeded74", label %"assert failed73", !prof !5

"assert failed73":                                ; preds = %"assert succeeded72"
  %168 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 1, i32 %b89, i32 %b94, i32 %a114, i32 %a54) #4
  br label %call_destructor.exit210.thread374

"assert succeeded74":                             ; preds = %"assert succeeded72"
  %169 = icmp eq i32 %input.stride.0, 1
  br i1 %169, label %"assert succeeded76", label %"assert failed75", !prof !5

"assert failed75":                                ; preds = %"assert succeeded74"
  %170 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.6, i32 %input.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded76":                             ; preds = %"assert succeeded74"
  %171 = icmp eq i32 %local_laplacian.stride.0, 1
  br i1 %171, label %"assert succeeded78", label %"assert failed77", !prof !5

"assert failed77":                                ; preds = %"assert succeeded76"
  %172 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.8, i32 %local_laplacian.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded78":                             ; preds = %"assert succeeded76"
  %input.total_extent.1 = mul nsw i64 %18, %x1
  %local_laplacian.total_extent.1 = mul nsw i64 %32, %x7
  %173 = tail call i64 @llvm.abs.i64(i64 %x1, i1 true)
  %174 = icmp ult i64 %173, 2147483648
  br i1 %174, label %"assert succeeded80", label %"assert failed79", !prof !5

"assert failed79":                                ; preds = %"assert succeeded78"
  %175 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %173, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded80":                             ; preds = %"assert succeeded78"
  %x2 = mul nsw i64 %14, %18
  %176 = tail call i64 @llvm.abs.i64(i64 %x2, i1 true)
  %177 = icmp ult i64 %176, 2147483648
  br i1 %177, label %"assert succeeded82", label %"assert failed81", !prof !5

"assert failed81":                                ; preds = %"assert succeeded80"
  %178 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %176, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded82":                             ; preds = %"assert succeeded80"
  %179 = icmp slt i64 %input.total_extent.1, 2147483648
  br i1 %179, label %"assert succeeded84", label %"assert failed83", !prof !5

"assert failed83":                                ; preds = %"assert succeeded82"
  %180 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %input.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded84":                             ; preds = %"assert succeeded82"
  %x4 = mul nsw i64 %15, %20
  %181 = tail call i64 @llvm.abs.i64(i64 %x4, i1 true)
  %182 = icmp ult i64 %181, 2147483648
  br i1 %182, label %"assert succeeded86", label %"assert failed85", !prof !5

"assert failed85":                                ; preds = %"assert succeeded84"
  %183 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %181, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded86":                             ; preds = %"assert succeeded84"
  %184 = mul nsw i64 %input.total_extent.1, %20
  %185 = icmp slt i64 %184, 2147483648
  br i1 %185, label %"assert succeeded88", label %"assert failed87", !prof !5

"assert failed87":                                ; preds = %"assert succeeded86"
  %186 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %184, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded88":                             ; preds = %"assert succeeded86"
  %187 = tail call i64 @llvm.abs.i64(i64 %x7, i1 true)
  %188 = icmp ult i64 %187, 2147483648
  br i1 %188, label %"assert succeeded90", label %"assert failed89", !prof !5

"assert failed89":                                ; preds = %"assert succeeded88"
  %189 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %187, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded90":                             ; preds = %"assert succeeded88"
  %x8 = mul nsw i64 %34, %32
  %190 = tail call i64 @llvm.abs.i64(i64 %x8, i1 true)
  %191 = icmp ult i64 %190, 2147483648
  br i1 %191, label %"assert succeeded92", label %"assert failed91", !prof !5

"assert failed91":                                ; preds = %"assert succeeded90"
  %192 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %190, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded92":                             ; preds = %"assert succeeded90"
  %193 = icmp slt i64 %local_laplacian.total_extent.1, 2147483648
  br i1 %193, label %"assert succeeded94", label %"assert failed93", !prof !5

"assert failed93":                                ; preds = %"assert succeeded92"
  %194 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %local_laplacian.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded94":                             ; preds = %"assert succeeded92"
  %x10 = mul nsw i64 %35, %33
  %195 = tail call i64 @llvm.abs.i64(i64 %x10, i1 true)
  %196 = icmp ult i64 %195, 2147483648
  br i1 %196, label %"assert succeeded96", label %"assert failed95", !prof !5

"assert failed95":                                ; preds = %"assert succeeded94"
  %197 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %195, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded96":                             ; preds = %"assert succeeded94"
  %198 = mul nsw i64 %local_laplacian.total_extent.1, %33
  %199 = icmp slt i64 %198, 2147483648
  br i1 %199, label %"assert succeeded98", label %"assert failed97", !prof !5

"assert failed97":                                ; preds = %"assert succeeded96"
  %200 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %198, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded98":                             ; preds = %"assert succeeded96"
  %201 = shl i32 %111, 8
  %202 = add i32 %201, %b121
  %f0.v3.extent_realized.s.s = sub i32 %114, %202
  %203 = add nsw i32 %f0.v3.extent_realized.s.s, 257
  %204 = zext i32 %203 to i64
  %205 = shl nuw nsw i64 %204, 2
  %206 = icmp ult i32 %203, 536870912
  br i1 %206, label %"assert succeeded100", label %"assert failed99", !prof !5

"assert failed99":                                ; preds = %"assert succeeded98"
  %207 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.9, i64 %205, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded100":                            ; preds = %"assert succeeded98"
  %208 = add nuw nsw i64 %205, 4
  %209 = tail call ptr @halide_malloc(ptr null, i64 %208)
  %.not107 = icmp eq ptr %209, null
  br i1 %.not107, label %"assert failed101", label %"produce f0", !prof !4

"assert failed101":                               ; preds = %"assert succeeded100"
  %210 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f0":                                     ; preds = %"assert succeeded100"
  %211 = icmp sgt i32 %f0.v3.extent_realized.s.s, -257
  br i1 %211, label %"for f0.s0.v3.preheader", label %"consume f0", !prof !5

"for f0.s0.v3.preheader":                         ; preds = %"produce f0"
  %212 = add nsw i32 %b121, -256
  %213 = sext i32 %b121 to i64
  %214 = shl nsw i64 %213, 2
  %215 = sub nsw i64 1024, %214
  %scevgep480 = getelementptr i8, ptr %209, i64 %215
  %216 = sext i32 %212 to i64
  %217 = add nuw i32 %114, 256
  %218 = sub i32 %217, %202
  %219 = zext i32 %218 to i64
  %220 = add nuw nsw i64 %219, 1
  %min.iters.check = icmp ult i32 %218, 3
  br i1 %min.iters.check, label %"for f0.s0.v3.preheader1076", label %vector.ph

vector.ph:                                        ; preds = %"for f0.s0.v3.preheader"
  %n.vec = and i64 %220, -4
  %ind.end = add nsw i64 %n.vec, %216
  %.cast = trunc i64 %n.vec to i32
  %ind.end852 = sub i32 %203, %.cast
  %.splatinsert = insertelement <4 x i32> poison, i32 %212, i64 0
  %.splat = shufflevector <4 x i32> %.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %induction = add <4 x i32> %.splat, <i32 0, i32 1, i32 2, i32 3>
  %broadcast.splatinsert = insertelement <4 x float> poison, float %alpha, i64 0
  %broadcast.splat = shufflevector <4 x float> %broadcast.splatinsert, <4 x float> poison, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i32> [ %induction, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %offset.idx = add i64 %index, %216
  %221 = sitofp <4 x i32> %vec.ind to <4 x float>
  %222 = fmul <4 x float> %221, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %223 = fsub <4 x float> zeroinitializer, %222
  %224 = fmul <4 x float> %223, %221
  %225 = fmul <4 x float> %224, <float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000>
  %226 = fmul <4 x float> %225, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %227 = tail call <4 x float> @llvm.floor.v4f32(<4 x float> %226)
  %228 = fptosi <4 x float> %227 to <4 x i32>
  %229 = fmul <4 x float> %227, <float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000>
  %230 = fmul <4 x float> %227, <float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000>
  %231 = fsub <4 x float> %225, %230
  %232 = fsub <4 x float> %231, %229
  %233 = fmul <4 x float> %232, %232
  %234 = shl <4 x i32> %228, <i32 23, i32 23, i32 23, i32 23>
  %235 = add <4 x i32> %234, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %236 = bitcast <4 x i32> %235 to <4 x float>
  %237 = fmul <4 x float> %233, <float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000>
  %238 = fadd <4 x float> %237, <float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000>
  %239 = fmul <4 x float> %233, %238
  %240 = fadd <4 x float> %239, <float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000>
  %241 = fmul <4 x float> %233, %240
  %242 = fadd <4 x float> %241, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %243 = fmul <4 x float> %233, <float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000>
  %244 = fadd <4 x float> %243, <float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000>
  %245 = fmul <4 x float> %233, %244
  %246 = fadd <4 x float> %245, <float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000>
  %247 = fmul <4 x float> %233, %246
  %248 = fadd <4 x float> %247, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %249 = fmul <4 x float> %232, %248
  %250 = fadd <4 x float> %242, %249
  %251 = fmul <4 x float> %250, %236
  %252 = icmp slt <4 x i32> %228, <i32 128, i32 128, i32 128, i32 128>
  %253 = select <4 x i1> %252, <4 x float> %251, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %254 = icmp sgt <4 x i32> %228, <i32 -127, i32 -127, i32 -127, i32 -127>
  %255 = select <4 x i1> %254, <4 x float> %253, <4 x float> zeroinitializer
  %256 = fmul <4 x float> %broadcast.splat, %221
  %257 = fmul <4 x float> %256, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %258 = fmul <4 x float> %257, %255
  %259 = getelementptr float, ptr %scevgep480, i64 %offset.idx
  store <4 x float> %258, ptr %259, align 4, !tbaa !6
  %index.next = add nuw i64 %index, 4
  %vec.ind.next = add <4 x i32> %vec.ind, <i32 4, i32 4, i32 4, i32 4>
  %260 = icmp eq i64 %index.next, %n.vec
  br i1 %260, label %middle.block, label %vector.body, !llvm.loop !9

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %220, %n.vec
  br i1 %cmp.n, label %"consume f0", label %"for f0.s0.v3.preheader1076"

"for f0.s0.v3.preheader1076":                     ; preds = %"for f0.s0.v3.preheader", %middle.block
  %lsr.iv482.ph = phi i64 [ %216, %"for f0.s0.v3.preheader" ], [ %ind.end, %middle.block ]
  %lsr.iv478.ph = phi i32 [ %203, %"for f0.s0.v3.preheader" ], [ %ind.end852, %middle.block ]
  br label %"for f0.s0.v3"

"for f0.s0.v3":                                   ; preds = %"for f0.s0.v3.preheader1076", %"for f0.s0.v3"
  %lsr.iv482 = phi i64 [ %lsr.iv.next483, %"for f0.s0.v3" ], [ %lsr.iv482.ph, %"for f0.s0.v3.preheader1076" ]
  %lsr.iv478 = phi i32 [ %lsr.iv.next479, %"for f0.s0.v3" ], [ %lsr.iv478.ph, %"for f0.s0.v3.preheader1076" ]
  %tmp487 = trunc i64 %lsr.iv482 to i32
  %261 = sitofp i32 %tmp487 to float
  %262 = fmul float %261, 3.906250e-03
  %263 = fsub float 0.000000e+00, %262
  %t3062 = fmul float %263, %261
  %264 = fmul float %t3062, 0x3F60000000000000
  %265 = fmul float %264, 0x3FF7154760000000
  %y.i = tail call float @llvm.floor.f32(float %265) #8
  %t3064 = fptosi float %y.i to i32
  %266 = fmul float %y.i, 0x3EB7F7D1C0000000
  %267 = fmul float %y.i, 0x3FE62E4000000000
  %268 = fsub float %264, %267
  %t3065 = fsub float %268, %266
  %t3066 = fmul float %t3065, %t3065
  %269 = shl i32 %t3064, 23
  %270 = add i32 %269, 1065353216
  %271 = bitcast i32 %270 to float
  %272 = insertelement <2 x float> poison, float %t3066, i64 0
  %273 = shufflevector <2 x float> %272, <2 x float> poison, <2 x i32> zeroinitializer
  %274 = fmul <2 x float> %273, <float 0x3F5385CCC0000000, float 0x3F34F2FE60000000>
  %275 = fadd <2 x float> %274, <float 0x3FA54CD780000000, float 0x3F81632540000000>
  %276 = fmul <2 x float> %273, %275
  %277 = fadd <2 x float> %276, <float 0x3FDFFFFBC0000000, float 0x3FC555C3E0000000>
  %278 = fmul <2 x float> %273, %277
  %279 = fadd <2 x float> %278, <float 1.000000e+00, float 1.000000e+00>
  %280 = extractelement <2 x float> %279, i64 1
  %281 = fmul float %t3065, %280
  %282 = extractelement <2 x float> %279, i64 0
  %283 = fadd float %282, %281
  %284 = fmul float %283, %271
  %285 = icmp slt i32 %t3064, 128
  %286 = select i1 %285, float %284, float 0x7FF0000000000000
  %287 = icmp sgt i32 %t3064, -127
  %288 = select i1 %287, float %286, float 0.000000e+00
  %289 = fmul float %261, %alpha
  %290 = fmul float %289, 3.906250e-03
  %291 = fmul float %290, %288
  %scevgep484 = getelementptr float, ptr %scevgep480, i64 %lsr.iv482
  store float %291, ptr %scevgep484, align 4, !tbaa !6
  %lsr.iv.next479 = add i32 %lsr.iv478, -1
  %lsr.iv.next483 = add nsw i64 %lsr.iv482, 1
  %.not132 = icmp eq i32 %lsr.iv.next479, 0
  br i1 %.not132, label %"consume f0", label %"for f0.s0.v3", !llvm.loop !12

"consume f0":                                     ; preds = %"for f0.s0.v3", %middle.block, %"produce f0"
  %a127 = add nsw i32 %f72.s0.v4.min.s, -1
  %b129 = add nsw i32 %b448, -31
  %.not137 = icmp slt i32 %b129, %f72.s0.v4.min.s
  %b135 = select i1 %.not137, i32 %b129, i32 %a127
  %a134 = add nsw i32 %f4.s0.v4.min.s, -1
  %b136 = add nsw i32 %b448, -7
  %.not138 = icmp slt i32 %b136, %f4.s0.v4.min.s
  %a133 = select i1 %.not138, i32 %b136, i32 %a134
  %292 = tail call i32 @llvm.smin.i32(i32 %b135, i32 %a133)
  %293 = shl nsw i32 %292, 1
  %a132 = add nsw i32 %293, -1
  %b134 = shl nsw i32 %b135, 1
  %b133 = or i32 %b134, 1
  %.not139 = icmp slt i32 %b133, %293
  %a130 = select i1 %.not139, i32 %b133, i32 %a132
  %b132 = add nsw i32 %b134, 2
  %a129 = tail call i32 @llvm.smin.i32(i32 %b132, i32 %a130)
  %a128 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a129)
  %f2.v4.min_realized = tail call i32 @llvm.smin.i32(i32 %a87, i32 %a128)
  %294 = sub nsw i32 %b448, %f72.s0.v4.min.s
  %295 = add nsw i32 %294, 1
  %296 = and i32 %295, -32
  %297 = add nsw i32 %f72.s0.v4.min.s, 30
  %a136 = add i32 %297, %296
  %t1938 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a136)
  %298 = sub nsw i32 %b448, %f4.s0.v4.min.s
  %299 = add nsw i32 %298, 1
  %300 = and i32 %299, -8
  %301 = add nsw i32 %f4.s0.v4.min.s, 6
  %a154 = add i32 %301, %300
  %302 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a154)
  %303 = shl nsw i32 %302, 1
  %a153 = add nsw i32 %303, 2
  %304 = shl nsw i32 %t1938, 1
  %b155 = add nsw i32 %304, -1
  %.not140 = icmp slt i32 %a153, %304
  %a152 = select i1 %.not140, i32 %b155, i32 %a153
  %a151 = tail call i32 @llvm.smax.i32(i32 %a152, i32 %304)
  %b153 = or i32 %304, 1
  %a150 = tail call i32 @llvm.smax.i32(i32 %a151, i32 %b153)
  %b152 = add nsw i32 %304, 2
  %b150 = tail call i32 @llvm.smax.i32(i32 %a150, i32 %b152)
  %b148 = tail call i32 @llvm.smax.i32(i32 %b94, i32 %b150)
  %305 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b148)
  %a155 = add nsw i32 %f72.s0.v3.min.s, -1
  %b157 = add nsw i32 %b465, -7
  %.not141 = icmp slt i32 %b157, %f72.s0.v3.min.s
  %b165 = select i1 %.not141, i32 %b157, i32 %a155
  %a164 = add nsw i32 %f4.s0.v3.min.s, -1
  %.not142 = icmp slt i32 %b157, %f4.s0.v3.min.s
  %a163 = select i1 %.not142, i32 %b157, i32 %a164
  %306 = tail call i32 @llvm.smin.i32(i32 %b165, i32 %a163)
  %307 = shl nsw i32 %306, 1
  %a162 = add nsw i32 %307, -1
  %b164 = shl nsw i32 %b165, 1
  %b163 = or i32 %b164, 1
  %.not143 = icmp slt i32 %b163, %307
  %a160 = select i1 %.not143, i32 %b163, i32 %a162
  %b162 = add nsw i32 %b164, 2
  %a159 = tail call i32 @llvm.smin.i32(i32 %b162, i32 %a160)
  %b161 = add nsw i32 %b164, -1
  %a158 = tail call i32 @llvm.smin.i32(i32 %b161, i32 %a159)
  %308 = icmp sgt i32 %126, 0
  %a165 = select i1 %308, i32 %a286, i32 %127
  %b160 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a165)
  %b159 = tail call i32 @llvm.smin.i32(i32 %b160, i32 %a158)
  %a156 = tail call i32 @llvm.smin.i32(i32 %b159, i32 %b74)
  %f2.v3.min_realized = tail call i32 @llvm.smin.i32(i32 %a72, i32 %a156)
  %reass.sub = sub i32 %b465, %f72.s0.v3.min.s
  %309 = add i32 %reass.sub, 1
  %310 = and i32 %309, -8
  %311 = add nsw i32 %f72.s0.v3.min.s, 6
  %a168 = add i32 %311, %310
  %t1943 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a168)
  %reass.sub527 = sub i32 %b465, %f4.s0.v3.min.s
  %312 = add i32 %reass.sub527, 1
  %313 = and i32 %312, -8
  %314 = add nsw i32 %f4.s0.v3.min.s, 6
  %a191 = add i32 %314, %313
  %315 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a191)
  %316 = shl nsw i32 %315, 1
  %a190 = add nsw i32 %316, 2
  %317 = shl nsw i32 %t1943, 1
  %b192 = add nsw i32 %317, -1
  %.not144 = icmp slt i32 %a190, %317
  %a189 = select i1 %.not144, i32 %b192, i32 %a190
  %a188 = tail call i32 @llvm.smax.i32(i32 %a189, i32 %317)
  %b190 = or i32 %317, 1
  %a187 = tail call i32 @llvm.smax.i32(i32 %a188, i32 %b190)
  %b189 = add nsw i32 %317, 2
  %a186 = tail call i32 @llvm.smax.i32(i32 %a187, i32 %b189)
  %318 = and i32 %local_laplacian.extent.0.required.s, -8
  %a192 = add nsw i32 %318, %b74
  %b194 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %127)
  %319 = tail call i32 @llvm.smin.i32(i32 %b194, i32 %a192)
  %b188 = add nsw i32 %319, 7
  %b186 = tail call i32 @llvm.smax.i32(i32 %a186, i32 %b188)
  %b184 = tail call i32 @llvm.smax.i32(i32 %b79, i32 %b186)
  %320 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b184)
  %f2.v3.extent_realized.s = sub nsw i32 %320, %f2.v3.min_realized
  %reass.sub528 = sub i32 %305, %f2.v4.min_realized
  %321 = add i32 %reass.sub528, 1
  %322 = zext i32 %321 to i64
  %323 = add nsw i32 %f2.v3.extent_realized.s, 1
  %324 = zext i32 %323 to i64
  %325 = shl nuw nsw i64 %324, 2
  %326 = mul i64 %325, %322
  %327 = icmp ult i64 %326, 2147483648
  %328 = and i64 %325, 4294967292
  %329 = mul nuw i64 %328, %322
  %330 = lshr i64 %329, 32
  %331 = lshr i64 %324, 30
  %332 = mul nuw nsw i64 %331, %322
  %333 = add nuw nsw i64 %330, %332
  %334 = icmp ult i64 %333, 4294967296
  %335 = and i1 %327, %334
  br i1 %335, label %"assert succeeded104", label %"assert failed103", !prof !5

"assert failed103":                               ; preds = %"consume f0"
  %336 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.10, i64 %326, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded104":                            ; preds = %"consume f0"
  %337 = add nuw nsw i64 %326, 4
  %338 = tail call ptr @halide_malloc(ptr null, i64 %337)
  %.not529 = icmp eq ptr %338, null
  br i1 %.not529, label %"assert failed105", label %"produce f2", !prof !4

"assert failed105":                               ; preds = %"assert succeeded104"
  %339 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f2":                                     ; preds = %"assert succeeded104"
  %340 = sub nsw i32 %129, %a145
  %341 = add nsw i32 %340, 31
  %a195 = ashr i32 %341, 5
  %342 = icmp sgt i32 %340, 0
  %343 = select i1 %342, i32 %a195, i32 0
  %b196 = add nsw i32 %133, 1
  %.not145 = icmp slt i32 %133, %343
  %f2.s0.v4.v4.prologue = select i1 %.not145, i32 %b196, i32 %343
  %344 = sub nsw i32 %130, %a145
  %345 = ashr i32 %344, 5
  %a200 = add nsw i32 %345, -1
  %346 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %b90)
  %347 = sub nsw i32 %346, %a145
  %b202 = ashr i32 %347, 5
  %.not146 = icmp slt i32 %b202, %345
  %a199 = select i1 %.not146, i32 %b202, i32 %a200
  %348 = tail call i32 @llvm.smin.i32(i32 %133, i32 %a199)
  %b198 = add nsw i32 %348, 1
  %f2.s0.v4.v4.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v4.v4.prologue, i32 %b198)
  store i32 %b185, ptr %12, align 8
  %349 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 1
  store i32 %a181, ptr %349, align 4
  %350 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 2
  store i32 %b149, ptr %350, align 8
  %351 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 3
  store i32 %a145, ptr %351, align 4
  %352 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 4
  store i32 %f2.s0.v4.v4.epilogue, ptr %352, align 8
  %353 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 5
  store i32 %f2.s0.v4.v4.prologue, ptr %353, align 4
  %354 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 6
  store i32 %f2.v3.extent_realized.s, ptr %354, align 8
  %355 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 7
  store i32 %f2.v3.min_realized, ptr %355, align 4
  %356 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 8
  store i32 %f2.v4.min_realized, ptr %356, align 8
  %357 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 9
  store i32 %input.extent.0, ptr %357, align 4
  %358 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 10
  %359 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %359, ptr %358, align 8
  %360 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 14
  store i32 %b108, ptr %360, align 8
  %361 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 15
  store i32 %input.stride.1, ptr %361, align 4
  %362 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 16
  store i32 %input.stride.2, ptr %362, align 8
  %363 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 17
  store ptr %338, ptr %363, align 8
  %364 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 18
  store ptr null, ptr %364, align 8
  %365 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 19
  store ptr %input.host, ptr %365, align 8
  %366 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 20
  store ptr %input.buffer, ptr %366, align 8
  %367 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f2.s0.v4.v4, i32 0, i32 %b196, ptr nonnull %12)
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %"consume f2", label %call_destructor.exit210.thread374, !prof !5

"consume f2":                                     ; preds = %"produce f2"
  %b252 = add nuw nsw i32 %115, 1
  %a249 = call i32 @llvm.smax.i32(i32 %a742, i32 %b252)
  %f4.v6.extent_realized.s = sub nsw i32 %a249, %111
  %369 = ashr i32 %b89, 1
  %a256 = add nsw i32 %369, -1
  %370 = add nsw i32 %b89, 3
  %b258 = ashr i32 %370, 1
  %.not147 = icmp slt i32 %b258, %369
  %a255 = select i1 %.not147, i32 %b258, i32 %a256
  %b259 = add nsw i32 %b539, -7
  %371 = call i32 @llvm.smin.i32(i32 %b259, i32 %a392)
  %372 = shl nsw i32 %371, 1
  %b257 = add nsw i32 %372, -1
  %a254 = call i32 @llvm.smin.i32(i32 %b257, i32 %a255)
  %a253 = call i32 @llvm.smin.i32(i32 %a256, i32 %a254)
  %a252 = call i32 @llvm.smin.i32(i32 %369, i32 %a253)
  %f4.v4.min_realized = call i32 @llvm.smin.i32(i32 %a133, i32 %a252)
  %373 = sub nsw i32 %b539, %a392
  %374 = ashr i32 %373, 3
  %375 = and i32 %373, -8
  %376 = add nsw i32 %a392, 7
  %a271 = add i32 %376, %375
  %377 = call i32 @llvm.smin.i32(i32 %b539, i32 %a271)
  %378 = shl nsw i32 %377, 1
  %a270 = add nsw i32 %378, 2
  %379 = ashr i32 %b94, 1
  %b272 = add nsw i32 %379, 1
  %a269 = call i32 @llvm.smax.i32(i32 %a270, i32 %b272)
  %b269 = call i32 @llvm.smax.i32(i32 %a269, i32 %379)
  %380 = call i32 @llvm.smax.i32(i32 %302, i32 %b269)
  %b280 = add nsw i32 %b556, -7
  %381 = call i32 @llvm.smin.i32(i32 %b280, i32 %a416)
  %382 = shl nsw i32 %381, 1
  %a277 = add nsw i32 %382, -1
  %383 = ashr i32 %b74, 1
  %a279 = add nsw i32 %383, -1
  %384 = ashr i32 %b79, 1
  %b281 = add nsw i32 %384, -6
  %.not148 = icmp slt i32 %b281, %383
  %b279 = select i1 %.not148, i32 %b281, i32 %a279
  %.not149 = icmp slt i32 %b279, %382
  %a276 = select i1 %.not149, i32 %b279, i32 %a277
  %385 = ashr i32 %b160, 1
  %b278 = add nsw i32 %385, -1
  %a275 = call i32 @llvm.smin.i32(i32 %b278, i32 %a276)
  %a274 = call i32 @llvm.smin.i32(i32 %385, i32 %a275)
  %f4.v3.min_realized = call i32 @llvm.smin.i32(i32 %a163, i32 %a274)
  %386 = sub nsw i32 %b556, %a416
  %387 = and i32 %386, -8
  %388 = add nsw i32 %a416, 7
  %a299 = add i32 %388, %387
  %389 = call i32 @llvm.smin.i32(i32 %b556, i32 %a299)
  %390 = shl nsw i32 %389, 1
  %a298 = add nsw i32 %390, 2
  %reass.sub530 = sub nsw i32 %384, %383
  %391 = add i32 %reass.sub530, 2
  %392 = and i32 %391, -8
  %393 = add nsw i32 %392, %383
  %a300 = add nsw i32 %393, -1
  %.not150 = icmp slt i32 %b281, %393
  %394 = select i1 %.not150, i32 %b281, i32 %a300
  %b300 = add nsw i32 %394, 7
  %a297 = call i32 @llvm.smax.i32(i32 %a298, i32 %b300)
  %395 = add nsw i32 %319, 9
  %b299 = ashr i32 %395, 1
  %a296 = call i32 @llvm.smax.i32(i32 %a297, i32 %b299)
  %b298 = ashr i32 %b188, 1
  %b296 = call i32 @llvm.smax.i32(i32 %a296, i32 %b298)
  %396 = call i32 @llvm.smax.i32(i32 %315, i32 %b296)
  %f4.v3.extent_realized.s = sub nsw i32 %396, %f4.v3.min_realized
  %397 = add nsw i32 %f4.v6.extent_realized.s, 1
  %398 = add nsw i32 %f4.v3.extent_realized.s, 1
  %f4.stride.1 = mul nsw i32 %398, %397
  %reass.sub531 = sub i32 %380, %f4.v4.min_realized
  %399 = add i32 %reass.sub531, 1
  %400 = zext i32 %399 to i64
  %401 = zext i32 %398 to i64
  %402 = shl nuw nsw i64 %401, 2
  %403 = and i64 %402, 4294967292
  %404 = mul nuw i64 %403, %400
  %405 = lshr i64 %404, 32
  %406 = lshr i64 %401, 30
  %407 = mul nuw nsw i64 %406, %400
  %t3067 = add nuw nsw i64 %405, %407
  %t3068 = mul i64 %402, %400
  %408 = zext i32 %397 to i64
  %409 = mul i64 %t3068, %408
  %410 = icmp ult i64 %409, 2147483648
  %411 = and i64 %t3068, 4294967292
  %412 = mul nuw i64 %411, %408
  %413 = lshr i64 %412, 32
  %414 = mul i64 %t3067, %408
  %415 = add i64 %414, %413
  %416 = or i64 %415, %t3067
  %417 = icmp ult i64 %416, 4294967296
  %418 = and i1 %410, %417
  br i1 %418, label %"assert succeeded110", label %"assert failed109", !prof !5

"assert failed109":                               ; preds = %"consume f2"
  %419 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.11, i64 %409, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded110":                            ; preds = %"consume f2"
  %420 = add nuw nsw i64 %409, 4
  %421 = call ptr @halide_malloc(ptr null, i64 %420)
  %.not532 = icmp eq ptr %421, null
  br i1 %.not532, label %"assert failed111", label %"produce f4", !prof !4

"assert failed111":                               ; preds = %"assert succeeded110"
  %422 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f4":                                     ; preds = %"assert succeeded110"
  %f4.s0.v6.loop_extent.s = sub nsw i32 %115, %111
  %423 = add nsw i32 %298, 9
  %424 = ashr i32 %423, 3
  store float %beta, ptr %11, align 8
  %425 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 1
  store i32 %b121, ptr %425, align 4
  %426 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 2
  store i32 %a772, ptr %426, align 8
  %427 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 3
  store i32 %f2.v3.extent_realized.s, ptr %427, align 4
  %428 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 4
  store i32 %f2.v3.min_realized, ptr %428, align 8
  %429 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 5
  store i32 %f2.v4.min_realized, ptr %429, align 4
  %430 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 6
  store i32 %b465, ptr %430, align 8
  %431 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 7
  store i32 %f4.s0.v3.min.s, ptr %431, align 4
  %432 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 8
  store i32 %b448, ptr %432, align 8
  %433 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 9
  store i32 %f4.s0.v4.min.s, ptr %433, align 4
  %434 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 10
  store i32 %f4.s0.v6.loop_extent.s, ptr %434, align 8
  %435 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 11
  store i32 %f4.stride.1, ptr %435, align 4
  %436 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 12
  store i32 %f4.v3.extent_realized.s, ptr %436, align 8
  %437 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 13
  store i32 %f4.v3.min_realized, ptr %437, align 4
  %438 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 14
  store i32 %f4.v4.min_realized, ptr %438, align 8
  %439 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 15
  store i32 %levels, ptr %439, align 4
  %440 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 16
  store ptr %209, ptr %440, align 8
  %441 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 17
  store ptr null, ptr %441, align 8
  %442 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 18
  store ptr %338, ptr %442, align 8
  %443 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 19
  store ptr null, ptr %443, align 8
  %444 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 20
  store ptr %421, ptr %444, align 8
  %445 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 21
  store ptr null, ptr %445, align 8
  %446 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f4.s0.v4.v4, i32 0, i32 %424, ptr nonnull %11)
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %"consume f4", label %call_destructor.exit210.thread374, !prof !5

"consume f4":                                     ; preds = %"produce f4"
  %b385 = add nsw i32 %b624, -7
  %448 = call i32 @llvm.smin.i32(i32 %b385, i32 %a485)
  %449 = shl nsw i32 %448, 1
  %a382 = add nsw i32 %449, -1
  %450 = add nsw i32 %b89, -6
  %b384 = ashr i32 %450, 2
  %.not151 = icmp slt i32 %b384, %449
  %a381 = select i1 %.not151, i32 %b384, i32 %a382
  %451 = ashr i32 %a255, 1
  %b383 = add nsw i32 %451, -1
  %a380 = call i32 @llvm.smin.i32(i32 %b383, i32 %a381)
  %a379 = call i32 @llvm.smin.i32(i32 %451, i32 %a380)
  %f5.v4.min_realized = call i32 @llvm.smin.i32(i32 %371, i32 %a379)
  %452 = sub nsw i32 %b624, %a485
  %453 = ashr i32 %452, 3
  %454 = and i32 %452, -8
  %455 = add nsw i32 %a485, 7
  %a397 = add i32 %455, %454
  %456 = call i32 @llvm.smin.i32(i32 %b624, i32 %a397)
  %457 = shl nsw i32 %456, 1
  %a396 = add nsw i32 %457, 2
  %458 = add nsw i32 %b94, 6
  %b398 = ashr i32 %458, 2
  %a395 = call i32 @llvm.smax.i32(i32 %a396, i32 %b398)
  %459 = add nsw i32 %b94, 2
  %b397 = ashr i32 %459, 2
  %b395 = call i32 @llvm.smax.i32(i32 %a395, i32 %b397)
  %460 = call i32 @llvm.smax.i32(i32 %377, i32 %b395)
  %b406 = add nsw i32 %b641, -7
  %461 = call i32 @llvm.smin.i32(i32 %b406, i32 %a509)
  %462 = shl nsw i32 %461, 1
  %a403 = add nsw i32 %462, -1
  %a405 = add nsw i32 %b74, -6
  %b407 = add nsw i32 %b79, -22
  %463 = call i32 @llvm.smin.i32(i32 %b407, i32 %a405)
  %b405 = ashr i32 %463, 2
  %.not152 = icmp slt i32 %b405, %462
  %a402 = select i1 %.not152, i32 %b405, i32 %a403
  %464 = ashr i32 %b279, 1
  %b404 = add nsw i32 %464, -1
  %a401 = call i32 @llvm.smin.i32(i32 %b404, i32 %a402)
  %a400 = call i32 @llvm.smin.i32(i32 %464, i32 %a401)
  %f5.v3.min_realized = call i32 @llvm.smin.i32(i32 %381, i32 %a400)
  %465 = sub nsw i32 %b641, %a509
  %466 = and i32 %465, -8
  %467 = add nsw i32 %a509, 7
  %a422 = add i32 %467, %466
  %468 = call i32 @llvm.smin.i32(i32 %b641, i32 %a422)
  %469 = shl nsw i32 %468, 1
  %a421 = add nsw i32 %469, 2
  %470 = ashr i32 %a405, 2
  %471 = add nsw i32 %b79, 6
  %472 = ashr i32 %471, 2
  %473 = sub nsw i32 %472, %470
  %474 = and i32 %473, -8
  %a423 = add nsw i32 %474, %470
  %b425 = ashr i32 %b407, 2
  %475 = call i32 @llvm.smin.i32(i32 %b425, i32 %a423)
  %b423 = add nsw i32 %475, 7
  %a420 = call i32 @llvm.smax.i32(i32 %a421, i32 %b423)
  %476 = add nsw i32 %394, 9
  %b422 = ashr i32 %476, 1
  %a419 = call i32 @llvm.smax.i32(i32 %a420, i32 %b422)
  %b421 = ashr i32 %b300, 1
  %b419 = call i32 @llvm.smax.i32(i32 %a419, i32 %b421)
  %477 = call i32 @llvm.smax.i32(i32 %389, i32 %b419)
  %f5.v3.extent_realized.s = sub nsw i32 %477, %f5.v3.min_realized
  %478 = add nsw i32 %f5.v3.extent_realized.s, 1
  %f5.stride.1 = mul nsw i32 %478, %397
  %reass.sub533 = sub i32 %460, %f5.v4.min_realized
  %479 = add i32 %reass.sub533, 1
  %480 = zext i32 %479 to i64
  %481 = zext i32 %478 to i64
  %482 = shl nuw nsw i64 %481, 2
  %483 = and i64 %482, 4294967292
  %484 = mul nuw i64 %483, %480
  %485 = lshr i64 %484, 32
  %486 = lshr i64 %481, 30
  %487 = mul nuw nsw i64 %486, %480
  %t3069 = add nuw nsw i64 %485, %487
  %t3070 = mul i64 %482, %480
  %488 = mul i64 %t3070, %408
  %489 = icmp ult i64 %488, 2147483648
  %490 = and i64 %t3070, 4294967292
  %491 = mul nuw i64 %490, %408
  %492 = lshr i64 %491, 32
  %493 = mul i64 %t3069, %408
  %494 = add i64 %493, %492
  %495 = or i64 %494, %t3069
  %496 = icmp ult i64 %495, 4294967296
  %497 = and i1 %489, %496
  br i1 %497, label %"assert succeeded116", label %"assert failed115", !prof !5

"assert failed115":                               ; preds = %"consume f4"
  %498 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.12, i64 %488, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded116":                            ; preds = %"consume f4"
  %499 = add nuw nsw i64 %488, 4
  %500 = call ptr @halide_malloc(ptr null, i64 %499)
  %.not534 = icmp eq ptr %500, null
  br i1 %.not534, label %"assert failed117", label %"produce f5", !prof !4

"assert failed117":                               ; preds = %"assert succeeded116"
  %501 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f5":                                     ; preds = %"assert succeeded116"
  %502 = add nsw i32 %374, 1
  store i32 %a772, ptr %10, align 8
  %503 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 1
  store i32 %f4.stride.1, ptr %503, align 4
  %504 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 2
  store i32 %f4.v3.extent_realized.s, ptr %504, align 8
  %505 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 3
  store i32 %f4.v3.min_realized, ptr %505, align 4
  %506 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 4
  store i32 %f4.v4.min_realized, ptr %506, align 8
  %507 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 5
  store i32 %b556, ptr %507, align 4
  %508 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 6
  store i32 %a416, ptr %508, align 8
  %509 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 7
  store i32 %b539, ptr %509, align 4
  %510 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 8
  store i32 %a392, ptr %510, align 8
  %511 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %511, align 4
  %512 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 10
  store i32 %f5.stride.1, ptr %512, align 8
  %513 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 11
  store i32 %f5.v3.extent_realized.s, ptr %513, align 4
  %514 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 12
  store i32 %f5.v3.min_realized, ptr %514, align 8
  %515 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 13
  store i32 %f5.v4.min_realized, ptr %515, align 4
  %516 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 14
  store ptr %421, ptr %516, align 8
  %517 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 15
  store ptr null, ptr %517, align 8
  %518 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 16
  store ptr %500, ptr %518, align 8
  %519 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 17
  store ptr null, ptr %519, align 8
  %520 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f5.s0.v4.v4, i32 0, i32 %502, ptr nonnull %10)
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %"consume f5", label %call_destructor.exit210.thread374, !prof !5

"consume f5":                                     ; preds = %"produce f5"
  %b440 = add nsw i32 %b539, -31
  %522 = call i32 @llvm.smin.i32(i32 %b440, i32 %a535)
  %523 = shl nsw i32 %522, 1
  %b438 = add nsw i32 %523, -1
  %a435 = call i32 @llvm.smin.i32(i32 %b438, i32 %a255)
  %f72.v4.min_realized = call i32 @llvm.smin.i32(i32 %b135, i32 %a435)
  %524 = sub nsw i32 %b539, %a535
  %525 = ashr i32 %524, 5
  %526 = and i32 %524, -32
  %527 = add nsw i32 %a535, 31
  %a448 = add i32 %527, %526
  %528 = call i32 @llvm.smin.i32(i32 %b539, i32 %a448)
  %529 = shl nsw i32 %528, 1
  %a447 = add nsw i32 %529, 2
  %b447 = call i32 @llvm.smax.i32(i32 %a447, i32 %b272)
  %530 = call i32 @llvm.smax.i32(i32 %t1938, i32 %b447)
  %531 = call i32 @llvm.smin.i32(i32 %b280, i32 %a552)
  %532 = shl nsw i32 %531, 1
  %a451 = add nsw i32 %532, -1
  %.not153 = icmp slt i32 %b279, %532
  %a450 = select i1 %.not153, i32 %b279, i32 %a451
  %f72.v3.min_realized = call i32 @llvm.smin.i32(i32 %b165, i32 %a450)
  %533 = sub nsw i32 %b556, %a552
  %534 = and i32 %533, -8
  %535 = add nsw i32 %a552, 7
  %a465 = add i32 %535, %534
  %536 = call i32 @llvm.smin.i32(i32 %b556, i32 %a465)
  %537 = shl nsw i32 %536, 1
  %a464 = add nsw i32 %537, 2
  %b464 = call i32 @llvm.smax.i32(i32 %a464, i32 %b300)
  %538 = call i32 @llvm.smax.i32(i32 %t1943, i32 %b464)
  %f72.v3.extent_realized.s = sub nsw i32 %538, %f72.v3.min_realized
  %reass.sub535 = sub i32 %530, %f72.v4.min_realized
  %539 = add i32 %reass.sub535, 1
  %540 = zext i32 %539 to i64
  %541 = add nsw i32 %f72.v3.extent_realized.s, 1
  %542 = zext i32 %541 to i64
  %543 = shl nuw nsw i64 %542, 2
  %544 = mul i64 %543, %540
  %545 = icmp ult i64 %544, 2147483648
  %546 = and i64 %543, 4294967292
  %547 = mul nuw i64 %546, %540
  %548 = lshr i64 %547, 32
  %549 = lshr i64 %542, 30
  %550 = mul nuw nsw i64 %549, %540
  %551 = add nuw nsw i64 %548, %550
  %552 = icmp ult i64 %551, 4294967296
  %553 = and i1 %545, %552
  br i1 %553, label %"assert succeeded122", label %"assert failed121", !prof !5

"assert failed121":                               ; preds = %"consume f5"
  %554 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.13, i64 %544, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded122":                            ; preds = %"consume f5"
  %555 = add nuw nsw i64 %544, 4
  %556 = call ptr @halide_malloc(ptr null, i64 %555)
  %.not536 = icmp eq ptr %556, null
  br i1 %.not536, label %"assert failed123", label %"produce f72", !prof !4

"assert failed123":                               ; preds = %"assert succeeded122"
  %557 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f72":                                    ; preds = %"assert succeeded122"
  %558 = add nsw i32 %294, 33
  %559 = ashr i32 %558, 5
  store i32 %f2.v3.extent_realized.s, ptr %9, align 8
  %560 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 1
  store i32 %f2.v3.min_realized, ptr %560, align 4
  %561 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 2
  store i32 %f2.v4.min_realized, ptr %561, align 8
  %562 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 3
  store i32 %b465, ptr %562, align 4
  %563 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 4
  store i32 %f72.s0.v3.min.s, ptr %563, align 8
  %564 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 5
  store i32 %b448, ptr %564, align 4
  %565 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 6
  store i32 %f72.s0.v4.min.s, ptr %565, align 8
  %566 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 7
  store i32 %f72.v3.extent_realized.s, ptr %566, align 4
  %567 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 8
  store i32 %f72.v3.min_realized, ptr %567, align 8
  %568 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 9
  store i32 %f72.v4.min_realized, ptr %568, align 4
  %569 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 10
  store ptr %338, ptr %569, align 8
  %570 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 11
  store ptr null, ptr %570, align 8
  %571 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 12
  store ptr %556, ptr %571, align 8
  %572 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 13
  store ptr null, ptr %572, align 8
  %573 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f72.s0.v4.v4, i32 0, i32 %559, ptr nonnull %9)
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %"consume f72", label %call_destructor.exit210.thread374, !prof !5

"consume f72":                                    ; preds = %"produce f72"
  %b480 = add nsw i32 %b695, -7
  %575 = call i32 @llvm.smin.i32(i32 %b480, i32 %a574)
  %576 = shl nsw i32 %575, 1
  %a477 = add nsw i32 %576, -1
  %577 = add nsw i32 %b89, -14
  %b479 = ashr i32 %577, 3
  %.not154 = icmp slt i32 %b479, %576
  %a476 = select i1 %.not154, i32 %b479, i32 %a477
  %b478 = ashr i32 %450, 3
  %a475 = call i32 @llvm.smin.i32(i32 %b478, i32 %a476)
  %f6.v4.min_realized = call i32 @llvm.smin.i32(i32 %448, i32 %a475)
  %578 = sub nsw i32 %b695, %a574
  %579 = ashr i32 %578, 3
  %580 = and i32 %578, -8
  %581 = add nsw i32 %a574, 7
  %a490 = add i32 %581, %580
  %582 = call i32 @llvm.smin.i32(i32 %b695, i32 %a490)
  %583 = shl nsw i32 %582, 1
  %a489 = add nsw i32 %583, 2
  %584 = add nsw i32 %b94, 14
  %b491 = ashr i32 %584, 3
  %a488 = call i32 @llvm.smax.i32(i32 %a489, i32 %b491)
  %b490 = ashr i32 %458, 3
  %b488 = call i32 @llvm.smax.i32(i32 %a488, i32 %b490)
  %585 = call i32 @llvm.smax.i32(i32 %456, i32 %b488)
  %b499 = add nsw i32 %b709, -7
  %586 = call i32 @llvm.smin.i32(i32 %b499, i32 %a595)
  %587 = shl nsw i32 %586, 1
  %a496 = add nsw i32 %587, -1
  %a498 = add nsw i32 %b74, -14
  %b500 = add nsw i32 %b79, -42
  %588 = call i32 @llvm.smin.i32(i32 %b500, i32 %a498)
  %b498 = ashr i32 %588, 3
  %.not155 = icmp slt i32 %b498, %587
  %a495 = select i1 %.not155, i32 %b498, i32 %a496
  %589 = ashr i32 %463, 3
  %b497 = add nsw i32 %589, -1
  %a494 = call i32 @llvm.smin.i32(i32 %b497, i32 %a495)
  %a493 = call i32 @llvm.smin.i32(i32 %589, i32 %a494)
  %f6.v3.min_realized = call i32 @llvm.smin.i32(i32 %461, i32 %a493)
  %590 = sub nsw i32 %b709, %a595
  %591 = and i32 %590, -8
  %592 = add nsw i32 %a595, 7
  %a515 = add i32 %592, %591
  %593 = call i32 @llvm.smin.i32(i32 %b709, i32 %a515)
  %594 = shl nsw i32 %593, 1
  %a514 = add nsw i32 %594, 2
  %595 = ashr i32 %a498, 3
  %596 = add nsw i32 %b79, 14
  %597 = ashr i32 %596, 3
  %598 = sub nsw i32 %597, %595
  %599 = and i32 %598, -8
  %a516 = add nsw i32 %599, %595
  %b518 = ashr i32 %b500, 3
  %600 = call i32 @llvm.smin.i32(i32 %b518, i32 %a516)
  %b516 = add nsw i32 %600, 7
  %a513 = call i32 @llvm.smax.i32(i32 %a514, i32 %b516)
  %601 = add nsw i32 %475, 9
  %b515 = ashr i32 %601, 1
  %a512 = call i32 @llvm.smax.i32(i32 %a513, i32 %b515)
  %b514 = ashr i32 %b423, 1
  %b512 = call i32 @llvm.smax.i32(i32 %a512, i32 %b514)
  %602 = call i32 @llvm.smax.i32(i32 %468, i32 %b512)
  %f6.v3.extent_realized.s = sub nsw i32 %602, %f6.v3.min_realized
  %603 = add nsw i32 %f6.v3.extent_realized.s, 1
  %f6.stride.1 = mul nsw i32 %603, %397
  %reass.sub537 = sub i32 %585, %f6.v4.min_realized
  %604 = add i32 %reass.sub537, 1
  %605 = zext i32 %604 to i64
  %606 = zext i32 %603 to i64
  %607 = shl nuw nsw i64 %606, 2
  %608 = and i64 %607, 4294967292
  %609 = mul nuw i64 %608, %605
  %610 = lshr i64 %609, 32
  %611 = lshr i64 %606, 30
  %612 = mul nuw nsw i64 %611, %605
  %t3071 = add nuw nsw i64 %610, %612
  %t3072 = mul i64 %607, %605
  %613 = mul i64 %t3072, %408
  %614 = icmp ult i64 %613, 2147483648
  %615 = and i64 %t3072, 4294967292
  %616 = mul nuw i64 %615, %408
  %617 = lshr i64 %616, 32
  %618 = mul i64 %t3071, %408
  %619 = add i64 %618, %617
  %620 = or i64 %619, %t3071
  %621 = icmp ult i64 %620, 4294967296
  %622 = and i1 %614, %621
  br i1 %622, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"consume f72"
  %623 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.14, i64 %613, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded128":                            ; preds = %"consume f72"
  %624 = add nuw nsw i64 %613, 4
  %625 = call ptr @halide_malloc(ptr null, i64 %624)
  %.not538 = icmp eq ptr %625, null
  br i1 %.not538, label %"assert failed129", label %"produce f6", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %626 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f6":                                     ; preds = %"assert succeeded128"
  %627 = add nsw i32 %453, 1
  store i32 %a772, ptr %8, align 8
  %628 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 1
  store i32 %f5.stride.1, ptr %628, align 4
  %629 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 2
  store i32 %f5.v3.extent_realized.s, ptr %629, align 8
  %630 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 3
  store i32 %f5.v3.min_realized, ptr %630, align 4
  %631 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 4
  store i32 %f5.v4.min_realized, ptr %631, align 8
  %632 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 5
  store i32 %b641, ptr %632, align 4
  %633 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 6
  store i32 %a509, ptr %633, align 8
  %634 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 7
  store i32 %b624, ptr %634, align 4
  %635 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 8
  store i32 %a485, ptr %635, align 8
  %636 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %636, align 4
  %637 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 10
  store i32 %f6.stride.1, ptr %637, align 8
  %638 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 11
  store i32 %f6.v3.extent_realized.s, ptr %638, align 4
  %639 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 12
  store i32 %f6.v3.min_realized, ptr %639, align 8
  %640 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 13
  store i32 %f6.v4.min_realized, ptr %640, align 4
  %641 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 14
  store ptr %500, ptr %641, align 8
  %642 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 15
  store ptr null, ptr %642, align 8
  %643 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 16
  store ptr %625, ptr %643, align 8
  %644 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 17
  store ptr null, ptr %644, align 8
  %645 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f6.s0.v4.v4, i32 0, i32 %627, ptr nonnull %8)
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %"consume f6", label %call_destructor.exit210.thread374, !prof !5

"consume f6":                                     ; preds = %"produce f6"
  %b532 = add nsw i32 %b624, -31
  %647 = call i32 @llvm.smin.i32(i32 %b532, i32 %a620)
  %648 = shl nsw i32 %647, 1
  %a529 = add nsw i32 %648, -1
  %.not156 = icmp slt i32 %b384, %648
  %a528 = select i1 %.not156, i32 %b384, i32 %a529
  %f73.v4.min_realized = call i32 @llvm.smin.i32(i32 %522, i32 %a528)
  %649 = sub nsw i32 %b624, %a620
  %650 = ashr i32 %649, 5
  %651 = and i32 %649, -32
  %652 = add nsw i32 %a620, 31
  %a539 = add i32 %652, %651
  %653 = call i32 @llvm.smin.i32(i32 %b624, i32 %a539)
  %654 = shl nsw i32 %653, 1
  %a538 = add nsw i32 %654, 2
  %b538 = call i32 @llvm.smax.i32(i32 %a538, i32 %b398)
  %655 = call i32 @llvm.smax.i32(i32 %528, i32 %b538)
  %656 = call i32 @llvm.smin.i32(i32 %b406, i32 %a637)
  %657 = shl nsw i32 %656, 1
  %a542 = add nsw i32 %657, -1
  %.not157 = icmp slt i32 %b405, %657
  %a541 = select i1 %.not157, i32 %b405, i32 %a542
  %f73.v3.min_realized = call i32 @llvm.smin.i32(i32 %531, i32 %a541)
  %658 = sub nsw i32 %b641, %a637
  %659 = and i32 %658, -8
  %660 = add nsw i32 %a637, 7
  %a556 = add i32 %660, %659
  %661 = call i32 @llvm.smin.i32(i32 %b641, i32 %a556)
  %662 = shl nsw i32 %661, 1
  %a555 = add nsw i32 %662, 2
  %b555 = call i32 @llvm.smax.i32(i32 %a555, i32 %b423)
  %663 = call i32 @llvm.smax.i32(i32 %536, i32 %b555)
  %f73.v3.extent_realized.s = sub nsw i32 %663, %f73.v3.min_realized
  %reass.sub539 = sub i32 %655, %f73.v4.min_realized
  %664 = add i32 %reass.sub539, 1
  %665 = zext i32 %664 to i64
  %666 = add nsw i32 %f73.v3.extent_realized.s, 1
  %667 = zext i32 %666 to i64
  %668 = shl nuw nsw i64 %667, 2
  %669 = mul i64 %668, %665
  %670 = icmp ult i64 %669, 2147483648
  %671 = and i64 %668, 4294967292
  %672 = mul nuw i64 %671, %665
  %673 = lshr i64 %672, 32
  %674 = lshr i64 %667, 30
  %675 = mul nuw nsw i64 %674, %665
  %676 = add nuw nsw i64 %673, %675
  %677 = icmp ult i64 %676, 4294967296
  %678 = and i1 %670, %677
  br i1 %678, label %"assert succeeded134", label %"assert failed133", !prof !5

"assert failed133":                               ; preds = %"consume f6"
  %679 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.15, i64 %669, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded134":                            ; preds = %"consume f6"
  %680 = add nuw nsw i64 %669, 4
  %681 = call ptr @halide_malloc(ptr null, i64 %680)
  %.not540 = icmp eq ptr %681, null
  br i1 %.not540, label %"assert failed135", label %"produce f73", !prof !4

"assert failed135":                               ; preds = %"assert succeeded134"
  %682 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f73":                                    ; preds = %"assert succeeded134"
  %683 = add nsw i32 %525, 1
  store i32 %f72.v3.extent_realized.s, ptr %7, align 8
  %684 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 1
  store i32 %f72.v3.min_realized, ptr %684, align 4
  %685 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 2
  store i32 %f72.v4.min_realized, ptr %685, align 8
  %686 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 3
  store i32 %b556, ptr %686, align 4
  %687 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 4
  store i32 %a552, ptr %687, align 8
  %688 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 5
  store i32 %b539, ptr %688, align 4
  %689 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 6
  store i32 %a535, ptr %689, align 8
  %690 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 7
  store i32 %f73.v3.extent_realized.s, ptr %690, align 4
  %691 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 8
  store i32 %f73.v3.min_realized, ptr %691, align 8
  %692 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 9
  store i32 %f73.v4.min_realized, ptr %692, align 4
  %693 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 10
  store ptr %556, ptr %693, align 8
  %694 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 11
  store ptr null, ptr %694, align 8
  %695 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 12
  store ptr %681, ptr %695, align 8
  %696 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 13
  store ptr null, ptr %696, align 8
  %697 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f73.s0.v4.v4, i32 0, i32 %683, ptr nonnull %7)
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %"consume f73", label %call_destructor.exit210.thread374, !prof !5

"consume f73":                                    ; preds = %"produce f73"
  %699 = add nsw i32 %b89, -30
  %b570 = ashr i32 %699, 4
  %.not158 = icmp slt i32 %b570, %87
  %a567 = select i1 %.not158, i32 %b570, i32 %b31
  %b569 = ashr i32 %577, 4
  %a566 = call i32 @llvm.smin.i32(i32 %b569, i32 %a567)
  %f7.v4.min_realized = call i32 @llvm.smin.i32(i32 %575, i32 %a566)
  %700 = add nsw i32 %b94, 30
  %b580 = ashr i32 %700, 4
  %a577 = call i32 @llvm.smax.i32(i32 %b18, i32 %b580)
  %b579 = ashr i32 %584, 4
  %b577 = call i32 @llvm.smax.i32(i32 %a577, i32 %b579)
  %701 = call i32 @llvm.smax.i32(i32 %582, i32 %b577)
  %a585 = add nsw i32 %b74, -30
  %b587 = add nsw i32 %b79, -82
  %702 = call i32 @llvm.smin.i32(i32 %b587, i32 %a585)
  %b586 = ashr i32 %702, 4
  %.not159 = icmp slt i32 %b586, %88
  %a583 = select i1 %.not159, i32 %b586, i32 %b33
  %703 = ashr i32 %588, 4
  %b585 = add nsw i32 %703, -1
  %a582 = call i32 @llvm.smin.i32(i32 %b585, i32 %a583)
  %a581 = call i32 @llvm.smin.i32(i32 %703, i32 %a582)
  %f7.v3.min_realized = call i32 @llvm.smin.i32(i32 %586, i32 %a581)
  %704 = ashr i32 %a585, 4
  %705 = add nsw i32 %b79, 30
  %706 = ashr i32 %705, 4
  %707 = sub nsw i32 %706, %704
  %708 = and i32 %707, -8
  %a601 = add nsw i32 %708, %704
  %b603 = ashr i32 %b587, 4
  %709 = call i32 @llvm.smin.i32(i32 %b603, i32 %a601)
  %b602 = add nsw i32 %709, 7
  %a599 = call i32 @llvm.smax.i32(i32 %b20, i32 %b602)
  %710 = add nsw i32 %600, 9
  %b601 = ashr i32 %710, 1
  %a598 = call i32 @llvm.smax.i32(i32 %a599, i32 %b601)
  %b600 = ashr i32 %b516, 1
  %b598 = call i32 @llvm.smax.i32(i32 %a598, i32 %b600)
  %711 = call i32 @llvm.smax.i32(i32 %593, i32 %b598)
  %f7.v3.extent_realized.s = sub nsw i32 %711, %f7.v3.min_realized
  %712 = add nsw i32 %f7.v3.extent_realized.s, 1
  %f7.stride.1 = mul nsw i32 %712, %397
  %reass.sub541 = sub i32 %701, %f7.v4.min_realized
  %713 = add i32 %reass.sub541, 1
  %714 = zext i32 %713 to i64
  %715 = zext i32 %712 to i64
  %716 = shl nuw nsw i64 %715, 2
  %717 = and i64 %716, 4294967292
  %718 = mul nuw i64 %717, %714
  %719 = lshr i64 %718, 32
  %720 = lshr i64 %715, 30
  %721 = mul nuw nsw i64 %720, %714
  %t3073 = add nuw nsw i64 %719, %721
  %t3074 = mul i64 %716, %714
  %722 = mul i64 %t3074, %408
  %723 = icmp ult i64 %722, 2147483648
  %724 = and i64 %t3074, 4294967292
  %725 = mul nuw i64 %724, %408
  %726 = lshr i64 %725, 32
  %727 = mul i64 %t3073, %408
  %728 = add i64 %727, %726
  %729 = or i64 %728, %t3073
  %730 = icmp ult i64 %729, 4294967296
  %731 = and i1 %723, %730
  br i1 %731, label %"assert succeeded140", label %"assert failed139", !prof !5

"assert failed139":                               ; preds = %"consume f73"
  %732 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.16, i64 %722, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded140":                            ; preds = %"consume f73"
  %733 = add nuw nsw i64 %722, 4
  %734 = call ptr @halide_malloc(ptr null, i64 %733)
  %.not542 = icmp eq ptr %734, null
  br i1 %.not542, label %"assert failed141", label %"produce f7", !prof !4

"assert failed141":                               ; preds = %"assert succeeded140"
  %735 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f7":                                     ; preds = %"assert succeeded140"
  %736 = add nsw i32 %579, 1
  store i32 %a772, ptr %6, align 8
  %737 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 1
  store i32 %f6.stride.1, ptr %737, align 4
  %738 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 2
  store i32 %f6.v3.extent_realized.s, ptr %738, align 8
  %739 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 3
  store i32 %f6.v3.min_realized, ptr %739, align 4
  %740 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 4
  store i32 %f6.v4.min_realized, ptr %740, align 8
  %741 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 5
  store i32 %b709, ptr %741, align 4
  %742 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 6
  store i32 %a595, ptr %742, align 8
  %743 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 7
  store i32 %b695, ptr %743, align 4
  %744 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 8
  store i32 %a574, ptr %744, align 8
  %745 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %745, align 4
  %746 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 10
  store i32 %f7.stride.1, ptr %746, align 8
  %747 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 11
  store i32 %f7.v3.extent_realized.s, ptr %747, align 4
  %748 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 12
  store i32 %f7.v3.min_realized, ptr %748, align 8
  %749 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 13
  store i32 %f7.v4.min_realized, ptr %749, align 4
  %750 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 14
  store ptr %625, ptr %750, align 8
  %751 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 15
  store ptr null, ptr %751, align 8
  %752 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 16
  store ptr %734, ptr %752, align 8
  %753 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 17
  store ptr null, ptr %753, align 8
  %754 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f7.s0.v4.v4, i32 0, i32 %736, ptr nonnull %6)
  %755 = icmp eq i32 %754, 0
  br i1 %755, label %"consume f7", label %call_destructor.exit210.thread374, !prof !5

"consume f7":                                     ; preds = %"produce f7"
  %b617 = add nsw i32 %b695, -31
  %756 = call i32 @llvm.smin.i32(i32 %b617, i32 %a691)
  %757 = shl nsw i32 %756, 1
  %a614 = add nsw i32 %757, -1
  %.not160 = icmp slt i32 %b479, %757
  %a613 = select i1 %.not160, i32 %b479, i32 %a614
  %f74.v4.min_realized = call i32 @llvm.smin.i32(i32 %647, i32 %a613)
  %758 = sub nsw i32 %b695, %a691
  %759 = ashr i32 %758, 5
  %760 = and i32 %758, -32
  %761 = add nsw i32 %a691, 31
  %a624 = add i32 %761, %760
  %762 = call i32 @llvm.smin.i32(i32 %b695, i32 %a624)
  %763 = shl nsw i32 %762, 1
  %a623 = add nsw i32 %763, 2
  %b623 = call i32 @llvm.smax.i32(i32 %a623, i32 %b491)
  %764 = call i32 @llvm.smax.i32(i32 %653, i32 %b623)
  %765 = call i32 @llvm.smin.i32(i32 %b499, i32 %a705)
  %766 = shl nsw i32 %765, 1
  %a627 = add nsw i32 %766, -1
  %.not161 = icmp slt i32 %b498, %766
  %a626 = select i1 %.not161, i32 %b498, i32 %a627
  %f74.v3.min_realized = call i32 @llvm.smin.i32(i32 %656, i32 %a626)
  %767 = sub nsw i32 %b709, %a705
  %768 = and i32 %767, -8
  %769 = add nsw i32 %a705, 7
  %a641 = add i32 %769, %768
  %770 = call i32 @llvm.smin.i32(i32 %b709, i32 %a641)
  %771 = shl nsw i32 %770, 1
  %a640 = add nsw i32 %771, 2
  %b640 = call i32 @llvm.smax.i32(i32 %a640, i32 %b516)
  %772 = call i32 @llvm.smax.i32(i32 %661, i32 %b640)
  %f74.v3.extent_realized.s = sub nsw i32 %772, %f74.v3.min_realized
  %reass.sub543 = sub i32 %764, %f74.v4.min_realized
  %773 = add i32 %reass.sub543, 1
  %774 = zext i32 %773 to i64
  %775 = add nsw i32 %f74.v3.extent_realized.s, 1
  %776 = zext i32 %775 to i64
  %777 = shl nuw nsw i64 %776, 2
  %778 = mul i64 %777, %774
  %779 = icmp ult i64 %778, 2147483648
  %780 = and i64 %777, 4294967292
  %781 = mul nuw i64 %780, %774
  %782 = lshr i64 %781, 32
  %783 = lshr i64 %776, 30
  %784 = mul nuw nsw i64 %783, %774
  %785 = add nuw nsw i64 %782, %784
  %786 = icmp ult i64 %785, 4294967296
  %787 = and i1 %779, %786
  br i1 %787, label %"assert succeeded146", label %"assert failed145", !prof !5

"assert failed145":                               ; preds = %"consume f7"
  %788 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.17, i64 %778, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded146":                            ; preds = %"consume f7"
  %789 = add nuw nsw i64 %778, 4
  %790 = call ptr @halide_malloc(ptr null, i64 %789)
  %.not544 = icmp eq ptr %790, null
  br i1 %.not544, label %"assert failed147", label %"produce f74", !prof !4

"assert failed147":                               ; preds = %"assert succeeded146"
  %791 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f74":                                    ; preds = %"assert succeeded146"
  %792 = add nsw i32 %650, 1
  store i32 %f73.v3.extent_realized.s, ptr %5, align 8
  %793 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 1
  store i32 %f73.v3.min_realized, ptr %793, align 4
  %794 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 2
  store i32 %f73.v4.min_realized, ptr %794, align 8
  %795 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 3
  store i32 %b641, ptr %795, align 4
  %796 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 4
  store i32 %a637, ptr %796, align 8
  %797 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 5
  store i32 %b624, ptr %797, align 4
  %798 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 6
  store i32 %a620, ptr %798, align 8
  %799 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 7
  store i32 %f74.v3.extent_realized.s, ptr %799, align 4
  %800 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 8
  store i32 %f74.v3.min_realized, ptr %800, align 8
  %801 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 9
  store i32 %f74.v4.min_realized, ptr %801, align 4
  %802 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 10
  store ptr %681, ptr %802, align 8
  %803 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 11
  store ptr null, ptr %803, align 8
  %804 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 12
  store ptr %790, ptr %804, align 8
  %805 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 13
  store ptr null, ptr %805, align 8
  %806 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f74.s0.v4.v4, i32 0, i32 %792, ptr nonnull %5)
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %"consume f74", label %call_destructor.exit210.thread374, !prof !5

"consume f74":                                    ; preds = %"produce f74"
  %.not162 = icmp slt i32 %a7, %77
  %a653 = select i1 %.not162, i32 %a7, i32 %b23
  %808 = add nsw i32 %b89, -62
  %b655 = ashr i32 %808, 5
  %a652 = call i32 @llvm.smin.i32(i32 %b655, i32 %a653)
  %b654 = ashr i32 %699, 5
  %a651 = call i32 @llvm.smin.i32(i32 %b654, i32 %a652)
  %f8.v4.min_realized = call i32 @llvm.smin.i32(i32 %b658, i32 %a651)
  %809 = add nsw i32 %b94, 62
  %b664 = ashr i32 %809, 5
  %a661 = call i32 @llvm.smax.i32(i32 %b735, i32 %b664)
  %b663 = ashr i32 %700, 5
  %a660 = call i32 @llvm.smax.i32(i32 %a661, i32 %b663)
  %810 = call i32 @llvm.smax.i32(i32 %a660, i32 %b735)
  %f8.v4.extent_realized.s = sub nsw i32 %810, %f8.v4.min_realized
  %.not163 = icmp slt i32 %a9, %78
  %a668 = select i1 %.not163, i32 %a9, i32 %b25
  %811 = ashr i32 %702, 5
  %b670 = add nsw i32 %811, -1
  %a667 = call i32 @llvm.smin.i32(i32 %b670, i32 %a668)
  %a666 = call i32 @llvm.smin.i32(i32 %811, i32 %a667)
  %f8.v3.min_realized = call i32 @llvm.smin.i32(i32 %b675, i32 %a666)
  %812 = add nsw i32 %709, 9
  %b681 = ashr i32 %812, 1
  %a678 = call i32 @llvm.smax.i32(i32 %b739, i32 %b681)
  %b680 = ashr i32 %b602, 1
  %a677 = call i32 @llvm.smax.i32(i32 %a678, i32 %b680)
  %813 = call i32 @llvm.smax.i32(i32 %a677, i32 %b739)
  %f8.v3.extent_realized.s = sub i32 %813, %f8.v3.min_realized
  %814 = add nsw i32 %f8.v4.extent_realized.s, 1
  %815 = add i32 %f8.v3.extent_realized.s, 1
  %f8.stride.2 = mul nsw i32 %815, %814
  %816 = zext i32 %814 to i64
  %817 = zext i32 %815 to i64
  %818 = shl nuw nsw i64 %817, 2
  %819 = and i64 %818, 4294967292
  %820 = mul nuw i64 %819, %816
  %821 = lshr i64 %820, 32
  %822 = lshr i64 %817, 30
  %823 = mul nuw nsw i64 %822, %816
  %t3075 = add nuw nsw i64 %821, %823
  %t3076 = mul i64 %818, %816
  %824 = mul i64 %t3076, %408
  %825 = icmp ult i64 %824, 2147483648
  %826 = and i64 %t3076, 4294967292
  %827 = mul nuw i64 %826, %408
  %828 = lshr i64 %827, 32
  %829 = mul i64 %t3075, %408
  %830 = add i64 %829, %828
  %831 = or i64 %830, %t3075
  %832 = icmp ult i64 %831, 4294967296
  %833 = and i1 %825, %832
  br i1 %833, label %"assert succeeded152", label %"assert failed151", !prof !5

"assert failed151":                               ; preds = %"consume f74"
  %834 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.18, i64 %824, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded152":                            ; preds = %"consume f74"
  %835 = add nuw nsw i64 %824, 4
  %836 = call ptr @halide_malloc(ptr null, i64 %835)
  %.not545 = icmp eq ptr %836, null
  br i1 %.not545, label %"assert failed153", label %"produce f8", !prof !4

"assert failed153":                               ; preds = %"assert succeeded152"
  %837 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f8":                                     ; preds = %"assert succeeded152"
  %838 = add nsw i32 %f4.s0.v6.loop_extent.s, 2
  store i32 %a772, ptr %4, align 8
  %839 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 1
  store i32 %f7.stride.1, ptr %839, align 4
  %840 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 2
  store i32 %f7.v3.extent_realized.s, ptr %840, align 8
  %841 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 3
  store i32 %f7.v3.min_realized, ptr %841, align 4
  %842 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 4
  store i32 %f7.v4.min_realized, ptr %842, align 8
  %843 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 5
  store i32 %b739, ptr %843, align 4
  %844 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 6
  store i32 %b675, ptr %844, align 8
  %845 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 7
  store i32 %b735, ptr %845, align 4
  %846 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 8
  store i32 %b658, ptr %846, align 8
  %847 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 9
  store i32 %f8.stride.2, ptr %847, align 4
  %848 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 10
  store i32 %f8.v3.extent_realized.s, ptr %848, align 8
  %849 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 11
  store i32 %f8.v3.min_realized, ptr %849, align 4
  %850 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 12
  store i32 %f8.v4.min_realized, ptr %850, align 8
  %851 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 13
  store ptr %734, ptr %851, align 8
  %852 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 14
  store ptr null, ptr %852, align 8
  %853 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 15
  store ptr %836, ptr %853, align 8
  %854 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 16
  store ptr null, ptr %854, align 8
  %855 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f8.s0.v6, i32 %111, i32 %838, ptr nonnull %4)
  %856 = icmp eq i32 %855, 0
  br i1 %856, label %"consume f8", label %call_destructor.exit210.thread374, !prof !5

"consume f8":                                     ; preds = %"produce f8"
  %.not164 = icmp slt i32 %b570, %72
  %a686 = select i1 %.not164, i32 %b570, i32 %b19
  %f75.v4.min_realized = call i32 @llvm.smin.i32(i32 %756, i32 %a686)
  %857 = call i32 @llvm.smax.i32(i32 %762, i32 %a577)
  %.not165 = icmp slt i32 %b586, %76
  %a696 = select i1 %.not165, i32 %b586, i32 %b21
  %f75.v3.min_realized = call i32 @llvm.smin.i32(i32 %765, i32 %a696)
  %858 = call i32 @llvm.smax.i32(i32 %770, i32 %a599)
  %f75.v3.extent_realized.s = sub i32 %858, %f75.v3.min_realized
  %reass.sub546 = sub i32 %857, %f75.v4.min_realized
  %859 = add i32 %reass.sub546, 1
  %860 = zext i32 %859 to i64
  %861 = add i32 %f75.v3.extent_realized.s, 1
  %862 = zext i32 %861 to i64
  %863 = shl nuw nsw i64 %862, 2
  %864 = mul i64 %863, %860
  %865 = icmp ult i64 %864, 2147483648
  %866 = and i64 %863, 4294967292
  %867 = mul nuw i64 %866, %860
  %868 = lshr i64 %867, 32
  %869 = lshr i64 %862, 30
  %870 = mul nuw nsw i64 %869, %860
  %871 = add nuw nsw i64 %868, %870
  %872 = icmp ult i64 %871, 4294967296
  %873 = and i1 %865, %872
  br i1 %873, label %"assert succeeded158", label %"assert failed157", !prof !5

"assert failed157":                               ; preds = %"consume f8"
  %874 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.19, i64 %864, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded158":                            ; preds = %"consume f8"
  %875 = add nuw nsw i64 %864, 4
  %876 = call ptr @halide_malloc(ptr null, i64 %875)
  %.not547 = icmp eq ptr %876, null
  br i1 %.not547, label %"assert failed159", label %"produce f75", !prof !4

"assert failed159":                               ; preds = %"assert succeeded158"
  %877 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f75":                                    ; preds = %"assert succeeded158"
  %878 = add nsw i32 %759, 1
  store i32 %f74.v3.extent_realized.s, ptr %3, align 8
  %879 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 1
  store i32 %f74.v3.min_realized, ptr %879, align 4
  %880 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 2
  store i32 %f74.v4.min_realized, ptr %880, align 8
  %881 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 3
  store i32 %b709, ptr %881, align 4
  %882 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 4
  store i32 %a705, ptr %882, align 8
  %883 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 5
  store i32 %b695, ptr %883, align 4
  %884 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 6
  store i32 %a691, ptr %884, align 8
  %885 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 7
  store i32 %f75.v3.extent_realized.s, ptr %885, align 4
  %886 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 8
  store i32 %f75.v3.min_realized, ptr %886, align 8
  %887 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 9
  store i32 %f75.v4.min_realized, ptr %887, align 4
  %888 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 10
  store ptr %790, ptr %888, align 8
  %889 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 11
  store ptr null, ptr %889, align 8
  %890 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 12
  store ptr %876, ptr %890, align 8
  %891 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 13
  store ptr null, ptr %891, align 8
  %892 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f75.s0.v4.v4, i32 0, i32 %878, ptr nonnull %3)
  %893 = icmp eq i32 %892, 0
  br i1 %893, label %"consume f75", label %call_destructor.exit210.thread374, !prof !5

"consume f75":                                    ; preds = %"produce f75"
  %.not166 = icmp slt i32 %a1, %44
  %a719 = select i1 %.not166, i32 %a1, i32 %b3
  %a718 = call i32 @llvm.smin.i32(i32 %b14, i32 %a719)
  %f9.v4.min_realized = call i32 @llvm.smin.i32(i32 %b720, i32 %a718)
  %b723 = ashr i32 %59, 6
  %f9.v4.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b750, i32 %b723)
  %.not167 = icmp slt i32 %a3, %53
  %a723 = select i1 %.not167, i32 %a3, i32 %b5
  %a722 = call i32 @llvm.smin.i32(i32 %b17, i32 %a723)
  %f9.v3.min_realized = call i32 @llvm.smin.i32(i32 %b724, i32 %a722)
  %b727 = ashr i32 %63, 6
  %f9.v3.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b753, i32 %b727)
  %894 = sub nsw i32 %f9.v4.extent_realized.s.s, %f9.v4.min_realized
  %895 = add nsw i32 %894, 1
  %896 = sub nsw i32 %f9.v3.extent_realized.s.s, %f9.v3.min_realized
  %897 = add nsw i32 %896, 1
  %f9.stride.2 = mul nsw i32 %895, %897
  %898 = zext i32 %895 to i64
  %899 = zext i32 %897 to i64
  %900 = shl nuw nsw i64 %899, 2
  %901 = and i64 %900, 4294967292
  %902 = mul nuw i64 %901, %898
  %903 = lshr i64 %902, 32
  %904 = lshr i64 %899, 30
  %905 = mul nuw nsw i64 %904, %898
  %t3079 = add nuw nsw i64 %903, %905
  %t3080 = mul i64 %900, %898
  %906 = mul i64 %t3080, %408
  %907 = icmp ult i64 %906, 2147483648
  %908 = and i64 %t3080, 4294967292
  %909 = mul nuw i64 %908, %408
  %910 = lshr i64 %909, 32
  %911 = mul i64 %t3079, %408
  %912 = add i64 %911, %910
  %913 = or i64 %912, %t3079
  %914 = icmp ult i64 %913, 4294967296
  %915 = and i1 %907, %914
  br i1 %915, label %"assert succeeded164", label %"assert failed163", !prof !5

"assert failed163":                               ; preds = %"consume f75"
  %916 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.20, i64 %906, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded164":                            ; preds = %"consume f75"
  %917 = add nuw nsw i64 %906, 4
  %918 = call ptr @halide_malloc(ptr null, i64 %917)
  %.not548 = icmp eq ptr %918, null
  br i1 %.not548, label %"assert failed165", label %"produce f9", !prof !4

"assert failed165":                               ; preds = %"assert succeeded164"
  %919 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f9":                                     ; preds = %"assert succeeded164"
  store i32 %a772, ptr %2, align 8
  %920 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 1
  store i32 %f8.stride.2, ptr %920, align 4
  %921 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 2
  store i32 %f8.v3.extent_realized.s, ptr %921, align 8
  %922 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 3
  store i32 %f8.v3.min_realized, ptr %922, align 4
  %923 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 4
  store i32 %f8.v4.min_realized, ptr %923, align 8
  %924 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 5
  store i32 %b753, ptr %924, align 4
  %925 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 6
  store i32 %b724, ptr %925, align 8
  %926 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 7
  store i32 %b750, ptr %926, align 4
  %927 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 8
  store i32 %b720, ptr %927, align 8
  %928 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 9
  store i32 %f9.stride.2, ptr %928, align 4
  %929 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 10
  store i32 %f9.v3.extent_realized.s.s, ptr %929, align 8
  %930 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 11
  store i32 %f9.v3.min_realized, ptr %930, align 4
  %931 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 12
  store i32 %f9.v4.min_realized, ptr %931, align 8
  %932 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 13
  store ptr %836, ptr %932, align 8
  %933 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 14
  store ptr null, ptr %933, align 8
  %934 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 15
  store ptr %918, ptr %934, align 8
  %935 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 16
  store ptr null, ptr %935, align 8
  %936 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f9.s0.v6, i32 %111, i32 %838, ptr nonnull %2)
  %937 = icmp eq i32 %936, 0
  br i1 %937, label %"consume f9", label %call_destructor.exit210.thread374, !prof !5

"consume f9":                                     ; preds = %"produce f9"
  %reass.sub549 = sub i32 %b735, %b733
  %938 = add i32 %reass.sub549, 1
  %939 = zext i32 %938 to i64
  %reass.sub550 = sub i32 %b739, %b737
  %940 = add i32 %reass.sub550, 1
  %941 = zext i32 %940 to i64
  %942 = shl nuw nsw i64 %941, 2
  %943 = mul i64 %942, %939
  %944 = icmp ult i64 %943, 2147483648
  %945 = and i64 %942, 4294967292
  %946 = mul nuw i64 %945, %939
  %947 = lshr i64 %946, 32
  %948 = lshr i64 %941, 30
  %949 = mul nuw nsw i64 %948, %939
  %950 = add nuw nsw i64 %947, %949
  %951 = icmp ult i64 %950, 4294967296
  %952 = and i1 %944, %951
  br i1 %952, label %"assert succeeded170", label %"assert failed169", !prof !5

"assert failed169":                               ; preds = %"consume f9"
  %953 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.21, i64 %943, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded170":                            ; preds = %"consume f9"
  %954 = add nuw nsw i64 %943, 4
  %955 = call ptr @halide_malloc(ptr null, i64 %954)
  %.not551 = icmp eq ptr %955, null
  br i1 %.not551, label %"assert failed171", label %"produce f76", !prof !4

"assert failed171":                               ; preds = %"assert succeeded170"
  %956 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f76":                                    ; preds = %"assert succeeded170"
  %957 = add i32 %b735, 1
  %958 = icmp slt i32 %b733, %957
  br i1 %958, label %"for f76.s0.v4.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.preheader":                        ; preds = %"produce f76"
  %959 = add i32 %b739, 1
  %960 = sub i32 %959, %b737
  %961 = sext i32 %b739 to i64
  %962 = sext i32 %b737 to i64
  %reass.sub572 = sub nsw i64 %961, %962
  %963 = shl nsw i64 %reass.sub572, 2
  %964 = add nsw i64 %963, 4
  %965 = shl i32 %861, 1
  %966 = icmp sgt i32 %959, %b737
  br i1 %966, label %"for f76.s0.v4.us.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.us.preheader":                     ; preds = %"for f76.s0.v4.preheader"
  %967 = xor i32 %f75.v4.min_realized, -1
  %968 = add i32 %72, %967
  %969 = mul i32 %861, %968
  %970 = sub i32 %969, %f75.v3.min_realized
  %971 = sub i32 %72, %f75.v4.min_realized
  %972 = mul i32 %861, %971
  %973 = sub i32 %972, %f75.v3.min_realized
  %974 = or i32 %72, 1
  %975 = sub i32 %974, %f75.v4.min_realized
  %976 = mul i32 %861, %975
  %977 = sub i32 %976, %f75.v3.min_realized
  %978 = add i32 %72, 2
  %979 = sub i32 %978, %f75.v4.min_realized
  %980 = mul i32 %861, %979
  %981 = sub i32 %980, %f75.v3.min_realized
  %982 = sub i32 %b739, %b737
  %983 = add i32 %980, %76
  %984 = sub i32 %983, %f75.v3.min_realized
  %985 = shl i32 %861, 1
  %986 = add i32 %976, %76
  %987 = sub i32 %986, %f75.v3.min_realized
  %988 = add i32 %972, %76
  %989 = sub i32 %988, %f75.v3.min_realized
  %990 = add i32 %969, %76
  %991 = sub i32 %990, %f75.v3.min_realized
  %992 = sub i32 %b739, %b737
  %993 = zext i32 %992 to i64
  %994 = add nuw nsw i64 %993, 1
  %min.iters.check865 = icmp ult i32 %992, 3
  %mul.result = shl i32 %982, 1
  %mul.result855 = shl i32 %982, 1
  %mul.overflow856 = icmp slt i32 %982, 0
  %mul.result858 = shl i32 %982, 1
  %mul.result861 = shl i32 %982, 1
  %n.vec868 = and i64 %994, -4
  %.cast869 = trunc i64 %n.vec868 to i32
  %995 = shl i32 %.cast869, 1
  %.cast872 = trunc i64 %n.vec868 to i32
  %996 = shl i32 %.cast872, 1
  %.cast875 = trunc i64 %n.vec868 to i32
  %997 = shl i32 %.cast875, 1
  %.cast878 = trunc i64 %n.vec868 to i32
  %998 = shl i32 %.cast878, 1
  %999 = shl nuw nsw i64 %n.vec868, 2
  %.cast883 = trunc i64 %n.vec868 to i32
  %ind.end884 = sub i32 %960, %.cast883
  %invariant.gep = getelementptr float, ptr %876, i64 -1
  %invariant.gep1077 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1079 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1081 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1083 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1085 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1087 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1089 = getelementptr float, ptr %876, i64 -1
  %cmp.n886 = icmp eq i64 %994, %n.vec868
  br label %"for f76.s0.v4.us"

"for f76.s0.v4.us":                               ; preds = %"for f76.s0.v4.us.preheader", %"end for f76.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f76.s0.v4.us.preheader" ], [ %indvar.next, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv474.us = phi i32 [ %970, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next475.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv470.us = phi i32 [ %973, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next471.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv466.us = phi i32 [ %977, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next467.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv462.us = phi i32 [ %981, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next463.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv456.us = phi ptr [ %955, %"for f76.s0.v4.us.preheader" ], [ %scevgep458.us, %"end for f76.s0.v3.loopexit.us" ]
  %f76.s0.v4.us = phi i32 [ %b733, %"for f76.s0.v4.us.preheader" ], [ %1138, %"end for f76.s0.v3.loopexit.us" ]
  br i1 %min.iters.check865, label %"for f76.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f76.s0.v4.us"
  %1000 = mul i32 %985, %indvar
  %1001 = add i32 %991, %1000
  %1002 = add i32 %989, %1000
  %1003 = add i32 %987, %1000
  %1004 = add i32 %984, %1000
  %1005 = add i32 %1004, %mul.result
  %1006 = icmp slt i32 %1005, %1004
  %1007 = add i32 %1003, %mul.result855
  %1008 = icmp slt i32 %1007, %1003
  %1009 = or i1 %1008, %mul.overflow856
  %1010 = add i32 %1002, %mul.result858
  %1011 = icmp slt i32 %1010, %1002
  %1012 = add i32 %1001, %mul.result861
  %1013 = icmp slt i32 %1012, %1001
  %1014 = or i1 %1006, %1009
  %1015 = or i1 %1011, %1014
  %1016 = or i1 %1013, %1015
  br i1 %1016, label %"for f76.s0.v3.us.preheader", label %vector.ph866

vector.ph866:                                     ; preds = %vector.scevcheck
  %ind.end870 = add i32 %lsr.iv474.us, %995
  %ind.end873 = add i32 %lsr.iv470.us, %996
  %ind.end876 = add i32 %lsr.iv466.us, %997
  %ind.end879 = add i32 %lsr.iv462.us, %998
  %ind.end881 = getelementptr i8, ptr %lsr.iv456.us, i64 %999
  br label %vector.body887

vector.body887:                                   ; preds = %vector.body887, %vector.ph866
  %index888 = phi i64 [ 0, %vector.ph866 ], [ %index.next919, %vector.body887 ]
  %1017 = shl i64 %index888, 2
  %next.gep = getelementptr i8, ptr %lsr.iv456.us, i64 %1017
  %.cast889 = trunc i64 %index888 to i32
  %1018 = shl i32 %.cast889, 1
  %offset.idx890 = add i32 %lsr.iv462.us, %1018
  %.cast891 = trunc i64 %index888 to i32
  %1019 = shl i32 %.cast891, 1
  %offset.idx892 = add i32 %lsr.iv466.us, %1019
  %.cast893 = trunc i64 %index888 to i32
  %1020 = shl i32 %.cast893, 1
  %offset.idx894 = add i32 %lsr.iv470.us, %1020
  %.cast895 = trunc i64 %index888 to i32
  %1021 = shl i32 %.cast895, 1
  %offset.idx896 = add i32 %lsr.iv474.us, %1021
  %1022 = add i32 %offset.idx896, %76
  %1023 = add i32 %offset.idx894, %76
  %1024 = add i32 %offset.idx892, %76
  %1025 = add i32 %offset.idx890, %76
  %1026 = sext i32 %1025 to i64
  %1027 = add nsw i64 %1026, 2
  %gep = getelementptr float, ptr %invariant.gep, i64 %1027
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !13
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec897 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1078 = getelementptr float, ptr %invariant.gep1077, i64 %1026
  %wide.vec898 = load <8 x float>, ptr %gep1078, align 4, !tbaa !13
  %strided.vec899 = shufflevector <8 x float> %wide.vec898, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec900 = shufflevector <8 x float> %wide.vec898, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1028 = fadd <4 x float> %strided.vec, %strided.vec900
  %1029 = fmul <4 x float> %1028, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1030 = fadd <4 x float> %strided.vec899, %1029
  %1031 = fadd <4 x float> %strided.vec897, %1030
  %1032 = fmul <4 x float> %1031, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1033 = sext i32 %1024 to i64
  %1034 = add nsw i64 %1033, 2
  %gep1080 = getelementptr float, ptr %invariant.gep1079, i64 %1034
  %wide.vec901 = load <8 x float>, ptr %gep1080, align 4, !tbaa !13
  %strided.vec902 = shufflevector <8 x float> %wide.vec901, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec903 = shufflevector <8 x float> %wide.vec901, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1082 = getelementptr float, ptr %invariant.gep1081, i64 %1033
  %wide.vec904 = load <8 x float>, ptr %gep1082, align 4, !tbaa !13
  %strided.vec905 = shufflevector <8 x float> %wide.vec904, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec906 = shufflevector <8 x float> %wide.vec904, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1035 = fadd <4 x float> %strided.vec902, %strided.vec906
  %1036 = fmul <4 x float> %1035, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1037 = fadd <4 x float> %strided.vec905, %1036
  %1038 = fadd <4 x float> %strided.vec903, %1037
  %1039 = sext i32 %1023 to i64
  %1040 = add nsw i64 %1039, 2
  %gep1084 = getelementptr float, ptr %invariant.gep1083, i64 %1040
  %wide.vec907 = load <8 x float>, ptr %gep1084, align 4, !tbaa !13
  %strided.vec908 = shufflevector <8 x float> %wide.vec907, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec909 = shufflevector <8 x float> %wide.vec907, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1086 = getelementptr float, ptr %invariant.gep1085, i64 %1039
  %wide.vec910 = load <8 x float>, ptr %gep1086, align 4, !tbaa !13
  %strided.vec911 = shufflevector <8 x float> %wide.vec910, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec912 = shufflevector <8 x float> %wide.vec910, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1041 = fadd <4 x float> %strided.vec908, %strided.vec912
  %1042 = fmul <4 x float> %1041, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1043 = fadd <4 x float> %strided.vec911, %1042
  %1044 = fadd <4 x float> %strided.vec909, %1043
  %1045 = fadd <4 x float> %1038, %1044
  %1046 = fmul <4 x float> %1045, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1047 = sext i32 %1022 to i64
  %1048 = add nsw i64 %1047, 2
  %gep1088 = getelementptr float, ptr %invariant.gep1087, i64 %1048
  %wide.vec913 = load <8 x float>, ptr %gep1088, align 4, !tbaa !13
  %strided.vec914 = shufflevector <8 x float> %wide.vec913, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec915 = shufflevector <8 x float> %wide.vec913, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1090 = getelementptr float, ptr %invariant.gep1089, i64 %1047
  %wide.vec916 = load <8 x float>, ptr %gep1090, align 4, !tbaa !13
  %strided.vec917 = shufflevector <8 x float> %wide.vec916, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec918 = shufflevector <8 x float> %wide.vec916, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1049 = fadd <4 x float> %strided.vec914, %strided.vec918
  %1050 = fmul <4 x float> %1049, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1051 = fadd <4 x float> %strided.vec917, %1050
  %1052 = fadd <4 x float> %strided.vec915, %1051
  %1053 = fmul <4 x float> %1052, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1054 = fadd <4 x float> %1046, %1053
  %1055 = fadd <4 x float> %1032, %1054
  %1056 = fmul <4 x float> %1055, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1056, ptr %next.gep, align 4, !tbaa !15
  %index.next919 = add nuw i64 %index888, 4
  %1057 = icmp eq i64 %index.next919, %n.vec868
  br i1 %1057, label %middle.block863, label %vector.body887, !llvm.loop !17

middle.block863:                                  ; preds = %vector.body887
  br i1 %cmp.n886, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us.preheader"

"for f76.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f76.s0.v4.us", %middle.block863
  %lsr.iv476.us.ph = phi i32 [ %lsr.iv474.us, %vector.scevcheck ], [ %lsr.iv474.us, %"for f76.s0.v4.us" ], [ %ind.end870, %middle.block863 ]
  %lsr.iv472.us.ph = phi i32 [ %lsr.iv470.us, %vector.scevcheck ], [ %lsr.iv470.us, %"for f76.s0.v4.us" ], [ %ind.end873, %middle.block863 ]
  %lsr.iv468.us.ph = phi i32 [ %lsr.iv466.us, %vector.scevcheck ], [ %lsr.iv466.us, %"for f76.s0.v4.us" ], [ %ind.end876, %middle.block863 ]
  %lsr.iv464.us.ph = phi i32 [ %lsr.iv462.us, %vector.scevcheck ], [ %lsr.iv462.us, %"for f76.s0.v4.us" ], [ %ind.end879, %middle.block863 ]
  %lsr.iv459.us.ph = phi ptr [ %lsr.iv456.us, %vector.scevcheck ], [ %lsr.iv456.us, %"for f76.s0.v4.us" ], [ %ind.end881, %middle.block863 ]
  %lsr.iv453.us.ph = phi i32 [ %960, %vector.scevcheck ], [ %960, %"for f76.s0.v4.us" ], [ %ind.end884, %middle.block863 ]
  br label %"for f76.s0.v3.us"

"for f76.s0.v3.us":                               ; preds = %"for f76.s0.v3.us.preheader", %"for f76.s0.v3.us"
  %lsr.iv476.us = phi i32 [ %lsr.iv.next477.us, %"for f76.s0.v3.us" ], [ %lsr.iv476.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv472.us = phi i32 [ %lsr.iv.next473.us, %"for f76.s0.v3.us" ], [ %lsr.iv472.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv468.us = phi i32 [ %lsr.iv.next469.us, %"for f76.s0.v3.us" ], [ %lsr.iv468.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv464.us = phi i32 [ %lsr.iv.next465.us, %"for f76.s0.v3.us" ], [ %lsr.iv464.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv459.us = phi ptr [ %scevgep460.us, %"for f76.s0.v3.us" ], [ %lsr.iv459.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv453.us = phi i32 [ %lsr.iv.next454.us, %"for f76.s0.v3.us" ], [ %lsr.iv453.us.ph, %"for f76.s0.v3.us.preheader" ]
  %1058 = add i32 %lsr.iv476.us, %76
  %1059 = add i32 %lsr.iv472.us, %76
  %1060 = add i32 %lsr.iv468.us, %76
  %1061 = add i32 %lsr.iv464.us, %76
  %1062 = sext i32 %1061 to i64
  %1063 = add nsw i64 %1062, 2
  %1064 = getelementptr inbounds float, ptr %876, i64 %1063
  %1065 = load float, ptr %1064, align 4, !tbaa !13
  %1066 = add nsw i64 %1062, 1
  %1067 = getelementptr inbounds float, ptr %876, i64 %1066
  %1068 = load float, ptr %1067, align 4, !tbaa !13
  %1069 = getelementptr inbounds float, ptr %876, i64 %1062
  %1070 = load float, ptr %1069, align 4, !tbaa !13
  %1071 = fadd float %1068, %1070
  %1072 = fmul float %1071, 3.000000e+00
  %1073 = add nsw i64 %1062, -1
  %1074 = getelementptr inbounds float, ptr %876, i64 %1073
  %1075 = sext i32 %1060 to i64
  %1076 = add nsw i64 %1075, 2
  %1077 = getelementptr inbounds float, ptr %876, i64 %1076
  %1078 = add nsw i64 %1075, 1
  %1079 = getelementptr inbounds float, ptr %876, i64 %1078
  %1080 = load float, ptr %1079, align 4, !tbaa !13
  %1081 = getelementptr inbounds float, ptr %876, i64 %1075
  %1082 = load float, ptr %1081, align 4, !tbaa !13
  %1083 = fadd float %1080, %1082
  %1084 = fmul float %1083, 3.000000e+00
  %1085 = add nsw i64 %1075, -1
  %1086 = getelementptr inbounds float, ptr %876, i64 %1085
  %1087 = load float, ptr %1086, align 4, !tbaa !13
  %1088 = fadd float %1087, %1084
  %1089 = sext i32 %1059 to i64
  %1090 = add nsw i64 %1089, 2
  %1091 = getelementptr inbounds float, ptr %876, i64 %1090
  %1092 = load float, ptr %1091, align 4, !tbaa !13
  %1093 = add nsw i64 %1089, 1
  %1094 = getelementptr inbounds float, ptr %876, i64 %1093
  %1095 = load float, ptr %1094, align 4, !tbaa !13
  %1096 = getelementptr inbounds float, ptr %876, i64 %1089
  %1097 = load float, ptr %1096, align 4, !tbaa !13
  %1098 = fadd float %1095, %1097
  %1099 = fmul float %1098, 3.000000e+00
  %1100 = add nsw i64 %1089, -1
  %1101 = getelementptr inbounds float, ptr %876, i64 %1100
  %1102 = load float, ptr %1101, align 4, !tbaa !13
  %1103 = fadd float %1102, %1099
  %1104 = fadd float %1092, %1103
  %1105 = load float, ptr %1074, align 4, !tbaa !13
  %1106 = load float, ptr %1077, align 4, !tbaa !13
  %1107 = insertelement <2 x float> poison, float %1105, i64 0
  %1108 = insertelement <2 x float> %1107, float %1106, i64 1
  %1109 = insertelement <2 x float> poison, float %1072, i64 0
  %1110 = insertelement <2 x float> %1109, float %1088, i64 1
  %1111 = fadd <2 x float> %1108, %1110
  %1112 = insertelement <2 x float> poison, float %1065, i64 0
  %1113 = insertelement <2 x float> %1112, float %1104, i64 1
  %1114 = fadd <2 x float> %1113, %1111
  %1115 = fmul <2 x float> %1114, <float 1.250000e-01, float 3.750000e-01>
  %1116 = sext i32 %1058 to i64
  %1117 = add nsw i64 %1116, 2
  %1118 = getelementptr inbounds float, ptr %876, i64 %1117
  %1119 = load float, ptr %1118, align 4, !tbaa !13
  %1120 = add nsw i64 %1116, 1
  %1121 = getelementptr inbounds float, ptr %876, i64 %1120
  %1122 = load float, ptr %1121, align 4, !tbaa !13
  %1123 = getelementptr inbounds float, ptr %876, i64 %1116
  %1124 = load float, ptr %1123, align 4, !tbaa !13
  %1125 = fadd float %1122, %1124
  %1126 = fmul float %1125, 3.000000e+00
  %1127 = add nsw i64 %1116, -1
  %1128 = getelementptr inbounds float, ptr %876, i64 %1127
  %1129 = load float, ptr %1128, align 4, !tbaa !13
  %1130 = fadd float %1129, %1126
  %1131 = fadd float %1119, %1130
  %1132 = fmul float %1131, 1.250000e-01
  %1133 = extractelement <2 x float> %1115, i64 1
  %1134 = fadd float %1133, %1132
  %1135 = extractelement <2 x float> %1115, i64 0
  %1136 = fadd float %1135, %1134
  %1137 = fmul float %1136, 1.250000e-01
  store float %1137, ptr %lsr.iv459.us, align 4, !tbaa !15
  %lsr.iv.next454.us = add i32 %lsr.iv453.us, -1
  %scevgep460.us = getelementptr i8, ptr %lsr.iv459.us, i64 4
  %lsr.iv.next465.us = add i32 %lsr.iv464.us, 2
  %lsr.iv.next469.us = add i32 %lsr.iv468.us, 2
  %lsr.iv.next473.us = add i32 %lsr.iv472.us, 2
  %lsr.iv.next477.us = add i32 %lsr.iv476.us, 2
  %.not131.us = icmp eq i32 %lsr.iv.next454.us, 0
  br i1 %.not131.us, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us", !llvm.loop !18

"end for f76.s0.v3.loopexit.us":                  ; preds = %"for f76.s0.v3.us", %middle.block863
  %1138 = add nsw i32 %f76.s0.v4.us, 1
  %scevgep458.us = getelementptr i1, ptr %lsr.iv456.us, i64 %964
  %lsr.iv.next463.us = add i32 %lsr.iv462.us, %965
  %lsr.iv.next467.us = add i32 %lsr.iv466.us, %965
  %lsr.iv.next471.us = add i32 %lsr.iv470.us, %965
  %lsr.iv.next475.us = add i32 %lsr.iv474.us, %965
  %.not130.us = icmp eq i32 %f76.s0.v4.us, %b735
  %indvar.next = add i32 %indvar, 1
  br i1 %.not130.us, label %"consume f76", label %"for f76.s0.v4.us"

"consume f76":                                    ; preds = %"end for f76.s0.v3.loopexit.us", %"for f76.s0.v4.preheader", %"produce f76"
  %f10.v4.extent_realized.s = sub nsw i32 %39, %43
  %f10.v3.extent_realized.s = sub nsw i32 %48, %52
  %1139 = add nsw i32 %f10.v4.extent_realized.s, 1
  %1140 = add nsw i32 %f10.v3.extent_realized.s, 1
  %f10.stride.2 = mul nsw i32 %1139, %1140
  %1141 = zext i32 %1139 to i64
  %1142 = zext i32 %1140 to i64
  %1143 = shl nuw nsw i64 %1142, 2
  %1144 = and i64 %1143, 4294967292
  %1145 = mul nuw i64 %1144, %1141
  %1146 = lshr i64 %1145, 32
  %1147 = lshr i64 %1142, 30
  %1148 = mul nuw nsw i64 %1147, %1141
  %t3083 = add nuw nsw i64 %1146, %1148
  %t3084 = mul i64 %1143, %1141
  %1149 = zext i32 %838 to i64
  %1150 = mul i64 %t3084, %1149
  %1151 = icmp ult i64 %1150, 2147483648
  %1152 = and i64 %t3084, 4294967292
  %1153 = mul nuw i64 %1152, %1149
  %1154 = lshr i64 %1153, 32
  %1155 = mul i64 %t3083, %1149
  %1156 = add i64 %1155, %1154
  %1157 = or i64 %1156, %t3083
  %1158 = icmp ult i64 %1157, 4294967296
  %1159 = and i1 %1151, %1158
  br i1 %1159, label %"assert succeeded174", label %"assert failed173", !prof !5

"assert failed173":                               ; preds = %"consume f76"
  %1160 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.22, i64 %1150, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded174":                            ; preds = %"consume f76"
  %1161 = add nuw nsw i64 %1150, 4
  %1162 = call ptr @halide_malloc(ptr null, i64 %1161)
  %.not552 = icmp eq ptr %1162, null
  br i1 %.not552, label %"assert failed175", label %"produce f10", !prof !4

"assert failed175":                               ; preds = %"assert succeeded174"
  %1163 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f10":                                    ; preds = %"assert succeeded174"
  store i32 %a772, ptr %1, align 8
  %1164 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 1
  store i32 %f10.stride.2, ptr %1164, align 4
  %1165 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 2
  store i32 %f10.v3.extent_realized.s, ptr %1165, align 8
  %1166 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 3
  store i32 %f10.v4.extent_realized.s, ptr %1166, align 4
  %1167 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 4
  store i32 %f9.stride.2, ptr %1167, align 8
  %1168 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 5
  store i32 %f9.v3.extent_realized.s.s, ptr %1168, align 4
  %1169 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 6
  store i32 %f9.v3.min_realized, ptr %1169, align 8
  %1170 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 7
  store i32 %f9.v4.min_realized, ptr %1170, align 4
  %1171 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 8
  store i32 %a286, ptr %1171, align 8
  %1172 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 9
  store i32 %a114, ptr %1172, align 4
  %1173 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 10
  store ptr %1162, ptr %1173, align 8
  %1174 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 11
  store ptr null, ptr %1174, align 8
  %1175 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 12
  store ptr %918, ptr %1175, align 8
  %1176 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 13
  store ptr null, ptr %1176, align 8
  %1177 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f10.s0.v6, i32 %111, i32 %838, ptr nonnull %1)
  %1178 = icmp eq i32 %1177, 0
  br i1 %1178, label %"consume f10", label %call_destructor.exit210.thread374, !prof !5

"consume f10":                                    ; preds = %"produce f10"
  %reass.sub553 = sub i32 %b750, %b748
  %1179 = add i32 %reass.sub553, 1
  %1180 = zext i32 %1179 to i64
  %reass.sub554 = sub i32 %b753, %b751
  %1181 = add i32 %reass.sub554, 1
  %1182 = zext i32 %1181 to i64
  %1183 = shl nuw nsw i64 %1182, 2
  %1184 = mul i64 %1183, %1180
  %1185 = icmp ult i64 %1184, 2147483648
  %1186 = and i64 %1183, 4294967292
  %1187 = mul nuw i64 %1186, %1180
  %1188 = lshr i64 %1187, 32
  %1189 = lshr i64 %1182, 30
  %1190 = mul nuw nsw i64 %1189, %1180
  %1191 = add nuw nsw i64 %1188, %1190
  %1192 = icmp ult i64 %1191, 4294967296
  %1193 = and i1 %1185, %1192
  br i1 %1193, label %"assert succeeded180", label %"assert failed179", !prof !5

"assert failed179":                               ; preds = %"consume f10"
  %1194 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.23, i64 %1184, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded180":                            ; preds = %"consume f10"
  %1195 = add nuw nsw i64 %1184, 4
  %1196 = call ptr @halide_malloc(ptr null, i64 %1195)
  %.not555 = icmp eq ptr %1196, null
  br i1 %.not555, label %"assert failed181", label %"produce f77", !prof !4

"assert failed181":                               ; preds = %"assert succeeded180"
  %1197 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f77":                                    ; preds = %"assert succeeded180"
  %.not108 = icmp slt i32 %b750, %b748
  br i1 %.not108, label %"consume f77", label %"for f77.s0.v4.preheader", !prof !4

"for f77.s0.v4.preheader":                        ; preds = %"produce f77"
  %1198 = sext i32 %b753 to i64
  %1199 = sext i32 %b751 to i64
  %reass.sub557 = sub nsw i64 %1198, %1199
  %1200 = shl nsw i64 %reass.sub557, 2
  %1201 = add nsw i64 %1200, 4
  %1202 = shl i32 %940, 1
  %.not127 = icmp slt i32 %b753, %b751
  br i1 %.not127, label %"consume f77", label %"for f77.s0.v4.preheader583", !prof !4

"for f77.s0.v4.preheader583":                     ; preds = %"for f77.s0.v4.preheader"
  %1203 = xor i32 %b733, -1
  %1204 = add i32 %62, %1203
  %1205 = mul i32 %1204, %940
  %1206 = sub i32 %1205, %b737
  %1207 = sub i32 %62, %b733
  %1208 = mul i32 %940, %1207
  %1209 = sub i32 %1208, %b737
  %1210 = or i32 %62, 1
  %1211 = sub i32 %1210, %b733
  %1212 = mul i32 %940, %1211
  %1213 = sub i32 %1212, %b737
  %1214 = add nsw i32 %62, 2
  %1215 = sub i32 %1214, %b733
  %1216 = mul i32 %1215, %940
  %1217 = sub i32 %1216, %b737
  %1218 = sub i32 %b753, %b751
  %1219 = add i32 %1216, %66
  %1220 = sub i32 %1219, %b737
  %1221 = shl i32 %940, 1
  %1222 = add i32 %1212, %66
  %1223 = sub i32 %1222, %b737
  %1224 = add i32 %1208, %66
  %1225 = sub i32 %1224, %b737
  %1226 = add i32 %1205, %66
  %1227 = sub i32 %1226, %b737
  %1228 = sub i32 %b753, %b751
  %1229 = zext i32 %1228 to i64
  %1230 = add nuw nsw i64 %1229, 1
  %min.iters.check937 = icmp ult i32 %1228, 3
  %mul.result924 = shl i32 %1218, 1
  %mul.result927 = shl i32 %1218, 1
  %mul.overflow928 = icmp slt i32 %1218, 0
  %mul.result930 = shl i32 %1218, 1
  %mul.result933 = shl i32 %1218, 1
  %n.vec940 = and i64 %1230, -4
  %.cast941 = trunc i64 %n.vec940 to i32
  %1231 = shl i32 %.cast941, 1
  %.cast944 = trunc i64 %n.vec940 to i32
  %1232 = shl i32 %.cast944, 1
  %.cast947 = trunc i64 %n.vec940 to i32
  %1233 = shl i32 %.cast947, 1
  %.cast950 = trunc i64 %n.vec940 to i32
  %1234 = shl i32 %.cast950, 1
  %1235 = shl nuw nsw i64 %n.vec940, 2
  %.cast955 = trunc i64 %n.vec940 to i32
  %ind.end956 = sub i32 %1181, %.cast955
  %invariant.gep1091 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1093 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1095 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1097 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1099 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1101 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1103 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1105 = getelementptr float, ptr %955, i64 -1
  %cmp.n958 = icmp eq i64 %1230, %n.vec940
  br label %"for f77.s0.v4"

"for f77.s0.v4":                                  ; preds = %"for f77.s0.v4.preheader583", %"end for f77.s0.v3.loopexit"
  %indvar921 = phi i32 [ 0, %"for f77.s0.v4.preheader583" ], [ %indvar.next922, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv449 = phi i32 [ %1206, %"for f77.s0.v4.preheader583" ], [ %lsr.iv.next450, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv445 = phi i32 [ %1209, %"for f77.s0.v4.preheader583" ], [ %lsr.iv.next446, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv441 = phi i32 [ %1213, %"for f77.s0.v4.preheader583" ], [ %lsr.iv.next442, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv437 = phi i32 [ %1217, %"for f77.s0.v4.preheader583" ], [ %lsr.iv.next438, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv431 = phi ptr [ %1196, %"for f77.s0.v4.preheader583" ], [ %scevgep433, %"end for f77.s0.v3.loopexit" ]
  %f77.s0.v4 = phi i32 [ %b748, %"for f77.s0.v4.preheader583" ], [ %1374, %"end for f77.s0.v3.loopexit" ]
  br i1 %min.iters.check937, label %"for f77.s0.v3.preheader", label %vector.scevcheck920

vector.scevcheck920:                              ; preds = %"for f77.s0.v4"
  %1236 = mul i32 %1221, %indvar921
  %1237 = add i32 %1227, %1236
  %1238 = add i32 %1225, %1236
  %1239 = add i32 %1223, %1236
  %1240 = add i32 %1220, %1236
  %1241 = add i32 %1240, %mul.result924
  %1242 = icmp slt i32 %1241, %1240
  %1243 = add i32 %1239, %mul.result927
  %1244 = icmp slt i32 %1243, %1239
  %1245 = or i1 %1244, %mul.overflow928
  %1246 = add i32 %1238, %mul.result930
  %1247 = icmp slt i32 %1246, %1238
  %1248 = add i32 %1237, %mul.result933
  %1249 = icmp slt i32 %1248, %1237
  %1250 = or i1 %1242, %1245
  %1251 = or i1 %1247, %1250
  %1252 = or i1 %1249, %1251
  br i1 %1252, label %"for f77.s0.v3.preheader", label %vector.ph938

vector.ph938:                                     ; preds = %vector.scevcheck920
  %ind.end942 = add i32 %lsr.iv449, %1231
  %ind.end945 = add i32 %lsr.iv445, %1232
  %ind.end948 = add i32 %lsr.iv441, %1233
  %ind.end951 = add i32 %lsr.iv437, %1234
  %ind.end953 = getelementptr i8, ptr %lsr.iv431, i64 %1235
  br label %vector.body959

vector.body959:                                   ; preds = %vector.body959, %vector.ph938
  %index960 = phi i64 [ 0, %vector.ph938 ], [ %index.next994, %vector.body959 ]
  %1253 = shl i64 %index960, 2
  %next.gep961 = getelementptr i8, ptr %lsr.iv431, i64 %1253
  %.cast962 = trunc i64 %index960 to i32
  %1254 = shl i32 %.cast962, 1
  %offset.idx963 = add i32 %lsr.iv437, %1254
  %.cast964 = trunc i64 %index960 to i32
  %1255 = shl i32 %.cast964, 1
  %offset.idx965 = add i32 %lsr.iv441, %1255
  %.cast966 = trunc i64 %index960 to i32
  %1256 = shl i32 %.cast966, 1
  %offset.idx967 = add i32 %lsr.iv445, %1256
  %.cast968 = trunc i64 %index960 to i32
  %1257 = shl i32 %.cast968, 1
  %offset.idx969 = add i32 %lsr.iv449, %1257
  %1258 = add i32 %offset.idx969, %66
  %1259 = add i32 %offset.idx967, %66
  %1260 = add i32 %offset.idx965, %66
  %1261 = add i32 %offset.idx963, %66
  %1262 = sext i32 %1261 to i64
  %1263 = add nsw i64 %1262, 2
  %gep1092 = getelementptr float, ptr %invariant.gep1091, i64 %1263
  %wide.vec970 = load <8 x float>, ptr %gep1092, align 4, !tbaa !15
  %strided.vec971 = shufflevector <8 x float> %wide.vec970, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec972 = shufflevector <8 x float> %wide.vec970, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1094 = getelementptr float, ptr %invariant.gep1093, i64 %1262
  %wide.vec973 = load <8 x float>, ptr %gep1094, align 4, !tbaa !15
  %strided.vec974 = shufflevector <8 x float> %wide.vec973, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec975 = shufflevector <8 x float> %wide.vec973, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1264 = fadd <4 x float> %strided.vec971, %strided.vec975
  %1265 = fmul <4 x float> %1264, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1266 = fadd <4 x float> %strided.vec974, %1265
  %1267 = fadd <4 x float> %strided.vec972, %1266
  %1268 = fmul <4 x float> %1267, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1269 = sext i32 %1260 to i64
  %1270 = add nsw i64 %1269, 2
  %gep1096 = getelementptr float, ptr %invariant.gep1095, i64 %1270
  %wide.vec976 = load <8 x float>, ptr %gep1096, align 4, !tbaa !15
  %strided.vec977 = shufflevector <8 x float> %wide.vec976, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec978 = shufflevector <8 x float> %wide.vec976, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1098 = getelementptr float, ptr %invariant.gep1097, i64 %1269
  %wide.vec979 = load <8 x float>, ptr %gep1098, align 4, !tbaa !15
  %strided.vec980 = shufflevector <8 x float> %wide.vec979, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec981 = shufflevector <8 x float> %wide.vec979, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1271 = fadd <4 x float> %strided.vec977, %strided.vec981
  %1272 = fmul <4 x float> %1271, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1273 = fadd <4 x float> %strided.vec980, %1272
  %1274 = fadd <4 x float> %strided.vec978, %1273
  %1275 = sext i32 %1259 to i64
  %1276 = add nsw i64 %1275, 2
  %gep1100 = getelementptr float, ptr %invariant.gep1099, i64 %1276
  %wide.vec982 = load <8 x float>, ptr %gep1100, align 4, !tbaa !15
  %strided.vec983 = shufflevector <8 x float> %wide.vec982, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec984 = shufflevector <8 x float> %wide.vec982, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1102 = getelementptr float, ptr %invariant.gep1101, i64 %1275
  %wide.vec985 = load <8 x float>, ptr %gep1102, align 4, !tbaa !15
  %strided.vec986 = shufflevector <8 x float> %wide.vec985, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec987 = shufflevector <8 x float> %wide.vec985, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1277 = fadd <4 x float> %strided.vec983, %strided.vec987
  %1278 = fmul <4 x float> %1277, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1279 = fadd <4 x float> %strided.vec986, %1278
  %1280 = fadd <4 x float> %strided.vec984, %1279
  %1281 = fadd <4 x float> %1274, %1280
  %1282 = fmul <4 x float> %1281, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1283 = sext i32 %1258 to i64
  %1284 = add nsw i64 %1283, 2
  %gep1104 = getelementptr float, ptr %invariant.gep1103, i64 %1284
  %wide.vec988 = load <8 x float>, ptr %gep1104, align 4, !tbaa !15
  %strided.vec989 = shufflevector <8 x float> %wide.vec988, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec990 = shufflevector <8 x float> %wide.vec988, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1106 = getelementptr float, ptr %invariant.gep1105, i64 %1283
  %wide.vec991 = load <8 x float>, ptr %gep1106, align 4, !tbaa !15
  %strided.vec992 = shufflevector <8 x float> %wide.vec991, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec993 = shufflevector <8 x float> %wide.vec991, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1285 = fadd <4 x float> %strided.vec989, %strided.vec993
  %1286 = fmul <4 x float> %1285, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1287 = fadd <4 x float> %strided.vec992, %1286
  %1288 = fadd <4 x float> %strided.vec990, %1287
  %1289 = fmul <4 x float> %1288, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1290 = fadd <4 x float> %1282, %1289
  %1291 = fadd <4 x float> %1268, %1290
  %1292 = fmul <4 x float> %1291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1292, ptr %next.gep961, align 4, !tbaa !19
  %index.next994 = add nuw i64 %index960, 4
  %1293 = icmp eq i64 %index.next994, %n.vec940
  br i1 %1293, label %middle.block935, label %vector.body959, !llvm.loop !21

middle.block935:                                  ; preds = %vector.body959
  br i1 %cmp.n958, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3.preheader"

"for f77.s0.v3.preheader":                        ; preds = %vector.scevcheck920, %"for f77.s0.v4", %middle.block935
  %lsr.iv451.ph = phi i32 [ %lsr.iv449, %vector.scevcheck920 ], [ %lsr.iv449, %"for f77.s0.v4" ], [ %ind.end942, %middle.block935 ]
  %lsr.iv447.ph = phi i32 [ %lsr.iv445, %vector.scevcheck920 ], [ %lsr.iv445, %"for f77.s0.v4" ], [ %ind.end945, %middle.block935 ]
  %lsr.iv443.ph = phi i32 [ %lsr.iv441, %vector.scevcheck920 ], [ %lsr.iv441, %"for f77.s0.v4" ], [ %ind.end948, %middle.block935 ]
  %lsr.iv439.ph = phi i32 [ %lsr.iv437, %vector.scevcheck920 ], [ %lsr.iv437, %"for f77.s0.v4" ], [ %ind.end951, %middle.block935 ]
  %lsr.iv434.ph = phi ptr [ %lsr.iv431, %vector.scevcheck920 ], [ %lsr.iv431, %"for f77.s0.v4" ], [ %ind.end953, %middle.block935 ]
  %lsr.iv428.ph = phi i32 [ %1181, %vector.scevcheck920 ], [ %1181, %"for f77.s0.v4" ], [ %ind.end956, %middle.block935 ]
  br label %"for f77.s0.v3"

"for f77.s0.v3":                                  ; preds = %"for f77.s0.v3.preheader", %"for f77.s0.v3"
  %lsr.iv451 = phi i32 [ %lsr.iv.next452, %"for f77.s0.v3" ], [ %lsr.iv451.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv447 = phi i32 [ %lsr.iv.next448, %"for f77.s0.v3" ], [ %lsr.iv447.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv443 = phi i32 [ %lsr.iv.next444, %"for f77.s0.v3" ], [ %lsr.iv443.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv439 = phi i32 [ %lsr.iv.next440, %"for f77.s0.v3" ], [ %lsr.iv439.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv434 = phi ptr [ %scevgep435, %"for f77.s0.v3" ], [ %lsr.iv434.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv428 = phi i32 [ %lsr.iv.next429, %"for f77.s0.v3" ], [ %lsr.iv428.ph, %"for f77.s0.v3.preheader" ]
  %1294 = add i32 %lsr.iv451, %66
  %1295 = add i32 %lsr.iv447, %66
  %1296 = add i32 %lsr.iv443, %66
  %1297 = add i32 %lsr.iv439, %66
  %1298 = sext i32 %1297 to i64
  %1299 = add nsw i64 %1298, 2
  %1300 = getelementptr inbounds float, ptr %955, i64 %1299
  %1301 = load float, ptr %1300, align 4, !tbaa !15
  %1302 = add nsw i64 %1298, 1
  %1303 = getelementptr inbounds float, ptr %955, i64 %1302
  %1304 = load float, ptr %1303, align 4, !tbaa !15
  %1305 = getelementptr inbounds float, ptr %955, i64 %1298
  %1306 = load float, ptr %1305, align 4, !tbaa !15
  %1307 = fadd float %1304, %1306
  %1308 = fmul float %1307, 3.000000e+00
  %1309 = add nsw i64 %1298, -1
  %1310 = getelementptr inbounds float, ptr %955, i64 %1309
  %1311 = sext i32 %1296 to i64
  %1312 = add nsw i64 %1311, 2
  %1313 = getelementptr inbounds float, ptr %955, i64 %1312
  %1314 = add nsw i64 %1311, 1
  %1315 = getelementptr inbounds float, ptr %955, i64 %1314
  %1316 = load float, ptr %1315, align 4, !tbaa !15
  %1317 = getelementptr inbounds float, ptr %955, i64 %1311
  %1318 = load float, ptr %1317, align 4, !tbaa !15
  %1319 = fadd float %1316, %1318
  %1320 = fmul float %1319, 3.000000e+00
  %1321 = add nsw i64 %1311, -1
  %1322 = getelementptr inbounds float, ptr %955, i64 %1321
  %1323 = load float, ptr %1322, align 4, !tbaa !15
  %1324 = fadd float %1323, %1320
  %1325 = sext i32 %1295 to i64
  %1326 = add nsw i64 %1325, 2
  %1327 = getelementptr inbounds float, ptr %955, i64 %1326
  %1328 = load float, ptr %1327, align 4, !tbaa !15
  %1329 = add nsw i64 %1325, 1
  %1330 = getelementptr inbounds float, ptr %955, i64 %1329
  %1331 = load float, ptr %1330, align 4, !tbaa !15
  %1332 = getelementptr inbounds float, ptr %955, i64 %1325
  %1333 = load float, ptr %1332, align 4, !tbaa !15
  %1334 = fadd float %1331, %1333
  %1335 = fmul float %1334, 3.000000e+00
  %1336 = add nsw i64 %1325, -1
  %1337 = getelementptr inbounds float, ptr %955, i64 %1336
  %1338 = load float, ptr %1337, align 4, !tbaa !15
  %1339 = fadd float %1338, %1335
  %1340 = fadd float %1328, %1339
  %1341 = load float, ptr %1310, align 4, !tbaa !15
  %1342 = load float, ptr %1313, align 4, !tbaa !15
  %1343 = insertelement <2 x float> poison, float %1341, i64 0
  %1344 = insertelement <2 x float> %1343, float %1342, i64 1
  %1345 = insertelement <2 x float> poison, float %1308, i64 0
  %1346 = insertelement <2 x float> %1345, float %1324, i64 1
  %1347 = fadd <2 x float> %1344, %1346
  %1348 = insertelement <2 x float> poison, float %1301, i64 0
  %1349 = insertelement <2 x float> %1348, float %1340, i64 1
  %1350 = fadd <2 x float> %1349, %1347
  %1351 = fmul <2 x float> %1350, <float 1.250000e-01, float 3.750000e-01>
  %1352 = sext i32 %1294 to i64
  %1353 = add nsw i64 %1352, 2
  %1354 = getelementptr inbounds float, ptr %955, i64 %1353
  %1355 = load float, ptr %1354, align 4, !tbaa !15
  %1356 = add nsw i64 %1352, 1
  %1357 = getelementptr inbounds float, ptr %955, i64 %1356
  %1358 = load float, ptr %1357, align 4, !tbaa !15
  %1359 = getelementptr inbounds float, ptr %955, i64 %1352
  %1360 = load float, ptr %1359, align 4, !tbaa !15
  %1361 = fadd float %1358, %1360
  %1362 = fmul float %1361, 3.000000e+00
  %1363 = add nsw i64 %1352, -1
  %1364 = getelementptr inbounds float, ptr %955, i64 %1363
  %1365 = load float, ptr %1364, align 4, !tbaa !15
  %1366 = fadd float %1365, %1362
  %1367 = fadd float %1355, %1366
  %1368 = fmul float %1367, 1.250000e-01
  %1369 = extractelement <2 x float> %1351, i64 1
  %1370 = fadd float %1369, %1368
  %1371 = extractelement <2 x float> %1351, i64 0
  %1372 = fadd float %1371, %1370
  %1373 = fmul float %1372, 1.250000e-01
  store float %1373, ptr %lsr.iv434, align 4, !tbaa !19
  %lsr.iv.next429 = add i32 %lsr.iv428, -1
  %scevgep435 = getelementptr i8, ptr %lsr.iv434, i64 4
  %lsr.iv.next440 = add i32 %lsr.iv439, 2
  %lsr.iv.next444 = add i32 %lsr.iv443, 2
  %lsr.iv.next448 = add i32 %lsr.iv447, 2
  %lsr.iv.next452 = add i32 %lsr.iv451, 2
  %.not129 = icmp eq i32 %lsr.iv.next429, 0
  br i1 %.not129, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3", !llvm.loop !22

"end for f77.s0.v3.loopexit":                     ; preds = %"for f77.s0.v3", %middle.block935
  %1374 = add nsw i32 %f77.s0.v4, 1
  %scevgep433 = getelementptr i1, ptr %lsr.iv431, i64 %1201
  %lsr.iv.next438 = add i32 %lsr.iv437, %1202
  %lsr.iv.next442 = add i32 %lsr.iv441, %1202
  %lsr.iv.next446 = add i32 %lsr.iv445, %1202
  %lsr.iv.next450 = add i32 %lsr.iv449, %1202
  %.not128 = icmp eq i32 %f77.s0.v4, %b750
  %indvar.next922 = add i32 %indvar921, 1
  br i1 %.not128, label %"consume f77", label %"for f77.s0.v4"

"consume f77":                                    ; preds = %"end for f77.s0.v3.loopexit", %"for f77.s0.v4.preheader", %"produce f77"
  %1375 = icmp ult i64 %t3084, 2147483648
  %1376 = icmp ult i64 %t3083, 4294967296
  %1377 = and i1 %1375, %1376
  br i1 %1377, label %"assert succeeded184", label %"assert failed183", !prof !5

"assert failed183":                               ; preds = %"consume f77"
  %1378 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.24, i64 %t3084, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded184":                            ; preds = %"consume f77"
  %1379 = add nuw nsw i64 %t3084, 4
  %1380 = call ptr @halide_malloc(ptr null, i64 %1379)
  %.not559 = icmp eq ptr %1380, null
  br i1 %.not559, label %"assert failed185", label %"produce f78", !prof !4

"assert failed185":                               ; preds = %"assert succeeded184"
  %1381 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f78":                                    ; preds = %"assert succeeded184"
  %1382 = add nsw i32 %39, 1
  %.not109 = icmp slt i32 %39, %43
  br i1 %.not109, label %"assert succeeded188.thread", label %"for f78.s0.v4.preheader", !prof !4

"for f78.s0.v4.preheader":                        ; preds = %"produce f78"
  %1383 = add nsw i32 %48, 1
  %1384 = sub nsw i32 %1383, %52
  %1385 = sext i32 %1140 to i64
  %1386 = sext i32 %43 to i64
  %1387 = shl i32 %1181, 1
  %.not124 = icmp slt i32 %48, %52
  %1388 = sext i32 %52 to i64
  br i1 %.not124, label %"assert succeeded188.thread846", label %"for f78.s0.v4.preheader581", !prof !4

"for f78.s0.v4.preheader581":                     ; preds = %"for f78.s0.v4.preheader"
  %1389 = xor i32 %b748, -1
  %1390 = add i32 %44, %1389
  %1391 = mul i32 %1390, %1181
  %1392 = sub i32 %1391, %b751
  %1393 = sub i32 %44, %b748
  %1394 = mul i32 %1181, %1393
  %1395 = sub i32 %1394, %b751
  %1396 = or i32 %44, 1
  %1397 = sub i32 %1396, %b748
  %1398 = mul i32 %1181, %1397
  %1399 = sub i32 %1398, %b751
  %1400 = add nsw i32 %44, 2
  %1401 = sub i32 %1400, %b748
  %1402 = mul i32 %1401, %1181
  %1403 = sub i32 %1402, %b751
  %1404 = add i32 %1402, %53
  %1405 = sub i32 %1404, %b751
  %1406 = shl i32 %1181, 1
  %1407 = add i32 %1398, %53
  %1408 = sub i32 %1407, %b751
  %1409 = add i32 %1394, %53
  %1410 = sub i32 %1409, %b751
  %1411 = add i32 %1391, %53
  %1412 = sub i32 %1411, %b751
  %1413 = zext i32 %f10.v3.extent_realized.s to i64
  %1414 = add nuw nsw i64 %1413, 1
  %min.iters.check1012 = icmp ult i32 %f10.v3.extent_realized.s, 3
  %mul.result999 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result1002 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.overflow1003 = icmp slt i32 %f10.v3.extent_realized.s, 0
  %mul.result1005 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result1008 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %n.vec1015 = and i64 %1414, -4
  %.cast1016 = trunc i64 %n.vec1015 to i32
  %1415 = shl i32 %.cast1016, 1
  %.cast1019 = trunc i64 %n.vec1015 to i32
  %1416 = shl i32 %.cast1019, 1
  %.cast1022 = trunc i64 %n.vec1015 to i32
  %1417 = shl i32 %.cast1022, 1
  %.cast1025 = trunc i64 %n.vec1015 to i32
  %1418 = shl i32 %.cast1025, 1
  %ind.end1028 = add nsw i64 %n.vec1015, %1388
  %.cast1030 = trunc i64 %n.vec1015 to i32
  %ind.end1031 = sub i32 %1384, %.cast1030
  %invariant.gep1107 = getelementptr float, ptr %1196, i64 -1
  %invariant.gep1109 = getelementptr float, ptr %1196, i64 -1
  %invariant.gep1111 = getelementptr float, ptr %1196, i64 -1
  %invariant.gep1113 = getelementptr float, ptr %1196, i64 -1
  %invariant.gep1115 = getelementptr float, ptr %1196, i64 -1
  %invariant.gep1117 = getelementptr float, ptr %1196, i64 -1
  %invariant.gep1119 = getelementptr float, ptr %1196, i64 -1
  %invariant.gep1121 = getelementptr float, ptr %1196, i64 -1
  %cmp.n1033 = icmp eq i64 %1414, %n.vec1015
  br label %"for f78.s0.v4"

"for f78.s0.v4":                                  ; preds = %"for f78.s0.v4.preheader581", %"end for f78.s0.v3.loopexit"
  %indvar996 = phi i32 [ 0, %"for f78.s0.v4.preheader581" ], [ %indvar.next997, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv422 = phi i32 [ %1392, %"for f78.s0.v4.preheader581" ], [ %lsr.iv.next423, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv418 = phi i32 [ %1395, %"for f78.s0.v4.preheader581" ], [ %lsr.iv.next419, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv414 = phi i32 [ %1399, %"for f78.s0.v4.preheader581" ], [ %lsr.iv.next415, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv410 = phi i32 [ %1403, %"for f78.s0.v4.preheader581" ], [ %lsr.iv.next411, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv406 = phi i64 [ %1386, %"for f78.s0.v4.preheader581" ], [ %lsr.iv.next407, %"end for f78.s0.v3.loopexit" ]
  %1419 = sub nsw i64 %lsr.iv406, %1386
  %1420 = mul i64 %1419, %1385
  %1421 = sub i64 %1420, %1388
  br i1 %min.iters.check1012, label %"for f78.s0.v3.preheader", label %vector.scevcheck995

vector.scevcheck995:                              ; preds = %"for f78.s0.v4"
  %1422 = mul i32 %1406, %indvar996
  %1423 = add i32 %1412, %1422
  %1424 = add i32 %1410, %1422
  %1425 = add i32 %1408, %1422
  %1426 = add i32 %1405, %1422
  %1427 = add i32 %1426, %mul.result999
  %1428 = icmp slt i32 %1427, %1426
  %1429 = add i32 %1425, %mul.result1002
  %1430 = icmp slt i32 %1429, %1425
  %1431 = or i1 %1430, %mul.overflow1003
  %1432 = add i32 %1424, %mul.result1005
  %1433 = icmp slt i32 %1432, %1424
  %1434 = add i32 %1423, %mul.result1008
  %1435 = icmp slt i32 %1434, %1423
  %1436 = or i1 %1428, %1431
  %1437 = or i1 %1433, %1436
  %1438 = or i1 %1435, %1437
  br i1 %1438, label %"for f78.s0.v3.preheader", label %vector.ph1013

vector.ph1013:                                    ; preds = %vector.scevcheck995
  %ind.end1017 = add i32 %lsr.iv422, %1415
  %ind.end1020 = add i32 %lsr.iv418, %1416
  %ind.end1023 = add i32 %lsr.iv414, %1417
  %ind.end1026 = add i32 %lsr.iv410, %1418
  br label %vector.body1034

vector.body1034:                                  ; preds = %vector.body1034, %vector.ph1013
  %index1035 = phi i64 [ 0, %vector.ph1013 ], [ %index.next1069, %vector.body1034 ]
  %.cast1037 = trunc i64 %index1035 to i32
  %1439 = shl i32 %.cast1037, 1
  %offset.idx1038 = add i32 %lsr.iv410, %1439
  %.cast1039 = trunc i64 %index1035 to i32
  %1440 = shl i32 %.cast1039, 1
  %offset.idx1040 = add i32 %lsr.iv414, %1440
  %.cast1041 = trunc i64 %index1035 to i32
  %1441 = shl i32 %.cast1041, 1
  %offset.idx1042 = add i32 %lsr.iv418, %1441
  %.cast1043 = trunc i64 %index1035 to i32
  %1442 = shl i32 %.cast1043, 1
  %offset.idx1044 = add i32 %lsr.iv422, %1442
  %1443 = add i32 %offset.idx1044, %53
  %1444 = add i32 %offset.idx1042, %53
  %1445 = add i32 %offset.idx1040, %53
  %1446 = add i32 %offset.idx1038, %53
  %1447 = sext i32 %1446 to i64
  %1448 = add nsw i64 %1447, 2
  %gep1108 = getelementptr float, ptr %invariant.gep1107, i64 %1448
  %wide.vec1045 = load <8 x float>, ptr %gep1108, align 4, !tbaa !19
  %strided.vec1046 = shufflevector <8 x float> %wide.vec1045, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1047 = shufflevector <8 x float> %wide.vec1045, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1110 = getelementptr float, ptr %invariant.gep1109, i64 %1447
  %wide.vec1048 = load <8 x float>, ptr %gep1110, align 4, !tbaa !19
  %strided.vec1049 = shufflevector <8 x float> %wide.vec1048, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1050 = shufflevector <8 x float> %wide.vec1048, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1449 = fadd <4 x float> %strided.vec1046, %strided.vec1050
  %1450 = fmul <4 x float> %1449, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1451 = fadd <4 x float> %strided.vec1049, %1450
  %1452 = fadd <4 x float> %strided.vec1047, %1451
  %1453 = fmul <4 x float> %1452, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1454 = sext i32 %1445 to i64
  %1455 = add nsw i64 %1454, 2
  %gep1112 = getelementptr float, ptr %invariant.gep1111, i64 %1455
  %wide.vec1051 = load <8 x float>, ptr %gep1112, align 4, !tbaa !19
  %strided.vec1052 = shufflevector <8 x float> %wide.vec1051, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1053 = shufflevector <8 x float> %wide.vec1051, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1114 = getelementptr float, ptr %invariant.gep1113, i64 %1454
  %wide.vec1054 = load <8 x float>, ptr %gep1114, align 4, !tbaa !19
  %strided.vec1055 = shufflevector <8 x float> %wide.vec1054, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1056 = shufflevector <8 x float> %wide.vec1054, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1456 = fadd <4 x float> %strided.vec1052, %strided.vec1056
  %1457 = fmul <4 x float> %1456, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1458 = fadd <4 x float> %strided.vec1055, %1457
  %1459 = fadd <4 x float> %strided.vec1053, %1458
  %1460 = sext i32 %1444 to i64
  %1461 = add nsw i64 %1460, 2
  %gep1116 = getelementptr float, ptr %invariant.gep1115, i64 %1461
  %wide.vec1057 = load <8 x float>, ptr %gep1116, align 4, !tbaa !19
  %strided.vec1058 = shufflevector <8 x float> %wide.vec1057, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1059 = shufflevector <8 x float> %wide.vec1057, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1118 = getelementptr float, ptr %invariant.gep1117, i64 %1460
  %wide.vec1060 = load <8 x float>, ptr %gep1118, align 4, !tbaa !19
  %strided.vec1061 = shufflevector <8 x float> %wide.vec1060, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1062 = shufflevector <8 x float> %wide.vec1060, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1462 = fadd <4 x float> %strided.vec1058, %strided.vec1062
  %1463 = fmul <4 x float> %1462, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1464 = fadd <4 x float> %strided.vec1061, %1463
  %1465 = fadd <4 x float> %strided.vec1059, %1464
  %1466 = fadd <4 x float> %1459, %1465
  %1467 = fmul <4 x float> %1466, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1468 = sext i32 %1443 to i64
  %1469 = add nsw i64 %1468, 2
  %gep1120 = getelementptr float, ptr %invariant.gep1119, i64 %1469
  %wide.vec1063 = load <8 x float>, ptr %gep1120, align 4, !tbaa !19
  %strided.vec1064 = shufflevector <8 x float> %wide.vec1063, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1065 = shufflevector <8 x float> %wide.vec1063, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1122 = getelementptr float, ptr %invariant.gep1121, i64 %1468
  %wide.vec1066 = load <8 x float>, ptr %gep1122, align 4, !tbaa !19
  %strided.vec1067 = shufflevector <8 x float> %wide.vec1066, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1068 = shufflevector <8 x float> %wide.vec1066, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1470 = fadd <4 x float> %strided.vec1064, %strided.vec1068
  %1471 = fmul <4 x float> %1470, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1472 = fadd <4 x float> %strided.vec1067, %1471
  %1473 = fadd <4 x float> %strided.vec1065, %1472
  %1474 = fmul <4 x float> %1473, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1475 = fadd <4 x float> %1467, %1474
  %1476 = fadd <4 x float> %1453, %1475
  %1477 = fmul <4 x float> %1476, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1478 = add i64 %index1035, %1420
  %1479 = getelementptr inbounds float, ptr %1380, i64 %1478
  store <4 x float> %1477, ptr %1479, align 4, !tbaa !23
  %index.next1069 = add nuw i64 %index1035, 4
  %1480 = icmp eq i64 %index.next1069, %n.vec1015
  br i1 %1480, label %middle.block1010, label %vector.body1034, !llvm.loop !25

middle.block1010:                                 ; preds = %vector.body1034
  br i1 %cmp.n1033, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3.preheader"

"for f78.s0.v3.preheader":                        ; preds = %vector.scevcheck995, %"for f78.s0.v4", %middle.block1010
  %lsr.iv424.ph = phi i32 [ %lsr.iv422, %vector.scevcheck995 ], [ %lsr.iv422, %"for f78.s0.v4" ], [ %ind.end1017, %middle.block1010 ]
  %lsr.iv420.ph = phi i32 [ %lsr.iv418, %vector.scevcheck995 ], [ %lsr.iv418, %"for f78.s0.v4" ], [ %ind.end1020, %middle.block1010 ]
  %lsr.iv416.ph = phi i32 [ %lsr.iv414, %vector.scevcheck995 ], [ %lsr.iv414, %"for f78.s0.v4" ], [ %ind.end1023, %middle.block1010 ]
  %lsr.iv412.ph = phi i32 [ %lsr.iv410, %vector.scevcheck995 ], [ %lsr.iv410, %"for f78.s0.v4" ], [ %ind.end1026, %middle.block1010 ]
  %lsr.iv408.ph = phi i64 [ %1388, %vector.scevcheck995 ], [ %1388, %"for f78.s0.v4" ], [ %ind.end1028, %middle.block1010 ]
  %lsr.iv404.ph = phi i32 [ %1384, %vector.scevcheck995 ], [ %1384, %"for f78.s0.v4" ], [ %ind.end1031, %middle.block1010 ]
  br label %"for f78.s0.v3"

"for f78.s0.v3":                                  ; preds = %"for f78.s0.v3.preheader", %"for f78.s0.v3"
  %lsr.iv424 = phi i32 [ %lsr.iv.next425, %"for f78.s0.v3" ], [ %lsr.iv424.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv420 = phi i32 [ %lsr.iv.next421, %"for f78.s0.v3" ], [ %lsr.iv420.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv416 = phi i32 [ %lsr.iv.next417, %"for f78.s0.v3" ], [ %lsr.iv416.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv412 = phi i32 [ %lsr.iv.next413, %"for f78.s0.v3" ], [ %lsr.iv412.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv408 = phi i64 [ %lsr.iv.next409, %"for f78.s0.v3" ], [ %lsr.iv408.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f78.s0.v3" ], [ %lsr.iv404.ph, %"for f78.s0.v3.preheader" ]
  %1481 = add i32 %lsr.iv424, %53
  %1482 = add i32 %lsr.iv420, %53
  %1483 = add i32 %lsr.iv416, %53
  %1484 = add i32 %lsr.iv412, %53
  %1485 = sext i32 %1484 to i64
  %1486 = add nsw i64 %1485, 2
  %1487 = getelementptr inbounds float, ptr %1196, i64 %1486
  %1488 = load float, ptr %1487, align 4, !tbaa !19
  %1489 = add nsw i64 %1485, 1
  %1490 = getelementptr inbounds float, ptr %1196, i64 %1489
  %1491 = load float, ptr %1490, align 4, !tbaa !19
  %1492 = getelementptr inbounds float, ptr %1196, i64 %1485
  %1493 = load float, ptr %1492, align 4, !tbaa !19
  %1494 = fadd float %1491, %1493
  %1495 = fmul float %1494, 3.000000e+00
  %1496 = add nsw i64 %1485, -1
  %1497 = getelementptr inbounds float, ptr %1196, i64 %1496
  %1498 = sext i32 %1483 to i64
  %1499 = add nsw i64 %1498, 2
  %1500 = getelementptr inbounds float, ptr %1196, i64 %1499
  %1501 = add nsw i64 %1498, 1
  %1502 = getelementptr inbounds float, ptr %1196, i64 %1501
  %1503 = load float, ptr %1502, align 4, !tbaa !19
  %1504 = getelementptr inbounds float, ptr %1196, i64 %1498
  %1505 = load float, ptr %1504, align 4, !tbaa !19
  %1506 = fadd float %1503, %1505
  %1507 = fmul float %1506, 3.000000e+00
  %1508 = add nsw i64 %1498, -1
  %1509 = getelementptr inbounds float, ptr %1196, i64 %1508
  %1510 = load float, ptr %1509, align 4, !tbaa !19
  %1511 = fadd float %1510, %1507
  %1512 = sext i32 %1482 to i64
  %1513 = add nsw i64 %1512, 2
  %1514 = getelementptr inbounds float, ptr %1196, i64 %1513
  %1515 = load float, ptr %1514, align 4, !tbaa !19
  %1516 = add nsw i64 %1512, 1
  %1517 = getelementptr inbounds float, ptr %1196, i64 %1516
  %1518 = load float, ptr %1517, align 4, !tbaa !19
  %1519 = getelementptr inbounds float, ptr %1196, i64 %1512
  %1520 = load float, ptr %1519, align 4, !tbaa !19
  %1521 = fadd float %1518, %1520
  %1522 = fmul float %1521, 3.000000e+00
  %1523 = add nsw i64 %1512, -1
  %1524 = getelementptr inbounds float, ptr %1196, i64 %1523
  %1525 = load float, ptr %1524, align 4, !tbaa !19
  %1526 = fadd float %1525, %1522
  %1527 = fadd float %1515, %1526
  %1528 = load float, ptr %1497, align 4, !tbaa !19
  %1529 = load float, ptr %1500, align 4, !tbaa !19
  %1530 = insertelement <2 x float> poison, float %1528, i64 0
  %1531 = insertelement <2 x float> %1530, float %1529, i64 1
  %1532 = insertelement <2 x float> poison, float %1495, i64 0
  %1533 = insertelement <2 x float> %1532, float %1511, i64 1
  %1534 = fadd <2 x float> %1531, %1533
  %1535 = insertelement <2 x float> poison, float %1488, i64 0
  %1536 = insertelement <2 x float> %1535, float %1527, i64 1
  %1537 = fadd <2 x float> %1536, %1534
  %1538 = fmul <2 x float> %1537, <float 1.250000e-01, float 3.750000e-01>
  %1539 = sext i32 %1481 to i64
  %1540 = add nsw i64 %1539, 2
  %1541 = getelementptr inbounds float, ptr %1196, i64 %1540
  %1542 = load float, ptr %1541, align 4, !tbaa !19
  %1543 = add nsw i64 %1539, 1
  %1544 = getelementptr inbounds float, ptr %1196, i64 %1543
  %1545 = load float, ptr %1544, align 4, !tbaa !19
  %1546 = getelementptr inbounds float, ptr %1196, i64 %1539
  %1547 = load float, ptr %1546, align 4, !tbaa !19
  %1548 = fadd float %1545, %1547
  %1549 = fmul float %1548, 3.000000e+00
  %1550 = add nsw i64 %1539, -1
  %1551 = getelementptr inbounds float, ptr %1196, i64 %1550
  %1552 = load float, ptr %1551, align 4, !tbaa !19
  %1553 = fadd float %1552, %1549
  %1554 = fadd float %1542, %1553
  %1555 = fmul float %1554, 1.250000e-01
  %1556 = extractelement <2 x float> %1538, i64 1
  %1557 = fadd float %1556, %1555
  %1558 = extractelement <2 x float> %1538, i64 0
  %1559 = fadd float %1558, %1557
  %1560 = fmul float %1559, 1.250000e-01
  %1561 = add i64 %1421, %lsr.iv408
  %1562 = getelementptr inbounds float, ptr %1380, i64 %1561
  store float %1560, ptr %1562, align 4, !tbaa !23
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next409 = add nsw i64 %lsr.iv408, 1
  %lsr.iv.next413 = add i32 %lsr.iv412, 2
  %lsr.iv.next417 = add i32 %lsr.iv416, 2
  %lsr.iv.next421 = add i32 %lsr.iv420, 2
  %lsr.iv.next425 = add i32 %lsr.iv424, 2
  %.not126 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not126, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3", !llvm.loop !26

"end for f78.s0.v3.loopexit":                     ; preds = %"for f78.s0.v3", %middle.block1010
  %lsr.iv.next407 = add nsw i64 %lsr.iv406, 1
  %lsr426 = trunc i64 %lsr.iv.next407 to i32
  %lsr.iv.next411 = add i32 %lsr.iv410, %1387
  %lsr.iv.next415 = add i32 %lsr.iv414, %1387
  %lsr.iv.next419 = add i32 %lsr.iv418, %1387
  %lsr.iv.next423 = add i32 %lsr.iv422, %1387
  %.not125 = icmp eq i32 %1382, %lsr426
  %indvar.next997 = add i32 %indvar996, 1
  br i1 %.not125, label %"assert succeeded188", label %"for f78.s0.v4"

"assert succeeded188":                            ; preds = %"end for f78.s0.v3.loopexit"
  %1563 = call ptr @halide_malloc(ptr null, i64 %1379)
  %.not561 = icmp eq ptr %1563, null
  br i1 %.not561, label %call_destructor.exit210, label %"for f132.s0.v4.preheader", !prof !4

"assert succeeded188.thread846":                  ; preds = %"for f78.s0.v4.preheader"
  %1564 = call ptr @halide_malloc(ptr null, i64 %1379)
  %.not561847 = icmp eq ptr %1564, null
  br i1 %.not561847, label %call_destructor.exit210, label %"consume f132", !prof !4

"assert succeeded188.thread":                     ; preds = %"produce f78"
  %1565 = call ptr @halide_malloc(ptr null, i64 %1379)
  %.not571 = icmp eq ptr %1565, null
  br i1 %.not571, label %call_destructor.exit210, label %"consume f132", !prof !4

"for f132.s0.v4.preheader":                       ; preds = %"assert succeeded188"
  %1566 = sext i32 %f10.stride.2 to i64
  br i1 %.not124, label %"consume f132", label %"for f132.s0.v4", !prof !27

"for f132.s0.v4":                                 ; preds = %"for f132.s0.v4.preheader", %"end for f132.s0.v3.loopexit"
  %lsr.iv395 = phi i64 [ %lsr.iv.next396, %"end for f132.s0.v3.loopexit" ], [ %1386, %"for f132.s0.v4.preheader" ]
  %lsr403 = trunc i64 %lsr.iv395 to i32
  %1567 = sub nsw i32 %lsr403, %43
  %1568 = mul i32 %1567, %1384
  %1569 = sub i32 %1568, %52
  %1570 = sub nsw i64 %lsr.iv395, %1386
  %1571 = mul i64 %1570, %1385
  %1572 = sub i64 %1571, %1388
  br label %"for f132.s0.v3"

"for f132.s0.v3":                                 ; preds = %"for f132.s0.v3", %"for f132.s0.v4"
  %lsr.iv397 = phi i64 [ %1388, %"for f132.s0.v4" ], [ %lsr.iv.next398, %"for f132.s0.v3" ]
  %lsr.iv393 = phi i32 [ %1384, %"for f132.s0.v4" ], [ %lsr.iv.next394, %"for f132.s0.v3" ]
  %1573 = trunc i64 %lsr.iv397 to i32
  %tmp401 = add i32 %1569, %1573
  %1574 = sext i32 %tmp401 to i64
  %1575 = getelementptr inbounds float, ptr %1380, i64 %1574
  %1576 = load float, ptr %1575, align 4, !tbaa !23
  %t2188 = fmul float %1576, %55
  %a752 = fptosi float %t2188 to i32
  %a755 = call i32 @llvm.smin.i32(i32 %b6, i32 %a752)
  %1577 = call i32 @llvm.smax.i32(i32 %a755, i32 0)
  %1578 = sitofp i32 %1577 to float
  %t2190 = fsub float %t2188, %1578
  %t2191 = sub nsw i32 %1577, %111
  %1579 = sext i32 %t2191 to i64
  %1580 = add nsw i64 %1579, 1
  %1581 = mul nsw i64 %1580, %1566
  %1582 = add nsw i64 %1581, %1574
  %1583 = getelementptr inbounds float, ptr %1162, i64 %1582
  %1584 = load float, ptr %1583, align 4, !tbaa !28
  %1585 = fmul float %1584, %t2190
  %1586 = mul nsw i64 %1579, %1566
  %1587 = add nsw i64 %1586, %1574
  %1588 = getelementptr inbounds float, ptr %1162, i64 %1587
  %1589 = load float, ptr %1588, align 4, !tbaa !28
  %1590 = fsub float 1.000000e+00, %t2190
  %1591 = fmul float %1589, %1590
  %1592 = fadd float %1585, %1591
  %1593 = add i64 %1572, %lsr.iv397
  %1594 = getelementptr inbounds float, ptr %1563, i64 %1593
  store float %1592, ptr %1594, align 4, !tbaa !30
  %lsr.iv.next394 = add i32 %lsr.iv393, -1
  %lsr.iv.next398 = add nsw i64 %lsr.iv397, 1
  %.not122 = icmp eq i32 %lsr.iv.next394, 0
  br i1 %.not122, label %"end for f132.s0.v3.loopexit", label %"for f132.s0.v3"

"end for f132.s0.v3.loopexit":                    ; preds = %"for f132.s0.v3"
  %lsr.iv.next396 = add nsw i64 %lsr.iv395, 1
  %lsr402 = trunc i64 %lsr.iv.next396 to i32
  %.not121 = icmp eq i32 %1382, %lsr402
  br i1 %.not121, label %"consume f132", label %"for f132.s0.v4"

"consume f132":                                   ; preds = %"end for f132.s0.v3.loopexit", %"assert succeeded188.thread846", %"for f132.s0.v4.preheader", %"assert succeeded188.thread"
  %1595 = phi ptr [ %1565, %"assert succeeded188.thread" ], [ %1563, %"for f132.s0.v4.preheader" ], [ %1564, %"assert succeeded188.thread846" ], [ %1563, %"end for f132.s0.v3.loopexit" ]
  call void @halide_free(ptr null, ptr nonnull %1380) #7
  %f131.v3.extent_realized.s = sub nsw i32 %a2, %a3
  %reass.sub562 = sub nsw i32 %a0, %a1
  %1596 = add nsw i32 %reass.sub562, 1
  %1597 = zext i32 %1596 to i64
  %1598 = add nsw i32 %f131.v3.extent_realized.s, 1
  %1599 = zext i32 %1598 to i64
  %1600 = shl nuw nsw i64 %1599, 2
  %1601 = mul i64 %1600, %1597
  %1602 = icmp ult i64 %1601, 2147483648
  %1603 = and i64 %1600, 4294967292
  %1604 = mul nuw i64 %1603, %1597
  %1605 = lshr i64 %1604, 32
  %1606 = lshr i64 %1599, 30
  %1607 = mul nuw nsw i64 %1606, %1597
  %1608 = add nuw nsw i64 %1605, %1607
  %1609 = icmp ult i64 %1608, 4294967296
  %1610 = and i1 %1602, %1609
  br i1 %1610, label %"assert succeeded192", label %"assert failed191", !prof !5

"assert failed191":                               ; preds = %"consume f132"
  %1611 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.26, i64 %1601, i64 2147483647) #4
  br label %call_destructor.exit205

"assert succeeded192":                            ; preds = %"consume f132"
  %1612 = add nuw nsw i64 %1601, 4
  %1613 = call ptr @halide_malloc(ptr null, i64 %1612)
  %.not563 = icmp eq ptr %1613, null
  br i1 %.not563, label %"assert failed193", label %"produce f131", !prof !4

"assert failed193":                               ; preds = %"assert succeeded192"
  %1614 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit205

"produce f131":                                   ; preds = %"assert succeeded192"
  %1615 = add nsw i32 %a0, 1
  %.not110 = icmp slt i32 %a0, %a1
  br i1 %.not110, label %"consume f131", label %"for f131.s0.v4.preheader", !prof !4

"for f131.s0.v4.preheader":                       ; preds = %"produce f131"
  %1616 = sext i32 %1598 to i64
  %1617 = sext i32 %a1 to i64
  %1618 = add i32 %f9.v3.extent_realized.s.s, 1
  %1619 = sub i32 %1618, %f9.v3.min_realized
  %1620 = sext i32 %b753 to i64
  %1621 = sext i32 %b751 to i64
  %reass.sub565 = sub nsw i64 %1620, %1621
  %1622 = add nsw i64 %reass.sub565, 1
  %.not116 = icmp slt i32 %a2, %a3
  %1623 = sext i32 %a3 to i64
  %1624 = xor i32 %43, -1
  %1625 = sext i32 %f10.stride.2 to i64
  %1626 = sext i32 %f9.stride.2 to i64
  br i1 %.not116, label %"consume f131", label %"for f131.s0.v4.preheader577", !prof !4

"for f131.s0.v4.preheader577":                    ; preds = %"for f131.s0.v4.preheader"
  %1627 = sext i32 %b748 to i64
  %1628 = sub nsw i64 %1617, %1627
  %1629 = mul i64 %1622, %1628
  %1630 = sub i64 %1629, %1621
  %1631 = sub i32 %a1, %f9.v4.min_realized
  %1632 = mul i32 %1619, %1631
  %1633 = sub i32 %1632, %f9.v3.min_realized
  br label %"for f131.s0.v4"

"for f131.s0.v4":                                 ; preds = %"for f131.s0.v4.preheader577", %"end for f131.s0.v3.loopexit"
  %lsr.iv385 = phi i64 [ %lsr.iv.next386, %"end for f131.s0.v3.loopexit" ], [ %1630, %"for f131.s0.v4.preheader577" ]
  %lsr.iv378 = phi i32 [ %lsr.iv.next379, %"end for f131.s0.v3.loopexit" ], [ %1633, %"for f131.s0.v4.preheader577" ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %"end for f131.s0.v3.loopexit" ], [ %1617, %"for f131.s0.v4.preheader577" ]
  %lsr392 = trunc i64 %lsr.iv374 to i32
  %1634 = add i32 %lsr.iv378, %a3
  %1635 = add i64 %lsr.iv385, %1623
  %1636 = shl i64 %1635, 2
  %scevgep387 = getelementptr i8, ptr %1196, i64 %1636
  %1637 = shl i32 %lsr392, 1
  %1638 = and i32 %1637, 2
  %1639 = ashr i32 %lsr392, 1
  %1640 = add nsw i32 %1639, %1624
  %1641 = add nsw i32 %1640, %1638
  %t2196 = mul nsw i32 %1641, %1140
  %1642 = sub nsw i32 %1639, %43
  %t2200 = mul nsw i32 %1642, %1140
  %1643 = sext i32 %t2200 to i64
  %1644 = sext i32 %t2196 to i64
  %1645 = sub nsw i64 %lsr.iv374, %1617
  %1646 = mul i64 %1645, %1616
  %1647 = sub i64 %1646, %1623
  br label %"for f131.s0.v3"

"for f131.s0.v3":                                 ; preds = %"for f131.s0.v3", %"for f131.s0.v4"
  %lsr.iv388 = phi ptr [ %scevgep387, %"for f131.s0.v4" ], [ %scevgep389, %"for f131.s0.v3" ]
  %lsr.iv380 = phi i32 [ %1634, %"for f131.s0.v4" ], [ %lsr.iv.next381, %"for f131.s0.v3" ]
  %lsr.iv376 = phi i64 [ %1623, %"for f131.s0.v4" ], [ %lsr.iv.next377, %"for f131.s0.v3" ]
  %lsr.iv372 = phi i32 [ %1598, %"for f131.s0.v4" ], [ %lsr.iv.next373, %"for f131.s0.v3" ]
  %1648 = load float, ptr %lsr.iv388, align 4, !tbaa !19
  %t2192 = fmul float %1648, %55
  %a756 = fptosi float %t2192 to i32
  %a759 = call i32 @llvm.smin.i32(i32 %b6, i32 %a756)
  %1649 = call i32 @llvm.smax.i32(i32 %a759, i32 0)
  %1650 = sitofp i32 %1649 to float
  %t2194 = fsub float %t2192, %1650
  %tmp384 = trunc i64 %lsr.iv376 to i32
  %1651 = shl i32 %tmp384, 1
  %1652 = and i32 %1651, 2
  %1653 = ashr i32 %tmp384, 1
  %1654 = sub nsw i32 %1653, %52
  %t2195 = add nsw i32 %1654, %1652
  %t2204 = sub nsw i32 %1649, %111
  %1655 = sext i32 %t2204 to i64
  %1656 = add nsw i64 %1655, 1
  %1657 = mul nsw i64 %1656, %1625
  %1658 = sext i32 %1654 to i64
  %1659 = add nsw i64 %1658, %1643
  %1660 = add nsw i64 %1657, %1659
  %1661 = getelementptr inbounds float, ptr %1162, i64 %1660
  %1662 = sext i32 %t2195 to i64
  %1663 = add nsw i64 %1662, %1643
  %1664 = add nsw i64 %1663, -1
  %1665 = add nsw i64 %1664, %1657
  %1666 = getelementptr inbounds float, ptr %1162, i64 %1665
  %1667 = add nsw i64 %1658, %1644
  %1668 = add nsw i64 %1657, %1667
  %1669 = getelementptr inbounds float, ptr %1162, i64 %1668
  %1670 = add nsw i64 %1662, %1644
  %1671 = add nsw i64 %1670, -1
  %1672 = add nsw i64 %1671, %1657
  %1673 = getelementptr inbounds float, ptr %1162, i64 %1672
  %1674 = load float, ptr %1661, align 4, !tbaa !28
  %1675 = load float, ptr %1666, align 4, !tbaa !28
  %1676 = load float, ptr %1669, align 4, !tbaa !28
  %1677 = insertelement <2 x float> poison, float %1675, i64 0
  %1678 = insertelement <2 x float> %1677, float %1676, i64 1
  %1679 = fmul <2 x float> %1678, <float 2.500000e-01, float 7.500000e-01>
  %1680 = load float, ptr %1673, align 4, !tbaa !28
  %1681 = insertelement <2 x float> poison, float %1674, i64 0
  %1682 = insertelement <2 x float> %1681, float %1680, i64 1
  %1683 = fmul <2 x float> %1682, <float 7.500000e-01, float 2.500000e-01>
  %1684 = fadd <2 x float> %1679, %1683
  %1685 = fmul <2 x float> %1684, <float 7.500000e-01, float 2.500000e-01>
  %shift = shufflevector <2 x float> %1685, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1686 = fadd <2 x float> %1685, %shift
  %1687 = extractelement <2 x float> %1686, i64 0
  %1688 = mul nsw i64 %1656, %1626
  %1689 = sext i32 %lsr.iv380 to i64
  %1690 = add nsw i64 %1688, %1689
  %1691 = getelementptr inbounds float, ptr %918, i64 %1690
  %1692 = load float, ptr %1691, align 4, !tbaa !32
  %1693 = fsub float %1692, %1687
  %1694 = fmul float %t2194, %1693
  %1695 = mul nsw i64 %1655, %1625
  %1696 = add nsw i64 %1695, %1659
  %1697 = getelementptr inbounds float, ptr %1162, i64 %1696
  %1698 = add nsw i64 %1664, %1695
  %1699 = getelementptr inbounds float, ptr %1162, i64 %1698
  %1700 = add nsw i64 %1695, %1667
  %1701 = getelementptr inbounds float, ptr %1162, i64 %1700
  %1702 = add nsw i64 %1671, %1695
  %1703 = getelementptr inbounds float, ptr %1162, i64 %1702
  %1704 = load float, ptr %1697, align 4, !tbaa !28
  %1705 = load float, ptr %1699, align 4, !tbaa !28
  %1706 = load float, ptr %1701, align 4, !tbaa !28
  %1707 = insertelement <2 x float> poison, float %1705, i64 0
  %1708 = insertelement <2 x float> %1707, float %1706, i64 1
  %1709 = fmul <2 x float> %1708, <float 2.500000e-01, float 7.500000e-01>
  %1710 = load float, ptr %1703, align 4, !tbaa !28
  %1711 = insertelement <2 x float> poison, float %1704, i64 0
  %1712 = insertelement <2 x float> %1711, float %1710, i64 1
  %1713 = fmul <2 x float> %1712, <float 7.500000e-01, float 2.500000e-01>
  %1714 = fadd <2 x float> %1709, %1713
  %1715 = fmul <2 x float> %1714, <float 7.500000e-01, float 2.500000e-01>
  %shift1070 = shufflevector <2 x float> %1715, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1716 = fadd <2 x float> %1715, %shift1070
  %1717 = extractelement <2 x float> %1716, i64 0
  %1718 = mul nsw i64 %1655, %1626
  %1719 = add nsw i64 %1718, %1689
  %1720 = getelementptr inbounds float, ptr %918, i64 %1719
  %1721 = load float, ptr %1720, align 4, !tbaa !32
  %1722 = fsub float %1721, %1717
  %1723 = fsub float 1.000000e+00, %t2194
  %1724 = fmul float %1723, %1722
  %1725 = fadd float %1694, %1724
  %1726 = getelementptr inbounds float, ptr %1595, i64 %1659
  %1727 = getelementptr inbounds float, ptr %1595, i64 %1664
  %1728 = getelementptr inbounds float, ptr %1595, i64 %1667
  %1729 = getelementptr inbounds float, ptr %1595, i64 %1671
  %1730 = load float, ptr %1726, align 4, !tbaa !30
  %1731 = load float, ptr %1727, align 4, !tbaa !30
  %1732 = load float, ptr %1728, align 4, !tbaa !30
  %1733 = insertelement <2 x float> poison, float %1731, i64 0
  %1734 = insertelement <2 x float> %1733, float %1732, i64 1
  %1735 = fmul <2 x float> %1734, <float 2.500000e-01, float 7.500000e-01>
  %1736 = load float, ptr %1729, align 4, !tbaa !30
  %1737 = insertelement <2 x float> poison, float %1730, i64 0
  %1738 = insertelement <2 x float> %1737, float %1736, i64 1
  %1739 = fmul <2 x float> %1738, <float 7.500000e-01, float 2.500000e-01>
  %1740 = fadd <2 x float> %1735, %1739
  %1741 = fmul <2 x float> %1740, <float 7.500000e-01, float 2.500000e-01>
  %shift1071 = shufflevector <2 x float> %1741, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1742 = fadd <2 x float> %1741, %shift1071
  %1743 = extractelement <2 x float> %1742, i64 0
  %1744 = fadd float %1725, %1743
  %1745 = add i64 %1647, %lsr.iv376
  %1746 = getelementptr inbounds float, ptr %1613, i64 %1745
  store float %1744, ptr %1746, align 4, !tbaa !34
  %lsr.iv.next373 = add i32 %lsr.iv372, -1
  %lsr.iv.next377 = add nsw i64 %lsr.iv376, 1
  %lsr.iv.next381 = add i32 %lsr.iv380, 1
  %scevgep389 = getelementptr i8, ptr %lsr.iv388, i64 4
  %.not118 = icmp eq i32 %lsr.iv.next373, 0
  br i1 %.not118, label %"end for f131.s0.v3.loopexit", label %"for f131.s0.v3"

"end for f131.s0.v3.loopexit":                    ; preds = %"for f131.s0.v3"
  %lsr.iv.next375 = add nsw i64 %lsr.iv374, 1
  %lsr391 = trunc i64 %lsr.iv.next375 to i32
  %lsr.iv.next379 = add i32 %lsr.iv378, %1619
  %lsr.iv.next386 = add i64 %lsr.iv385, %1622
  %.not117 = icmp eq i32 %1615, %lsr391
  br i1 %.not117, label %"consume f131", label %"for f131.s0.v4"

"consume f131":                                   ; preds = %"end for f131.s0.v3.loopexit", %"for f131.s0.v4.preheader", %"produce f131"
  call void @halide_free(ptr null, ptr nonnull %1162) #7
  call void @halide_free(ptr null, ptr nonnull %1196) #7
  call void @halide_free(ptr null, ptr nonnull %1595) #7
  %1747 = call i32 @llvm.smax.i32(i32 %809, i32 %59)
  %1748 = ashr i32 %1747, 5
  %.not170 = icmp slt i32 %a9, %811
  %f130.v3.min_realized = select i1 %.not170, i32 %a9, i32 %b670
  %1749 = call i32 @llvm.smax.i32(i32 %b681, i32 %a8)
  %f130.v3.extent_realized.s = sub nsw i32 %1749, %f130.v3.min_realized
  %reass.sub566 = sub nsw i32 %1748, %b655
  %1750 = add nsw i32 %reass.sub566, 1
  %1751 = zext i32 %1750 to i64
  %1752 = add nsw i32 %f130.v3.extent_realized.s, 1
  %1753 = zext i32 %1752 to i64
  %1754 = shl nuw nsw i64 %1753, 2
  %1755 = mul i64 %1754, %1751
  %1756 = icmp ult i64 %1755, 2147483648
  %1757 = and i64 %1754, 4294967292
  %1758 = mul nuw i64 %1757, %1751
  %1759 = lshr i64 %1758, 32
  %1760 = lshr i64 %1753, 30
  %1761 = mul nuw nsw i64 %1760, %1751
  %1762 = add nuw nsw i64 %1759, %1761
  %1763 = icmp ult i64 %1762, 4294967296
  %1764 = and i1 %1756, %1763
  br i1 %1764, label %"assert succeeded196", label %"assert failed195", !prof !5

"assert failed195":                               ; preds = %"consume f131"
  %1765 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.27, i64 %1755, i64 2147483647) #4
  br label %call_destructor.exit

"assert succeeded196":                            ; preds = %"consume f131"
  %1766 = add nuw nsw i64 %1755, 4
  %1767 = call ptr @halide_malloc(ptr null, i64 %1766)
  %.not567 = icmp eq ptr %1767, null
  br i1 %.not567, label %"assert failed197", label %"produce f130", !prof !4

"assert failed197":                               ; preds = %"assert succeeded196"
  %1768 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit

"produce f130":                                   ; preds = %"assert succeeded196"
  %1769 = add nsw i32 %a6, 1
  %.not111 = icmp sgt i32 %a7, %a6
  br i1 %.not111, label %"produce local_laplacian", label %"for f130.s0.v4.preheader", !prof !4

"for f130.s0.v4.preheader":                       ; preds = %"produce f130"
  %reass.sub568 = sub nsw i32 %a8, %a9
  %1770 = add nsw i32 %reass.sub568, 1
  %narrow = mul nsw i32 %f130.v3.min_realized, -4
  %1771 = sext i32 %narrow to i64
  %scevgep = getelementptr i8, ptr %1767, i64 %1771
  %1772 = sext i32 %f130.v3.extent_realized.s to i64
  %1773 = shl nsw i64 %1772, 2
  %1774 = add nsw i64 %1773, 4
  %1775 = sext i32 %b739 to i64
  %1776 = sext i32 %b737 to i64
  %reass.sub570 = sub nsw i64 %1775, %1776
  %1777 = add nsw i64 %reass.sub570, 1
  %.not112 = icmp slt i32 %a8, %a9
  %1778 = sext i32 %a9 to i64
  %1779 = xor i32 %a1, -1
  %1780 = xor i32 %f9.v4.min_realized, -1
  %1781 = sext i32 %f9.stride.2 to i64
  %1782 = sext i32 %f9.v3.min_realized to i64
  %1783 = sext i32 %f8.stride.2 to i64
  %1784 = sext i32 %b655 to i64
  br i1 %.not112, label %"produce local_laplacian", label %"for f130.s0.v4.preheader575", !prof !4

"for f130.s0.v4.preheader575":                    ; preds = %"for f130.s0.v4.preheader"
  %1785 = sext i32 %a7 to i64
  %1786 = sext i32 %b733 to i64
  %1787 = sub nsw i64 %1785, %1786
  %1788 = mul i64 %1777, %1787
  %1789 = sub i64 %1788, %1776
  %1790 = sub i32 %a7, %f8.v4.min_realized
  %1791 = mul i32 %815, %1790
  %1792 = sub i32 %1791, %f8.v3.min_realized
  br label %"for f130.s0.v4"

"for f130.s0.v4":                                 ; preds = %"for f130.s0.v4.preheader575", %"end for f130.s0.v3.loopexit"
  %lsr.iv363 = phi i64 [ %lsr.iv.next364, %"end for f130.s0.v3.loopexit" ], [ %1789, %"for f130.s0.v4.preheader575" ]
  %lsr.iv358 = phi i32 [ %lsr.iv.next359, %"end for f130.s0.v3.loopexit" ], [ %1792, %"for f130.s0.v4.preheader575" ]
  %lsr.iv348 = phi i64 [ %lsr.iv.next349, %"end for f130.s0.v3.loopexit" ], [ %1785, %"for f130.s0.v4.preheader575" ]
  %lsr371 = trunc i64 %lsr.iv348 to i32
  %1793 = add i32 %lsr.iv358, %a9
  %1794 = add i64 %lsr.iv363, %1778
  %1795 = shl i64 %1794, 2
  %scevgep365 = getelementptr i8, ptr %955, i64 %1795
  %1796 = shl i32 %lsr371, 1
  %1797 = and i32 %1796, 2
  %1798 = ashr i32 %lsr371, 1
  %t2210 = add nsw i32 %1797, %1798
  %1799 = add nsw i32 %t2210, %1779
  %t2216 = mul nsw i32 %1799, %1598
  %1800 = sub nsw i32 %1798, %a1
  %t2218 = mul nsw i32 %1800, %1598
  %1801 = add i32 %t2210, %1780
  %t2223 = mul nsw i32 %1801, %897
  %1802 = sub nsw i32 %1798, %f9.v4.min_realized
  %t2228 = mul nsw i32 %1802, %897
  %1803 = sext i32 %t2228 to i64
  %1804 = sext i32 %t2223 to i64
  %1805 = sext i32 %t2218 to i64
  %1806 = sext i32 %t2216 to i64
  %1807 = sub i64 %lsr.iv348, %1784
  %1808 = mul i64 %1807, %1774
  %scevgep350 = getelementptr i8, ptr %scevgep, i64 %1808
  br label %"for f130.s0.v3"

"for f130.s0.v3":                                 ; preds = %"for f130.s0.v3", %"for f130.s0.v4"
  %lsr.iv366 = phi ptr [ %scevgep365, %"for f130.s0.v4" ], [ %scevgep367, %"for f130.s0.v3" ]
  %lsr.iv360 = phi i32 [ %1793, %"for f130.s0.v4" ], [ %lsr.iv.next361, %"for f130.s0.v3" ]
  %lsr.iv352 = phi i64 [ %1778, %"for f130.s0.v4" ], [ %lsr.iv.next353, %"for f130.s0.v3" ]
  %lsr.iv = phi i32 [ %1770, %"for f130.s0.v4" ], [ %lsr.iv.next, %"for f130.s0.v3" ]
  %tmp370 = trunc i64 %lsr.iv352 to i32
  %1809 = shl i32 %tmp370, 1
  %1810 = and i32 %1809, 2
  %1811 = ashr i32 %tmp370, 1
  %t2211 = add nsw i32 %1810, %1811
  %1812 = load float, ptr %lsr.iv366, align 4, !tbaa !15
  %t2212 = fmul float %1812, %55
  %a770 = fptosi float %t2212 to i32
  %a773 = call i32 @llvm.smin.i32(i32 %b6, i32 %a770)
  %1813 = call i32 @llvm.smax.i32(i32 %a773, i32 0)
  %1814 = sitofp i32 %1813 to float
  %t2214 = fsub float %t2212, %1814
  %t2215 = sub nsw i32 %t2211, %a3
  %t2217 = sub nsw i32 %1811, %a3
  %t2220 = sub nsw i32 %1813, %111
  %1815 = sext i32 %t2220 to i64
  %1816 = add nsw i64 %1815, 1
  %1817 = mul nsw i64 %1816, %1781
  %1818 = sext i32 %1811 to i64
  %1819 = sub nsw i64 %1818, %1782
  %1820 = add nsw i64 %1819, %1803
  %1821 = add nsw i64 %1817, %1820
  %1822 = getelementptr inbounds float, ptr %918, i64 %1821
  %1823 = sext i32 %t2211 to i64
  %1824 = sub nsw i64 %1823, %1782
  %1825 = add nsw i64 %1824, %1803
  %1826 = add nsw i64 %1825, -1
  %1827 = add nsw i64 %1826, %1817
  %1828 = getelementptr inbounds float, ptr %918, i64 %1827
  %1829 = add nsw i64 %1819, %1804
  %1830 = add nsw i64 %1817, %1829
  %1831 = getelementptr inbounds float, ptr %918, i64 %1830
  %1832 = add nsw i64 %1824, %1804
  %1833 = add nsw i64 %1832, -1
  %1834 = add nsw i64 %1833, %1817
  %1835 = getelementptr inbounds float, ptr %918, i64 %1834
  %1836 = load float, ptr %1822, align 4, !tbaa !32
  %1837 = load float, ptr %1828, align 4, !tbaa !32
  %1838 = load float, ptr %1831, align 4, !tbaa !32
  %1839 = insertelement <2 x float> poison, float %1837, i64 0
  %1840 = insertelement <2 x float> %1839, float %1838, i64 1
  %1841 = fmul <2 x float> %1840, <float 2.500000e-01, float 7.500000e-01>
  %1842 = load float, ptr %1835, align 4, !tbaa !32
  %1843 = insertelement <2 x float> poison, float %1836, i64 0
  %1844 = insertelement <2 x float> %1843, float %1842, i64 1
  %1845 = fmul <2 x float> %1844, <float 7.500000e-01, float 2.500000e-01>
  %1846 = fadd <2 x float> %1841, %1845
  %1847 = fmul <2 x float> %1846, <float 7.500000e-01, float 2.500000e-01>
  %shift1072 = shufflevector <2 x float> %1847, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1848 = fadd <2 x float> %1847, %shift1072
  %1849 = extractelement <2 x float> %1848, i64 0
  %1850 = mul nsw i64 %1816, %1783
  %1851 = sext i32 %lsr.iv360 to i64
  %1852 = add nsw i64 %1850, %1851
  %1853 = getelementptr inbounds float, ptr %836, i64 %1852
  %1854 = load float, ptr %1853, align 4, !tbaa !36
  %1855 = fsub float %1854, %1849
  %1856 = fmul float %t2214, %1855
  %1857 = mul nsw i64 %1815, %1781
  %1858 = add nsw i64 %1857, %1820
  %1859 = getelementptr inbounds float, ptr %918, i64 %1858
  %1860 = add nsw i64 %1826, %1857
  %1861 = getelementptr inbounds float, ptr %918, i64 %1860
  %1862 = add nsw i64 %1857, %1829
  %1863 = getelementptr inbounds float, ptr %918, i64 %1862
  %1864 = add nsw i64 %1833, %1857
  %1865 = getelementptr inbounds float, ptr %918, i64 %1864
  %1866 = load float, ptr %1859, align 4, !tbaa !32
  %1867 = load float, ptr %1861, align 4, !tbaa !32
  %1868 = load float, ptr %1863, align 4, !tbaa !32
  %1869 = insertelement <2 x float> poison, float %1867, i64 0
  %1870 = insertelement <2 x float> %1869, float %1868, i64 1
  %1871 = fmul <2 x float> %1870, <float 2.500000e-01, float 7.500000e-01>
  %1872 = load float, ptr %1865, align 4, !tbaa !32
  %1873 = insertelement <2 x float> poison, float %1866, i64 0
  %1874 = insertelement <2 x float> %1873, float %1872, i64 1
  %1875 = fmul <2 x float> %1874, <float 7.500000e-01, float 2.500000e-01>
  %1876 = fadd <2 x float> %1871, %1875
  %1877 = fmul <2 x float> %1876, <float 7.500000e-01, float 2.500000e-01>
  %shift1073 = shufflevector <2 x float> %1877, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1878 = fadd <2 x float> %1877, %shift1073
  %1879 = extractelement <2 x float> %1878, i64 0
  %1880 = mul nsw i64 %1815, %1783
  %1881 = add nsw i64 %1880, %1851
  %1882 = getelementptr inbounds float, ptr %836, i64 %1881
  %1883 = load float, ptr %1882, align 4, !tbaa !36
  %1884 = fsub float %1883, %1879
  %1885 = fsub float 1.000000e+00, %t2214
  %1886 = fmul float %1885, %1884
  %1887 = fadd float %1856, %1886
  %1888 = sext i32 %t2217 to i64
  %1889 = add nsw i64 %1888, %1805
  %1890 = getelementptr inbounds float, ptr %1613, i64 %1889
  %1891 = sext i32 %t2215 to i64
  %1892 = add nsw i64 %1891, -1
  %1893 = add nsw i64 %1892, %1805
  %1894 = getelementptr inbounds float, ptr %1613, i64 %1893
  %1895 = add nsw i64 %1888, %1806
  %1896 = getelementptr inbounds float, ptr %1613, i64 %1895
  %1897 = add nsw i64 %1892, %1806
  %1898 = getelementptr inbounds float, ptr %1613, i64 %1897
  %1899 = load float, ptr %1890, align 4, !tbaa !34
  %1900 = load float, ptr %1894, align 4, !tbaa !34
  %1901 = load float, ptr %1896, align 4, !tbaa !34
  %1902 = insertelement <2 x float> poison, float %1900, i64 0
  %1903 = insertelement <2 x float> %1902, float %1901, i64 1
  %1904 = fmul <2 x float> %1903, <float 2.500000e-01, float 7.500000e-01>
  %1905 = load float, ptr %1898, align 4, !tbaa !34
  %1906 = insertelement <2 x float> poison, float %1899, i64 0
  %1907 = insertelement <2 x float> %1906, float %1905, i64 1
  %1908 = fmul <2 x float> %1907, <float 7.500000e-01, float 2.500000e-01>
  %1909 = fadd <2 x float> %1904, %1908
  %1910 = fmul <2 x float> %1909, <float 7.500000e-01, float 2.500000e-01>
  %shift1074 = shufflevector <2 x float> %1910, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1911 = fadd <2 x float> %1910, %shift1074
  %1912 = extractelement <2 x float> %1911, i64 0
  %1913 = fadd float %1887, %1912
  %scevgep354 = getelementptr float, ptr %scevgep350, i64 %lsr.iv352
  store float %1913, ptr %scevgep354, align 4, !tbaa !38
  %lsr.iv.next = add i32 %lsr.iv, -1
  %lsr.iv.next353 = add nsw i64 %lsr.iv352, 1
  %lsr.iv.next361 = add i32 %lsr.iv360, 1
  %scevgep367 = getelementptr i8, ptr %lsr.iv366, i64 4
  %.not114 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not114, label %"end for f130.s0.v3.loopexit", label %"for f130.s0.v3"

"end for f130.s0.v3.loopexit":                    ; preds = %"for f130.s0.v3"
  %lsr.iv.next349 = add nsw i64 %lsr.iv348, 1
  %lsr = trunc i64 %lsr.iv.next349 to i32
  %lsr.iv.next359 = add i32 %lsr.iv358, %815
  %lsr.iv.next364 = add i64 %lsr.iv363, %1777
  %.not113 = icmp eq i32 %1769, %lsr
  br i1 %.not113, label %"produce local_laplacian", label %"for f130.s0.v4"

"produce local_laplacian":                        ; preds = %"end for f130.s0.v3.loopexit", %"for f130.s0.v4.preheader", %"produce f130"
  call void @halide_free(ptr null, ptr nonnull %918) #7
  call void @halide_free(ptr null, ptr nonnull %955) #7
  call void @halide_free(ptr null, ptr nonnull %1613) #7
  %1914 = sub nsw i32 %129, %a114
  %1915 = add nsw i32 %1914, 63
  %a775 = ashr i32 %1915, 6
  %1916 = icmp sgt i32 %1914, 0
  %1917 = select i1 %1916, i32 %a775, i32 0
  %1918 = add nsw i32 %local_laplacian.extent.1, 63
  %b776 = ashr i32 %1918, 6
  %local_laplacian.s0.v4.v264.prologue = call i32 @llvm.smin.i32(i32 %b776, i32 %1917)
  %1919 = sub nsw i32 %130, %a114
  %1920 = ashr i32 %1919, 6
  %a780 = add nsw i32 %1920, -1
  %1921 = call i32 @llvm.smin.i32(i32 %b88, i32 %b91)
  %1922 = sub nsw i32 %1921, %a114
  %b782 = ashr i32 %1922, 6
  %.not171 = icmp slt i32 %b782, %1920
  %a779 = select i1 %.not171, i32 %b782, i32 %a780
  %1923 = call i32 @llvm.smin.i32(i32 %137, i32 %a779)
  %b778 = add nsw i32 %1923, 1
  %local_laplacian.s0.v4.v264.epilogue = call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v4.v264.prologue, i32 %b778)
  store float %beta, ptr %0, align 8
  %1924 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 1
  store i32 %b121, ptr %1924, align 4
  %1925 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 2
  store i32 %a772, ptr %1925, align 8
  %1926 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 3
  store i32 %f130.v3.extent_realized.s, ptr %1926, align 4
  %1927 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 4
  store i32 %f130.v3.min_realized, ptr %1927, align 8
  %1928 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 5
  store i32 %f2.v3.extent_realized.s, ptr %1928, align 4
  %1929 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 6
  store i32 %f2.v3.min_realized, ptr %1929, align 8
  %1930 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 7
  store i32 %f2.v4.min_realized, ptr %1930, align 4
  %1931 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 8
  store i32 %f4.stride.1, ptr %1931, align 8
  %1932 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 9
  store i32 %f4.v3.extent_realized.s, ptr %1932, align 4
  %1933 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 10
  store i32 %f4.v3.min_realized, ptr %1933, align 8
  %1934 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 11
  store i32 %f4.v4.min_realized, ptr %1934, align 4
  %1935 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 12
  store i32 %f5.stride.1, ptr %1935, align 8
  %1936 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 13
  store i32 %f5.v3.extent_realized.s, ptr %1936, align 4
  %1937 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 14
  store i32 %f5.v3.min_realized, ptr %1937, align 8
  %1938 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 15
  store i32 %f5.v4.min_realized, ptr %1938, align 4
  %1939 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 16
  store i32 %f6.stride.1, ptr %1939, align 8
  %1940 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 17
  store i32 %f6.v3.extent_realized.s, ptr %1940, align 4
  %1941 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 18
  store i32 %f6.v3.min_realized, ptr %1941, align 8
  %1942 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 19
  store i32 %f6.v4.min_realized, ptr %1942, align 4
  %1943 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 20
  store i32 %f7.stride.1, ptr %1943, align 8
  %1944 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 21
  store i32 %f7.v3.extent_realized.s, ptr %1944, align 4
  %1945 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 22
  store i32 %f7.v3.min_realized, ptr %1945, align 8
  %1946 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 23
  store i32 %f7.v4.min_realized, ptr %1946, align 4
  %1947 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 24
  store i32 %f72.v3.extent_realized.s, ptr %1947, align 8
  %1948 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 25
  store i32 %f72.v3.min_realized, ptr %1948, align 4
  %1949 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 26
  store i32 %f72.v4.min_realized, ptr %1949, align 8
  %1950 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 27
  store i32 %f73.v3.extent_realized.s, ptr %1950, align 4
  %1951 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 28
  store i32 %f73.v3.min_realized, ptr %1951, align 8
  %1952 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 29
  store i32 %f73.v4.min_realized, ptr %1952, align 4
  %1953 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 30
  store i32 %f74.v3.extent_realized.s, ptr %1953, align 8
  %1954 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 31
  store i32 %f74.v3.min_realized, ptr %1954, align 4
  %1955 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 32
  store i32 %f74.v4.min_realized, ptr %1955, align 8
  %1956 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 33
  store i32 %f75.v3.extent_realized.s, ptr %1956, align 4
  %1957 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 34
  store i32 %f75.v3.min_realized, ptr %1957, align 8
  %1958 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 35
  store i32 %f75.v4.min_realized, ptr %1958, align 4
  %1959 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 36
  store i32 %f8.stride.2, ptr %1959, align 8
  %1960 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 37
  store i32 %f8.v3.extent_realized.s, ptr %1960, align 4
  %1961 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 38
  store i32 %f8.v3.min_realized, ptr %1961, align 8
  %1962 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 39
  store i32 %f8.v4.min_realized, ptr %1962, align 4
  %1963 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 40
  store i32 %input.extent.0, ptr %1963, align 8
  %1964 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 41
  %1965 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %1965, ptr %1964, align 4
  %1966 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 45
  store i32 %b108, ptr %1966, align 4
  %1967 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 46
  store i32 %input.stride.1, ptr %1967, align 8
  %1968 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 47
  store i32 %input.stride.2, ptr %1968, align 4
  %1969 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 48
  store i32 %levels, ptr %1969, align 8
  %1970 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 49
  store i32 %local_laplacian.extent.0, ptr %1970, align 4
  %1971 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 50
  store i32 %local_laplacian.extent.1, ptr %1971, align 8
  %1972 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 51
  store i32 %local_laplacian.extent.2, ptr %1972, align 4
  %1973 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 52
  store i32 %a286, ptr %1973, align 8
  %1974 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 53
  store i32 %b74, ptr %1974, align 4
  %1975 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 54
  store i32 %a114, ptr %1975, align 8
  %1976 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 55
  store i32 %b89, ptr %1976, align 4
  %1977 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 56
  store i32 %a108, ptr %1977, align 8
  %1978 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 57
  store i32 %local_laplacian.s0.v4.v264.epilogue, ptr %1978, align 4
  %1979 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 58
  store i32 %local_laplacian.s0.v4.v264.prologue, ptr %1979, align 8
  %1980 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 59
  store i32 %local_laplacian.stride.1, ptr %1980, align 4
  %1981 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 60
  store i32 %local_laplacian.stride.2, ptr %1981, align 8
  %1982 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 61
  store ptr %209, ptr %1982, align 8
  %1983 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 62
  store ptr null, ptr %1983, align 8
  %1984 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 63
  store ptr %1767, ptr %1984, align 8
  %1985 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 64
  store ptr null, ptr %1985, align 8
  %1986 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 65
  store ptr %338, ptr %1986, align 8
  %1987 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 66
  store ptr null, ptr %1987, align 8
  %1988 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 67
  store ptr %421, ptr %1988, align 8
  %1989 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 68
  store ptr null, ptr %1989, align 8
  %1990 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 69
  store ptr %500, ptr %1990, align 8
  %1991 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 70
  store ptr null, ptr %1991, align 8
  %1992 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 71
  store ptr %625, ptr %1992, align 8
  %1993 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 72
  store ptr null, ptr %1993, align 8
  %1994 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 73
  store ptr %734, ptr %1994, align 8
  %1995 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 74
  store ptr null, ptr %1995, align 8
  %1996 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 75
  store ptr %556, ptr %1996, align 8
  %1997 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 76
  store ptr null, ptr %1997, align 8
  %1998 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 77
  store ptr %681, ptr %1998, align 8
  %1999 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 78
  store ptr null, ptr %1999, align 8
  %2000 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 79
  store ptr %790, ptr %2000, align 8
  %2001 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 80
  store ptr null, ptr %2001, align 8
  %2002 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 81
  store ptr %876, ptr %2002, align 8
  %2003 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 82
  store ptr null, ptr %2003, align 8
  %2004 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 83
  store ptr %836, ptr %2004, align 8
  %2005 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 84
  store ptr null, ptr %2005, align 8
  %2006 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 85
  store ptr %input.host, ptr %2006, align 8
  %2007 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 86
  store ptr %input.buffer, ptr %2007, align 8
  %2008 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 87
  store ptr %local_laplacian.host, ptr %2008, align 8
  %2009 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 88
  store ptr %local_laplacian.buffer, ptr %2009, align 8
  %2010 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_local_laplacian.s0.v4.v264, i32 0, i32 %b776, ptr nonnull %0)
  %2011 = icmp eq i32 %2010, 0
  br i1 %2011, label %if.then.i292, label %call_destructor.exit235.sink.split, !prof !5

if.then.i292:                                     ; preds = %"produce local_laplacian"
  call void @halide_free(ptr null, ptr nonnull %209) #7
  call void @halide_free(ptr null, ptr nonnull %338) #7
  call void @halide_free(ptr null, ptr nonnull %421) #7
  call void @halide_free(ptr null, ptr nonnull %500) #7
  call void @halide_free(ptr null, ptr nonnull %556) #7
  call void @halide_free(ptr null, ptr nonnull %625) #7
  call void @halide_free(ptr null, ptr nonnull %681) #7
  call void @halide_free(ptr null, ptr nonnull %734) #7
  call void @halide_free(ptr null, ptr nonnull %790) #7
  call void @halide_free(ptr null, ptr nonnull %836) #7
  call void @halide_free(ptr null, ptr nonnull %876) #7
  call void @halide_free(ptr null, ptr nonnull %1767) #7
  br label %call_destructor.exit210.thread374
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f2.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f2.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
entry:
  %f2.s0.v3.max = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 1
  %1 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 2
  %f2.s0.v4.max = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 3
  %f2.s0.v4.min = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 4
  %f2.s0.v4.v4.epilogue = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 5
  %f2.s0.v4.v4.prologue = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 6
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 7
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 8
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 9
  %input.extent.0 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 11
  %13 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 13
  %b240 = load i32, ptr %13, align 4
  %14 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 14
  %f2.s0.v3.min = load i32, ptr %0, align 4
  %15 = load <2 x i32>, ptr %12, align 4
  %b248 = load i32, ptr %14, align 4
  %16 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 15
  %input.stride.1 = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 16
  %input.stride.2 = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 17
  %f2.host = load ptr, ptr %18, align 8
  %19 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 19
  %input.host = load ptr, ptr %19, align 8
  %20 = icmp sgt i32 %f2.s0.v4.v4.epilogue, %f2.s0.v4.v4
  %21 = icmp sle i32 %f2.s0.v4.v4.prologue, %f2.s0.v4.v4
  %22 = and i1 %20, %21
  br i1 %22, label %"for f2.s0.v4.v280.preheader", label %"for f2.s0.v4.v2809.preheader"

"for f2.s0.v4.v280.preheader":                    ; preds = %entry
  %23 = sext i32 %input.stride.2 to i64
  %24 = sext i32 %b248 to i64
  %25 = extractelement <2 x i32> %15, i64 0
  %26 = sext i32 %25 to i64
  %27 = sext i32 %f2.s0.v3.min to i64
  %28 = shl nsw i32 %f2.s0.v4.v4, 5
  %a202 = add nsw i32 %f2.s0.v4.min, %28
  %b204 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base = tail call i32 @llvm.smin.i32(i32 %b204, i32 %a202)
  %29 = sext i32 %f2.s0.v4.v280.base to i64
  %30 = sub nsw i64 %29, %10
  %31 = add nsw i64 %6, 1
  %32 = mul nsw i64 %30, %31
  %33 = sub nsw i64 %27, %8
  %34 = add i64 %33, %32
  %scevgep = getelementptr float, ptr %f2.host, i64 %34
  %35 = shl nsw i64 %6, 2
  %36 = add nsw i64 %35, 4
  %37 = add nsw i64 %26, %24
  %38 = sub nsw i64 0, %37
  %smax = tail call i64 @llvm.smax.i64(i64 %38, i64 -1)
  %39 = xor i64 %smax, -1
  %smax29 = tail call i64 @llvm.smax.i64(i64 %39, i64 %24)
  %40 = mul nsw i64 %smax29, %23
  %41 = mul i32 %input.stride.1, %b240
  %42 = extractelement <2 x i32> %15, i64 1
  %43 = add i32 %41, %42
  %44 = mul i32 %input.stride.2, %b248
  %45 = add i32 %43, %44
  %46 = sext i32 %45 to i64
  %47 = sub nsw i64 %40, %46
  %48 = mul i32 %input.stride.1, %f2.s0.v4.v280.base
  %49 = add i32 %48, %f2.s0.v3.min
  %smax37 = tail call i64 @llvm.smax.i64(i64 %38, i64 -2)
  %50 = xor i64 %smax37, -1
  %smax38 = tail call i64 @llvm.smax.i64(i64 %50, i64 %24)
  %51 = mul nsw i64 %smax38, %23
  %52 = sub nsw i64 %51, %46
  %smax44 = tail call i64 @llvm.smax.i64(i64 %38, i64 -3)
  %53 = xor i64 %smax44, -1
  %smax45 = tail call i64 @llvm.smax.i64(i64 %53, i64 %24)
  %54 = mul nsw i64 %smax45, %23
  %55 = sub nsw i64 %54, %46
  %56 = insertelement <2 x i32> poison, i32 %b248, i64 0
  %57 = insertelement <2 x i32> %56, i32 %f2.s0.v3.min, i64 1
  %58 = add nsw <2 x i32> %15, %57
  %59 = sub nsw <2 x i32> %15, %57
  %60 = shufflevector <2 x i32> %58, <2 x i32> %59, <4 x i32> <i32 0, i32 0, i32 0, i32 3>
  %61 = extractelement <2 x i32> %59, i64 1
  %62 = add nsw i32 %61, 7
  %a204 = ashr i32 %62, 3
  %63 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %64 = ashr i32 %63, 3
  %b205 = add nsw i32 %64, 1
  %65 = add nsw i32 %42, %input.extent.0
  %66 = sub nsw i32 %65, %f2.s0.v3.min
  %67 = ashr i32 %66, 3
  %a210 = add nsw i32 %67, -1
  %68 = add nsw i32 %63, -7
  %b212 = ashr i32 %68, 3
  %.not13 = icmp slt i32 %b212, %67
  %a209 = select i1 %.not13, i32 %b212, i32 %a210
  %a211 = add nsw i32 %f2.s0.v3.max, -7
  %b213 = add nsw i32 %65, -1
  %69 = tail call i32 @llvm.smin.i32(i32 %b213, i32 %a211)
  %70 = sub nsw i32 %69, %f2.s0.v3.min
  %b211 = ashr i32 %70, 3
  %a208 = tail call i32 @llvm.smin.i32(i32 %b211, i32 %a209)
  %71 = tail call i32 @llvm.smin.i32(i32 %64, i32 %a208)
  %b207 = add nsw i32 %71, 1
  %72 = insertelement <8 x i32> undef, i32 %b213, i64 0
  %b216 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %b215 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %73 = extractelement <2 x i32> %58, i64 0
  %a216 = add nsw i32 %73, -1
  %74 = icmp sgt <4 x i32> %60, <i32 0, i32 1, i32 2, i32 0>
  %75 = extractelement <4 x i1> %74, i64 3
  %76 = select i1 %75, i32 %a204, i32 0
  %.not12 = icmp slt i32 %64, %76
  %f2.s0.v3.v3.prologue = select i1 %.not12, i32 %b205, i32 %76
  %f2.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v3.v3.prologue, i32 %b207)
  %77 = icmp sgt i32 %f2.s0.v3.v3.prologue, 0
  %.not14 = icmp sgt i32 %f2.s0.v3.v3.prologue, %71
  %.not4 = icmp slt i32 %64, %f2.s0.v3.v3.epilogue
  %78 = extractelement <4 x i1> %74, i64 2
  %a215 = select i1 %78, i32 2, i32 %a216
  %79 = tail call i32 @llvm.smax.i32(i32 %a215, i32 %b248)
  %80 = mul nsw i32 %79, %input.stride.2
  %.scalar = sub i32 %80, %45
  %81 = insertelement <8 x i32> undef, i32 %.scalar, i64 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> poison, <8 x i32> zeroinitializer
  %83 = extractelement <4 x i1> %74, i64 1
  %84 = select i1 %83, i32 0, i32 %a216
  %85 = zext i1 %83 to i32
  %a217 = or i32 %84, %85
  %86 = tail call i32 @llvm.smax.i32(i32 %a217, i32 %b248)
  %87 = mul nsw i32 %86, %input.stride.2
  %.scalar30 = sub i32 %87, %45
  %88 = insertelement <8 x i32> undef, i32 %.scalar30, i64 0
  %89 = shufflevector <8 x i32> %88, <8 x i32> poison, <8 x i32> zeroinitializer
  %90 = extractelement <4 x i1> %74, i64 0
  %91 = select i1 %90, i32 0, i32 %a216
  %92 = tail call i32 @llvm.smax.i32(i32 %91, i32 %b248)
  %93 = mul nsw i32 %92, %input.stride.2
  %.scalar31 = sub i32 %93, %45
  %94 = insertelement <8 x i32> undef, i32 %.scalar31, i64 0
  %95 = shufflevector <8 x i32> %94, <8 x i32> poison, <8 x i32> zeroinitializer
  %96 = sub nsw i32 %f2.s0.v3.v3.epilogue, %f2.s0.v3.v3.prologue
  %97 = sext i32 %f2.s0.v3.v3.prologue to i64
  %98 = shl nsw i64 %97, 3
  %99 = shl i32 %f2.s0.v3.v3.prologue, 3
  %100 = sub nsw i32 %b205, %f2.s0.v3.v3.epilogue
  %101 = shl i32 %f2.s0.v3.v3.epilogue, 3
  %102 = add i32 %101, %f2.s0.v3.min
  br label %"for f2.s0.v4.v280"

"for f2.s0.v4.v2809.preheader":                   ; preds = %entry
  %103 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 10
  %input.extent.1 = load i32, ptr %103, align 4
  %104 = shl nsw i32 %f2.s0.v4.v4, 5
  %a236 = add nsw i32 %f2.s0.v4.min, %104
  %b238 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base8 = tail call i32 @llvm.smin.i32(i32 %b238, i32 %a236)
  %105 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %106 = lshr i32 %105, 3
  %107 = add nuw nsw i32 %106, 1
  %108 = icmp sgt i32 %105, -1
  %b239 = add nsw i32 %f2.s0.v3.max, -7
  %109 = add i32 %input.extent.1, -1
  %b241 = add i32 %109, %b240
  %110 = extractelement <2 x i32> %15, i64 1
  %111 = add nsw i32 %110, %input.extent.0
  %112 = add nsw i32 %111, -1
  %113 = insertelement <8 x i32> undef, i32 %112, i64 0
  %b243 = shufflevector <8 x i32> %113, <8 x i32> undef, <8 x i32> zeroinitializer
  %b242 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = mul nsw i32 %input.stride.2, %b248
  %115 = mul nsw i32 %input.stride.1, %b240
  %116 = add nsw i32 %115, %110
  %t1960.s = add nsw i32 %116, %114
  %117 = extractelement <2 x i32> %15, i64 0
  %118 = add nsw i32 %b248, %117
  %a243 = add nsw i32 %118, -1
  %.inv11 = icmp sgt i32 %118, 2
  %a242 = select i1 %.inv11, i32 2, i32 %a243
  %119 = tail call i32 @llvm.smax.i32(i32 %a242, i32 %b248)
  %120 = mul nsw i32 %119, %input.stride.2
  %.scalar35 = sub i32 %120, %t1960.s
  %121 = insertelement <8 x i32> undef, i32 %.scalar35, i64 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> poison, <8 x i32> zeroinitializer
  %123 = icmp sgt i32 %118, 1
  %124 = select i1 %123, i32 0, i32 %a243
  %125 = zext i1 %123 to i32
  %a244 = or i32 %124, %125
  %126 = tail call i32 @llvm.smax.i32(i32 %a244, i32 %b248)
  %127 = mul nsw i32 %126, %input.stride.2
  %.scalar36 = sub i32 %127, %t1960.s
  %128 = insertelement <8 x i32> undef, i32 %.scalar36, i64 0
  %129 = shufflevector <8 x i32> %128, <8 x i32> poison, <8 x i32> zeroinitializer
  %.inv = icmp sgt i32 %118, 0
  %130 = select i1 %.inv, i32 0, i32 %a243
  %131 = tail call i32 @llvm.smax.i32(i32 %130, i32 %b248)
  %132 = mul nsw i32 %131, %input.stride.2
  %.scalar37 = sub i32 %132, %t1960.s
  %133 = insertelement <8 x i32> undef, i32 %.scalar37, i64 0
  %134 = shufflevector <8 x i32> %133, <8 x i32> poison, <8 x i32> zeroinitializer
  %135 = add nsw i64 %6, 1
  %136 = sext i32 %f2.s0.v4.v280.base8 to i64
  %137 = sub nsw i64 %136, %10
  br i1 %108, label %"for f2.s0.v4.v2809.us", label %destructor_block, !prof !5

"for f2.s0.v4.v2809.us":                          ; preds = %"for f2.s0.v4.v2809.preheader", %"end for f2.s0.v3.v313.loopexit.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f2.s0.v3.v313.loopexit.us" ], [ 0, %"for f2.s0.v4.v2809.preheader" ]
  %138 = trunc i64 %indvars.iv to i32
  %a239.us = add nsw i32 %f2.s0.v4.v280.base8, %138
  %a238.us = tail call i32 @llvm.smin.i32(i32 %b241, i32 %a239.us)
  %139 = tail call i32 @llvm.smax.i32(i32 %a238.us, i32 %b240)
  %140 = mul nsw i32 %139, %input.stride.1
  %141 = insertelement <8 x i32> undef, i32 %140, i64 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = add nsw i64 %137, %indvars.iv
  %144 = mul nsw i64 %143, %135
  %145 = sub i64 %144, %8
  br label %"for f2.s0.v3.v312.us"

"for f2.s0.v3.v312.us":                           ; preds = %"for f2.s0.v4.v2809.us", %"for f2.s0.v3.v312.us"
  %lsr.iv57.us = phi i32 [ %lsr.iv.next58.us, %"for f2.s0.v3.v312.us" ], [ %f2.s0.v3.min, %"for f2.s0.v4.v2809.us" ]
  %lsr.iv55.us = phi i32 [ %lsr.iv.next56.us, %"for f2.s0.v3.v312.us" ], [ %107, %"for f2.s0.v4.v2809.us" ]
  %f2.s0.v3.v283.base15.us = tail call i32 @llvm.smin.i32(i32 %b239, i32 %lsr.iv57.us)
  %146 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base15.us, i64 0
  %147 = shufflevector <8 x i32> %146, <8 x i32> undef, <8 x i32> zeroinitializer
  %a241.us = add nsw <8 x i32> %147, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a240.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b243, <8 x i32> %a241.us)
  %148 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a240.us, <8 x i32> %b242)
  %t1958.us = add nsw <8 x i32> %148, %142
  %149 = add <8 x i32> %122, %t1958.us
  %150 = shufflevector <8 x i32> %149, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = sext <4 x i32> %150 to <4 x i64>
  %152 = extractelement <4 x i64> %151, i64 0
  %153 = getelementptr inbounds i16, ptr %input.host, i64 %152
  %154 = load i16, ptr %153, align 2, !tbaa !40
  %155 = insertelement <8 x i16> undef, i16 %154, i64 0
  %156 = extractelement <4 x i64> %151, i64 1
  %157 = getelementptr inbounds i16, ptr %input.host, i64 %156
  %158 = load i16, ptr %157, align 2, !tbaa !40
  %159 = insertelement <8 x i16> %155, i16 %158, i64 1
  %160 = extractelement <4 x i64> %151, i64 2
  %161 = getelementptr inbounds i16, ptr %input.host, i64 %160
  %162 = load i16, ptr %161, align 2, !tbaa !40
  %163 = insertelement <8 x i16> %159, i16 %162, i64 2
  %164 = extractelement <4 x i64> %151, i64 3
  %165 = getelementptr inbounds i16, ptr %input.host, i64 %164
  %166 = load i16, ptr %165, align 2, !tbaa !40
  %167 = insertelement <8 x i16> %163, i16 %166, i64 3
  %168 = shufflevector <8 x i32> %149, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %169 = sext <4 x i32> %168 to <4 x i64>
  %170 = extractelement <4 x i64> %169, i64 0
  %171 = getelementptr inbounds i16, ptr %input.host, i64 %170
  %172 = load i16, ptr %171, align 2, !tbaa !40
  %173 = insertelement <8 x i16> %167, i16 %172, i64 4
  %174 = extractelement <4 x i64> %169, i64 1
  %175 = getelementptr inbounds i16, ptr %input.host, i64 %174
  %176 = load i16, ptr %175, align 2, !tbaa !40
  %177 = insertelement <8 x i16> %173, i16 %176, i64 5
  %178 = extractelement <4 x i64> %169, i64 2
  %179 = getelementptr inbounds i16, ptr %input.host, i64 %178
  %180 = load i16, ptr %179, align 2, !tbaa !40
  %181 = insertelement <8 x i16> %177, i16 %180, i64 6
  %182 = extractelement <4 x i64> %169, i64 3
  %183 = getelementptr inbounds i16, ptr %input.host, i64 %182
  %184 = load i16, ptr %183, align 2, !tbaa !40
  %185 = insertelement <8 x i16> %181, i16 %184, i64 7
  %186 = uitofp <8 x i16> %185 to <8 x float>
  %187 = fmul <8 x float> %186, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %188 = add <8 x i32> %129, %t1958.us
  %189 = shufflevector <8 x i32> %188, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %190 = sext <4 x i32> %189 to <4 x i64>
  %191 = extractelement <4 x i64> %190, i64 0
  %192 = getelementptr inbounds i16, ptr %input.host, i64 %191
  %193 = load i16, ptr %192, align 2, !tbaa !40
  %194 = insertelement <8 x i16> undef, i16 %193, i64 0
  %195 = extractelement <4 x i64> %190, i64 1
  %196 = getelementptr inbounds i16, ptr %input.host, i64 %195
  %197 = load i16, ptr %196, align 2, !tbaa !40
  %198 = insertelement <8 x i16> %194, i16 %197, i64 1
  %199 = extractelement <4 x i64> %190, i64 2
  %200 = getelementptr inbounds i16, ptr %input.host, i64 %199
  %201 = load i16, ptr %200, align 2, !tbaa !40
  %202 = insertelement <8 x i16> %198, i16 %201, i64 2
  %203 = extractelement <4 x i64> %190, i64 3
  %204 = getelementptr inbounds i16, ptr %input.host, i64 %203
  %205 = load i16, ptr %204, align 2, !tbaa !40
  %206 = insertelement <8 x i16> %202, i16 %205, i64 3
  %207 = shufflevector <8 x i32> %188, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %208 = sext <4 x i32> %207 to <4 x i64>
  %209 = extractelement <4 x i64> %208, i64 0
  %210 = getelementptr inbounds i16, ptr %input.host, i64 %209
  %211 = load i16, ptr %210, align 2, !tbaa !40
  %212 = insertelement <8 x i16> %206, i16 %211, i64 4
  %213 = extractelement <4 x i64> %208, i64 1
  %214 = getelementptr inbounds i16, ptr %input.host, i64 %213
  %215 = load i16, ptr %214, align 2, !tbaa !40
  %216 = insertelement <8 x i16> %212, i16 %215, i64 5
  %217 = extractelement <4 x i64> %208, i64 2
  %218 = getelementptr inbounds i16, ptr %input.host, i64 %217
  %219 = load i16, ptr %218, align 2, !tbaa !40
  %220 = insertelement <8 x i16> %216, i16 %219, i64 6
  %221 = extractelement <4 x i64> %208, i64 3
  %222 = getelementptr inbounds i16, ptr %input.host, i64 %221
  %223 = load i16, ptr %222, align 2, !tbaa !40
  %224 = insertelement <8 x i16> %220, i16 %223, i64 7
  %225 = uitofp <8 x i16> %224 to <8 x float>
  %226 = fmul <8 x float> %225, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %227 = add <8 x i32> %134, %t1958.us
  %228 = shufflevector <8 x i32> %227, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %229 = sext <4 x i32> %228 to <4 x i64>
  %230 = extractelement <4 x i64> %229, i64 0
  %231 = getelementptr inbounds i16, ptr %input.host, i64 %230
  %232 = load i16, ptr %231, align 2, !tbaa !40
  %233 = insertelement <8 x i16> undef, i16 %232, i64 0
  %234 = extractelement <4 x i64> %229, i64 1
  %235 = getelementptr inbounds i16, ptr %input.host, i64 %234
  %236 = load i16, ptr %235, align 2, !tbaa !40
  %237 = insertelement <8 x i16> %233, i16 %236, i64 1
  %238 = extractelement <4 x i64> %229, i64 2
  %239 = getelementptr inbounds i16, ptr %input.host, i64 %238
  %240 = load i16, ptr %239, align 2, !tbaa !40
  %241 = insertelement <8 x i16> %237, i16 %240, i64 2
  %242 = extractelement <4 x i64> %229, i64 3
  %243 = getelementptr inbounds i16, ptr %input.host, i64 %242
  %244 = load i16, ptr %243, align 2, !tbaa !40
  %245 = insertelement <8 x i16> %241, i16 %244, i64 3
  %246 = shufflevector <8 x i32> %227, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %247 = sext <4 x i32> %246 to <4 x i64>
  %248 = extractelement <4 x i64> %247, i64 0
  %249 = getelementptr inbounds i16, ptr %input.host, i64 %248
  %250 = load i16, ptr %249, align 2, !tbaa !40
  %251 = insertelement <8 x i16> %245, i16 %250, i64 4
  %252 = extractelement <4 x i64> %247, i64 1
  %253 = getelementptr inbounds i16, ptr %input.host, i64 %252
  %254 = load i16, ptr %253, align 2, !tbaa !40
  %255 = insertelement <8 x i16> %251, i16 %254, i64 5
  %256 = extractelement <4 x i64> %247, i64 2
  %257 = getelementptr inbounds i16, ptr %input.host, i64 %256
  %258 = load i16, ptr %257, align 2, !tbaa !40
  %259 = insertelement <8 x i16> %255, i16 %258, i64 6
  %260 = extractelement <4 x i64> %247, i64 3
  %261 = getelementptr inbounds i16, ptr %input.host, i64 %260
  %262 = load i16, ptr %261, align 2, !tbaa !40
  %263 = insertelement <8 x i16> %259, i16 %262, i64 7
  %264 = uitofp <8 x i16> %263 to <8 x float>
  %265 = fmul <8 x float> %264, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %266 = fadd <8 x float> %226, %265
  %267 = fadd <8 x float> %187, %266
  %268 = sext i32 %f2.s0.v3.v283.base15.us to i64
  %269 = add i64 %145, %268
  %270 = getelementptr inbounds float, ptr %f2.host, i64 %269
  store <8 x float> %267, ptr %270, align 4, !tbaa !42
  %lsr.iv.next56.us = add nsw i32 %lsr.iv55.us, -1
  %lsr.iv.next58.us = add i32 %lsr.iv57.us, 8
  %.not3.us = icmp eq i32 %lsr.iv.next56.us, 0
  br i1 %.not3.us, label %"end for f2.s0.v3.v313.loopexit.us", label %"for f2.s0.v3.v312.us"

"end for f2.s0.v3.v313.loopexit.us":              ; preds = %"for f2.s0.v3.v312.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not.us = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not.us, label %destructor_block, label %"for f2.s0.v4.v2809.us"

"for f2.s0.v4.v280":                              ; preds = %"end for f2.s0.v3.v35", %"for f2.s0.v4.v280.preheader"
  %indvars.iv27 = phi i64 [ %indvars.iv.next28, %"end for f2.s0.v3.v35" ], [ 0, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv30 = phi i32 [ %lsr.iv.next31, %"end for f2.s0.v3.v35" ], [ %49, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv20 = phi ptr [ %scevgep22, %"end for f2.s0.v3.v35" ], [ %scevgep, %"for f2.s0.v4.v280.preheader" ]
  br i1 %77, label %"for f2.s0.v3.v3.preheader", label %"end for f2.s0.v3.v3", !prof !5

"for f2.s0.v3.v3.preheader":                      ; preds = %"for f2.s0.v4.v280"
  %271 = trunc i64 %indvars.iv27 to i32
  %272 = add nsw i32 %f2.s0.v4.v280.base, %271
  %273 = mul nsw i32 %272, %input.stride.1
  %274 = insertelement <8 x i32> undef, i32 %273, i64 0
  %275 = shufflevector <8 x i32> %274, <8 x i32> undef, <8 x i32> zeroinitializer
  %276 = add nsw i64 %30, %indvars.iv27
  %277 = mul nsw i64 %276, %31
  %278 = sub i64 %277, %8
  br label %"for f2.s0.v3.v3"

"for f2.s0.v3.v3":                                ; preds = %"for f2.s0.v3.v3.preheader", %"for f2.s0.v3.v3"
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.min, %"for f2.s0.v3.v3.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.v3.prologue, %"for f2.s0.v3.v3.preheader" ]
  %f2.s0.v3.v283.base = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv16)
  %279 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base, i64 0
  %280 = shufflevector <8 x i32> %279, <8 x i32> undef, <8 x i32> zeroinitializer
  %a214 = add nsw <8 x i32> %280, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a213 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a214)
  %281 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a213, <8 x i32> %b215)
  %t1949 = add nsw <8 x i32> %281, %275
  %282 = add <8 x i32> %82, %t1949
  %283 = shufflevector <8 x i32> %282, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %284 = sext <4 x i32> %283 to <4 x i64>
  %285 = extractelement <4 x i64> %284, i64 0
  %286 = getelementptr inbounds i16, ptr %input.host, i64 %285
  %287 = load i16, ptr %286, align 2, !tbaa !40
  %288 = insertelement <8 x i16> undef, i16 %287, i64 0
  %289 = extractelement <4 x i64> %284, i64 1
  %290 = getelementptr inbounds i16, ptr %input.host, i64 %289
  %291 = load i16, ptr %290, align 2, !tbaa !40
  %292 = insertelement <8 x i16> %288, i16 %291, i64 1
  %293 = extractelement <4 x i64> %284, i64 2
  %294 = getelementptr inbounds i16, ptr %input.host, i64 %293
  %295 = load i16, ptr %294, align 2, !tbaa !40
  %296 = insertelement <8 x i16> %292, i16 %295, i64 2
  %297 = extractelement <4 x i64> %284, i64 3
  %298 = getelementptr inbounds i16, ptr %input.host, i64 %297
  %299 = load i16, ptr %298, align 2, !tbaa !40
  %300 = insertelement <8 x i16> %296, i16 %299, i64 3
  %301 = shufflevector <8 x i32> %282, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %302 = sext <4 x i32> %301 to <4 x i64>
  %303 = extractelement <4 x i64> %302, i64 0
  %304 = getelementptr inbounds i16, ptr %input.host, i64 %303
  %305 = load i16, ptr %304, align 2, !tbaa !40
  %306 = insertelement <8 x i16> %300, i16 %305, i64 4
  %307 = extractelement <4 x i64> %302, i64 1
  %308 = getelementptr inbounds i16, ptr %input.host, i64 %307
  %309 = load i16, ptr %308, align 2, !tbaa !40
  %310 = insertelement <8 x i16> %306, i16 %309, i64 5
  %311 = extractelement <4 x i64> %302, i64 2
  %312 = getelementptr inbounds i16, ptr %input.host, i64 %311
  %313 = load i16, ptr %312, align 2, !tbaa !40
  %314 = insertelement <8 x i16> %310, i16 %313, i64 6
  %315 = extractelement <4 x i64> %302, i64 3
  %316 = getelementptr inbounds i16, ptr %input.host, i64 %315
  %317 = load i16, ptr %316, align 2, !tbaa !40
  %318 = insertelement <8 x i16> %314, i16 %317, i64 7
  %319 = uitofp <8 x i16> %318 to <8 x float>
  %320 = fmul <8 x float> %319, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %321 = add <8 x i32> %89, %t1949
  %322 = shufflevector <8 x i32> %321, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %323 = sext <4 x i32> %322 to <4 x i64>
  %324 = extractelement <4 x i64> %323, i64 0
  %325 = getelementptr inbounds i16, ptr %input.host, i64 %324
  %326 = load i16, ptr %325, align 2, !tbaa !40
  %327 = insertelement <8 x i16> undef, i16 %326, i64 0
  %328 = extractelement <4 x i64> %323, i64 1
  %329 = getelementptr inbounds i16, ptr %input.host, i64 %328
  %330 = load i16, ptr %329, align 2, !tbaa !40
  %331 = insertelement <8 x i16> %327, i16 %330, i64 1
  %332 = extractelement <4 x i64> %323, i64 2
  %333 = getelementptr inbounds i16, ptr %input.host, i64 %332
  %334 = load i16, ptr %333, align 2, !tbaa !40
  %335 = insertelement <8 x i16> %331, i16 %334, i64 2
  %336 = extractelement <4 x i64> %323, i64 3
  %337 = getelementptr inbounds i16, ptr %input.host, i64 %336
  %338 = load i16, ptr %337, align 2, !tbaa !40
  %339 = insertelement <8 x i16> %335, i16 %338, i64 3
  %340 = shufflevector <8 x i32> %321, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %341 = sext <4 x i32> %340 to <4 x i64>
  %342 = extractelement <4 x i64> %341, i64 0
  %343 = getelementptr inbounds i16, ptr %input.host, i64 %342
  %344 = load i16, ptr %343, align 2, !tbaa !40
  %345 = insertelement <8 x i16> %339, i16 %344, i64 4
  %346 = extractelement <4 x i64> %341, i64 1
  %347 = getelementptr inbounds i16, ptr %input.host, i64 %346
  %348 = load i16, ptr %347, align 2, !tbaa !40
  %349 = insertelement <8 x i16> %345, i16 %348, i64 5
  %350 = extractelement <4 x i64> %341, i64 2
  %351 = getelementptr inbounds i16, ptr %input.host, i64 %350
  %352 = load i16, ptr %351, align 2, !tbaa !40
  %353 = insertelement <8 x i16> %349, i16 %352, i64 6
  %354 = extractelement <4 x i64> %341, i64 3
  %355 = getelementptr inbounds i16, ptr %input.host, i64 %354
  %356 = load i16, ptr %355, align 2, !tbaa !40
  %357 = insertelement <8 x i16> %353, i16 %356, i64 7
  %358 = uitofp <8 x i16> %357 to <8 x float>
  %359 = fmul <8 x float> %358, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %360 = add <8 x i32> %95, %t1949
  %361 = shufflevector <8 x i32> %360, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %362 = sext <4 x i32> %361 to <4 x i64>
  %363 = extractelement <4 x i64> %362, i64 0
  %364 = getelementptr inbounds i16, ptr %input.host, i64 %363
  %365 = load i16, ptr %364, align 2, !tbaa !40
  %366 = insertelement <8 x i16> undef, i16 %365, i64 0
  %367 = extractelement <4 x i64> %362, i64 1
  %368 = getelementptr inbounds i16, ptr %input.host, i64 %367
  %369 = load i16, ptr %368, align 2, !tbaa !40
  %370 = insertelement <8 x i16> %366, i16 %369, i64 1
  %371 = extractelement <4 x i64> %362, i64 2
  %372 = getelementptr inbounds i16, ptr %input.host, i64 %371
  %373 = load i16, ptr %372, align 2, !tbaa !40
  %374 = insertelement <8 x i16> %370, i16 %373, i64 2
  %375 = extractelement <4 x i64> %362, i64 3
  %376 = getelementptr inbounds i16, ptr %input.host, i64 %375
  %377 = load i16, ptr %376, align 2, !tbaa !40
  %378 = insertelement <8 x i16> %374, i16 %377, i64 3
  %379 = shufflevector <8 x i32> %360, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %380 = sext <4 x i32> %379 to <4 x i64>
  %381 = extractelement <4 x i64> %380, i64 0
  %382 = getelementptr inbounds i16, ptr %input.host, i64 %381
  %383 = load i16, ptr %382, align 2, !tbaa !40
  %384 = insertelement <8 x i16> %378, i16 %383, i64 4
  %385 = extractelement <4 x i64> %380, i64 1
  %386 = getelementptr inbounds i16, ptr %input.host, i64 %385
  %387 = load i16, ptr %386, align 2, !tbaa !40
  %388 = insertelement <8 x i16> %384, i16 %387, i64 5
  %389 = extractelement <4 x i64> %380, i64 2
  %390 = getelementptr inbounds i16, ptr %input.host, i64 %389
  %391 = load i16, ptr %390, align 2, !tbaa !40
  %392 = insertelement <8 x i16> %388, i16 %391, i64 6
  %393 = extractelement <4 x i64> %380, i64 3
  %394 = getelementptr inbounds i16, ptr %input.host, i64 %393
  %395 = load i16, ptr %394, align 2, !tbaa !40
  %396 = insertelement <8 x i16> %392, i16 %395, i64 7
  %397 = uitofp <8 x i16> %396 to <8 x float>
  %398 = fmul <8 x float> %397, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %399 = fadd <8 x float> %359, %398
  %400 = fadd <8 x float> %320, %399
  %401 = sext i32 %f2.s0.v3.v283.base to i64
  %402 = add i64 %278, %401
  %403 = getelementptr inbounds float, ptr %f2.host, i64 %402
  store <8 x float> %400, ptr %403, align 4, !tbaa !42
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %lsr.iv.next17 = add i32 %lsr.iv16, 8
  %.not10 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not10, label %"end for f2.s0.v3.v3", label %"for f2.s0.v3.v3"

"end for f2.s0.v3.v3":                            ; preds = %"for f2.s0.v3.v3", %"for f2.s0.v4.v280"
  br i1 %.not14, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31.preheader", !prof !4

"for f2.s0.v3.v31.preheader":                     ; preds = %"end for f2.s0.v3.v3"
  %scevgep23 = getelementptr float, ptr %lsr.iv20, i64 %98
  %404 = add i32 %lsr.iv30, %99
  %405 = sext i32 %404 to i64
  %406 = add nsw i64 %47, %405
  %scevgep32 = getelementptr i16, ptr %input.host, i64 %406
  %407 = add nsw i64 %52, %405
  %scevgep39 = getelementptr i16, ptr %input.host, i64 %407
  %408 = add nsw i64 %55, %405
  %scevgep46 = getelementptr i16, ptr %input.host, i64 %408
  br label %"for f2.s0.v3.v31"

"for f2.s0.v3.v31":                               ; preds = %"for f2.s0.v3.v31", %"for f2.s0.v3.v31.preheader"
  %lsr.iv25 = phi i64 [ 0, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next26, %"for f2.s0.v3.v31" ]
  %lsr.iv18 = phi i32 [ %96, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next19, %"for f2.s0.v3.v31" ]
  %uglygep49 = getelementptr i8, ptr %scevgep46, i64 %lsr.iv25
  %409 = load <8 x i16>, ptr %uglygep49, align 2, !tbaa !40
  %410 = uitofp <8 x i16> %409 to <8 x float>
  %411 = fmul <8 x float> %410, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %uglygep42 = getelementptr i8, ptr %scevgep39, i64 %lsr.iv25
  %412 = load <8 x i16>, ptr %uglygep42, align 2, !tbaa !40
  %413 = uitofp <8 x i16> %412 to <8 x float>
  %414 = fmul <8 x float> %413, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %uglygep35 = getelementptr i8, ptr %scevgep32, i64 %lsr.iv25
  %415 = load <8 x i16>, ptr %uglygep35, align 2, !tbaa !40
  %416 = uitofp <8 x i16> %415 to <8 x float>
  %417 = fmul <8 x float> %416, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %418 = fadd <8 x float> %414, %417
  %419 = fadd <8 x float> %411, %418
  %420 = shl nuw i64 %lsr.iv25, 1
  %uglygep = getelementptr i8, ptr %scevgep23, i64 %420
  store <8 x float> %419, ptr %uglygep, align 4, !tbaa !42
  %lsr.iv.next19 = add i32 %lsr.iv18, -1
  %lsr.iv.next26 = add nuw nsw i64 %lsr.iv25, 16
  %.not8 = icmp eq i32 %lsr.iv.next19, 0
  br i1 %.not8, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31"

"end for f2.s0.v3.v32":                           ; preds = %"for f2.s0.v3.v31", %"end for f2.s0.v3.v3"
  br i1 %.not4, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34.preheader", !prof !4

"for f2.s0.v3.v34.preheader":                     ; preds = %"end for f2.s0.v3.v32"
  %421 = trunc i64 %indvars.iv27 to i32
  %422 = add nsw i32 %f2.s0.v4.v280.base, %421
  %423 = mul nsw i32 %422, %input.stride.1
  %424 = insertelement <8 x i32> undef, i32 %423, i64 0
  %425 = shufflevector <8 x i32> %424, <8 x i32> undef, <8 x i32> zeroinitializer
  %426 = add nsw i64 %30, %indvars.iv27
  %427 = mul nsw i64 %426, %31
  %428 = sub i64 %427, %8
  br label %"for f2.s0.v3.v34"

"for f2.s0.v3.v34":                               ; preds = %"for f2.s0.v3.v34", %"for f2.s0.v3.v34.preheader"
  %lsr.iv53 = phi i32 [ %102, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next54, %"for f2.s0.v3.v34" ]
  %lsr.iv51 = phi i32 [ %100, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next52, %"for f2.s0.v3.v34" ]
  %f2.s0.v3.v283.base7 = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv53)
  %429 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base7, i64 0
  %430 = shufflevector <8 x i32> %429, <8 x i32> undef, <8 x i32> zeroinitializer
  %a229 = add nsw <8 x i32> %430, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a228 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a229)
  %431 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a228, <8 x i32> %b215)
  %t1955 = add nsw <8 x i32> %431, %425
  %432 = add <8 x i32> %82, %t1955
  %433 = shufflevector <8 x i32> %432, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %434 = sext <4 x i32> %433 to <4 x i64>
  %435 = extractelement <4 x i64> %434, i64 0
  %436 = getelementptr inbounds i16, ptr %input.host, i64 %435
  %437 = load i16, ptr %436, align 2, !tbaa !40
  %438 = insertelement <8 x i16> undef, i16 %437, i64 0
  %439 = extractelement <4 x i64> %434, i64 1
  %440 = getelementptr inbounds i16, ptr %input.host, i64 %439
  %441 = load i16, ptr %440, align 2, !tbaa !40
  %442 = insertelement <8 x i16> %438, i16 %441, i64 1
  %443 = extractelement <4 x i64> %434, i64 2
  %444 = getelementptr inbounds i16, ptr %input.host, i64 %443
  %445 = load i16, ptr %444, align 2, !tbaa !40
  %446 = insertelement <8 x i16> %442, i16 %445, i64 2
  %447 = extractelement <4 x i64> %434, i64 3
  %448 = getelementptr inbounds i16, ptr %input.host, i64 %447
  %449 = load i16, ptr %448, align 2, !tbaa !40
  %450 = insertelement <8 x i16> %446, i16 %449, i64 3
  %451 = shufflevector <8 x i32> %432, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %452 = sext <4 x i32> %451 to <4 x i64>
  %453 = extractelement <4 x i64> %452, i64 0
  %454 = getelementptr inbounds i16, ptr %input.host, i64 %453
  %455 = load i16, ptr %454, align 2, !tbaa !40
  %456 = insertelement <8 x i16> %450, i16 %455, i64 4
  %457 = extractelement <4 x i64> %452, i64 1
  %458 = getelementptr inbounds i16, ptr %input.host, i64 %457
  %459 = load i16, ptr %458, align 2, !tbaa !40
  %460 = insertelement <8 x i16> %456, i16 %459, i64 5
  %461 = extractelement <4 x i64> %452, i64 2
  %462 = getelementptr inbounds i16, ptr %input.host, i64 %461
  %463 = load i16, ptr %462, align 2, !tbaa !40
  %464 = insertelement <8 x i16> %460, i16 %463, i64 6
  %465 = extractelement <4 x i64> %452, i64 3
  %466 = getelementptr inbounds i16, ptr %input.host, i64 %465
  %467 = load i16, ptr %466, align 2, !tbaa !40
  %468 = insertelement <8 x i16> %464, i16 %467, i64 7
  %469 = uitofp <8 x i16> %468 to <8 x float>
  %470 = fmul <8 x float> %469, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %471 = add <8 x i32> %89, %t1955
  %472 = shufflevector <8 x i32> %471, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %473 = sext <4 x i32> %472 to <4 x i64>
  %474 = extractelement <4 x i64> %473, i64 0
  %475 = getelementptr inbounds i16, ptr %input.host, i64 %474
  %476 = load i16, ptr %475, align 2, !tbaa !40
  %477 = insertelement <8 x i16> undef, i16 %476, i64 0
  %478 = extractelement <4 x i64> %473, i64 1
  %479 = getelementptr inbounds i16, ptr %input.host, i64 %478
  %480 = load i16, ptr %479, align 2, !tbaa !40
  %481 = insertelement <8 x i16> %477, i16 %480, i64 1
  %482 = extractelement <4 x i64> %473, i64 2
  %483 = getelementptr inbounds i16, ptr %input.host, i64 %482
  %484 = load i16, ptr %483, align 2, !tbaa !40
  %485 = insertelement <8 x i16> %481, i16 %484, i64 2
  %486 = extractelement <4 x i64> %473, i64 3
  %487 = getelementptr inbounds i16, ptr %input.host, i64 %486
  %488 = load i16, ptr %487, align 2, !tbaa !40
  %489 = insertelement <8 x i16> %485, i16 %488, i64 3
  %490 = shufflevector <8 x i32> %471, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %491 = sext <4 x i32> %490 to <4 x i64>
  %492 = extractelement <4 x i64> %491, i64 0
  %493 = getelementptr inbounds i16, ptr %input.host, i64 %492
  %494 = load i16, ptr %493, align 2, !tbaa !40
  %495 = insertelement <8 x i16> %489, i16 %494, i64 4
  %496 = extractelement <4 x i64> %491, i64 1
  %497 = getelementptr inbounds i16, ptr %input.host, i64 %496
  %498 = load i16, ptr %497, align 2, !tbaa !40
  %499 = insertelement <8 x i16> %495, i16 %498, i64 5
  %500 = extractelement <4 x i64> %491, i64 2
  %501 = getelementptr inbounds i16, ptr %input.host, i64 %500
  %502 = load i16, ptr %501, align 2, !tbaa !40
  %503 = insertelement <8 x i16> %499, i16 %502, i64 6
  %504 = extractelement <4 x i64> %491, i64 3
  %505 = getelementptr inbounds i16, ptr %input.host, i64 %504
  %506 = load i16, ptr %505, align 2, !tbaa !40
  %507 = insertelement <8 x i16> %503, i16 %506, i64 7
  %508 = uitofp <8 x i16> %507 to <8 x float>
  %509 = fmul <8 x float> %508, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %510 = add <8 x i32> %95, %t1955
  %511 = shufflevector <8 x i32> %510, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %512 = sext <4 x i32> %511 to <4 x i64>
  %513 = extractelement <4 x i64> %512, i64 0
  %514 = getelementptr inbounds i16, ptr %input.host, i64 %513
  %515 = load i16, ptr %514, align 2, !tbaa !40
  %516 = insertelement <8 x i16> undef, i16 %515, i64 0
  %517 = extractelement <4 x i64> %512, i64 1
  %518 = getelementptr inbounds i16, ptr %input.host, i64 %517
  %519 = load i16, ptr %518, align 2, !tbaa !40
  %520 = insertelement <8 x i16> %516, i16 %519, i64 1
  %521 = extractelement <4 x i64> %512, i64 2
  %522 = getelementptr inbounds i16, ptr %input.host, i64 %521
  %523 = load i16, ptr %522, align 2, !tbaa !40
  %524 = insertelement <8 x i16> %520, i16 %523, i64 2
  %525 = extractelement <4 x i64> %512, i64 3
  %526 = getelementptr inbounds i16, ptr %input.host, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !40
  %528 = insertelement <8 x i16> %524, i16 %527, i64 3
  %529 = shufflevector <8 x i32> %510, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %530 = sext <4 x i32> %529 to <4 x i64>
  %531 = extractelement <4 x i64> %530, i64 0
  %532 = getelementptr inbounds i16, ptr %input.host, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !40
  %534 = insertelement <8 x i16> %528, i16 %533, i64 4
  %535 = extractelement <4 x i64> %530, i64 1
  %536 = getelementptr inbounds i16, ptr %input.host, i64 %535
  %537 = load i16, ptr %536, align 2, !tbaa !40
  %538 = insertelement <8 x i16> %534, i16 %537, i64 5
  %539 = extractelement <4 x i64> %530, i64 2
  %540 = getelementptr inbounds i16, ptr %input.host, i64 %539
  %541 = load i16, ptr %540, align 2, !tbaa !40
  %542 = insertelement <8 x i16> %538, i16 %541, i64 6
  %543 = extractelement <4 x i64> %530, i64 3
  %544 = getelementptr inbounds i16, ptr %input.host, i64 %543
  %545 = load i16, ptr %544, align 2, !tbaa !40
  %546 = insertelement <8 x i16> %542, i16 %545, i64 7
  %547 = uitofp <8 x i16> %546 to <8 x float>
  %548 = fmul <8 x float> %547, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %549 = fadd <8 x float> %509, %548
  %550 = fadd <8 x float> %470, %549
  %551 = sext i32 %f2.s0.v3.v283.base7 to i64
  %552 = add i64 %428, %551
  %553 = getelementptr inbounds float, ptr %f2.host, i64 %552
  store <8 x float> %550, ptr %553, align 4, !tbaa !42
  %lsr.iv.next52 = add i32 %lsr.iv51, -1
  %lsr.iv.next54 = add i32 %lsr.iv53, 8
  %.not7 = icmp eq i32 %lsr.iv.next52, 0
  br i1 %.not7, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34"

"end for f2.s0.v3.v35":                           ; preds = %"for f2.s0.v3.v34", %"end for f2.s0.v3.v32"
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %scevgep22 = getelementptr i1, ptr %lsr.iv20, i64 %36
  %lsr.iv.next31 = add i32 %lsr.iv30, %input.stride.1
  %.not5 = icmp eq i64 %indvars.iv.next28, 32
  br i1 %.not5, label %destructor_block, label %"for f2.s0.v4.v280"

destructor_block:                                 ; preds = %"end for f2.s0.v3.v313.loopexit.us", %"end for f2.s0.v3.v35", %"for f2.s0.v4.v2809.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f4.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f4.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f4.s0.v4.v296.preheader":
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 2
  %a304 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 3
  %f2.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 4
  %f2.v3.min_realized = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 5
  %f2.v4.min_realized = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 6
  %f4.s0.v3.max = load i32, ptr %5, align 4
  %6 = sext i32 %f4.s0.v3.max to i64
  %7 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 7
  %f4.s0.v3.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 8
  %f4.s0.v4.max = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 9
  %f4.s0.v4.min.s = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 10
  %f4.s0.v6.loop_extent.s = load i32, ptr %10, align 4
  %11 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 11
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = sext i32 %f4.stride.1 to i64
  %13 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 12
  %f4.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f4.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 13
  %f4.v3.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f4.v3.min_realized to i64
  %17 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 14
  %f4.v4.min_realized = load i32, ptr %17, align 4
  %18 = sext i32 %f4.v4.min_realized to i64
  %19 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 15
  %levels = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 16
  %f0.host = load ptr, ptr %20, align 8
  %21 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 18
  %f2.host = load ptr, ptr %21, align 8
  %22 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 20
  %f4.host = load ptr, ptr %22, align 8
  %23 = shl nsw i32 %f4.s0.v4.v4, 3
  %24 = add nsw i32 %f4.s0.v4.min.s, %23
  %a303 = add nsw i32 %24, -1
  %b305 = add nsw i32 %f4.s0.v4.max, -7
  %.not8 = icmp slt i32 %b305, %24
  %f4.s0.v4.v296.base = select i1 %.not8, i32 %b305, i32 %a303
  %25 = sext i32 %f4.s0.v4.v296.base to i64
  %26 = sub nsw i64 %25, %18
  %27 = shl nsw i64 %12, 2
  %28 = add nsw i64 %14, 1
  %29 = tail call i32 @llvm.smax.i32(i32 %a304, i32 0)
  %smax = zext i32 %29 to i64
  %30 = shl nsw i64 %14, 2
  %31 = add nsw i64 %30, 4
  %32 = shl i32 %f4.s0.v3.min.s, 1
  %33 = add i32 %f2.v3.extent_realized.s, 1
  %34 = shl i32 %f2.v3.extent_realized.s, 1
  %35 = add i32 %34, 2
  %36 = icmp sgt i32 %f4.s0.v6.loop_extent.s, -2
  %37 = sub nsw i32 %f4.s0.v3.max, %f4.s0.v3.min.s
  %38 = add nsw i32 %37, 2
  %a305 = ashr i32 %38, 3
  %39 = icmp sgt i32 %37, 5
  %40 = select i1 %39, i32 %a305, i32 0
  %41 = icmp sgt i32 %40, 0
  %42 = add nsw i32 %37, 9
  %43 = ashr i32 %42, 3
  %44 = icmp sgt i32 %43, %40
  %45 = add nsw i32 %levels, -1
  %46 = sitofp i32 %45 to float
  %47 = fdiv float 1.000000e+00, %46
  %48 = insertelement <8 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %49 = insertelement <8 x float> undef, float %46, i64 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = shl nsw i32 %levels, 8
  %52 = add nsw i32 %51, -256
  %53 = insertelement <8 x i32> undef, i32 %52, i64 0
  %b309 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  %54 = sub <8 x i32> <i32 256, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, %48
  %55 = insertelement <8 x float> undef, float %beta, i64 0
  %56 = shufflevector <8 x float> %55, <8 x float> undef, <8 x i32> zeroinitializer
  %57 = shl nsw i32 %f4.s0.v3.max, 1
  %58 = sub nsw i32 %57, %f2.v3.min_realized
  %59 = add nsw i64 %6, -7
  %60 = sub nsw i64 %59, %16
  br i1 %36, label %"for f4.s0.v4.v296.us.preheader", label %destructor_block, !prof !5

"for f4.s0.v4.v296.us.preheader":                 ; preds = %"for f4.s0.v4.v296.preheader"
  %61 = add nuw i32 %29, 2
  %62 = add i32 %61, %f4.s0.v6.loop_extent.s
  %63 = shl i32 %f4.s0.v4.v296.base, 1
  %64 = xor i32 %f2.v4.min_realized, -1
  %65 = add i32 %63, %64
  %66 = mul i32 %65, %33
  %67 = sub i32 %66, %f2.v3.min_realized
  %reass.sub = sub i32 %63, %f2.v4.min_realized
  %68 = mul i32 %reass.sub, %33
  %69 = sub i32 %68, %f2.v3.min_realized
  %70 = add i32 %reass.sub, 1
  %71 = mul i32 %70, %33
  %72 = sub i32 %71, %f2.v3.min_realized
  %73 = add i32 %reass.sub, 2
  %74 = mul i32 %73, %33
  %75 = sub i32 %74, %f2.v3.min_realized
  %76 = xor i64 %16, -1
  %77 = sext i32 %f4.s0.v3.min.s to i64
  %78 = add nsw i64 %76, %77
  %79 = mul nsw i64 %26, %12
  %80 = add i64 %78, %79
  %scevgep = getelementptr float, ptr %f4.host, i64 %80
  %81 = zext i32 %62 to i64
  br label %"for f4.s0.v4.v296.us"

"for f4.s0.v4.v296.us":                           ; preds = %"for f4.s0.v4.v296.us.preheader", %"end for f4.s0.v6.loopexit.us"
  %indvars.iv149 = phi i64 [ 0, %"for f4.s0.v4.v296.us.preheader" ], [ %indvars.iv.next150, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %67, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next27.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %69, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next23.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %72, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next19.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %75, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next15.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f4.s0.v4.v296.us.preheader" ], [ %scevgep6.us, %"end for f4.s0.v6.loopexit.us" ]
  %82 = trunc i64 %indvars.iv149 to i32
  %83 = add i32 %f4.s0.v4.v296.base, %82
  %84 = shl nsw i32 %83, 1
  %85 = sub nsw i32 %84, %f2.v4.min_realized
  %86 = add nsw i32 %85, -1
  %87 = mul nsw i32 %86, %33
  %t1996.us = add nsw i32 %87, %58
  %88 = sext i32 %t1996.us to i64
  %89 = add nsw i64 %88, -16
  %90 = getelementptr inbounds float, ptr %f2.host, i64 %89
  %91 = add nsw i64 %88, -8
  %92 = getelementptr inbounds float, ptr %f2.host, i64 %91
  %93 = add nsw i64 %88, -14
  %94 = getelementptr inbounds float, ptr %f2.host, i64 %93
  %95 = add nsw i64 %88, -6
  %96 = getelementptr inbounds float, ptr %f2.host, i64 %95
  %97 = add nsw i64 %88, -12
  %98 = getelementptr inbounds float, ptr %f2.host, i64 %97
  %99 = add nsw i64 %88, -4
  %100 = getelementptr inbounds float, ptr %f2.host, i64 %99
  %101 = mul nsw i32 %85, %33
  %t2001.us = add nsw i32 %101, %58
  %102 = sext i32 %t2001.us to i64
  %103 = add nsw i64 %102, -16
  %104 = getelementptr inbounds float, ptr %f2.host, i64 %103
  %105 = add nsw i64 %102, -8
  %106 = getelementptr inbounds float, ptr %f2.host, i64 %105
  %107 = add nsw i64 %102, -14
  %108 = getelementptr inbounds float, ptr %f2.host, i64 %107
  %109 = add nsw i64 %102, -6
  %110 = getelementptr inbounds float, ptr %f2.host, i64 %109
  %111 = add nsw i64 %102, -12
  %112 = getelementptr inbounds float, ptr %f2.host, i64 %111
  %113 = add nsw i64 %102, -4
  %114 = getelementptr inbounds float, ptr %f2.host, i64 %113
  %115 = add nsw i32 %85, 1
  %116 = mul nsw i32 %115, %33
  %t2006.us = add nsw i32 %116, %58
  %117 = sext i32 %t2006.us to i64
  %118 = add nsw i64 %117, -16
  %119 = getelementptr inbounds float, ptr %f2.host, i64 %118
  %120 = add nsw i64 %117, -8
  %121 = getelementptr inbounds float, ptr %f2.host, i64 %120
  %122 = add nsw i64 %117, -14
  %123 = getelementptr inbounds float, ptr %f2.host, i64 %122
  %124 = add nsw i64 %117, -6
  %125 = getelementptr inbounds float, ptr %f2.host, i64 %124
  %126 = add nsw i64 %117, -12
  %127 = getelementptr inbounds float, ptr %f2.host, i64 %126
  %128 = add nsw i64 %117, -4
  %129 = getelementptr inbounds float, ptr %f2.host, i64 %128
  %130 = add nsw i32 %85, 2
  %131 = mul nsw i32 %130, %33
  %t2011.us = add nsw i32 %131, %58
  %132 = sext i32 %t2011.us to i64
  %133 = add nsw i64 %132, -16
  %134 = getelementptr inbounds float, ptr %f2.host, i64 %133
  %135 = add nsw i64 %132, -8
  %136 = getelementptr inbounds float, ptr %f2.host, i64 %135
  %137 = add nsw i64 %132, -14
  %138 = getelementptr inbounds float, ptr %f2.host, i64 %137
  %139 = add nsw i64 %132, -6
  %140 = getelementptr inbounds float, ptr %f2.host, i64 %139
  %141 = add nsw i64 %132, -12
  %142 = getelementptr inbounds float, ptr %f2.host, i64 %141
  %143 = add nsw i64 %132, -4
  %144 = getelementptr inbounds float, ptr %f2.host, i64 %143
  %145 = add nsw i64 %26, %indvars.iv149
  %146 = mul nsw i64 %145, %12
  %147 = add i64 %60, %146
  br label %"for f4.s0.v6.us"

"for f4.s0.v6.us":                                ; preds = %"end for f4.s0.v3.v32.us", %"for f4.s0.v4.v296.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f4.s0.v3.v32.us" ], [ %smax, %"for f4.s0.v4.v296.us" ]
  %lsr.iv8.us = phi ptr [ %scevgep10.us, %"end for f4.s0.v3.v32.us" ], [ %lsr.iv4.us, %"for f4.s0.v4.v296.us" ]
  br i1 %41, label %"for f4.s0.v3.v3.preheader.us", label %"end for f4.s0.v3.v3.us", !prof !5

"for f4.s0.v3.v3.us":                             ; preds = %"for f4.s0.v3.v3.preheader.us", %"for f4.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f4.s0.v3.v3.us" ], [ %a305, %"for f4.s0.v3.v3.preheader.us" ]
  %148 = add i32 %lsr.iv28.us, %32
  %149 = sext i32 %148 to i64
  %150 = add nsw i64 %149, -4
  %151 = getelementptr inbounds float, ptr %f2.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !42
  %153 = add nsw i64 %149, 4
  %154 = getelementptr inbounds float, ptr %f2.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !42
  %t1973.us = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %156 = add nsw i64 %149, -2
  %157 = getelementptr inbounds float, ptr %f2.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !42
  %159 = add nsw i64 %149, 6
  %160 = getelementptr inbounds float, ptr %f2.host, i64 %159
  %161 = load <8 x float>, ptr %160, align 4, !tbaa !42
  %t1974.us = shufflevector <8 x float> %158, <8 x float> %161, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1975.us = shufflevector <8 x float> %158, <8 x float> %161, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %162 = getelementptr inbounds float, ptr %f2.host, i64 %149
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !42
  %164 = add nsw i64 %149, 8
  %165 = getelementptr inbounds float, ptr %f2.host, i64 %164
  %166 = load <8 x float>, ptr %165, align 4, !tbaa !42
  %t1976.us = shufflevector <8 x float> %163, <8 x float> %166, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %167 = add i32 %lsr.iv24.us, %32
  %168 = sext i32 %167 to i64
  %169 = add nsw i64 %168, -4
  %170 = getelementptr inbounds float, ptr %f2.host, i64 %169
  %171 = load <8 x float>, ptr %170, align 4, !tbaa !42
  %172 = add nsw i64 %168, 4
  %173 = getelementptr inbounds float, ptr %f2.host, i64 %172
  %174 = load <8 x float>, ptr %173, align 4, !tbaa !42
  %t1978.us = shufflevector <8 x float> %171, <8 x float> %174, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %175 = add nsw i64 %168, -2
  %176 = getelementptr inbounds float, ptr %f2.host, i64 %175
  %177 = load <8 x float>, ptr %176, align 4, !tbaa !42
  %178 = add nsw i64 %168, 6
  %179 = getelementptr inbounds float, ptr %f2.host, i64 %178
  %180 = load <8 x float>, ptr %179, align 4, !tbaa !42
  %t1979.us = shufflevector <8 x float> %177, <8 x float> %180, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1980.us = shufflevector <8 x float> %177, <8 x float> %180, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %181 = getelementptr inbounds float, ptr %f2.host, i64 %168
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !42
  %183 = add nsw i64 %168, 8
  %184 = getelementptr inbounds float, ptr %f2.host, i64 %183
  %185 = load <8 x float>, ptr %184, align 4, !tbaa !42
  %t1981.us = shufflevector <8 x float> %182, <8 x float> %185, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add i32 %lsr.iv20.us, %32
  %187 = sext i32 %186 to i64
  %188 = add nsw i64 %187, -4
  %189 = getelementptr inbounds float, ptr %f2.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !42
  %191 = add nsw i64 %187, 4
  %192 = getelementptr inbounds float, ptr %f2.host, i64 %191
  %193 = load <8 x float>, ptr %192, align 4, !tbaa !42
  %t1983.us = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = add nsw i64 %187, -2
  %195 = getelementptr inbounds float, ptr %f2.host, i64 %194
  %196 = load <8 x float>, ptr %195, align 4, !tbaa !42
  %197 = add nsw i64 %187, 6
  %198 = getelementptr inbounds float, ptr %f2.host, i64 %197
  %199 = load <8 x float>, ptr %198, align 4, !tbaa !42
  %t1984.us = shufflevector <8 x float> %196, <8 x float> %199, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1985.us = shufflevector <8 x float> %196, <8 x float> %199, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %200 = getelementptr inbounds float, ptr %f2.host, i64 %187
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !42
  %202 = add nsw i64 %187, 8
  %203 = getelementptr inbounds float, ptr %f2.host, i64 %202
  %204 = load <8 x float>, ptr %203, align 4, !tbaa !42
  %t1986.us = shufflevector <8 x float> %201, <8 x float> %204, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %205 = add i32 %lsr.iv16.us, %32
  %206 = sext i32 %205 to i64
  %207 = add nsw i64 %206, -4
  %208 = getelementptr inbounds float, ptr %f2.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !42
  %210 = add nsw i64 %206, 4
  %211 = getelementptr inbounds float, ptr %f2.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !42
  %t1988.us = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %213 = add nsw i64 %206, -2
  %214 = getelementptr inbounds float, ptr %f2.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !42
  %216 = add nsw i64 %206, 6
  %217 = getelementptr inbounds float, ptr %f2.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !42
  %t1989.us = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1990.us = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %219 = getelementptr inbounds float, ptr %f2.host, i64 %206
  %220 = load <8 x float>, ptr %219, align 4, !tbaa !42
  %221 = add nsw i64 %206, 8
  %222 = getelementptr inbounds float, ptr %f2.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !42
  %t1991.us = shufflevector <8 x float> %220, <8 x float> %223, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %224 = fmul <8 x float> %50, %t1991.us
  %225 = fmul <8 x float> %224, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a307.us = fptosi <8 x float> %225 to <8 x i32>
  %a306.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a307.us)
  %226 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a306.us, <8 x i32> zeroinitializer)
  %227 = add <8 x i32> %1715, %226
  %228 = shufflevector <8 x i32> %227, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %229 = sext <4 x i32> %228 to <4 x i64>
  %230 = extractelement <4 x i64> %229, i64 0
  %231 = getelementptr inbounds float, ptr %f0.host, i64 %230
  %232 = load float, ptr %231, align 4, !tbaa !6
  %233 = insertelement <8 x float> undef, float %232, i64 0
  %234 = extractelement <4 x i64> %229, i64 1
  %235 = getelementptr inbounds float, ptr %f0.host, i64 %234
  %236 = load float, ptr %235, align 4, !tbaa !6
  %237 = insertelement <8 x float> %233, float %236, i64 1
  %238 = extractelement <4 x i64> %229, i64 2
  %239 = getelementptr inbounds float, ptr %f0.host, i64 %238
  %240 = load float, ptr %239, align 4, !tbaa !6
  %241 = insertelement <8 x float> %237, float %240, i64 2
  %242 = extractelement <4 x i64> %229, i64 3
  %243 = getelementptr inbounds float, ptr %f0.host, i64 %242
  %244 = load float, ptr %243, align 4, !tbaa !6
  %245 = insertelement <8 x float> %241, float %244, i64 3
  %246 = shufflevector <8 x i32> %227, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %247 = sext <4 x i32> %246 to <4 x i64>
  %248 = extractelement <4 x i64> %247, i64 0
  %249 = getelementptr inbounds float, ptr %f0.host, i64 %248
  %250 = load float, ptr %249, align 4, !tbaa !6
  %251 = insertelement <8 x float> %245, float %250, i64 4
  %252 = extractelement <4 x i64> %247, i64 1
  %253 = getelementptr inbounds float, ptr %f0.host, i64 %252
  %254 = load float, ptr %253, align 4, !tbaa !6
  %255 = insertelement <8 x float> %251, float %254, i64 5
  %256 = extractelement <4 x i64> %247, i64 2
  %257 = getelementptr inbounds float, ptr %f0.host, i64 %256
  %258 = load float, ptr %257, align 4, !tbaa !6
  %259 = insertelement <8 x float> %255, float %258, i64 6
  %260 = extractelement <4 x i64> %247, i64 3
  %261 = getelementptr inbounds float, ptr %f0.host, i64 %260
  %262 = load float, ptr %261, align 4, !tbaa !6
  %263 = insertelement <8 x float> %259, float %262, i64 7
  %264 = fsub <8 x float> %t1991.us, %1717
  %265 = fmul <8 x float> %56, %264
  %266 = fadd <8 x float> %1717, %265
  %267 = fadd <8 x float> %266, %263
  %268 = fmul <8 x float> %50, %t1990.us
  %269 = fmul <8 x float> %268, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a309.us = fptosi <8 x float> %269 to <8 x i32>
  %a308.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a309.us)
  %270 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a308.us, <8 x i32> zeroinitializer)
  %271 = add <8 x i32> %1715, %270
  %272 = shufflevector <8 x i32> %271, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %273 = sext <4 x i32> %272 to <4 x i64>
  %274 = extractelement <4 x i64> %273, i64 0
  %275 = getelementptr inbounds float, ptr %f0.host, i64 %274
  %276 = load float, ptr %275, align 4, !tbaa !6
  %277 = insertelement <8 x float> undef, float %276, i64 0
  %278 = extractelement <4 x i64> %273, i64 1
  %279 = getelementptr inbounds float, ptr %f0.host, i64 %278
  %280 = load float, ptr %279, align 4, !tbaa !6
  %281 = insertelement <8 x float> %277, float %280, i64 1
  %282 = extractelement <4 x i64> %273, i64 2
  %283 = getelementptr inbounds float, ptr %f0.host, i64 %282
  %284 = load float, ptr %283, align 4, !tbaa !6
  %285 = insertelement <8 x float> %281, float %284, i64 2
  %286 = extractelement <4 x i64> %273, i64 3
  %287 = getelementptr inbounds float, ptr %f0.host, i64 %286
  %288 = load float, ptr %287, align 4, !tbaa !6
  %289 = insertelement <8 x float> %285, float %288, i64 3
  %290 = shufflevector <8 x i32> %271, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %291 = sext <4 x i32> %290 to <4 x i64>
  %292 = extractelement <4 x i64> %291, i64 0
  %293 = getelementptr inbounds float, ptr %f0.host, i64 %292
  %294 = load float, ptr %293, align 4, !tbaa !6
  %295 = insertelement <8 x float> %289, float %294, i64 4
  %296 = extractelement <4 x i64> %291, i64 1
  %297 = getelementptr inbounds float, ptr %f0.host, i64 %296
  %298 = load float, ptr %297, align 4, !tbaa !6
  %299 = insertelement <8 x float> %295, float %298, i64 5
  %300 = extractelement <4 x i64> %291, i64 2
  %301 = getelementptr inbounds float, ptr %f0.host, i64 %300
  %302 = load float, ptr %301, align 4, !tbaa !6
  %303 = insertelement <8 x float> %299, float %302, i64 6
  %304 = extractelement <4 x i64> %291, i64 3
  %305 = getelementptr inbounds float, ptr %f0.host, i64 %304
  %306 = load float, ptr %305, align 4, !tbaa !6
  %307 = insertelement <8 x float> %303, float %306, i64 7
  %308 = fsub <8 x float> %t1990.us, %1717
  %309 = fmul <8 x float> %56, %308
  %310 = fadd <8 x float> %1717, %309
  %311 = fadd <8 x float> %310, %307
  %312 = fmul <8 x float> %50, %t1989.us
  %313 = fmul <8 x float> %312, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a311.us = fptosi <8 x float> %313 to <8 x i32>
  %a310.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a311.us)
  %314 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a310.us, <8 x i32> zeroinitializer)
  %315 = add <8 x i32> %1715, %314
  %316 = shufflevector <8 x i32> %315, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %317 = sext <4 x i32> %316 to <4 x i64>
  %318 = extractelement <4 x i64> %317, i64 0
  %319 = getelementptr inbounds float, ptr %f0.host, i64 %318
  %320 = load float, ptr %319, align 4, !tbaa !6
  %321 = insertelement <8 x float> undef, float %320, i64 0
  %322 = extractelement <4 x i64> %317, i64 1
  %323 = getelementptr inbounds float, ptr %f0.host, i64 %322
  %324 = load float, ptr %323, align 4, !tbaa !6
  %325 = insertelement <8 x float> %321, float %324, i64 1
  %326 = extractelement <4 x i64> %317, i64 2
  %327 = getelementptr inbounds float, ptr %f0.host, i64 %326
  %328 = load float, ptr %327, align 4, !tbaa !6
  %329 = insertelement <8 x float> %325, float %328, i64 2
  %330 = extractelement <4 x i64> %317, i64 3
  %331 = getelementptr inbounds float, ptr %f0.host, i64 %330
  %332 = load float, ptr %331, align 4, !tbaa !6
  %333 = insertelement <8 x float> %329, float %332, i64 3
  %334 = shufflevector <8 x i32> %315, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %335 = sext <4 x i32> %334 to <4 x i64>
  %336 = extractelement <4 x i64> %335, i64 0
  %337 = getelementptr inbounds float, ptr %f0.host, i64 %336
  %338 = load float, ptr %337, align 4, !tbaa !6
  %339 = insertelement <8 x float> %333, float %338, i64 4
  %340 = extractelement <4 x i64> %335, i64 1
  %341 = getelementptr inbounds float, ptr %f0.host, i64 %340
  %342 = load float, ptr %341, align 4, !tbaa !6
  %343 = insertelement <8 x float> %339, float %342, i64 5
  %344 = extractelement <4 x i64> %335, i64 2
  %345 = getelementptr inbounds float, ptr %f0.host, i64 %344
  %346 = load float, ptr %345, align 4, !tbaa !6
  %347 = insertelement <8 x float> %343, float %346, i64 6
  %348 = extractelement <4 x i64> %335, i64 3
  %349 = getelementptr inbounds float, ptr %f0.host, i64 %348
  %350 = load float, ptr %349, align 4, !tbaa !6
  %351 = insertelement <8 x float> %347, float %350, i64 7
  %352 = fsub <8 x float> %t1989.us, %1717
  %353 = fmul <8 x float> %56, %352
  %354 = fadd <8 x float> %1717, %353
  %355 = fadd <8 x float> %354, %351
  %356 = fadd <8 x float> %311, %355
  %357 = fmul <8 x float> %356, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %358 = fmul <8 x float> %50, %t1988.us
  %359 = fmul <8 x float> %358, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a313.us = fptosi <8 x float> %359 to <8 x i32>
  %a312.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a313.us)
  %360 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a312.us, <8 x i32> zeroinitializer)
  %361 = add <8 x i32> %1715, %360
  %362 = shufflevector <8 x i32> %361, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %363 = sext <4 x i32> %362 to <4 x i64>
  %364 = extractelement <4 x i64> %363, i64 0
  %365 = getelementptr inbounds float, ptr %f0.host, i64 %364
  %366 = load float, ptr %365, align 4, !tbaa !6
  %367 = insertelement <8 x float> undef, float %366, i64 0
  %368 = extractelement <4 x i64> %363, i64 1
  %369 = getelementptr inbounds float, ptr %f0.host, i64 %368
  %370 = load float, ptr %369, align 4, !tbaa !6
  %371 = insertelement <8 x float> %367, float %370, i64 1
  %372 = extractelement <4 x i64> %363, i64 2
  %373 = getelementptr inbounds float, ptr %f0.host, i64 %372
  %374 = load float, ptr %373, align 4, !tbaa !6
  %375 = insertelement <8 x float> %371, float %374, i64 2
  %376 = extractelement <4 x i64> %363, i64 3
  %377 = getelementptr inbounds float, ptr %f0.host, i64 %376
  %378 = load float, ptr %377, align 4, !tbaa !6
  %379 = insertelement <8 x float> %375, float %378, i64 3
  %380 = shufflevector <8 x i32> %361, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %381 = sext <4 x i32> %380 to <4 x i64>
  %382 = extractelement <4 x i64> %381, i64 0
  %383 = getelementptr inbounds float, ptr %f0.host, i64 %382
  %384 = load float, ptr %383, align 4, !tbaa !6
  %385 = insertelement <8 x float> %379, float %384, i64 4
  %386 = extractelement <4 x i64> %381, i64 1
  %387 = getelementptr inbounds float, ptr %f0.host, i64 %386
  %388 = load float, ptr %387, align 4, !tbaa !6
  %389 = insertelement <8 x float> %385, float %388, i64 5
  %390 = extractelement <4 x i64> %381, i64 2
  %391 = getelementptr inbounds float, ptr %f0.host, i64 %390
  %392 = load float, ptr %391, align 4, !tbaa !6
  %393 = insertelement <8 x float> %389, float %392, i64 6
  %394 = extractelement <4 x i64> %381, i64 3
  %395 = getelementptr inbounds float, ptr %f0.host, i64 %394
  %396 = load float, ptr %395, align 4, !tbaa !6
  %397 = insertelement <8 x float> %393, float %396, i64 7
  %398 = fsub <8 x float> %t1988.us, %1717
  %399 = fmul <8 x float> %56, %398
  %400 = fadd <8 x float> %1717, %399
  %401 = fadd <8 x float> %400, %397
  %402 = fadd <8 x float> %357, %401
  %403 = fadd <8 x float> %267, %402
  %404 = fmul <8 x float> %403, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %405 = fmul <8 x float> %50, %t1986.us
  %406 = fmul <8 x float> %405, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a315.us = fptosi <8 x float> %406 to <8 x i32>
  %a314.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a315.us)
  %407 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a314.us, <8 x i32> zeroinitializer)
  %408 = add <8 x i32> %1715, %407
  %409 = shufflevector <8 x i32> %408, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %410 = sext <4 x i32> %409 to <4 x i64>
  %411 = extractelement <4 x i64> %410, i64 0
  %412 = getelementptr inbounds float, ptr %f0.host, i64 %411
  %413 = load float, ptr %412, align 4, !tbaa !6
  %414 = insertelement <8 x float> undef, float %413, i64 0
  %415 = extractelement <4 x i64> %410, i64 1
  %416 = getelementptr inbounds float, ptr %f0.host, i64 %415
  %417 = load float, ptr %416, align 4, !tbaa !6
  %418 = insertelement <8 x float> %414, float %417, i64 1
  %419 = extractelement <4 x i64> %410, i64 2
  %420 = getelementptr inbounds float, ptr %f0.host, i64 %419
  %421 = load float, ptr %420, align 4, !tbaa !6
  %422 = insertelement <8 x float> %418, float %421, i64 2
  %423 = extractelement <4 x i64> %410, i64 3
  %424 = getelementptr inbounds float, ptr %f0.host, i64 %423
  %425 = load float, ptr %424, align 4, !tbaa !6
  %426 = insertelement <8 x float> %422, float %425, i64 3
  %427 = shufflevector <8 x i32> %408, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %428 = sext <4 x i32> %427 to <4 x i64>
  %429 = extractelement <4 x i64> %428, i64 0
  %430 = getelementptr inbounds float, ptr %f0.host, i64 %429
  %431 = load float, ptr %430, align 4, !tbaa !6
  %432 = insertelement <8 x float> %426, float %431, i64 4
  %433 = extractelement <4 x i64> %428, i64 1
  %434 = getelementptr inbounds float, ptr %f0.host, i64 %433
  %435 = load float, ptr %434, align 4, !tbaa !6
  %436 = insertelement <8 x float> %432, float %435, i64 5
  %437 = extractelement <4 x i64> %428, i64 2
  %438 = getelementptr inbounds float, ptr %f0.host, i64 %437
  %439 = load float, ptr %438, align 4, !tbaa !6
  %440 = insertelement <8 x float> %436, float %439, i64 6
  %441 = extractelement <4 x i64> %428, i64 3
  %442 = getelementptr inbounds float, ptr %f0.host, i64 %441
  %443 = load float, ptr %442, align 4, !tbaa !6
  %444 = insertelement <8 x float> %440, float %443, i64 7
  %445 = fsub <8 x float> %t1986.us, %1717
  %446 = fmul <8 x float> %56, %445
  %447 = fadd <8 x float> %1717, %446
  %448 = fadd <8 x float> %447, %444
  %449 = fmul <8 x float> %50, %t1985.us
  %450 = fmul <8 x float> %449, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a317.us = fptosi <8 x float> %450 to <8 x i32>
  %a316.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a317.us)
  %451 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a316.us, <8 x i32> zeroinitializer)
  %452 = add <8 x i32> %1715, %451
  %453 = shufflevector <8 x i32> %452, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %454 = sext <4 x i32> %453 to <4 x i64>
  %455 = extractelement <4 x i64> %454, i64 0
  %456 = getelementptr inbounds float, ptr %f0.host, i64 %455
  %457 = load float, ptr %456, align 4, !tbaa !6
  %458 = insertelement <8 x float> undef, float %457, i64 0
  %459 = extractelement <4 x i64> %454, i64 1
  %460 = getelementptr inbounds float, ptr %f0.host, i64 %459
  %461 = load float, ptr %460, align 4, !tbaa !6
  %462 = insertelement <8 x float> %458, float %461, i64 1
  %463 = extractelement <4 x i64> %454, i64 2
  %464 = getelementptr inbounds float, ptr %f0.host, i64 %463
  %465 = load float, ptr %464, align 4, !tbaa !6
  %466 = insertelement <8 x float> %462, float %465, i64 2
  %467 = extractelement <4 x i64> %454, i64 3
  %468 = getelementptr inbounds float, ptr %f0.host, i64 %467
  %469 = load float, ptr %468, align 4, !tbaa !6
  %470 = insertelement <8 x float> %466, float %469, i64 3
  %471 = shufflevector <8 x i32> %452, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %472 = sext <4 x i32> %471 to <4 x i64>
  %473 = extractelement <4 x i64> %472, i64 0
  %474 = getelementptr inbounds float, ptr %f0.host, i64 %473
  %475 = load float, ptr %474, align 4, !tbaa !6
  %476 = insertelement <8 x float> %470, float %475, i64 4
  %477 = extractelement <4 x i64> %472, i64 1
  %478 = getelementptr inbounds float, ptr %f0.host, i64 %477
  %479 = load float, ptr %478, align 4, !tbaa !6
  %480 = insertelement <8 x float> %476, float %479, i64 5
  %481 = extractelement <4 x i64> %472, i64 2
  %482 = getelementptr inbounds float, ptr %f0.host, i64 %481
  %483 = load float, ptr %482, align 4, !tbaa !6
  %484 = insertelement <8 x float> %480, float %483, i64 6
  %485 = extractelement <4 x i64> %472, i64 3
  %486 = getelementptr inbounds float, ptr %f0.host, i64 %485
  %487 = load float, ptr %486, align 4, !tbaa !6
  %488 = insertelement <8 x float> %484, float %487, i64 7
  %489 = fsub <8 x float> %t1985.us, %1717
  %490 = fmul <8 x float> %56, %489
  %491 = fadd <8 x float> %1717, %490
  %492 = fadd <8 x float> %491, %488
  %493 = fmul <8 x float> %50, %t1984.us
  %494 = fmul <8 x float> %493, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a319.us = fptosi <8 x float> %494 to <8 x i32>
  %a318.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a319.us)
  %495 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a318.us, <8 x i32> zeroinitializer)
  %496 = add <8 x i32> %1715, %495
  %497 = shufflevector <8 x i32> %496, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %498 = sext <4 x i32> %497 to <4 x i64>
  %499 = extractelement <4 x i64> %498, i64 0
  %500 = getelementptr inbounds float, ptr %f0.host, i64 %499
  %501 = load float, ptr %500, align 4, !tbaa !6
  %502 = insertelement <8 x float> undef, float %501, i64 0
  %503 = extractelement <4 x i64> %498, i64 1
  %504 = getelementptr inbounds float, ptr %f0.host, i64 %503
  %505 = load float, ptr %504, align 4, !tbaa !6
  %506 = insertelement <8 x float> %502, float %505, i64 1
  %507 = extractelement <4 x i64> %498, i64 2
  %508 = getelementptr inbounds float, ptr %f0.host, i64 %507
  %509 = load float, ptr %508, align 4, !tbaa !6
  %510 = insertelement <8 x float> %506, float %509, i64 2
  %511 = extractelement <4 x i64> %498, i64 3
  %512 = getelementptr inbounds float, ptr %f0.host, i64 %511
  %513 = load float, ptr %512, align 4, !tbaa !6
  %514 = insertelement <8 x float> %510, float %513, i64 3
  %515 = shufflevector <8 x i32> %496, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %516 = sext <4 x i32> %515 to <4 x i64>
  %517 = extractelement <4 x i64> %516, i64 0
  %518 = getelementptr inbounds float, ptr %f0.host, i64 %517
  %519 = load float, ptr %518, align 4, !tbaa !6
  %520 = insertelement <8 x float> %514, float %519, i64 4
  %521 = extractelement <4 x i64> %516, i64 1
  %522 = getelementptr inbounds float, ptr %f0.host, i64 %521
  %523 = load float, ptr %522, align 4, !tbaa !6
  %524 = insertelement <8 x float> %520, float %523, i64 5
  %525 = extractelement <4 x i64> %516, i64 2
  %526 = getelementptr inbounds float, ptr %f0.host, i64 %525
  %527 = load float, ptr %526, align 4, !tbaa !6
  %528 = insertelement <8 x float> %524, float %527, i64 6
  %529 = extractelement <4 x i64> %516, i64 3
  %530 = getelementptr inbounds float, ptr %f0.host, i64 %529
  %531 = load float, ptr %530, align 4, !tbaa !6
  %532 = insertelement <8 x float> %528, float %531, i64 7
  %533 = fsub <8 x float> %t1984.us, %1717
  %534 = fmul <8 x float> %56, %533
  %535 = fadd <8 x float> %1717, %534
  %536 = fadd <8 x float> %535, %532
  %537 = fadd <8 x float> %492, %536
  %538 = fmul <8 x float> %537, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %539 = fmul <8 x float> %50, %t1983.us
  %540 = fmul <8 x float> %539, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a321.us = fptosi <8 x float> %540 to <8 x i32>
  %a320.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a321.us)
  %541 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a320.us, <8 x i32> zeroinitializer)
  %542 = add <8 x i32> %1715, %541
  %543 = shufflevector <8 x i32> %542, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %544 = sext <4 x i32> %543 to <4 x i64>
  %545 = extractelement <4 x i64> %544, i64 0
  %546 = getelementptr inbounds float, ptr %f0.host, i64 %545
  %547 = load float, ptr %546, align 4, !tbaa !6
  %548 = insertelement <8 x float> undef, float %547, i64 0
  %549 = extractelement <4 x i64> %544, i64 1
  %550 = getelementptr inbounds float, ptr %f0.host, i64 %549
  %551 = load float, ptr %550, align 4, !tbaa !6
  %552 = insertelement <8 x float> %548, float %551, i64 1
  %553 = extractelement <4 x i64> %544, i64 2
  %554 = getelementptr inbounds float, ptr %f0.host, i64 %553
  %555 = load float, ptr %554, align 4, !tbaa !6
  %556 = insertelement <8 x float> %552, float %555, i64 2
  %557 = extractelement <4 x i64> %544, i64 3
  %558 = getelementptr inbounds float, ptr %f0.host, i64 %557
  %559 = load float, ptr %558, align 4, !tbaa !6
  %560 = insertelement <8 x float> %556, float %559, i64 3
  %561 = shufflevector <8 x i32> %542, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %562 = sext <4 x i32> %561 to <4 x i64>
  %563 = extractelement <4 x i64> %562, i64 0
  %564 = getelementptr inbounds float, ptr %f0.host, i64 %563
  %565 = load float, ptr %564, align 4, !tbaa !6
  %566 = insertelement <8 x float> %560, float %565, i64 4
  %567 = extractelement <4 x i64> %562, i64 1
  %568 = getelementptr inbounds float, ptr %f0.host, i64 %567
  %569 = load float, ptr %568, align 4, !tbaa !6
  %570 = insertelement <8 x float> %566, float %569, i64 5
  %571 = extractelement <4 x i64> %562, i64 2
  %572 = getelementptr inbounds float, ptr %f0.host, i64 %571
  %573 = load float, ptr %572, align 4, !tbaa !6
  %574 = insertelement <8 x float> %570, float %573, i64 6
  %575 = extractelement <4 x i64> %562, i64 3
  %576 = getelementptr inbounds float, ptr %f0.host, i64 %575
  %577 = load float, ptr %576, align 4, !tbaa !6
  %578 = insertelement <8 x float> %574, float %577, i64 7
  %579 = fsub <8 x float> %t1983.us, %1717
  %580 = fmul <8 x float> %56, %579
  %581 = fadd <8 x float> %1717, %580
  %582 = fadd <8 x float> %581, %578
  %583 = fadd <8 x float> %538, %582
  %584 = fadd <8 x float> %448, %583
  %585 = fmul <8 x float> %50, %t1981.us
  %586 = fmul <8 x float> %585, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a323.us = fptosi <8 x float> %586 to <8 x i32>
  %a322.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a323.us)
  %587 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a322.us, <8 x i32> zeroinitializer)
  %588 = add <8 x i32> %1715, %587
  %589 = shufflevector <8 x i32> %588, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %590 = sext <4 x i32> %589 to <4 x i64>
  %591 = extractelement <4 x i64> %590, i64 0
  %592 = getelementptr inbounds float, ptr %f0.host, i64 %591
  %593 = load float, ptr %592, align 4, !tbaa !6
  %594 = insertelement <8 x float> undef, float %593, i64 0
  %595 = extractelement <4 x i64> %590, i64 1
  %596 = getelementptr inbounds float, ptr %f0.host, i64 %595
  %597 = load float, ptr %596, align 4, !tbaa !6
  %598 = insertelement <8 x float> %594, float %597, i64 1
  %599 = extractelement <4 x i64> %590, i64 2
  %600 = getelementptr inbounds float, ptr %f0.host, i64 %599
  %601 = load float, ptr %600, align 4, !tbaa !6
  %602 = insertelement <8 x float> %598, float %601, i64 2
  %603 = extractelement <4 x i64> %590, i64 3
  %604 = getelementptr inbounds float, ptr %f0.host, i64 %603
  %605 = load float, ptr %604, align 4, !tbaa !6
  %606 = insertelement <8 x float> %602, float %605, i64 3
  %607 = shufflevector <8 x i32> %588, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %608 = sext <4 x i32> %607 to <4 x i64>
  %609 = extractelement <4 x i64> %608, i64 0
  %610 = getelementptr inbounds float, ptr %f0.host, i64 %609
  %611 = load float, ptr %610, align 4, !tbaa !6
  %612 = insertelement <8 x float> %606, float %611, i64 4
  %613 = extractelement <4 x i64> %608, i64 1
  %614 = getelementptr inbounds float, ptr %f0.host, i64 %613
  %615 = load float, ptr %614, align 4, !tbaa !6
  %616 = insertelement <8 x float> %612, float %615, i64 5
  %617 = extractelement <4 x i64> %608, i64 2
  %618 = getelementptr inbounds float, ptr %f0.host, i64 %617
  %619 = load float, ptr %618, align 4, !tbaa !6
  %620 = insertelement <8 x float> %616, float %619, i64 6
  %621 = extractelement <4 x i64> %608, i64 3
  %622 = getelementptr inbounds float, ptr %f0.host, i64 %621
  %623 = load float, ptr %622, align 4, !tbaa !6
  %624 = insertelement <8 x float> %620, float %623, i64 7
  %625 = fsub <8 x float> %t1981.us, %1717
  %626 = fmul <8 x float> %56, %625
  %627 = fadd <8 x float> %1717, %626
  %628 = fadd <8 x float> %627, %624
  %629 = fmul <8 x float> %50, %t1980.us
  %630 = fmul <8 x float> %629, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a325.us = fptosi <8 x float> %630 to <8 x i32>
  %a324.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a325.us)
  %631 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a324.us, <8 x i32> zeroinitializer)
  %632 = add <8 x i32> %1715, %631
  %633 = shufflevector <8 x i32> %632, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %634 = sext <4 x i32> %633 to <4 x i64>
  %635 = extractelement <4 x i64> %634, i64 0
  %636 = getelementptr inbounds float, ptr %f0.host, i64 %635
  %637 = load float, ptr %636, align 4, !tbaa !6
  %638 = insertelement <8 x float> undef, float %637, i64 0
  %639 = extractelement <4 x i64> %634, i64 1
  %640 = getelementptr inbounds float, ptr %f0.host, i64 %639
  %641 = load float, ptr %640, align 4, !tbaa !6
  %642 = insertelement <8 x float> %638, float %641, i64 1
  %643 = extractelement <4 x i64> %634, i64 2
  %644 = getelementptr inbounds float, ptr %f0.host, i64 %643
  %645 = load float, ptr %644, align 4, !tbaa !6
  %646 = insertelement <8 x float> %642, float %645, i64 2
  %647 = extractelement <4 x i64> %634, i64 3
  %648 = getelementptr inbounds float, ptr %f0.host, i64 %647
  %649 = load float, ptr %648, align 4, !tbaa !6
  %650 = insertelement <8 x float> %646, float %649, i64 3
  %651 = shufflevector <8 x i32> %632, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %652 = sext <4 x i32> %651 to <4 x i64>
  %653 = extractelement <4 x i64> %652, i64 0
  %654 = getelementptr inbounds float, ptr %f0.host, i64 %653
  %655 = load float, ptr %654, align 4, !tbaa !6
  %656 = insertelement <8 x float> %650, float %655, i64 4
  %657 = extractelement <4 x i64> %652, i64 1
  %658 = getelementptr inbounds float, ptr %f0.host, i64 %657
  %659 = load float, ptr %658, align 4, !tbaa !6
  %660 = insertelement <8 x float> %656, float %659, i64 5
  %661 = extractelement <4 x i64> %652, i64 2
  %662 = getelementptr inbounds float, ptr %f0.host, i64 %661
  %663 = load float, ptr %662, align 4, !tbaa !6
  %664 = insertelement <8 x float> %660, float %663, i64 6
  %665 = extractelement <4 x i64> %652, i64 3
  %666 = getelementptr inbounds float, ptr %f0.host, i64 %665
  %667 = load float, ptr %666, align 4, !tbaa !6
  %668 = insertelement <8 x float> %664, float %667, i64 7
  %669 = fsub <8 x float> %t1980.us, %1717
  %670 = fmul <8 x float> %56, %669
  %671 = fadd <8 x float> %1717, %670
  %672 = fadd <8 x float> %671, %668
  %673 = fmul <8 x float> %50, %t1979.us
  %674 = fmul <8 x float> %673, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a327.us = fptosi <8 x float> %674 to <8 x i32>
  %a326.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a327.us)
  %675 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a326.us, <8 x i32> zeroinitializer)
  %676 = add <8 x i32> %1715, %675
  %677 = shufflevector <8 x i32> %676, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %678 = sext <4 x i32> %677 to <4 x i64>
  %679 = extractelement <4 x i64> %678, i64 0
  %680 = getelementptr inbounds float, ptr %f0.host, i64 %679
  %681 = load float, ptr %680, align 4, !tbaa !6
  %682 = insertelement <8 x float> undef, float %681, i64 0
  %683 = extractelement <4 x i64> %678, i64 1
  %684 = getelementptr inbounds float, ptr %f0.host, i64 %683
  %685 = load float, ptr %684, align 4, !tbaa !6
  %686 = insertelement <8 x float> %682, float %685, i64 1
  %687 = extractelement <4 x i64> %678, i64 2
  %688 = getelementptr inbounds float, ptr %f0.host, i64 %687
  %689 = load float, ptr %688, align 4, !tbaa !6
  %690 = insertelement <8 x float> %686, float %689, i64 2
  %691 = extractelement <4 x i64> %678, i64 3
  %692 = getelementptr inbounds float, ptr %f0.host, i64 %691
  %693 = load float, ptr %692, align 4, !tbaa !6
  %694 = insertelement <8 x float> %690, float %693, i64 3
  %695 = shufflevector <8 x i32> %676, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %696 = sext <4 x i32> %695 to <4 x i64>
  %697 = extractelement <4 x i64> %696, i64 0
  %698 = getelementptr inbounds float, ptr %f0.host, i64 %697
  %699 = load float, ptr %698, align 4, !tbaa !6
  %700 = insertelement <8 x float> %694, float %699, i64 4
  %701 = extractelement <4 x i64> %696, i64 1
  %702 = getelementptr inbounds float, ptr %f0.host, i64 %701
  %703 = load float, ptr %702, align 4, !tbaa !6
  %704 = insertelement <8 x float> %700, float %703, i64 5
  %705 = extractelement <4 x i64> %696, i64 2
  %706 = getelementptr inbounds float, ptr %f0.host, i64 %705
  %707 = load float, ptr %706, align 4, !tbaa !6
  %708 = insertelement <8 x float> %704, float %707, i64 6
  %709 = extractelement <4 x i64> %696, i64 3
  %710 = getelementptr inbounds float, ptr %f0.host, i64 %709
  %711 = load float, ptr %710, align 4, !tbaa !6
  %712 = insertelement <8 x float> %708, float %711, i64 7
  %713 = fsub <8 x float> %t1979.us, %1717
  %714 = fmul <8 x float> %56, %713
  %715 = fadd <8 x float> %1717, %714
  %716 = fadd <8 x float> %715, %712
  %717 = fadd <8 x float> %672, %716
  %718 = fmul <8 x float> %717, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %719 = fmul <8 x float> %50, %t1978.us
  %720 = fmul <8 x float> %719, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a329.us = fptosi <8 x float> %720 to <8 x i32>
  %a328.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a329.us)
  %721 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a328.us, <8 x i32> zeroinitializer)
  %722 = add <8 x i32> %1715, %721
  %723 = shufflevector <8 x i32> %722, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %724 = sext <4 x i32> %723 to <4 x i64>
  %725 = extractelement <4 x i64> %724, i64 0
  %726 = getelementptr inbounds float, ptr %f0.host, i64 %725
  %727 = load float, ptr %726, align 4, !tbaa !6
  %728 = insertelement <8 x float> undef, float %727, i64 0
  %729 = extractelement <4 x i64> %724, i64 1
  %730 = getelementptr inbounds float, ptr %f0.host, i64 %729
  %731 = load float, ptr %730, align 4, !tbaa !6
  %732 = insertelement <8 x float> %728, float %731, i64 1
  %733 = extractelement <4 x i64> %724, i64 2
  %734 = getelementptr inbounds float, ptr %f0.host, i64 %733
  %735 = load float, ptr %734, align 4, !tbaa !6
  %736 = insertelement <8 x float> %732, float %735, i64 2
  %737 = extractelement <4 x i64> %724, i64 3
  %738 = getelementptr inbounds float, ptr %f0.host, i64 %737
  %739 = load float, ptr %738, align 4, !tbaa !6
  %740 = insertelement <8 x float> %736, float %739, i64 3
  %741 = shufflevector <8 x i32> %722, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %742 = sext <4 x i32> %741 to <4 x i64>
  %743 = extractelement <4 x i64> %742, i64 0
  %744 = getelementptr inbounds float, ptr %f0.host, i64 %743
  %745 = load float, ptr %744, align 4, !tbaa !6
  %746 = insertelement <8 x float> %740, float %745, i64 4
  %747 = extractelement <4 x i64> %742, i64 1
  %748 = getelementptr inbounds float, ptr %f0.host, i64 %747
  %749 = load float, ptr %748, align 4, !tbaa !6
  %750 = insertelement <8 x float> %746, float %749, i64 5
  %751 = extractelement <4 x i64> %742, i64 2
  %752 = getelementptr inbounds float, ptr %f0.host, i64 %751
  %753 = load float, ptr %752, align 4, !tbaa !6
  %754 = insertelement <8 x float> %750, float %753, i64 6
  %755 = extractelement <4 x i64> %742, i64 3
  %756 = getelementptr inbounds float, ptr %f0.host, i64 %755
  %757 = load float, ptr %756, align 4, !tbaa !6
  %758 = insertelement <8 x float> %754, float %757, i64 7
  %759 = fsub <8 x float> %t1978.us, %1717
  %760 = fmul <8 x float> %56, %759
  %761 = fadd <8 x float> %1717, %760
  %762 = fadd <8 x float> %761, %758
  %763 = fadd <8 x float> %718, %762
  %764 = fadd <8 x float> %628, %763
  %765 = fadd <8 x float> %584, %764
  %766 = fmul <8 x float> %765, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %767 = fmul <8 x float> %50, %t1976.us
  %768 = fmul <8 x float> %767, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a331.us = fptosi <8 x float> %768 to <8 x i32>
  %a330.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a331.us)
  %769 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a330.us, <8 x i32> zeroinitializer)
  %770 = add <8 x i32> %1715, %769
  %771 = shufflevector <8 x i32> %770, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %772 = sext <4 x i32> %771 to <4 x i64>
  %773 = extractelement <4 x i64> %772, i64 0
  %774 = getelementptr inbounds float, ptr %f0.host, i64 %773
  %775 = load float, ptr %774, align 4, !tbaa !6
  %776 = insertelement <8 x float> undef, float %775, i64 0
  %777 = extractelement <4 x i64> %772, i64 1
  %778 = getelementptr inbounds float, ptr %f0.host, i64 %777
  %779 = load float, ptr %778, align 4, !tbaa !6
  %780 = insertelement <8 x float> %776, float %779, i64 1
  %781 = extractelement <4 x i64> %772, i64 2
  %782 = getelementptr inbounds float, ptr %f0.host, i64 %781
  %783 = load float, ptr %782, align 4, !tbaa !6
  %784 = insertelement <8 x float> %780, float %783, i64 2
  %785 = extractelement <4 x i64> %772, i64 3
  %786 = getelementptr inbounds float, ptr %f0.host, i64 %785
  %787 = load float, ptr %786, align 4, !tbaa !6
  %788 = insertelement <8 x float> %784, float %787, i64 3
  %789 = shufflevector <8 x i32> %770, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %790 = sext <4 x i32> %789 to <4 x i64>
  %791 = extractelement <4 x i64> %790, i64 0
  %792 = getelementptr inbounds float, ptr %f0.host, i64 %791
  %793 = load float, ptr %792, align 4, !tbaa !6
  %794 = insertelement <8 x float> %788, float %793, i64 4
  %795 = extractelement <4 x i64> %790, i64 1
  %796 = getelementptr inbounds float, ptr %f0.host, i64 %795
  %797 = load float, ptr %796, align 4, !tbaa !6
  %798 = insertelement <8 x float> %794, float %797, i64 5
  %799 = extractelement <4 x i64> %790, i64 2
  %800 = getelementptr inbounds float, ptr %f0.host, i64 %799
  %801 = load float, ptr %800, align 4, !tbaa !6
  %802 = insertelement <8 x float> %798, float %801, i64 6
  %803 = extractelement <4 x i64> %790, i64 3
  %804 = getelementptr inbounds float, ptr %f0.host, i64 %803
  %805 = load float, ptr %804, align 4, !tbaa !6
  %806 = insertelement <8 x float> %802, float %805, i64 7
  %807 = fsub <8 x float> %t1976.us, %1717
  %808 = fmul <8 x float> %56, %807
  %809 = fadd <8 x float> %1717, %808
  %810 = fadd <8 x float> %809, %806
  %811 = fmul <8 x float> %50, %t1975.us
  %812 = fmul <8 x float> %811, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a333.us = fptosi <8 x float> %812 to <8 x i32>
  %a332.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a333.us)
  %813 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a332.us, <8 x i32> zeroinitializer)
  %814 = add <8 x i32> %1715, %813
  %815 = shufflevector <8 x i32> %814, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %816 = sext <4 x i32> %815 to <4 x i64>
  %817 = extractelement <4 x i64> %816, i64 0
  %818 = getelementptr inbounds float, ptr %f0.host, i64 %817
  %819 = load float, ptr %818, align 4, !tbaa !6
  %820 = insertelement <8 x float> undef, float %819, i64 0
  %821 = extractelement <4 x i64> %816, i64 1
  %822 = getelementptr inbounds float, ptr %f0.host, i64 %821
  %823 = load float, ptr %822, align 4, !tbaa !6
  %824 = insertelement <8 x float> %820, float %823, i64 1
  %825 = extractelement <4 x i64> %816, i64 2
  %826 = getelementptr inbounds float, ptr %f0.host, i64 %825
  %827 = load float, ptr %826, align 4, !tbaa !6
  %828 = insertelement <8 x float> %824, float %827, i64 2
  %829 = extractelement <4 x i64> %816, i64 3
  %830 = getelementptr inbounds float, ptr %f0.host, i64 %829
  %831 = load float, ptr %830, align 4, !tbaa !6
  %832 = insertelement <8 x float> %828, float %831, i64 3
  %833 = shufflevector <8 x i32> %814, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %834 = sext <4 x i32> %833 to <4 x i64>
  %835 = extractelement <4 x i64> %834, i64 0
  %836 = getelementptr inbounds float, ptr %f0.host, i64 %835
  %837 = load float, ptr %836, align 4, !tbaa !6
  %838 = insertelement <8 x float> %832, float %837, i64 4
  %839 = extractelement <4 x i64> %834, i64 1
  %840 = getelementptr inbounds float, ptr %f0.host, i64 %839
  %841 = load float, ptr %840, align 4, !tbaa !6
  %842 = insertelement <8 x float> %838, float %841, i64 5
  %843 = extractelement <4 x i64> %834, i64 2
  %844 = getelementptr inbounds float, ptr %f0.host, i64 %843
  %845 = load float, ptr %844, align 4, !tbaa !6
  %846 = insertelement <8 x float> %842, float %845, i64 6
  %847 = extractelement <4 x i64> %834, i64 3
  %848 = getelementptr inbounds float, ptr %f0.host, i64 %847
  %849 = load float, ptr %848, align 4, !tbaa !6
  %850 = insertelement <8 x float> %846, float %849, i64 7
  %851 = fsub <8 x float> %t1975.us, %1717
  %852 = fmul <8 x float> %56, %851
  %853 = fadd <8 x float> %1717, %852
  %854 = fadd <8 x float> %853, %850
  %855 = fmul <8 x float> %50, %t1974.us
  %856 = fmul <8 x float> %855, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a335.us = fptosi <8 x float> %856 to <8 x i32>
  %a334.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a335.us)
  %857 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a334.us, <8 x i32> zeroinitializer)
  %858 = add <8 x i32> %1715, %857
  %859 = shufflevector <8 x i32> %858, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %860 = sext <4 x i32> %859 to <4 x i64>
  %861 = extractelement <4 x i64> %860, i64 0
  %862 = getelementptr inbounds float, ptr %f0.host, i64 %861
  %863 = load float, ptr %862, align 4, !tbaa !6
  %864 = insertelement <8 x float> undef, float %863, i64 0
  %865 = extractelement <4 x i64> %860, i64 1
  %866 = getelementptr inbounds float, ptr %f0.host, i64 %865
  %867 = load float, ptr %866, align 4, !tbaa !6
  %868 = insertelement <8 x float> %864, float %867, i64 1
  %869 = extractelement <4 x i64> %860, i64 2
  %870 = getelementptr inbounds float, ptr %f0.host, i64 %869
  %871 = load float, ptr %870, align 4, !tbaa !6
  %872 = insertelement <8 x float> %868, float %871, i64 2
  %873 = extractelement <4 x i64> %860, i64 3
  %874 = getelementptr inbounds float, ptr %f0.host, i64 %873
  %875 = load float, ptr %874, align 4, !tbaa !6
  %876 = insertelement <8 x float> %872, float %875, i64 3
  %877 = shufflevector <8 x i32> %858, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %878 = sext <4 x i32> %877 to <4 x i64>
  %879 = extractelement <4 x i64> %878, i64 0
  %880 = getelementptr inbounds float, ptr %f0.host, i64 %879
  %881 = load float, ptr %880, align 4, !tbaa !6
  %882 = insertelement <8 x float> %876, float %881, i64 4
  %883 = extractelement <4 x i64> %878, i64 1
  %884 = getelementptr inbounds float, ptr %f0.host, i64 %883
  %885 = load float, ptr %884, align 4, !tbaa !6
  %886 = insertelement <8 x float> %882, float %885, i64 5
  %887 = extractelement <4 x i64> %878, i64 2
  %888 = getelementptr inbounds float, ptr %f0.host, i64 %887
  %889 = load float, ptr %888, align 4, !tbaa !6
  %890 = insertelement <8 x float> %886, float %889, i64 6
  %891 = extractelement <4 x i64> %878, i64 3
  %892 = getelementptr inbounds float, ptr %f0.host, i64 %891
  %893 = load float, ptr %892, align 4, !tbaa !6
  %894 = insertelement <8 x float> %890, float %893, i64 7
  %895 = fsub <8 x float> %t1974.us, %1717
  %896 = fmul <8 x float> %56, %895
  %897 = fadd <8 x float> %1717, %896
  %898 = fadd <8 x float> %897, %894
  %899 = fadd <8 x float> %854, %898
  %900 = fmul <8 x float> %899, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %901 = fmul <8 x float> %50, %t1973.us
  %902 = fmul <8 x float> %901, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a337.us = fptosi <8 x float> %902 to <8 x i32>
  %a336.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a337.us)
  %903 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a336.us, <8 x i32> zeroinitializer)
  %904 = add <8 x i32> %1715, %903
  %905 = shufflevector <8 x i32> %904, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %906 = sext <4 x i32> %905 to <4 x i64>
  %907 = extractelement <4 x i64> %906, i64 0
  %908 = getelementptr inbounds float, ptr %f0.host, i64 %907
  %909 = load float, ptr %908, align 4, !tbaa !6
  %910 = insertelement <8 x float> undef, float %909, i64 0
  %911 = extractelement <4 x i64> %906, i64 1
  %912 = getelementptr inbounds float, ptr %f0.host, i64 %911
  %913 = load float, ptr %912, align 4, !tbaa !6
  %914 = insertelement <8 x float> %910, float %913, i64 1
  %915 = extractelement <4 x i64> %906, i64 2
  %916 = getelementptr inbounds float, ptr %f0.host, i64 %915
  %917 = load float, ptr %916, align 4, !tbaa !6
  %918 = insertelement <8 x float> %914, float %917, i64 2
  %919 = extractelement <4 x i64> %906, i64 3
  %920 = getelementptr inbounds float, ptr %f0.host, i64 %919
  %921 = load float, ptr %920, align 4, !tbaa !6
  %922 = insertelement <8 x float> %918, float %921, i64 3
  %923 = shufflevector <8 x i32> %904, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %924 = sext <4 x i32> %923 to <4 x i64>
  %925 = extractelement <4 x i64> %924, i64 0
  %926 = getelementptr inbounds float, ptr %f0.host, i64 %925
  %927 = load float, ptr %926, align 4, !tbaa !6
  %928 = insertelement <8 x float> %922, float %927, i64 4
  %929 = extractelement <4 x i64> %924, i64 1
  %930 = getelementptr inbounds float, ptr %f0.host, i64 %929
  %931 = load float, ptr %930, align 4, !tbaa !6
  %932 = insertelement <8 x float> %928, float %931, i64 5
  %933 = extractelement <4 x i64> %924, i64 2
  %934 = getelementptr inbounds float, ptr %f0.host, i64 %933
  %935 = load float, ptr %934, align 4, !tbaa !6
  %936 = insertelement <8 x float> %932, float %935, i64 6
  %937 = extractelement <4 x i64> %924, i64 3
  %938 = getelementptr inbounds float, ptr %f0.host, i64 %937
  %939 = load float, ptr %938, align 4, !tbaa !6
  %940 = insertelement <8 x float> %936, float %939, i64 7
  %941 = fsub <8 x float> %t1973.us, %1717
  %942 = fmul <8 x float> %56, %941
  %943 = fadd <8 x float> %1717, %942
  %944 = fadd <8 x float> %943, %940
  %945 = fadd <8 x float> %900, %944
  %946 = fadd <8 x float> %810, %945
  %947 = fmul <8 x float> %946, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %948 = fadd <8 x float> %766, %947
  %949 = fadd <8 x float> %404, %948
  %950 = fmul <8 x float> %949, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %950, ptr %lsr.iv11.us, align 4, !tbaa !44
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not7.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not7.us, label %"end for f4.s0.v3.v3.us", label %"for f4.s0.v3.v3.us"

"end for f4.s0.v3.v3.us":                         ; preds = %"for f4.s0.v3.v3.us", %"for f4.s0.v6.us"
  br i1 %44, label %"for f4.s0.v3.v31.preheader.us", label %"end for f4.s0.v3.v32.us", !prof !5

"end for f4.s0.v3.v32.us":                        ; preds = %"for f4.s0.v3.v31.preheader.us", %"end for f4.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %31
  %.not5.us = icmp eq i64 %indvars.iv.next, %81
  br i1 %.not5.us, label %"end for f4.s0.v6.loopexit.us", label %"for f4.s0.v6.us"

"for f4.s0.v3.v31.preheader.us":                  ; preds = %"end for f4.s0.v3.v3.us"
  %951 = load <8 x float>, ptr %90, align 4, !tbaa !42
  %952 = load <8 x float>, ptr %92, align 4, !tbaa !42
  %t1997.us = shufflevector <8 x float> %951, <8 x float> %952, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %953 = load <8 x float>, ptr %94, align 4, !tbaa !42
  %954 = load <8 x float>, ptr %96, align 4, !tbaa !42
  %t1998.us = shufflevector <8 x float> %953, <8 x float> %954, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1999.us = shufflevector <8 x float> %953, <8 x float> %954, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %955 = load <8 x float>, ptr %98, align 4, !tbaa !42
  %956 = load <8 x float>, ptr %100, align 4, !tbaa !42
  %t2000.us = shufflevector <8 x float> %955, <8 x float> %956, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %957 = load <8 x float>, ptr %104, align 4, !tbaa !42
  %958 = load <8 x float>, ptr %106, align 4, !tbaa !42
  %t2002.us = shufflevector <8 x float> %957, <8 x float> %958, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %959 = load <8 x float>, ptr %108, align 4, !tbaa !42
  %960 = load <8 x float>, ptr %110, align 4, !tbaa !42
  %t2003.us = shufflevector <8 x float> %959, <8 x float> %960, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2004.us = shufflevector <8 x float> %959, <8 x float> %960, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %961 = load <8 x float>, ptr %112, align 4, !tbaa !42
  %962 = load <8 x float>, ptr %114, align 4, !tbaa !42
  %t2005.us = shufflevector <8 x float> %961, <8 x float> %962, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %963 = load <8 x float>, ptr %119, align 4, !tbaa !42
  %964 = load <8 x float>, ptr %121, align 4, !tbaa !42
  %t2007.us = shufflevector <8 x float> %963, <8 x float> %964, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %965 = load <8 x float>, ptr %123, align 4, !tbaa !42
  %966 = load <8 x float>, ptr %125, align 4, !tbaa !42
  %t2008.us = shufflevector <8 x float> %965, <8 x float> %966, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2009.us = shufflevector <8 x float> %965, <8 x float> %966, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %967 = load <8 x float>, ptr %127, align 4, !tbaa !42
  %968 = load <8 x float>, ptr %129, align 4, !tbaa !42
  %t2010.us = shufflevector <8 x float> %967, <8 x float> %968, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %969 = load <8 x float>, ptr %134, align 4, !tbaa !42
  %970 = load <8 x float>, ptr %136, align 4, !tbaa !42
  %t2012.us = shufflevector <8 x float> %969, <8 x float> %970, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %971 = load <8 x float>, ptr %138, align 4, !tbaa !42
  %972 = load <8 x float>, ptr %140, align 4, !tbaa !42
  %t2013.us = shufflevector <8 x float> %971, <8 x float> %972, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2014.us = shufflevector <8 x float> %971, <8 x float> %972, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %973 = load <8 x float>, ptr %142, align 4, !tbaa !42
  %974 = load <8 x float>, ptr %144, align 4, !tbaa !42
  %t2015.us = shufflevector <8 x float> %973, <8 x float> %974, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %975 = trunc i64 %indvars.iv to i32
  %976 = sitofp i32 %975 to float
  %t2016.s.us = fmul float %47, %976
  %.neg142 = mul i32 %975, -256
  %.neg143 = insertelement <8 x i32> undef, i32 %.neg142, i64 0
  %977 = fmul <8 x float> %50, %t2015.us
  %978 = fmul <8 x float> %977, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a342.us = fptosi <8 x float> %978 to <8 x i32>
  %a341.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a342.us)
  %979 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a341.us, <8 x i32> zeroinitializer)
  %980 = add <8 x i32> %54, %.neg143
  %981 = shufflevector <8 x i32> %980, <8 x i32> poison, <8 x i32> zeroinitializer
  %982 = add <8 x i32> %981, %979
  %983 = shufflevector <8 x i32> %982, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %984 = sext <4 x i32> %983 to <4 x i64>
  %985 = extractelement <4 x i64> %984, i64 0
  %986 = getelementptr inbounds float, ptr %f0.host, i64 %985
  %987 = load float, ptr %986, align 4, !tbaa !6
  %988 = insertelement <8 x float> undef, float %987, i64 0
  %989 = extractelement <4 x i64> %984, i64 1
  %990 = getelementptr inbounds float, ptr %f0.host, i64 %989
  %991 = load float, ptr %990, align 4, !tbaa !6
  %992 = insertelement <8 x float> %988, float %991, i64 1
  %993 = extractelement <4 x i64> %984, i64 2
  %994 = getelementptr inbounds float, ptr %f0.host, i64 %993
  %995 = load float, ptr %994, align 4, !tbaa !6
  %996 = insertelement <8 x float> %992, float %995, i64 2
  %997 = extractelement <4 x i64> %984, i64 3
  %998 = getelementptr inbounds float, ptr %f0.host, i64 %997
  %999 = load float, ptr %998, align 4, !tbaa !6
  %1000 = insertelement <8 x float> %996, float %999, i64 3
  %1001 = shufflevector <8 x i32> %982, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1002 = sext <4 x i32> %1001 to <4 x i64>
  %1003 = extractelement <4 x i64> %1002, i64 0
  %1004 = getelementptr inbounds float, ptr %f0.host, i64 %1003
  %1005 = load float, ptr %1004, align 4, !tbaa !6
  %1006 = insertelement <8 x float> %1000, float %1005, i64 4
  %1007 = extractelement <4 x i64> %1002, i64 1
  %1008 = getelementptr inbounds float, ptr %f0.host, i64 %1007
  %1009 = load float, ptr %1008, align 4, !tbaa !6
  %1010 = insertelement <8 x float> %1006, float %1009, i64 5
  %1011 = extractelement <4 x i64> %1002, i64 2
  %1012 = getelementptr inbounds float, ptr %f0.host, i64 %1011
  %1013 = load float, ptr %1012, align 4, !tbaa !6
  %1014 = insertelement <8 x float> %1010, float %1013, i64 6
  %1015 = extractelement <4 x i64> %1002, i64 3
  %1016 = getelementptr inbounds float, ptr %f0.host, i64 %1015
  %1017 = load float, ptr %1016, align 4, !tbaa !6
  %1018 = insertelement <8 x float> %1014, float %1017, i64 7
  %1019 = insertelement <8 x float> undef, float %t2016.s.us, i64 0
  %1020 = shufflevector <8 x float> %1019, <8 x float> undef, <8 x i32> zeroinitializer
  %1021 = fsub <8 x float> %t2015.us, %1020
  %1022 = fmul <8 x float> %56, %1021
  %1023 = fadd <8 x float> %1020, %1022
  %1024 = fadd <8 x float> %1023, %1018
  %1025 = fmul <8 x float> %50, %t2014.us
  %1026 = fmul <8 x float> %1025, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a344.us = fptosi <8 x float> %1026 to <8 x i32>
  %a343.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a344.us)
  %1027 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a343.us, <8 x i32> zeroinitializer)
  %1028 = add <8 x i32> %981, %1027
  %1029 = shufflevector <8 x i32> %1028, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1030 = sext <4 x i32> %1029 to <4 x i64>
  %1031 = extractelement <4 x i64> %1030, i64 0
  %1032 = getelementptr inbounds float, ptr %f0.host, i64 %1031
  %1033 = load float, ptr %1032, align 4, !tbaa !6
  %1034 = insertelement <8 x float> undef, float %1033, i64 0
  %1035 = extractelement <4 x i64> %1030, i64 1
  %1036 = getelementptr inbounds float, ptr %f0.host, i64 %1035
  %1037 = load float, ptr %1036, align 4, !tbaa !6
  %1038 = insertelement <8 x float> %1034, float %1037, i64 1
  %1039 = extractelement <4 x i64> %1030, i64 2
  %1040 = getelementptr inbounds float, ptr %f0.host, i64 %1039
  %1041 = load float, ptr %1040, align 4, !tbaa !6
  %1042 = insertelement <8 x float> %1038, float %1041, i64 2
  %1043 = extractelement <4 x i64> %1030, i64 3
  %1044 = getelementptr inbounds float, ptr %f0.host, i64 %1043
  %1045 = load float, ptr %1044, align 4, !tbaa !6
  %1046 = insertelement <8 x float> %1042, float %1045, i64 3
  %1047 = shufflevector <8 x i32> %1028, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1048 = sext <4 x i32> %1047 to <4 x i64>
  %1049 = extractelement <4 x i64> %1048, i64 0
  %1050 = getelementptr inbounds float, ptr %f0.host, i64 %1049
  %1051 = load float, ptr %1050, align 4, !tbaa !6
  %1052 = insertelement <8 x float> %1046, float %1051, i64 4
  %1053 = extractelement <4 x i64> %1048, i64 1
  %1054 = getelementptr inbounds float, ptr %f0.host, i64 %1053
  %1055 = load float, ptr %1054, align 4, !tbaa !6
  %1056 = insertelement <8 x float> %1052, float %1055, i64 5
  %1057 = extractelement <4 x i64> %1048, i64 2
  %1058 = getelementptr inbounds float, ptr %f0.host, i64 %1057
  %1059 = load float, ptr %1058, align 4, !tbaa !6
  %1060 = insertelement <8 x float> %1056, float %1059, i64 6
  %1061 = extractelement <4 x i64> %1048, i64 3
  %1062 = getelementptr inbounds float, ptr %f0.host, i64 %1061
  %1063 = load float, ptr %1062, align 4, !tbaa !6
  %1064 = insertelement <8 x float> %1060, float %1063, i64 7
  %1065 = fsub <8 x float> %t2014.us, %1020
  %1066 = fmul <8 x float> %56, %1065
  %1067 = fadd <8 x float> %1020, %1066
  %1068 = fadd <8 x float> %1067, %1064
  %1069 = fmul <8 x float> %50, %t2013.us
  %1070 = fmul <8 x float> %1069, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a346.us = fptosi <8 x float> %1070 to <8 x i32>
  %a345.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a346.us)
  %1071 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a345.us, <8 x i32> zeroinitializer)
  %1072 = add <8 x i32> %981, %1071
  %1073 = shufflevector <8 x i32> %1072, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1074 = sext <4 x i32> %1073 to <4 x i64>
  %1075 = extractelement <4 x i64> %1074, i64 0
  %1076 = getelementptr inbounds float, ptr %f0.host, i64 %1075
  %1077 = load float, ptr %1076, align 4, !tbaa !6
  %1078 = insertelement <8 x float> undef, float %1077, i64 0
  %1079 = extractelement <4 x i64> %1074, i64 1
  %1080 = getelementptr inbounds float, ptr %f0.host, i64 %1079
  %1081 = load float, ptr %1080, align 4, !tbaa !6
  %1082 = insertelement <8 x float> %1078, float %1081, i64 1
  %1083 = extractelement <4 x i64> %1074, i64 2
  %1084 = getelementptr inbounds float, ptr %f0.host, i64 %1083
  %1085 = load float, ptr %1084, align 4, !tbaa !6
  %1086 = insertelement <8 x float> %1082, float %1085, i64 2
  %1087 = extractelement <4 x i64> %1074, i64 3
  %1088 = getelementptr inbounds float, ptr %f0.host, i64 %1087
  %1089 = load float, ptr %1088, align 4, !tbaa !6
  %1090 = insertelement <8 x float> %1086, float %1089, i64 3
  %1091 = shufflevector <8 x i32> %1072, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1092 = sext <4 x i32> %1091 to <4 x i64>
  %1093 = extractelement <4 x i64> %1092, i64 0
  %1094 = getelementptr inbounds float, ptr %f0.host, i64 %1093
  %1095 = load float, ptr %1094, align 4, !tbaa !6
  %1096 = insertelement <8 x float> %1090, float %1095, i64 4
  %1097 = extractelement <4 x i64> %1092, i64 1
  %1098 = getelementptr inbounds float, ptr %f0.host, i64 %1097
  %1099 = load float, ptr %1098, align 4, !tbaa !6
  %1100 = insertelement <8 x float> %1096, float %1099, i64 5
  %1101 = extractelement <4 x i64> %1092, i64 2
  %1102 = getelementptr inbounds float, ptr %f0.host, i64 %1101
  %1103 = load float, ptr %1102, align 4, !tbaa !6
  %1104 = insertelement <8 x float> %1100, float %1103, i64 6
  %1105 = extractelement <4 x i64> %1092, i64 3
  %1106 = getelementptr inbounds float, ptr %f0.host, i64 %1105
  %1107 = load float, ptr %1106, align 4, !tbaa !6
  %1108 = insertelement <8 x float> %1104, float %1107, i64 7
  %1109 = fsub <8 x float> %t2013.us, %1020
  %1110 = fmul <8 x float> %56, %1109
  %1111 = fadd <8 x float> %1020, %1110
  %1112 = fadd <8 x float> %1111, %1108
  %1113 = fadd <8 x float> %1068, %1112
  %1114 = fmul <8 x float> %1113, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1115 = fmul <8 x float> %50, %t2012.us
  %1116 = fmul <8 x float> %1115, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a348.us = fptosi <8 x float> %1116 to <8 x i32>
  %a347.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a348.us)
  %1117 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a347.us, <8 x i32> zeroinitializer)
  %1118 = add <8 x i32> %981, %1117
  %1119 = shufflevector <8 x i32> %1118, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1120 = sext <4 x i32> %1119 to <4 x i64>
  %1121 = extractelement <4 x i64> %1120, i64 0
  %1122 = getelementptr inbounds float, ptr %f0.host, i64 %1121
  %1123 = load float, ptr %1122, align 4, !tbaa !6
  %1124 = insertelement <8 x float> undef, float %1123, i64 0
  %1125 = extractelement <4 x i64> %1120, i64 1
  %1126 = getelementptr inbounds float, ptr %f0.host, i64 %1125
  %1127 = load float, ptr %1126, align 4, !tbaa !6
  %1128 = insertelement <8 x float> %1124, float %1127, i64 1
  %1129 = extractelement <4 x i64> %1120, i64 2
  %1130 = getelementptr inbounds float, ptr %f0.host, i64 %1129
  %1131 = load float, ptr %1130, align 4, !tbaa !6
  %1132 = insertelement <8 x float> %1128, float %1131, i64 2
  %1133 = extractelement <4 x i64> %1120, i64 3
  %1134 = getelementptr inbounds float, ptr %f0.host, i64 %1133
  %1135 = load float, ptr %1134, align 4, !tbaa !6
  %1136 = insertelement <8 x float> %1132, float %1135, i64 3
  %1137 = shufflevector <8 x i32> %1118, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1138 = sext <4 x i32> %1137 to <4 x i64>
  %1139 = extractelement <4 x i64> %1138, i64 0
  %1140 = getelementptr inbounds float, ptr %f0.host, i64 %1139
  %1141 = load float, ptr %1140, align 4, !tbaa !6
  %1142 = insertelement <8 x float> %1136, float %1141, i64 4
  %1143 = extractelement <4 x i64> %1138, i64 1
  %1144 = getelementptr inbounds float, ptr %f0.host, i64 %1143
  %1145 = load float, ptr %1144, align 4, !tbaa !6
  %1146 = insertelement <8 x float> %1142, float %1145, i64 5
  %1147 = extractelement <4 x i64> %1138, i64 2
  %1148 = getelementptr inbounds float, ptr %f0.host, i64 %1147
  %1149 = load float, ptr %1148, align 4, !tbaa !6
  %1150 = insertelement <8 x float> %1146, float %1149, i64 6
  %1151 = extractelement <4 x i64> %1138, i64 3
  %1152 = getelementptr inbounds float, ptr %f0.host, i64 %1151
  %1153 = load float, ptr %1152, align 4, !tbaa !6
  %1154 = insertelement <8 x float> %1150, float %1153, i64 7
  %1155 = fsub <8 x float> %t2012.us, %1020
  %1156 = fmul <8 x float> %56, %1155
  %1157 = fadd <8 x float> %1020, %1156
  %1158 = fadd <8 x float> %1157, %1154
  %1159 = fadd <8 x float> %1114, %1158
  %1160 = fadd <8 x float> %1024, %1159
  %1161 = fmul <8 x float> %50, %t2010.us
  %1162 = fmul <8 x float> %1161, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a350.us = fptosi <8 x float> %1162 to <8 x i32>
  %a349.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a350.us)
  %1163 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a349.us, <8 x i32> zeroinitializer)
  %1164 = add <8 x i32> %981, %1163
  %1165 = shufflevector <8 x i32> %1164, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1166 = sext <4 x i32> %1165 to <4 x i64>
  %1167 = extractelement <4 x i64> %1166, i64 0
  %1168 = getelementptr inbounds float, ptr %f0.host, i64 %1167
  %1169 = load float, ptr %1168, align 4, !tbaa !6
  %1170 = extractelement <4 x i64> %1166, i64 1
  %1171 = getelementptr inbounds float, ptr %f0.host, i64 %1170
  %1172 = load float, ptr %1171, align 4, !tbaa !6
  %1173 = extractelement <4 x i64> %1166, i64 2
  %1174 = getelementptr inbounds float, ptr %f0.host, i64 %1173
  %1175 = load float, ptr %1174, align 4, !tbaa !6
  %1176 = extractelement <4 x i64> %1166, i64 3
  %1177 = getelementptr inbounds float, ptr %f0.host, i64 %1176
  %1178 = load float, ptr %1177, align 4, !tbaa !6
  %1179 = shufflevector <8 x i32> %1164, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1180 = sext <4 x i32> %1179 to <4 x i64>
  %1181 = extractelement <4 x i64> %1180, i64 0
  %1182 = getelementptr inbounds float, ptr %f0.host, i64 %1181
  %1183 = load float, ptr %1182, align 4, !tbaa !6
  %1184 = extractelement <4 x i64> %1180, i64 1
  %1185 = getelementptr inbounds float, ptr %f0.host, i64 %1184
  %1186 = load float, ptr %1185, align 4, !tbaa !6
  %1187 = extractelement <4 x i64> %1180, i64 2
  %1188 = getelementptr inbounds float, ptr %f0.host, i64 %1187
  %1189 = load float, ptr %1188, align 4, !tbaa !6
  %1190 = extractelement <4 x i64> %1180, i64 3
  %1191 = getelementptr inbounds float, ptr %f0.host, i64 %1190
  %1192 = load float, ptr %1191, align 4, !tbaa !6
  %1193 = fsub <8 x float> %t2010.us, %1020
  %1194 = fmul <8 x float> %56, %1193
  %1195 = fadd <8 x float> %1020, %1194
  %1196 = fmul <8 x float> %50, %t2009.us
  %1197 = fmul <8 x float> %1196, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a352.us = fptosi <8 x float> %1197 to <8 x i32>
  %a351.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a352.us)
  %1198 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a351.us, <8 x i32> zeroinitializer)
  %1199 = add <8 x i32> %981, %1198
  %1200 = shufflevector <8 x i32> %1199, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1201 = sext <4 x i32> %1200 to <4 x i64>
  %1202 = extractelement <4 x i64> %1201, i64 0
  %1203 = getelementptr inbounds float, ptr %f0.host, i64 %1202
  %1204 = load float, ptr %1203, align 4, !tbaa !6
  %1205 = insertelement <8 x float> undef, float %1204, i64 0
  %1206 = extractelement <4 x i64> %1201, i64 1
  %1207 = getelementptr inbounds float, ptr %f0.host, i64 %1206
  %1208 = load float, ptr %1207, align 4, !tbaa !6
  %1209 = insertelement <8 x float> %1205, float %1208, i64 1
  %1210 = extractelement <4 x i64> %1201, i64 2
  %1211 = getelementptr inbounds float, ptr %f0.host, i64 %1210
  %1212 = load float, ptr %1211, align 4, !tbaa !6
  %1213 = insertelement <8 x float> %1209, float %1212, i64 2
  %1214 = extractelement <4 x i64> %1201, i64 3
  %1215 = getelementptr inbounds float, ptr %f0.host, i64 %1214
  %1216 = load float, ptr %1215, align 4, !tbaa !6
  %1217 = insertelement <8 x float> %1213, float %1216, i64 3
  %1218 = shufflevector <8 x i32> %1199, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1219 = sext <4 x i32> %1218 to <4 x i64>
  %1220 = extractelement <4 x i64> %1219, i64 0
  %1221 = getelementptr inbounds float, ptr %f0.host, i64 %1220
  %1222 = load float, ptr %1221, align 4, !tbaa !6
  %1223 = insertelement <8 x float> %1217, float %1222, i64 4
  %1224 = extractelement <4 x i64> %1219, i64 1
  %1225 = getelementptr inbounds float, ptr %f0.host, i64 %1224
  %1226 = load float, ptr %1225, align 4, !tbaa !6
  %1227 = insertelement <8 x float> %1223, float %1226, i64 5
  %1228 = extractelement <4 x i64> %1219, i64 2
  %1229 = getelementptr inbounds float, ptr %f0.host, i64 %1228
  %1230 = load float, ptr %1229, align 4, !tbaa !6
  %1231 = insertelement <8 x float> %1227, float %1230, i64 6
  %1232 = extractelement <4 x i64> %1219, i64 3
  %1233 = getelementptr inbounds float, ptr %f0.host, i64 %1232
  %1234 = load float, ptr %1233, align 4, !tbaa !6
  %1235 = insertelement <8 x float> %1231, float %1234, i64 7
  %1236 = fsub <8 x float> %t2009.us, %1020
  %1237 = fmul <8 x float> %56, %1236
  %1238 = fadd <8 x float> %1020, %1237
  %1239 = fadd <8 x float> %1238, %1235
  %1240 = fmul <8 x float> %50, %t2008.us
  %1241 = fmul <8 x float> %1240, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a354.us = fptosi <8 x float> %1241 to <8 x i32>
  %a353.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a354.us)
  %1242 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a353.us, <8 x i32> zeroinitializer)
  %1243 = add <8 x i32> %981, %1242
  %1244 = shufflevector <8 x i32> %1243, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1245 = sext <4 x i32> %1244 to <4 x i64>
  %1246 = extractelement <4 x i64> %1245, i64 0
  %1247 = getelementptr inbounds float, ptr %f0.host, i64 %1246
  %1248 = load float, ptr %1247, align 4, !tbaa !6
  %1249 = insertelement <8 x float> undef, float %1248, i64 0
  %1250 = extractelement <4 x i64> %1245, i64 1
  %1251 = getelementptr inbounds float, ptr %f0.host, i64 %1250
  %1252 = load float, ptr %1251, align 4, !tbaa !6
  %1253 = insertelement <8 x float> %1249, float %1252, i64 1
  %1254 = extractelement <4 x i64> %1245, i64 2
  %1255 = getelementptr inbounds float, ptr %f0.host, i64 %1254
  %1256 = load float, ptr %1255, align 4, !tbaa !6
  %1257 = insertelement <8 x float> %1253, float %1256, i64 2
  %1258 = extractelement <4 x i64> %1245, i64 3
  %1259 = getelementptr inbounds float, ptr %f0.host, i64 %1258
  %1260 = load float, ptr %1259, align 4, !tbaa !6
  %1261 = insertelement <8 x float> %1257, float %1260, i64 3
  %1262 = shufflevector <8 x i32> %1243, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1263 = sext <4 x i32> %1262 to <4 x i64>
  %1264 = extractelement <4 x i64> %1263, i64 0
  %1265 = getelementptr inbounds float, ptr %f0.host, i64 %1264
  %1266 = load float, ptr %1265, align 4, !tbaa !6
  %1267 = insertelement <8 x float> %1261, float %1266, i64 4
  %1268 = extractelement <4 x i64> %1263, i64 1
  %1269 = getelementptr inbounds float, ptr %f0.host, i64 %1268
  %1270 = load float, ptr %1269, align 4, !tbaa !6
  %1271 = insertelement <8 x float> %1267, float %1270, i64 5
  %1272 = extractelement <4 x i64> %1263, i64 2
  %1273 = getelementptr inbounds float, ptr %f0.host, i64 %1272
  %1274 = load float, ptr %1273, align 4, !tbaa !6
  %1275 = insertelement <8 x float> %1271, float %1274, i64 6
  %1276 = extractelement <4 x i64> %1263, i64 3
  %1277 = getelementptr inbounds float, ptr %f0.host, i64 %1276
  %1278 = load float, ptr %1277, align 4, !tbaa !6
  %1279 = insertelement <8 x float> %1275, float %1278, i64 7
  %1280 = fsub <8 x float> %t2008.us, %1020
  %1281 = fmul <8 x float> %56, %1280
  %1282 = fadd <8 x float> %1020, %1281
  %1283 = fadd <8 x float> %1282, %1279
  %1284 = fadd <8 x float> %1239, %1283
  %1285 = fmul <8 x float> %1284, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1286 = fmul <8 x float> %50, %t2007.us
  %1287 = fmul <8 x float> %1286, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a356.us = fptosi <8 x float> %1287 to <8 x i32>
  %a355.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a356.us)
  %1288 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a355.us, <8 x i32> zeroinitializer)
  %1289 = add <8 x i32> %981, %1288
  %1290 = shufflevector <8 x i32> %1289, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1291 = sext <4 x i32> %1290 to <4 x i64>
  %1292 = extractelement <4 x i64> %1291, i64 0
  %1293 = getelementptr inbounds float, ptr %f0.host, i64 %1292
  %1294 = load float, ptr %1293, align 4, !tbaa !6
  %1295 = insertelement <8 x float> undef, float %1294, i64 0
  %1296 = extractelement <4 x i64> %1291, i64 1
  %1297 = getelementptr inbounds float, ptr %f0.host, i64 %1296
  %1298 = load float, ptr %1297, align 4, !tbaa !6
  %1299 = insertelement <8 x float> %1295, float %1298, i64 1
  %1300 = extractelement <4 x i64> %1291, i64 2
  %1301 = getelementptr inbounds float, ptr %f0.host, i64 %1300
  %1302 = load float, ptr %1301, align 4, !tbaa !6
  %1303 = insertelement <8 x float> %1299, float %1302, i64 2
  %1304 = extractelement <4 x i64> %1291, i64 3
  %1305 = getelementptr inbounds float, ptr %f0.host, i64 %1304
  %1306 = load float, ptr %1305, align 4, !tbaa !6
  %1307 = insertelement <8 x float> %1303, float %1306, i64 3
  %1308 = shufflevector <8 x i32> %1289, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1309 = sext <4 x i32> %1308 to <4 x i64>
  %1310 = extractelement <4 x i64> %1309, i64 0
  %1311 = getelementptr inbounds float, ptr %f0.host, i64 %1310
  %1312 = load float, ptr %1311, align 4, !tbaa !6
  %1313 = insertelement <8 x float> %1307, float %1312, i64 4
  %1314 = extractelement <4 x i64> %1309, i64 1
  %1315 = getelementptr inbounds float, ptr %f0.host, i64 %1314
  %1316 = load float, ptr %1315, align 4, !tbaa !6
  %1317 = insertelement <8 x float> %1313, float %1316, i64 5
  %1318 = extractelement <4 x i64> %1309, i64 2
  %1319 = getelementptr inbounds float, ptr %f0.host, i64 %1318
  %1320 = load float, ptr %1319, align 4, !tbaa !6
  %1321 = insertelement <8 x float> %1317, float %1320, i64 6
  %1322 = extractelement <4 x i64> %1309, i64 3
  %1323 = getelementptr inbounds float, ptr %f0.host, i64 %1322
  %1324 = load float, ptr %1323, align 4, !tbaa !6
  %1325 = insertelement <8 x float> %1321, float %1324, i64 7
  %1326 = fsub <8 x float> %t2007.us, %1020
  %1327 = fmul <8 x float> %56, %1326
  %1328 = fadd <8 x float> %1020, %1327
  %1329 = fadd <8 x float> %1328, %1325
  %1330 = fadd <8 x float> %1285, %1329
  %1331 = fmul <8 x float> %50, %t2005.us
  %1332 = fmul <8 x float> %1331, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a358.us = fptosi <8 x float> %1332 to <8 x i32>
  %a357.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a358.us)
  %1333 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a357.us, <8 x i32> zeroinitializer)
  %1334 = add <8 x i32> %981, %1333
  %1335 = shufflevector <8 x i32> %1334, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1336 = sext <4 x i32> %1335 to <4 x i64>
  %1337 = extractelement <4 x i64> %1336, i64 0
  %1338 = getelementptr inbounds float, ptr %f0.host, i64 %1337
  %1339 = load float, ptr %1338, align 4, !tbaa !6
  %1340 = extractelement <4 x i64> %1336, i64 1
  %1341 = getelementptr inbounds float, ptr %f0.host, i64 %1340
  %1342 = load float, ptr %1341, align 4, !tbaa !6
  %1343 = extractelement <4 x i64> %1336, i64 2
  %1344 = getelementptr inbounds float, ptr %f0.host, i64 %1343
  %1345 = load float, ptr %1344, align 4, !tbaa !6
  %1346 = extractelement <4 x i64> %1336, i64 3
  %1347 = getelementptr inbounds float, ptr %f0.host, i64 %1346
  %1348 = load float, ptr %1347, align 4, !tbaa !6
  %1349 = shufflevector <8 x i32> %1334, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1350 = sext <4 x i32> %1349 to <4 x i64>
  %1351 = extractelement <4 x i64> %1350, i64 0
  %1352 = getelementptr inbounds float, ptr %f0.host, i64 %1351
  %1353 = load float, ptr %1352, align 4, !tbaa !6
  %1354 = extractelement <4 x i64> %1350, i64 1
  %1355 = getelementptr inbounds float, ptr %f0.host, i64 %1354
  %1356 = load float, ptr %1355, align 4, !tbaa !6
  %1357 = extractelement <4 x i64> %1350, i64 2
  %1358 = getelementptr inbounds float, ptr %f0.host, i64 %1357
  %1359 = load float, ptr %1358, align 4, !tbaa !6
  %1360 = extractelement <4 x i64> %1350, i64 3
  %1361 = getelementptr inbounds float, ptr %f0.host, i64 %1360
  %1362 = load float, ptr %1361, align 4, !tbaa !6
  %1363 = fsub <8 x float> %t2005.us, %1020
  %1364 = fmul <8 x float> %56, %1363
  %1365 = fadd <8 x float> %1020, %1364
  %1366 = fmul <8 x float> %50, %t2004.us
  %1367 = fmul <8 x float> %1366, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a360.us = fptosi <8 x float> %1367 to <8 x i32>
  %a359.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a360.us)
  %1368 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a359.us, <8 x i32> zeroinitializer)
  %1369 = add <8 x i32> %981, %1368
  %1370 = shufflevector <8 x i32> %1369, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1371 = sext <4 x i32> %1370 to <4 x i64>
  %1372 = extractelement <4 x i64> %1371, i64 0
  %1373 = getelementptr inbounds float, ptr %f0.host, i64 %1372
  %1374 = load float, ptr %1373, align 4, !tbaa !6
  %1375 = extractelement <4 x i64> %1371, i64 1
  %1376 = getelementptr inbounds float, ptr %f0.host, i64 %1375
  %1377 = load float, ptr %1376, align 4, !tbaa !6
  %1378 = extractelement <4 x i64> %1371, i64 2
  %1379 = getelementptr inbounds float, ptr %f0.host, i64 %1378
  %1380 = load float, ptr %1379, align 4, !tbaa !6
  %1381 = extractelement <4 x i64> %1371, i64 3
  %1382 = getelementptr inbounds float, ptr %f0.host, i64 %1381
  %1383 = load float, ptr %1382, align 4, !tbaa !6
  %1384 = shufflevector <8 x i32> %1369, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1385 = sext <4 x i32> %1384 to <4 x i64>
  %1386 = fsub <8 x float> %t2004.us, %1020
  %1387 = fmul <8 x float> %56, %1386
  %1388 = fmul <8 x float> %50, %t2003.us
  %1389 = fmul <8 x float> %1388, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a362.us = fptosi <8 x float> %1389 to <8 x i32>
  %a361.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a362.us)
  %1390 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a361.us, <8 x i32> zeroinitializer)
  %1391 = add <8 x i32> %981, %1390
  %1392 = shufflevector <8 x i32> %1391, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1393 = sext <4 x i32> %1392 to <4 x i64>
  %1394 = shufflevector <8 x i32> %1391, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1395 = sext <4 x i32> %1394 to <4 x i64>
  %1396 = fsub <8 x float> %t2003.us, %1020
  %1397 = fmul <8 x float> %56, %1396
  %1398 = fmul <8 x float> %50, %t2002.us
  %1399 = fmul <8 x float> %1398, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a364.us = fptosi <8 x float> %1399 to <8 x i32>
  %a363.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a364.us)
  %1400 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a363.us, <8 x i32> zeroinitializer)
  %1401 = add <8 x i32> %981, %1400
  %1402 = shufflevector <8 x i32> %1401, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1403 = sext <4 x i32> %1402 to <4 x i64>
  %1404 = shufflevector <8 x i32> %1401, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1405 = sext <4 x i32> %1404 to <4 x i64>
  %1406 = fsub <8 x float> %t2002.us, %1020
  %1407 = fmul <8 x float> %56, %1406
  %1408 = fmul <8 x float> %50, %t2000.us
  %1409 = fmul <8 x float> %1408, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a366.us = fptosi <8 x float> %1409 to <8 x i32>
  %a365.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a366.us)
  %1410 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a365.us, <8 x i32> zeroinitializer)
  %1411 = add <8 x i32> %981, %1410
  %1412 = shufflevector <8 x i32> %1411, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1413 = sext <4 x i32> %1412 to <4 x i64>
  %1414 = shufflevector <8 x i32> %1411, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1415 = sext <4 x i32> %1414 to <4 x i64>
  %1416 = fsub <8 x float> %t2000.us, %1020
  %1417 = fmul <8 x float> %56, %1416
  %1418 = fmul <8 x float> %50, %t1999.us
  %1419 = fmul <8 x float> %1418, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a368.us = fptosi <8 x float> %1419 to <8 x i32>
  %a367.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a368.us)
  %1420 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a367.us, <8 x i32> zeroinitializer)
  %1421 = add <8 x i32> %981, %1420
  %1422 = shufflevector <8 x i32> %1421, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1423 = sext <4 x i32> %1422 to <4 x i64>
  %1424 = shufflevector <8 x i32> %1421, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1425 = sext <4 x i32> %1424 to <4 x i64>
  %1426 = fsub <8 x float> %t1999.us, %1020
  %1427 = fmul <8 x float> %56, %1426
  %1428 = fmul <8 x float> %50, %t1998.us
  %1429 = fmul <8 x float> %1428, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a370.us = fptosi <8 x float> %1429 to <8 x i32>
  %a369.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a370.us)
  %1430 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a369.us, <8 x i32> zeroinitializer)
  %1431 = add <8 x i32> %981, %1430
  %1432 = shufflevector <8 x i32> %1431, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1433 = sext <4 x i32> %1432 to <4 x i64>
  %1434 = shufflevector <8 x i32> %1431, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1435 = sext <4 x i32> %1434 to <4 x i64>
  %1436 = fsub <8 x float> %t1998.us, %1020
  %1437 = fmul <8 x float> %56, %1436
  %1438 = fmul <8 x float> %50, %t1997.us
  %1439 = fmul <8 x float> %1438, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a372.us = fptosi <8 x float> %1439 to <8 x i32>
  %a371.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a372.us)
  %1440 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a371.us, <8 x i32> zeroinitializer)
  %1441 = add <8 x i32> %981, %1440
  %1442 = shufflevector <8 x i32> %1441, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1443 = sext <4 x i32> %1442 to <4 x i64>
  %1444 = shufflevector <8 x i32> %1441, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1445 = sext <4 x i32> %1444 to <4 x i64>
  %1446 = fsub <8 x float> %t1997.us, %1020
  %1447 = fmul <8 x float> %56, %1446
  %1448 = sub nuw nsw i64 %indvars.iv, %smax
  %1449 = mul nsw i64 %1448, %28
  %1450 = add i64 %147, %1449
  %1451 = fmul <8 x float> %1160, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1452 = insertelement <8 x float> undef, float %1169, i64 0
  %1453 = insertelement <8 x float> %1452, float %1172, i64 1
  %1454 = insertelement <8 x float> %1453, float %1175, i64 2
  %1455 = insertelement <8 x float> %1454, float %1178, i64 3
  %1456 = insertelement <8 x float> %1455, float %1183, i64 4
  %1457 = insertelement <8 x float> %1456, float %1186, i64 5
  %1458 = insertelement <8 x float> %1457, float %1189, i64 6
  %1459 = insertelement <8 x float> %1458, float %1192, i64 7
  %1460 = fadd <8 x float> %1195, %1459
  %1461 = fadd <8 x float> %1460, %1330
  %1462 = insertelement <8 x float> undef, float %1339, i64 0
  %1463 = insertelement <8 x float> %1462, float %1342, i64 1
  %1464 = insertelement <8 x float> %1463, float %1345, i64 2
  %1465 = insertelement <8 x float> %1464, float %1348, i64 3
  %1466 = insertelement <8 x float> %1465, float %1353, i64 4
  %1467 = insertelement <8 x float> %1466, float %1356, i64 5
  %1468 = insertelement <8 x float> %1467, float %1359, i64 6
  %1469 = insertelement <8 x float> %1468, float %1362, i64 7
  %1470 = fadd <8 x float> %1365, %1469
  %1471 = insertelement <8 x float> undef, float %1374, i64 0
  %1472 = insertelement <8 x float> %1471, float %1377, i64 1
  %1473 = insertelement <8 x float> %1472, float %1380, i64 2
  %1474 = insertelement <8 x float> %1473, float %1383, i64 3
  %1475 = extractelement <4 x i64> %1385, i64 0
  %1476 = getelementptr inbounds float, ptr %f0.host, i64 %1475
  %1477 = extractelement <4 x i64> %1385, i64 1
  %1478 = getelementptr inbounds float, ptr %f0.host, i64 %1477
  %1479 = extractelement <4 x i64> %1385, i64 2
  %1480 = getelementptr inbounds float, ptr %f0.host, i64 %1479
  %1481 = extractelement <4 x i64> %1385, i64 3
  %1482 = getelementptr inbounds float, ptr %f0.host, i64 %1481
  %1483 = fadd <8 x float> %1020, %1387
  %1484 = extractelement <4 x i64> %1393, i64 0
  %1485 = getelementptr inbounds float, ptr %f0.host, i64 %1484
  %1486 = extractelement <4 x i64> %1393, i64 1
  %1487 = getelementptr inbounds float, ptr %f0.host, i64 %1486
  %1488 = extractelement <4 x i64> %1393, i64 2
  %1489 = getelementptr inbounds float, ptr %f0.host, i64 %1488
  %1490 = extractelement <4 x i64> %1393, i64 3
  %1491 = getelementptr inbounds float, ptr %f0.host, i64 %1490
  %1492 = extractelement <4 x i64> %1395, i64 0
  %1493 = getelementptr inbounds float, ptr %f0.host, i64 %1492
  %1494 = extractelement <4 x i64> %1395, i64 1
  %1495 = getelementptr inbounds float, ptr %f0.host, i64 %1494
  %1496 = extractelement <4 x i64> %1395, i64 2
  %1497 = getelementptr inbounds float, ptr %f0.host, i64 %1496
  %1498 = extractelement <4 x i64> %1395, i64 3
  %1499 = getelementptr inbounds float, ptr %f0.host, i64 %1498
  %1500 = fadd <8 x float> %1020, %1397
  %1501 = extractelement <4 x i64> %1403, i64 0
  %1502 = getelementptr inbounds float, ptr %f0.host, i64 %1501
  %1503 = extractelement <4 x i64> %1403, i64 1
  %1504 = getelementptr inbounds float, ptr %f0.host, i64 %1503
  %1505 = extractelement <4 x i64> %1403, i64 2
  %1506 = getelementptr inbounds float, ptr %f0.host, i64 %1505
  %1507 = extractelement <4 x i64> %1403, i64 3
  %1508 = getelementptr inbounds float, ptr %f0.host, i64 %1507
  %1509 = extractelement <4 x i64> %1405, i64 0
  %1510 = getelementptr inbounds float, ptr %f0.host, i64 %1509
  %1511 = extractelement <4 x i64> %1405, i64 1
  %1512 = getelementptr inbounds float, ptr %f0.host, i64 %1511
  %1513 = extractelement <4 x i64> %1405, i64 2
  %1514 = getelementptr inbounds float, ptr %f0.host, i64 %1513
  %1515 = extractelement <4 x i64> %1405, i64 3
  %1516 = getelementptr inbounds float, ptr %f0.host, i64 %1515
  %1517 = fadd <8 x float> %1020, %1407
  %1518 = extractelement <4 x i64> %1413, i64 0
  %1519 = getelementptr inbounds float, ptr %f0.host, i64 %1518
  %1520 = extractelement <4 x i64> %1413, i64 1
  %1521 = getelementptr inbounds float, ptr %f0.host, i64 %1520
  %1522 = extractelement <4 x i64> %1413, i64 2
  %1523 = getelementptr inbounds float, ptr %f0.host, i64 %1522
  %1524 = extractelement <4 x i64> %1413, i64 3
  %1525 = getelementptr inbounds float, ptr %f0.host, i64 %1524
  %1526 = extractelement <4 x i64> %1415, i64 0
  %1527 = getelementptr inbounds float, ptr %f0.host, i64 %1526
  %1528 = extractelement <4 x i64> %1415, i64 1
  %1529 = getelementptr inbounds float, ptr %f0.host, i64 %1528
  %1530 = extractelement <4 x i64> %1415, i64 2
  %1531 = getelementptr inbounds float, ptr %f0.host, i64 %1530
  %1532 = extractelement <4 x i64> %1415, i64 3
  %1533 = getelementptr inbounds float, ptr %f0.host, i64 %1532
  %1534 = fadd <8 x float> %1020, %1417
  %1535 = extractelement <4 x i64> %1423, i64 0
  %1536 = getelementptr inbounds float, ptr %f0.host, i64 %1535
  %1537 = extractelement <4 x i64> %1423, i64 1
  %1538 = getelementptr inbounds float, ptr %f0.host, i64 %1537
  %1539 = extractelement <4 x i64> %1423, i64 2
  %1540 = getelementptr inbounds float, ptr %f0.host, i64 %1539
  %1541 = extractelement <4 x i64> %1423, i64 3
  %1542 = getelementptr inbounds float, ptr %f0.host, i64 %1541
  %1543 = extractelement <4 x i64> %1425, i64 0
  %1544 = getelementptr inbounds float, ptr %f0.host, i64 %1543
  %1545 = extractelement <4 x i64> %1425, i64 1
  %1546 = getelementptr inbounds float, ptr %f0.host, i64 %1545
  %1547 = extractelement <4 x i64> %1425, i64 2
  %1548 = getelementptr inbounds float, ptr %f0.host, i64 %1547
  %1549 = extractelement <4 x i64> %1425, i64 3
  %1550 = getelementptr inbounds float, ptr %f0.host, i64 %1549
  %1551 = fadd <8 x float> %1020, %1427
  %1552 = extractelement <4 x i64> %1433, i64 0
  %1553 = getelementptr inbounds float, ptr %f0.host, i64 %1552
  %1554 = extractelement <4 x i64> %1433, i64 1
  %1555 = getelementptr inbounds float, ptr %f0.host, i64 %1554
  %1556 = extractelement <4 x i64> %1433, i64 2
  %1557 = getelementptr inbounds float, ptr %f0.host, i64 %1556
  %1558 = extractelement <4 x i64> %1433, i64 3
  %1559 = getelementptr inbounds float, ptr %f0.host, i64 %1558
  %1560 = extractelement <4 x i64> %1435, i64 0
  %1561 = getelementptr inbounds float, ptr %f0.host, i64 %1560
  %1562 = extractelement <4 x i64> %1435, i64 1
  %1563 = getelementptr inbounds float, ptr %f0.host, i64 %1562
  %1564 = extractelement <4 x i64> %1435, i64 2
  %1565 = getelementptr inbounds float, ptr %f0.host, i64 %1564
  %1566 = extractelement <4 x i64> %1435, i64 3
  %1567 = getelementptr inbounds float, ptr %f0.host, i64 %1566
  %1568 = fadd <8 x float> %1020, %1437
  %1569 = extractelement <4 x i64> %1443, i64 0
  %1570 = getelementptr inbounds float, ptr %f0.host, i64 %1569
  %1571 = extractelement <4 x i64> %1443, i64 1
  %1572 = getelementptr inbounds float, ptr %f0.host, i64 %1571
  %1573 = extractelement <4 x i64> %1443, i64 2
  %1574 = getelementptr inbounds float, ptr %f0.host, i64 %1573
  %1575 = extractelement <4 x i64> %1443, i64 3
  %1576 = getelementptr inbounds float, ptr %f0.host, i64 %1575
  %1577 = extractelement <4 x i64> %1445, i64 0
  %1578 = getelementptr inbounds float, ptr %f0.host, i64 %1577
  %1579 = extractelement <4 x i64> %1445, i64 1
  %1580 = getelementptr inbounds float, ptr %f0.host, i64 %1579
  %1581 = extractelement <4 x i64> %1445, i64 2
  %1582 = getelementptr inbounds float, ptr %f0.host, i64 %1581
  %1583 = extractelement <4 x i64> %1445, i64 3
  %1584 = getelementptr inbounds float, ptr %f0.host, i64 %1583
  %1585 = fadd <8 x float> %1020, %1447
  %1586 = getelementptr inbounds float, ptr %f4.host, i64 %1450
  %1587 = load float, ptr %1476, align 4, !tbaa !6
  %1588 = insertelement <8 x float> %1474, float %1587, i64 4
  %1589 = load float, ptr %1478, align 4, !tbaa !6
  %1590 = insertelement <8 x float> %1588, float %1589, i64 5
  %1591 = load float, ptr %1480, align 4, !tbaa !6
  %1592 = insertelement <8 x float> %1590, float %1591, i64 6
  %1593 = load float, ptr %1482, align 4, !tbaa !6
  %1594 = insertelement <8 x float> %1592, float %1593, i64 7
  %1595 = fadd <8 x float> %1483, %1594
  %1596 = load float, ptr %1485, align 4, !tbaa !6
  %1597 = insertelement <8 x float> undef, float %1596, i64 0
  %1598 = load float, ptr %1487, align 4, !tbaa !6
  %1599 = insertelement <8 x float> %1597, float %1598, i64 1
  %1600 = load float, ptr %1489, align 4, !tbaa !6
  %1601 = insertelement <8 x float> %1599, float %1600, i64 2
  %1602 = load float, ptr %1491, align 4, !tbaa !6
  %1603 = insertelement <8 x float> %1601, float %1602, i64 3
  %1604 = load float, ptr %1493, align 4, !tbaa !6
  %1605 = insertelement <8 x float> %1603, float %1604, i64 4
  %1606 = load float, ptr %1495, align 4, !tbaa !6
  %1607 = insertelement <8 x float> %1605, float %1606, i64 5
  %1608 = load float, ptr %1497, align 4, !tbaa !6
  %1609 = insertelement <8 x float> %1607, float %1608, i64 6
  %1610 = load float, ptr %1499, align 4, !tbaa !6
  %1611 = insertelement <8 x float> %1609, float %1610, i64 7
  %1612 = fadd <8 x float> %1500, %1611
  %1613 = fadd <8 x float> %1595, %1612
  %1614 = fmul <8 x float> %1613, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1615 = load float, ptr %1502, align 4, !tbaa !6
  %1616 = insertelement <8 x float> undef, float %1615, i64 0
  %1617 = load float, ptr %1504, align 4, !tbaa !6
  %1618 = insertelement <8 x float> %1616, float %1617, i64 1
  %1619 = load float, ptr %1506, align 4, !tbaa !6
  %1620 = insertelement <8 x float> %1618, float %1619, i64 2
  %1621 = load float, ptr %1508, align 4, !tbaa !6
  %1622 = insertelement <8 x float> %1620, float %1621, i64 3
  %1623 = load float, ptr %1510, align 4, !tbaa !6
  %1624 = insertelement <8 x float> %1622, float %1623, i64 4
  %1625 = load float, ptr %1512, align 4, !tbaa !6
  %1626 = insertelement <8 x float> %1624, float %1625, i64 5
  %1627 = load float, ptr %1514, align 4, !tbaa !6
  %1628 = insertelement <8 x float> %1626, float %1627, i64 6
  %1629 = load float, ptr %1516, align 4, !tbaa !6
  %1630 = insertelement <8 x float> %1628, float %1629, i64 7
  %1631 = fadd <8 x float> %1517, %1630
  %1632 = fadd <8 x float> %1614, %1631
  %1633 = fadd <8 x float> %1470, %1632
  %1634 = fadd <8 x float> %1461, %1633
  %1635 = fmul <8 x float> %1634, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1636 = load float, ptr %1519, align 4, !tbaa !6
  %1637 = insertelement <8 x float> undef, float %1636, i64 0
  %1638 = load float, ptr %1521, align 4, !tbaa !6
  %1639 = insertelement <8 x float> %1637, float %1638, i64 1
  %1640 = load float, ptr %1523, align 4, !tbaa !6
  %1641 = insertelement <8 x float> %1639, float %1640, i64 2
  %1642 = load float, ptr %1525, align 4, !tbaa !6
  %1643 = insertelement <8 x float> %1641, float %1642, i64 3
  %1644 = load float, ptr %1527, align 4, !tbaa !6
  %1645 = insertelement <8 x float> %1643, float %1644, i64 4
  %1646 = load float, ptr %1529, align 4, !tbaa !6
  %1647 = insertelement <8 x float> %1645, float %1646, i64 5
  %1648 = load float, ptr %1531, align 4, !tbaa !6
  %1649 = insertelement <8 x float> %1647, float %1648, i64 6
  %1650 = load float, ptr %1533, align 4, !tbaa !6
  %1651 = insertelement <8 x float> %1649, float %1650, i64 7
  %1652 = fadd <8 x float> %1534, %1651
  %1653 = load float, ptr %1536, align 4, !tbaa !6
  %1654 = insertelement <8 x float> undef, float %1653, i64 0
  %1655 = load float, ptr %1538, align 4, !tbaa !6
  %1656 = insertelement <8 x float> %1654, float %1655, i64 1
  %1657 = load float, ptr %1540, align 4, !tbaa !6
  %1658 = insertelement <8 x float> %1656, float %1657, i64 2
  %1659 = load float, ptr %1542, align 4, !tbaa !6
  %1660 = insertelement <8 x float> %1658, float %1659, i64 3
  %1661 = load float, ptr %1544, align 4, !tbaa !6
  %1662 = insertelement <8 x float> %1660, float %1661, i64 4
  %1663 = load float, ptr %1546, align 4, !tbaa !6
  %1664 = insertelement <8 x float> %1662, float %1663, i64 5
  %1665 = load float, ptr %1548, align 4, !tbaa !6
  %1666 = insertelement <8 x float> %1664, float %1665, i64 6
  %1667 = load float, ptr %1550, align 4, !tbaa !6
  %1668 = insertelement <8 x float> %1666, float %1667, i64 7
  %1669 = fadd <8 x float> %1551, %1668
  %1670 = load float, ptr %1553, align 4, !tbaa !6
  %1671 = insertelement <8 x float> undef, float %1670, i64 0
  %1672 = load float, ptr %1555, align 4, !tbaa !6
  %1673 = insertelement <8 x float> %1671, float %1672, i64 1
  %1674 = load float, ptr %1557, align 4, !tbaa !6
  %1675 = insertelement <8 x float> %1673, float %1674, i64 2
  %1676 = load float, ptr %1559, align 4, !tbaa !6
  %1677 = insertelement <8 x float> %1675, float %1676, i64 3
  %1678 = load float, ptr %1561, align 4, !tbaa !6
  %1679 = insertelement <8 x float> %1677, float %1678, i64 4
  %1680 = load float, ptr %1563, align 4, !tbaa !6
  %1681 = insertelement <8 x float> %1679, float %1680, i64 5
  %1682 = load float, ptr %1565, align 4, !tbaa !6
  %1683 = insertelement <8 x float> %1681, float %1682, i64 6
  %1684 = load float, ptr %1567, align 4, !tbaa !6
  %1685 = insertelement <8 x float> %1683, float %1684, i64 7
  %1686 = fadd <8 x float> %1568, %1685
  %1687 = fadd <8 x float> %1669, %1686
  %1688 = fmul <8 x float> %1687, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1689 = load float, ptr %1570, align 4, !tbaa !6
  %1690 = insertelement <8 x float> undef, float %1689, i64 0
  %1691 = load float, ptr %1572, align 4, !tbaa !6
  %1692 = insertelement <8 x float> %1690, float %1691, i64 1
  %1693 = load float, ptr %1574, align 4, !tbaa !6
  %1694 = insertelement <8 x float> %1692, float %1693, i64 2
  %1695 = load float, ptr %1576, align 4, !tbaa !6
  %1696 = insertelement <8 x float> %1694, float %1695, i64 3
  %1697 = load float, ptr %1578, align 4, !tbaa !6
  %1698 = insertelement <8 x float> %1696, float %1697, i64 4
  %1699 = load float, ptr %1580, align 4, !tbaa !6
  %1700 = insertelement <8 x float> %1698, float %1699, i64 5
  %1701 = load float, ptr %1582, align 4, !tbaa !6
  %1702 = insertelement <8 x float> %1700, float %1701, i64 6
  %1703 = load float, ptr %1584, align 4, !tbaa !6
  %1704 = insertelement <8 x float> %1702, float %1703, i64 7
  %1705 = fadd <8 x float> %1585, %1704
  %1706 = fadd <8 x float> %1688, %1705
  %1707 = fadd <8 x float> %1652, %1706
  %1708 = fmul <8 x float> %1707, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1709 = fadd <8 x float> %1635, %1708
  %1710 = fadd <8 x float> %1451, %1709
  %1711 = fmul <8 x float> %1710, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %1711, ptr %1586, align 4, !tbaa !44
  br label %"end for f4.s0.v3.v32.us"

"for f4.s0.v3.v3.preheader.us":                   ; preds = %"for f4.s0.v6.us"
  %1712 = trunc i64 %indvars.iv to i32
  %1713 = sitofp i32 %1712 to float
  %t1992.s.us = fmul float %47, %1713
  %.neg144 = mul i32 %1712, -256
  %.neg145 = insertelement <8 x i32> undef, i32 %.neg144, i64 0
  %1714 = add <8 x i32> %54, %.neg145
  %1715 = shufflevector <8 x i32> %1714, <8 x i32> poison, <8 x i32> zeroinitializer
  %1716 = insertelement <8 x float> undef, float %t1992.s.us, i64 0
  %1717 = shufflevector <8 x float> %1716, <8 x float> undef, <8 x i32> zeroinitializer
  br label %"for f4.s0.v3.v3.us"

"end for f4.s0.v6.loopexit.us":                   ; preds = %"end for f4.s0.v3.v32.us"
  %indvars.iv.next150 = add nuw nsw i64 %indvars.iv149, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %27
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %35
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %35
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %35
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %35
  %.not.us = icmp eq i64 %indvars.iv.next150, 8
  br i1 %.not.us, label %destructor_block, label %"for f4.s0.v4.v296.us"

destructor_block:                                 ; preds = %"end for f4.s0.v6.loopexit.us", %"for f4.s0.v4.v296.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f5.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f5.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f5.s0.v4.v316.preheader":
  %a433 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 1
  %f4.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 3
  %f4.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 4
  %f4.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 5
  %f5.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f5.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 6
  %f5.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 7
  %f5.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 8
  %f5.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 9
  %f5.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 10
  %f5.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f5.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 11
  %f5.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f5.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 12
  %f5.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f5.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 13
  %f5.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f5.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 14
  %f4.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 16
  %f5.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f5.s0.v4.v4, 3
  %a426 = add nsw i32 %f5.s0.v4.min, %19
  %b428 = add nsw i32 %f5.s0.v4.max, -7
  %f5.s0.v4.v316.base = tail call i32 @llvm.smin.i32(i32 %b428, i32 %a426)
  %20 = sext i32 %f5.s0.v4.v316.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a433, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f5.s0.v3.min, 1
  %28 = shl i32 %f4.stride.1, 1
  %29 = icmp sgt i32 %f5.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f5.s0.v3.max, %f5.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a428 = ashr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a428, i32 0
  %34 = icmp sgt i32 %33, 0
  %35 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %35, %33
  %36 = shl nsw i32 %f5.s0.v3.max, 1
  %37 = sub nsw i32 %36, %f4.v3.min_realized
  %38 = add nsw i64 %4, -7
  %39 = sub nsw i64 %38, %14
  br i1 %29, label %"for f5.s0.v4.v316.us.preheader", label %destructor_block, !prof !5

"for f5.s0.v4.v316.us.preheader":                 ; preds = %"for f5.s0.v4.v316.preheader"
  %40 = add nuw i32 %24, 2
  %41 = add i32 %40, %f5.s0.v6.loop_extent.s
  %42 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 2
  %f4.v3.extent_realized.s = load i32, ptr %42, align 4
  %43 = add nsw i32 %f4.v3.extent_realized.s, 1
  %44 = shl i32 %f5.s0.v4.v316.base, 1
  %45 = xor i32 %f4.v4.min_realized, -1
  %46 = add i32 %44, %45
  %47 = mul i32 %46, %f4.stride.1
  %48 = sub i32 %47, %f4.v3.min_realized
  %reass.sub = sub i32 %44, %f4.v4.min_realized
  %49 = mul i32 %reass.sub, %f4.stride.1
  %50 = sub i32 %49, %f4.v3.min_realized
  %51 = add i32 %reass.sub, 1
  %52 = mul i32 %51, %f4.stride.1
  %53 = sub i32 %52, %f4.v3.min_realized
  %54 = add i32 %reass.sub, 2
  %55 = mul i32 %54, %f4.stride.1
  %56 = sub i32 %55, %f4.v3.min_realized
  %57 = sext i32 %f5.s0.v3.min to i64
  %58 = sub nsw i64 %57, %14
  %59 = mul nsw i64 %21, %10
  %60 = add i64 %58, %59
  %scevgep = getelementptr float, ptr %f5.host, i64 %60
  %61 = zext i32 %24 to i64
  %62 = sext i32 %43 to i64
  %zext = zext i32 %41 to i64
  br label %"for f5.s0.v4.v316.us"

"for f5.s0.v4.v316.us":                           ; preds = %"for f5.s0.v4.v316.us.preheader", %"end for f5.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f5.s0.v4.v316.us.preheader" ], [ %indvars.iv.next18, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %48, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next27.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next23.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %53, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next19.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %56, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next15.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f5.s0.v4.v316.us.preheader" ], [ %scevgep6.us, %"end for f5.s0.v6.loopexit.us" ]
  %63 = trunc i64 %indvars.iv17 to i32
  %64 = add i32 %f5.s0.v4.v316.base, %63
  %65 = shl nsw i32 %64, 1
  %66 = sub nsw i32 %65, %f4.v4.min_realized
  %67 = add nsw i32 %66, -1
  %68 = mul nsw i32 %67, %f4.stride.1
  %t2036.s.us = add nsw i32 %68, %37
  %69 = mul nsw i32 %66, %f4.stride.1
  %t2037.s.us = add nsw i32 %69, %37
  %70 = add nsw i32 %66, 1
  %71 = mul nsw i32 %70, %f4.stride.1
  %t2038.s.us = add nsw i32 %71, %37
  %72 = add nsw i32 %66, 2
  %73 = mul nsw i32 %72, %f4.stride.1
  %t2039.s.us = add nsw i32 %73, %37
  %74 = sext i32 %t2039.s.us to i64
  %75 = sext i32 %t2038.s.us to i64
  %76 = sext i32 %t2037.s.us to i64
  %77 = sext i32 %t2036.s.us to i64
  %78 = add nsw i64 %21, %indvars.iv17
  %79 = mul nsw i64 %78, %10
  %80 = add i64 %39, %79
  br label %"for f5.s0.v6.us"

"for f5.s0.v6.us":                                ; preds = %"end for f5.s0.v3.v32.us", %"for f5.s0.v4.v316.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f5.s0.v3.v32.us" ], [ %smax, %"for f5.s0.v4.v316.us" ]
  %lsr.iv8.us = phi ptr [ %scevgep10.us, %"end for f5.s0.v3.v32.us" ], [ %lsr.iv4.us, %"for f5.s0.v4.v316.us" ]
  br i1 %34, label %"for f5.s0.v3.v3.preheader.us", label %"end for f5.s0.v3.v3.us", !prof !5

"for f5.s0.v3.v3.us":                             ; preds = %"for f5.s0.v3.v3.preheader.us", %"for f5.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f5.s0.v3.v3.us" ], [ %a428, %"for f5.s0.v3.v3.preheader.us" ]
  %81 = add i32 %lsr.iv28.us, %27
  %82 = add i32 %lsr.iv24.us, %27
  %83 = add i32 %lsr.iv20.us, %27
  %84 = add i32 %lsr.iv16.us, %27
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %323, %85
  %87 = add nsw i64 %86, 2
  %88 = getelementptr inbounds float, ptr %f4.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !44
  %90 = add nsw i64 %86, 10
  %91 = getelementptr inbounds float, ptr %f4.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !44
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = getelementptr inbounds float, ptr %f4.host, i64 %86
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !44
  %96 = add nsw i64 %86, 8
  %97 = getelementptr inbounds float, ptr %f4.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !44
  %99 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %101, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %103 = add nsw i64 %86, -2
  %104 = getelementptr inbounds float, ptr %f4.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !44
  %106 = add nsw i64 %86, 6
  %107 = getelementptr inbounds float, ptr %f4.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !44
  %109 = shufflevector <8 x float> %105, <8 x float> %108, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %110 = fadd <8 x float> %109, %102
  %111 = fadd <8 x float> %93, %110
  %112 = fmul <8 x float> %111, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %113 = sext i32 %83 to i64
  %114 = add nsw i64 %323, %113
  %115 = add nsw i64 %114, 2
  %116 = getelementptr inbounds float, ptr %f4.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !44
  %118 = add nsw i64 %114, 10
  %119 = getelementptr inbounds float, ptr %f4.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !44
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %122 = getelementptr inbounds float, ptr %f4.host, i64 %114
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !44
  %124 = add nsw i64 %114, 8
  %125 = getelementptr inbounds float, ptr %f4.host, i64 %124
  %126 = load <8 x float>, ptr %125, align 4, !tbaa !44
  %127 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %128 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %129, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %131 = add nsw i64 %114, -2
  %132 = getelementptr inbounds float, ptr %f4.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !44
  %134 = add nsw i64 %114, 6
  %135 = getelementptr inbounds float, ptr %f4.host, i64 %134
  %136 = load <8 x float>, ptr %135, align 4, !tbaa !44
  %137 = shufflevector <8 x float> %133, <8 x float> %136, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %138 = fadd <8 x float> %137, %130
  %139 = fadd <8 x float> %121, %138
  %140 = sext i32 %82 to i64
  %141 = add nsw i64 %323, %140
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f4.host, i64 %142
  %144 = load <8 x float>, ptr %143, align 4, !tbaa !44
  %145 = add nsw i64 %141, 10
  %146 = getelementptr inbounds float, ptr %f4.host, i64 %145
  %147 = load <8 x float>, ptr %146, align 4, !tbaa !44
  %148 = shufflevector <8 x float> %144, <8 x float> %147, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %149 = getelementptr inbounds float, ptr %f4.host, i64 %141
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !44
  %151 = add nsw i64 %141, 8
  %152 = getelementptr inbounds float, ptr %f4.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !44
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -2
  %159 = getelementptr inbounds float, ptr %f4.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !44
  %161 = add nsw i64 %141, 6
  %162 = getelementptr inbounds float, ptr %f4.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !44
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %148, %165
  %167 = fadd <8 x float> %139, %166
  %168 = fmul <8 x float> %167, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %169 = sext i32 %81 to i64
  %170 = add nsw i64 %323, %169
  %171 = add nsw i64 %170, 2
  %172 = getelementptr inbounds float, ptr %f4.host, i64 %171
  %173 = load <8 x float>, ptr %172, align 4, !tbaa !44
  %174 = add nsw i64 %170, 10
  %175 = getelementptr inbounds float, ptr %f4.host, i64 %174
  %176 = load <8 x float>, ptr %175, align 4, !tbaa !44
  %177 = shufflevector <8 x float> %173, <8 x float> %176, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %178 = getelementptr inbounds float, ptr %f4.host, i64 %170
  %179 = load <8 x float>, ptr %178, align 4, !tbaa !44
  %180 = add nsw i64 %170, 8
  %181 = getelementptr inbounds float, ptr %f4.host, i64 %180
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !44
  %183 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %184 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = fadd <8 x float> %184, %183
  %186 = fmul <8 x float> %185, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %187 = add nsw i64 %170, -2
  %188 = getelementptr inbounds float, ptr %f4.host, i64 %187
  %189 = load <8 x float>, ptr %188, align 4, !tbaa !44
  %190 = add nsw i64 %170, 6
  %191 = getelementptr inbounds float, ptr %f4.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !44
  %193 = shufflevector <8 x float> %189, <8 x float> %192, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = fadd <8 x float> %193, %186
  %195 = fadd <8 x float> %177, %194
  %196 = fmul <8 x float> %195, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %197 = fadd <8 x float> %168, %196
  %198 = fadd <8 x float> %112, %197
  %199 = fmul <8 x float> %198, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %199, ptr %lsr.iv11.us, align 4, !tbaa !46
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f5.s0.v3.v3.us", label %"for f5.s0.v3.v3.us"

"end for f5.s0.v3.v3.us":                         ; preds = %"for f5.s0.v3.v3.us", %"for f5.s0.v6.us"
  br i1 %.not5, label %"end for f5.s0.v3.v32.us", label %"for f5.s0.v3.v31.preheader.us", !prof !4

"end for f5.s0.v3.v32.us":                        ; preds = %"for f5.s0.v3.v31.preheader.us", %"end for f5.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %200 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %200, label %"end for f5.s0.v6.loopexit.us", label %"for f5.s0.v6.us"

"for f5.s0.v3.v31.preheader.us":                  ; preds = %"end for f5.s0.v3.v3.us"
  %201 = sub nuw nsw i64 %indvars.iv, %61
  %202 = mul nsw i64 %201, %62
  %203 = add nsw i64 %202, %74
  %204 = add nsw i64 %203, -12
  %205 = getelementptr inbounds float, ptr %f4.host, i64 %204
  %206 = load <8 x float>, ptr %205, align 4, !tbaa !44
  %207 = add nsw i64 %203, -4
  %208 = getelementptr inbounds float, ptr %f4.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !44
  %210 = shufflevector <8 x float> %206, <8 x float> %209, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %211 = add nsw i64 %203, -14
  %212 = getelementptr inbounds float, ptr %f4.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !44
  %214 = add nsw i64 %203, -6
  %215 = getelementptr inbounds float, ptr %f4.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !44
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %218 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %219 = fadd <8 x float> %218, %217
  %220 = fmul <8 x float> %219, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %221 = add nsw i64 %203, -16
  %222 = getelementptr inbounds float, ptr %f4.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !44
  %224 = add nsw i64 %203, -8
  %225 = getelementptr inbounds float, ptr %f4.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !44
  %227 = shufflevector <8 x float> %223, <8 x float> %226, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %228 = fadd <8 x float> %227, %220
  %229 = fadd <8 x float> %210, %228
  %230 = fmul <8 x float> %229, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %231 = add nsw i64 %202, %75
  %232 = add nsw i64 %231, -12
  %233 = getelementptr inbounds float, ptr %f4.host, i64 %232
  %234 = load <8 x float>, ptr %233, align 4, !tbaa !44
  %235 = add nsw i64 %231, -4
  %236 = getelementptr inbounds float, ptr %f4.host, i64 %235
  %237 = load <8 x float>, ptr %236, align 4, !tbaa !44
  %238 = shufflevector <8 x float> %234, <8 x float> %237, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %239 = add nsw i64 %231, -14
  %240 = getelementptr inbounds float, ptr %f4.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !44
  %242 = add nsw i64 %231, -6
  %243 = getelementptr inbounds float, ptr %f4.host, i64 %242
  %244 = load <8 x float>, ptr %243, align 4, !tbaa !44
  %245 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %246 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %247, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %249 = add nsw i64 %231, -16
  %250 = getelementptr inbounds float, ptr %f4.host, i64 %249
  %251 = load <8 x float>, ptr %250, align 4, !tbaa !44
  %252 = add nsw i64 %231, -8
  %253 = getelementptr inbounds float, ptr %f4.host, i64 %252
  %254 = load <8 x float>, ptr %253, align 4, !tbaa !44
  %255 = shufflevector <8 x float> %251, <8 x float> %254, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %256 = fadd <8 x float> %255, %248
  %257 = fadd <8 x float> %238, %256
  %258 = add nsw i64 %202, %76
  %259 = add nsw i64 %258, -12
  %260 = getelementptr inbounds float, ptr %f4.host, i64 %259
  %261 = load <8 x float>, ptr %260, align 4, !tbaa !44
  %262 = add nsw i64 %258, -4
  %263 = getelementptr inbounds float, ptr %f4.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !44
  %265 = shufflevector <8 x float> %261, <8 x float> %264, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %266 = add nsw i64 %258, -14
  %267 = getelementptr inbounds float, ptr %f4.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !44
  %269 = add nsw i64 %258, -6
  %270 = getelementptr inbounds float, ptr %f4.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !44
  %272 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %273 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %274, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %276 = add nsw i64 %258, -16
  %277 = getelementptr inbounds float, ptr %f4.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !44
  %279 = add nsw i64 %258, -8
  %280 = getelementptr inbounds float, ptr %f4.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !44
  %282 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = fadd <8 x float> %282, %275
  %284 = fadd <8 x float> %265, %283
  %285 = fadd <8 x float> %257, %284
  %286 = fmul <8 x float> %285, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %287 = add nsw i64 %202, %77
  %288 = add nsw i64 %287, -12
  %289 = getelementptr inbounds float, ptr %f4.host, i64 %288
  %290 = load <8 x float>, ptr %289, align 4, !tbaa !44
  %291 = add nsw i64 %287, -4
  %292 = getelementptr inbounds float, ptr %f4.host, i64 %291
  %293 = load <8 x float>, ptr %292, align 4, !tbaa !44
  %294 = shufflevector <8 x float> %290, <8 x float> %293, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %295 = add nsw i64 %287, -14
  %296 = getelementptr inbounds float, ptr %f4.host, i64 %295
  %297 = load <8 x float>, ptr %296, align 4, !tbaa !44
  %298 = add nsw i64 %287, -6
  %299 = getelementptr inbounds float, ptr %f4.host, i64 %298
  %300 = load <8 x float>, ptr %299, align 4, !tbaa !44
  %301 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %302 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %303, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %305 = add nsw i64 %287, -16
  %306 = getelementptr inbounds float, ptr %f4.host, i64 %305
  %307 = load <8 x float>, ptr %306, align 4, !tbaa !44
  %308 = add nsw i64 %287, -8
  %309 = getelementptr inbounds float, ptr %f4.host, i64 %308
  %310 = load <8 x float>, ptr %309, align 4, !tbaa !44
  %311 = shufflevector <8 x float> %307, <8 x float> %310, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %312 = fadd <8 x float> %311, %304
  %313 = fadd <8 x float> %294, %312
  %314 = fmul <8 x float> %313, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %315 = fadd <8 x float> %286, %314
  %316 = fadd <8 x float> %230, %315
  %317 = fmul <8 x float> %316, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %318 = sub nuw nsw i64 %indvars.iv, %smax
  %319 = mul nsw i64 %318, %23
  %320 = add i64 %80, %319
  %321 = getelementptr inbounds float, ptr %f5.host, i64 %320
  store <8 x float> %317, ptr %321, align 4, !tbaa !46
  br label %"end for f5.s0.v3.v32.us"

"for f5.s0.v3.v3.preheader.us":                   ; preds = %"for f5.s0.v6.us"
  %322 = sub nuw nsw i64 %indvars.iv, %61
  %323 = mul nsw i64 %322, %62
  br label %"for f5.s0.v3.v3.us"

"end for f5.s0.v6.loopexit.us":                   ; preds = %"end for f5.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f5.s0.v4.v316.us"

destructor_block:                                 ; preds = %"end for f5.s0.v6.loopexit.us", %"for f5.s0.v4.v316.preheader"
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f72.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f72.s0.v4.v4, ptr noalias nocapture readonly %closure) #3 {
"for f72.s0.v4.v286.preheader":
  %f2.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 1
  %f2.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 2
  %f2.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 3
  %f72.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f72.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 4
  %f72.s0.v3.min.s = load i32, ptr %4, align 4
  %5 = sext i32 %f72.s0.v3.min.s to i64
  %6 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 5
  %f72.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 6
  %f72.s0.v4.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 7
  %f72.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f72.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 8
  %f72.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f72.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 9
  %f72.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f72.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 10
  %f2.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 12
  %f72.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f72.s0.v4.v4, 5
  %17 = add nsw i32 %f72.s0.v4.min.s, %16
  %a467 = add nsw i32 %17, -1
  %b469 = add nsw i32 %f72.s0.v4.max, -31
  %.not4 = icmp slt i32 %b469, %17
  %f72.s0.v4.v286.base = select i1 %.not4, i32 %b469, i32 %a467
  %18 = sext i32 %f72.s0.v4.v286.base to i64
  %19 = sub nsw i64 %18, %13
  %20 = add nsw i64 %9, 1
  %21 = mul nsw i64 %19, %20
  %22 = xor i64 %11, -1
  %23 = add nsw i64 %22, %5
  %24 = add i64 %23, %21
  %scevgep = getelementptr float, ptr %f72.host, i64 %24
  %25 = shl nsw i64 %9, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f72.s0.v3.min.s, 1
  %28 = shl i32 %f72.s0.v4.v286.base, 1
  %reass.sub = sub i32 %28, %f2.v4.min_realized
  %29 = add i32 %reass.sub, 2
  %30 = add i32 %f2.v3.extent_realized.s, 1
  %31 = mul i32 %29, %30
  %32 = sub i32 %31, %f2.v3.min_realized
  %33 = shl i32 %f2.v3.extent_realized.s, 1
  %34 = add i32 %33, 2
  %35 = add i32 %reass.sub, 1
  %36 = mul i32 %35, %30
  %37 = sub i32 %36, %f2.v3.min_realized
  %38 = mul i32 %reass.sub, %30
  %39 = sub i32 %38, %f2.v3.min_realized
  %40 = xor i32 %f2.v4.min_realized, -1
  %41 = add i32 %28, %40
  %42 = mul i32 %41, %30
  %43 = sub i32 %42, %f2.v3.min_realized
  %44 = sub nsw i32 %f72.s0.v3.max, %f72.s0.v3.min.s
  %45 = add nsw i32 %44, 2
  %a468 = ashr i32 %45, 3
  %46 = icmp sgt i32 %44, 5
  %47 = select i1 %46, i32 %a468, i32 0
  %48 = icmp sgt i32 %47, 0
  %49 = add nsw i32 %44, 9
  %50 = ashr i32 %49, 3
  %51 = icmp sgt i32 %50, %47
  %52 = shl nsw i32 %f72.s0.v3.max, 1
  %53 = sub nsw i32 %52, %f2.v3.min_realized
  %54 = add nsw i64 %3, -7
  %55 = sub nsw i64 %54, %11
  br label %"for f72.s0.v4.v286"

"for f72.s0.v4.v286":                             ; preds = %"end for f72.s0.v3.v32", %"for f72.s0.v4.v286.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f72.s0.v3.v32" ], [ 0, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f72.s0.v3.v32" ], [ %43, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f72.s0.v3.v32" ], [ %39, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f72.s0.v3.v32" ], [ %37, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f72.s0.v3.v32" ], [ %32, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f72.s0.v3.v32" ], [ %scevgep, %"for f72.s0.v4.v286.preheader" ]
  br i1 %48, label %"for f72.s0.v3.v3", label %"end for f72.s0.v3.v3", !prof !5

"for f72.s0.v3.v3":                               ; preds = %"for f72.s0.v4.v286", %"for f72.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f72.s0.v3.v3" ], [ %lsr.iv22, %"for f72.s0.v4.v286" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f72.s0.v3.v3" ], [ %lsr.iv18, %"for f72.s0.v4.v286" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f72.s0.v3.v3" ], [ %lsr.iv14, %"for f72.s0.v4.v286" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f72.s0.v3.v3" ], [ %lsr.iv10, %"for f72.s0.v4.v286" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f72.s0.v3.v3" ], [ %lsr.iv4, %"for f72.s0.v4.v286" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f72.s0.v3.v3" ], [ %a468, %"for f72.s0.v4.v286" ]
  %56 = add i32 %lsr.iv24, %27
  %57 = add i32 %lsr.iv20, %27
  %58 = add i32 %lsr.iv16, %27
  %59 = add i32 %lsr.iv12, %27
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds float, ptr %f2.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !42
  %63 = add nsw i64 %60, 8
  %64 = getelementptr inbounds float, ptr %f2.host, i64 %63
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !42
  %66 = shufflevector <8 x float> %62, <8 x float> %65, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %67 = add nsw i64 %60, -2
  %68 = getelementptr inbounds float, ptr %f2.host, i64 %67
  %69 = load <8 x float>, ptr %68, align 4, !tbaa !42
  %70 = add nsw i64 %60, 6
  %71 = getelementptr inbounds float, ptr %f2.host, i64 %70
  %72 = load <8 x float>, ptr %71, align 4, !tbaa !42
  %73 = shufflevector <8 x float> %69, <8 x float> %72, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %74 = shufflevector <8 x float> %69, <8 x float> %72, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %75 = fadd <8 x float> %74, %73
  %76 = fmul <8 x float> %75, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %77 = add nsw i64 %60, -4
  %78 = getelementptr inbounds float, ptr %f2.host, i64 %77
  %79 = load <8 x float>, ptr %78, align 4, !tbaa !42
  %80 = add nsw i64 %60, 4
  %81 = getelementptr inbounds float, ptr %f2.host, i64 %80
  %82 = load <8 x float>, ptr %81, align 4, !tbaa !42
  %83 = shufflevector <8 x float> %79, <8 x float> %82, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %84 = fadd <8 x float> %83, %76
  %85 = fadd <8 x float> %66, %84
  %86 = fmul <8 x float> %85, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %87 = sext i32 %58 to i64
  %88 = getelementptr inbounds float, ptr %f2.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !42
  %90 = add nsw i64 %87, 8
  %91 = getelementptr inbounds float, ptr %f2.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !42
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = add nsw i64 %87, -2
  %95 = getelementptr inbounds float, ptr %f2.host, i64 %94
  %96 = load <8 x float>, ptr %95, align 4, !tbaa !42
  %97 = add nsw i64 %87, 6
  %98 = getelementptr inbounds float, ptr %f2.host, i64 %97
  %99 = load <8 x float>, ptr %98, align 4, !tbaa !42
  %100 = shufflevector <8 x float> %96, <8 x float> %99, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %101 = shufflevector <8 x float> %96, <8 x float> %99, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %102 = fadd <8 x float> %101, %100
  %103 = fmul <8 x float> %102, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %104 = add nsw i64 %87, -4
  %105 = getelementptr inbounds float, ptr %f2.host, i64 %104
  %106 = load <8 x float>, ptr %105, align 4, !tbaa !42
  %107 = add nsw i64 %87, 4
  %108 = getelementptr inbounds float, ptr %f2.host, i64 %107
  %109 = load <8 x float>, ptr %108, align 4, !tbaa !42
  %110 = shufflevector <8 x float> %106, <8 x float> %109, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %111 = fadd <8 x float> %110, %103
  %112 = fadd <8 x float> %93, %111
  %113 = sext i32 %57 to i64
  %114 = getelementptr inbounds float, ptr %f2.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !42
  %116 = add nsw i64 %113, 8
  %117 = getelementptr inbounds float, ptr %f2.host, i64 %116
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !42
  %119 = shufflevector <8 x float> %115, <8 x float> %118, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %120 = add nsw i64 %113, -2
  %121 = getelementptr inbounds float, ptr %f2.host, i64 %120
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !42
  %123 = add nsw i64 %113, 6
  %124 = getelementptr inbounds float, ptr %f2.host, i64 %123
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !42
  %126 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %127 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %128 = fadd <8 x float> %127, %126
  %129 = fmul <8 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = add nsw i64 %113, -4
  %131 = getelementptr inbounds float, ptr %f2.host, i64 %130
  %132 = load <8 x float>, ptr %131, align 4, !tbaa !42
  %133 = add nsw i64 %113, 4
  %134 = getelementptr inbounds float, ptr %f2.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !42
  %136 = shufflevector <8 x float> %132, <8 x float> %135, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %137 = fadd <8 x float> %136, %129
  %138 = fadd <8 x float> %119, %137
  %139 = fadd <8 x float> %112, %138
  %140 = fmul <8 x float> %139, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %141 = sext i32 %56 to i64
  %142 = getelementptr inbounds float, ptr %f2.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !42
  %144 = add nsw i64 %141, 8
  %145 = getelementptr inbounds float, ptr %f2.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !42
  %147 = shufflevector <8 x float> %143, <8 x float> %146, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %148 = add nsw i64 %141, -2
  %149 = getelementptr inbounds float, ptr %f2.host, i64 %148
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !42
  %151 = add nsw i64 %141, 6
  %152 = getelementptr inbounds float, ptr %f2.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !42
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -4
  %159 = getelementptr inbounds float, ptr %f2.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !42
  %161 = add nsw i64 %141, 4
  %162 = getelementptr inbounds float, ptr %f2.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !42
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %147, %165
  %167 = fmul <8 x float> %166, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %168 = fadd <8 x float> %140, %167
  %169 = fadd <8 x float> %86, %168
  %170 = fmul <8 x float> %169, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %170, ptr %lsr.iv7, align 4, !tbaa !48
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not3 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not3, label %"end for f72.s0.v3.v3", label %"for f72.s0.v3.v3"

"end for f72.s0.v3.v3":                           ; preds = %"for f72.s0.v3.v3", %"for f72.s0.v4.v286"
  br i1 %51, label %"for f72.s0.v3.v31.preheader", label %"end for f72.s0.v3.v32", !prof !5

"for f72.s0.v3.v31.preheader":                    ; preds = %"end for f72.s0.v3.v3"
  %171 = trunc i64 %indvars.iv to i32
  %172 = add i32 %f72.s0.v4.v286.base, %171
  %173 = shl nsw i32 %172, 1
  %174 = sub nsw i32 %173, %f2.v4.min_realized
  %175 = add nsw i32 %174, -1
  %176 = mul nsw i32 %175, %30
  %t2050 = add nsw i32 %176, %53
  %177 = mul nsw i32 %174, %30
  %t2051 = add nsw i32 %177, %53
  %178 = add nsw i32 %174, 1
  %179 = mul nsw i32 %178, %30
  %t2052 = add nsw i32 %179, %53
  %180 = add nsw i32 %174, 2
  %181 = mul nsw i32 %180, %30
  %t2053 = add nsw i32 %181, %53
  %182 = sext i32 %t2053 to i64
  %183 = add nsw i64 %182, -12
  %184 = getelementptr inbounds float, ptr %f2.host, i64 %183
  %185 = load <8 x float>, ptr %184, align 4, !tbaa !42
  %186 = add nsw i64 %182, -4
  %187 = getelementptr inbounds float, ptr %f2.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !42
  %189 = shufflevector <8 x float> %185, <8 x float> %188, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %190 = add nsw i64 %182, -14
  %191 = getelementptr inbounds float, ptr %f2.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !42
  %193 = add nsw i64 %182, -6
  %194 = getelementptr inbounds float, ptr %f2.host, i64 %193
  %195 = load <8 x float>, ptr %194, align 4, !tbaa !42
  %196 = shufflevector <8 x float> %192, <8 x float> %195, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %197 = shufflevector <8 x float> %192, <8 x float> %195, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %198 = fadd <8 x float> %197, %196
  %199 = fmul <8 x float> %198, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %200 = add nsw i64 %182, -16
  %201 = getelementptr inbounds float, ptr %f2.host, i64 %200
  %202 = load <8 x float>, ptr %201, align 4, !tbaa !42
  %203 = add nsw i64 %182, -8
  %204 = getelementptr inbounds float, ptr %f2.host, i64 %203
  %205 = load <8 x float>, ptr %204, align 4, !tbaa !42
  %206 = shufflevector <8 x float> %202, <8 x float> %205, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %207 = fadd <8 x float> %206, %199
  %208 = fadd <8 x float> %189, %207
  %209 = fmul <8 x float> %208, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %210 = sext i32 %t2052 to i64
  %211 = add nsw i64 %210, -12
  %212 = getelementptr inbounds float, ptr %f2.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !42
  %214 = add nsw i64 %210, -4
  %215 = getelementptr inbounds float, ptr %f2.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !42
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %218 = add nsw i64 %210, -14
  %219 = getelementptr inbounds float, ptr %f2.host, i64 %218
  %220 = load <8 x float>, ptr %219, align 4, !tbaa !42
  %221 = add nsw i64 %210, -6
  %222 = getelementptr inbounds float, ptr %f2.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !42
  %224 = shufflevector <8 x float> %220, <8 x float> %223, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %225 = shufflevector <8 x float> %220, <8 x float> %223, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %226 = fadd <8 x float> %225, %224
  %227 = fmul <8 x float> %226, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %228 = add nsw i64 %210, -16
  %229 = getelementptr inbounds float, ptr %f2.host, i64 %228
  %230 = load <8 x float>, ptr %229, align 4, !tbaa !42
  %231 = add nsw i64 %210, -8
  %232 = getelementptr inbounds float, ptr %f2.host, i64 %231
  %233 = load <8 x float>, ptr %232, align 4, !tbaa !42
  %234 = shufflevector <8 x float> %230, <8 x float> %233, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %235 = fadd <8 x float> %234, %227
  %236 = fadd <8 x float> %217, %235
  %237 = sext i32 %t2051 to i64
  %238 = add nsw i64 %237, -12
  %239 = getelementptr inbounds float, ptr %f2.host, i64 %238
  %240 = load <8 x float>, ptr %239, align 4, !tbaa !42
  %241 = add nsw i64 %237, -4
  %242 = getelementptr inbounds float, ptr %f2.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !42
  %244 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %245 = add nsw i64 %237, -14
  %246 = getelementptr inbounds float, ptr %f2.host, i64 %245
  %247 = load <8 x float>, ptr %246, align 4, !tbaa !42
  %248 = add nsw i64 %237, -6
  %249 = getelementptr inbounds float, ptr %f2.host, i64 %248
  %250 = load <8 x float>, ptr %249, align 4, !tbaa !42
  %251 = shufflevector <8 x float> %247, <8 x float> %250, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %252 = shufflevector <8 x float> %247, <8 x float> %250, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %253 = fadd <8 x float> %252, %251
  %254 = fmul <8 x float> %253, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %255 = add nsw i64 %237, -16
  %256 = getelementptr inbounds float, ptr %f2.host, i64 %255
  %257 = load <8 x float>, ptr %256, align 4, !tbaa !42
  %258 = add nsw i64 %237, -8
  %259 = getelementptr inbounds float, ptr %f2.host, i64 %258
  %260 = load <8 x float>, ptr %259, align 4, !tbaa !42
  %261 = shufflevector <8 x float> %257, <8 x float> %260, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %262 = fadd <8 x float> %261, %254
  %263 = fadd <8 x float> %244, %262
  %264 = fadd <8 x float> %236, %263
  %265 = fmul <8 x float> %264, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %266 = sext i32 %t2050 to i64
  %267 = add nsw i64 %266, -12
  %268 = getelementptr inbounds float, ptr %f2.host, i64 %267
  %269 = load <8 x float>, ptr %268, align 4, !tbaa !42
  %270 = add nsw i64 %266, -4
  %271 = getelementptr inbounds float, ptr %f2.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !42
  %273 = shufflevector <8 x float> %269, <8 x float> %272, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = add nsw i64 %266, -14
  %275 = getelementptr inbounds float, ptr %f2.host, i64 %274
  %276 = load <8 x float>, ptr %275, align 4, !tbaa !42
  %277 = add nsw i64 %266, -6
  %278 = getelementptr inbounds float, ptr %f2.host, i64 %277
  %279 = load <8 x float>, ptr %278, align 4, !tbaa !42
  %280 = shufflevector <8 x float> %276, <8 x float> %279, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %281 = shufflevector <8 x float> %276, <8 x float> %279, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %282 = fadd <8 x float> %281, %280
  %283 = fmul <8 x float> %282, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %284 = add nsw i64 %266, -16
  %285 = getelementptr inbounds float, ptr %f2.host, i64 %284
  %286 = load <8 x float>, ptr %285, align 4, !tbaa !42
  %287 = add nsw i64 %266, -8
  %288 = getelementptr inbounds float, ptr %f2.host, i64 %287
  %289 = load <8 x float>, ptr %288, align 4, !tbaa !42
  %290 = shufflevector <8 x float> %286, <8 x float> %289, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %291 = fadd <8 x float> %290, %283
  %292 = fadd <8 x float> %273, %291
  %293 = fmul <8 x float> %292, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %294 = fadd <8 x float> %265, %293
  %295 = fadd <8 x float> %209, %294
  %296 = fmul <8 x float> %295, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %297 = add nsw i64 %19, %indvars.iv
  %298 = mul nsw i64 %297, %20
  %299 = add i64 %55, %298
  %300 = getelementptr inbounds float, ptr %f72.host, i64 %299
  store <8 x float> %296, ptr %300, align 4, !tbaa !48
  br label %"end for f72.s0.v3.v32"

"end for f72.s0.v3.v32":                          ; preds = %"for f72.s0.v3.v31.preheader", %"end for f72.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %26
  %lsr.iv.next11 = add i32 %lsr.iv10, %34
  %lsr.iv.next15 = add i32 %lsr.iv14, %34
  %lsr.iv.next19 = add i32 %lsr.iv18, %34
  %lsr.iv.next23 = add i32 %lsr.iv22, %34
  %.not = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not, label %destructor_block, label %"for f72.s0.v4.v286"

destructor_block:                                 ; preds = %"end for f72.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f6.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f6.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f6.s0.v4.v336.preheader":
  %a526 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 1
  %f5.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 3
  %f5.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 4
  %f5.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 5
  %f6.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f6.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 6
  %f6.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 7
  %f6.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 8
  %f6.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 9
  %f6.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 10
  %f6.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f6.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 11
  %f6.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f6.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 12
  %f6.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f6.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 13
  %f6.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f6.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 14
  %f5.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 16
  %f6.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f6.s0.v4.v4, 3
  %a519 = add nsw i32 %f6.s0.v4.min, %19
  %b521 = add nsw i32 %f6.s0.v4.max, -7
  %f6.s0.v4.v336.base = tail call i32 @llvm.smin.i32(i32 %b521, i32 %a519)
  %20 = sext i32 %f6.s0.v4.v336.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a526, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f6.s0.v3.min, 1
  %28 = shl i32 %f5.stride.1, 1
  %29 = icmp sgt i32 %f6.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f6.s0.v3.max, %f6.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a521 = ashr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a521, i32 0
  %34 = icmp sgt i32 %33, 0
  %35 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %35, %33
  %36 = shl nsw i32 %f6.s0.v3.max, 1
  %37 = sub nsw i32 %36, %f5.v3.min_realized
  %38 = add nsw i64 %4, -7
  %39 = sub nsw i64 %38, %14
  br i1 %29, label %"for f6.s0.v4.v336.us.preheader", label %destructor_block, !prof !5

"for f6.s0.v4.v336.us.preheader":                 ; preds = %"for f6.s0.v4.v336.preheader"
  %40 = add nuw i32 %24, 2
  %41 = add i32 %40, %f6.s0.v6.loop_extent.s
  %42 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 2
  %f5.v3.extent_realized.s = load i32, ptr %42, align 4
  %43 = add nsw i32 %f5.v3.extent_realized.s, 1
  %44 = shl i32 %f6.s0.v4.v336.base, 1
  %45 = xor i32 %f5.v4.min_realized, -1
  %46 = add i32 %44, %45
  %47 = mul i32 %46, %f5.stride.1
  %48 = sub i32 %47, %f5.v3.min_realized
  %reass.sub = sub i32 %44, %f5.v4.min_realized
  %49 = mul i32 %reass.sub, %f5.stride.1
  %50 = sub i32 %49, %f5.v3.min_realized
  %51 = add i32 %reass.sub, 1
  %52 = mul i32 %51, %f5.stride.1
  %53 = sub i32 %52, %f5.v3.min_realized
  %54 = add i32 %reass.sub, 2
  %55 = mul i32 %54, %f5.stride.1
  %56 = sub i32 %55, %f5.v3.min_realized
  %57 = sext i32 %f6.s0.v3.min to i64
  %58 = sub nsw i64 %57, %14
  %59 = mul nsw i64 %21, %10
  %60 = add i64 %58, %59
  %scevgep = getelementptr float, ptr %f6.host, i64 %60
  %61 = zext i32 %24 to i64
  %62 = sext i32 %43 to i64
  %zext = zext i32 %41 to i64
  br label %"for f6.s0.v4.v336.us"

"for f6.s0.v4.v336.us":                           ; preds = %"for f6.s0.v4.v336.us.preheader", %"end for f6.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f6.s0.v4.v336.us.preheader" ], [ %indvars.iv.next18, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %48, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next27.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next23.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %53, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next19.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %56, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next15.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f6.s0.v4.v336.us.preheader" ], [ %scevgep6.us, %"end for f6.s0.v6.loopexit.us" ]
  %63 = trunc i64 %indvars.iv17 to i32
  %64 = add i32 %f6.s0.v4.v336.base, %63
  %65 = shl nsw i32 %64, 1
  %66 = sub nsw i32 %65, %f5.v4.min_realized
  %67 = add nsw i32 %66, -1
  %68 = mul nsw i32 %67, %f5.stride.1
  %t2071.s.us = add nsw i32 %68, %37
  %69 = mul nsw i32 %66, %f5.stride.1
  %t2072.s.us = add nsw i32 %69, %37
  %70 = add nsw i32 %66, 1
  %71 = mul nsw i32 %70, %f5.stride.1
  %t2073.s.us = add nsw i32 %71, %37
  %72 = add nsw i32 %66, 2
  %73 = mul nsw i32 %72, %f5.stride.1
  %t2074.s.us = add nsw i32 %73, %37
  %74 = sext i32 %t2074.s.us to i64
  %75 = sext i32 %t2073.s.us to i64
  %76 = sext i32 %t2072.s.us to i64
  %77 = sext i32 %t2071.s.us to i64
  %78 = add nsw i64 %21, %indvars.iv17
  %79 = mul nsw i64 %78, %10
  %80 = add i64 %39, %79
  br label %"for f6.s0.v6.us"

"for f6.s0.v6.us":                                ; preds = %"end for f6.s0.v3.v32.us", %"for f6.s0.v4.v336.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f6.s0.v3.v32.us" ], [ %smax, %"for f6.s0.v4.v336.us" ]
  %lsr.iv8.us = phi ptr [ %scevgep10.us, %"end for f6.s0.v3.v32.us" ], [ %lsr.iv4.us, %"for f6.s0.v4.v336.us" ]
  br i1 %34, label %"for f6.s0.v3.v3.preheader.us", label %"end for f6.s0.v3.v3.us", !prof !5

"for f6.s0.v3.v3.us":                             ; preds = %"for f6.s0.v3.v3.preheader.us", %"for f6.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f6.s0.v3.v3.us" ], [ %a521, %"for f6.s0.v3.v3.preheader.us" ]
  %81 = add i32 %lsr.iv28.us, %27
  %82 = add i32 %lsr.iv24.us, %27
  %83 = add i32 %lsr.iv20.us, %27
  %84 = add i32 %lsr.iv16.us, %27
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %323, %85
  %87 = add nsw i64 %86, 2
  %88 = getelementptr inbounds float, ptr %f5.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !46
  %90 = add nsw i64 %86, 10
  %91 = getelementptr inbounds float, ptr %f5.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !46
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = getelementptr inbounds float, ptr %f5.host, i64 %86
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !46
  %96 = add nsw i64 %86, 8
  %97 = getelementptr inbounds float, ptr %f5.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !46
  %99 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %101, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %103 = add nsw i64 %86, -2
  %104 = getelementptr inbounds float, ptr %f5.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !46
  %106 = add nsw i64 %86, 6
  %107 = getelementptr inbounds float, ptr %f5.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !46
  %109 = shufflevector <8 x float> %105, <8 x float> %108, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %110 = fadd <8 x float> %109, %102
  %111 = fadd <8 x float> %93, %110
  %112 = fmul <8 x float> %111, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %113 = sext i32 %83 to i64
  %114 = add nsw i64 %323, %113
  %115 = add nsw i64 %114, 2
  %116 = getelementptr inbounds float, ptr %f5.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !46
  %118 = add nsw i64 %114, 10
  %119 = getelementptr inbounds float, ptr %f5.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !46
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %122 = getelementptr inbounds float, ptr %f5.host, i64 %114
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !46
  %124 = add nsw i64 %114, 8
  %125 = getelementptr inbounds float, ptr %f5.host, i64 %124
  %126 = load <8 x float>, ptr %125, align 4, !tbaa !46
  %127 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %128 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %129, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %131 = add nsw i64 %114, -2
  %132 = getelementptr inbounds float, ptr %f5.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !46
  %134 = add nsw i64 %114, 6
  %135 = getelementptr inbounds float, ptr %f5.host, i64 %134
  %136 = load <8 x float>, ptr %135, align 4, !tbaa !46
  %137 = shufflevector <8 x float> %133, <8 x float> %136, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %138 = fadd <8 x float> %137, %130
  %139 = fadd <8 x float> %121, %138
  %140 = sext i32 %82 to i64
  %141 = add nsw i64 %323, %140
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f5.host, i64 %142
  %144 = load <8 x float>, ptr %143, align 4, !tbaa !46
  %145 = add nsw i64 %141, 10
  %146 = getelementptr inbounds float, ptr %f5.host, i64 %145
  %147 = load <8 x float>, ptr %146, align 4, !tbaa !46
  %148 = shufflevector <8 x float> %144, <8 x float> %147, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %149 = getelementptr inbounds float, ptr %f5.host, i64 %141
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !46
  %151 = add nsw i64 %141, 8
  %152 = getelementptr inbounds float, ptr %f5.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !46
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -2
  %159 = getelementptr inbounds float, ptr %f5.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !46
  %161 = add nsw i64 %141, 6
  %162 = getelementptr inbounds float, ptr %f5.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !46
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %148, %165
  %167 = fadd <8 x float> %139, %166
  %168 = fmul <8 x float> %167, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %169 = sext i32 %81 to i64
  %170 = add nsw i64 %323, %169
  %171 = add nsw i64 %170, 2
  %172 = getelementptr inbounds float, ptr %f5.host, i64 %171
  %173 = load <8 x float>, ptr %172, align 4, !tbaa !46
  %174 = add nsw i64 %170, 10
  %175 = getelementptr inbounds float, ptr %f5.host, i64 %174
  %176 = load <8 x float>, ptr %175, align 4, !tbaa !46
  %177 = shufflevector <8 x float> %173, <8 x float> %176, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %178 = getelementptr inbounds float, ptr %f5.host, i64 %170
  %179 = load <8 x float>, ptr %178, align 4, !tbaa !46
  %180 = add nsw i64 %170, 8
  %181 = getelementptr inbounds float, ptr %f5.host, i64 %180
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !46
  %183 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %184 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = fadd <8 x float> %184, %183
  %186 = fmul <8 x float> %185, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %187 = add nsw i64 %170, -2
  %188 = getelementptr inbounds float, ptr %f5.host, i64 %187
  %189 = load <8 x float>, ptr %188, align 4, !tbaa !46
  %190 = add nsw i64 %170, 6
  %191 = getelementptr inbounds float, ptr %f5.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !46
  %193 = shufflevector <8 x float> %189, <8 x float> %192, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = fadd <8 x float> %193, %186
  %195 = fadd <8 x float> %177, %194
  %196 = fmul <8 x float> %195, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %197 = fadd <8 x float> %168, %196
  %198 = fadd <8 x float> %112, %197
  %199 = fmul <8 x float> %198, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %199, ptr %lsr.iv11.us, align 4, !tbaa !50
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f6.s0.v3.v3.us", label %"for f6.s0.v3.v3.us"

"end for f6.s0.v3.v3.us":                         ; preds = %"for f6.s0.v3.v3.us", %"for f6.s0.v6.us"
  br i1 %.not5, label %"end for f6.s0.v3.v32.us", label %"for f6.s0.v3.v31.preheader.us", !prof !4

"end for f6.s0.v3.v32.us":                        ; preds = %"for f6.s0.v3.v31.preheader.us", %"end for f6.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %200 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %200, label %"end for f6.s0.v6.loopexit.us", label %"for f6.s0.v6.us"

"for f6.s0.v3.v31.preheader.us":                  ; preds = %"end for f6.s0.v3.v3.us"
  %201 = sub nuw nsw i64 %indvars.iv, %61
  %202 = mul nsw i64 %201, %62
  %203 = add nsw i64 %202, %74
  %204 = add nsw i64 %203, -12
  %205 = getelementptr inbounds float, ptr %f5.host, i64 %204
  %206 = load <8 x float>, ptr %205, align 4, !tbaa !46
  %207 = add nsw i64 %203, -4
  %208 = getelementptr inbounds float, ptr %f5.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !46
  %210 = shufflevector <8 x float> %206, <8 x float> %209, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %211 = add nsw i64 %203, -14
  %212 = getelementptr inbounds float, ptr %f5.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !46
  %214 = add nsw i64 %203, -6
  %215 = getelementptr inbounds float, ptr %f5.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !46
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %218 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %219 = fadd <8 x float> %218, %217
  %220 = fmul <8 x float> %219, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %221 = add nsw i64 %203, -16
  %222 = getelementptr inbounds float, ptr %f5.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !46
  %224 = add nsw i64 %203, -8
  %225 = getelementptr inbounds float, ptr %f5.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !46
  %227 = shufflevector <8 x float> %223, <8 x float> %226, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %228 = fadd <8 x float> %227, %220
  %229 = fadd <8 x float> %210, %228
  %230 = fmul <8 x float> %229, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %231 = add nsw i64 %202, %75
  %232 = add nsw i64 %231, -12
  %233 = getelementptr inbounds float, ptr %f5.host, i64 %232
  %234 = load <8 x float>, ptr %233, align 4, !tbaa !46
  %235 = add nsw i64 %231, -4
  %236 = getelementptr inbounds float, ptr %f5.host, i64 %235
  %237 = load <8 x float>, ptr %236, align 4, !tbaa !46
  %238 = shufflevector <8 x float> %234, <8 x float> %237, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %239 = add nsw i64 %231, -14
  %240 = getelementptr inbounds float, ptr %f5.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !46
  %242 = add nsw i64 %231, -6
  %243 = getelementptr inbounds float, ptr %f5.host, i64 %242
  %244 = load <8 x float>, ptr %243, align 4, !tbaa !46
  %245 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %246 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %247, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %249 = add nsw i64 %231, -16
  %250 = getelementptr inbounds float, ptr %f5.host, i64 %249
  %251 = load <8 x float>, ptr %250, align 4, !tbaa !46
  %252 = add nsw i64 %231, -8
  %253 = getelementptr inbounds float, ptr %f5.host, i64 %252
  %254 = load <8 x float>, ptr %253, align 4, !tbaa !46
  %255 = shufflevector <8 x float> %251, <8 x float> %254, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %256 = fadd <8 x float> %255, %248
  %257 = fadd <8 x float> %238, %256
  %258 = add nsw i64 %202, %76
  %259 = add nsw i64 %258, -12
  %260 = getelementptr inbounds float, ptr %f5.host, i64 %259
  %261 = load <8 x float>, ptr %260, align 4, !tbaa !46
  %262 = add nsw i64 %258, -4
  %263 = getelementptr inbounds float, ptr %f5.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !46
  %265 = shufflevector <8 x float> %261, <8 x float> %264, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %266 = add nsw i64 %258, -14
  %267 = getelementptr inbounds float, ptr %f5.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !46
  %269 = add nsw i64 %258, -6
  %270 = getelementptr inbounds float, ptr %f5.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !46
  %272 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %273 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %274, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %276 = add nsw i64 %258, -16
  %277 = getelementptr inbounds float, ptr %f5.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !46
  %279 = add nsw i64 %258, -8
  %280 = getelementptr inbounds float, ptr %f5.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !46
  %282 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = fadd <8 x float> %282, %275
  %284 = fadd <8 x float> %265, %283
  %285 = fadd <8 x float> %257, %284
  %286 = fmul <8 x float> %285, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %287 = add nsw i64 %202, %77
  %288 = add nsw i64 %287, -12
  %289 = getelementptr inbounds float, ptr %f5.host, i64 %288
  %290 = load <8 x float>, ptr %289, align 4, !tbaa !46
  %291 = add nsw i64 %287, -4
  %292 = getelementptr inbounds float, ptr %f5.host, i64 %291
  %293 = load <8 x float>, ptr %292, align 4, !tbaa !46
  %294 = shufflevector <8 x float> %290, <8 x float> %293, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %295 = add nsw i64 %287, -14
  %296 = getelementptr inbounds float, ptr %f5.host, i64 %295
  %297 = load <8 x float>, ptr %296, align 4, !tbaa !46
  %298 = add nsw i64 %287, -6
  %299 = getelementptr inbounds float, ptr %f5.host, i64 %298
  %300 = load <8 x float>, ptr %299, align 4, !tbaa !46
  %301 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %302 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %303, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %305 = add nsw i64 %287, -16
  %306 = getelementptr inbounds float, ptr %f5.host, i64 %305
  %307 = load <8 x float>, ptr %306, align 4, !tbaa !46
  %308 = add nsw i64 %287, -8
  %309 = getelementptr inbounds float, ptr %f5.host, i64 %308
  %310 = load <8 x float>, ptr %309, align 4, !tbaa !46
  %311 = shufflevector <8 x float> %307, <8 x float> %310, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %312 = fadd <8 x float> %311, %304
  %313 = fadd <8 x float> %294, %312
  %314 = fmul <8 x float> %313, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %315 = fadd <8 x float> %286, %314
  %316 = fadd <8 x float> %230, %315
  %317 = fmul <8 x float> %316, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %318 = sub nuw nsw i64 %indvars.iv, %smax
  %319 = mul nsw i64 %318, %23
  %320 = add i64 %80, %319
  %321 = getelementptr inbounds float, ptr %f6.host, i64 %320
  store <8 x float> %317, ptr %321, align 4, !tbaa !50
  br label %"end for f6.s0.v3.v32.us"

"for f6.s0.v3.v3.preheader.us":                   ; preds = %"for f6.s0.v6.us"
  %322 = sub nuw nsw i64 %indvars.iv, %61
  %323 = mul nsw i64 %322, %62
  br label %"for f6.s0.v3.v3.us"

"end for f6.s0.v6.loopexit.us":                   ; preds = %"end for f6.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f6.s0.v4.v336.us"

destructor_block:                                 ; preds = %"end for f6.s0.v6.loopexit.us", %"for f6.s0.v4.v336.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f73.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f73.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f73.s0.v4.v306.preheader":
  %f72.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 1
  %f72.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 2
  %f72.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 3
  %f73.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f73.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 4
  %f73.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f73.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 5
  %f73.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 6
  %f73.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 7
  %f73.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f73.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 8
  %f73.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f73.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 9
  %f73.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f73.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 10
  %f72.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 12
  %f73.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f73.s0.v4.v4, 5
  %a558 = add nsw i32 %f73.s0.v4.min, %16
  %b560 = add nsw i32 %f73.s0.v4.max, -31
  %f73.s0.v4.v306.base = tail call i32 @llvm.smin.i32(i32 %b560, i32 %a558)
  %17 = sext i32 %f73.s0.v4.v306.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f73.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f73.s0.v3.min, 1
  %26 = shl i32 %f73.s0.v4.v306.base, 1
  %reass.sub = sub i32 %26, %f72.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f72.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f72.v3.min_realized
  %31 = shl i32 %f72.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f72.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f72.v3.min_realized
  %38 = xor i32 %f72.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f72.v3.min_realized
  %42 = sub nsw i32 %f73.s0.v3.max, %f73.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a559 = ashr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a559, i32 0
  %46 = icmp sgt i32 %45, 0
  %47 = ashr i32 %42, 3
  %.not = icmp slt i32 %47, %45
  %48 = shl nsw i32 %f73.s0.v3.max, 1
  %49 = sub nsw i32 %48, %f72.v3.min_realized
  %50 = add nsw i64 %3, -7
  %51 = sub nsw i64 %50, %11
  br label %"for f73.s0.v4.v306"

"for f73.s0.v4.v306":                             ; preds = %"end for f73.s0.v3.v32", %"for f73.s0.v4.v306.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f73.s0.v3.v32" ], [ 0, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f73.s0.v3.v32" ], [ %41, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f73.s0.v3.v32" ], [ %37, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f73.s0.v3.v32" ], [ %35, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f73.s0.v3.v32" ], [ %30, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f73.s0.v3.v32" ], [ %scevgep, %"for f73.s0.v4.v306.preheader" ]
  br i1 %46, label %"for f73.s0.v3.v3", label %"end for f73.s0.v3.v3", !prof !5

"for f73.s0.v3.v3":                               ; preds = %"for f73.s0.v4.v306", %"for f73.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f73.s0.v3.v3" ], [ %lsr.iv22, %"for f73.s0.v4.v306" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f73.s0.v3.v3" ], [ %lsr.iv18, %"for f73.s0.v4.v306" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f73.s0.v3.v3" ], [ %lsr.iv14, %"for f73.s0.v4.v306" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f73.s0.v3.v3" ], [ %lsr.iv10, %"for f73.s0.v4.v306" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f73.s0.v3.v3" ], [ %lsr.iv4, %"for f73.s0.v4.v306" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f73.s0.v3.v3" ], [ %a559, %"for f73.s0.v4.v306" ]
  %52 = add i32 %lsr.iv24, %25
  %53 = add i32 %lsr.iv20, %25
  %54 = add i32 %lsr.iv16, %25
  %55 = add i32 %lsr.iv12, %25
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %56, 2
  %58 = getelementptr inbounds float, ptr %f72.host, i64 %57
  %59 = load <8 x float>, ptr %58, align 4, !tbaa !48
  %60 = add nsw i64 %56, 10
  %61 = getelementptr inbounds float, ptr %f72.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !48
  %63 = shufflevector <8 x float> %59, <8 x float> %62, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %64 = getelementptr inbounds float, ptr %f72.host, i64 %56
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !48
  %66 = add nsw i64 %56, 8
  %67 = getelementptr inbounds float, ptr %f72.host, i64 %66
  %68 = load <8 x float>, ptr %67, align 4, !tbaa !48
  %69 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %70 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = add nsw i64 %56, -2
  %74 = getelementptr inbounds float, ptr %f72.host, i64 %73
  %75 = load <8 x float>, ptr %74, align 4, !tbaa !48
  %76 = add nsw i64 %56, 6
  %77 = getelementptr inbounds float, ptr %f72.host, i64 %76
  %78 = load <8 x float>, ptr %77, align 4, !tbaa !48
  %79 = shufflevector <8 x float> %75, <8 x float> %78, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %80 = fadd <8 x float> %79, %72
  %81 = fadd <8 x float> %63, %80
  %82 = fmul <8 x float> %81, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %83 = sext i32 %54 to i64
  %84 = add nsw i64 %83, 2
  %85 = getelementptr inbounds float, ptr %f72.host, i64 %84
  %86 = load <8 x float>, ptr %85, align 4, !tbaa !48
  %87 = add nsw i64 %83, 10
  %88 = getelementptr inbounds float, ptr %f72.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !48
  %90 = shufflevector <8 x float> %86, <8 x float> %89, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %91 = getelementptr inbounds float, ptr %f72.host, i64 %83
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !48
  %93 = add nsw i64 %83, 8
  %94 = getelementptr inbounds float, ptr %f72.host, i64 %93
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !48
  %96 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %97 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = add nsw i64 %83, -2
  %101 = getelementptr inbounds float, ptr %f72.host, i64 %100
  %102 = load <8 x float>, ptr %101, align 4, !tbaa !48
  %103 = add nsw i64 %83, 6
  %104 = getelementptr inbounds float, ptr %f72.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !48
  %106 = shufflevector <8 x float> %102, <8 x float> %105, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %107 = fadd <8 x float> %106, %99
  %108 = fadd <8 x float> %90, %107
  %109 = sext i32 %53 to i64
  %110 = add nsw i64 %109, 2
  %111 = getelementptr inbounds float, ptr %f72.host, i64 %110
  %112 = load <8 x float>, ptr %111, align 4, !tbaa !48
  %113 = add nsw i64 %109, 10
  %114 = getelementptr inbounds float, ptr %f72.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !48
  %116 = shufflevector <8 x float> %112, <8 x float> %115, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %117 = getelementptr inbounds float, ptr %f72.host, i64 %109
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !48
  %119 = add nsw i64 %109, 8
  %120 = getelementptr inbounds float, ptr %f72.host, i64 %119
  %121 = load <8 x float>, ptr %120, align 4, !tbaa !48
  %122 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %123 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = fadd <8 x float> %123, %122
  %125 = fmul <8 x float> %124, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %126 = add nsw i64 %109, -2
  %127 = getelementptr inbounds float, ptr %f72.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !48
  %129 = add nsw i64 %109, 6
  %130 = getelementptr inbounds float, ptr %f72.host, i64 %129
  %131 = load <8 x float>, ptr %130, align 4, !tbaa !48
  %132 = shufflevector <8 x float> %128, <8 x float> %131, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %133 = fadd <8 x float> %132, %125
  %134 = fadd <8 x float> %116, %133
  %135 = fadd <8 x float> %108, %134
  %136 = fmul <8 x float> %135, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %137 = sext i32 %52 to i64
  %138 = add nsw i64 %137, 2
  %139 = getelementptr inbounds float, ptr %f72.host, i64 %138
  %140 = load <8 x float>, ptr %139, align 4, !tbaa !48
  %141 = add nsw i64 %137, 10
  %142 = getelementptr inbounds float, ptr %f72.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !48
  %144 = shufflevector <8 x float> %140, <8 x float> %143, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %145 = getelementptr inbounds float, ptr %f72.host, i64 %137
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !48
  %147 = add nsw i64 %137, 8
  %148 = getelementptr inbounds float, ptr %f72.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !48
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %151 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %152, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %154 = add nsw i64 %137, -2
  %155 = getelementptr inbounds float, ptr %f72.host, i64 %154
  %156 = load <8 x float>, ptr %155, align 4, !tbaa !48
  %157 = add nsw i64 %137, 6
  %158 = getelementptr inbounds float, ptr %f72.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !48
  %160 = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %161 = fadd <8 x float> %160, %153
  %162 = fadd <8 x float> %144, %161
  %163 = fmul <8 x float> %162, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %164 = fadd <8 x float> %136, %163
  %165 = fadd <8 x float> %82, %164
  %166 = fmul <8 x float> %165, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %166, ptr %lsr.iv7, align 4, !tbaa !52
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f73.s0.v3.v3", label %"for f73.s0.v3.v3"

"end for f73.s0.v3.v3":                           ; preds = %"for f73.s0.v3.v3", %"for f73.s0.v4.v306"
  br i1 %.not, label %"end for f73.s0.v3.v32", label %"for f73.s0.v3.v31.preheader", !prof !4

"for f73.s0.v3.v31.preheader":                    ; preds = %"end for f73.s0.v3.v3"
  %167 = trunc i64 %indvars.iv to i32
  %168 = add i32 %f73.s0.v4.v306.base, %167
  %169 = shl nsw i32 %168, 1
  %170 = sub nsw i32 %169, %f72.v4.min_realized
  %171 = add nsw i32 %170, -1
  %172 = mul nsw i32 %171, %28
  %t2085 = add nsw i32 %172, %49
  %173 = mul nsw i32 %170, %28
  %t2086 = add nsw i32 %173, %49
  %174 = add nsw i32 %170, 1
  %175 = mul nsw i32 %174, %28
  %t2087 = add nsw i32 %175, %49
  %176 = add nsw i32 %170, 2
  %177 = mul nsw i32 %176, %28
  %t2088 = add nsw i32 %177, %49
  %178 = sext i32 %t2088 to i64
  %179 = add nsw i64 %178, -12
  %180 = getelementptr inbounds float, ptr %f72.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !48
  %182 = add nsw i64 %178, -4
  %183 = getelementptr inbounds float, ptr %f72.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !48
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add nsw i64 %178, -14
  %187 = getelementptr inbounds float, ptr %f72.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !48
  %189 = add nsw i64 %178, -6
  %190 = getelementptr inbounds float, ptr %f72.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !48
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %194, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %196 = add nsw i64 %178, -16
  %197 = getelementptr inbounds float, ptr %f72.host, i64 %196
  %198 = load <8 x float>, ptr %197, align 4, !tbaa !48
  %199 = add nsw i64 %178, -8
  %200 = getelementptr inbounds float, ptr %f72.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !48
  %202 = shufflevector <8 x float> %198, <8 x float> %201, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %203 = fadd <8 x float> %202, %195
  %204 = fadd <8 x float> %185, %203
  %205 = fmul <8 x float> %204, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %206 = sext i32 %t2087 to i64
  %207 = add nsw i64 %206, -12
  %208 = getelementptr inbounds float, ptr %f72.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !48
  %210 = add nsw i64 %206, -4
  %211 = getelementptr inbounds float, ptr %f72.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !48
  %213 = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %214 = add nsw i64 %206, -14
  %215 = getelementptr inbounds float, ptr %f72.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !48
  %217 = add nsw i64 %206, -6
  %218 = getelementptr inbounds float, ptr %f72.host, i64 %217
  %219 = load <8 x float>, ptr %218, align 4, !tbaa !48
  %220 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %221 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = fadd <8 x float> %221, %220
  %223 = fmul <8 x float> %222, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %224 = add nsw i64 %206, -16
  %225 = getelementptr inbounds float, ptr %f72.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !48
  %227 = add nsw i64 %206, -8
  %228 = getelementptr inbounds float, ptr %f72.host, i64 %227
  %229 = load <8 x float>, ptr %228, align 4, !tbaa !48
  %230 = shufflevector <8 x float> %226, <8 x float> %229, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %231 = fadd <8 x float> %230, %223
  %232 = fadd <8 x float> %213, %231
  %233 = sext i32 %t2086 to i64
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f72.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !48
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f72.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !48
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f72.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !48
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f72.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !48
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f72.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !48
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f72.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !48
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = fadd <8 x float> %232, %259
  %261 = fmul <8 x float> %260, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %262 = sext i32 %t2085 to i64
  %263 = add nsw i64 %262, -12
  %264 = getelementptr inbounds float, ptr %f72.host, i64 %263
  %265 = load <8 x float>, ptr %264, align 4, !tbaa !48
  %266 = add nsw i64 %262, -4
  %267 = getelementptr inbounds float, ptr %f72.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !48
  %269 = shufflevector <8 x float> %265, <8 x float> %268, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %270 = add nsw i64 %262, -14
  %271 = getelementptr inbounds float, ptr %f72.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !48
  %273 = add nsw i64 %262, -6
  %274 = getelementptr inbounds float, ptr %f72.host, i64 %273
  %275 = load <8 x float>, ptr %274, align 4, !tbaa !48
  %276 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %277 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %278 = fadd <8 x float> %277, %276
  %279 = fmul <8 x float> %278, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %280 = add nsw i64 %262, -16
  %281 = getelementptr inbounds float, ptr %f72.host, i64 %280
  %282 = load <8 x float>, ptr %281, align 4, !tbaa !48
  %283 = add nsw i64 %262, -8
  %284 = getelementptr inbounds float, ptr %f72.host, i64 %283
  %285 = load <8 x float>, ptr %284, align 4, !tbaa !48
  %286 = shufflevector <8 x float> %282, <8 x float> %285, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %287 = fadd <8 x float> %286, %279
  %288 = fadd <8 x float> %269, %287
  %289 = fmul <8 x float> %288, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %290 = fadd <8 x float> %261, %289
  %291 = fadd <8 x float> %205, %290
  %292 = fmul <8 x float> %291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %293 = add nsw i64 %18, %indvars.iv
  %294 = mul nsw i64 %293, %19
  %295 = add i64 %51, %294
  %296 = getelementptr inbounds float, ptr %f73.host, i64 %295
  store <8 x float> %292, ptr %296, align 4, !tbaa !52
  br label %"end for f73.s0.v3.v32"

"end for f73.s0.v3.v32":                          ; preds = %"for f73.s0.v3.v31.preheader", %"end for f73.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f73.s0.v4.v306"

destructor_block:                                 ; preds = %"end for f73.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f7.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f7.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f7.s0.v4.v356.preheader":
  %a611 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 1
  %f6.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 3
  %f6.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 4
  %f6.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 5
  %f7.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f7.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 6
  %f7.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 7
  %f7.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 8
  %f7.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 9
  %f7.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 10
  %f7.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f7.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 11
  %f7.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f7.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 12
  %f7.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f7.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 13
  %f7.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f7.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 14
  %f6.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 16
  %f7.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f7.s0.v4.v4, 3
  %a604 = add nsw i32 %f7.s0.v4.min, %19
  %b606 = add nsw i32 %f7.s0.v4.max, -7
  %f7.s0.v4.v356.base = tail call i32 @llvm.smin.i32(i32 %b606, i32 %a604)
  %20 = sext i32 %f7.s0.v4.v356.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a611, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f7.s0.v3.min, 1
  %28 = shl i32 %f6.stride.1, 1
  %29 = icmp sgt i32 %f7.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f7.s0.v3.max, %f7.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a606 = ashr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a606, i32 0
  %34 = icmp sgt i32 %33, 0
  %35 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %35, %33
  %36 = shl nsw i32 %f7.s0.v3.max, 1
  %37 = sub nsw i32 %36, %f6.v3.min_realized
  %38 = add nsw i64 %4, -7
  %39 = sub nsw i64 %38, %14
  br i1 %29, label %"for f7.s0.v4.v356.us.preheader", label %destructor_block, !prof !5

"for f7.s0.v4.v356.us.preheader":                 ; preds = %"for f7.s0.v4.v356.preheader"
  %40 = add nuw i32 %24, 2
  %41 = add i32 %40, %f7.s0.v6.loop_extent.s
  %42 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 2
  %f6.v3.extent_realized.s = load i32, ptr %42, align 4
  %43 = add nsw i32 %f6.v3.extent_realized.s, 1
  %44 = shl i32 %f7.s0.v4.v356.base, 1
  %45 = xor i32 %f6.v4.min_realized, -1
  %46 = add i32 %44, %45
  %47 = mul i32 %46, %f6.stride.1
  %48 = sub i32 %47, %f6.v3.min_realized
  %reass.sub = sub i32 %44, %f6.v4.min_realized
  %49 = mul i32 %reass.sub, %f6.stride.1
  %50 = sub i32 %49, %f6.v3.min_realized
  %51 = add i32 %reass.sub, 1
  %52 = mul i32 %51, %f6.stride.1
  %53 = sub i32 %52, %f6.v3.min_realized
  %54 = add i32 %reass.sub, 2
  %55 = mul i32 %54, %f6.stride.1
  %56 = sub i32 %55, %f6.v3.min_realized
  %57 = sext i32 %f7.s0.v3.min to i64
  %58 = sub nsw i64 %57, %14
  %59 = mul nsw i64 %21, %10
  %60 = add i64 %58, %59
  %scevgep = getelementptr float, ptr %f7.host, i64 %60
  %61 = zext i32 %24 to i64
  %62 = sext i32 %43 to i64
  %zext = zext i32 %41 to i64
  br label %"for f7.s0.v4.v356.us"

"for f7.s0.v4.v356.us":                           ; preds = %"for f7.s0.v4.v356.us.preheader", %"end for f7.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f7.s0.v4.v356.us.preheader" ], [ %indvars.iv.next18, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %48, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next27.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next23.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %53, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next19.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %56, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next15.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f7.s0.v4.v356.us.preheader" ], [ %scevgep6.us, %"end for f7.s0.v6.loopexit.us" ]
  %63 = trunc i64 %indvars.iv17 to i32
  %64 = add i32 %f7.s0.v4.v356.base, %63
  %65 = shl nsw i32 %64, 1
  %66 = sub nsw i32 %65, %f6.v4.min_realized
  %67 = add nsw i32 %66, -1
  %68 = mul nsw i32 %67, %f6.stride.1
  %t2106.s.us = add nsw i32 %68, %37
  %69 = mul nsw i32 %66, %f6.stride.1
  %t2107.s.us = add nsw i32 %69, %37
  %70 = add nsw i32 %66, 1
  %71 = mul nsw i32 %70, %f6.stride.1
  %t2108.s.us = add nsw i32 %71, %37
  %72 = add nsw i32 %66, 2
  %73 = mul nsw i32 %72, %f6.stride.1
  %t2109.s.us = add nsw i32 %73, %37
  %74 = sext i32 %t2109.s.us to i64
  %75 = sext i32 %t2108.s.us to i64
  %76 = sext i32 %t2107.s.us to i64
  %77 = sext i32 %t2106.s.us to i64
  %78 = add nsw i64 %21, %indvars.iv17
  %79 = mul nsw i64 %78, %10
  %80 = add i64 %39, %79
  br label %"for f7.s0.v6.us"

"for f7.s0.v6.us":                                ; preds = %"end for f7.s0.v3.v32.us", %"for f7.s0.v4.v356.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f7.s0.v3.v32.us" ], [ %smax, %"for f7.s0.v4.v356.us" ]
  %lsr.iv8.us = phi ptr [ %scevgep10.us, %"end for f7.s0.v3.v32.us" ], [ %lsr.iv4.us, %"for f7.s0.v4.v356.us" ]
  br i1 %34, label %"for f7.s0.v3.v3.preheader.us", label %"end for f7.s0.v3.v3.us", !prof !5

"for f7.s0.v3.v3.us":                             ; preds = %"for f7.s0.v3.v3.preheader.us", %"for f7.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f7.s0.v3.v3.us" ], [ %a606, %"for f7.s0.v3.v3.preheader.us" ]
  %81 = add i32 %lsr.iv28.us, %27
  %82 = add i32 %lsr.iv24.us, %27
  %83 = add i32 %lsr.iv20.us, %27
  %84 = add i32 %lsr.iv16.us, %27
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %323, %85
  %87 = add nsw i64 %86, 2
  %88 = getelementptr inbounds float, ptr %f6.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !50
  %90 = add nsw i64 %86, 10
  %91 = getelementptr inbounds float, ptr %f6.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !50
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = getelementptr inbounds float, ptr %f6.host, i64 %86
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !50
  %96 = add nsw i64 %86, 8
  %97 = getelementptr inbounds float, ptr %f6.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !50
  %99 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %101, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %103 = add nsw i64 %86, -2
  %104 = getelementptr inbounds float, ptr %f6.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !50
  %106 = add nsw i64 %86, 6
  %107 = getelementptr inbounds float, ptr %f6.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !50
  %109 = shufflevector <8 x float> %105, <8 x float> %108, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %110 = fadd <8 x float> %109, %102
  %111 = fadd <8 x float> %93, %110
  %112 = fmul <8 x float> %111, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %113 = sext i32 %83 to i64
  %114 = add nsw i64 %323, %113
  %115 = add nsw i64 %114, 2
  %116 = getelementptr inbounds float, ptr %f6.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !50
  %118 = add nsw i64 %114, 10
  %119 = getelementptr inbounds float, ptr %f6.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !50
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %122 = getelementptr inbounds float, ptr %f6.host, i64 %114
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !50
  %124 = add nsw i64 %114, 8
  %125 = getelementptr inbounds float, ptr %f6.host, i64 %124
  %126 = load <8 x float>, ptr %125, align 4, !tbaa !50
  %127 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %128 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %129, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %131 = add nsw i64 %114, -2
  %132 = getelementptr inbounds float, ptr %f6.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !50
  %134 = add nsw i64 %114, 6
  %135 = getelementptr inbounds float, ptr %f6.host, i64 %134
  %136 = load <8 x float>, ptr %135, align 4, !tbaa !50
  %137 = shufflevector <8 x float> %133, <8 x float> %136, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %138 = fadd <8 x float> %137, %130
  %139 = fadd <8 x float> %121, %138
  %140 = sext i32 %82 to i64
  %141 = add nsw i64 %323, %140
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f6.host, i64 %142
  %144 = load <8 x float>, ptr %143, align 4, !tbaa !50
  %145 = add nsw i64 %141, 10
  %146 = getelementptr inbounds float, ptr %f6.host, i64 %145
  %147 = load <8 x float>, ptr %146, align 4, !tbaa !50
  %148 = shufflevector <8 x float> %144, <8 x float> %147, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %149 = getelementptr inbounds float, ptr %f6.host, i64 %141
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !50
  %151 = add nsw i64 %141, 8
  %152 = getelementptr inbounds float, ptr %f6.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !50
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -2
  %159 = getelementptr inbounds float, ptr %f6.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !50
  %161 = add nsw i64 %141, 6
  %162 = getelementptr inbounds float, ptr %f6.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !50
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %148, %165
  %167 = fadd <8 x float> %139, %166
  %168 = fmul <8 x float> %167, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %169 = sext i32 %81 to i64
  %170 = add nsw i64 %323, %169
  %171 = add nsw i64 %170, 2
  %172 = getelementptr inbounds float, ptr %f6.host, i64 %171
  %173 = load <8 x float>, ptr %172, align 4, !tbaa !50
  %174 = add nsw i64 %170, 10
  %175 = getelementptr inbounds float, ptr %f6.host, i64 %174
  %176 = load <8 x float>, ptr %175, align 4, !tbaa !50
  %177 = shufflevector <8 x float> %173, <8 x float> %176, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %178 = getelementptr inbounds float, ptr %f6.host, i64 %170
  %179 = load <8 x float>, ptr %178, align 4, !tbaa !50
  %180 = add nsw i64 %170, 8
  %181 = getelementptr inbounds float, ptr %f6.host, i64 %180
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !50
  %183 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %184 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = fadd <8 x float> %184, %183
  %186 = fmul <8 x float> %185, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %187 = add nsw i64 %170, -2
  %188 = getelementptr inbounds float, ptr %f6.host, i64 %187
  %189 = load <8 x float>, ptr %188, align 4, !tbaa !50
  %190 = add nsw i64 %170, 6
  %191 = getelementptr inbounds float, ptr %f6.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !50
  %193 = shufflevector <8 x float> %189, <8 x float> %192, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = fadd <8 x float> %193, %186
  %195 = fadd <8 x float> %177, %194
  %196 = fmul <8 x float> %195, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %197 = fadd <8 x float> %168, %196
  %198 = fadd <8 x float> %112, %197
  %199 = fmul <8 x float> %198, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %199, ptr %lsr.iv11.us, align 4, !tbaa !54
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f7.s0.v3.v3.us", label %"for f7.s0.v3.v3.us"

"end for f7.s0.v3.v3.us":                         ; preds = %"for f7.s0.v3.v3.us", %"for f7.s0.v6.us"
  br i1 %.not5, label %"end for f7.s0.v3.v32.us", label %"for f7.s0.v3.v31.preheader.us", !prof !4

"end for f7.s0.v3.v32.us":                        ; preds = %"for f7.s0.v3.v31.preheader.us", %"end for f7.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %200 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %200, label %"end for f7.s0.v6.loopexit.us", label %"for f7.s0.v6.us"

"for f7.s0.v3.v31.preheader.us":                  ; preds = %"end for f7.s0.v3.v3.us"
  %201 = sub nuw nsw i64 %indvars.iv, %61
  %202 = mul nsw i64 %201, %62
  %203 = add nsw i64 %202, %74
  %204 = add nsw i64 %203, -12
  %205 = getelementptr inbounds float, ptr %f6.host, i64 %204
  %206 = load <8 x float>, ptr %205, align 4, !tbaa !50
  %207 = add nsw i64 %203, -4
  %208 = getelementptr inbounds float, ptr %f6.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !50
  %210 = shufflevector <8 x float> %206, <8 x float> %209, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %211 = add nsw i64 %203, -14
  %212 = getelementptr inbounds float, ptr %f6.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !50
  %214 = add nsw i64 %203, -6
  %215 = getelementptr inbounds float, ptr %f6.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !50
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %218 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %219 = fadd <8 x float> %218, %217
  %220 = fmul <8 x float> %219, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %221 = add nsw i64 %203, -16
  %222 = getelementptr inbounds float, ptr %f6.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !50
  %224 = add nsw i64 %203, -8
  %225 = getelementptr inbounds float, ptr %f6.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !50
  %227 = shufflevector <8 x float> %223, <8 x float> %226, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %228 = fadd <8 x float> %227, %220
  %229 = fadd <8 x float> %210, %228
  %230 = fmul <8 x float> %229, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %231 = add nsw i64 %202, %75
  %232 = add nsw i64 %231, -12
  %233 = getelementptr inbounds float, ptr %f6.host, i64 %232
  %234 = load <8 x float>, ptr %233, align 4, !tbaa !50
  %235 = add nsw i64 %231, -4
  %236 = getelementptr inbounds float, ptr %f6.host, i64 %235
  %237 = load <8 x float>, ptr %236, align 4, !tbaa !50
  %238 = shufflevector <8 x float> %234, <8 x float> %237, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %239 = add nsw i64 %231, -14
  %240 = getelementptr inbounds float, ptr %f6.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !50
  %242 = add nsw i64 %231, -6
  %243 = getelementptr inbounds float, ptr %f6.host, i64 %242
  %244 = load <8 x float>, ptr %243, align 4, !tbaa !50
  %245 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %246 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %247, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %249 = add nsw i64 %231, -16
  %250 = getelementptr inbounds float, ptr %f6.host, i64 %249
  %251 = load <8 x float>, ptr %250, align 4, !tbaa !50
  %252 = add nsw i64 %231, -8
  %253 = getelementptr inbounds float, ptr %f6.host, i64 %252
  %254 = load <8 x float>, ptr %253, align 4, !tbaa !50
  %255 = shufflevector <8 x float> %251, <8 x float> %254, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %256 = fadd <8 x float> %255, %248
  %257 = fadd <8 x float> %238, %256
  %258 = add nsw i64 %202, %76
  %259 = add nsw i64 %258, -12
  %260 = getelementptr inbounds float, ptr %f6.host, i64 %259
  %261 = load <8 x float>, ptr %260, align 4, !tbaa !50
  %262 = add nsw i64 %258, -4
  %263 = getelementptr inbounds float, ptr %f6.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !50
  %265 = shufflevector <8 x float> %261, <8 x float> %264, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %266 = add nsw i64 %258, -14
  %267 = getelementptr inbounds float, ptr %f6.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !50
  %269 = add nsw i64 %258, -6
  %270 = getelementptr inbounds float, ptr %f6.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !50
  %272 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %273 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %274, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %276 = add nsw i64 %258, -16
  %277 = getelementptr inbounds float, ptr %f6.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !50
  %279 = add nsw i64 %258, -8
  %280 = getelementptr inbounds float, ptr %f6.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !50
  %282 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = fadd <8 x float> %282, %275
  %284 = fadd <8 x float> %265, %283
  %285 = fadd <8 x float> %257, %284
  %286 = fmul <8 x float> %285, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %287 = add nsw i64 %202, %77
  %288 = add nsw i64 %287, -12
  %289 = getelementptr inbounds float, ptr %f6.host, i64 %288
  %290 = load <8 x float>, ptr %289, align 4, !tbaa !50
  %291 = add nsw i64 %287, -4
  %292 = getelementptr inbounds float, ptr %f6.host, i64 %291
  %293 = load <8 x float>, ptr %292, align 4, !tbaa !50
  %294 = shufflevector <8 x float> %290, <8 x float> %293, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %295 = add nsw i64 %287, -14
  %296 = getelementptr inbounds float, ptr %f6.host, i64 %295
  %297 = load <8 x float>, ptr %296, align 4, !tbaa !50
  %298 = add nsw i64 %287, -6
  %299 = getelementptr inbounds float, ptr %f6.host, i64 %298
  %300 = load <8 x float>, ptr %299, align 4, !tbaa !50
  %301 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %302 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %303, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %305 = add nsw i64 %287, -16
  %306 = getelementptr inbounds float, ptr %f6.host, i64 %305
  %307 = load <8 x float>, ptr %306, align 4, !tbaa !50
  %308 = add nsw i64 %287, -8
  %309 = getelementptr inbounds float, ptr %f6.host, i64 %308
  %310 = load <8 x float>, ptr %309, align 4, !tbaa !50
  %311 = shufflevector <8 x float> %307, <8 x float> %310, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %312 = fadd <8 x float> %311, %304
  %313 = fadd <8 x float> %294, %312
  %314 = fmul <8 x float> %313, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %315 = fadd <8 x float> %286, %314
  %316 = fadd <8 x float> %230, %315
  %317 = fmul <8 x float> %316, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %318 = sub nuw nsw i64 %indvars.iv, %smax
  %319 = mul nsw i64 %318, %23
  %320 = add i64 %80, %319
  %321 = getelementptr inbounds float, ptr %f7.host, i64 %320
  store <8 x float> %317, ptr %321, align 4, !tbaa !54
  br label %"end for f7.s0.v3.v32.us"

"for f7.s0.v3.v3.preheader.us":                   ; preds = %"for f7.s0.v6.us"
  %322 = sub nuw nsw i64 %indvars.iv, %61
  %323 = mul nsw i64 %322, %62
  br label %"for f7.s0.v3.v3.us"

"end for f7.s0.v6.loopexit.us":                   ; preds = %"end for f7.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f7.s0.v4.v356.us"

destructor_block:                                 ; preds = %"end for f7.s0.v6.loopexit.us", %"for f7.s0.v4.v356.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f74.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f74.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f74.s0.v4.v326.preheader":
  %f73.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 1
  %f73.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 2
  %f73.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 3
  %f74.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f74.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 4
  %f74.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f74.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 5
  %f74.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 6
  %f74.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 7
  %f74.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f74.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 8
  %f74.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f74.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 9
  %f74.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f74.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 10
  %f73.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 12
  %f74.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f74.s0.v4.v4, 5
  %a643 = add nsw i32 %f74.s0.v4.min, %16
  %b645 = add nsw i32 %f74.s0.v4.max, -31
  %f74.s0.v4.v326.base = tail call i32 @llvm.smin.i32(i32 %b645, i32 %a643)
  %17 = sext i32 %f74.s0.v4.v326.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f74.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f74.s0.v3.min, 1
  %26 = shl i32 %f74.s0.v4.v326.base, 1
  %reass.sub = sub i32 %26, %f73.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f73.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f73.v3.min_realized
  %31 = shl i32 %f73.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f73.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f73.v3.min_realized
  %38 = xor i32 %f73.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f73.v3.min_realized
  %42 = sub nsw i32 %f74.s0.v3.max, %f74.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a644 = ashr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a644, i32 0
  %46 = icmp sgt i32 %45, 0
  %47 = ashr i32 %42, 3
  %.not = icmp slt i32 %47, %45
  %48 = shl nsw i32 %f74.s0.v3.max, 1
  %49 = sub nsw i32 %48, %f73.v3.min_realized
  %50 = add nsw i64 %3, -7
  %51 = sub nsw i64 %50, %11
  br label %"for f74.s0.v4.v326"

"for f74.s0.v4.v326":                             ; preds = %"end for f74.s0.v3.v32", %"for f74.s0.v4.v326.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f74.s0.v3.v32" ], [ 0, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f74.s0.v3.v32" ], [ %41, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f74.s0.v3.v32" ], [ %37, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f74.s0.v3.v32" ], [ %35, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f74.s0.v3.v32" ], [ %30, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f74.s0.v3.v32" ], [ %scevgep, %"for f74.s0.v4.v326.preheader" ]
  br i1 %46, label %"for f74.s0.v3.v3", label %"end for f74.s0.v3.v3", !prof !5

"for f74.s0.v3.v3":                               ; preds = %"for f74.s0.v4.v326", %"for f74.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f74.s0.v3.v3" ], [ %lsr.iv22, %"for f74.s0.v4.v326" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f74.s0.v3.v3" ], [ %lsr.iv18, %"for f74.s0.v4.v326" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f74.s0.v3.v3" ], [ %lsr.iv14, %"for f74.s0.v4.v326" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f74.s0.v3.v3" ], [ %lsr.iv10, %"for f74.s0.v4.v326" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f74.s0.v3.v3" ], [ %lsr.iv4, %"for f74.s0.v4.v326" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f74.s0.v3.v3" ], [ %a644, %"for f74.s0.v4.v326" ]
  %52 = add i32 %lsr.iv24, %25
  %53 = add i32 %lsr.iv20, %25
  %54 = add i32 %lsr.iv16, %25
  %55 = add i32 %lsr.iv12, %25
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %56, 2
  %58 = getelementptr inbounds float, ptr %f73.host, i64 %57
  %59 = load <8 x float>, ptr %58, align 4, !tbaa !52
  %60 = add nsw i64 %56, 10
  %61 = getelementptr inbounds float, ptr %f73.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !52
  %63 = shufflevector <8 x float> %59, <8 x float> %62, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %64 = getelementptr inbounds float, ptr %f73.host, i64 %56
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !52
  %66 = add nsw i64 %56, 8
  %67 = getelementptr inbounds float, ptr %f73.host, i64 %66
  %68 = load <8 x float>, ptr %67, align 4, !tbaa !52
  %69 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %70 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = add nsw i64 %56, -2
  %74 = getelementptr inbounds float, ptr %f73.host, i64 %73
  %75 = load <8 x float>, ptr %74, align 4, !tbaa !52
  %76 = add nsw i64 %56, 6
  %77 = getelementptr inbounds float, ptr %f73.host, i64 %76
  %78 = load <8 x float>, ptr %77, align 4, !tbaa !52
  %79 = shufflevector <8 x float> %75, <8 x float> %78, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %80 = fadd <8 x float> %79, %72
  %81 = fadd <8 x float> %63, %80
  %82 = fmul <8 x float> %81, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %83 = sext i32 %54 to i64
  %84 = add nsw i64 %83, 2
  %85 = getelementptr inbounds float, ptr %f73.host, i64 %84
  %86 = load <8 x float>, ptr %85, align 4, !tbaa !52
  %87 = add nsw i64 %83, 10
  %88 = getelementptr inbounds float, ptr %f73.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !52
  %90 = shufflevector <8 x float> %86, <8 x float> %89, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %91 = getelementptr inbounds float, ptr %f73.host, i64 %83
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !52
  %93 = add nsw i64 %83, 8
  %94 = getelementptr inbounds float, ptr %f73.host, i64 %93
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !52
  %96 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %97 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = add nsw i64 %83, -2
  %101 = getelementptr inbounds float, ptr %f73.host, i64 %100
  %102 = load <8 x float>, ptr %101, align 4, !tbaa !52
  %103 = add nsw i64 %83, 6
  %104 = getelementptr inbounds float, ptr %f73.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !52
  %106 = shufflevector <8 x float> %102, <8 x float> %105, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %107 = fadd <8 x float> %106, %99
  %108 = fadd <8 x float> %90, %107
  %109 = sext i32 %53 to i64
  %110 = add nsw i64 %109, 2
  %111 = getelementptr inbounds float, ptr %f73.host, i64 %110
  %112 = load <8 x float>, ptr %111, align 4, !tbaa !52
  %113 = add nsw i64 %109, 10
  %114 = getelementptr inbounds float, ptr %f73.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !52
  %116 = shufflevector <8 x float> %112, <8 x float> %115, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %117 = getelementptr inbounds float, ptr %f73.host, i64 %109
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !52
  %119 = add nsw i64 %109, 8
  %120 = getelementptr inbounds float, ptr %f73.host, i64 %119
  %121 = load <8 x float>, ptr %120, align 4, !tbaa !52
  %122 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %123 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = fadd <8 x float> %123, %122
  %125 = fmul <8 x float> %124, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %126 = add nsw i64 %109, -2
  %127 = getelementptr inbounds float, ptr %f73.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !52
  %129 = add nsw i64 %109, 6
  %130 = getelementptr inbounds float, ptr %f73.host, i64 %129
  %131 = load <8 x float>, ptr %130, align 4, !tbaa !52
  %132 = shufflevector <8 x float> %128, <8 x float> %131, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %133 = fadd <8 x float> %132, %125
  %134 = fadd <8 x float> %116, %133
  %135 = fadd <8 x float> %108, %134
  %136 = fmul <8 x float> %135, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %137 = sext i32 %52 to i64
  %138 = add nsw i64 %137, 2
  %139 = getelementptr inbounds float, ptr %f73.host, i64 %138
  %140 = load <8 x float>, ptr %139, align 4, !tbaa !52
  %141 = add nsw i64 %137, 10
  %142 = getelementptr inbounds float, ptr %f73.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !52
  %144 = shufflevector <8 x float> %140, <8 x float> %143, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %145 = getelementptr inbounds float, ptr %f73.host, i64 %137
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !52
  %147 = add nsw i64 %137, 8
  %148 = getelementptr inbounds float, ptr %f73.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !52
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %151 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %152, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %154 = add nsw i64 %137, -2
  %155 = getelementptr inbounds float, ptr %f73.host, i64 %154
  %156 = load <8 x float>, ptr %155, align 4, !tbaa !52
  %157 = add nsw i64 %137, 6
  %158 = getelementptr inbounds float, ptr %f73.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !52
  %160 = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %161 = fadd <8 x float> %160, %153
  %162 = fadd <8 x float> %144, %161
  %163 = fmul <8 x float> %162, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %164 = fadd <8 x float> %136, %163
  %165 = fadd <8 x float> %82, %164
  %166 = fmul <8 x float> %165, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %166, ptr %lsr.iv7, align 4, !tbaa !56
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f74.s0.v3.v3", label %"for f74.s0.v3.v3"

"end for f74.s0.v3.v3":                           ; preds = %"for f74.s0.v3.v3", %"for f74.s0.v4.v326"
  br i1 %.not, label %"end for f74.s0.v3.v32", label %"for f74.s0.v3.v31.preheader", !prof !4

"for f74.s0.v3.v31.preheader":                    ; preds = %"end for f74.s0.v3.v3"
  %167 = trunc i64 %indvars.iv to i32
  %168 = add i32 %f74.s0.v4.v326.base, %167
  %169 = shl nsw i32 %168, 1
  %170 = sub nsw i32 %169, %f73.v4.min_realized
  %171 = add nsw i32 %170, -1
  %172 = mul nsw i32 %171, %28
  %t2120 = add nsw i32 %172, %49
  %173 = mul nsw i32 %170, %28
  %t2121 = add nsw i32 %173, %49
  %174 = add nsw i32 %170, 1
  %175 = mul nsw i32 %174, %28
  %t2122 = add nsw i32 %175, %49
  %176 = add nsw i32 %170, 2
  %177 = mul nsw i32 %176, %28
  %t2123 = add nsw i32 %177, %49
  %178 = sext i32 %t2123 to i64
  %179 = add nsw i64 %178, -12
  %180 = getelementptr inbounds float, ptr %f73.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !52
  %182 = add nsw i64 %178, -4
  %183 = getelementptr inbounds float, ptr %f73.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !52
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add nsw i64 %178, -14
  %187 = getelementptr inbounds float, ptr %f73.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !52
  %189 = add nsw i64 %178, -6
  %190 = getelementptr inbounds float, ptr %f73.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !52
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %194, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %196 = add nsw i64 %178, -16
  %197 = getelementptr inbounds float, ptr %f73.host, i64 %196
  %198 = load <8 x float>, ptr %197, align 4, !tbaa !52
  %199 = add nsw i64 %178, -8
  %200 = getelementptr inbounds float, ptr %f73.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !52
  %202 = shufflevector <8 x float> %198, <8 x float> %201, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %203 = fadd <8 x float> %202, %195
  %204 = fadd <8 x float> %185, %203
  %205 = fmul <8 x float> %204, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %206 = sext i32 %t2122 to i64
  %207 = add nsw i64 %206, -12
  %208 = getelementptr inbounds float, ptr %f73.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !52
  %210 = add nsw i64 %206, -4
  %211 = getelementptr inbounds float, ptr %f73.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !52
  %213 = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %214 = add nsw i64 %206, -14
  %215 = getelementptr inbounds float, ptr %f73.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !52
  %217 = add nsw i64 %206, -6
  %218 = getelementptr inbounds float, ptr %f73.host, i64 %217
  %219 = load <8 x float>, ptr %218, align 4, !tbaa !52
  %220 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %221 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = fadd <8 x float> %221, %220
  %223 = fmul <8 x float> %222, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %224 = add nsw i64 %206, -16
  %225 = getelementptr inbounds float, ptr %f73.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !52
  %227 = add nsw i64 %206, -8
  %228 = getelementptr inbounds float, ptr %f73.host, i64 %227
  %229 = load <8 x float>, ptr %228, align 4, !tbaa !52
  %230 = shufflevector <8 x float> %226, <8 x float> %229, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %231 = fadd <8 x float> %230, %223
  %232 = fadd <8 x float> %213, %231
  %233 = sext i32 %t2121 to i64
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f73.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !52
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f73.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !52
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f73.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !52
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f73.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !52
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f73.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !52
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f73.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !52
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = fadd <8 x float> %232, %259
  %261 = fmul <8 x float> %260, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %262 = sext i32 %t2120 to i64
  %263 = add nsw i64 %262, -12
  %264 = getelementptr inbounds float, ptr %f73.host, i64 %263
  %265 = load <8 x float>, ptr %264, align 4, !tbaa !52
  %266 = add nsw i64 %262, -4
  %267 = getelementptr inbounds float, ptr %f73.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !52
  %269 = shufflevector <8 x float> %265, <8 x float> %268, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %270 = add nsw i64 %262, -14
  %271 = getelementptr inbounds float, ptr %f73.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !52
  %273 = add nsw i64 %262, -6
  %274 = getelementptr inbounds float, ptr %f73.host, i64 %273
  %275 = load <8 x float>, ptr %274, align 4, !tbaa !52
  %276 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %277 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %278 = fadd <8 x float> %277, %276
  %279 = fmul <8 x float> %278, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %280 = add nsw i64 %262, -16
  %281 = getelementptr inbounds float, ptr %f73.host, i64 %280
  %282 = load <8 x float>, ptr %281, align 4, !tbaa !52
  %283 = add nsw i64 %262, -8
  %284 = getelementptr inbounds float, ptr %f73.host, i64 %283
  %285 = load <8 x float>, ptr %284, align 4, !tbaa !52
  %286 = shufflevector <8 x float> %282, <8 x float> %285, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %287 = fadd <8 x float> %286, %279
  %288 = fadd <8 x float> %269, %287
  %289 = fmul <8 x float> %288, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %290 = fadd <8 x float> %261, %289
  %291 = fadd <8 x float> %205, %290
  %292 = fmul <8 x float> %291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %293 = add nsw i64 %18, %indvars.iv
  %294 = mul nsw i64 %293, %19
  %295 = add i64 %51, %294
  %296 = getelementptr inbounds float, ptr %f74.host, i64 %295
  store <8 x float> %292, ptr %296, align 4, !tbaa !56
  br label %"end for f74.s0.v3.v32"

"end for f74.s0.v3.v32":                          ; preds = %"for f74.s0.v3.v31.preheader", %"end for f74.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f74.s0.v4.v326"

destructor_block:                                 ; preds = %"end for f74.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f8.s0.v6(ptr nocapture readnone %__user_context, i32 %f8.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 7
  %f8.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 8
  %f8.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 13
  %f7.host = load ptr, ptr %2, align 8
  %3 = add i32 %f8.s0.v4.max, 1
  %4 = icmp slt i32 %f8.s0.v4.min, %3
  br i1 %4, label %"for f8.s0.v4.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 6
  %f8.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 5
  %f8.s0.v3.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 2
  %f7.v3.extent_realized.s = load i32, ptr %7, align 4
  %promoted23 = sext i32 %f7.v3.extent_realized.s to i64
  %a684 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 10
  %f8.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f8.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 1
  %f7.stride.1 = load i32, ptr %10, align 4
  %11 = add i32 %f8.s0.v3.max, 1
  %12 = sub i32 %11, %f8.s0.v3.min
  %13 = tail call i32 @llvm.smax.i32(i32 %a684, i32 0)
  %14 = shl nsw i64 %9, 2
  %15 = add nsw i64 %14, 4
  %16 = shl i32 %f8.s0.v3.min, 1
  %17 = shl i32 %f7.stride.1, 1
  %18 = icmp sgt i32 %11, %f8.s0.v3.min
  %19 = add nsw i64 %promoted23, 1
  %20 = sub nsw i32 %f8.s0.v6, %13
  %21 = sext i32 %20 to i64
  %t2133 = mul nsw i64 %19, %21
  %22 = add nsw i64 %t2133, 2
  %sext = shl i64 %t2133, 32
  %23 = ashr exact i64 %sext, 32
  br i1 %18, label %"for f8.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.us.preheader":                      ; preds = %"for f8.s0.v4.preheader"
  %24 = shl i32 %f8.s0.v4.min, 1
  %25 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 4
  %f7.v4.min_realized = load i32, ptr %25, align 4
  %26 = xor i32 %f7.v4.min_realized, -1
  %27 = add i32 %24, %26
  %28 = mul i32 %f7.stride.1, %27
  %29 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 3
  %f7.v3.min_realized = load i32, ptr %29, align 4
  %30 = sub i32 %28, %f7.v3.min_realized
  %31 = sub i32 %24, %f7.v4.min_realized
  %32 = mul i32 %f7.stride.1, %31
  %33 = sub i32 %32, %f7.v3.min_realized
  %34 = or i32 %24, 1
  %35 = sub i32 %34, %f7.v4.min_realized
  %36 = mul i32 %f7.stride.1, %35
  %37 = sub i32 %36, %f7.v3.min_realized
  %38 = add i32 %24, 2
  %39 = sub i32 %38, %f7.v4.min_realized
  %40 = mul i32 %f7.stride.1, %39
  %41 = sub i32 %40, %f7.v3.min_realized
  %42 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 15
  %f8.host = load ptr, ptr %42, align 8
  %43 = sext i32 %f8.s0.v3.min to i64
  %44 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 11
  %f8.v3.min_realized = load i32, ptr %44, align 4
  %45 = sext i32 %f8.v3.min_realized to i64
  %46 = sub nsw i64 %43, %45
  %47 = sext i32 %f8.s0.v6 to i64
  %smax = zext i32 %13 to i64
  %48 = sub nsw i64 %47, %smax
  %49 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 9
  %f8.stride.2 = load i32, ptr %49, align 4
  %50 = sext i32 %f8.stride.2 to i64
  %51 = mul nsw i64 %48, %50
  %52 = add i64 %46, %51
  %53 = add nsw i64 %9, 1
  %54 = sext i32 %f8.s0.v4.min to i64
  %55 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 12
  %f8.v4.min_realized = load i32, ptr %55, align 4
  %56 = sext i32 %f8.v4.min_realized to i64
  %57 = sub nsw i64 %54, %56
  %58 = mul nsw i64 %53, %57
  %59 = add i64 %52, %58
  %scevgep = getelementptr float, ptr %f8.host, i64 %59
  %60 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %61 = add i32 %40, %16
  %62 = sub i32 %61, %f7.v3.min_realized
  %63 = shl i32 %f7.stride.1, 1
  %64 = add i32 %36, %16
  %65 = sub i32 %64, %f7.v3.min_realized
  %66 = add i32 %32, %16
  %67 = sub i32 %66, %f7.v3.min_realized
  %68 = add i32 %28, %16
  %69 = sub i32 %68, %f7.v3.min_realized
  %70 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %71 = zext i32 %70 to i64
  %72 = add nuw nsw i64 %71, 1
  %min.iters.check = icmp ult i32 %70, 3
  %mul.result = shl i32 %60, 1
  %mul.result6 = shl i32 %60, 1
  %mul.overflow7 = icmp slt i32 %60, 0
  %mul.result9 = shl i32 %60, 1
  %mul.result12 = shl i32 %60, 1
  %n.vec = and i64 %72, -4
  %.cast = trunc i64 %n.vec to i32
  %73 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %74 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast20, 1
  %77 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %12, %.cast25
  %invariant.gep = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep54 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep56 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep58 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep60 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep62 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep64 = getelementptr float, ptr %f7.host, i64 -1
  %cmp.n = icmp eq i64 %72, %n.vec
  br label %"for f8.s0.v4.us"

"for f8.s0.v4.us":                                ; preds = %"for f8.s0.v4.us.preheader", %"end for f8.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f8.s0.v4.us.preheader" ], [ %indvar.next, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %30, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %33, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %37, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %41, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f8.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f8.s0.v3.loopexit.us" ]
  %f8.s0.v4.us = phi i32 [ %f8.s0.v4.min, %"for f8.s0.v4.us.preheader" ], [ %267, %"end for f8.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f8.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f8.s0.v4.us"
  %78 = mul i32 %63, %indvar
  %79 = add i32 %69, %78
  %80 = add i32 %67, %78
  %81 = add i32 %65, %78
  %82 = add i32 %62, %78
  %83 = add i32 %82, %mul.result
  %84 = icmp slt i32 %83, %82
  %85 = add i32 %81, %mul.result6
  %86 = icmp slt i32 %85, %81
  %87 = or i1 %86, %mul.overflow7
  %88 = add i32 %80, %mul.result9
  %89 = icmp slt i32 %88, %80
  %90 = add i32 %79, %mul.result12
  %91 = icmp slt i32 %90, %79
  %92 = or i1 %84, %87
  %93 = or i1 %89, %92
  %94 = or i1 %91, %93
  br i1 %94, label %"for f8.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %73
  %ind.end15 = add i32 %lsr.iv15.us, %74
  %ind.end18 = add i32 %lsr.iv10.us, %75
  %ind.end21 = add i32 %lsr.iv6.us, %76
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %77
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %95 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %95
  %.cast28 = trunc i64 %index to i32
  %96 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %96
  %97 = add i32 %offset.idx, 2
  %98 = add i32 %offset.idx, 4
  %99 = add i32 %offset.idx, 6
  %.cast29 = trunc i64 %index to i32
  %100 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %100
  %.cast31 = trunc i64 %index to i32
  %101 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %101
  %.cast33 = trunc i64 %index to i32
  %102 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %102
  %103 = add i32 %offset.idx34, %16
  %104 = add i32 %offset.idx32, %16
  %105 = add i32 %offset.idx30, %16
  %106 = add i32 %offset.idx, %16
  %107 = add i32 %97, %16
  %108 = add i32 %98, %16
  %109 = add i32 %99, %16
  %110 = sext i32 %106 to i64
  %111 = sext i32 %107 to i64
  %112 = sext i32 %108 to i64
  %113 = sext i32 %109 to i64
  %114 = add nsw i64 %22, %110
  %115 = add nsw i64 %22, %111
  %116 = add nsw i64 %22, %112
  %117 = add nsw i64 %22, %113
  %118 = getelementptr inbounds float, ptr %f7.host, i64 %114
  %119 = getelementptr inbounds float, ptr %f7.host, i64 %115
  %120 = getelementptr inbounds float, ptr %f7.host, i64 %116
  %121 = getelementptr inbounds float, ptr %f7.host, i64 %117
  %122 = load float, ptr %118, align 4, !tbaa !54
  %123 = load float, ptr %119, align 4, !tbaa !54
  %124 = load float, ptr %120, align 4, !tbaa !54
  %125 = load float, ptr %121, align 4, !tbaa !54
  %126 = insertelement <4 x float> poison, float %122, i64 0
  %127 = insertelement <4 x float> %126, float %123, i64 1
  %128 = insertelement <4 x float> %127, float %124, i64 2
  %129 = insertelement <4 x float> %128, float %125, i64 3
  %130 = add nsw i64 %23, %110
  %131 = add nsw i64 %23, %111
  %132 = add nsw i64 %23, %112
  %133 = add nsw i64 %23, %113
  %134 = add nsw i64 %130, 1
  %135 = add nsw i64 %131, 1
  %136 = add nsw i64 %132, 1
  %137 = add nsw i64 %133, 1
  %138 = getelementptr inbounds float, ptr %f7.host, i64 %134
  %139 = getelementptr inbounds float, ptr %f7.host, i64 %135
  %140 = getelementptr inbounds float, ptr %f7.host, i64 %136
  %141 = getelementptr inbounds float, ptr %f7.host, i64 %137
  %142 = load float, ptr %138, align 4, !tbaa !54
  %143 = load float, ptr %139, align 4, !tbaa !54
  %144 = load float, ptr %140, align 4, !tbaa !54
  %145 = load float, ptr %141, align 4, !tbaa !54
  %146 = insertelement <4 x float> poison, float %142, i64 0
  %147 = insertelement <4 x float> %146, float %143, i64 1
  %148 = insertelement <4 x float> %147, float %144, i64 2
  %149 = insertelement <4 x float> %148, float %145, i64 3
  %gep = getelementptr float, ptr %invariant.gep, i64 %130
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !54
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %150 = fadd <4 x float> %149, %strided.vec35
  %151 = fmul <4 x float> %150, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %152 = fadd <4 x float> %strided.vec, %151
  %153 = fadd <4 x float> %129, %152
  %154 = fmul <4 x float> %153, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %155 = sext i32 %105 to i64
  %156 = add nsw i64 %23, %155
  %157 = add nsw i64 %156, 2
  %gep55 = getelementptr float, ptr %invariant.gep54, i64 %157
  %wide.vec36 = load <8 x float>, ptr %gep55, align 4, !tbaa !54
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep57 = getelementptr float, ptr %invariant.gep56, i64 %156
  %wide.vec39 = load <8 x float>, ptr %gep57, align 4, !tbaa !54
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %158 = fadd <4 x float> %strided.vec37, %strided.vec41
  %159 = fmul <4 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = fadd <4 x float> %strided.vec40, %159
  %161 = fadd <4 x float> %strided.vec38, %160
  %162 = sext i32 %104 to i64
  %163 = add nsw i64 %23, %162
  %164 = add nsw i64 %163, 2
  %gep59 = getelementptr float, ptr %invariant.gep58, i64 %164
  %wide.vec42 = load <8 x float>, ptr %gep59, align 4, !tbaa !54
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep61 = getelementptr float, ptr %invariant.gep60, i64 %163
  %wide.vec45 = load <8 x float>, ptr %gep61, align 4, !tbaa !54
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %165 = fadd <4 x float> %strided.vec43, %strided.vec47
  %166 = fmul <4 x float> %165, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %167 = fadd <4 x float> %strided.vec46, %166
  %168 = fadd <4 x float> %strided.vec44, %167
  %169 = fadd <4 x float> %161, %168
  %170 = fmul <4 x float> %169, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %171 = sext i32 %103 to i64
  %172 = add nsw i64 %23, %171
  %173 = add nsw i64 %172, 2
  %gep63 = getelementptr float, ptr %invariant.gep62, i64 %173
  %wide.vec48 = load <8 x float>, ptr %gep63, align 4, !tbaa !54
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep65 = getelementptr float, ptr %invariant.gep64, i64 %172
  %wide.vec51 = load <8 x float>, ptr %gep65, align 4, !tbaa !54
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %174 = fadd <4 x float> %strided.vec49, %strided.vec53
  %175 = fmul <4 x float> %174, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %176 = fadd <4 x float> %strided.vec52, %175
  %177 = fadd <4 x float> %strided.vec50, %176
  %178 = fmul <4 x float> %177, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %179 = fadd <4 x float> %170, %178
  %180 = fadd <4 x float> %154, %179
  %181 = fmul <4 x float> %180, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %181, ptr %next.gep, align 4, !tbaa !36
  %index.next = add nuw i64 %index, 4
  %182 = icmp eq i64 %index.next, %n.vec
  br i1 %182, label %middle.block, label %vector.body, !llvm.loop !58

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us.preheader"

"for f8.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f8.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f8.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f8.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f8.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f8.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f8.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %12, %vector.scevcheck ], [ %12, %"for f8.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f8.s0.v3.us"

"for f8.s0.v3.us":                                ; preds = %"for f8.s0.v3.us.preheader", %"for f8.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f8.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f8.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f8.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f8.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f8.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f8.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f8.s0.v3.us.preheader" ]
  %183 = add i32 %lsr.iv21.us, %16
  %184 = add i32 %lsr.iv17.us, %16
  %185 = add i32 %lsr.iv13.us, %16
  %186 = add i32 %lsr.iv8.us, %16
  %187 = sext i32 %186 to i64
  %188 = add nsw i64 %22, %187
  %189 = getelementptr inbounds float, ptr %f7.host, i64 %188
  %190 = load float, ptr %189, align 4, !tbaa !54
  %191 = add nsw i64 %23, %187
  %192 = add nsw i64 %191, 1
  %193 = getelementptr inbounds float, ptr %f7.host, i64 %192
  %194 = load float, ptr %193, align 4, !tbaa !54
  %195 = getelementptr inbounds float, ptr %f7.host, i64 %191
  %196 = load float, ptr %195, align 4, !tbaa !54
  %197 = fadd float %194, %196
  %198 = fmul float %197, 3.000000e+00
  %199 = add nsw i64 %191, -1
  %200 = getelementptr inbounds float, ptr %f7.host, i64 %199
  %201 = sext i32 %185 to i64
  %202 = add nsw i64 %23, %201
  %203 = add nsw i64 %202, 2
  %204 = getelementptr inbounds float, ptr %f7.host, i64 %203
  %205 = add nsw i64 %202, 1
  %206 = getelementptr inbounds float, ptr %f7.host, i64 %205
  %207 = load float, ptr %206, align 4, !tbaa !54
  %208 = getelementptr inbounds float, ptr %f7.host, i64 %202
  %209 = load float, ptr %208, align 4, !tbaa !54
  %210 = fadd float %207, %209
  %211 = fmul float %210, 3.000000e+00
  %212 = add nsw i64 %202, -1
  %213 = getelementptr inbounds float, ptr %f7.host, i64 %212
  %214 = load float, ptr %213, align 4, !tbaa !54
  %215 = fadd float %214, %211
  %216 = sext i32 %184 to i64
  %217 = add nsw i64 %23, %216
  %218 = add nsw i64 %217, 2
  %219 = getelementptr inbounds float, ptr %f7.host, i64 %218
  %220 = load float, ptr %219, align 4, !tbaa !54
  %221 = add nsw i64 %217, 1
  %222 = getelementptr inbounds float, ptr %f7.host, i64 %221
  %223 = load float, ptr %222, align 4, !tbaa !54
  %224 = getelementptr inbounds float, ptr %f7.host, i64 %217
  %225 = load float, ptr %224, align 4, !tbaa !54
  %226 = fadd float %223, %225
  %227 = fmul float %226, 3.000000e+00
  %228 = add nsw i64 %217, -1
  %229 = getelementptr inbounds float, ptr %f7.host, i64 %228
  %230 = load float, ptr %229, align 4, !tbaa !54
  %231 = fadd float %230, %227
  %232 = fadd float %220, %231
  %233 = load float, ptr %200, align 4, !tbaa !54
  %234 = load float, ptr %204, align 4, !tbaa !54
  %235 = insertelement <2 x float> poison, float %233, i64 0
  %236 = insertelement <2 x float> %235, float %234, i64 1
  %237 = insertelement <2 x float> poison, float %198, i64 0
  %238 = insertelement <2 x float> %237, float %215, i64 1
  %239 = fadd <2 x float> %236, %238
  %240 = insertelement <2 x float> poison, float %190, i64 0
  %241 = insertelement <2 x float> %240, float %232, i64 1
  %242 = fadd <2 x float> %241, %239
  %243 = fmul <2 x float> %242, <float 1.250000e-01, float 3.750000e-01>
  %244 = sext i32 %183 to i64
  %245 = add nsw i64 %23, %244
  %246 = add nsw i64 %245, 2
  %247 = getelementptr inbounds float, ptr %f7.host, i64 %246
  %248 = load float, ptr %247, align 4, !tbaa !54
  %249 = add nsw i64 %245, 1
  %250 = getelementptr inbounds float, ptr %f7.host, i64 %249
  %251 = load float, ptr %250, align 4, !tbaa !54
  %252 = getelementptr inbounds float, ptr %f7.host, i64 %245
  %253 = load float, ptr %252, align 4, !tbaa !54
  %254 = fadd float %251, %253
  %255 = fmul float %254, 3.000000e+00
  %256 = add nsw i64 %245, -1
  %257 = getelementptr inbounds float, ptr %f7.host, i64 %256
  %258 = load float, ptr %257, align 4, !tbaa !54
  %259 = fadd float %258, %255
  %260 = fadd float %248, %259
  %261 = fmul float %260, 1.250000e-01
  %262 = extractelement <2 x float> %243, i64 1
  %263 = fadd float %262, %261
  %264 = extractelement <2 x float> %243, i64 0
  %265 = fadd float %264, %263
  %266 = fmul float %265, 1.250000e-01
  store float %266, ptr %lsr.iv4.us, align 4, !tbaa !36
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us", !llvm.loop !59

"end for f8.s0.v3.loopexit.us":                   ; preds = %"for f8.s0.v3.us", %middle.block
  %267 = add nsw i32 %f8.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %15
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %17
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %17
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %17
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %17
  %.not.us = icmp eq i32 %f8.s0.v4.us, %f8.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f8.s0.v4.us"

destructor_block:                                 ; preds = %"end for f8.s0.v3.loopexit.us", %"for f8.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f75.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f75.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f75.s0.v4.v346.preheader":
  %f74.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 1
  %f74.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 2
  %f74.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 3
  %f75.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f75.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 4
  %f75.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f75.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 5
  %f75.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 6
  %f75.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 7
  %f75.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f75.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 8
  %f75.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f75.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 9
  %f75.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f75.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 10
  %f74.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 12
  %f75.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f75.s0.v4.v4, 5
  %a710 = add nsw i32 %f75.s0.v4.min, %16
  %b712 = add nsw i32 %f75.s0.v4.max, -31
  %f75.s0.v4.v346.base = tail call i32 @llvm.smin.i32(i32 %b712, i32 %a710)
  %17 = sext i32 %f75.s0.v4.v346.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f75.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f75.s0.v3.min, 1
  %26 = shl i32 %f75.s0.v4.v346.base, 1
  %reass.sub = sub i32 %26, %f74.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f74.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f74.v3.min_realized
  %31 = shl i32 %f74.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f74.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f74.v3.min_realized
  %38 = xor i32 %f74.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f74.v3.min_realized
  %42 = sub nsw i32 %f75.s0.v3.max, %f75.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a711 = ashr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a711, i32 0
  %46 = icmp sgt i32 %45, 0
  %47 = ashr i32 %42, 3
  %.not = icmp slt i32 %47, %45
  %48 = shl nsw i32 %f75.s0.v3.max, 1
  %49 = sub nsw i32 %48, %f74.v3.min_realized
  %50 = add nsw i64 %3, -7
  %51 = sub nsw i64 %50, %11
  br label %"for f75.s0.v4.v346"

"for f75.s0.v4.v346":                             ; preds = %"end for f75.s0.v3.v32", %"for f75.s0.v4.v346.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f75.s0.v3.v32" ], [ 0, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f75.s0.v3.v32" ], [ %41, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f75.s0.v3.v32" ], [ %37, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f75.s0.v3.v32" ], [ %35, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f75.s0.v3.v32" ], [ %30, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f75.s0.v3.v32" ], [ %scevgep, %"for f75.s0.v4.v346.preheader" ]
  br i1 %46, label %"for f75.s0.v3.v3", label %"end for f75.s0.v3.v3", !prof !5

"for f75.s0.v3.v3":                               ; preds = %"for f75.s0.v4.v346", %"for f75.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f75.s0.v3.v3" ], [ %lsr.iv22, %"for f75.s0.v4.v346" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f75.s0.v3.v3" ], [ %lsr.iv18, %"for f75.s0.v4.v346" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f75.s0.v3.v3" ], [ %lsr.iv14, %"for f75.s0.v4.v346" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f75.s0.v3.v3" ], [ %lsr.iv10, %"for f75.s0.v4.v346" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f75.s0.v3.v3" ], [ %lsr.iv4, %"for f75.s0.v4.v346" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f75.s0.v3.v3" ], [ %a711, %"for f75.s0.v4.v346" ]
  %52 = add i32 %lsr.iv24, %25
  %53 = add i32 %lsr.iv20, %25
  %54 = add i32 %lsr.iv16, %25
  %55 = add i32 %lsr.iv12, %25
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %56, 2
  %58 = getelementptr inbounds float, ptr %f74.host, i64 %57
  %59 = load <8 x float>, ptr %58, align 4, !tbaa !56
  %60 = add nsw i64 %56, 10
  %61 = getelementptr inbounds float, ptr %f74.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !56
  %63 = shufflevector <8 x float> %59, <8 x float> %62, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %64 = getelementptr inbounds float, ptr %f74.host, i64 %56
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !56
  %66 = add nsw i64 %56, 8
  %67 = getelementptr inbounds float, ptr %f74.host, i64 %66
  %68 = load <8 x float>, ptr %67, align 4, !tbaa !56
  %69 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %70 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = add nsw i64 %56, -2
  %74 = getelementptr inbounds float, ptr %f74.host, i64 %73
  %75 = load <8 x float>, ptr %74, align 4, !tbaa !56
  %76 = add nsw i64 %56, 6
  %77 = getelementptr inbounds float, ptr %f74.host, i64 %76
  %78 = load <8 x float>, ptr %77, align 4, !tbaa !56
  %79 = shufflevector <8 x float> %75, <8 x float> %78, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %80 = fadd <8 x float> %79, %72
  %81 = fadd <8 x float> %63, %80
  %82 = fmul <8 x float> %81, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %83 = sext i32 %54 to i64
  %84 = add nsw i64 %83, 2
  %85 = getelementptr inbounds float, ptr %f74.host, i64 %84
  %86 = load <8 x float>, ptr %85, align 4, !tbaa !56
  %87 = add nsw i64 %83, 10
  %88 = getelementptr inbounds float, ptr %f74.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !56
  %90 = shufflevector <8 x float> %86, <8 x float> %89, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %91 = getelementptr inbounds float, ptr %f74.host, i64 %83
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !56
  %93 = add nsw i64 %83, 8
  %94 = getelementptr inbounds float, ptr %f74.host, i64 %93
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !56
  %96 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %97 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = add nsw i64 %83, -2
  %101 = getelementptr inbounds float, ptr %f74.host, i64 %100
  %102 = load <8 x float>, ptr %101, align 4, !tbaa !56
  %103 = add nsw i64 %83, 6
  %104 = getelementptr inbounds float, ptr %f74.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !56
  %106 = shufflevector <8 x float> %102, <8 x float> %105, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %107 = fadd <8 x float> %106, %99
  %108 = fadd <8 x float> %90, %107
  %109 = sext i32 %53 to i64
  %110 = add nsw i64 %109, 2
  %111 = getelementptr inbounds float, ptr %f74.host, i64 %110
  %112 = load <8 x float>, ptr %111, align 4, !tbaa !56
  %113 = add nsw i64 %109, 10
  %114 = getelementptr inbounds float, ptr %f74.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !56
  %116 = shufflevector <8 x float> %112, <8 x float> %115, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %117 = getelementptr inbounds float, ptr %f74.host, i64 %109
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !56
  %119 = add nsw i64 %109, 8
  %120 = getelementptr inbounds float, ptr %f74.host, i64 %119
  %121 = load <8 x float>, ptr %120, align 4, !tbaa !56
  %122 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %123 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = fadd <8 x float> %123, %122
  %125 = fmul <8 x float> %124, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %126 = add nsw i64 %109, -2
  %127 = getelementptr inbounds float, ptr %f74.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !56
  %129 = add nsw i64 %109, 6
  %130 = getelementptr inbounds float, ptr %f74.host, i64 %129
  %131 = load <8 x float>, ptr %130, align 4, !tbaa !56
  %132 = shufflevector <8 x float> %128, <8 x float> %131, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %133 = fadd <8 x float> %132, %125
  %134 = fadd <8 x float> %116, %133
  %135 = fadd <8 x float> %108, %134
  %136 = fmul <8 x float> %135, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %137 = sext i32 %52 to i64
  %138 = add nsw i64 %137, 2
  %139 = getelementptr inbounds float, ptr %f74.host, i64 %138
  %140 = load <8 x float>, ptr %139, align 4, !tbaa !56
  %141 = add nsw i64 %137, 10
  %142 = getelementptr inbounds float, ptr %f74.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !56
  %144 = shufflevector <8 x float> %140, <8 x float> %143, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %145 = getelementptr inbounds float, ptr %f74.host, i64 %137
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !56
  %147 = add nsw i64 %137, 8
  %148 = getelementptr inbounds float, ptr %f74.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !56
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %151 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %152, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %154 = add nsw i64 %137, -2
  %155 = getelementptr inbounds float, ptr %f74.host, i64 %154
  %156 = load <8 x float>, ptr %155, align 4, !tbaa !56
  %157 = add nsw i64 %137, 6
  %158 = getelementptr inbounds float, ptr %f74.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !56
  %160 = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %161 = fadd <8 x float> %160, %153
  %162 = fadd <8 x float> %144, %161
  %163 = fmul <8 x float> %162, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %164 = fadd <8 x float> %136, %163
  %165 = fadd <8 x float> %82, %164
  %166 = fmul <8 x float> %165, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %166, ptr %lsr.iv7, align 4, !tbaa !13
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f75.s0.v3.v3", label %"for f75.s0.v3.v3"

"end for f75.s0.v3.v3":                           ; preds = %"for f75.s0.v3.v3", %"for f75.s0.v4.v346"
  br i1 %.not, label %"end for f75.s0.v3.v32", label %"for f75.s0.v3.v31.preheader", !prof !4

"for f75.s0.v3.v31.preheader":                    ; preds = %"end for f75.s0.v3.v3"
  %167 = trunc i64 %indvars.iv to i32
  %168 = add i32 %f75.s0.v4.v346.base, %167
  %169 = shl nsw i32 %168, 1
  %170 = sub nsw i32 %169, %f74.v4.min_realized
  %171 = add nsw i32 %170, -1
  %172 = mul nsw i32 %171, %28
  %t2148 = add nsw i32 %172, %49
  %173 = mul nsw i32 %170, %28
  %t2149 = add nsw i32 %173, %49
  %174 = add nsw i32 %170, 1
  %175 = mul nsw i32 %174, %28
  %t2150 = add nsw i32 %175, %49
  %176 = add nsw i32 %170, 2
  %177 = mul nsw i32 %176, %28
  %t2151 = add nsw i32 %177, %49
  %178 = sext i32 %t2151 to i64
  %179 = add nsw i64 %178, -12
  %180 = getelementptr inbounds float, ptr %f74.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !56
  %182 = add nsw i64 %178, -4
  %183 = getelementptr inbounds float, ptr %f74.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !56
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add nsw i64 %178, -14
  %187 = getelementptr inbounds float, ptr %f74.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !56
  %189 = add nsw i64 %178, -6
  %190 = getelementptr inbounds float, ptr %f74.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !56
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %194, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %196 = add nsw i64 %178, -16
  %197 = getelementptr inbounds float, ptr %f74.host, i64 %196
  %198 = load <8 x float>, ptr %197, align 4, !tbaa !56
  %199 = add nsw i64 %178, -8
  %200 = getelementptr inbounds float, ptr %f74.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !56
  %202 = shufflevector <8 x float> %198, <8 x float> %201, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %203 = fadd <8 x float> %202, %195
  %204 = fadd <8 x float> %185, %203
  %205 = fmul <8 x float> %204, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %206 = sext i32 %t2150 to i64
  %207 = add nsw i64 %206, -12
  %208 = getelementptr inbounds float, ptr %f74.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !56
  %210 = add nsw i64 %206, -4
  %211 = getelementptr inbounds float, ptr %f74.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !56
  %213 = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %214 = add nsw i64 %206, -14
  %215 = getelementptr inbounds float, ptr %f74.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !56
  %217 = add nsw i64 %206, -6
  %218 = getelementptr inbounds float, ptr %f74.host, i64 %217
  %219 = load <8 x float>, ptr %218, align 4, !tbaa !56
  %220 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %221 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = fadd <8 x float> %221, %220
  %223 = fmul <8 x float> %222, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %224 = add nsw i64 %206, -16
  %225 = getelementptr inbounds float, ptr %f74.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !56
  %227 = add nsw i64 %206, -8
  %228 = getelementptr inbounds float, ptr %f74.host, i64 %227
  %229 = load <8 x float>, ptr %228, align 4, !tbaa !56
  %230 = shufflevector <8 x float> %226, <8 x float> %229, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %231 = fadd <8 x float> %230, %223
  %232 = fadd <8 x float> %213, %231
  %233 = sext i32 %t2149 to i64
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f74.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !56
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f74.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !56
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f74.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !56
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f74.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !56
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f74.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !56
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f74.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !56
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = fadd <8 x float> %232, %259
  %261 = fmul <8 x float> %260, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %262 = sext i32 %t2148 to i64
  %263 = add nsw i64 %262, -12
  %264 = getelementptr inbounds float, ptr %f74.host, i64 %263
  %265 = load <8 x float>, ptr %264, align 4, !tbaa !56
  %266 = add nsw i64 %262, -4
  %267 = getelementptr inbounds float, ptr %f74.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !56
  %269 = shufflevector <8 x float> %265, <8 x float> %268, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %270 = add nsw i64 %262, -14
  %271 = getelementptr inbounds float, ptr %f74.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !56
  %273 = add nsw i64 %262, -6
  %274 = getelementptr inbounds float, ptr %f74.host, i64 %273
  %275 = load <8 x float>, ptr %274, align 4, !tbaa !56
  %276 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %277 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %278 = fadd <8 x float> %277, %276
  %279 = fmul <8 x float> %278, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %280 = add nsw i64 %262, -16
  %281 = getelementptr inbounds float, ptr %f74.host, i64 %280
  %282 = load <8 x float>, ptr %281, align 4, !tbaa !56
  %283 = add nsw i64 %262, -8
  %284 = getelementptr inbounds float, ptr %f74.host, i64 %283
  %285 = load <8 x float>, ptr %284, align 4, !tbaa !56
  %286 = shufflevector <8 x float> %282, <8 x float> %285, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %287 = fadd <8 x float> %286, %279
  %288 = fadd <8 x float> %269, %287
  %289 = fmul <8 x float> %288, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %290 = fadd <8 x float> %261, %289
  %291 = fadd <8 x float> %205, %290
  %292 = fmul <8 x float> %291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %293 = add nsw i64 %18, %indvars.iv
  %294 = mul nsw i64 %293, %19
  %295 = add i64 %51, %294
  %296 = getelementptr inbounds float, ptr %f75.host, i64 %295
  store <8 x float> %292, ptr %296, align 4, !tbaa !13
  br label %"end for f75.s0.v3.v32"

"end for f75.s0.v3.v32":                          ; preds = %"for f75.s0.v3.v31.preheader", %"end for f75.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f75.s0.v4.v346"

destructor_block:                                 ; preds = %"end for f75.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f9.s0.v6(ptr nocapture readnone %__user_context, i32 %f9.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 7
  %f9.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 8
  %f9.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 13
  %f8.host = load ptr, ptr %2, align 8
  %3 = add i32 %f9.s0.v4.max, 1
  %4 = icmp slt i32 %f9.s0.v4.min, %3
  br i1 %4, label %"for f9.s0.v4.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 6
  %f9.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 5
  %f9.s0.v3.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 1
  %f8.stride.2 = load i32, ptr %7, align 4
  %a729 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 11
  %f9.v3.min_realized = load i32, ptr %8, align 4
  %9 = sext i32 %f9.v3.min_realized to i64
  %10 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 10
  %f9.v3.extent_realized.s.s = load i32, ptr %10, align 4
  %11 = sext i32 %f9.v3.extent_realized.s.s to i64
  %12 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 2
  %f8.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = add i32 %f9.s0.v3.max, 1
  %14 = sub i32 %13, %f9.s0.v3.min
  %reass.sub = sub nsw i64 %11, %9
  %15 = add nsw i64 %reass.sub, 1
  %16 = tail call i32 @llvm.smax.i32(i32 %a729, i32 0)
  %17 = shl nsw i64 %15, 2
  %18 = shl i32 %f8.v3.extent_realized.s, 1
  %19 = add i32 %18, 2
  %20 = icmp sgt i32 %13, %f9.s0.v3.min
  %t2154.s = sub nsw i32 %f9.s0.v6, %16
  %21 = mul i32 %t2154.s, %f8.stride.2
  br i1 %20, label %"for f9.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.us.preheader":                      ; preds = %"for f9.s0.v4.preheader"
  %22 = shl i32 %f9.s0.v3.min, 1
  %23 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 3
  %f8.v3.min_realized = load i32, ptr %23, align 4
  %24 = sub i32 %22, %f8.v3.min_realized
  %25 = add i32 %f8.v3.extent_realized.s, 1
  %26 = shl i32 %f9.s0.v4.min, 1
  %27 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 4
  %f8.v4.min_realized = load i32, ptr %27, align 4
  %28 = xor i32 %f8.v4.min_realized, -1
  %29 = add i32 %26, %28
  %30 = mul i32 %25, %29
  %31 = add i32 %24, %30
  %32 = sub i32 %26, %f8.v4.min_realized
  %33 = mul i32 %25, %32
  %34 = add i32 %24, %33
  %35 = or i32 %26, 1
  %36 = sub i32 %35, %f8.v4.min_realized
  %37 = mul i32 %25, %36
  %38 = add i32 %24, %37
  %39 = add i32 %26, 2
  %40 = sub i32 %39, %f8.v4.min_realized
  %41 = mul i32 %25, %40
  %42 = add i32 %24, %41
  %43 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 15
  %f9.host = load ptr, ptr %43, align 8
  %44 = sext i32 %f9.s0.v3.min to i64
  %45 = sub nsw i64 %44, %9
  %46 = sext i32 %f9.s0.v6 to i64
  %smax = zext i32 %16 to i64
  %47 = sub nsw i64 %46, %smax
  %48 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 9
  %f9.stride.2 = load i32, ptr %48, align 4
  %49 = sext i32 %f9.stride.2 to i64
  %50 = mul nsw i64 %47, %49
  %51 = add i64 %45, %50
  %52 = sext i32 %f9.s0.v4.min to i64
  %53 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 12
  %f9.v4.min_realized = load i32, ptr %53, align 4
  %54 = sext i32 %f9.v4.min_realized to i64
  %55 = sub nsw i64 %52, %54
  %56 = mul i64 %15, %55
  %57 = add i64 %51, %56
  %scevgep = getelementptr float, ptr %f9.host, i64 %57
  %58 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %59 = add i32 %21, %41
  %60 = add i32 %59, %22
  %61 = sub i32 %60, %f8.v3.min_realized
  %62 = add i32 %21, %37
  %63 = add i32 %62, %22
  %64 = sub i32 %63, %f8.v3.min_realized
  %65 = add i32 %21, %33
  %66 = add i32 %65, %22
  %67 = sub i32 %66, %f8.v3.min_realized
  %68 = add i32 %21, %30
  %69 = add i32 %68, %22
  %70 = sub i32 %69, %f8.v3.min_realized
  %71 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %72 = zext i32 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  %min.iters.check = icmp ult i32 %71, 3
  %mul.result = shl i32 %58, 1
  %mul.result6 = shl i32 %58, 1
  %mul.overflow7 = icmp slt i32 %58, 0
  %mul.result9 = shl i32 %58, 1
  %mul.result12 = shl i32 %58, 1
  %n.vec = and i64 %73, -4
  %.cast = trunc i64 %n.vec to i32
  %74 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %77 = shl i32 %.cast20, 1
  %78 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %14, %.cast25
  %invariant.gep = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep57 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep59 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep61 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep63 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep65 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep67 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep69 = getelementptr float, ptr %f8.host, i64 -1
  %cmp.n = icmp eq i64 %73, %n.vec
  br label %"for f9.s0.v4.us"

"for f9.s0.v4.us":                                ; preds = %"for f9.s0.v4.us.preheader", %"end for f9.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f9.s0.v4.us.preheader" ], [ %indvar.next, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %31, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %34, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %38, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %42, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f9.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f9.s0.v3.loopexit.us" ]
  %f9.s0.v4.us = phi i32 [ %f9.s0.v4.min, %"for f9.s0.v4.us.preheader" ], [ %217, %"end for f9.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f9.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f9.s0.v4.us"
  %79 = mul i32 %19, %indvar
  %80 = add i32 %70, %79
  %81 = add i32 %67, %79
  %82 = add i32 %64, %79
  %83 = add i32 %61, %79
  %84 = add i32 %83, %mul.result
  %85 = icmp slt i32 %84, %83
  %86 = add i32 %82, %mul.result6
  %87 = icmp slt i32 %86, %82
  %88 = or i1 %87, %mul.overflow7
  %89 = add i32 %81, %mul.result9
  %90 = icmp slt i32 %89, %81
  %91 = add i32 %80, %mul.result12
  %92 = icmp slt i32 %91, %80
  %93 = or i1 %85, %88
  %94 = or i1 %90, %93
  %95 = or i1 %92, %94
  br i1 %95, label %"for f9.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %74
  %ind.end15 = add i32 %lsr.iv15.us, %75
  %ind.end18 = add i32 %lsr.iv10.us, %76
  %ind.end21 = add i32 %lsr.iv6.us, %77
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %78
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %96 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %96
  %.cast28 = trunc i64 %index to i32
  %97 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %97
  %.cast29 = trunc i64 %index to i32
  %98 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %98
  %.cast31 = trunc i64 %index to i32
  %99 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %99
  %.cast33 = trunc i64 %index to i32
  %100 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %100
  %101 = add i32 %offset.idx34, %21
  %102 = add i32 %offset.idx32, %21
  %103 = add i32 %offset.idx30, %21
  %104 = add i32 %offset.idx, %21
  %105 = sext i32 %104 to i64
  %106 = add nsw i64 %105, 2
  %gep = getelementptr float, ptr %invariant.gep, i64 %106
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !36
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep58 = getelementptr float, ptr %invariant.gep57, i64 %105
  %wide.vec36 = load <8 x float>, ptr %gep58, align 4, !tbaa !36
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %107 = fadd <4 x float> %strided.vec, %strided.vec38
  %108 = fmul <4 x float> %107, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %109 = fadd <4 x float> %strided.vec37, %108
  %110 = fadd <4 x float> %strided.vec35, %109
  %111 = fmul <4 x float> %110, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %112 = sext i32 %103 to i64
  %113 = add nsw i64 %112, 2
  %gep60 = getelementptr float, ptr %invariant.gep59, i64 %113
  %wide.vec39 = load <8 x float>, ptr %gep60, align 4, !tbaa !36
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep62 = getelementptr float, ptr %invariant.gep61, i64 %112
  %wide.vec42 = load <8 x float>, ptr %gep62, align 4, !tbaa !36
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %114 = fadd <4 x float> %strided.vec40, %strided.vec44
  %115 = fmul <4 x float> %114, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %116 = fadd <4 x float> %strided.vec43, %115
  %117 = fadd <4 x float> %strided.vec41, %116
  %118 = sext i32 %102 to i64
  %119 = add nsw i64 %118, 2
  %gep64 = getelementptr float, ptr %invariant.gep63, i64 %119
  %wide.vec45 = load <8 x float>, ptr %gep64, align 4, !tbaa !36
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep66 = getelementptr float, ptr %invariant.gep65, i64 %118
  %wide.vec48 = load <8 x float>, ptr %gep66, align 4, !tbaa !36
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %120 = fadd <4 x float> %strided.vec46, %strided.vec50
  %121 = fmul <4 x float> %120, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %122 = fadd <4 x float> %strided.vec49, %121
  %123 = fadd <4 x float> %strided.vec47, %122
  %124 = fadd <4 x float> %117, %123
  %125 = fmul <4 x float> %124, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %126 = sext i32 %101 to i64
  %127 = add nsw i64 %126, 2
  %gep68 = getelementptr float, ptr %invariant.gep67, i64 %127
  %wide.vec51 = load <8 x float>, ptr %gep68, align 4, !tbaa !36
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep70 = getelementptr float, ptr %invariant.gep69, i64 %126
  %wide.vec54 = load <8 x float>, ptr %gep70, align 4, !tbaa !36
  %strided.vec55 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec56 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %128 = fadd <4 x float> %strided.vec52, %strided.vec56
  %129 = fmul <4 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = fadd <4 x float> %strided.vec55, %129
  %131 = fadd <4 x float> %strided.vec53, %130
  %132 = fmul <4 x float> %131, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %133 = fadd <4 x float> %125, %132
  %134 = fadd <4 x float> %111, %133
  %135 = fmul <4 x float> %134, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %135, ptr %next.gep, align 4, !tbaa !32
  %index.next = add nuw i64 %index, 4
  %136 = icmp eq i64 %index.next, %n.vec
  br i1 %136, label %middle.block, label %vector.body, !llvm.loop !60

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us.preheader"

"for f9.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f9.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f9.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f9.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f9.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f9.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f9.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %14, %vector.scevcheck ], [ %14, %"for f9.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f9.s0.v3.us"

"for f9.s0.v3.us":                                ; preds = %"for f9.s0.v3.us.preheader", %"for f9.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f9.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f9.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f9.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f9.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f9.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f9.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f9.s0.v3.us.preheader" ]
  %137 = add i32 %lsr.iv21.us, %21
  %138 = add i32 %lsr.iv17.us, %21
  %139 = add i32 %lsr.iv13.us, %21
  %140 = add i32 %lsr.iv8.us, %21
  %141 = sext i32 %140 to i64
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f8.host, i64 %142
  %144 = load float, ptr %143, align 4, !tbaa !36
  %145 = add nsw i64 %141, 1
  %146 = getelementptr inbounds float, ptr %f8.host, i64 %145
  %147 = load float, ptr %146, align 4, !tbaa !36
  %148 = getelementptr inbounds float, ptr %f8.host, i64 %141
  %149 = load float, ptr %148, align 4, !tbaa !36
  %150 = fadd float %147, %149
  %151 = fmul float %150, 3.000000e+00
  %152 = add nsw i64 %141, -1
  %153 = getelementptr inbounds float, ptr %f8.host, i64 %152
  %154 = sext i32 %139 to i64
  %155 = add nsw i64 %154, 2
  %156 = getelementptr inbounds float, ptr %f8.host, i64 %155
  %157 = add nsw i64 %154, 1
  %158 = getelementptr inbounds float, ptr %f8.host, i64 %157
  %159 = load float, ptr %158, align 4, !tbaa !36
  %160 = getelementptr inbounds float, ptr %f8.host, i64 %154
  %161 = load float, ptr %160, align 4, !tbaa !36
  %162 = fadd float %159, %161
  %163 = fmul float %162, 3.000000e+00
  %164 = add nsw i64 %154, -1
  %165 = getelementptr inbounds float, ptr %f8.host, i64 %164
  %166 = load float, ptr %165, align 4, !tbaa !36
  %167 = fadd float %166, %163
  %168 = sext i32 %138 to i64
  %169 = add nsw i64 %168, 2
  %170 = getelementptr inbounds float, ptr %f8.host, i64 %169
  %171 = load float, ptr %170, align 4, !tbaa !36
  %172 = add nsw i64 %168, 1
  %173 = getelementptr inbounds float, ptr %f8.host, i64 %172
  %174 = load float, ptr %173, align 4, !tbaa !36
  %175 = getelementptr inbounds float, ptr %f8.host, i64 %168
  %176 = load float, ptr %175, align 4, !tbaa !36
  %177 = fadd float %174, %176
  %178 = fmul float %177, 3.000000e+00
  %179 = add nsw i64 %168, -1
  %180 = getelementptr inbounds float, ptr %f8.host, i64 %179
  %181 = load float, ptr %180, align 4, !tbaa !36
  %182 = fadd float %181, %178
  %183 = fadd float %171, %182
  %184 = load float, ptr %153, align 4, !tbaa !36
  %185 = load float, ptr %156, align 4, !tbaa !36
  %186 = insertelement <2 x float> poison, float %184, i64 0
  %187 = insertelement <2 x float> %186, float %185, i64 1
  %188 = insertelement <2 x float> poison, float %151, i64 0
  %189 = insertelement <2 x float> %188, float %167, i64 1
  %190 = fadd <2 x float> %187, %189
  %191 = insertelement <2 x float> poison, float %144, i64 0
  %192 = insertelement <2 x float> %191, float %183, i64 1
  %193 = fadd <2 x float> %192, %190
  %194 = fmul <2 x float> %193, <float 1.250000e-01, float 3.750000e-01>
  %195 = sext i32 %137 to i64
  %196 = add nsw i64 %195, 2
  %197 = getelementptr inbounds float, ptr %f8.host, i64 %196
  %198 = load float, ptr %197, align 4, !tbaa !36
  %199 = add nsw i64 %195, 1
  %200 = getelementptr inbounds float, ptr %f8.host, i64 %199
  %201 = load float, ptr %200, align 4, !tbaa !36
  %202 = getelementptr inbounds float, ptr %f8.host, i64 %195
  %203 = load float, ptr %202, align 4, !tbaa !36
  %204 = fadd float %201, %203
  %205 = fmul float %204, 3.000000e+00
  %206 = add nsw i64 %195, -1
  %207 = getelementptr inbounds float, ptr %f8.host, i64 %206
  %208 = load float, ptr %207, align 4, !tbaa !36
  %209 = fadd float %208, %205
  %210 = fadd float %198, %209
  %211 = fmul float %210, 1.250000e-01
  %212 = extractelement <2 x float> %194, i64 1
  %213 = fadd float %212, %211
  %214 = extractelement <2 x float> %194, i64 0
  %215 = fadd float %214, %213
  %216 = fmul float %215, 1.250000e-01
  store float %216, ptr %lsr.iv4.us, align 4, !tbaa !32
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us", !llvm.loop !61

"end for f9.s0.v3.loopexit.us":                   ; preds = %"for f9.s0.v3.us", %middle.block
  %217 = add nsw i32 %f9.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %17
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %19
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %19
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %19
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %19
  %.not.us = icmp eq i32 %f9.s0.v4.us, %f9.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f9.s0.v4.us"

destructor_block:                                 ; preds = %"end for f9.s0.v3.loopexit.us", %"for f9.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f10.s0.v6(ptr nocapture readnone %__user_context, i32 %f10.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 3
  %f10.v4.extent_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 9
  %local_laplacian.min.1 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 10
  %f10.host = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 12
  %f9.host = load ptr, ptr %3, align 8
  %4 = add nsw i32 %local_laplacian.min.1, -254
  %5 = ashr i32 %4, 7
  %6 = add nsw i32 %f10.v4.extent_realized.s, 1
  %7 = add nsw i32 %6, %5
  %8 = icmp sgt i32 %f10.v4.extent_realized.s, -1
  br i1 %8, label %"for f10.s0.v4.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.preheader":                        ; preds = %entry
  %9 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 8
  %local_laplacian.min.0 = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 4
  %f9.stride.2 = load i32, ptr %10, align 4
  %a744 = load i32, ptr %closure, align 4
  %11 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 6
  %f9.v3.min_realized = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 5
  %f9.v3.extent_realized.s.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 2
  %f10.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f10.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 1
  %f10.stride.2 = load i32, ptr %15, align 4
  %16 = sext i32 %f10.stride.2 to i64
  %17 = add i32 %f10.v3.extent_realized.s, 1
  %18 = add nsw i64 %14, 1
  %19 = sext i32 %5 to i64
  %20 = sext i32 %f10.s0.v6 to i64
  %21 = tail call i32 @llvm.smax.i32(i32 %a744, i32 0)
  %smax = zext i32 %21 to i64
  %22 = sub nsw i64 %20, %smax
  %23 = mul nsw i64 %22, %16
  %reass.sub = sub i32 %f9.v3.extent_realized.s.s, %f9.v3.min_realized
  %24 = add i32 %reass.sub, 1
  %25 = shl i32 %24, 1
  %26 = icmp ult i32 %f10.v3.extent_realized.s, 2147483647
  %27 = add nsw i32 %local_laplacian.min.0, -254
  %28 = ashr i32 %27, 7
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %23, %29
  %31 = shl nsw i32 %28, 1
  %t2168.s = sub nsw i32 %f10.s0.v6, %21
  %32 = mul i32 %t2168.s, %f9.stride.2
  %33 = add i32 %31, %32
  br i1 %26, label %"for f10.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.us.preheader":                     ; preds = %"for f10.s0.v4.preheader"
  %34 = shl nsw i32 %5, 1
  %35 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 7
  %f9.v4.min_realized = load i32, ptr %35, align 4
  %36 = xor i32 %f9.v4.min_realized, -1
  %37 = add i32 %34, %36
  %38 = mul i32 %24, %37
  %39 = sub i32 %38, %f9.v3.min_realized
  %40 = sub i32 %34, %f9.v4.min_realized
  %41 = mul i32 %24, %40
  %42 = sub i32 %41, %f9.v3.min_realized
  %43 = or i32 %34, 1
  %44 = sub i32 %43, %f9.v4.min_realized
  %45 = mul i32 %24, %44
  %46 = sub i32 %45, %f9.v3.min_realized
  %47 = add nsw i32 %34, 2
  %48 = sub i32 %47, %f9.v4.min_realized
  %49 = mul i32 %24, %48
  %50 = sub i32 %49, %f9.v3.min_realized
  %51 = add i32 %49, %32
  %52 = add i32 %51, %31
  %53 = sub i32 %52, %f9.v3.min_realized
  %54 = shl i32 %24, 1
  %55 = add i32 %45, %32
  %56 = add i32 %55, %31
  %57 = sub i32 %56, %f9.v3.min_realized
  %58 = add i32 %32, %41
  %59 = add i32 %58, %31
  %60 = sub i32 %59, %f9.v3.min_realized
  %61 = add i32 %38, %32
  %62 = add i32 %61, %31
  %63 = sub i32 %62, %f9.v3.min_realized
  %64 = zext i32 %17 to i64
  %min.iters.check = icmp ult i32 %17, 4
  %mul.result = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result7 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result10 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result13 = shl i32 %f10.v3.extent_realized.s, 1
  %n.vec = and i64 %64, 4294967292
  %.cast = trunc i64 %n.vec to i32
  %65 = shl i32 %.cast, 1
  %.cast15 = trunc i64 %n.vec to i32
  %66 = shl i32 %.cast15, 1
  %.cast18 = trunc i64 %n.vec to i32
  %67 = shl i32 %.cast18, 1
  %.cast21 = trunc i64 %n.vec to i32
  %68 = shl i32 %.cast21, 1
  %ind.end24 = add i64 %30, %n.vec
  %.cast26 = trunc i64 %n.vec to i32
  %ind.end27 = sub i32 %17, %.cast26
  %invariant.gep = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep59 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep61 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep63 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep65 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep67 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep69 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep71 = getelementptr float, ptr %f9.host, i64 -1
  %cmp.n = icmp eq i64 %n.vec, %64
  br label %"for f10.s0.v4.us"

"for f10.s0.v4.us":                               ; preds = %"for f10.s0.v4.us.preheader", %"end for f10.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f10.s0.v4.us.preheader" ], [ %indvar.next, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv17.us = phi i32 [ %39, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next18.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv13.us = phi i32 [ %42, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next14.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv9.us = phi i32 [ %46, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next10.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv5.us = phi i32 [ %50, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next6.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi i64 [ %19, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next2.us, %"end for f10.s0.v3.loopexit.us" ]
  %69 = sub nsw i64 %lsr.iv1.us, %19
  %70 = mul i64 %69, %18
  %71 = sub i64 %70, %29
  br i1 %min.iters.check, label %"for f10.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f10.s0.v4.us"
  %72 = mul i32 %54, %indvar
  %73 = add i32 %63, %72
  %74 = add i32 %60, %72
  %75 = add i32 %57, %72
  %76 = add i32 %53, %72
  %77 = add i32 %76, %mul.result
  %78 = icmp slt i32 %77, %76
  %79 = add i32 %75, %mul.result7
  %80 = icmp slt i32 %79, %75
  %81 = add i32 %74, %mul.result10
  %82 = icmp slt i32 %81, %74
  %83 = add i32 %73, %mul.result13
  %84 = icmp slt i32 %83, %73
  %85 = or i1 %78, %80
  %86 = or i1 %82, %85
  %87 = or i1 %84, %86
  br i1 %87, label %"for f10.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv17.us, %65
  %ind.end16 = add i32 %lsr.iv13.us, %66
  %ind.end19 = add i32 %lsr.iv9.us, %67
  %ind.end22 = add i32 %lsr.iv5.us, %68
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %30, %index
  %.cast29 = trunc i64 %index to i32
  %88 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv5.us, %88
  %.cast31 = trunc i64 %index to i32
  %89 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv9.us, %89
  %.cast33 = trunc i64 %index to i32
  %90 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv13.us, %90
  %.cast35 = trunc i64 %index to i32
  %91 = shl i32 %.cast35, 1
  %offset.idx36 = add i32 %lsr.iv17.us, %91
  %92 = add i32 %33, %offset.idx36
  %93 = add i32 %33, %offset.idx34
  %94 = add i32 %33, %offset.idx32
  %95 = add i32 %33, %offset.idx30
  %96 = sext i32 %95 to i64
  %97 = add nsw i64 %96, 2
  %gep = getelementptr float, ptr %invariant.gep, i64 %97
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !32
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec37 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep60 = getelementptr float, ptr %invariant.gep59, i64 %96
  %wide.vec38 = load <8 x float>, ptr %gep60, align 4, !tbaa !32
  %strided.vec39 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec40 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %98 = fadd <4 x float> %strided.vec, %strided.vec40
  %99 = fmul <4 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = fadd <4 x float> %strided.vec39, %99
  %101 = fadd <4 x float> %strided.vec37, %100
  %102 = fmul <4 x float> %101, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %103 = sext i32 %94 to i64
  %104 = add nsw i64 %103, 2
  %gep62 = getelementptr float, ptr %invariant.gep61, i64 %104
  %wide.vec41 = load <8 x float>, ptr %gep62, align 4, !tbaa !32
  %strided.vec42 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec43 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep64 = getelementptr float, ptr %invariant.gep63, i64 %103
  %wide.vec44 = load <8 x float>, ptr %gep64, align 4, !tbaa !32
  %strided.vec45 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec46 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %105 = fadd <4 x float> %strided.vec42, %strided.vec46
  %106 = fmul <4 x float> %105, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %107 = fadd <4 x float> %strided.vec45, %106
  %108 = fadd <4 x float> %strided.vec43, %107
  %109 = sext i32 %93 to i64
  %110 = add nsw i64 %109, 2
  %gep66 = getelementptr float, ptr %invariant.gep65, i64 %110
  %wide.vec47 = load <8 x float>, ptr %gep66, align 4, !tbaa !32
  %strided.vec48 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec49 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep68 = getelementptr float, ptr %invariant.gep67, i64 %109
  %wide.vec50 = load <8 x float>, ptr %gep68, align 4, !tbaa !32
  %strided.vec51 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec52 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %111 = fadd <4 x float> %strided.vec48, %strided.vec52
  %112 = fmul <4 x float> %111, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %113 = fadd <4 x float> %strided.vec51, %112
  %114 = fadd <4 x float> %strided.vec49, %113
  %115 = fadd <4 x float> %108, %114
  %116 = fmul <4 x float> %115, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %117 = sext i32 %92 to i64
  %118 = add nsw i64 %117, 2
  %gep70 = getelementptr float, ptr %invariant.gep69, i64 %118
  %wide.vec53 = load <8 x float>, ptr %gep70, align 4, !tbaa !32
  %strided.vec54 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec55 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep72 = getelementptr float, ptr %invariant.gep71, i64 %117
  %wide.vec56 = load <8 x float>, ptr %gep72, align 4, !tbaa !32
  %strided.vec57 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec58 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %119 = fadd <4 x float> %strided.vec54, %strided.vec58
  %120 = fmul <4 x float> %119, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %121 = fadd <4 x float> %strided.vec57, %120
  %122 = fadd <4 x float> %strided.vec55, %121
  %123 = fmul <4 x float> %122, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %124 = fadd <4 x float> %116, %123
  %125 = fadd <4 x float> %102, %124
  %126 = fmul <4 x float> %125, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %127 = add i64 %71, %offset.idx
  %128 = getelementptr inbounds float, ptr %f10.host, i64 %127
  store <4 x float> %126, ptr %128, align 4, !tbaa !28
  %index.next = add nuw i64 %index, 4
  %129 = icmp eq i64 %index.next, %n.vec
  br i1 %129, label %middle.block, label %vector.body, !llvm.loop !62

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us.preheader"

"for f10.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f10.s0.v4.us", %middle.block
  %lsr.iv19.us.ph = phi i32 [ %lsr.iv17.us, %vector.scevcheck ], [ %lsr.iv17.us, %"for f10.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv15.us.ph = phi i32 [ %lsr.iv13.us, %vector.scevcheck ], [ %lsr.iv13.us, %"for f10.s0.v4.us" ], [ %ind.end16, %middle.block ]
  %lsr.iv11.us.ph = phi i32 [ %lsr.iv9.us, %vector.scevcheck ], [ %lsr.iv9.us, %"for f10.s0.v4.us" ], [ %ind.end19, %middle.block ]
  %lsr.iv7.us.ph = phi i32 [ %lsr.iv5.us, %vector.scevcheck ], [ %lsr.iv5.us, %"for f10.s0.v4.us" ], [ %ind.end22, %middle.block ]
  %lsr.iv3.us.ph = phi i64 [ %30, %vector.scevcheck ], [ %30, %"for f10.s0.v4.us" ], [ %ind.end24, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %17, %vector.scevcheck ], [ %17, %"for f10.s0.v4.us" ], [ %ind.end27, %middle.block ]
  br label %"for f10.s0.v3.us"

"for f10.s0.v3.us":                               ; preds = %"for f10.s0.v3.us.preheader", %"for f10.s0.v3.us"
  %lsr.iv19.us = phi i32 [ %lsr.iv.next20.us, %"for f10.s0.v3.us" ], [ %lsr.iv19.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv15.us = phi i32 [ %lsr.iv.next16.us, %"for f10.s0.v3.us" ], [ %lsr.iv15.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv11.us = phi i32 [ %lsr.iv.next12.us, %"for f10.s0.v3.us" ], [ %lsr.iv11.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv7.us = phi i32 [ %lsr.iv.next8.us, %"for f10.s0.v3.us" ], [ %lsr.iv7.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv3.us = phi i64 [ %lsr.iv.next4.us, %"for f10.s0.v3.us" ], [ %lsr.iv3.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f10.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f10.s0.v3.us.preheader" ]
  %130 = add i32 %33, %lsr.iv19.us
  %131 = add i32 %33, %lsr.iv15.us
  %132 = add i32 %33, %lsr.iv11.us
  %133 = add i32 %33, %lsr.iv7.us
  %134 = sext i32 %133 to i64
  %135 = add nsw i64 %134, 2
  %136 = getelementptr inbounds float, ptr %f9.host, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !32
  %138 = add nsw i64 %134, 1
  %139 = getelementptr inbounds float, ptr %f9.host, i64 %138
  %140 = load float, ptr %139, align 4, !tbaa !32
  %141 = getelementptr inbounds float, ptr %f9.host, i64 %134
  %142 = load float, ptr %141, align 4, !tbaa !32
  %143 = fadd float %140, %142
  %144 = fmul float %143, 3.000000e+00
  %145 = add nsw i64 %134, -1
  %146 = getelementptr inbounds float, ptr %f9.host, i64 %145
  %147 = sext i32 %132 to i64
  %148 = add nsw i64 %147, 2
  %149 = getelementptr inbounds float, ptr %f9.host, i64 %148
  %150 = add nsw i64 %147, 1
  %151 = getelementptr inbounds float, ptr %f9.host, i64 %150
  %152 = load float, ptr %151, align 4, !tbaa !32
  %153 = getelementptr inbounds float, ptr %f9.host, i64 %147
  %154 = load float, ptr %153, align 4, !tbaa !32
  %155 = fadd float %152, %154
  %156 = fmul float %155, 3.000000e+00
  %157 = add nsw i64 %147, -1
  %158 = getelementptr inbounds float, ptr %f9.host, i64 %157
  %159 = load float, ptr %158, align 4, !tbaa !32
  %160 = fadd float %159, %156
  %161 = sext i32 %131 to i64
  %162 = add nsw i64 %161, 2
  %163 = getelementptr inbounds float, ptr %f9.host, i64 %162
  %164 = load float, ptr %163, align 4, !tbaa !32
  %165 = add nsw i64 %161, 1
  %166 = getelementptr inbounds float, ptr %f9.host, i64 %165
  %167 = load float, ptr %166, align 4, !tbaa !32
  %168 = getelementptr inbounds float, ptr %f9.host, i64 %161
  %169 = load float, ptr %168, align 4, !tbaa !32
  %170 = fadd float %167, %169
  %171 = fmul float %170, 3.000000e+00
  %172 = add nsw i64 %161, -1
  %173 = getelementptr inbounds float, ptr %f9.host, i64 %172
  %174 = load float, ptr %173, align 4, !tbaa !32
  %175 = fadd float %174, %171
  %176 = fadd float %164, %175
  %177 = load float, ptr %146, align 4, !tbaa !32
  %178 = load float, ptr %149, align 4, !tbaa !32
  %179 = insertelement <2 x float> poison, float %177, i64 0
  %180 = insertelement <2 x float> %179, float %178, i64 1
  %181 = insertelement <2 x float> poison, float %144, i64 0
  %182 = insertelement <2 x float> %181, float %160, i64 1
  %183 = fadd <2 x float> %180, %182
  %184 = insertelement <2 x float> poison, float %137, i64 0
  %185 = insertelement <2 x float> %184, float %176, i64 1
  %186 = fadd <2 x float> %185, %183
  %187 = fmul <2 x float> %186, <float 1.250000e-01, float 3.750000e-01>
  %188 = sext i32 %130 to i64
  %189 = add nsw i64 %188, 2
  %190 = getelementptr inbounds float, ptr %f9.host, i64 %189
  %191 = load float, ptr %190, align 4, !tbaa !32
  %192 = add nsw i64 %188, 1
  %193 = getelementptr inbounds float, ptr %f9.host, i64 %192
  %194 = load float, ptr %193, align 4, !tbaa !32
  %195 = getelementptr inbounds float, ptr %f9.host, i64 %188
  %196 = load float, ptr %195, align 4, !tbaa !32
  %197 = fadd float %194, %196
  %198 = fmul float %197, 3.000000e+00
  %199 = add nsw i64 %188, -1
  %200 = getelementptr inbounds float, ptr %f9.host, i64 %199
  %201 = load float, ptr %200, align 4, !tbaa !32
  %202 = fadd float %201, %198
  %203 = fadd float %191, %202
  %204 = fmul float %203, 1.250000e-01
  %205 = extractelement <2 x float> %187, i64 1
  %206 = fadd float %205, %204
  %207 = extractelement <2 x float> %187, i64 0
  %208 = fadd float %207, %206
  %209 = fmul float %208, 1.250000e-01
  %210 = add i64 %71, %lsr.iv3.us
  %211 = getelementptr inbounds float, ptr %f10.host, i64 %210
  store float %209, ptr %211, align 4, !tbaa !28
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %lsr.iv.next4.us = add i64 %lsr.iv3.us, 1
  %lsr.iv.next8.us = add i32 %lsr.iv7.us, 2
  %lsr.iv.next12.us = add i32 %lsr.iv11.us, 2
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, 2
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, 2
  %.not3.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not3.us, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us", !llvm.loop !63

"end for f10.s0.v3.loopexit.us":                  ; preds = %"for f10.s0.v3.us", %middle.block
  %lsr.iv.next2.us = add nsw i64 %lsr.iv1.us, 1
  %lsr.us = trunc i64 %lsr.iv.next2.us to i32
  %lsr.iv.next6.us = add i32 %lsr.iv5.us, %25
  %lsr.iv.next10.us = add i32 %lsr.iv9.us, %25
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, %25
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, %25
  %.not.us = icmp eq i32 %7, %lsr.us
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f10.s0.v4.us"

destructor_block:                                 ; preds = %"end for f10.s0.v3.loopexit.us", %"for f10.s0.v4.preheader", %entry
  ret i32 0
}

define internal i32 @par_for___local_laplacian_local_laplacian.s0.v4.v264(ptr %__user_context, i32 %local_laplacian.s0.v4.v264, ptr noalias readonly %closure) {
entry:
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 2
  %a1139 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 3
  %f130.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 4
  %f130.v3.min_realized = load i32, ptr %3, align 4
  %4 = sext i32 %f130.v3.min_realized to i64
  %5 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 5
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 6
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 7
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 8
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 9
  %f4.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 10
  %f4.v3.min_realized = load i32, ptr %13, align 4
  %14 = sub i32 0, %f4.v3.min_realized
  %15 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 11
  %f4.v4.min_realized = load i32, ptr %15, align 4
  %16 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 12
  %f5.stride.1 = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 13
  %f5.v3.extent_realized.s = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 14
  %f5.v3.min_realized = load i32, ptr %18, align 4
  %19 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 15
  %f5.v4.min_realized = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 16
  %f6.stride.1 = load i32, ptr %20, align 4
  %21 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 17
  %f6.v3.extent_realized.s = load i32, ptr %21, align 4
  %22 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 18
  %f6.v3.min_realized = load i32, ptr %22, align 4
  %23 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 19
  %f6.v4.min_realized = load i32, ptr %23, align 4
  %24 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 20
  %f7.stride.1 = load i32, ptr %24, align 4
  %25 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 21
  %f7.v3.extent_realized.s = load i32, ptr %25, align 4
  %26 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 22
  %f7.v3.min_realized = load i32, ptr %26, align 4
  %27 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 23
  %f7.v4.min_realized = load i32, ptr %27, align 4
  %28 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 24
  %f72.v3.extent_realized.s = load i32, ptr %28, align 4
  %29 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 25
  %f72.v3.min_realized = load i32, ptr %29, align 4
  %30 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 26
  %f72.v4.min_realized = load i32, ptr %30, align 4
  %31 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 27
  %f73.v3.extent_realized.s = load i32, ptr %31, align 4
  %32 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 28
  %f73.v3.min_realized = load i32, ptr %32, align 4
  %33 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 29
  %f73.v4.min_realized = load i32, ptr %33, align 4
  %34 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 30
  %f74.v3.extent_realized.s = load i32, ptr %34, align 4
  %35 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 31
  %f74.v3.min_realized = load i32, ptr %35, align 4
  %36 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 32
  %f74.v4.min_realized = load i32, ptr %36, align 4
  %37 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 33
  %f75.v3.extent_realized.s = load i32, ptr %37, align 4
  %38 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 34
  %f75.v3.min_realized = load i32, ptr %38, align 4
  %39 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 35
  %f75.v4.min_realized = load i32, ptr %39, align 4
  %40 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 36
  %f8.stride.2 = load i32, ptr %40, align 4
  %41 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 37
  %f8.v3.extent_realized.s = load i32, ptr %41, align 4
  %42 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 38
  %f8.v3.min_realized = load i32, ptr %42, align 4
  %43 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 39
  %f8.v4.min_realized = load i32, ptr %43, align 4
  %44 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 40
  %input.extent.0 = load i32, ptr %44, align 4
  %45 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 41
  %input.extent.1 = load i32, ptr %45, align 4
  %46 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 42
  %input.extent.2 = load i32, ptr %46, align 4
  %47 = sext i32 %input.extent.2 to i64
  %48 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 43
  %input.min.0 = load i32, ptr %48, align 4
  %49 = sext i32 %input.min.0 to i64
  %50 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 44
  %b1148 = load i32, ptr %50, align 4
  %51 = sext i32 %b1148 to i64
  %52 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 45
  %b1146 = load i32, ptr %52, align 4
  %b1037 = sext i32 %b1146 to i64
  %53 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 46
  %input.stride.1 = load i32, ptr %53, align 4
  %54 = sext i32 %input.stride.1 to i64
  %55 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 47
  %input.stride.2 = load i32, ptr %55, align 4
  %56 = sext i32 %input.stride.2 to i64
  %57 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 48
  %levels = load i32, ptr %57, align 4
  %58 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 49
  %local_laplacian.extent.0 = load i32, ptr %58, align 4
  %59 = sext i32 %local_laplacian.extent.0 to i64
  %60 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 50
  %local_laplacian.extent.1 = load i32, ptr %60, align 4
  %61 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 51
  %local_laplacian.extent.2 = load i32, ptr %61, align 4
  %62 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 52
  %local_laplacian.min.0 = load i32, ptr %62, align 4
  %63 = sext i32 %local_laplacian.min.0 to i64
  %64 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 53
  %a1120 = load i32, ptr %64, align 4
  %65 = sext i32 %a1120 to i64
  %66 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 54
  %local_laplacian.min.1 = load i32, ptr %66, align 4
  %67 = sext i32 %local_laplacian.min.1 to i64
  %68 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 55
  %local_laplacian.min.1.required = load i32, ptr %68, align 4
  %69 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 56
  %b1028 = load i32, ptr %69, align 4
  %70 = sext i32 %b1028 to i64
  %71 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 57
  %local_laplacian.s0.v4.v264.epilogue = load i32, ptr %71, align 4
  %72 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 58
  %local_laplacian.s0.v4.v264.prologue = load i32, ptr %72, align 4
  %73 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 59
  %local_laplacian.stride.1 = load i32, ptr %73, align 4
  %74 = sext i32 %local_laplacian.stride.1 to i64
  %75 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 60
  %local_laplacian.stride.2 = load i32, ptr %75, align 4
  %76 = sext i32 %local_laplacian.stride.2 to i64
  %77 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 61
  %f0.host = load ptr, ptr %77, align 8
  %78 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 63
  %f130.host = load ptr, ptr %78, align 8
  %79 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 65
  %f2.host = load ptr, ptr %79, align 8
  %80 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 67
  %f4.host = load ptr, ptr %80, align 8
  %81 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 69
  %f5.host = load ptr, ptr %81, align 8
  %82 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 71
  %f6.host = load ptr, ptr %82, align 8
  %83 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 73
  %f7.host = load ptr, ptr %83, align 8
  %84 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 75
  %f72.host = load ptr, ptr %84, align 8
  %85 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 77
  %f73.host = load ptr, ptr %85, align 8
  %86 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 79
  %f74.host = load ptr, ptr %86, align 8
  %87 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 81
  %f75.host = load ptr, ptr %87, align 8
  %88 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 83
  %f8.host = load ptr, ptr %88, align 8
  %89 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 85
  %input.host = load ptr, ptr %89, align 8
  %90 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 87
  %local_laplacian.host = load ptr, ptr %90, align 8
  %91 = icmp sgt i32 %local_laplacian.s0.v4.v264.epilogue, %local_laplacian.s0.v4.v264
  %92 = icmp sle i32 %local_laplacian.s0.v4.v264.prologue, %local_laplacian.s0.v4.v264
  %93 = and i1 %91, %92
  %94 = shl nsw i32 %local_laplacian.s0.v4.v264, 6
  %a782 = add nsw i32 %local_laplacian.min.1, %94
  %95 = add i32 %local_laplacian.extent.1, -64
  %b784 = add i32 %95, %local_laplacian.min.1
  %local_laplacian.s0.v4.v4.base = tail call i32 @llvm.smin.i32(i32 %b784, i32 %a782)
  %a784 = add nsw i32 %a1120, -14
  %96 = add nsw i32 %local_laplacian.min.0, %local_laplacian.extent.0
  %b786 = add nsw i32 %96, -43
  %97 = tail call i32 @llvm.smin.i32(i32 %b786, i32 %a784)
  %98 = ashr i32 %97, 4
  %a783 = add nsw i32 %98, -1
  %a785 = add nsw i32 %a1120, -30
  %b787 = add nsw i32 %96, -83
  %99 = tail call i32 @llvm.smin.i32(i32 %b787, i32 %a785)
  %b785 = ashr i32 %99, 4
  %.not167 = icmp slt i32 %b785, %98
  %f129.v3.min_realized = select i1 %.not167, i32 %b785, i32 %a783
  %100 = ashr i32 %a784, 3
  %101 = add nsw i32 %96, 13
  %102 = ashr i32 %101, 3
  %103 = sub nsw i32 %102, %100
  %104 = and i32 %103, -8
  %a790 = add nsw i32 %104, %100
  %b792 = ashr i32 %b786, 3
  %105 = tail call i32 @llvm.smin.i32(i32 %b792, i32 %a790)
  %106 = add nsw i32 %105, 9
  %a789 = ashr i32 %106, 1
  %107 = ashr i32 %a785, 4
  %108 = add nsw i32 %96, 29
  %109 = ashr i32 %108, 4
  %110 = sub nsw i32 %109, %107
  %111 = and i32 %110, -8
  %a791 = add nsw i32 %111, %107
  %b793 = ashr i32 %b787, 4
  %112 = tail call i32 @llvm.smin.i32(i32 %b793, i32 %a791)
  %b791 = add nsw i32 %112, 7
  %113 = tail call i32 @llvm.smax.i32(i32 %a789, i32 %b791)
  %f129.v3.extent_realized.s = sub nsw i32 %113, %f129.v3.min_realized
  %114 = add nsw i32 %local_laplacian.s0.v4.v4.base, 2
  %t3087 = and i32 %114, 15
  %115 = add nuw nsw i32 %t3087, 139
  %116 = lshr i32 %115, 4
  %117 = zext i32 %116 to i64
  %118 = add nsw i32 %f129.v3.extent_realized.s, 1
  %119 = zext i32 %118 to i64
  %120 = shl nuw nsw i64 %119, 2
  %121 = mul nuw nsw i64 %120, %117
  %122 = icmp ult i64 %121, 2147483648
  br i1 %93, label %true_bb, label %false_bb

true_bb:                                          ; preds = %entry
  %123 = ashr i32 %103, 3
  %124 = ashr i32 %110, 3
  br i1 %122, label %"assert succeeded", label %"assert failed", !prof !5

false_bb:                                         ; preds = %entry
  %125 = lshr i32 %103, 3
  %126 = lshr i32 %110, 3
  br i1 %122, label %"assert succeeded113", label %"assert failed112", !prof !5

"assert failed":                                  ; preds = %true_bb
  %127 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %121, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded":                               ; preds = %true_bb
  %128 = add nuw nsw i64 %121, 4
  %129 = tail call ptr @halide_malloc(ptr %__user_context, i64 %128)
  %.not97 = icmp eq ptr %129, null
  br i1 %.not97, label %"assert failed1", label %"assert succeeded2", !prof !4

destructor_block.thread:                          ; preds = %if.then.i265, %"assert failed73", %"assert failed17", %"assert failed15", %"assert failed13", %"assert failed11", %"assert failed9", %"assert failed7", %"assert failed5", %"assert failed3", %"assert failed1", %"assert failed", %if.then.i280, %"assert failed137", %"assert failed135", %"assert failed129", %"assert failed127", %"assert failed121", %"assert failed119", %"assert failed114", %"assert failed112"
  %.029.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ %9117, %"assert failed135" ], [ %9117, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i265 ]
  %.028.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ %9078, %"assert failed127" ], [ %9078, %"assert failed129" ], [ %9078, %"assert failed135" ], [ %9078, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i265 ]
  %.027.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ %9055, %"assert failed119" ], [ %9055, %"assert failed121" ], [ %9055, %"assert failed127" ], [ %9055, %"assert failed129" ], [ %9055, %"assert failed135" ], [ %9055, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i265 ]
  %.024.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ %223, %"assert failed15" ], [ %223, %"assert failed17" ], [ %223, %"assert failed73" ], [ null, %if.then.i265 ]
  %.023.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ %194, %"assert failed11" ], [ %194, %"assert failed13" ], [ %194, %"assert failed15" ], [ %194, %"assert failed17" ], [ %194, %"assert failed73" ], [ null, %if.then.i265 ]
  %.022.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ %155, %"assert failed7" ], [ %155, %"assert failed9" ], [ %155, %"assert failed11" ], [ %155, %"assert failed13" ], [ %155, %"assert failed15" ], [ %155, %"assert failed17" ], [ %155, %"assert failed73" ], [ null, %if.then.i265 ]
  %.0.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ %129, %"assert failed3" ], [ %129, %"assert failed5" ], [ %129, %"assert failed7" ], [ %129, %"assert failed9" ], [ %129, %"assert failed11" ], [ %129, %"assert failed13" ], [ %129, %"assert failed15" ], [ %129, %"assert failed17" ], [ %129, %"assert failed73" ], [ null, %if.then.i265 ]
  %.ph = phi i32 [ %9053, %"assert failed112" ], [ %9056, %"assert failed114" ], [ %9076, %"assert failed119" ], [ %9079, %"assert failed121" ], [ %9115, %"assert failed127" ], [ %9118, %"assert failed129" ], [ %9144, %"assert failed135" ], [ %9147, %"assert failed137" ], [ 0, %if.then.i280 ], [ %127, %"assert failed" ], [ %133, %"assert failed1" ], [ %153, %"assert failed3" ], [ %156, %"assert failed5" ], [ %192, %"assert failed7" ], [ %195, %"assert failed9" ], [ %221, %"assert failed11" ], [ %224, %"assert failed13" ], [ %2525, %"assert failed15" ], [ %2528, %"assert failed17" ], [ %7749, %"assert failed73" ], [ 0, %if.then.i265 ]
  %.not185 = icmp eq i32 %.ph, 0
  br label %call_destructor.exit206

destructor_block:                                 ; preds = %"assert failed186", %"assert failed184"
  %130 = phi i32 [ %11520, %"assert failed186" ], [ %11518, %"assert failed184" ]
  %.not = icmp eq i32 %130, 0
  br i1 %.not, label %call_destructor.exit251, label %if.then.i205

if.then.i205:                                     ; preds = %destructor_block
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9146) #7
  br label %call_destructor.exit206

call_destructor.exit206:                          ; preds = %destructor_block.thread, %if.then.i205
  %.not195 = phi i1 [ %.not185, %destructor_block.thread ], [ false, %if.then.i205 ]
  %131 = phi i32 [ %.ph, %destructor_block.thread ], [ %130, %if.then.i205 ]
  %.0194 = phi ptr [ %.0.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.022193 = phi ptr [ %.022.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.023192 = phi ptr [ %.023.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.024191 = phi ptr [ %.024.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.027190 = phi ptr [ %.027.ph, %destructor_block.thread ], [ %9055, %if.then.i205 ]
  %.028189 = phi ptr [ %.028.ph, %destructor_block.thread ], [ %9078, %if.then.i205 ]
  %.029188 = phi ptr [ %.029.ph, %destructor_block.thread ], [ %9117, %if.then.i205 ]
  %tobool.i207 = icmp eq ptr %.029188, null
  %brmerge.i209 = or i1 %.not195, %tobool.i207
  br i1 %brmerge.i209, label %call_destructor.exit211, label %if.then.i210

if.then.i210:                                     ; preds = %call_destructor.exit206
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.029188) #7
  br label %call_destructor.exit211

call_destructor.exit211:                          ; preds = %if.then.i210, %call_destructor.exit206
  %tobool.i212 = icmp eq ptr %.028189, null
  %brmerge.i214 = or i1 %.not195, %tobool.i212
  br i1 %brmerge.i214, label %call_destructor.exit216, label %if.then.i215

if.then.i215:                                     ; preds = %call_destructor.exit211
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.028189) #7
  br label %call_destructor.exit216

call_destructor.exit216:                          ; preds = %if.then.i215, %call_destructor.exit211
  %tobool.i217 = icmp eq ptr %.027190, null
  %brmerge.i219 = or i1 %.not195, %tobool.i217
  br i1 %brmerge.i219, label %call_destructor.exit231, label %if.then.i220

if.then.i220:                                     ; preds = %call_destructor.exit216
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.027190) #7
  br label %call_destructor.exit231

call_destructor.exit231:                          ; preds = %if.then.i220, %call_destructor.exit216
  %tobool.i232 = icmp eq ptr %.024191, null
  %brmerge.i234 = or i1 %.not195, %tobool.i232
  br i1 %brmerge.i234, label %call_destructor.exit236, label %if.then.i235

if.then.i235:                                     ; preds = %call_destructor.exit231
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.024191) #7
  br label %call_destructor.exit236

call_destructor.exit236:                          ; preds = %if.then.i235, %call_destructor.exit231
  %tobool.i237 = icmp eq ptr %.023192, null
  %brmerge.i239 = or i1 %.not195, %tobool.i237
  br i1 %brmerge.i239, label %call_destructor.exit241, label %if.then.i240

if.then.i240:                                     ; preds = %call_destructor.exit236
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.023192) #7
  br label %call_destructor.exit241

call_destructor.exit241:                          ; preds = %if.then.i240, %call_destructor.exit236
  %tobool.i242 = icmp eq ptr %.022193, null
  %brmerge.i244 = or i1 %.not195, %tobool.i242
  br i1 %brmerge.i244, label %call_destructor.exit246, label %if.then.i245

if.then.i245:                                     ; preds = %call_destructor.exit241
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.022193) #7
  br label %call_destructor.exit246

call_destructor.exit246:                          ; preds = %if.then.i245, %call_destructor.exit241
  %tobool.i247 = icmp eq ptr %.0194, null
  %brmerge.i249 = or i1 %.not195, %tobool.i247
  br i1 %brmerge.i249, label %call_destructor.exit251, label %if.then.i250

if.then.i250:                                     ; preds = %call_destructor.exit246
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.0194) #7
  br label %call_destructor.exit251

call_destructor.exit251:                          ; preds = %destructor_block, %if.then.i250, %call_destructor.exit246
  %132 = phi i32 [ %131, %if.then.i250 ], [ %131, %call_destructor.exit246 ], [ 0, %destructor_block ]
  ret i32 %132

"assert failed1":                                 ; preds = %"assert succeeded"
  %133 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded2":                              ; preds = %"assert succeeded"
  %a793 = add nsw i32 %a1120, -6
  %b795 = add nsw i32 %96, -23
  %134 = tail call i32 @llvm.smin.i32(i32 %b795, i32 %a793)
  %135 = ashr i32 %134, 3
  %a792 = add nsw i32 %135, -1
  %b794 = ashr i32 %97, 3
  %.not168 = icmp slt i32 %b794, %135
  %f128.v3.min_realized = select i1 %.not168, i32 %b794, i32 %a792
  %136 = ashr i32 %a793, 2
  %137 = add nsw i32 %96, 5
  %138 = ashr i32 %137, 2
  %139 = sub nsw i32 %138, %136
  %140 = ashr i32 %139, 3
  %141 = and i32 %139, -8
  %a799 = add nsw i32 %141, %136
  %b801 = ashr i32 %b795, 2
  %142 = tail call i32 @llvm.smin.i32(i32 %b801, i32 %a799)
  %143 = add nsw i32 %142, 9
  %a798 = ashr i32 %143, 1
  %b800 = add nsw i32 %105, 7
  %144 = tail call i32 @llvm.smax.i32(i32 %a798, i32 %b800)
  %f128.v3.extent_realized.s = sub nsw i32 %144, %f128.v3.min_realized
  %t3088 = and i32 %114, 7
  %145 = add nuw nsw i32 %t3088, 99
  %146 = lshr i32 %145, 3
  %147 = zext i32 %146 to i64
  %148 = add nsw i32 %f128.v3.extent_realized.s, 1
  %149 = zext i32 %148 to i64
  %150 = shl nuw nsw i64 %149, 2
  %151 = mul nuw nsw i64 %150, %147
  %152 = icmp ult i64 %151, 2147483648
  br i1 %152, label %"assert succeeded4", label %"assert failed3", !prof !5

"assert failed3":                                 ; preds = %"assert succeeded2"
  %153 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %151, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded4":                              ; preds = %"assert succeeded2"
  %154 = add nuw nsw i64 %151, 4
  %155 = tail call ptr @halide_malloc(ptr %__user_context, i64 %154)
  %.not98 = icmp eq ptr %155, null
  br i1 %.not98, label %"assert failed5", label %"assert succeeded6", !prof !4

"assert failed5":                                 ; preds = %"assert succeeded4"
  %156 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded6":                              ; preds = %"assert succeeded4"
  %157 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a802 = add nsw i32 %157, -1
  %158 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b804 = ashr i32 %158, 1
  %.not169 = icmp slt i32 %b804, %157
  %159 = select i1 %.not169, i32 %b804, i32 %a802
  %160 = ashr i32 %159, 1
  %a801 = add nsw i32 %160, -1
  %161 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b803 = ashr i32 %161, 2
  %.not170 = icmp slt i32 %b803, %160
  %f127.v4.min_realized = select i1 %.not170, i32 %b803, i32 %a801
  %162 = ashr i32 %a1120, 1
  %a804 = add nsw i32 %162, -1
  %163 = add nsw i32 %96, -13
  %b806 = ashr i32 %163, 1
  %.not171 = icmp slt i32 %b806, %162
  %164 = select i1 %.not171, i32 %b806, i32 %a804
  %165 = ashr i32 %164, 1
  %a803 = add nsw i32 %165, -1
  %b805 = ashr i32 %134, 2
  %.not172 = icmp slt i32 %b805, %165
  %f127.v3.min_realized = select i1 %.not172, i32 %b805, i32 %a803
  %166 = add nsw i32 %96, 1
  %167 = ashr i32 %166, 1
  %168 = sub nsw i32 %167, %162
  %169 = add nsw i32 %168, 1
  %170 = and i32 %169, -8
  %171 = add nsw i32 %170, %162
  %a810 = add nsw i32 %171, -1
  %.not173 = icmp slt i32 %b806, %171
  %172 = select i1 %.not173, i32 %b806, i32 %a810
  %173 = add nsw i32 %172, 9
  %a809 = ashr i32 %173, 1
  %b811 = add nsw i32 %142, 7
  %174 = tail call i32 @llvm.smax.i32(i32 %a809, i32 %b811)
  %f127.v3.extent_realized.s = sub nsw i32 %174, %f127.v3.min_realized
  %175 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %176 = ashr i32 %175, 2
  %t3089 = add nsw i32 %176, 1
  %177 = sub nsw i32 %t3089, %f127.v4.min_realized
  %178 = zext i32 %177 to i64
  %179 = add nsw i32 %f127.v3.extent_realized.s, 1
  %180 = zext i32 %179 to i64
  %181 = shl nuw nsw i64 %180, 2
  %182 = mul i64 %181, %178
  %183 = icmp ult i64 %182, 2147483648
  %184 = and i64 %181, 4294967292
  %185 = mul nuw i64 %184, %178
  %186 = lshr i64 %185, 32
  %187 = lshr i64 %180, 30
  %188 = mul nuw nsw i64 %187, %178
  %189 = add nuw nsw i64 %186, %188
  %190 = icmp ult i64 %189, 4294967296
  %191 = and i1 %183, %190
  br i1 %191, label %"assert succeeded8", label %"assert failed7", !prof !5

"assert failed7":                                 ; preds = %"assert succeeded6"
  %192 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %182, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded8":                              ; preds = %"assert succeeded6"
  %193 = add nuw nsw i64 %182, 4
  %194 = tail call ptr @halide_malloc(ptr %__user_context, i64 %193)
  %.not271 = icmp eq ptr %194, null
  br i1 %.not271, label %"assert failed9", label %"assert succeeded10", !prof !4

"assert failed9":                                 ; preds = %"assert succeeded8"
  %195 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded10":                             ; preds = %"assert succeeded8"
  %b816 = add nsw i32 %96, -8
  %196 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1120)
  %197 = ashr i32 %196, 1
  %a813 = add nsw i32 %197, -1
  %.not174 = icmp slt i32 %164, %197
  %f126.v3.min_realized = select i1 %.not174, i32 %164, i32 %a813
  %198 = sub nsw i32 %96, %a1120
  %199 = add nsw i32 %198, -1
  %200 = and i32 %199, -8
  %a820 = add nsw i32 %200, %a1120
  %201 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a820)
  %202 = add nsw i32 %201, 9
  %a819 = ashr i32 %202, 1
  %b821 = add nsw i32 %172, 7
  %203 = tail call i32 @llvm.smax.i32(i32 %a819, i32 %b821)
  %f126.v3.extent_realized.s = sub nsw i32 %203, %f126.v3.min_realized
  %204 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %205 = ashr i32 %204, 1
  %t3090 = add nsw i32 %205, 1
  %206 = sub i32 %t3090, %159
  %207 = zext i32 %206 to i64
  %208 = add nsw i32 %f126.v3.extent_realized.s, 1
  %209 = zext i32 %208 to i64
  %210 = shl nuw nsw i64 %209, 2
  %211 = mul i64 %210, %207
  %212 = icmp ult i64 %211, 2147483648
  %213 = and i64 %210, 4294967292
  %214 = mul nuw i64 %213, %207
  %215 = lshr i64 %214, 32
  %216 = lshr i64 %209, 30
  %217 = mul nuw nsw i64 %216, %207
  %218 = add nuw nsw i64 %215, %217
  %219 = icmp ult i64 %218, 4294967296
  %220 = and i1 %212, %219
  br i1 %220, label %"assert succeeded12", label %"assert failed11", !prof !5

"assert failed11":                                ; preds = %"assert succeeded10"
  %221 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %211, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded12":                             ; preds = %"assert succeeded10"
  %222 = add nuw nsw i64 %211, 4
  %223 = tail call ptr @halide_malloc(ptr %__user_context, i64 %222)
  %.not272 = icmp eq ptr %223, null
  br i1 %.not272, label %"assert failed13", label %"produce f129", !prof !4

"assert failed13":                                ; preds = %"assert succeeded12"
  %224 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f129":                                   ; preds = %"assert succeeded12"
  %225 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %226 = ashr i32 %225, 4
  %227 = add nsw i32 %124, 1
  %228 = icmp sgt i32 %110, -1
  %229 = add i32 %f75.v3.extent_realized.s, 1
  %230 = add nsw i32 %levels, -1
  %231 = sitofp i32 %230 to float
  %232 = insertelement <4 x float> undef, float %231, i64 0
  %233 = shufflevector <4 x float> %232, <4 x float> undef, <4 x i32> zeroinitializer
  %234 = add nsw i32 %levels, -2
  %235 = insertelement <4 x i32> undef, i32 %234, i64 0
  %b825 = shufflevector <4 x i32> %235, <4 x i32> undef, <4 x i32> zeroinitializer
  %236 = add nsw i32 %f130.v3.extent_realized.s, 1
  %237 = add nsw i32 %local_laplacian.min.1.required, -62
  %238 = ashr i32 %237, 5
  %239 = xor i32 %238, -1
  %240 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %241 = insertelement <4 x i32> undef, i32 %240, i64 0
  %242 = shufflevector <4 x i32> %241, <4 x i32> undef, <4 x i32> zeroinitializer
  %243 = add nsw i32 %f8.v3.extent_realized.s, 1
  %244 = xor i32 %f8.v4.min_realized, -1
  %245 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %246 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> zeroinitializer
  %247 = add nsw i32 %f7.v3.extent_realized.s, 1
  %248 = insertelement <4 x i32> undef, i32 %247, i64 0
  %249 = shufflevector <4 x i32> %248, <4 x i32> undef, <4 x i32> zeroinitializer
  %250 = sext i32 %f129.v3.extent_realized.s to i64
  %251 = add nsw i64 %250, 1
  %252 = sext i32 %226 to i64
  %narrow273 = sub nsw i32 0, %f129.v3.min_realized
  %.neg212 = sext i32 %narrow273 to i64
  br i1 %228, label %"for f129.s0.v4.us.preheader", label %"produce f128", !prof !5

"for f129.s0.v4.us.preheader":                    ; preds = %"produce f129"
  %253 = add nuw nsw i32 %t3087, 76
  %254 = lshr i32 %253, 4
  %255 = add nsw i32 %254, %226
  %sext309 = sext i32 %255 to i64
  br label %"for f129.s0.v4.us"

"for f129.s0.v4.us":                              ; preds = %"for f129.s0.v4.us.preheader", %"end for f129.s0.v3.v3.loopexit.us"
  %indvars.iv307 = phi i64 [ %252, %"for f129.s0.v4.us.preheader" ], [ %indvars.iv.next308, %"end for f129.s0.v3.v3.loopexit.us" ]
  %indvars310 = trunc i64 %indvars.iv307 to i32
  %256 = shl i32 %indvars310, 1
  %257 = and i32 %256, 2
  %258 = ashr i32 %indvars310, 1
  %t2241.us = add nsw i32 %257, %258
  %259 = trunc i64 %indvars.iv307 to i32
  %260 = sub i32 %259, %f75.v4.min_realized
  %261 = mul i32 %260, %229
  %262 = sub i32 %261, %f75.v3.min_realized
  %263 = add nsw i32 %t2241.us, %239
  %t2248.us = mul nsw i32 %263, %236
  %264 = sub nsw i32 %258, %238
  %t2250.us = mul nsw i32 %264, %236
  %265 = add i32 %t2241.us, %244
  %t2255.us = mul nsw i32 %265, %243
  %266 = sub nsw i32 %258, %f8.v4.min_realized
  %t2260.us = mul nsw i32 %266, %243
  %267 = sext i32 %t2250.us to i64
  %268 = add nsw i64 %267, -1
  %269 = sext i32 %t2248.us to i64
  %270 = add nsw i64 %269, -1
  %271 = sub nsw i64 %indvars.iv307, %252
  %272 = mul nsw i64 %271, %251
  %273 = add i64 %272, %.neg212
  %274 = trunc i64 %indvars.iv307 to i32
  %275 = sub i32 %274, %f7.v4.min_realized
  %276 = mul i32 %275, %f7.stride.1
  br label %"for f129.s0.v3.v3.us"

"for f129.s0.v3.v3.us":                           ; preds = %"for f129.s0.v4.us", %"for f129.s0.v3.v3.us"
  %lsr.iv422.us = phi i32 [ %lsr.iv.next423.us, %"for f129.s0.v3.v3.us" ], [ 0, %"for f129.s0.v4.us" ]
  %lsr.iv420.us = phi i32 [ %lsr.iv.next421.us, %"for f129.s0.v3.v3.us" ], [ %227, %"for f129.s0.v4.us" ]
  %277 = add i32 %lsr.iv422.us, %107
  %f129.s0.v3.v363.base.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %277)
  %278 = shl i32 %f129.s0.v3.v363.base.us, 1
  %279 = and i32 %278, 2
  %280 = ashr i32 %f129.s0.v3.v363.base.us, 1
  %t2242.us = add nsw i32 %279, %280
  %t2243.us = add i32 %262, %f129.s0.v3.v363.base.us
  %281 = sext i32 %t2243.us to i64
  %282 = getelementptr inbounds float, ptr %f75.host, i64 %281
  %283 = load <4 x float>, ptr %282, align 4, !tbaa !13
  %284 = add nsw i64 %281, 4
  %285 = getelementptr inbounds float, ptr %f75.host, i64 %284
  %286 = load <4 x float>, ptr %285, align 4, !tbaa !13
  %287 = shufflevector <4 x float> %283, <4 x float> %286, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2244.us = fmul <4 x float> %233, %287
  %a823.us = fptosi <4 x float> %t2244.us to <4 x i32>
  %a826.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a823.us)
  %288 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a826.us, <4 x i32> zeroinitializer)
  %289 = sitofp <4 x i32> %288 to <4 x float>
  %t2246.us = fsub <4 x float> %t2244.us, %289
  %290 = sub nsw i32 %f129.s0.v3.v363.base.us, %f7.v3.min_realized
  %t2251.us = add nsw i32 %290, %276
  %t2253.us = sub nsw <4 x i32> %288, %242
  %t2257.us = mul nsw <4 x i32> %t2253.us, %246
  %291 = add nsw <4 x i32> %t2253.us, <i32 1, i32 1, i32 1, i32 1>
  %t2263.us = mul nsw <4 x i32> %291, %246
  %292 = add nsw i32 %f129.s0.v3.v363.base.us, 1
  %293 = shl i32 %292, 1
  %294 = and i32 %293, 2
  %295 = ashr i32 %292, 1
  %t2264.us = add nsw i32 %294, %295
  %296 = shufflevector <4 x float> %283, <4 x float> %286, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2265.us = fmul <4 x float> %233, %296
  %a827.us = fptosi <4 x float> %t2265.us to <4 x i32>
  %a830.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a827.us)
  %297 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a830.us, <4 x i32> zeroinitializer)
  %298 = sitofp <4 x i32> %297 to <4 x float>
  %t2267.us = fsub <4 x float> %t2265.us, %298
  %t2270.us = sub nsw <4 x i32> %297, %242
  %t2273.us = mul nsw <4 x i32> %t2270.us, %246
  %299 = add nsw <4 x i32> %t2270.us, <i32 1, i32 1, i32 1, i32 1>
  %t2278.us = mul nsw <4 x i32> %299, %246
  %300 = sub nsw i32 %280, %f8.v3.min_realized
  %301 = add nsw i32 %300, %t2260.us
  %302 = insertelement <4 x i32> undef, i32 %301, i64 0
  %303 = shufflevector <4 x i32> %302, <4 x i32> undef, <4 x i32> zeroinitializer
  %304 = add nsw <4 x i32> %303, <i32 0, i32 1, i32 2, i32 3>
  %305 = add nsw <4 x i32> %t2263.us, %304
  %306 = sext <4 x i32> %305 to <4 x i64>
  %307 = extractelement <4 x i64> %306, i64 0
  %308 = getelementptr inbounds float, ptr %f8.host, i64 %307
  %309 = load float, ptr %308, align 4, !tbaa !36
  %310 = insertelement <4 x float> undef, float %309, i64 0
  %311 = extractelement <4 x i64> %306, i64 1
  %312 = getelementptr inbounds float, ptr %f8.host, i64 %311
  %313 = load float, ptr %312, align 4, !tbaa !36
  %314 = insertelement <4 x float> %310, float %313, i64 1
  %315 = extractelement <4 x i64> %306, i64 2
  %316 = getelementptr inbounds float, ptr %f8.host, i64 %315
  %317 = load float, ptr %316, align 4, !tbaa !36
  %318 = insertelement <4 x float> %314, float %317, i64 2
  %319 = extractelement <4 x i64> %306, i64 3
  %320 = getelementptr inbounds float, ptr %f8.host, i64 %319
  %321 = load float, ptr %320, align 4, !tbaa !36
  %322 = insertelement <4 x float> %318, float %321, i64 3
  %323 = fmul <4 x float> %322, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %324 = sub nsw i32 %t2242.us, %f8.v3.min_realized
  %325 = add nsw i32 %324, %t2260.us
  %326 = insertelement <4 x i32> undef, i32 %325, i64 0
  %327 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> zeroinitializer
  %328 = add <4 x i32> %327, <i32 -1, i32 0, i32 1, i32 2>
  %329 = add <4 x i32> %328, %t2263.us
  %330 = sext <4 x i32> %329 to <4 x i64>
  %331 = extractelement <4 x i64> %330, i64 0
  %332 = getelementptr inbounds float, ptr %f8.host, i64 %331
  %333 = load float, ptr %332, align 4, !tbaa !36
  %334 = insertelement <4 x float> undef, float %333, i64 0
  %335 = extractelement <4 x i64> %330, i64 1
  %336 = getelementptr inbounds float, ptr %f8.host, i64 %335
  %337 = load float, ptr %336, align 4, !tbaa !36
  %338 = insertelement <4 x float> %334, float %337, i64 1
  %339 = extractelement <4 x i64> %330, i64 2
  %340 = getelementptr inbounds float, ptr %f8.host, i64 %339
  %341 = load float, ptr %340, align 4, !tbaa !36
  %342 = insertelement <4 x float> %338, float %341, i64 2
  %343 = extractelement <4 x i64> %330, i64 3
  %344 = getelementptr inbounds float, ptr %f8.host, i64 %343
  %345 = load float, ptr %344, align 4, !tbaa !36
  %346 = insertelement <4 x float> %342, float %345, i64 3
  %347 = fmul <4 x float> %346, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %348 = fadd <4 x float> %323, %347
  %349 = fmul <4 x float> %348, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %350 = add nsw i32 %300, %t2255.us
  %351 = insertelement <4 x i32> undef, i32 %350, i64 0
  %352 = shufflevector <4 x i32> %351, <4 x i32> undef, <4 x i32> zeroinitializer
  %353 = add nsw <4 x i32> %352, <i32 0, i32 1, i32 2, i32 3>
  %354 = add nsw <4 x i32> %t2263.us, %353
  %355 = sext <4 x i32> %354 to <4 x i64>
  %356 = extractelement <4 x i64> %355, i64 0
  %357 = getelementptr inbounds float, ptr %f8.host, i64 %356
  %358 = load float, ptr %357, align 4, !tbaa !36
  %359 = insertelement <4 x float> undef, float %358, i64 0
  %360 = extractelement <4 x i64> %355, i64 1
  %361 = getelementptr inbounds float, ptr %f8.host, i64 %360
  %362 = load float, ptr %361, align 4, !tbaa !36
  %363 = insertelement <4 x float> %359, float %362, i64 1
  %364 = extractelement <4 x i64> %355, i64 2
  %365 = getelementptr inbounds float, ptr %f8.host, i64 %364
  %366 = load float, ptr %365, align 4, !tbaa !36
  %367 = insertelement <4 x float> %363, float %366, i64 2
  %368 = extractelement <4 x i64> %355, i64 3
  %369 = getelementptr inbounds float, ptr %f8.host, i64 %368
  %370 = load float, ptr %369, align 4, !tbaa !36
  %371 = insertelement <4 x float> %367, float %370, i64 3
  %372 = fmul <4 x float> %371, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %373 = add nsw i32 %324, %t2255.us
  %374 = insertelement <4 x i32> undef, i32 %373, i64 0
  %375 = shufflevector <4 x i32> %374, <4 x i32> undef, <4 x i32> zeroinitializer
  %376 = add <4 x i32> %375, <i32 -1, i32 0, i32 1, i32 2>
  %377 = add <4 x i32> %376, %t2263.us
  %378 = sext <4 x i32> %377 to <4 x i64>
  %379 = extractelement <4 x i64> %378, i64 0
  %380 = getelementptr inbounds float, ptr %f8.host, i64 %379
  %381 = load float, ptr %380, align 4, !tbaa !36
  %382 = insertelement <4 x float> undef, float %381, i64 0
  %383 = extractelement <4 x i64> %378, i64 1
  %384 = getelementptr inbounds float, ptr %f8.host, i64 %383
  %385 = load float, ptr %384, align 4, !tbaa !36
  %386 = insertelement <4 x float> %382, float %385, i64 1
  %387 = extractelement <4 x i64> %378, i64 2
  %388 = getelementptr inbounds float, ptr %f8.host, i64 %387
  %389 = load float, ptr %388, align 4, !tbaa !36
  %390 = insertelement <4 x float> %386, float %389, i64 2
  %391 = extractelement <4 x i64> %378, i64 3
  %392 = getelementptr inbounds float, ptr %f8.host, i64 %391
  %393 = load float, ptr %392, align 4, !tbaa !36
  %394 = insertelement <4 x float> %390, float %393, i64 3
  %395 = fmul <4 x float> %394, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %396 = fadd <4 x float> %372, %395
  %397 = fmul <4 x float> %396, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %398 = fadd <4 x float> %349, %397
  %399 = mul nsw <4 x i32> %291, %249
  %400 = insertelement <4 x i32> undef, i32 %t2251.us, i64 0
  %401 = shufflevector <4 x i32> %400, <4 x i32> undef, <4 x i32> zeroinitializer
  %402 = add nsw <4 x i32> %401, <i32 0, i32 2, i32 4, i32 6>
  %403 = add nsw <4 x i32> %399, %402
  %404 = sext <4 x i32> %403 to <4 x i64>
  %405 = extractelement <4 x i64> %404, i64 0
  %406 = getelementptr inbounds float, ptr %f7.host, i64 %405
  %407 = load float, ptr %406, align 4, !tbaa !54
  %408 = insertelement <4 x float> undef, float %407, i64 0
  %409 = extractelement <4 x i64> %404, i64 1
  %410 = getelementptr inbounds float, ptr %f7.host, i64 %409
  %411 = load float, ptr %410, align 4, !tbaa !54
  %412 = insertelement <4 x float> %408, float %411, i64 1
  %413 = extractelement <4 x i64> %404, i64 2
  %414 = getelementptr inbounds float, ptr %f7.host, i64 %413
  %415 = load float, ptr %414, align 4, !tbaa !54
  %416 = insertelement <4 x float> %412, float %415, i64 2
  %417 = extractelement <4 x i64> %404, i64 3
  %418 = getelementptr inbounds float, ptr %f7.host, i64 %417
  %419 = load float, ptr %418, align 4, !tbaa !54
  %420 = insertelement <4 x float> %416, float %419, i64 3
  %421 = fsub <4 x float> %420, %398
  %422 = fmul <4 x float> %t2246.us, %421
  %423 = add nsw <4 x i32> %t2257.us, %304
  %424 = sext <4 x i32> %423 to <4 x i64>
  %425 = extractelement <4 x i64> %424, i64 0
  %426 = getelementptr inbounds float, ptr %f8.host, i64 %425
  %427 = load float, ptr %426, align 4, !tbaa !36
  %428 = insertelement <4 x float> undef, float %427, i64 0
  %429 = extractelement <4 x i64> %424, i64 1
  %430 = getelementptr inbounds float, ptr %f8.host, i64 %429
  %431 = load float, ptr %430, align 4, !tbaa !36
  %432 = insertelement <4 x float> %428, float %431, i64 1
  %433 = extractelement <4 x i64> %424, i64 2
  %434 = getelementptr inbounds float, ptr %f8.host, i64 %433
  %435 = load float, ptr %434, align 4, !tbaa !36
  %436 = insertelement <4 x float> %432, float %435, i64 2
  %437 = extractelement <4 x i64> %424, i64 3
  %438 = getelementptr inbounds float, ptr %f8.host, i64 %437
  %439 = load float, ptr %438, align 4, !tbaa !36
  %440 = insertelement <4 x float> %436, float %439, i64 3
  %441 = fmul <4 x float> %440, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %442 = add <4 x i32> %t2257.us, %327
  %443 = add <4 x i32> %442, <i32 -1, i32 0, i32 1, i32 2>
  %444 = sext <4 x i32> %443 to <4 x i64>
  %445 = extractelement <4 x i64> %444, i64 0
  %446 = getelementptr inbounds float, ptr %f8.host, i64 %445
  %447 = load float, ptr %446, align 4, !tbaa !36
  %448 = insertelement <4 x float> undef, float %447, i64 0
  %449 = extractelement <4 x i64> %444, i64 1
  %450 = getelementptr inbounds float, ptr %f8.host, i64 %449
  %451 = load float, ptr %450, align 4, !tbaa !36
  %452 = insertelement <4 x float> %448, float %451, i64 1
  %453 = extractelement <4 x i64> %444, i64 2
  %454 = getelementptr inbounds float, ptr %f8.host, i64 %453
  %455 = load float, ptr %454, align 4, !tbaa !36
  %456 = insertelement <4 x float> %452, float %455, i64 2
  %457 = extractelement <4 x i64> %444, i64 3
  %458 = getelementptr inbounds float, ptr %f8.host, i64 %457
  %459 = load float, ptr %458, align 4, !tbaa !36
  %460 = insertelement <4 x float> %456, float %459, i64 3
  %461 = fmul <4 x float> %460, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %462 = fadd <4 x float> %441, %461
  %463 = fmul <4 x float> %462, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %464 = add nsw <4 x i32> %t2257.us, %353
  %465 = sext <4 x i32> %464 to <4 x i64>
  %466 = extractelement <4 x i64> %465, i64 0
  %467 = getelementptr inbounds float, ptr %f8.host, i64 %466
  %468 = load float, ptr %467, align 4, !tbaa !36
  %469 = insertelement <4 x float> undef, float %468, i64 0
  %470 = extractelement <4 x i64> %465, i64 1
  %471 = getelementptr inbounds float, ptr %f8.host, i64 %470
  %472 = load float, ptr %471, align 4, !tbaa !36
  %473 = insertelement <4 x float> %469, float %472, i64 1
  %474 = extractelement <4 x i64> %465, i64 2
  %475 = getelementptr inbounds float, ptr %f8.host, i64 %474
  %476 = load float, ptr %475, align 4, !tbaa !36
  %477 = insertelement <4 x float> %473, float %476, i64 2
  %478 = extractelement <4 x i64> %465, i64 3
  %479 = getelementptr inbounds float, ptr %f8.host, i64 %478
  %480 = load float, ptr %479, align 4, !tbaa !36
  %481 = insertelement <4 x float> %477, float %480, i64 3
  %482 = fmul <4 x float> %481, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %483 = add <4 x i32> %t2257.us, %375
  %484 = add <4 x i32> %483, <i32 -1, i32 0, i32 1, i32 2>
  %485 = sext <4 x i32> %484 to <4 x i64>
  %486 = extractelement <4 x i64> %485, i64 0
  %487 = getelementptr inbounds float, ptr %f8.host, i64 %486
  %488 = load float, ptr %487, align 4, !tbaa !36
  %489 = insertelement <4 x float> undef, float %488, i64 0
  %490 = extractelement <4 x i64> %485, i64 1
  %491 = getelementptr inbounds float, ptr %f8.host, i64 %490
  %492 = load float, ptr %491, align 4, !tbaa !36
  %493 = insertelement <4 x float> %489, float %492, i64 1
  %494 = extractelement <4 x i64> %485, i64 2
  %495 = getelementptr inbounds float, ptr %f8.host, i64 %494
  %496 = load float, ptr %495, align 4, !tbaa !36
  %497 = insertelement <4 x float> %493, float %496, i64 2
  %498 = extractelement <4 x i64> %485, i64 3
  %499 = getelementptr inbounds float, ptr %f8.host, i64 %498
  %500 = load float, ptr %499, align 4, !tbaa !36
  %501 = insertelement <4 x float> %497, float %500, i64 3
  %502 = fmul <4 x float> %501, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %503 = fadd <4 x float> %482, %502
  %504 = fmul <4 x float> %503, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %505 = fadd <4 x float> %463, %504
  %506 = mul nsw <4 x i32> %t2253.us, %249
  %507 = add nsw <4 x i32> %506, %402
  %508 = sext <4 x i32> %507 to <4 x i64>
  %509 = extractelement <4 x i64> %508, i64 0
  %510 = getelementptr inbounds float, ptr %f7.host, i64 %509
  %511 = load float, ptr %510, align 4, !tbaa !54
  %512 = insertelement <4 x float> undef, float %511, i64 0
  %513 = extractelement <4 x i64> %508, i64 1
  %514 = getelementptr inbounds float, ptr %f7.host, i64 %513
  %515 = load float, ptr %514, align 4, !tbaa !54
  %516 = insertelement <4 x float> %512, float %515, i64 1
  %517 = extractelement <4 x i64> %508, i64 2
  %518 = getelementptr inbounds float, ptr %f7.host, i64 %517
  %519 = load float, ptr %518, align 4, !tbaa !54
  %520 = insertelement <4 x float> %516, float %519, i64 2
  %521 = extractelement <4 x i64> %508, i64 3
  %522 = getelementptr inbounds float, ptr %f7.host, i64 %521
  %523 = load float, ptr %522, align 4, !tbaa !54
  %524 = insertelement <4 x float> %520, float %523, i64 3
  %525 = fsub <4 x float> %524, %505
  %526 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2246.us
  %527 = fmul <4 x float> %526, %525
  %528 = fadd <4 x float> %422, %527
  %529 = sext i32 %280 to i64
  %530 = sub nsw i64 %529, %4
  %531 = add nsw i64 %530, %267
  %532 = getelementptr inbounds float, ptr %f130.host, i64 %531
  %533 = load <4 x float>, ptr %532, align 4, !tbaa !38
  %534 = fmul <4 x float> %533, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %535 = sext i32 %t2242.us to i64
  %536 = sub nsw i64 %535, %4
  %537 = add nsw i64 %268, %536
  %538 = getelementptr inbounds float, ptr %f130.host, i64 %537
  %539 = load <4 x float>, ptr %538, align 4, !tbaa !38
  %540 = fmul <4 x float> %539, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %541 = fadd <4 x float> %534, %540
  %542 = fmul <4 x float> %541, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %543 = add nsw i64 %530, %269
  %544 = getelementptr inbounds float, ptr %f130.host, i64 %543
  %545 = load <4 x float>, ptr %544, align 4, !tbaa !38
  %546 = fmul <4 x float> %545, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %547 = add nsw i64 %270, %536
  %548 = getelementptr inbounds float, ptr %f130.host, i64 %547
  %549 = load <4 x float>, ptr %548, align 4, !tbaa !38
  %550 = fmul <4 x float> %549, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %551 = fadd <4 x float> %546, %550
  %552 = fmul <4 x float> %551, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %553 = fadd <4 x float> %542, %552
  %554 = fadd <4 x float> %528, %553
  %555 = sub nsw i32 %295, %f8.v3.min_realized
  %556 = add nsw i32 %555, %t2260.us
  %557 = insertelement <4 x i32> undef, i32 %556, i64 0
  %558 = shufflevector <4 x i32> %557, <4 x i32> undef, <4 x i32> zeroinitializer
  %559 = add nsw <4 x i32> %558, <i32 0, i32 1, i32 2, i32 3>
  %560 = add nsw <4 x i32> %t2278.us, %559
  %561 = sext <4 x i32> %560 to <4 x i64>
  %562 = extractelement <4 x i64> %561, i64 0
  %563 = getelementptr inbounds float, ptr %f8.host, i64 %562
  %564 = load float, ptr %563, align 4, !tbaa !36
  %565 = insertelement <4 x float> undef, float %564, i64 0
  %566 = extractelement <4 x i64> %561, i64 1
  %567 = getelementptr inbounds float, ptr %f8.host, i64 %566
  %568 = load float, ptr %567, align 4, !tbaa !36
  %569 = insertelement <4 x float> %565, float %568, i64 1
  %570 = extractelement <4 x i64> %561, i64 2
  %571 = getelementptr inbounds float, ptr %f8.host, i64 %570
  %572 = load float, ptr %571, align 4, !tbaa !36
  %573 = insertelement <4 x float> %569, float %572, i64 2
  %574 = extractelement <4 x i64> %561, i64 3
  %575 = getelementptr inbounds float, ptr %f8.host, i64 %574
  %576 = load float, ptr %575, align 4, !tbaa !36
  %577 = insertelement <4 x float> %573, float %576, i64 3
  %578 = fmul <4 x float> %577, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %579 = sub nsw i32 %t2264.us, %f8.v3.min_realized
  %580 = add nsw i32 %579, %t2260.us
  %581 = insertelement <4 x i32> undef, i32 %580, i64 0
  %582 = shufflevector <4 x i32> %581, <4 x i32> undef, <4 x i32> zeroinitializer
  %583 = add nsw <4 x i32> %582, <i32 0, i32 1, i32 2, i32 3>
  %584 = add <4 x i32> %t2278.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %585 = add <4 x i32> %584, %583
  %586 = sext <4 x i32> %585 to <4 x i64>
  %587 = extractelement <4 x i64> %586, i64 0
  %588 = getelementptr inbounds float, ptr %f8.host, i64 %587
  %589 = load float, ptr %588, align 4, !tbaa !36
  %590 = insertelement <4 x float> undef, float %589, i64 0
  %591 = extractelement <4 x i64> %586, i64 1
  %592 = getelementptr inbounds float, ptr %f8.host, i64 %591
  %593 = load float, ptr %592, align 4, !tbaa !36
  %594 = insertelement <4 x float> %590, float %593, i64 1
  %595 = extractelement <4 x i64> %586, i64 2
  %596 = getelementptr inbounds float, ptr %f8.host, i64 %595
  %597 = load float, ptr %596, align 4, !tbaa !36
  %598 = insertelement <4 x float> %594, float %597, i64 2
  %599 = extractelement <4 x i64> %586, i64 3
  %600 = getelementptr inbounds float, ptr %f8.host, i64 %599
  %601 = load float, ptr %600, align 4, !tbaa !36
  %602 = insertelement <4 x float> %598, float %601, i64 3
  %603 = fmul <4 x float> %602, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %604 = fadd <4 x float> %578, %603
  %605 = fmul <4 x float> %604, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %606 = add nsw i32 %555, %t2255.us
  %607 = insertelement <4 x i32> undef, i32 %606, i64 0
  %608 = shufflevector <4 x i32> %607, <4 x i32> undef, <4 x i32> zeroinitializer
  %609 = add nsw <4 x i32> %608, <i32 0, i32 1, i32 2, i32 3>
  %610 = add nsw <4 x i32> %t2278.us, %609
  %611 = sext <4 x i32> %610 to <4 x i64>
  %612 = extractelement <4 x i64> %611, i64 0
  %613 = getelementptr inbounds float, ptr %f8.host, i64 %612
  %614 = load float, ptr %613, align 4, !tbaa !36
  %615 = insertelement <4 x float> undef, float %614, i64 0
  %616 = extractelement <4 x i64> %611, i64 1
  %617 = getelementptr inbounds float, ptr %f8.host, i64 %616
  %618 = load float, ptr %617, align 4, !tbaa !36
  %619 = insertelement <4 x float> %615, float %618, i64 1
  %620 = extractelement <4 x i64> %611, i64 2
  %621 = getelementptr inbounds float, ptr %f8.host, i64 %620
  %622 = load float, ptr %621, align 4, !tbaa !36
  %623 = insertelement <4 x float> %619, float %622, i64 2
  %624 = extractelement <4 x i64> %611, i64 3
  %625 = getelementptr inbounds float, ptr %f8.host, i64 %624
  %626 = load float, ptr %625, align 4, !tbaa !36
  %627 = insertelement <4 x float> %623, float %626, i64 3
  %628 = fmul <4 x float> %627, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %629 = add nsw i32 %579, %t2255.us
  %630 = insertelement <4 x i32> undef, i32 %629, i64 0
  %631 = shufflevector <4 x i32> %630, <4 x i32> undef, <4 x i32> zeroinitializer
  %632 = add nsw <4 x i32> %631, <i32 0, i32 1, i32 2, i32 3>
  %633 = add <4 x i32> %584, %632
  %634 = sext <4 x i32> %633 to <4 x i64>
  %635 = extractelement <4 x i64> %634, i64 0
  %636 = getelementptr inbounds float, ptr %f8.host, i64 %635
  %637 = load float, ptr %636, align 4, !tbaa !36
  %638 = insertelement <4 x float> undef, float %637, i64 0
  %639 = extractelement <4 x i64> %634, i64 1
  %640 = getelementptr inbounds float, ptr %f8.host, i64 %639
  %641 = load float, ptr %640, align 4, !tbaa !36
  %642 = insertelement <4 x float> %638, float %641, i64 1
  %643 = extractelement <4 x i64> %634, i64 2
  %644 = getelementptr inbounds float, ptr %f8.host, i64 %643
  %645 = load float, ptr %644, align 4, !tbaa !36
  %646 = insertelement <4 x float> %642, float %645, i64 2
  %647 = extractelement <4 x i64> %634, i64 3
  %648 = getelementptr inbounds float, ptr %f8.host, i64 %647
  %649 = load float, ptr %648, align 4, !tbaa !36
  %650 = insertelement <4 x float> %646, float %649, i64 3
  %651 = fmul <4 x float> %650, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %652 = fadd <4 x float> %628, %651
  %653 = fmul <4 x float> %652, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %654 = fadd <4 x float> %605, %653
  %655 = mul nsw <4 x i32> %299, %249
  %656 = add nsw i32 %t2251.us, 1
  %657 = insertelement <4 x i32> undef, i32 %656, i64 0
  %658 = shufflevector <4 x i32> %657, <4 x i32> undef, <4 x i32> zeroinitializer
  %659 = add nsw <4 x i32> %658, <i32 0, i32 2, i32 4, i32 6>
  %660 = add nsw <4 x i32> %655, %659
  %661 = sext <4 x i32> %660 to <4 x i64>
  %662 = extractelement <4 x i64> %661, i64 0
  %663 = getelementptr inbounds float, ptr %f7.host, i64 %662
  %664 = load float, ptr %663, align 4, !tbaa !54
  %665 = insertelement <4 x float> undef, float %664, i64 0
  %666 = extractelement <4 x i64> %661, i64 1
  %667 = getelementptr inbounds float, ptr %f7.host, i64 %666
  %668 = load float, ptr %667, align 4, !tbaa !54
  %669 = insertelement <4 x float> %665, float %668, i64 1
  %670 = extractelement <4 x i64> %661, i64 2
  %671 = getelementptr inbounds float, ptr %f7.host, i64 %670
  %672 = load float, ptr %671, align 4, !tbaa !54
  %673 = insertelement <4 x float> %669, float %672, i64 2
  %674 = extractelement <4 x i64> %661, i64 3
  %675 = getelementptr inbounds float, ptr %f7.host, i64 %674
  %676 = load float, ptr %675, align 4, !tbaa !54
  %677 = insertelement <4 x float> %673, float %676, i64 3
  %678 = fsub <4 x float> %677, %654
  %679 = fmul <4 x float> %t2267.us, %678
  %680 = add nsw <4 x i32> %t2273.us, %559
  %681 = sext <4 x i32> %680 to <4 x i64>
  %682 = extractelement <4 x i64> %681, i64 0
  %683 = getelementptr inbounds float, ptr %f8.host, i64 %682
  %684 = load float, ptr %683, align 4, !tbaa !36
  %685 = insertelement <4 x float> undef, float %684, i64 0
  %686 = extractelement <4 x i64> %681, i64 1
  %687 = getelementptr inbounds float, ptr %f8.host, i64 %686
  %688 = load float, ptr %687, align 4, !tbaa !36
  %689 = insertelement <4 x float> %685, float %688, i64 1
  %690 = extractelement <4 x i64> %681, i64 2
  %691 = getelementptr inbounds float, ptr %f8.host, i64 %690
  %692 = load float, ptr %691, align 4, !tbaa !36
  %693 = insertelement <4 x float> %689, float %692, i64 2
  %694 = extractelement <4 x i64> %681, i64 3
  %695 = getelementptr inbounds float, ptr %f8.host, i64 %694
  %696 = load float, ptr %695, align 4, !tbaa !36
  %697 = insertelement <4 x float> %693, float %696, i64 3
  %698 = fmul <4 x float> %697, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %699 = add <4 x i32> %t2273.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %700 = add <4 x i32> %699, %583
  %701 = sext <4 x i32> %700 to <4 x i64>
  %702 = extractelement <4 x i64> %701, i64 0
  %703 = getelementptr inbounds float, ptr %f8.host, i64 %702
  %704 = load float, ptr %703, align 4, !tbaa !36
  %705 = insertelement <4 x float> undef, float %704, i64 0
  %706 = extractelement <4 x i64> %701, i64 1
  %707 = getelementptr inbounds float, ptr %f8.host, i64 %706
  %708 = load float, ptr %707, align 4, !tbaa !36
  %709 = insertelement <4 x float> %705, float %708, i64 1
  %710 = extractelement <4 x i64> %701, i64 2
  %711 = getelementptr inbounds float, ptr %f8.host, i64 %710
  %712 = load float, ptr %711, align 4, !tbaa !36
  %713 = insertelement <4 x float> %709, float %712, i64 2
  %714 = extractelement <4 x i64> %701, i64 3
  %715 = getelementptr inbounds float, ptr %f8.host, i64 %714
  %716 = load float, ptr %715, align 4, !tbaa !36
  %717 = insertelement <4 x float> %713, float %716, i64 3
  %718 = fmul <4 x float> %717, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %719 = fadd <4 x float> %698, %718
  %720 = fmul <4 x float> %719, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %721 = add nsw <4 x i32> %t2273.us, %609
  %722 = sext <4 x i32> %721 to <4 x i64>
  %723 = extractelement <4 x i64> %722, i64 0
  %724 = getelementptr inbounds float, ptr %f8.host, i64 %723
  %725 = load float, ptr %724, align 4, !tbaa !36
  %726 = insertelement <4 x float> undef, float %725, i64 0
  %727 = extractelement <4 x i64> %722, i64 1
  %728 = getelementptr inbounds float, ptr %f8.host, i64 %727
  %729 = load float, ptr %728, align 4, !tbaa !36
  %730 = insertelement <4 x float> %726, float %729, i64 1
  %731 = extractelement <4 x i64> %722, i64 2
  %732 = getelementptr inbounds float, ptr %f8.host, i64 %731
  %733 = load float, ptr %732, align 4, !tbaa !36
  %734 = insertelement <4 x float> %730, float %733, i64 2
  %735 = extractelement <4 x i64> %722, i64 3
  %736 = getelementptr inbounds float, ptr %f8.host, i64 %735
  %737 = load float, ptr %736, align 4, !tbaa !36
  %738 = insertelement <4 x float> %734, float %737, i64 3
  %739 = fmul <4 x float> %738, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %740 = add <4 x i32> %699, %632
  %741 = sext <4 x i32> %740 to <4 x i64>
  %742 = extractelement <4 x i64> %741, i64 0
  %743 = getelementptr inbounds float, ptr %f8.host, i64 %742
  %744 = load float, ptr %743, align 4, !tbaa !36
  %745 = insertelement <4 x float> undef, float %744, i64 0
  %746 = extractelement <4 x i64> %741, i64 1
  %747 = getelementptr inbounds float, ptr %f8.host, i64 %746
  %748 = load float, ptr %747, align 4, !tbaa !36
  %749 = insertelement <4 x float> %745, float %748, i64 1
  %750 = extractelement <4 x i64> %741, i64 2
  %751 = getelementptr inbounds float, ptr %f8.host, i64 %750
  %752 = load float, ptr %751, align 4, !tbaa !36
  %753 = insertelement <4 x float> %749, float %752, i64 2
  %754 = extractelement <4 x i64> %741, i64 3
  %755 = getelementptr inbounds float, ptr %f8.host, i64 %754
  %756 = load float, ptr %755, align 4, !tbaa !36
  %757 = insertelement <4 x float> %753, float %756, i64 3
  %758 = fmul <4 x float> %757, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %759 = fadd <4 x float> %739, %758
  %760 = fmul <4 x float> %759, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %761 = fadd <4 x float> %720, %760
  %762 = mul nsw <4 x i32> %t2270.us, %249
  %763 = add nsw <4 x i32> %762, %659
  %764 = sext <4 x i32> %763 to <4 x i64>
  %765 = extractelement <4 x i64> %764, i64 0
  %766 = getelementptr inbounds float, ptr %f7.host, i64 %765
  %767 = load float, ptr %766, align 4, !tbaa !54
  %768 = insertelement <4 x float> undef, float %767, i64 0
  %769 = extractelement <4 x i64> %764, i64 1
  %770 = getelementptr inbounds float, ptr %f7.host, i64 %769
  %771 = load float, ptr %770, align 4, !tbaa !54
  %772 = insertelement <4 x float> %768, float %771, i64 1
  %773 = extractelement <4 x i64> %764, i64 2
  %774 = getelementptr inbounds float, ptr %f7.host, i64 %773
  %775 = load float, ptr %774, align 4, !tbaa !54
  %776 = insertelement <4 x float> %772, float %775, i64 2
  %777 = extractelement <4 x i64> %764, i64 3
  %778 = getelementptr inbounds float, ptr %f7.host, i64 %777
  %779 = load float, ptr %778, align 4, !tbaa !54
  %780 = insertelement <4 x float> %776, float %779, i64 3
  %781 = fsub <4 x float> %780, %761
  %782 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2267.us
  %783 = fmul <4 x float> %782, %781
  %784 = fadd <4 x float> %679, %783
  %785 = sext i32 %295 to i64
  %786 = sub nsw i64 %785, %4
  %787 = add nsw i64 %786, %267
  %788 = getelementptr inbounds float, ptr %f130.host, i64 %787
  %789 = load <4 x float>, ptr %788, align 4, !tbaa !38
  %790 = fmul <4 x float> %789, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %791 = sext i32 %t2264.us to i64
  %792 = sub nsw i64 %791, %4
  %793 = add nsw i64 %268, %792
  %794 = getelementptr inbounds float, ptr %f130.host, i64 %793
  %795 = load <4 x float>, ptr %794, align 4, !tbaa !38
  %796 = fmul <4 x float> %795, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %797 = fadd <4 x float> %790, %796
  %798 = fmul <4 x float> %797, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %799 = add nsw i64 %786, %269
  %800 = getelementptr inbounds float, ptr %f130.host, i64 %799
  %801 = load <4 x float>, ptr %800, align 4, !tbaa !38
  %802 = fmul <4 x float> %801, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %803 = add nsw i64 %270, %792
  %804 = getelementptr inbounds float, ptr %f130.host, i64 %803
  %805 = load <4 x float>, ptr %804, align 4, !tbaa !38
  %806 = fmul <4 x float> %805, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %807 = fadd <4 x float> %802, %806
  %808 = fmul <4 x float> %807, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %809 = fadd <4 x float> %798, %808
  %810 = fadd <4 x float> %784, %809
  %811 = shufflevector <4 x float> %554, <4 x float> %810, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %812 = sext i32 %f129.s0.v3.v363.base.us to i64
  %813 = add i64 %273, %812
  %814 = getelementptr inbounds float, ptr %129, i64 %813
  store <8 x float> %811, ptr %814, align 4, !tbaa !64
  %lsr.iv.next421.us = add i32 %lsr.iv420.us, -1
  %lsr.iv.next423.us = add i32 %lsr.iv422.us, 8
  %.not158.us = icmp eq i32 %lsr.iv.next421.us, 0
  br i1 %.not158.us, label %"end for f129.s0.v3.v3.loopexit.us", label %"for f129.s0.v3.v3.us"

"end for f129.s0.v3.v3.loopexit.us":              ; preds = %"for f129.s0.v3.v3.us"
  %indvars.iv.next308 = add nsw i64 %indvars.iv307, 1
  %815 = icmp eq i64 %indvars.iv.next308, %sext309
  br i1 %815, label %"produce f128", label %"for f129.s0.v4.us"

"produce f128":                                   ; preds = %"end for f129.s0.v3.v3.loopexit.us", %"produce f129"
  %816 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %817 = ashr i32 %816, 3
  %818 = add nsw i32 %123, 1
  %819 = icmp sgt i32 %103, -1
  %820 = add nsw i32 %f74.v3.extent_realized.s, 1
  %821 = xor i32 %226, -1
  %822 = xor i32 %f7.v4.min_realized, -1
  %823 = add nsw i32 %f6.v3.extent_realized.s, 1
  %824 = insertelement <4 x i32> undef, i32 %823, i64 0
  %825 = shufflevector <4 x i32> %824, <4 x i32> undef, <4 x i32> zeroinitializer
  %826 = sext i32 %f129.v3.min_realized to i64
  %827 = sext i32 %f128.v3.extent_realized.s to i64
  %828 = add nsw i64 %827, 1
  %829 = sext i32 %817 to i64
  %narrow274 = sub nsw i32 0, %f128.v3.min_realized
  %.neg213 = sext i32 %narrow274 to i64
  br i1 %819, label %"for f128.s0.v4.us.preheader", label %"for f127.s0.v4.preheader", !prof !5

"for f128.s0.v4.us.preheader":                    ; preds = %"produce f128"
  %830 = add nuw nsw i32 %t3088, 36
  %831 = lshr i32 %830, 3
  %832 = add nsw i32 %831, %817
  %sext313 = sext i32 %832 to i64
  br label %"for f128.s0.v4.us"

"for f128.s0.v4.us":                              ; preds = %"for f128.s0.v4.us.preheader", %"end for f128.s0.v3.v3.loopexit.us"
  %indvars.iv311 = phi i64 [ %829, %"for f128.s0.v4.us.preheader" ], [ %indvars.iv.next312, %"end for f128.s0.v3.v3.loopexit.us" ]
  %indvars314 = trunc i64 %indvars.iv311 to i32
  %833 = shl i32 %indvars314, 1
  %834 = and i32 %833, 2
  %835 = ashr i32 %indvars314, 1
  %t2279.us = add nsw i32 %834, %835
  %836 = trunc i64 %indvars.iv311 to i32
  %837 = sub i32 %836, %f74.v4.min_realized
  %838 = mul i32 %837, %820
  %839 = sub i32 %838, %f74.v3.min_realized
  %840 = add nsw i32 %t2279.us, %821
  %t2286.us = mul nsw i32 %840, %118
  %841 = sub nsw i32 %835, %226
  %t2288.us = mul nsw i32 %841, %118
  %842 = add i32 %t2279.us, %822
  %843 = mul nsw i32 %842, %f7.stride.1
  %844 = sub nsw i32 %835, %f7.v4.min_realized
  %845 = mul nsw i32 %844, %f7.stride.1
  %846 = sext i32 %t2288.us to i64
  %847 = add nsw i64 %846, -1
  %848 = sext i32 %t2286.us to i64
  %849 = add nsw i64 %848, -1
  %850 = sub nsw i64 %indvars.iv311, %829
  %851 = mul nsw i64 %850, %828
  %852 = add i64 %851, %.neg213
  %853 = trunc i64 %indvars.iv311 to i32
  %854 = sub i32 %853, %f6.v4.min_realized
  %855 = mul i32 %854, %f6.stride.1
  br label %"for f128.s0.v3.v3.us"

"for f128.s0.v3.v3.us":                           ; preds = %"for f128.s0.v4.us", %"for f128.s0.v3.v3.us"
  %lsr.iv418.us = phi i32 [ %lsr.iv.next419.us, %"for f128.s0.v3.v3.us" ], [ 0, %"for f128.s0.v4.us" ]
  %lsr.iv416.us = phi i32 [ %lsr.iv.next417.us, %"for f128.s0.v3.v3.us" ], [ %818, %"for f128.s0.v4.us" ]
  %856 = add i32 %lsr.iv418.us, %100
  %f128.s0.v3.v343.base.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %856)
  %857 = shl i32 %f128.s0.v3.v343.base.us, 1
  %858 = and i32 %857, 2
  %859 = ashr i32 %f128.s0.v3.v343.base.us, 1
  %t2280.us = add nsw i32 %858, %859
  %t2281.us = add i32 %839, %f128.s0.v3.v343.base.us
  %860 = sext i32 %t2281.us to i64
  %861 = getelementptr inbounds float, ptr %f74.host, i64 %860
  %862 = load <4 x float>, ptr %861, align 4, !tbaa !56
  %863 = add nsw i64 %860, 4
  %864 = getelementptr inbounds float, ptr %f74.host, i64 %863
  %865 = load <4 x float>, ptr %864, align 4, !tbaa !56
  %866 = shufflevector <4 x float> %862, <4 x float> %865, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2282.us = fmul <4 x float> %233, %866
  %a832.us = fptosi <4 x float> %t2282.us to <4 x i32>
  %a835.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a832.us)
  %867 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a835.us, <4 x i32> zeroinitializer)
  %868 = sitofp <4 x i32> %867 to <4 x float>
  %t2284.us = fsub <4 x float> %t2282.us, %868
  %869 = sub nsw i32 %f128.s0.v3.v343.base.us, %f6.v3.min_realized
  %t2289.us = add nsw i32 %869, %855
  %t2291.us = sub nsw <4 x i32> %867, %242
  %870 = sub nsw i32 %t2280.us, %f7.v3.min_realized
  %t2294.us = add nsw i32 %870, %843
  %t2295.us = mul nsw <4 x i32> %t2291.us, %249
  %871 = sub nsw i32 %859, %f7.v3.min_realized
  %t2297.us = add nsw i32 %871, %843
  %t2299.us = add nsw i32 %870, %845
  %t2300.us = add nsw i32 %871, %845
  %872 = add nsw <4 x i32> %t2291.us, <i32 1, i32 1, i32 1, i32 1>
  %t2301.us = mul nsw <4 x i32> %872, %249
  %873 = add nsw i32 %f128.s0.v3.v343.base.us, 1
  %874 = shl i32 %873, 1
  %875 = and i32 %874, 2
  %876 = ashr i32 %873, 1
  %t2302.us = add nsw i32 %875, %876
  %877 = shufflevector <4 x float> %862, <4 x float> %865, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2303.us = fmul <4 x float> %233, %877
  %a836.us = fptosi <4 x float> %t2303.us to <4 x i32>
  %a839.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a836.us)
  %878 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a839.us, <4 x i32> zeroinitializer)
  %879 = sitofp <4 x i32> %878 to <4 x float>
  %t2305.us = fsub <4 x float> %t2303.us, %879
  %t2308.us = sub nsw <4 x i32> %878, %242
  %880 = sub nsw i32 %t2302.us, %f7.v3.min_realized
  %t2310.us = add nsw i32 %880, %843
  %t2311.us = mul nsw <4 x i32> %t2308.us, %249
  %881 = sub nsw i32 %876, %f7.v3.min_realized
  %t2313.us = add nsw i32 %881, %843
  %t2314.us = add nsw i32 %880, %845
  %t2315.us = add nsw i32 %881, %845
  %882 = add nsw <4 x i32> %t2308.us, <i32 1, i32 1, i32 1, i32 1>
  %t2316.us = mul nsw <4 x i32> %882, %249
  %883 = insertelement <4 x i32> undef, i32 %t2300.us, i64 0
  %884 = shufflevector <4 x i32> %883, <4 x i32> undef, <4 x i32> zeroinitializer
  %885 = add nsw <4 x i32> %884, <i32 0, i32 1, i32 2, i32 3>
  %886 = add nsw <4 x i32> %t2301.us, %885
  %887 = sext <4 x i32> %886 to <4 x i64>
  %888 = extractelement <4 x i64> %887, i64 0
  %889 = getelementptr inbounds float, ptr %f7.host, i64 %888
  %890 = load float, ptr %889, align 4, !tbaa !54
  %891 = insertelement <4 x float> undef, float %890, i64 0
  %892 = extractelement <4 x i64> %887, i64 1
  %893 = getelementptr inbounds float, ptr %f7.host, i64 %892
  %894 = load float, ptr %893, align 4, !tbaa !54
  %895 = insertelement <4 x float> %891, float %894, i64 1
  %896 = extractelement <4 x i64> %887, i64 2
  %897 = getelementptr inbounds float, ptr %f7.host, i64 %896
  %898 = load float, ptr %897, align 4, !tbaa !54
  %899 = insertelement <4 x float> %895, float %898, i64 2
  %900 = extractelement <4 x i64> %887, i64 3
  %901 = getelementptr inbounds float, ptr %f7.host, i64 %900
  %902 = load float, ptr %901, align 4, !tbaa !54
  %903 = insertelement <4 x float> %899, float %902, i64 3
  %904 = fmul <4 x float> %903, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %905 = insertelement <4 x i32> undef, i32 %t2299.us, i64 0
  %906 = shufflevector <4 x i32> %905, <4 x i32> undef, <4 x i32> zeroinitializer
  %907 = add <4 x i32> %906, <i32 -1, i32 0, i32 1, i32 2>
  %908 = add <4 x i32> %907, %t2301.us
  %909 = sext <4 x i32> %908 to <4 x i64>
  %910 = extractelement <4 x i64> %909, i64 0
  %911 = getelementptr inbounds float, ptr %f7.host, i64 %910
  %912 = load float, ptr %911, align 4, !tbaa !54
  %913 = insertelement <4 x float> undef, float %912, i64 0
  %914 = extractelement <4 x i64> %909, i64 1
  %915 = getelementptr inbounds float, ptr %f7.host, i64 %914
  %916 = load float, ptr %915, align 4, !tbaa !54
  %917 = insertelement <4 x float> %913, float %916, i64 1
  %918 = extractelement <4 x i64> %909, i64 2
  %919 = getelementptr inbounds float, ptr %f7.host, i64 %918
  %920 = load float, ptr %919, align 4, !tbaa !54
  %921 = insertelement <4 x float> %917, float %920, i64 2
  %922 = extractelement <4 x i64> %909, i64 3
  %923 = getelementptr inbounds float, ptr %f7.host, i64 %922
  %924 = load float, ptr %923, align 4, !tbaa !54
  %925 = insertelement <4 x float> %921, float %924, i64 3
  %926 = fmul <4 x float> %925, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %927 = fadd <4 x float> %904, %926
  %928 = fmul <4 x float> %927, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %929 = insertelement <4 x i32> undef, i32 %t2297.us, i64 0
  %930 = shufflevector <4 x i32> %929, <4 x i32> undef, <4 x i32> zeroinitializer
  %931 = add nsw <4 x i32> %930, <i32 0, i32 1, i32 2, i32 3>
  %932 = add nsw <4 x i32> %t2301.us, %931
  %933 = sext <4 x i32> %932 to <4 x i64>
  %934 = extractelement <4 x i64> %933, i64 0
  %935 = getelementptr inbounds float, ptr %f7.host, i64 %934
  %936 = load float, ptr %935, align 4, !tbaa !54
  %937 = insertelement <4 x float> undef, float %936, i64 0
  %938 = extractelement <4 x i64> %933, i64 1
  %939 = getelementptr inbounds float, ptr %f7.host, i64 %938
  %940 = load float, ptr %939, align 4, !tbaa !54
  %941 = insertelement <4 x float> %937, float %940, i64 1
  %942 = extractelement <4 x i64> %933, i64 2
  %943 = getelementptr inbounds float, ptr %f7.host, i64 %942
  %944 = load float, ptr %943, align 4, !tbaa !54
  %945 = insertelement <4 x float> %941, float %944, i64 2
  %946 = extractelement <4 x i64> %933, i64 3
  %947 = getelementptr inbounds float, ptr %f7.host, i64 %946
  %948 = load float, ptr %947, align 4, !tbaa !54
  %949 = insertelement <4 x float> %945, float %948, i64 3
  %950 = fmul <4 x float> %949, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %951 = insertelement <4 x i32> undef, i32 %t2294.us, i64 0
  %952 = shufflevector <4 x i32> %951, <4 x i32> undef, <4 x i32> zeroinitializer
  %953 = add <4 x i32> %952, <i32 -1, i32 0, i32 1, i32 2>
  %954 = add <4 x i32> %953, %t2301.us
  %955 = sext <4 x i32> %954 to <4 x i64>
  %956 = extractelement <4 x i64> %955, i64 0
  %957 = getelementptr inbounds float, ptr %f7.host, i64 %956
  %958 = load float, ptr %957, align 4, !tbaa !54
  %959 = insertelement <4 x float> undef, float %958, i64 0
  %960 = extractelement <4 x i64> %955, i64 1
  %961 = getelementptr inbounds float, ptr %f7.host, i64 %960
  %962 = load float, ptr %961, align 4, !tbaa !54
  %963 = insertelement <4 x float> %959, float %962, i64 1
  %964 = extractelement <4 x i64> %955, i64 2
  %965 = getelementptr inbounds float, ptr %f7.host, i64 %964
  %966 = load float, ptr %965, align 4, !tbaa !54
  %967 = insertelement <4 x float> %963, float %966, i64 2
  %968 = extractelement <4 x i64> %955, i64 3
  %969 = getelementptr inbounds float, ptr %f7.host, i64 %968
  %970 = load float, ptr %969, align 4, !tbaa !54
  %971 = insertelement <4 x float> %967, float %970, i64 3
  %972 = fmul <4 x float> %971, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %973 = fadd <4 x float> %950, %972
  %974 = fmul <4 x float> %973, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %975 = fadd <4 x float> %928, %974
  %976 = mul nsw <4 x i32> %872, %825
  %977 = insertelement <4 x i32> undef, i32 %t2289.us, i64 0
  %978 = shufflevector <4 x i32> %977, <4 x i32> undef, <4 x i32> zeroinitializer
  %979 = add nsw <4 x i32> %978, <i32 0, i32 2, i32 4, i32 6>
  %980 = add nsw <4 x i32> %976, %979
  %981 = sext <4 x i32> %980 to <4 x i64>
  %982 = extractelement <4 x i64> %981, i64 0
  %983 = getelementptr inbounds float, ptr %f6.host, i64 %982
  %984 = load float, ptr %983, align 4, !tbaa !50
  %985 = insertelement <4 x float> undef, float %984, i64 0
  %986 = extractelement <4 x i64> %981, i64 1
  %987 = getelementptr inbounds float, ptr %f6.host, i64 %986
  %988 = load float, ptr %987, align 4, !tbaa !50
  %989 = insertelement <4 x float> %985, float %988, i64 1
  %990 = extractelement <4 x i64> %981, i64 2
  %991 = getelementptr inbounds float, ptr %f6.host, i64 %990
  %992 = load float, ptr %991, align 4, !tbaa !50
  %993 = insertelement <4 x float> %989, float %992, i64 2
  %994 = extractelement <4 x i64> %981, i64 3
  %995 = getelementptr inbounds float, ptr %f6.host, i64 %994
  %996 = load float, ptr %995, align 4, !tbaa !50
  %997 = insertelement <4 x float> %993, float %996, i64 3
  %998 = fsub <4 x float> %997, %975
  %999 = fmul <4 x float> %t2284.us, %998
  %1000 = add nsw <4 x i32> %t2295.us, %885
  %1001 = sext <4 x i32> %1000 to <4 x i64>
  %1002 = extractelement <4 x i64> %1001, i64 0
  %1003 = getelementptr inbounds float, ptr %f7.host, i64 %1002
  %1004 = load float, ptr %1003, align 4, !tbaa !54
  %1005 = insertelement <4 x float> undef, float %1004, i64 0
  %1006 = extractelement <4 x i64> %1001, i64 1
  %1007 = getelementptr inbounds float, ptr %f7.host, i64 %1006
  %1008 = load float, ptr %1007, align 4, !tbaa !54
  %1009 = insertelement <4 x float> %1005, float %1008, i64 1
  %1010 = extractelement <4 x i64> %1001, i64 2
  %1011 = getelementptr inbounds float, ptr %f7.host, i64 %1010
  %1012 = load float, ptr %1011, align 4, !tbaa !54
  %1013 = insertelement <4 x float> %1009, float %1012, i64 2
  %1014 = extractelement <4 x i64> %1001, i64 3
  %1015 = getelementptr inbounds float, ptr %f7.host, i64 %1014
  %1016 = load float, ptr %1015, align 4, !tbaa !54
  %1017 = insertelement <4 x float> %1013, float %1016, i64 3
  %1018 = fmul <4 x float> %1017, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1019 = add <4 x i32> %t2295.us, %906
  %1020 = add <4 x i32> %1019, <i32 -1, i32 0, i32 1, i32 2>
  %1021 = sext <4 x i32> %1020 to <4 x i64>
  %1022 = extractelement <4 x i64> %1021, i64 0
  %1023 = getelementptr inbounds float, ptr %f7.host, i64 %1022
  %1024 = load float, ptr %1023, align 4, !tbaa !54
  %1025 = insertelement <4 x float> undef, float %1024, i64 0
  %1026 = extractelement <4 x i64> %1021, i64 1
  %1027 = getelementptr inbounds float, ptr %f7.host, i64 %1026
  %1028 = load float, ptr %1027, align 4, !tbaa !54
  %1029 = insertelement <4 x float> %1025, float %1028, i64 1
  %1030 = extractelement <4 x i64> %1021, i64 2
  %1031 = getelementptr inbounds float, ptr %f7.host, i64 %1030
  %1032 = load float, ptr %1031, align 4, !tbaa !54
  %1033 = insertelement <4 x float> %1029, float %1032, i64 2
  %1034 = extractelement <4 x i64> %1021, i64 3
  %1035 = getelementptr inbounds float, ptr %f7.host, i64 %1034
  %1036 = load float, ptr %1035, align 4, !tbaa !54
  %1037 = insertelement <4 x float> %1033, float %1036, i64 3
  %1038 = fmul <4 x float> %1037, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1039 = fadd <4 x float> %1018, %1038
  %1040 = fmul <4 x float> %1039, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1041 = add nsw <4 x i32> %t2295.us, %931
  %1042 = sext <4 x i32> %1041 to <4 x i64>
  %1043 = extractelement <4 x i64> %1042, i64 0
  %1044 = getelementptr inbounds float, ptr %f7.host, i64 %1043
  %1045 = load float, ptr %1044, align 4, !tbaa !54
  %1046 = insertelement <4 x float> undef, float %1045, i64 0
  %1047 = extractelement <4 x i64> %1042, i64 1
  %1048 = getelementptr inbounds float, ptr %f7.host, i64 %1047
  %1049 = load float, ptr %1048, align 4, !tbaa !54
  %1050 = insertelement <4 x float> %1046, float %1049, i64 1
  %1051 = extractelement <4 x i64> %1042, i64 2
  %1052 = getelementptr inbounds float, ptr %f7.host, i64 %1051
  %1053 = load float, ptr %1052, align 4, !tbaa !54
  %1054 = insertelement <4 x float> %1050, float %1053, i64 2
  %1055 = extractelement <4 x i64> %1042, i64 3
  %1056 = getelementptr inbounds float, ptr %f7.host, i64 %1055
  %1057 = load float, ptr %1056, align 4, !tbaa !54
  %1058 = insertelement <4 x float> %1054, float %1057, i64 3
  %1059 = fmul <4 x float> %1058, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1060 = add <4 x i32> %t2295.us, %952
  %1061 = add <4 x i32> %1060, <i32 -1, i32 0, i32 1, i32 2>
  %1062 = sext <4 x i32> %1061 to <4 x i64>
  %1063 = extractelement <4 x i64> %1062, i64 0
  %1064 = getelementptr inbounds float, ptr %f7.host, i64 %1063
  %1065 = load float, ptr %1064, align 4, !tbaa !54
  %1066 = insertelement <4 x float> undef, float %1065, i64 0
  %1067 = extractelement <4 x i64> %1062, i64 1
  %1068 = getelementptr inbounds float, ptr %f7.host, i64 %1067
  %1069 = load float, ptr %1068, align 4, !tbaa !54
  %1070 = insertelement <4 x float> %1066, float %1069, i64 1
  %1071 = extractelement <4 x i64> %1062, i64 2
  %1072 = getelementptr inbounds float, ptr %f7.host, i64 %1071
  %1073 = load float, ptr %1072, align 4, !tbaa !54
  %1074 = insertelement <4 x float> %1070, float %1073, i64 2
  %1075 = extractelement <4 x i64> %1062, i64 3
  %1076 = getelementptr inbounds float, ptr %f7.host, i64 %1075
  %1077 = load float, ptr %1076, align 4, !tbaa !54
  %1078 = insertelement <4 x float> %1074, float %1077, i64 3
  %1079 = fmul <4 x float> %1078, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1080 = fadd <4 x float> %1059, %1079
  %1081 = fmul <4 x float> %1080, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1082 = fadd <4 x float> %1040, %1081
  %1083 = mul nsw <4 x i32> %t2291.us, %825
  %1084 = add nsw <4 x i32> %1083, %979
  %1085 = sext <4 x i32> %1084 to <4 x i64>
  %1086 = extractelement <4 x i64> %1085, i64 0
  %1087 = getelementptr inbounds float, ptr %f6.host, i64 %1086
  %1088 = load float, ptr %1087, align 4, !tbaa !50
  %1089 = insertelement <4 x float> undef, float %1088, i64 0
  %1090 = extractelement <4 x i64> %1085, i64 1
  %1091 = getelementptr inbounds float, ptr %f6.host, i64 %1090
  %1092 = load float, ptr %1091, align 4, !tbaa !50
  %1093 = insertelement <4 x float> %1089, float %1092, i64 1
  %1094 = extractelement <4 x i64> %1085, i64 2
  %1095 = getelementptr inbounds float, ptr %f6.host, i64 %1094
  %1096 = load float, ptr %1095, align 4, !tbaa !50
  %1097 = insertelement <4 x float> %1093, float %1096, i64 2
  %1098 = extractelement <4 x i64> %1085, i64 3
  %1099 = getelementptr inbounds float, ptr %f6.host, i64 %1098
  %1100 = load float, ptr %1099, align 4, !tbaa !50
  %1101 = insertelement <4 x float> %1097, float %1100, i64 3
  %1102 = fsub <4 x float> %1101, %1082
  %1103 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2284.us
  %1104 = fmul <4 x float> %1103, %1102
  %1105 = fadd <4 x float> %999, %1104
  %narrow155.us = sub nsw i32 %859, %f129.v3.min_realized
  %1106 = sext i32 %narrow155.us to i64
  %1107 = add nsw i64 %1106, %846
  %1108 = getelementptr inbounds float, ptr %129, i64 %1107
  %1109 = load <4 x float>, ptr %1108, align 4, !tbaa !64
  %1110 = fmul <4 x float> %1109, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1111 = sext i32 %t2280.us to i64
  %1112 = sub nsw i64 %1111, %826
  %1113 = add nsw i64 %847, %1112
  %1114 = getelementptr inbounds float, ptr %129, i64 %1113
  %1115 = load <4 x float>, ptr %1114, align 4, !tbaa !64
  %1116 = fmul <4 x float> %1115, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1117 = fadd <4 x float> %1110, %1116
  %1118 = fmul <4 x float> %1117, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1119 = add nsw i64 %1106, %848
  %1120 = getelementptr inbounds float, ptr %129, i64 %1119
  %1121 = load <4 x float>, ptr %1120, align 4, !tbaa !64
  %1122 = fmul <4 x float> %1121, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1123 = add nsw i64 %849, %1112
  %1124 = getelementptr inbounds float, ptr %129, i64 %1123
  %1125 = load <4 x float>, ptr %1124, align 4, !tbaa !64
  %1126 = fmul <4 x float> %1125, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1127 = fadd <4 x float> %1122, %1126
  %1128 = fmul <4 x float> %1127, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1129 = fadd <4 x float> %1118, %1128
  %1130 = fadd <4 x float> %1105, %1129
  %1131 = insertelement <4 x i32> undef, i32 %t2315.us, i64 0
  %1132 = shufflevector <4 x i32> %1131, <4 x i32> undef, <4 x i32> zeroinitializer
  %1133 = add nsw <4 x i32> %1132, <i32 0, i32 1, i32 2, i32 3>
  %1134 = add nsw <4 x i32> %t2316.us, %1133
  %1135 = sext <4 x i32> %1134 to <4 x i64>
  %1136 = extractelement <4 x i64> %1135, i64 0
  %1137 = getelementptr inbounds float, ptr %f7.host, i64 %1136
  %1138 = load float, ptr %1137, align 4, !tbaa !54
  %1139 = insertelement <4 x float> undef, float %1138, i64 0
  %1140 = extractelement <4 x i64> %1135, i64 1
  %1141 = getelementptr inbounds float, ptr %f7.host, i64 %1140
  %1142 = load float, ptr %1141, align 4, !tbaa !54
  %1143 = insertelement <4 x float> %1139, float %1142, i64 1
  %1144 = extractelement <4 x i64> %1135, i64 2
  %1145 = getelementptr inbounds float, ptr %f7.host, i64 %1144
  %1146 = load float, ptr %1145, align 4, !tbaa !54
  %1147 = insertelement <4 x float> %1143, float %1146, i64 2
  %1148 = extractelement <4 x i64> %1135, i64 3
  %1149 = getelementptr inbounds float, ptr %f7.host, i64 %1148
  %1150 = load float, ptr %1149, align 4, !tbaa !54
  %1151 = insertelement <4 x float> %1147, float %1150, i64 3
  %1152 = fmul <4 x float> %1151, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1153 = insertelement <4 x i32> undef, i32 %t2314.us, i64 0
  %1154 = shufflevector <4 x i32> %1153, <4 x i32> undef, <4 x i32> zeroinitializer
  %1155 = add nsw <4 x i32> %1154, <i32 0, i32 1, i32 2, i32 3>
  %1156 = add <4 x i32> %t2316.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1157 = add <4 x i32> %1156, %1155
  %1158 = sext <4 x i32> %1157 to <4 x i64>
  %1159 = extractelement <4 x i64> %1158, i64 0
  %1160 = getelementptr inbounds float, ptr %f7.host, i64 %1159
  %1161 = load float, ptr %1160, align 4, !tbaa !54
  %1162 = insertelement <4 x float> undef, float %1161, i64 0
  %1163 = extractelement <4 x i64> %1158, i64 1
  %1164 = getelementptr inbounds float, ptr %f7.host, i64 %1163
  %1165 = load float, ptr %1164, align 4, !tbaa !54
  %1166 = insertelement <4 x float> %1162, float %1165, i64 1
  %1167 = extractelement <4 x i64> %1158, i64 2
  %1168 = getelementptr inbounds float, ptr %f7.host, i64 %1167
  %1169 = load float, ptr %1168, align 4, !tbaa !54
  %1170 = insertelement <4 x float> %1166, float %1169, i64 2
  %1171 = extractelement <4 x i64> %1158, i64 3
  %1172 = getelementptr inbounds float, ptr %f7.host, i64 %1171
  %1173 = load float, ptr %1172, align 4, !tbaa !54
  %1174 = insertelement <4 x float> %1170, float %1173, i64 3
  %1175 = fmul <4 x float> %1174, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1176 = fadd <4 x float> %1152, %1175
  %1177 = fmul <4 x float> %1176, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1178 = insertelement <4 x i32> undef, i32 %t2313.us, i64 0
  %1179 = shufflevector <4 x i32> %1178, <4 x i32> undef, <4 x i32> zeroinitializer
  %1180 = add nsw <4 x i32> %1179, <i32 0, i32 1, i32 2, i32 3>
  %1181 = add nsw <4 x i32> %t2316.us, %1180
  %1182 = sext <4 x i32> %1181 to <4 x i64>
  %1183 = extractelement <4 x i64> %1182, i64 0
  %1184 = getelementptr inbounds float, ptr %f7.host, i64 %1183
  %1185 = load float, ptr %1184, align 4, !tbaa !54
  %1186 = insertelement <4 x float> undef, float %1185, i64 0
  %1187 = extractelement <4 x i64> %1182, i64 1
  %1188 = getelementptr inbounds float, ptr %f7.host, i64 %1187
  %1189 = load float, ptr %1188, align 4, !tbaa !54
  %1190 = insertelement <4 x float> %1186, float %1189, i64 1
  %1191 = extractelement <4 x i64> %1182, i64 2
  %1192 = getelementptr inbounds float, ptr %f7.host, i64 %1191
  %1193 = load float, ptr %1192, align 4, !tbaa !54
  %1194 = insertelement <4 x float> %1190, float %1193, i64 2
  %1195 = extractelement <4 x i64> %1182, i64 3
  %1196 = getelementptr inbounds float, ptr %f7.host, i64 %1195
  %1197 = load float, ptr %1196, align 4, !tbaa !54
  %1198 = insertelement <4 x float> %1194, float %1197, i64 3
  %1199 = fmul <4 x float> %1198, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1200 = insertelement <4 x i32> undef, i32 %t2310.us, i64 0
  %1201 = shufflevector <4 x i32> %1200, <4 x i32> undef, <4 x i32> zeroinitializer
  %1202 = add nsw <4 x i32> %1201, <i32 0, i32 1, i32 2, i32 3>
  %1203 = add <4 x i32> %1156, %1202
  %1204 = sext <4 x i32> %1203 to <4 x i64>
  %1205 = extractelement <4 x i64> %1204, i64 0
  %1206 = getelementptr inbounds float, ptr %f7.host, i64 %1205
  %1207 = load float, ptr %1206, align 4, !tbaa !54
  %1208 = insertelement <4 x float> undef, float %1207, i64 0
  %1209 = extractelement <4 x i64> %1204, i64 1
  %1210 = getelementptr inbounds float, ptr %f7.host, i64 %1209
  %1211 = load float, ptr %1210, align 4, !tbaa !54
  %1212 = insertelement <4 x float> %1208, float %1211, i64 1
  %1213 = extractelement <4 x i64> %1204, i64 2
  %1214 = getelementptr inbounds float, ptr %f7.host, i64 %1213
  %1215 = load float, ptr %1214, align 4, !tbaa !54
  %1216 = insertelement <4 x float> %1212, float %1215, i64 2
  %1217 = extractelement <4 x i64> %1204, i64 3
  %1218 = getelementptr inbounds float, ptr %f7.host, i64 %1217
  %1219 = load float, ptr %1218, align 4, !tbaa !54
  %1220 = insertelement <4 x float> %1216, float %1219, i64 3
  %1221 = fmul <4 x float> %1220, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1222 = fadd <4 x float> %1199, %1221
  %1223 = fmul <4 x float> %1222, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1224 = fadd <4 x float> %1177, %1223
  %1225 = mul nsw <4 x i32> %882, %825
  %1226 = add nsw i32 %t2289.us, 1
  %1227 = insertelement <4 x i32> undef, i32 %1226, i64 0
  %1228 = shufflevector <4 x i32> %1227, <4 x i32> undef, <4 x i32> zeroinitializer
  %1229 = add nsw <4 x i32> %1228, <i32 0, i32 2, i32 4, i32 6>
  %1230 = add nsw <4 x i32> %1225, %1229
  %1231 = sext <4 x i32> %1230 to <4 x i64>
  %1232 = extractelement <4 x i64> %1231, i64 0
  %1233 = getelementptr inbounds float, ptr %f6.host, i64 %1232
  %1234 = load float, ptr %1233, align 4, !tbaa !50
  %1235 = insertelement <4 x float> undef, float %1234, i64 0
  %1236 = extractelement <4 x i64> %1231, i64 1
  %1237 = getelementptr inbounds float, ptr %f6.host, i64 %1236
  %1238 = load float, ptr %1237, align 4, !tbaa !50
  %1239 = insertelement <4 x float> %1235, float %1238, i64 1
  %1240 = extractelement <4 x i64> %1231, i64 2
  %1241 = getelementptr inbounds float, ptr %f6.host, i64 %1240
  %1242 = load float, ptr %1241, align 4, !tbaa !50
  %1243 = insertelement <4 x float> %1239, float %1242, i64 2
  %1244 = extractelement <4 x i64> %1231, i64 3
  %1245 = getelementptr inbounds float, ptr %f6.host, i64 %1244
  %1246 = load float, ptr %1245, align 4, !tbaa !50
  %1247 = insertelement <4 x float> %1243, float %1246, i64 3
  %1248 = fsub <4 x float> %1247, %1224
  %1249 = fmul <4 x float> %t2305.us, %1248
  %1250 = add nsw <4 x i32> %t2311.us, %1133
  %1251 = sext <4 x i32> %1250 to <4 x i64>
  %1252 = extractelement <4 x i64> %1251, i64 0
  %1253 = getelementptr inbounds float, ptr %f7.host, i64 %1252
  %1254 = load float, ptr %1253, align 4, !tbaa !54
  %1255 = insertelement <4 x float> undef, float %1254, i64 0
  %1256 = extractelement <4 x i64> %1251, i64 1
  %1257 = getelementptr inbounds float, ptr %f7.host, i64 %1256
  %1258 = load float, ptr %1257, align 4, !tbaa !54
  %1259 = insertelement <4 x float> %1255, float %1258, i64 1
  %1260 = extractelement <4 x i64> %1251, i64 2
  %1261 = getelementptr inbounds float, ptr %f7.host, i64 %1260
  %1262 = load float, ptr %1261, align 4, !tbaa !54
  %1263 = insertelement <4 x float> %1259, float %1262, i64 2
  %1264 = extractelement <4 x i64> %1251, i64 3
  %1265 = getelementptr inbounds float, ptr %f7.host, i64 %1264
  %1266 = load float, ptr %1265, align 4, !tbaa !54
  %1267 = insertelement <4 x float> %1263, float %1266, i64 3
  %1268 = fmul <4 x float> %1267, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1269 = add <4 x i32> %t2311.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1270 = add <4 x i32> %1269, %1155
  %1271 = sext <4 x i32> %1270 to <4 x i64>
  %1272 = extractelement <4 x i64> %1271, i64 0
  %1273 = getelementptr inbounds float, ptr %f7.host, i64 %1272
  %1274 = load float, ptr %1273, align 4, !tbaa !54
  %1275 = insertelement <4 x float> undef, float %1274, i64 0
  %1276 = extractelement <4 x i64> %1271, i64 1
  %1277 = getelementptr inbounds float, ptr %f7.host, i64 %1276
  %1278 = load float, ptr %1277, align 4, !tbaa !54
  %1279 = insertelement <4 x float> %1275, float %1278, i64 1
  %1280 = extractelement <4 x i64> %1271, i64 2
  %1281 = getelementptr inbounds float, ptr %f7.host, i64 %1280
  %1282 = load float, ptr %1281, align 4, !tbaa !54
  %1283 = insertelement <4 x float> %1279, float %1282, i64 2
  %1284 = extractelement <4 x i64> %1271, i64 3
  %1285 = getelementptr inbounds float, ptr %f7.host, i64 %1284
  %1286 = load float, ptr %1285, align 4, !tbaa !54
  %1287 = insertelement <4 x float> %1283, float %1286, i64 3
  %1288 = fmul <4 x float> %1287, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1289 = fadd <4 x float> %1268, %1288
  %1290 = fmul <4 x float> %1289, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1291 = add nsw <4 x i32> %t2311.us, %1180
  %1292 = sext <4 x i32> %1291 to <4 x i64>
  %1293 = extractelement <4 x i64> %1292, i64 0
  %1294 = getelementptr inbounds float, ptr %f7.host, i64 %1293
  %1295 = load float, ptr %1294, align 4, !tbaa !54
  %1296 = insertelement <4 x float> undef, float %1295, i64 0
  %1297 = extractelement <4 x i64> %1292, i64 1
  %1298 = getelementptr inbounds float, ptr %f7.host, i64 %1297
  %1299 = load float, ptr %1298, align 4, !tbaa !54
  %1300 = insertelement <4 x float> %1296, float %1299, i64 1
  %1301 = extractelement <4 x i64> %1292, i64 2
  %1302 = getelementptr inbounds float, ptr %f7.host, i64 %1301
  %1303 = load float, ptr %1302, align 4, !tbaa !54
  %1304 = insertelement <4 x float> %1300, float %1303, i64 2
  %1305 = extractelement <4 x i64> %1292, i64 3
  %1306 = getelementptr inbounds float, ptr %f7.host, i64 %1305
  %1307 = load float, ptr %1306, align 4, !tbaa !54
  %1308 = insertelement <4 x float> %1304, float %1307, i64 3
  %1309 = fmul <4 x float> %1308, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1310 = add <4 x i32> %1269, %1202
  %1311 = sext <4 x i32> %1310 to <4 x i64>
  %1312 = extractelement <4 x i64> %1311, i64 0
  %1313 = getelementptr inbounds float, ptr %f7.host, i64 %1312
  %1314 = load float, ptr %1313, align 4, !tbaa !54
  %1315 = insertelement <4 x float> undef, float %1314, i64 0
  %1316 = extractelement <4 x i64> %1311, i64 1
  %1317 = getelementptr inbounds float, ptr %f7.host, i64 %1316
  %1318 = load float, ptr %1317, align 4, !tbaa !54
  %1319 = insertelement <4 x float> %1315, float %1318, i64 1
  %1320 = extractelement <4 x i64> %1311, i64 2
  %1321 = getelementptr inbounds float, ptr %f7.host, i64 %1320
  %1322 = load float, ptr %1321, align 4, !tbaa !54
  %1323 = insertelement <4 x float> %1319, float %1322, i64 2
  %1324 = extractelement <4 x i64> %1311, i64 3
  %1325 = getelementptr inbounds float, ptr %f7.host, i64 %1324
  %1326 = load float, ptr %1325, align 4, !tbaa !54
  %1327 = insertelement <4 x float> %1323, float %1326, i64 3
  %1328 = fmul <4 x float> %1327, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1329 = fadd <4 x float> %1309, %1328
  %1330 = fmul <4 x float> %1329, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1331 = fadd <4 x float> %1290, %1330
  %1332 = mul nsw <4 x i32> %t2308.us, %825
  %1333 = add nsw <4 x i32> %1332, %1229
  %1334 = sext <4 x i32> %1333 to <4 x i64>
  %1335 = extractelement <4 x i64> %1334, i64 0
  %1336 = getelementptr inbounds float, ptr %f6.host, i64 %1335
  %1337 = load float, ptr %1336, align 4, !tbaa !50
  %1338 = insertelement <4 x float> undef, float %1337, i64 0
  %1339 = extractelement <4 x i64> %1334, i64 1
  %1340 = getelementptr inbounds float, ptr %f6.host, i64 %1339
  %1341 = load float, ptr %1340, align 4, !tbaa !50
  %1342 = insertelement <4 x float> %1338, float %1341, i64 1
  %1343 = extractelement <4 x i64> %1334, i64 2
  %1344 = getelementptr inbounds float, ptr %f6.host, i64 %1343
  %1345 = load float, ptr %1344, align 4, !tbaa !50
  %1346 = insertelement <4 x float> %1342, float %1345, i64 2
  %1347 = extractelement <4 x i64> %1334, i64 3
  %1348 = getelementptr inbounds float, ptr %f6.host, i64 %1347
  %1349 = load float, ptr %1348, align 4, !tbaa !50
  %1350 = insertelement <4 x float> %1346, float %1349, i64 3
  %1351 = fsub <4 x float> %1350, %1331
  %1352 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2305.us
  %1353 = fmul <4 x float> %1352, %1351
  %1354 = fadd <4 x float> %1249, %1353
  %narrow156.us = sub nsw i32 %876, %f129.v3.min_realized
  %1355 = sext i32 %narrow156.us to i64
  %1356 = add nsw i64 %1355, %846
  %1357 = getelementptr inbounds float, ptr %129, i64 %1356
  %1358 = load <4 x float>, ptr %1357, align 4, !tbaa !64
  %1359 = fmul <4 x float> %1358, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1360 = sext i32 %t2302.us to i64
  %1361 = sub nsw i64 %1360, %826
  %1362 = add nsw i64 %847, %1361
  %1363 = getelementptr inbounds float, ptr %129, i64 %1362
  %1364 = load <4 x float>, ptr %1363, align 4, !tbaa !64
  %1365 = fmul <4 x float> %1364, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1366 = fadd <4 x float> %1359, %1365
  %1367 = fmul <4 x float> %1366, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1368 = add nsw i64 %1355, %848
  %1369 = getelementptr inbounds float, ptr %129, i64 %1368
  %1370 = load <4 x float>, ptr %1369, align 4, !tbaa !64
  %1371 = fmul <4 x float> %1370, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1372 = add nsw i64 %849, %1361
  %1373 = getelementptr inbounds float, ptr %129, i64 %1372
  %1374 = load <4 x float>, ptr %1373, align 4, !tbaa !64
  %1375 = fmul <4 x float> %1374, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1376 = fadd <4 x float> %1371, %1375
  %1377 = fmul <4 x float> %1376, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1378 = fadd <4 x float> %1367, %1377
  %1379 = fadd <4 x float> %1354, %1378
  %1380 = shufflevector <4 x float> %1130, <4 x float> %1379, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %1381 = sext i32 %f128.s0.v3.v343.base.us to i64
  %1382 = add i64 %852, %1381
  %1383 = getelementptr inbounds float, ptr %155, i64 %1382
  store <8 x float> %1380, ptr %1383, align 4, !tbaa !66
  %lsr.iv.next417.us = add i32 %lsr.iv416.us, -1
  %lsr.iv.next419.us = add i32 %lsr.iv418.us, 8
  %.not157.us = icmp eq i32 %lsr.iv.next417.us, 0
  br i1 %.not157.us, label %"end for f128.s0.v3.v3.loopexit.us", label %"for f128.s0.v3.v3.us"

"end for f128.s0.v3.v3.loopexit.us":              ; preds = %"for f128.s0.v3.v3.us"
  %indvars.iv.next312 = add nsw i64 %indvars.iv311, 1
  %1384 = icmp eq i64 %indvars.iv.next312, %sext313
  br i1 %1384, label %"for f127.s0.v4.preheader", label %"for f128.s0.v4.us"

"for f127.s0.v4.preheader":                       ; preds = %"end for f128.s0.v3.v3.loopexit.us", %"produce f128"
  %1385 = add nsw i32 %140, 1
  %1386 = icmp sgt i32 %139, -1
  %1387 = add nsw i32 %f73.v3.extent_realized.s, 1
  %1388 = xor i32 %817, -1
  %1389 = xor i32 %f6.v4.min_realized, -1
  %1390 = add nsw i32 %f5.v3.extent_realized.s, 1
  %1391 = insertelement <4 x i32> undef, i32 %1390, i64 0
  %1392 = shufflevector <4 x i32> %1391, <4 x i32> undef, <4 x i32> zeroinitializer
  %1393 = sext i32 %f128.v3.min_realized to i64
  %1394 = sext i32 %f127.v3.extent_realized.s to i64
  %1395 = add nsw i64 %1394, 1
  %1396 = sext i32 %f127.v4.min_realized to i64
  %1397 = sext i32 %f127.v3.min_realized to i64
  br i1 %1386, label %"for f127.s0.v4.us.preheader", label %"for f126.s0.v4.preheader", !prof !5

"for f127.s0.v4.us.preheader":                    ; preds = %"for f127.s0.v4.preheader"
  %1398 = add nsw i32 %b803, 3
  %1399 = sext i32 %b803 to i64
  %sext317 = sext i32 %1398 to i64
  br label %"for f127.s0.v4.us"

"for f127.s0.v4.us":                              ; preds = %"for f127.s0.v4.us.preheader", %"end for f127.s0.v3.v3.loopexit.us"
  %indvars.iv315 = phi i64 [ %1399, %"for f127.s0.v4.us.preheader" ], [ %indvars.iv.next316, %"end for f127.s0.v3.v3.loopexit.us" ]
  %indvars318 = trunc i64 %indvars.iv315 to i32
  %1400 = shl i32 %indvars318, 1
  %1401 = and i32 %1400, 2
  %1402 = ashr i32 %indvars318, 1
  %t2317.us = add nsw i32 %1401, %1402
  %1403 = trunc i64 %indvars.iv315 to i32
  %1404 = sub i32 %1403, %f73.v4.min_realized
  %1405 = mul i32 %1404, %1387
  %1406 = sub i32 %1405, %f73.v3.min_realized
  %1407 = add nsw i32 %t2317.us, %1388
  %t2324.us = mul nsw i32 %1407, %148
  %1408 = sub nsw i32 %1402, %817
  %t2326.us = mul nsw i32 %1408, %148
  %1409 = add i32 %t2317.us, %1389
  %1410 = mul nsw i32 %1409, %f6.stride.1
  %1411 = sub nsw i32 %1402, %f6.v4.min_realized
  %1412 = mul nsw i32 %1411, %f6.stride.1
  %1413 = sext i32 %t2326.us to i64
  %1414 = add nsw i64 %1413, -1
  %1415 = sext i32 %t2324.us to i64
  %1416 = add nsw i64 %1415, -1
  %1417 = sub nsw i64 %indvars.iv315, %1396
  %1418 = mul nsw i64 %1417, %1395
  %1419 = sub i64 %1418, %1397
  %1420 = trunc i64 %indvars.iv315 to i32
  %1421 = sub i32 %1420, %f5.v4.min_realized
  %1422 = mul i32 %1421, %f5.stride.1
  br label %"for f127.s0.v3.v3.us"

"for f127.s0.v3.v3.us":                           ; preds = %"for f127.s0.v4.us", %"for f127.s0.v3.v3.us"
  %lsr.iv414.us = phi i32 [ %lsr.iv.next415.us, %"for f127.s0.v3.v3.us" ], [ 0, %"for f127.s0.v4.us" ]
  %lsr.iv412.us = phi i32 [ %lsr.iv.next413.us, %"for f127.s0.v3.v3.us" ], [ %1385, %"for f127.s0.v4.us" ]
  %1423 = add i32 %lsr.iv414.us, %136
  %f127.s0.v3.v323.base.us = tail call i32 @llvm.smin.i32(i32 %b801, i32 %1423)
  %1424 = shl i32 %f127.s0.v3.v323.base.us, 1
  %1425 = and i32 %1424, 2
  %1426 = ashr i32 %f127.s0.v3.v323.base.us, 1
  %t2318.us = add nsw i32 %1425, %1426
  %t2319.us = add i32 %1406, %f127.s0.v3.v323.base.us
  %1427 = sext i32 %t2319.us to i64
  %1428 = getelementptr inbounds float, ptr %f73.host, i64 %1427
  %1429 = load <4 x float>, ptr %1428, align 4, !tbaa !52
  %1430 = add nsw i64 %1427, 4
  %1431 = getelementptr inbounds float, ptr %f73.host, i64 %1430
  %1432 = load <4 x float>, ptr %1431, align 4, !tbaa !52
  %1433 = shufflevector <4 x float> %1429, <4 x float> %1432, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2320.us = fmul <4 x float> %233, %1433
  %a841.us = fptosi <4 x float> %t2320.us to <4 x i32>
  %a844.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a841.us)
  %1434 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a844.us, <4 x i32> zeroinitializer)
  %1435 = sitofp <4 x i32> %1434 to <4 x float>
  %t2322.us = fsub <4 x float> %t2320.us, %1435
  %1436 = sub nsw i32 %f127.s0.v3.v323.base.us, %f5.v3.min_realized
  %t2327.us = add nsw i32 %1436, %1422
  %t2329.us = sub nsw <4 x i32> %1434, %242
  %1437 = sub nsw i32 %t2318.us, %f6.v3.min_realized
  %t2332.us = add nsw i32 %1437, %1410
  %t2333.us = mul nsw <4 x i32> %t2329.us, %825
  %1438 = sub nsw i32 %1426, %f6.v3.min_realized
  %t2335.us = add nsw i32 %1438, %1410
  %t2337.us = add nsw i32 %1437, %1412
  %t2338.us = add nsw i32 %1438, %1412
  %1439 = add nsw <4 x i32> %t2329.us, <i32 1, i32 1, i32 1, i32 1>
  %t2339.us = mul nsw <4 x i32> %1439, %825
  %1440 = add nsw i32 %f127.s0.v3.v323.base.us, 1
  %1441 = shl i32 %1440, 1
  %1442 = and i32 %1441, 2
  %1443 = ashr i32 %1440, 1
  %t2340.us = add nsw i32 %1442, %1443
  %1444 = shufflevector <4 x float> %1429, <4 x float> %1432, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2341.us = fmul <4 x float> %233, %1444
  %a845.us = fptosi <4 x float> %t2341.us to <4 x i32>
  %a848.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a845.us)
  %1445 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a848.us, <4 x i32> zeroinitializer)
  %1446 = sitofp <4 x i32> %1445 to <4 x float>
  %t2343.us = fsub <4 x float> %t2341.us, %1446
  %t2346.us = sub nsw <4 x i32> %1445, %242
  %1447 = sub nsw i32 %t2340.us, %f6.v3.min_realized
  %t2348.us = add nsw i32 %1447, %1410
  %t2349.us = mul nsw <4 x i32> %t2346.us, %825
  %1448 = sub nsw i32 %1443, %f6.v3.min_realized
  %t2351.us = add nsw i32 %1448, %1410
  %t2352.us = add nsw i32 %1447, %1412
  %t2353.us = add nsw i32 %1448, %1412
  %1449 = add nsw <4 x i32> %t2346.us, <i32 1, i32 1, i32 1, i32 1>
  %t2354.us = mul nsw <4 x i32> %1449, %825
  %1450 = insertelement <4 x i32> undef, i32 %t2338.us, i64 0
  %1451 = shufflevector <4 x i32> %1450, <4 x i32> undef, <4 x i32> zeroinitializer
  %1452 = add nsw <4 x i32> %1451, <i32 0, i32 1, i32 2, i32 3>
  %1453 = add nsw <4 x i32> %t2339.us, %1452
  %1454 = sext <4 x i32> %1453 to <4 x i64>
  %1455 = extractelement <4 x i64> %1454, i64 0
  %1456 = getelementptr inbounds float, ptr %f6.host, i64 %1455
  %1457 = load float, ptr %1456, align 4, !tbaa !50
  %1458 = insertelement <4 x float> undef, float %1457, i64 0
  %1459 = extractelement <4 x i64> %1454, i64 1
  %1460 = getelementptr inbounds float, ptr %f6.host, i64 %1459
  %1461 = load float, ptr %1460, align 4, !tbaa !50
  %1462 = insertelement <4 x float> %1458, float %1461, i64 1
  %1463 = extractelement <4 x i64> %1454, i64 2
  %1464 = getelementptr inbounds float, ptr %f6.host, i64 %1463
  %1465 = load float, ptr %1464, align 4, !tbaa !50
  %1466 = insertelement <4 x float> %1462, float %1465, i64 2
  %1467 = extractelement <4 x i64> %1454, i64 3
  %1468 = getelementptr inbounds float, ptr %f6.host, i64 %1467
  %1469 = load float, ptr %1468, align 4, !tbaa !50
  %1470 = insertelement <4 x float> %1466, float %1469, i64 3
  %1471 = fmul <4 x float> %1470, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1472 = insertelement <4 x i32> undef, i32 %t2337.us, i64 0
  %1473 = shufflevector <4 x i32> %1472, <4 x i32> undef, <4 x i32> zeroinitializer
  %1474 = add <4 x i32> %1473, <i32 -1, i32 0, i32 1, i32 2>
  %1475 = add <4 x i32> %1474, %t2339.us
  %1476 = sext <4 x i32> %1475 to <4 x i64>
  %1477 = extractelement <4 x i64> %1476, i64 0
  %1478 = getelementptr inbounds float, ptr %f6.host, i64 %1477
  %1479 = load float, ptr %1478, align 4, !tbaa !50
  %1480 = insertelement <4 x float> undef, float %1479, i64 0
  %1481 = extractelement <4 x i64> %1476, i64 1
  %1482 = getelementptr inbounds float, ptr %f6.host, i64 %1481
  %1483 = load float, ptr %1482, align 4, !tbaa !50
  %1484 = insertelement <4 x float> %1480, float %1483, i64 1
  %1485 = extractelement <4 x i64> %1476, i64 2
  %1486 = getelementptr inbounds float, ptr %f6.host, i64 %1485
  %1487 = load float, ptr %1486, align 4, !tbaa !50
  %1488 = insertelement <4 x float> %1484, float %1487, i64 2
  %1489 = extractelement <4 x i64> %1476, i64 3
  %1490 = getelementptr inbounds float, ptr %f6.host, i64 %1489
  %1491 = load float, ptr %1490, align 4, !tbaa !50
  %1492 = insertelement <4 x float> %1488, float %1491, i64 3
  %1493 = fmul <4 x float> %1492, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1494 = fadd <4 x float> %1471, %1493
  %1495 = fmul <4 x float> %1494, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1496 = insertelement <4 x i32> undef, i32 %t2335.us, i64 0
  %1497 = shufflevector <4 x i32> %1496, <4 x i32> undef, <4 x i32> zeroinitializer
  %1498 = add nsw <4 x i32> %1497, <i32 0, i32 1, i32 2, i32 3>
  %1499 = add nsw <4 x i32> %t2339.us, %1498
  %1500 = sext <4 x i32> %1499 to <4 x i64>
  %1501 = extractelement <4 x i64> %1500, i64 0
  %1502 = getelementptr inbounds float, ptr %f6.host, i64 %1501
  %1503 = load float, ptr %1502, align 4, !tbaa !50
  %1504 = insertelement <4 x float> undef, float %1503, i64 0
  %1505 = extractelement <4 x i64> %1500, i64 1
  %1506 = getelementptr inbounds float, ptr %f6.host, i64 %1505
  %1507 = load float, ptr %1506, align 4, !tbaa !50
  %1508 = insertelement <4 x float> %1504, float %1507, i64 1
  %1509 = extractelement <4 x i64> %1500, i64 2
  %1510 = getelementptr inbounds float, ptr %f6.host, i64 %1509
  %1511 = load float, ptr %1510, align 4, !tbaa !50
  %1512 = insertelement <4 x float> %1508, float %1511, i64 2
  %1513 = extractelement <4 x i64> %1500, i64 3
  %1514 = getelementptr inbounds float, ptr %f6.host, i64 %1513
  %1515 = load float, ptr %1514, align 4, !tbaa !50
  %1516 = insertelement <4 x float> %1512, float %1515, i64 3
  %1517 = fmul <4 x float> %1516, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1518 = insertelement <4 x i32> undef, i32 %t2332.us, i64 0
  %1519 = shufflevector <4 x i32> %1518, <4 x i32> undef, <4 x i32> zeroinitializer
  %1520 = add <4 x i32> %1519, <i32 -1, i32 0, i32 1, i32 2>
  %1521 = add <4 x i32> %1520, %t2339.us
  %1522 = sext <4 x i32> %1521 to <4 x i64>
  %1523 = extractelement <4 x i64> %1522, i64 0
  %1524 = getelementptr inbounds float, ptr %f6.host, i64 %1523
  %1525 = load float, ptr %1524, align 4, !tbaa !50
  %1526 = insertelement <4 x float> undef, float %1525, i64 0
  %1527 = extractelement <4 x i64> %1522, i64 1
  %1528 = getelementptr inbounds float, ptr %f6.host, i64 %1527
  %1529 = load float, ptr %1528, align 4, !tbaa !50
  %1530 = insertelement <4 x float> %1526, float %1529, i64 1
  %1531 = extractelement <4 x i64> %1522, i64 2
  %1532 = getelementptr inbounds float, ptr %f6.host, i64 %1531
  %1533 = load float, ptr %1532, align 4, !tbaa !50
  %1534 = insertelement <4 x float> %1530, float %1533, i64 2
  %1535 = extractelement <4 x i64> %1522, i64 3
  %1536 = getelementptr inbounds float, ptr %f6.host, i64 %1535
  %1537 = load float, ptr %1536, align 4, !tbaa !50
  %1538 = insertelement <4 x float> %1534, float %1537, i64 3
  %1539 = fmul <4 x float> %1538, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1540 = fadd <4 x float> %1517, %1539
  %1541 = fmul <4 x float> %1540, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1542 = fadd <4 x float> %1495, %1541
  %1543 = mul nsw <4 x i32> %1439, %1392
  %1544 = insertelement <4 x i32> undef, i32 %t2327.us, i64 0
  %1545 = shufflevector <4 x i32> %1544, <4 x i32> undef, <4 x i32> zeroinitializer
  %1546 = add nsw <4 x i32> %1545, <i32 0, i32 2, i32 4, i32 6>
  %1547 = add nsw <4 x i32> %1543, %1546
  %1548 = sext <4 x i32> %1547 to <4 x i64>
  %1549 = extractelement <4 x i64> %1548, i64 0
  %1550 = getelementptr inbounds float, ptr %f5.host, i64 %1549
  %1551 = load float, ptr %1550, align 4, !tbaa !46
  %1552 = insertelement <4 x float> undef, float %1551, i64 0
  %1553 = extractelement <4 x i64> %1548, i64 1
  %1554 = getelementptr inbounds float, ptr %f5.host, i64 %1553
  %1555 = load float, ptr %1554, align 4, !tbaa !46
  %1556 = insertelement <4 x float> %1552, float %1555, i64 1
  %1557 = extractelement <4 x i64> %1548, i64 2
  %1558 = getelementptr inbounds float, ptr %f5.host, i64 %1557
  %1559 = load float, ptr %1558, align 4, !tbaa !46
  %1560 = insertelement <4 x float> %1556, float %1559, i64 2
  %1561 = extractelement <4 x i64> %1548, i64 3
  %1562 = getelementptr inbounds float, ptr %f5.host, i64 %1561
  %1563 = load float, ptr %1562, align 4, !tbaa !46
  %1564 = insertelement <4 x float> %1560, float %1563, i64 3
  %1565 = fsub <4 x float> %1564, %1542
  %1566 = fmul <4 x float> %t2322.us, %1565
  %1567 = add nsw <4 x i32> %t2333.us, %1452
  %1568 = sext <4 x i32> %1567 to <4 x i64>
  %1569 = extractelement <4 x i64> %1568, i64 0
  %1570 = getelementptr inbounds float, ptr %f6.host, i64 %1569
  %1571 = load float, ptr %1570, align 4, !tbaa !50
  %1572 = insertelement <4 x float> undef, float %1571, i64 0
  %1573 = extractelement <4 x i64> %1568, i64 1
  %1574 = getelementptr inbounds float, ptr %f6.host, i64 %1573
  %1575 = load float, ptr %1574, align 4, !tbaa !50
  %1576 = insertelement <4 x float> %1572, float %1575, i64 1
  %1577 = extractelement <4 x i64> %1568, i64 2
  %1578 = getelementptr inbounds float, ptr %f6.host, i64 %1577
  %1579 = load float, ptr %1578, align 4, !tbaa !50
  %1580 = insertelement <4 x float> %1576, float %1579, i64 2
  %1581 = extractelement <4 x i64> %1568, i64 3
  %1582 = getelementptr inbounds float, ptr %f6.host, i64 %1581
  %1583 = load float, ptr %1582, align 4, !tbaa !50
  %1584 = insertelement <4 x float> %1580, float %1583, i64 3
  %1585 = fmul <4 x float> %1584, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1586 = add <4 x i32> %t2333.us, %1473
  %1587 = add <4 x i32> %1586, <i32 -1, i32 0, i32 1, i32 2>
  %1588 = sext <4 x i32> %1587 to <4 x i64>
  %1589 = extractelement <4 x i64> %1588, i64 0
  %1590 = getelementptr inbounds float, ptr %f6.host, i64 %1589
  %1591 = load float, ptr %1590, align 4, !tbaa !50
  %1592 = insertelement <4 x float> undef, float %1591, i64 0
  %1593 = extractelement <4 x i64> %1588, i64 1
  %1594 = getelementptr inbounds float, ptr %f6.host, i64 %1593
  %1595 = load float, ptr %1594, align 4, !tbaa !50
  %1596 = insertelement <4 x float> %1592, float %1595, i64 1
  %1597 = extractelement <4 x i64> %1588, i64 2
  %1598 = getelementptr inbounds float, ptr %f6.host, i64 %1597
  %1599 = load float, ptr %1598, align 4, !tbaa !50
  %1600 = insertelement <4 x float> %1596, float %1599, i64 2
  %1601 = extractelement <4 x i64> %1588, i64 3
  %1602 = getelementptr inbounds float, ptr %f6.host, i64 %1601
  %1603 = load float, ptr %1602, align 4, !tbaa !50
  %1604 = insertelement <4 x float> %1600, float %1603, i64 3
  %1605 = fmul <4 x float> %1604, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1606 = fadd <4 x float> %1585, %1605
  %1607 = fmul <4 x float> %1606, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1608 = add nsw <4 x i32> %t2333.us, %1498
  %1609 = sext <4 x i32> %1608 to <4 x i64>
  %1610 = extractelement <4 x i64> %1609, i64 0
  %1611 = getelementptr inbounds float, ptr %f6.host, i64 %1610
  %1612 = load float, ptr %1611, align 4, !tbaa !50
  %1613 = insertelement <4 x float> undef, float %1612, i64 0
  %1614 = extractelement <4 x i64> %1609, i64 1
  %1615 = getelementptr inbounds float, ptr %f6.host, i64 %1614
  %1616 = load float, ptr %1615, align 4, !tbaa !50
  %1617 = insertelement <4 x float> %1613, float %1616, i64 1
  %1618 = extractelement <4 x i64> %1609, i64 2
  %1619 = getelementptr inbounds float, ptr %f6.host, i64 %1618
  %1620 = load float, ptr %1619, align 4, !tbaa !50
  %1621 = insertelement <4 x float> %1617, float %1620, i64 2
  %1622 = extractelement <4 x i64> %1609, i64 3
  %1623 = getelementptr inbounds float, ptr %f6.host, i64 %1622
  %1624 = load float, ptr %1623, align 4, !tbaa !50
  %1625 = insertelement <4 x float> %1621, float %1624, i64 3
  %1626 = fmul <4 x float> %1625, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1627 = add <4 x i32> %t2333.us, %1519
  %1628 = add <4 x i32> %1627, <i32 -1, i32 0, i32 1, i32 2>
  %1629 = sext <4 x i32> %1628 to <4 x i64>
  %1630 = extractelement <4 x i64> %1629, i64 0
  %1631 = getelementptr inbounds float, ptr %f6.host, i64 %1630
  %1632 = load float, ptr %1631, align 4, !tbaa !50
  %1633 = insertelement <4 x float> undef, float %1632, i64 0
  %1634 = extractelement <4 x i64> %1629, i64 1
  %1635 = getelementptr inbounds float, ptr %f6.host, i64 %1634
  %1636 = load float, ptr %1635, align 4, !tbaa !50
  %1637 = insertelement <4 x float> %1633, float %1636, i64 1
  %1638 = extractelement <4 x i64> %1629, i64 2
  %1639 = getelementptr inbounds float, ptr %f6.host, i64 %1638
  %1640 = load float, ptr %1639, align 4, !tbaa !50
  %1641 = insertelement <4 x float> %1637, float %1640, i64 2
  %1642 = extractelement <4 x i64> %1629, i64 3
  %1643 = getelementptr inbounds float, ptr %f6.host, i64 %1642
  %1644 = load float, ptr %1643, align 4, !tbaa !50
  %1645 = insertelement <4 x float> %1641, float %1644, i64 3
  %1646 = fmul <4 x float> %1645, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1647 = fadd <4 x float> %1626, %1646
  %1648 = fmul <4 x float> %1647, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1649 = fadd <4 x float> %1607, %1648
  %1650 = mul nsw <4 x i32> %t2329.us, %1392
  %1651 = add nsw <4 x i32> %1650, %1546
  %1652 = sext <4 x i32> %1651 to <4 x i64>
  %1653 = extractelement <4 x i64> %1652, i64 0
  %1654 = getelementptr inbounds float, ptr %f5.host, i64 %1653
  %1655 = load float, ptr %1654, align 4, !tbaa !46
  %1656 = insertelement <4 x float> undef, float %1655, i64 0
  %1657 = extractelement <4 x i64> %1652, i64 1
  %1658 = getelementptr inbounds float, ptr %f5.host, i64 %1657
  %1659 = load float, ptr %1658, align 4, !tbaa !46
  %1660 = insertelement <4 x float> %1656, float %1659, i64 1
  %1661 = extractelement <4 x i64> %1652, i64 2
  %1662 = getelementptr inbounds float, ptr %f5.host, i64 %1661
  %1663 = load float, ptr %1662, align 4, !tbaa !46
  %1664 = insertelement <4 x float> %1660, float %1663, i64 2
  %1665 = extractelement <4 x i64> %1652, i64 3
  %1666 = getelementptr inbounds float, ptr %f5.host, i64 %1665
  %1667 = load float, ptr %1666, align 4, !tbaa !46
  %1668 = insertelement <4 x float> %1664, float %1667, i64 3
  %1669 = fsub <4 x float> %1668, %1649
  %1670 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2322.us
  %1671 = fmul <4 x float> %1670, %1669
  %1672 = fadd <4 x float> %1566, %1671
  %narrow152.us = sub nsw i32 %1426, %f128.v3.min_realized
  %1673 = sext i32 %narrow152.us to i64
  %1674 = add nsw i64 %1673, %1413
  %1675 = getelementptr inbounds float, ptr %155, i64 %1674
  %1676 = load <4 x float>, ptr %1675, align 4, !tbaa !66
  %1677 = fmul <4 x float> %1676, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1678 = sext i32 %t2318.us to i64
  %1679 = sub nsw i64 %1678, %1393
  %1680 = add nsw i64 %1414, %1679
  %1681 = getelementptr inbounds float, ptr %155, i64 %1680
  %1682 = load <4 x float>, ptr %1681, align 4, !tbaa !66
  %1683 = fmul <4 x float> %1682, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1684 = fadd <4 x float> %1677, %1683
  %1685 = fmul <4 x float> %1684, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1686 = add nsw i64 %1673, %1415
  %1687 = getelementptr inbounds float, ptr %155, i64 %1686
  %1688 = load <4 x float>, ptr %1687, align 4, !tbaa !66
  %1689 = fmul <4 x float> %1688, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1690 = add nsw i64 %1416, %1679
  %1691 = getelementptr inbounds float, ptr %155, i64 %1690
  %1692 = load <4 x float>, ptr %1691, align 4, !tbaa !66
  %1693 = fmul <4 x float> %1692, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1694 = fadd <4 x float> %1689, %1693
  %1695 = fmul <4 x float> %1694, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1696 = fadd <4 x float> %1685, %1695
  %1697 = fadd <4 x float> %1672, %1696
  %1698 = insertelement <4 x i32> undef, i32 %t2353.us, i64 0
  %1699 = shufflevector <4 x i32> %1698, <4 x i32> undef, <4 x i32> zeroinitializer
  %1700 = add nsw <4 x i32> %1699, <i32 0, i32 1, i32 2, i32 3>
  %1701 = add nsw <4 x i32> %t2354.us, %1700
  %1702 = sext <4 x i32> %1701 to <4 x i64>
  %1703 = extractelement <4 x i64> %1702, i64 0
  %1704 = getelementptr inbounds float, ptr %f6.host, i64 %1703
  %1705 = load float, ptr %1704, align 4, !tbaa !50
  %1706 = insertelement <4 x float> undef, float %1705, i64 0
  %1707 = extractelement <4 x i64> %1702, i64 1
  %1708 = getelementptr inbounds float, ptr %f6.host, i64 %1707
  %1709 = load float, ptr %1708, align 4, !tbaa !50
  %1710 = insertelement <4 x float> %1706, float %1709, i64 1
  %1711 = extractelement <4 x i64> %1702, i64 2
  %1712 = getelementptr inbounds float, ptr %f6.host, i64 %1711
  %1713 = load float, ptr %1712, align 4, !tbaa !50
  %1714 = insertelement <4 x float> %1710, float %1713, i64 2
  %1715 = extractelement <4 x i64> %1702, i64 3
  %1716 = getelementptr inbounds float, ptr %f6.host, i64 %1715
  %1717 = load float, ptr %1716, align 4, !tbaa !50
  %1718 = insertelement <4 x float> %1714, float %1717, i64 3
  %1719 = fmul <4 x float> %1718, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1720 = insertelement <4 x i32> undef, i32 %t2352.us, i64 0
  %1721 = shufflevector <4 x i32> %1720, <4 x i32> undef, <4 x i32> zeroinitializer
  %1722 = add nsw <4 x i32> %1721, <i32 0, i32 1, i32 2, i32 3>
  %1723 = add <4 x i32> %t2354.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1724 = add <4 x i32> %1723, %1722
  %1725 = sext <4 x i32> %1724 to <4 x i64>
  %1726 = extractelement <4 x i64> %1725, i64 0
  %1727 = getelementptr inbounds float, ptr %f6.host, i64 %1726
  %1728 = load float, ptr %1727, align 4, !tbaa !50
  %1729 = insertelement <4 x float> undef, float %1728, i64 0
  %1730 = extractelement <4 x i64> %1725, i64 1
  %1731 = getelementptr inbounds float, ptr %f6.host, i64 %1730
  %1732 = load float, ptr %1731, align 4, !tbaa !50
  %1733 = insertelement <4 x float> %1729, float %1732, i64 1
  %1734 = extractelement <4 x i64> %1725, i64 2
  %1735 = getelementptr inbounds float, ptr %f6.host, i64 %1734
  %1736 = load float, ptr %1735, align 4, !tbaa !50
  %1737 = insertelement <4 x float> %1733, float %1736, i64 2
  %1738 = extractelement <4 x i64> %1725, i64 3
  %1739 = getelementptr inbounds float, ptr %f6.host, i64 %1738
  %1740 = load float, ptr %1739, align 4, !tbaa !50
  %1741 = insertelement <4 x float> %1737, float %1740, i64 3
  %1742 = fmul <4 x float> %1741, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1743 = fadd <4 x float> %1719, %1742
  %1744 = fmul <4 x float> %1743, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1745 = insertelement <4 x i32> undef, i32 %t2351.us, i64 0
  %1746 = shufflevector <4 x i32> %1745, <4 x i32> undef, <4 x i32> zeroinitializer
  %1747 = add nsw <4 x i32> %1746, <i32 0, i32 1, i32 2, i32 3>
  %1748 = add nsw <4 x i32> %t2354.us, %1747
  %1749 = sext <4 x i32> %1748 to <4 x i64>
  %1750 = extractelement <4 x i64> %1749, i64 0
  %1751 = getelementptr inbounds float, ptr %f6.host, i64 %1750
  %1752 = load float, ptr %1751, align 4, !tbaa !50
  %1753 = insertelement <4 x float> undef, float %1752, i64 0
  %1754 = extractelement <4 x i64> %1749, i64 1
  %1755 = getelementptr inbounds float, ptr %f6.host, i64 %1754
  %1756 = load float, ptr %1755, align 4, !tbaa !50
  %1757 = insertelement <4 x float> %1753, float %1756, i64 1
  %1758 = extractelement <4 x i64> %1749, i64 2
  %1759 = getelementptr inbounds float, ptr %f6.host, i64 %1758
  %1760 = load float, ptr %1759, align 4, !tbaa !50
  %1761 = insertelement <4 x float> %1757, float %1760, i64 2
  %1762 = extractelement <4 x i64> %1749, i64 3
  %1763 = getelementptr inbounds float, ptr %f6.host, i64 %1762
  %1764 = load float, ptr %1763, align 4, !tbaa !50
  %1765 = insertelement <4 x float> %1761, float %1764, i64 3
  %1766 = fmul <4 x float> %1765, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1767 = insertelement <4 x i32> undef, i32 %t2348.us, i64 0
  %1768 = shufflevector <4 x i32> %1767, <4 x i32> undef, <4 x i32> zeroinitializer
  %1769 = add nsw <4 x i32> %1768, <i32 0, i32 1, i32 2, i32 3>
  %1770 = add <4 x i32> %1723, %1769
  %1771 = sext <4 x i32> %1770 to <4 x i64>
  %1772 = extractelement <4 x i64> %1771, i64 0
  %1773 = getelementptr inbounds float, ptr %f6.host, i64 %1772
  %1774 = load float, ptr %1773, align 4, !tbaa !50
  %1775 = insertelement <4 x float> undef, float %1774, i64 0
  %1776 = extractelement <4 x i64> %1771, i64 1
  %1777 = getelementptr inbounds float, ptr %f6.host, i64 %1776
  %1778 = load float, ptr %1777, align 4, !tbaa !50
  %1779 = insertelement <4 x float> %1775, float %1778, i64 1
  %1780 = extractelement <4 x i64> %1771, i64 2
  %1781 = getelementptr inbounds float, ptr %f6.host, i64 %1780
  %1782 = load float, ptr %1781, align 4, !tbaa !50
  %1783 = insertelement <4 x float> %1779, float %1782, i64 2
  %1784 = extractelement <4 x i64> %1771, i64 3
  %1785 = getelementptr inbounds float, ptr %f6.host, i64 %1784
  %1786 = load float, ptr %1785, align 4, !tbaa !50
  %1787 = insertelement <4 x float> %1783, float %1786, i64 3
  %1788 = fmul <4 x float> %1787, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1789 = fadd <4 x float> %1766, %1788
  %1790 = fmul <4 x float> %1789, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1791 = fadd <4 x float> %1744, %1790
  %1792 = mul nsw <4 x i32> %1449, %1392
  %1793 = add nsw i32 %t2327.us, 1
  %1794 = insertelement <4 x i32> undef, i32 %1793, i64 0
  %1795 = shufflevector <4 x i32> %1794, <4 x i32> undef, <4 x i32> zeroinitializer
  %1796 = add nsw <4 x i32> %1795, <i32 0, i32 2, i32 4, i32 6>
  %1797 = add nsw <4 x i32> %1792, %1796
  %1798 = sext <4 x i32> %1797 to <4 x i64>
  %1799 = extractelement <4 x i64> %1798, i64 0
  %1800 = getelementptr inbounds float, ptr %f5.host, i64 %1799
  %1801 = load float, ptr %1800, align 4, !tbaa !46
  %1802 = insertelement <4 x float> undef, float %1801, i64 0
  %1803 = extractelement <4 x i64> %1798, i64 1
  %1804 = getelementptr inbounds float, ptr %f5.host, i64 %1803
  %1805 = load float, ptr %1804, align 4, !tbaa !46
  %1806 = insertelement <4 x float> %1802, float %1805, i64 1
  %1807 = extractelement <4 x i64> %1798, i64 2
  %1808 = getelementptr inbounds float, ptr %f5.host, i64 %1807
  %1809 = load float, ptr %1808, align 4, !tbaa !46
  %1810 = insertelement <4 x float> %1806, float %1809, i64 2
  %1811 = extractelement <4 x i64> %1798, i64 3
  %1812 = getelementptr inbounds float, ptr %f5.host, i64 %1811
  %1813 = load float, ptr %1812, align 4, !tbaa !46
  %1814 = insertelement <4 x float> %1810, float %1813, i64 3
  %1815 = fsub <4 x float> %1814, %1791
  %1816 = fmul <4 x float> %t2343.us, %1815
  %1817 = add nsw <4 x i32> %t2349.us, %1700
  %1818 = sext <4 x i32> %1817 to <4 x i64>
  %1819 = extractelement <4 x i64> %1818, i64 0
  %1820 = getelementptr inbounds float, ptr %f6.host, i64 %1819
  %1821 = load float, ptr %1820, align 4, !tbaa !50
  %1822 = insertelement <4 x float> undef, float %1821, i64 0
  %1823 = extractelement <4 x i64> %1818, i64 1
  %1824 = getelementptr inbounds float, ptr %f6.host, i64 %1823
  %1825 = load float, ptr %1824, align 4, !tbaa !50
  %1826 = insertelement <4 x float> %1822, float %1825, i64 1
  %1827 = extractelement <4 x i64> %1818, i64 2
  %1828 = getelementptr inbounds float, ptr %f6.host, i64 %1827
  %1829 = load float, ptr %1828, align 4, !tbaa !50
  %1830 = insertelement <4 x float> %1826, float %1829, i64 2
  %1831 = extractelement <4 x i64> %1818, i64 3
  %1832 = getelementptr inbounds float, ptr %f6.host, i64 %1831
  %1833 = load float, ptr %1832, align 4, !tbaa !50
  %1834 = insertelement <4 x float> %1830, float %1833, i64 3
  %1835 = fmul <4 x float> %1834, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1836 = add <4 x i32> %t2349.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1837 = add <4 x i32> %1836, %1722
  %1838 = sext <4 x i32> %1837 to <4 x i64>
  %1839 = extractelement <4 x i64> %1838, i64 0
  %1840 = getelementptr inbounds float, ptr %f6.host, i64 %1839
  %1841 = load float, ptr %1840, align 4, !tbaa !50
  %1842 = insertelement <4 x float> undef, float %1841, i64 0
  %1843 = extractelement <4 x i64> %1838, i64 1
  %1844 = getelementptr inbounds float, ptr %f6.host, i64 %1843
  %1845 = load float, ptr %1844, align 4, !tbaa !50
  %1846 = insertelement <4 x float> %1842, float %1845, i64 1
  %1847 = extractelement <4 x i64> %1838, i64 2
  %1848 = getelementptr inbounds float, ptr %f6.host, i64 %1847
  %1849 = load float, ptr %1848, align 4, !tbaa !50
  %1850 = insertelement <4 x float> %1846, float %1849, i64 2
  %1851 = extractelement <4 x i64> %1838, i64 3
  %1852 = getelementptr inbounds float, ptr %f6.host, i64 %1851
  %1853 = load float, ptr %1852, align 4, !tbaa !50
  %1854 = insertelement <4 x float> %1850, float %1853, i64 3
  %1855 = fmul <4 x float> %1854, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1856 = fadd <4 x float> %1835, %1855
  %1857 = fmul <4 x float> %1856, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1858 = add nsw <4 x i32> %t2349.us, %1747
  %1859 = sext <4 x i32> %1858 to <4 x i64>
  %1860 = extractelement <4 x i64> %1859, i64 0
  %1861 = getelementptr inbounds float, ptr %f6.host, i64 %1860
  %1862 = load float, ptr %1861, align 4, !tbaa !50
  %1863 = insertelement <4 x float> undef, float %1862, i64 0
  %1864 = extractelement <4 x i64> %1859, i64 1
  %1865 = getelementptr inbounds float, ptr %f6.host, i64 %1864
  %1866 = load float, ptr %1865, align 4, !tbaa !50
  %1867 = insertelement <4 x float> %1863, float %1866, i64 1
  %1868 = extractelement <4 x i64> %1859, i64 2
  %1869 = getelementptr inbounds float, ptr %f6.host, i64 %1868
  %1870 = load float, ptr %1869, align 4, !tbaa !50
  %1871 = insertelement <4 x float> %1867, float %1870, i64 2
  %1872 = extractelement <4 x i64> %1859, i64 3
  %1873 = getelementptr inbounds float, ptr %f6.host, i64 %1872
  %1874 = load float, ptr %1873, align 4, !tbaa !50
  %1875 = insertelement <4 x float> %1871, float %1874, i64 3
  %1876 = fmul <4 x float> %1875, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1877 = add <4 x i32> %1836, %1769
  %1878 = sext <4 x i32> %1877 to <4 x i64>
  %1879 = extractelement <4 x i64> %1878, i64 0
  %1880 = getelementptr inbounds float, ptr %f6.host, i64 %1879
  %1881 = load float, ptr %1880, align 4, !tbaa !50
  %1882 = insertelement <4 x float> undef, float %1881, i64 0
  %1883 = extractelement <4 x i64> %1878, i64 1
  %1884 = getelementptr inbounds float, ptr %f6.host, i64 %1883
  %1885 = load float, ptr %1884, align 4, !tbaa !50
  %1886 = insertelement <4 x float> %1882, float %1885, i64 1
  %1887 = extractelement <4 x i64> %1878, i64 2
  %1888 = getelementptr inbounds float, ptr %f6.host, i64 %1887
  %1889 = load float, ptr %1888, align 4, !tbaa !50
  %1890 = insertelement <4 x float> %1886, float %1889, i64 2
  %1891 = extractelement <4 x i64> %1878, i64 3
  %1892 = getelementptr inbounds float, ptr %f6.host, i64 %1891
  %1893 = load float, ptr %1892, align 4, !tbaa !50
  %1894 = insertelement <4 x float> %1890, float %1893, i64 3
  %1895 = fmul <4 x float> %1894, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1896 = fadd <4 x float> %1876, %1895
  %1897 = fmul <4 x float> %1896, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1898 = fadd <4 x float> %1857, %1897
  %1899 = mul nsw <4 x i32> %t2346.us, %1392
  %1900 = add nsw <4 x i32> %1899, %1796
  %1901 = sext <4 x i32> %1900 to <4 x i64>
  %1902 = extractelement <4 x i64> %1901, i64 0
  %1903 = getelementptr inbounds float, ptr %f5.host, i64 %1902
  %1904 = load float, ptr %1903, align 4, !tbaa !46
  %1905 = insertelement <4 x float> undef, float %1904, i64 0
  %1906 = extractelement <4 x i64> %1901, i64 1
  %1907 = getelementptr inbounds float, ptr %f5.host, i64 %1906
  %1908 = load float, ptr %1907, align 4, !tbaa !46
  %1909 = insertelement <4 x float> %1905, float %1908, i64 1
  %1910 = extractelement <4 x i64> %1901, i64 2
  %1911 = getelementptr inbounds float, ptr %f5.host, i64 %1910
  %1912 = load float, ptr %1911, align 4, !tbaa !46
  %1913 = insertelement <4 x float> %1909, float %1912, i64 2
  %1914 = extractelement <4 x i64> %1901, i64 3
  %1915 = getelementptr inbounds float, ptr %f5.host, i64 %1914
  %1916 = load float, ptr %1915, align 4, !tbaa !46
  %1917 = insertelement <4 x float> %1913, float %1916, i64 3
  %1918 = fsub <4 x float> %1917, %1898
  %1919 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2343.us
  %1920 = fmul <4 x float> %1919, %1918
  %1921 = fadd <4 x float> %1816, %1920
  %narrow153.us = sub nsw i32 %1443, %f128.v3.min_realized
  %1922 = sext i32 %narrow153.us to i64
  %1923 = add nsw i64 %1922, %1413
  %1924 = getelementptr inbounds float, ptr %155, i64 %1923
  %1925 = load <4 x float>, ptr %1924, align 4, !tbaa !66
  %1926 = fmul <4 x float> %1925, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1927 = sext i32 %t2340.us to i64
  %1928 = sub nsw i64 %1927, %1393
  %1929 = add nsw i64 %1414, %1928
  %1930 = getelementptr inbounds float, ptr %155, i64 %1929
  %1931 = load <4 x float>, ptr %1930, align 4, !tbaa !66
  %1932 = fmul <4 x float> %1931, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1933 = fadd <4 x float> %1926, %1932
  %1934 = fmul <4 x float> %1933, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1935 = add nsw i64 %1922, %1415
  %1936 = getelementptr inbounds float, ptr %155, i64 %1935
  %1937 = load <4 x float>, ptr %1936, align 4, !tbaa !66
  %1938 = fmul <4 x float> %1937, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1939 = add nsw i64 %1416, %1928
  %1940 = getelementptr inbounds float, ptr %155, i64 %1939
  %1941 = load <4 x float>, ptr %1940, align 4, !tbaa !66
  %1942 = fmul <4 x float> %1941, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1943 = fadd <4 x float> %1938, %1942
  %1944 = fmul <4 x float> %1943, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1945 = fadd <4 x float> %1934, %1944
  %1946 = fadd <4 x float> %1921, %1945
  %1947 = shufflevector <4 x float> %1697, <4 x float> %1946, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %1948 = sext i32 %f127.s0.v3.v323.base.us to i64
  %1949 = add i64 %1419, %1948
  %1950 = getelementptr inbounds float, ptr %194, i64 %1949
  store <8 x float> %1947, ptr %1950, align 4, !tbaa !68
  %lsr.iv.next413.us = add i32 %lsr.iv412.us, -1
  %lsr.iv.next415.us = add i32 %lsr.iv414.us, 8
  %.not154.us = icmp eq i32 %lsr.iv.next413.us, 0
  br i1 %.not154.us, label %"end for f127.s0.v3.v3.loopexit.us", label %"for f127.s0.v3.v3.us"

"end for f127.s0.v3.v3.loopexit.us":              ; preds = %"for f127.s0.v3.v3.us"
  %indvars.iv.next316 = add nsw i64 %indvars.iv315, 1
  %1951 = icmp eq i64 %indvars.iv315, %sext317
  br i1 %1951, label %"for f126.s0.v4.preheader", label %"for f127.s0.v4.us"

"for f126.s0.v4.preheader":                       ; preds = %"end for f127.s0.v3.v3.loopexit.us", %"for f127.s0.v4.preheader"
  %1952 = add nsw i32 %168, 9
  %1953 = ashr i32 %1952, 3
  %1954 = icmp sgt i32 %168, -2
  %1955 = add nsw i32 %f72.v3.extent_realized.s, 1
  %1956 = xor i32 %f127.v4.min_realized, -1
  %1957 = xor i32 %f5.v4.min_realized, -1
  %1958 = add nsw i32 %f4.v3.extent_realized.s, 1
  %1959 = insertelement <4 x i32> undef, i32 %1958, i64 0
  %1960 = shufflevector <4 x i32> %1959, <4 x i32> undef, <4 x i32> zeroinitializer
  %1961 = sext i32 %f126.v3.extent_realized.s to i64
  %1962 = add nsw i64 %1961, 1
  %1963 = sext i32 %159 to i64
  %1964 = sext i32 %f126.v3.min_realized to i64
  br i1 %1954, label %"for f126.s0.v4.us.preheader", label %"consume f126", !prof !5

"for f126.s0.v4.us.preheader":                    ; preds = %"for f126.s0.v4.preheader"
  %1965 = add nsw i32 %157, 1
  %narrow365 = add nsw i32 %157, -1
  %1966 = sext i32 %narrow365 to i64
  %sext321 = sext i32 %1965 to i64
  br label %"for f126.s0.v4.us"

"for f126.s0.v4.us":                              ; preds = %"for f126.s0.v4.us.preheader", %"end for f126.s0.v3.v3.loopexit.us"
  %indvars.iv319 = phi i64 [ %1966, %"for f126.s0.v4.us.preheader" ], [ %indvars.iv.next320, %"end for f126.s0.v3.v3.loopexit.us" ]
  %1967 = trunc i64 %indvars.iv319 to i32
  %1968 = shl i32 %1967, 1
  %1969 = and i32 %1968, 2
  %1970 = ashr i32 %1967, 1
  %t2355.us = add nsw i32 %1969, %1970
  %1971 = trunc i64 %indvars.iv319 to i32
  %1972 = sub i32 %1971, %f72.v4.min_realized
  %1973 = mul i32 %1972, %1955
  %1974 = sub i32 %1973, %f72.v3.min_realized
  %1975 = add nsw i32 %t2355.us, %1956
  %t2362.us = mul nsw i32 %1975, %179
  %1976 = sub nsw i32 %1970, %f127.v4.min_realized
  %t2364.us = mul nsw i32 %1976, %179
  %1977 = add i32 %t2355.us, %1957
  %1978 = mul nsw i32 %1977, %f5.stride.1
  %1979 = sub nsw i32 %1970, %f5.v4.min_realized
  %1980 = mul nsw i32 %1979, %f5.stride.1
  %1981 = sext i32 %t2364.us to i64
  %1982 = add nsw i64 %1981, -1
  %1983 = sext i32 %t2362.us to i64
  %1984 = add nsw i64 %1983, -1
  %1985 = sub nsw i64 %indvars.iv319, %1963
  %1986 = mul nsw i64 %1985, %1962
  %1987 = sub i64 %1986, %1964
  %1988 = trunc i64 %indvars.iv319 to i32
  %1989 = sub i32 %1988, %f4.v4.min_realized
  %1990 = mul i32 %1989, %f4.stride.1
  br label %"for f126.s0.v3.v3.us"

"for f126.s0.v3.v3.us":                           ; preds = %"for f126.s0.v4.us", %"for f126.s0.v3.v3.us"
  %lsr.iv410.us = phi i32 [ %lsr.iv.next411.us, %"for f126.s0.v3.v3.us" ], [ -1, %"for f126.s0.v4.us" ]
  %lsr.iv408.us = phi i32 [ %lsr.iv.next409.us, %"for f126.s0.v3.v3.us" ], [ %1953, %"for f126.s0.v4.us" ]
  %1991 = add i32 %lsr.iv410.us, %162
  %f126.s0.v3.v303.base.us = tail call i32 @llvm.smin.i32(i32 %b806, i32 %1991)
  %1992 = shl i32 %f126.s0.v3.v303.base.us, 1
  %1993 = and i32 %1992, 2
  %1994 = ashr i32 %f126.s0.v3.v303.base.us, 1
  %t2356.us = add nsw i32 %1993, %1994
  %t2357.us = add i32 %1974, %f126.s0.v3.v303.base.us
  %1995 = sext i32 %t2357.us to i64
  %1996 = getelementptr inbounds float, ptr %f72.host, i64 %1995
  %1997 = load <4 x float>, ptr %1996, align 4, !tbaa !48
  %1998 = add nsw i64 %1995, 4
  %1999 = getelementptr inbounds float, ptr %f72.host, i64 %1998
  %2000 = load <4 x float>, ptr %1999, align 4, !tbaa !48
  %2001 = shufflevector <4 x float> %1997, <4 x float> %2000, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2358.us = fmul <4 x float> %233, %2001
  %a850.us = fptosi <4 x float> %t2358.us to <4 x i32>
  %a853.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a850.us)
  %2002 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a853.us, <4 x i32> zeroinitializer)
  %2003 = sitofp <4 x i32> %2002 to <4 x float>
  %t2360.us = fsub <4 x float> %t2358.us, %2003
  %2004 = sub nsw i32 %f126.s0.v3.v303.base.us, %f4.v3.min_realized
  %t2365.us = add nsw i32 %2004, %1990
  %t2367.us = sub nsw <4 x i32> %2002, %242
  %2005 = sub nsw i32 %t2356.us, %f5.v3.min_realized
  %t2370.us = add nsw i32 %2005, %1978
  %t2371.us = mul nsw <4 x i32> %t2367.us, %1392
  %2006 = sub nsw i32 %1994, %f5.v3.min_realized
  %t2373.us = add nsw i32 %2006, %1978
  %t2375.us = add nsw i32 %2005, %1980
  %t2376.us = add nsw i32 %2006, %1980
  %2007 = add nsw <4 x i32> %t2367.us, <i32 1, i32 1, i32 1, i32 1>
  %t2377.us = mul nsw <4 x i32> %2007, %1392
  %2008 = add nsw i32 %f126.s0.v3.v303.base.us, 1
  %2009 = shl i32 %2008, 1
  %2010 = and i32 %2009, 2
  %2011 = ashr i32 %2008, 1
  %t2378.us = add nsw i32 %2010, %2011
  %2012 = shufflevector <4 x float> %1997, <4 x float> %2000, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2379.us = fmul <4 x float> %233, %2012
  %a854.us = fptosi <4 x float> %t2379.us to <4 x i32>
  %a857.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a854.us)
  %2013 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a857.us, <4 x i32> zeroinitializer)
  %2014 = sitofp <4 x i32> %2013 to <4 x float>
  %t2381.us = fsub <4 x float> %t2379.us, %2014
  %t2384.us = sub nsw <4 x i32> %2013, %242
  %2015 = sub nsw i32 %t2378.us, %f5.v3.min_realized
  %t2386.us = add nsw i32 %2015, %1978
  %t2387.us = mul nsw <4 x i32> %t2384.us, %1392
  %2016 = sub nsw i32 %2011, %f5.v3.min_realized
  %t2389.us = add nsw i32 %2016, %1978
  %t2390.us = add nsw i32 %2015, %1980
  %t2391.us = add nsw i32 %2016, %1980
  %2017 = add nsw <4 x i32> %t2384.us, <i32 1, i32 1, i32 1, i32 1>
  %t2392.us = mul nsw <4 x i32> %2017, %1392
  %2018 = insertelement <4 x i32> undef, i32 %t2376.us, i64 0
  %2019 = shufflevector <4 x i32> %2018, <4 x i32> undef, <4 x i32> zeroinitializer
  %2020 = add nsw <4 x i32> %2019, <i32 0, i32 1, i32 2, i32 3>
  %2021 = add nsw <4 x i32> %t2377.us, %2020
  %2022 = sext <4 x i32> %2021 to <4 x i64>
  %2023 = extractelement <4 x i64> %2022, i64 0
  %2024 = getelementptr inbounds float, ptr %f5.host, i64 %2023
  %2025 = load float, ptr %2024, align 4, !tbaa !46
  %2026 = insertelement <4 x float> undef, float %2025, i64 0
  %2027 = extractelement <4 x i64> %2022, i64 1
  %2028 = getelementptr inbounds float, ptr %f5.host, i64 %2027
  %2029 = load float, ptr %2028, align 4, !tbaa !46
  %2030 = insertelement <4 x float> %2026, float %2029, i64 1
  %2031 = extractelement <4 x i64> %2022, i64 2
  %2032 = getelementptr inbounds float, ptr %f5.host, i64 %2031
  %2033 = load float, ptr %2032, align 4, !tbaa !46
  %2034 = insertelement <4 x float> %2030, float %2033, i64 2
  %2035 = extractelement <4 x i64> %2022, i64 3
  %2036 = getelementptr inbounds float, ptr %f5.host, i64 %2035
  %2037 = load float, ptr %2036, align 4, !tbaa !46
  %2038 = insertelement <4 x float> %2034, float %2037, i64 3
  %2039 = fmul <4 x float> %2038, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2040 = insertelement <4 x i32> undef, i32 %t2375.us, i64 0
  %2041 = shufflevector <4 x i32> %2040, <4 x i32> undef, <4 x i32> zeroinitializer
  %2042 = add <4 x i32> %2041, <i32 -1, i32 0, i32 1, i32 2>
  %2043 = add <4 x i32> %2042, %t2377.us
  %2044 = sext <4 x i32> %2043 to <4 x i64>
  %2045 = extractelement <4 x i64> %2044, i64 0
  %2046 = getelementptr inbounds float, ptr %f5.host, i64 %2045
  %2047 = load float, ptr %2046, align 4, !tbaa !46
  %2048 = insertelement <4 x float> undef, float %2047, i64 0
  %2049 = extractelement <4 x i64> %2044, i64 1
  %2050 = getelementptr inbounds float, ptr %f5.host, i64 %2049
  %2051 = load float, ptr %2050, align 4, !tbaa !46
  %2052 = insertelement <4 x float> %2048, float %2051, i64 1
  %2053 = extractelement <4 x i64> %2044, i64 2
  %2054 = getelementptr inbounds float, ptr %f5.host, i64 %2053
  %2055 = load float, ptr %2054, align 4, !tbaa !46
  %2056 = insertelement <4 x float> %2052, float %2055, i64 2
  %2057 = extractelement <4 x i64> %2044, i64 3
  %2058 = getelementptr inbounds float, ptr %f5.host, i64 %2057
  %2059 = load float, ptr %2058, align 4, !tbaa !46
  %2060 = insertelement <4 x float> %2056, float %2059, i64 3
  %2061 = fmul <4 x float> %2060, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2062 = fadd <4 x float> %2039, %2061
  %2063 = fmul <4 x float> %2062, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2064 = insertelement <4 x i32> undef, i32 %t2373.us, i64 0
  %2065 = shufflevector <4 x i32> %2064, <4 x i32> undef, <4 x i32> zeroinitializer
  %2066 = add nsw <4 x i32> %2065, <i32 0, i32 1, i32 2, i32 3>
  %2067 = add nsw <4 x i32> %t2377.us, %2066
  %2068 = sext <4 x i32> %2067 to <4 x i64>
  %2069 = extractelement <4 x i64> %2068, i64 0
  %2070 = getelementptr inbounds float, ptr %f5.host, i64 %2069
  %2071 = load float, ptr %2070, align 4, !tbaa !46
  %2072 = insertelement <4 x float> undef, float %2071, i64 0
  %2073 = extractelement <4 x i64> %2068, i64 1
  %2074 = getelementptr inbounds float, ptr %f5.host, i64 %2073
  %2075 = load float, ptr %2074, align 4, !tbaa !46
  %2076 = insertelement <4 x float> %2072, float %2075, i64 1
  %2077 = extractelement <4 x i64> %2068, i64 2
  %2078 = getelementptr inbounds float, ptr %f5.host, i64 %2077
  %2079 = load float, ptr %2078, align 4, !tbaa !46
  %2080 = insertelement <4 x float> %2076, float %2079, i64 2
  %2081 = extractelement <4 x i64> %2068, i64 3
  %2082 = getelementptr inbounds float, ptr %f5.host, i64 %2081
  %2083 = load float, ptr %2082, align 4, !tbaa !46
  %2084 = insertelement <4 x float> %2080, float %2083, i64 3
  %2085 = fmul <4 x float> %2084, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2086 = insertelement <4 x i32> undef, i32 %t2370.us, i64 0
  %2087 = shufflevector <4 x i32> %2086, <4 x i32> undef, <4 x i32> zeroinitializer
  %2088 = add <4 x i32> %2087, <i32 -1, i32 0, i32 1, i32 2>
  %2089 = add <4 x i32> %2088, %t2377.us
  %2090 = sext <4 x i32> %2089 to <4 x i64>
  %2091 = extractelement <4 x i64> %2090, i64 0
  %2092 = getelementptr inbounds float, ptr %f5.host, i64 %2091
  %2093 = load float, ptr %2092, align 4, !tbaa !46
  %2094 = insertelement <4 x float> undef, float %2093, i64 0
  %2095 = extractelement <4 x i64> %2090, i64 1
  %2096 = getelementptr inbounds float, ptr %f5.host, i64 %2095
  %2097 = load float, ptr %2096, align 4, !tbaa !46
  %2098 = insertelement <4 x float> %2094, float %2097, i64 1
  %2099 = extractelement <4 x i64> %2090, i64 2
  %2100 = getelementptr inbounds float, ptr %f5.host, i64 %2099
  %2101 = load float, ptr %2100, align 4, !tbaa !46
  %2102 = insertelement <4 x float> %2098, float %2101, i64 2
  %2103 = extractelement <4 x i64> %2090, i64 3
  %2104 = getelementptr inbounds float, ptr %f5.host, i64 %2103
  %2105 = load float, ptr %2104, align 4, !tbaa !46
  %2106 = insertelement <4 x float> %2102, float %2105, i64 3
  %2107 = fmul <4 x float> %2106, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2108 = fadd <4 x float> %2085, %2107
  %2109 = fmul <4 x float> %2108, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2110 = fadd <4 x float> %2063, %2109
  %2111 = mul nsw <4 x i32> %2007, %1960
  %2112 = insertelement <4 x i32> undef, i32 %t2365.us, i64 0
  %2113 = shufflevector <4 x i32> %2112, <4 x i32> undef, <4 x i32> zeroinitializer
  %2114 = add nsw <4 x i32> %2113, <i32 0, i32 2, i32 4, i32 6>
  %2115 = add nsw <4 x i32> %2111, %2114
  %2116 = sext <4 x i32> %2115 to <4 x i64>
  %2117 = extractelement <4 x i64> %2116, i64 0
  %2118 = getelementptr inbounds float, ptr %f4.host, i64 %2117
  %2119 = load float, ptr %2118, align 4, !tbaa !44
  %2120 = insertelement <4 x float> undef, float %2119, i64 0
  %2121 = extractelement <4 x i64> %2116, i64 1
  %2122 = getelementptr inbounds float, ptr %f4.host, i64 %2121
  %2123 = load float, ptr %2122, align 4, !tbaa !44
  %2124 = insertelement <4 x float> %2120, float %2123, i64 1
  %2125 = extractelement <4 x i64> %2116, i64 2
  %2126 = getelementptr inbounds float, ptr %f4.host, i64 %2125
  %2127 = load float, ptr %2126, align 4, !tbaa !44
  %2128 = insertelement <4 x float> %2124, float %2127, i64 2
  %2129 = extractelement <4 x i64> %2116, i64 3
  %2130 = getelementptr inbounds float, ptr %f4.host, i64 %2129
  %2131 = load float, ptr %2130, align 4, !tbaa !44
  %2132 = insertelement <4 x float> %2128, float %2131, i64 3
  %2133 = fsub <4 x float> %2132, %2110
  %2134 = fmul <4 x float> %t2360.us, %2133
  %2135 = add nsw <4 x i32> %t2371.us, %2020
  %2136 = sext <4 x i32> %2135 to <4 x i64>
  %2137 = extractelement <4 x i64> %2136, i64 0
  %2138 = getelementptr inbounds float, ptr %f5.host, i64 %2137
  %2139 = load float, ptr %2138, align 4, !tbaa !46
  %2140 = insertelement <4 x float> undef, float %2139, i64 0
  %2141 = extractelement <4 x i64> %2136, i64 1
  %2142 = getelementptr inbounds float, ptr %f5.host, i64 %2141
  %2143 = load float, ptr %2142, align 4, !tbaa !46
  %2144 = insertelement <4 x float> %2140, float %2143, i64 1
  %2145 = extractelement <4 x i64> %2136, i64 2
  %2146 = getelementptr inbounds float, ptr %f5.host, i64 %2145
  %2147 = load float, ptr %2146, align 4, !tbaa !46
  %2148 = insertelement <4 x float> %2144, float %2147, i64 2
  %2149 = extractelement <4 x i64> %2136, i64 3
  %2150 = getelementptr inbounds float, ptr %f5.host, i64 %2149
  %2151 = load float, ptr %2150, align 4, !tbaa !46
  %2152 = insertelement <4 x float> %2148, float %2151, i64 3
  %2153 = fmul <4 x float> %2152, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2154 = add <4 x i32> %t2371.us, %2041
  %2155 = add <4 x i32> %2154, <i32 -1, i32 0, i32 1, i32 2>
  %2156 = sext <4 x i32> %2155 to <4 x i64>
  %2157 = extractelement <4 x i64> %2156, i64 0
  %2158 = getelementptr inbounds float, ptr %f5.host, i64 %2157
  %2159 = load float, ptr %2158, align 4, !tbaa !46
  %2160 = insertelement <4 x float> undef, float %2159, i64 0
  %2161 = extractelement <4 x i64> %2156, i64 1
  %2162 = getelementptr inbounds float, ptr %f5.host, i64 %2161
  %2163 = load float, ptr %2162, align 4, !tbaa !46
  %2164 = insertelement <4 x float> %2160, float %2163, i64 1
  %2165 = extractelement <4 x i64> %2156, i64 2
  %2166 = getelementptr inbounds float, ptr %f5.host, i64 %2165
  %2167 = load float, ptr %2166, align 4, !tbaa !46
  %2168 = insertelement <4 x float> %2164, float %2167, i64 2
  %2169 = extractelement <4 x i64> %2156, i64 3
  %2170 = getelementptr inbounds float, ptr %f5.host, i64 %2169
  %2171 = load float, ptr %2170, align 4, !tbaa !46
  %2172 = insertelement <4 x float> %2168, float %2171, i64 3
  %2173 = fmul <4 x float> %2172, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2174 = fadd <4 x float> %2153, %2173
  %2175 = fmul <4 x float> %2174, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2176 = add nsw <4 x i32> %t2371.us, %2066
  %2177 = sext <4 x i32> %2176 to <4 x i64>
  %2178 = extractelement <4 x i64> %2177, i64 0
  %2179 = getelementptr inbounds float, ptr %f5.host, i64 %2178
  %2180 = load float, ptr %2179, align 4, !tbaa !46
  %2181 = insertelement <4 x float> undef, float %2180, i64 0
  %2182 = extractelement <4 x i64> %2177, i64 1
  %2183 = getelementptr inbounds float, ptr %f5.host, i64 %2182
  %2184 = load float, ptr %2183, align 4, !tbaa !46
  %2185 = insertelement <4 x float> %2181, float %2184, i64 1
  %2186 = extractelement <4 x i64> %2177, i64 2
  %2187 = getelementptr inbounds float, ptr %f5.host, i64 %2186
  %2188 = load float, ptr %2187, align 4, !tbaa !46
  %2189 = insertelement <4 x float> %2185, float %2188, i64 2
  %2190 = extractelement <4 x i64> %2177, i64 3
  %2191 = getelementptr inbounds float, ptr %f5.host, i64 %2190
  %2192 = load float, ptr %2191, align 4, !tbaa !46
  %2193 = insertelement <4 x float> %2189, float %2192, i64 3
  %2194 = fmul <4 x float> %2193, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2195 = add <4 x i32> %t2371.us, %2087
  %2196 = add <4 x i32> %2195, <i32 -1, i32 0, i32 1, i32 2>
  %2197 = sext <4 x i32> %2196 to <4 x i64>
  %2198 = extractelement <4 x i64> %2197, i64 0
  %2199 = getelementptr inbounds float, ptr %f5.host, i64 %2198
  %2200 = load float, ptr %2199, align 4, !tbaa !46
  %2201 = insertelement <4 x float> undef, float %2200, i64 0
  %2202 = extractelement <4 x i64> %2197, i64 1
  %2203 = getelementptr inbounds float, ptr %f5.host, i64 %2202
  %2204 = load float, ptr %2203, align 4, !tbaa !46
  %2205 = insertelement <4 x float> %2201, float %2204, i64 1
  %2206 = extractelement <4 x i64> %2197, i64 2
  %2207 = getelementptr inbounds float, ptr %f5.host, i64 %2206
  %2208 = load float, ptr %2207, align 4, !tbaa !46
  %2209 = insertelement <4 x float> %2205, float %2208, i64 2
  %2210 = extractelement <4 x i64> %2197, i64 3
  %2211 = getelementptr inbounds float, ptr %f5.host, i64 %2210
  %2212 = load float, ptr %2211, align 4, !tbaa !46
  %2213 = insertelement <4 x float> %2209, float %2212, i64 3
  %2214 = fmul <4 x float> %2213, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2215 = fadd <4 x float> %2194, %2214
  %2216 = fmul <4 x float> %2215, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2217 = fadd <4 x float> %2175, %2216
  %2218 = mul nsw <4 x i32> %t2367.us, %1960
  %2219 = add nsw <4 x i32> %2218, %2114
  %2220 = sext <4 x i32> %2219 to <4 x i64>
  %2221 = extractelement <4 x i64> %2220, i64 0
  %2222 = getelementptr inbounds float, ptr %f4.host, i64 %2221
  %2223 = load float, ptr %2222, align 4, !tbaa !44
  %2224 = insertelement <4 x float> undef, float %2223, i64 0
  %2225 = extractelement <4 x i64> %2220, i64 1
  %2226 = getelementptr inbounds float, ptr %f4.host, i64 %2225
  %2227 = load float, ptr %2226, align 4, !tbaa !44
  %2228 = insertelement <4 x float> %2224, float %2227, i64 1
  %2229 = extractelement <4 x i64> %2220, i64 2
  %2230 = getelementptr inbounds float, ptr %f4.host, i64 %2229
  %2231 = load float, ptr %2230, align 4, !tbaa !44
  %2232 = insertelement <4 x float> %2228, float %2231, i64 2
  %2233 = extractelement <4 x i64> %2220, i64 3
  %2234 = getelementptr inbounds float, ptr %f4.host, i64 %2233
  %2235 = load float, ptr %2234, align 4, !tbaa !44
  %2236 = insertelement <4 x float> %2232, float %2235, i64 3
  %2237 = fsub <4 x float> %2236, %2217
  %2238 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2360.us
  %2239 = fmul <4 x float> %2238, %2237
  %2240 = fadd <4 x float> %2134, %2239
  %2241 = sext i32 %1994 to i64
  %2242 = sub nsw i64 %2241, %1397
  %2243 = add nsw i64 %2242, %1981
  %2244 = getelementptr inbounds float, ptr %194, i64 %2243
  %2245 = load <4 x float>, ptr %2244, align 4, !tbaa !68
  %2246 = fmul <4 x float> %2245, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2247 = sext i32 %t2356.us to i64
  %2248 = sub nsw i64 %2247, %1397
  %2249 = add nsw i64 %1982, %2248
  %2250 = getelementptr inbounds float, ptr %194, i64 %2249
  %2251 = load <4 x float>, ptr %2250, align 4, !tbaa !68
  %2252 = fmul <4 x float> %2251, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2253 = fadd <4 x float> %2246, %2252
  %2254 = fmul <4 x float> %2253, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2255 = add nsw i64 %2242, %1983
  %2256 = getelementptr inbounds float, ptr %194, i64 %2255
  %2257 = load <4 x float>, ptr %2256, align 4, !tbaa !68
  %2258 = fmul <4 x float> %2257, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2259 = add nsw i64 %1984, %2248
  %2260 = getelementptr inbounds float, ptr %194, i64 %2259
  %2261 = load <4 x float>, ptr %2260, align 4, !tbaa !68
  %2262 = fmul <4 x float> %2261, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2263 = fadd <4 x float> %2258, %2262
  %2264 = fmul <4 x float> %2263, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2265 = fadd <4 x float> %2254, %2264
  %2266 = fadd <4 x float> %2240, %2265
  %2267 = insertelement <4 x i32> undef, i32 %t2391.us, i64 0
  %2268 = shufflevector <4 x i32> %2267, <4 x i32> undef, <4 x i32> zeroinitializer
  %2269 = add nsw <4 x i32> %2268, <i32 0, i32 1, i32 2, i32 3>
  %2270 = add nsw <4 x i32> %t2392.us, %2269
  %2271 = sext <4 x i32> %2270 to <4 x i64>
  %2272 = extractelement <4 x i64> %2271, i64 0
  %2273 = getelementptr inbounds float, ptr %f5.host, i64 %2272
  %2274 = load float, ptr %2273, align 4, !tbaa !46
  %2275 = insertelement <4 x float> undef, float %2274, i64 0
  %2276 = extractelement <4 x i64> %2271, i64 1
  %2277 = getelementptr inbounds float, ptr %f5.host, i64 %2276
  %2278 = load float, ptr %2277, align 4, !tbaa !46
  %2279 = insertelement <4 x float> %2275, float %2278, i64 1
  %2280 = extractelement <4 x i64> %2271, i64 2
  %2281 = getelementptr inbounds float, ptr %f5.host, i64 %2280
  %2282 = load float, ptr %2281, align 4, !tbaa !46
  %2283 = insertelement <4 x float> %2279, float %2282, i64 2
  %2284 = extractelement <4 x i64> %2271, i64 3
  %2285 = getelementptr inbounds float, ptr %f5.host, i64 %2284
  %2286 = load float, ptr %2285, align 4, !tbaa !46
  %2287 = insertelement <4 x float> %2283, float %2286, i64 3
  %2288 = fmul <4 x float> %2287, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2289 = insertelement <4 x i32> undef, i32 %t2390.us, i64 0
  %2290 = shufflevector <4 x i32> %2289, <4 x i32> undef, <4 x i32> zeroinitializer
  %2291 = add nsw <4 x i32> %2290, <i32 0, i32 1, i32 2, i32 3>
  %2292 = add <4 x i32> %t2392.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2293 = add <4 x i32> %2292, %2291
  %2294 = sext <4 x i32> %2293 to <4 x i64>
  %2295 = extractelement <4 x i64> %2294, i64 0
  %2296 = getelementptr inbounds float, ptr %f5.host, i64 %2295
  %2297 = load float, ptr %2296, align 4, !tbaa !46
  %2298 = insertelement <4 x float> undef, float %2297, i64 0
  %2299 = extractelement <4 x i64> %2294, i64 1
  %2300 = getelementptr inbounds float, ptr %f5.host, i64 %2299
  %2301 = load float, ptr %2300, align 4, !tbaa !46
  %2302 = insertelement <4 x float> %2298, float %2301, i64 1
  %2303 = extractelement <4 x i64> %2294, i64 2
  %2304 = getelementptr inbounds float, ptr %f5.host, i64 %2303
  %2305 = load float, ptr %2304, align 4, !tbaa !46
  %2306 = insertelement <4 x float> %2302, float %2305, i64 2
  %2307 = extractelement <4 x i64> %2294, i64 3
  %2308 = getelementptr inbounds float, ptr %f5.host, i64 %2307
  %2309 = load float, ptr %2308, align 4, !tbaa !46
  %2310 = insertelement <4 x float> %2306, float %2309, i64 3
  %2311 = fmul <4 x float> %2310, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2312 = fadd <4 x float> %2288, %2311
  %2313 = fmul <4 x float> %2312, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2314 = insertelement <4 x i32> undef, i32 %t2389.us, i64 0
  %2315 = shufflevector <4 x i32> %2314, <4 x i32> undef, <4 x i32> zeroinitializer
  %2316 = add nsw <4 x i32> %2315, <i32 0, i32 1, i32 2, i32 3>
  %2317 = add nsw <4 x i32> %t2392.us, %2316
  %2318 = sext <4 x i32> %2317 to <4 x i64>
  %2319 = extractelement <4 x i64> %2318, i64 0
  %2320 = getelementptr inbounds float, ptr %f5.host, i64 %2319
  %2321 = load float, ptr %2320, align 4, !tbaa !46
  %2322 = insertelement <4 x float> undef, float %2321, i64 0
  %2323 = extractelement <4 x i64> %2318, i64 1
  %2324 = getelementptr inbounds float, ptr %f5.host, i64 %2323
  %2325 = load float, ptr %2324, align 4, !tbaa !46
  %2326 = insertelement <4 x float> %2322, float %2325, i64 1
  %2327 = extractelement <4 x i64> %2318, i64 2
  %2328 = getelementptr inbounds float, ptr %f5.host, i64 %2327
  %2329 = load float, ptr %2328, align 4, !tbaa !46
  %2330 = insertelement <4 x float> %2326, float %2329, i64 2
  %2331 = extractelement <4 x i64> %2318, i64 3
  %2332 = getelementptr inbounds float, ptr %f5.host, i64 %2331
  %2333 = load float, ptr %2332, align 4, !tbaa !46
  %2334 = insertelement <4 x float> %2330, float %2333, i64 3
  %2335 = fmul <4 x float> %2334, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2336 = insertelement <4 x i32> undef, i32 %t2386.us, i64 0
  %2337 = shufflevector <4 x i32> %2336, <4 x i32> undef, <4 x i32> zeroinitializer
  %2338 = add nsw <4 x i32> %2337, <i32 0, i32 1, i32 2, i32 3>
  %2339 = add <4 x i32> %2292, %2338
  %2340 = sext <4 x i32> %2339 to <4 x i64>
  %2341 = extractelement <4 x i64> %2340, i64 0
  %2342 = getelementptr inbounds float, ptr %f5.host, i64 %2341
  %2343 = load float, ptr %2342, align 4, !tbaa !46
  %2344 = insertelement <4 x float> undef, float %2343, i64 0
  %2345 = extractelement <4 x i64> %2340, i64 1
  %2346 = getelementptr inbounds float, ptr %f5.host, i64 %2345
  %2347 = load float, ptr %2346, align 4, !tbaa !46
  %2348 = insertelement <4 x float> %2344, float %2347, i64 1
  %2349 = extractelement <4 x i64> %2340, i64 2
  %2350 = getelementptr inbounds float, ptr %f5.host, i64 %2349
  %2351 = load float, ptr %2350, align 4, !tbaa !46
  %2352 = insertelement <4 x float> %2348, float %2351, i64 2
  %2353 = extractelement <4 x i64> %2340, i64 3
  %2354 = getelementptr inbounds float, ptr %f5.host, i64 %2353
  %2355 = load float, ptr %2354, align 4, !tbaa !46
  %2356 = insertelement <4 x float> %2352, float %2355, i64 3
  %2357 = fmul <4 x float> %2356, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2358 = fadd <4 x float> %2335, %2357
  %2359 = fmul <4 x float> %2358, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2360 = fadd <4 x float> %2313, %2359
  %2361 = mul nsw <4 x i32> %2017, %1960
  %2362 = add nsw i32 %t2365.us, 1
  %2363 = insertelement <4 x i32> undef, i32 %2362, i64 0
  %2364 = shufflevector <4 x i32> %2363, <4 x i32> undef, <4 x i32> zeroinitializer
  %2365 = add nsw <4 x i32> %2364, <i32 0, i32 2, i32 4, i32 6>
  %2366 = add nsw <4 x i32> %2361, %2365
  %2367 = sext <4 x i32> %2366 to <4 x i64>
  %2368 = extractelement <4 x i64> %2367, i64 0
  %2369 = getelementptr inbounds float, ptr %f4.host, i64 %2368
  %2370 = load float, ptr %2369, align 4, !tbaa !44
  %2371 = insertelement <4 x float> undef, float %2370, i64 0
  %2372 = extractelement <4 x i64> %2367, i64 1
  %2373 = getelementptr inbounds float, ptr %f4.host, i64 %2372
  %2374 = load float, ptr %2373, align 4, !tbaa !44
  %2375 = insertelement <4 x float> %2371, float %2374, i64 1
  %2376 = extractelement <4 x i64> %2367, i64 2
  %2377 = getelementptr inbounds float, ptr %f4.host, i64 %2376
  %2378 = load float, ptr %2377, align 4, !tbaa !44
  %2379 = insertelement <4 x float> %2375, float %2378, i64 2
  %2380 = extractelement <4 x i64> %2367, i64 3
  %2381 = getelementptr inbounds float, ptr %f4.host, i64 %2380
  %2382 = load float, ptr %2381, align 4, !tbaa !44
  %2383 = insertelement <4 x float> %2379, float %2382, i64 3
  %2384 = fsub <4 x float> %2383, %2360
  %2385 = fmul <4 x float> %t2381.us, %2384
  %2386 = add nsw <4 x i32> %t2387.us, %2269
  %2387 = sext <4 x i32> %2386 to <4 x i64>
  %2388 = extractelement <4 x i64> %2387, i64 0
  %2389 = getelementptr inbounds float, ptr %f5.host, i64 %2388
  %2390 = load float, ptr %2389, align 4, !tbaa !46
  %2391 = insertelement <4 x float> undef, float %2390, i64 0
  %2392 = extractelement <4 x i64> %2387, i64 1
  %2393 = getelementptr inbounds float, ptr %f5.host, i64 %2392
  %2394 = load float, ptr %2393, align 4, !tbaa !46
  %2395 = insertelement <4 x float> %2391, float %2394, i64 1
  %2396 = extractelement <4 x i64> %2387, i64 2
  %2397 = getelementptr inbounds float, ptr %f5.host, i64 %2396
  %2398 = load float, ptr %2397, align 4, !tbaa !46
  %2399 = insertelement <4 x float> %2395, float %2398, i64 2
  %2400 = extractelement <4 x i64> %2387, i64 3
  %2401 = getelementptr inbounds float, ptr %f5.host, i64 %2400
  %2402 = load float, ptr %2401, align 4, !tbaa !46
  %2403 = insertelement <4 x float> %2399, float %2402, i64 3
  %2404 = fmul <4 x float> %2403, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2405 = add <4 x i32> %t2387.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2406 = add <4 x i32> %2405, %2291
  %2407 = sext <4 x i32> %2406 to <4 x i64>
  %2408 = extractelement <4 x i64> %2407, i64 0
  %2409 = getelementptr inbounds float, ptr %f5.host, i64 %2408
  %2410 = load float, ptr %2409, align 4, !tbaa !46
  %2411 = insertelement <4 x float> undef, float %2410, i64 0
  %2412 = extractelement <4 x i64> %2407, i64 1
  %2413 = getelementptr inbounds float, ptr %f5.host, i64 %2412
  %2414 = load float, ptr %2413, align 4, !tbaa !46
  %2415 = insertelement <4 x float> %2411, float %2414, i64 1
  %2416 = extractelement <4 x i64> %2407, i64 2
  %2417 = getelementptr inbounds float, ptr %f5.host, i64 %2416
  %2418 = load float, ptr %2417, align 4, !tbaa !46
  %2419 = insertelement <4 x float> %2415, float %2418, i64 2
  %2420 = extractelement <4 x i64> %2407, i64 3
  %2421 = getelementptr inbounds float, ptr %f5.host, i64 %2420
  %2422 = load float, ptr %2421, align 4, !tbaa !46
  %2423 = insertelement <4 x float> %2419, float %2422, i64 3
  %2424 = fmul <4 x float> %2423, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2425 = fadd <4 x float> %2404, %2424
  %2426 = fmul <4 x float> %2425, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2427 = add nsw <4 x i32> %t2387.us, %2316
  %2428 = sext <4 x i32> %2427 to <4 x i64>
  %2429 = extractelement <4 x i64> %2428, i64 0
  %2430 = getelementptr inbounds float, ptr %f5.host, i64 %2429
  %2431 = load float, ptr %2430, align 4, !tbaa !46
  %2432 = insertelement <4 x float> undef, float %2431, i64 0
  %2433 = extractelement <4 x i64> %2428, i64 1
  %2434 = getelementptr inbounds float, ptr %f5.host, i64 %2433
  %2435 = load float, ptr %2434, align 4, !tbaa !46
  %2436 = insertelement <4 x float> %2432, float %2435, i64 1
  %2437 = extractelement <4 x i64> %2428, i64 2
  %2438 = getelementptr inbounds float, ptr %f5.host, i64 %2437
  %2439 = load float, ptr %2438, align 4, !tbaa !46
  %2440 = insertelement <4 x float> %2436, float %2439, i64 2
  %2441 = extractelement <4 x i64> %2428, i64 3
  %2442 = getelementptr inbounds float, ptr %f5.host, i64 %2441
  %2443 = load float, ptr %2442, align 4, !tbaa !46
  %2444 = insertelement <4 x float> %2440, float %2443, i64 3
  %2445 = fmul <4 x float> %2444, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2446 = add <4 x i32> %2405, %2338
  %2447 = sext <4 x i32> %2446 to <4 x i64>
  %2448 = extractelement <4 x i64> %2447, i64 0
  %2449 = getelementptr inbounds float, ptr %f5.host, i64 %2448
  %2450 = load float, ptr %2449, align 4, !tbaa !46
  %2451 = insertelement <4 x float> undef, float %2450, i64 0
  %2452 = extractelement <4 x i64> %2447, i64 1
  %2453 = getelementptr inbounds float, ptr %f5.host, i64 %2452
  %2454 = load float, ptr %2453, align 4, !tbaa !46
  %2455 = insertelement <4 x float> %2451, float %2454, i64 1
  %2456 = extractelement <4 x i64> %2447, i64 2
  %2457 = getelementptr inbounds float, ptr %f5.host, i64 %2456
  %2458 = load float, ptr %2457, align 4, !tbaa !46
  %2459 = insertelement <4 x float> %2455, float %2458, i64 2
  %2460 = extractelement <4 x i64> %2447, i64 3
  %2461 = getelementptr inbounds float, ptr %f5.host, i64 %2460
  %2462 = load float, ptr %2461, align 4, !tbaa !46
  %2463 = insertelement <4 x float> %2459, float %2462, i64 3
  %2464 = fmul <4 x float> %2463, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2465 = fadd <4 x float> %2445, %2464
  %2466 = fmul <4 x float> %2465, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2467 = fadd <4 x float> %2426, %2466
  %2468 = mul nsw <4 x i32> %t2384.us, %1960
  %2469 = add nsw <4 x i32> %2468, %2365
  %2470 = sext <4 x i32> %2469 to <4 x i64>
  %2471 = extractelement <4 x i64> %2470, i64 0
  %2472 = getelementptr inbounds float, ptr %f4.host, i64 %2471
  %2473 = load float, ptr %2472, align 4, !tbaa !44
  %2474 = insertelement <4 x float> undef, float %2473, i64 0
  %2475 = extractelement <4 x i64> %2470, i64 1
  %2476 = getelementptr inbounds float, ptr %f4.host, i64 %2475
  %2477 = load float, ptr %2476, align 4, !tbaa !44
  %2478 = insertelement <4 x float> %2474, float %2477, i64 1
  %2479 = extractelement <4 x i64> %2470, i64 2
  %2480 = getelementptr inbounds float, ptr %f4.host, i64 %2479
  %2481 = load float, ptr %2480, align 4, !tbaa !44
  %2482 = insertelement <4 x float> %2478, float %2481, i64 2
  %2483 = extractelement <4 x i64> %2470, i64 3
  %2484 = getelementptr inbounds float, ptr %f4.host, i64 %2483
  %2485 = load float, ptr %2484, align 4, !tbaa !44
  %2486 = insertelement <4 x float> %2482, float %2485, i64 3
  %2487 = fsub <4 x float> %2486, %2467
  %2488 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2381.us
  %2489 = fmul <4 x float> %2488, %2487
  %2490 = fadd <4 x float> %2385, %2489
  %2491 = sext i32 %2011 to i64
  %2492 = sub nsw i64 %2491, %1397
  %2493 = add nsw i64 %2492, %1981
  %2494 = getelementptr inbounds float, ptr %194, i64 %2493
  %2495 = load <4 x float>, ptr %2494, align 4, !tbaa !68
  %2496 = fmul <4 x float> %2495, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2497 = sext i32 %t2378.us to i64
  %2498 = sub nsw i64 %2497, %1397
  %2499 = add nsw i64 %1982, %2498
  %2500 = getelementptr inbounds float, ptr %194, i64 %2499
  %2501 = load <4 x float>, ptr %2500, align 4, !tbaa !68
  %2502 = fmul <4 x float> %2501, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2503 = fadd <4 x float> %2496, %2502
  %2504 = fmul <4 x float> %2503, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2505 = add nsw i64 %2492, %1983
  %2506 = getelementptr inbounds float, ptr %194, i64 %2505
  %2507 = load <4 x float>, ptr %2506, align 4, !tbaa !68
  %2508 = fmul <4 x float> %2507, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2509 = add nsw i64 %1984, %2498
  %2510 = getelementptr inbounds float, ptr %194, i64 %2509
  %2511 = load <4 x float>, ptr %2510, align 4, !tbaa !68
  %2512 = fmul <4 x float> %2511, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2513 = fadd <4 x float> %2508, %2512
  %2514 = fmul <4 x float> %2513, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2515 = fadd <4 x float> %2504, %2514
  %2516 = fadd <4 x float> %2490, %2515
  %2517 = shufflevector <4 x float> %2266, <4 x float> %2516, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %2518 = sext i32 %f126.s0.v3.v303.base.us to i64
  %2519 = add i64 %1987, %2518
  %2520 = getelementptr inbounds float, ptr %223, i64 %2519
  store <8 x float> %2517, ptr %2520, align 4, !tbaa !70
  %lsr.iv.next409.us = add i32 %lsr.iv408.us, -1
  %lsr.iv.next411.us = add i32 %lsr.iv410.us, 8
  %.not151.us = icmp eq i32 %lsr.iv.next409.us, 0
  br i1 %.not151.us, label %"end for f126.s0.v3.v3.loopexit.us", label %"for f126.s0.v3.v3.us"

"end for f126.s0.v3.v3.loopexit.us":              ; preds = %"for f126.s0.v3.v3.us"
  %indvars.iv.next320 = add nsw i64 %indvars.iv319, 1
  %2521 = icmp eq i64 %indvars.iv319, %sext321
  br i1 %2521, label %"consume f126", label %"for f126.s0.v4.us"

"consume f126":                                   ; preds = %"end for f126.s0.v3.v3.loopexit.us", %"for f126.s0.v4.preheader"
  %2522 = tail call i32 @llvm.smax.i32(i32 %198, i32 8)
  %t3091 = zext i32 %2522 to i64
  %2523 = shl nuw nsw i64 %t3091, 2
  %2524 = icmp ult i32 %2522, 536870912
  br i1 %2524, label %"assert succeeded16", label %"assert failed15", !prof !5

"assert failed15":                                ; preds = %"consume f126"
  %2525 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %2523, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded16":                             ; preds = %"consume f126"
  %2526 = add nuw nsw i64 %2523, 4
  %2527 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2526)
  %.not103 = icmp eq ptr %2527, null
  br i1 %.not103, label %"assert failed17", label %"produce f125", !prof !4

"assert failed17":                                ; preds = %"assert succeeded16"
  %2528 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f125":                                   ; preds = %"assert succeeded16"
  %2529 = add nsw i32 %198, 7
  %2530 = ashr i32 %2529, 3
  %2531 = icmp sgt i32 %198, 0
  br i1 %2531, label %"for f125.s0.v3.v3.preheader", label %"consume f125", !prof !5

"for f125.s0.v3.v3.preheader":                    ; preds = %"produce f125"
  %2532 = shl i32 %local_laplacian.s0.v4.v4.base, 1
  %2533 = and i32 %2532, 2
  %t2394 = add nsw i32 %2533, %157
  %2534 = add nsw i32 %f2.v3.extent_realized.s, 1
  %2535 = sub nsw i32 %local_laplacian.s0.v4.v4.base, %f2.v4.min_realized
  %2536 = mul nsw i32 %2535, %2534
  %2537 = sub i32 %2536, %f2.v3.min_realized
  %2538 = fdiv float 1.000000e+00, %231
  %2539 = insertelement <4 x float> undef, float %2538, i64 0
  %2540 = shufflevector <4 x float> %2539, <4 x float> undef, <4 x i32> zeroinitializer
  %2541 = xor i32 %159, -1
  %2542 = add i32 %t2394, %2541
  %t2406 = mul nsw i32 %208, %2542
  %2543 = sub nsw i32 %157, %159
  %t2408 = mul nsw i32 %208, %2543
  %2544 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %2545 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %2544
  %.neg216 = shufflevector <4 x i32> %2545, <4 x i32> poison, <4 x i32> zeroinitializer
  %2546 = shl nsw i32 %levels, 8
  %2547 = add nsw i32 %2546, -256
  %2548 = insertelement <4 x i32> undef, i32 %2547, i64 0
  %b870 = shufflevector <4 x i32> %2548, <4 x i32> undef, <4 x i32> zeroinitializer
  %2549 = xor i32 %f4.v4.min_realized, -1
  %2550 = add i32 %t2394, %2549
  %2551 = mul nsw i32 %2550, %f4.stride.1
  %2552 = sub nsw i32 %157, %f4.v4.min_realized
  %2553 = mul nsw i32 %2552, %f4.stride.1
  %2554 = insertelement <4 x float> undef, float %beta, i64 0
  %2555 = shufflevector <4 x float> %2554, <4 x float> undef, <4 x i32> zeroinitializer
  %2556 = sext i32 %t2408 to i64
  %2557 = add nsw i64 %2556, -1
  %2558 = sext i32 %t2406 to i64
  %2559 = add nsw i64 %2558, -1
  %2560 = sext i32 %196 to i64
  br label %"for f125.s0.v3.v3"

"for f125.s0.v3.v3":                              ; preds = %"for f125.s0.v3.v3.preheader", %"for f125.s0.v3.v3"
  %lsr.iv406 = phi i32 [ %lsr.iv.next407, %"for f125.s0.v3.v3" ], [ %a1120, %"for f125.s0.v3.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f125.s0.v3.v3" ], [ %2530, %"for f125.s0.v3.v3.preheader" ]
  %f125.s0.v3.v366.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %lsr.iv406)
  %2561 = shl i32 %f125.s0.v3.v366.base, 1
  %2562 = and i32 %2561, 2
  %2563 = ashr i32 %f125.s0.v3.v366.base, 1
  %t2395 = add nsw i32 %2562, %2563
  %t2396 = add i32 %2537, %f125.s0.v3.v366.base
  %2564 = sext i32 %t2396 to i64
  %2565 = getelementptr inbounds float, ptr %f2.host, i64 %2564
  %2566 = load <4 x float>, ptr %2565, align 4, !tbaa !42
  %2567 = add nsw i64 %2564, 4
  %2568 = getelementptr inbounds float, ptr %f2.host, i64 %2567
  %2569 = load <4 x float>, ptr %2568, align 4, !tbaa !42
  %t2397 = shufflevector <4 x float> %2566, <4 x float> %2569, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2398 = shufflevector <4 x float> %2566, <4 x float> %2569, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2399 = fmul <4 x float> %233, %t2397
  %t2400 = fmul <4 x float> %233, %t2398
  %a863 = fptosi <4 x float> %t2400 to <4 x i32>
  %a870 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a863)
  %2570 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a870, <4 x i32> zeroinitializer)
  %t2402 = sitofp <4 x i32> %2570 to <4 x float>
  %t2403 = fmul <4 x float> %2540, %t2402
  %2571 = add nuw nsw <4 x i32> %2570, <i32 1, i32 1, i32 1, i32 1>
  %2572 = sitofp <4 x i32> %2571 to <4 x float>
  %t2404 = fmul <4 x float> %2540, %2572
  %2573 = fmul <4 x float> %t2400, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a868 = fptosi <4 x float> %2573 to <4 x i32>
  %a867 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a868)
  %2574 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a867, <4 x i32> zeroinitializer)
  %2575 = shl <4 x i32> %2570, <i32 8, i32 8, i32 8, i32 8>
  %.neg218 = sub <4 x i32> %.neg216, %2575
  %t2409 = add <4 x i32> %.neg218, %2574
  %2576 = sub nsw i32 %t2395, %f4.v3.min_realized
  %t2412 = add nsw i32 %2576, %2551
  %t2414 = sub nsw <4 x i32> %2570, %242
  %t2415 = mul nsw <4 x i32> %t2414, %1960
  %2577 = sub nsw i32 %2563, %f4.v3.min_realized
  %t2417 = add nsw i32 %2577, %2551
  %t2419 = add nsw i32 %2576, %2553
  %t2420 = add nsw i32 %2577, %2553
  %2578 = add nsw <4 x i32> %t2414, <i32 1, i32 1, i32 1, i32 1>
  %t2421 = mul nsw <4 x i32> %2578, %1960
  %2579 = add nsw i32 %f125.s0.v3.v366.base, 1
  %2580 = shl i32 %2579, 1
  %2581 = and i32 %2580, 2
  %2582 = ashr i32 %2579, 1
  %t2422 = add nsw i32 %2581, %2582
  %a871 = fptosi <4 x float> %t2399 to <4 x i32>
  %a878 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a871)
  %2583 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a878, <4 x i32> zeroinitializer)
  %t2424 = sitofp <4 x i32> %2583 to <4 x float>
  %t2425 = fmul <4 x float> %2540, %t2424
  %2584 = add nuw nsw <4 x i32> %2583, <i32 1, i32 1, i32 1, i32 1>
  %2585 = sitofp <4 x i32> %2584 to <4 x float>
  %t2426 = fmul <4 x float> %2540, %2585
  %2586 = fmul <4 x float> %t2399, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a876 = fptosi <4 x float> %2586 to <4 x i32>
  %a875 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a876)
  %2587 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a875, <4 x i32> zeroinitializer)
  %2588 = shl <4 x i32> %2583, <i32 8, i32 8, i32 8, i32 8>
  %.neg220 = sub <4 x i32> %.neg216, %2588
  %t2429 = add <4 x i32> %.neg220, %2587
  %2589 = sub nsw i32 %t2422, %f4.v3.min_realized
  %t2431 = add nsw i32 %2589, %2551
  %t2432 = sub nsw <4 x i32> %2583, %242
  %t2433 = mul nsw <4 x i32> %t2432, %1960
  %2590 = sub nsw i32 %2582, %f4.v3.min_realized
  %t2435 = add nsw i32 %2590, %2551
  %t2436 = add nsw i32 %2589, %2553
  %t2437 = add nsw i32 %2590, %2553
  %2591 = add nsw <4 x i32> %t2432, <i32 1, i32 1, i32 1, i32 1>
  %t2438 = mul nsw <4 x i32> %2591, %1960
  %2592 = insertelement <4 x i32> undef, i32 %t2420, i64 0
  %2593 = shufflevector <4 x i32> %2592, <4 x i32> undef, <4 x i32> zeroinitializer
  %2594 = add nsw <4 x i32> %2593, <i32 0, i32 1, i32 2, i32 3>
  %2595 = add nsw <4 x i32> %t2421, %2594
  %2596 = sext <4 x i32> %2595 to <4 x i64>
  %2597 = extractelement <4 x i64> %2596, i64 0
  %2598 = getelementptr inbounds float, ptr %f4.host, i64 %2597
  %2599 = load float, ptr %2598, align 4, !tbaa !44
  %2600 = insertelement <4 x float> undef, float %2599, i64 0
  %2601 = extractelement <4 x i64> %2596, i64 1
  %2602 = getelementptr inbounds float, ptr %f4.host, i64 %2601
  %2603 = load float, ptr %2602, align 4, !tbaa !44
  %2604 = insertelement <4 x float> %2600, float %2603, i64 1
  %2605 = extractelement <4 x i64> %2596, i64 2
  %2606 = getelementptr inbounds float, ptr %f4.host, i64 %2605
  %2607 = load float, ptr %2606, align 4, !tbaa !44
  %2608 = insertelement <4 x float> %2604, float %2607, i64 2
  %2609 = extractelement <4 x i64> %2596, i64 3
  %2610 = getelementptr inbounds float, ptr %f4.host, i64 %2609
  %2611 = load float, ptr %2610, align 4, !tbaa !44
  %2612 = insertelement <4 x float> %2608, float %2611, i64 3
  %2613 = fmul <4 x float> %2612, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2614 = insertelement <4 x i32> undef, i32 %t2419, i64 0
  %2615 = shufflevector <4 x i32> %2614, <4 x i32> undef, <4 x i32> zeroinitializer
  %2616 = add <4 x i32> %2615, <i32 -1, i32 0, i32 1, i32 2>
  %2617 = add <4 x i32> %2616, %t2421
  %2618 = sext <4 x i32> %2617 to <4 x i64>
  %2619 = extractelement <4 x i64> %2618, i64 0
  %2620 = getelementptr inbounds float, ptr %f4.host, i64 %2619
  %2621 = load float, ptr %2620, align 4, !tbaa !44
  %2622 = insertelement <4 x float> undef, float %2621, i64 0
  %2623 = extractelement <4 x i64> %2618, i64 1
  %2624 = getelementptr inbounds float, ptr %f4.host, i64 %2623
  %2625 = load float, ptr %2624, align 4, !tbaa !44
  %2626 = insertelement <4 x float> %2622, float %2625, i64 1
  %2627 = extractelement <4 x i64> %2618, i64 2
  %2628 = getelementptr inbounds float, ptr %f4.host, i64 %2627
  %2629 = load float, ptr %2628, align 4, !tbaa !44
  %2630 = insertelement <4 x float> %2626, float %2629, i64 2
  %2631 = extractelement <4 x i64> %2618, i64 3
  %2632 = getelementptr inbounds float, ptr %f4.host, i64 %2631
  %2633 = load float, ptr %2632, align 4, !tbaa !44
  %2634 = insertelement <4 x float> %2630, float %2633, i64 3
  %2635 = fmul <4 x float> %2634, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2636 = fadd <4 x float> %2613, %2635
  %2637 = fmul <4 x float> %2636, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2638 = insertelement <4 x i32> undef, i32 %t2417, i64 0
  %2639 = shufflevector <4 x i32> %2638, <4 x i32> undef, <4 x i32> zeroinitializer
  %2640 = add nsw <4 x i32> %2639, <i32 0, i32 1, i32 2, i32 3>
  %2641 = add nsw <4 x i32> %t2421, %2640
  %2642 = sext <4 x i32> %2641 to <4 x i64>
  %2643 = extractelement <4 x i64> %2642, i64 0
  %2644 = getelementptr inbounds float, ptr %f4.host, i64 %2643
  %2645 = load float, ptr %2644, align 4, !tbaa !44
  %2646 = insertelement <4 x float> undef, float %2645, i64 0
  %2647 = extractelement <4 x i64> %2642, i64 1
  %2648 = getelementptr inbounds float, ptr %f4.host, i64 %2647
  %2649 = load float, ptr %2648, align 4, !tbaa !44
  %2650 = insertelement <4 x float> %2646, float %2649, i64 1
  %2651 = extractelement <4 x i64> %2642, i64 2
  %2652 = getelementptr inbounds float, ptr %f4.host, i64 %2651
  %2653 = load float, ptr %2652, align 4, !tbaa !44
  %2654 = insertelement <4 x float> %2650, float %2653, i64 2
  %2655 = extractelement <4 x i64> %2642, i64 3
  %2656 = getelementptr inbounds float, ptr %f4.host, i64 %2655
  %2657 = load float, ptr %2656, align 4, !tbaa !44
  %2658 = insertelement <4 x float> %2654, float %2657, i64 3
  %2659 = fmul <4 x float> %2658, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2660 = insertelement <4 x i32> undef, i32 %t2412, i64 0
  %2661 = shufflevector <4 x i32> %2660, <4 x i32> undef, <4 x i32> zeroinitializer
  %2662 = add <4 x i32> %2661, <i32 -1, i32 0, i32 1, i32 2>
  %2663 = add <4 x i32> %2662, %t2421
  %2664 = sext <4 x i32> %2663 to <4 x i64>
  %2665 = extractelement <4 x i64> %2664, i64 0
  %2666 = getelementptr inbounds float, ptr %f4.host, i64 %2665
  %2667 = load float, ptr %2666, align 4, !tbaa !44
  %2668 = insertelement <4 x float> undef, float %2667, i64 0
  %2669 = extractelement <4 x i64> %2664, i64 1
  %2670 = getelementptr inbounds float, ptr %f4.host, i64 %2669
  %2671 = load float, ptr %2670, align 4, !tbaa !44
  %2672 = insertelement <4 x float> %2668, float %2671, i64 1
  %2673 = extractelement <4 x i64> %2664, i64 2
  %2674 = getelementptr inbounds float, ptr %f4.host, i64 %2673
  %2675 = load float, ptr %2674, align 4, !tbaa !44
  %2676 = insertelement <4 x float> %2672, float %2675, i64 2
  %2677 = extractelement <4 x i64> %2664, i64 3
  %2678 = getelementptr inbounds float, ptr %f4.host, i64 %2677
  %2679 = load float, ptr %2678, align 4, !tbaa !44
  %2680 = insertelement <4 x float> %2676, float %2679, i64 3
  %2681 = fmul <4 x float> %2680, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2682 = fadd <4 x float> %2659, %2681
  %2683 = fmul <4 x float> %2682, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2684 = fadd <4 x float> %2637, %2683
  %2685 = sext <4 x i32> %t2409 to <4 x i64>
  %2686 = extractelement <4 x i64> %2685, i64 0
  %2687 = getelementptr inbounds float, ptr %f0.host, i64 %2686
  %2688 = load float, ptr %2687, align 4, !tbaa !6
  %2689 = insertelement <4 x float> undef, float %2688, i64 0
  %2690 = extractelement <4 x i64> %2685, i64 1
  %2691 = getelementptr inbounds float, ptr %f0.host, i64 %2690
  %2692 = load float, ptr %2691, align 4, !tbaa !6
  %2693 = insertelement <4 x float> %2689, float %2692, i64 1
  %2694 = extractelement <4 x i64> %2685, i64 2
  %2695 = getelementptr inbounds float, ptr %f0.host, i64 %2694
  %2696 = load float, ptr %2695, align 4, !tbaa !6
  %2697 = insertelement <4 x float> %2693, float %2696, i64 2
  %2698 = extractelement <4 x i64> %2685, i64 3
  %2699 = getelementptr inbounds float, ptr %f0.host, i64 %2698
  %2700 = load float, ptr %2699, align 4, !tbaa !6
  %2701 = insertelement <4 x float> %2697, float %2700, i64 3
  %2702 = fsub <4 x float> %t2398, %t2404
  %2703 = fmul <4 x float> %2555, %2702
  %2704 = fadd <4 x float> %t2404, %2703
  %2705 = fadd <4 x float> %2704, %2701
  %2706 = fsub <4 x float> %2705, %2684
  %2707 = fsub <4 x float> %t2400, %t2402
  %2708 = fmul <4 x float> %2707, %2706
  %2709 = add nsw <4 x i32> %t2415, %2594
  %2710 = sext <4 x i32> %2709 to <4 x i64>
  %2711 = extractelement <4 x i64> %2710, i64 0
  %2712 = getelementptr inbounds float, ptr %f4.host, i64 %2711
  %2713 = load float, ptr %2712, align 4, !tbaa !44
  %2714 = insertelement <4 x float> undef, float %2713, i64 0
  %2715 = extractelement <4 x i64> %2710, i64 1
  %2716 = getelementptr inbounds float, ptr %f4.host, i64 %2715
  %2717 = load float, ptr %2716, align 4, !tbaa !44
  %2718 = insertelement <4 x float> %2714, float %2717, i64 1
  %2719 = extractelement <4 x i64> %2710, i64 2
  %2720 = getelementptr inbounds float, ptr %f4.host, i64 %2719
  %2721 = load float, ptr %2720, align 4, !tbaa !44
  %2722 = insertelement <4 x float> %2718, float %2721, i64 2
  %2723 = extractelement <4 x i64> %2710, i64 3
  %2724 = getelementptr inbounds float, ptr %f4.host, i64 %2723
  %2725 = load float, ptr %2724, align 4, !tbaa !44
  %2726 = insertelement <4 x float> %2722, float %2725, i64 3
  %2727 = fmul <4 x float> %2726, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2728 = add <4 x i32> %2616, %t2415
  %2729 = sext <4 x i32> %2728 to <4 x i64>
  %2730 = extractelement <4 x i64> %2729, i64 0
  %2731 = getelementptr inbounds float, ptr %f4.host, i64 %2730
  %2732 = load float, ptr %2731, align 4, !tbaa !44
  %2733 = insertelement <4 x float> undef, float %2732, i64 0
  %2734 = extractelement <4 x i64> %2729, i64 1
  %2735 = getelementptr inbounds float, ptr %f4.host, i64 %2734
  %2736 = load float, ptr %2735, align 4, !tbaa !44
  %2737 = insertelement <4 x float> %2733, float %2736, i64 1
  %2738 = extractelement <4 x i64> %2729, i64 2
  %2739 = getelementptr inbounds float, ptr %f4.host, i64 %2738
  %2740 = load float, ptr %2739, align 4, !tbaa !44
  %2741 = insertelement <4 x float> %2737, float %2740, i64 2
  %2742 = extractelement <4 x i64> %2729, i64 3
  %2743 = getelementptr inbounds float, ptr %f4.host, i64 %2742
  %2744 = load float, ptr %2743, align 4, !tbaa !44
  %2745 = insertelement <4 x float> %2741, float %2744, i64 3
  %2746 = fmul <4 x float> %2745, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2747 = fadd <4 x float> %2727, %2746
  %2748 = fmul <4 x float> %2747, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2749 = add nsw <4 x i32> %t2415, %2640
  %2750 = sext <4 x i32> %2749 to <4 x i64>
  %2751 = extractelement <4 x i64> %2750, i64 0
  %2752 = getelementptr inbounds float, ptr %f4.host, i64 %2751
  %2753 = load float, ptr %2752, align 4, !tbaa !44
  %2754 = insertelement <4 x float> undef, float %2753, i64 0
  %2755 = extractelement <4 x i64> %2750, i64 1
  %2756 = getelementptr inbounds float, ptr %f4.host, i64 %2755
  %2757 = load float, ptr %2756, align 4, !tbaa !44
  %2758 = insertelement <4 x float> %2754, float %2757, i64 1
  %2759 = extractelement <4 x i64> %2750, i64 2
  %2760 = getelementptr inbounds float, ptr %f4.host, i64 %2759
  %2761 = load float, ptr %2760, align 4, !tbaa !44
  %2762 = insertelement <4 x float> %2758, float %2761, i64 2
  %2763 = extractelement <4 x i64> %2750, i64 3
  %2764 = getelementptr inbounds float, ptr %f4.host, i64 %2763
  %2765 = load float, ptr %2764, align 4, !tbaa !44
  %2766 = insertelement <4 x float> %2762, float %2765, i64 3
  %2767 = fmul <4 x float> %2766, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2768 = add <4 x i32> %2662, %t2415
  %2769 = sext <4 x i32> %2768 to <4 x i64>
  %2770 = extractelement <4 x i64> %2769, i64 0
  %2771 = getelementptr inbounds float, ptr %f4.host, i64 %2770
  %2772 = load float, ptr %2771, align 4, !tbaa !44
  %2773 = insertelement <4 x float> undef, float %2772, i64 0
  %2774 = extractelement <4 x i64> %2769, i64 1
  %2775 = getelementptr inbounds float, ptr %f4.host, i64 %2774
  %2776 = load float, ptr %2775, align 4, !tbaa !44
  %2777 = insertelement <4 x float> %2773, float %2776, i64 1
  %2778 = extractelement <4 x i64> %2769, i64 2
  %2779 = getelementptr inbounds float, ptr %f4.host, i64 %2778
  %2780 = load float, ptr %2779, align 4, !tbaa !44
  %2781 = insertelement <4 x float> %2777, float %2780, i64 2
  %2782 = extractelement <4 x i64> %2769, i64 3
  %2783 = getelementptr inbounds float, ptr %f4.host, i64 %2782
  %2784 = load float, ptr %2783, align 4, !tbaa !44
  %2785 = insertelement <4 x float> %2781, float %2784, i64 3
  %2786 = fmul <4 x float> %2785, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2787 = fadd <4 x float> %2767, %2786
  %2788 = fmul <4 x float> %2787, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2789 = fadd <4 x float> %2748, %2788
  %2790 = add nsw <4 x i32> %t2409, <i32 256, i32 256, i32 256, i32 256>
  %2791 = sext <4 x i32> %2790 to <4 x i64>
  %2792 = extractelement <4 x i64> %2791, i64 0
  %2793 = getelementptr inbounds float, ptr %f0.host, i64 %2792
  %2794 = load float, ptr %2793, align 4, !tbaa !6
  %2795 = insertelement <4 x float> undef, float %2794, i64 0
  %2796 = extractelement <4 x i64> %2791, i64 1
  %2797 = getelementptr inbounds float, ptr %f0.host, i64 %2796
  %2798 = load float, ptr %2797, align 4, !tbaa !6
  %2799 = insertelement <4 x float> %2795, float %2798, i64 1
  %2800 = extractelement <4 x i64> %2791, i64 2
  %2801 = getelementptr inbounds float, ptr %f0.host, i64 %2800
  %2802 = load float, ptr %2801, align 4, !tbaa !6
  %2803 = insertelement <4 x float> %2799, float %2802, i64 2
  %2804 = extractelement <4 x i64> %2791, i64 3
  %2805 = getelementptr inbounds float, ptr %f0.host, i64 %2804
  %2806 = load float, ptr %2805, align 4, !tbaa !6
  %2807 = insertelement <4 x float> %2803, float %2806, i64 3
  %2808 = fsub <4 x float> %t2398, %t2403
  %2809 = fmul <4 x float> %2555, %2808
  %2810 = fadd <4 x float> %t2403, %2809
  %2811 = fadd <4 x float> %2810, %2807
  %2812 = fsub <4 x float> %2811, %2789
  %2813 = fsub <4 x float> %t2402, %t2400
  %2814 = fadd <4 x float> %2813, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2815 = fmul <4 x float> %2814, %2812
  %2816 = fadd <4 x float> %2708, %2815
  %2817 = sext i32 %2563 to i64
  %2818 = sub nsw i64 %2817, %1964
  %2819 = add nsw i64 %2818, %2556
  %2820 = getelementptr inbounds float, ptr %223, i64 %2819
  %2821 = load <4 x float>, ptr %2820, align 4, !tbaa !70
  %2822 = fmul <4 x float> %2821, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2823 = sext i32 %t2395 to i64
  %2824 = sub nsw i64 %2823, %1964
  %2825 = add nsw i64 %2557, %2824
  %2826 = getelementptr inbounds float, ptr %223, i64 %2825
  %2827 = load <4 x float>, ptr %2826, align 4, !tbaa !70
  %2828 = fmul <4 x float> %2827, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2829 = fadd <4 x float> %2822, %2828
  %2830 = fmul <4 x float> %2829, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2831 = add nsw i64 %2818, %2558
  %2832 = getelementptr inbounds float, ptr %223, i64 %2831
  %2833 = load <4 x float>, ptr %2832, align 4, !tbaa !70
  %2834 = fmul <4 x float> %2833, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2835 = add nsw i64 %2559, %2824
  %2836 = getelementptr inbounds float, ptr %223, i64 %2835
  %2837 = load <4 x float>, ptr %2836, align 4, !tbaa !70
  %2838 = fmul <4 x float> %2837, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2839 = fadd <4 x float> %2834, %2838
  %2840 = fmul <4 x float> %2839, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2841 = fadd <4 x float> %2830, %2840
  %2842 = fadd <4 x float> %2816, %2841
  %2843 = insertelement <4 x i32> undef, i32 %t2437, i64 0
  %2844 = shufflevector <4 x i32> %2843, <4 x i32> undef, <4 x i32> zeroinitializer
  %2845 = add nsw <4 x i32> %2844, <i32 0, i32 1, i32 2, i32 3>
  %2846 = add nsw <4 x i32> %t2438, %2845
  %2847 = sext <4 x i32> %2846 to <4 x i64>
  %2848 = extractelement <4 x i64> %2847, i64 0
  %2849 = getelementptr inbounds float, ptr %f4.host, i64 %2848
  %2850 = load float, ptr %2849, align 4, !tbaa !44
  %2851 = insertelement <4 x float> undef, float %2850, i64 0
  %2852 = extractelement <4 x i64> %2847, i64 1
  %2853 = getelementptr inbounds float, ptr %f4.host, i64 %2852
  %2854 = load float, ptr %2853, align 4, !tbaa !44
  %2855 = insertelement <4 x float> %2851, float %2854, i64 1
  %2856 = extractelement <4 x i64> %2847, i64 2
  %2857 = getelementptr inbounds float, ptr %f4.host, i64 %2856
  %2858 = load float, ptr %2857, align 4, !tbaa !44
  %2859 = insertelement <4 x float> %2855, float %2858, i64 2
  %2860 = extractelement <4 x i64> %2847, i64 3
  %2861 = getelementptr inbounds float, ptr %f4.host, i64 %2860
  %2862 = load float, ptr %2861, align 4, !tbaa !44
  %2863 = insertelement <4 x float> %2859, float %2862, i64 3
  %2864 = fmul <4 x float> %2863, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2865 = insertelement <4 x i32> undef, i32 %t2436, i64 0
  %2866 = shufflevector <4 x i32> %2865, <4 x i32> undef, <4 x i32> zeroinitializer
  %2867 = add <4 x i32> %2866, <i32 -1, i32 0, i32 1, i32 2>
  %2868 = add <4 x i32> %2867, %t2438
  %2869 = sext <4 x i32> %2868 to <4 x i64>
  %2870 = extractelement <4 x i64> %2869, i64 0
  %2871 = getelementptr inbounds float, ptr %f4.host, i64 %2870
  %2872 = load float, ptr %2871, align 4, !tbaa !44
  %2873 = insertelement <4 x float> undef, float %2872, i64 0
  %2874 = extractelement <4 x i64> %2869, i64 1
  %2875 = getelementptr inbounds float, ptr %f4.host, i64 %2874
  %2876 = load float, ptr %2875, align 4, !tbaa !44
  %2877 = insertelement <4 x float> %2873, float %2876, i64 1
  %2878 = extractelement <4 x i64> %2869, i64 2
  %2879 = getelementptr inbounds float, ptr %f4.host, i64 %2878
  %2880 = load float, ptr %2879, align 4, !tbaa !44
  %2881 = insertelement <4 x float> %2877, float %2880, i64 2
  %2882 = extractelement <4 x i64> %2869, i64 3
  %2883 = getelementptr inbounds float, ptr %f4.host, i64 %2882
  %2884 = load float, ptr %2883, align 4, !tbaa !44
  %2885 = insertelement <4 x float> %2881, float %2884, i64 3
  %2886 = fmul <4 x float> %2885, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2887 = fadd <4 x float> %2864, %2886
  %2888 = fmul <4 x float> %2887, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2889 = insertelement <4 x i32> undef, i32 %t2435, i64 0
  %2890 = shufflevector <4 x i32> %2889, <4 x i32> undef, <4 x i32> zeroinitializer
  %2891 = add nsw <4 x i32> %2890, <i32 0, i32 1, i32 2, i32 3>
  %2892 = add nsw <4 x i32> %t2438, %2891
  %2893 = sext <4 x i32> %2892 to <4 x i64>
  %2894 = extractelement <4 x i64> %2893, i64 0
  %2895 = getelementptr inbounds float, ptr %f4.host, i64 %2894
  %2896 = load float, ptr %2895, align 4, !tbaa !44
  %2897 = insertelement <4 x float> undef, float %2896, i64 0
  %2898 = extractelement <4 x i64> %2893, i64 1
  %2899 = getelementptr inbounds float, ptr %f4.host, i64 %2898
  %2900 = load float, ptr %2899, align 4, !tbaa !44
  %2901 = insertelement <4 x float> %2897, float %2900, i64 1
  %2902 = extractelement <4 x i64> %2893, i64 2
  %2903 = getelementptr inbounds float, ptr %f4.host, i64 %2902
  %2904 = load float, ptr %2903, align 4, !tbaa !44
  %2905 = insertelement <4 x float> %2901, float %2904, i64 2
  %2906 = extractelement <4 x i64> %2893, i64 3
  %2907 = getelementptr inbounds float, ptr %f4.host, i64 %2906
  %2908 = load float, ptr %2907, align 4, !tbaa !44
  %2909 = insertelement <4 x float> %2905, float %2908, i64 3
  %2910 = fmul <4 x float> %2909, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2911 = insertelement <4 x i32> undef, i32 %t2431, i64 0
  %2912 = shufflevector <4 x i32> %2911, <4 x i32> undef, <4 x i32> zeroinitializer
  %2913 = add <4 x i32> %2912, <i32 -1, i32 0, i32 1, i32 2>
  %2914 = add <4 x i32> %2913, %t2438
  %2915 = sext <4 x i32> %2914 to <4 x i64>
  %2916 = extractelement <4 x i64> %2915, i64 0
  %2917 = getelementptr inbounds float, ptr %f4.host, i64 %2916
  %2918 = load float, ptr %2917, align 4, !tbaa !44
  %2919 = insertelement <4 x float> undef, float %2918, i64 0
  %2920 = extractelement <4 x i64> %2915, i64 1
  %2921 = getelementptr inbounds float, ptr %f4.host, i64 %2920
  %2922 = load float, ptr %2921, align 4, !tbaa !44
  %2923 = insertelement <4 x float> %2919, float %2922, i64 1
  %2924 = extractelement <4 x i64> %2915, i64 2
  %2925 = getelementptr inbounds float, ptr %f4.host, i64 %2924
  %2926 = load float, ptr %2925, align 4, !tbaa !44
  %2927 = insertelement <4 x float> %2923, float %2926, i64 2
  %2928 = extractelement <4 x i64> %2915, i64 3
  %2929 = getelementptr inbounds float, ptr %f4.host, i64 %2928
  %2930 = load float, ptr %2929, align 4, !tbaa !44
  %2931 = insertelement <4 x float> %2927, float %2930, i64 3
  %2932 = fmul <4 x float> %2931, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2933 = fadd <4 x float> %2910, %2932
  %2934 = fmul <4 x float> %2933, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2935 = fadd <4 x float> %2888, %2934
  %2936 = sext <4 x i32> %t2429 to <4 x i64>
  %2937 = extractelement <4 x i64> %2936, i64 0
  %2938 = getelementptr inbounds float, ptr %f0.host, i64 %2937
  %2939 = load float, ptr %2938, align 4, !tbaa !6
  %2940 = insertelement <4 x float> undef, float %2939, i64 0
  %2941 = extractelement <4 x i64> %2936, i64 1
  %2942 = getelementptr inbounds float, ptr %f0.host, i64 %2941
  %2943 = load float, ptr %2942, align 4, !tbaa !6
  %2944 = insertelement <4 x float> %2940, float %2943, i64 1
  %2945 = extractelement <4 x i64> %2936, i64 2
  %2946 = getelementptr inbounds float, ptr %f0.host, i64 %2945
  %2947 = load float, ptr %2946, align 4, !tbaa !6
  %2948 = insertelement <4 x float> %2944, float %2947, i64 2
  %2949 = extractelement <4 x i64> %2936, i64 3
  %2950 = getelementptr inbounds float, ptr %f0.host, i64 %2949
  %2951 = load float, ptr %2950, align 4, !tbaa !6
  %2952 = insertelement <4 x float> %2948, float %2951, i64 3
  %2953 = fsub <4 x float> %t2397, %t2426
  %2954 = fmul <4 x float> %2555, %2953
  %2955 = fadd <4 x float> %t2426, %2954
  %2956 = fadd <4 x float> %2955, %2952
  %2957 = fsub <4 x float> %2956, %2935
  %2958 = fsub <4 x float> %t2399, %t2424
  %2959 = fmul <4 x float> %2958, %2957
  %2960 = add nsw <4 x i32> %t2433, %2845
  %2961 = sext <4 x i32> %2960 to <4 x i64>
  %2962 = extractelement <4 x i64> %2961, i64 0
  %2963 = getelementptr inbounds float, ptr %f4.host, i64 %2962
  %2964 = load float, ptr %2963, align 4, !tbaa !44
  %2965 = insertelement <4 x float> undef, float %2964, i64 0
  %2966 = extractelement <4 x i64> %2961, i64 1
  %2967 = getelementptr inbounds float, ptr %f4.host, i64 %2966
  %2968 = load float, ptr %2967, align 4, !tbaa !44
  %2969 = insertelement <4 x float> %2965, float %2968, i64 1
  %2970 = extractelement <4 x i64> %2961, i64 2
  %2971 = getelementptr inbounds float, ptr %f4.host, i64 %2970
  %2972 = load float, ptr %2971, align 4, !tbaa !44
  %2973 = insertelement <4 x float> %2969, float %2972, i64 2
  %2974 = extractelement <4 x i64> %2961, i64 3
  %2975 = getelementptr inbounds float, ptr %f4.host, i64 %2974
  %2976 = load float, ptr %2975, align 4, !tbaa !44
  %2977 = insertelement <4 x float> %2973, float %2976, i64 3
  %2978 = fmul <4 x float> %2977, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2979 = add <4 x i32> %t2433, %2866
  %2980 = add <4 x i32> %2979, <i32 -1, i32 0, i32 1, i32 2>
  %2981 = sext <4 x i32> %2980 to <4 x i64>
  %2982 = extractelement <4 x i64> %2981, i64 0
  %2983 = getelementptr inbounds float, ptr %f4.host, i64 %2982
  %2984 = load float, ptr %2983, align 4, !tbaa !44
  %2985 = insertelement <4 x float> undef, float %2984, i64 0
  %2986 = extractelement <4 x i64> %2981, i64 1
  %2987 = getelementptr inbounds float, ptr %f4.host, i64 %2986
  %2988 = load float, ptr %2987, align 4, !tbaa !44
  %2989 = insertelement <4 x float> %2985, float %2988, i64 1
  %2990 = extractelement <4 x i64> %2981, i64 2
  %2991 = getelementptr inbounds float, ptr %f4.host, i64 %2990
  %2992 = load float, ptr %2991, align 4, !tbaa !44
  %2993 = insertelement <4 x float> %2989, float %2992, i64 2
  %2994 = extractelement <4 x i64> %2981, i64 3
  %2995 = getelementptr inbounds float, ptr %f4.host, i64 %2994
  %2996 = load float, ptr %2995, align 4, !tbaa !44
  %2997 = insertelement <4 x float> %2993, float %2996, i64 3
  %2998 = fmul <4 x float> %2997, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2999 = fadd <4 x float> %2978, %2998
  %3000 = fmul <4 x float> %2999, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3001 = add nsw <4 x i32> %t2433, %2891
  %3002 = sext <4 x i32> %3001 to <4 x i64>
  %3003 = extractelement <4 x i64> %3002, i64 0
  %3004 = getelementptr inbounds float, ptr %f4.host, i64 %3003
  %3005 = load float, ptr %3004, align 4, !tbaa !44
  %3006 = insertelement <4 x float> undef, float %3005, i64 0
  %3007 = extractelement <4 x i64> %3002, i64 1
  %3008 = getelementptr inbounds float, ptr %f4.host, i64 %3007
  %3009 = load float, ptr %3008, align 4, !tbaa !44
  %3010 = insertelement <4 x float> %3006, float %3009, i64 1
  %3011 = extractelement <4 x i64> %3002, i64 2
  %3012 = getelementptr inbounds float, ptr %f4.host, i64 %3011
  %3013 = load float, ptr %3012, align 4, !tbaa !44
  %3014 = insertelement <4 x float> %3010, float %3013, i64 2
  %3015 = extractelement <4 x i64> %3002, i64 3
  %3016 = getelementptr inbounds float, ptr %f4.host, i64 %3015
  %3017 = load float, ptr %3016, align 4, !tbaa !44
  %3018 = insertelement <4 x float> %3014, float %3017, i64 3
  %3019 = fmul <4 x float> %3018, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3020 = add <4 x i32> %t2433, %2912
  %3021 = add <4 x i32> %3020, <i32 -1, i32 0, i32 1, i32 2>
  %3022 = sext <4 x i32> %3021 to <4 x i64>
  %3023 = extractelement <4 x i64> %3022, i64 0
  %3024 = getelementptr inbounds float, ptr %f4.host, i64 %3023
  %3025 = load float, ptr %3024, align 4, !tbaa !44
  %3026 = insertelement <4 x float> undef, float %3025, i64 0
  %3027 = extractelement <4 x i64> %3022, i64 1
  %3028 = getelementptr inbounds float, ptr %f4.host, i64 %3027
  %3029 = load float, ptr %3028, align 4, !tbaa !44
  %3030 = insertelement <4 x float> %3026, float %3029, i64 1
  %3031 = extractelement <4 x i64> %3022, i64 2
  %3032 = getelementptr inbounds float, ptr %f4.host, i64 %3031
  %3033 = load float, ptr %3032, align 4, !tbaa !44
  %3034 = insertelement <4 x float> %3030, float %3033, i64 2
  %3035 = extractelement <4 x i64> %3022, i64 3
  %3036 = getelementptr inbounds float, ptr %f4.host, i64 %3035
  %3037 = load float, ptr %3036, align 4, !tbaa !44
  %3038 = insertelement <4 x float> %3034, float %3037, i64 3
  %3039 = fmul <4 x float> %3038, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3040 = fadd <4 x float> %3019, %3039
  %3041 = fmul <4 x float> %3040, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3042 = fadd <4 x float> %3000, %3041
  %3043 = add nsw <4 x i32> %t2429, <i32 256, i32 256, i32 256, i32 256>
  %3044 = sext <4 x i32> %3043 to <4 x i64>
  %3045 = extractelement <4 x i64> %3044, i64 0
  %3046 = getelementptr inbounds float, ptr %f0.host, i64 %3045
  %3047 = load float, ptr %3046, align 4, !tbaa !6
  %3048 = insertelement <4 x float> undef, float %3047, i64 0
  %3049 = extractelement <4 x i64> %3044, i64 1
  %3050 = getelementptr inbounds float, ptr %f0.host, i64 %3049
  %3051 = load float, ptr %3050, align 4, !tbaa !6
  %3052 = insertelement <4 x float> %3048, float %3051, i64 1
  %3053 = extractelement <4 x i64> %3044, i64 2
  %3054 = getelementptr inbounds float, ptr %f0.host, i64 %3053
  %3055 = load float, ptr %3054, align 4, !tbaa !6
  %3056 = insertelement <4 x float> %3052, float %3055, i64 2
  %3057 = extractelement <4 x i64> %3044, i64 3
  %3058 = getelementptr inbounds float, ptr %f0.host, i64 %3057
  %3059 = load float, ptr %3058, align 4, !tbaa !6
  %3060 = insertelement <4 x float> %3056, float %3059, i64 3
  %3061 = fsub <4 x float> %t2397, %t2425
  %3062 = fmul <4 x float> %2555, %3061
  %3063 = fadd <4 x float> %t2425, %3062
  %3064 = fadd <4 x float> %3063, %3060
  %3065 = fsub <4 x float> %3064, %3042
  %3066 = fsub <4 x float> %t2424, %t2399
  %3067 = fadd <4 x float> %3066, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3068 = fmul <4 x float> %3067, %3065
  %3069 = fadd <4 x float> %2959, %3068
  %3070 = sext i32 %2582 to i64
  %3071 = sub nsw i64 %3070, %1964
  %3072 = add nsw i64 %3071, %2556
  %3073 = getelementptr inbounds float, ptr %223, i64 %3072
  %3074 = load <4 x float>, ptr %3073, align 4, !tbaa !70
  %3075 = fmul <4 x float> %3074, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3076 = sext i32 %t2422 to i64
  %3077 = sub nsw i64 %3076, %1964
  %3078 = add nsw i64 %2557, %3077
  %3079 = getelementptr inbounds float, ptr %223, i64 %3078
  %3080 = load <4 x float>, ptr %3079, align 4, !tbaa !70
  %3081 = fmul <4 x float> %3080, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3082 = fadd <4 x float> %3075, %3081
  %3083 = fmul <4 x float> %3082, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3084 = add nsw i64 %3071, %2558
  %3085 = getelementptr inbounds float, ptr %223, i64 %3084
  %3086 = load <4 x float>, ptr %3085, align 4, !tbaa !70
  %3087 = fmul <4 x float> %3086, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3088 = add nsw i64 %2559, %3077
  %3089 = getelementptr inbounds float, ptr %223, i64 %3088
  %3090 = load <4 x float>, ptr %3089, align 4, !tbaa !70
  %3091 = fmul <4 x float> %3090, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3092 = fadd <4 x float> %3087, %3091
  %3093 = fmul <4 x float> %3092, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3094 = fadd <4 x float> %3083, %3093
  %3095 = fadd <4 x float> %3069, %3094
  %3096 = shufflevector <4 x float> %2842, <4 x float> %3095, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %3097 = sext i32 %f125.s0.v3.v366.base to i64
  %3098 = sub nsw i64 %3097, %2560
  %3099 = getelementptr inbounds float, ptr %2527, i64 %3098
  store <8 x float> %3096, ptr %3099, align 4, !tbaa !72
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next407 = add i32 %lsr.iv406, 8
  %.not150 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not150, label %"consume f125", label %"for f125.s0.v3.v3"

"consume f125":                                   ; preds = %"for f125.s0.v3.v3", %"produce f125"
  %3100 = add nsw i32 %local_laplacian.extent.0, 7
  %3101 = ashr i32 %3100, 3
  %3102 = icmp sgt i32 %local_laplacian.extent.0, 0
  %3103 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %3104 = shl nsw i64 %76, 1
  %3105 = add nsw i64 %6, 1
  %3106 = sub nsw i64 %3103, %10
  br i1 %3102, label %"for local_laplacian.s0.v3.v3.preheader", label %"consume f125.if.then.i253_crit_edge", !prof !5

"consume f125.if.then.i253_crit_edge":            ; preds = %"consume f125"
  %.pre335 = sext i32 %196 to i64
  %.pre337 = add nsw i32 %input.min.0, %input.extent.0
  %.pre339 = add nsw i32 %.pre337, -1
  %.pre344 = mul nsw i32 %input.stride.2, %b1146
  %.pre346 = mul nsw i32 %input.stride.1, %b1148
  %.pre348 = add nsw i32 %.pre346, %input.min.0
  %.pre350 = add nsw i32 %.pre348, %.pre344
  %.pre352 = add nsw i32 %b1146, %input.extent.2
  %.pre354 = add nsw i32 %.pre352, -1
  %.pre355 = insertelement <8 x i32> undef, i32 %.pre339, i64 0
  %.pre357 = shufflevector <8 x i32> %.pre355, <8 x i32> undef, <8 x i32> zeroinitializer
  %.pre358 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %.pre360 = shufflevector <8 x i32> %.pre358, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %if.then.i253

"for local_laplacian.s0.v3.v3.preheader":         ; preds = %"consume f125"
  %3107 = icmp sgt i32 %local_laplacian.extent.2, 0
  %reass.add223 = sub nsw i64 %3103, %67
  %reass.mul224 = mul nsw i64 %reass.add223, %74
  %3108 = mul nsw i64 %3106, %3105
  %3109 = sub i64 %3108, %8
  %3110 = mul nsw i32 %input.stride.2, %b1146
  %3111 = mul nsw i32 %input.stride.1, %b1148
  %3112 = add nsw i32 %3111, %input.min.0
  %3113 = add nsw i32 %3112, %3110
  %3114 = add nsw i32 %b1146, %input.extent.2
  %b885 = add nsw i32 %3114, -1
  %3115 = mul nsw i32 %local_laplacian.s0.v4.v4.base, %input.stride.1
  %3116 = add nsw i32 %input.min.0, %input.extent.0
  %3117 = add nsw i32 %3116, -1
  %3118 = insertelement <8 x i32> undef, i32 %3117, i64 0
  %b887 = shufflevector <8 x i32> %3118, <8 x i32> undef, <8 x i32> zeroinitializer
  %3119 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b886 = shufflevector <8 x i32> %3119, <8 x i32> undef, <8 x i32> zeroinitializer
  %3120 = sext i32 %196 to i64
  br label %"for local_laplacian.s0.v3.v3"

"for local_laplacian.s0.v3.v3":                   ; preds = %"end for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3.preheader"
  %local_laplacian.s0.v3.v3 = phi i32 [ %3411, %"end for local_laplacian.s0.v5" ], [ 0, %"for local_laplacian.s0.v3.v3.preheader" ]
  br i1 %3107, label %"for local_laplacian.s0.v5.preheader", label %"end for local_laplacian.s0.v5", !prof !5

"for local_laplacian.s0.v5.preheader":            ; preds = %"for local_laplacian.s0.v3.v3"
  %3121 = shl nsw i32 %local_laplacian.s0.v3.v3, 3
  %a879 = add nsw i32 %3121, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a879)
  %3122 = sext i32 %local_laplacian.s0.v3.v277.base to i64
  %3123 = sub nsw i64 %3122, %63
  %3124 = add i64 %3123, %reass.mul224
  %scevgep399 = getelementptr i16, ptr %local_laplacian.host, i64 %3124
  %3125 = add i64 %3109, %3122
  %3126 = getelementptr inbounds float, ptr %f2.host, i64 %3125
  %3127 = load <8 x float>, ptr %3126, align 4, !tbaa !42
  %3128 = fadd <8 x float> %3127, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3129 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base, i64 0
  %3130 = shufflevector <8 x i32> %3129, <8 x i32> undef, <8 x i32> zeroinitializer
  %a885 = add nsw <8 x i32> %3130, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a884 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b887, <8 x i32> %a885)
  %3131 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a884, <8 x i32> %b886)
  %3132 = sub nsw i64 %3122, %3120
  %3133 = getelementptr inbounds float, ptr %2527, i64 %3132
  %3134 = load <8 x float>, ptr %3133, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5"

if.then.i253:                                     ; preds = %"end for local_laplacian.s0.v5", %"consume f125.if.then.i253_crit_edge"
  %b1020.pre-phi = phi <8 x i32> [ %.pre360, %"consume f125.if.then.i253_crit_edge" ], [ %b886, %"end for local_laplacian.s0.v5" ]
  %b1021.pre-phi = phi <8 x i32> [ %.pre357, %"consume f125.if.then.i253_crit_edge" ], [ %b887, %"end for local_laplacian.s0.v5" ]
  %b1019.pre-phi = phi i32 [ %.pre354, %"consume f125.if.then.i253_crit_edge" ], [ %b885, %"end for local_laplacian.s0.v5" ]
  %.pre-phi353 = phi i32 [ %.pre352, %"consume f125.if.then.i253_crit_edge" ], [ %3114, %"end for local_laplacian.s0.v5" ]
  %.pre-phi351 = phi i32 [ %.pre350, %"consume f125.if.then.i253_crit_edge" ], [ %3113, %"end for local_laplacian.s0.v5" ]
  %b1014.pre-phi = phi i32 [ %.pre339, %"consume f125.if.then.i253_crit_edge" ], [ %3117, %"end for local_laplacian.s0.v5" ]
  %.pre-phi338 = phi i32 [ %.pre337, %"consume f125.if.then.i253_crit_edge" ], [ %3116, %"end for local_laplacian.s0.v5" ]
  %.pre-phi336 = phi i64 [ %.pre335, %"consume f125.if.then.i253_crit_edge" ], [ %3120, %"end for local_laplacian.s0.v5" ]
  tail call void @halide_free(ptr %__user_context, ptr nonnull %2527) #7
  %3135 = shl nsw i64 %65, 2
  %3136 = add i32 %a1120, 1
  %3137 = zext i32 %14 to i64
  %3138 = xor i32 %f4.v4.min_realized, -1
  %3139 = add i32 %local_laplacian.s0.v4.v4.base, 1
  %3140 = and i32 %3139, 1
  %3141 = icmp ne i32 %3140, 0
  %3142 = shl i32 %3136, 1
  %3143 = and i32 %3142, 2
  %3144 = sub i32 %3139, %f2.v4.min_realized
  %3145 = add i32 %f2.v3.extent_realized.s, 1
  %3146 = mul i32 %3144, %3145
  %3147 = sub i32 %a1120, %f2.v3.min_realized
  %3148 = add i32 %3147, %3146
  %3149 = shl i32 %a1120, 1
  %3150 = and i32 %3149, 2
  %3151 = add nsw i64 %3103, 1
  %3152 = mul nsw i64 %3151, %74
  %3153 = mul nsw i64 %74, %67
  %3154 = add nsw i64 %3153, %63
  %3155 = sub i64 %3152, %3154
  %3156 = mul nsw i64 %76, %70
  %3157 = add i64 %3154, %3156
  %3158 = sub i64 %3152, %3157
  %3159 = mul nsw i64 %3151, %54
  %3160 = mul nsw i64 %51, %54
  %3161 = mul nsw i64 %b1037, %56
  %3162 = add nsw i64 %3160, %49
  %3163 = add i64 %3162, %3161
  %3164 = sub i64 %3159, %3163
  %3165 = shl nsw i64 %56, 1
  %3166 = add i32 %b1028, %local_laplacian.extent.2
  %a886 = sub nsw i32 %b793, %107
  %3167 = icmp sgt i32 %109, %b793
  %f129.s0.v3.v3.epilogue.s = select i1 %3167, i32 %a886, i32 %110
  %3168 = ashr i32 %f129.s0.v3.v3.epilogue.s, 3
  %a887 = add nsw i32 %3168, 1
  %.inv141 = icmp slt i32 %f129.s0.v3.v3.epilogue.s, 0
  %3169 = select i1 %.inv141, i32 0, i32 %a887
  %3170 = icmp sgt i32 %3169, 0
  %3171 = shl nsw i32 %107, 1
  %3172 = and i32 %3171, 2
  %3173 = sub i32 %107, %f75.v3.min_realized
  %3174 = sub i32 %107, %f7.v3.min_realized
  %.not142 = icmp slt i32 %124, %3169
  %3175 = shl nsw i32 %b793, 1
  %3176 = and i32 %3175, 2
  %3177 = ashr i32 %b787, 5
  %t2480 = add nsw i32 %3176, %3177
  %3178 = sub i32 %b793, %f75.v3.min_realized
  %3179 = sub nsw i32 %b793, %f7.v3.min_realized
  %3180 = add nsw i32 %96, -67
  %3181 = lshr i32 %3180, 3
  %3182 = and i32 %3181, 2
  %3183 = ashr i32 %3180, 5
  %t2502 = add nsw i32 %3182, %3183
  %3184 = sub nsw i32 %3177, %f8.v3.min_realized
  %3185 = sub nsw i32 %t2480, %f8.v3.min_realized
  %3186 = sext i32 %3177 to i64
  %3187 = sub nsw i64 %3186, %4
  %3188 = sext i32 %t2480 to i64
  %3189 = xor i64 %4, -1
  %3190 = add nsw i64 %3189, %3188
  %3191 = sub nsw i32 %3183, %f8.v3.min_realized
  %3192 = sub nsw i32 %t2502, %f8.v3.min_realized
  %3193 = sext i32 %3183 to i64
  %3194 = sub nsw i64 %3193, %4
  %3195 = sext i32 %t2502 to i64
  %3196 = xor i64 %4, -1
  %3197 = add nsw i64 %3196, %3195
  %narrow144 = sub nsw i32 %b793, %f129.v3.min_realized
  %3198 = sext i32 %narrow144 to i64
  %a906 = sub nsw i32 %b792, %100
  %3199 = icmp sgt i32 %102, %b792
  %f128.s0.v3.v3.epilogue.s = select i1 %3199, i32 %a906, i32 %103
  %3200 = ashr i32 %f128.s0.v3.v3.epilogue.s, 3
  %a907 = add nsw i32 %3200, 1
  %.inv128 = icmp slt i32 %f128.s0.v3.v3.epilogue.s, 0
  %3201 = select i1 %.inv128, i32 0, i32 %a907
  %3202 = icmp sgt i32 %3201, 0
  %3203 = shl nsw i32 %100, 1
  %3204 = and i32 %3203, 2
  %3205 = sub i32 %100, %f74.v3.min_realized
  %3206 = sub i32 %100, %f6.v3.min_realized
  %.not129 = icmp slt i32 %123, %3201
  %3207 = shl nsw i32 %b792, 1
  %3208 = and i32 %3207, 2
  %3209 = ashr i32 %b786, 4
  %t2557 = add nsw i32 %3208, %3209
  %3210 = sub i32 %b792, %f74.v3.min_realized
  %3211 = sub nsw i32 %b792, %f6.v3.min_realized
  %3212 = sub nsw i32 %t2557, %f7.v3.min_realized
  %3213 = sub nsw i32 %3209, %f7.v3.min_realized
  %3214 = add nsw i32 %96, -35
  %3215 = lshr i32 %3214, 2
  %3216 = and i32 %3215, 2
  %3217 = ashr i32 %3214, 4
  %t2579 = add nsw i32 %3216, %3217
  %3218 = sub nsw i32 %t2579, %f7.v3.min_realized
  %3219 = sub nsw i32 %3217, %f7.v3.min_realized
  %narrow130 = sub nsw i32 %3209, %f129.v3.min_realized
  %3220 = sext i32 %narrow130 to i64
  %3221 = xor i32 %f129.v3.min_realized, -1
  %narrow361 = add nsw i32 %t2557, %3221
  %3222 = sext i32 %narrow361 to i64
  %narrow132 = sub nsw i32 %3217, %f129.v3.min_realized
  %3223 = sext i32 %narrow132 to i64
  %3224 = xor i32 %f129.v3.min_realized, -1
  %narrow362 = add nsw i32 %t2579, %3224
  %3225 = sext i32 %narrow362 to i64
  %narrow135 = sub nsw i32 %b792, %f128.v3.min_realized
  %3226 = sext i32 %narrow135 to i64
  %a926 = sub nsw i32 %b801, %136
  %3227 = icmp sgt i32 %138, %b801
  %f127.s0.v3.v3.epilogue.s = select i1 %3227, i32 %a926, i32 %139
  %3228 = ashr i32 %f127.s0.v3.v3.epilogue.s, 3
  %a927 = add nsw i32 %3228, 1
  %.inv = icmp slt i32 %f127.s0.v3.v3.epilogue.s, 0
  %3229 = select i1 %.inv, i32 0, i32 %a927
  %3230 = icmp sgt i32 %3229, 0
  %3231 = shl nsw i32 %136, 1
  %3232 = and i32 %3231, 2
  %3233 = sub i32 %136, %f73.v3.min_realized
  %3234 = sub i32 %136, %f5.v3.min_realized
  %.not119 = icmp slt i32 %140, %3229
  %3235 = shl nsw i32 %b801, 1
  %3236 = and i32 %3235, 2
  %3237 = ashr i32 %b795, 3
  %t2634 = add nsw i32 %3236, %3237
  %3238 = sub i32 %b801, %f73.v3.min_realized
  %3239 = sub nsw i32 %b801, %f5.v3.min_realized
  %3240 = sub nsw i32 %t2634, %f6.v3.min_realized
  %3241 = sub nsw i32 %3237, %f6.v3.min_realized
  %3242 = add nsw i32 %96, -19
  %3243 = lshr i32 %3242, 1
  %3244 = and i32 %3243, 2
  %3245 = ashr i32 %3242, 3
  %t2656 = add nsw i32 %3244, %3245
  %3246 = sub nsw i32 %t2656, %f6.v3.min_realized
  %3247 = sub nsw i32 %3245, %f6.v3.min_realized
  %narrow120 = sub nsw i32 %3237, %f128.v3.min_realized
  %3248 = sext i32 %narrow120 to i64
  %3249 = xor i32 %f128.v3.min_realized, -1
  %narrow363 = add nsw i32 %t2634, %3249
  %3250 = sext i32 %narrow363 to i64
  %narrow122 = sub nsw i32 %3245, %f128.v3.min_realized
  %3251 = sext i32 %narrow122 to i64
  %3252 = xor i32 %f128.v3.min_realized, -1
  %narrow364 = add nsw i32 %t2656, %3252
  %3253 = sext i32 %narrow364 to i64
  %3254 = sext i32 %b801 to i64
  %3255 = sub nsw i64 %3254, %1397
  %a946 = sub nsw i32 %b806, %162
  %3256 = icmp sgt i32 %167, %b806
  %f126.s0.v3.v3.epilogue.s = select i1 %3256, i32 %a946, i32 %168
  %3257 = add nsw i32 %f126.s0.v3.v3.epilogue.s, 9
  %a947 = ashr i32 %3257, 3
  %3258 = icmp sgt i32 %f126.s0.v3.v3.epilogue.s, -2
  %3259 = select i1 %3258, i32 %a947, i32 0
  %3260 = icmp sgt i32 %3259, 0
  %3261 = sub i32 %162, %f72.v3.min_realized
  %3262 = sub i32 %162, %f4.v3.min_realized
  %3263 = and i32 %a1120, 2
  %3264 = xor i32 %f126.v3.min_realized, -1
  %3265 = sext i32 %3264 to i64
  %3266 = icmp sgt i32 %1953, %3259
  %3267 = and i32 %163, 2
  %3268 = ashr i32 %163, 2
  %t2711 = add nsw i32 %3268, %3267
  %3269 = sub i32 %b806, %f72.v3.min_realized
  %3270 = sub nsw i32 %b806, %f4.v3.min_realized
  %3271 = sub nsw i32 %t2711, %f5.v3.min_realized
  %3272 = sub nsw i32 %3268, %f5.v3.min_realized
  %3273 = add nsw i32 %96, -11
  %3274 = and i32 %3273, 2
  %3275 = ashr i32 %3273, 2
  %t2733 = add nsw i32 %3275, %3274
  %3276 = sub nsw i32 %t2733, %f5.v3.min_realized
  %3277 = sub nsw i32 %3275, %f5.v3.min_realized
  %3278 = sext i32 %3268 to i64
  %3279 = sub nsw i64 %3278, %1397
  %3280 = sext i32 %t2711 to i64
  %3281 = xor i64 %1397, -1
  %3282 = add nsw i64 %3281, %3280
  %3283 = sext i32 %3275 to i64
  %3284 = sub nsw i64 %3283, %1397
  %3285 = sext i32 %t2733 to i64
  %3286 = xor i64 %1397, -1
  %3287 = add nsw i64 %3286, %3285
  %3288 = sext i32 %b806 to i64
  %3289 = sub nsw i64 %3288, %1964
  %a970 = ashr i32 %198, 3
  %3290 = icmp sgt i32 %198, 7
  %3291 = select i1 %3290, i32 %a970, i32 0
  %3292 = icmp sgt i32 %3291, 0
  %3293 = mul nsw i64 %.pre-phi336, -4
  %3294 = fdiv float 1.000000e+00, %231
  %3295 = insertelement <4 x float> undef, float %3294, i64 0
  %3296 = shufflevector <4 x float> %3295, <4 x float> undef, <4 x i32> zeroinitializer
  %3297 = xor i32 %159, -1
  %3298 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %3299 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %3298
  %.neg245 = shufflevector <4 x i32> %3299, <4 x i32> poison, <4 x i32> zeroinitializer
  %3300 = shl nsw i32 %levels, 8
  %3301 = add nsw i32 %3300, -256
  %3302 = insertelement <4 x i32> undef, i32 %3301, i64 0
  %b978 = shufflevector <4 x i32> %3302, <4 x i32> undef, <4 x i32> zeroinitializer
  %3303 = ashr i32 %3136, 1
  %3304 = insertelement <4 x float> undef, float %beta, i64 0
  %3305 = shufflevector <4 x float> %3304, <4 x float> undef, <4 x i32> zeroinitializer
  %3306 = add nsw i32 %3150, %162
  %3307 = add nsw i32 %3143, %3303
  %3308 = icmp sgt i32 %2530, %3291
  %3309 = shl i32 %96, 1
  %3310 = and i32 %3309, 2
  %3311 = ashr i32 %96, 1
  %t2801 = add nsw i32 %3310, %3311
  %3312 = sub i32 %96, %f2.v3.min_realized
  %3313 = sub nsw i32 %t2801, %f4.v3.min_realized
  %3314 = sub nsw i32 %3311, %f4.v3.min_realized
  %3315 = add nsw i32 %96, -7
  %3316 = shl i32 %3315, 1
  %3317 = and i32 %3316, 2
  %3318 = ashr i32 %3315, 1
  %t2828 = add nsw i32 %3317, %3318
  %3319 = sub nsw i32 %t2828, %f4.v3.min_realized
  %3320 = sub nsw i32 %3318, %f4.v3.min_realized
  %t2826 = add i32 %3314, -4
  %t2825 = add i32 %3313, -4
  %3321 = sext i32 %3311 to i64
  %3322 = sub nsw i64 %3321, %1964
  %3323 = add nsw i64 %3322, -4
  %3324 = sext i32 %t2801 to i64
  %3325 = sub nsw i64 %3324, %1964
  %3326 = add nsw i64 %3325, -5
  %3327 = sext i32 %3318 to i64
  %3328 = sub nsw i64 %3327, %1964
  %3329 = sext i32 %t2828 to i64
  %3330 = xor i64 %1964, -1
  %3331 = add nsw i64 %3330, %3329
  %3332 = add nsw i64 %59, -8
  %3333 = add nsw i64 %3332, %63
  %3334 = sub nsw i64 %3333, %.pre-phi336
  %3335 = sub nsw i32 %input.min.0, %local_laplacian.min.0
  %3336 = add nsw i32 %3335, 7
  %a1006 = ashr i32 %3336, 3
  %3337 = icmp sgt i32 %3335, 0
  %3338 = select i1 %3337, i32 %a1006, i32 0
  %local_laplacian.s0.v3.v3.prologue = tail call i32 @llvm.smin.i32(i32 %3101, i32 %3338)
  %3339 = sub nsw i32 %.pre-phi338, %local_laplacian.min.0
  %3340 = ashr i32 %3339, 3
  %a1011 = add nsw i32 %3340, -1
  %3341 = tail call i32 @llvm.smin.i32(i32 %b1014.pre-phi, i32 %b816)
  %3342 = sub nsw i32 %3341, %local_laplacian.min.0
  %b1013 = ashr i32 %3342, 3
  %.not175 = icmp slt i32 %b1013, %3340
  %a1010 = select i1 %.not175, i32 %b1013, i32 %a1011
  %3343 = add nsw i32 %local_laplacian.extent.0, -1
  %b1012 = ashr i32 %3343, 3
  %3344 = tail call i32 @llvm.smin.i32(i32 %b1012, i32 %a1010)
  %b1009 = add nsw i32 %3344, 1
  %local_laplacian.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v3.v3.prologue, i32 %b1009)
  %3345 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, 0
  %3346 = icmp slt i32 %b1028, %3166
  %.not176 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, %3344
  %a1021 = tail call i32 @llvm.smax.i32(i32 %b1146, i32 %b1028)
  %local_laplacian.s0.v5.prologue = tail call i32 @llvm.smin.i32(i32 %3166, i32 %a1021)
  %a1023 = tail call i32 @llvm.smin.i32(i32 %3166, i32 %.pre-phi353)
  %local_laplacian.s0.v5.epilogue = tail call i32 @llvm.smax.i32(i32 %a1023, i32 %local_laplacian.s0.v5.prologue)
  %3347 = icmp slt i32 %b1028, %local_laplacian.s0.v5.prologue
  %3348 = icmp slt i32 %local_laplacian.s0.v5.prologue, %a1023
  %3349 = icmp slt i32 %local_laplacian.s0.v5.epilogue, %3166
  %3350 = add nsw i64 %47, -1
  %b1032 = add nsw i64 %3350, %b1037
  %3351 = sub nsw i32 %local_laplacian.s0.v5.epilogue, %local_laplacian.s0.v5.prologue
  %3352 = sext i32 %local_laplacian.s0.v5.prologue to i64
  %3353 = mul nsw i64 %76, %3352
  %3354 = mul nsw i64 %3352, %56
  %3355 = sext i32 %local_laplacian.s0.v5.epilogue to i64
  %3356 = mul nsw i64 %76, %3355
  %3357 = icmp slt i32 %local_laplacian.s0.v3.v3.epilogue, %3101
  %3358 = sext i32 %3145 to i64
  %3359 = sext i32 %3312 to i64
  br label %"produce f12919"

"for local_laplacian.s0.v5":                      ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v5.preheader"
  %lsr.iv400 = phi ptr [ %scevgep399, %"for local_laplacian.s0.v5.preheader" ], [ %scevgep402, %"for local_laplacian.s0.v5" ]
  %lsr.iv397 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5.preheader" ], [ %lsr.iv.next398, %"for local_laplacian.s0.v5" ]
  %a883 = phi i32 [ %b1028, %"for local_laplacian.s0.v5.preheader" ], [ %3410, %"for local_laplacian.s0.v5" ]
  %a882 = tail call i32 @llvm.smin.i32(i32 %b885, i32 %a883)
  %3360 = tail call i32 @llvm.smax.i32(i32 %a882, i32 %b1146)
  %3361 = mul nsw i32 %3360, %input.stride.2
  %.scalar = add i32 %3361, %3115
  %.scalar326 = sub i32 %.scalar, %3113
  %3362 = insertelement <8 x i32> undef, i32 %.scalar326, i64 0
  %3363 = shufflevector <8 x i32> %3362, <8 x i32> poison, <8 x i32> zeroinitializer
  %3364 = add <8 x i32> %3363, %3131
  %3365 = shufflevector <8 x i32> %3364, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3366 = sext <4 x i32> %3365 to <4 x i64>
  %3367 = extractelement <4 x i64> %3366, i64 0
  %3368 = getelementptr inbounds i16, ptr %input.host, i64 %3367
  %3369 = load i16, ptr %3368, align 2, !tbaa !40
  %3370 = insertelement <8 x i16> undef, i16 %3369, i64 0
  %3371 = extractelement <4 x i64> %3366, i64 1
  %3372 = getelementptr inbounds i16, ptr %input.host, i64 %3371
  %3373 = load i16, ptr %3372, align 2, !tbaa !40
  %3374 = insertelement <8 x i16> %3370, i16 %3373, i64 1
  %3375 = extractelement <4 x i64> %3366, i64 2
  %3376 = getelementptr inbounds i16, ptr %input.host, i64 %3375
  %3377 = load i16, ptr %3376, align 2, !tbaa !40
  %3378 = insertelement <8 x i16> %3374, i16 %3377, i64 2
  %3379 = extractelement <4 x i64> %3366, i64 3
  %3380 = getelementptr inbounds i16, ptr %input.host, i64 %3379
  %3381 = load i16, ptr %3380, align 2, !tbaa !40
  %3382 = insertelement <8 x i16> %3378, i16 %3381, i64 3
  %3383 = shufflevector <8 x i32> %3364, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3384 = sext <4 x i32> %3383 to <4 x i64>
  %3385 = extractelement <4 x i64> %3384, i64 0
  %3386 = getelementptr inbounds i16, ptr %input.host, i64 %3385
  %3387 = load i16, ptr %3386, align 2, !tbaa !40
  %3388 = insertelement <8 x i16> %3382, i16 %3387, i64 4
  %3389 = extractelement <4 x i64> %3384, i64 1
  %3390 = getelementptr inbounds i16, ptr %input.host, i64 %3389
  %3391 = load i16, ptr %3390, align 2, !tbaa !40
  %3392 = insertelement <8 x i16> %3388, i16 %3391, i64 5
  %3393 = extractelement <4 x i64> %3384, i64 2
  %3394 = getelementptr inbounds i16, ptr %input.host, i64 %3393
  %3395 = load i16, ptr %3394, align 2, !tbaa !40
  %3396 = insertelement <8 x i16> %3392, i16 %3395, i64 6
  %3397 = extractelement <4 x i64> %3384, i64 3
  %3398 = getelementptr inbounds i16, ptr %input.host, i64 %3397
  %3399 = load i16, ptr %3398, align 2, !tbaa !40
  %3400 = insertelement <8 x i16> %3396, i16 %3399, i64 7
  %3401 = uitofp <8 x i16> %3400 to <8 x float>
  %3402 = fmul <8 x float> %3401, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3403 = fadd <8 x float> %3402, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3404 = fmul <8 x float> %3134, %3403
  %a881 = fdiv <8 x float> %3404, %3128
  %3405 = fcmp olt <8 x float> %a881, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a880 = select <8 x i1> %3405, <8 x float> %a881, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3406 = fcmp ogt <8 x float> %a880, zeroinitializer
  %3407 = fmul <8 x float> %a880, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3408 = select <8 x i1> %3406, <8 x float> %3407, <8 x float> zeroinitializer
  %3409 = fptoui <8 x float> %3408 to <8 x i16>
  store <8 x i16> %3409, ptr %lsr.iv400, align 2, !tbaa !74
  %3410 = add nsw i32 %a883, 1
  %lsr.iv.next398 = add i32 %lsr.iv397, -1
  %scevgep402 = getelementptr i1, ptr %lsr.iv400, i64 %3104
  %.not149 = icmp eq i32 %lsr.iv.next398, 0
  br i1 %.not149, label %"end for local_laplacian.s0.v5", label %"for local_laplacian.s0.v5"

"end for local_laplacian.s0.v5":                  ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3"
  %3411 = add nuw nsw i32 %local_laplacian.s0.v3.v3, 1
  %.not148 = icmp eq i32 %3411, %3101
  br i1 %.not148, label %if.then.i253, label %"for local_laplacian.s0.v3.v3"

if.then.i265:                                     ; preds = %if.then.i268
  tail call void @halide_free(ptr %__user_context, ptr nonnull %129) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %155) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %194) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %223) #7
  br label %destructor_block.thread

"produce f12919":                                 ; preds = %if.then.i268, %if.then.i253
  %indvars.iv323 = phi i64 [ %indvars.iv.next324, %if.then.i268 ], [ 1, %if.then.i253 ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %if.then.i268 ], [ %3164, %if.then.i253 ]
  %lsr.iv367 = phi i64 [ %lsr.iv.next368, %if.then.i268 ], [ %3158, %if.then.i253 ]
  %lsr.iv349 = phi i64 [ %lsr.iv.next350, %if.then.i268 ], [ %3155, %if.then.i253 ]
  %lsr.iv329 = phi i32 [ %lsr.iv.next330, %if.then.i268 ], [ %3148, %if.then.i253 ]
  %lsr.iv319 = phi i1 [ %lsr.iv.next320, %if.then.i268 ], [ %3141, %if.then.i253 ]
  %3412 = select i1 %lsr.iv319, i32 2, i32 0
  %3413 = add nsw i64 %indvars.iv323, %3103
  %3414 = trunc i64 %3413 to i32
  %3415 = add i32 %3414, 13
  %3416 = and i32 %3415, 15
  %3417 = icmp eq i32 %3416, 15
  br i1 %3417, label %true_bb21, label %"produce f12832"

true_bb21:                                        ; preds = %"produce f12919"
  br i1 %3170, label %"for f129.s0.v3.v324.preheader", label %"end for f129.s0.v3.v325", !prof !5

"for f129.s0.v3.v324.preheader":                  ; preds = %true_bb21
  %3418 = trunc i64 %3413 to i32
  %3419 = add i32 %3418, 45
  %3420 = ashr i32 %3419, 4
  %3421 = shl nsw i32 %3420, 1
  %3422 = and i32 %3421, 2
  %3423 = ashr i32 %3419, 5
  %t2440 = add nsw i32 %3422, %3423
  %3424 = sub i32 %3420, %f75.v4.min_realized
  %3425 = mul i32 %3424, %229
  %3426 = add i32 %3173, %3425
  %3427 = add nsw i32 %t2440, %239
  %t2447 = mul nsw i32 %3427, %236
  %3428 = sub nsw i32 %3423, %238
  %t2449 = mul nsw i32 %3428, %236
  %3429 = sub i32 %3420, %f7.v4.min_realized
  %3430 = mul i32 %3429, %f7.stride.1
  %3431 = add i32 %3174, %3430
  %3432 = add i32 %t2440, %244
  %t2454 = mul nsw i32 %3432, %243
  %3433 = sub nsw i32 %3423, %f8.v4.min_realized
  %t2459 = mul nsw i32 %3433, %243
  %3434 = sext i32 %t2449 to i64
  %3435 = add nsw i64 %3434, -1
  %3436 = sext i32 %t2447 to i64
  %3437 = add nsw i64 %3436, -1
  %narrow146 = sub nsw i32 %3420, %226
  %3438 = sext i32 %narrow146 to i64
  %3439 = mul nsw i64 %251, %3438
  %3440 = add nsw i64 %3439, %.neg212
  br label %"for f129.s0.v3.v324"

"for f129.s0.v3.v324":                            ; preds = %"for f129.s0.v3.v324.preheader", %"for f129.s0.v3.v324"
  %lsr.iv285 = phi i32 [ %lsr.iv.next286, %"for f129.s0.v3.v324" ], [ 0, %"for f129.s0.v3.v324.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f129.s0.v3.v324" ], [ %a887, %"for f129.s0.v3.v324.preheader" ]
  %3441 = add i32 %lsr.iv285, %107
  %3442 = ashr i32 %3441, 1
  %t2441 = add nsw i32 %3442, %3172
  %3443 = add i32 %3426, %lsr.iv285
  %3444 = sext i32 %3443 to i64
  %3445 = getelementptr inbounds float, ptr %f75.host, i64 %3444
  %3446 = load <4 x float>, ptr %3445, align 4, !tbaa !13
  %3447 = add nsw i64 %3444, 4
  %3448 = getelementptr inbounds float, ptr %f75.host, i64 %3447
  %3449 = load <4 x float>, ptr %3448, align 4, !tbaa !13
  %3450 = shufflevector <4 x float> %3446, <4 x float> %3449, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2443 = fmul <4 x float> %233, %3450
  %a888 = fptosi <4 x float> %t2443 to <4 x i32>
  %a891 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a888)
  %3451 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a891, <4 x i32> zeroinitializer)
  %3452 = sitofp <4 x i32> %3451 to <4 x float>
  %t2445 = fsub <4 x float> %t2443, %3452
  %3453 = add i32 %3431, %lsr.iv285
  %t2452 = sub nsw <4 x i32> %3451, %242
  %t2456 = mul nsw <4 x i32> %t2452, %246
  %3454 = add nsw <4 x i32> %t2452, <i32 1, i32 1, i32 1, i32 1>
  %t2462 = mul nsw <4 x i32> %3454, %246
  %3455 = add i32 %3441, 1
  %3456 = shl i32 %3455, 1
  %3457 = and i32 %3456, 2
  %3458 = ashr i32 %3455, 1
  %t2463 = add nsw i32 %3457, %3458
  %3459 = shufflevector <4 x float> %3446, <4 x float> %3449, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2464 = fmul <4 x float> %233, %3459
  %a892 = fptosi <4 x float> %t2464 to <4 x i32>
  %a895 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a892)
  %3460 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a895, <4 x i32> zeroinitializer)
  %3461 = sitofp <4 x i32> %3460 to <4 x float>
  %t2466 = fsub <4 x float> %t2464, %3461
  %t2469 = sub nsw <4 x i32> %3460, %242
  %t2472 = mul nsw <4 x i32> %t2469, %246
  %3462 = add nsw <4 x i32> %t2469, <i32 1, i32 1, i32 1, i32 1>
  %t2477 = mul nsw <4 x i32> %3462, %246
  %3463 = sub nsw i32 %3442, %f8.v3.min_realized
  %3464 = add nsw i32 %3463, %t2459
  %3465 = insertelement <4 x i32> undef, i32 %3464, i64 0
  %3466 = shufflevector <4 x i32> %3465, <4 x i32> undef, <4 x i32> zeroinitializer
  %3467 = add nsw <4 x i32> %3466, <i32 0, i32 1, i32 2, i32 3>
  %3468 = add nsw <4 x i32> %t2462, %3467
  %3469 = sext <4 x i32> %3468 to <4 x i64>
  %3470 = extractelement <4 x i64> %3469, i64 0
  %3471 = getelementptr inbounds float, ptr %f8.host, i64 %3470
  %3472 = load float, ptr %3471, align 4, !tbaa !36
  %3473 = insertelement <4 x float> undef, float %3472, i64 0
  %3474 = extractelement <4 x i64> %3469, i64 1
  %3475 = getelementptr inbounds float, ptr %f8.host, i64 %3474
  %3476 = load float, ptr %3475, align 4, !tbaa !36
  %3477 = insertelement <4 x float> %3473, float %3476, i64 1
  %3478 = extractelement <4 x i64> %3469, i64 2
  %3479 = getelementptr inbounds float, ptr %f8.host, i64 %3478
  %3480 = load float, ptr %3479, align 4, !tbaa !36
  %3481 = insertelement <4 x float> %3477, float %3480, i64 2
  %3482 = extractelement <4 x i64> %3469, i64 3
  %3483 = getelementptr inbounds float, ptr %f8.host, i64 %3482
  %3484 = load float, ptr %3483, align 4, !tbaa !36
  %3485 = insertelement <4 x float> %3481, float %3484, i64 3
  %3486 = fmul <4 x float> %3485, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3487 = sub nsw i32 %t2441, %f8.v3.min_realized
  %3488 = add nsw i32 %3487, %t2459
  %3489 = insertelement <4 x i32> undef, i32 %3488, i64 0
  %3490 = shufflevector <4 x i32> %3489, <4 x i32> undef, <4 x i32> zeroinitializer
  %3491 = add <4 x i32> %3490, <i32 -1, i32 0, i32 1, i32 2>
  %3492 = add <4 x i32> %3491, %t2462
  %3493 = sext <4 x i32> %3492 to <4 x i64>
  %3494 = extractelement <4 x i64> %3493, i64 0
  %3495 = getelementptr inbounds float, ptr %f8.host, i64 %3494
  %3496 = load float, ptr %3495, align 4, !tbaa !36
  %3497 = insertelement <4 x float> undef, float %3496, i64 0
  %3498 = extractelement <4 x i64> %3493, i64 1
  %3499 = getelementptr inbounds float, ptr %f8.host, i64 %3498
  %3500 = load float, ptr %3499, align 4, !tbaa !36
  %3501 = insertelement <4 x float> %3497, float %3500, i64 1
  %3502 = extractelement <4 x i64> %3493, i64 2
  %3503 = getelementptr inbounds float, ptr %f8.host, i64 %3502
  %3504 = load float, ptr %3503, align 4, !tbaa !36
  %3505 = insertelement <4 x float> %3501, float %3504, i64 2
  %3506 = extractelement <4 x i64> %3493, i64 3
  %3507 = getelementptr inbounds float, ptr %f8.host, i64 %3506
  %3508 = load float, ptr %3507, align 4, !tbaa !36
  %3509 = insertelement <4 x float> %3505, float %3508, i64 3
  %3510 = fmul <4 x float> %3509, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3511 = fadd <4 x float> %3486, %3510
  %3512 = fmul <4 x float> %3511, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3513 = add nsw i32 %3463, %t2454
  %3514 = insertelement <4 x i32> undef, i32 %3513, i64 0
  %3515 = shufflevector <4 x i32> %3514, <4 x i32> undef, <4 x i32> zeroinitializer
  %3516 = add nsw <4 x i32> %3515, <i32 0, i32 1, i32 2, i32 3>
  %3517 = add nsw <4 x i32> %t2462, %3516
  %3518 = sext <4 x i32> %3517 to <4 x i64>
  %3519 = extractelement <4 x i64> %3518, i64 0
  %3520 = getelementptr inbounds float, ptr %f8.host, i64 %3519
  %3521 = load float, ptr %3520, align 4, !tbaa !36
  %3522 = insertelement <4 x float> undef, float %3521, i64 0
  %3523 = extractelement <4 x i64> %3518, i64 1
  %3524 = getelementptr inbounds float, ptr %f8.host, i64 %3523
  %3525 = load float, ptr %3524, align 4, !tbaa !36
  %3526 = insertelement <4 x float> %3522, float %3525, i64 1
  %3527 = extractelement <4 x i64> %3518, i64 2
  %3528 = getelementptr inbounds float, ptr %f8.host, i64 %3527
  %3529 = load float, ptr %3528, align 4, !tbaa !36
  %3530 = insertelement <4 x float> %3526, float %3529, i64 2
  %3531 = extractelement <4 x i64> %3518, i64 3
  %3532 = getelementptr inbounds float, ptr %f8.host, i64 %3531
  %3533 = load float, ptr %3532, align 4, !tbaa !36
  %3534 = insertelement <4 x float> %3530, float %3533, i64 3
  %3535 = fmul <4 x float> %3534, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3536 = add nsw i32 %3487, %t2454
  %3537 = insertelement <4 x i32> undef, i32 %3536, i64 0
  %3538 = shufflevector <4 x i32> %3537, <4 x i32> undef, <4 x i32> zeroinitializer
  %3539 = add <4 x i32> %3538, <i32 -1, i32 0, i32 1, i32 2>
  %3540 = add <4 x i32> %3539, %t2462
  %3541 = sext <4 x i32> %3540 to <4 x i64>
  %3542 = extractelement <4 x i64> %3541, i64 0
  %3543 = getelementptr inbounds float, ptr %f8.host, i64 %3542
  %3544 = load float, ptr %3543, align 4, !tbaa !36
  %3545 = insertelement <4 x float> undef, float %3544, i64 0
  %3546 = extractelement <4 x i64> %3541, i64 1
  %3547 = getelementptr inbounds float, ptr %f8.host, i64 %3546
  %3548 = load float, ptr %3547, align 4, !tbaa !36
  %3549 = insertelement <4 x float> %3545, float %3548, i64 1
  %3550 = extractelement <4 x i64> %3541, i64 2
  %3551 = getelementptr inbounds float, ptr %f8.host, i64 %3550
  %3552 = load float, ptr %3551, align 4, !tbaa !36
  %3553 = insertelement <4 x float> %3549, float %3552, i64 2
  %3554 = extractelement <4 x i64> %3541, i64 3
  %3555 = getelementptr inbounds float, ptr %f8.host, i64 %3554
  %3556 = load float, ptr %3555, align 4, !tbaa !36
  %3557 = insertelement <4 x float> %3553, float %3556, i64 3
  %3558 = fmul <4 x float> %3557, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3559 = fadd <4 x float> %3535, %3558
  %3560 = fmul <4 x float> %3559, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3561 = fadd <4 x float> %3512, %3560
  %3562 = mul nsw <4 x i32> %3454, %249
  %3563 = insertelement <4 x i32> undef, i32 %3453, i64 0
  %3564 = shufflevector <4 x i32> %3563, <4 x i32> undef, <4 x i32> zeroinitializer
  %3565 = add nsw <4 x i32> %3564, <i32 0, i32 2, i32 4, i32 6>
  %3566 = add nsw <4 x i32> %3562, %3565
  %3567 = sext <4 x i32> %3566 to <4 x i64>
  %3568 = extractelement <4 x i64> %3567, i64 0
  %3569 = getelementptr inbounds float, ptr %f7.host, i64 %3568
  %3570 = load float, ptr %3569, align 4, !tbaa !54
  %3571 = insertelement <4 x float> undef, float %3570, i64 0
  %3572 = extractelement <4 x i64> %3567, i64 1
  %3573 = getelementptr inbounds float, ptr %f7.host, i64 %3572
  %3574 = load float, ptr %3573, align 4, !tbaa !54
  %3575 = insertelement <4 x float> %3571, float %3574, i64 1
  %3576 = extractelement <4 x i64> %3567, i64 2
  %3577 = getelementptr inbounds float, ptr %f7.host, i64 %3576
  %3578 = load float, ptr %3577, align 4, !tbaa !54
  %3579 = insertelement <4 x float> %3575, float %3578, i64 2
  %3580 = extractelement <4 x i64> %3567, i64 3
  %3581 = getelementptr inbounds float, ptr %f7.host, i64 %3580
  %3582 = load float, ptr %3581, align 4, !tbaa !54
  %3583 = insertelement <4 x float> %3579, float %3582, i64 3
  %3584 = fsub <4 x float> %3583, %3561
  %3585 = fmul <4 x float> %t2445, %3584
  %3586 = add nsw <4 x i32> %t2456, %3467
  %3587 = sext <4 x i32> %3586 to <4 x i64>
  %3588 = extractelement <4 x i64> %3587, i64 0
  %3589 = getelementptr inbounds float, ptr %f8.host, i64 %3588
  %3590 = load float, ptr %3589, align 4, !tbaa !36
  %3591 = insertelement <4 x float> undef, float %3590, i64 0
  %3592 = extractelement <4 x i64> %3587, i64 1
  %3593 = getelementptr inbounds float, ptr %f8.host, i64 %3592
  %3594 = load float, ptr %3593, align 4, !tbaa !36
  %3595 = insertelement <4 x float> %3591, float %3594, i64 1
  %3596 = extractelement <4 x i64> %3587, i64 2
  %3597 = getelementptr inbounds float, ptr %f8.host, i64 %3596
  %3598 = load float, ptr %3597, align 4, !tbaa !36
  %3599 = insertelement <4 x float> %3595, float %3598, i64 2
  %3600 = extractelement <4 x i64> %3587, i64 3
  %3601 = getelementptr inbounds float, ptr %f8.host, i64 %3600
  %3602 = load float, ptr %3601, align 4, !tbaa !36
  %3603 = insertelement <4 x float> %3599, float %3602, i64 3
  %3604 = fmul <4 x float> %3603, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3605 = add <4 x i32> %3491, %t2456
  %3606 = sext <4 x i32> %3605 to <4 x i64>
  %3607 = extractelement <4 x i64> %3606, i64 0
  %3608 = getelementptr inbounds float, ptr %f8.host, i64 %3607
  %3609 = load float, ptr %3608, align 4, !tbaa !36
  %3610 = insertelement <4 x float> undef, float %3609, i64 0
  %3611 = extractelement <4 x i64> %3606, i64 1
  %3612 = getelementptr inbounds float, ptr %f8.host, i64 %3611
  %3613 = load float, ptr %3612, align 4, !tbaa !36
  %3614 = insertelement <4 x float> %3610, float %3613, i64 1
  %3615 = extractelement <4 x i64> %3606, i64 2
  %3616 = getelementptr inbounds float, ptr %f8.host, i64 %3615
  %3617 = load float, ptr %3616, align 4, !tbaa !36
  %3618 = insertelement <4 x float> %3614, float %3617, i64 2
  %3619 = extractelement <4 x i64> %3606, i64 3
  %3620 = getelementptr inbounds float, ptr %f8.host, i64 %3619
  %3621 = load float, ptr %3620, align 4, !tbaa !36
  %3622 = insertelement <4 x float> %3618, float %3621, i64 3
  %3623 = fmul <4 x float> %3622, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3624 = fadd <4 x float> %3604, %3623
  %3625 = fmul <4 x float> %3624, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3626 = add nsw <4 x i32> %t2456, %3516
  %3627 = sext <4 x i32> %3626 to <4 x i64>
  %3628 = extractelement <4 x i64> %3627, i64 0
  %3629 = getelementptr inbounds float, ptr %f8.host, i64 %3628
  %3630 = load float, ptr %3629, align 4, !tbaa !36
  %3631 = insertelement <4 x float> undef, float %3630, i64 0
  %3632 = extractelement <4 x i64> %3627, i64 1
  %3633 = getelementptr inbounds float, ptr %f8.host, i64 %3632
  %3634 = load float, ptr %3633, align 4, !tbaa !36
  %3635 = insertelement <4 x float> %3631, float %3634, i64 1
  %3636 = extractelement <4 x i64> %3627, i64 2
  %3637 = getelementptr inbounds float, ptr %f8.host, i64 %3636
  %3638 = load float, ptr %3637, align 4, !tbaa !36
  %3639 = insertelement <4 x float> %3635, float %3638, i64 2
  %3640 = extractelement <4 x i64> %3627, i64 3
  %3641 = getelementptr inbounds float, ptr %f8.host, i64 %3640
  %3642 = load float, ptr %3641, align 4, !tbaa !36
  %3643 = insertelement <4 x float> %3639, float %3642, i64 3
  %3644 = fmul <4 x float> %3643, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3645 = add <4 x i32> %3539, %t2456
  %3646 = sext <4 x i32> %3645 to <4 x i64>
  %3647 = extractelement <4 x i64> %3646, i64 0
  %3648 = getelementptr inbounds float, ptr %f8.host, i64 %3647
  %3649 = load float, ptr %3648, align 4, !tbaa !36
  %3650 = insertelement <4 x float> undef, float %3649, i64 0
  %3651 = extractelement <4 x i64> %3646, i64 1
  %3652 = getelementptr inbounds float, ptr %f8.host, i64 %3651
  %3653 = load float, ptr %3652, align 4, !tbaa !36
  %3654 = insertelement <4 x float> %3650, float %3653, i64 1
  %3655 = extractelement <4 x i64> %3646, i64 2
  %3656 = getelementptr inbounds float, ptr %f8.host, i64 %3655
  %3657 = load float, ptr %3656, align 4, !tbaa !36
  %3658 = insertelement <4 x float> %3654, float %3657, i64 2
  %3659 = extractelement <4 x i64> %3646, i64 3
  %3660 = getelementptr inbounds float, ptr %f8.host, i64 %3659
  %3661 = load float, ptr %3660, align 4, !tbaa !36
  %3662 = insertelement <4 x float> %3658, float %3661, i64 3
  %3663 = fmul <4 x float> %3662, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3664 = fadd <4 x float> %3644, %3663
  %3665 = fmul <4 x float> %3664, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3666 = fadd <4 x float> %3625, %3665
  %3667 = mul nsw <4 x i32> %t2452, %249
  %3668 = add nsw <4 x i32> %3667, %3565
  %3669 = sext <4 x i32> %3668 to <4 x i64>
  %3670 = extractelement <4 x i64> %3669, i64 0
  %3671 = getelementptr inbounds float, ptr %f7.host, i64 %3670
  %3672 = load float, ptr %3671, align 4, !tbaa !54
  %3673 = insertelement <4 x float> undef, float %3672, i64 0
  %3674 = extractelement <4 x i64> %3669, i64 1
  %3675 = getelementptr inbounds float, ptr %f7.host, i64 %3674
  %3676 = load float, ptr %3675, align 4, !tbaa !54
  %3677 = insertelement <4 x float> %3673, float %3676, i64 1
  %3678 = extractelement <4 x i64> %3669, i64 2
  %3679 = getelementptr inbounds float, ptr %f7.host, i64 %3678
  %3680 = load float, ptr %3679, align 4, !tbaa !54
  %3681 = insertelement <4 x float> %3677, float %3680, i64 2
  %3682 = extractelement <4 x i64> %3669, i64 3
  %3683 = getelementptr inbounds float, ptr %f7.host, i64 %3682
  %3684 = load float, ptr %3683, align 4, !tbaa !54
  %3685 = insertelement <4 x float> %3681, float %3684, i64 3
  %3686 = fsub <4 x float> %3685, %3666
  %3687 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2445
  %3688 = fmul <4 x float> %3687, %3686
  %3689 = fadd <4 x float> %3585, %3688
  %3690 = sext i32 %3442 to i64
  %3691 = sub nsw i64 %3690, %4
  %3692 = add nsw i64 %3691, %3434
  %3693 = getelementptr inbounds float, ptr %f130.host, i64 %3692
  %3694 = load <4 x float>, ptr %3693, align 4, !tbaa !38
  %3695 = fmul <4 x float> %3694, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3696 = sext i32 %t2441 to i64
  %3697 = sub nsw i64 %3696, %4
  %3698 = add nsw i64 %3435, %3697
  %3699 = getelementptr inbounds float, ptr %f130.host, i64 %3698
  %3700 = load <4 x float>, ptr %3699, align 4, !tbaa !38
  %3701 = fmul <4 x float> %3700, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3702 = fadd <4 x float> %3695, %3701
  %3703 = fmul <4 x float> %3702, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3704 = add nsw i64 %3691, %3436
  %3705 = getelementptr inbounds float, ptr %f130.host, i64 %3704
  %3706 = load <4 x float>, ptr %3705, align 4, !tbaa !38
  %3707 = fmul <4 x float> %3706, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3708 = add nsw i64 %3437, %3697
  %3709 = getelementptr inbounds float, ptr %f130.host, i64 %3708
  %3710 = load <4 x float>, ptr %3709, align 4, !tbaa !38
  %3711 = fmul <4 x float> %3710, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3712 = fadd <4 x float> %3707, %3711
  %3713 = fmul <4 x float> %3712, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3714 = fadd <4 x float> %3703, %3713
  %3715 = fadd <4 x float> %3689, %3714
  %3716 = sub nsw i32 %3458, %f8.v3.min_realized
  %3717 = add nsw i32 %3716, %t2459
  %3718 = insertelement <4 x i32> undef, i32 %3717, i64 0
  %3719 = shufflevector <4 x i32> %3718, <4 x i32> undef, <4 x i32> zeroinitializer
  %3720 = add nsw <4 x i32> %3719, <i32 0, i32 1, i32 2, i32 3>
  %3721 = add nsw <4 x i32> %t2477, %3720
  %3722 = sext <4 x i32> %3721 to <4 x i64>
  %3723 = extractelement <4 x i64> %3722, i64 0
  %3724 = getelementptr inbounds float, ptr %f8.host, i64 %3723
  %3725 = load float, ptr %3724, align 4, !tbaa !36
  %3726 = insertelement <4 x float> undef, float %3725, i64 0
  %3727 = extractelement <4 x i64> %3722, i64 1
  %3728 = getelementptr inbounds float, ptr %f8.host, i64 %3727
  %3729 = load float, ptr %3728, align 4, !tbaa !36
  %3730 = insertelement <4 x float> %3726, float %3729, i64 1
  %3731 = extractelement <4 x i64> %3722, i64 2
  %3732 = getelementptr inbounds float, ptr %f8.host, i64 %3731
  %3733 = load float, ptr %3732, align 4, !tbaa !36
  %3734 = insertelement <4 x float> %3730, float %3733, i64 2
  %3735 = extractelement <4 x i64> %3722, i64 3
  %3736 = getelementptr inbounds float, ptr %f8.host, i64 %3735
  %3737 = load float, ptr %3736, align 4, !tbaa !36
  %3738 = insertelement <4 x float> %3734, float %3737, i64 3
  %3739 = fmul <4 x float> %3738, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3740 = sub nsw i32 %t2463, %f8.v3.min_realized
  %3741 = add nsw i32 %3740, %t2459
  %3742 = insertelement <4 x i32> undef, i32 %3741, i64 0
  %3743 = shufflevector <4 x i32> %3742, <4 x i32> undef, <4 x i32> zeroinitializer
  %3744 = add <4 x i32> %3743, <i32 -1, i32 0, i32 1, i32 2>
  %3745 = add <4 x i32> %3744, %t2477
  %3746 = sext <4 x i32> %3745 to <4 x i64>
  %3747 = extractelement <4 x i64> %3746, i64 0
  %3748 = getelementptr inbounds float, ptr %f8.host, i64 %3747
  %3749 = load float, ptr %3748, align 4, !tbaa !36
  %3750 = insertelement <4 x float> undef, float %3749, i64 0
  %3751 = extractelement <4 x i64> %3746, i64 1
  %3752 = getelementptr inbounds float, ptr %f8.host, i64 %3751
  %3753 = load float, ptr %3752, align 4, !tbaa !36
  %3754 = insertelement <4 x float> %3750, float %3753, i64 1
  %3755 = extractelement <4 x i64> %3746, i64 2
  %3756 = getelementptr inbounds float, ptr %f8.host, i64 %3755
  %3757 = load float, ptr %3756, align 4, !tbaa !36
  %3758 = insertelement <4 x float> %3754, float %3757, i64 2
  %3759 = extractelement <4 x i64> %3746, i64 3
  %3760 = getelementptr inbounds float, ptr %f8.host, i64 %3759
  %3761 = load float, ptr %3760, align 4, !tbaa !36
  %3762 = insertelement <4 x float> %3758, float %3761, i64 3
  %3763 = fmul <4 x float> %3762, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3764 = fadd <4 x float> %3739, %3763
  %3765 = fmul <4 x float> %3764, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3766 = add nsw i32 %3716, %t2454
  %3767 = insertelement <4 x i32> undef, i32 %3766, i64 0
  %3768 = shufflevector <4 x i32> %3767, <4 x i32> undef, <4 x i32> zeroinitializer
  %3769 = add nsw <4 x i32> %3768, <i32 0, i32 1, i32 2, i32 3>
  %3770 = add nsw <4 x i32> %t2477, %3769
  %3771 = sext <4 x i32> %3770 to <4 x i64>
  %3772 = extractelement <4 x i64> %3771, i64 0
  %3773 = getelementptr inbounds float, ptr %f8.host, i64 %3772
  %3774 = load float, ptr %3773, align 4, !tbaa !36
  %3775 = insertelement <4 x float> undef, float %3774, i64 0
  %3776 = extractelement <4 x i64> %3771, i64 1
  %3777 = getelementptr inbounds float, ptr %f8.host, i64 %3776
  %3778 = load float, ptr %3777, align 4, !tbaa !36
  %3779 = insertelement <4 x float> %3775, float %3778, i64 1
  %3780 = extractelement <4 x i64> %3771, i64 2
  %3781 = getelementptr inbounds float, ptr %f8.host, i64 %3780
  %3782 = load float, ptr %3781, align 4, !tbaa !36
  %3783 = insertelement <4 x float> %3779, float %3782, i64 2
  %3784 = extractelement <4 x i64> %3771, i64 3
  %3785 = getelementptr inbounds float, ptr %f8.host, i64 %3784
  %3786 = load float, ptr %3785, align 4, !tbaa !36
  %3787 = insertelement <4 x float> %3783, float %3786, i64 3
  %3788 = fmul <4 x float> %3787, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3789 = add nsw i32 %3740, %t2454
  %3790 = insertelement <4 x i32> undef, i32 %3789, i64 0
  %3791 = shufflevector <4 x i32> %3790, <4 x i32> undef, <4 x i32> zeroinitializer
  %3792 = add <4 x i32> %3791, <i32 -1, i32 0, i32 1, i32 2>
  %3793 = add <4 x i32> %3792, %t2477
  %3794 = sext <4 x i32> %3793 to <4 x i64>
  %3795 = extractelement <4 x i64> %3794, i64 0
  %3796 = getelementptr inbounds float, ptr %f8.host, i64 %3795
  %3797 = load float, ptr %3796, align 4, !tbaa !36
  %3798 = insertelement <4 x float> undef, float %3797, i64 0
  %3799 = extractelement <4 x i64> %3794, i64 1
  %3800 = getelementptr inbounds float, ptr %f8.host, i64 %3799
  %3801 = load float, ptr %3800, align 4, !tbaa !36
  %3802 = insertelement <4 x float> %3798, float %3801, i64 1
  %3803 = extractelement <4 x i64> %3794, i64 2
  %3804 = getelementptr inbounds float, ptr %f8.host, i64 %3803
  %3805 = load float, ptr %3804, align 4, !tbaa !36
  %3806 = insertelement <4 x float> %3802, float %3805, i64 2
  %3807 = extractelement <4 x i64> %3794, i64 3
  %3808 = getelementptr inbounds float, ptr %f8.host, i64 %3807
  %3809 = load float, ptr %3808, align 4, !tbaa !36
  %3810 = insertelement <4 x float> %3806, float %3809, i64 3
  %3811 = fmul <4 x float> %3810, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3812 = fadd <4 x float> %3788, %3811
  %3813 = fmul <4 x float> %3812, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3814 = fadd <4 x float> %3765, %3813
  %3815 = mul nsw <4 x i32> %3462, %249
  %3816 = add i32 %3453, 1
  %3817 = insertelement <4 x i32> undef, i32 %3816, i64 0
  %3818 = shufflevector <4 x i32> %3817, <4 x i32> undef, <4 x i32> zeroinitializer
  %3819 = add nsw <4 x i32> %3818, <i32 0, i32 2, i32 4, i32 6>
  %3820 = add nsw <4 x i32> %3815, %3819
  %3821 = sext <4 x i32> %3820 to <4 x i64>
  %3822 = extractelement <4 x i64> %3821, i64 0
  %3823 = getelementptr inbounds float, ptr %f7.host, i64 %3822
  %3824 = load float, ptr %3823, align 4, !tbaa !54
  %3825 = insertelement <4 x float> undef, float %3824, i64 0
  %3826 = extractelement <4 x i64> %3821, i64 1
  %3827 = getelementptr inbounds float, ptr %f7.host, i64 %3826
  %3828 = load float, ptr %3827, align 4, !tbaa !54
  %3829 = insertelement <4 x float> %3825, float %3828, i64 1
  %3830 = extractelement <4 x i64> %3821, i64 2
  %3831 = getelementptr inbounds float, ptr %f7.host, i64 %3830
  %3832 = load float, ptr %3831, align 4, !tbaa !54
  %3833 = insertelement <4 x float> %3829, float %3832, i64 2
  %3834 = extractelement <4 x i64> %3821, i64 3
  %3835 = getelementptr inbounds float, ptr %f7.host, i64 %3834
  %3836 = load float, ptr %3835, align 4, !tbaa !54
  %3837 = insertelement <4 x float> %3833, float %3836, i64 3
  %3838 = fsub <4 x float> %3837, %3814
  %3839 = fmul <4 x float> %t2466, %3838
  %3840 = add nsw <4 x i32> %t2472, %3720
  %3841 = sext <4 x i32> %3840 to <4 x i64>
  %3842 = extractelement <4 x i64> %3841, i64 0
  %3843 = getelementptr inbounds float, ptr %f8.host, i64 %3842
  %3844 = load float, ptr %3843, align 4, !tbaa !36
  %3845 = insertelement <4 x float> undef, float %3844, i64 0
  %3846 = extractelement <4 x i64> %3841, i64 1
  %3847 = getelementptr inbounds float, ptr %f8.host, i64 %3846
  %3848 = load float, ptr %3847, align 4, !tbaa !36
  %3849 = insertelement <4 x float> %3845, float %3848, i64 1
  %3850 = extractelement <4 x i64> %3841, i64 2
  %3851 = getelementptr inbounds float, ptr %f8.host, i64 %3850
  %3852 = load float, ptr %3851, align 4, !tbaa !36
  %3853 = insertelement <4 x float> %3849, float %3852, i64 2
  %3854 = extractelement <4 x i64> %3841, i64 3
  %3855 = getelementptr inbounds float, ptr %f8.host, i64 %3854
  %3856 = load float, ptr %3855, align 4, !tbaa !36
  %3857 = insertelement <4 x float> %3853, float %3856, i64 3
  %3858 = fmul <4 x float> %3857, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3859 = add <4 x i32> %t2472, %3743
  %3860 = add <4 x i32> %3859, <i32 -1, i32 0, i32 1, i32 2>
  %3861 = sext <4 x i32> %3860 to <4 x i64>
  %3862 = extractelement <4 x i64> %3861, i64 0
  %3863 = getelementptr inbounds float, ptr %f8.host, i64 %3862
  %3864 = load float, ptr %3863, align 4, !tbaa !36
  %3865 = insertelement <4 x float> undef, float %3864, i64 0
  %3866 = extractelement <4 x i64> %3861, i64 1
  %3867 = getelementptr inbounds float, ptr %f8.host, i64 %3866
  %3868 = load float, ptr %3867, align 4, !tbaa !36
  %3869 = insertelement <4 x float> %3865, float %3868, i64 1
  %3870 = extractelement <4 x i64> %3861, i64 2
  %3871 = getelementptr inbounds float, ptr %f8.host, i64 %3870
  %3872 = load float, ptr %3871, align 4, !tbaa !36
  %3873 = insertelement <4 x float> %3869, float %3872, i64 2
  %3874 = extractelement <4 x i64> %3861, i64 3
  %3875 = getelementptr inbounds float, ptr %f8.host, i64 %3874
  %3876 = load float, ptr %3875, align 4, !tbaa !36
  %3877 = insertelement <4 x float> %3873, float %3876, i64 3
  %3878 = fmul <4 x float> %3877, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3879 = fadd <4 x float> %3858, %3878
  %3880 = fmul <4 x float> %3879, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3881 = add nsw <4 x i32> %t2472, %3769
  %3882 = sext <4 x i32> %3881 to <4 x i64>
  %3883 = extractelement <4 x i64> %3882, i64 0
  %3884 = getelementptr inbounds float, ptr %f8.host, i64 %3883
  %3885 = load float, ptr %3884, align 4, !tbaa !36
  %3886 = insertelement <4 x float> undef, float %3885, i64 0
  %3887 = extractelement <4 x i64> %3882, i64 1
  %3888 = getelementptr inbounds float, ptr %f8.host, i64 %3887
  %3889 = load float, ptr %3888, align 4, !tbaa !36
  %3890 = insertelement <4 x float> %3886, float %3889, i64 1
  %3891 = extractelement <4 x i64> %3882, i64 2
  %3892 = getelementptr inbounds float, ptr %f8.host, i64 %3891
  %3893 = load float, ptr %3892, align 4, !tbaa !36
  %3894 = insertelement <4 x float> %3890, float %3893, i64 2
  %3895 = extractelement <4 x i64> %3882, i64 3
  %3896 = getelementptr inbounds float, ptr %f8.host, i64 %3895
  %3897 = load float, ptr %3896, align 4, !tbaa !36
  %3898 = insertelement <4 x float> %3894, float %3897, i64 3
  %3899 = fmul <4 x float> %3898, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3900 = add <4 x i32> %t2472, %3791
  %3901 = add <4 x i32> %3900, <i32 -1, i32 0, i32 1, i32 2>
  %3902 = sext <4 x i32> %3901 to <4 x i64>
  %3903 = extractelement <4 x i64> %3902, i64 0
  %3904 = getelementptr inbounds float, ptr %f8.host, i64 %3903
  %3905 = load float, ptr %3904, align 4, !tbaa !36
  %3906 = insertelement <4 x float> undef, float %3905, i64 0
  %3907 = extractelement <4 x i64> %3902, i64 1
  %3908 = getelementptr inbounds float, ptr %f8.host, i64 %3907
  %3909 = load float, ptr %3908, align 4, !tbaa !36
  %3910 = insertelement <4 x float> %3906, float %3909, i64 1
  %3911 = extractelement <4 x i64> %3902, i64 2
  %3912 = getelementptr inbounds float, ptr %f8.host, i64 %3911
  %3913 = load float, ptr %3912, align 4, !tbaa !36
  %3914 = insertelement <4 x float> %3910, float %3913, i64 2
  %3915 = extractelement <4 x i64> %3902, i64 3
  %3916 = getelementptr inbounds float, ptr %f8.host, i64 %3915
  %3917 = load float, ptr %3916, align 4, !tbaa !36
  %3918 = insertelement <4 x float> %3914, float %3917, i64 3
  %3919 = fmul <4 x float> %3918, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3920 = fadd <4 x float> %3899, %3919
  %3921 = fmul <4 x float> %3920, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3922 = fadd <4 x float> %3880, %3921
  %3923 = mul nsw <4 x i32> %t2469, %249
  %3924 = add nsw <4 x i32> %3923, %3819
  %3925 = sext <4 x i32> %3924 to <4 x i64>
  %3926 = extractelement <4 x i64> %3925, i64 0
  %3927 = getelementptr inbounds float, ptr %f7.host, i64 %3926
  %3928 = load float, ptr %3927, align 4, !tbaa !54
  %3929 = insertelement <4 x float> undef, float %3928, i64 0
  %3930 = extractelement <4 x i64> %3925, i64 1
  %3931 = getelementptr inbounds float, ptr %f7.host, i64 %3930
  %3932 = load float, ptr %3931, align 4, !tbaa !54
  %3933 = insertelement <4 x float> %3929, float %3932, i64 1
  %3934 = extractelement <4 x i64> %3925, i64 2
  %3935 = getelementptr inbounds float, ptr %f7.host, i64 %3934
  %3936 = load float, ptr %3935, align 4, !tbaa !54
  %3937 = insertelement <4 x float> %3933, float %3936, i64 2
  %3938 = extractelement <4 x i64> %3925, i64 3
  %3939 = getelementptr inbounds float, ptr %f7.host, i64 %3938
  %3940 = load float, ptr %3939, align 4, !tbaa !54
  %3941 = insertelement <4 x float> %3937, float %3940, i64 3
  %3942 = fsub <4 x float> %3941, %3922
  %3943 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2466
  %3944 = fmul <4 x float> %3943, %3942
  %3945 = fadd <4 x float> %3839, %3944
  %3946 = sext i32 %3458 to i64
  %3947 = sub nsw i64 %3946, %4
  %3948 = add nsw i64 %3947, %3434
  %3949 = getelementptr inbounds float, ptr %f130.host, i64 %3948
  %3950 = load <4 x float>, ptr %3949, align 4, !tbaa !38
  %3951 = fmul <4 x float> %3950, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3952 = sext i32 %t2463 to i64
  %3953 = sub nsw i64 %3952, %4
  %3954 = add nsw i64 %3435, %3953
  %3955 = getelementptr inbounds float, ptr %f130.host, i64 %3954
  %3956 = load <4 x float>, ptr %3955, align 4, !tbaa !38
  %3957 = fmul <4 x float> %3956, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3958 = fadd <4 x float> %3951, %3957
  %3959 = fmul <4 x float> %3958, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3960 = add nsw i64 %3947, %3436
  %3961 = getelementptr inbounds float, ptr %f130.host, i64 %3960
  %3962 = load <4 x float>, ptr %3961, align 4, !tbaa !38
  %3963 = fmul <4 x float> %3962, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3964 = add nsw i64 %3437, %3953
  %3965 = getelementptr inbounds float, ptr %f130.host, i64 %3964
  %3966 = load <4 x float>, ptr %3965, align 4, !tbaa !38
  %3967 = fmul <4 x float> %3966, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3968 = fadd <4 x float> %3963, %3967
  %3969 = fmul <4 x float> %3968, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3970 = fadd <4 x float> %3959, %3969
  %3971 = fadd <4 x float> %3945, %3970
  %3972 = shufflevector <4 x float> %3715, <4 x float> %3971, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %3973 = sext i32 %3441 to i64
  %3974 = add nsw i64 %3440, %3973
  %3975 = getelementptr inbounds float, ptr %129, i64 %3974
  store <8 x float> %3972, ptr %3975, align 4, !tbaa !64
  %lsr.iv.next = add i32 %lsr.iv, -1
  %lsr.iv.next286 = add nuw i32 %lsr.iv285, 8
  %.not147 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not147, label %"end for f129.s0.v3.v325", label %"for f129.s0.v3.v324"

"end for f129.s0.v3.v325":                        ; preds = %"for f129.s0.v3.v324", %true_bb21
  br i1 %.not142, label %"produce f12832", label %"for f129.s0.v3.v328.preheader", !prof !4

"for f129.s0.v3.v328.preheader":                  ; preds = %"end for f129.s0.v3.v325"
  %3976 = trunc i64 %3413 to i32
  %3977 = add i32 %3976, 45
  %3978 = ashr i32 %3977, 4
  %3979 = shl nsw i32 %3978, 1
  %3980 = and i32 %3979, 2
  %3981 = ashr i32 %3977, 5
  %t2478 = add nsw i32 %3980, %3981
  %3982 = sub nsw i32 %3978, %f75.v4.min_realized
  %3983 = mul nsw i32 %3982, %229
  %t2481 = add nsw i32 %3178, %3983
  %3984 = sext i32 %t2481 to i64
  %3985 = getelementptr inbounds float, ptr %f75.host, i64 %3984
  %3986 = load <4 x float>, ptr %3985, align 4, !tbaa !13
  %3987 = add nsw i64 %3984, 4
  %3988 = getelementptr inbounds float, ptr %f75.host, i64 %3987
  %3989 = load <4 x float>, ptr %3988, align 4, !tbaa !13
  %3990 = shufflevector <4 x float> %3986, <4 x float> %3989, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2482 = fmul <4 x float> %233, %3990
  %a898 = fptosi <4 x float> %t2482 to <4 x i32>
  %a901 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a898)
  %3991 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a901, <4 x i32> zeroinitializer)
  %3992 = sitofp <4 x i32> %3991 to <4 x float>
  %t2484 = fsub <4 x float> %t2482, %3992
  %3993 = add nsw i32 %t2478, %239
  %t2486 = mul nsw i32 %3993, %236
  %3994 = sub nsw i32 %3981, %238
  %t2488 = mul nsw i32 %3994, %236
  %3995 = sub nsw i32 %3978, %f7.v4.min_realized
  %3996 = mul nsw i32 %3995, %f7.stride.1
  %t2489 = add nsw i32 %3996, %3179
  %t2491 = sub nsw <4 x i32> %3991, %242
  %3997 = add i32 %t2478, %244
  %t2493 = mul nsw i32 %3997, %243
  %t2495 = mul nsw <4 x i32> %t2491, %246
  %3998 = sub nsw i32 %3981, %f8.v4.min_realized
  %t2498 = mul nsw i32 %3998, %243
  %3999 = add nsw <4 x i32> %t2491, <i32 1, i32 1, i32 1, i32 1>
  %t2501 = mul nsw <4 x i32> %3999, %246
  %4000 = shufflevector <4 x float> %3986, <4 x float> %3989, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2503 = fmul <4 x float> %233, %4000
  %a902 = fptosi <4 x float> %t2503 to <4 x i32>
  %a905 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a902)
  %4001 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a905, <4 x i32> zeroinitializer)
  %4002 = sitofp <4 x i32> %4001 to <4 x float>
  %t2505 = fsub <4 x float> %t2503, %4002
  %t2508 = sub nsw <4 x i32> %4001, %242
  %t2511 = mul nsw <4 x i32> %t2508, %246
  %4003 = add nsw <4 x i32> %t2508, <i32 1, i32 1, i32 1, i32 1>
  %t2516 = mul nsw <4 x i32> %4003, %246
  %4004 = add nsw i32 %t2498, %3184
  %4005 = insertelement <4 x i32> undef, i32 %4004, i64 0
  %4006 = shufflevector <4 x i32> %4005, <4 x i32> undef, <4 x i32> zeroinitializer
  %4007 = add nsw <4 x i32> %4006, <i32 0, i32 1, i32 2, i32 3>
  %4008 = add nsw <4 x i32> %t2501, %4007
  %4009 = sext <4 x i32> %4008 to <4 x i64>
  %4010 = extractelement <4 x i64> %4009, i64 0
  %4011 = getelementptr inbounds float, ptr %f8.host, i64 %4010
  %4012 = load float, ptr %4011, align 4, !tbaa !36
  %4013 = insertelement <4 x float> undef, float %4012, i64 0
  %4014 = extractelement <4 x i64> %4009, i64 1
  %4015 = getelementptr inbounds float, ptr %f8.host, i64 %4014
  %4016 = load float, ptr %4015, align 4, !tbaa !36
  %4017 = insertelement <4 x float> %4013, float %4016, i64 1
  %4018 = extractelement <4 x i64> %4009, i64 2
  %4019 = getelementptr inbounds float, ptr %f8.host, i64 %4018
  %4020 = load float, ptr %4019, align 4, !tbaa !36
  %4021 = insertelement <4 x float> %4017, float %4020, i64 2
  %4022 = extractelement <4 x i64> %4009, i64 3
  %4023 = getelementptr inbounds float, ptr %f8.host, i64 %4022
  %4024 = load float, ptr %4023, align 4, !tbaa !36
  %4025 = insertelement <4 x float> %4021, float %4024, i64 3
  %4026 = fmul <4 x float> %4025, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4027 = add nsw i32 %t2498, %3185
  %4028 = insertelement <4 x i32> undef, i32 %4027, i64 0
  %4029 = shufflevector <4 x i32> %4028, <4 x i32> undef, <4 x i32> zeroinitializer
  %4030 = add <4 x i32> %4029, <i32 -1, i32 0, i32 1, i32 2>
  %4031 = add <4 x i32> %4030, %t2501
  %4032 = sext <4 x i32> %4031 to <4 x i64>
  %4033 = extractelement <4 x i64> %4032, i64 0
  %4034 = getelementptr inbounds float, ptr %f8.host, i64 %4033
  %4035 = load float, ptr %4034, align 4, !tbaa !36
  %4036 = insertelement <4 x float> undef, float %4035, i64 0
  %4037 = extractelement <4 x i64> %4032, i64 1
  %4038 = getelementptr inbounds float, ptr %f8.host, i64 %4037
  %4039 = load float, ptr %4038, align 4, !tbaa !36
  %4040 = insertelement <4 x float> %4036, float %4039, i64 1
  %4041 = extractelement <4 x i64> %4032, i64 2
  %4042 = getelementptr inbounds float, ptr %f8.host, i64 %4041
  %4043 = load float, ptr %4042, align 4, !tbaa !36
  %4044 = insertelement <4 x float> %4040, float %4043, i64 2
  %4045 = extractelement <4 x i64> %4032, i64 3
  %4046 = getelementptr inbounds float, ptr %f8.host, i64 %4045
  %4047 = load float, ptr %4046, align 4, !tbaa !36
  %4048 = insertelement <4 x float> %4044, float %4047, i64 3
  %4049 = fmul <4 x float> %4048, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4050 = fadd <4 x float> %4026, %4049
  %4051 = fmul <4 x float> %4050, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4052 = add nsw i32 %t2493, %3184
  %4053 = insertelement <4 x i32> undef, i32 %4052, i64 0
  %4054 = shufflevector <4 x i32> %4053, <4 x i32> undef, <4 x i32> zeroinitializer
  %4055 = add nsw <4 x i32> %4054, <i32 0, i32 1, i32 2, i32 3>
  %4056 = add nsw <4 x i32> %t2501, %4055
  %4057 = sext <4 x i32> %4056 to <4 x i64>
  %4058 = extractelement <4 x i64> %4057, i64 0
  %4059 = getelementptr inbounds float, ptr %f8.host, i64 %4058
  %4060 = load float, ptr %4059, align 4, !tbaa !36
  %4061 = insertelement <4 x float> undef, float %4060, i64 0
  %4062 = extractelement <4 x i64> %4057, i64 1
  %4063 = getelementptr inbounds float, ptr %f8.host, i64 %4062
  %4064 = load float, ptr %4063, align 4, !tbaa !36
  %4065 = insertelement <4 x float> %4061, float %4064, i64 1
  %4066 = extractelement <4 x i64> %4057, i64 2
  %4067 = getelementptr inbounds float, ptr %f8.host, i64 %4066
  %4068 = load float, ptr %4067, align 4, !tbaa !36
  %4069 = insertelement <4 x float> %4065, float %4068, i64 2
  %4070 = extractelement <4 x i64> %4057, i64 3
  %4071 = getelementptr inbounds float, ptr %f8.host, i64 %4070
  %4072 = load float, ptr %4071, align 4, !tbaa !36
  %4073 = insertelement <4 x float> %4069, float %4072, i64 3
  %4074 = fmul <4 x float> %4073, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4075 = add nsw i32 %t2493, %3185
  %4076 = insertelement <4 x i32> undef, i32 %4075, i64 0
  %4077 = shufflevector <4 x i32> %4076, <4 x i32> undef, <4 x i32> zeroinitializer
  %4078 = add <4 x i32> %4077, <i32 -1, i32 0, i32 1, i32 2>
  %4079 = add <4 x i32> %4078, %t2501
  %4080 = sext <4 x i32> %4079 to <4 x i64>
  %4081 = extractelement <4 x i64> %4080, i64 0
  %4082 = getelementptr inbounds float, ptr %f8.host, i64 %4081
  %4083 = load float, ptr %4082, align 4, !tbaa !36
  %4084 = insertelement <4 x float> undef, float %4083, i64 0
  %4085 = extractelement <4 x i64> %4080, i64 1
  %4086 = getelementptr inbounds float, ptr %f8.host, i64 %4085
  %4087 = load float, ptr %4086, align 4, !tbaa !36
  %4088 = insertelement <4 x float> %4084, float %4087, i64 1
  %4089 = extractelement <4 x i64> %4080, i64 2
  %4090 = getelementptr inbounds float, ptr %f8.host, i64 %4089
  %4091 = load float, ptr %4090, align 4, !tbaa !36
  %4092 = insertelement <4 x float> %4088, float %4091, i64 2
  %4093 = extractelement <4 x i64> %4080, i64 3
  %4094 = getelementptr inbounds float, ptr %f8.host, i64 %4093
  %4095 = load float, ptr %4094, align 4, !tbaa !36
  %4096 = insertelement <4 x float> %4092, float %4095, i64 3
  %4097 = fmul <4 x float> %4096, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4098 = fadd <4 x float> %4074, %4097
  %4099 = fmul <4 x float> %4098, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4100 = fadd <4 x float> %4051, %4099
  %4101 = mul nsw <4 x i32> %3999, %249
  %4102 = insertelement <4 x i32> undef, i32 %t2489, i64 0
  %4103 = shufflevector <4 x i32> %4102, <4 x i32> undef, <4 x i32> zeroinitializer
  %4104 = add nsw <4 x i32> %4103, <i32 0, i32 2, i32 4, i32 6>
  %4105 = add nsw <4 x i32> %4101, %4104
  %4106 = sext <4 x i32> %4105 to <4 x i64>
  %4107 = extractelement <4 x i64> %4106, i64 0
  %4108 = getelementptr inbounds float, ptr %f7.host, i64 %4107
  %4109 = load float, ptr %4108, align 4, !tbaa !54
  %4110 = insertelement <4 x float> undef, float %4109, i64 0
  %4111 = extractelement <4 x i64> %4106, i64 1
  %4112 = getelementptr inbounds float, ptr %f7.host, i64 %4111
  %4113 = load float, ptr %4112, align 4, !tbaa !54
  %4114 = insertelement <4 x float> %4110, float %4113, i64 1
  %4115 = extractelement <4 x i64> %4106, i64 2
  %4116 = getelementptr inbounds float, ptr %f7.host, i64 %4115
  %4117 = load float, ptr %4116, align 4, !tbaa !54
  %4118 = insertelement <4 x float> %4114, float %4117, i64 2
  %4119 = extractelement <4 x i64> %4106, i64 3
  %4120 = getelementptr inbounds float, ptr %f7.host, i64 %4119
  %4121 = load float, ptr %4120, align 4, !tbaa !54
  %4122 = insertelement <4 x float> %4118, float %4121, i64 3
  %4123 = fsub <4 x float> %4122, %4100
  %4124 = fmul <4 x float> %t2484, %4123
  %4125 = add nsw <4 x i32> %t2495, %4007
  %4126 = sext <4 x i32> %4125 to <4 x i64>
  %4127 = extractelement <4 x i64> %4126, i64 0
  %4128 = getelementptr inbounds float, ptr %f8.host, i64 %4127
  %4129 = load float, ptr %4128, align 4, !tbaa !36
  %4130 = insertelement <4 x float> undef, float %4129, i64 0
  %4131 = extractelement <4 x i64> %4126, i64 1
  %4132 = getelementptr inbounds float, ptr %f8.host, i64 %4131
  %4133 = load float, ptr %4132, align 4, !tbaa !36
  %4134 = insertelement <4 x float> %4130, float %4133, i64 1
  %4135 = extractelement <4 x i64> %4126, i64 2
  %4136 = getelementptr inbounds float, ptr %f8.host, i64 %4135
  %4137 = load float, ptr %4136, align 4, !tbaa !36
  %4138 = insertelement <4 x float> %4134, float %4137, i64 2
  %4139 = extractelement <4 x i64> %4126, i64 3
  %4140 = getelementptr inbounds float, ptr %f8.host, i64 %4139
  %4141 = load float, ptr %4140, align 4, !tbaa !36
  %4142 = insertelement <4 x float> %4138, float %4141, i64 3
  %4143 = fmul <4 x float> %4142, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4144 = add <4 x i32> %4030, %t2495
  %4145 = sext <4 x i32> %4144 to <4 x i64>
  %4146 = extractelement <4 x i64> %4145, i64 0
  %4147 = getelementptr inbounds float, ptr %f8.host, i64 %4146
  %4148 = load float, ptr %4147, align 4, !tbaa !36
  %4149 = insertelement <4 x float> undef, float %4148, i64 0
  %4150 = extractelement <4 x i64> %4145, i64 1
  %4151 = getelementptr inbounds float, ptr %f8.host, i64 %4150
  %4152 = load float, ptr %4151, align 4, !tbaa !36
  %4153 = insertelement <4 x float> %4149, float %4152, i64 1
  %4154 = extractelement <4 x i64> %4145, i64 2
  %4155 = getelementptr inbounds float, ptr %f8.host, i64 %4154
  %4156 = load float, ptr %4155, align 4, !tbaa !36
  %4157 = insertelement <4 x float> %4153, float %4156, i64 2
  %4158 = extractelement <4 x i64> %4145, i64 3
  %4159 = getelementptr inbounds float, ptr %f8.host, i64 %4158
  %4160 = load float, ptr %4159, align 4, !tbaa !36
  %4161 = insertelement <4 x float> %4157, float %4160, i64 3
  %4162 = fmul <4 x float> %4161, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4163 = fadd <4 x float> %4143, %4162
  %4164 = fmul <4 x float> %4163, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4165 = add nsw <4 x i32> %t2495, %4055
  %4166 = sext <4 x i32> %4165 to <4 x i64>
  %4167 = extractelement <4 x i64> %4166, i64 0
  %4168 = getelementptr inbounds float, ptr %f8.host, i64 %4167
  %4169 = load float, ptr %4168, align 4, !tbaa !36
  %4170 = insertelement <4 x float> undef, float %4169, i64 0
  %4171 = extractelement <4 x i64> %4166, i64 1
  %4172 = getelementptr inbounds float, ptr %f8.host, i64 %4171
  %4173 = load float, ptr %4172, align 4, !tbaa !36
  %4174 = insertelement <4 x float> %4170, float %4173, i64 1
  %4175 = extractelement <4 x i64> %4166, i64 2
  %4176 = getelementptr inbounds float, ptr %f8.host, i64 %4175
  %4177 = load float, ptr %4176, align 4, !tbaa !36
  %4178 = insertelement <4 x float> %4174, float %4177, i64 2
  %4179 = extractelement <4 x i64> %4166, i64 3
  %4180 = getelementptr inbounds float, ptr %f8.host, i64 %4179
  %4181 = load float, ptr %4180, align 4, !tbaa !36
  %4182 = insertelement <4 x float> %4178, float %4181, i64 3
  %4183 = fmul <4 x float> %4182, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4184 = add <4 x i32> %4078, %t2495
  %4185 = sext <4 x i32> %4184 to <4 x i64>
  %4186 = extractelement <4 x i64> %4185, i64 0
  %4187 = getelementptr inbounds float, ptr %f8.host, i64 %4186
  %4188 = load float, ptr %4187, align 4, !tbaa !36
  %4189 = insertelement <4 x float> undef, float %4188, i64 0
  %4190 = extractelement <4 x i64> %4185, i64 1
  %4191 = getelementptr inbounds float, ptr %f8.host, i64 %4190
  %4192 = load float, ptr %4191, align 4, !tbaa !36
  %4193 = insertelement <4 x float> %4189, float %4192, i64 1
  %4194 = extractelement <4 x i64> %4185, i64 2
  %4195 = getelementptr inbounds float, ptr %f8.host, i64 %4194
  %4196 = load float, ptr %4195, align 4, !tbaa !36
  %4197 = insertelement <4 x float> %4193, float %4196, i64 2
  %4198 = extractelement <4 x i64> %4185, i64 3
  %4199 = getelementptr inbounds float, ptr %f8.host, i64 %4198
  %4200 = load float, ptr %4199, align 4, !tbaa !36
  %4201 = insertelement <4 x float> %4197, float %4200, i64 3
  %4202 = fmul <4 x float> %4201, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4203 = fadd <4 x float> %4183, %4202
  %4204 = fmul <4 x float> %4203, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4205 = fadd <4 x float> %4164, %4204
  %4206 = mul nsw <4 x i32> %t2491, %249
  %4207 = add nsw <4 x i32> %4206, %4104
  %4208 = sext <4 x i32> %4207 to <4 x i64>
  %4209 = extractelement <4 x i64> %4208, i64 0
  %4210 = getelementptr inbounds float, ptr %f7.host, i64 %4209
  %4211 = load float, ptr %4210, align 4, !tbaa !54
  %4212 = insertelement <4 x float> undef, float %4211, i64 0
  %4213 = extractelement <4 x i64> %4208, i64 1
  %4214 = getelementptr inbounds float, ptr %f7.host, i64 %4213
  %4215 = load float, ptr %4214, align 4, !tbaa !54
  %4216 = insertelement <4 x float> %4212, float %4215, i64 1
  %4217 = extractelement <4 x i64> %4208, i64 2
  %4218 = getelementptr inbounds float, ptr %f7.host, i64 %4217
  %4219 = load float, ptr %4218, align 4, !tbaa !54
  %4220 = insertelement <4 x float> %4216, float %4219, i64 2
  %4221 = extractelement <4 x i64> %4208, i64 3
  %4222 = getelementptr inbounds float, ptr %f7.host, i64 %4221
  %4223 = load float, ptr %4222, align 4, !tbaa !54
  %4224 = insertelement <4 x float> %4220, float %4223, i64 3
  %4225 = fsub <4 x float> %4224, %4205
  %4226 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2484
  %4227 = fmul <4 x float> %4226, %4225
  %4228 = fadd <4 x float> %4124, %4227
  %4229 = sext i32 %t2488 to i64
  %4230 = add nsw i64 %3187, %4229
  %4231 = getelementptr inbounds float, ptr %f130.host, i64 %4230
  %4232 = load <4 x float>, ptr %4231, align 4, !tbaa !38
  %4233 = fmul <4 x float> %4232, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4234 = add nsw i64 %3190, %4229
  %4235 = getelementptr inbounds float, ptr %f130.host, i64 %4234
  %4236 = load <4 x float>, ptr %4235, align 4, !tbaa !38
  %4237 = fmul <4 x float> %4236, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4238 = fadd <4 x float> %4233, %4237
  %4239 = fmul <4 x float> %4238, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4240 = sext i32 %t2486 to i64
  %4241 = add nsw i64 %3187, %4240
  %4242 = getelementptr inbounds float, ptr %f130.host, i64 %4241
  %4243 = load <4 x float>, ptr %4242, align 4, !tbaa !38
  %4244 = fmul <4 x float> %4243, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4245 = add nsw i64 %3190, %4240
  %4246 = getelementptr inbounds float, ptr %f130.host, i64 %4245
  %4247 = load <4 x float>, ptr %4246, align 4, !tbaa !38
  %4248 = fmul <4 x float> %4247, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4249 = fadd <4 x float> %4244, %4248
  %4250 = fmul <4 x float> %4249, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4251 = fadd <4 x float> %4239, %4250
  %4252 = fadd <4 x float> %4228, %4251
  %4253 = add nsw i32 %t2498, %3191
  %4254 = insertelement <4 x i32> undef, i32 %4253, i64 0
  %4255 = shufflevector <4 x i32> %4254, <4 x i32> undef, <4 x i32> zeroinitializer
  %4256 = add nsw <4 x i32> %4255, <i32 0, i32 1, i32 2, i32 3>
  %4257 = add nsw <4 x i32> %t2516, %4256
  %4258 = sext <4 x i32> %4257 to <4 x i64>
  %4259 = extractelement <4 x i64> %4258, i64 0
  %4260 = getelementptr inbounds float, ptr %f8.host, i64 %4259
  %4261 = load float, ptr %4260, align 4, !tbaa !36
  %4262 = insertelement <4 x float> undef, float %4261, i64 0
  %4263 = extractelement <4 x i64> %4258, i64 1
  %4264 = getelementptr inbounds float, ptr %f8.host, i64 %4263
  %4265 = load float, ptr %4264, align 4, !tbaa !36
  %4266 = insertelement <4 x float> %4262, float %4265, i64 1
  %4267 = extractelement <4 x i64> %4258, i64 2
  %4268 = getelementptr inbounds float, ptr %f8.host, i64 %4267
  %4269 = load float, ptr %4268, align 4, !tbaa !36
  %4270 = insertelement <4 x float> %4266, float %4269, i64 2
  %4271 = extractelement <4 x i64> %4258, i64 3
  %4272 = getelementptr inbounds float, ptr %f8.host, i64 %4271
  %4273 = load float, ptr %4272, align 4, !tbaa !36
  %4274 = insertelement <4 x float> %4270, float %4273, i64 3
  %4275 = fmul <4 x float> %4274, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4276 = add nsw i32 %t2498, %3192
  %4277 = insertelement <4 x i32> undef, i32 %4276, i64 0
  %4278 = shufflevector <4 x i32> %4277, <4 x i32> undef, <4 x i32> zeroinitializer
  %4279 = add <4 x i32> %4278, <i32 -1, i32 0, i32 1, i32 2>
  %4280 = add <4 x i32> %4279, %t2516
  %4281 = sext <4 x i32> %4280 to <4 x i64>
  %4282 = extractelement <4 x i64> %4281, i64 0
  %4283 = getelementptr inbounds float, ptr %f8.host, i64 %4282
  %4284 = load float, ptr %4283, align 4, !tbaa !36
  %4285 = insertelement <4 x float> undef, float %4284, i64 0
  %4286 = extractelement <4 x i64> %4281, i64 1
  %4287 = getelementptr inbounds float, ptr %f8.host, i64 %4286
  %4288 = load float, ptr %4287, align 4, !tbaa !36
  %4289 = insertelement <4 x float> %4285, float %4288, i64 1
  %4290 = extractelement <4 x i64> %4281, i64 2
  %4291 = getelementptr inbounds float, ptr %f8.host, i64 %4290
  %4292 = load float, ptr %4291, align 4, !tbaa !36
  %4293 = insertelement <4 x float> %4289, float %4292, i64 2
  %4294 = extractelement <4 x i64> %4281, i64 3
  %4295 = getelementptr inbounds float, ptr %f8.host, i64 %4294
  %4296 = load float, ptr %4295, align 4, !tbaa !36
  %4297 = insertelement <4 x float> %4293, float %4296, i64 3
  %4298 = fmul <4 x float> %4297, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4299 = fadd <4 x float> %4275, %4298
  %4300 = fmul <4 x float> %4299, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4301 = add nsw i32 %t2493, %3191
  %4302 = insertelement <4 x i32> undef, i32 %4301, i64 0
  %4303 = shufflevector <4 x i32> %4302, <4 x i32> undef, <4 x i32> zeroinitializer
  %4304 = add nsw <4 x i32> %4303, <i32 0, i32 1, i32 2, i32 3>
  %4305 = add nsw <4 x i32> %t2516, %4304
  %4306 = sext <4 x i32> %4305 to <4 x i64>
  %4307 = extractelement <4 x i64> %4306, i64 0
  %4308 = getelementptr inbounds float, ptr %f8.host, i64 %4307
  %4309 = load float, ptr %4308, align 4, !tbaa !36
  %4310 = insertelement <4 x float> undef, float %4309, i64 0
  %4311 = extractelement <4 x i64> %4306, i64 1
  %4312 = getelementptr inbounds float, ptr %f8.host, i64 %4311
  %4313 = load float, ptr %4312, align 4, !tbaa !36
  %4314 = insertelement <4 x float> %4310, float %4313, i64 1
  %4315 = extractelement <4 x i64> %4306, i64 2
  %4316 = getelementptr inbounds float, ptr %f8.host, i64 %4315
  %4317 = load float, ptr %4316, align 4, !tbaa !36
  %4318 = insertelement <4 x float> %4314, float %4317, i64 2
  %4319 = extractelement <4 x i64> %4306, i64 3
  %4320 = getelementptr inbounds float, ptr %f8.host, i64 %4319
  %4321 = load float, ptr %4320, align 4, !tbaa !36
  %4322 = insertelement <4 x float> %4318, float %4321, i64 3
  %4323 = fmul <4 x float> %4322, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4324 = add nsw i32 %t2493, %3192
  %4325 = insertelement <4 x i32> undef, i32 %4324, i64 0
  %4326 = shufflevector <4 x i32> %4325, <4 x i32> undef, <4 x i32> zeroinitializer
  %4327 = add <4 x i32> %4326, <i32 -1, i32 0, i32 1, i32 2>
  %4328 = add <4 x i32> %4327, %t2516
  %4329 = sext <4 x i32> %4328 to <4 x i64>
  %4330 = extractelement <4 x i64> %4329, i64 0
  %4331 = getelementptr inbounds float, ptr %f8.host, i64 %4330
  %4332 = load float, ptr %4331, align 4, !tbaa !36
  %4333 = insertelement <4 x float> undef, float %4332, i64 0
  %4334 = extractelement <4 x i64> %4329, i64 1
  %4335 = getelementptr inbounds float, ptr %f8.host, i64 %4334
  %4336 = load float, ptr %4335, align 4, !tbaa !36
  %4337 = insertelement <4 x float> %4333, float %4336, i64 1
  %4338 = extractelement <4 x i64> %4329, i64 2
  %4339 = getelementptr inbounds float, ptr %f8.host, i64 %4338
  %4340 = load float, ptr %4339, align 4, !tbaa !36
  %4341 = insertelement <4 x float> %4337, float %4340, i64 2
  %4342 = extractelement <4 x i64> %4329, i64 3
  %4343 = getelementptr inbounds float, ptr %f8.host, i64 %4342
  %4344 = load float, ptr %4343, align 4, !tbaa !36
  %4345 = insertelement <4 x float> %4341, float %4344, i64 3
  %4346 = fmul <4 x float> %4345, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4347 = fadd <4 x float> %4323, %4346
  %4348 = fmul <4 x float> %4347, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4349 = fadd <4 x float> %4300, %4348
  %4350 = mul nsw <4 x i32> %4003, %249
  %4351 = add nsw i32 %t2489, 1
  %4352 = insertelement <4 x i32> undef, i32 %4351, i64 0
  %4353 = shufflevector <4 x i32> %4352, <4 x i32> undef, <4 x i32> zeroinitializer
  %4354 = add nsw <4 x i32> %4353, <i32 0, i32 2, i32 4, i32 6>
  %4355 = add nsw <4 x i32> %4350, %4354
  %4356 = sext <4 x i32> %4355 to <4 x i64>
  %4357 = extractelement <4 x i64> %4356, i64 0
  %4358 = getelementptr inbounds float, ptr %f7.host, i64 %4357
  %4359 = load float, ptr %4358, align 4, !tbaa !54
  %4360 = insertelement <4 x float> undef, float %4359, i64 0
  %4361 = extractelement <4 x i64> %4356, i64 1
  %4362 = getelementptr inbounds float, ptr %f7.host, i64 %4361
  %4363 = load float, ptr %4362, align 4, !tbaa !54
  %4364 = insertelement <4 x float> %4360, float %4363, i64 1
  %4365 = extractelement <4 x i64> %4356, i64 2
  %4366 = getelementptr inbounds float, ptr %f7.host, i64 %4365
  %4367 = load float, ptr %4366, align 4, !tbaa !54
  %4368 = insertelement <4 x float> %4364, float %4367, i64 2
  %4369 = extractelement <4 x i64> %4356, i64 3
  %4370 = getelementptr inbounds float, ptr %f7.host, i64 %4369
  %4371 = load float, ptr %4370, align 4, !tbaa !54
  %4372 = insertelement <4 x float> %4368, float %4371, i64 3
  %4373 = fsub <4 x float> %4372, %4349
  %4374 = fmul <4 x float> %t2505, %4373
  %4375 = add nsw <4 x i32> %t2511, %4256
  %4376 = sext <4 x i32> %4375 to <4 x i64>
  %4377 = extractelement <4 x i64> %4376, i64 0
  %4378 = getelementptr inbounds float, ptr %f8.host, i64 %4377
  %4379 = load float, ptr %4378, align 4, !tbaa !36
  %4380 = insertelement <4 x float> undef, float %4379, i64 0
  %4381 = extractelement <4 x i64> %4376, i64 1
  %4382 = getelementptr inbounds float, ptr %f8.host, i64 %4381
  %4383 = load float, ptr %4382, align 4, !tbaa !36
  %4384 = insertelement <4 x float> %4380, float %4383, i64 1
  %4385 = extractelement <4 x i64> %4376, i64 2
  %4386 = getelementptr inbounds float, ptr %f8.host, i64 %4385
  %4387 = load float, ptr %4386, align 4, !tbaa !36
  %4388 = insertelement <4 x float> %4384, float %4387, i64 2
  %4389 = extractelement <4 x i64> %4376, i64 3
  %4390 = getelementptr inbounds float, ptr %f8.host, i64 %4389
  %4391 = load float, ptr %4390, align 4, !tbaa !36
  %4392 = insertelement <4 x float> %4388, float %4391, i64 3
  %4393 = fmul <4 x float> %4392, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4394 = add <4 x i32> %4279, %t2511
  %4395 = sext <4 x i32> %4394 to <4 x i64>
  %4396 = extractelement <4 x i64> %4395, i64 0
  %4397 = getelementptr inbounds float, ptr %f8.host, i64 %4396
  %4398 = load float, ptr %4397, align 4, !tbaa !36
  %4399 = insertelement <4 x float> undef, float %4398, i64 0
  %4400 = extractelement <4 x i64> %4395, i64 1
  %4401 = getelementptr inbounds float, ptr %f8.host, i64 %4400
  %4402 = load float, ptr %4401, align 4, !tbaa !36
  %4403 = insertelement <4 x float> %4399, float %4402, i64 1
  %4404 = extractelement <4 x i64> %4395, i64 2
  %4405 = getelementptr inbounds float, ptr %f8.host, i64 %4404
  %4406 = load float, ptr %4405, align 4, !tbaa !36
  %4407 = insertelement <4 x float> %4403, float %4406, i64 2
  %4408 = extractelement <4 x i64> %4395, i64 3
  %4409 = getelementptr inbounds float, ptr %f8.host, i64 %4408
  %4410 = load float, ptr %4409, align 4, !tbaa !36
  %4411 = insertelement <4 x float> %4407, float %4410, i64 3
  %4412 = fmul <4 x float> %4411, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4413 = fadd <4 x float> %4393, %4412
  %4414 = fmul <4 x float> %4413, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4415 = add nsw <4 x i32> %t2511, %4304
  %4416 = sext <4 x i32> %4415 to <4 x i64>
  %4417 = extractelement <4 x i64> %4416, i64 0
  %4418 = getelementptr inbounds float, ptr %f8.host, i64 %4417
  %4419 = load float, ptr %4418, align 4, !tbaa !36
  %4420 = insertelement <4 x float> undef, float %4419, i64 0
  %4421 = extractelement <4 x i64> %4416, i64 1
  %4422 = getelementptr inbounds float, ptr %f8.host, i64 %4421
  %4423 = load float, ptr %4422, align 4, !tbaa !36
  %4424 = insertelement <4 x float> %4420, float %4423, i64 1
  %4425 = extractelement <4 x i64> %4416, i64 2
  %4426 = getelementptr inbounds float, ptr %f8.host, i64 %4425
  %4427 = load float, ptr %4426, align 4, !tbaa !36
  %4428 = insertelement <4 x float> %4424, float %4427, i64 2
  %4429 = extractelement <4 x i64> %4416, i64 3
  %4430 = getelementptr inbounds float, ptr %f8.host, i64 %4429
  %4431 = load float, ptr %4430, align 4, !tbaa !36
  %4432 = insertelement <4 x float> %4428, float %4431, i64 3
  %4433 = fmul <4 x float> %4432, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4434 = add <4 x i32> %4327, %t2511
  %4435 = sext <4 x i32> %4434 to <4 x i64>
  %4436 = extractelement <4 x i64> %4435, i64 0
  %4437 = getelementptr inbounds float, ptr %f8.host, i64 %4436
  %4438 = load float, ptr %4437, align 4, !tbaa !36
  %4439 = insertelement <4 x float> undef, float %4438, i64 0
  %4440 = extractelement <4 x i64> %4435, i64 1
  %4441 = getelementptr inbounds float, ptr %f8.host, i64 %4440
  %4442 = load float, ptr %4441, align 4, !tbaa !36
  %4443 = insertelement <4 x float> %4439, float %4442, i64 1
  %4444 = extractelement <4 x i64> %4435, i64 2
  %4445 = getelementptr inbounds float, ptr %f8.host, i64 %4444
  %4446 = load float, ptr %4445, align 4, !tbaa !36
  %4447 = insertelement <4 x float> %4443, float %4446, i64 2
  %4448 = extractelement <4 x i64> %4435, i64 3
  %4449 = getelementptr inbounds float, ptr %f8.host, i64 %4448
  %4450 = load float, ptr %4449, align 4, !tbaa !36
  %4451 = insertelement <4 x float> %4447, float %4450, i64 3
  %4452 = fmul <4 x float> %4451, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4453 = fadd <4 x float> %4433, %4452
  %4454 = fmul <4 x float> %4453, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4455 = fadd <4 x float> %4414, %4454
  %4456 = mul nsw <4 x i32> %t2508, %249
  %4457 = add nsw <4 x i32> %4456, %4354
  %4458 = sext <4 x i32> %4457 to <4 x i64>
  %4459 = extractelement <4 x i64> %4458, i64 0
  %4460 = getelementptr inbounds float, ptr %f7.host, i64 %4459
  %4461 = load float, ptr %4460, align 4, !tbaa !54
  %4462 = insertelement <4 x float> undef, float %4461, i64 0
  %4463 = extractelement <4 x i64> %4458, i64 1
  %4464 = getelementptr inbounds float, ptr %f7.host, i64 %4463
  %4465 = load float, ptr %4464, align 4, !tbaa !54
  %4466 = insertelement <4 x float> %4462, float %4465, i64 1
  %4467 = extractelement <4 x i64> %4458, i64 2
  %4468 = getelementptr inbounds float, ptr %f7.host, i64 %4467
  %4469 = load float, ptr %4468, align 4, !tbaa !54
  %4470 = insertelement <4 x float> %4466, float %4469, i64 2
  %4471 = extractelement <4 x i64> %4458, i64 3
  %4472 = getelementptr inbounds float, ptr %f7.host, i64 %4471
  %4473 = load float, ptr %4472, align 4, !tbaa !54
  %4474 = insertelement <4 x float> %4470, float %4473, i64 3
  %4475 = fsub <4 x float> %4474, %4455
  %4476 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2505
  %4477 = fmul <4 x float> %4476, %4475
  %4478 = fadd <4 x float> %4374, %4477
  %4479 = add nsw i64 %3194, %4229
  %4480 = getelementptr inbounds float, ptr %f130.host, i64 %4479
  %4481 = load <4 x float>, ptr %4480, align 4, !tbaa !38
  %4482 = fmul <4 x float> %4481, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4483 = add nsw i64 %3197, %4229
  %4484 = getelementptr inbounds float, ptr %f130.host, i64 %4483
  %4485 = load <4 x float>, ptr %4484, align 4, !tbaa !38
  %4486 = fmul <4 x float> %4485, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4487 = fadd <4 x float> %4482, %4486
  %4488 = fmul <4 x float> %4487, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4489 = add nsw i64 %3194, %4240
  %4490 = getelementptr inbounds float, ptr %f130.host, i64 %4489
  %4491 = load <4 x float>, ptr %4490, align 4, !tbaa !38
  %4492 = fmul <4 x float> %4491, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4493 = add nsw i64 %3197, %4240
  %4494 = getelementptr inbounds float, ptr %f130.host, i64 %4493
  %4495 = load <4 x float>, ptr %4494, align 4, !tbaa !38
  %4496 = fmul <4 x float> %4495, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4497 = fadd <4 x float> %4492, %4496
  %4498 = fmul <4 x float> %4497, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4499 = fadd <4 x float> %4488, %4498
  %4500 = fadd <4 x float> %4478, %4499
  %4501 = shufflevector <4 x float> %4252, <4 x float> %4500, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow143 = sub nsw i32 %3978, %226
  %4502 = sext i32 %narrow143 to i64
  %4503 = mul nsw i64 %251, %4502
  %4504 = add nsw i64 %4503, %3198
  %4505 = getelementptr inbounds float, ptr %129, i64 %4504
  store <8 x float> %4501, ptr %4505, align 4, !tbaa !64
  br label %"produce f12832"

"produce f12832":                                 ; preds = %"for f129.s0.v3.v328.preheader", %"end for f129.s0.v3.v325", %"produce f12919"
  %4506 = trunc i64 %3413 to i32
  %4507 = add i32 %4506, 5
  %4508 = and i32 %4507, 7
  %4509 = icmp eq i32 %4508, 7
  br i1 %4509, label %true_bb34, label %"produce f12745"

true_bb34:                                        ; preds = %"produce f12832"
  br i1 %3202, label %"for f128.s0.v3.v337.preheader", label %"end for f128.s0.v3.v338", !prof !5

"for f128.s0.v3.v337.preheader":                  ; preds = %true_bb34
  %4510 = trunc i64 %3413 to i32
  %4511 = add i32 %4510, 21
  %4512 = ashr i32 %4511, 3
  %4513 = shl nsw i32 %4512, 1
  %4514 = and i32 %4513, 2
  %4515 = ashr i32 %4511, 4
  %t2517 = add nsw i32 %4514, %4515
  %4516 = sub nsw i32 %4512, %f74.v4.min_realized
  %4517 = mul nsw i32 %4516, %820
  %4518 = add i32 %3205, %4517
  %4519 = add nsw i32 %t2517, %821
  %t2524 = mul nsw i32 %4519, %118
  %4520 = sub nsw i32 %4515, %226
  %t2526 = mul nsw i32 %4520, %118
  %4521 = sub nsw i32 %4512, %f6.v4.min_realized
  %4522 = mul nsw i32 %4521, %f6.stride.1
  %4523 = add i32 %3206, %4522
  %4524 = add i32 %t2517, %822
  %4525 = mul nsw i32 %4524, %f7.stride.1
  %4526 = sub nsw i32 %4515, %f7.v4.min_realized
  %4527 = mul nsw i32 %4526, %f7.stride.1
  %4528 = sext i32 %t2526 to i64
  %4529 = add nsw i64 %4528, -1
  %4530 = sext i32 %t2524 to i64
  %4531 = add nsw i64 %4530, -1
  %narrow139 = sub nsw i32 %4512, %817
  %4532 = sext i32 %narrow139 to i64
  %4533 = mul nsw i64 %828, %4532
  %4534 = add nsw i64 %4533, %.neg213
  br label %"for f128.s0.v3.v337"

"for f128.s0.v3.v337":                            ; preds = %"for f128.s0.v3.v337.preheader", %"for f128.s0.v3.v337"
  %lsr.iv291 = phi i32 [ %lsr.iv.next292, %"for f128.s0.v3.v337" ], [ 0, %"for f128.s0.v3.v337.preheader" ]
  %lsr.iv289 = phi i32 [ %lsr.iv.next290, %"for f128.s0.v3.v337" ], [ %a907, %"for f128.s0.v3.v337.preheader" ]
  %4535 = add i32 %lsr.iv291, %100
  %4536 = ashr i32 %4535, 1
  %t2518 = add nsw i32 %4536, %3204
  %4537 = add i32 %4518, %lsr.iv291
  %4538 = sext i32 %4537 to i64
  %4539 = getelementptr inbounds float, ptr %f74.host, i64 %4538
  %4540 = load <4 x float>, ptr %4539, align 4, !tbaa !56
  %4541 = add nsw i64 %4538, 4
  %4542 = getelementptr inbounds float, ptr %f74.host, i64 %4541
  %4543 = load <4 x float>, ptr %4542, align 4, !tbaa !56
  %4544 = shufflevector <4 x float> %4540, <4 x float> %4543, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2520 = fmul <4 x float> %233, %4544
  %a908 = fptosi <4 x float> %t2520 to <4 x i32>
  %a911 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a908)
  %4545 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a911, <4 x i32> zeroinitializer)
  %4546 = sitofp <4 x i32> %4545 to <4 x float>
  %t2522 = fsub <4 x float> %t2520, %4546
  %4547 = add i32 %4523, %lsr.iv291
  %t2529 = sub nsw <4 x i32> %4545, %242
  %4548 = sub nsw i32 %t2518, %f7.v3.min_realized
  %t2532 = add nsw i32 %4548, %4525
  %t2533 = mul nsw <4 x i32> %t2529, %249
  %4549 = sub nsw i32 %4536, %f7.v3.min_realized
  %t2535 = add nsw i32 %4549, %4525
  %t2537 = add nsw i32 %4548, %4527
  %t2538 = add nsw i32 %4549, %4527
  %4550 = add nsw <4 x i32> %t2529, <i32 1, i32 1, i32 1, i32 1>
  %t2539 = mul nsw <4 x i32> %4550, %249
  %4551 = add i32 %4535, 1
  %4552 = shl i32 %4551, 1
  %4553 = and i32 %4552, 2
  %4554 = ashr i32 %4551, 1
  %t2540 = add nsw i32 %4553, %4554
  %4555 = shufflevector <4 x float> %4540, <4 x float> %4543, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2541 = fmul <4 x float> %233, %4555
  %a912 = fptosi <4 x float> %t2541 to <4 x i32>
  %a915 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a912)
  %4556 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a915, <4 x i32> zeroinitializer)
  %4557 = sitofp <4 x i32> %4556 to <4 x float>
  %t2543 = fsub <4 x float> %t2541, %4557
  %t2546 = sub nsw <4 x i32> %4556, %242
  %4558 = sub nsw i32 %t2540, %f7.v3.min_realized
  %t2548 = add nsw i32 %4558, %4525
  %t2549 = mul nsw <4 x i32> %t2546, %249
  %4559 = sub nsw i32 %4554, %f7.v3.min_realized
  %t2551 = add nsw i32 %4559, %4525
  %t2552 = add nsw i32 %4558, %4527
  %t2553 = add nsw i32 %4559, %4527
  %4560 = add nsw <4 x i32> %t2546, <i32 1, i32 1, i32 1, i32 1>
  %t2554 = mul nsw <4 x i32> %4560, %249
  %4561 = insertelement <4 x i32> undef, i32 %t2538, i64 0
  %4562 = shufflevector <4 x i32> %4561, <4 x i32> undef, <4 x i32> zeroinitializer
  %4563 = add nsw <4 x i32> %4562, <i32 0, i32 1, i32 2, i32 3>
  %4564 = add nsw <4 x i32> %t2539, %4563
  %4565 = sext <4 x i32> %4564 to <4 x i64>
  %4566 = extractelement <4 x i64> %4565, i64 0
  %4567 = getelementptr inbounds float, ptr %f7.host, i64 %4566
  %4568 = load float, ptr %4567, align 4, !tbaa !54
  %4569 = insertelement <4 x float> undef, float %4568, i64 0
  %4570 = extractelement <4 x i64> %4565, i64 1
  %4571 = getelementptr inbounds float, ptr %f7.host, i64 %4570
  %4572 = load float, ptr %4571, align 4, !tbaa !54
  %4573 = insertelement <4 x float> %4569, float %4572, i64 1
  %4574 = extractelement <4 x i64> %4565, i64 2
  %4575 = getelementptr inbounds float, ptr %f7.host, i64 %4574
  %4576 = load float, ptr %4575, align 4, !tbaa !54
  %4577 = insertelement <4 x float> %4573, float %4576, i64 2
  %4578 = extractelement <4 x i64> %4565, i64 3
  %4579 = getelementptr inbounds float, ptr %f7.host, i64 %4578
  %4580 = load float, ptr %4579, align 4, !tbaa !54
  %4581 = insertelement <4 x float> %4577, float %4580, i64 3
  %4582 = fmul <4 x float> %4581, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4583 = insertelement <4 x i32> undef, i32 %t2537, i64 0
  %4584 = shufflevector <4 x i32> %4583, <4 x i32> undef, <4 x i32> zeroinitializer
  %4585 = add <4 x i32> %4584, <i32 -1, i32 0, i32 1, i32 2>
  %4586 = add <4 x i32> %4585, %t2539
  %4587 = sext <4 x i32> %4586 to <4 x i64>
  %4588 = extractelement <4 x i64> %4587, i64 0
  %4589 = getelementptr inbounds float, ptr %f7.host, i64 %4588
  %4590 = load float, ptr %4589, align 4, !tbaa !54
  %4591 = insertelement <4 x float> undef, float %4590, i64 0
  %4592 = extractelement <4 x i64> %4587, i64 1
  %4593 = getelementptr inbounds float, ptr %f7.host, i64 %4592
  %4594 = load float, ptr %4593, align 4, !tbaa !54
  %4595 = insertelement <4 x float> %4591, float %4594, i64 1
  %4596 = extractelement <4 x i64> %4587, i64 2
  %4597 = getelementptr inbounds float, ptr %f7.host, i64 %4596
  %4598 = load float, ptr %4597, align 4, !tbaa !54
  %4599 = insertelement <4 x float> %4595, float %4598, i64 2
  %4600 = extractelement <4 x i64> %4587, i64 3
  %4601 = getelementptr inbounds float, ptr %f7.host, i64 %4600
  %4602 = load float, ptr %4601, align 4, !tbaa !54
  %4603 = insertelement <4 x float> %4599, float %4602, i64 3
  %4604 = fmul <4 x float> %4603, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4605 = fadd <4 x float> %4582, %4604
  %4606 = fmul <4 x float> %4605, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4607 = insertelement <4 x i32> undef, i32 %t2535, i64 0
  %4608 = shufflevector <4 x i32> %4607, <4 x i32> undef, <4 x i32> zeroinitializer
  %4609 = add nsw <4 x i32> %4608, <i32 0, i32 1, i32 2, i32 3>
  %4610 = add nsw <4 x i32> %t2539, %4609
  %4611 = sext <4 x i32> %4610 to <4 x i64>
  %4612 = extractelement <4 x i64> %4611, i64 0
  %4613 = getelementptr inbounds float, ptr %f7.host, i64 %4612
  %4614 = load float, ptr %4613, align 4, !tbaa !54
  %4615 = insertelement <4 x float> undef, float %4614, i64 0
  %4616 = extractelement <4 x i64> %4611, i64 1
  %4617 = getelementptr inbounds float, ptr %f7.host, i64 %4616
  %4618 = load float, ptr %4617, align 4, !tbaa !54
  %4619 = insertelement <4 x float> %4615, float %4618, i64 1
  %4620 = extractelement <4 x i64> %4611, i64 2
  %4621 = getelementptr inbounds float, ptr %f7.host, i64 %4620
  %4622 = load float, ptr %4621, align 4, !tbaa !54
  %4623 = insertelement <4 x float> %4619, float %4622, i64 2
  %4624 = extractelement <4 x i64> %4611, i64 3
  %4625 = getelementptr inbounds float, ptr %f7.host, i64 %4624
  %4626 = load float, ptr %4625, align 4, !tbaa !54
  %4627 = insertelement <4 x float> %4623, float %4626, i64 3
  %4628 = fmul <4 x float> %4627, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4629 = insertelement <4 x i32> undef, i32 %t2532, i64 0
  %4630 = shufflevector <4 x i32> %4629, <4 x i32> undef, <4 x i32> zeroinitializer
  %4631 = add <4 x i32> %4630, <i32 -1, i32 0, i32 1, i32 2>
  %4632 = add <4 x i32> %4631, %t2539
  %4633 = sext <4 x i32> %4632 to <4 x i64>
  %4634 = extractelement <4 x i64> %4633, i64 0
  %4635 = getelementptr inbounds float, ptr %f7.host, i64 %4634
  %4636 = load float, ptr %4635, align 4, !tbaa !54
  %4637 = insertelement <4 x float> undef, float %4636, i64 0
  %4638 = extractelement <4 x i64> %4633, i64 1
  %4639 = getelementptr inbounds float, ptr %f7.host, i64 %4638
  %4640 = load float, ptr %4639, align 4, !tbaa !54
  %4641 = insertelement <4 x float> %4637, float %4640, i64 1
  %4642 = extractelement <4 x i64> %4633, i64 2
  %4643 = getelementptr inbounds float, ptr %f7.host, i64 %4642
  %4644 = load float, ptr %4643, align 4, !tbaa !54
  %4645 = insertelement <4 x float> %4641, float %4644, i64 2
  %4646 = extractelement <4 x i64> %4633, i64 3
  %4647 = getelementptr inbounds float, ptr %f7.host, i64 %4646
  %4648 = load float, ptr %4647, align 4, !tbaa !54
  %4649 = insertelement <4 x float> %4645, float %4648, i64 3
  %4650 = fmul <4 x float> %4649, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4651 = fadd <4 x float> %4628, %4650
  %4652 = fmul <4 x float> %4651, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4653 = fadd <4 x float> %4606, %4652
  %4654 = mul nsw <4 x i32> %4550, %825
  %4655 = insertelement <4 x i32> undef, i32 %4547, i64 0
  %4656 = shufflevector <4 x i32> %4655, <4 x i32> undef, <4 x i32> zeroinitializer
  %4657 = add nsw <4 x i32> %4656, <i32 0, i32 2, i32 4, i32 6>
  %4658 = add nsw <4 x i32> %4654, %4657
  %4659 = sext <4 x i32> %4658 to <4 x i64>
  %4660 = extractelement <4 x i64> %4659, i64 0
  %4661 = getelementptr inbounds float, ptr %f6.host, i64 %4660
  %4662 = load float, ptr %4661, align 4, !tbaa !50
  %4663 = insertelement <4 x float> undef, float %4662, i64 0
  %4664 = extractelement <4 x i64> %4659, i64 1
  %4665 = getelementptr inbounds float, ptr %f6.host, i64 %4664
  %4666 = load float, ptr %4665, align 4, !tbaa !50
  %4667 = insertelement <4 x float> %4663, float %4666, i64 1
  %4668 = extractelement <4 x i64> %4659, i64 2
  %4669 = getelementptr inbounds float, ptr %f6.host, i64 %4668
  %4670 = load float, ptr %4669, align 4, !tbaa !50
  %4671 = insertelement <4 x float> %4667, float %4670, i64 2
  %4672 = extractelement <4 x i64> %4659, i64 3
  %4673 = getelementptr inbounds float, ptr %f6.host, i64 %4672
  %4674 = load float, ptr %4673, align 4, !tbaa !50
  %4675 = insertelement <4 x float> %4671, float %4674, i64 3
  %4676 = fsub <4 x float> %4675, %4653
  %4677 = fmul <4 x float> %t2522, %4676
  %4678 = add nsw <4 x i32> %t2533, %4563
  %4679 = sext <4 x i32> %4678 to <4 x i64>
  %4680 = extractelement <4 x i64> %4679, i64 0
  %4681 = getelementptr inbounds float, ptr %f7.host, i64 %4680
  %4682 = load float, ptr %4681, align 4, !tbaa !54
  %4683 = insertelement <4 x float> undef, float %4682, i64 0
  %4684 = extractelement <4 x i64> %4679, i64 1
  %4685 = getelementptr inbounds float, ptr %f7.host, i64 %4684
  %4686 = load float, ptr %4685, align 4, !tbaa !54
  %4687 = insertelement <4 x float> %4683, float %4686, i64 1
  %4688 = extractelement <4 x i64> %4679, i64 2
  %4689 = getelementptr inbounds float, ptr %f7.host, i64 %4688
  %4690 = load float, ptr %4689, align 4, !tbaa !54
  %4691 = insertelement <4 x float> %4687, float %4690, i64 2
  %4692 = extractelement <4 x i64> %4679, i64 3
  %4693 = getelementptr inbounds float, ptr %f7.host, i64 %4692
  %4694 = load float, ptr %4693, align 4, !tbaa !54
  %4695 = insertelement <4 x float> %4691, float %4694, i64 3
  %4696 = fmul <4 x float> %4695, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4697 = add <4 x i32> %4585, %t2533
  %4698 = sext <4 x i32> %4697 to <4 x i64>
  %4699 = extractelement <4 x i64> %4698, i64 0
  %4700 = getelementptr inbounds float, ptr %f7.host, i64 %4699
  %4701 = load float, ptr %4700, align 4, !tbaa !54
  %4702 = insertelement <4 x float> undef, float %4701, i64 0
  %4703 = extractelement <4 x i64> %4698, i64 1
  %4704 = getelementptr inbounds float, ptr %f7.host, i64 %4703
  %4705 = load float, ptr %4704, align 4, !tbaa !54
  %4706 = insertelement <4 x float> %4702, float %4705, i64 1
  %4707 = extractelement <4 x i64> %4698, i64 2
  %4708 = getelementptr inbounds float, ptr %f7.host, i64 %4707
  %4709 = load float, ptr %4708, align 4, !tbaa !54
  %4710 = insertelement <4 x float> %4706, float %4709, i64 2
  %4711 = extractelement <4 x i64> %4698, i64 3
  %4712 = getelementptr inbounds float, ptr %f7.host, i64 %4711
  %4713 = load float, ptr %4712, align 4, !tbaa !54
  %4714 = insertelement <4 x float> %4710, float %4713, i64 3
  %4715 = fmul <4 x float> %4714, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4716 = fadd <4 x float> %4696, %4715
  %4717 = fmul <4 x float> %4716, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4718 = add nsw <4 x i32> %t2533, %4609
  %4719 = sext <4 x i32> %4718 to <4 x i64>
  %4720 = extractelement <4 x i64> %4719, i64 0
  %4721 = getelementptr inbounds float, ptr %f7.host, i64 %4720
  %4722 = load float, ptr %4721, align 4, !tbaa !54
  %4723 = insertelement <4 x float> undef, float %4722, i64 0
  %4724 = extractelement <4 x i64> %4719, i64 1
  %4725 = getelementptr inbounds float, ptr %f7.host, i64 %4724
  %4726 = load float, ptr %4725, align 4, !tbaa !54
  %4727 = insertelement <4 x float> %4723, float %4726, i64 1
  %4728 = extractelement <4 x i64> %4719, i64 2
  %4729 = getelementptr inbounds float, ptr %f7.host, i64 %4728
  %4730 = load float, ptr %4729, align 4, !tbaa !54
  %4731 = insertelement <4 x float> %4727, float %4730, i64 2
  %4732 = extractelement <4 x i64> %4719, i64 3
  %4733 = getelementptr inbounds float, ptr %f7.host, i64 %4732
  %4734 = load float, ptr %4733, align 4, !tbaa !54
  %4735 = insertelement <4 x float> %4731, float %4734, i64 3
  %4736 = fmul <4 x float> %4735, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4737 = add <4 x i32> %4631, %t2533
  %4738 = sext <4 x i32> %4737 to <4 x i64>
  %4739 = extractelement <4 x i64> %4738, i64 0
  %4740 = getelementptr inbounds float, ptr %f7.host, i64 %4739
  %4741 = load float, ptr %4740, align 4, !tbaa !54
  %4742 = insertelement <4 x float> undef, float %4741, i64 0
  %4743 = extractelement <4 x i64> %4738, i64 1
  %4744 = getelementptr inbounds float, ptr %f7.host, i64 %4743
  %4745 = load float, ptr %4744, align 4, !tbaa !54
  %4746 = insertelement <4 x float> %4742, float %4745, i64 1
  %4747 = extractelement <4 x i64> %4738, i64 2
  %4748 = getelementptr inbounds float, ptr %f7.host, i64 %4747
  %4749 = load float, ptr %4748, align 4, !tbaa !54
  %4750 = insertelement <4 x float> %4746, float %4749, i64 2
  %4751 = extractelement <4 x i64> %4738, i64 3
  %4752 = getelementptr inbounds float, ptr %f7.host, i64 %4751
  %4753 = load float, ptr %4752, align 4, !tbaa !54
  %4754 = insertelement <4 x float> %4750, float %4753, i64 3
  %4755 = fmul <4 x float> %4754, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4756 = fadd <4 x float> %4736, %4755
  %4757 = fmul <4 x float> %4756, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4758 = fadd <4 x float> %4717, %4757
  %4759 = mul nsw <4 x i32> %t2529, %825
  %4760 = add nsw <4 x i32> %4759, %4657
  %4761 = sext <4 x i32> %4760 to <4 x i64>
  %4762 = extractelement <4 x i64> %4761, i64 0
  %4763 = getelementptr inbounds float, ptr %f6.host, i64 %4762
  %4764 = load float, ptr %4763, align 4, !tbaa !50
  %4765 = insertelement <4 x float> undef, float %4764, i64 0
  %4766 = extractelement <4 x i64> %4761, i64 1
  %4767 = getelementptr inbounds float, ptr %f6.host, i64 %4766
  %4768 = load float, ptr %4767, align 4, !tbaa !50
  %4769 = insertelement <4 x float> %4765, float %4768, i64 1
  %4770 = extractelement <4 x i64> %4761, i64 2
  %4771 = getelementptr inbounds float, ptr %f6.host, i64 %4770
  %4772 = load float, ptr %4771, align 4, !tbaa !50
  %4773 = insertelement <4 x float> %4769, float %4772, i64 2
  %4774 = extractelement <4 x i64> %4761, i64 3
  %4775 = getelementptr inbounds float, ptr %f6.host, i64 %4774
  %4776 = load float, ptr %4775, align 4, !tbaa !50
  %4777 = insertelement <4 x float> %4773, float %4776, i64 3
  %4778 = fsub <4 x float> %4777, %4758
  %4779 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2522
  %4780 = fmul <4 x float> %4779, %4778
  %4781 = fadd <4 x float> %4677, %4780
  %narrow137 = sub nsw i32 %4536, %f129.v3.min_realized
  %4782 = sext i32 %narrow137 to i64
  %4783 = add nsw i64 %4782, %4528
  %4784 = getelementptr inbounds float, ptr %129, i64 %4783
  %4785 = load <4 x float>, ptr %4784, align 4, !tbaa !64
  %4786 = fmul <4 x float> %4785, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4787 = sext i32 %t2518 to i64
  %4788 = sub nsw i64 %4787, %826
  %4789 = add nsw i64 %4529, %4788
  %4790 = getelementptr inbounds float, ptr %129, i64 %4789
  %4791 = load <4 x float>, ptr %4790, align 4, !tbaa !64
  %4792 = fmul <4 x float> %4791, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4793 = fadd <4 x float> %4786, %4792
  %4794 = fmul <4 x float> %4793, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4795 = add nsw i64 %4782, %4530
  %4796 = getelementptr inbounds float, ptr %129, i64 %4795
  %4797 = load <4 x float>, ptr %4796, align 4, !tbaa !64
  %4798 = fmul <4 x float> %4797, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4799 = add nsw i64 %4531, %4788
  %4800 = getelementptr inbounds float, ptr %129, i64 %4799
  %4801 = load <4 x float>, ptr %4800, align 4, !tbaa !64
  %4802 = fmul <4 x float> %4801, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4803 = fadd <4 x float> %4798, %4802
  %4804 = fmul <4 x float> %4803, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4805 = fadd <4 x float> %4794, %4804
  %4806 = fadd <4 x float> %4781, %4805
  %4807 = insertelement <4 x i32> undef, i32 %t2553, i64 0
  %4808 = shufflevector <4 x i32> %4807, <4 x i32> undef, <4 x i32> zeroinitializer
  %4809 = add nsw <4 x i32> %4808, <i32 0, i32 1, i32 2, i32 3>
  %4810 = add nsw <4 x i32> %t2554, %4809
  %4811 = sext <4 x i32> %4810 to <4 x i64>
  %4812 = extractelement <4 x i64> %4811, i64 0
  %4813 = getelementptr inbounds float, ptr %f7.host, i64 %4812
  %4814 = load float, ptr %4813, align 4, !tbaa !54
  %4815 = insertelement <4 x float> undef, float %4814, i64 0
  %4816 = extractelement <4 x i64> %4811, i64 1
  %4817 = getelementptr inbounds float, ptr %f7.host, i64 %4816
  %4818 = load float, ptr %4817, align 4, !tbaa !54
  %4819 = insertelement <4 x float> %4815, float %4818, i64 1
  %4820 = extractelement <4 x i64> %4811, i64 2
  %4821 = getelementptr inbounds float, ptr %f7.host, i64 %4820
  %4822 = load float, ptr %4821, align 4, !tbaa !54
  %4823 = insertelement <4 x float> %4819, float %4822, i64 2
  %4824 = extractelement <4 x i64> %4811, i64 3
  %4825 = getelementptr inbounds float, ptr %f7.host, i64 %4824
  %4826 = load float, ptr %4825, align 4, !tbaa !54
  %4827 = insertelement <4 x float> %4823, float %4826, i64 3
  %4828 = fmul <4 x float> %4827, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4829 = insertelement <4 x i32> undef, i32 %t2552, i64 0
  %4830 = shufflevector <4 x i32> %4829, <4 x i32> undef, <4 x i32> zeroinitializer
  %4831 = add <4 x i32> %4830, <i32 -1, i32 0, i32 1, i32 2>
  %4832 = add <4 x i32> %4831, %t2554
  %4833 = sext <4 x i32> %4832 to <4 x i64>
  %4834 = extractelement <4 x i64> %4833, i64 0
  %4835 = getelementptr inbounds float, ptr %f7.host, i64 %4834
  %4836 = load float, ptr %4835, align 4, !tbaa !54
  %4837 = insertelement <4 x float> undef, float %4836, i64 0
  %4838 = extractelement <4 x i64> %4833, i64 1
  %4839 = getelementptr inbounds float, ptr %f7.host, i64 %4838
  %4840 = load float, ptr %4839, align 4, !tbaa !54
  %4841 = insertelement <4 x float> %4837, float %4840, i64 1
  %4842 = extractelement <4 x i64> %4833, i64 2
  %4843 = getelementptr inbounds float, ptr %f7.host, i64 %4842
  %4844 = load float, ptr %4843, align 4, !tbaa !54
  %4845 = insertelement <4 x float> %4841, float %4844, i64 2
  %4846 = extractelement <4 x i64> %4833, i64 3
  %4847 = getelementptr inbounds float, ptr %f7.host, i64 %4846
  %4848 = load float, ptr %4847, align 4, !tbaa !54
  %4849 = insertelement <4 x float> %4845, float %4848, i64 3
  %4850 = fmul <4 x float> %4849, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4851 = fadd <4 x float> %4828, %4850
  %4852 = fmul <4 x float> %4851, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4853 = insertelement <4 x i32> undef, i32 %t2551, i64 0
  %4854 = shufflevector <4 x i32> %4853, <4 x i32> undef, <4 x i32> zeroinitializer
  %4855 = add nsw <4 x i32> %4854, <i32 0, i32 1, i32 2, i32 3>
  %4856 = add nsw <4 x i32> %t2554, %4855
  %4857 = sext <4 x i32> %4856 to <4 x i64>
  %4858 = extractelement <4 x i64> %4857, i64 0
  %4859 = getelementptr inbounds float, ptr %f7.host, i64 %4858
  %4860 = load float, ptr %4859, align 4, !tbaa !54
  %4861 = insertelement <4 x float> undef, float %4860, i64 0
  %4862 = extractelement <4 x i64> %4857, i64 1
  %4863 = getelementptr inbounds float, ptr %f7.host, i64 %4862
  %4864 = load float, ptr %4863, align 4, !tbaa !54
  %4865 = insertelement <4 x float> %4861, float %4864, i64 1
  %4866 = extractelement <4 x i64> %4857, i64 2
  %4867 = getelementptr inbounds float, ptr %f7.host, i64 %4866
  %4868 = load float, ptr %4867, align 4, !tbaa !54
  %4869 = insertelement <4 x float> %4865, float %4868, i64 2
  %4870 = extractelement <4 x i64> %4857, i64 3
  %4871 = getelementptr inbounds float, ptr %f7.host, i64 %4870
  %4872 = load float, ptr %4871, align 4, !tbaa !54
  %4873 = insertelement <4 x float> %4869, float %4872, i64 3
  %4874 = fmul <4 x float> %4873, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4875 = insertelement <4 x i32> undef, i32 %t2548, i64 0
  %4876 = shufflevector <4 x i32> %4875, <4 x i32> undef, <4 x i32> zeroinitializer
  %4877 = add <4 x i32> %4876, <i32 -1, i32 0, i32 1, i32 2>
  %4878 = add <4 x i32> %4877, %t2554
  %4879 = sext <4 x i32> %4878 to <4 x i64>
  %4880 = extractelement <4 x i64> %4879, i64 0
  %4881 = getelementptr inbounds float, ptr %f7.host, i64 %4880
  %4882 = load float, ptr %4881, align 4, !tbaa !54
  %4883 = insertelement <4 x float> undef, float %4882, i64 0
  %4884 = extractelement <4 x i64> %4879, i64 1
  %4885 = getelementptr inbounds float, ptr %f7.host, i64 %4884
  %4886 = load float, ptr %4885, align 4, !tbaa !54
  %4887 = insertelement <4 x float> %4883, float %4886, i64 1
  %4888 = extractelement <4 x i64> %4879, i64 2
  %4889 = getelementptr inbounds float, ptr %f7.host, i64 %4888
  %4890 = load float, ptr %4889, align 4, !tbaa !54
  %4891 = insertelement <4 x float> %4887, float %4890, i64 2
  %4892 = extractelement <4 x i64> %4879, i64 3
  %4893 = getelementptr inbounds float, ptr %f7.host, i64 %4892
  %4894 = load float, ptr %4893, align 4, !tbaa !54
  %4895 = insertelement <4 x float> %4891, float %4894, i64 3
  %4896 = fmul <4 x float> %4895, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4897 = fadd <4 x float> %4874, %4896
  %4898 = fmul <4 x float> %4897, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4899 = fadd <4 x float> %4852, %4898
  %4900 = mul nsw <4 x i32> %4560, %825
  %4901 = add i32 %4547, 1
  %4902 = insertelement <4 x i32> undef, i32 %4901, i64 0
  %4903 = shufflevector <4 x i32> %4902, <4 x i32> undef, <4 x i32> zeroinitializer
  %4904 = add nsw <4 x i32> %4903, <i32 0, i32 2, i32 4, i32 6>
  %4905 = add nsw <4 x i32> %4900, %4904
  %4906 = sext <4 x i32> %4905 to <4 x i64>
  %4907 = extractelement <4 x i64> %4906, i64 0
  %4908 = getelementptr inbounds float, ptr %f6.host, i64 %4907
  %4909 = load float, ptr %4908, align 4, !tbaa !50
  %4910 = insertelement <4 x float> undef, float %4909, i64 0
  %4911 = extractelement <4 x i64> %4906, i64 1
  %4912 = getelementptr inbounds float, ptr %f6.host, i64 %4911
  %4913 = load float, ptr %4912, align 4, !tbaa !50
  %4914 = insertelement <4 x float> %4910, float %4913, i64 1
  %4915 = extractelement <4 x i64> %4906, i64 2
  %4916 = getelementptr inbounds float, ptr %f6.host, i64 %4915
  %4917 = load float, ptr %4916, align 4, !tbaa !50
  %4918 = insertelement <4 x float> %4914, float %4917, i64 2
  %4919 = extractelement <4 x i64> %4906, i64 3
  %4920 = getelementptr inbounds float, ptr %f6.host, i64 %4919
  %4921 = load float, ptr %4920, align 4, !tbaa !50
  %4922 = insertelement <4 x float> %4918, float %4921, i64 3
  %4923 = fsub <4 x float> %4922, %4899
  %4924 = fmul <4 x float> %t2543, %4923
  %4925 = add nsw <4 x i32> %t2549, %4809
  %4926 = sext <4 x i32> %4925 to <4 x i64>
  %4927 = extractelement <4 x i64> %4926, i64 0
  %4928 = getelementptr inbounds float, ptr %f7.host, i64 %4927
  %4929 = load float, ptr %4928, align 4, !tbaa !54
  %4930 = insertelement <4 x float> undef, float %4929, i64 0
  %4931 = extractelement <4 x i64> %4926, i64 1
  %4932 = getelementptr inbounds float, ptr %f7.host, i64 %4931
  %4933 = load float, ptr %4932, align 4, !tbaa !54
  %4934 = insertelement <4 x float> %4930, float %4933, i64 1
  %4935 = extractelement <4 x i64> %4926, i64 2
  %4936 = getelementptr inbounds float, ptr %f7.host, i64 %4935
  %4937 = load float, ptr %4936, align 4, !tbaa !54
  %4938 = insertelement <4 x float> %4934, float %4937, i64 2
  %4939 = extractelement <4 x i64> %4926, i64 3
  %4940 = getelementptr inbounds float, ptr %f7.host, i64 %4939
  %4941 = load float, ptr %4940, align 4, !tbaa !54
  %4942 = insertelement <4 x float> %4938, float %4941, i64 3
  %4943 = fmul <4 x float> %4942, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4944 = add <4 x i32> %t2549, %4830
  %4945 = add <4 x i32> %4944, <i32 -1, i32 0, i32 1, i32 2>
  %4946 = sext <4 x i32> %4945 to <4 x i64>
  %4947 = extractelement <4 x i64> %4946, i64 0
  %4948 = getelementptr inbounds float, ptr %f7.host, i64 %4947
  %4949 = load float, ptr %4948, align 4, !tbaa !54
  %4950 = insertelement <4 x float> undef, float %4949, i64 0
  %4951 = extractelement <4 x i64> %4946, i64 1
  %4952 = getelementptr inbounds float, ptr %f7.host, i64 %4951
  %4953 = load float, ptr %4952, align 4, !tbaa !54
  %4954 = insertelement <4 x float> %4950, float %4953, i64 1
  %4955 = extractelement <4 x i64> %4946, i64 2
  %4956 = getelementptr inbounds float, ptr %f7.host, i64 %4955
  %4957 = load float, ptr %4956, align 4, !tbaa !54
  %4958 = insertelement <4 x float> %4954, float %4957, i64 2
  %4959 = extractelement <4 x i64> %4946, i64 3
  %4960 = getelementptr inbounds float, ptr %f7.host, i64 %4959
  %4961 = load float, ptr %4960, align 4, !tbaa !54
  %4962 = insertelement <4 x float> %4958, float %4961, i64 3
  %4963 = fmul <4 x float> %4962, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4964 = fadd <4 x float> %4943, %4963
  %4965 = fmul <4 x float> %4964, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4966 = add nsw <4 x i32> %t2549, %4855
  %4967 = sext <4 x i32> %4966 to <4 x i64>
  %4968 = extractelement <4 x i64> %4967, i64 0
  %4969 = getelementptr inbounds float, ptr %f7.host, i64 %4968
  %4970 = load float, ptr %4969, align 4, !tbaa !54
  %4971 = insertelement <4 x float> undef, float %4970, i64 0
  %4972 = extractelement <4 x i64> %4967, i64 1
  %4973 = getelementptr inbounds float, ptr %f7.host, i64 %4972
  %4974 = load float, ptr %4973, align 4, !tbaa !54
  %4975 = insertelement <4 x float> %4971, float %4974, i64 1
  %4976 = extractelement <4 x i64> %4967, i64 2
  %4977 = getelementptr inbounds float, ptr %f7.host, i64 %4976
  %4978 = load float, ptr %4977, align 4, !tbaa !54
  %4979 = insertelement <4 x float> %4975, float %4978, i64 2
  %4980 = extractelement <4 x i64> %4967, i64 3
  %4981 = getelementptr inbounds float, ptr %f7.host, i64 %4980
  %4982 = load float, ptr %4981, align 4, !tbaa !54
  %4983 = insertelement <4 x float> %4979, float %4982, i64 3
  %4984 = fmul <4 x float> %4983, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4985 = add <4 x i32> %t2549, %4876
  %4986 = add <4 x i32> %4985, <i32 -1, i32 0, i32 1, i32 2>
  %4987 = sext <4 x i32> %4986 to <4 x i64>
  %4988 = extractelement <4 x i64> %4987, i64 0
  %4989 = getelementptr inbounds float, ptr %f7.host, i64 %4988
  %4990 = load float, ptr %4989, align 4, !tbaa !54
  %4991 = insertelement <4 x float> undef, float %4990, i64 0
  %4992 = extractelement <4 x i64> %4987, i64 1
  %4993 = getelementptr inbounds float, ptr %f7.host, i64 %4992
  %4994 = load float, ptr %4993, align 4, !tbaa !54
  %4995 = insertelement <4 x float> %4991, float %4994, i64 1
  %4996 = extractelement <4 x i64> %4987, i64 2
  %4997 = getelementptr inbounds float, ptr %f7.host, i64 %4996
  %4998 = load float, ptr %4997, align 4, !tbaa !54
  %4999 = insertelement <4 x float> %4995, float %4998, i64 2
  %5000 = extractelement <4 x i64> %4987, i64 3
  %5001 = getelementptr inbounds float, ptr %f7.host, i64 %5000
  %5002 = load float, ptr %5001, align 4, !tbaa !54
  %5003 = insertelement <4 x float> %4999, float %5002, i64 3
  %5004 = fmul <4 x float> %5003, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5005 = fadd <4 x float> %4984, %5004
  %5006 = fmul <4 x float> %5005, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5007 = fadd <4 x float> %4965, %5006
  %5008 = mul nsw <4 x i32> %t2546, %825
  %5009 = add nsw <4 x i32> %5008, %4904
  %5010 = sext <4 x i32> %5009 to <4 x i64>
  %5011 = extractelement <4 x i64> %5010, i64 0
  %5012 = getelementptr inbounds float, ptr %f6.host, i64 %5011
  %5013 = load float, ptr %5012, align 4, !tbaa !50
  %5014 = insertelement <4 x float> undef, float %5013, i64 0
  %5015 = extractelement <4 x i64> %5010, i64 1
  %5016 = getelementptr inbounds float, ptr %f6.host, i64 %5015
  %5017 = load float, ptr %5016, align 4, !tbaa !50
  %5018 = insertelement <4 x float> %5014, float %5017, i64 1
  %5019 = extractelement <4 x i64> %5010, i64 2
  %5020 = getelementptr inbounds float, ptr %f6.host, i64 %5019
  %5021 = load float, ptr %5020, align 4, !tbaa !50
  %5022 = insertelement <4 x float> %5018, float %5021, i64 2
  %5023 = extractelement <4 x i64> %5010, i64 3
  %5024 = getelementptr inbounds float, ptr %f6.host, i64 %5023
  %5025 = load float, ptr %5024, align 4, !tbaa !50
  %5026 = insertelement <4 x float> %5022, float %5025, i64 3
  %5027 = fsub <4 x float> %5026, %5007
  %5028 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2543
  %5029 = fmul <4 x float> %5028, %5027
  %5030 = fadd <4 x float> %4924, %5029
  %narrow138 = sub nsw i32 %4554, %f129.v3.min_realized
  %5031 = sext i32 %narrow138 to i64
  %5032 = add nsw i64 %5031, %4528
  %5033 = getelementptr inbounds float, ptr %129, i64 %5032
  %5034 = load <4 x float>, ptr %5033, align 4, !tbaa !64
  %5035 = fmul <4 x float> %5034, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5036 = sext i32 %t2540 to i64
  %5037 = sub nsw i64 %5036, %826
  %5038 = add nsw i64 %4529, %5037
  %5039 = getelementptr inbounds float, ptr %129, i64 %5038
  %5040 = load <4 x float>, ptr %5039, align 4, !tbaa !64
  %5041 = fmul <4 x float> %5040, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5042 = fadd <4 x float> %5035, %5041
  %5043 = fmul <4 x float> %5042, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5044 = add nsw i64 %5031, %4530
  %5045 = getelementptr inbounds float, ptr %129, i64 %5044
  %5046 = load <4 x float>, ptr %5045, align 4, !tbaa !64
  %5047 = fmul <4 x float> %5046, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5048 = add nsw i64 %4531, %5037
  %5049 = getelementptr inbounds float, ptr %129, i64 %5048
  %5050 = load <4 x float>, ptr %5049, align 4, !tbaa !64
  %5051 = fmul <4 x float> %5050, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5052 = fadd <4 x float> %5047, %5051
  %5053 = fmul <4 x float> %5052, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5054 = fadd <4 x float> %5043, %5053
  %5055 = fadd <4 x float> %5030, %5054
  %5056 = shufflevector <4 x float> %4806, <4 x float> %5055, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %5057 = sext i32 %4535 to i64
  %5058 = add nsw i64 %4534, %5057
  %5059 = getelementptr inbounds float, ptr %155, i64 %5058
  store <8 x float> %5056, ptr %5059, align 4, !tbaa !66
  %lsr.iv.next290 = add i32 %lsr.iv289, -1
  %lsr.iv.next292 = add nuw i32 %lsr.iv291, 8
  %.not140 = icmp eq i32 %lsr.iv.next290, 0
  br i1 %.not140, label %"end for f128.s0.v3.v338", label %"for f128.s0.v3.v337"

"end for f128.s0.v3.v338":                        ; preds = %"for f128.s0.v3.v337", %true_bb34
  br i1 %.not129, label %"produce f12745", label %"for f128.s0.v3.v341.preheader", !prof !4

"for f128.s0.v3.v341.preheader":                  ; preds = %"end for f128.s0.v3.v338"
  %5060 = trunc i64 %3413 to i32
  %5061 = add i32 %5060, 21
  %5062 = ashr i32 %5061, 3
  %5063 = shl nsw i32 %5062, 1
  %5064 = and i32 %5063, 2
  %5065 = ashr i32 %5061, 4
  %t2555 = add nsw i32 %5064, %5065
  %5066 = sub nsw i32 %5062, %f74.v4.min_realized
  %5067 = mul nsw i32 %5066, %820
  %t2558 = add nsw i32 %3210, %5067
  %5068 = sext i32 %t2558 to i64
  %5069 = getelementptr inbounds float, ptr %f74.host, i64 %5068
  %5070 = load <4 x float>, ptr %5069, align 4, !tbaa !56
  %5071 = add nsw i64 %5068, 4
  %5072 = getelementptr inbounds float, ptr %f74.host, i64 %5071
  %5073 = load <4 x float>, ptr %5072, align 4, !tbaa !56
  %5074 = shufflevector <4 x float> %5070, <4 x float> %5073, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2559 = fmul <4 x float> %233, %5074
  %a918 = fptosi <4 x float> %t2559 to <4 x i32>
  %a921 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a918)
  %5075 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a921, <4 x i32> zeroinitializer)
  %5076 = sitofp <4 x i32> %5075 to <4 x float>
  %t2561 = fsub <4 x float> %t2559, %5076
  %5077 = add nsw i32 %t2555, %821
  %t2563 = mul nsw i32 %5077, %118
  %5078 = sub nsw i32 %5065, %226
  %t2565 = mul nsw i32 %5078, %118
  %5079 = sub nsw i32 %5062, %f6.v4.min_realized
  %5080 = mul nsw i32 %5079, %f6.stride.1
  %t2566 = add nsw i32 %5080, %3211
  %t2568 = sub nsw <4 x i32> %5075, %242
  %5081 = add i32 %t2555, %822
  %5082 = mul nsw i32 %5081, %f7.stride.1
  %t2571 = add nsw i32 %5082, %3212
  %t2572 = mul nsw <4 x i32> %t2568, %249
  %t2574 = add nsw i32 %5082, %3213
  %5083 = sub nsw i32 %5065, %f7.v4.min_realized
  %5084 = mul nsw i32 %5083, %f7.stride.1
  %t2576 = add nsw i32 %5084, %3212
  %t2577 = add nsw i32 %5084, %3213
  %5085 = add nsw <4 x i32> %t2568, <i32 1, i32 1, i32 1, i32 1>
  %t2578 = mul nsw <4 x i32> %5085, %249
  %5086 = shufflevector <4 x float> %5070, <4 x float> %5073, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2580 = fmul <4 x float> %233, %5086
  %a922 = fptosi <4 x float> %t2580 to <4 x i32>
  %a925 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a922)
  %5087 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a925, <4 x i32> zeroinitializer)
  %5088 = sitofp <4 x i32> %5087 to <4 x float>
  %t2582 = fsub <4 x float> %t2580, %5088
  %t2585 = sub nsw <4 x i32> %5087, %242
  %t2587 = add nsw i32 %5082, %3218
  %t2588 = mul nsw <4 x i32> %t2585, %249
  %t2590 = add nsw i32 %5082, %3219
  %t2591 = add nsw i32 %5084, %3218
  %t2592 = add nsw i32 %5084, %3219
  %5089 = add nsw <4 x i32> %t2585, <i32 1, i32 1, i32 1, i32 1>
  %t2593 = mul nsw <4 x i32> %5089, %249
  %5090 = insertelement <4 x i32> undef, i32 %t2577, i64 0
  %5091 = shufflevector <4 x i32> %5090, <4 x i32> undef, <4 x i32> zeroinitializer
  %5092 = add nsw <4 x i32> %5091, <i32 0, i32 1, i32 2, i32 3>
  %5093 = add nsw <4 x i32> %t2578, %5092
  %5094 = sext <4 x i32> %5093 to <4 x i64>
  %5095 = extractelement <4 x i64> %5094, i64 0
  %5096 = getelementptr inbounds float, ptr %f7.host, i64 %5095
  %5097 = load float, ptr %5096, align 4, !tbaa !54
  %5098 = insertelement <4 x float> undef, float %5097, i64 0
  %5099 = extractelement <4 x i64> %5094, i64 1
  %5100 = getelementptr inbounds float, ptr %f7.host, i64 %5099
  %5101 = load float, ptr %5100, align 4, !tbaa !54
  %5102 = insertelement <4 x float> %5098, float %5101, i64 1
  %5103 = extractelement <4 x i64> %5094, i64 2
  %5104 = getelementptr inbounds float, ptr %f7.host, i64 %5103
  %5105 = load float, ptr %5104, align 4, !tbaa !54
  %5106 = insertelement <4 x float> %5102, float %5105, i64 2
  %5107 = extractelement <4 x i64> %5094, i64 3
  %5108 = getelementptr inbounds float, ptr %f7.host, i64 %5107
  %5109 = load float, ptr %5108, align 4, !tbaa !54
  %5110 = insertelement <4 x float> %5106, float %5109, i64 3
  %5111 = fmul <4 x float> %5110, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5112 = insertelement <4 x i32> undef, i32 %t2576, i64 0
  %5113 = shufflevector <4 x i32> %5112, <4 x i32> undef, <4 x i32> zeroinitializer
  %5114 = add <4 x i32> %5113, <i32 -1, i32 0, i32 1, i32 2>
  %5115 = add <4 x i32> %5114, %t2578
  %5116 = sext <4 x i32> %5115 to <4 x i64>
  %5117 = extractelement <4 x i64> %5116, i64 0
  %5118 = getelementptr inbounds float, ptr %f7.host, i64 %5117
  %5119 = load float, ptr %5118, align 4, !tbaa !54
  %5120 = insertelement <4 x float> undef, float %5119, i64 0
  %5121 = extractelement <4 x i64> %5116, i64 1
  %5122 = getelementptr inbounds float, ptr %f7.host, i64 %5121
  %5123 = load float, ptr %5122, align 4, !tbaa !54
  %5124 = insertelement <4 x float> %5120, float %5123, i64 1
  %5125 = extractelement <4 x i64> %5116, i64 2
  %5126 = getelementptr inbounds float, ptr %f7.host, i64 %5125
  %5127 = load float, ptr %5126, align 4, !tbaa !54
  %5128 = insertelement <4 x float> %5124, float %5127, i64 2
  %5129 = extractelement <4 x i64> %5116, i64 3
  %5130 = getelementptr inbounds float, ptr %f7.host, i64 %5129
  %5131 = load float, ptr %5130, align 4, !tbaa !54
  %5132 = insertelement <4 x float> %5128, float %5131, i64 3
  %5133 = fmul <4 x float> %5132, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5134 = fadd <4 x float> %5111, %5133
  %5135 = fmul <4 x float> %5134, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5136 = insertelement <4 x i32> undef, i32 %t2574, i64 0
  %5137 = shufflevector <4 x i32> %5136, <4 x i32> undef, <4 x i32> zeroinitializer
  %5138 = add nsw <4 x i32> %5137, <i32 0, i32 1, i32 2, i32 3>
  %5139 = add nsw <4 x i32> %t2578, %5138
  %5140 = sext <4 x i32> %5139 to <4 x i64>
  %5141 = extractelement <4 x i64> %5140, i64 0
  %5142 = getelementptr inbounds float, ptr %f7.host, i64 %5141
  %5143 = load float, ptr %5142, align 4, !tbaa !54
  %5144 = insertelement <4 x float> undef, float %5143, i64 0
  %5145 = extractelement <4 x i64> %5140, i64 1
  %5146 = getelementptr inbounds float, ptr %f7.host, i64 %5145
  %5147 = load float, ptr %5146, align 4, !tbaa !54
  %5148 = insertelement <4 x float> %5144, float %5147, i64 1
  %5149 = extractelement <4 x i64> %5140, i64 2
  %5150 = getelementptr inbounds float, ptr %f7.host, i64 %5149
  %5151 = load float, ptr %5150, align 4, !tbaa !54
  %5152 = insertelement <4 x float> %5148, float %5151, i64 2
  %5153 = extractelement <4 x i64> %5140, i64 3
  %5154 = getelementptr inbounds float, ptr %f7.host, i64 %5153
  %5155 = load float, ptr %5154, align 4, !tbaa !54
  %5156 = insertelement <4 x float> %5152, float %5155, i64 3
  %5157 = fmul <4 x float> %5156, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5158 = insertelement <4 x i32> undef, i32 %t2571, i64 0
  %5159 = shufflevector <4 x i32> %5158, <4 x i32> undef, <4 x i32> zeroinitializer
  %5160 = add <4 x i32> %5159, <i32 -1, i32 0, i32 1, i32 2>
  %5161 = add <4 x i32> %5160, %t2578
  %5162 = sext <4 x i32> %5161 to <4 x i64>
  %5163 = extractelement <4 x i64> %5162, i64 0
  %5164 = getelementptr inbounds float, ptr %f7.host, i64 %5163
  %5165 = load float, ptr %5164, align 4, !tbaa !54
  %5166 = insertelement <4 x float> undef, float %5165, i64 0
  %5167 = extractelement <4 x i64> %5162, i64 1
  %5168 = getelementptr inbounds float, ptr %f7.host, i64 %5167
  %5169 = load float, ptr %5168, align 4, !tbaa !54
  %5170 = insertelement <4 x float> %5166, float %5169, i64 1
  %5171 = extractelement <4 x i64> %5162, i64 2
  %5172 = getelementptr inbounds float, ptr %f7.host, i64 %5171
  %5173 = load float, ptr %5172, align 4, !tbaa !54
  %5174 = insertelement <4 x float> %5170, float %5173, i64 2
  %5175 = extractelement <4 x i64> %5162, i64 3
  %5176 = getelementptr inbounds float, ptr %f7.host, i64 %5175
  %5177 = load float, ptr %5176, align 4, !tbaa !54
  %5178 = insertelement <4 x float> %5174, float %5177, i64 3
  %5179 = fmul <4 x float> %5178, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5180 = fadd <4 x float> %5157, %5179
  %5181 = fmul <4 x float> %5180, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5182 = fadd <4 x float> %5135, %5181
  %5183 = mul nsw <4 x i32> %5085, %825
  %5184 = insertelement <4 x i32> undef, i32 %t2566, i64 0
  %5185 = shufflevector <4 x i32> %5184, <4 x i32> undef, <4 x i32> zeroinitializer
  %5186 = add nsw <4 x i32> %5185, <i32 0, i32 2, i32 4, i32 6>
  %5187 = add nsw <4 x i32> %5183, %5186
  %5188 = sext <4 x i32> %5187 to <4 x i64>
  %5189 = extractelement <4 x i64> %5188, i64 0
  %5190 = getelementptr inbounds float, ptr %f6.host, i64 %5189
  %5191 = load float, ptr %5190, align 4, !tbaa !50
  %5192 = insertelement <4 x float> undef, float %5191, i64 0
  %5193 = extractelement <4 x i64> %5188, i64 1
  %5194 = getelementptr inbounds float, ptr %f6.host, i64 %5193
  %5195 = load float, ptr %5194, align 4, !tbaa !50
  %5196 = insertelement <4 x float> %5192, float %5195, i64 1
  %5197 = extractelement <4 x i64> %5188, i64 2
  %5198 = getelementptr inbounds float, ptr %f6.host, i64 %5197
  %5199 = load float, ptr %5198, align 4, !tbaa !50
  %5200 = insertelement <4 x float> %5196, float %5199, i64 2
  %5201 = extractelement <4 x i64> %5188, i64 3
  %5202 = getelementptr inbounds float, ptr %f6.host, i64 %5201
  %5203 = load float, ptr %5202, align 4, !tbaa !50
  %5204 = insertelement <4 x float> %5200, float %5203, i64 3
  %5205 = fsub <4 x float> %5204, %5182
  %5206 = fmul <4 x float> %t2561, %5205
  %5207 = add nsw <4 x i32> %t2572, %5092
  %5208 = sext <4 x i32> %5207 to <4 x i64>
  %5209 = extractelement <4 x i64> %5208, i64 0
  %5210 = getelementptr inbounds float, ptr %f7.host, i64 %5209
  %5211 = load float, ptr %5210, align 4, !tbaa !54
  %5212 = insertelement <4 x float> undef, float %5211, i64 0
  %5213 = extractelement <4 x i64> %5208, i64 1
  %5214 = getelementptr inbounds float, ptr %f7.host, i64 %5213
  %5215 = load float, ptr %5214, align 4, !tbaa !54
  %5216 = insertelement <4 x float> %5212, float %5215, i64 1
  %5217 = extractelement <4 x i64> %5208, i64 2
  %5218 = getelementptr inbounds float, ptr %f7.host, i64 %5217
  %5219 = load float, ptr %5218, align 4, !tbaa !54
  %5220 = insertelement <4 x float> %5216, float %5219, i64 2
  %5221 = extractelement <4 x i64> %5208, i64 3
  %5222 = getelementptr inbounds float, ptr %f7.host, i64 %5221
  %5223 = load float, ptr %5222, align 4, !tbaa !54
  %5224 = insertelement <4 x float> %5220, float %5223, i64 3
  %5225 = fmul <4 x float> %5224, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5226 = add <4 x i32> %5114, %t2572
  %5227 = sext <4 x i32> %5226 to <4 x i64>
  %5228 = extractelement <4 x i64> %5227, i64 0
  %5229 = getelementptr inbounds float, ptr %f7.host, i64 %5228
  %5230 = load float, ptr %5229, align 4, !tbaa !54
  %5231 = insertelement <4 x float> undef, float %5230, i64 0
  %5232 = extractelement <4 x i64> %5227, i64 1
  %5233 = getelementptr inbounds float, ptr %f7.host, i64 %5232
  %5234 = load float, ptr %5233, align 4, !tbaa !54
  %5235 = insertelement <4 x float> %5231, float %5234, i64 1
  %5236 = extractelement <4 x i64> %5227, i64 2
  %5237 = getelementptr inbounds float, ptr %f7.host, i64 %5236
  %5238 = load float, ptr %5237, align 4, !tbaa !54
  %5239 = insertelement <4 x float> %5235, float %5238, i64 2
  %5240 = extractelement <4 x i64> %5227, i64 3
  %5241 = getelementptr inbounds float, ptr %f7.host, i64 %5240
  %5242 = load float, ptr %5241, align 4, !tbaa !54
  %5243 = insertelement <4 x float> %5239, float %5242, i64 3
  %5244 = fmul <4 x float> %5243, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5245 = fadd <4 x float> %5225, %5244
  %5246 = fmul <4 x float> %5245, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5247 = add nsw <4 x i32> %t2572, %5138
  %5248 = sext <4 x i32> %5247 to <4 x i64>
  %5249 = extractelement <4 x i64> %5248, i64 0
  %5250 = getelementptr inbounds float, ptr %f7.host, i64 %5249
  %5251 = load float, ptr %5250, align 4, !tbaa !54
  %5252 = insertelement <4 x float> undef, float %5251, i64 0
  %5253 = extractelement <4 x i64> %5248, i64 1
  %5254 = getelementptr inbounds float, ptr %f7.host, i64 %5253
  %5255 = load float, ptr %5254, align 4, !tbaa !54
  %5256 = insertelement <4 x float> %5252, float %5255, i64 1
  %5257 = extractelement <4 x i64> %5248, i64 2
  %5258 = getelementptr inbounds float, ptr %f7.host, i64 %5257
  %5259 = load float, ptr %5258, align 4, !tbaa !54
  %5260 = insertelement <4 x float> %5256, float %5259, i64 2
  %5261 = extractelement <4 x i64> %5248, i64 3
  %5262 = getelementptr inbounds float, ptr %f7.host, i64 %5261
  %5263 = load float, ptr %5262, align 4, !tbaa !54
  %5264 = insertelement <4 x float> %5260, float %5263, i64 3
  %5265 = fmul <4 x float> %5264, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5266 = add <4 x i32> %5160, %t2572
  %5267 = sext <4 x i32> %5266 to <4 x i64>
  %5268 = extractelement <4 x i64> %5267, i64 0
  %5269 = getelementptr inbounds float, ptr %f7.host, i64 %5268
  %5270 = load float, ptr %5269, align 4, !tbaa !54
  %5271 = insertelement <4 x float> undef, float %5270, i64 0
  %5272 = extractelement <4 x i64> %5267, i64 1
  %5273 = getelementptr inbounds float, ptr %f7.host, i64 %5272
  %5274 = load float, ptr %5273, align 4, !tbaa !54
  %5275 = insertelement <4 x float> %5271, float %5274, i64 1
  %5276 = extractelement <4 x i64> %5267, i64 2
  %5277 = getelementptr inbounds float, ptr %f7.host, i64 %5276
  %5278 = load float, ptr %5277, align 4, !tbaa !54
  %5279 = insertelement <4 x float> %5275, float %5278, i64 2
  %5280 = extractelement <4 x i64> %5267, i64 3
  %5281 = getelementptr inbounds float, ptr %f7.host, i64 %5280
  %5282 = load float, ptr %5281, align 4, !tbaa !54
  %5283 = insertelement <4 x float> %5279, float %5282, i64 3
  %5284 = fmul <4 x float> %5283, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5285 = fadd <4 x float> %5265, %5284
  %5286 = fmul <4 x float> %5285, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5287 = fadd <4 x float> %5246, %5286
  %5288 = mul nsw <4 x i32> %t2568, %825
  %5289 = add nsw <4 x i32> %5288, %5186
  %5290 = sext <4 x i32> %5289 to <4 x i64>
  %5291 = extractelement <4 x i64> %5290, i64 0
  %5292 = getelementptr inbounds float, ptr %f6.host, i64 %5291
  %5293 = load float, ptr %5292, align 4, !tbaa !50
  %5294 = insertelement <4 x float> undef, float %5293, i64 0
  %5295 = extractelement <4 x i64> %5290, i64 1
  %5296 = getelementptr inbounds float, ptr %f6.host, i64 %5295
  %5297 = load float, ptr %5296, align 4, !tbaa !50
  %5298 = insertelement <4 x float> %5294, float %5297, i64 1
  %5299 = extractelement <4 x i64> %5290, i64 2
  %5300 = getelementptr inbounds float, ptr %f6.host, i64 %5299
  %5301 = load float, ptr %5300, align 4, !tbaa !50
  %5302 = insertelement <4 x float> %5298, float %5301, i64 2
  %5303 = extractelement <4 x i64> %5290, i64 3
  %5304 = getelementptr inbounds float, ptr %f6.host, i64 %5303
  %5305 = load float, ptr %5304, align 4, !tbaa !50
  %5306 = insertelement <4 x float> %5302, float %5305, i64 3
  %5307 = fsub <4 x float> %5306, %5287
  %5308 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2561
  %5309 = fmul <4 x float> %5308, %5307
  %5310 = fadd <4 x float> %5206, %5309
  %5311 = sext i32 %t2565 to i64
  %5312 = add nsw i64 %5311, %3220
  %5313 = getelementptr inbounds float, ptr %129, i64 %5312
  %5314 = load <4 x float>, ptr %5313, align 4, !tbaa !64
  %5315 = fmul <4 x float> %5314, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5316 = add nsw i64 %3222, %5311
  %5317 = getelementptr inbounds float, ptr %129, i64 %5316
  %5318 = load <4 x float>, ptr %5317, align 4, !tbaa !64
  %5319 = fmul <4 x float> %5318, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5320 = fadd <4 x float> %5315, %5319
  %5321 = fmul <4 x float> %5320, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5322 = sext i32 %t2563 to i64
  %5323 = add nsw i64 %5322, %3220
  %5324 = getelementptr inbounds float, ptr %129, i64 %5323
  %5325 = load <4 x float>, ptr %5324, align 4, !tbaa !64
  %5326 = fmul <4 x float> %5325, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5327 = add nsw i64 %3222, %5322
  %5328 = getelementptr inbounds float, ptr %129, i64 %5327
  %5329 = load <4 x float>, ptr %5328, align 4, !tbaa !64
  %5330 = fmul <4 x float> %5329, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5331 = fadd <4 x float> %5326, %5330
  %5332 = fmul <4 x float> %5331, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5333 = fadd <4 x float> %5321, %5332
  %5334 = fadd <4 x float> %5310, %5333
  %5335 = insertelement <4 x i32> undef, i32 %t2592, i64 0
  %5336 = shufflevector <4 x i32> %5335, <4 x i32> undef, <4 x i32> zeroinitializer
  %5337 = add nsw <4 x i32> %5336, <i32 0, i32 1, i32 2, i32 3>
  %5338 = add nsw <4 x i32> %t2593, %5337
  %5339 = sext <4 x i32> %5338 to <4 x i64>
  %5340 = extractelement <4 x i64> %5339, i64 0
  %5341 = getelementptr inbounds float, ptr %f7.host, i64 %5340
  %5342 = load float, ptr %5341, align 4, !tbaa !54
  %5343 = insertelement <4 x float> undef, float %5342, i64 0
  %5344 = extractelement <4 x i64> %5339, i64 1
  %5345 = getelementptr inbounds float, ptr %f7.host, i64 %5344
  %5346 = load float, ptr %5345, align 4, !tbaa !54
  %5347 = insertelement <4 x float> %5343, float %5346, i64 1
  %5348 = extractelement <4 x i64> %5339, i64 2
  %5349 = getelementptr inbounds float, ptr %f7.host, i64 %5348
  %5350 = load float, ptr %5349, align 4, !tbaa !54
  %5351 = insertelement <4 x float> %5347, float %5350, i64 2
  %5352 = extractelement <4 x i64> %5339, i64 3
  %5353 = getelementptr inbounds float, ptr %f7.host, i64 %5352
  %5354 = load float, ptr %5353, align 4, !tbaa !54
  %5355 = insertelement <4 x float> %5351, float %5354, i64 3
  %5356 = fmul <4 x float> %5355, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5357 = insertelement <4 x i32> undef, i32 %t2591, i64 0
  %5358 = shufflevector <4 x i32> %5357, <4 x i32> undef, <4 x i32> zeroinitializer
  %5359 = add <4 x i32> %5358, <i32 -1, i32 0, i32 1, i32 2>
  %5360 = add <4 x i32> %5359, %t2593
  %5361 = sext <4 x i32> %5360 to <4 x i64>
  %5362 = extractelement <4 x i64> %5361, i64 0
  %5363 = getelementptr inbounds float, ptr %f7.host, i64 %5362
  %5364 = load float, ptr %5363, align 4, !tbaa !54
  %5365 = insertelement <4 x float> undef, float %5364, i64 0
  %5366 = extractelement <4 x i64> %5361, i64 1
  %5367 = getelementptr inbounds float, ptr %f7.host, i64 %5366
  %5368 = load float, ptr %5367, align 4, !tbaa !54
  %5369 = insertelement <4 x float> %5365, float %5368, i64 1
  %5370 = extractelement <4 x i64> %5361, i64 2
  %5371 = getelementptr inbounds float, ptr %f7.host, i64 %5370
  %5372 = load float, ptr %5371, align 4, !tbaa !54
  %5373 = insertelement <4 x float> %5369, float %5372, i64 2
  %5374 = extractelement <4 x i64> %5361, i64 3
  %5375 = getelementptr inbounds float, ptr %f7.host, i64 %5374
  %5376 = load float, ptr %5375, align 4, !tbaa !54
  %5377 = insertelement <4 x float> %5373, float %5376, i64 3
  %5378 = fmul <4 x float> %5377, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5379 = fadd <4 x float> %5356, %5378
  %5380 = fmul <4 x float> %5379, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5381 = insertelement <4 x i32> undef, i32 %t2590, i64 0
  %5382 = shufflevector <4 x i32> %5381, <4 x i32> undef, <4 x i32> zeroinitializer
  %5383 = add nsw <4 x i32> %5382, <i32 0, i32 1, i32 2, i32 3>
  %5384 = add nsw <4 x i32> %t2593, %5383
  %5385 = sext <4 x i32> %5384 to <4 x i64>
  %5386 = extractelement <4 x i64> %5385, i64 0
  %5387 = getelementptr inbounds float, ptr %f7.host, i64 %5386
  %5388 = load float, ptr %5387, align 4, !tbaa !54
  %5389 = insertelement <4 x float> undef, float %5388, i64 0
  %5390 = extractelement <4 x i64> %5385, i64 1
  %5391 = getelementptr inbounds float, ptr %f7.host, i64 %5390
  %5392 = load float, ptr %5391, align 4, !tbaa !54
  %5393 = insertelement <4 x float> %5389, float %5392, i64 1
  %5394 = extractelement <4 x i64> %5385, i64 2
  %5395 = getelementptr inbounds float, ptr %f7.host, i64 %5394
  %5396 = load float, ptr %5395, align 4, !tbaa !54
  %5397 = insertelement <4 x float> %5393, float %5396, i64 2
  %5398 = extractelement <4 x i64> %5385, i64 3
  %5399 = getelementptr inbounds float, ptr %f7.host, i64 %5398
  %5400 = load float, ptr %5399, align 4, !tbaa !54
  %5401 = insertelement <4 x float> %5397, float %5400, i64 3
  %5402 = fmul <4 x float> %5401, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5403 = insertelement <4 x i32> undef, i32 %t2587, i64 0
  %5404 = shufflevector <4 x i32> %5403, <4 x i32> undef, <4 x i32> zeroinitializer
  %5405 = add <4 x i32> %5404, <i32 -1, i32 0, i32 1, i32 2>
  %5406 = add <4 x i32> %5405, %t2593
  %5407 = sext <4 x i32> %5406 to <4 x i64>
  %5408 = extractelement <4 x i64> %5407, i64 0
  %5409 = getelementptr inbounds float, ptr %f7.host, i64 %5408
  %5410 = load float, ptr %5409, align 4, !tbaa !54
  %5411 = insertelement <4 x float> undef, float %5410, i64 0
  %5412 = extractelement <4 x i64> %5407, i64 1
  %5413 = getelementptr inbounds float, ptr %f7.host, i64 %5412
  %5414 = load float, ptr %5413, align 4, !tbaa !54
  %5415 = insertelement <4 x float> %5411, float %5414, i64 1
  %5416 = extractelement <4 x i64> %5407, i64 2
  %5417 = getelementptr inbounds float, ptr %f7.host, i64 %5416
  %5418 = load float, ptr %5417, align 4, !tbaa !54
  %5419 = insertelement <4 x float> %5415, float %5418, i64 2
  %5420 = extractelement <4 x i64> %5407, i64 3
  %5421 = getelementptr inbounds float, ptr %f7.host, i64 %5420
  %5422 = load float, ptr %5421, align 4, !tbaa !54
  %5423 = insertelement <4 x float> %5419, float %5422, i64 3
  %5424 = fmul <4 x float> %5423, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5425 = fadd <4 x float> %5402, %5424
  %5426 = fmul <4 x float> %5425, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5427 = fadd <4 x float> %5380, %5426
  %5428 = mul nsw <4 x i32> %5089, %825
  %5429 = add nsw i32 %t2566, 1
  %5430 = insertelement <4 x i32> undef, i32 %5429, i64 0
  %5431 = shufflevector <4 x i32> %5430, <4 x i32> undef, <4 x i32> zeroinitializer
  %5432 = add nsw <4 x i32> %5431, <i32 0, i32 2, i32 4, i32 6>
  %5433 = add nsw <4 x i32> %5428, %5432
  %5434 = sext <4 x i32> %5433 to <4 x i64>
  %5435 = extractelement <4 x i64> %5434, i64 0
  %5436 = getelementptr inbounds float, ptr %f6.host, i64 %5435
  %5437 = load float, ptr %5436, align 4, !tbaa !50
  %5438 = insertelement <4 x float> undef, float %5437, i64 0
  %5439 = extractelement <4 x i64> %5434, i64 1
  %5440 = getelementptr inbounds float, ptr %f6.host, i64 %5439
  %5441 = load float, ptr %5440, align 4, !tbaa !50
  %5442 = insertelement <4 x float> %5438, float %5441, i64 1
  %5443 = extractelement <4 x i64> %5434, i64 2
  %5444 = getelementptr inbounds float, ptr %f6.host, i64 %5443
  %5445 = load float, ptr %5444, align 4, !tbaa !50
  %5446 = insertelement <4 x float> %5442, float %5445, i64 2
  %5447 = extractelement <4 x i64> %5434, i64 3
  %5448 = getelementptr inbounds float, ptr %f6.host, i64 %5447
  %5449 = load float, ptr %5448, align 4, !tbaa !50
  %5450 = insertelement <4 x float> %5446, float %5449, i64 3
  %5451 = fsub <4 x float> %5450, %5427
  %5452 = fmul <4 x float> %t2582, %5451
  %5453 = add nsw <4 x i32> %t2588, %5337
  %5454 = sext <4 x i32> %5453 to <4 x i64>
  %5455 = extractelement <4 x i64> %5454, i64 0
  %5456 = getelementptr inbounds float, ptr %f7.host, i64 %5455
  %5457 = load float, ptr %5456, align 4, !tbaa !54
  %5458 = insertelement <4 x float> undef, float %5457, i64 0
  %5459 = extractelement <4 x i64> %5454, i64 1
  %5460 = getelementptr inbounds float, ptr %f7.host, i64 %5459
  %5461 = load float, ptr %5460, align 4, !tbaa !54
  %5462 = insertelement <4 x float> %5458, float %5461, i64 1
  %5463 = extractelement <4 x i64> %5454, i64 2
  %5464 = getelementptr inbounds float, ptr %f7.host, i64 %5463
  %5465 = load float, ptr %5464, align 4, !tbaa !54
  %5466 = insertelement <4 x float> %5462, float %5465, i64 2
  %5467 = extractelement <4 x i64> %5454, i64 3
  %5468 = getelementptr inbounds float, ptr %f7.host, i64 %5467
  %5469 = load float, ptr %5468, align 4, !tbaa !54
  %5470 = insertelement <4 x float> %5466, float %5469, i64 3
  %5471 = fmul <4 x float> %5470, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5472 = add <4 x i32> %5359, %t2588
  %5473 = sext <4 x i32> %5472 to <4 x i64>
  %5474 = extractelement <4 x i64> %5473, i64 0
  %5475 = getelementptr inbounds float, ptr %f7.host, i64 %5474
  %5476 = load float, ptr %5475, align 4, !tbaa !54
  %5477 = insertelement <4 x float> undef, float %5476, i64 0
  %5478 = extractelement <4 x i64> %5473, i64 1
  %5479 = getelementptr inbounds float, ptr %f7.host, i64 %5478
  %5480 = load float, ptr %5479, align 4, !tbaa !54
  %5481 = insertelement <4 x float> %5477, float %5480, i64 1
  %5482 = extractelement <4 x i64> %5473, i64 2
  %5483 = getelementptr inbounds float, ptr %f7.host, i64 %5482
  %5484 = load float, ptr %5483, align 4, !tbaa !54
  %5485 = insertelement <4 x float> %5481, float %5484, i64 2
  %5486 = extractelement <4 x i64> %5473, i64 3
  %5487 = getelementptr inbounds float, ptr %f7.host, i64 %5486
  %5488 = load float, ptr %5487, align 4, !tbaa !54
  %5489 = insertelement <4 x float> %5485, float %5488, i64 3
  %5490 = fmul <4 x float> %5489, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5491 = fadd <4 x float> %5471, %5490
  %5492 = fmul <4 x float> %5491, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5493 = add nsw <4 x i32> %t2588, %5383
  %5494 = sext <4 x i32> %5493 to <4 x i64>
  %5495 = extractelement <4 x i64> %5494, i64 0
  %5496 = getelementptr inbounds float, ptr %f7.host, i64 %5495
  %5497 = load float, ptr %5496, align 4, !tbaa !54
  %5498 = insertelement <4 x float> undef, float %5497, i64 0
  %5499 = extractelement <4 x i64> %5494, i64 1
  %5500 = getelementptr inbounds float, ptr %f7.host, i64 %5499
  %5501 = load float, ptr %5500, align 4, !tbaa !54
  %5502 = insertelement <4 x float> %5498, float %5501, i64 1
  %5503 = extractelement <4 x i64> %5494, i64 2
  %5504 = getelementptr inbounds float, ptr %f7.host, i64 %5503
  %5505 = load float, ptr %5504, align 4, !tbaa !54
  %5506 = insertelement <4 x float> %5502, float %5505, i64 2
  %5507 = extractelement <4 x i64> %5494, i64 3
  %5508 = getelementptr inbounds float, ptr %f7.host, i64 %5507
  %5509 = load float, ptr %5508, align 4, !tbaa !54
  %5510 = insertelement <4 x float> %5506, float %5509, i64 3
  %5511 = fmul <4 x float> %5510, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5512 = add <4 x i32> %5405, %t2588
  %5513 = sext <4 x i32> %5512 to <4 x i64>
  %5514 = extractelement <4 x i64> %5513, i64 0
  %5515 = getelementptr inbounds float, ptr %f7.host, i64 %5514
  %5516 = load float, ptr %5515, align 4, !tbaa !54
  %5517 = insertelement <4 x float> undef, float %5516, i64 0
  %5518 = extractelement <4 x i64> %5513, i64 1
  %5519 = getelementptr inbounds float, ptr %f7.host, i64 %5518
  %5520 = load float, ptr %5519, align 4, !tbaa !54
  %5521 = insertelement <4 x float> %5517, float %5520, i64 1
  %5522 = extractelement <4 x i64> %5513, i64 2
  %5523 = getelementptr inbounds float, ptr %f7.host, i64 %5522
  %5524 = load float, ptr %5523, align 4, !tbaa !54
  %5525 = insertelement <4 x float> %5521, float %5524, i64 2
  %5526 = extractelement <4 x i64> %5513, i64 3
  %5527 = getelementptr inbounds float, ptr %f7.host, i64 %5526
  %5528 = load float, ptr %5527, align 4, !tbaa !54
  %5529 = insertelement <4 x float> %5525, float %5528, i64 3
  %5530 = fmul <4 x float> %5529, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5531 = fadd <4 x float> %5511, %5530
  %5532 = fmul <4 x float> %5531, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5533 = fadd <4 x float> %5492, %5532
  %5534 = mul nsw <4 x i32> %t2585, %825
  %5535 = add nsw <4 x i32> %5534, %5432
  %5536 = sext <4 x i32> %5535 to <4 x i64>
  %5537 = extractelement <4 x i64> %5536, i64 0
  %5538 = getelementptr inbounds float, ptr %f6.host, i64 %5537
  %5539 = load float, ptr %5538, align 4, !tbaa !50
  %5540 = insertelement <4 x float> undef, float %5539, i64 0
  %5541 = extractelement <4 x i64> %5536, i64 1
  %5542 = getelementptr inbounds float, ptr %f6.host, i64 %5541
  %5543 = load float, ptr %5542, align 4, !tbaa !50
  %5544 = insertelement <4 x float> %5540, float %5543, i64 1
  %5545 = extractelement <4 x i64> %5536, i64 2
  %5546 = getelementptr inbounds float, ptr %f6.host, i64 %5545
  %5547 = load float, ptr %5546, align 4, !tbaa !50
  %5548 = insertelement <4 x float> %5544, float %5547, i64 2
  %5549 = extractelement <4 x i64> %5536, i64 3
  %5550 = getelementptr inbounds float, ptr %f6.host, i64 %5549
  %5551 = load float, ptr %5550, align 4, !tbaa !50
  %5552 = insertelement <4 x float> %5548, float %5551, i64 3
  %5553 = fsub <4 x float> %5552, %5533
  %5554 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2582
  %5555 = fmul <4 x float> %5554, %5553
  %5556 = fadd <4 x float> %5452, %5555
  %5557 = add nsw i64 %5311, %3223
  %5558 = getelementptr inbounds float, ptr %129, i64 %5557
  %5559 = load <4 x float>, ptr %5558, align 4, !tbaa !64
  %5560 = fmul <4 x float> %5559, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5561 = add nsw i64 %3225, %5311
  %5562 = getelementptr inbounds float, ptr %129, i64 %5561
  %5563 = load <4 x float>, ptr %5562, align 4, !tbaa !64
  %5564 = fmul <4 x float> %5563, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5565 = fadd <4 x float> %5560, %5564
  %5566 = fmul <4 x float> %5565, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5567 = add nsw i64 %5322, %3223
  %5568 = getelementptr inbounds float, ptr %129, i64 %5567
  %5569 = load <4 x float>, ptr %5568, align 4, !tbaa !64
  %5570 = fmul <4 x float> %5569, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5571 = add nsw i64 %3225, %5322
  %5572 = getelementptr inbounds float, ptr %129, i64 %5571
  %5573 = load <4 x float>, ptr %5572, align 4, !tbaa !64
  %5574 = fmul <4 x float> %5573, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5575 = fadd <4 x float> %5570, %5574
  %5576 = fmul <4 x float> %5575, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5577 = fadd <4 x float> %5566, %5576
  %5578 = fadd <4 x float> %5556, %5577
  %5579 = shufflevector <4 x float> %5334, <4 x float> %5578, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow134 = sub nsw i32 %5062, %817
  %5580 = sext i32 %narrow134 to i64
  %5581 = mul nsw i64 %828, %5580
  %5582 = add nsw i64 %5581, %3226
  %5583 = getelementptr inbounds float, ptr %155, i64 %5582
  store <8 x float> %5579, ptr %5583, align 4, !tbaa !66
  br label %"produce f12745"

"produce f12745":                                 ; preds = %"for f128.s0.v3.v341.preheader", %"end for f128.s0.v3.v338", %"produce f12832"
  %5584 = trunc i64 %3413 to i32
  %5585 = add i32 %5584, 1
  %5586 = and i32 %5585, 3
  %5587 = icmp eq i32 %5586, 3
  br i1 %5587, label %true_bb47, label %"produce f12658"

true_bb47:                                        ; preds = %"produce f12745"
  br i1 %3230, label %"for f127.s0.v3.v350.preheader", label %"end for f127.s0.v3.v351", !prof !5

"for f127.s0.v3.v350.preheader":                  ; preds = %true_bb47
  %5588 = trunc i64 %3413 to i32
  %5589 = add i32 %5588, 9
  %5590 = ashr i32 %5589, 2
  %5591 = shl nsw i32 %5590, 1
  %5592 = and i32 %5591, 2
  %5593 = ashr i32 %5589, 3
  %t2594 = add nsw i32 %5592, %5593
  %5594 = sub nsw i32 %5590, %f73.v4.min_realized
  %5595 = mul nsw i32 %5594, %1387
  %5596 = add i32 %3233, %5595
  %5597 = add nsw i32 %t2594, %1388
  %t2601 = mul nsw i32 %5597, %148
  %5598 = sub nsw i32 %5593, %817
  %t2603 = mul nsw i32 %5598, %148
  %5599 = sub nsw i32 %5590, %f5.v4.min_realized
  %5600 = mul nsw i32 %5599, %f5.stride.1
  %5601 = add i32 %3234, %5600
  %5602 = add i32 %t2594, %1389
  %5603 = mul nsw i32 %5602, %f6.stride.1
  %5604 = sub nsw i32 %5593, %f6.v4.min_realized
  %5605 = mul nsw i32 %5604, %f6.stride.1
  %5606 = sext i32 %t2603 to i64
  %5607 = add nsw i64 %5606, -1
  %5608 = sext i32 %t2601 to i64
  %5609 = add nsw i64 %5608, -1
  %5610 = sext i32 %5590 to i64
  %5611 = sub nsw i64 %5610, %1396
  %5612 = mul nsw i64 %5611, %1395
  %5613 = sub nsw i64 %5612, %1397
  br label %"for f127.s0.v3.v350"

"for f127.s0.v3.v350":                            ; preds = %"for f127.s0.v3.v350.preheader", %"for f127.s0.v3.v350"
  %lsr.iv297 = phi i32 [ %lsr.iv.next298, %"for f127.s0.v3.v350" ], [ 0, %"for f127.s0.v3.v350.preheader" ]
  %lsr.iv295 = phi i32 [ %lsr.iv.next296, %"for f127.s0.v3.v350" ], [ %a927, %"for f127.s0.v3.v350.preheader" ]
  %5614 = add i32 %lsr.iv297, %136
  %5615 = ashr i32 %5614, 1
  %t2595 = add nsw i32 %5615, %3232
  %5616 = add i32 %5596, %lsr.iv297
  %5617 = sext i32 %5616 to i64
  %5618 = getelementptr inbounds float, ptr %f73.host, i64 %5617
  %5619 = load <4 x float>, ptr %5618, align 4, !tbaa !52
  %5620 = add nsw i64 %5617, 4
  %5621 = getelementptr inbounds float, ptr %f73.host, i64 %5620
  %5622 = load <4 x float>, ptr %5621, align 4, !tbaa !52
  %5623 = shufflevector <4 x float> %5619, <4 x float> %5622, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2597 = fmul <4 x float> %233, %5623
  %a928 = fptosi <4 x float> %t2597 to <4 x i32>
  %a931 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a928)
  %5624 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a931, <4 x i32> zeroinitializer)
  %5625 = sitofp <4 x i32> %5624 to <4 x float>
  %t2599 = fsub <4 x float> %t2597, %5625
  %5626 = add i32 %5601, %lsr.iv297
  %t2606 = sub nsw <4 x i32> %5624, %242
  %5627 = sub nsw i32 %t2595, %f6.v3.min_realized
  %t2609 = add nsw i32 %5627, %5603
  %t2610 = mul nsw <4 x i32> %t2606, %825
  %5628 = sub nsw i32 %5615, %f6.v3.min_realized
  %t2612 = add nsw i32 %5628, %5603
  %t2614 = add nsw i32 %5627, %5605
  %t2615 = add nsw i32 %5628, %5605
  %5629 = add nsw <4 x i32> %t2606, <i32 1, i32 1, i32 1, i32 1>
  %t2616 = mul nsw <4 x i32> %5629, %825
  %5630 = add i32 %5614, 1
  %5631 = shl i32 %5630, 1
  %5632 = and i32 %5631, 2
  %5633 = ashr i32 %5630, 1
  %t2617 = add nsw i32 %5632, %5633
  %5634 = shufflevector <4 x float> %5619, <4 x float> %5622, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2618 = fmul <4 x float> %233, %5634
  %a932 = fptosi <4 x float> %t2618 to <4 x i32>
  %a935 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a932)
  %5635 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a935, <4 x i32> zeroinitializer)
  %5636 = sitofp <4 x i32> %5635 to <4 x float>
  %t2620 = fsub <4 x float> %t2618, %5636
  %t2623 = sub nsw <4 x i32> %5635, %242
  %5637 = sub nsw i32 %t2617, %f6.v3.min_realized
  %t2625 = add nsw i32 %5637, %5603
  %t2626 = mul nsw <4 x i32> %t2623, %825
  %5638 = sub nsw i32 %5633, %f6.v3.min_realized
  %t2628 = add nsw i32 %5638, %5603
  %t2629 = add nsw i32 %5637, %5605
  %t2630 = add nsw i32 %5638, %5605
  %5639 = add nsw <4 x i32> %t2623, <i32 1, i32 1, i32 1, i32 1>
  %t2631 = mul nsw <4 x i32> %5639, %825
  %5640 = insertelement <4 x i32> undef, i32 %t2615, i64 0
  %5641 = shufflevector <4 x i32> %5640, <4 x i32> undef, <4 x i32> zeroinitializer
  %5642 = add nsw <4 x i32> %5641, <i32 0, i32 1, i32 2, i32 3>
  %5643 = add nsw <4 x i32> %t2616, %5642
  %5644 = sext <4 x i32> %5643 to <4 x i64>
  %5645 = extractelement <4 x i64> %5644, i64 0
  %5646 = getelementptr inbounds float, ptr %f6.host, i64 %5645
  %5647 = load float, ptr %5646, align 4, !tbaa !50
  %5648 = insertelement <4 x float> undef, float %5647, i64 0
  %5649 = extractelement <4 x i64> %5644, i64 1
  %5650 = getelementptr inbounds float, ptr %f6.host, i64 %5649
  %5651 = load float, ptr %5650, align 4, !tbaa !50
  %5652 = insertelement <4 x float> %5648, float %5651, i64 1
  %5653 = extractelement <4 x i64> %5644, i64 2
  %5654 = getelementptr inbounds float, ptr %f6.host, i64 %5653
  %5655 = load float, ptr %5654, align 4, !tbaa !50
  %5656 = insertelement <4 x float> %5652, float %5655, i64 2
  %5657 = extractelement <4 x i64> %5644, i64 3
  %5658 = getelementptr inbounds float, ptr %f6.host, i64 %5657
  %5659 = load float, ptr %5658, align 4, !tbaa !50
  %5660 = insertelement <4 x float> %5656, float %5659, i64 3
  %5661 = fmul <4 x float> %5660, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5662 = insertelement <4 x i32> undef, i32 %t2614, i64 0
  %5663 = shufflevector <4 x i32> %5662, <4 x i32> undef, <4 x i32> zeroinitializer
  %5664 = add <4 x i32> %5663, <i32 -1, i32 0, i32 1, i32 2>
  %5665 = add <4 x i32> %5664, %t2616
  %5666 = sext <4 x i32> %5665 to <4 x i64>
  %5667 = extractelement <4 x i64> %5666, i64 0
  %5668 = getelementptr inbounds float, ptr %f6.host, i64 %5667
  %5669 = load float, ptr %5668, align 4, !tbaa !50
  %5670 = insertelement <4 x float> undef, float %5669, i64 0
  %5671 = extractelement <4 x i64> %5666, i64 1
  %5672 = getelementptr inbounds float, ptr %f6.host, i64 %5671
  %5673 = load float, ptr %5672, align 4, !tbaa !50
  %5674 = insertelement <4 x float> %5670, float %5673, i64 1
  %5675 = extractelement <4 x i64> %5666, i64 2
  %5676 = getelementptr inbounds float, ptr %f6.host, i64 %5675
  %5677 = load float, ptr %5676, align 4, !tbaa !50
  %5678 = insertelement <4 x float> %5674, float %5677, i64 2
  %5679 = extractelement <4 x i64> %5666, i64 3
  %5680 = getelementptr inbounds float, ptr %f6.host, i64 %5679
  %5681 = load float, ptr %5680, align 4, !tbaa !50
  %5682 = insertelement <4 x float> %5678, float %5681, i64 3
  %5683 = fmul <4 x float> %5682, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5684 = fadd <4 x float> %5661, %5683
  %5685 = fmul <4 x float> %5684, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5686 = insertelement <4 x i32> undef, i32 %t2612, i64 0
  %5687 = shufflevector <4 x i32> %5686, <4 x i32> undef, <4 x i32> zeroinitializer
  %5688 = add nsw <4 x i32> %5687, <i32 0, i32 1, i32 2, i32 3>
  %5689 = add nsw <4 x i32> %t2616, %5688
  %5690 = sext <4 x i32> %5689 to <4 x i64>
  %5691 = extractelement <4 x i64> %5690, i64 0
  %5692 = getelementptr inbounds float, ptr %f6.host, i64 %5691
  %5693 = load float, ptr %5692, align 4, !tbaa !50
  %5694 = insertelement <4 x float> undef, float %5693, i64 0
  %5695 = extractelement <4 x i64> %5690, i64 1
  %5696 = getelementptr inbounds float, ptr %f6.host, i64 %5695
  %5697 = load float, ptr %5696, align 4, !tbaa !50
  %5698 = insertelement <4 x float> %5694, float %5697, i64 1
  %5699 = extractelement <4 x i64> %5690, i64 2
  %5700 = getelementptr inbounds float, ptr %f6.host, i64 %5699
  %5701 = load float, ptr %5700, align 4, !tbaa !50
  %5702 = insertelement <4 x float> %5698, float %5701, i64 2
  %5703 = extractelement <4 x i64> %5690, i64 3
  %5704 = getelementptr inbounds float, ptr %f6.host, i64 %5703
  %5705 = load float, ptr %5704, align 4, !tbaa !50
  %5706 = insertelement <4 x float> %5702, float %5705, i64 3
  %5707 = fmul <4 x float> %5706, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5708 = insertelement <4 x i32> undef, i32 %t2609, i64 0
  %5709 = shufflevector <4 x i32> %5708, <4 x i32> undef, <4 x i32> zeroinitializer
  %5710 = add <4 x i32> %5709, <i32 -1, i32 0, i32 1, i32 2>
  %5711 = add <4 x i32> %5710, %t2616
  %5712 = sext <4 x i32> %5711 to <4 x i64>
  %5713 = extractelement <4 x i64> %5712, i64 0
  %5714 = getelementptr inbounds float, ptr %f6.host, i64 %5713
  %5715 = load float, ptr %5714, align 4, !tbaa !50
  %5716 = insertelement <4 x float> undef, float %5715, i64 0
  %5717 = extractelement <4 x i64> %5712, i64 1
  %5718 = getelementptr inbounds float, ptr %f6.host, i64 %5717
  %5719 = load float, ptr %5718, align 4, !tbaa !50
  %5720 = insertelement <4 x float> %5716, float %5719, i64 1
  %5721 = extractelement <4 x i64> %5712, i64 2
  %5722 = getelementptr inbounds float, ptr %f6.host, i64 %5721
  %5723 = load float, ptr %5722, align 4, !tbaa !50
  %5724 = insertelement <4 x float> %5720, float %5723, i64 2
  %5725 = extractelement <4 x i64> %5712, i64 3
  %5726 = getelementptr inbounds float, ptr %f6.host, i64 %5725
  %5727 = load float, ptr %5726, align 4, !tbaa !50
  %5728 = insertelement <4 x float> %5724, float %5727, i64 3
  %5729 = fmul <4 x float> %5728, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5730 = fadd <4 x float> %5707, %5729
  %5731 = fmul <4 x float> %5730, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5732 = fadd <4 x float> %5685, %5731
  %5733 = mul nsw <4 x i32> %5629, %1392
  %5734 = insertelement <4 x i32> undef, i32 %5626, i64 0
  %5735 = shufflevector <4 x i32> %5734, <4 x i32> undef, <4 x i32> zeroinitializer
  %5736 = add nsw <4 x i32> %5735, <i32 0, i32 2, i32 4, i32 6>
  %5737 = add nsw <4 x i32> %5733, %5736
  %5738 = sext <4 x i32> %5737 to <4 x i64>
  %5739 = extractelement <4 x i64> %5738, i64 0
  %5740 = getelementptr inbounds float, ptr %f5.host, i64 %5739
  %5741 = load float, ptr %5740, align 4, !tbaa !46
  %5742 = insertelement <4 x float> undef, float %5741, i64 0
  %5743 = extractelement <4 x i64> %5738, i64 1
  %5744 = getelementptr inbounds float, ptr %f5.host, i64 %5743
  %5745 = load float, ptr %5744, align 4, !tbaa !46
  %5746 = insertelement <4 x float> %5742, float %5745, i64 1
  %5747 = extractelement <4 x i64> %5738, i64 2
  %5748 = getelementptr inbounds float, ptr %f5.host, i64 %5747
  %5749 = load float, ptr %5748, align 4, !tbaa !46
  %5750 = insertelement <4 x float> %5746, float %5749, i64 2
  %5751 = extractelement <4 x i64> %5738, i64 3
  %5752 = getelementptr inbounds float, ptr %f5.host, i64 %5751
  %5753 = load float, ptr %5752, align 4, !tbaa !46
  %5754 = insertelement <4 x float> %5750, float %5753, i64 3
  %5755 = fsub <4 x float> %5754, %5732
  %5756 = fmul <4 x float> %t2599, %5755
  %5757 = add nsw <4 x i32> %t2610, %5642
  %5758 = sext <4 x i32> %5757 to <4 x i64>
  %5759 = extractelement <4 x i64> %5758, i64 0
  %5760 = getelementptr inbounds float, ptr %f6.host, i64 %5759
  %5761 = load float, ptr %5760, align 4, !tbaa !50
  %5762 = insertelement <4 x float> undef, float %5761, i64 0
  %5763 = extractelement <4 x i64> %5758, i64 1
  %5764 = getelementptr inbounds float, ptr %f6.host, i64 %5763
  %5765 = load float, ptr %5764, align 4, !tbaa !50
  %5766 = insertelement <4 x float> %5762, float %5765, i64 1
  %5767 = extractelement <4 x i64> %5758, i64 2
  %5768 = getelementptr inbounds float, ptr %f6.host, i64 %5767
  %5769 = load float, ptr %5768, align 4, !tbaa !50
  %5770 = insertelement <4 x float> %5766, float %5769, i64 2
  %5771 = extractelement <4 x i64> %5758, i64 3
  %5772 = getelementptr inbounds float, ptr %f6.host, i64 %5771
  %5773 = load float, ptr %5772, align 4, !tbaa !50
  %5774 = insertelement <4 x float> %5770, float %5773, i64 3
  %5775 = fmul <4 x float> %5774, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5776 = add <4 x i32> %5664, %t2610
  %5777 = sext <4 x i32> %5776 to <4 x i64>
  %5778 = extractelement <4 x i64> %5777, i64 0
  %5779 = getelementptr inbounds float, ptr %f6.host, i64 %5778
  %5780 = load float, ptr %5779, align 4, !tbaa !50
  %5781 = insertelement <4 x float> undef, float %5780, i64 0
  %5782 = extractelement <4 x i64> %5777, i64 1
  %5783 = getelementptr inbounds float, ptr %f6.host, i64 %5782
  %5784 = load float, ptr %5783, align 4, !tbaa !50
  %5785 = insertelement <4 x float> %5781, float %5784, i64 1
  %5786 = extractelement <4 x i64> %5777, i64 2
  %5787 = getelementptr inbounds float, ptr %f6.host, i64 %5786
  %5788 = load float, ptr %5787, align 4, !tbaa !50
  %5789 = insertelement <4 x float> %5785, float %5788, i64 2
  %5790 = extractelement <4 x i64> %5777, i64 3
  %5791 = getelementptr inbounds float, ptr %f6.host, i64 %5790
  %5792 = load float, ptr %5791, align 4, !tbaa !50
  %5793 = insertelement <4 x float> %5789, float %5792, i64 3
  %5794 = fmul <4 x float> %5793, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5795 = fadd <4 x float> %5775, %5794
  %5796 = fmul <4 x float> %5795, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5797 = add nsw <4 x i32> %t2610, %5688
  %5798 = sext <4 x i32> %5797 to <4 x i64>
  %5799 = extractelement <4 x i64> %5798, i64 0
  %5800 = getelementptr inbounds float, ptr %f6.host, i64 %5799
  %5801 = load float, ptr %5800, align 4, !tbaa !50
  %5802 = insertelement <4 x float> undef, float %5801, i64 0
  %5803 = extractelement <4 x i64> %5798, i64 1
  %5804 = getelementptr inbounds float, ptr %f6.host, i64 %5803
  %5805 = load float, ptr %5804, align 4, !tbaa !50
  %5806 = insertelement <4 x float> %5802, float %5805, i64 1
  %5807 = extractelement <4 x i64> %5798, i64 2
  %5808 = getelementptr inbounds float, ptr %f6.host, i64 %5807
  %5809 = load float, ptr %5808, align 4, !tbaa !50
  %5810 = insertelement <4 x float> %5806, float %5809, i64 2
  %5811 = extractelement <4 x i64> %5798, i64 3
  %5812 = getelementptr inbounds float, ptr %f6.host, i64 %5811
  %5813 = load float, ptr %5812, align 4, !tbaa !50
  %5814 = insertelement <4 x float> %5810, float %5813, i64 3
  %5815 = fmul <4 x float> %5814, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5816 = add <4 x i32> %5710, %t2610
  %5817 = sext <4 x i32> %5816 to <4 x i64>
  %5818 = extractelement <4 x i64> %5817, i64 0
  %5819 = getelementptr inbounds float, ptr %f6.host, i64 %5818
  %5820 = load float, ptr %5819, align 4, !tbaa !50
  %5821 = insertelement <4 x float> undef, float %5820, i64 0
  %5822 = extractelement <4 x i64> %5817, i64 1
  %5823 = getelementptr inbounds float, ptr %f6.host, i64 %5822
  %5824 = load float, ptr %5823, align 4, !tbaa !50
  %5825 = insertelement <4 x float> %5821, float %5824, i64 1
  %5826 = extractelement <4 x i64> %5817, i64 2
  %5827 = getelementptr inbounds float, ptr %f6.host, i64 %5826
  %5828 = load float, ptr %5827, align 4, !tbaa !50
  %5829 = insertelement <4 x float> %5825, float %5828, i64 2
  %5830 = extractelement <4 x i64> %5817, i64 3
  %5831 = getelementptr inbounds float, ptr %f6.host, i64 %5830
  %5832 = load float, ptr %5831, align 4, !tbaa !50
  %5833 = insertelement <4 x float> %5829, float %5832, i64 3
  %5834 = fmul <4 x float> %5833, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5835 = fadd <4 x float> %5815, %5834
  %5836 = fmul <4 x float> %5835, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5837 = fadd <4 x float> %5796, %5836
  %5838 = mul nsw <4 x i32> %t2606, %1392
  %5839 = add nsw <4 x i32> %5838, %5736
  %5840 = sext <4 x i32> %5839 to <4 x i64>
  %5841 = extractelement <4 x i64> %5840, i64 0
  %5842 = getelementptr inbounds float, ptr %f5.host, i64 %5841
  %5843 = load float, ptr %5842, align 4, !tbaa !46
  %5844 = insertelement <4 x float> undef, float %5843, i64 0
  %5845 = extractelement <4 x i64> %5840, i64 1
  %5846 = getelementptr inbounds float, ptr %f5.host, i64 %5845
  %5847 = load float, ptr %5846, align 4, !tbaa !46
  %5848 = insertelement <4 x float> %5844, float %5847, i64 1
  %5849 = extractelement <4 x i64> %5840, i64 2
  %5850 = getelementptr inbounds float, ptr %f5.host, i64 %5849
  %5851 = load float, ptr %5850, align 4, !tbaa !46
  %5852 = insertelement <4 x float> %5848, float %5851, i64 2
  %5853 = extractelement <4 x i64> %5840, i64 3
  %5854 = getelementptr inbounds float, ptr %f5.host, i64 %5853
  %5855 = load float, ptr %5854, align 4, !tbaa !46
  %5856 = insertelement <4 x float> %5852, float %5855, i64 3
  %5857 = fsub <4 x float> %5856, %5837
  %5858 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2599
  %5859 = fmul <4 x float> %5858, %5857
  %5860 = fadd <4 x float> %5756, %5859
  %narrow125 = sub nsw i32 %5615, %f128.v3.min_realized
  %5861 = sext i32 %narrow125 to i64
  %5862 = add nsw i64 %5861, %5606
  %5863 = getelementptr inbounds float, ptr %155, i64 %5862
  %5864 = load <4 x float>, ptr %5863, align 4, !tbaa !66
  %5865 = fmul <4 x float> %5864, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5866 = sext i32 %t2595 to i64
  %5867 = sub nsw i64 %5866, %1393
  %5868 = add nsw i64 %5607, %5867
  %5869 = getelementptr inbounds float, ptr %155, i64 %5868
  %5870 = load <4 x float>, ptr %5869, align 4, !tbaa !66
  %5871 = fmul <4 x float> %5870, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5872 = fadd <4 x float> %5865, %5871
  %5873 = fmul <4 x float> %5872, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5874 = add nsw i64 %5861, %5608
  %5875 = getelementptr inbounds float, ptr %155, i64 %5874
  %5876 = load <4 x float>, ptr %5875, align 4, !tbaa !66
  %5877 = fmul <4 x float> %5876, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5878 = add nsw i64 %5609, %5867
  %5879 = getelementptr inbounds float, ptr %155, i64 %5878
  %5880 = load <4 x float>, ptr %5879, align 4, !tbaa !66
  %5881 = fmul <4 x float> %5880, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5882 = fadd <4 x float> %5877, %5881
  %5883 = fmul <4 x float> %5882, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5884 = fadd <4 x float> %5873, %5883
  %5885 = fadd <4 x float> %5860, %5884
  %5886 = insertelement <4 x i32> undef, i32 %t2630, i64 0
  %5887 = shufflevector <4 x i32> %5886, <4 x i32> undef, <4 x i32> zeroinitializer
  %5888 = add nsw <4 x i32> %5887, <i32 0, i32 1, i32 2, i32 3>
  %5889 = add nsw <4 x i32> %t2631, %5888
  %5890 = sext <4 x i32> %5889 to <4 x i64>
  %5891 = extractelement <4 x i64> %5890, i64 0
  %5892 = getelementptr inbounds float, ptr %f6.host, i64 %5891
  %5893 = load float, ptr %5892, align 4, !tbaa !50
  %5894 = insertelement <4 x float> undef, float %5893, i64 0
  %5895 = extractelement <4 x i64> %5890, i64 1
  %5896 = getelementptr inbounds float, ptr %f6.host, i64 %5895
  %5897 = load float, ptr %5896, align 4, !tbaa !50
  %5898 = insertelement <4 x float> %5894, float %5897, i64 1
  %5899 = extractelement <4 x i64> %5890, i64 2
  %5900 = getelementptr inbounds float, ptr %f6.host, i64 %5899
  %5901 = load float, ptr %5900, align 4, !tbaa !50
  %5902 = insertelement <4 x float> %5898, float %5901, i64 2
  %5903 = extractelement <4 x i64> %5890, i64 3
  %5904 = getelementptr inbounds float, ptr %f6.host, i64 %5903
  %5905 = load float, ptr %5904, align 4, !tbaa !50
  %5906 = insertelement <4 x float> %5902, float %5905, i64 3
  %5907 = fmul <4 x float> %5906, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5908 = insertelement <4 x i32> undef, i32 %t2629, i64 0
  %5909 = shufflevector <4 x i32> %5908, <4 x i32> undef, <4 x i32> zeroinitializer
  %5910 = add <4 x i32> %5909, <i32 -1, i32 0, i32 1, i32 2>
  %5911 = add <4 x i32> %5910, %t2631
  %5912 = sext <4 x i32> %5911 to <4 x i64>
  %5913 = extractelement <4 x i64> %5912, i64 0
  %5914 = getelementptr inbounds float, ptr %f6.host, i64 %5913
  %5915 = load float, ptr %5914, align 4, !tbaa !50
  %5916 = insertelement <4 x float> undef, float %5915, i64 0
  %5917 = extractelement <4 x i64> %5912, i64 1
  %5918 = getelementptr inbounds float, ptr %f6.host, i64 %5917
  %5919 = load float, ptr %5918, align 4, !tbaa !50
  %5920 = insertelement <4 x float> %5916, float %5919, i64 1
  %5921 = extractelement <4 x i64> %5912, i64 2
  %5922 = getelementptr inbounds float, ptr %f6.host, i64 %5921
  %5923 = load float, ptr %5922, align 4, !tbaa !50
  %5924 = insertelement <4 x float> %5920, float %5923, i64 2
  %5925 = extractelement <4 x i64> %5912, i64 3
  %5926 = getelementptr inbounds float, ptr %f6.host, i64 %5925
  %5927 = load float, ptr %5926, align 4, !tbaa !50
  %5928 = insertelement <4 x float> %5924, float %5927, i64 3
  %5929 = fmul <4 x float> %5928, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5930 = fadd <4 x float> %5907, %5929
  %5931 = fmul <4 x float> %5930, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5932 = insertelement <4 x i32> undef, i32 %t2628, i64 0
  %5933 = shufflevector <4 x i32> %5932, <4 x i32> undef, <4 x i32> zeroinitializer
  %5934 = add nsw <4 x i32> %5933, <i32 0, i32 1, i32 2, i32 3>
  %5935 = add nsw <4 x i32> %t2631, %5934
  %5936 = sext <4 x i32> %5935 to <4 x i64>
  %5937 = extractelement <4 x i64> %5936, i64 0
  %5938 = getelementptr inbounds float, ptr %f6.host, i64 %5937
  %5939 = load float, ptr %5938, align 4, !tbaa !50
  %5940 = insertelement <4 x float> undef, float %5939, i64 0
  %5941 = extractelement <4 x i64> %5936, i64 1
  %5942 = getelementptr inbounds float, ptr %f6.host, i64 %5941
  %5943 = load float, ptr %5942, align 4, !tbaa !50
  %5944 = insertelement <4 x float> %5940, float %5943, i64 1
  %5945 = extractelement <4 x i64> %5936, i64 2
  %5946 = getelementptr inbounds float, ptr %f6.host, i64 %5945
  %5947 = load float, ptr %5946, align 4, !tbaa !50
  %5948 = insertelement <4 x float> %5944, float %5947, i64 2
  %5949 = extractelement <4 x i64> %5936, i64 3
  %5950 = getelementptr inbounds float, ptr %f6.host, i64 %5949
  %5951 = load float, ptr %5950, align 4, !tbaa !50
  %5952 = insertelement <4 x float> %5948, float %5951, i64 3
  %5953 = fmul <4 x float> %5952, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5954 = insertelement <4 x i32> undef, i32 %t2625, i64 0
  %5955 = shufflevector <4 x i32> %5954, <4 x i32> undef, <4 x i32> zeroinitializer
  %5956 = add <4 x i32> %5955, <i32 -1, i32 0, i32 1, i32 2>
  %5957 = add <4 x i32> %5956, %t2631
  %5958 = sext <4 x i32> %5957 to <4 x i64>
  %5959 = extractelement <4 x i64> %5958, i64 0
  %5960 = getelementptr inbounds float, ptr %f6.host, i64 %5959
  %5961 = load float, ptr %5960, align 4, !tbaa !50
  %5962 = insertelement <4 x float> undef, float %5961, i64 0
  %5963 = extractelement <4 x i64> %5958, i64 1
  %5964 = getelementptr inbounds float, ptr %f6.host, i64 %5963
  %5965 = load float, ptr %5964, align 4, !tbaa !50
  %5966 = insertelement <4 x float> %5962, float %5965, i64 1
  %5967 = extractelement <4 x i64> %5958, i64 2
  %5968 = getelementptr inbounds float, ptr %f6.host, i64 %5967
  %5969 = load float, ptr %5968, align 4, !tbaa !50
  %5970 = insertelement <4 x float> %5966, float %5969, i64 2
  %5971 = extractelement <4 x i64> %5958, i64 3
  %5972 = getelementptr inbounds float, ptr %f6.host, i64 %5971
  %5973 = load float, ptr %5972, align 4, !tbaa !50
  %5974 = insertelement <4 x float> %5970, float %5973, i64 3
  %5975 = fmul <4 x float> %5974, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5976 = fadd <4 x float> %5953, %5975
  %5977 = fmul <4 x float> %5976, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5978 = fadd <4 x float> %5931, %5977
  %5979 = mul nsw <4 x i32> %5639, %1392
  %5980 = add i32 %5626, 1
  %5981 = insertelement <4 x i32> undef, i32 %5980, i64 0
  %5982 = shufflevector <4 x i32> %5981, <4 x i32> undef, <4 x i32> zeroinitializer
  %5983 = add nsw <4 x i32> %5982, <i32 0, i32 2, i32 4, i32 6>
  %5984 = add nsw <4 x i32> %5979, %5983
  %5985 = sext <4 x i32> %5984 to <4 x i64>
  %5986 = extractelement <4 x i64> %5985, i64 0
  %5987 = getelementptr inbounds float, ptr %f5.host, i64 %5986
  %5988 = load float, ptr %5987, align 4, !tbaa !46
  %5989 = insertelement <4 x float> undef, float %5988, i64 0
  %5990 = extractelement <4 x i64> %5985, i64 1
  %5991 = getelementptr inbounds float, ptr %f5.host, i64 %5990
  %5992 = load float, ptr %5991, align 4, !tbaa !46
  %5993 = insertelement <4 x float> %5989, float %5992, i64 1
  %5994 = extractelement <4 x i64> %5985, i64 2
  %5995 = getelementptr inbounds float, ptr %f5.host, i64 %5994
  %5996 = load float, ptr %5995, align 4, !tbaa !46
  %5997 = insertelement <4 x float> %5993, float %5996, i64 2
  %5998 = extractelement <4 x i64> %5985, i64 3
  %5999 = getelementptr inbounds float, ptr %f5.host, i64 %5998
  %6000 = load float, ptr %5999, align 4, !tbaa !46
  %6001 = insertelement <4 x float> %5997, float %6000, i64 3
  %6002 = fsub <4 x float> %6001, %5978
  %6003 = fmul <4 x float> %t2620, %6002
  %6004 = add nsw <4 x i32> %t2626, %5888
  %6005 = sext <4 x i32> %6004 to <4 x i64>
  %6006 = extractelement <4 x i64> %6005, i64 0
  %6007 = getelementptr inbounds float, ptr %f6.host, i64 %6006
  %6008 = load float, ptr %6007, align 4, !tbaa !50
  %6009 = insertelement <4 x float> undef, float %6008, i64 0
  %6010 = extractelement <4 x i64> %6005, i64 1
  %6011 = getelementptr inbounds float, ptr %f6.host, i64 %6010
  %6012 = load float, ptr %6011, align 4, !tbaa !50
  %6013 = insertelement <4 x float> %6009, float %6012, i64 1
  %6014 = extractelement <4 x i64> %6005, i64 2
  %6015 = getelementptr inbounds float, ptr %f6.host, i64 %6014
  %6016 = load float, ptr %6015, align 4, !tbaa !50
  %6017 = insertelement <4 x float> %6013, float %6016, i64 2
  %6018 = extractelement <4 x i64> %6005, i64 3
  %6019 = getelementptr inbounds float, ptr %f6.host, i64 %6018
  %6020 = load float, ptr %6019, align 4, !tbaa !50
  %6021 = insertelement <4 x float> %6017, float %6020, i64 3
  %6022 = fmul <4 x float> %6021, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6023 = add <4 x i32> %t2626, %5909
  %6024 = add <4 x i32> %6023, <i32 -1, i32 0, i32 1, i32 2>
  %6025 = sext <4 x i32> %6024 to <4 x i64>
  %6026 = extractelement <4 x i64> %6025, i64 0
  %6027 = getelementptr inbounds float, ptr %f6.host, i64 %6026
  %6028 = load float, ptr %6027, align 4, !tbaa !50
  %6029 = insertelement <4 x float> undef, float %6028, i64 0
  %6030 = extractelement <4 x i64> %6025, i64 1
  %6031 = getelementptr inbounds float, ptr %f6.host, i64 %6030
  %6032 = load float, ptr %6031, align 4, !tbaa !50
  %6033 = insertelement <4 x float> %6029, float %6032, i64 1
  %6034 = extractelement <4 x i64> %6025, i64 2
  %6035 = getelementptr inbounds float, ptr %f6.host, i64 %6034
  %6036 = load float, ptr %6035, align 4, !tbaa !50
  %6037 = insertelement <4 x float> %6033, float %6036, i64 2
  %6038 = extractelement <4 x i64> %6025, i64 3
  %6039 = getelementptr inbounds float, ptr %f6.host, i64 %6038
  %6040 = load float, ptr %6039, align 4, !tbaa !50
  %6041 = insertelement <4 x float> %6037, float %6040, i64 3
  %6042 = fmul <4 x float> %6041, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6043 = fadd <4 x float> %6022, %6042
  %6044 = fmul <4 x float> %6043, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6045 = add nsw <4 x i32> %t2626, %5934
  %6046 = sext <4 x i32> %6045 to <4 x i64>
  %6047 = extractelement <4 x i64> %6046, i64 0
  %6048 = getelementptr inbounds float, ptr %f6.host, i64 %6047
  %6049 = load float, ptr %6048, align 4, !tbaa !50
  %6050 = insertelement <4 x float> undef, float %6049, i64 0
  %6051 = extractelement <4 x i64> %6046, i64 1
  %6052 = getelementptr inbounds float, ptr %f6.host, i64 %6051
  %6053 = load float, ptr %6052, align 4, !tbaa !50
  %6054 = insertelement <4 x float> %6050, float %6053, i64 1
  %6055 = extractelement <4 x i64> %6046, i64 2
  %6056 = getelementptr inbounds float, ptr %f6.host, i64 %6055
  %6057 = load float, ptr %6056, align 4, !tbaa !50
  %6058 = insertelement <4 x float> %6054, float %6057, i64 2
  %6059 = extractelement <4 x i64> %6046, i64 3
  %6060 = getelementptr inbounds float, ptr %f6.host, i64 %6059
  %6061 = load float, ptr %6060, align 4, !tbaa !50
  %6062 = insertelement <4 x float> %6058, float %6061, i64 3
  %6063 = fmul <4 x float> %6062, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6064 = add <4 x i32> %t2626, %5955
  %6065 = add <4 x i32> %6064, <i32 -1, i32 0, i32 1, i32 2>
  %6066 = sext <4 x i32> %6065 to <4 x i64>
  %6067 = extractelement <4 x i64> %6066, i64 0
  %6068 = getelementptr inbounds float, ptr %f6.host, i64 %6067
  %6069 = load float, ptr %6068, align 4, !tbaa !50
  %6070 = insertelement <4 x float> undef, float %6069, i64 0
  %6071 = extractelement <4 x i64> %6066, i64 1
  %6072 = getelementptr inbounds float, ptr %f6.host, i64 %6071
  %6073 = load float, ptr %6072, align 4, !tbaa !50
  %6074 = insertelement <4 x float> %6070, float %6073, i64 1
  %6075 = extractelement <4 x i64> %6066, i64 2
  %6076 = getelementptr inbounds float, ptr %f6.host, i64 %6075
  %6077 = load float, ptr %6076, align 4, !tbaa !50
  %6078 = insertelement <4 x float> %6074, float %6077, i64 2
  %6079 = extractelement <4 x i64> %6066, i64 3
  %6080 = getelementptr inbounds float, ptr %f6.host, i64 %6079
  %6081 = load float, ptr %6080, align 4, !tbaa !50
  %6082 = insertelement <4 x float> %6078, float %6081, i64 3
  %6083 = fmul <4 x float> %6082, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6084 = fadd <4 x float> %6063, %6083
  %6085 = fmul <4 x float> %6084, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6086 = fadd <4 x float> %6044, %6085
  %6087 = mul nsw <4 x i32> %t2623, %1392
  %6088 = add nsw <4 x i32> %6087, %5983
  %6089 = sext <4 x i32> %6088 to <4 x i64>
  %6090 = extractelement <4 x i64> %6089, i64 0
  %6091 = getelementptr inbounds float, ptr %f5.host, i64 %6090
  %6092 = load float, ptr %6091, align 4, !tbaa !46
  %6093 = insertelement <4 x float> undef, float %6092, i64 0
  %6094 = extractelement <4 x i64> %6089, i64 1
  %6095 = getelementptr inbounds float, ptr %f5.host, i64 %6094
  %6096 = load float, ptr %6095, align 4, !tbaa !46
  %6097 = insertelement <4 x float> %6093, float %6096, i64 1
  %6098 = extractelement <4 x i64> %6089, i64 2
  %6099 = getelementptr inbounds float, ptr %f5.host, i64 %6098
  %6100 = load float, ptr %6099, align 4, !tbaa !46
  %6101 = insertelement <4 x float> %6097, float %6100, i64 2
  %6102 = extractelement <4 x i64> %6089, i64 3
  %6103 = getelementptr inbounds float, ptr %f5.host, i64 %6102
  %6104 = load float, ptr %6103, align 4, !tbaa !46
  %6105 = insertelement <4 x float> %6101, float %6104, i64 3
  %6106 = fsub <4 x float> %6105, %6086
  %6107 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2620
  %6108 = fmul <4 x float> %6107, %6106
  %6109 = fadd <4 x float> %6003, %6108
  %narrow126 = sub nsw i32 %5633, %f128.v3.min_realized
  %6110 = sext i32 %narrow126 to i64
  %6111 = add nsw i64 %6110, %5606
  %6112 = getelementptr inbounds float, ptr %155, i64 %6111
  %6113 = load <4 x float>, ptr %6112, align 4, !tbaa !66
  %6114 = fmul <4 x float> %6113, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6115 = sext i32 %t2617 to i64
  %6116 = sub nsw i64 %6115, %1393
  %6117 = add nsw i64 %5607, %6116
  %6118 = getelementptr inbounds float, ptr %155, i64 %6117
  %6119 = load <4 x float>, ptr %6118, align 4, !tbaa !66
  %6120 = fmul <4 x float> %6119, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6121 = fadd <4 x float> %6114, %6120
  %6122 = fmul <4 x float> %6121, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6123 = add nsw i64 %6110, %5608
  %6124 = getelementptr inbounds float, ptr %155, i64 %6123
  %6125 = load <4 x float>, ptr %6124, align 4, !tbaa !66
  %6126 = fmul <4 x float> %6125, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6127 = add nsw i64 %5609, %6116
  %6128 = getelementptr inbounds float, ptr %155, i64 %6127
  %6129 = load <4 x float>, ptr %6128, align 4, !tbaa !66
  %6130 = fmul <4 x float> %6129, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6131 = fadd <4 x float> %6126, %6130
  %6132 = fmul <4 x float> %6131, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6133 = fadd <4 x float> %6122, %6132
  %6134 = fadd <4 x float> %6109, %6133
  %6135 = shufflevector <4 x float> %5885, <4 x float> %6134, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %6136 = sext i32 %5614 to i64
  %6137 = add nsw i64 %5613, %6136
  %6138 = getelementptr inbounds float, ptr %194, i64 %6137
  store <8 x float> %6135, ptr %6138, align 4, !tbaa !68
  %lsr.iv.next296 = add i32 %lsr.iv295, -1
  %lsr.iv.next298 = add nuw i32 %lsr.iv297, 8
  %.not127 = icmp eq i32 %lsr.iv.next296, 0
  br i1 %.not127, label %"end for f127.s0.v3.v351", label %"for f127.s0.v3.v350"

"end for f127.s0.v3.v351":                        ; preds = %"for f127.s0.v3.v350", %true_bb47
  br i1 %.not119, label %"produce f12658", label %"for f127.s0.v3.v354.preheader", !prof !4

"for f127.s0.v3.v354.preheader":                  ; preds = %"end for f127.s0.v3.v351"
  %6139 = trunc i64 %3413 to i32
  %6140 = add i32 %6139, 9
  %6141 = ashr i32 %6140, 2
  %6142 = shl nsw i32 %6141, 1
  %6143 = and i32 %6142, 2
  %6144 = ashr i32 %6140, 3
  %t2632 = add nsw i32 %6143, %6144
  %6145 = sub nsw i32 %6141, %f73.v4.min_realized
  %6146 = mul nsw i32 %6145, %1387
  %t2635 = add nsw i32 %3238, %6146
  %6147 = sext i32 %t2635 to i64
  %6148 = getelementptr inbounds float, ptr %f73.host, i64 %6147
  %6149 = load <4 x float>, ptr %6148, align 4, !tbaa !52
  %6150 = add nsw i64 %6147, 4
  %6151 = getelementptr inbounds float, ptr %f73.host, i64 %6150
  %6152 = load <4 x float>, ptr %6151, align 4, !tbaa !52
  %6153 = shufflevector <4 x float> %6149, <4 x float> %6152, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2636 = fmul <4 x float> %233, %6153
  %a938 = fptosi <4 x float> %t2636 to <4 x i32>
  %a941 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a938)
  %6154 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a941, <4 x i32> zeroinitializer)
  %6155 = sitofp <4 x i32> %6154 to <4 x float>
  %t2638 = fsub <4 x float> %t2636, %6155
  %6156 = add nsw i32 %t2632, %1388
  %t2640 = mul nsw i32 %6156, %148
  %6157 = sub nsw i32 %6144, %817
  %t2642 = mul nsw i32 %6157, %148
  %6158 = sub nsw i32 %6141, %f5.v4.min_realized
  %6159 = mul nsw i32 %6158, %f5.stride.1
  %t2643 = add nsw i32 %6159, %3239
  %t2645 = sub nsw <4 x i32> %6154, %242
  %6160 = add i32 %t2632, %1389
  %6161 = mul nsw i32 %6160, %f6.stride.1
  %t2648 = add nsw i32 %6161, %3240
  %t2649 = mul nsw <4 x i32> %t2645, %825
  %t2651 = add nsw i32 %6161, %3241
  %6162 = sub nsw i32 %6144, %f6.v4.min_realized
  %6163 = mul nsw i32 %6162, %f6.stride.1
  %t2653 = add nsw i32 %6163, %3240
  %t2654 = add nsw i32 %6163, %3241
  %6164 = add nsw <4 x i32> %t2645, <i32 1, i32 1, i32 1, i32 1>
  %t2655 = mul nsw <4 x i32> %6164, %825
  %6165 = shufflevector <4 x float> %6149, <4 x float> %6152, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2657 = fmul <4 x float> %233, %6165
  %a942 = fptosi <4 x float> %t2657 to <4 x i32>
  %a945 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a942)
  %6166 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a945, <4 x i32> zeroinitializer)
  %6167 = sitofp <4 x i32> %6166 to <4 x float>
  %t2659 = fsub <4 x float> %t2657, %6167
  %t2662 = sub nsw <4 x i32> %6166, %242
  %t2664 = add nsw i32 %6161, %3246
  %t2665 = mul nsw <4 x i32> %t2662, %825
  %t2667 = add nsw i32 %6161, %3247
  %t2668 = add nsw i32 %6163, %3246
  %t2669 = add nsw i32 %6163, %3247
  %6168 = add nsw <4 x i32> %t2662, <i32 1, i32 1, i32 1, i32 1>
  %t2670 = mul nsw <4 x i32> %6168, %825
  %6169 = insertelement <4 x i32> undef, i32 %t2654, i64 0
  %6170 = shufflevector <4 x i32> %6169, <4 x i32> undef, <4 x i32> zeroinitializer
  %6171 = add nsw <4 x i32> %6170, <i32 0, i32 1, i32 2, i32 3>
  %6172 = add nsw <4 x i32> %t2655, %6171
  %6173 = sext <4 x i32> %6172 to <4 x i64>
  %6174 = extractelement <4 x i64> %6173, i64 0
  %6175 = getelementptr inbounds float, ptr %f6.host, i64 %6174
  %6176 = load float, ptr %6175, align 4, !tbaa !50
  %6177 = insertelement <4 x float> undef, float %6176, i64 0
  %6178 = extractelement <4 x i64> %6173, i64 1
  %6179 = getelementptr inbounds float, ptr %f6.host, i64 %6178
  %6180 = load float, ptr %6179, align 4, !tbaa !50
  %6181 = insertelement <4 x float> %6177, float %6180, i64 1
  %6182 = extractelement <4 x i64> %6173, i64 2
  %6183 = getelementptr inbounds float, ptr %f6.host, i64 %6182
  %6184 = load float, ptr %6183, align 4, !tbaa !50
  %6185 = insertelement <4 x float> %6181, float %6184, i64 2
  %6186 = extractelement <4 x i64> %6173, i64 3
  %6187 = getelementptr inbounds float, ptr %f6.host, i64 %6186
  %6188 = load float, ptr %6187, align 4, !tbaa !50
  %6189 = insertelement <4 x float> %6185, float %6188, i64 3
  %6190 = fmul <4 x float> %6189, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6191 = insertelement <4 x i32> undef, i32 %t2653, i64 0
  %6192 = shufflevector <4 x i32> %6191, <4 x i32> undef, <4 x i32> zeroinitializer
  %6193 = add <4 x i32> %6192, <i32 -1, i32 0, i32 1, i32 2>
  %6194 = add <4 x i32> %6193, %t2655
  %6195 = sext <4 x i32> %6194 to <4 x i64>
  %6196 = extractelement <4 x i64> %6195, i64 0
  %6197 = getelementptr inbounds float, ptr %f6.host, i64 %6196
  %6198 = load float, ptr %6197, align 4, !tbaa !50
  %6199 = insertelement <4 x float> undef, float %6198, i64 0
  %6200 = extractelement <4 x i64> %6195, i64 1
  %6201 = getelementptr inbounds float, ptr %f6.host, i64 %6200
  %6202 = load float, ptr %6201, align 4, !tbaa !50
  %6203 = insertelement <4 x float> %6199, float %6202, i64 1
  %6204 = extractelement <4 x i64> %6195, i64 2
  %6205 = getelementptr inbounds float, ptr %f6.host, i64 %6204
  %6206 = load float, ptr %6205, align 4, !tbaa !50
  %6207 = insertelement <4 x float> %6203, float %6206, i64 2
  %6208 = extractelement <4 x i64> %6195, i64 3
  %6209 = getelementptr inbounds float, ptr %f6.host, i64 %6208
  %6210 = load float, ptr %6209, align 4, !tbaa !50
  %6211 = insertelement <4 x float> %6207, float %6210, i64 3
  %6212 = fmul <4 x float> %6211, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6213 = fadd <4 x float> %6190, %6212
  %6214 = fmul <4 x float> %6213, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6215 = insertelement <4 x i32> undef, i32 %t2651, i64 0
  %6216 = shufflevector <4 x i32> %6215, <4 x i32> undef, <4 x i32> zeroinitializer
  %6217 = add nsw <4 x i32> %6216, <i32 0, i32 1, i32 2, i32 3>
  %6218 = add nsw <4 x i32> %t2655, %6217
  %6219 = sext <4 x i32> %6218 to <4 x i64>
  %6220 = extractelement <4 x i64> %6219, i64 0
  %6221 = getelementptr inbounds float, ptr %f6.host, i64 %6220
  %6222 = load float, ptr %6221, align 4, !tbaa !50
  %6223 = insertelement <4 x float> undef, float %6222, i64 0
  %6224 = extractelement <4 x i64> %6219, i64 1
  %6225 = getelementptr inbounds float, ptr %f6.host, i64 %6224
  %6226 = load float, ptr %6225, align 4, !tbaa !50
  %6227 = insertelement <4 x float> %6223, float %6226, i64 1
  %6228 = extractelement <4 x i64> %6219, i64 2
  %6229 = getelementptr inbounds float, ptr %f6.host, i64 %6228
  %6230 = load float, ptr %6229, align 4, !tbaa !50
  %6231 = insertelement <4 x float> %6227, float %6230, i64 2
  %6232 = extractelement <4 x i64> %6219, i64 3
  %6233 = getelementptr inbounds float, ptr %f6.host, i64 %6232
  %6234 = load float, ptr %6233, align 4, !tbaa !50
  %6235 = insertelement <4 x float> %6231, float %6234, i64 3
  %6236 = fmul <4 x float> %6235, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6237 = insertelement <4 x i32> undef, i32 %t2648, i64 0
  %6238 = shufflevector <4 x i32> %6237, <4 x i32> undef, <4 x i32> zeroinitializer
  %6239 = add <4 x i32> %6238, <i32 -1, i32 0, i32 1, i32 2>
  %6240 = add <4 x i32> %6239, %t2655
  %6241 = sext <4 x i32> %6240 to <4 x i64>
  %6242 = extractelement <4 x i64> %6241, i64 0
  %6243 = getelementptr inbounds float, ptr %f6.host, i64 %6242
  %6244 = load float, ptr %6243, align 4, !tbaa !50
  %6245 = insertelement <4 x float> undef, float %6244, i64 0
  %6246 = extractelement <4 x i64> %6241, i64 1
  %6247 = getelementptr inbounds float, ptr %f6.host, i64 %6246
  %6248 = load float, ptr %6247, align 4, !tbaa !50
  %6249 = insertelement <4 x float> %6245, float %6248, i64 1
  %6250 = extractelement <4 x i64> %6241, i64 2
  %6251 = getelementptr inbounds float, ptr %f6.host, i64 %6250
  %6252 = load float, ptr %6251, align 4, !tbaa !50
  %6253 = insertelement <4 x float> %6249, float %6252, i64 2
  %6254 = extractelement <4 x i64> %6241, i64 3
  %6255 = getelementptr inbounds float, ptr %f6.host, i64 %6254
  %6256 = load float, ptr %6255, align 4, !tbaa !50
  %6257 = insertelement <4 x float> %6253, float %6256, i64 3
  %6258 = fmul <4 x float> %6257, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6259 = fadd <4 x float> %6236, %6258
  %6260 = fmul <4 x float> %6259, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6261 = fadd <4 x float> %6214, %6260
  %6262 = mul nsw <4 x i32> %6164, %1392
  %6263 = insertelement <4 x i32> undef, i32 %t2643, i64 0
  %6264 = shufflevector <4 x i32> %6263, <4 x i32> undef, <4 x i32> zeroinitializer
  %6265 = add nsw <4 x i32> %6264, <i32 0, i32 2, i32 4, i32 6>
  %6266 = add nsw <4 x i32> %6262, %6265
  %6267 = sext <4 x i32> %6266 to <4 x i64>
  %6268 = extractelement <4 x i64> %6267, i64 0
  %6269 = getelementptr inbounds float, ptr %f5.host, i64 %6268
  %6270 = load float, ptr %6269, align 4, !tbaa !46
  %6271 = insertelement <4 x float> undef, float %6270, i64 0
  %6272 = extractelement <4 x i64> %6267, i64 1
  %6273 = getelementptr inbounds float, ptr %f5.host, i64 %6272
  %6274 = load float, ptr %6273, align 4, !tbaa !46
  %6275 = insertelement <4 x float> %6271, float %6274, i64 1
  %6276 = extractelement <4 x i64> %6267, i64 2
  %6277 = getelementptr inbounds float, ptr %f5.host, i64 %6276
  %6278 = load float, ptr %6277, align 4, !tbaa !46
  %6279 = insertelement <4 x float> %6275, float %6278, i64 2
  %6280 = extractelement <4 x i64> %6267, i64 3
  %6281 = getelementptr inbounds float, ptr %f5.host, i64 %6280
  %6282 = load float, ptr %6281, align 4, !tbaa !46
  %6283 = insertelement <4 x float> %6279, float %6282, i64 3
  %6284 = fsub <4 x float> %6283, %6261
  %6285 = fmul <4 x float> %t2638, %6284
  %6286 = add nsw <4 x i32> %t2649, %6171
  %6287 = sext <4 x i32> %6286 to <4 x i64>
  %6288 = extractelement <4 x i64> %6287, i64 0
  %6289 = getelementptr inbounds float, ptr %f6.host, i64 %6288
  %6290 = load float, ptr %6289, align 4, !tbaa !50
  %6291 = insertelement <4 x float> undef, float %6290, i64 0
  %6292 = extractelement <4 x i64> %6287, i64 1
  %6293 = getelementptr inbounds float, ptr %f6.host, i64 %6292
  %6294 = load float, ptr %6293, align 4, !tbaa !50
  %6295 = insertelement <4 x float> %6291, float %6294, i64 1
  %6296 = extractelement <4 x i64> %6287, i64 2
  %6297 = getelementptr inbounds float, ptr %f6.host, i64 %6296
  %6298 = load float, ptr %6297, align 4, !tbaa !50
  %6299 = insertelement <4 x float> %6295, float %6298, i64 2
  %6300 = extractelement <4 x i64> %6287, i64 3
  %6301 = getelementptr inbounds float, ptr %f6.host, i64 %6300
  %6302 = load float, ptr %6301, align 4, !tbaa !50
  %6303 = insertelement <4 x float> %6299, float %6302, i64 3
  %6304 = fmul <4 x float> %6303, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6305 = add <4 x i32> %6193, %t2649
  %6306 = sext <4 x i32> %6305 to <4 x i64>
  %6307 = extractelement <4 x i64> %6306, i64 0
  %6308 = getelementptr inbounds float, ptr %f6.host, i64 %6307
  %6309 = load float, ptr %6308, align 4, !tbaa !50
  %6310 = insertelement <4 x float> undef, float %6309, i64 0
  %6311 = extractelement <4 x i64> %6306, i64 1
  %6312 = getelementptr inbounds float, ptr %f6.host, i64 %6311
  %6313 = load float, ptr %6312, align 4, !tbaa !50
  %6314 = insertelement <4 x float> %6310, float %6313, i64 1
  %6315 = extractelement <4 x i64> %6306, i64 2
  %6316 = getelementptr inbounds float, ptr %f6.host, i64 %6315
  %6317 = load float, ptr %6316, align 4, !tbaa !50
  %6318 = insertelement <4 x float> %6314, float %6317, i64 2
  %6319 = extractelement <4 x i64> %6306, i64 3
  %6320 = getelementptr inbounds float, ptr %f6.host, i64 %6319
  %6321 = load float, ptr %6320, align 4, !tbaa !50
  %6322 = insertelement <4 x float> %6318, float %6321, i64 3
  %6323 = fmul <4 x float> %6322, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6324 = fadd <4 x float> %6304, %6323
  %6325 = fmul <4 x float> %6324, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6326 = add nsw <4 x i32> %t2649, %6217
  %6327 = sext <4 x i32> %6326 to <4 x i64>
  %6328 = extractelement <4 x i64> %6327, i64 0
  %6329 = getelementptr inbounds float, ptr %f6.host, i64 %6328
  %6330 = load float, ptr %6329, align 4, !tbaa !50
  %6331 = insertelement <4 x float> undef, float %6330, i64 0
  %6332 = extractelement <4 x i64> %6327, i64 1
  %6333 = getelementptr inbounds float, ptr %f6.host, i64 %6332
  %6334 = load float, ptr %6333, align 4, !tbaa !50
  %6335 = insertelement <4 x float> %6331, float %6334, i64 1
  %6336 = extractelement <4 x i64> %6327, i64 2
  %6337 = getelementptr inbounds float, ptr %f6.host, i64 %6336
  %6338 = load float, ptr %6337, align 4, !tbaa !50
  %6339 = insertelement <4 x float> %6335, float %6338, i64 2
  %6340 = extractelement <4 x i64> %6327, i64 3
  %6341 = getelementptr inbounds float, ptr %f6.host, i64 %6340
  %6342 = load float, ptr %6341, align 4, !tbaa !50
  %6343 = insertelement <4 x float> %6339, float %6342, i64 3
  %6344 = fmul <4 x float> %6343, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6345 = add <4 x i32> %6239, %t2649
  %6346 = sext <4 x i32> %6345 to <4 x i64>
  %6347 = extractelement <4 x i64> %6346, i64 0
  %6348 = getelementptr inbounds float, ptr %f6.host, i64 %6347
  %6349 = load float, ptr %6348, align 4, !tbaa !50
  %6350 = insertelement <4 x float> undef, float %6349, i64 0
  %6351 = extractelement <4 x i64> %6346, i64 1
  %6352 = getelementptr inbounds float, ptr %f6.host, i64 %6351
  %6353 = load float, ptr %6352, align 4, !tbaa !50
  %6354 = insertelement <4 x float> %6350, float %6353, i64 1
  %6355 = extractelement <4 x i64> %6346, i64 2
  %6356 = getelementptr inbounds float, ptr %f6.host, i64 %6355
  %6357 = load float, ptr %6356, align 4, !tbaa !50
  %6358 = insertelement <4 x float> %6354, float %6357, i64 2
  %6359 = extractelement <4 x i64> %6346, i64 3
  %6360 = getelementptr inbounds float, ptr %f6.host, i64 %6359
  %6361 = load float, ptr %6360, align 4, !tbaa !50
  %6362 = insertelement <4 x float> %6358, float %6361, i64 3
  %6363 = fmul <4 x float> %6362, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6364 = fadd <4 x float> %6344, %6363
  %6365 = fmul <4 x float> %6364, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6366 = fadd <4 x float> %6325, %6365
  %6367 = mul nsw <4 x i32> %t2645, %1392
  %6368 = add nsw <4 x i32> %6367, %6265
  %6369 = sext <4 x i32> %6368 to <4 x i64>
  %6370 = extractelement <4 x i64> %6369, i64 0
  %6371 = getelementptr inbounds float, ptr %f5.host, i64 %6370
  %6372 = load float, ptr %6371, align 4, !tbaa !46
  %6373 = insertelement <4 x float> undef, float %6372, i64 0
  %6374 = extractelement <4 x i64> %6369, i64 1
  %6375 = getelementptr inbounds float, ptr %f5.host, i64 %6374
  %6376 = load float, ptr %6375, align 4, !tbaa !46
  %6377 = insertelement <4 x float> %6373, float %6376, i64 1
  %6378 = extractelement <4 x i64> %6369, i64 2
  %6379 = getelementptr inbounds float, ptr %f5.host, i64 %6378
  %6380 = load float, ptr %6379, align 4, !tbaa !46
  %6381 = insertelement <4 x float> %6377, float %6380, i64 2
  %6382 = extractelement <4 x i64> %6369, i64 3
  %6383 = getelementptr inbounds float, ptr %f5.host, i64 %6382
  %6384 = load float, ptr %6383, align 4, !tbaa !46
  %6385 = insertelement <4 x float> %6381, float %6384, i64 3
  %6386 = fsub <4 x float> %6385, %6366
  %6387 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2638
  %6388 = fmul <4 x float> %6387, %6386
  %6389 = fadd <4 x float> %6285, %6388
  %6390 = sext i32 %t2642 to i64
  %6391 = add nsw i64 %6390, %3248
  %6392 = getelementptr inbounds float, ptr %155, i64 %6391
  %6393 = load <4 x float>, ptr %6392, align 4, !tbaa !66
  %6394 = fmul <4 x float> %6393, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6395 = add nsw i64 %3250, %6390
  %6396 = getelementptr inbounds float, ptr %155, i64 %6395
  %6397 = load <4 x float>, ptr %6396, align 4, !tbaa !66
  %6398 = fmul <4 x float> %6397, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6399 = fadd <4 x float> %6394, %6398
  %6400 = fmul <4 x float> %6399, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6401 = sext i32 %t2640 to i64
  %6402 = add nsw i64 %6401, %3248
  %6403 = getelementptr inbounds float, ptr %155, i64 %6402
  %6404 = load <4 x float>, ptr %6403, align 4, !tbaa !66
  %6405 = fmul <4 x float> %6404, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6406 = add nsw i64 %3250, %6401
  %6407 = getelementptr inbounds float, ptr %155, i64 %6406
  %6408 = load <4 x float>, ptr %6407, align 4, !tbaa !66
  %6409 = fmul <4 x float> %6408, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6410 = fadd <4 x float> %6405, %6409
  %6411 = fmul <4 x float> %6410, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6412 = fadd <4 x float> %6400, %6411
  %6413 = fadd <4 x float> %6389, %6412
  %6414 = insertelement <4 x i32> undef, i32 %t2669, i64 0
  %6415 = shufflevector <4 x i32> %6414, <4 x i32> undef, <4 x i32> zeroinitializer
  %6416 = add nsw <4 x i32> %6415, <i32 0, i32 1, i32 2, i32 3>
  %6417 = add nsw <4 x i32> %t2670, %6416
  %6418 = sext <4 x i32> %6417 to <4 x i64>
  %6419 = extractelement <4 x i64> %6418, i64 0
  %6420 = getelementptr inbounds float, ptr %f6.host, i64 %6419
  %6421 = load float, ptr %6420, align 4, !tbaa !50
  %6422 = insertelement <4 x float> undef, float %6421, i64 0
  %6423 = extractelement <4 x i64> %6418, i64 1
  %6424 = getelementptr inbounds float, ptr %f6.host, i64 %6423
  %6425 = load float, ptr %6424, align 4, !tbaa !50
  %6426 = insertelement <4 x float> %6422, float %6425, i64 1
  %6427 = extractelement <4 x i64> %6418, i64 2
  %6428 = getelementptr inbounds float, ptr %f6.host, i64 %6427
  %6429 = load float, ptr %6428, align 4, !tbaa !50
  %6430 = insertelement <4 x float> %6426, float %6429, i64 2
  %6431 = extractelement <4 x i64> %6418, i64 3
  %6432 = getelementptr inbounds float, ptr %f6.host, i64 %6431
  %6433 = load float, ptr %6432, align 4, !tbaa !50
  %6434 = insertelement <4 x float> %6430, float %6433, i64 3
  %6435 = fmul <4 x float> %6434, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6436 = insertelement <4 x i32> undef, i32 %t2668, i64 0
  %6437 = shufflevector <4 x i32> %6436, <4 x i32> undef, <4 x i32> zeroinitializer
  %6438 = add <4 x i32> %6437, <i32 -1, i32 0, i32 1, i32 2>
  %6439 = add <4 x i32> %6438, %t2670
  %6440 = sext <4 x i32> %6439 to <4 x i64>
  %6441 = extractelement <4 x i64> %6440, i64 0
  %6442 = getelementptr inbounds float, ptr %f6.host, i64 %6441
  %6443 = load float, ptr %6442, align 4, !tbaa !50
  %6444 = insertelement <4 x float> undef, float %6443, i64 0
  %6445 = extractelement <4 x i64> %6440, i64 1
  %6446 = getelementptr inbounds float, ptr %f6.host, i64 %6445
  %6447 = load float, ptr %6446, align 4, !tbaa !50
  %6448 = insertelement <4 x float> %6444, float %6447, i64 1
  %6449 = extractelement <4 x i64> %6440, i64 2
  %6450 = getelementptr inbounds float, ptr %f6.host, i64 %6449
  %6451 = load float, ptr %6450, align 4, !tbaa !50
  %6452 = insertelement <4 x float> %6448, float %6451, i64 2
  %6453 = extractelement <4 x i64> %6440, i64 3
  %6454 = getelementptr inbounds float, ptr %f6.host, i64 %6453
  %6455 = load float, ptr %6454, align 4, !tbaa !50
  %6456 = insertelement <4 x float> %6452, float %6455, i64 3
  %6457 = fmul <4 x float> %6456, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6458 = fadd <4 x float> %6435, %6457
  %6459 = fmul <4 x float> %6458, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6460 = insertelement <4 x i32> undef, i32 %t2667, i64 0
  %6461 = shufflevector <4 x i32> %6460, <4 x i32> undef, <4 x i32> zeroinitializer
  %6462 = add nsw <4 x i32> %6461, <i32 0, i32 1, i32 2, i32 3>
  %6463 = add nsw <4 x i32> %t2670, %6462
  %6464 = sext <4 x i32> %6463 to <4 x i64>
  %6465 = extractelement <4 x i64> %6464, i64 0
  %6466 = getelementptr inbounds float, ptr %f6.host, i64 %6465
  %6467 = load float, ptr %6466, align 4, !tbaa !50
  %6468 = insertelement <4 x float> undef, float %6467, i64 0
  %6469 = extractelement <4 x i64> %6464, i64 1
  %6470 = getelementptr inbounds float, ptr %f6.host, i64 %6469
  %6471 = load float, ptr %6470, align 4, !tbaa !50
  %6472 = insertelement <4 x float> %6468, float %6471, i64 1
  %6473 = extractelement <4 x i64> %6464, i64 2
  %6474 = getelementptr inbounds float, ptr %f6.host, i64 %6473
  %6475 = load float, ptr %6474, align 4, !tbaa !50
  %6476 = insertelement <4 x float> %6472, float %6475, i64 2
  %6477 = extractelement <4 x i64> %6464, i64 3
  %6478 = getelementptr inbounds float, ptr %f6.host, i64 %6477
  %6479 = load float, ptr %6478, align 4, !tbaa !50
  %6480 = insertelement <4 x float> %6476, float %6479, i64 3
  %6481 = fmul <4 x float> %6480, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6482 = insertelement <4 x i32> undef, i32 %t2664, i64 0
  %6483 = shufflevector <4 x i32> %6482, <4 x i32> undef, <4 x i32> zeroinitializer
  %6484 = add <4 x i32> %6483, <i32 -1, i32 0, i32 1, i32 2>
  %6485 = add <4 x i32> %6484, %t2670
  %6486 = sext <4 x i32> %6485 to <4 x i64>
  %6487 = extractelement <4 x i64> %6486, i64 0
  %6488 = getelementptr inbounds float, ptr %f6.host, i64 %6487
  %6489 = load float, ptr %6488, align 4, !tbaa !50
  %6490 = insertelement <4 x float> undef, float %6489, i64 0
  %6491 = extractelement <4 x i64> %6486, i64 1
  %6492 = getelementptr inbounds float, ptr %f6.host, i64 %6491
  %6493 = load float, ptr %6492, align 4, !tbaa !50
  %6494 = insertelement <4 x float> %6490, float %6493, i64 1
  %6495 = extractelement <4 x i64> %6486, i64 2
  %6496 = getelementptr inbounds float, ptr %f6.host, i64 %6495
  %6497 = load float, ptr %6496, align 4, !tbaa !50
  %6498 = insertelement <4 x float> %6494, float %6497, i64 2
  %6499 = extractelement <4 x i64> %6486, i64 3
  %6500 = getelementptr inbounds float, ptr %f6.host, i64 %6499
  %6501 = load float, ptr %6500, align 4, !tbaa !50
  %6502 = insertelement <4 x float> %6498, float %6501, i64 3
  %6503 = fmul <4 x float> %6502, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6504 = fadd <4 x float> %6481, %6503
  %6505 = fmul <4 x float> %6504, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6506 = fadd <4 x float> %6459, %6505
  %6507 = mul nsw <4 x i32> %6168, %1392
  %6508 = add nsw i32 %t2643, 1
  %6509 = insertelement <4 x i32> undef, i32 %6508, i64 0
  %6510 = shufflevector <4 x i32> %6509, <4 x i32> undef, <4 x i32> zeroinitializer
  %6511 = add nsw <4 x i32> %6510, <i32 0, i32 2, i32 4, i32 6>
  %6512 = add nsw <4 x i32> %6507, %6511
  %6513 = sext <4 x i32> %6512 to <4 x i64>
  %6514 = extractelement <4 x i64> %6513, i64 0
  %6515 = getelementptr inbounds float, ptr %f5.host, i64 %6514
  %6516 = load float, ptr %6515, align 4, !tbaa !46
  %6517 = insertelement <4 x float> undef, float %6516, i64 0
  %6518 = extractelement <4 x i64> %6513, i64 1
  %6519 = getelementptr inbounds float, ptr %f5.host, i64 %6518
  %6520 = load float, ptr %6519, align 4, !tbaa !46
  %6521 = insertelement <4 x float> %6517, float %6520, i64 1
  %6522 = extractelement <4 x i64> %6513, i64 2
  %6523 = getelementptr inbounds float, ptr %f5.host, i64 %6522
  %6524 = load float, ptr %6523, align 4, !tbaa !46
  %6525 = insertelement <4 x float> %6521, float %6524, i64 2
  %6526 = extractelement <4 x i64> %6513, i64 3
  %6527 = getelementptr inbounds float, ptr %f5.host, i64 %6526
  %6528 = load float, ptr %6527, align 4, !tbaa !46
  %6529 = insertelement <4 x float> %6525, float %6528, i64 3
  %6530 = fsub <4 x float> %6529, %6506
  %6531 = fmul <4 x float> %t2659, %6530
  %6532 = add nsw <4 x i32> %t2665, %6416
  %6533 = sext <4 x i32> %6532 to <4 x i64>
  %6534 = extractelement <4 x i64> %6533, i64 0
  %6535 = getelementptr inbounds float, ptr %f6.host, i64 %6534
  %6536 = load float, ptr %6535, align 4, !tbaa !50
  %6537 = insertelement <4 x float> undef, float %6536, i64 0
  %6538 = extractelement <4 x i64> %6533, i64 1
  %6539 = getelementptr inbounds float, ptr %f6.host, i64 %6538
  %6540 = load float, ptr %6539, align 4, !tbaa !50
  %6541 = insertelement <4 x float> %6537, float %6540, i64 1
  %6542 = extractelement <4 x i64> %6533, i64 2
  %6543 = getelementptr inbounds float, ptr %f6.host, i64 %6542
  %6544 = load float, ptr %6543, align 4, !tbaa !50
  %6545 = insertelement <4 x float> %6541, float %6544, i64 2
  %6546 = extractelement <4 x i64> %6533, i64 3
  %6547 = getelementptr inbounds float, ptr %f6.host, i64 %6546
  %6548 = load float, ptr %6547, align 4, !tbaa !50
  %6549 = insertelement <4 x float> %6545, float %6548, i64 3
  %6550 = fmul <4 x float> %6549, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6551 = add <4 x i32> %6438, %t2665
  %6552 = sext <4 x i32> %6551 to <4 x i64>
  %6553 = extractelement <4 x i64> %6552, i64 0
  %6554 = getelementptr inbounds float, ptr %f6.host, i64 %6553
  %6555 = load float, ptr %6554, align 4, !tbaa !50
  %6556 = insertelement <4 x float> undef, float %6555, i64 0
  %6557 = extractelement <4 x i64> %6552, i64 1
  %6558 = getelementptr inbounds float, ptr %f6.host, i64 %6557
  %6559 = load float, ptr %6558, align 4, !tbaa !50
  %6560 = insertelement <4 x float> %6556, float %6559, i64 1
  %6561 = extractelement <4 x i64> %6552, i64 2
  %6562 = getelementptr inbounds float, ptr %f6.host, i64 %6561
  %6563 = load float, ptr %6562, align 4, !tbaa !50
  %6564 = insertelement <4 x float> %6560, float %6563, i64 2
  %6565 = extractelement <4 x i64> %6552, i64 3
  %6566 = getelementptr inbounds float, ptr %f6.host, i64 %6565
  %6567 = load float, ptr %6566, align 4, !tbaa !50
  %6568 = insertelement <4 x float> %6564, float %6567, i64 3
  %6569 = fmul <4 x float> %6568, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6570 = fadd <4 x float> %6550, %6569
  %6571 = fmul <4 x float> %6570, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6572 = add nsw <4 x i32> %t2665, %6462
  %6573 = sext <4 x i32> %6572 to <4 x i64>
  %6574 = extractelement <4 x i64> %6573, i64 0
  %6575 = getelementptr inbounds float, ptr %f6.host, i64 %6574
  %6576 = load float, ptr %6575, align 4, !tbaa !50
  %6577 = insertelement <4 x float> undef, float %6576, i64 0
  %6578 = extractelement <4 x i64> %6573, i64 1
  %6579 = getelementptr inbounds float, ptr %f6.host, i64 %6578
  %6580 = load float, ptr %6579, align 4, !tbaa !50
  %6581 = insertelement <4 x float> %6577, float %6580, i64 1
  %6582 = extractelement <4 x i64> %6573, i64 2
  %6583 = getelementptr inbounds float, ptr %f6.host, i64 %6582
  %6584 = load float, ptr %6583, align 4, !tbaa !50
  %6585 = insertelement <4 x float> %6581, float %6584, i64 2
  %6586 = extractelement <4 x i64> %6573, i64 3
  %6587 = getelementptr inbounds float, ptr %f6.host, i64 %6586
  %6588 = load float, ptr %6587, align 4, !tbaa !50
  %6589 = insertelement <4 x float> %6585, float %6588, i64 3
  %6590 = fmul <4 x float> %6589, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6591 = add <4 x i32> %6484, %t2665
  %6592 = sext <4 x i32> %6591 to <4 x i64>
  %6593 = extractelement <4 x i64> %6592, i64 0
  %6594 = getelementptr inbounds float, ptr %f6.host, i64 %6593
  %6595 = load float, ptr %6594, align 4, !tbaa !50
  %6596 = insertelement <4 x float> undef, float %6595, i64 0
  %6597 = extractelement <4 x i64> %6592, i64 1
  %6598 = getelementptr inbounds float, ptr %f6.host, i64 %6597
  %6599 = load float, ptr %6598, align 4, !tbaa !50
  %6600 = insertelement <4 x float> %6596, float %6599, i64 1
  %6601 = extractelement <4 x i64> %6592, i64 2
  %6602 = getelementptr inbounds float, ptr %f6.host, i64 %6601
  %6603 = load float, ptr %6602, align 4, !tbaa !50
  %6604 = insertelement <4 x float> %6600, float %6603, i64 2
  %6605 = extractelement <4 x i64> %6592, i64 3
  %6606 = getelementptr inbounds float, ptr %f6.host, i64 %6605
  %6607 = load float, ptr %6606, align 4, !tbaa !50
  %6608 = insertelement <4 x float> %6604, float %6607, i64 3
  %6609 = fmul <4 x float> %6608, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6610 = fadd <4 x float> %6590, %6609
  %6611 = fmul <4 x float> %6610, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6612 = fadd <4 x float> %6571, %6611
  %6613 = mul nsw <4 x i32> %t2662, %1392
  %6614 = add nsw <4 x i32> %6613, %6511
  %6615 = sext <4 x i32> %6614 to <4 x i64>
  %6616 = extractelement <4 x i64> %6615, i64 0
  %6617 = getelementptr inbounds float, ptr %f5.host, i64 %6616
  %6618 = load float, ptr %6617, align 4, !tbaa !46
  %6619 = insertelement <4 x float> undef, float %6618, i64 0
  %6620 = extractelement <4 x i64> %6615, i64 1
  %6621 = getelementptr inbounds float, ptr %f5.host, i64 %6620
  %6622 = load float, ptr %6621, align 4, !tbaa !46
  %6623 = insertelement <4 x float> %6619, float %6622, i64 1
  %6624 = extractelement <4 x i64> %6615, i64 2
  %6625 = getelementptr inbounds float, ptr %f5.host, i64 %6624
  %6626 = load float, ptr %6625, align 4, !tbaa !46
  %6627 = insertelement <4 x float> %6623, float %6626, i64 2
  %6628 = extractelement <4 x i64> %6615, i64 3
  %6629 = getelementptr inbounds float, ptr %f5.host, i64 %6628
  %6630 = load float, ptr %6629, align 4, !tbaa !46
  %6631 = insertelement <4 x float> %6627, float %6630, i64 3
  %6632 = fsub <4 x float> %6631, %6612
  %6633 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2659
  %6634 = fmul <4 x float> %6633, %6632
  %6635 = fadd <4 x float> %6531, %6634
  %6636 = add nsw i64 %6390, %3251
  %6637 = getelementptr inbounds float, ptr %155, i64 %6636
  %6638 = load <4 x float>, ptr %6637, align 4, !tbaa !66
  %6639 = fmul <4 x float> %6638, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6640 = add nsw i64 %3253, %6390
  %6641 = getelementptr inbounds float, ptr %155, i64 %6640
  %6642 = load <4 x float>, ptr %6641, align 4, !tbaa !66
  %6643 = fmul <4 x float> %6642, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6644 = fadd <4 x float> %6639, %6643
  %6645 = fmul <4 x float> %6644, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6646 = add nsw i64 %6401, %3251
  %6647 = getelementptr inbounds float, ptr %155, i64 %6646
  %6648 = load <4 x float>, ptr %6647, align 4, !tbaa !66
  %6649 = fmul <4 x float> %6648, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6650 = add nsw i64 %3253, %6401
  %6651 = getelementptr inbounds float, ptr %155, i64 %6650
  %6652 = load <4 x float>, ptr %6651, align 4, !tbaa !66
  %6653 = fmul <4 x float> %6652, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6654 = fadd <4 x float> %6649, %6653
  %6655 = fmul <4 x float> %6654, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6656 = fadd <4 x float> %6645, %6655
  %6657 = fadd <4 x float> %6635, %6656
  %6658 = shufflevector <4 x float> %6413, <4 x float> %6657, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %6659 = sext i32 %6141 to i64
  %6660 = sub nsw i64 %6659, %1396
  %6661 = mul nsw i64 %6660, %1395
  %6662 = add nsw i64 %3255, %6661
  %6663 = getelementptr inbounds float, ptr %194, i64 %6662
  store <8 x float> %6658, ptr %6663, align 4, !tbaa !68
  br label %"produce f12658"

"produce f12658":                                 ; preds = %"for f127.s0.v3.v354.preheader", %"end for f127.s0.v3.v351", %"produce f12745"
  %6664 = trunc i64 %3413 to i32
  %6665 = and i32 %6664, 1
  %.not104.not = icmp eq i32 %6665, 0
  br i1 %.not104.not, label %true_bb60, label %"assert succeeded72"

true_bb60:                                        ; preds = %"produce f12658"
  br i1 %3260, label %"for f126.s0.v3.v363.preheader", label %"end for f126.s0.v3.v364", !prof !5

"for f126.s0.v3.v363.preheader":                  ; preds = %true_bb60
  %6666 = trunc i64 %3413 to i32
  %6667 = add i32 %6666, 3
  %6668 = ashr i32 %6667, 1
  %6669 = and i32 %6667, 2
  %6670 = ashr i32 %6667, 2
  %t2671 = add nsw i32 %6670, %6669
  %6671 = sub nsw i32 %6668, %f72.v4.min_realized
  %6672 = mul nsw i32 %6671, %1955
  %6673 = add i32 %3261, %6672
  %6674 = add nsw i32 %t2671, %1956
  %t2678 = mul nsw i32 %6674, %179
  %6675 = sub nsw i32 %6670, %f127.v4.min_realized
  %t2680 = mul nsw i32 %6675, %179
  %6676 = sub nsw i32 %6668, %f4.v4.min_realized
  %6677 = mul nsw i32 %6676, %f4.stride.1
  %6678 = add i32 %3262, %6677
  %6679 = add i32 %t2671, %1957
  %6680 = mul nsw i32 %6679, %f5.stride.1
  %6681 = sub nsw i32 %6670, %f5.v4.min_realized
  %6682 = mul nsw i32 %6681, %f5.stride.1
  %6683 = sext i32 %t2680 to i64
  %6684 = add nsw i64 %6683, -1
  %6685 = sext i32 %t2678 to i64
  %6686 = add nsw i64 %6685, -1
  %6687 = sext i32 %6668 to i64
  %6688 = sub nsw i64 %6687, %1963
  %6689 = mul nsw i64 %6688, %1962
  %6690 = add nsw i64 %6689, %3265
  br label %"for f126.s0.v3.v363"

"for f126.s0.v3.v363":                            ; preds = %"for f126.s0.v3.v363.preheader", %"for f126.s0.v3.v363"
  %lsr.iv303 = phi i32 [ %lsr.iv.next304, %"for f126.s0.v3.v363" ], [ 0, %"for f126.s0.v3.v363.preheader" ]
  %lsr.iv301 = phi i32 [ %lsr.iv.next302, %"for f126.s0.v3.v363" ], [ %a947, %"for f126.s0.v3.v363.preheader" ]
  %6691 = add i32 %lsr.iv303, %162
  %6692 = add i32 %6691, -1
  %6693 = shl i32 %6692, 1
  %6694 = and i32 %6693, 2
  %6695 = ashr i32 %6692, 1
  %t2672 = add nsw i32 %6694, %6695
  %6696 = add i32 %6673, %lsr.iv303
  %6697 = sext i32 %6696 to i64
  %6698 = add nsw i64 %6697, -2
  %6699 = getelementptr inbounds float, ptr %f72.host, i64 %6698
  %6700 = load <4 x float>, ptr %6699, align 4, !tbaa !48
  %6701 = add nsw i64 %6697, 2
  %6702 = getelementptr inbounds float, ptr %f72.host, i64 %6701
  %6703 = load <4 x float>, ptr %6702, align 4, !tbaa !48
  %6704 = shufflevector <4 x float> %6700, <4 x float> %6703, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2674 = fmul <4 x float> %233, %6704
  %a948 = fptosi <4 x float> %t2674 to <4 x i32>
  %a951 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a948)
  %6705 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a951, <4 x i32> zeroinitializer)
  %6706 = sitofp <4 x i32> %6705 to <4 x float>
  %t2676 = fsub <4 x float> %t2674, %6706
  %6707 = add i32 %6678, %lsr.iv303
  %t2683 = sub nsw <4 x i32> %6705, %242
  %6708 = sub nsw i32 %t2672, %f5.v3.min_realized
  %t2686 = add nsw i32 %6708, %6680
  %t2687 = mul nsw <4 x i32> %t2683, %1392
  %6709 = sub nsw i32 %6695, %f5.v3.min_realized
  %t2689 = add nsw i32 %6709, %6680
  %t2691 = add nsw i32 %6708, %6682
  %t2692 = add nsw i32 %6709, %6682
  %6710 = add nsw <4 x i32> %t2683, <i32 1, i32 1, i32 1, i32 1>
  %t2693 = mul nsw <4 x i32> %6710, %1392
  %6711 = ashr i32 %6691, 1
  %t2694 = add nsw i32 %6711, %3263
  %6712 = getelementptr inbounds float, ptr %f72.host, i64 %6697
  %6713 = load <4 x float>, ptr %6712, align 4, !tbaa !48
  %6714 = add nsw i64 %6697, 4
  %6715 = getelementptr inbounds float, ptr %f72.host, i64 %6714
  %6716 = load <4 x float>, ptr %6715, align 4, !tbaa !48
  %6717 = shufflevector <4 x float> %6713, <4 x float> %6716, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2695 = fmul <4 x float> %233, %6717
  %a952 = fptosi <4 x float> %t2695 to <4 x i32>
  %a955 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a952)
  %6718 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a955, <4 x i32> zeroinitializer)
  %6719 = sitofp <4 x i32> %6718 to <4 x float>
  %t2697 = fsub <4 x float> %t2695, %6719
  %t2700 = sub nsw <4 x i32> %6718, %242
  %6720 = sub nsw i32 %t2694, %f5.v3.min_realized
  %t2702 = add nsw i32 %6720, %6680
  %t2703 = mul nsw <4 x i32> %t2700, %1392
  %6721 = sub nsw i32 %6711, %f5.v3.min_realized
  %t2705 = add nsw i32 %6721, %6680
  %t2706 = add nsw i32 %6720, %6682
  %t2707 = add nsw i32 %6721, %6682
  %6722 = add nsw <4 x i32> %t2700, <i32 1, i32 1, i32 1, i32 1>
  %t2708 = mul nsw <4 x i32> %6722, %1392
  %6723 = insertelement <4 x i32> undef, i32 %t2692, i64 0
  %6724 = shufflevector <4 x i32> %6723, <4 x i32> undef, <4 x i32> zeroinitializer
  %6725 = add nsw <4 x i32> %6724, <i32 0, i32 1, i32 2, i32 3>
  %6726 = add nsw <4 x i32> %t2693, %6725
  %6727 = sext <4 x i32> %6726 to <4 x i64>
  %6728 = extractelement <4 x i64> %6727, i64 0
  %6729 = getelementptr inbounds float, ptr %f5.host, i64 %6728
  %6730 = load float, ptr %6729, align 4, !tbaa !46
  %6731 = insertelement <4 x float> undef, float %6730, i64 0
  %6732 = extractelement <4 x i64> %6727, i64 1
  %6733 = getelementptr inbounds float, ptr %f5.host, i64 %6732
  %6734 = load float, ptr %6733, align 4, !tbaa !46
  %6735 = insertelement <4 x float> %6731, float %6734, i64 1
  %6736 = extractelement <4 x i64> %6727, i64 2
  %6737 = getelementptr inbounds float, ptr %f5.host, i64 %6736
  %6738 = load float, ptr %6737, align 4, !tbaa !46
  %6739 = insertelement <4 x float> %6735, float %6738, i64 2
  %6740 = extractelement <4 x i64> %6727, i64 3
  %6741 = getelementptr inbounds float, ptr %f5.host, i64 %6740
  %6742 = load float, ptr %6741, align 4, !tbaa !46
  %6743 = insertelement <4 x float> %6739, float %6742, i64 3
  %6744 = fmul <4 x float> %6743, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6745 = insertelement <4 x i32> undef, i32 %t2691, i64 0
  %6746 = shufflevector <4 x i32> %6745, <4 x i32> undef, <4 x i32> zeroinitializer
  %6747 = add <4 x i32> %6746, <i32 -1, i32 0, i32 1, i32 2>
  %6748 = add <4 x i32> %6747, %t2693
  %6749 = sext <4 x i32> %6748 to <4 x i64>
  %6750 = extractelement <4 x i64> %6749, i64 0
  %6751 = getelementptr inbounds float, ptr %f5.host, i64 %6750
  %6752 = load float, ptr %6751, align 4, !tbaa !46
  %6753 = insertelement <4 x float> undef, float %6752, i64 0
  %6754 = extractelement <4 x i64> %6749, i64 1
  %6755 = getelementptr inbounds float, ptr %f5.host, i64 %6754
  %6756 = load float, ptr %6755, align 4, !tbaa !46
  %6757 = insertelement <4 x float> %6753, float %6756, i64 1
  %6758 = extractelement <4 x i64> %6749, i64 2
  %6759 = getelementptr inbounds float, ptr %f5.host, i64 %6758
  %6760 = load float, ptr %6759, align 4, !tbaa !46
  %6761 = insertelement <4 x float> %6757, float %6760, i64 2
  %6762 = extractelement <4 x i64> %6749, i64 3
  %6763 = getelementptr inbounds float, ptr %f5.host, i64 %6762
  %6764 = load float, ptr %6763, align 4, !tbaa !46
  %6765 = insertelement <4 x float> %6761, float %6764, i64 3
  %6766 = fmul <4 x float> %6765, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6767 = fadd <4 x float> %6744, %6766
  %6768 = fmul <4 x float> %6767, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6769 = insertelement <4 x i32> undef, i32 %t2689, i64 0
  %6770 = shufflevector <4 x i32> %6769, <4 x i32> undef, <4 x i32> zeroinitializer
  %6771 = add nsw <4 x i32> %6770, <i32 0, i32 1, i32 2, i32 3>
  %6772 = add nsw <4 x i32> %t2693, %6771
  %6773 = sext <4 x i32> %6772 to <4 x i64>
  %6774 = extractelement <4 x i64> %6773, i64 0
  %6775 = getelementptr inbounds float, ptr %f5.host, i64 %6774
  %6776 = load float, ptr %6775, align 4, !tbaa !46
  %6777 = insertelement <4 x float> undef, float %6776, i64 0
  %6778 = extractelement <4 x i64> %6773, i64 1
  %6779 = getelementptr inbounds float, ptr %f5.host, i64 %6778
  %6780 = load float, ptr %6779, align 4, !tbaa !46
  %6781 = insertelement <4 x float> %6777, float %6780, i64 1
  %6782 = extractelement <4 x i64> %6773, i64 2
  %6783 = getelementptr inbounds float, ptr %f5.host, i64 %6782
  %6784 = load float, ptr %6783, align 4, !tbaa !46
  %6785 = insertelement <4 x float> %6781, float %6784, i64 2
  %6786 = extractelement <4 x i64> %6773, i64 3
  %6787 = getelementptr inbounds float, ptr %f5.host, i64 %6786
  %6788 = load float, ptr %6787, align 4, !tbaa !46
  %6789 = insertelement <4 x float> %6785, float %6788, i64 3
  %6790 = fmul <4 x float> %6789, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6791 = insertelement <4 x i32> undef, i32 %t2686, i64 0
  %6792 = shufflevector <4 x i32> %6791, <4 x i32> undef, <4 x i32> zeroinitializer
  %6793 = add <4 x i32> %6792, <i32 -1, i32 0, i32 1, i32 2>
  %6794 = add <4 x i32> %6793, %t2693
  %6795 = sext <4 x i32> %6794 to <4 x i64>
  %6796 = extractelement <4 x i64> %6795, i64 0
  %6797 = getelementptr inbounds float, ptr %f5.host, i64 %6796
  %6798 = load float, ptr %6797, align 4, !tbaa !46
  %6799 = insertelement <4 x float> undef, float %6798, i64 0
  %6800 = extractelement <4 x i64> %6795, i64 1
  %6801 = getelementptr inbounds float, ptr %f5.host, i64 %6800
  %6802 = load float, ptr %6801, align 4, !tbaa !46
  %6803 = insertelement <4 x float> %6799, float %6802, i64 1
  %6804 = extractelement <4 x i64> %6795, i64 2
  %6805 = getelementptr inbounds float, ptr %f5.host, i64 %6804
  %6806 = load float, ptr %6805, align 4, !tbaa !46
  %6807 = insertelement <4 x float> %6803, float %6806, i64 2
  %6808 = extractelement <4 x i64> %6795, i64 3
  %6809 = getelementptr inbounds float, ptr %f5.host, i64 %6808
  %6810 = load float, ptr %6809, align 4, !tbaa !46
  %6811 = insertelement <4 x float> %6807, float %6810, i64 3
  %6812 = fmul <4 x float> %6811, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6813 = fadd <4 x float> %6790, %6812
  %6814 = fmul <4 x float> %6813, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6815 = fadd <4 x float> %6768, %6814
  %6816 = mul nsw <4 x i32> %6710, %1960
  %6817 = add i32 %6707, -1
  %6818 = insertelement <4 x i32> undef, i32 %6817, i64 0
  %6819 = shufflevector <4 x i32> %6818, <4 x i32> undef, <4 x i32> zeroinitializer
  %6820 = add nsw <4 x i32> %6819, <i32 0, i32 2, i32 4, i32 6>
  %6821 = add nsw <4 x i32> %6816, %6820
  %6822 = sext <4 x i32> %6821 to <4 x i64>
  %6823 = extractelement <4 x i64> %6822, i64 0
  %6824 = getelementptr inbounds float, ptr %f4.host, i64 %6823
  %6825 = load float, ptr %6824, align 4, !tbaa !44
  %6826 = insertelement <4 x float> undef, float %6825, i64 0
  %6827 = extractelement <4 x i64> %6822, i64 1
  %6828 = getelementptr inbounds float, ptr %f4.host, i64 %6827
  %6829 = load float, ptr %6828, align 4, !tbaa !44
  %6830 = insertelement <4 x float> %6826, float %6829, i64 1
  %6831 = extractelement <4 x i64> %6822, i64 2
  %6832 = getelementptr inbounds float, ptr %f4.host, i64 %6831
  %6833 = load float, ptr %6832, align 4, !tbaa !44
  %6834 = insertelement <4 x float> %6830, float %6833, i64 2
  %6835 = extractelement <4 x i64> %6822, i64 3
  %6836 = getelementptr inbounds float, ptr %f4.host, i64 %6835
  %6837 = load float, ptr %6836, align 4, !tbaa !44
  %6838 = insertelement <4 x float> %6834, float %6837, i64 3
  %6839 = fsub <4 x float> %6838, %6815
  %6840 = fmul <4 x float> %t2676, %6839
  %6841 = add nsw <4 x i32> %t2687, %6725
  %6842 = sext <4 x i32> %6841 to <4 x i64>
  %6843 = extractelement <4 x i64> %6842, i64 0
  %6844 = getelementptr inbounds float, ptr %f5.host, i64 %6843
  %6845 = load float, ptr %6844, align 4, !tbaa !46
  %6846 = insertelement <4 x float> undef, float %6845, i64 0
  %6847 = extractelement <4 x i64> %6842, i64 1
  %6848 = getelementptr inbounds float, ptr %f5.host, i64 %6847
  %6849 = load float, ptr %6848, align 4, !tbaa !46
  %6850 = insertelement <4 x float> %6846, float %6849, i64 1
  %6851 = extractelement <4 x i64> %6842, i64 2
  %6852 = getelementptr inbounds float, ptr %f5.host, i64 %6851
  %6853 = load float, ptr %6852, align 4, !tbaa !46
  %6854 = insertelement <4 x float> %6850, float %6853, i64 2
  %6855 = extractelement <4 x i64> %6842, i64 3
  %6856 = getelementptr inbounds float, ptr %f5.host, i64 %6855
  %6857 = load float, ptr %6856, align 4, !tbaa !46
  %6858 = insertelement <4 x float> %6854, float %6857, i64 3
  %6859 = fmul <4 x float> %6858, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6860 = add <4 x i32> %t2687, %6746
  %6861 = add <4 x i32> %6860, <i32 -1, i32 0, i32 1, i32 2>
  %6862 = sext <4 x i32> %6861 to <4 x i64>
  %6863 = extractelement <4 x i64> %6862, i64 0
  %6864 = getelementptr inbounds float, ptr %f5.host, i64 %6863
  %6865 = load float, ptr %6864, align 4, !tbaa !46
  %6866 = insertelement <4 x float> undef, float %6865, i64 0
  %6867 = extractelement <4 x i64> %6862, i64 1
  %6868 = getelementptr inbounds float, ptr %f5.host, i64 %6867
  %6869 = load float, ptr %6868, align 4, !tbaa !46
  %6870 = insertelement <4 x float> %6866, float %6869, i64 1
  %6871 = extractelement <4 x i64> %6862, i64 2
  %6872 = getelementptr inbounds float, ptr %f5.host, i64 %6871
  %6873 = load float, ptr %6872, align 4, !tbaa !46
  %6874 = insertelement <4 x float> %6870, float %6873, i64 2
  %6875 = extractelement <4 x i64> %6862, i64 3
  %6876 = getelementptr inbounds float, ptr %f5.host, i64 %6875
  %6877 = load float, ptr %6876, align 4, !tbaa !46
  %6878 = insertelement <4 x float> %6874, float %6877, i64 3
  %6879 = fmul <4 x float> %6878, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6880 = fadd <4 x float> %6859, %6879
  %6881 = fmul <4 x float> %6880, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6882 = add nsw <4 x i32> %t2687, %6771
  %6883 = sext <4 x i32> %6882 to <4 x i64>
  %6884 = extractelement <4 x i64> %6883, i64 0
  %6885 = getelementptr inbounds float, ptr %f5.host, i64 %6884
  %6886 = load float, ptr %6885, align 4, !tbaa !46
  %6887 = insertelement <4 x float> undef, float %6886, i64 0
  %6888 = extractelement <4 x i64> %6883, i64 1
  %6889 = getelementptr inbounds float, ptr %f5.host, i64 %6888
  %6890 = load float, ptr %6889, align 4, !tbaa !46
  %6891 = insertelement <4 x float> %6887, float %6890, i64 1
  %6892 = extractelement <4 x i64> %6883, i64 2
  %6893 = getelementptr inbounds float, ptr %f5.host, i64 %6892
  %6894 = load float, ptr %6893, align 4, !tbaa !46
  %6895 = insertelement <4 x float> %6891, float %6894, i64 2
  %6896 = extractelement <4 x i64> %6883, i64 3
  %6897 = getelementptr inbounds float, ptr %f5.host, i64 %6896
  %6898 = load float, ptr %6897, align 4, !tbaa !46
  %6899 = insertelement <4 x float> %6895, float %6898, i64 3
  %6900 = fmul <4 x float> %6899, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6901 = add <4 x i32> %t2687, %6792
  %6902 = add <4 x i32> %6901, <i32 -1, i32 0, i32 1, i32 2>
  %6903 = sext <4 x i32> %6902 to <4 x i64>
  %6904 = extractelement <4 x i64> %6903, i64 0
  %6905 = getelementptr inbounds float, ptr %f5.host, i64 %6904
  %6906 = load float, ptr %6905, align 4, !tbaa !46
  %6907 = insertelement <4 x float> undef, float %6906, i64 0
  %6908 = extractelement <4 x i64> %6903, i64 1
  %6909 = getelementptr inbounds float, ptr %f5.host, i64 %6908
  %6910 = load float, ptr %6909, align 4, !tbaa !46
  %6911 = insertelement <4 x float> %6907, float %6910, i64 1
  %6912 = extractelement <4 x i64> %6903, i64 2
  %6913 = getelementptr inbounds float, ptr %f5.host, i64 %6912
  %6914 = load float, ptr %6913, align 4, !tbaa !46
  %6915 = insertelement <4 x float> %6911, float %6914, i64 2
  %6916 = extractelement <4 x i64> %6903, i64 3
  %6917 = getelementptr inbounds float, ptr %f5.host, i64 %6916
  %6918 = load float, ptr %6917, align 4, !tbaa !46
  %6919 = insertelement <4 x float> %6915, float %6918, i64 3
  %6920 = fmul <4 x float> %6919, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6921 = fadd <4 x float> %6900, %6920
  %6922 = fmul <4 x float> %6921, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6923 = fadd <4 x float> %6881, %6922
  %6924 = mul nsw <4 x i32> %t2683, %1960
  %6925 = add nsw <4 x i32> %6924, %6820
  %6926 = sext <4 x i32> %6925 to <4 x i64>
  %6927 = extractelement <4 x i64> %6926, i64 0
  %6928 = getelementptr inbounds float, ptr %f4.host, i64 %6927
  %6929 = load float, ptr %6928, align 4, !tbaa !44
  %6930 = insertelement <4 x float> undef, float %6929, i64 0
  %6931 = extractelement <4 x i64> %6926, i64 1
  %6932 = getelementptr inbounds float, ptr %f4.host, i64 %6931
  %6933 = load float, ptr %6932, align 4, !tbaa !44
  %6934 = insertelement <4 x float> %6930, float %6933, i64 1
  %6935 = extractelement <4 x i64> %6926, i64 2
  %6936 = getelementptr inbounds float, ptr %f4.host, i64 %6935
  %6937 = load float, ptr %6936, align 4, !tbaa !44
  %6938 = insertelement <4 x float> %6934, float %6937, i64 2
  %6939 = extractelement <4 x i64> %6926, i64 3
  %6940 = getelementptr inbounds float, ptr %f4.host, i64 %6939
  %6941 = load float, ptr %6940, align 4, !tbaa !44
  %6942 = insertelement <4 x float> %6938, float %6941, i64 3
  %6943 = fsub <4 x float> %6942, %6923
  %6944 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2676
  %6945 = fmul <4 x float> %6944, %6943
  %6946 = fadd <4 x float> %6840, %6945
  %6947 = sext i32 %6695 to i64
  %6948 = sub nsw i64 %6947, %1397
  %6949 = add nsw i64 %6948, %6683
  %6950 = getelementptr inbounds float, ptr %194, i64 %6949
  %6951 = load <4 x float>, ptr %6950, align 4, !tbaa !68
  %6952 = fmul <4 x float> %6951, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6953 = sext i32 %t2672 to i64
  %6954 = sub nsw i64 %6953, %1397
  %6955 = add nsw i64 %6684, %6954
  %6956 = getelementptr inbounds float, ptr %194, i64 %6955
  %6957 = load <4 x float>, ptr %6956, align 4, !tbaa !68
  %6958 = fmul <4 x float> %6957, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6959 = fadd <4 x float> %6952, %6958
  %6960 = fmul <4 x float> %6959, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6961 = add nsw i64 %6948, %6685
  %6962 = getelementptr inbounds float, ptr %194, i64 %6961
  %6963 = load <4 x float>, ptr %6962, align 4, !tbaa !68
  %6964 = fmul <4 x float> %6963, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6965 = add nsw i64 %6686, %6954
  %6966 = getelementptr inbounds float, ptr %194, i64 %6965
  %6967 = load <4 x float>, ptr %6966, align 4, !tbaa !68
  %6968 = fmul <4 x float> %6967, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6969 = fadd <4 x float> %6964, %6968
  %6970 = fmul <4 x float> %6969, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6971 = fadd <4 x float> %6960, %6970
  %6972 = fadd <4 x float> %6946, %6971
  %6973 = insertelement <4 x i32> undef, i32 %t2707, i64 0
  %6974 = shufflevector <4 x i32> %6973, <4 x i32> undef, <4 x i32> zeroinitializer
  %6975 = add nsw <4 x i32> %6974, <i32 0, i32 1, i32 2, i32 3>
  %6976 = add nsw <4 x i32> %t2708, %6975
  %6977 = sext <4 x i32> %6976 to <4 x i64>
  %6978 = extractelement <4 x i64> %6977, i64 0
  %6979 = getelementptr inbounds float, ptr %f5.host, i64 %6978
  %6980 = load float, ptr %6979, align 4, !tbaa !46
  %6981 = insertelement <4 x float> undef, float %6980, i64 0
  %6982 = extractelement <4 x i64> %6977, i64 1
  %6983 = getelementptr inbounds float, ptr %f5.host, i64 %6982
  %6984 = load float, ptr %6983, align 4, !tbaa !46
  %6985 = insertelement <4 x float> %6981, float %6984, i64 1
  %6986 = extractelement <4 x i64> %6977, i64 2
  %6987 = getelementptr inbounds float, ptr %f5.host, i64 %6986
  %6988 = load float, ptr %6987, align 4, !tbaa !46
  %6989 = insertelement <4 x float> %6985, float %6988, i64 2
  %6990 = extractelement <4 x i64> %6977, i64 3
  %6991 = getelementptr inbounds float, ptr %f5.host, i64 %6990
  %6992 = load float, ptr %6991, align 4, !tbaa !46
  %6993 = insertelement <4 x float> %6989, float %6992, i64 3
  %6994 = fmul <4 x float> %6993, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6995 = insertelement <4 x i32> undef, i32 %t2706, i64 0
  %6996 = shufflevector <4 x i32> %6995, <4 x i32> undef, <4 x i32> zeroinitializer
  %6997 = add <4 x i32> %6996, <i32 -1, i32 0, i32 1, i32 2>
  %6998 = add <4 x i32> %6997, %t2708
  %6999 = sext <4 x i32> %6998 to <4 x i64>
  %7000 = extractelement <4 x i64> %6999, i64 0
  %7001 = getelementptr inbounds float, ptr %f5.host, i64 %7000
  %7002 = load float, ptr %7001, align 4, !tbaa !46
  %7003 = insertelement <4 x float> undef, float %7002, i64 0
  %7004 = extractelement <4 x i64> %6999, i64 1
  %7005 = getelementptr inbounds float, ptr %f5.host, i64 %7004
  %7006 = load float, ptr %7005, align 4, !tbaa !46
  %7007 = insertelement <4 x float> %7003, float %7006, i64 1
  %7008 = extractelement <4 x i64> %6999, i64 2
  %7009 = getelementptr inbounds float, ptr %f5.host, i64 %7008
  %7010 = load float, ptr %7009, align 4, !tbaa !46
  %7011 = insertelement <4 x float> %7007, float %7010, i64 2
  %7012 = extractelement <4 x i64> %6999, i64 3
  %7013 = getelementptr inbounds float, ptr %f5.host, i64 %7012
  %7014 = load float, ptr %7013, align 4, !tbaa !46
  %7015 = insertelement <4 x float> %7011, float %7014, i64 3
  %7016 = fmul <4 x float> %7015, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7017 = fadd <4 x float> %6994, %7016
  %7018 = fmul <4 x float> %7017, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7019 = insertelement <4 x i32> undef, i32 %t2705, i64 0
  %7020 = shufflevector <4 x i32> %7019, <4 x i32> undef, <4 x i32> zeroinitializer
  %7021 = add nsw <4 x i32> %7020, <i32 0, i32 1, i32 2, i32 3>
  %7022 = add nsw <4 x i32> %t2708, %7021
  %7023 = sext <4 x i32> %7022 to <4 x i64>
  %7024 = extractelement <4 x i64> %7023, i64 0
  %7025 = getelementptr inbounds float, ptr %f5.host, i64 %7024
  %7026 = load float, ptr %7025, align 4, !tbaa !46
  %7027 = insertelement <4 x float> undef, float %7026, i64 0
  %7028 = extractelement <4 x i64> %7023, i64 1
  %7029 = getelementptr inbounds float, ptr %f5.host, i64 %7028
  %7030 = load float, ptr %7029, align 4, !tbaa !46
  %7031 = insertelement <4 x float> %7027, float %7030, i64 1
  %7032 = extractelement <4 x i64> %7023, i64 2
  %7033 = getelementptr inbounds float, ptr %f5.host, i64 %7032
  %7034 = load float, ptr %7033, align 4, !tbaa !46
  %7035 = insertelement <4 x float> %7031, float %7034, i64 2
  %7036 = extractelement <4 x i64> %7023, i64 3
  %7037 = getelementptr inbounds float, ptr %f5.host, i64 %7036
  %7038 = load float, ptr %7037, align 4, !tbaa !46
  %7039 = insertelement <4 x float> %7035, float %7038, i64 3
  %7040 = fmul <4 x float> %7039, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7041 = insertelement <4 x i32> undef, i32 %t2702, i64 0
  %7042 = shufflevector <4 x i32> %7041, <4 x i32> undef, <4 x i32> zeroinitializer
  %7043 = add <4 x i32> %7042, <i32 -1, i32 0, i32 1, i32 2>
  %7044 = add <4 x i32> %7043, %t2708
  %7045 = sext <4 x i32> %7044 to <4 x i64>
  %7046 = extractelement <4 x i64> %7045, i64 0
  %7047 = getelementptr inbounds float, ptr %f5.host, i64 %7046
  %7048 = load float, ptr %7047, align 4, !tbaa !46
  %7049 = insertelement <4 x float> undef, float %7048, i64 0
  %7050 = extractelement <4 x i64> %7045, i64 1
  %7051 = getelementptr inbounds float, ptr %f5.host, i64 %7050
  %7052 = load float, ptr %7051, align 4, !tbaa !46
  %7053 = insertelement <4 x float> %7049, float %7052, i64 1
  %7054 = extractelement <4 x i64> %7045, i64 2
  %7055 = getelementptr inbounds float, ptr %f5.host, i64 %7054
  %7056 = load float, ptr %7055, align 4, !tbaa !46
  %7057 = insertelement <4 x float> %7053, float %7056, i64 2
  %7058 = extractelement <4 x i64> %7045, i64 3
  %7059 = getelementptr inbounds float, ptr %f5.host, i64 %7058
  %7060 = load float, ptr %7059, align 4, !tbaa !46
  %7061 = insertelement <4 x float> %7057, float %7060, i64 3
  %7062 = fmul <4 x float> %7061, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7063 = fadd <4 x float> %7040, %7062
  %7064 = fmul <4 x float> %7063, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7065 = fadd <4 x float> %7018, %7064
  %7066 = mul nsw <4 x i32> %6722, %1960
  %7067 = insertelement <4 x i32> undef, i32 %6707, i64 0
  %7068 = shufflevector <4 x i32> %7067, <4 x i32> undef, <4 x i32> zeroinitializer
  %7069 = add nsw <4 x i32> %7068, <i32 0, i32 2, i32 4, i32 6>
  %7070 = add nsw <4 x i32> %7066, %7069
  %7071 = sext <4 x i32> %7070 to <4 x i64>
  %7072 = extractelement <4 x i64> %7071, i64 0
  %7073 = getelementptr inbounds float, ptr %f4.host, i64 %7072
  %7074 = load float, ptr %7073, align 4, !tbaa !44
  %7075 = insertelement <4 x float> undef, float %7074, i64 0
  %7076 = extractelement <4 x i64> %7071, i64 1
  %7077 = getelementptr inbounds float, ptr %f4.host, i64 %7076
  %7078 = load float, ptr %7077, align 4, !tbaa !44
  %7079 = insertelement <4 x float> %7075, float %7078, i64 1
  %7080 = extractelement <4 x i64> %7071, i64 2
  %7081 = getelementptr inbounds float, ptr %f4.host, i64 %7080
  %7082 = load float, ptr %7081, align 4, !tbaa !44
  %7083 = insertelement <4 x float> %7079, float %7082, i64 2
  %7084 = extractelement <4 x i64> %7071, i64 3
  %7085 = getelementptr inbounds float, ptr %f4.host, i64 %7084
  %7086 = load float, ptr %7085, align 4, !tbaa !44
  %7087 = insertelement <4 x float> %7083, float %7086, i64 3
  %7088 = fsub <4 x float> %7087, %7065
  %7089 = fmul <4 x float> %t2697, %7088
  %7090 = add nsw <4 x i32> %t2703, %6975
  %7091 = sext <4 x i32> %7090 to <4 x i64>
  %7092 = extractelement <4 x i64> %7091, i64 0
  %7093 = getelementptr inbounds float, ptr %f5.host, i64 %7092
  %7094 = load float, ptr %7093, align 4, !tbaa !46
  %7095 = insertelement <4 x float> undef, float %7094, i64 0
  %7096 = extractelement <4 x i64> %7091, i64 1
  %7097 = getelementptr inbounds float, ptr %f5.host, i64 %7096
  %7098 = load float, ptr %7097, align 4, !tbaa !46
  %7099 = insertelement <4 x float> %7095, float %7098, i64 1
  %7100 = extractelement <4 x i64> %7091, i64 2
  %7101 = getelementptr inbounds float, ptr %f5.host, i64 %7100
  %7102 = load float, ptr %7101, align 4, !tbaa !46
  %7103 = insertelement <4 x float> %7099, float %7102, i64 2
  %7104 = extractelement <4 x i64> %7091, i64 3
  %7105 = getelementptr inbounds float, ptr %f5.host, i64 %7104
  %7106 = load float, ptr %7105, align 4, !tbaa !46
  %7107 = insertelement <4 x float> %7103, float %7106, i64 3
  %7108 = fmul <4 x float> %7107, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7109 = add <4 x i32> %6997, %t2703
  %7110 = sext <4 x i32> %7109 to <4 x i64>
  %7111 = extractelement <4 x i64> %7110, i64 0
  %7112 = getelementptr inbounds float, ptr %f5.host, i64 %7111
  %7113 = load float, ptr %7112, align 4, !tbaa !46
  %7114 = insertelement <4 x float> undef, float %7113, i64 0
  %7115 = extractelement <4 x i64> %7110, i64 1
  %7116 = getelementptr inbounds float, ptr %f5.host, i64 %7115
  %7117 = load float, ptr %7116, align 4, !tbaa !46
  %7118 = insertelement <4 x float> %7114, float %7117, i64 1
  %7119 = extractelement <4 x i64> %7110, i64 2
  %7120 = getelementptr inbounds float, ptr %f5.host, i64 %7119
  %7121 = load float, ptr %7120, align 4, !tbaa !46
  %7122 = insertelement <4 x float> %7118, float %7121, i64 2
  %7123 = extractelement <4 x i64> %7110, i64 3
  %7124 = getelementptr inbounds float, ptr %f5.host, i64 %7123
  %7125 = load float, ptr %7124, align 4, !tbaa !46
  %7126 = insertelement <4 x float> %7122, float %7125, i64 3
  %7127 = fmul <4 x float> %7126, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7128 = fadd <4 x float> %7108, %7127
  %7129 = fmul <4 x float> %7128, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7130 = add nsw <4 x i32> %t2703, %7021
  %7131 = sext <4 x i32> %7130 to <4 x i64>
  %7132 = extractelement <4 x i64> %7131, i64 0
  %7133 = getelementptr inbounds float, ptr %f5.host, i64 %7132
  %7134 = load float, ptr %7133, align 4, !tbaa !46
  %7135 = insertelement <4 x float> undef, float %7134, i64 0
  %7136 = extractelement <4 x i64> %7131, i64 1
  %7137 = getelementptr inbounds float, ptr %f5.host, i64 %7136
  %7138 = load float, ptr %7137, align 4, !tbaa !46
  %7139 = insertelement <4 x float> %7135, float %7138, i64 1
  %7140 = extractelement <4 x i64> %7131, i64 2
  %7141 = getelementptr inbounds float, ptr %f5.host, i64 %7140
  %7142 = load float, ptr %7141, align 4, !tbaa !46
  %7143 = insertelement <4 x float> %7139, float %7142, i64 2
  %7144 = extractelement <4 x i64> %7131, i64 3
  %7145 = getelementptr inbounds float, ptr %f5.host, i64 %7144
  %7146 = load float, ptr %7145, align 4, !tbaa !46
  %7147 = insertelement <4 x float> %7143, float %7146, i64 3
  %7148 = fmul <4 x float> %7147, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7149 = add <4 x i32> %7043, %t2703
  %7150 = sext <4 x i32> %7149 to <4 x i64>
  %7151 = extractelement <4 x i64> %7150, i64 0
  %7152 = getelementptr inbounds float, ptr %f5.host, i64 %7151
  %7153 = load float, ptr %7152, align 4, !tbaa !46
  %7154 = insertelement <4 x float> undef, float %7153, i64 0
  %7155 = extractelement <4 x i64> %7150, i64 1
  %7156 = getelementptr inbounds float, ptr %f5.host, i64 %7155
  %7157 = load float, ptr %7156, align 4, !tbaa !46
  %7158 = insertelement <4 x float> %7154, float %7157, i64 1
  %7159 = extractelement <4 x i64> %7150, i64 2
  %7160 = getelementptr inbounds float, ptr %f5.host, i64 %7159
  %7161 = load float, ptr %7160, align 4, !tbaa !46
  %7162 = insertelement <4 x float> %7158, float %7161, i64 2
  %7163 = extractelement <4 x i64> %7150, i64 3
  %7164 = getelementptr inbounds float, ptr %f5.host, i64 %7163
  %7165 = load float, ptr %7164, align 4, !tbaa !46
  %7166 = insertelement <4 x float> %7162, float %7165, i64 3
  %7167 = fmul <4 x float> %7166, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7168 = fadd <4 x float> %7148, %7167
  %7169 = fmul <4 x float> %7168, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7170 = fadd <4 x float> %7129, %7169
  %7171 = mul nsw <4 x i32> %t2700, %1960
  %7172 = add nsw <4 x i32> %7171, %7069
  %7173 = sext <4 x i32> %7172 to <4 x i64>
  %7174 = extractelement <4 x i64> %7173, i64 0
  %7175 = getelementptr inbounds float, ptr %f4.host, i64 %7174
  %7176 = load float, ptr %7175, align 4, !tbaa !44
  %7177 = insertelement <4 x float> undef, float %7176, i64 0
  %7178 = extractelement <4 x i64> %7173, i64 1
  %7179 = getelementptr inbounds float, ptr %f4.host, i64 %7178
  %7180 = load float, ptr %7179, align 4, !tbaa !44
  %7181 = insertelement <4 x float> %7177, float %7180, i64 1
  %7182 = extractelement <4 x i64> %7173, i64 2
  %7183 = getelementptr inbounds float, ptr %f4.host, i64 %7182
  %7184 = load float, ptr %7183, align 4, !tbaa !44
  %7185 = insertelement <4 x float> %7181, float %7184, i64 2
  %7186 = extractelement <4 x i64> %7173, i64 3
  %7187 = getelementptr inbounds float, ptr %f4.host, i64 %7186
  %7188 = load float, ptr %7187, align 4, !tbaa !44
  %7189 = insertelement <4 x float> %7185, float %7188, i64 3
  %7190 = fsub <4 x float> %7189, %7170
  %7191 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2697
  %7192 = fmul <4 x float> %7191, %7190
  %7193 = fadd <4 x float> %7089, %7192
  %7194 = sext i32 %6711 to i64
  %7195 = sub nsw i64 %7194, %1397
  %7196 = add nsw i64 %7195, %6683
  %7197 = getelementptr inbounds float, ptr %194, i64 %7196
  %7198 = load <4 x float>, ptr %7197, align 4, !tbaa !68
  %7199 = fmul <4 x float> %7198, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7200 = sext i32 %t2694 to i64
  %7201 = sub nsw i64 %7200, %1397
  %7202 = add nsw i64 %6684, %7201
  %7203 = getelementptr inbounds float, ptr %194, i64 %7202
  %7204 = load <4 x float>, ptr %7203, align 4, !tbaa !68
  %7205 = fmul <4 x float> %7204, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7206 = fadd <4 x float> %7199, %7205
  %7207 = fmul <4 x float> %7206, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7208 = add nsw i64 %7195, %6685
  %7209 = getelementptr inbounds float, ptr %194, i64 %7208
  %7210 = load <4 x float>, ptr %7209, align 4, !tbaa !68
  %7211 = fmul <4 x float> %7210, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7212 = add nsw i64 %6686, %7201
  %7213 = getelementptr inbounds float, ptr %194, i64 %7212
  %7214 = load <4 x float>, ptr %7213, align 4, !tbaa !68
  %7215 = fmul <4 x float> %7214, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7216 = fadd <4 x float> %7211, %7215
  %7217 = fmul <4 x float> %7216, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7218 = fadd <4 x float> %7207, %7217
  %7219 = fadd <4 x float> %7193, %7218
  %7220 = shufflevector <4 x float> %6972, <4 x float> %7219, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7221 = sext i32 %6691 to i64
  %7222 = add nsw i64 %6690, %7221
  %7223 = getelementptr inbounds float, ptr %223, i64 %7222
  store <8 x float> %7220, ptr %7223, align 4, !tbaa !70
  %lsr.iv.next302 = add i32 %lsr.iv301, -1
  %lsr.iv.next304 = add nuw i32 %lsr.iv303, 8
  %.not118 = icmp eq i32 %lsr.iv.next302, 0
  br i1 %.not118, label %"end for f126.s0.v3.v364", label %"for f126.s0.v3.v363"

"end for f126.s0.v3.v364":                        ; preds = %"for f126.s0.v3.v363", %true_bb60
  br i1 %3266, label %"for f126.s0.v3.v366.preheader", label %"assert succeeded72", !prof !5

"for f126.s0.v3.v366.preheader":                  ; preds = %"end for f126.s0.v3.v364"
  %7224 = trunc i64 %3413 to i32
  %7225 = add i32 %7224, 3
  %7226 = ashr i32 %7225, 1
  %7227 = and i32 %7225, 2
  %7228 = ashr i32 %7225, 2
  %t2709 = add nsw i32 %7228, %7227
  %7229 = sub nsw i32 %7226, %f72.v4.min_realized
  %7230 = mul nsw i32 %7229, %1955
  %t2712 = add nsw i32 %3269, %7230
  %7231 = sext i32 %t2712 to i64
  %7232 = getelementptr inbounds float, ptr %f72.host, i64 %7231
  %7233 = load <4 x float>, ptr %7232, align 4, !tbaa !48
  %7234 = add nsw i64 %7231, 4
  %7235 = getelementptr inbounds float, ptr %f72.host, i64 %7234
  %7236 = load <4 x float>, ptr %7235, align 4, !tbaa !48
  %7237 = shufflevector <4 x float> %7233, <4 x float> %7236, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2713 = fmul <4 x float> %233, %7237
  %a958 = fptosi <4 x float> %t2713 to <4 x i32>
  %a961 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a958)
  %7238 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a961, <4 x i32> zeroinitializer)
  %7239 = sitofp <4 x i32> %7238 to <4 x float>
  %t2715 = fsub <4 x float> %t2713, %7239
  %7240 = add nsw i32 %t2709, %1956
  %t2717 = mul nsw i32 %7240, %179
  %7241 = sub nsw i32 %7228, %f127.v4.min_realized
  %t2719 = mul nsw i32 %7241, %179
  %7242 = sub nsw i32 %7226, %f4.v4.min_realized
  %7243 = mul nsw i32 %7242, %f4.stride.1
  %t2720 = add nsw i32 %7243, %3270
  %t2722 = sub nsw <4 x i32> %7238, %242
  %7244 = add i32 %t2709, %1957
  %7245 = mul nsw i32 %7244, %f5.stride.1
  %t2725 = add nsw i32 %7245, %3271
  %t2726 = mul nsw <4 x i32> %t2722, %1392
  %t2728 = add nsw i32 %7245, %3272
  %7246 = sub nsw i32 %7228, %f5.v4.min_realized
  %7247 = mul nsw i32 %7246, %f5.stride.1
  %t2730 = add nsw i32 %7247, %3271
  %t2731 = add nsw i32 %7247, %3272
  %7248 = add nsw <4 x i32> %t2722, <i32 1, i32 1, i32 1, i32 1>
  %t2732 = mul nsw <4 x i32> %7248, %1392
  %7249 = shufflevector <4 x float> %7233, <4 x float> %7236, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2734 = fmul <4 x float> %233, %7249
  %a962 = fptosi <4 x float> %t2734 to <4 x i32>
  %a965 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a962)
  %7250 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a965, <4 x i32> zeroinitializer)
  %7251 = sitofp <4 x i32> %7250 to <4 x float>
  %t2736 = fsub <4 x float> %t2734, %7251
  %t2739 = sub nsw <4 x i32> %7250, %242
  %t2741 = add nsw i32 %7245, %3276
  %t2742 = mul nsw <4 x i32> %t2739, %1392
  %t2744 = add nsw i32 %7245, %3277
  %t2745 = add nsw i32 %7247, %3276
  %t2746 = add nsw i32 %7247, %3277
  %7252 = add nsw <4 x i32> %t2739, <i32 1, i32 1, i32 1, i32 1>
  %t2747 = mul nsw <4 x i32> %7252, %1392
  %7253 = insertelement <4 x i32> undef, i32 %t2731, i64 0
  %7254 = shufflevector <4 x i32> %7253, <4 x i32> undef, <4 x i32> zeroinitializer
  %7255 = add nsw <4 x i32> %7254, <i32 0, i32 1, i32 2, i32 3>
  %7256 = add nsw <4 x i32> %t2732, %7255
  %7257 = sext <4 x i32> %7256 to <4 x i64>
  %7258 = extractelement <4 x i64> %7257, i64 0
  %7259 = getelementptr inbounds float, ptr %f5.host, i64 %7258
  %7260 = load float, ptr %7259, align 4, !tbaa !46
  %7261 = insertelement <4 x float> undef, float %7260, i64 0
  %7262 = extractelement <4 x i64> %7257, i64 1
  %7263 = getelementptr inbounds float, ptr %f5.host, i64 %7262
  %7264 = load float, ptr %7263, align 4, !tbaa !46
  %7265 = insertelement <4 x float> %7261, float %7264, i64 1
  %7266 = extractelement <4 x i64> %7257, i64 2
  %7267 = getelementptr inbounds float, ptr %f5.host, i64 %7266
  %7268 = load float, ptr %7267, align 4, !tbaa !46
  %7269 = insertelement <4 x float> %7265, float %7268, i64 2
  %7270 = extractelement <4 x i64> %7257, i64 3
  %7271 = getelementptr inbounds float, ptr %f5.host, i64 %7270
  %7272 = load float, ptr %7271, align 4, !tbaa !46
  %7273 = insertelement <4 x float> %7269, float %7272, i64 3
  %7274 = fmul <4 x float> %7273, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7275 = insertelement <4 x i32> undef, i32 %t2730, i64 0
  %7276 = shufflevector <4 x i32> %7275, <4 x i32> undef, <4 x i32> zeroinitializer
  %7277 = add <4 x i32> %7276, <i32 -1, i32 0, i32 1, i32 2>
  %7278 = add <4 x i32> %7277, %t2732
  %7279 = sext <4 x i32> %7278 to <4 x i64>
  %7280 = extractelement <4 x i64> %7279, i64 0
  %7281 = getelementptr inbounds float, ptr %f5.host, i64 %7280
  %7282 = load float, ptr %7281, align 4, !tbaa !46
  %7283 = insertelement <4 x float> undef, float %7282, i64 0
  %7284 = extractelement <4 x i64> %7279, i64 1
  %7285 = getelementptr inbounds float, ptr %f5.host, i64 %7284
  %7286 = load float, ptr %7285, align 4, !tbaa !46
  %7287 = insertelement <4 x float> %7283, float %7286, i64 1
  %7288 = extractelement <4 x i64> %7279, i64 2
  %7289 = getelementptr inbounds float, ptr %f5.host, i64 %7288
  %7290 = load float, ptr %7289, align 4, !tbaa !46
  %7291 = insertelement <4 x float> %7287, float %7290, i64 2
  %7292 = extractelement <4 x i64> %7279, i64 3
  %7293 = getelementptr inbounds float, ptr %f5.host, i64 %7292
  %7294 = load float, ptr %7293, align 4, !tbaa !46
  %7295 = insertelement <4 x float> %7291, float %7294, i64 3
  %7296 = fmul <4 x float> %7295, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7297 = fadd <4 x float> %7274, %7296
  %7298 = fmul <4 x float> %7297, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7299 = insertelement <4 x i32> undef, i32 %t2728, i64 0
  %7300 = shufflevector <4 x i32> %7299, <4 x i32> undef, <4 x i32> zeroinitializer
  %7301 = add nsw <4 x i32> %7300, <i32 0, i32 1, i32 2, i32 3>
  %7302 = add nsw <4 x i32> %t2732, %7301
  %7303 = sext <4 x i32> %7302 to <4 x i64>
  %7304 = extractelement <4 x i64> %7303, i64 0
  %7305 = getelementptr inbounds float, ptr %f5.host, i64 %7304
  %7306 = load float, ptr %7305, align 4, !tbaa !46
  %7307 = insertelement <4 x float> undef, float %7306, i64 0
  %7308 = extractelement <4 x i64> %7303, i64 1
  %7309 = getelementptr inbounds float, ptr %f5.host, i64 %7308
  %7310 = load float, ptr %7309, align 4, !tbaa !46
  %7311 = insertelement <4 x float> %7307, float %7310, i64 1
  %7312 = extractelement <4 x i64> %7303, i64 2
  %7313 = getelementptr inbounds float, ptr %f5.host, i64 %7312
  %7314 = load float, ptr %7313, align 4, !tbaa !46
  %7315 = insertelement <4 x float> %7311, float %7314, i64 2
  %7316 = extractelement <4 x i64> %7303, i64 3
  %7317 = getelementptr inbounds float, ptr %f5.host, i64 %7316
  %7318 = load float, ptr %7317, align 4, !tbaa !46
  %7319 = insertelement <4 x float> %7315, float %7318, i64 3
  %7320 = fmul <4 x float> %7319, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7321 = insertelement <4 x i32> undef, i32 %t2725, i64 0
  %7322 = shufflevector <4 x i32> %7321, <4 x i32> undef, <4 x i32> zeroinitializer
  %7323 = add <4 x i32> %7322, <i32 -1, i32 0, i32 1, i32 2>
  %7324 = add <4 x i32> %7323, %t2732
  %7325 = sext <4 x i32> %7324 to <4 x i64>
  %7326 = extractelement <4 x i64> %7325, i64 0
  %7327 = getelementptr inbounds float, ptr %f5.host, i64 %7326
  %7328 = load float, ptr %7327, align 4, !tbaa !46
  %7329 = insertelement <4 x float> undef, float %7328, i64 0
  %7330 = extractelement <4 x i64> %7325, i64 1
  %7331 = getelementptr inbounds float, ptr %f5.host, i64 %7330
  %7332 = load float, ptr %7331, align 4, !tbaa !46
  %7333 = insertelement <4 x float> %7329, float %7332, i64 1
  %7334 = extractelement <4 x i64> %7325, i64 2
  %7335 = getelementptr inbounds float, ptr %f5.host, i64 %7334
  %7336 = load float, ptr %7335, align 4, !tbaa !46
  %7337 = insertelement <4 x float> %7333, float %7336, i64 2
  %7338 = extractelement <4 x i64> %7325, i64 3
  %7339 = getelementptr inbounds float, ptr %f5.host, i64 %7338
  %7340 = load float, ptr %7339, align 4, !tbaa !46
  %7341 = insertelement <4 x float> %7337, float %7340, i64 3
  %7342 = fmul <4 x float> %7341, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7343 = fadd <4 x float> %7320, %7342
  %7344 = fmul <4 x float> %7343, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7345 = fadd <4 x float> %7298, %7344
  %7346 = mul nsw <4 x i32> %7248, %1960
  %7347 = insertelement <4 x i32> undef, i32 %t2720, i64 0
  %7348 = shufflevector <4 x i32> %7347, <4 x i32> undef, <4 x i32> zeroinitializer
  %7349 = add nsw <4 x i32> %7348, <i32 0, i32 2, i32 4, i32 6>
  %7350 = add nsw <4 x i32> %7346, %7349
  %7351 = sext <4 x i32> %7350 to <4 x i64>
  %7352 = extractelement <4 x i64> %7351, i64 0
  %7353 = getelementptr inbounds float, ptr %f4.host, i64 %7352
  %7354 = load float, ptr %7353, align 4, !tbaa !44
  %7355 = insertelement <4 x float> undef, float %7354, i64 0
  %7356 = extractelement <4 x i64> %7351, i64 1
  %7357 = getelementptr inbounds float, ptr %f4.host, i64 %7356
  %7358 = load float, ptr %7357, align 4, !tbaa !44
  %7359 = insertelement <4 x float> %7355, float %7358, i64 1
  %7360 = extractelement <4 x i64> %7351, i64 2
  %7361 = getelementptr inbounds float, ptr %f4.host, i64 %7360
  %7362 = load float, ptr %7361, align 4, !tbaa !44
  %7363 = insertelement <4 x float> %7359, float %7362, i64 2
  %7364 = extractelement <4 x i64> %7351, i64 3
  %7365 = getelementptr inbounds float, ptr %f4.host, i64 %7364
  %7366 = load float, ptr %7365, align 4, !tbaa !44
  %7367 = insertelement <4 x float> %7363, float %7366, i64 3
  %7368 = fsub <4 x float> %7367, %7345
  %7369 = fmul <4 x float> %t2715, %7368
  %7370 = add nsw <4 x i32> %t2726, %7255
  %7371 = sext <4 x i32> %7370 to <4 x i64>
  %7372 = extractelement <4 x i64> %7371, i64 0
  %7373 = getelementptr inbounds float, ptr %f5.host, i64 %7372
  %7374 = load float, ptr %7373, align 4, !tbaa !46
  %7375 = insertelement <4 x float> undef, float %7374, i64 0
  %7376 = extractelement <4 x i64> %7371, i64 1
  %7377 = getelementptr inbounds float, ptr %f5.host, i64 %7376
  %7378 = load float, ptr %7377, align 4, !tbaa !46
  %7379 = insertelement <4 x float> %7375, float %7378, i64 1
  %7380 = extractelement <4 x i64> %7371, i64 2
  %7381 = getelementptr inbounds float, ptr %f5.host, i64 %7380
  %7382 = load float, ptr %7381, align 4, !tbaa !46
  %7383 = insertelement <4 x float> %7379, float %7382, i64 2
  %7384 = extractelement <4 x i64> %7371, i64 3
  %7385 = getelementptr inbounds float, ptr %f5.host, i64 %7384
  %7386 = load float, ptr %7385, align 4, !tbaa !46
  %7387 = insertelement <4 x float> %7383, float %7386, i64 3
  %7388 = fmul <4 x float> %7387, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7389 = add <4 x i32> %7277, %t2726
  %7390 = sext <4 x i32> %7389 to <4 x i64>
  %7391 = extractelement <4 x i64> %7390, i64 0
  %7392 = getelementptr inbounds float, ptr %f5.host, i64 %7391
  %7393 = load float, ptr %7392, align 4, !tbaa !46
  %7394 = insertelement <4 x float> undef, float %7393, i64 0
  %7395 = extractelement <4 x i64> %7390, i64 1
  %7396 = getelementptr inbounds float, ptr %f5.host, i64 %7395
  %7397 = load float, ptr %7396, align 4, !tbaa !46
  %7398 = insertelement <4 x float> %7394, float %7397, i64 1
  %7399 = extractelement <4 x i64> %7390, i64 2
  %7400 = getelementptr inbounds float, ptr %f5.host, i64 %7399
  %7401 = load float, ptr %7400, align 4, !tbaa !46
  %7402 = insertelement <4 x float> %7398, float %7401, i64 2
  %7403 = extractelement <4 x i64> %7390, i64 3
  %7404 = getelementptr inbounds float, ptr %f5.host, i64 %7403
  %7405 = load float, ptr %7404, align 4, !tbaa !46
  %7406 = insertelement <4 x float> %7402, float %7405, i64 3
  %7407 = fmul <4 x float> %7406, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7408 = fadd <4 x float> %7388, %7407
  %7409 = fmul <4 x float> %7408, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7410 = add nsw <4 x i32> %t2726, %7301
  %7411 = sext <4 x i32> %7410 to <4 x i64>
  %7412 = extractelement <4 x i64> %7411, i64 0
  %7413 = getelementptr inbounds float, ptr %f5.host, i64 %7412
  %7414 = load float, ptr %7413, align 4, !tbaa !46
  %7415 = insertelement <4 x float> undef, float %7414, i64 0
  %7416 = extractelement <4 x i64> %7411, i64 1
  %7417 = getelementptr inbounds float, ptr %f5.host, i64 %7416
  %7418 = load float, ptr %7417, align 4, !tbaa !46
  %7419 = insertelement <4 x float> %7415, float %7418, i64 1
  %7420 = extractelement <4 x i64> %7411, i64 2
  %7421 = getelementptr inbounds float, ptr %f5.host, i64 %7420
  %7422 = load float, ptr %7421, align 4, !tbaa !46
  %7423 = insertelement <4 x float> %7419, float %7422, i64 2
  %7424 = extractelement <4 x i64> %7411, i64 3
  %7425 = getelementptr inbounds float, ptr %f5.host, i64 %7424
  %7426 = load float, ptr %7425, align 4, !tbaa !46
  %7427 = insertelement <4 x float> %7423, float %7426, i64 3
  %7428 = fmul <4 x float> %7427, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7429 = add <4 x i32> %7323, %t2726
  %7430 = sext <4 x i32> %7429 to <4 x i64>
  %7431 = extractelement <4 x i64> %7430, i64 0
  %7432 = getelementptr inbounds float, ptr %f5.host, i64 %7431
  %7433 = load float, ptr %7432, align 4, !tbaa !46
  %7434 = insertelement <4 x float> undef, float %7433, i64 0
  %7435 = extractelement <4 x i64> %7430, i64 1
  %7436 = getelementptr inbounds float, ptr %f5.host, i64 %7435
  %7437 = load float, ptr %7436, align 4, !tbaa !46
  %7438 = insertelement <4 x float> %7434, float %7437, i64 1
  %7439 = extractelement <4 x i64> %7430, i64 2
  %7440 = getelementptr inbounds float, ptr %f5.host, i64 %7439
  %7441 = load float, ptr %7440, align 4, !tbaa !46
  %7442 = insertelement <4 x float> %7438, float %7441, i64 2
  %7443 = extractelement <4 x i64> %7430, i64 3
  %7444 = getelementptr inbounds float, ptr %f5.host, i64 %7443
  %7445 = load float, ptr %7444, align 4, !tbaa !46
  %7446 = insertelement <4 x float> %7442, float %7445, i64 3
  %7447 = fmul <4 x float> %7446, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7448 = fadd <4 x float> %7428, %7447
  %7449 = fmul <4 x float> %7448, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7450 = fadd <4 x float> %7409, %7449
  %7451 = mul nsw <4 x i32> %t2722, %1960
  %7452 = add nsw <4 x i32> %7451, %7349
  %7453 = sext <4 x i32> %7452 to <4 x i64>
  %7454 = extractelement <4 x i64> %7453, i64 0
  %7455 = getelementptr inbounds float, ptr %f4.host, i64 %7454
  %7456 = load float, ptr %7455, align 4, !tbaa !44
  %7457 = insertelement <4 x float> undef, float %7456, i64 0
  %7458 = extractelement <4 x i64> %7453, i64 1
  %7459 = getelementptr inbounds float, ptr %f4.host, i64 %7458
  %7460 = load float, ptr %7459, align 4, !tbaa !44
  %7461 = insertelement <4 x float> %7457, float %7460, i64 1
  %7462 = extractelement <4 x i64> %7453, i64 2
  %7463 = getelementptr inbounds float, ptr %f4.host, i64 %7462
  %7464 = load float, ptr %7463, align 4, !tbaa !44
  %7465 = insertelement <4 x float> %7461, float %7464, i64 2
  %7466 = extractelement <4 x i64> %7453, i64 3
  %7467 = getelementptr inbounds float, ptr %f4.host, i64 %7466
  %7468 = load float, ptr %7467, align 4, !tbaa !44
  %7469 = insertelement <4 x float> %7465, float %7468, i64 3
  %7470 = fsub <4 x float> %7469, %7450
  %7471 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2715
  %7472 = fmul <4 x float> %7471, %7470
  %7473 = fadd <4 x float> %7369, %7472
  %7474 = sext i32 %t2719 to i64
  %7475 = add nsw i64 %3279, %7474
  %7476 = getelementptr inbounds float, ptr %194, i64 %7475
  %7477 = load <4 x float>, ptr %7476, align 4, !tbaa !68
  %7478 = fmul <4 x float> %7477, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7479 = add nsw i64 %3282, %7474
  %7480 = getelementptr inbounds float, ptr %194, i64 %7479
  %7481 = load <4 x float>, ptr %7480, align 4, !tbaa !68
  %7482 = fmul <4 x float> %7481, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7483 = fadd <4 x float> %7478, %7482
  %7484 = fmul <4 x float> %7483, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7485 = sext i32 %t2717 to i64
  %7486 = add nsw i64 %3279, %7485
  %7487 = getelementptr inbounds float, ptr %194, i64 %7486
  %7488 = load <4 x float>, ptr %7487, align 4, !tbaa !68
  %7489 = fmul <4 x float> %7488, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7490 = add nsw i64 %3282, %7485
  %7491 = getelementptr inbounds float, ptr %194, i64 %7490
  %7492 = load <4 x float>, ptr %7491, align 4, !tbaa !68
  %7493 = fmul <4 x float> %7492, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7494 = fadd <4 x float> %7489, %7493
  %7495 = fmul <4 x float> %7494, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7496 = fadd <4 x float> %7484, %7495
  %7497 = fadd <4 x float> %7473, %7496
  %7498 = insertelement <4 x i32> undef, i32 %t2746, i64 0
  %7499 = shufflevector <4 x i32> %7498, <4 x i32> undef, <4 x i32> zeroinitializer
  %7500 = add nsw <4 x i32> %7499, <i32 0, i32 1, i32 2, i32 3>
  %7501 = add nsw <4 x i32> %t2747, %7500
  %7502 = sext <4 x i32> %7501 to <4 x i64>
  %7503 = extractelement <4 x i64> %7502, i64 0
  %7504 = getelementptr inbounds float, ptr %f5.host, i64 %7503
  %7505 = load float, ptr %7504, align 4, !tbaa !46
  %7506 = insertelement <4 x float> undef, float %7505, i64 0
  %7507 = extractelement <4 x i64> %7502, i64 1
  %7508 = getelementptr inbounds float, ptr %f5.host, i64 %7507
  %7509 = load float, ptr %7508, align 4, !tbaa !46
  %7510 = insertelement <4 x float> %7506, float %7509, i64 1
  %7511 = extractelement <4 x i64> %7502, i64 2
  %7512 = getelementptr inbounds float, ptr %f5.host, i64 %7511
  %7513 = load float, ptr %7512, align 4, !tbaa !46
  %7514 = insertelement <4 x float> %7510, float %7513, i64 2
  %7515 = extractelement <4 x i64> %7502, i64 3
  %7516 = getelementptr inbounds float, ptr %f5.host, i64 %7515
  %7517 = load float, ptr %7516, align 4, !tbaa !46
  %7518 = insertelement <4 x float> %7514, float %7517, i64 3
  %7519 = fmul <4 x float> %7518, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7520 = insertelement <4 x i32> undef, i32 %t2745, i64 0
  %7521 = shufflevector <4 x i32> %7520, <4 x i32> undef, <4 x i32> zeroinitializer
  %7522 = add <4 x i32> %7521, <i32 -1, i32 0, i32 1, i32 2>
  %7523 = add <4 x i32> %7522, %t2747
  %7524 = sext <4 x i32> %7523 to <4 x i64>
  %7525 = extractelement <4 x i64> %7524, i64 0
  %7526 = getelementptr inbounds float, ptr %f5.host, i64 %7525
  %7527 = load float, ptr %7526, align 4, !tbaa !46
  %7528 = insertelement <4 x float> undef, float %7527, i64 0
  %7529 = extractelement <4 x i64> %7524, i64 1
  %7530 = getelementptr inbounds float, ptr %f5.host, i64 %7529
  %7531 = load float, ptr %7530, align 4, !tbaa !46
  %7532 = insertelement <4 x float> %7528, float %7531, i64 1
  %7533 = extractelement <4 x i64> %7524, i64 2
  %7534 = getelementptr inbounds float, ptr %f5.host, i64 %7533
  %7535 = load float, ptr %7534, align 4, !tbaa !46
  %7536 = insertelement <4 x float> %7532, float %7535, i64 2
  %7537 = extractelement <4 x i64> %7524, i64 3
  %7538 = getelementptr inbounds float, ptr %f5.host, i64 %7537
  %7539 = load float, ptr %7538, align 4, !tbaa !46
  %7540 = insertelement <4 x float> %7536, float %7539, i64 3
  %7541 = fmul <4 x float> %7540, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7542 = fadd <4 x float> %7519, %7541
  %7543 = fmul <4 x float> %7542, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7544 = insertelement <4 x i32> undef, i32 %t2744, i64 0
  %7545 = shufflevector <4 x i32> %7544, <4 x i32> undef, <4 x i32> zeroinitializer
  %7546 = add nsw <4 x i32> %7545, <i32 0, i32 1, i32 2, i32 3>
  %7547 = add nsw <4 x i32> %t2747, %7546
  %7548 = sext <4 x i32> %7547 to <4 x i64>
  %7549 = extractelement <4 x i64> %7548, i64 0
  %7550 = getelementptr inbounds float, ptr %f5.host, i64 %7549
  %7551 = load float, ptr %7550, align 4, !tbaa !46
  %7552 = insertelement <4 x float> undef, float %7551, i64 0
  %7553 = extractelement <4 x i64> %7548, i64 1
  %7554 = getelementptr inbounds float, ptr %f5.host, i64 %7553
  %7555 = load float, ptr %7554, align 4, !tbaa !46
  %7556 = insertelement <4 x float> %7552, float %7555, i64 1
  %7557 = extractelement <4 x i64> %7548, i64 2
  %7558 = getelementptr inbounds float, ptr %f5.host, i64 %7557
  %7559 = load float, ptr %7558, align 4, !tbaa !46
  %7560 = insertelement <4 x float> %7556, float %7559, i64 2
  %7561 = extractelement <4 x i64> %7548, i64 3
  %7562 = getelementptr inbounds float, ptr %f5.host, i64 %7561
  %7563 = load float, ptr %7562, align 4, !tbaa !46
  %7564 = insertelement <4 x float> %7560, float %7563, i64 3
  %7565 = fmul <4 x float> %7564, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7566 = insertelement <4 x i32> undef, i32 %t2741, i64 0
  %7567 = shufflevector <4 x i32> %7566, <4 x i32> undef, <4 x i32> zeroinitializer
  %7568 = add <4 x i32> %7567, <i32 -1, i32 0, i32 1, i32 2>
  %7569 = add <4 x i32> %7568, %t2747
  %7570 = sext <4 x i32> %7569 to <4 x i64>
  %7571 = extractelement <4 x i64> %7570, i64 0
  %7572 = getelementptr inbounds float, ptr %f5.host, i64 %7571
  %7573 = load float, ptr %7572, align 4, !tbaa !46
  %7574 = insertelement <4 x float> undef, float %7573, i64 0
  %7575 = extractelement <4 x i64> %7570, i64 1
  %7576 = getelementptr inbounds float, ptr %f5.host, i64 %7575
  %7577 = load float, ptr %7576, align 4, !tbaa !46
  %7578 = insertelement <4 x float> %7574, float %7577, i64 1
  %7579 = extractelement <4 x i64> %7570, i64 2
  %7580 = getelementptr inbounds float, ptr %f5.host, i64 %7579
  %7581 = load float, ptr %7580, align 4, !tbaa !46
  %7582 = insertelement <4 x float> %7578, float %7581, i64 2
  %7583 = extractelement <4 x i64> %7570, i64 3
  %7584 = getelementptr inbounds float, ptr %f5.host, i64 %7583
  %7585 = load float, ptr %7584, align 4, !tbaa !46
  %7586 = insertelement <4 x float> %7582, float %7585, i64 3
  %7587 = fmul <4 x float> %7586, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7588 = fadd <4 x float> %7565, %7587
  %7589 = fmul <4 x float> %7588, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7590 = fadd <4 x float> %7543, %7589
  %7591 = mul nsw <4 x i32> %7252, %1960
  %7592 = add nsw i32 %t2720, 1
  %7593 = insertelement <4 x i32> undef, i32 %7592, i64 0
  %7594 = shufflevector <4 x i32> %7593, <4 x i32> undef, <4 x i32> zeroinitializer
  %7595 = add nsw <4 x i32> %7594, <i32 0, i32 2, i32 4, i32 6>
  %7596 = add nsw <4 x i32> %7591, %7595
  %7597 = sext <4 x i32> %7596 to <4 x i64>
  %7598 = extractelement <4 x i64> %7597, i64 0
  %7599 = getelementptr inbounds float, ptr %f4.host, i64 %7598
  %7600 = load float, ptr %7599, align 4, !tbaa !44
  %7601 = insertelement <4 x float> undef, float %7600, i64 0
  %7602 = extractelement <4 x i64> %7597, i64 1
  %7603 = getelementptr inbounds float, ptr %f4.host, i64 %7602
  %7604 = load float, ptr %7603, align 4, !tbaa !44
  %7605 = insertelement <4 x float> %7601, float %7604, i64 1
  %7606 = extractelement <4 x i64> %7597, i64 2
  %7607 = getelementptr inbounds float, ptr %f4.host, i64 %7606
  %7608 = load float, ptr %7607, align 4, !tbaa !44
  %7609 = insertelement <4 x float> %7605, float %7608, i64 2
  %7610 = extractelement <4 x i64> %7597, i64 3
  %7611 = getelementptr inbounds float, ptr %f4.host, i64 %7610
  %7612 = load float, ptr %7611, align 4, !tbaa !44
  %7613 = insertelement <4 x float> %7609, float %7612, i64 3
  %7614 = fsub <4 x float> %7613, %7590
  %7615 = fmul <4 x float> %t2736, %7614
  %7616 = add nsw <4 x i32> %t2742, %7500
  %7617 = sext <4 x i32> %7616 to <4 x i64>
  %7618 = extractelement <4 x i64> %7617, i64 0
  %7619 = getelementptr inbounds float, ptr %f5.host, i64 %7618
  %7620 = load float, ptr %7619, align 4, !tbaa !46
  %7621 = insertelement <4 x float> undef, float %7620, i64 0
  %7622 = extractelement <4 x i64> %7617, i64 1
  %7623 = getelementptr inbounds float, ptr %f5.host, i64 %7622
  %7624 = load float, ptr %7623, align 4, !tbaa !46
  %7625 = insertelement <4 x float> %7621, float %7624, i64 1
  %7626 = extractelement <4 x i64> %7617, i64 2
  %7627 = getelementptr inbounds float, ptr %f5.host, i64 %7626
  %7628 = load float, ptr %7627, align 4, !tbaa !46
  %7629 = insertelement <4 x float> %7625, float %7628, i64 2
  %7630 = extractelement <4 x i64> %7617, i64 3
  %7631 = getelementptr inbounds float, ptr %f5.host, i64 %7630
  %7632 = load float, ptr %7631, align 4, !tbaa !46
  %7633 = insertelement <4 x float> %7629, float %7632, i64 3
  %7634 = fmul <4 x float> %7633, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7635 = add <4 x i32> %7522, %t2742
  %7636 = sext <4 x i32> %7635 to <4 x i64>
  %7637 = extractelement <4 x i64> %7636, i64 0
  %7638 = getelementptr inbounds float, ptr %f5.host, i64 %7637
  %7639 = load float, ptr %7638, align 4, !tbaa !46
  %7640 = insertelement <4 x float> undef, float %7639, i64 0
  %7641 = extractelement <4 x i64> %7636, i64 1
  %7642 = getelementptr inbounds float, ptr %f5.host, i64 %7641
  %7643 = load float, ptr %7642, align 4, !tbaa !46
  %7644 = insertelement <4 x float> %7640, float %7643, i64 1
  %7645 = extractelement <4 x i64> %7636, i64 2
  %7646 = getelementptr inbounds float, ptr %f5.host, i64 %7645
  %7647 = load float, ptr %7646, align 4, !tbaa !46
  %7648 = insertelement <4 x float> %7644, float %7647, i64 2
  %7649 = extractelement <4 x i64> %7636, i64 3
  %7650 = getelementptr inbounds float, ptr %f5.host, i64 %7649
  %7651 = load float, ptr %7650, align 4, !tbaa !46
  %7652 = insertelement <4 x float> %7648, float %7651, i64 3
  %7653 = fmul <4 x float> %7652, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7654 = fadd <4 x float> %7634, %7653
  %7655 = fmul <4 x float> %7654, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7656 = add nsw <4 x i32> %t2742, %7546
  %7657 = sext <4 x i32> %7656 to <4 x i64>
  %7658 = extractelement <4 x i64> %7657, i64 0
  %7659 = getelementptr inbounds float, ptr %f5.host, i64 %7658
  %7660 = load float, ptr %7659, align 4, !tbaa !46
  %7661 = insertelement <4 x float> undef, float %7660, i64 0
  %7662 = extractelement <4 x i64> %7657, i64 1
  %7663 = getelementptr inbounds float, ptr %f5.host, i64 %7662
  %7664 = load float, ptr %7663, align 4, !tbaa !46
  %7665 = insertelement <4 x float> %7661, float %7664, i64 1
  %7666 = extractelement <4 x i64> %7657, i64 2
  %7667 = getelementptr inbounds float, ptr %f5.host, i64 %7666
  %7668 = load float, ptr %7667, align 4, !tbaa !46
  %7669 = insertelement <4 x float> %7665, float %7668, i64 2
  %7670 = extractelement <4 x i64> %7657, i64 3
  %7671 = getelementptr inbounds float, ptr %f5.host, i64 %7670
  %7672 = load float, ptr %7671, align 4, !tbaa !46
  %7673 = insertelement <4 x float> %7669, float %7672, i64 3
  %7674 = fmul <4 x float> %7673, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7675 = add <4 x i32> %7568, %t2742
  %7676 = sext <4 x i32> %7675 to <4 x i64>
  %7677 = extractelement <4 x i64> %7676, i64 0
  %7678 = getelementptr inbounds float, ptr %f5.host, i64 %7677
  %7679 = load float, ptr %7678, align 4, !tbaa !46
  %7680 = insertelement <4 x float> undef, float %7679, i64 0
  %7681 = extractelement <4 x i64> %7676, i64 1
  %7682 = getelementptr inbounds float, ptr %f5.host, i64 %7681
  %7683 = load float, ptr %7682, align 4, !tbaa !46
  %7684 = insertelement <4 x float> %7680, float %7683, i64 1
  %7685 = extractelement <4 x i64> %7676, i64 2
  %7686 = getelementptr inbounds float, ptr %f5.host, i64 %7685
  %7687 = load float, ptr %7686, align 4, !tbaa !46
  %7688 = insertelement <4 x float> %7684, float %7687, i64 2
  %7689 = extractelement <4 x i64> %7676, i64 3
  %7690 = getelementptr inbounds float, ptr %f5.host, i64 %7689
  %7691 = load float, ptr %7690, align 4, !tbaa !46
  %7692 = insertelement <4 x float> %7688, float %7691, i64 3
  %7693 = fmul <4 x float> %7692, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7694 = fadd <4 x float> %7674, %7693
  %7695 = fmul <4 x float> %7694, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7696 = fadd <4 x float> %7655, %7695
  %7697 = mul nsw <4 x i32> %t2739, %1960
  %7698 = add nsw <4 x i32> %7697, %7595
  %7699 = sext <4 x i32> %7698 to <4 x i64>
  %7700 = extractelement <4 x i64> %7699, i64 0
  %7701 = getelementptr inbounds float, ptr %f4.host, i64 %7700
  %7702 = load float, ptr %7701, align 4, !tbaa !44
  %7703 = insertelement <4 x float> undef, float %7702, i64 0
  %7704 = extractelement <4 x i64> %7699, i64 1
  %7705 = getelementptr inbounds float, ptr %f4.host, i64 %7704
  %7706 = load float, ptr %7705, align 4, !tbaa !44
  %7707 = insertelement <4 x float> %7703, float %7706, i64 1
  %7708 = extractelement <4 x i64> %7699, i64 2
  %7709 = getelementptr inbounds float, ptr %f4.host, i64 %7708
  %7710 = load float, ptr %7709, align 4, !tbaa !44
  %7711 = insertelement <4 x float> %7707, float %7710, i64 2
  %7712 = extractelement <4 x i64> %7699, i64 3
  %7713 = getelementptr inbounds float, ptr %f4.host, i64 %7712
  %7714 = load float, ptr %7713, align 4, !tbaa !44
  %7715 = insertelement <4 x float> %7711, float %7714, i64 3
  %7716 = fsub <4 x float> %7715, %7696
  %7717 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2736
  %7718 = fmul <4 x float> %7717, %7716
  %7719 = fadd <4 x float> %7615, %7718
  %7720 = add nsw i64 %3284, %7474
  %7721 = getelementptr inbounds float, ptr %194, i64 %7720
  %7722 = load <4 x float>, ptr %7721, align 4, !tbaa !68
  %7723 = fmul <4 x float> %7722, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7724 = add nsw i64 %3287, %7474
  %7725 = getelementptr inbounds float, ptr %194, i64 %7724
  %7726 = load <4 x float>, ptr %7725, align 4, !tbaa !68
  %7727 = fmul <4 x float> %7726, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7728 = fadd <4 x float> %7723, %7727
  %7729 = fmul <4 x float> %7728, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7730 = add nsw i64 %3284, %7485
  %7731 = getelementptr inbounds float, ptr %194, i64 %7730
  %7732 = load <4 x float>, ptr %7731, align 4, !tbaa !68
  %7733 = fmul <4 x float> %7732, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7734 = add nsw i64 %3287, %7485
  %7735 = getelementptr inbounds float, ptr %194, i64 %7734
  %7736 = load <4 x float>, ptr %7735, align 4, !tbaa !68
  %7737 = fmul <4 x float> %7736, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7738 = fadd <4 x float> %7733, %7737
  %7739 = fmul <4 x float> %7738, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7740 = fadd <4 x float> %7729, %7739
  %7741 = fadd <4 x float> %7719, %7740
  %7742 = shufflevector <4 x float> %7497, <4 x float> %7741, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7743 = sext i32 %7226 to i64
  %7744 = sub nsw i64 %7743, %1963
  %7745 = mul nsw i64 %7744, %1962
  %7746 = add nsw i64 %3289, %7745
  %7747 = getelementptr inbounds float, ptr %223, i64 %7746
  store <8 x float> %7742, ptr %7747, align 4, !tbaa !70
  br label %"assert succeeded72"

"assert succeeded72":                             ; preds = %"for f126.s0.v3.v366.preheader", %"produce f12658", %"end for f126.s0.v3.v364"
  %7748 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2526)
  %.not105 = icmp eq ptr %7748, null
  br i1 %.not105, label %"assert failed73", label %"produce f12576", !prof !4

"assert failed73":                                ; preds = %"assert succeeded72"
  %7749 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f12576":                                 ; preds = %"assert succeeded72"
  br i1 %3292, label %"for f125.s0.v3.v377.preheader", label %"end for f125.s0.v3.v378", !prof !5

"for f125.s0.v3.v377.preheader":                  ; preds = %"produce f12576"
  %scevgep = getelementptr i8, ptr %7748, i64 %3135
  %scevgep309 = getelementptr i8, ptr %scevgep, i64 %3293
  %7750 = add i32 %3412, %3138
  %7751 = shl nuw nsw i32 %6665, 1
  %7752 = ashr i32 %6664, 1
  %t2749 = add nsw i32 %7752, %3297
  %7753 = add i32 %t2749, %7751
  %t2763 = mul nsw i32 %7753, %208
  %7754 = sub nsw i32 %7752, %159
  %t2765 = mul nsw i32 %7754, %208
  %7755 = add i32 %7750, %7752
  %7756 = mul i32 %7755, %f4.stride.1
  %7757 = sub nsw i32 %7752, %f4.v4.min_realized
  %7758 = mul nsw i32 %7757, %f4.stride.1
  %7759 = sext i32 %t2765 to i64
  %7760 = add nsw i64 %7759, -1
  %7761 = sext i32 %t2763 to i64
  %7762 = add nsw i64 %7761, -1
  br label %"for f125.s0.v3.v377"

"for f125.s0.v3.v377":                            ; preds = %"for f125.s0.v3.v377", %"for f125.s0.v3.v377.preheader"
  %lsr.iv331 = phi i32 [ %lsr.iv329, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next332, %"for f125.s0.v3.v377" ]
  %lsr.iv311 = phi i64 [ 0, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next312, %"for f125.s0.v3.v377" ]
  %lsr.iv307 = phi i32 [ %a970, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next308, %"for f125.s0.v3.v377" ]
  %7763 = sext i32 %lsr.iv331 to i64
  %7764 = getelementptr inbounds float, ptr %f2.host, i64 %7763
  %7765 = load <4 x float>, ptr %7764, align 4, !tbaa !42
  %7766 = add nsw i64 %7763, 4
  %7767 = getelementptr inbounds float, ptr %f2.host, i64 %7766
  %7768 = load <4 x float>, ptr %7767, align 4, !tbaa !42
  %t2754 = shufflevector <4 x float> %7765, <4 x float> %7768, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2755 = shufflevector <4 x float> %7765, <4 x float> %7768, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2756 = fmul <4 x float> %233, %t2754
  %t2757 = fmul <4 x float> %233, %t2755
  %a971 = fptosi <4 x float> %t2757 to <4 x i32>
  %a978 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a971)
  %7769 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a978, <4 x i32> zeroinitializer)
  %t2759 = sitofp <4 x i32> %7769 to <4 x float>
  %t2760 = fmul <4 x float> %3296, %t2759
  %7770 = add nuw nsw <4 x i32> %7769, <i32 1, i32 1, i32 1, i32 1>
  %7771 = sitofp <4 x i32> %7770 to <4 x float>
  %t2761 = fmul <4 x float> %3296, %7771
  %7772 = fmul <4 x float> %t2757, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a976 = fptosi <4 x float> %7772 to <4 x i32>
  %a975 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a976)
  %7773 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a975, <4 x i32> zeroinitializer)
  %7774 = shl <4 x i32> %7769, <i32 8, i32 8, i32 8, i32 8>
  %.neg247 = sub <4 x i32> %.neg245, %7774
  %t2766 = add <4 x i32> %.neg247, %7773
  %7775 = add nuw nsw i64 %lsr.iv311, %3137
  %t2771 = sub nsw <4 x i32> %7769, %242
  %t2772 = mul nsw <4 x i32> %t2771, %1960
  %7776 = add nsw <4 x i32> %t2771, <i32 1, i32 1, i32 1, i32 1>
  %t2778 = mul nsw <4 x i32> %7776, %1960
  %a979 = fptosi <4 x float> %t2756 to <4 x i32>
  %a986 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a979)
  %7777 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a986, <4 x i32> zeroinitializer)
  %t2782 = sitofp <4 x i32> %7777 to <4 x float>
  %t2783 = fmul <4 x float> %3296, %t2782
  %7778 = add nuw nsw <4 x i32> %7777, <i32 1, i32 1, i32 1, i32 1>
  %7779 = sitofp <4 x i32> %7778 to <4 x float>
  %t2784 = fmul <4 x float> %3296, %7779
  %7780 = fmul <4 x float> %t2756, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a984 = fptosi <4 x float> %7780 to <4 x i32>
  %a983 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a984)
  %7781 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a983, <4 x i32> zeroinitializer)
  %7782 = shl <4 x i32> %7777, <i32 8, i32 8, i32 8, i32 8>
  %.neg249 = sub <4 x i32> %.neg245, %7782
  %t2787 = add <4 x i32> %.neg249, %7781
  %t2790 = sub nsw <4 x i32> %7777, %242
  %t2791 = mul nsw <4 x i32> %t2790, %1960
  %7783 = add nsw <4 x i32> %t2790, <i32 1, i32 1, i32 1, i32 1>
  %t2796 = mul nsw <4 x i32> %7783, %1960
  %7784 = trunc i64 %7775 to i32
  %7785 = add i32 %7758, %7784
  %tmp336 = add i32 %162, %7785
  %7786 = insertelement <4 x i32> undef, i32 %tmp336, i64 0
  %7787 = shufflevector <4 x i32> %7786, <4 x i32> undef, <4 x i32> zeroinitializer
  %7788 = add nsw <4 x i32> %7787, <i32 0, i32 1, i32 2, i32 3>
  %7789 = add nsw <4 x i32> %t2778, %7788
  %7790 = sext <4 x i32> %7789 to <4 x i64>
  %7791 = extractelement <4 x i64> %7790, i64 0
  %7792 = getelementptr inbounds float, ptr %f4.host, i64 %7791
  %7793 = load float, ptr %7792, align 4, !tbaa !44
  %7794 = insertelement <4 x float> undef, float %7793, i64 0
  %7795 = extractelement <4 x i64> %7790, i64 1
  %7796 = getelementptr inbounds float, ptr %f4.host, i64 %7795
  %7797 = load float, ptr %7796, align 4, !tbaa !44
  %7798 = insertelement <4 x float> %7794, float %7797, i64 1
  %7799 = extractelement <4 x i64> %7790, i64 2
  %7800 = getelementptr inbounds float, ptr %f4.host, i64 %7799
  %7801 = load float, ptr %7800, align 4, !tbaa !44
  %7802 = insertelement <4 x float> %7798, float %7801, i64 2
  %7803 = extractelement <4 x i64> %7790, i64 3
  %7804 = getelementptr inbounds float, ptr %f4.host, i64 %7803
  %7805 = load float, ptr %7804, align 4, !tbaa !44
  %7806 = insertelement <4 x float> %7802, float %7805, i64 3
  %7807 = fmul <4 x float> %7806, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7808 = trunc i64 %7775 to i32
  %7809 = add i32 %3150, %7808
  %7810 = add i32 %162, %7809
  %tmp342 = add i32 %7810, %7758
  %7811 = insertelement <4 x i32> undef, i32 %tmp342, i64 0
  %7812 = shufflevector <4 x i32> %7811, <4 x i32> undef, <4 x i32> zeroinitializer
  %7813 = add <4 x i32> %7812, <i32 -1, i32 0, i32 1, i32 2>
  %7814 = add <4 x i32> %7813, %t2778
  %7815 = sext <4 x i32> %7814 to <4 x i64>
  %7816 = extractelement <4 x i64> %7815, i64 0
  %7817 = getelementptr inbounds float, ptr %f4.host, i64 %7816
  %7818 = load float, ptr %7817, align 4, !tbaa !44
  %7819 = insertelement <4 x float> undef, float %7818, i64 0
  %7820 = extractelement <4 x i64> %7815, i64 1
  %7821 = getelementptr inbounds float, ptr %f4.host, i64 %7820
  %7822 = load float, ptr %7821, align 4, !tbaa !44
  %7823 = insertelement <4 x float> %7819, float %7822, i64 1
  %7824 = extractelement <4 x i64> %7815, i64 2
  %7825 = getelementptr inbounds float, ptr %f4.host, i64 %7824
  %7826 = load float, ptr %7825, align 4, !tbaa !44
  %7827 = insertelement <4 x float> %7823, float %7826, i64 2
  %7828 = extractelement <4 x i64> %7815, i64 3
  %7829 = getelementptr inbounds float, ptr %f4.host, i64 %7828
  %7830 = load float, ptr %7829, align 4, !tbaa !44
  %7831 = insertelement <4 x float> %7827, float %7830, i64 3
  %7832 = fmul <4 x float> %7831, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7833 = fadd <4 x float> %7807, %7832
  %7834 = fmul <4 x float> %7833, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7835 = trunc i64 %7775 to i32
  %7836 = add i32 %7756, %7835
  %tmp338 = add i32 %162, %7836
  %7837 = insertelement <4 x i32> undef, i32 %tmp338, i64 0
  %7838 = shufflevector <4 x i32> %7837, <4 x i32> undef, <4 x i32> zeroinitializer
  %7839 = add nsw <4 x i32> %7838, <i32 0, i32 1, i32 2, i32 3>
  %7840 = add nsw <4 x i32> %t2778, %7839
  %7841 = sext <4 x i32> %7840 to <4 x i64>
  %7842 = extractelement <4 x i64> %7841, i64 0
  %7843 = getelementptr inbounds float, ptr %f4.host, i64 %7842
  %7844 = load float, ptr %7843, align 4, !tbaa !44
  %7845 = insertelement <4 x float> undef, float %7844, i64 0
  %7846 = extractelement <4 x i64> %7841, i64 1
  %7847 = getelementptr inbounds float, ptr %f4.host, i64 %7846
  %7848 = load float, ptr %7847, align 4, !tbaa !44
  %7849 = insertelement <4 x float> %7845, float %7848, i64 1
  %7850 = extractelement <4 x i64> %7841, i64 2
  %7851 = getelementptr inbounds float, ptr %f4.host, i64 %7850
  %7852 = load float, ptr %7851, align 4, !tbaa !44
  %7853 = insertelement <4 x float> %7849, float %7852, i64 2
  %7854 = extractelement <4 x i64> %7841, i64 3
  %7855 = getelementptr inbounds float, ptr %f4.host, i64 %7854
  %7856 = load float, ptr %7855, align 4, !tbaa !44
  %7857 = insertelement <4 x float> %7853, float %7856, i64 3
  %7858 = fmul <4 x float> %7857, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp344 = add i32 %7810, %7756
  %7859 = insertelement <4 x i32> undef, i32 %tmp344, i64 0
  %7860 = shufflevector <4 x i32> %7859, <4 x i32> undef, <4 x i32> zeroinitializer
  %7861 = add <4 x i32> %7860, <i32 -1, i32 0, i32 1, i32 2>
  %7862 = add <4 x i32> %7861, %t2778
  %7863 = sext <4 x i32> %7862 to <4 x i64>
  %7864 = extractelement <4 x i64> %7863, i64 0
  %7865 = getelementptr inbounds float, ptr %f4.host, i64 %7864
  %7866 = load float, ptr %7865, align 4, !tbaa !44
  %7867 = insertelement <4 x float> undef, float %7866, i64 0
  %7868 = extractelement <4 x i64> %7863, i64 1
  %7869 = getelementptr inbounds float, ptr %f4.host, i64 %7868
  %7870 = load float, ptr %7869, align 4, !tbaa !44
  %7871 = insertelement <4 x float> %7867, float %7870, i64 1
  %7872 = extractelement <4 x i64> %7863, i64 2
  %7873 = getelementptr inbounds float, ptr %f4.host, i64 %7872
  %7874 = load float, ptr %7873, align 4, !tbaa !44
  %7875 = insertelement <4 x float> %7871, float %7874, i64 2
  %7876 = extractelement <4 x i64> %7863, i64 3
  %7877 = getelementptr inbounds float, ptr %f4.host, i64 %7876
  %7878 = load float, ptr %7877, align 4, !tbaa !44
  %7879 = insertelement <4 x float> %7875, float %7878, i64 3
  %7880 = fmul <4 x float> %7879, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7881 = fadd <4 x float> %7858, %7880
  %7882 = fmul <4 x float> %7881, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7883 = fadd <4 x float> %7834, %7882
  %7884 = sext <4 x i32> %t2766 to <4 x i64>
  %7885 = extractelement <4 x i64> %7884, i64 0
  %7886 = getelementptr inbounds float, ptr %f0.host, i64 %7885
  %7887 = load float, ptr %7886, align 4, !tbaa !6
  %7888 = insertelement <4 x float> undef, float %7887, i64 0
  %7889 = extractelement <4 x i64> %7884, i64 1
  %7890 = getelementptr inbounds float, ptr %f0.host, i64 %7889
  %7891 = load float, ptr %7890, align 4, !tbaa !6
  %7892 = insertelement <4 x float> %7888, float %7891, i64 1
  %7893 = extractelement <4 x i64> %7884, i64 2
  %7894 = getelementptr inbounds float, ptr %f0.host, i64 %7893
  %7895 = load float, ptr %7894, align 4, !tbaa !6
  %7896 = insertelement <4 x float> %7892, float %7895, i64 2
  %7897 = extractelement <4 x i64> %7884, i64 3
  %7898 = getelementptr inbounds float, ptr %f0.host, i64 %7897
  %7899 = load float, ptr %7898, align 4, !tbaa !6
  %7900 = insertelement <4 x float> %7896, float %7899, i64 3
  %7901 = fsub <4 x float> %t2755, %t2761
  %7902 = fmul <4 x float> %3305, %7901
  %7903 = fadd <4 x float> %t2761, %7902
  %7904 = fadd <4 x float> %7903, %7900
  %7905 = fsub <4 x float> %7904, %7883
  %7906 = fsub <4 x float> %t2757, %t2759
  %7907 = fmul <4 x float> %7906, %7905
  %7908 = add nsw <4 x i32> %t2772, %7788
  %7909 = sext <4 x i32> %7908 to <4 x i64>
  %7910 = extractelement <4 x i64> %7909, i64 0
  %7911 = getelementptr inbounds float, ptr %f4.host, i64 %7910
  %7912 = load float, ptr %7911, align 4, !tbaa !44
  %7913 = insertelement <4 x float> undef, float %7912, i64 0
  %7914 = extractelement <4 x i64> %7909, i64 1
  %7915 = getelementptr inbounds float, ptr %f4.host, i64 %7914
  %7916 = load float, ptr %7915, align 4, !tbaa !44
  %7917 = insertelement <4 x float> %7913, float %7916, i64 1
  %7918 = extractelement <4 x i64> %7909, i64 2
  %7919 = getelementptr inbounds float, ptr %f4.host, i64 %7918
  %7920 = load float, ptr %7919, align 4, !tbaa !44
  %7921 = insertelement <4 x float> %7917, float %7920, i64 2
  %7922 = extractelement <4 x i64> %7909, i64 3
  %7923 = getelementptr inbounds float, ptr %f4.host, i64 %7922
  %7924 = load float, ptr %7923, align 4, !tbaa !44
  %7925 = insertelement <4 x float> %7921, float %7924, i64 3
  %7926 = fmul <4 x float> %7925, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7927 = add <4 x i32> %7813, %t2772
  %7928 = sext <4 x i32> %7927 to <4 x i64>
  %7929 = extractelement <4 x i64> %7928, i64 0
  %7930 = getelementptr inbounds float, ptr %f4.host, i64 %7929
  %7931 = load float, ptr %7930, align 4, !tbaa !44
  %7932 = insertelement <4 x float> undef, float %7931, i64 0
  %7933 = extractelement <4 x i64> %7928, i64 1
  %7934 = getelementptr inbounds float, ptr %f4.host, i64 %7933
  %7935 = load float, ptr %7934, align 4, !tbaa !44
  %7936 = insertelement <4 x float> %7932, float %7935, i64 1
  %7937 = extractelement <4 x i64> %7928, i64 2
  %7938 = getelementptr inbounds float, ptr %f4.host, i64 %7937
  %7939 = load float, ptr %7938, align 4, !tbaa !44
  %7940 = insertelement <4 x float> %7936, float %7939, i64 2
  %7941 = extractelement <4 x i64> %7928, i64 3
  %7942 = getelementptr inbounds float, ptr %f4.host, i64 %7941
  %7943 = load float, ptr %7942, align 4, !tbaa !44
  %7944 = insertelement <4 x float> %7940, float %7943, i64 3
  %7945 = fmul <4 x float> %7944, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7946 = fadd <4 x float> %7926, %7945
  %7947 = fmul <4 x float> %7946, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7948 = add nsw <4 x i32> %t2772, %7839
  %7949 = sext <4 x i32> %7948 to <4 x i64>
  %7950 = extractelement <4 x i64> %7949, i64 0
  %7951 = getelementptr inbounds float, ptr %f4.host, i64 %7950
  %7952 = load float, ptr %7951, align 4, !tbaa !44
  %7953 = insertelement <4 x float> undef, float %7952, i64 0
  %7954 = extractelement <4 x i64> %7949, i64 1
  %7955 = getelementptr inbounds float, ptr %f4.host, i64 %7954
  %7956 = load float, ptr %7955, align 4, !tbaa !44
  %7957 = insertelement <4 x float> %7953, float %7956, i64 1
  %7958 = extractelement <4 x i64> %7949, i64 2
  %7959 = getelementptr inbounds float, ptr %f4.host, i64 %7958
  %7960 = load float, ptr %7959, align 4, !tbaa !44
  %7961 = insertelement <4 x float> %7957, float %7960, i64 2
  %7962 = extractelement <4 x i64> %7949, i64 3
  %7963 = getelementptr inbounds float, ptr %f4.host, i64 %7962
  %7964 = load float, ptr %7963, align 4, !tbaa !44
  %7965 = insertelement <4 x float> %7961, float %7964, i64 3
  %7966 = fmul <4 x float> %7965, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7967 = add <4 x i32> %7861, %t2772
  %7968 = sext <4 x i32> %7967 to <4 x i64>
  %7969 = extractelement <4 x i64> %7968, i64 0
  %7970 = getelementptr inbounds float, ptr %f4.host, i64 %7969
  %7971 = load float, ptr %7970, align 4, !tbaa !44
  %7972 = insertelement <4 x float> undef, float %7971, i64 0
  %7973 = extractelement <4 x i64> %7968, i64 1
  %7974 = getelementptr inbounds float, ptr %f4.host, i64 %7973
  %7975 = load float, ptr %7974, align 4, !tbaa !44
  %7976 = insertelement <4 x float> %7972, float %7975, i64 1
  %7977 = extractelement <4 x i64> %7968, i64 2
  %7978 = getelementptr inbounds float, ptr %f4.host, i64 %7977
  %7979 = load float, ptr %7978, align 4, !tbaa !44
  %7980 = insertelement <4 x float> %7976, float %7979, i64 2
  %7981 = extractelement <4 x i64> %7968, i64 3
  %7982 = getelementptr inbounds float, ptr %f4.host, i64 %7981
  %7983 = load float, ptr %7982, align 4, !tbaa !44
  %7984 = insertelement <4 x float> %7980, float %7983, i64 3
  %7985 = fmul <4 x float> %7984, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7986 = fadd <4 x float> %7966, %7985
  %7987 = fmul <4 x float> %7986, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7988 = fadd <4 x float> %7947, %7987
  %7989 = add nsw <4 x i32> %t2766, <i32 256, i32 256, i32 256, i32 256>
  %7990 = sext <4 x i32> %7989 to <4 x i64>
  %7991 = extractelement <4 x i64> %7990, i64 0
  %7992 = getelementptr inbounds float, ptr %f0.host, i64 %7991
  %7993 = load float, ptr %7992, align 4, !tbaa !6
  %7994 = insertelement <4 x float> undef, float %7993, i64 0
  %7995 = extractelement <4 x i64> %7990, i64 1
  %7996 = getelementptr inbounds float, ptr %f0.host, i64 %7995
  %7997 = load float, ptr %7996, align 4, !tbaa !6
  %7998 = insertelement <4 x float> %7994, float %7997, i64 1
  %7999 = extractelement <4 x i64> %7990, i64 2
  %8000 = getelementptr inbounds float, ptr %f0.host, i64 %7999
  %8001 = load float, ptr %8000, align 4, !tbaa !6
  %8002 = insertelement <4 x float> %7998, float %8001, i64 2
  %8003 = extractelement <4 x i64> %7990, i64 3
  %8004 = getelementptr inbounds float, ptr %f0.host, i64 %8003
  %8005 = load float, ptr %8004, align 4, !tbaa !6
  %8006 = insertelement <4 x float> %8002, float %8005, i64 3
  %8007 = fsub <4 x float> %t2755, %t2760
  %8008 = fmul <4 x float> %3305, %8007
  %8009 = fadd <4 x float> %t2760, %8008
  %8010 = fadd <4 x float> %8009, %8006
  %8011 = fsub <4 x float> %8010, %7988
  %8012 = fsub <4 x float> %t2759, %t2757
  %8013 = fadd <4 x float> %8012, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8014 = fmul <4 x float> %8013, %8011
  %8015 = fadd <4 x float> %7907, %8014
  %8016 = trunc i64 %lsr.iv311 to i32
  %tmp334 = add i32 %162, %8016
  %8017 = sext i32 %tmp334 to i64
  %8018 = sub nsw i64 %8017, %1964
  %8019 = add nsw i64 %8018, %7759
  %8020 = getelementptr inbounds float, ptr %223, i64 %8019
  %8021 = load <4 x float>, ptr %8020, align 4, !tbaa !70
  %8022 = fmul <4 x float> %8021, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp340 = add i32 %3306, %8016
  %8023 = sext i32 %tmp340 to i64
  %8024 = sub nsw i64 %8023, %1964
  %8025 = add nsw i64 %7760, %8024
  %8026 = getelementptr inbounds float, ptr %223, i64 %8025
  %8027 = load <4 x float>, ptr %8026, align 4, !tbaa !70
  %8028 = fmul <4 x float> %8027, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8029 = fadd <4 x float> %8022, %8028
  %8030 = fmul <4 x float> %8029, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8031 = add nsw i64 %8018, %7761
  %8032 = getelementptr inbounds float, ptr %223, i64 %8031
  %8033 = load <4 x float>, ptr %8032, align 4, !tbaa !70
  %8034 = fmul <4 x float> %8033, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8035 = add nsw i64 %7762, %8024
  %8036 = getelementptr inbounds float, ptr %223, i64 %8035
  %8037 = load <4 x float>, ptr %8036, align 4, !tbaa !70
  %8038 = fmul <4 x float> %8037, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8039 = fadd <4 x float> %8034, %8038
  %8040 = fmul <4 x float> %8039, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8041 = fadd <4 x float> %8030, %8040
  %8042 = fadd <4 x float> %8015, %8041
  %tmp318 = add i32 %3303, %7785
  %8043 = insertelement <4 x i32> undef, i32 %tmp318, i64 0
  %8044 = shufflevector <4 x i32> %8043, <4 x i32> undef, <4 x i32> zeroinitializer
  %8045 = add nsw <4 x i32> %8044, <i32 0, i32 1, i32 2, i32 3>
  %8046 = add nsw <4 x i32> %t2796, %8045
  %8047 = sext <4 x i32> %8046 to <4 x i64>
  %8048 = extractelement <4 x i64> %8047, i64 0
  %8049 = getelementptr inbounds float, ptr %f4.host, i64 %8048
  %8050 = load float, ptr %8049, align 4, !tbaa !44
  %8051 = insertelement <4 x float> undef, float %8050, i64 0
  %8052 = extractelement <4 x i64> %8047, i64 1
  %8053 = getelementptr inbounds float, ptr %f4.host, i64 %8052
  %8054 = load float, ptr %8053, align 4, !tbaa !44
  %8055 = insertelement <4 x float> %8051, float %8054, i64 1
  %8056 = extractelement <4 x i64> %8047, i64 2
  %8057 = getelementptr inbounds float, ptr %f4.host, i64 %8056
  %8058 = load float, ptr %8057, align 4, !tbaa !44
  %8059 = insertelement <4 x float> %8055, float %8058, i64 2
  %8060 = extractelement <4 x i64> %8047, i64 3
  %8061 = getelementptr inbounds float, ptr %f4.host, i64 %8060
  %8062 = load float, ptr %8061, align 4, !tbaa !44
  %8063 = insertelement <4 x float> %8059, float %8062, i64 3
  %8064 = fmul <4 x float> %8063, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8065 = trunc i64 %7775 to i32
  %8066 = add i32 %3143, %8065
  %8067 = add i32 %3303, %8066
  %tmp326 = add i32 %8067, %7758
  %8068 = insertelement <4 x i32> undef, i32 %tmp326, i64 0
  %8069 = shufflevector <4 x i32> %8068, <4 x i32> undef, <4 x i32> zeroinitializer
  %8070 = add <4 x i32> %8069, <i32 -1, i32 0, i32 1, i32 2>
  %8071 = add <4 x i32> %8070, %t2796
  %8072 = sext <4 x i32> %8071 to <4 x i64>
  %8073 = extractelement <4 x i64> %8072, i64 0
  %8074 = getelementptr inbounds float, ptr %f4.host, i64 %8073
  %8075 = load float, ptr %8074, align 4, !tbaa !44
  %8076 = insertelement <4 x float> undef, float %8075, i64 0
  %8077 = extractelement <4 x i64> %8072, i64 1
  %8078 = getelementptr inbounds float, ptr %f4.host, i64 %8077
  %8079 = load float, ptr %8078, align 4, !tbaa !44
  %8080 = insertelement <4 x float> %8076, float %8079, i64 1
  %8081 = extractelement <4 x i64> %8072, i64 2
  %8082 = getelementptr inbounds float, ptr %f4.host, i64 %8081
  %8083 = load float, ptr %8082, align 4, !tbaa !44
  %8084 = insertelement <4 x float> %8080, float %8083, i64 2
  %8085 = extractelement <4 x i64> %8072, i64 3
  %8086 = getelementptr inbounds float, ptr %f4.host, i64 %8085
  %8087 = load float, ptr %8086, align 4, !tbaa !44
  %8088 = insertelement <4 x float> %8084, float %8087, i64 3
  %8089 = fmul <4 x float> %8088, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8090 = fadd <4 x float> %8064, %8089
  %8091 = fmul <4 x float> %8090, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp322 = add i32 %3303, %7836
  %8092 = insertelement <4 x i32> undef, i32 %tmp322, i64 0
  %8093 = shufflevector <4 x i32> %8092, <4 x i32> undef, <4 x i32> zeroinitializer
  %8094 = add nsw <4 x i32> %8093, <i32 0, i32 1, i32 2, i32 3>
  %8095 = add nsw <4 x i32> %t2796, %8094
  %8096 = sext <4 x i32> %8095 to <4 x i64>
  %8097 = extractelement <4 x i64> %8096, i64 0
  %8098 = getelementptr inbounds float, ptr %f4.host, i64 %8097
  %8099 = load float, ptr %8098, align 4, !tbaa !44
  %8100 = insertelement <4 x float> undef, float %8099, i64 0
  %8101 = extractelement <4 x i64> %8096, i64 1
  %8102 = getelementptr inbounds float, ptr %f4.host, i64 %8101
  %8103 = load float, ptr %8102, align 4, !tbaa !44
  %8104 = insertelement <4 x float> %8100, float %8103, i64 1
  %8105 = extractelement <4 x i64> %8096, i64 2
  %8106 = getelementptr inbounds float, ptr %f4.host, i64 %8105
  %8107 = load float, ptr %8106, align 4, !tbaa !44
  %8108 = insertelement <4 x float> %8104, float %8107, i64 2
  %8109 = extractelement <4 x i64> %8096, i64 3
  %8110 = getelementptr inbounds float, ptr %f4.host, i64 %8109
  %8111 = load float, ptr %8110, align 4, !tbaa !44
  %8112 = insertelement <4 x float> %8108, float %8111, i64 3
  %8113 = fmul <4 x float> %8112, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp328 = add i32 %8067, %7756
  %8114 = insertelement <4 x i32> undef, i32 %tmp328, i64 0
  %8115 = shufflevector <4 x i32> %8114, <4 x i32> undef, <4 x i32> zeroinitializer
  %8116 = add <4 x i32> %8115, <i32 -1, i32 0, i32 1, i32 2>
  %8117 = add <4 x i32> %8116, %t2796
  %8118 = sext <4 x i32> %8117 to <4 x i64>
  %8119 = extractelement <4 x i64> %8118, i64 0
  %8120 = getelementptr inbounds float, ptr %f4.host, i64 %8119
  %8121 = load float, ptr %8120, align 4, !tbaa !44
  %8122 = insertelement <4 x float> undef, float %8121, i64 0
  %8123 = extractelement <4 x i64> %8118, i64 1
  %8124 = getelementptr inbounds float, ptr %f4.host, i64 %8123
  %8125 = load float, ptr %8124, align 4, !tbaa !44
  %8126 = insertelement <4 x float> %8122, float %8125, i64 1
  %8127 = extractelement <4 x i64> %8118, i64 2
  %8128 = getelementptr inbounds float, ptr %f4.host, i64 %8127
  %8129 = load float, ptr %8128, align 4, !tbaa !44
  %8130 = insertelement <4 x float> %8126, float %8129, i64 2
  %8131 = extractelement <4 x i64> %8118, i64 3
  %8132 = getelementptr inbounds float, ptr %f4.host, i64 %8131
  %8133 = load float, ptr %8132, align 4, !tbaa !44
  %8134 = insertelement <4 x float> %8130, float %8133, i64 3
  %8135 = fmul <4 x float> %8134, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8136 = fadd <4 x float> %8113, %8135
  %8137 = fmul <4 x float> %8136, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8138 = fadd <4 x float> %8091, %8137
  %8139 = sext <4 x i32> %t2787 to <4 x i64>
  %8140 = extractelement <4 x i64> %8139, i64 0
  %8141 = getelementptr inbounds float, ptr %f0.host, i64 %8140
  %8142 = load float, ptr %8141, align 4, !tbaa !6
  %8143 = insertelement <4 x float> undef, float %8142, i64 0
  %8144 = extractelement <4 x i64> %8139, i64 1
  %8145 = getelementptr inbounds float, ptr %f0.host, i64 %8144
  %8146 = load float, ptr %8145, align 4, !tbaa !6
  %8147 = insertelement <4 x float> %8143, float %8146, i64 1
  %8148 = extractelement <4 x i64> %8139, i64 2
  %8149 = getelementptr inbounds float, ptr %f0.host, i64 %8148
  %8150 = load float, ptr %8149, align 4, !tbaa !6
  %8151 = insertelement <4 x float> %8147, float %8150, i64 2
  %8152 = extractelement <4 x i64> %8139, i64 3
  %8153 = getelementptr inbounds float, ptr %f0.host, i64 %8152
  %8154 = load float, ptr %8153, align 4, !tbaa !6
  %8155 = insertelement <4 x float> %8151, float %8154, i64 3
  %8156 = fsub <4 x float> %t2754, %t2784
  %8157 = fmul <4 x float> %3305, %8156
  %8158 = fadd <4 x float> %t2784, %8157
  %8159 = fadd <4 x float> %8158, %8155
  %8160 = fsub <4 x float> %8159, %8138
  %8161 = fsub <4 x float> %t2756, %t2782
  %8162 = fmul <4 x float> %8161, %8160
  %8163 = add nsw <4 x i32> %t2791, %8045
  %8164 = sext <4 x i32> %8163 to <4 x i64>
  %8165 = extractelement <4 x i64> %8164, i64 0
  %8166 = getelementptr inbounds float, ptr %f4.host, i64 %8165
  %8167 = load float, ptr %8166, align 4, !tbaa !44
  %8168 = insertelement <4 x float> undef, float %8167, i64 0
  %8169 = extractelement <4 x i64> %8164, i64 1
  %8170 = getelementptr inbounds float, ptr %f4.host, i64 %8169
  %8171 = load float, ptr %8170, align 4, !tbaa !44
  %8172 = insertelement <4 x float> %8168, float %8171, i64 1
  %8173 = extractelement <4 x i64> %8164, i64 2
  %8174 = getelementptr inbounds float, ptr %f4.host, i64 %8173
  %8175 = load float, ptr %8174, align 4, !tbaa !44
  %8176 = insertelement <4 x float> %8172, float %8175, i64 2
  %8177 = extractelement <4 x i64> %8164, i64 3
  %8178 = getelementptr inbounds float, ptr %f4.host, i64 %8177
  %8179 = load float, ptr %8178, align 4, !tbaa !44
  %8180 = insertelement <4 x float> %8176, float %8179, i64 3
  %8181 = fmul <4 x float> %8180, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8182 = add <4 x i32> %8070, %t2791
  %8183 = sext <4 x i32> %8182 to <4 x i64>
  %8184 = extractelement <4 x i64> %8183, i64 0
  %8185 = getelementptr inbounds float, ptr %f4.host, i64 %8184
  %8186 = load float, ptr %8185, align 4, !tbaa !44
  %8187 = insertelement <4 x float> undef, float %8186, i64 0
  %8188 = extractelement <4 x i64> %8183, i64 1
  %8189 = getelementptr inbounds float, ptr %f4.host, i64 %8188
  %8190 = load float, ptr %8189, align 4, !tbaa !44
  %8191 = insertelement <4 x float> %8187, float %8190, i64 1
  %8192 = extractelement <4 x i64> %8183, i64 2
  %8193 = getelementptr inbounds float, ptr %f4.host, i64 %8192
  %8194 = load float, ptr %8193, align 4, !tbaa !44
  %8195 = insertelement <4 x float> %8191, float %8194, i64 2
  %8196 = extractelement <4 x i64> %8183, i64 3
  %8197 = getelementptr inbounds float, ptr %f4.host, i64 %8196
  %8198 = load float, ptr %8197, align 4, !tbaa !44
  %8199 = insertelement <4 x float> %8195, float %8198, i64 3
  %8200 = fmul <4 x float> %8199, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8201 = fadd <4 x float> %8181, %8200
  %8202 = fmul <4 x float> %8201, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8203 = add nsw <4 x i32> %t2791, %8094
  %8204 = sext <4 x i32> %8203 to <4 x i64>
  %8205 = extractelement <4 x i64> %8204, i64 0
  %8206 = getelementptr inbounds float, ptr %f4.host, i64 %8205
  %8207 = load float, ptr %8206, align 4, !tbaa !44
  %8208 = insertelement <4 x float> undef, float %8207, i64 0
  %8209 = extractelement <4 x i64> %8204, i64 1
  %8210 = getelementptr inbounds float, ptr %f4.host, i64 %8209
  %8211 = load float, ptr %8210, align 4, !tbaa !44
  %8212 = insertelement <4 x float> %8208, float %8211, i64 1
  %8213 = extractelement <4 x i64> %8204, i64 2
  %8214 = getelementptr inbounds float, ptr %f4.host, i64 %8213
  %8215 = load float, ptr %8214, align 4, !tbaa !44
  %8216 = insertelement <4 x float> %8212, float %8215, i64 2
  %8217 = extractelement <4 x i64> %8204, i64 3
  %8218 = getelementptr inbounds float, ptr %f4.host, i64 %8217
  %8219 = load float, ptr %8218, align 4, !tbaa !44
  %8220 = insertelement <4 x float> %8216, float %8219, i64 3
  %8221 = fmul <4 x float> %8220, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8222 = add <4 x i32> %8116, %t2791
  %8223 = sext <4 x i32> %8222 to <4 x i64>
  %8224 = extractelement <4 x i64> %8223, i64 0
  %8225 = getelementptr inbounds float, ptr %f4.host, i64 %8224
  %8226 = load float, ptr %8225, align 4, !tbaa !44
  %8227 = insertelement <4 x float> undef, float %8226, i64 0
  %8228 = extractelement <4 x i64> %8223, i64 1
  %8229 = getelementptr inbounds float, ptr %f4.host, i64 %8228
  %8230 = load float, ptr %8229, align 4, !tbaa !44
  %8231 = insertelement <4 x float> %8227, float %8230, i64 1
  %8232 = extractelement <4 x i64> %8223, i64 2
  %8233 = getelementptr inbounds float, ptr %f4.host, i64 %8232
  %8234 = load float, ptr %8233, align 4, !tbaa !44
  %8235 = insertelement <4 x float> %8231, float %8234, i64 2
  %8236 = extractelement <4 x i64> %8223, i64 3
  %8237 = getelementptr inbounds float, ptr %f4.host, i64 %8236
  %8238 = load float, ptr %8237, align 4, !tbaa !44
  %8239 = insertelement <4 x float> %8235, float %8238, i64 3
  %8240 = fmul <4 x float> %8239, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8241 = fadd <4 x float> %8221, %8240
  %8242 = fmul <4 x float> %8241, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8243 = fadd <4 x float> %8202, %8242
  %8244 = add nsw <4 x i32> %t2787, <i32 256, i32 256, i32 256, i32 256>
  %8245 = sext <4 x i32> %8244 to <4 x i64>
  %8246 = extractelement <4 x i64> %8245, i64 0
  %8247 = getelementptr inbounds float, ptr %f0.host, i64 %8246
  %8248 = load float, ptr %8247, align 4, !tbaa !6
  %8249 = insertelement <4 x float> undef, float %8248, i64 0
  %8250 = extractelement <4 x i64> %8245, i64 1
  %8251 = getelementptr inbounds float, ptr %f0.host, i64 %8250
  %8252 = load float, ptr %8251, align 4, !tbaa !6
  %8253 = insertelement <4 x float> %8249, float %8252, i64 1
  %8254 = extractelement <4 x i64> %8245, i64 2
  %8255 = getelementptr inbounds float, ptr %f0.host, i64 %8254
  %8256 = load float, ptr %8255, align 4, !tbaa !6
  %8257 = insertelement <4 x float> %8253, float %8256, i64 2
  %8258 = extractelement <4 x i64> %8245, i64 3
  %8259 = getelementptr inbounds float, ptr %f0.host, i64 %8258
  %8260 = load float, ptr %8259, align 4, !tbaa !6
  %8261 = insertelement <4 x float> %8257, float %8260, i64 3
  %8262 = fsub <4 x float> %t2754, %t2783
  %8263 = fmul <4 x float> %3305, %8262
  %8264 = fadd <4 x float> %t2783, %8263
  %8265 = fadd <4 x float> %8264, %8261
  %8266 = fsub <4 x float> %8265, %8243
  %8267 = fsub <4 x float> %t2782, %t2756
  %8268 = fadd <4 x float> %8267, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8269 = fmul <4 x float> %8268, %8266
  %8270 = fadd <4 x float> %8162, %8269
  %tmp316 = add i32 %3303, %8016
  %8271 = sext i32 %tmp316 to i64
  %8272 = sub nsw i64 %8271, %1964
  %8273 = add nsw i64 %8272, %7759
  %8274 = getelementptr inbounds float, ptr %223, i64 %8273
  %8275 = load <4 x float>, ptr %8274, align 4, !tbaa !70
  %8276 = fmul <4 x float> %8275, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp324 = add i32 %3307, %8016
  %8277 = sext i32 %tmp324 to i64
  %8278 = sub nsw i64 %8277, %1964
  %8279 = add nsw i64 %7760, %8278
  %8280 = getelementptr inbounds float, ptr %223, i64 %8279
  %8281 = load <4 x float>, ptr %8280, align 4, !tbaa !70
  %8282 = fmul <4 x float> %8281, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8283 = fadd <4 x float> %8276, %8282
  %8284 = fmul <4 x float> %8283, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8285 = add nsw i64 %8272, %7761
  %8286 = getelementptr inbounds float, ptr %223, i64 %8285
  %8287 = load <4 x float>, ptr %8286, align 4, !tbaa !70
  %8288 = fmul <4 x float> %8287, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8289 = add nsw i64 %7762, %8278
  %8290 = getelementptr inbounds float, ptr %223, i64 %8289
  %8291 = load <4 x float>, ptr %8290, align 4, !tbaa !70
  %8292 = fmul <4 x float> %8291, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8293 = fadd <4 x float> %8288, %8292
  %8294 = fmul <4 x float> %8293, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8295 = fadd <4 x float> %8284, %8294
  %8296 = fadd <4 x float> %8270, %8295
  %8297 = shufflevector <4 x float> %8042, <4 x float> %8296, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %8298 = shl i64 %lsr.iv311, 3
  %uglygep = getelementptr i8, ptr %scevgep309, i64 %8298
  store <8 x float> %8297, ptr %uglygep, align 4, !tbaa !72
  %lsr.iv.next308 = add i32 %lsr.iv307, -1
  %lsr.iv.next312 = add nuw nsw i64 %lsr.iv311, 4
  %lsr.iv.next332 = add i32 %lsr.iv331, 8
  %.not116 = icmp eq i32 %lsr.iv.next308, 0
  br i1 %.not116, label %"end for f125.s0.v3.v378", label %"for f125.s0.v3.v377"

"end for f125.s0.v3.v378":                        ; preds = %"for f125.s0.v3.v377", %"produce f12576"
  br i1 %3308, label %"for f125.s0.v3.v380.preheader", label %"consume f12583", !prof !5

"for f125.s0.v3.v380.preheader":                  ; preds = %"end for f125.s0.v3.v378"
  %8299 = shl nuw nsw i32 %6665, 1
  %8300 = ashr i32 %6664, 1
  %t2799 = add nsw i32 %8299, %8300
  %8301 = sub nsw i64 %3413, %10
  %8302 = mul nsw i64 %8301, %3358
  %8303 = add nsw i64 %8302, %3359
  %8304 = add nsw i64 %8303, -8
  %8305 = getelementptr inbounds float, ptr %f2.host, i64 %8304
  %8306 = load <4 x float>, ptr %8305, align 4, !tbaa !42
  %8307 = add nsw i64 %8303, -4
  %8308 = getelementptr inbounds float, ptr %f2.host, i64 %8307
  %8309 = load <4 x float>, ptr %8308, align 4, !tbaa !42
  %t2803 = shufflevector <4 x float> %8306, <4 x float> %8309, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2804 = shufflevector <4 x float> %8306, <4 x float> %8309, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2805 = fmul <4 x float> %233, %t2803
  %t2806 = fmul <4 x float> %233, %t2804
  %a989 = fptosi <4 x float> %t2806 to <4 x i32>
  %a996 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a989)
  %8310 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a996, <4 x i32> zeroinitializer)
  %t2808 = sitofp <4 x i32> %8310 to <4 x float>
  %t2809 = fmul <4 x float> %3296, %t2808
  %8311 = add nuw nsw <4 x i32> %8310, <i32 1, i32 1, i32 1, i32 1>
  %8312 = sitofp <4 x i32> %8311 to <4 x float>
  %t2810 = fmul <4 x float> %3296, %8312
  %8313 = add i32 %t2799, %3297
  %t2812 = mul nsw i32 %8313, %208
  %8314 = sub nsw i32 %8300, %159
  %t2814 = mul nsw i32 %8314, %208
  %8315 = fmul <4 x float> %t2806, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a994 = fptosi <4 x float> %8315 to <4 x i32>
  %a993 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a994)
  %8316 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a993, <4 x i32> zeroinitializer)
  %8317 = shl <4 x i32> %8310, <i32 8, i32 8, i32 8, i32 8>
  %.neg252 = sub <4 x i32> %.neg245, %8317
  %t2815 = add <4 x i32> %.neg252, %8316
  %8318 = add i32 %t2799, %3138
  %8319 = mul nsw i32 %8318, %f4.stride.1
  %t2820 = sub nsw <4 x i32> %8310, %242
  %t2821 = mul nsw <4 x i32> %t2820, %1960
  %8320 = sub nsw i32 %8300, %f4.v4.min_realized
  %8321 = mul nsw i32 %8320, %f4.stride.1
  %8322 = add nsw <4 x i32> %t2820, <i32 1, i32 1, i32 1, i32 1>
  %t2827 = mul nsw <4 x i32> %8322, %1960
  %a997 = fptosi <4 x float> %t2805 to <4 x i32>
  %a1004 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a997)
  %8323 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1004, <4 x i32> zeroinitializer)
  %t2830 = sitofp <4 x i32> %8323 to <4 x float>
  %t2831 = fmul <4 x float> %3296, %t2830
  %8324 = add nuw nsw <4 x i32> %8323, <i32 1, i32 1, i32 1, i32 1>
  %8325 = sitofp <4 x i32> %8324 to <4 x float>
  %t2832 = fmul <4 x float> %3296, %8325
  %8326 = fmul <4 x float> %t2805, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1002 = fptosi <4 x float> %8326 to <4 x i32>
  %a1001 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a1002)
  %8327 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1001, <4 x i32> zeroinitializer)
  %8328 = shl <4 x i32> %8323, <i32 8, i32 8, i32 8, i32 8>
  %.neg254 = sub <4 x i32> %.neg245, %8328
  %t2835 = add <4 x i32> %.neg254, %8327
  %t2837 = add nsw i32 %8319, %3319
  %t2838 = sub nsw <4 x i32> %8323, %242
  %t2839 = mul nsw <4 x i32> %t2838, %1960
  %t2841 = add nsw i32 %8319, %3320
  %t2842 = add nsw i32 %8321, %3319
  %t2843 = add nsw i32 %8321, %3320
  %8329 = add nsw <4 x i32> %t2838, <i32 1, i32 1, i32 1, i32 1>
  %t2844 = mul nsw <4 x i32> %8329, %1960
  %8330 = add i32 %t2826, %8321
  %8331 = insertelement <4 x i32> undef, i32 %8330, i64 0
  %8332 = shufflevector <4 x i32> %8331, <4 x i32> undef, <4 x i32> zeroinitializer
  %8333 = add nsw <4 x i32> %8332, <i32 0, i32 1, i32 2, i32 3>
  %8334 = add nsw <4 x i32> %t2827, %8333
  %8335 = sext <4 x i32> %8334 to <4 x i64>
  %8336 = extractelement <4 x i64> %8335, i64 0
  %8337 = getelementptr inbounds float, ptr %f4.host, i64 %8336
  %8338 = load float, ptr %8337, align 4, !tbaa !44
  %8339 = insertelement <4 x float> undef, float %8338, i64 0
  %8340 = extractelement <4 x i64> %8335, i64 1
  %8341 = getelementptr inbounds float, ptr %f4.host, i64 %8340
  %8342 = load float, ptr %8341, align 4, !tbaa !44
  %8343 = insertelement <4 x float> %8339, float %8342, i64 1
  %8344 = extractelement <4 x i64> %8335, i64 2
  %8345 = getelementptr inbounds float, ptr %f4.host, i64 %8344
  %8346 = load float, ptr %8345, align 4, !tbaa !44
  %8347 = insertelement <4 x float> %8343, float %8346, i64 2
  %8348 = extractelement <4 x i64> %8335, i64 3
  %8349 = getelementptr inbounds float, ptr %f4.host, i64 %8348
  %8350 = load float, ptr %8349, align 4, !tbaa !44
  %8351 = insertelement <4 x float> %8347, float %8350, i64 3
  %8352 = fmul <4 x float> %8351, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8353 = add i32 %t2825, %8321
  %8354 = insertelement <4 x i32> undef, i32 %8353, i64 0
  %8355 = shufflevector <4 x i32> %8354, <4 x i32> undef, <4 x i32> zeroinitializer
  %8356 = add <4 x i32> %8355, <i32 -1, i32 0, i32 1, i32 2>
  %8357 = add <4 x i32> %8356, %t2827
  %8358 = sext <4 x i32> %8357 to <4 x i64>
  %8359 = extractelement <4 x i64> %8358, i64 0
  %8360 = getelementptr inbounds float, ptr %f4.host, i64 %8359
  %8361 = load float, ptr %8360, align 4, !tbaa !44
  %8362 = insertelement <4 x float> undef, float %8361, i64 0
  %8363 = extractelement <4 x i64> %8358, i64 1
  %8364 = getelementptr inbounds float, ptr %f4.host, i64 %8363
  %8365 = load float, ptr %8364, align 4, !tbaa !44
  %8366 = insertelement <4 x float> %8362, float %8365, i64 1
  %8367 = extractelement <4 x i64> %8358, i64 2
  %8368 = getelementptr inbounds float, ptr %f4.host, i64 %8367
  %8369 = load float, ptr %8368, align 4, !tbaa !44
  %8370 = insertelement <4 x float> %8366, float %8369, i64 2
  %8371 = extractelement <4 x i64> %8358, i64 3
  %8372 = getelementptr inbounds float, ptr %f4.host, i64 %8371
  %8373 = load float, ptr %8372, align 4, !tbaa !44
  %8374 = insertelement <4 x float> %8370, float %8373, i64 3
  %8375 = fmul <4 x float> %8374, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8376 = fadd <4 x float> %8352, %8375
  %8377 = fmul <4 x float> %8376, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8378 = add i32 %t2826, %8319
  %8379 = insertelement <4 x i32> undef, i32 %8378, i64 0
  %8380 = shufflevector <4 x i32> %8379, <4 x i32> undef, <4 x i32> zeroinitializer
  %8381 = add nsw <4 x i32> %8380, <i32 0, i32 1, i32 2, i32 3>
  %8382 = add nsw <4 x i32> %t2827, %8381
  %8383 = sext <4 x i32> %8382 to <4 x i64>
  %8384 = extractelement <4 x i64> %8383, i64 0
  %8385 = getelementptr inbounds float, ptr %f4.host, i64 %8384
  %8386 = load float, ptr %8385, align 4, !tbaa !44
  %8387 = insertelement <4 x float> undef, float %8386, i64 0
  %8388 = extractelement <4 x i64> %8383, i64 1
  %8389 = getelementptr inbounds float, ptr %f4.host, i64 %8388
  %8390 = load float, ptr %8389, align 4, !tbaa !44
  %8391 = insertelement <4 x float> %8387, float %8390, i64 1
  %8392 = extractelement <4 x i64> %8383, i64 2
  %8393 = getelementptr inbounds float, ptr %f4.host, i64 %8392
  %8394 = load float, ptr %8393, align 4, !tbaa !44
  %8395 = insertelement <4 x float> %8391, float %8394, i64 2
  %8396 = extractelement <4 x i64> %8383, i64 3
  %8397 = getelementptr inbounds float, ptr %f4.host, i64 %8396
  %8398 = load float, ptr %8397, align 4, !tbaa !44
  %8399 = insertelement <4 x float> %8395, float %8398, i64 3
  %8400 = fmul <4 x float> %8399, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8401 = add i32 %t2825, %8319
  %8402 = insertelement <4 x i32> undef, i32 %8401, i64 0
  %8403 = shufflevector <4 x i32> %8402, <4 x i32> undef, <4 x i32> zeroinitializer
  %8404 = add <4 x i32> %8403, <i32 -1, i32 0, i32 1, i32 2>
  %8405 = add <4 x i32> %8404, %t2827
  %8406 = sext <4 x i32> %8405 to <4 x i64>
  %8407 = extractelement <4 x i64> %8406, i64 0
  %8408 = getelementptr inbounds float, ptr %f4.host, i64 %8407
  %8409 = load float, ptr %8408, align 4, !tbaa !44
  %8410 = insertelement <4 x float> undef, float %8409, i64 0
  %8411 = extractelement <4 x i64> %8406, i64 1
  %8412 = getelementptr inbounds float, ptr %f4.host, i64 %8411
  %8413 = load float, ptr %8412, align 4, !tbaa !44
  %8414 = insertelement <4 x float> %8410, float %8413, i64 1
  %8415 = extractelement <4 x i64> %8406, i64 2
  %8416 = getelementptr inbounds float, ptr %f4.host, i64 %8415
  %8417 = load float, ptr %8416, align 4, !tbaa !44
  %8418 = insertelement <4 x float> %8414, float %8417, i64 2
  %8419 = extractelement <4 x i64> %8406, i64 3
  %8420 = getelementptr inbounds float, ptr %f4.host, i64 %8419
  %8421 = load float, ptr %8420, align 4, !tbaa !44
  %8422 = insertelement <4 x float> %8418, float %8421, i64 3
  %8423 = fmul <4 x float> %8422, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8424 = fadd <4 x float> %8400, %8423
  %8425 = fmul <4 x float> %8424, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8426 = fadd <4 x float> %8377, %8425
  %8427 = sext <4 x i32> %t2815 to <4 x i64>
  %8428 = extractelement <4 x i64> %8427, i64 0
  %8429 = getelementptr inbounds float, ptr %f0.host, i64 %8428
  %8430 = load float, ptr %8429, align 4, !tbaa !6
  %8431 = insertelement <4 x float> undef, float %8430, i64 0
  %8432 = extractelement <4 x i64> %8427, i64 1
  %8433 = getelementptr inbounds float, ptr %f0.host, i64 %8432
  %8434 = load float, ptr %8433, align 4, !tbaa !6
  %8435 = insertelement <4 x float> %8431, float %8434, i64 1
  %8436 = extractelement <4 x i64> %8427, i64 2
  %8437 = getelementptr inbounds float, ptr %f0.host, i64 %8436
  %8438 = load float, ptr %8437, align 4, !tbaa !6
  %8439 = insertelement <4 x float> %8435, float %8438, i64 2
  %8440 = extractelement <4 x i64> %8427, i64 3
  %8441 = getelementptr inbounds float, ptr %f0.host, i64 %8440
  %8442 = load float, ptr %8441, align 4, !tbaa !6
  %8443 = insertelement <4 x float> %8439, float %8442, i64 3
  %8444 = fsub <4 x float> %t2804, %t2810
  %8445 = fmul <4 x float> %3305, %8444
  %8446 = fadd <4 x float> %t2810, %8445
  %8447 = fadd <4 x float> %8446, %8443
  %8448 = fsub <4 x float> %8447, %8426
  %8449 = fsub <4 x float> %t2806, %t2808
  %8450 = fmul <4 x float> %8449, %8448
  %8451 = add nsw <4 x i32> %t2821, %8333
  %8452 = sext <4 x i32> %8451 to <4 x i64>
  %8453 = extractelement <4 x i64> %8452, i64 0
  %8454 = getelementptr inbounds float, ptr %f4.host, i64 %8453
  %8455 = load float, ptr %8454, align 4, !tbaa !44
  %8456 = insertelement <4 x float> undef, float %8455, i64 0
  %8457 = extractelement <4 x i64> %8452, i64 1
  %8458 = getelementptr inbounds float, ptr %f4.host, i64 %8457
  %8459 = load float, ptr %8458, align 4, !tbaa !44
  %8460 = insertelement <4 x float> %8456, float %8459, i64 1
  %8461 = extractelement <4 x i64> %8452, i64 2
  %8462 = getelementptr inbounds float, ptr %f4.host, i64 %8461
  %8463 = load float, ptr %8462, align 4, !tbaa !44
  %8464 = insertelement <4 x float> %8460, float %8463, i64 2
  %8465 = extractelement <4 x i64> %8452, i64 3
  %8466 = getelementptr inbounds float, ptr %f4.host, i64 %8465
  %8467 = load float, ptr %8466, align 4, !tbaa !44
  %8468 = insertelement <4 x float> %8464, float %8467, i64 3
  %8469 = fmul <4 x float> %8468, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8470 = add <4 x i32> %8356, %t2821
  %8471 = sext <4 x i32> %8470 to <4 x i64>
  %8472 = extractelement <4 x i64> %8471, i64 0
  %8473 = getelementptr inbounds float, ptr %f4.host, i64 %8472
  %8474 = load float, ptr %8473, align 4, !tbaa !44
  %8475 = insertelement <4 x float> undef, float %8474, i64 0
  %8476 = extractelement <4 x i64> %8471, i64 1
  %8477 = getelementptr inbounds float, ptr %f4.host, i64 %8476
  %8478 = load float, ptr %8477, align 4, !tbaa !44
  %8479 = insertelement <4 x float> %8475, float %8478, i64 1
  %8480 = extractelement <4 x i64> %8471, i64 2
  %8481 = getelementptr inbounds float, ptr %f4.host, i64 %8480
  %8482 = load float, ptr %8481, align 4, !tbaa !44
  %8483 = insertelement <4 x float> %8479, float %8482, i64 2
  %8484 = extractelement <4 x i64> %8471, i64 3
  %8485 = getelementptr inbounds float, ptr %f4.host, i64 %8484
  %8486 = load float, ptr %8485, align 4, !tbaa !44
  %8487 = insertelement <4 x float> %8483, float %8486, i64 3
  %8488 = fmul <4 x float> %8487, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8489 = fadd <4 x float> %8469, %8488
  %8490 = fmul <4 x float> %8489, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8491 = add nsw <4 x i32> %t2821, %8381
  %8492 = sext <4 x i32> %8491 to <4 x i64>
  %8493 = extractelement <4 x i64> %8492, i64 0
  %8494 = getelementptr inbounds float, ptr %f4.host, i64 %8493
  %8495 = load float, ptr %8494, align 4, !tbaa !44
  %8496 = insertelement <4 x float> undef, float %8495, i64 0
  %8497 = extractelement <4 x i64> %8492, i64 1
  %8498 = getelementptr inbounds float, ptr %f4.host, i64 %8497
  %8499 = load float, ptr %8498, align 4, !tbaa !44
  %8500 = insertelement <4 x float> %8496, float %8499, i64 1
  %8501 = extractelement <4 x i64> %8492, i64 2
  %8502 = getelementptr inbounds float, ptr %f4.host, i64 %8501
  %8503 = load float, ptr %8502, align 4, !tbaa !44
  %8504 = insertelement <4 x float> %8500, float %8503, i64 2
  %8505 = extractelement <4 x i64> %8492, i64 3
  %8506 = getelementptr inbounds float, ptr %f4.host, i64 %8505
  %8507 = load float, ptr %8506, align 4, !tbaa !44
  %8508 = insertelement <4 x float> %8504, float %8507, i64 3
  %8509 = fmul <4 x float> %8508, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8510 = add <4 x i32> %8404, %t2821
  %8511 = sext <4 x i32> %8510 to <4 x i64>
  %8512 = extractelement <4 x i64> %8511, i64 0
  %8513 = getelementptr inbounds float, ptr %f4.host, i64 %8512
  %8514 = load float, ptr %8513, align 4, !tbaa !44
  %8515 = insertelement <4 x float> undef, float %8514, i64 0
  %8516 = extractelement <4 x i64> %8511, i64 1
  %8517 = getelementptr inbounds float, ptr %f4.host, i64 %8516
  %8518 = load float, ptr %8517, align 4, !tbaa !44
  %8519 = insertelement <4 x float> %8515, float %8518, i64 1
  %8520 = extractelement <4 x i64> %8511, i64 2
  %8521 = getelementptr inbounds float, ptr %f4.host, i64 %8520
  %8522 = load float, ptr %8521, align 4, !tbaa !44
  %8523 = insertelement <4 x float> %8519, float %8522, i64 2
  %8524 = extractelement <4 x i64> %8511, i64 3
  %8525 = getelementptr inbounds float, ptr %f4.host, i64 %8524
  %8526 = load float, ptr %8525, align 4, !tbaa !44
  %8527 = insertelement <4 x float> %8523, float %8526, i64 3
  %8528 = fmul <4 x float> %8527, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8529 = fadd <4 x float> %8509, %8528
  %8530 = fmul <4 x float> %8529, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8531 = fadd <4 x float> %8490, %8530
  %8532 = add nsw <4 x i32> %t2815, <i32 256, i32 256, i32 256, i32 256>
  %8533 = sext <4 x i32> %8532 to <4 x i64>
  %8534 = extractelement <4 x i64> %8533, i64 0
  %8535 = getelementptr inbounds float, ptr %f0.host, i64 %8534
  %8536 = load float, ptr %8535, align 4, !tbaa !6
  %8537 = insertelement <4 x float> undef, float %8536, i64 0
  %8538 = extractelement <4 x i64> %8533, i64 1
  %8539 = getelementptr inbounds float, ptr %f0.host, i64 %8538
  %8540 = load float, ptr %8539, align 4, !tbaa !6
  %8541 = insertelement <4 x float> %8537, float %8540, i64 1
  %8542 = extractelement <4 x i64> %8533, i64 2
  %8543 = getelementptr inbounds float, ptr %f0.host, i64 %8542
  %8544 = load float, ptr %8543, align 4, !tbaa !6
  %8545 = insertelement <4 x float> %8541, float %8544, i64 2
  %8546 = extractelement <4 x i64> %8533, i64 3
  %8547 = getelementptr inbounds float, ptr %f0.host, i64 %8546
  %8548 = load float, ptr %8547, align 4, !tbaa !6
  %8549 = insertelement <4 x float> %8545, float %8548, i64 3
  %8550 = fsub <4 x float> %t2804, %t2809
  %8551 = fmul <4 x float> %3305, %8550
  %8552 = fadd <4 x float> %t2809, %8551
  %8553 = fadd <4 x float> %8552, %8549
  %8554 = fsub <4 x float> %8553, %8531
  %8555 = fsub <4 x float> %t2808, %t2806
  %8556 = fadd <4 x float> %8555, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8557 = fmul <4 x float> %8556, %8554
  %8558 = fadd <4 x float> %8450, %8557
  %8559 = sext i32 %t2814 to i64
  %8560 = add nsw i64 %3323, %8559
  %8561 = getelementptr inbounds float, ptr %223, i64 %8560
  %8562 = load <4 x float>, ptr %8561, align 4, !tbaa !70
  %8563 = fmul <4 x float> %8562, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8564 = add nsw i64 %3326, %8559
  %8565 = getelementptr inbounds float, ptr %223, i64 %8564
  %8566 = load <4 x float>, ptr %8565, align 4, !tbaa !70
  %8567 = fmul <4 x float> %8566, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8568 = fadd <4 x float> %8563, %8567
  %8569 = fmul <4 x float> %8568, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8570 = sext i32 %t2812 to i64
  %8571 = add nsw i64 %3323, %8570
  %8572 = getelementptr inbounds float, ptr %223, i64 %8571
  %8573 = load <4 x float>, ptr %8572, align 4, !tbaa !70
  %8574 = fmul <4 x float> %8573, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8575 = add nsw i64 %3326, %8570
  %8576 = getelementptr inbounds float, ptr %223, i64 %8575
  %8577 = load <4 x float>, ptr %8576, align 4, !tbaa !70
  %8578 = fmul <4 x float> %8577, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8579 = fadd <4 x float> %8574, %8578
  %8580 = fmul <4 x float> %8579, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8581 = fadd <4 x float> %8569, %8580
  %8582 = fadd <4 x float> %8558, %8581
  %8583 = insertelement <4 x i32> undef, i32 %t2843, i64 0
  %8584 = shufflevector <4 x i32> %8583, <4 x i32> undef, <4 x i32> zeroinitializer
  %8585 = add nsw <4 x i32> %8584, <i32 0, i32 1, i32 2, i32 3>
  %8586 = add nsw <4 x i32> %t2844, %8585
  %8587 = sext <4 x i32> %8586 to <4 x i64>
  %8588 = extractelement <4 x i64> %8587, i64 0
  %8589 = getelementptr inbounds float, ptr %f4.host, i64 %8588
  %8590 = load float, ptr %8589, align 4, !tbaa !44
  %8591 = insertelement <4 x float> undef, float %8590, i64 0
  %8592 = extractelement <4 x i64> %8587, i64 1
  %8593 = getelementptr inbounds float, ptr %f4.host, i64 %8592
  %8594 = load float, ptr %8593, align 4, !tbaa !44
  %8595 = insertelement <4 x float> %8591, float %8594, i64 1
  %8596 = extractelement <4 x i64> %8587, i64 2
  %8597 = getelementptr inbounds float, ptr %f4.host, i64 %8596
  %8598 = load float, ptr %8597, align 4, !tbaa !44
  %8599 = insertelement <4 x float> %8595, float %8598, i64 2
  %8600 = extractelement <4 x i64> %8587, i64 3
  %8601 = getelementptr inbounds float, ptr %f4.host, i64 %8600
  %8602 = load float, ptr %8601, align 4, !tbaa !44
  %8603 = insertelement <4 x float> %8599, float %8602, i64 3
  %8604 = fmul <4 x float> %8603, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8605 = insertelement <4 x i32> undef, i32 %t2842, i64 0
  %8606 = shufflevector <4 x i32> %8605, <4 x i32> undef, <4 x i32> zeroinitializer
  %8607 = add <4 x i32> %8606, <i32 -1, i32 0, i32 1, i32 2>
  %8608 = add <4 x i32> %8607, %t2844
  %8609 = sext <4 x i32> %8608 to <4 x i64>
  %8610 = extractelement <4 x i64> %8609, i64 0
  %8611 = getelementptr inbounds float, ptr %f4.host, i64 %8610
  %8612 = load float, ptr %8611, align 4, !tbaa !44
  %8613 = insertelement <4 x float> undef, float %8612, i64 0
  %8614 = extractelement <4 x i64> %8609, i64 1
  %8615 = getelementptr inbounds float, ptr %f4.host, i64 %8614
  %8616 = load float, ptr %8615, align 4, !tbaa !44
  %8617 = insertelement <4 x float> %8613, float %8616, i64 1
  %8618 = extractelement <4 x i64> %8609, i64 2
  %8619 = getelementptr inbounds float, ptr %f4.host, i64 %8618
  %8620 = load float, ptr %8619, align 4, !tbaa !44
  %8621 = insertelement <4 x float> %8617, float %8620, i64 2
  %8622 = extractelement <4 x i64> %8609, i64 3
  %8623 = getelementptr inbounds float, ptr %f4.host, i64 %8622
  %8624 = load float, ptr %8623, align 4, !tbaa !44
  %8625 = insertelement <4 x float> %8621, float %8624, i64 3
  %8626 = fmul <4 x float> %8625, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8627 = fadd <4 x float> %8604, %8626
  %8628 = fmul <4 x float> %8627, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8629 = insertelement <4 x i32> undef, i32 %t2841, i64 0
  %8630 = shufflevector <4 x i32> %8629, <4 x i32> undef, <4 x i32> zeroinitializer
  %8631 = add nsw <4 x i32> %8630, <i32 0, i32 1, i32 2, i32 3>
  %8632 = add nsw <4 x i32> %t2844, %8631
  %8633 = sext <4 x i32> %8632 to <4 x i64>
  %8634 = extractelement <4 x i64> %8633, i64 0
  %8635 = getelementptr inbounds float, ptr %f4.host, i64 %8634
  %8636 = load float, ptr %8635, align 4, !tbaa !44
  %8637 = insertelement <4 x float> undef, float %8636, i64 0
  %8638 = extractelement <4 x i64> %8633, i64 1
  %8639 = getelementptr inbounds float, ptr %f4.host, i64 %8638
  %8640 = load float, ptr %8639, align 4, !tbaa !44
  %8641 = insertelement <4 x float> %8637, float %8640, i64 1
  %8642 = extractelement <4 x i64> %8633, i64 2
  %8643 = getelementptr inbounds float, ptr %f4.host, i64 %8642
  %8644 = load float, ptr %8643, align 4, !tbaa !44
  %8645 = insertelement <4 x float> %8641, float %8644, i64 2
  %8646 = extractelement <4 x i64> %8633, i64 3
  %8647 = getelementptr inbounds float, ptr %f4.host, i64 %8646
  %8648 = load float, ptr %8647, align 4, !tbaa !44
  %8649 = insertelement <4 x float> %8645, float %8648, i64 3
  %8650 = fmul <4 x float> %8649, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8651 = insertelement <4 x i32> undef, i32 %t2837, i64 0
  %8652 = shufflevector <4 x i32> %8651, <4 x i32> undef, <4 x i32> zeroinitializer
  %8653 = add <4 x i32> %8652, <i32 -1, i32 0, i32 1, i32 2>
  %8654 = add <4 x i32> %8653, %t2844
  %8655 = sext <4 x i32> %8654 to <4 x i64>
  %8656 = extractelement <4 x i64> %8655, i64 0
  %8657 = getelementptr inbounds float, ptr %f4.host, i64 %8656
  %8658 = load float, ptr %8657, align 4, !tbaa !44
  %8659 = insertelement <4 x float> undef, float %8658, i64 0
  %8660 = extractelement <4 x i64> %8655, i64 1
  %8661 = getelementptr inbounds float, ptr %f4.host, i64 %8660
  %8662 = load float, ptr %8661, align 4, !tbaa !44
  %8663 = insertelement <4 x float> %8659, float %8662, i64 1
  %8664 = extractelement <4 x i64> %8655, i64 2
  %8665 = getelementptr inbounds float, ptr %f4.host, i64 %8664
  %8666 = load float, ptr %8665, align 4, !tbaa !44
  %8667 = insertelement <4 x float> %8663, float %8666, i64 2
  %8668 = extractelement <4 x i64> %8655, i64 3
  %8669 = getelementptr inbounds float, ptr %f4.host, i64 %8668
  %8670 = load float, ptr %8669, align 4, !tbaa !44
  %8671 = insertelement <4 x float> %8667, float %8670, i64 3
  %8672 = fmul <4 x float> %8671, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8673 = fadd <4 x float> %8650, %8672
  %8674 = fmul <4 x float> %8673, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8675 = fadd <4 x float> %8628, %8674
  %8676 = sext <4 x i32> %t2835 to <4 x i64>
  %8677 = extractelement <4 x i64> %8676, i64 0
  %8678 = getelementptr inbounds float, ptr %f0.host, i64 %8677
  %8679 = load float, ptr %8678, align 4, !tbaa !6
  %8680 = insertelement <4 x float> undef, float %8679, i64 0
  %8681 = extractelement <4 x i64> %8676, i64 1
  %8682 = getelementptr inbounds float, ptr %f0.host, i64 %8681
  %8683 = load float, ptr %8682, align 4, !tbaa !6
  %8684 = insertelement <4 x float> %8680, float %8683, i64 1
  %8685 = extractelement <4 x i64> %8676, i64 2
  %8686 = getelementptr inbounds float, ptr %f0.host, i64 %8685
  %8687 = load float, ptr %8686, align 4, !tbaa !6
  %8688 = insertelement <4 x float> %8684, float %8687, i64 2
  %8689 = extractelement <4 x i64> %8676, i64 3
  %8690 = getelementptr inbounds float, ptr %f0.host, i64 %8689
  %8691 = load float, ptr %8690, align 4, !tbaa !6
  %8692 = insertelement <4 x float> %8688, float %8691, i64 3
  %8693 = fsub <4 x float> %t2803, %t2832
  %8694 = fmul <4 x float> %3305, %8693
  %8695 = fadd <4 x float> %t2832, %8694
  %8696 = fadd <4 x float> %8695, %8692
  %8697 = fsub <4 x float> %8696, %8675
  %8698 = fsub <4 x float> %t2805, %t2830
  %8699 = fmul <4 x float> %8698, %8697
  %8700 = add nsw <4 x i32> %t2839, %8585
  %8701 = sext <4 x i32> %8700 to <4 x i64>
  %8702 = extractelement <4 x i64> %8701, i64 0
  %8703 = getelementptr inbounds float, ptr %f4.host, i64 %8702
  %8704 = load float, ptr %8703, align 4, !tbaa !44
  %8705 = insertelement <4 x float> undef, float %8704, i64 0
  %8706 = extractelement <4 x i64> %8701, i64 1
  %8707 = getelementptr inbounds float, ptr %f4.host, i64 %8706
  %8708 = load float, ptr %8707, align 4, !tbaa !44
  %8709 = insertelement <4 x float> %8705, float %8708, i64 1
  %8710 = extractelement <4 x i64> %8701, i64 2
  %8711 = getelementptr inbounds float, ptr %f4.host, i64 %8710
  %8712 = load float, ptr %8711, align 4, !tbaa !44
  %8713 = insertelement <4 x float> %8709, float %8712, i64 2
  %8714 = extractelement <4 x i64> %8701, i64 3
  %8715 = getelementptr inbounds float, ptr %f4.host, i64 %8714
  %8716 = load float, ptr %8715, align 4, !tbaa !44
  %8717 = insertelement <4 x float> %8713, float %8716, i64 3
  %8718 = fmul <4 x float> %8717, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8719 = add <4 x i32> %8607, %t2839
  %8720 = sext <4 x i32> %8719 to <4 x i64>
  %8721 = extractelement <4 x i64> %8720, i64 0
  %8722 = getelementptr inbounds float, ptr %f4.host, i64 %8721
  %8723 = load float, ptr %8722, align 4, !tbaa !44
  %8724 = insertelement <4 x float> undef, float %8723, i64 0
  %8725 = extractelement <4 x i64> %8720, i64 1
  %8726 = getelementptr inbounds float, ptr %f4.host, i64 %8725
  %8727 = load float, ptr %8726, align 4, !tbaa !44
  %8728 = insertelement <4 x float> %8724, float %8727, i64 1
  %8729 = extractelement <4 x i64> %8720, i64 2
  %8730 = getelementptr inbounds float, ptr %f4.host, i64 %8729
  %8731 = load float, ptr %8730, align 4, !tbaa !44
  %8732 = insertelement <4 x float> %8728, float %8731, i64 2
  %8733 = extractelement <4 x i64> %8720, i64 3
  %8734 = getelementptr inbounds float, ptr %f4.host, i64 %8733
  %8735 = load float, ptr %8734, align 4, !tbaa !44
  %8736 = insertelement <4 x float> %8732, float %8735, i64 3
  %8737 = fmul <4 x float> %8736, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8738 = fadd <4 x float> %8718, %8737
  %8739 = fmul <4 x float> %8738, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8740 = add nsw <4 x i32> %t2839, %8631
  %8741 = sext <4 x i32> %8740 to <4 x i64>
  %8742 = extractelement <4 x i64> %8741, i64 0
  %8743 = getelementptr inbounds float, ptr %f4.host, i64 %8742
  %8744 = load float, ptr %8743, align 4, !tbaa !44
  %8745 = insertelement <4 x float> undef, float %8744, i64 0
  %8746 = extractelement <4 x i64> %8741, i64 1
  %8747 = getelementptr inbounds float, ptr %f4.host, i64 %8746
  %8748 = load float, ptr %8747, align 4, !tbaa !44
  %8749 = insertelement <4 x float> %8745, float %8748, i64 1
  %8750 = extractelement <4 x i64> %8741, i64 2
  %8751 = getelementptr inbounds float, ptr %f4.host, i64 %8750
  %8752 = load float, ptr %8751, align 4, !tbaa !44
  %8753 = insertelement <4 x float> %8749, float %8752, i64 2
  %8754 = extractelement <4 x i64> %8741, i64 3
  %8755 = getelementptr inbounds float, ptr %f4.host, i64 %8754
  %8756 = load float, ptr %8755, align 4, !tbaa !44
  %8757 = insertelement <4 x float> %8753, float %8756, i64 3
  %8758 = fmul <4 x float> %8757, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8759 = add <4 x i32> %8653, %t2839
  %8760 = sext <4 x i32> %8759 to <4 x i64>
  %8761 = extractelement <4 x i64> %8760, i64 0
  %8762 = getelementptr inbounds float, ptr %f4.host, i64 %8761
  %8763 = load float, ptr %8762, align 4, !tbaa !44
  %8764 = insertelement <4 x float> undef, float %8763, i64 0
  %8765 = extractelement <4 x i64> %8760, i64 1
  %8766 = getelementptr inbounds float, ptr %f4.host, i64 %8765
  %8767 = load float, ptr %8766, align 4, !tbaa !44
  %8768 = insertelement <4 x float> %8764, float %8767, i64 1
  %8769 = extractelement <4 x i64> %8760, i64 2
  %8770 = getelementptr inbounds float, ptr %f4.host, i64 %8769
  %8771 = load float, ptr %8770, align 4, !tbaa !44
  %8772 = insertelement <4 x float> %8768, float %8771, i64 2
  %8773 = extractelement <4 x i64> %8760, i64 3
  %8774 = getelementptr inbounds float, ptr %f4.host, i64 %8773
  %8775 = load float, ptr %8774, align 4, !tbaa !44
  %8776 = insertelement <4 x float> %8772, float %8775, i64 3
  %8777 = fmul <4 x float> %8776, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8778 = fadd <4 x float> %8758, %8777
  %8779 = fmul <4 x float> %8778, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8780 = fadd <4 x float> %8739, %8779
  %8781 = add nsw <4 x i32> %t2835, <i32 256, i32 256, i32 256, i32 256>
  %8782 = sext <4 x i32> %8781 to <4 x i64>
  %8783 = extractelement <4 x i64> %8782, i64 0
  %8784 = getelementptr inbounds float, ptr %f0.host, i64 %8783
  %8785 = load float, ptr %8784, align 4, !tbaa !6
  %8786 = insertelement <4 x float> undef, float %8785, i64 0
  %8787 = extractelement <4 x i64> %8782, i64 1
  %8788 = getelementptr inbounds float, ptr %f0.host, i64 %8787
  %8789 = load float, ptr %8788, align 4, !tbaa !6
  %8790 = insertelement <4 x float> %8786, float %8789, i64 1
  %8791 = extractelement <4 x i64> %8782, i64 2
  %8792 = getelementptr inbounds float, ptr %f0.host, i64 %8791
  %8793 = load float, ptr %8792, align 4, !tbaa !6
  %8794 = insertelement <4 x float> %8790, float %8793, i64 2
  %8795 = extractelement <4 x i64> %8782, i64 3
  %8796 = getelementptr inbounds float, ptr %f0.host, i64 %8795
  %8797 = load float, ptr %8796, align 4, !tbaa !6
  %8798 = insertelement <4 x float> %8794, float %8797, i64 3
  %8799 = fsub <4 x float> %t2803, %t2831
  %8800 = fmul <4 x float> %3305, %8799
  %8801 = fadd <4 x float> %t2831, %8800
  %8802 = fadd <4 x float> %8801, %8798
  %8803 = fsub <4 x float> %8802, %8780
  %8804 = fsub <4 x float> %t2830, %t2805
  %8805 = fadd <4 x float> %8804, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8806 = fmul <4 x float> %8805, %8803
  %8807 = fadd <4 x float> %8699, %8806
  %8808 = add nsw i64 %3328, %8559
  %8809 = getelementptr inbounds float, ptr %223, i64 %8808
  %8810 = load <4 x float>, ptr %8809, align 4, !tbaa !70
  %8811 = fmul <4 x float> %8810, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8812 = add nsw i64 %3331, %8559
  %8813 = getelementptr inbounds float, ptr %223, i64 %8812
  %8814 = load <4 x float>, ptr %8813, align 4, !tbaa !70
  %8815 = fmul <4 x float> %8814, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8816 = fadd <4 x float> %8811, %8815
  %8817 = fmul <4 x float> %8816, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8818 = add nsw i64 %3328, %8570
  %8819 = getelementptr inbounds float, ptr %223, i64 %8818
  %8820 = load <4 x float>, ptr %8819, align 4, !tbaa !70
  %8821 = fmul <4 x float> %8820, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8822 = add nsw i64 %3331, %8570
  %8823 = getelementptr inbounds float, ptr %223, i64 %8822
  %8824 = load <4 x float>, ptr %8823, align 4, !tbaa !70
  %8825 = fmul <4 x float> %8824, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8826 = fadd <4 x float> %8821, %8825
  %8827 = fmul <4 x float> %8826, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8828 = fadd <4 x float> %8817, %8827
  %8829 = fadd <4 x float> %8807, %8828
  %8830 = shufflevector <4 x float> %8582, <4 x float> %8829, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %8831 = getelementptr inbounds float, ptr %7748, i64 %3334
  store <8 x float> %8830, ptr %8831, align 4, !tbaa !72
  br label %"consume f12583"

"consume f12583":                                 ; preds = %"for f125.s0.v3.v380.preheader", %"end for f125.s0.v3.v378"
  br i1 %3345, label %"for local_laplacian.s0.v3.v384.preheader", label %"end for local_laplacian.s0.v3.v385", !prof !5

"for local_laplacian.s0.v3.v384.preheader":       ; preds = %"consume f12583"
  %8832 = add nsw i64 %3106, %indvars.iv323
  %8833 = mul nsw i64 %8832, %3105
  %8834 = sub i64 %8833, %8
  %8835 = trunc i64 %3413 to i32
  %8836 = mul i32 %input.stride.1, %8835
  br label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v384":                 ; preds = %"for local_laplacian.s0.v3.v384.preheader", %"end for local_laplacian.s0.v589"
  %local_laplacian.s0.v3.v386 = phi i32 [ %8912, %"end for local_laplacian.s0.v589" ], [ 0, %"for local_laplacian.s0.v3.v384.preheader" ]
  br i1 %3346, label %"for local_laplacian.s0.v588.preheader", label %"end for local_laplacian.s0.v589", !prof !5

"for local_laplacian.s0.v588.preheader":          ; preds = %"for local_laplacian.s0.v3.v384"
  %8837 = shl nsw i32 %local_laplacian.s0.v3.v386, 3
  %a1013 = add nsw i32 %8837, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base87 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1013)
  %8838 = sext i32 %local_laplacian.s0.v3.v277.base87 to i64
  %8839 = add i64 %lsr.iv349, %8838
  %scevgep351 = getelementptr i16, ptr %local_laplacian.host, i64 %8839
  %8840 = add i64 %8834, %8838
  %8841 = getelementptr inbounds float, ptr %f2.host, i64 %8840
  %8842 = load <8 x float>, ptr %8841, align 4, !tbaa !42
  %8843 = fadd <8 x float> %8842, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8844 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base87, i64 0
  %8845 = shufflevector <8 x i32> %8844, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1019 = add nsw <8 x i32> %8845, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1018 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1019)
  %8846 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1018, <8 x i32> %b1020.pre-phi)
  %8847 = sub nsw i64 %8838, %.pre-phi336
  %8848 = getelementptr inbounds float, ptr %7748, i64 %8847
  %8849 = load <8 x float>, ptr %8848, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v3.v385":             ; preds = %"end for local_laplacian.s0.v589", %"consume f12583"
  br i1 %.not176, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390.preheader", !prof !4

"for local_laplacian.s0.v3.v390.preheader":       ; preds = %"end for local_laplacian.s0.v3.v385"
  %8850 = sub nsw i64 %3413, %10
  %8851 = mul nsw i64 %8850, %3105
  %8852 = sub i64 %8851, %8
  %8853 = mul nsw i64 %3413, %54
  %8854 = sub i64 %8853, %3163
  %8855 = add i64 %lsr.iv367, %3353
  %8856 = add i64 %lsr.iv374, %3354
  %8857 = add nsw i64 %3106, %indvars.iv323
  %8858 = mul nsw i64 %8857, %3105
  %8859 = sub i64 %8858, %8
  %8860 = add i64 %lsr.iv367, %3356
  br label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v588":                    ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v588.preheader"
  %lsr.iv352 = phi ptr [ %scevgep351, %"for local_laplacian.s0.v588.preheader" ], [ %scevgep354, %"for local_laplacian.s0.v588" ]
  %lsr.iv347 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v588.preheader" ], [ %lsr.iv.next348, %"for local_laplacian.s0.v588" ]
  %a1017 = phi i32 [ %b1028, %"for local_laplacian.s0.v588.preheader" ], [ %8911, %"for local_laplacian.s0.v588" ]
  %a1016 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1017)
  %8861 = tail call i32 @llvm.smax.i32(i32 %a1016, i32 %b1146)
  %8862 = mul nsw i32 %8861, %input.stride.2
  %.scalar327 = add i32 %8862, %8836
  %.scalar328 = sub i32 %.scalar327, %.pre-phi351
  %8863 = insertelement <8 x i32> undef, i32 %.scalar328, i64 0
  %8864 = shufflevector <8 x i32> %8863, <8 x i32> poison, <8 x i32> zeroinitializer
  %8865 = add <8 x i32> %8864, %8846
  %8866 = shufflevector <8 x i32> %8865, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8867 = sext <4 x i32> %8866 to <4 x i64>
  %8868 = extractelement <4 x i64> %8867, i64 0
  %8869 = getelementptr inbounds i16, ptr %input.host, i64 %8868
  %8870 = load i16, ptr %8869, align 2, !tbaa !40
  %8871 = insertelement <8 x i16> undef, i16 %8870, i64 0
  %8872 = extractelement <4 x i64> %8867, i64 1
  %8873 = getelementptr inbounds i16, ptr %input.host, i64 %8872
  %8874 = load i16, ptr %8873, align 2, !tbaa !40
  %8875 = insertelement <8 x i16> %8871, i16 %8874, i64 1
  %8876 = extractelement <4 x i64> %8867, i64 2
  %8877 = getelementptr inbounds i16, ptr %input.host, i64 %8876
  %8878 = load i16, ptr %8877, align 2, !tbaa !40
  %8879 = insertelement <8 x i16> %8875, i16 %8878, i64 2
  %8880 = extractelement <4 x i64> %8867, i64 3
  %8881 = getelementptr inbounds i16, ptr %input.host, i64 %8880
  %8882 = load i16, ptr %8881, align 2, !tbaa !40
  %8883 = insertelement <8 x i16> %8879, i16 %8882, i64 3
  %8884 = shufflevector <8 x i32> %8865, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8885 = sext <4 x i32> %8884 to <4 x i64>
  %8886 = extractelement <4 x i64> %8885, i64 0
  %8887 = getelementptr inbounds i16, ptr %input.host, i64 %8886
  %8888 = load i16, ptr %8887, align 2, !tbaa !40
  %8889 = insertelement <8 x i16> %8883, i16 %8888, i64 4
  %8890 = extractelement <4 x i64> %8885, i64 1
  %8891 = getelementptr inbounds i16, ptr %input.host, i64 %8890
  %8892 = load i16, ptr %8891, align 2, !tbaa !40
  %8893 = insertelement <8 x i16> %8889, i16 %8892, i64 5
  %8894 = extractelement <4 x i64> %8885, i64 2
  %8895 = getelementptr inbounds i16, ptr %input.host, i64 %8894
  %8896 = load i16, ptr %8895, align 2, !tbaa !40
  %8897 = insertelement <8 x i16> %8893, i16 %8896, i64 6
  %8898 = extractelement <4 x i64> %8885, i64 3
  %8899 = getelementptr inbounds i16, ptr %input.host, i64 %8898
  %8900 = load i16, ptr %8899, align 2, !tbaa !40
  %8901 = insertelement <8 x i16> %8897, i16 %8900, i64 7
  %8902 = uitofp <8 x i16> %8901 to <8 x float>
  %8903 = fmul <8 x float> %8902, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8904 = fadd <8 x float> %8903, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8905 = fmul <8 x float> %8849, %8904
  %a1015 = fdiv <8 x float> %8905, %8843
  %8906 = fcmp olt <8 x float> %a1015, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1014 = select <8 x i1> %8906, <8 x float> %a1015, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8907 = fcmp ogt <8 x float> %a1014, zeroinitializer
  %8908 = fmul <8 x float> %a1014, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8909 = select <8 x i1> %8907, <8 x float> %8908, <8 x float> zeroinitializer
  %8910 = fptoui <8 x float> %8909 to <8 x i16>
  store <8 x i16> %8910, ptr %lsr.iv352, align 2, !tbaa !74
  %8911 = add nsw i32 %a1017, 1
  %lsr.iv.next348 = add i32 %lsr.iv347, -1
  %scevgep354 = getelementptr i1, ptr %lsr.iv352, i64 %3104
  %.not114 = icmp eq i32 %lsr.iv.next348, 0
  br i1 %.not114, label %"end for local_laplacian.s0.v589", label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v589":                ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v3.v384"
  %8912 = add nuw nsw i32 %local_laplacian.s0.v3.v386, 1
  %.not113 = icmp eq i32 %8912, %local_laplacian.s0.v3.v3.prologue
  br i1 %.not113, label %"end for local_laplacian.s0.v3.v385", label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v390":                 ; preds = %"for local_laplacian.s0.v3.v390.preheader", %"end for local_laplacian.s0.v5100"
  %local_laplacian.s0.v3.v392 = phi i32 [ %8987, %"end for local_laplacian.s0.v5100" ], [ %local_laplacian.s0.v3.v3.prologue, %"for local_laplacian.s0.v3.v390.preheader" ]
  %8913 = shl nsw i32 %local_laplacian.s0.v3.v392, 3
  %a1020 = add nsw i32 %8913, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base93 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1020)
  br i1 %3347, label %"for local_laplacian.s0.v594.preheader", label %"end for local_laplacian.s0.v595", !prof !5

"for local_laplacian.s0.v594.preheader":          ; preds = %"for local_laplacian.s0.v3.v390"
  %8914 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8915 = add i64 %lsr.iv349, %8914
  %scevgep360 = getelementptr i16, ptr %local_laplacian.host, i64 %8915
  %8916 = add i64 %8852, %8914
  %8917 = getelementptr inbounds float, ptr %f2.host, i64 %8916
  %8918 = load <8 x float>, ptr %8917, align 4, !tbaa !42
  %8919 = fadd <8 x float> %8918, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8920 = add i64 %8854, %8914
  %8921 = sub nsw i64 %8914, %.pre-phi336
  %8922 = getelementptr inbounds float, ptr %7748, i64 %8921
  %8923 = load <8 x float>, ptr %8922, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v3.v391":             ; preds = %"end for local_laplacian.s0.v5100", %"end for local_laplacian.s0.v3.v385"
  br i1 %3357, label %"for local_laplacian.s0.v3.v3102.preheader", label %if.then.i268, !prof !5

"for local_laplacian.s0.v3.v3102.preheader":      ; preds = %"end for local_laplacian.s0.v3.v391"
  %8924 = add nsw i64 %3106, %indvars.iv323
  %8925 = mul nsw i64 %8924, %3105
  %8926 = sub i64 %8925, %8
  %8927 = trunc i64 %3413 to i32
  %8928 = mul i32 %input.stride.1, %8927
  br label %"for local_laplacian.s0.v3.v3102"

"for local_laplacian.s0.v594":                    ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v594.preheader"
  %lsr.iv361 = phi ptr [ %scevgep360, %"for local_laplacian.s0.v594.preheader" ], [ %scevgep363, %"for local_laplacian.s0.v594" ]
  %lsr.iv356 = phi i64 [ %70, %"for local_laplacian.s0.v594.preheader" ], [ %lsr.iv.next357, %"for local_laplacian.s0.v594" ]
  %a1029 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv356)
  %8929 = tail call i64 @llvm.smax.i64(i64 %a1029, i64 %b1037)
  %8930 = mul nsw i64 %8929, %56
  %8931 = add i64 %8920, %8930
  %8932 = getelementptr inbounds i16, ptr %input.host, i64 %8931
  %8933 = load <8 x i16>, ptr %8932, align 2, !tbaa !40
  %8934 = uitofp <8 x i16> %8933 to <8 x float>
  %8935 = fmul <8 x float> %8934, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8936 = fadd <8 x float> %8935, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8937 = fmul <8 x float> %8923, %8936
  %a1028 = fdiv <8 x float> %8937, %8919
  %8938 = fcmp olt <8 x float> %a1028, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1027 = select <8 x i1> %8938, <8 x float> %a1028, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8939 = fcmp ogt <8 x float> %a1027, zeroinitializer
  %8940 = fmul <8 x float> %a1027, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8941 = select <8 x i1> %8939, <8 x float> %8940, <8 x float> zeroinitializer
  %8942 = fptoui <8 x float> %8941 to <8 x i16>
  store <8 x i16> %8942, ptr %lsr.iv361, align 2, !tbaa !74
  %lsr.iv.next357 = add nsw i64 %lsr.iv356, 1
  %tmp358 = trunc i64 %lsr.iv.next357 to i32
  %scevgep363 = getelementptr i1, ptr %lsr.iv361, i64 %3104
  %.not112 = icmp eq i32 %local_laplacian.s0.v5.prologue, %tmp358
  br i1 %.not112, label %"end for local_laplacian.s0.v595", label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v595":                ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v3.v390"
  br i1 %3348, label %"for local_laplacian.s0.v596.preheader", label %"end for local_laplacian.s0.v597", !prof !5

"for local_laplacian.s0.v596.preheader":          ; preds = %"end for local_laplacian.s0.v595"
  %8943 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8944 = add i64 %8855, %8943
  %scevgep369 = getelementptr i16, ptr %local_laplacian.host, i64 %8944
  %8945 = add i64 %8856, %8943
  %scevgep376 = getelementptr i16, ptr %input.host, i64 %8945
  %8946 = add i64 %8859, %8943
  %8947 = getelementptr inbounds float, ptr %f2.host, i64 %8946
  %8948 = load <8 x float>, ptr %8947, align 4, !tbaa !42
  %8949 = fadd <8 x float> %8948, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8950 = sub nsw i64 %8943, %.pre-phi336
  %8951 = getelementptr inbounds float, ptr %7748, i64 %8950
  %8952 = load <8 x float>, ptr %8951, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v596"

"for local_laplacian.s0.v596":                    ; preds = %"for local_laplacian.s0.v596", %"for local_laplacian.s0.v596.preheader"
  %lsr.iv377 = phi ptr [ %scevgep376, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep379, %"for local_laplacian.s0.v596" ]
  %lsr.iv370 = phi ptr [ %scevgep369, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep372, %"for local_laplacian.s0.v596" ]
  %lsr.iv365 = phi i32 [ %3351, %"for local_laplacian.s0.v596.preheader" ], [ %lsr.iv.next366, %"for local_laplacian.s0.v596" ]
  %8953 = load <8 x i16>, ptr %lsr.iv377, align 2, !tbaa !40
  %8954 = uitofp <8 x i16> %8953 to <8 x float>
  %8955 = fmul <8 x float> %8954, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8956 = fadd <8 x float> %8955, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8957 = fmul <8 x float> %8952, %8956
  %a1032 = fdiv <8 x float> %8957, %8949
  %8958 = fcmp olt <8 x float> %a1032, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1031 = select <8 x i1> %8958, <8 x float> %a1032, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8959 = fcmp ogt <8 x float> %a1031, zeroinitializer
  %8960 = fmul <8 x float> %a1031, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8961 = select <8 x i1> %8959, <8 x float> %8960, <8 x float> zeroinitializer
  %8962 = fptoui <8 x float> %8961 to <8 x i16>
  store <8 x i16> %8962, ptr %lsr.iv370, align 2, !tbaa !74
  %lsr.iv.next366 = add i32 %lsr.iv365, -1
  %scevgep372 = getelementptr i1, ptr %lsr.iv370, i64 %3104
  %scevgep379 = getelementptr i1, ptr %lsr.iv377, i64 %3165
  %.not111 = icmp eq i32 %lsr.iv.next366, 0
  br i1 %.not111, label %"end for local_laplacian.s0.v597", label %"for local_laplacian.s0.v596"

"end for local_laplacian.s0.v597":                ; preds = %"for local_laplacian.s0.v596", %"end for local_laplacian.s0.v595"
  br i1 %3349, label %"for local_laplacian.s0.v599.preheader", label %"end for local_laplacian.s0.v5100", !prof !5

"for local_laplacian.s0.v599.preheader":          ; preds = %"end for local_laplacian.s0.v597"
  %8963 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8964 = add i64 %8860, %8963
  %scevgep385 = getelementptr i16, ptr %local_laplacian.host, i64 %8964
  %8965 = add i64 %8852, %8963
  %8966 = getelementptr inbounds float, ptr %f2.host, i64 %8965
  %8967 = load <8 x float>, ptr %8966, align 4, !tbaa !42
  %8968 = fadd <8 x float> %8967, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8969 = add i64 %8854, %8963
  %8970 = sub nsw i64 %8963, %.pre-phi336
  %8971 = getelementptr inbounds float, ptr %7748, i64 %8970
  %8972 = load <8 x float>, ptr %8971, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v599"

"for local_laplacian.s0.v599":                    ; preds = %"for local_laplacian.s0.v599", %"for local_laplacian.s0.v599.preheader"
  %lsr.iv386 = phi ptr [ %scevgep385, %"for local_laplacian.s0.v599.preheader" ], [ %scevgep388, %"for local_laplacian.s0.v599" ]
  %lsr.iv381 = phi i64 [ %3355, %"for local_laplacian.s0.v599.preheader" ], [ %lsr.iv.next382, %"for local_laplacian.s0.v599" ]
  %a1035 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv381)
  %8973 = tail call i64 @llvm.smax.i64(i64 %a1035, i64 %b1037)
  %8974 = mul nsw i64 %8973, %56
  %8975 = add i64 %8969, %8974
  %8976 = getelementptr inbounds i16, ptr %input.host, i64 %8975
  %8977 = load <8 x i16>, ptr %8976, align 2, !tbaa !40
  %8978 = uitofp <8 x i16> %8977 to <8 x float>
  %8979 = fmul <8 x float> %8978, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8980 = fadd <8 x float> %8979, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8981 = fmul <8 x float> %8972, %8980
  %a1034 = fdiv <8 x float> %8981, %8968
  %8982 = fcmp olt <8 x float> %a1034, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1033 = select <8 x i1> %8982, <8 x float> %a1034, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8983 = fcmp ogt <8 x float> %a1033, zeroinitializer
  %8984 = fmul <8 x float> %a1033, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8985 = select <8 x i1> %8983, <8 x float> %8984, <8 x float> zeroinitializer
  %8986 = fptoui <8 x float> %8985 to <8 x i16>
  store <8 x i16> %8986, ptr %lsr.iv386, align 2, !tbaa !74
  %lsr.iv.next382 = add nsw i64 %lsr.iv381, 1
  %tmp383 = trunc i64 %lsr.iv.next382 to i32
  %scevgep388 = getelementptr i1, ptr %lsr.iv386, i64 %3104
  %.not110 = icmp eq i32 %3166, %tmp383
  br i1 %.not110, label %"end for local_laplacian.s0.v5100", label %"for local_laplacian.s0.v599"

"end for local_laplacian.s0.v5100":               ; preds = %"for local_laplacian.s0.v599", %"end for local_laplacian.s0.v597"
  %8987 = add nsw i32 %local_laplacian.s0.v3.v392, 1
  %.not109 = icmp eq i32 %8987, %local_laplacian.s0.v3.v3.epilogue
  br i1 %.not109, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v3.v3102":                ; preds = %"for local_laplacian.s0.v3.v3102.preheader", %"end for local_laplacian.s0.v5107"
  %local_laplacian.s0.v3.v3104 = phi i32 [ %9052, %"end for local_laplacian.s0.v5107" ], [ %local_laplacian.s0.v3.v3.epilogue, %"for local_laplacian.s0.v3.v3102.preheader" ]
  br i1 %3346, label %"for local_laplacian.s0.v5106.preheader", label %"end for local_laplacian.s0.v5107", !prof !5

"for local_laplacian.s0.v5106.preheader":         ; preds = %"for local_laplacian.s0.v3.v3102"
  %8988 = shl nsw i32 %local_laplacian.s0.v3.v3104, 3
  %a1037 = add nsw i32 %8988, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base105 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1037)
  %8989 = sext i32 %local_laplacian.s0.v3.v277.base105 to i64
  %8990 = add i64 %lsr.iv349, %8989
  %scevgep392 = getelementptr i16, ptr %local_laplacian.host, i64 %8990
  %8991 = add i64 %8926, %8989
  %8992 = getelementptr inbounds float, ptr %f2.host, i64 %8991
  %8993 = load <8 x float>, ptr %8992, align 4, !tbaa !42
  %8994 = fadd <8 x float> %8993, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8995 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base105, i64 0
  %8996 = shufflevector <8 x i32> %8995, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1043 = add nsw <8 x i32> %8996, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1042 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1043)
  %8997 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1042, <8 x i32> %b1020.pre-phi)
  %8998 = sub nsw i64 %8989, %.pre-phi336
  %8999 = getelementptr inbounds float, ptr %7748, i64 %8998
  %9000 = load <8 x float>, ptr %8999, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5106"

if.then.i268:                                     ; preds = %"end for local_laplacian.s0.v5107", %"end for local_laplacian.s0.v3.v391"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %7748) #7
  %indvars.iv.next324 = add nuw nsw i64 %indvars.iv323, 1
  %lsr.iv.next320 = xor i1 %lsr.iv319, true
  %lsr.iv.next330 = add i32 %lsr.iv329, %3145
  %lsr.iv.next350 = add i64 %lsr.iv349, %74
  %lsr.iv.next368 = add i64 %lsr.iv367, %74
  %lsr.iv.next375 = add i64 %lsr.iv374, %54
  %.not106 = icmp eq i64 %indvars.iv.next324, 64
  br i1 %.not106, label %if.then.i265, label %"produce f12919"

"for local_laplacian.s0.v5106":                   ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v5106.preheader"
  %lsr.iv393 = phi ptr [ %scevgep392, %"for local_laplacian.s0.v5106.preheader" ], [ %scevgep395, %"for local_laplacian.s0.v5106" ]
  %lsr.iv390 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5106.preheader" ], [ %lsr.iv.next391, %"for local_laplacian.s0.v5106" ]
  %a1041 = phi i32 [ %b1028, %"for local_laplacian.s0.v5106.preheader" ], [ %9051, %"for local_laplacian.s0.v5106" ]
  %a1040 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1041)
  %9001 = tail call i32 @llvm.smax.i32(i32 %a1040, i32 %b1146)
  %9002 = mul nsw i32 %9001, %input.stride.2
  %.scalar329 = add i32 %9002, %8928
  %.scalar330 = sub i32 %.scalar329, %.pre-phi351
  %9003 = insertelement <8 x i32> undef, i32 %.scalar330, i64 0
  %9004 = shufflevector <8 x i32> %9003, <8 x i32> poison, <8 x i32> zeroinitializer
  %9005 = add <8 x i32> %9004, %8997
  %9006 = shufflevector <8 x i32> %9005, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9007 = sext <4 x i32> %9006 to <4 x i64>
  %9008 = extractelement <4 x i64> %9007, i64 0
  %9009 = getelementptr inbounds i16, ptr %input.host, i64 %9008
  %9010 = load i16, ptr %9009, align 2, !tbaa !40
  %9011 = insertelement <8 x i16> undef, i16 %9010, i64 0
  %9012 = extractelement <4 x i64> %9007, i64 1
  %9013 = getelementptr inbounds i16, ptr %input.host, i64 %9012
  %9014 = load i16, ptr %9013, align 2, !tbaa !40
  %9015 = insertelement <8 x i16> %9011, i16 %9014, i64 1
  %9016 = extractelement <4 x i64> %9007, i64 2
  %9017 = getelementptr inbounds i16, ptr %input.host, i64 %9016
  %9018 = load i16, ptr %9017, align 2, !tbaa !40
  %9019 = insertelement <8 x i16> %9015, i16 %9018, i64 2
  %9020 = extractelement <4 x i64> %9007, i64 3
  %9021 = getelementptr inbounds i16, ptr %input.host, i64 %9020
  %9022 = load i16, ptr %9021, align 2, !tbaa !40
  %9023 = insertelement <8 x i16> %9019, i16 %9022, i64 3
  %9024 = shufflevector <8 x i32> %9005, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9025 = sext <4 x i32> %9024 to <4 x i64>
  %9026 = extractelement <4 x i64> %9025, i64 0
  %9027 = getelementptr inbounds i16, ptr %input.host, i64 %9026
  %9028 = load i16, ptr %9027, align 2, !tbaa !40
  %9029 = insertelement <8 x i16> %9023, i16 %9028, i64 4
  %9030 = extractelement <4 x i64> %9025, i64 1
  %9031 = getelementptr inbounds i16, ptr %input.host, i64 %9030
  %9032 = load i16, ptr %9031, align 2, !tbaa !40
  %9033 = insertelement <8 x i16> %9029, i16 %9032, i64 5
  %9034 = extractelement <4 x i64> %9025, i64 2
  %9035 = getelementptr inbounds i16, ptr %input.host, i64 %9034
  %9036 = load i16, ptr %9035, align 2, !tbaa !40
  %9037 = insertelement <8 x i16> %9033, i16 %9036, i64 6
  %9038 = extractelement <4 x i64> %9025, i64 3
  %9039 = getelementptr inbounds i16, ptr %input.host, i64 %9038
  %9040 = load i16, ptr %9039, align 2, !tbaa !40
  %9041 = insertelement <8 x i16> %9037, i16 %9040, i64 7
  %9042 = uitofp <8 x i16> %9041 to <8 x float>
  %9043 = fmul <8 x float> %9042, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9044 = fadd <8 x float> %9043, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9045 = fmul <8 x float> %9000, %9044
  %a1039 = fdiv <8 x float> %9045, %8994
  %9046 = fcmp olt <8 x float> %a1039, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1038 = select <8 x i1> %9046, <8 x float> %a1039, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9047 = fcmp ogt <8 x float> %a1038, zeroinitializer
  %9048 = fmul <8 x float> %a1038, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9049 = select <8 x i1> %9047, <8 x float> %9048, <8 x float> zeroinitializer
  %9050 = fptoui <8 x float> %9049 to <8 x i16>
  store <8 x i16> %9050, ptr %lsr.iv393, align 2, !tbaa !74
  %9051 = add nsw i32 %a1041, 1
  %lsr.iv.next391 = add i32 %lsr.iv390, -1
  %scevgep395 = getelementptr i1, ptr %lsr.iv393, i64 %3104
  %.not108 = icmp eq i32 %lsr.iv.next391, 0
  br i1 %.not108, label %"end for local_laplacian.s0.v5107", label %"for local_laplacian.s0.v5106"

"end for local_laplacian.s0.v5107":               ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v3.v3102"
  %9052 = add nsw i32 %local_laplacian.s0.v3.v3104, 1
  %.not107 = icmp eq i32 %9052, %3101
  br i1 %.not107, label %if.then.i268, label %"for local_laplacian.s0.v3.v3102"

"assert failed112":                               ; preds = %false_bb
  %9053 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %121, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded113":                            ; preds = %false_bb
  %9054 = add nuw nsw i64 %121, 4
  %9055 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9054)
  %.not76 = icmp eq ptr %9055, null
  br i1 %.not76, label %"assert failed114", label %"assert succeeded115", !prof !4

"assert failed114":                               ; preds = %"assert succeeded113"
  %9056 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded115":                            ; preds = %"assert succeeded113"
  %a1055 = add nsw i32 %a1120, -6
  %b1057 = add nsw i32 %96, -23
  %9057 = tail call i32 @llvm.smin.i32(i32 %b1057, i32 %a1055)
  %9058 = ashr i32 %9057, 3
  %a1054 = add nsw i32 %9058, -1
  %b1056 = ashr i32 %97, 3
  %.not160 = icmp slt i32 %b1056, %9058
  %f128.v3.min_realized117 = select i1 %.not160, i32 %b1056, i32 %a1054
  %9059 = ashr i32 %a1055, 2
  %9060 = add nsw i32 %96, 5
  %9061 = ashr i32 %9060, 2
  %9062 = sub nsw i32 %9061, %9059
  %9063 = lshr i32 %9062, 3
  %9064 = and i32 %9062, -8
  %a1061 = add nsw i32 %9064, %9059
  %b1063 = ashr i32 %b1057, 2
  %9065 = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %a1061)
  %9066 = add nsw i32 %9065, 9
  %a1060 = ashr i32 %9066, 1
  %b1062 = add nsw i32 %105, 7
  %9067 = tail call i32 @llvm.smax.i32(i32 %a1060, i32 %b1062)
  %f128.v3.extent_realized.s118 = sub nsw i32 %9067, %f128.v3.min_realized117
  %t3094 = and i32 %114, 7
  %9068 = add nuw nsw i32 %t3094, 99
  %9069 = lshr i32 %9068, 3
  %9070 = zext i32 %9069 to i64
  %9071 = add nsw i32 %f128.v3.extent_realized.s118, 1
  %9072 = zext i32 %9071 to i64
  %9073 = shl nuw nsw i64 %9072, 2
  %9074 = mul nuw nsw i64 %9073, %9070
  %9075 = icmp ult i64 %9074, 2147483648
  br i1 %9075, label %"assert succeeded120", label %"assert failed119", !prof !5

"assert failed119":                               ; preds = %"assert succeeded115"
  %9076 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %9074, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded120":                            ; preds = %"assert succeeded115"
  %9077 = add nuw nsw i64 %9074, 4
  %9078 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9077)
  %.not77 = icmp eq ptr %9078, null
  br i1 %.not77, label %"assert failed121", label %"assert succeeded122", !prof !4

"assert failed121":                               ; preds = %"assert succeeded120"
  %9079 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded122":                            ; preds = %"assert succeeded120"
  %9080 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a1064 = add nsw i32 %9080, -1
  %9081 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b1066 = ashr i32 %9081, 1
  %.not161 = icmp slt i32 %b1066, %9080
  %9082 = select i1 %.not161, i32 %b1066, i32 %a1064
  %9083 = ashr i32 %9082, 1
  %a1063 = add nsw i32 %9083, -1
  %9084 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b1065 = ashr i32 %9084, 2
  %.not162 = icmp slt i32 %b1065, %9083
  %f127.v4.min_realized124 = select i1 %.not162, i32 %b1065, i32 %a1063
  %9085 = ashr i32 %a1120, 1
  %a1066 = add nsw i32 %9085, -1
  %9086 = add nsw i32 %96, -13
  %b1068 = ashr i32 %9086, 1
  %.not163 = icmp slt i32 %b1068, %9085
  %9087 = select i1 %.not163, i32 %b1068, i32 %a1066
  %9088 = ashr i32 %9087, 1
  %a1065 = add nsw i32 %9088, -1
  %b1067 = ashr i32 %9057, 2
  %.not164 = icmp slt i32 %b1067, %9088
  %f127.v3.min_realized125 = select i1 %.not164, i32 %b1067, i32 %a1065
  %9089 = add nsw i32 %96, 1
  %9090 = ashr i32 %9089, 1
  %9091 = sub nsw i32 %9090, %9085
  %9092 = add nsw i32 %9091, 1
  %9093 = and i32 %9092, -8
  %9094 = add nsw i32 %9093, %9085
  %a1072 = add nsw i32 %9094, -1
  %.not165 = icmp slt i32 %b1068, %9094
  %9095 = select i1 %.not165, i32 %b1068, i32 %a1072
  %9096 = add nsw i32 %9095, 9
  %a1071 = ashr i32 %9096, 1
  %b1073 = add nsw i32 %9065, 7
  %9097 = tail call i32 @llvm.smax.i32(i32 %a1071, i32 %b1073)
  %f127.v3.extent_realized.s126 = sub nsw i32 %9097, %f127.v3.min_realized125
  %9098 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %9099 = ashr i32 %9098, 2
  %t3095 = add nsw i32 %9099, 1
  %9100 = sub nsw i32 %t3095, %f127.v4.min_realized124
  %9101 = zext i32 %9100 to i64
  %9102 = add nsw i32 %f127.v3.extent_realized.s126, 1
  %9103 = zext i32 %9102 to i64
  %9104 = shl nuw nsw i64 %9103, 2
  %9105 = mul i64 %9104, %9101
  %9106 = icmp ult i64 %9105, 2147483648
  %9107 = and i64 %9104, 4294967292
  %9108 = mul nuw i64 %9107, %9101
  %9109 = lshr i64 %9108, 32
  %9110 = lshr i64 %9103, 30
  %9111 = mul nuw nsw i64 %9110, %9101
  %9112 = add nuw nsw i64 %9109, %9111
  %9113 = icmp ult i64 %9112, 4294967296
  %9114 = and i1 %9106, %9113
  br i1 %9114, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"assert succeeded122"
  %9115 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %9105, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded128":                            ; preds = %"assert succeeded122"
  %9116 = add nuw nsw i64 %9105, 4
  %9117 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9116)
  %.not268 = icmp eq ptr %9117, null
  br i1 %.not268, label %"assert failed129", label %"assert succeeded130", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %9118 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded130":                            ; preds = %"assert succeeded128"
  %b1078 = add nsw i32 %96, -8
  %9119 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1120)
  %9120 = ashr i32 %9119, 1
  %a1075 = add nsw i32 %9120, -1
  %.not166 = icmp slt i32 %9087, %9120
  %f126.v3.min_realized133 = select i1 %.not166, i32 %9087, i32 %a1075
  %9121 = sub nsw i32 %96, %a1120
  %9122 = add nsw i32 %9121, -1
  %9123 = and i32 %9122, -8
  %a1082 = add nsw i32 %9123, %a1120
  %9124 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1082)
  %9125 = add nsw i32 %9124, 9
  %a1081 = ashr i32 %9125, 1
  %b1083 = add nsw i32 %9095, 7
  %9126 = tail call i32 @llvm.smax.i32(i32 %a1081, i32 %b1083)
  %f126.v3.extent_realized.s134 = sub nsw i32 %9126, %f126.v3.min_realized133
  %9127 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %9128 = ashr i32 %9127, 1
  %t3096 = add nsw i32 %9128, 1
  %9129 = sub i32 %t3096, %9082
  %9130 = zext i32 %9129 to i64
  %9131 = add nsw i32 %f126.v3.extent_realized.s134, 1
  %9132 = zext i32 %9131 to i64
  %9133 = shl nuw nsw i64 %9132, 2
  %9134 = mul i64 %9133, %9130
  %9135 = icmp ult i64 %9134, 2147483648
  %9136 = and i64 %9133, 4294967292
  %9137 = mul nuw i64 %9136, %9130
  %9138 = lshr i64 %9137, 32
  %9139 = lshr i64 %9132, 30
  %9140 = mul nuw nsw i64 %9139, %9130
  %9141 = add nuw nsw i64 %9138, %9140
  %9142 = icmp ult i64 %9141, 4294967296
  %9143 = and i1 %9135, %9142
  br i1 %9143, label %"assert succeeded136", label %"assert failed135", !prof !5

"assert failed135":                               ; preds = %"assert succeeded130"
  %9144 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %9134, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded136":                            ; preds = %"assert succeeded130"
  %9145 = add nuw nsw i64 %9134, 4
  %9146 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9145)
  %.not269 = icmp eq ptr %9146, null
  br i1 %.not269, label %"assert failed137", label %"for local_laplacian.s0.v4.v4140.preheader", !prof !4

"assert failed137":                               ; preds = %"assert succeeded136"
  %9147 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"for local_laplacian.s0.v4.v4140.preheader":      ; preds = %"assert succeeded136"
  %9148 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %reass.add = sub nsw i64 %9148, %67
  %reass.mul = mul nsw i64 %reass.add, %74
  %9149 = sub i64 %reass.mul, %63
  %9150 = shl nsw i64 %76, 1
  %9151 = tail call i32 @llvm.smax.i32(i32 %9121, i32 8)
  %t3097 = zext i32 %9151 to i64
  %9152 = shl nuw nsw i64 %t3097, 2
  %9153 = icmp ult i32 %9151, 536870912
  %9154 = add nuw nsw i32 %126, 1
  %9155 = icmp slt i32 %110, 0
  %9156 = add nsw i32 %f75.v3.extent_realized.s, 1
  %9157 = add nsw i32 %levels, -1
  %9158 = sitofp i32 %9157 to float
  %9159 = insertelement <4 x float> undef, float %9158, i64 0
  %9160 = shufflevector <4 x float> %9159, <4 x float> undef, <4 x i32> zeroinitializer
  %9161 = add nsw i32 %levels, -2
  %9162 = insertelement <4 x i32> undef, i32 %9161, i64 0
  %b1087 = shufflevector <4 x i32> %9162, <4 x i32> undef, <4 x i32> zeroinitializer
  %9163 = add nsw i32 %f130.v3.extent_realized.s, 1
  %9164 = add nsw i32 %local_laplacian.min.1.required, -62
  %9165 = ashr i32 %9164, 5
  %9166 = xor i32 %9165, -1
  %9167 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %9168 = insertelement <4 x i32> undef, i32 %9167, i64 0
  %9169 = shufflevector <4 x i32> %9168, <4 x i32> undef, <4 x i32> zeroinitializer
  %9170 = add nsw i32 %f8.v3.extent_realized.s, 1
  %9171 = xor i32 %f8.v4.min_realized, -1
  %9172 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %9173 = shufflevector <4 x i32> %9172, <4 x i32> undef, <4 x i32> zeroinitializer
  %9174 = add nsw i32 %f7.v3.extent_realized.s, 1
  %9175 = insertelement <4 x i32> undef, i32 %9174, i64 0
  %9176 = shufflevector <4 x i32> %9175, <4 x i32> undef, <4 x i32> zeroinitializer
  %9177 = sext i32 %f129.v3.extent_realized.s to i64
  %9178 = add nsw i64 %9177, 1
  %9179 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %9180 = ashr i32 %9179, 4
  %9181 = sext i32 %9180 to i64
  %narrow = sub nsw i32 0, %f129.v3.min_realized
  %.neg199 = sext i32 %narrow to i64
  %9182 = add nuw nsw i32 %125, 1
  %9183 = icmp slt i32 %103, 0
  %9184 = add nsw i32 %f74.v3.extent_realized.s, 1
  %9185 = xor i32 %9180, -1
  %9186 = xor i32 %f7.v4.min_realized, -1
  %9187 = add nsw i32 %f6.v3.extent_realized.s, 1
  %9188 = insertelement <4 x i32> undef, i32 %9187, i64 0
  %9189 = shufflevector <4 x i32> %9188, <4 x i32> undef, <4 x i32> zeroinitializer
  %9190 = sext i32 %f129.v3.min_realized to i64
  %9191 = sext i32 %f128.v3.extent_realized.s118 to i64
  %9192 = add nsw i64 %9191, 1
  %9193 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %9194 = ashr i32 %9193, 3
  %9195 = sext i32 %9194 to i64
  %narrow270 = sub nsw i32 0, %f128.v3.min_realized117
  %.neg200 = sext i32 %narrow270 to i64
  %9196 = add nuw nsw i32 %9063, 1
  %9197 = icmp slt i32 %9062, 0
  %9198 = add nsw i32 %f73.v3.extent_realized.s, 1
  %9199 = xor i32 %9194, -1
  %9200 = xor i32 %f6.v4.min_realized, -1
  %9201 = add nsw i32 %f5.v3.extent_realized.s, 1
  %9202 = insertelement <4 x i32> undef, i32 %9201, i64 0
  %9203 = shufflevector <4 x i32> %9202, <4 x i32> undef, <4 x i32> zeroinitializer
  %9204 = sext i32 %f128.v3.min_realized117 to i64
  %9205 = sext i32 %f127.v3.extent_realized.s126 to i64
  %9206 = add nsw i64 %9205, 1
  %9207 = sext i32 %f127.v4.min_realized124 to i64
  %9208 = sext i32 %f127.v3.min_realized125 to i64
  %9209 = add nsw i32 %9091, 9
  %9210 = lshr i32 %9209, 3
  %9211 = icmp slt i32 %9091, -1
  %9212 = add nsw i32 %f72.v3.extent_realized.s, 1
  %9213 = xor i32 %f127.v4.min_realized124, -1
  %9214 = xor i32 %f5.v4.min_realized, -1
  %9215 = add nsw i32 %f4.v3.extent_realized.s, 1
  %9216 = insertelement <4 x i32> undef, i32 %9215, i64 0
  %9217 = shufflevector <4 x i32> %9216, <4 x i32> undef, <4 x i32> zeroinitializer
  %9218 = sext i32 %f126.v3.extent_realized.s134 to i64
  %9219 = add nsw i64 %9218, 1
  %9220 = sext i32 %9082 to i64
  %9221 = sext i32 %f126.v3.min_realized133 to i64
  %9222 = add nuw nsw i64 %9152, 4
  %9223 = add nsw i32 %9121, 7
  %9224 = lshr i32 %9223, 3
  %9225 = icmp sgt i32 %9121, 0
  %9226 = add nsw i32 %f2.v3.extent_realized.s, 1
  %9227 = fdiv float 1.000000e+00, %9158
  %9228 = insertelement <4 x float> undef, float %9227, i64 0
  %9229 = shufflevector <4 x float> %9228, <4 x float> undef, <4 x i32> zeroinitializer
  %9230 = xor i32 %9082, -1
  %9231 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %9232 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %9231
  %.neg203 = shufflevector <4 x i32> %9232, <4 x i32> poison, <4 x i32> zeroinitializer
  %9233 = shl nsw i32 %levels, 8
  %9234 = add nsw i32 %9233, -256
  %9235 = insertelement <4 x i32> undef, i32 %9234, i64 0
  %b1132 = shufflevector <4 x i32> %9235, <4 x i32> undef, <4 x i32> zeroinitializer
  %9236 = xor i32 %f4.v4.min_realized, -1
  %9237 = insertelement <4 x float> undef, float %beta, i64 0
  %9238 = shufflevector <4 x float> %9237, <4 x float> undef, <4 x i32> zeroinitializer
  %9239 = sext i32 %9119 to i64
  %9240 = add nsw i32 %local_laplacian.extent.0, 7
  %9241 = ashr i32 %9240, 3
  %9242 = icmp sgt i32 %local_laplacian.extent.0, 0
  %9243 = icmp sgt i32 %local_laplacian.extent.2, 0
  %9244 = add nsw i64 %6, 1
  %9245 = sub nsw i64 %9148, %10
  %9246 = mul nsw i32 %input.stride.2, %b1146
  %9247 = mul nsw i32 %input.stride.1, %b1148
  %9248 = add nsw i32 %9247, %input.min.0
  %9249 = add nsw i32 %9248, %9246
  %9250 = add nsw i32 %b1146, %input.extent.2
  %b1147 = add nsw i32 %9250, -1
  %9251 = add i32 %input.extent.1, -1
  %b1149 = add i32 %9251, %b1148
  %9252 = add nsw i32 %input.min.0, %input.extent.0
  %9253 = add nsw i32 %9252, -1
  %9254 = insertelement <8 x i32> undef, i32 %9253, i64 0
  %b1151 = shufflevector <8 x i32> %9254, <8 x i32> undef, <8 x i32> zeroinitializer
  %9255 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b1150 = shufflevector <8 x i32> %9255, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %"produce f129143"

if.then.i280:                                     ; preds = %if.then.i283
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9055) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9078) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9117) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9146) #7
  br label %destructor_block.thread

"produce f129143":                                ; preds = %if.then.i283, %"for local_laplacian.s0.v4.v4140.preheader"
  %indvars.iv304 = phi i64 [ %indvars.iv.next305, %if.then.i283 ], [ 0, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %lsr.iv446 = phi i64 [ %lsr.iv.next447, %if.then.i283 ], [ %9149, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %9256 = icmp ne i64 %indvars.iv304, 0
  %9257 = trunc i64 %indvars.iv304 to i32
  %9258 = add nsw i32 %local_laplacian.s0.v4.v4.base, %9257
  %9259 = add nsw i32 %9258, 3
  %9260 = ashr i32 %9259, 1
  %9261 = ashr i32 %9258, 1
  %9262 = add nsw i32 %9261, -1
  %9263 = sext i1 %9256 to i32
  %9264 = and i32 %9260, %9263
  %9265 = select i1 %9256, i32 0, i32 %9262
  %f126.s0.v4.min_2 = or i32 %9264, %9265
  %9266 = add nsw i32 %9258, 9
  %9267 = ashr i32 %9266, 2
  %9268 = add nsw i32 %9258, -6
  %9269 = ashr i32 %9268, 2
  %9270 = and i32 %9267, %9263
  %9271 = select i1 %9256, i32 0, i32 %9269
  %f127.s0.v4.min_2 = or i32 %9270, %9271
  %9272 = add nsw i32 %9258, 21
  %9273 = ashr i32 %9272, 3
  %9274 = add nsw i32 %9258, -14
  %9275 = ashr i32 %9274, 3
  %9276 = and i32 %9273, %9263
  %9277 = select i1 %9256, i32 0, i32 %9275
  %f128.s0.v4.min_2 = or i32 %9276, %9277
  %9278 = add nsw i32 %9258, 45
  %9279 = ashr i32 %9278, 4
  %9280 = add nsw i32 %9258, -30
  %9281 = ashr i32 %9280, 4
  %9282 = and i32 %9279, %9263
  %9283 = select i1 %9256, i32 0, i32 %9281
  %f129.s0.v4.min_2 = or i32 %9282, %9283
  %9284 = add nsw i32 %9258, 30
  %9285 = ashr i32 %9284, 4
  %.not78 = icmp sgt i32 %f129.s0.v4.min_2, %9285
  %brmerge = select i1 %.not78, i1 true, i1 %9155
  br i1 %brmerge, label %"produce f128153", label %"for f129.s0.v4145.us.preheader", !prof !27

"for f129.s0.v4145.us.preheader":                 ; preds = %"produce f129143"
  %9286 = sext i32 %f129.s0.v4.min_2 to i64
  %sext = sext i32 %9285 to i64
  br label %"for f129.s0.v4145.us"

"for f129.s0.v4145.us":                           ; preds = %"for f129.s0.v4145.us.preheader", %"end for f129.s0.v3.v3149.loopexit.us"
  %indvars.iv = phi i64 [ %9286, %"for f129.s0.v4145.us.preheader" ], [ %indvars.iv.next, %"end for f129.s0.v3.v3149.loopexit.us" ]
  %9287 = trunc i64 %indvars.iv to i32
  %9288 = shl i32 %9287, 1
  %9289 = and i32 %9288, 2
  %9290 = ashr i32 %9287, 1
  %t2863.us = add nsw i32 %9289, %9290
  %9291 = trunc i64 %indvars.iv to i32
  %9292 = sub i32 %9291, %f75.v4.min_realized
  %9293 = mul i32 %9292, %9156
  %9294 = sub i32 %9293, %f75.v3.min_realized
  %9295 = add nsw i32 %t2863.us, %9166
  %t2870.us = mul nsw i32 %9295, %9163
  %9296 = sub nsw i32 %9290, %9165
  %t2872.us = mul nsw i32 %9296, %9163
  %9297 = add i32 %t2863.us, %9171
  %t2877.us = mul nsw i32 %9297, %9170
  %9298 = sub nsw i32 %9290, %f8.v4.min_realized
  %t2882.us = mul nsw i32 %9298, %9170
  %9299 = sext i32 %t2872.us to i64
  %9300 = add nsw i64 %9299, -1
  %9301 = sext i32 %t2870.us to i64
  %9302 = add nsw i64 %9301, -1
  %9303 = sub nsw i64 %indvars.iv, %9181
  %9304 = mul nsw i64 %9303, %9178
  %9305 = add i64 %9304, %.neg199
  %9306 = trunc i64 %indvars.iv to i32
  %9307 = sub i32 %9306, %f7.v4.min_realized
  %9308 = mul i32 %9307, %f7.stride.1
  br label %"for f129.s0.v3.v3148.us"

"for f129.s0.v3.v3148.us":                        ; preds = %"for f129.s0.v4145.us", %"for f129.s0.v3.v3148.us"
  %lsr.iv426.us = phi i32 [ %lsr.iv.next427.us, %"for f129.s0.v3.v3148.us" ], [ 0, %"for f129.s0.v4145.us" ]
  %lsr.iv424.us = phi i32 [ %lsr.iv.next425.us, %"for f129.s0.v3.v3148.us" ], [ %9154, %"for f129.s0.v4145.us" ]
  %9309 = add i32 %lsr.iv426.us, %107
  %f129.s0.v3.v363.base151.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %9309)
  %9310 = shl i32 %f129.s0.v3.v363.base151.us, 1
  %9311 = and i32 %9310, 2
  %9312 = ashr i32 %f129.s0.v3.v363.base151.us, 1
  %t2864.us = add nsw i32 %9311, %9312
  %t2865.us = add i32 %9294, %f129.s0.v3.v363.base151.us
  %9313 = sext i32 %t2865.us to i64
  %9314 = getelementptr inbounds float, ptr %f75.host, i64 %9313
  %9315 = load <4 x float>, ptr %9314, align 4, !tbaa !13
  %9316 = add nsw i64 %9313, 4
  %9317 = getelementptr inbounds float, ptr %f75.host, i64 %9316
  %9318 = load <4 x float>, ptr %9317, align 4, !tbaa !13
  %9319 = shufflevector <4 x float> %9315, <4 x float> %9318, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2866.us = fmul <4 x float> %9160, %9319
  %a1085.us = fptosi <4 x float> %t2866.us to <4 x i32>
  %a1088.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1085.us)
  %9320 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1088.us, <4 x i32> zeroinitializer)
  %9321 = sitofp <4 x i32> %9320 to <4 x float>
  %t2868.us = fsub <4 x float> %t2866.us, %9321
  %9322 = sub nsw i32 %f129.s0.v3.v363.base151.us, %f7.v3.min_realized
  %t2873.us = add nsw i32 %9322, %9308
  %t2875.us = sub nsw <4 x i32> %9320, %9169
  %t2879.us = mul nsw <4 x i32> %t2875.us, %9173
  %9323 = add nsw <4 x i32> %t2875.us, <i32 1, i32 1, i32 1, i32 1>
  %t2885.us = mul nsw <4 x i32> %9323, %9173
  %9324 = add nsw i32 %f129.s0.v3.v363.base151.us, 1
  %9325 = shl i32 %9324, 1
  %9326 = and i32 %9325, 2
  %9327 = ashr i32 %9324, 1
  %t2886.us = add nsw i32 %9326, %9327
  %9328 = shufflevector <4 x float> %9315, <4 x float> %9318, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2887.us = fmul <4 x float> %9160, %9328
  %a1089.us = fptosi <4 x float> %t2887.us to <4 x i32>
  %a1092.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1089.us)
  %9329 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1092.us, <4 x i32> zeroinitializer)
  %9330 = sitofp <4 x i32> %9329 to <4 x float>
  %t2889.us = fsub <4 x float> %t2887.us, %9330
  %t2892.us = sub nsw <4 x i32> %9329, %9169
  %t2895.us = mul nsw <4 x i32> %t2892.us, %9173
  %9331 = add nsw <4 x i32> %t2892.us, <i32 1, i32 1, i32 1, i32 1>
  %t2900.us = mul nsw <4 x i32> %9331, %9173
  %9332 = sub nsw i32 %9312, %f8.v3.min_realized
  %9333 = add nsw i32 %9332, %t2882.us
  %9334 = insertelement <4 x i32> undef, i32 %9333, i64 0
  %9335 = shufflevector <4 x i32> %9334, <4 x i32> undef, <4 x i32> zeroinitializer
  %9336 = add nsw <4 x i32> %9335, <i32 0, i32 1, i32 2, i32 3>
  %9337 = add nsw <4 x i32> %t2885.us, %9336
  %9338 = sext <4 x i32> %9337 to <4 x i64>
  %9339 = extractelement <4 x i64> %9338, i64 0
  %9340 = getelementptr inbounds float, ptr %f8.host, i64 %9339
  %9341 = load float, ptr %9340, align 4, !tbaa !36
  %9342 = insertelement <4 x float> undef, float %9341, i64 0
  %9343 = extractelement <4 x i64> %9338, i64 1
  %9344 = getelementptr inbounds float, ptr %f8.host, i64 %9343
  %9345 = load float, ptr %9344, align 4, !tbaa !36
  %9346 = insertelement <4 x float> %9342, float %9345, i64 1
  %9347 = extractelement <4 x i64> %9338, i64 2
  %9348 = getelementptr inbounds float, ptr %f8.host, i64 %9347
  %9349 = load float, ptr %9348, align 4, !tbaa !36
  %9350 = insertelement <4 x float> %9346, float %9349, i64 2
  %9351 = extractelement <4 x i64> %9338, i64 3
  %9352 = getelementptr inbounds float, ptr %f8.host, i64 %9351
  %9353 = load float, ptr %9352, align 4, !tbaa !36
  %9354 = insertelement <4 x float> %9350, float %9353, i64 3
  %9355 = fmul <4 x float> %9354, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9356 = sub nsw i32 %t2864.us, %f8.v3.min_realized
  %9357 = add nsw i32 %9356, %t2882.us
  %9358 = insertelement <4 x i32> undef, i32 %9357, i64 0
  %9359 = shufflevector <4 x i32> %9358, <4 x i32> undef, <4 x i32> zeroinitializer
  %9360 = add <4 x i32> %9359, <i32 -1, i32 0, i32 1, i32 2>
  %9361 = add <4 x i32> %9360, %t2885.us
  %9362 = sext <4 x i32> %9361 to <4 x i64>
  %9363 = extractelement <4 x i64> %9362, i64 0
  %9364 = getelementptr inbounds float, ptr %f8.host, i64 %9363
  %9365 = load float, ptr %9364, align 4, !tbaa !36
  %9366 = insertelement <4 x float> undef, float %9365, i64 0
  %9367 = extractelement <4 x i64> %9362, i64 1
  %9368 = getelementptr inbounds float, ptr %f8.host, i64 %9367
  %9369 = load float, ptr %9368, align 4, !tbaa !36
  %9370 = insertelement <4 x float> %9366, float %9369, i64 1
  %9371 = extractelement <4 x i64> %9362, i64 2
  %9372 = getelementptr inbounds float, ptr %f8.host, i64 %9371
  %9373 = load float, ptr %9372, align 4, !tbaa !36
  %9374 = insertelement <4 x float> %9370, float %9373, i64 2
  %9375 = extractelement <4 x i64> %9362, i64 3
  %9376 = getelementptr inbounds float, ptr %f8.host, i64 %9375
  %9377 = load float, ptr %9376, align 4, !tbaa !36
  %9378 = insertelement <4 x float> %9374, float %9377, i64 3
  %9379 = fmul <4 x float> %9378, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9380 = fadd <4 x float> %9355, %9379
  %9381 = fmul <4 x float> %9380, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9382 = add nsw i32 %9332, %t2877.us
  %9383 = insertelement <4 x i32> undef, i32 %9382, i64 0
  %9384 = shufflevector <4 x i32> %9383, <4 x i32> undef, <4 x i32> zeroinitializer
  %9385 = add nsw <4 x i32> %9384, <i32 0, i32 1, i32 2, i32 3>
  %9386 = add nsw <4 x i32> %t2885.us, %9385
  %9387 = sext <4 x i32> %9386 to <4 x i64>
  %9388 = extractelement <4 x i64> %9387, i64 0
  %9389 = getelementptr inbounds float, ptr %f8.host, i64 %9388
  %9390 = load float, ptr %9389, align 4, !tbaa !36
  %9391 = insertelement <4 x float> undef, float %9390, i64 0
  %9392 = extractelement <4 x i64> %9387, i64 1
  %9393 = getelementptr inbounds float, ptr %f8.host, i64 %9392
  %9394 = load float, ptr %9393, align 4, !tbaa !36
  %9395 = insertelement <4 x float> %9391, float %9394, i64 1
  %9396 = extractelement <4 x i64> %9387, i64 2
  %9397 = getelementptr inbounds float, ptr %f8.host, i64 %9396
  %9398 = load float, ptr %9397, align 4, !tbaa !36
  %9399 = insertelement <4 x float> %9395, float %9398, i64 2
  %9400 = extractelement <4 x i64> %9387, i64 3
  %9401 = getelementptr inbounds float, ptr %f8.host, i64 %9400
  %9402 = load float, ptr %9401, align 4, !tbaa !36
  %9403 = insertelement <4 x float> %9399, float %9402, i64 3
  %9404 = fmul <4 x float> %9403, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9405 = add nsw i32 %9356, %t2877.us
  %9406 = insertelement <4 x i32> undef, i32 %9405, i64 0
  %9407 = shufflevector <4 x i32> %9406, <4 x i32> undef, <4 x i32> zeroinitializer
  %9408 = add <4 x i32> %9407, <i32 -1, i32 0, i32 1, i32 2>
  %9409 = add <4 x i32> %9408, %t2885.us
  %9410 = sext <4 x i32> %9409 to <4 x i64>
  %9411 = extractelement <4 x i64> %9410, i64 0
  %9412 = getelementptr inbounds float, ptr %f8.host, i64 %9411
  %9413 = load float, ptr %9412, align 4, !tbaa !36
  %9414 = insertelement <4 x float> undef, float %9413, i64 0
  %9415 = extractelement <4 x i64> %9410, i64 1
  %9416 = getelementptr inbounds float, ptr %f8.host, i64 %9415
  %9417 = load float, ptr %9416, align 4, !tbaa !36
  %9418 = insertelement <4 x float> %9414, float %9417, i64 1
  %9419 = extractelement <4 x i64> %9410, i64 2
  %9420 = getelementptr inbounds float, ptr %f8.host, i64 %9419
  %9421 = load float, ptr %9420, align 4, !tbaa !36
  %9422 = insertelement <4 x float> %9418, float %9421, i64 2
  %9423 = extractelement <4 x i64> %9410, i64 3
  %9424 = getelementptr inbounds float, ptr %f8.host, i64 %9423
  %9425 = load float, ptr %9424, align 4, !tbaa !36
  %9426 = insertelement <4 x float> %9422, float %9425, i64 3
  %9427 = fmul <4 x float> %9426, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9428 = fadd <4 x float> %9404, %9427
  %9429 = fmul <4 x float> %9428, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9430 = fadd <4 x float> %9381, %9429
  %9431 = mul nsw <4 x i32> %9323, %9176
  %9432 = insertelement <4 x i32> undef, i32 %t2873.us, i64 0
  %9433 = shufflevector <4 x i32> %9432, <4 x i32> undef, <4 x i32> zeroinitializer
  %9434 = add nsw <4 x i32> %9433, <i32 0, i32 2, i32 4, i32 6>
  %9435 = add nsw <4 x i32> %9431, %9434
  %9436 = sext <4 x i32> %9435 to <4 x i64>
  %9437 = extractelement <4 x i64> %9436, i64 0
  %9438 = getelementptr inbounds float, ptr %f7.host, i64 %9437
  %9439 = load float, ptr %9438, align 4, !tbaa !54
  %9440 = insertelement <4 x float> undef, float %9439, i64 0
  %9441 = extractelement <4 x i64> %9436, i64 1
  %9442 = getelementptr inbounds float, ptr %f7.host, i64 %9441
  %9443 = load float, ptr %9442, align 4, !tbaa !54
  %9444 = insertelement <4 x float> %9440, float %9443, i64 1
  %9445 = extractelement <4 x i64> %9436, i64 2
  %9446 = getelementptr inbounds float, ptr %f7.host, i64 %9445
  %9447 = load float, ptr %9446, align 4, !tbaa !54
  %9448 = insertelement <4 x float> %9444, float %9447, i64 2
  %9449 = extractelement <4 x i64> %9436, i64 3
  %9450 = getelementptr inbounds float, ptr %f7.host, i64 %9449
  %9451 = load float, ptr %9450, align 4, !tbaa !54
  %9452 = insertelement <4 x float> %9448, float %9451, i64 3
  %9453 = fsub <4 x float> %9452, %9430
  %9454 = fmul <4 x float> %t2868.us, %9453
  %9455 = add nsw <4 x i32> %t2879.us, %9336
  %9456 = sext <4 x i32> %9455 to <4 x i64>
  %9457 = extractelement <4 x i64> %9456, i64 0
  %9458 = getelementptr inbounds float, ptr %f8.host, i64 %9457
  %9459 = load float, ptr %9458, align 4, !tbaa !36
  %9460 = insertelement <4 x float> undef, float %9459, i64 0
  %9461 = extractelement <4 x i64> %9456, i64 1
  %9462 = getelementptr inbounds float, ptr %f8.host, i64 %9461
  %9463 = load float, ptr %9462, align 4, !tbaa !36
  %9464 = insertelement <4 x float> %9460, float %9463, i64 1
  %9465 = extractelement <4 x i64> %9456, i64 2
  %9466 = getelementptr inbounds float, ptr %f8.host, i64 %9465
  %9467 = load float, ptr %9466, align 4, !tbaa !36
  %9468 = insertelement <4 x float> %9464, float %9467, i64 2
  %9469 = extractelement <4 x i64> %9456, i64 3
  %9470 = getelementptr inbounds float, ptr %f8.host, i64 %9469
  %9471 = load float, ptr %9470, align 4, !tbaa !36
  %9472 = insertelement <4 x float> %9468, float %9471, i64 3
  %9473 = fmul <4 x float> %9472, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9474 = add <4 x i32> %t2879.us, %9359
  %9475 = add <4 x i32> %9474, <i32 -1, i32 0, i32 1, i32 2>
  %9476 = sext <4 x i32> %9475 to <4 x i64>
  %9477 = extractelement <4 x i64> %9476, i64 0
  %9478 = getelementptr inbounds float, ptr %f8.host, i64 %9477
  %9479 = load float, ptr %9478, align 4, !tbaa !36
  %9480 = insertelement <4 x float> undef, float %9479, i64 0
  %9481 = extractelement <4 x i64> %9476, i64 1
  %9482 = getelementptr inbounds float, ptr %f8.host, i64 %9481
  %9483 = load float, ptr %9482, align 4, !tbaa !36
  %9484 = insertelement <4 x float> %9480, float %9483, i64 1
  %9485 = extractelement <4 x i64> %9476, i64 2
  %9486 = getelementptr inbounds float, ptr %f8.host, i64 %9485
  %9487 = load float, ptr %9486, align 4, !tbaa !36
  %9488 = insertelement <4 x float> %9484, float %9487, i64 2
  %9489 = extractelement <4 x i64> %9476, i64 3
  %9490 = getelementptr inbounds float, ptr %f8.host, i64 %9489
  %9491 = load float, ptr %9490, align 4, !tbaa !36
  %9492 = insertelement <4 x float> %9488, float %9491, i64 3
  %9493 = fmul <4 x float> %9492, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9494 = fadd <4 x float> %9473, %9493
  %9495 = fmul <4 x float> %9494, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9496 = add nsw <4 x i32> %t2879.us, %9385
  %9497 = sext <4 x i32> %9496 to <4 x i64>
  %9498 = extractelement <4 x i64> %9497, i64 0
  %9499 = getelementptr inbounds float, ptr %f8.host, i64 %9498
  %9500 = load float, ptr %9499, align 4, !tbaa !36
  %9501 = insertelement <4 x float> undef, float %9500, i64 0
  %9502 = extractelement <4 x i64> %9497, i64 1
  %9503 = getelementptr inbounds float, ptr %f8.host, i64 %9502
  %9504 = load float, ptr %9503, align 4, !tbaa !36
  %9505 = insertelement <4 x float> %9501, float %9504, i64 1
  %9506 = extractelement <4 x i64> %9497, i64 2
  %9507 = getelementptr inbounds float, ptr %f8.host, i64 %9506
  %9508 = load float, ptr %9507, align 4, !tbaa !36
  %9509 = insertelement <4 x float> %9505, float %9508, i64 2
  %9510 = extractelement <4 x i64> %9497, i64 3
  %9511 = getelementptr inbounds float, ptr %f8.host, i64 %9510
  %9512 = load float, ptr %9511, align 4, !tbaa !36
  %9513 = insertelement <4 x float> %9509, float %9512, i64 3
  %9514 = fmul <4 x float> %9513, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9515 = add <4 x i32> %t2879.us, %9407
  %9516 = add <4 x i32> %9515, <i32 -1, i32 0, i32 1, i32 2>
  %9517 = sext <4 x i32> %9516 to <4 x i64>
  %9518 = extractelement <4 x i64> %9517, i64 0
  %9519 = getelementptr inbounds float, ptr %f8.host, i64 %9518
  %9520 = load float, ptr %9519, align 4, !tbaa !36
  %9521 = insertelement <4 x float> undef, float %9520, i64 0
  %9522 = extractelement <4 x i64> %9517, i64 1
  %9523 = getelementptr inbounds float, ptr %f8.host, i64 %9522
  %9524 = load float, ptr %9523, align 4, !tbaa !36
  %9525 = insertelement <4 x float> %9521, float %9524, i64 1
  %9526 = extractelement <4 x i64> %9517, i64 2
  %9527 = getelementptr inbounds float, ptr %f8.host, i64 %9526
  %9528 = load float, ptr %9527, align 4, !tbaa !36
  %9529 = insertelement <4 x float> %9525, float %9528, i64 2
  %9530 = extractelement <4 x i64> %9517, i64 3
  %9531 = getelementptr inbounds float, ptr %f8.host, i64 %9530
  %9532 = load float, ptr %9531, align 4, !tbaa !36
  %9533 = insertelement <4 x float> %9529, float %9532, i64 3
  %9534 = fmul <4 x float> %9533, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9535 = fadd <4 x float> %9514, %9534
  %9536 = fmul <4 x float> %9535, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9537 = fadd <4 x float> %9495, %9536
  %9538 = mul nsw <4 x i32> %t2875.us, %9176
  %9539 = add nsw <4 x i32> %9538, %9434
  %9540 = sext <4 x i32> %9539 to <4 x i64>
  %9541 = extractelement <4 x i64> %9540, i64 0
  %9542 = getelementptr inbounds float, ptr %f7.host, i64 %9541
  %9543 = load float, ptr %9542, align 4, !tbaa !54
  %9544 = insertelement <4 x float> undef, float %9543, i64 0
  %9545 = extractelement <4 x i64> %9540, i64 1
  %9546 = getelementptr inbounds float, ptr %f7.host, i64 %9545
  %9547 = load float, ptr %9546, align 4, !tbaa !54
  %9548 = insertelement <4 x float> %9544, float %9547, i64 1
  %9549 = extractelement <4 x i64> %9540, i64 2
  %9550 = getelementptr inbounds float, ptr %f7.host, i64 %9549
  %9551 = load float, ptr %9550, align 4, !tbaa !54
  %9552 = insertelement <4 x float> %9548, float %9551, i64 2
  %9553 = extractelement <4 x i64> %9540, i64 3
  %9554 = getelementptr inbounds float, ptr %f7.host, i64 %9553
  %9555 = load float, ptr %9554, align 4, !tbaa !54
  %9556 = insertelement <4 x float> %9552, float %9555, i64 3
  %9557 = fsub <4 x float> %9556, %9537
  %9558 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2868.us
  %9559 = fmul <4 x float> %9558, %9557
  %9560 = fadd <4 x float> %9454, %9559
  %9561 = sext i32 %9312 to i64
  %9562 = sub nsw i64 %9561, %4
  %9563 = add nsw i64 %9562, %9299
  %9564 = getelementptr inbounds float, ptr %f130.host, i64 %9563
  %9565 = load <4 x float>, ptr %9564, align 4, !tbaa !38
  %9566 = fmul <4 x float> %9565, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9567 = sext i32 %t2864.us to i64
  %9568 = sub nsw i64 %9567, %4
  %9569 = add nsw i64 %9300, %9568
  %9570 = getelementptr inbounds float, ptr %f130.host, i64 %9569
  %9571 = load <4 x float>, ptr %9570, align 4, !tbaa !38
  %9572 = fmul <4 x float> %9571, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9573 = fadd <4 x float> %9566, %9572
  %9574 = fmul <4 x float> %9573, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9575 = add nsw i64 %9562, %9301
  %9576 = getelementptr inbounds float, ptr %f130.host, i64 %9575
  %9577 = load <4 x float>, ptr %9576, align 4, !tbaa !38
  %9578 = fmul <4 x float> %9577, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9579 = add nsw i64 %9302, %9568
  %9580 = getelementptr inbounds float, ptr %f130.host, i64 %9579
  %9581 = load <4 x float>, ptr %9580, align 4, !tbaa !38
  %9582 = fmul <4 x float> %9581, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9583 = fadd <4 x float> %9578, %9582
  %9584 = fmul <4 x float> %9583, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9585 = fadd <4 x float> %9574, %9584
  %9586 = fadd <4 x float> %9560, %9585
  %9587 = sub nsw i32 %9327, %f8.v3.min_realized
  %9588 = add nsw i32 %9587, %t2882.us
  %9589 = insertelement <4 x i32> undef, i32 %9588, i64 0
  %9590 = shufflevector <4 x i32> %9589, <4 x i32> undef, <4 x i32> zeroinitializer
  %9591 = add nsw <4 x i32> %9590, <i32 0, i32 1, i32 2, i32 3>
  %9592 = add nsw <4 x i32> %t2900.us, %9591
  %9593 = sext <4 x i32> %9592 to <4 x i64>
  %9594 = extractelement <4 x i64> %9593, i64 0
  %9595 = getelementptr inbounds float, ptr %f8.host, i64 %9594
  %9596 = load float, ptr %9595, align 4, !tbaa !36
  %9597 = insertelement <4 x float> undef, float %9596, i64 0
  %9598 = extractelement <4 x i64> %9593, i64 1
  %9599 = getelementptr inbounds float, ptr %f8.host, i64 %9598
  %9600 = load float, ptr %9599, align 4, !tbaa !36
  %9601 = insertelement <4 x float> %9597, float %9600, i64 1
  %9602 = extractelement <4 x i64> %9593, i64 2
  %9603 = getelementptr inbounds float, ptr %f8.host, i64 %9602
  %9604 = load float, ptr %9603, align 4, !tbaa !36
  %9605 = insertelement <4 x float> %9601, float %9604, i64 2
  %9606 = extractelement <4 x i64> %9593, i64 3
  %9607 = getelementptr inbounds float, ptr %f8.host, i64 %9606
  %9608 = load float, ptr %9607, align 4, !tbaa !36
  %9609 = insertelement <4 x float> %9605, float %9608, i64 3
  %9610 = fmul <4 x float> %9609, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9611 = sub nsw i32 %t2886.us, %f8.v3.min_realized
  %9612 = add nsw i32 %9611, %t2882.us
  %9613 = insertelement <4 x i32> undef, i32 %9612, i64 0
  %9614 = shufflevector <4 x i32> %9613, <4 x i32> undef, <4 x i32> zeroinitializer
  %9615 = add nsw <4 x i32> %9614, <i32 0, i32 1, i32 2, i32 3>
  %9616 = add <4 x i32> %t2900.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %9617 = add <4 x i32> %9616, %9615
  %9618 = sext <4 x i32> %9617 to <4 x i64>
  %9619 = extractelement <4 x i64> %9618, i64 0
  %9620 = getelementptr inbounds float, ptr %f8.host, i64 %9619
  %9621 = load float, ptr %9620, align 4, !tbaa !36
  %9622 = insertelement <4 x float> undef, float %9621, i64 0
  %9623 = extractelement <4 x i64> %9618, i64 1
  %9624 = getelementptr inbounds float, ptr %f8.host, i64 %9623
  %9625 = load float, ptr %9624, align 4, !tbaa !36
  %9626 = insertelement <4 x float> %9622, float %9625, i64 1
  %9627 = extractelement <4 x i64> %9618, i64 2
  %9628 = getelementptr inbounds float, ptr %f8.host, i64 %9627
  %9629 = load float, ptr %9628, align 4, !tbaa !36
  %9630 = insertelement <4 x float> %9626, float %9629, i64 2
  %9631 = extractelement <4 x i64> %9618, i64 3
  %9632 = getelementptr inbounds float, ptr %f8.host, i64 %9631
  %9633 = load float, ptr %9632, align 4, !tbaa !36
  %9634 = insertelement <4 x float> %9630, float %9633, i64 3
  %9635 = fmul <4 x float> %9634, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9636 = fadd <4 x float> %9610, %9635
  %9637 = fmul <4 x float> %9636, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9638 = add nsw i32 %9587, %t2877.us
  %9639 = insertelement <4 x i32> undef, i32 %9638, i64 0
  %9640 = shufflevector <4 x i32> %9639, <4 x i32> undef, <4 x i32> zeroinitializer
  %9641 = add nsw <4 x i32> %9640, <i32 0, i32 1, i32 2, i32 3>
  %9642 = add nsw <4 x i32> %t2900.us, %9641
  %9643 = sext <4 x i32> %9642 to <4 x i64>
  %9644 = extractelement <4 x i64> %9643, i64 0
  %9645 = getelementptr inbounds float, ptr %f8.host, i64 %9644
  %9646 = load float, ptr %9645, align 4, !tbaa !36
  %9647 = insertelement <4 x float> undef, float %9646, i64 0
  %9648 = extractelement <4 x i64> %9643, i64 1
  %9649 = getelementptr inbounds float, ptr %f8.host, i64 %9648
  %9650 = load float, ptr %9649, align 4, !tbaa !36
  %9651 = insertelement <4 x float> %9647, float %9650, i64 1
  %9652 = extractelement <4 x i64> %9643, i64 2
  %9653 = getelementptr inbounds float, ptr %f8.host, i64 %9652
  %9654 = load float, ptr %9653, align 4, !tbaa !36
  %9655 = insertelement <4 x float> %9651, float %9654, i64 2
  %9656 = extractelement <4 x i64> %9643, i64 3
  %9657 = getelementptr inbounds float, ptr %f8.host, i64 %9656
  %9658 = load float, ptr %9657, align 4, !tbaa !36
  %9659 = insertelement <4 x float> %9655, float %9658, i64 3
  %9660 = fmul <4 x float> %9659, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9661 = add nsw i32 %9611, %t2877.us
  %9662 = insertelement <4 x i32> undef, i32 %9661, i64 0
  %9663 = shufflevector <4 x i32> %9662, <4 x i32> undef, <4 x i32> zeroinitializer
  %9664 = add nsw <4 x i32> %9663, <i32 0, i32 1, i32 2, i32 3>
  %9665 = add <4 x i32> %9616, %9664
  %9666 = sext <4 x i32> %9665 to <4 x i64>
  %9667 = extractelement <4 x i64> %9666, i64 0
  %9668 = getelementptr inbounds float, ptr %f8.host, i64 %9667
  %9669 = load float, ptr %9668, align 4, !tbaa !36
  %9670 = insertelement <4 x float> undef, float %9669, i64 0
  %9671 = extractelement <4 x i64> %9666, i64 1
  %9672 = getelementptr inbounds float, ptr %f8.host, i64 %9671
  %9673 = load float, ptr %9672, align 4, !tbaa !36
  %9674 = insertelement <4 x float> %9670, float %9673, i64 1
  %9675 = extractelement <4 x i64> %9666, i64 2
  %9676 = getelementptr inbounds float, ptr %f8.host, i64 %9675
  %9677 = load float, ptr %9676, align 4, !tbaa !36
  %9678 = insertelement <4 x float> %9674, float %9677, i64 2
  %9679 = extractelement <4 x i64> %9666, i64 3
  %9680 = getelementptr inbounds float, ptr %f8.host, i64 %9679
  %9681 = load float, ptr %9680, align 4, !tbaa !36
  %9682 = insertelement <4 x float> %9678, float %9681, i64 3
  %9683 = fmul <4 x float> %9682, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9684 = fadd <4 x float> %9660, %9683
  %9685 = fmul <4 x float> %9684, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9686 = fadd <4 x float> %9637, %9685
  %9687 = mul nsw <4 x i32> %9331, %9176
  %9688 = add nsw i32 %t2873.us, 1
  %9689 = insertelement <4 x i32> undef, i32 %9688, i64 0
  %9690 = shufflevector <4 x i32> %9689, <4 x i32> undef, <4 x i32> zeroinitializer
  %9691 = add nsw <4 x i32> %9690, <i32 0, i32 2, i32 4, i32 6>
  %9692 = add nsw <4 x i32> %9687, %9691
  %9693 = sext <4 x i32> %9692 to <4 x i64>
  %9694 = extractelement <4 x i64> %9693, i64 0
  %9695 = getelementptr inbounds float, ptr %f7.host, i64 %9694
  %9696 = load float, ptr %9695, align 4, !tbaa !54
  %9697 = insertelement <4 x float> undef, float %9696, i64 0
  %9698 = extractelement <4 x i64> %9693, i64 1
  %9699 = getelementptr inbounds float, ptr %f7.host, i64 %9698
  %9700 = load float, ptr %9699, align 4, !tbaa !54
  %9701 = insertelement <4 x float> %9697, float %9700, i64 1
  %9702 = extractelement <4 x i64> %9693, i64 2
  %9703 = getelementptr inbounds float, ptr %f7.host, i64 %9702
  %9704 = load float, ptr %9703, align 4, !tbaa !54
  %9705 = insertelement <4 x float> %9701, float %9704, i64 2
  %9706 = extractelement <4 x i64> %9693, i64 3
  %9707 = getelementptr inbounds float, ptr %f7.host, i64 %9706
  %9708 = load float, ptr %9707, align 4, !tbaa !54
  %9709 = insertelement <4 x float> %9705, float %9708, i64 3
  %9710 = fsub <4 x float> %9709, %9686
  %9711 = fmul <4 x float> %t2889.us, %9710
  %9712 = add nsw <4 x i32> %t2895.us, %9591
  %9713 = sext <4 x i32> %9712 to <4 x i64>
  %9714 = extractelement <4 x i64> %9713, i64 0
  %9715 = getelementptr inbounds float, ptr %f8.host, i64 %9714
  %9716 = load float, ptr %9715, align 4, !tbaa !36
  %9717 = insertelement <4 x float> undef, float %9716, i64 0
  %9718 = extractelement <4 x i64> %9713, i64 1
  %9719 = getelementptr inbounds float, ptr %f8.host, i64 %9718
  %9720 = load float, ptr %9719, align 4, !tbaa !36
  %9721 = insertelement <4 x float> %9717, float %9720, i64 1
  %9722 = extractelement <4 x i64> %9713, i64 2
  %9723 = getelementptr inbounds float, ptr %f8.host, i64 %9722
  %9724 = load float, ptr %9723, align 4, !tbaa !36
  %9725 = insertelement <4 x float> %9721, float %9724, i64 2
  %9726 = extractelement <4 x i64> %9713, i64 3
  %9727 = getelementptr inbounds float, ptr %f8.host, i64 %9726
  %9728 = load float, ptr %9727, align 4, !tbaa !36
  %9729 = insertelement <4 x float> %9725, float %9728, i64 3
  %9730 = fmul <4 x float> %9729, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9731 = add <4 x i32> %t2895.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %9732 = add <4 x i32> %9731, %9615
  %9733 = sext <4 x i32> %9732 to <4 x i64>
  %9734 = extractelement <4 x i64> %9733, i64 0
  %9735 = getelementptr inbounds float, ptr %f8.host, i64 %9734
  %9736 = load float, ptr %9735, align 4, !tbaa !36
  %9737 = insertelement <4 x float> undef, float %9736, i64 0
  %9738 = extractelement <4 x i64> %9733, i64 1
  %9739 = getelementptr inbounds float, ptr %f8.host, i64 %9738
  %9740 = load float, ptr %9739, align 4, !tbaa !36
  %9741 = insertelement <4 x float> %9737, float %9740, i64 1
  %9742 = extractelement <4 x i64> %9733, i64 2
  %9743 = getelementptr inbounds float, ptr %f8.host, i64 %9742
  %9744 = load float, ptr %9743, align 4, !tbaa !36
  %9745 = insertelement <4 x float> %9741, float %9744, i64 2
  %9746 = extractelement <4 x i64> %9733, i64 3
  %9747 = getelementptr inbounds float, ptr %f8.host, i64 %9746
  %9748 = load float, ptr %9747, align 4, !tbaa !36
  %9749 = insertelement <4 x float> %9745, float %9748, i64 3
  %9750 = fmul <4 x float> %9749, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9751 = fadd <4 x float> %9730, %9750
  %9752 = fmul <4 x float> %9751, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9753 = add nsw <4 x i32> %t2895.us, %9641
  %9754 = sext <4 x i32> %9753 to <4 x i64>
  %9755 = extractelement <4 x i64> %9754, i64 0
  %9756 = getelementptr inbounds float, ptr %f8.host, i64 %9755
  %9757 = load float, ptr %9756, align 4, !tbaa !36
  %9758 = insertelement <4 x float> undef, float %9757, i64 0
  %9759 = extractelement <4 x i64> %9754, i64 1
  %9760 = getelementptr inbounds float, ptr %f8.host, i64 %9759
  %9761 = load float, ptr %9760, align 4, !tbaa !36
  %9762 = insertelement <4 x float> %9758, float %9761, i64 1
  %9763 = extractelement <4 x i64> %9754, i64 2
  %9764 = getelementptr inbounds float, ptr %f8.host, i64 %9763
  %9765 = load float, ptr %9764, align 4, !tbaa !36
  %9766 = insertelement <4 x float> %9762, float %9765, i64 2
  %9767 = extractelement <4 x i64> %9754, i64 3
  %9768 = getelementptr inbounds float, ptr %f8.host, i64 %9767
  %9769 = load float, ptr %9768, align 4, !tbaa !36
  %9770 = insertelement <4 x float> %9766, float %9769, i64 3
  %9771 = fmul <4 x float> %9770, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9772 = add <4 x i32> %9731, %9664
  %9773 = sext <4 x i32> %9772 to <4 x i64>
  %9774 = extractelement <4 x i64> %9773, i64 0
  %9775 = getelementptr inbounds float, ptr %f8.host, i64 %9774
  %9776 = load float, ptr %9775, align 4, !tbaa !36
  %9777 = insertelement <4 x float> undef, float %9776, i64 0
  %9778 = extractelement <4 x i64> %9773, i64 1
  %9779 = getelementptr inbounds float, ptr %f8.host, i64 %9778
  %9780 = load float, ptr %9779, align 4, !tbaa !36
  %9781 = insertelement <4 x float> %9777, float %9780, i64 1
  %9782 = extractelement <4 x i64> %9773, i64 2
  %9783 = getelementptr inbounds float, ptr %f8.host, i64 %9782
  %9784 = load float, ptr %9783, align 4, !tbaa !36
  %9785 = insertelement <4 x float> %9781, float %9784, i64 2
  %9786 = extractelement <4 x i64> %9773, i64 3
  %9787 = getelementptr inbounds float, ptr %f8.host, i64 %9786
  %9788 = load float, ptr %9787, align 4, !tbaa !36
  %9789 = insertelement <4 x float> %9785, float %9788, i64 3
  %9790 = fmul <4 x float> %9789, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9791 = fadd <4 x float> %9771, %9790
  %9792 = fmul <4 x float> %9791, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9793 = fadd <4 x float> %9752, %9792
  %9794 = mul nsw <4 x i32> %t2892.us, %9176
  %9795 = add nsw <4 x i32> %9794, %9691
  %9796 = sext <4 x i32> %9795 to <4 x i64>
  %9797 = extractelement <4 x i64> %9796, i64 0
  %9798 = getelementptr inbounds float, ptr %f7.host, i64 %9797
  %9799 = load float, ptr %9798, align 4, !tbaa !54
  %9800 = insertelement <4 x float> undef, float %9799, i64 0
  %9801 = extractelement <4 x i64> %9796, i64 1
  %9802 = getelementptr inbounds float, ptr %f7.host, i64 %9801
  %9803 = load float, ptr %9802, align 4, !tbaa !54
  %9804 = insertelement <4 x float> %9800, float %9803, i64 1
  %9805 = extractelement <4 x i64> %9796, i64 2
  %9806 = getelementptr inbounds float, ptr %f7.host, i64 %9805
  %9807 = load float, ptr %9806, align 4, !tbaa !54
  %9808 = insertelement <4 x float> %9804, float %9807, i64 2
  %9809 = extractelement <4 x i64> %9796, i64 3
  %9810 = getelementptr inbounds float, ptr %f7.host, i64 %9809
  %9811 = load float, ptr %9810, align 4, !tbaa !54
  %9812 = insertelement <4 x float> %9808, float %9811, i64 3
  %9813 = fsub <4 x float> %9812, %9793
  %9814 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2889.us
  %9815 = fmul <4 x float> %9814, %9813
  %9816 = fadd <4 x float> %9711, %9815
  %9817 = sext i32 %9327 to i64
  %9818 = sub nsw i64 %9817, %4
  %9819 = add nsw i64 %9818, %9299
  %9820 = getelementptr inbounds float, ptr %f130.host, i64 %9819
  %9821 = load <4 x float>, ptr %9820, align 4, !tbaa !38
  %9822 = fmul <4 x float> %9821, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9823 = sext i32 %t2886.us to i64
  %9824 = sub nsw i64 %9823, %4
  %9825 = add nsw i64 %9300, %9824
  %9826 = getelementptr inbounds float, ptr %f130.host, i64 %9825
  %9827 = load <4 x float>, ptr %9826, align 4, !tbaa !38
  %9828 = fmul <4 x float> %9827, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9829 = fadd <4 x float> %9822, %9828
  %9830 = fmul <4 x float> %9829, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9831 = add nsw i64 %9818, %9301
  %9832 = getelementptr inbounds float, ptr %f130.host, i64 %9831
  %9833 = load <4 x float>, ptr %9832, align 4, !tbaa !38
  %9834 = fmul <4 x float> %9833, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9835 = add nsw i64 %9302, %9824
  %9836 = getelementptr inbounds float, ptr %f130.host, i64 %9835
  %9837 = load <4 x float>, ptr %9836, align 4, !tbaa !38
  %9838 = fmul <4 x float> %9837, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9839 = fadd <4 x float> %9834, %9838
  %9840 = fmul <4 x float> %9839, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9841 = fadd <4 x float> %9830, %9840
  %9842 = fadd <4 x float> %9816, %9841
  %9843 = shufflevector <4 x float> %9586, <4 x float> %9842, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %9844 = sext i32 %f129.s0.v3.v363.base151.us to i64
  %9845 = add i64 %9305, %9844
  %9846 = getelementptr inbounds float, ptr %9055, i64 %9845
  store <8 x float> %9843, ptr %9846, align 4, !tbaa !64
  %lsr.iv.next425.us = add nsw i32 %lsr.iv424.us, -1
  %lsr.iv.next427.us = add i32 %lsr.iv426.us, 8
  %.not96.us = icmp eq i32 %lsr.iv.next425.us, 0
  br i1 %.not96.us, label %"end for f129.s0.v3.v3149.loopexit.us", label %"for f129.s0.v3.v3148.us"

"end for f129.s0.v3.v3149.loopexit.us":           ; preds = %"for f129.s0.v3.v3148.us"
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %9847 = icmp eq i64 %indvars.iv, %sext
  br i1 %9847, label %"produce f128153", label %"for f129.s0.v4145.us"

"produce f128153":                                ; preds = %"end for f129.s0.v3.v3149.loopexit.us", %"produce f129143"
  %9848 = add nsw i32 %9258, 14
  %9849 = ashr i32 %9848, 3
  %.not79 = icmp sgt i32 %f128.s0.v4.min_2, %9849
  %brmerge444 = select i1 %.not79, i1 true, i1 %9183
  br i1 %brmerge444, label %"produce f127163", label %"for f128.s0.v4155.us.preheader", !prof !27

"for f128.s0.v4155.us.preheader":                 ; preds = %"produce f128153"
  %9850 = sext i32 %f128.s0.v4.min_2 to i64
  %sext294 = sext i32 %9849 to i64
  br label %"for f128.s0.v4155.us"

"for f128.s0.v4155.us":                           ; preds = %"for f128.s0.v4155.us.preheader", %"end for f128.s0.v3.v3159.loopexit.us"
  %indvars.iv292 = phi i64 [ %9850, %"for f128.s0.v4155.us.preheader" ], [ %indvars.iv.next293, %"end for f128.s0.v3.v3159.loopexit.us" ]
  %9851 = trunc i64 %indvars.iv292 to i32
  %9852 = shl i32 %9851, 1
  %9853 = and i32 %9852, 2
  %9854 = ashr i32 %9851, 1
  %t2901.us = add nsw i32 %9853, %9854
  %9855 = trunc i64 %indvars.iv292 to i32
  %9856 = sub i32 %9855, %f74.v4.min_realized
  %9857 = mul i32 %9856, %9184
  %9858 = sub i32 %9857, %f74.v3.min_realized
  %9859 = add nsw i32 %t2901.us, %9185
  %t2908.us = mul nsw i32 %9859, %118
  %9860 = sub nsw i32 %9854, %9180
  %t2910.us = mul nsw i32 %9860, %118
  %9861 = add i32 %t2901.us, %9186
  %9862 = mul nsw i32 %9861, %f7.stride.1
  %9863 = sub nsw i32 %9854, %f7.v4.min_realized
  %9864 = mul nsw i32 %9863, %f7.stride.1
  %9865 = sext i32 %t2910.us to i64
  %9866 = add nsw i64 %9865, -1
  %9867 = sext i32 %t2908.us to i64
  %9868 = add nsw i64 %9867, -1
  %9869 = sub nsw i64 %indvars.iv292, %9195
  %9870 = mul nsw i64 %9869, %9192
  %9871 = add i64 %9870, %.neg200
  %9872 = trunc i64 %indvars.iv292 to i32
  %9873 = sub i32 %9872, %f6.v4.min_realized
  %9874 = mul i32 %9873, %f6.stride.1
  br label %"for f128.s0.v3.v3158.us"

"for f128.s0.v3.v3158.us":                        ; preds = %"for f128.s0.v4155.us", %"for f128.s0.v3.v3158.us"
  %lsr.iv430.us = phi i32 [ %lsr.iv.next431.us, %"for f128.s0.v3.v3158.us" ], [ 0, %"for f128.s0.v4155.us" ]
  %lsr.iv428.us = phi i32 [ %lsr.iv.next429.us, %"for f128.s0.v3.v3158.us" ], [ %9182, %"for f128.s0.v4155.us" ]
  %9875 = add i32 %lsr.iv430.us, %100
  %f128.s0.v3.v343.base161.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %9875)
  %9876 = shl i32 %f128.s0.v3.v343.base161.us, 1
  %9877 = and i32 %9876, 2
  %9878 = ashr i32 %f128.s0.v3.v343.base161.us, 1
  %t2902.us = add nsw i32 %9877, %9878
  %t2903.us = add i32 %9858, %f128.s0.v3.v343.base161.us
  %9879 = sext i32 %t2903.us to i64
  %9880 = getelementptr inbounds float, ptr %f74.host, i64 %9879
  %9881 = load <4 x float>, ptr %9880, align 4, !tbaa !56
  %9882 = add nsw i64 %9879, 4
  %9883 = getelementptr inbounds float, ptr %f74.host, i64 %9882
  %9884 = load <4 x float>, ptr %9883, align 4, !tbaa !56
  %9885 = shufflevector <4 x float> %9881, <4 x float> %9884, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2904.us = fmul <4 x float> %9160, %9885
  %a1094.us = fptosi <4 x float> %t2904.us to <4 x i32>
  %a1097.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1094.us)
  %9886 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1097.us, <4 x i32> zeroinitializer)
  %9887 = sitofp <4 x i32> %9886 to <4 x float>
  %t2906.us = fsub <4 x float> %t2904.us, %9887
  %9888 = sub nsw i32 %f128.s0.v3.v343.base161.us, %f6.v3.min_realized
  %t2911.us = add nsw i32 %9888, %9874
  %t2913.us = sub nsw <4 x i32> %9886, %9169
  %9889 = sub nsw i32 %t2902.us, %f7.v3.min_realized
  %t2916.us = add nsw i32 %9889, %9862
  %t2917.us = mul nsw <4 x i32> %t2913.us, %9176
  %9890 = sub nsw i32 %9878, %f7.v3.min_realized
  %t2919.us = add nsw i32 %9890, %9862
  %t2921.us = add nsw i32 %9889, %9864
  %t2922.us = add nsw i32 %9890, %9864
  %9891 = add nsw <4 x i32> %t2913.us, <i32 1, i32 1, i32 1, i32 1>
  %t2923.us = mul nsw <4 x i32> %9891, %9176
  %9892 = add nsw i32 %f128.s0.v3.v343.base161.us, 1
  %9893 = shl i32 %9892, 1
  %9894 = and i32 %9893, 2
  %9895 = ashr i32 %9892, 1
  %t2924.us = add nsw i32 %9894, %9895
  %9896 = shufflevector <4 x float> %9881, <4 x float> %9884, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2925.us = fmul <4 x float> %9160, %9896
  %a1098.us = fptosi <4 x float> %t2925.us to <4 x i32>
  %a1101.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1098.us)
  %9897 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1101.us, <4 x i32> zeroinitializer)
  %9898 = sitofp <4 x i32> %9897 to <4 x float>
  %t2927.us = fsub <4 x float> %t2925.us, %9898
  %t2930.us = sub nsw <4 x i32> %9897, %9169
  %9899 = sub nsw i32 %t2924.us, %f7.v3.min_realized
  %t2932.us = add nsw i32 %9899, %9862
  %t2933.us = mul nsw <4 x i32> %t2930.us, %9176
  %9900 = sub nsw i32 %9895, %f7.v3.min_realized
  %t2935.us = add nsw i32 %9900, %9862
  %t2936.us = add nsw i32 %9899, %9864
  %t2937.us = add nsw i32 %9900, %9864
  %9901 = add nsw <4 x i32> %t2930.us, <i32 1, i32 1, i32 1, i32 1>
  %t2938.us = mul nsw <4 x i32> %9901, %9176
  %9902 = insertelement <4 x i32> undef, i32 %t2922.us, i64 0
  %9903 = shufflevector <4 x i32> %9902, <4 x i32> undef, <4 x i32> zeroinitializer
  %9904 = add nsw <4 x i32> %9903, <i32 0, i32 1, i32 2, i32 3>
  %9905 = add nsw <4 x i32> %t2923.us, %9904
  %9906 = sext <4 x i32> %9905 to <4 x i64>
  %9907 = extractelement <4 x i64> %9906, i64 0
  %9908 = getelementptr inbounds float, ptr %f7.host, i64 %9907
  %9909 = load float, ptr %9908, align 4, !tbaa !54
  %9910 = insertelement <4 x float> undef, float %9909, i64 0
  %9911 = extractelement <4 x i64> %9906, i64 1
  %9912 = getelementptr inbounds float, ptr %f7.host, i64 %9911
  %9913 = load float, ptr %9912, align 4, !tbaa !54
  %9914 = insertelement <4 x float> %9910, float %9913, i64 1
  %9915 = extractelement <4 x i64> %9906, i64 2
  %9916 = getelementptr inbounds float, ptr %f7.host, i64 %9915
  %9917 = load float, ptr %9916, align 4, !tbaa !54
  %9918 = insertelement <4 x float> %9914, float %9917, i64 2
  %9919 = extractelement <4 x i64> %9906, i64 3
  %9920 = getelementptr inbounds float, ptr %f7.host, i64 %9919
  %9921 = load float, ptr %9920, align 4, !tbaa !54
  %9922 = insertelement <4 x float> %9918, float %9921, i64 3
  %9923 = fmul <4 x float> %9922, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9924 = insertelement <4 x i32> undef, i32 %t2921.us, i64 0
  %9925 = shufflevector <4 x i32> %9924, <4 x i32> undef, <4 x i32> zeroinitializer
  %9926 = add <4 x i32> %9925, <i32 -1, i32 0, i32 1, i32 2>
  %9927 = add <4 x i32> %9926, %t2923.us
  %9928 = sext <4 x i32> %9927 to <4 x i64>
  %9929 = extractelement <4 x i64> %9928, i64 0
  %9930 = getelementptr inbounds float, ptr %f7.host, i64 %9929
  %9931 = load float, ptr %9930, align 4, !tbaa !54
  %9932 = insertelement <4 x float> undef, float %9931, i64 0
  %9933 = extractelement <4 x i64> %9928, i64 1
  %9934 = getelementptr inbounds float, ptr %f7.host, i64 %9933
  %9935 = load float, ptr %9934, align 4, !tbaa !54
  %9936 = insertelement <4 x float> %9932, float %9935, i64 1
  %9937 = extractelement <4 x i64> %9928, i64 2
  %9938 = getelementptr inbounds float, ptr %f7.host, i64 %9937
  %9939 = load float, ptr %9938, align 4, !tbaa !54
  %9940 = insertelement <4 x float> %9936, float %9939, i64 2
  %9941 = extractelement <4 x i64> %9928, i64 3
  %9942 = getelementptr inbounds float, ptr %f7.host, i64 %9941
  %9943 = load float, ptr %9942, align 4, !tbaa !54
  %9944 = insertelement <4 x float> %9940, float %9943, i64 3
  %9945 = fmul <4 x float> %9944, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9946 = fadd <4 x float> %9923, %9945
  %9947 = fmul <4 x float> %9946, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9948 = insertelement <4 x i32> undef, i32 %t2919.us, i64 0
  %9949 = shufflevector <4 x i32> %9948, <4 x i32> undef, <4 x i32> zeroinitializer
  %9950 = add nsw <4 x i32> %9949, <i32 0, i32 1, i32 2, i32 3>
  %9951 = add nsw <4 x i32> %t2923.us, %9950
  %9952 = sext <4 x i32> %9951 to <4 x i64>
  %9953 = extractelement <4 x i64> %9952, i64 0
  %9954 = getelementptr inbounds float, ptr %f7.host, i64 %9953
  %9955 = load float, ptr %9954, align 4, !tbaa !54
  %9956 = insertelement <4 x float> undef, float %9955, i64 0
  %9957 = extractelement <4 x i64> %9952, i64 1
  %9958 = getelementptr inbounds float, ptr %f7.host, i64 %9957
  %9959 = load float, ptr %9958, align 4, !tbaa !54
  %9960 = insertelement <4 x float> %9956, float %9959, i64 1
  %9961 = extractelement <4 x i64> %9952, i64 2
  %9962 = getelementptr inbounds float, ptr %f7.host, i64 %9961
  %9963 = load float, ptr %9962, align 4, !tbaa !54
  %9964 = insertelement <4 x float> %9960, float %9963, i64 2
  %9965 = extractelement <4 x i64> %9952, i64 3
  %9966 = getelementptr inbounds float, ptr %f7.host, i64 %9965
  %9967 = load float, ptr %9966, align 4, !tbaa !54
  %9968 = insertelement <4 x float> %9964, float %9967, i64 3
  %9969 = fmul <4 x float> %9968, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9970 = insertelement <4 x i32> undef, i32 %t2916.us, i64 0
  %9971 = shufflevector <4 x i32> %9970, <4 x i32> undef, <4 x i32> zeroinitializer
  %9972 = add <4 x i32> %9971, <i32 -1, i32 0, i32 1, i32 2>
  %9973 = add <4 x i32> %9972, %t2923.us
  %9974 = sext <4 x i32> %9973 to <4 x i64>
  %9975 = extractelement <4 x i64> %9974, i64 0
  %9976 = getelementptr inbounds float, ptr %f7.host, i64 %9975
  %9977 = load float, ptr %9976, align 4, !tbaa !54
  %9978 = insertelement <4 x float> undef, float %9977, i64 0
  %9979 = extractelement <4 x i64> %9974, i64 1
  %9980 = getelementptr inbounds float, ptr %f7.host, i64 %9979
  %9981 = load float, ptr %9980, align 4, !tbaa !54
  %9982 = insertelement <4 x float> %9978, float %9981, i64 1
  %9983 = extractelement <4 x i64> %9974, i64 2
  %9984 = getelementptr inbounds float, ptr %f7.host, i64 %9983
  %9985 = load float, ptr %9984, align 4, !tbaa !54
  %9986 = insertelement <4 x float> %9982, float %9985, i64 2
  %9987 = extractelement <4 x i64> %9974, i64 3
  %9988 = getelementptr inbounds float, ptr %f7.host, i64 %9987
  %9989 = load float, ptr %9988, align 4, !tbaa !54
  %9990 = insertelement <4 x float> %9986, float %9989, i64 3
  %9991 = fmul <4 x float> %9990, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9992 = fadd <4 x float> %9969, %9991
  %9993 = fmul <4 x float> %9992, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9994 = fadd <4 x float> %9947, %9993
  %9995 = mul nsw <4 x i32> %9891, %9189
  %9996 = insertelement <4 x i32> undef, i32 %t2911.us, i64 0
  %9997 = shufflevector <4 x i32> %9996, <4 x i32> undef, <4 x i32> zeroinitializer
  %9998 = add nsw <4 x i32> %9997, <i32 0, i32 2, i32 4, i32 6>
  %9999 = add nsw <4 x i32> %9995, %9998
  %10000 = sext <4 x i32> %9999 to <4 x i64>
  %10001 = extractelement <4 x i64> %10000, i64 0
  %10002 = getelementptr inbounds float, ptr %f6.host, i64 %10001
  %10003 = load float, ptr %10002, align 4, !tbaa !50
  %10004 = insertelement <4 x float> undef, float %10003, i64 0
  %10005 = extractelement <4 x i64> %10000, i64 1
  %10006 = getelementptr inbounds float, ptr %f6.host, i64 %10005
  %10007 = load float, ptr %10006, align 4, !tbaa !50
  %10008 = insertelement <4 x float> %10004, float %10007, i64 1
  %10009 = extractelement <4 x i64> %10000, i64 2
  %10010 = getelementptr inbounds float, ptr %f6.host, i64 %10009
  %10011 = load float, ptr %10010, align 4, !tbaa !50
  %10012 = insertelement <4 x float> %10008, float %10011, i64 2
  %10013 = extractelement <4 x i64> %10000, i64 3
  %10014 = getelementptr inbounds float, ptr %f6.host, i64 %10013
  %10015 = load float, ptr %10014, align 4, !tbaa !50
  %10016 = insertelement <4 x float> %10012, float %10015, i64 3
  %10017 = fsub <4 x float> %10016, %9994
  %10018 = fmul <4 x float> %t2906.us, %10017
  %10019 = add nsw <4 x i32> %t2917.us, %9904
  %10020 = sext <4 x i32> %10019 to <4 x i64>
  %10021 = extractelement <4 x i64> %10020, i64 0
  %10022 = getelementptr inbounds float, ptr %f7.host, i64 %10021
  %10023 = load float, ptr %10022, align 4, !tbaa !54
  %10024 = insertelement <4 x float> undef, float %10023, i64 0
  %10025 = extractelement <4 x i64> %10020, i64 1
  %10026 = getelementptr inbounds float, ptr %f7.host, i64 %10025
  %10027 = load float, ptr %10026, align 4, !tbaa !54
  %10028 = insertelement <4 x float> %10024, float %10027, i64 1
  %10029 = extractelement <4 x i64> %10020, i64 2
  %10030 = getelementptr inbounds float, ptr %f7.host, i64 %10029
  %10031 = load float, ptr %10030, align 4, !tbaa !54
  %10032 = insertelement <4 x float> %10028, float %10031, i64 2
  %10033 = extractelement <4 x i64> %10020, i64 3
  %10034 = getelementptr inbounds float, ptr %f7.host, i64 %10033
  %10035 = load float, ptr %10034, align 4, !tbaa !54
  %10036 = insertelement <4 x float> %10032, float %10035, i64 3
  %10037 = fmul <4 x float> %10036, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10038 = add <4 x i32> %t2917.us, %9925
  %10039 = add <4 x i32> %10038, <i32 -1, i32 0, i32 1, i32 2>
  %10040 = sext <4 x i32> %10039 to <4 x i64>
  %10041 = extractelement <4 x i64> %10040, i64 0
  %10042 = getelementptr inbounds float, ptr %f7.host, i64 %10041
  %10043 = load float, ptr %10042, align 4, !tbaa !54
  %10044 = insertelement <4 x float> undef, float %10043, i64 0
  %10045 = extractelement <4 x i64> %10040, i64 1
  %10046 = getelementptr inbounds float, ptr %f7.host, i64 %10045
  %10047 = load float, ptr %10046, align 4, !tbaa !54
  %10048 = insertelement <4 x float> %10044, float %10047, i64 1
  %10049 = extractelement <4 x i64> %10040, i64 2
  %10050 = getelementptr inbounds float, ptr %f7.host, i64 %10049
  %10051 = load float, ptr %10050, align 4, !tbaa !54
  %10052 = insertelement <4 x float> %10048, float %10051, i64 2
  %10053 = extractelement <4 x i64> %10040, i64 3
  %10054 = getelementptr inbounds float, ptr %f7.host, i64 %10053
  %10055 = load float, ptr %10054, align 4, !tbaa !54
  %10056 = insertelement <4 x float> %10052, float %10055, i64 3
  %10057 = fmul <4 x float> %10056, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10058 = fadd <4 x float> %10037, %10057
  %10059 = fmul <4 x float> %10058, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10060 = add nsw <4 x i32> %t2917.us, %9950
  %10061 = sext <4 x i32> %10060 to <4 x i64>
  %10062 = extractelement <4 x i64> %10061, i64 0
  %10063 = getelementptr inbounds float, ptr %f7.host, i64 %10062
  %10064 = load float, ptr %10063, align 4, !tbaa !54
  %10065 = insertelement <4 x float> undef, float %10064, i64 0
  %10066 = extractelement <4 x i64> %10061, i64 1
  %10067 = getelementptr inbounds float, ptr %f7.host, i64 %10066
  %10068 = load float, ptr %10067, align 4, !tbaa !54
  %10069 = insertelement <4 x float> %10065, float %10068, i64 1
  %10070 = extractelement <4 x i64> %10061, i64 2
  %10071 = getelementptr inbounds float, ptr %f7.host, i64 %10070
  %10072 = load float, ptr %10071, align 4, !tbaa !54
  %10073 = insertelement <4 x float> %10069, float %10072, i64 2
  %10074 = extractelement <4 x i64> %10061, i64 3
  %10075 = getelementptr inbounds float, ptr %f7.host, i64 %10074
  %10076 = load float, ptr %10075, align 4, !tbaa !54
  %10077 = insertelement <4 x float> %10073, float %10076, i64 3
  %10078 = fmul <4 x float> %10077, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10079 = add <4 x i32> %t2917.us, %9971
  %10080 = add <4 x i32> %10079, <i32 -1, i32 0, i32 1, i32 2>
  %10081 = sext <4 x i32> %10080 to <4 x i64>
  %10082 = extractelement <4 x i64> %10081, i64 0
  %10083 = getelementptr inbounds float, ptr %f7.host, i64 %10082
  %10084 = load float, ptr %10083, align 4, !tbaa !54
  %10085 = insertelement <4 x float> undef, float %10084, i64 0
  %10086 = extractelement <4 x i64> %10081, i64 1
  %10087 = getelementptr inbounds float, ptr %f7.host, i64 %10086
  %10088 = load float, ptr %10087, align 4, !tbaa !54
  %10089 = insertelement <4 x float> %10085, float %10088, i64 1
  %10090 = extractelement <4 x i64> %10081, i64 2
  %10091 = getelementptr inbounds float, ptr %f7.host, i64 %10090
  %10092 = load float, ptr %10091, align 4, !tbaa !54
  %10093 = insertelement <4 x float> %10089, float %10092, i64 2
  %10094 = extractelement <4 x i64> %10081, i64 3
  %10095 = getelementptr inbounds float, ptr %f7.host, i64 %10094
  %10096 = load float, ptr %10095, align 4, !tbaa !54
  %10097 = insertelement <4 x float> %10093, float %10096, i64 3
  %10098 = fmul <4 x float> %10097, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10099 = fadd <4 x float> %10078, %10098
  %10100 = fmul <4 x float> %10099, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10101 = fadd <4 x float> %10059, %10100
  %10102 = mul nsw <4 x i32> %t2913.us, %9189
  %10103 = add nsw <4 x i32> %10102, %9998
  %10104 = sext <4 x i32> %10103 to <4 x i64>
  %10105 = extractelement <4 x i64> %10104, i64 0
  %10106 = getelementptr inbounds float, ptr %f6.host, i64 %10105
  %10107 = load float, ptr %10106, align 4, !tbaa !50
  %10108 = insertelement <4 x float> undef, float %10107, i64 0
  %10109 = extractelement <4 x i64> %10104, i64 1
  %10110 = getelementptr inbounds float, ptr %f6.host, i64 %10109
  %10111 = load float, ptr %10110, align 4, !tbaa !50
  %10112 = insertelement <4 x float> %10108, float %10111, i64 1
  %10113 = extractelement <4 x i64> %10104, i64 2
  %10114 = getelementptr inbounds float, ptr %f6.host, i64 %10113
  %10115 = load float, ptr %10114, align 4, !tbaa !50
  %10116 = insertelement <4 x float> %10112, float %10115, i64 2
  %10117 = extractelement <4 x i64> %10104, i64 3
  %10118 = getelementptr inbounds float, ptr %f6.host, i64 %10117
  %10119 = load float, ptr %10118, align 4, !tbaa !50
  %10120 = insertelement <4 x float> %10116, float %10119, i64 3
  %10121 = fsub <4 x float> %10120, %10101
  %10122 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2906.us
  %10123 = fmul <4 x float> %10122, %10121
  %10124 = fadd <4 x float> %10018, %10123
  %narrow92.us = sub nsw i32 %9878, %f129.v3.min_realized
  %10125 = sext i32 %narrow92.us to i64
  %10126 = add nsw i64 %10125, %9865
  %10127 = getelementptr inbounds float, ptr %9055, i64 %10126
  %10128 = load <4 x float>, ptr %10127, align 4, !tbaa !64
  %10129 = fmul <4 x float> %10128, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10130 = sext i32 %t2902.us to i64
  %10131 = sub nsw i64 %10130, %9190
  %10132 = add nsw i64 %9866, %10131
  %10133 = getelementptr inbounds float, ptr %9055, i64 %10132
  %10134 = load <4 x float>, ptr %10133, align 4, !tbaa !64
  %10135 = fmul <4 x float> %10134, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10136 = fadd <4 x float> %10129, %10135
  %10137 = fmul <4 x float> %10136, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10138 = add nsw i64 %10125, %9867
  %10139 = getelementptr inbounds float, ptr %9055, i64 %10138
  %10140 = load <4 x float>, ptr %10139, align 4, !tbaa !64
  %10141 = fmul <4 x float> %10140, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10142 = add nsw i64 %9868, %10131
  %10143 = getelementptr inbounds float, ptr %9055, i64 %10142
  %10144 = load <4 x float>, ptr %10143, align 4, !tbaa !64
  %10145 = fmul <4 x float> %10144, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10146 = fadd <4 x float> %10141, %10145
  %10147 = fmul <4 x float> %10146, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10148 = fadd <4 x float> %10137, %10147
  %10149 = fadd <4 x float> %10124, %10148
  %10150 = insertelement <4 x i32> undef, i32 %t2937.us, i64 0
  %10151 = shufflevector <4 x i32> %10150, <4 x i32> undef, <4 x i32> zeroinitializer
  %10152 = add nsw <4 x i32> %10151, <i32 0, i32 1, i32 2, i32 3>
  %10153 = add nsw <4 x i32> %t2938.us, %10152
  %10154 = sext <4 x i32> %10153 to <4 x i64>
  %10155 = extractelement <4 x i64> %10154, i64 0
  %10156 = getelementptr inbounds float, ptr %f7.host, i64 %10155
  %10157 = load float, ptr %10156, align 4, !tbaa !54
  %10158 = insertelement <4 x float> undef, float %10157, i64 0
  %10159 = extractelement <4 x i64> %10154, i64 1
  %10160 = getelementptr inbounds float, ptr %f7.host, i64 %10159
  %10161 = load float, ptr %10160, align 4, !tbaa !54
  %10162 = insertelement <4 x float> %10158, float %10161, i64 1
  %10163 = extractelement <4 x i64> %10154, i64 2
  %10164 = getelementptr inbounds float, ptr %f7.host, i64 %10163
  %10165 = load float, ptr %10164, align 4, !tbaa !54
  %10166 = insertelement <4 x float> %10162, float %10165, i64 2
  %10167 = extractelement <4 x i64> %10154, i64 3
  %10168 = getelementptr inbounds float, ptr %f7.host, i64 %10167
  %10169 = load float, ptr %10168, align 4, !tbaa !54
  %10170 = insertelement <4 x float> %10166, float %10169, i64 3
  %10171 = fmul <4 x float> %10170, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10172 = insertelement <4 x i32> undef, i32 %t2936.us, i64 0
  %10173 = shufflevector <4 x i32> %10172, <4 x i32> undef, <4 x i32> zeroinitializer
  %10174 = add nsw <4 x i32> %10173, <i32 0, i32 1, i32 2, i32 3>
  %10175 = add <4 x i32> %t2938.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10176 = add <4 x i32> %10175, %10174
  %10177 = sext <4 x i32> %10176 to <4 x i64>
  %10178 = extractelement <4 x i64> %10177, i64 0
  %10179 = getelementptr inbounds float, ptr %f7.host, i64 %10178
  %10180 = load float, ptr %10179, align 4, !tbaa !54
  %10181 = insertelement <4 x float> undef, float %10180, i64 0
  %10182 = extractelement <4 x i64> %10177, i64 1
  %10183 = getelementptr inbounds float, ptr %f7.host, i64 %10182
  %10184 = load float, ptr %10183, align 4, !tbaa !54
  %10185 = insertelement <4 x float> %10181, float %10184, i64 1
  %10186 = extractelement <4 x i64> %10177, i64 2
  %10187 = getelementptr inbounds float, ptr %f7.host, i64 %10186
  %10188 = load float, ptr %10187, align 4, !tbaa !54
  %10189 = insertelement <4 x float> %10185, float %10188, i64 2
  %10190 = extractelement <4 x i64> %10177, i64 3
  %10191 = getelementptr inbounds float, ptr %f7.host, i64 %10190
  %10192 = load float, ptr %10191, align 4, !tbaa !54
  %10193 = insertelement <4 x float> %10189, float %10192, i64 3
  %10194 = fmul <4 x float> %10193, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10195 = fadd <4 x float> %10171, %10194
  %10196 = fmul <4 x float> %10195, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10197 = insertelement <4 x i32> undef, i32 %t2935.us, i64 0
  %10198 = shufflevector <4 x i32> %10197, <4 x i32> undef, <4 x i32> zeroinitializer
  %10199 = add nsw <4 x i32> %10198, <i32 0, i32 1, i32 2, i32 3>
  %10200 = add nsw <4 x i32> %t2938.us, %10199
  %10201 = sext <4 x i32> %10200 to <4 x i64>
  %10202 = extractelement <4 x i64> %10201, i64 0
  %10203 = getelementptr inbounds float, ptr %f7.host, i64 %10202
  %10204 = load float, ptr %10203, align 4, !tbaa !54
  %10205 = insertelement <4 x float> undef, float %10204, i64 0
  %10206 = extractelement <4 x i64> %10201, i64 1
  %10207 = getelementptr inbounds float, ptr %f7.host, i64 %10206
  %10208 = load float, ptr %10207, align 4, !tbaa !54
  %10209 = insertelement <4 x float> %10205, float %10208, i64 1
  %10210 = extractelement <4 x i64> %10201, i64 2
  %10211 = getelementptr inbounds float, ptr %f7.host, i64 %10210
  %10212 = load float, ptr %10211, align 4, !tbaa !54
  %10213 = insertelement <4 x float> %10209, float %10212, i64 2
  %10214 = extractelement <4 x i64> %10201, i64 3
  %10215 = getelementptr inbounds float, ptr %f7.host, i64 %10214
  %10216 = load float, ptr %10215, align 4, !tbaa !54
  %10217 = insertelement <4 x float> %10213, float %10216, i64 3
  %10218 = fmul <4 x float> %10217, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10219 = insertelement <4 x i32> undef, i32 %t2932.us, i64 0
  %10220 = shufflevector <4 x i32> %10219, <4 x i32> undef, <4 x i32> zeroinitializer
  %10221 = add nsw <4 x i32> %10220, <i32 0, i32 1, i32 2, i32 3>
  %10222 = add <4 x i32> %10175, %10221
  %10223 = sext <4 x i32> %10222 to <4 x i64>
  %10224 = extractelement <4 x i64> %10223, i64 0
  %10225 = getelementptr inbounds float, ptr %f7.host, i64 %10224
  %10226 = load float, ptr %10225, align 4, !tbaa !54
  %10227 = insertelement <4 x float> undef, float %10226, i64 0
  %10228 = extractelement <4 x i64> %10223, i64 1
  %10229 = getelementptr inbounds float, ptr %f7.host, i64 %10228
  %10230 = load float, ptr %10229, align 4, !tbaa !54
  %10231 = insertelement <4 x float> %10227, float %10230, i64 1
  %10232 = extractelement <4 x i64> %10223, i64 2
  %10233 = getelementptr inbounds float, ptr %f7.host, i64 %10232
  %10234 = load float, ptr %10233, align 4, !tbaa !54
  %10235 = insertelement <4 x float> %10231, float %10234, i64 2
  %10236 = extractelement <4 x i64> %10223, i64 3
  %10237 = getelementptr inbounds float, ptr %f7.host, i64 %10236
  %10238 = load float, ptr %10237, align 4, !tbaa !54
  %10239 = insertelement <4 x float> %10235, float %10238, i64 3
  %10240 = fmul <4 x float> %10239, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10241 = fadd <4 x float> %10218, %10240
  %10242 = fmul <4 x float> %10241, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10243 = fadd <4 x float> %10196, %10242
  %10244 = mul nsw <4 x i32> %9901, %9189
  %10245 = add nsw i32 %t2911.us, 1
  %10246 = insertelement <4 x i32> undef, i32 %10245, i64 0
  %10247 = shufflevector <4 x i32> %10246, <4 x i32> undef, <4 x i32> zeroinitializer
  %10248 = add nsw <4 x i32> %10247, <i32 0, i32 2, i32 4, i32 6>
  %10249 = add nsw <4 x i32> %10244, %10248
  %10250 = sext <4 x i32> %10249 to <4 x i64>
  %10251 = extractelement <4 x i64> %10250, i64 0
  %10252 = getelementptr inbounds float, ptr %f6.host, i64 %10251
  %10253 = load float, ptr %10252, align 4, !tbaa !50
  %10254 = insertelement <4 x float> undef, float %10253, i64 0
  %10255 = extractelement <4 x i64> %10250, i64 1
  %10256 = getelementptr inbounds float, ptr %f6.host, i64 %10255
  %10257 = load float, ptr %10256, align 4, !tbaa !50
  %10258 = insertelement <4 x float> %10254, float %10257, i64 1
  %10259 = extractelement <4 x i64> %10250, i64 2
  %10260 = getelementptr inbounds float, ptr %f6.host, i64 %10259
  %10261 = load float, ptr %10260, align 4, !tbaa !50
  %10262 = insertelement <4 x float> %10258, float %10261, i64 2
  %10263 = extractelement <4 x i64> %10250, i64 3
  %10264 = getelementptr inbounds float, ptr %f6.host, i64 %10263
  %10265 = load float, ptr %10264, align 4, !tbaa !50
  %10266 = insertelement <4 x float> %10262, float %10265, i64 3
  %10267 = fsub <4 x float> %10266, %10243
  %10268 = fmul <4 x float> %t2927.us, %10267
  %10269 = add nsw <4 x i32> %t2933.us, %10152
  %10270 = sext <4 x i32> %10269 to <4 x i64>
  %10271 = extractelement <4 x i64> %10270, i64 0
  %10272 = getelementptr inbounds float, ptr %f7.host, i64 %10271
  %10273 = load float, ptr %10272, align 4, !tbaa !54
  %10274 = insertelement <4 x float> undef, float %10273, i64 0
  %10275 = extractelement <4 x i64> %10270, i64 1
  %10276 = getelementptr inbounds float, ptr %f7.host, i64 %10275
  %10277 = load float, ptr %10276, align 4, !tbaa !54
  %10278 = insertelement <4 x float> %10274, float %10277, i64 1
  %10279 = extractelement <4 x i64> %10270, i64 2
  %10280 = getelementptr inbounds float, ptr %f7.host, i64 %10279
  %10281 = load float, ptr %10280, align 4, !tbaa !54
  %10282 = insertelement <4 x float> %10278, float %10281, i64 2
  %10283 = extractelement <4 x i64> %10270, i64 3
  %10284 = getelementptr inbounds float, ptr %f7.host, i64 %10283
  %10285 = load float, ptr %10284, align 4, !tbaa !54
  %10286 = insertelement <4 x float> %10282, float %10285, i64 3
  %10287 = fmul <4 x float> %10286, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10288 = add <4 x i32> %t2933.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10289 = add <4 x i32> %10288, %10174
  %10290 = sext <4 x i32> %10289 to <4 x i64>
  %10291 = extractelement <4 x i64> %10290, i64 0
  %10292 = getelementptr inbounds float, ptr %f7.host, i64 %10291
  %10293 = load float, ptr %10292, align 4, !tbaa !54
  %10294 = insertelement <4 x float> undef, float %10293, i64 0
  %10295 = extractelement <4 x i64> %10290, i64 1
  %10296 = getelementptr inbounds float, ptr %f7.host, i64 %10295
  %10297 = load float, ptr %10296, align 4, !tbaa !54
  %10298 = insertelement <4 x float> %10294, float %10297, i64 1
  %10299 = extractelement <4 x i64> %10290, i64 2
  %10300 = getelementptr inbounds float, ptr %f7.host, i64 %10299
  %10301 = load float, ptr %10300, align 4, !tbaa !54
  %10302 = insertelement <4 x float> %10298, float %10301, i64 2
  %10303 = extractelement <4 x i64> %10290, i64 3
  %10304 = getelementptr inbounds float, ptr %f7.host, i64 %10303
  %10305 = load float, ptr %10304, align 4, !tbaa !54
  %10306 = insertelement <4 x float> %10302, float %10305, i64 3
  %10307 = fmul <4 x float> %10306, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10308 = fadd <4 x float> %10287, %10307
  %10309 = fmul <4 x float> %10308, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10310 = add nsw <4 x i32> %t2933.us, %10199
  %10311 = sext <4 x i32> %10310 to <4 x i64>
  %10312 = extractelement <4 x i64> %10311, i64 0
  %10313 = getelementptr inbounds float, ptr %f7.host, i64 %10312
  %10314 = load float, ptr %10313, align 4, !tbaa !54
  %10315 = insertelement <4 x float> undef, float %10314, i64 0
  %10316 = extractelement <4 x i64> %10311, i64 1
  %10317 = getelementptr inbounds float, ptr %f7.host, i64 %10316
  %10318 = load float, ptr %10317, align 4, !tbaa !54
  %10319 = insertelement <4 x float> %10315, float %10318, i64 1
  %10320 = extractelement <4 x i64> %10311, i64 2
  %10321 = getelementptr inbounds float, ptr %f7.host, i64 %10320
  %10322 = load float, ptr %10321, align 4, !tbaa !54
  %10323 = insertelement <4 x float> %10319, float %10322, i64 2
  %10324 = extractelement <4 x i64> %10311, i64 3
  %10325 = getelementptr inbounds float, ptr %f7.host, i64 %10324
  %10326 = load float, ptr %10325, align 4, !tbaa !54
  %10327 = insertelement <4 x float> %10323, float %10326, i64 3
  %10328 = fmul <4 x float> %10327, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10329 = add <4 x i32> %10288, %10221
  %10330 = sext <4 x i32> %10329 to <4 x i64>
  %10331 = extractelement <4 x i64> %10330, i64 0
  %10332 = getelementptr inbounds float, ptr %f7.host, i64 %10331
  %10333 = load float, ptr %10332, align 4, !tbaa !54
  %10334 = insertelement <4 x float> undef, float %10333, i64 0
  %10335 = extractelement <4 x i64> %10330, i64 1
  %10336 = getelementptr inbounds float, ptr %f7.host, i64 %10335
  %10337 = load float, ptr %10336, align 4, !tbaa !54
  %10338 = insertelement <4 x float> %10334, float %10337, i64 1
  %10339 = extractelement <4 x i64> %10330, i64 2
  %10340 = getelementptr inbounds float, ptr %f7.host, i64 %10339
  %10341 = load float, ptr %10340, align 4, !tbaa !54
  %10342 = insertelement <4 x float> %10338, float %10341, i64 2
  %10343 = extractelement <4 x i64> %10330, i64 3
  %10344 = getelementptr inbounds float, ptr %f7.host, i64 %10343
  %10345 = load float, ptr %10344, align 4, !tbaa !54
  %10346 = insertelement <4 x float> %10342, float %10345, i64 3
  %10347 = fmul <4 x float> %10346, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10348 = fadd <4 x float> %10328, %10347
  %10349 = fmul <4 x float> %10348, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10350 = fadd <4 x float> %10309, %10349
  %10351 = mul nsw <4 x i32> %t2930.us, %9189
  %10352 = add nsw <4 x i32> %10351, %10248
  %10353 = sext <4 x i32> %10352 to <4 x i64>
  %10354 = extractelement <4 x i64> %10353, i64 0
  %10355 = getelementptr inbounds float, ptr %f6.host, i64 %10354
  %10356 = load float, ptr %10355, align 4, !tbaa !50
  %10357 = insertelement <4 x float> undef, float %10356, i64 0
  %10358 = extractelement <4 x i64> %10353, i64 1
  %10359 = getelementptr inbounds float, ptr %f6.host, i64 %10358
  %10360 = load float, ptr %10359, align 4, !tbaa !50
  %10361 = insertelement <4 x float> %10357, float %10360, i64 1
  %10362 = extractelement <4 x i64> %10353, i64 2
  %10363 = getelementptr inbounds float, ptr %f6.host, i64 %10362
  %10364 = load float, ptr %10363, align 4, !tbaa !50
  %10365 = insertelement <4 x float> %10361, float %10364, i64 2
  %10366 = extractelement <4 x i64> %10353, i64 3
  %10367 = getelementptr inbounds float, ptr %f6.host, i64 %10366
  %10368 = load float, ptr %10367, align 4, !tbaa !50
  %10369 = insertelement <4 x float> %10365, float %10368, i64 3
  %10370 = fsub <4 x float> %10369, %10350
  %10371 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2927.us
  %10372 = fmul <4 x float> %10371, %10370
  %10373 = fadd <4 x float> %10268, %10372
  %narrow93.us = sub nsw i32 %9895, %f129.v3.min_realized
  %10374 = sext i32 %narrow93.us to i64
  %10375 = add nsw i64 %10374, %9865
  %10376 = getelementptr inbounds float, ptr %9055, i64 %10375
  %10377 = load <4 x float>, ptr %10376, align 4, !tbaa !64
  %10378 = fmul <4 x float> %10377, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10379 = sext i32 %t2924.us to i64
  %10380 = sub nsw i64 %10379, %9190
  %10381 = add nsw i64 %9866, %10380
  %10382 = getelementptr inbounds float, ptr %9055, i64 %10381
  %10383 = load <4 x float>, ptr %10382, align 4, !tbaa !64
  %10384 = fmul <4 x float> %10383, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10385 = fadd <4 x float> %10378, %10384
  %10386 = fmul <4 x float> %10385, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10387 = add nsw i64 %10374, %9867
  %10388 = getelementptr inbounds float, ptr %9055, i64 %10387
  %10389 = load <4 x float>, ptr %10388, align 4, !tbaa !64
  %10390 = fmul <4 x float> %10389, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10391 = add nsw i64 %9868, %10380
  %10392 = getelementptr inbounds float, ptr %9055, i64 %10391
  %10393 = load <4 x float>, ptr %10392, align 4, !tbaa !64
  %10394 = fmul <4 x float> %10393, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10395 = fadd <4 x float> %10390, %10394
  %10396 = fmul <4 x float> %10395, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10397 = fadd <4 x float> %10386, %10396
  %10398 = fadd <4 x float> %10373, %10397
  %10399 = shufflevector <4 x float> %10149, <4 x float> %10398, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %10400 = sext i32 %f128.s0.v3.v343.base161.us to i64
  %10401 = add i64 %9871, %10400
  %10402 = getelementptr inbounds float, ptr %9078, i64 %10401
  store <8 x float> %10399, ptr %10402, align 4, !tbaa !66
  %lsr.iv.next429.us = add nsw i32 %lsr.iv428.us, -1
  %lsr.iv.next431.us = add i32 %lsr.iv430.us, 8
  %.not94.us = icmp eq i32 %lsr.iv.next429.us, 0
  br i1 %.not94.us, label %"end for f128.s0.v3.v3159.loopexit.us", label %"for f128.s0.v3.v3158.us"

"end for f128.s0.v3.v3159.loopexit.us":           ; preds = %"for f128.s0.v3.v3158.us"
  %indvars.iv.next293 = add nsw i64 %indvars.iv292, 1
  %10403 = icmp eq i64 %indvars.iv292, %sext294
  br i1 %10403, label %"produce f127163", label %"for f128.s0.v4155.us"

"produce f127163":                                ; preds = %"end for f128.s0.v3.v3159.loopexit.us", %"produce f128153"
  %10404 = add nsw i32 %9258, 6
  %10405 = ashr i32 %10404, 2
  %.not80 = icmp sgt i32 %f127.s0.v4.min_2, %10405
  %brmerge446 = select i1 %.not80, i1 true, i1 %9197
  br i1 %brmerge446, label %"produce f126173", label %"for f127.s0.v4165.us.preheader", !prof !27

"for f127.s0.v4165.us.preheader":                 ; preds = %"produce f127163"
  %10406 = sext i32 %f127.s0.v4.min_2 to i64
  %sext298 = sext i32 %10405 to i64
  br label %"for f127.s0.v4165.us"

"for f127.s0.v4165.us":                           ; preds = %"for f127.s0.v4165.us.preheader", %"end for f127.s0.v3.v3169.loopexit.us"
  %indvars.iv296 = phi i64 [ %10406, %"for f127.s0.v4165.us.preheader" ], [ %indvars.iv.next297, %"end for f127.s0.v3.v3169.loopexit.us" ]
  %10407 = trunc i64 %indvars.iv296 to i32
  %10408 = shl i32 %10407, 1
  %10409 = and i32 %10408, 2
  %10410 = ashr i32 %10407, 1
  %t2939.us = add nsw i32 %10409, %10410
  %10411 = trunc i64 %indvars.iv296 to i32
  %10412 = sub i32 %10411, %f73.v4.min_realized
  %10413 = mul i32 %10412, %9198
  %10414 = sub i32 %10413, %f73.v3.min_realized
  %10415 = add nsw i32 %t2939.us, %9199
  %t2946.us = mul nsw i32 %10415, %9071
  %10416 = sub nsw i32 %10410, %9194
  %t2948.us = mul nsw i32 %10416, %9071
  %10417 = add i32 %t2939.us, %9200
  %10418 = mul nsw i32 %10417, %f6.stride.1
  %10419 = sub nsw i32 %10410, %f6.v4.min_realized
  %10420 = mul nsw i32 %10419, %f6.stride.1
  %10421 = sext i32 %t2948.us to i64
  %10422 = add nsw i64 %10421, -1
  %10423 = sext i32 %t2946.us to i64
  %10424 = add nsw i64 %10423, -1
  %10425 = sub nsw i64 %indvars.iv296, %9207
  %10426 = mul nsw i64 %10425, %9206
  %10427 = sub i64 %10426, %9208
  %10428 = trunc i64 %indvars.iv296 to i32
  %10429 = sub i32 %10428, %f5.v4.min_realized
  %10430 = mul i32 %10429, %f5.stride.1
  br label %"for f127.s0.v3.v3168.us"

"for f127.s0.v3.v3168.us":                        ; preds = %"for f127.s0.v4165.us", %"for f127.s0.v3.v3168.us"
  %lsr.iv434.us = phi i32 [ %lsr.iv.next435.us, %"for f127.s0.v3.v3168.us" ], [ 0, %"for f127.s0.v4165.us" ]
  %lsr.iv432.us = phi i32 [ %lsr.iv.next433.us, %"for f127.s0.v3.v3168.us" ], [ %9196, %"for f127.s0.v4165.us" ]
  %10431 = add i32 %lsr.iv434.us, %9059
  %f127.s0.v3.v323.base171.us = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %10431)
  %10432 = shl i32 %f127.s0.v3.v323.base171.us, 1
  %10433 = and i32 %10432, 2
  %10434 = ashr i32 %f127.s0.v3.v323.base171.us, 1
  %t2940.us = add nsw i32 %10433, %10434
  %t2941.us = add i32 %10414, %f127.s0.v3.v323.base171.us
  %10435 = sext i32 %t2941.us to i64
  %10436 = getelementptr inbounds float, ptr %f73.host, i64 %10435
  %10437 = load <4 x float>, ptr %10436, align 4, !tbaa !52
  %10438 = add nsw i64 %10435, 4
  %10439 = getelementptr inbounds float, ptr %f73.host, i64 %10438
  %10440 = load <4 x float>, ptr %10439, align 4, !tbaa !52
  %10441 = shufflevector <4 x float> %10437, <4 x float> %10440, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2942.us = fmul <4 x float> %9160, %10441
  %a1103.us = fptosi <4 x float> %t2942.us to <4 x i32>
  %a1106.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1103.us)
  %10442 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1106.us, <4 x i32> zeroinitializer)
  %10443 = sitofp <4 x i32> %10442 to <4 x float>
  %t2944.us = fsub <4 x float> %t2942.us, %10443
  %10444 = sub nsw i32 %f127.s0.v3.v323.base171.us, %f5.v3.min_realized
  %t2949.us = add nsw i32 %10444, %10430
  %t2951.us = sub nsw <4 x i32> %10442, %9169
  %10445 = sub nsw i32 %t2940.us, %f6.v3.min_realized
  %t2954.us = add nsw i32 %10445, %10418
  %t2955.us = mul nsw <4 x i32> %t2951.us, %9189
  %10446 = sub nsw i32 %10434, %f6.v3.min_realized
  %t2957.us = add nsw i32 %10446, %10418
  %t2959.us = add nsw i32 %10445, %10420
  %t2960.us = add nsw i32 %10446, %10420
  %10447 = add nsw <4 x i32> %t2951.us, <i32 1, i32 1, i32 1, i32 1>
  %t2961.us = mul nsw <4 x i32> %10447, %9189
  %10448 = add nsw i32 %f127.s0.v3.v323.base171.us, 1
  %10449 = shl i32 %10448, 1
  %10450 = and i32 %10449, 2
  %10451 = ashr i32 %10448, 1
  %t2962.us = add nsw i32 %10450, %10451
  %10452 = shufflevector <4 x float> %10437, <4 x float> %10440, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2963.us = fmul <4 x float> %9160, %10452
  %a1107.us = fptosi <4 x float> %t2963.us to <4 x i32>
  %a1110.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1107.us)
  %10453 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1110.us, <4 x i32> zeroinitializer)
  %10454 = sitofp <4 x i32> %10453 to <4 x float>
  %t2965.us = fsub <4 x float> %t2963.us, %10454
  %t2968.us = sub nsw <4 x i32> %10453, %9169
  %10455 = sub nsw i32 %t2962.us, %f6.v3.min_realized
  %t2970.us = add nsw i32 %10455, %10418
  %t2971.us = mul nsw <4 x i32> %t2968.us, %9189
  %10456 = sub nsw i32 %10451, %f6.v3.min_realized
  %t2973.us = add nsw i32 %10456, %10418
  %t2974.us = add nsw i32 %10455, %10420
  %t2975.us = add nsw i32 %10456, %10420
  %10457 = add nsw <4 x i32> %t2968.us, <i32 1, i32 1, i32 1, i32 1>
  %t2976.us = mul nsw <4 x i32> %10457, %9189
  %10458 = insertelement <4 x i32> undef, i32 %t2960.us, i64 0
  %10459 = shufflevector <4 x i32> %10458, <4 x i32> undef, <4 x i32> zeroinitializer
  %10460 = add nsw <4 x i32> %10459, <i32 0, i32 1, i32 2, i32 3>
  %10461 = add nsw <4 x i32> %t2961.us, %10460
  %10462 = sext <4 x i32> %10461 to <4 x i64>
  %10463 = extractelement <4 x i64> %10462, i64 0
  %10464 = getelementptr inbounds float, ptr %f6.host, i64 %10463
  %10465 = load float, ptr %10464, align 4, !tbaa !50
  %10466 = insertelement <4 x float> undef, float %10465, i64 0
  %10467 = extractelement <4 x i64> %10462, i64 1
  %10468 = getelementptr inbounds float, ptr %f6.host, i64 %10467
  %10469 = load float, ptr %10468, align 4, !tbaa !50
  %10470 = insertelement <4 x float> %10466, float %10469, i64 1
  %10471 = extractelement <4 x i64> %10462, i64 2
  %10472 = getelementptr inbounds float, ptr %f6.host, i64 %10471
  %10473 = load float, ptr %10472, align 4, !tbaa !50
  %10474 = insertelement <4 x float> %10470, float %10473, i64 2
  %10475 = extractelement <4 x i64> %10462, i64 3
  %10476 = getelementptr inbounds float, ptr %f6.host, i64 %10475
  %10477 = load float, ptr %10476, align 4, !tbaa !50
  %10478 = insertelement <4 x float> %10474, float %10477, i64 3
  %10479 = fmul <4 x float> %10478, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10480 = insertelement <4 x i32> undef, i32 %t2959.us, i64 0
  %10481 = shufflevector <4 x i32> %10480, <4 x i32> undef, <4 x i32> zeroinitializer
  %10482 = add <4 x i32> %10481, <i32 -1, i32 0, i32 1, i32 2>
  %10483 = add <4 x i32> %10482, %t2961.us
  %10484 = sext <4 x i32> %10483 to <4 x i64>
  %10485 = extractelement <4 x i64> %10484, i64 0
  %10486 = getelementptr inbounds float, ptr %f6.host, i64 %10485
  %10487 = load float, ptr %10486, align 4, !tbaa !50
  %10488 = insertelement <4 x float> undef, float %10487, i64 0
  %10489 = extractelement <4 x i64> %10484, i64 1
  %10490 = getelementptr inbounds float, ptr %f6.host, i64 %10489
  %10491 = load float, ptr %10490, align 4, !tbaa !50
  %10492 = insertelement <4 x float> %10488, float %10491, i64 1
  %10493 = extractelement <4 x i64> %10484, i64 2
  %10494 = getelementptr inbounds float, ptr %f6.host, i64 %10493
  %10495 = load float, ptr %10494, align 4, !tbaa !50
  %10496 = insertelement <4 x float> %10492, float %10495, i64 2
  %10497 = extractelement <4 x i64> %10484, i64 3
  %10498 = getelementptr inbounds float, ptr %f6.host, i64 %10497
  %10499 = load float, ptr %10498, align 4, !tbaa !50
  %10500 = insertelement <4 x float> %10496, float %10499, i64 3
  %10501 = fmul <4 x float> %10500, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10502 = fadd <4 x float> %10479, %10501
  %10503 = fmul <4 x float> %10502, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10504 = insertelement <4 x i32> undef, i32 %t2957.us, i64 0
  %10505 = shufflevector <4 x i32> %10504, <4 x i32> undef, <4 x i32> zeroinitializer
  %10506 = add nsw <4 x i32> %10505, <i32 0, i32 1, i32 2, i32 3>
  %10507 = add nsw <4 x i32> %t2961.us, %10506
  %10508 = sext <4 x i32> %10507 to <4 x i64>
  %10509 = extractelement <4 x i64> %10508, i64 0
  %10510 = getelementptr inbounds float, ptr %f6.host, i64 %10509
  %10511 = load float, ptr %10510, align 4, !tbaa !50
  %10512 = insertelement <4 x float> undef, float %10511, i64 0
  %10513 = extractelement <4 x i64> %10508, i64 1
  %10514 = getelementptr inbounds float, ptr %f6.host, i64 %10513
  %10515 = load float, ptr %10514, align 4, !tbaa !50
  %10516 = insertelement <4 x float> %10512, float %10515, i64 1
  %10517 = extractelement <4 x i64> %10508, i64 2
  %10518 = getelementptr inbounds float, ptr %f6.host, i64 %10517
  %10519 = load float, ptr %10518, align 4, !tbaa !50
  %10520 = insertelement <4 x float> %10516, float %10519, i64 2
  %10521 = extractelement <4 x i64> %10508, i64 3
  %10522 = getelementptr inbounds float, ptr %f6.host, i64 %10521
  %10523 = load float, ptr %10522, align 4, !tbaa !50
  %10524 = insertelement <4 x float> %10520, float %10523, i64 3
  %10525 = fmul <4 x float> %10524, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10526 = insertelement <4 x i32> undef, i32 %t2954.us, i64 0
  %10527 = shufflevector <4 x i32> %10526, <4 x i32> undef, <4 x i32> zeroinitializer
  %10528 = add <4 x i32> %10527, <i32 -1, i32 0, i32 1, i32 2>
  %10529 = add <4 x i32> %10528, %t2961.us
  %10530 = sext <4 x i32> %10529 to <4 x i64>
  %10531 = extractelement <4 x i64> %10530, i64 0
  %10532 = getelementptr inbounds float, ptr %f6.host, i64 %10531
  %10533 = load float, ptr %10532, align 4, !tbaa !50
  %10534 = insertelement <4 x float> undef, float %10533, i64 0
  %10535 = extractelement <4 x i64> %10530, i64 1
  %10536 = getelementptr inbounds float, ptr %f6.host, i64 %10535
  %10537 = load float, ptr %10536, align 4, !tbaa !50
  %10538 = insertelement <4 x float> %10534, float %10537, i64 1
  %10539 = extractelement <4 x i64> %10530, i64 2
  %10540 = getelementptr inbounds float, ptr %f6.host, i64 %10539
  %10541 = load float, ptr %10540, align 4, !tbaa !50
  %10542 = insertelement <4 x float> %10538, float %10541, i64 2
  %10543 = extractelement <4 x i64> %10530, i64 3
  %10544 = getelementptr inbounds float, ptr %f6.host, i64 %10543
  %10545 = load float, ptr %10544, align 4, !tbaa !50
  %10546 = insertelement <4 x float> %10542, float %10545, i64 3
  %10547 = fmul <4 x float> %10546, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10548 = fadd <4 x float> %10525, %10547
  %10549 = fmul <4 x float> %10548, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10550 = fadd <4 x float> %10503, %10549
  %10551 = mul nsw <4 x i32> %10447, %9203
  %10552 = insertelement <4 x i32> undef, i32 %t2949.us, i64 0
  %10553 = shufflevector <4 x i32> %10552, <4 x i32> undef, <4 x i32> zeroinitializer
  %10554 = add nsw <4 x i32> %10553, <i32 0, i32 2, i32 4, i32 6>
  %10555 = add nsw <4 x i32> %10551, %10554
  %10556 = sext <4 x i32> %10555 to <4 x i64>
  %10557 = extractelement <4 x i64> %10556, i64 0
  %10558 = getelementptr inbounds float, ptr %f5.host, i64 %10557
  %10559 = load float, ptr %10558, align 4, !tbaa !46
  %10560 = insertelement <4 x float> undef, float %10559, i64 0
  %10561 = extractelement <4 x i64> %10556, i64 1
  %10562 = getelementptr inbounds float, ptr %f5.host, i64 %10561
  %10563 = load float, ptr %10562, align 4, !tbaa !46
  %10564 = insertelement <4 x float> %10560, float %10563, i64 1
  %10565 = extractelement <4 x i64> %10556, i64 2
  %10566 = getelementptr inbounds float, ptr %f5.host, i64 %10565
  %10567 = load float, ptr %10566, align 4, !tbaa !46
  %10568 = insertelement <4 x float> %10564, float %10567, i64 2
  %10569 = extractelement <4 x i64> %10556, i64 3
  %10570 = getelementptr inbounds float, ptr %f5.host, i64 %10569
  %10571 = load float, ptr %10570, align 4, !tbaa !46
  %10572 = insertelement <4 x float> %10568, float %10571, i64 3
  %10573 = fsub <4 x float> %10572, %10550
  %10574 = fmul <4 x float> %t2944.us, %10573
  %10575 = add nsw <4 x i32> %t2955.us, %10460
  %10576 = sext <4 x i32> %10575 to <4 x i64>
  %10577 = extractelement <4 x i64> %10576, i64 0
  %10578 = getelementptr inbounds float, ptr %f6.host, i64 %10577
  %10579 = load float, ptr %10578, align 4, !tbaa !50
  %10580 = insertelement <4 x float> undef, float %10579, i64 0
  %10581 = extractelement <4 x i64> %10576, i64 1
  %10582 = getelementptr inbounds float, ptr %f6.host, i64 %10581
  %10583 = load float, ptr %10582, align 4, !tbaa !50
  %10584 = insertelement <4 x float> %10580, float %10583, i64 1
  %10585 = extractelement <4 x i64> %10576, i64 2
  %10586 = getelementptr inbounds float, ptr %f6.host, i64 %10585
  %10587 = load float, ptr %10586, align 4, !tbaa !50
  %10588 = insertelement <4 x float> %10584, float %10587, i64 2
  %10589 = extractelement <4 x i64> %10576, i64 3
  %10590 = getelementptr inbounds float, ptr %f6.host, i64 %10589
  %10591 = load float, ptr %10590, align 4, !tbaa !50
  %10592 = insertelement <4 x float> %10588, float %10591, i64 3
  %10593 = fmul <4 x float> %10592, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10594 = add <4 x i32> %t2955.us, %10481
  %10595 = add <4 x i32> %10594, <i32 -1, i32 0, i32 1, i32 2>
  %10596 = sext <4 x i32> %10595 to <4 x i64>
  %10597 = extractelement <4 x i64> %10596, i64 0
  %10598 = getelementptr inbounds float, ptr %f6.host, i64 %10597
  %10599 = load float, ptr %10598, align 4, !tbaa !50
  %10600 = insertelement <4 x float> undef, float %10599, i64 0
  %10601 = extractelement <4 x i64> %10596, i64 1
  %10602 = getelementptr inbounds float, ptr %f6.host, i64 %10601
  %10603 = load float, ptr %10602, align 4, !tbaa !50
  %10604 = insertelement <4 x float> %10600, float %10603, i64 1
  %10605 = extractelement <4 x i64> %10596, i64 2
  %10606 = getelementptr inbounds float, ptr %f6.host, i64 %10605
  %10607 = load float, ptr %10606, align 4, !tbaa !50
  %10608 = insertelement <4 x float> %10604, float %10607, i64 2
  %10609 = extractelement <4 x i64> %10596, i64 3
  %10610 = getelementptr inbounds float, ptr %f6.host, i64 %10609
  %10611 = load float, ptr %10610, align 4, !tbaa !50
  %10612 = insertelement <4 x float> %10608, float %10611, i64 3
  %10613 = fmul <4 x float> %10612, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10614 = fadd <4 x float> %10593, %10613
  %10615 = fmul <4 x float> %10614, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10616 = add nsw <4 x i32> %t2955.us, %10506
  %10617 = sext <4 x i32> %10616 to <4 x i64>
  %10618 = extractelement <4 x i64> %10617, i64 0
  %10619 = getelementptr inbounds float, ptr %f6.host, i64 %10618
  %10620 = load float, ptr %10619, align 4, !tbaa !50
  %10621 = insertelement <4 x float> undef, float %10620, i64 0
  %10622 = extractelement <4 x i64> %10617, i64 1
  %10623 = getelementptr inbounds float, ptr %f6.host, i64 %10622
  %10624 = load float, ptr %10623, align 4, !tbaa !50
  %10625 = insertelement <4 x float> %10621, float %10624, i64 1
  %10626 = extractelement <4 x i64> %10617, i64 2
  %10627 = getelementptr inbounds float, ptr %f6.host, i64 %10626
  %10628 = load float, ptr %10627, align 4, !tbaa !50
  %10629 = insertelement <4 x float> %10625, float %10628, i64 2
  %10630 = extractelement <4 x i64> %10617, i64 3
  %10631 = getelementptr inbounds float, ptr %f6.host, i64 %10630
  %10632 = load float, ptr %10631, align 4, !tbaa !50
  %10633 = insertelement <4 x float> %10629, float %10632, i64 3
  %10634 = fmul <4 x float> %10633, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10635 = add <4 x i32> %t2955.us, %10527
  %10636 = add <4 x i32> %10635, <i32 -1, i32 0, i32 1, i32 2>
  %10637 = sext <4 x i32> %10636 to <4 x i64>
  %10638 = extractelement <4 x i64> %10637, i64 0
  %10639 = getelementptr inbounds float, ptr %f6.host, i64 %10638
  %10640 = load float, ptr %10639, align 4, !tbaa !50
  %10641 = insertelement <4 x float> undef, float %10640, i64 0
  %10642 = extractelement <4 x i64> %10637, i64 1
  %10643 = getelementptr inbounds float, ptr %f6.host, i64 %10642
  %10644 = load float, ptr %10643, align 4, !tbaa !50
  %10645 = insertelement <4 x float> %10641, float %10644, i64 1
  %10646 = extractelement <4 x i64> %10637, i64 2
  %10647 = getelementptr inbounds float, ptr %f6.host, i64 %10646
  %10648 = load float, ptr %10647, align 4, !tbaa !50
  %10649 = insertelement <4 x float> %10645, float %10648, i64 2
  %10650 = extractelement <4 x i64> %10637, i64 3
  %10651 = getelementptr inbounds float, ptr %f6.host, i64 %10650
  %10652 = load float, ptr %10651, align 4, !tbaa !50
  %10653 = insertelement <4 x float> %10649, float %10652, i64 3
  %10654 = fmul <4 x float> %10653, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10655 = fadd <4 x float> %10634, %10654
  %10656 = fmul <4 x float> %10655, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10657 = fadd <4 x float> %10615, %10656
  %10658 = mul nsw <4 x i32> %t2951.us, %9203
  %10659 = add nsw <4 x i32> %10658, %10554
  %10660 = sext <4 x i32> %10659 to <4 x i64>
  %10661 = extractelement <4 x i64> %10660, i64 0
  %10662 = getelementptr inbounds float, ptr %f5.host, i64 %10661
  %10663 = load float, ptr %10662, align 4, !tbaa !46
  %10664 = insertelement <4 x float> undef, float %10663, i64 0
  %10665 = extractelement <4 x i64> %10660, i64 1
  %10666 = getelementptr inbounds float, ptr %f5.host, i64 %10665
  %10667 = load float, ptr %10666, align 4, !tbaa !46
  %10668 = insertelement <4 x float> %10664, float %10667, i64 1
  %10669 = extractelement <4 x i64> %10660, i64 2
  %10670 = getelementptr inbounds float, ptr %f5.host, i64 %10669
  %10671 = load float, ptr %10670, align 4, !tbaa !46
  %10672 = insertelement <4 x float> %10668, float %10671, i64 2
  %10673 = extractelement <4 x i64> %10660, i64 3
  %10674 = getelementptr inbounds float, ptr %f5.host, i64 %10673
  %10675 = load float, ptr %10674, align 4, !tbaa !46
  %10676 = insertelement <4 x float> %10672, float %10675, i64 3
  %10677 = fsub <4 x float> %10676, %10657
  %10678 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2944.us
  %10679 = fmul <4 x float> %10678, %10677
  %10680 = fadd <4 x float> %10574, %10679
  %narrow.us = sub nsw i32 %10434, %f128.v3.min_realized117
  %10681 = sext i32 %narrow.us to i64
  %10682 = add nsw i64 %10681, %10421
  %10683 = getelementptr inbounds float, ptr %9078, i64 %10682
  %10684 = load <4 x float>, ptr %10683, align 4, !tbaa !66
  %10685 = fmul <4 x float> %10684, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10686 = sext i32 %t2940.us to i64
  %10687 = sub nsw i64 %10686, %9204
  %10688 = add nsw i64 %10422, %10687
  %10689 = getelementptr inbounds float, ptr %9078, i64 %10688
  %10690 = load <4 x float>, ptr %10689, align 4, !tbaa !66
  %10691 = fmul <4 x float> %10690, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10692 = fadd <4 x float> %10685, %10691
  %10693 = fmul <4 x float> %10692, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10694 = add nsw i64 %10681, %10423
  %10695 = getelementptr inbounds float, ptr %9078, i64 %10694
  %10696 = load <4 x float>, ptr %10695, align 4, !tbaa !66
  %10697 = fmul <4 x float> %10696, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10698 = add nsw i64 %10424, %10687
  %10699 = getelementptr inbounds float, ptr %9078, i64 %10698
  %10700 = load <4 x float>, ptr %10699, align 4, !tbaa !66
  %10701 = fmul <4 x float> %10700, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10702 = fadd <4 x float> %10697, %10701
  %10703 = fmul <4 x float> %10702, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10704 = fadd <4 x float> %10693, %10703
  %10705 = fadd <4 x float> %10680, %10704
  %10706 = insertelement <4 x i32> undef, i32 %t2975.us, i64 0
  %10707 = shufflevector <4 x i32> %10706, <4 x i32> undef, <4 x i32> zeroinitializer
  %10708 = add nsw <4 x i32> %10707, <i32 0, i32 1, i32 2, i32 3>
  %10709 = add nsw <4 x i32> %t2976.us, %10708
  %10710 = sext <4 x i32> %10709 to <4 x i64>
  %10711 = extractelement <4 x i64> %10710, i64 0
  %10712 = getelementptr inbounds float, ptr %f6.host, i64 %10711
  %10713 = load float, ptr %10712, align 4, !tbaa !50
  %10714 = insertelement <4 x float> undef, float %10713, i64 0
  %10715 = extractelement <4 x i64> %10710, i64 1
  %10716 = getelementptr inbounds float, ptr %f6.host, i64 %10715
  %10717 = load float, ptr %10716, align 4, !tbaa !50
  %10718 = insertelement <4 x float> %10714, float %10717, i64 1
  %10719 = extractelement <4 x i64> %10710, i64 2
  %10720 = getelementptr inbounds float, ptr %f6.host, i64 %10719
  %10721 = load float, ptr %10720, align 4, !tbaa !50
  %10722 = insertelement <4 x float> %10718, float %10721, i64 2
  %10723 = extractelement <4 x i64> %10710, i64 3
  %10724 = getelementptr inbounds float, ptr %f6.host, i64 %10723
  %10725 = load float, ptr %10724, align 4, !tbaa !50
  %10726 = insertelement <4 x float> %10722, float %10725, i64 3
  %10727 = fmul <4 x float> %10726, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10728 = insertelement <4 x i32> undef, i32 %t2974.us, i64 0
  %10729 = shufflevector <4 x i32> %10728, <4 x i32> undef, <4 x i32> zeroinitializer
  %10730 = add nsw <4 x i32> %10729, <i32 0, i32 1, i32 2, i32 3>
  %10731 = add <4 x i32> %t2976.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10732 = add <4 x i32> %10731, %10730
  %10733 = sext <4 x i32> %10732 to <4 x i64>
  %10734 = extractelement <4 x i64> %10733, i64 0
  %10735 = getelementptr inbounds float, ptr %f6.host, i64 %10734
  %10736 = load float, ptr %10735, align 4, !tbaa !50
  %10737 = insertelement <4 x float> undef, float %10736, i64 0
  %10738 = extractelement <4 x i64> %10733, i64 1
  %10739 = getelementptr inbounds float, ptr %f6.host, i64 %10738
  %10740 = load float, ptr %10739, align 4, !tbaa !50
  %10741 = insertelement <4 x float> %10737, float %10740, i64 1
  %10742 = extractelement <4 x i64> %10733, i64 2
  %10743 = getelementptr inbounds float, ptr %f6.host, i64 %10742
  %10744 = load float, ptr %10743, align 4, !tbaa !50
  %10745 = insertelement <4 x float> %10741, float %10744, i64 2
  %10746 = extractelement <4 x i64> %10733, i64 3
  %10747 = getelementptr inbounds float, ptr %f6.host, i64 %10746
  %10748 = load float, ptr %10747, align 4, !tbaa !50
  %10749 = insertelement <4 x float> %10745, float %10748, i64 3
  %10750 = fmul <4 x float> %10749, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10751 = fadd <4 x float> %10727, %10750
  %10752 = fmul <4 x float> %10751, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10753 = insertelement <4 x i32> undef, i32 %t2973.us, i64 0
  %10754 = shufflevector <4 x i32> %10753, <4 x i32> undef, <4 x i32> zeroinitializer
  %10755 = add nsw <4 x i32> %10754, <i32 0, i32 1, i32 2, i32 3>
  %10756 = add nsw <4 x i32> %t2976.us, %10755
  %10757 = sext <4 x i32> %10756 to <4 x i64>
  %10758 = extractelement <4 x i64> %10757, i64 0
  %10759 = getelementptr inbounds float, ptr %f6.host, i64 %10758
  %10760 = load float, ptr %10759, align 4, !tbaa !50
  %10761 = insertelement <4 x float> undef, float %10760, i64 0
  %10762 = extractelement <4 x i64> %10757, i64 1
  %10763 = getelementptr inbounds float, ptr %f6.host, i64 %10762
  %10764 = load float, ptr %10763, align 4, !tbaa !50
  %10765 = insertelement <4 x float> %10761, float %10764, i64 1
  %10766 = extractelement <4 x i64> %10757, i64 2
  %10767 = getelementptr inbounds float, ptr %f6.host, i64 %10766
  %10768 = load float, ptr %10767, align 4, !tbaa !50
  %10769 = insertelement <4 x float> %10765, float %10768, i64 2
  %10770 = extractelement <4 x i64> %10757, i64 3
  %10771 = getelementptr inbounds float, ptr %f6.host, i64 %10770
  %10772 = load float, ptr %10771, align 4, !tbaa !50
  %10773 = insertelement <4 x float> %10769, float %10772, i64 3
  %10774 = fmul <4 x float> %10773, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10775 = insertelement <4 x i32> undef, i32 %t2970.us, i64 0
  %10776 = shufflevector <4 x i32> %10775, <4 x i32> undef, <4 x i32> zeroinitializer
  %10777 = add nsw <4 x i32> %10776, <i32 0, i32 1, i32 2, i32 3>
  %10778 = add <4 x i32> %10731, %10777
  %10779 = sext <4 x i32> %10778 to <4 x i64>
  %10780 = extractelement <4 x i64> %10779, i64 0
  %10781 = getelementptr inbounds float, ptr %f6.host, i64 %10780
  %10782 = load float, ptr %10781, align 4, !tbaa !50
  %10783 = insertelement <4 x float> undef, float %10782, i64 0
  %10784 = extractelement <4 x i64> %10779, i64 1
  %10785 = getelementptr inbounds float, ptr %f6.host, i64 %10784
  %10786 = load float, ptr %10785, align 4, !tbaa !50
  %10787 = insertelement <4 x float> %10783, float %10786, i64 1
  %10788 = extractelement <4 x i64> %10779, i64 2
  %10789 = getelementptr inbounds float, ptr %f6.host, i64 %10788
  %10790 = load float, ptr %10789, align 4, !tbaa !50
  %10791 = insertelement <4 x float> %10787, float %10790, i64 2
  %10792 = extractelement <4 x i64> %10779, i64 3
  %10793 = getelementptr inbounds float, ptr %f6.host, i64 %10792
  %10794 = load float, ptr %10793, align 4, !tbaa !50
  %10795 = insertelement <4 x float> %10791, float %10794, i64 3
  %10796 = fmul <4 x float> %10795, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10797 = fadd <4 x float> %10774, %10796
  %10798 = fmul <4 x float> %10797, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10799 = fadd <4 x float> %10752, %10798
  %10800 = mul nsw <4 x i32> %10457, %9203
  %10801 = add nsw i32 %t2949.us, 1
  %10802 = insertelement <4 x i32> undef, i32 %10801, i64 0
  %10803 = shufflevector <4 x i32> %10802, <4 x i32> undef, <4 x i32> zeroinitializer
  %10804 = add nsw <4 x i32> %10803, <i32 0, i32 2, i32 4, i32 6>
  %10805 = add nsw <4 x i32> %10800, %10804
  %10806 = sext <4 x i32> %10805 to <4 x i64>
  %10807 = extractelement <4 x i64> %10806, i64 0
  %10808 = getelementptr inbounds float, ptr %f5.host, i64 %10807
  %10809 = load float, ptr %10808, align 4, !tbaa !46
  %10810 = insertelement <4 x float> undef, float %10809, i64 0
  %10811 = extractelement <4 x i64> %10806, i64 1
  %10812 = getelementptr inbounds float, ptr %f5.host, i64 %10811
  %10813 = load float, ptr %10812, align 4, !tbaa !46
  %10814 = insertelement <4 x float> %10810, float %10813, i64 1
  %10815 = extractelement <4 x i64> %10806, i64 2
  %10816 = getelementptr inbounds float, ptr %f5.host, i64 %10815
  %10817 = load float, ptr %10816, align 4, !tbaa !46
  %10818 = insertelement <4 x float> %10814, float %10817, i64 2
  %10819 = extractelement <4 x i64> %10806, i64 3
  %10820 = getelementptr inbounds float, ptr %f5.host, i64 %10819
  %10821 = load float, ptr %10820, align 4, !tbaa !46
  %10822 = insertelement <4 x float> %10818, float %10821, i64 3
  %10823 = fsub <4 x float> %10822, %10799
  %10824 = fmul <4 x float> %t2965.us, %10823
  %10825 = add nsw <4 x i32> %t2971.us, %10708
  %10826 = sext <4 x i32> %10825 to <4 x i64>
  %10827 = extractelement <4 x i64> %10826, i64 0
  %10828 = getelementptr inbounds float, ptr %f6.host, i64 %10827
  %10829 = load float, ptr %10828, align 4, !tbaa !50
  %10830 = insertelement <4 x float> undef, float %10829, i64 0
  %10831 = extractelement <4 x i64> %10826, i64 1
  %10832 = getelementptr inbounds float, ptr %f6.host, i64 %10831
  %10833 = load float, ptr %10832, align 4, !tbaa !50
  %10834 = insertelement <4 x float> %10830, float %10833, i64 1
  %10835 = extractelement <4 x i64> %10826, i64 2
  %10836 = getelementptr inbounds float, ptr %f6.host, i64 %10835
  %10837 = load float, ptr %10836, align 4, !tbaa !50
  %10838 = insertelement <4 x float> %10834, float %10837, i64 2
  %10839 = extractelement <4 x i64> %10826, i64 3
  %10840 = getelementptr inbounds float, ptr %f6.host, i64 %10839
  %10841 = load float, ptr %10840, align 4, !tbaa !50
  %10842 = insertelement <4 x float> %10838, float %10841, i64 3
  %10843 = fmul <4 x float> %10842, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10844 = add <4 x i32> %t2971.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10845 = add <4 x i32> %10844, %10730
  %10846 = sext <4 x i32> %10845 to <4 x i64>
  %10847 = extractelement <4 x i64> %10846, i64 0
  %10848 = getelementptr inbounds float, ptr %f6.host, i64 %10847
  %10849 = load float, ptr %10848, align 4, !tbaa !50
  %10850 = insertelement <4 x float> undef, float %10849, i64 0
  %10851 = extractelement <4 x i64> %10846, i64 1
  %10852 = getelementptr inbounds float, ptr %f6.host, i64 %10851
  %10853 = load float, ptr %10852, align 4, !tbaa !50
  %10854 = insertelement <4 x float> %10850, float %10853, i64 1
  %10855 = extractelement <4 x i64> %10846, i64 2
  %10856 = getelementptr inbounds float, ptr %f6.host, i64 %10855
  %10857 = load float, ptr %10856, align 4, !tbaa !50
  %10858 = insertelement <4 x float> %10854, float %10857, i64 2
  %10859 = extractelement <4 x i64> %10846, i64 3
  %10860 = getelementptr inbounds float, ptr %f6.host, i64 %10859
  %10861 = load float, ptr %10860, align 4, !tbaa !50
  %10862 = insertelement <4 x float> %10858, float %10861, i64 3
  %10863 = fmul <4 x float> %10862, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10864 = fadd <4 x float> %10843, %10863
  %10865 = fmul <4 x float> %10864, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10866 = add nsw <4 x i32> %t2971.us, %10755
  %10867 = sext <4 x i32> %10866 to <4 x i64>
  %10868 = extractelement <4 x i64> %10867, i64 0
  %10869 = getelementptr inbounds float, ptr %f6.host, i64 %10868
  %10870 = load float, ptr %10869, align 4, !tbaa !50
  %10871 = insertelement <4 x float> undef, float %10870, i64 0
  %10872 = extractelement <4 x i64> %10867, i64 1
  %10873 = getelementptr inbounds float, ptr %f6.host, i64 %10872
  %10874 = load float, ptr %10873, align 4, !tbaa !50
  %10875 = insertelement <4 x float> %10871, float %10874, i64 1
  %10876 = extractelement <4 x i64> %10867, i64 2
  %10877 = getelementptr inbounds float, ptr %f6.host, i64 %10876
  %10878 = load float, ptr %10877, align 4, !tbaa !50
  %10879 = insertelement <4 x float> %10875, float %10878, i64 2
  %10880 = extractelement <4 x i64> %10867, i64 3
  %10881 = getelementptr inbounds float, ptr %f6.host, i64 %10880
  %10882 = load float, ptr %10881, align 4, !tbaa !50
  %10883 = insertelement <4 x float> %10879, float %10882, i64 3
  %10884 = fmul <4 x float> %10883, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10885 = add <4 x i32> %10844, %10777
  %10886 = sext <4 x i32> %10885 to <4 x i64>
  %10887 = extractelement <4 x i64> %10886, i64 0
  %10888 = getelementptr inbounds float, ptr %f6.host, i64 %10887
  %10889 = load float, ptr %10888, align 4, !tbaa !50
  %10890 = insertelement <4 x float> undef, float %10889, i64 0
  %10891 = extractelement <4 x i64> %10886, i64 1
  %10892 = getelementptr inbounds float, ptr %f6.host, i64 %10891
  %10893 = load float, ptr %10892, align 4, !tbaa !50
  %10894 = insertelement <4 x float> %10890, float %10893, i64 1
  %10895 = extractelement <4 x i64> %10886, i64 2
  %10896 = getelementptr inbounds float, ptr %f6.host, i64 %10895
  %10897 = load float, ptr %10896, align 4, !tbaa !50
  %10898 = insertelement <4 x float> %10894, float %10897, i64 2
  %10899 = extractelement <4 x i64> %10886, i64 3
  %10900 = getelementptr inbounds float, ptr %f6.host, i64 %10899
  %10901 = load float, ptr %10900, align 4, !tbaa !50
  %10902 = insertelement <4 x float> %10898, float %10901, i64 3
  %10903 = fmul <4 x float> %10902, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10904 = fadd <4 x float> %10884, %10903
  %10905 = fmul <4 x float> %10904, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10906 = fadd <4 x float> %10865, %10905
  %10907 = mul nsw <4 x i32> %t2968.us, %9203
  %10908 = add nsw <4 x i32> %10907, %10804
  %10909 = sext <4 x i32> %10908 to <4 x i64>
  %10910 = extractelement <4 x i64> %10909, i64 0
  %10911 = getelementptr inbounds float, ptr %f5.host, i64 %10910
  %10912 = load float, ptr %10911, align 4, !tbaa !46
  %10913 = insertelement <4 x float> undef, float %10912, i64 0
  %10914 = extractelement <4 x i64> %10909, i64 1
  %10915 = getelementptr inbounds float, ptr %f5.host, i64 %10914
  %10916 = load float, ptr %10915, align 4, !tbaa !46
  %10917 = insertelement <4 x float> %10913, float %10916, i64 1
  %10918 = extractelement <4 x i64> %10909, i64 2
  %10919 = getelementptr inbounds float, ptr %f5.host, i64 %10918
  %10920 = load float, ptr %10919, align 4, !tbaa !46
  %10921 = insertelement <4 x float> %10917, float %10920, i64 2
  %10922 = extractelement <4 x i64> %10909, i64 3
  %10923 = getelementptr inbounds float, ptr %f5.host, i64 %10922
  %10924 = load float, ptr %10923, align 4, !tbaa !46
  %10925 = insertelement <4 x float> %10921, float %10924, i64 3
  %10926 = fsub <4 x float> %10925, %10906
  %10927 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2965.us
  %10928 = fmul <4 x float> %10927, %10926
  %10929 = fadd <4 x float> %10824, %10928
  %narrow89.us = sub nsw i32 %10451, %f128.v3.min_realized117
  %10930 = sext i32 %narrow89.us to i64
  %10931 = add nsw i64 %10930, %10421
  %10932 = getelementptr inbounds float, ptr %9078, i64 %10931
  %10933 = load <4 x float>, ptr %10932, align 4, !tbaa !66
  %10934 = fmul <4 x float> %10933, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10935 = sext i32 %t2962.us to i64
  %10936 = sub nsw i64 %10935, %9204
  %10937 = add nsw i64 %10422, %10936
  %10938 = getelementptr inbounds float, ptr %9078, i64 %10937
  %10939 = load <4 x float>, ptr %10938, align 4, !tbaa !66
  %10940 = fmul <4 x float> %10939, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10941 = fadd <4 x float> %10934, %10940
  %10942 = fmul <4 x float> %10941, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10943 = add nsw i64 %10930, %10423
  %10944 = getelementptr inbounds float, ptr %9078, i64 %10943
  %10945 = load <4 x float>, ptr %10944, align 4, !tbaa !66
  %10946 = fmul <4 x float> %10945, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10947 = add nsw i64 %10424, %10936
  %10948 = getelementptr inbounds float, ptr %9078, i64 %10947
  %10949 = load <4 x float>, ptr %10948, align 4, !tbaa !66
  %10950 = fmul <4 x float> %10949, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10951 = fadd <4 x float> %10946, %10950
  %10952 = fmul <4 x float> %10951, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10953 = fadd <4 x float> %10942, %10952
  %10954 = fadd <4 x float> %10929, %10953
  %10955 = shufflevector <4 x float> %10705, <4 x float> %10954, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %10956 = sext i32 %f127.s0.v3.v323.base171.us to i64
  %10957 = add i64 %10427, %10956
  %10958 = getelementptr inbounds float, ptr %9117, i64 %10957
  store <8 x float> %10955, ptr %10958, align 4, !tbaa !68
  %lsr.iv.next433.us = add nsw i32 %lsr.iv432.us, -1
  %lsr.iv.next435.us = add i32 %lsr.iv434.us, 8
  %.not90.us = icmp eq i32 %lsr.iv.next433.us, 0
  br i1 %.not90.us, label %"end for f127.s0.v3.v3169.loopexit.us", label %"for f127.s0.v3.v3168.us"

"end for f127.s0.v3.v3169.loopexit.us":           ; preds = %"for f127.s0.v3.v3168.us"
  %indvars.iv.next297 = add nsw i64 %indvars.iv296, 1
  %10959 = icmp eq i64 %indvars.iv296, %sext298
  br i1 %10959, label %"produce f126173", label %"for f127.s0.v4165.us"

"produce f126173":                                ; preds = %"end for f127.s0.v3.v3169.loopexit.us", %"produce f127163"
  %10960 = add nsw i32 %9261, 2
  %10961 = icmp sge i32 %f126.s0.v4.min_2, %10960
  %brmerge449 = select i1 %10961, i1 true, i1 %9211
  br i1 %brmerge449, label %"consume f126182", label %"for f126.s0.v4175.us.preheader", !prof !27

"for f126.s0.v4175.us.preheader":                 ; preds = %"produce f126173"
  %10962 = sext i32 %f126.s0.v4.min_2 to i64
  %sext302 = sext i32 %10960 to i64
  br label %"for f126.s0.v4175.us"

"for f126.s0.v4175.us":                           ; preds = %"for f126.s0.v4175.us.preheader", %"end for f126.s0.v3.v3179.loopexit.us"
  %indvars.iv300 = phi i64 [ %10962, %"for f126.s0.v4175.us.preheader" ], [ %indvars.iv.next301, %"end for f126.s0.v3.v3179.loopexit.us" ]
  %10963 = trunc i64 %indvars.iv300 to i32
  %10964 = shl i32 %10963, 1
  %10965 = and i32 %10964, 2
  %10966 = ashr i32 %10963, 1
  %t2977.us = add nsw i32 %10965, %10966
  %10967 = trunc i64 %indvars.iv300 to i32
  %10968 = sub i32 %10967, %f72.v4.min_realized
  %10969 = mul i32 %10968, %9212
  %10970 = sub i32 %10969, %f72.v3.min_realized
  %10971 = add nsw i32 %t2977.us, %9213
  %t2984.us = mul nsw i32 %10971, %9102
  %10972 = sub nsw i32 %10966, %f127.v4.min_realized124
  %t2986.us = mul nsw i32 %10972, %9102
  %10973 = add i32 %t2977.us, %9214
  %10974 = mul nsw i32 %10973, %f5.stride.1
  %10975 = sub nsw i32 %10966, %f5.v4.min_realized
  %10976 = mul nsw i32 %10975, %f5.stride.1
  %10977 = sext i32 %t2986.us to i64
  %10978 = add nsw i64 %10977, -1
  %10979 = sext i32 %t2984.us to i64
  %10980 = add nsw i64 %10979, -1
  %10981 = sub nsw i64 %indvars.iv300, %9220
  %10982 = mul nsw i64 %10981, %9219
  %10983 = sub i64 %10982, %9221
  %10984 = trunc i64 %indvars.iv300 to i32
  %10985 = sub i32 %10984, %f4.v4.min_realized
  %10986 = mul i32 %10985, %f4.stride.1
  br label %"for f126.s0.v3.v3178.us"

"for f126.s0.v3.v3178.us":                        ; preds = %"for f126.s0.v4175.us", %"for f126.s0.v3.v3178.us"
  %lsr.iv438.us = phi i32 [ %lsr.iv.next439.us, %"for f126.s0.v3.v3178.us" ], [ -1, %"for f126.s0.v4175.us" ]
  %lsr.iv436.us = phi i32 [ %lsr.iv.next437.us, %"for f126.s0.v3.v3178.us" ], [ %9210, %"for f126.s0.v4175.us" ]
  %10987 = add i32 %lsr.iv438.us, %9085
  %f126.s0.v3.v303.base181.us = tail call i32 @llvm.smin.i32(i32 %b1068, i32 %10987)
  %10988 = shl i32 %f126.s0.v3.v303.base181.us, 1
  %10989 = and i32 %10988, 2
  %10990 = ashr i32 %f126.s0.v3.v303.base181.us, 1
  %t2978.us = add nsw i32 %10989, %10990
  %t2979.us = add i32 %10970, %f126.s0.v3.v303.base181.us
  %10991 = sext i32 %t2979.us to i64
  %10992 = getelementptr inbounds float, ptr %f72.host, i64 %10991
  %10993 = load <4 x float>, ptr %10992, align 4, !tbaa !48
  %10994 = add nsw i64 %10991, 4
  %10995 = getelementptr inbounds float, ptr %f72.host, i64 %10994
  %10996 = load <4 x float>, ptr %10995, align 4, !tbaa !48
  %10997 = shufflevector <4 x float> %10993, <4 x float> %10996, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2980.us = fmul <4 x float> %9160, %10997
  %a1112.us = fptosi <4 x float> %t2980.us to <4 x i32>
  %a1115.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1112.us)
  %10998 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1115.us, <4 x i32> zeroinitializer)
  %10999 = sitofp <4 x i32> %10998 to <4 x float>
  %t2982.us = fsub <4 x float> %t2980.us, %10999
  %11000 = sub nsw i32 %f126.s0.v3.v303.base181.us, %f4.v3.min_realized
  %t2987.us = add nsw i32 %11000, %10986
  %t2989.us = sub nsw <4 x i32> %10998, %9169
  %11001 = sub nsw i32 %t2978.us, %f5.v3.min_realized
  %t2992.us = add nsw i32 %11001, %10974
  %t2993.us = mul nsw <4 x i32> %t2989.us, %9203
  %11002 = sub nsw i32 %10990, %f5.v3.min_realized
  %t2995.us = add nsw i32 %11002, %10974
  %t2997.us = add nsw i32 %11001, %10976
  %t2998.us = add nsw i32 %11002, %10976
  %11003 = add nsw <4 x i32> %t2989.us, <i32 1, i32 1, i32 1, i32 1>
  %t2999.us = mul nsw <4 x i32> %11003, %9203
  %11004 = add nsw i32 %f126.s0.v3.v303.base181.us, 1
  %11005 = shl i32 %11004, 1
  %11006 = and i32 %11005, 2
  %11007 = ashr i32 %11004, 1
  %t3000.us = add nsw i32 %11006, %11007
  %11008 = shufflevector <4 x float> %10993, <4 x float> %10996, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3001.us = fmul <4 x float> %9160, %11008
  %a1116.us = fptosi <4 x float> %t3001.us to <4 x i32>
  %a1119.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1116.us)
  %11009 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1119.us, <4 x i32> zeroinitializer)
  %11010 = sitofp <4 x i32> %11009 to <4 x float>
  %t3003.us = fsub <4 x float> %t3001.us, %11010
  %t3006.us = sub nsw <4 x i32> %11009, %9169
  %11011 = sub nsw i32 %t3000.us, %f5.v3.min_realized
  %t3008.us = add nsw i32 %11011, %10974
  %t3009.us = mul nsw <4 x i32> %t3006.us, %9203
  %11012 = sub nsw i32 %11007, %f5.v3.min_realized
  %t3011.us = add nsw i32 %11012, %10974
  %t3012.us = add nsw i32 %11011, %10976
  %t3013.us = add nsw i32 %11012, %10976
  %11013 = add nsw <4 x i32> %t3006.us, <i32 1, i32 1, i32 1, i32 1>
  %t3014.us = mul nsw <4 x i32> %11013, %9203
  %11014 = insertelement <4 x i32> undef, i32 %t2998.us, i64 0
  %11015 = shufflevector <4 x i32> %11014, <4 x i32> undef, <4 x i32> zeroinitializer
  %11016 = add nsw <4 x i32> %11015, <i32 0, i32 1, i32 2, i32 3>
  %11017 = add nsw <4 x i32> %t2999.us, %11016
  %11018 = sext <4 x i32> %11017 to <4 x i64>
  %11019 = extractelement <4 x i64> %11018, i64 0
  %11020 = getelementptr inbounds float, ptr %f5.host, i64 %11019
  %11021 = load float, ptr %11020, align 4, !tbaa !46
  %11022 = insertelement <4 x float> undef, float %11021, i64 0
  %11023 = extractelement <4 x i64> %11018, i64 1
  %11024 = getelementptr inbounds float, ptr %f5.host, i64 %11023
  %11025 = load float, ptr %11024, align 4, !tbaa !46
  %11026 = insertelement <4 x float> %11022, float %11025, i64 1
  %11027 = extractelement <4 x i64> %11018, i64 2
  %11028 = getelementptr inbounds float, ptr %f5.host, i64 %11027
  %11029 = load float, ptr %11028, align 4, !tbaa !46
  %11030 = insertelement <4 x float> %11026, float %11029, i64 2
  %11031 = extractelement <4 x i64> %11018, i64 3
  %11032 = getelementptr inbounds float, ptr %f5.host, i64 %11031
  %11033 = load float, ptr %11032, align 4, !tbaa !46
  %11034 = insertelement <4 x float> %11030, float %11033, i64 3
  %11035 = fmul <4 x float> %11034, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11036 = insertelement <4 x i32> undef, i32 %t2997.us, i64 0
  %11037 = shufflevector <4 x i32> %11036, <4 x i32> undef, <4 x i32> zeroinitializer
  %11038 = add <4 x i32> %11037, <i32 -1, i32 0, i32 1, i32 2>
  %11039 = add <4 x i32> %11038, %t2999.us
  %11040 = sext <4 x i32> %11039 to <4 x i64>
  %11041 = extractelement <4 x i64> %11040, i64 0
  %11042 = getelementptr inbounds float, ptr %f5.host, i64 %11041
  %11043 = load float, ptr %11042, align 4, !tbaa !46
  %11044 = insertelement <4 x float> undef, float %11043, i64 0
  %11045 = extractelement <4 x i64> %11040, i64 1
  %11046 = getelementptr inbounds float, ptr %f5.host, i64 %11045
  %11047 = load float, ptr %11046, align 4, !tbaa !46
  %11048 = insertelement <4 x float> %11044, float %11047, i64 1
  %11049 = extractelement <4 x i64> %11040, i64 2
  %11050 = getelementptr inbounds float, ptr %f5.host, i64 %11049
  %11051 = load float, ptr %11050, align 4, !tbaa !46
  %11052 = insertelement <4 x float> %11048, float %11051, i64 2
  %11053 = extractelement <4 x i64> %11040, i64 3
  %11054 = getelementptr inbounds float, ptr %f5.host, i64 %11053
  %11055 = load float, ptr %11054, align 4, !tbaa !46
  %11056 = insertelement <4 x float> %11052, float %11055, i64 3
  %11057 = fmul <4 x float> %11056, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11058 = fadd <4 x float> %11035, %11057
  %11059 = fmul <4 x float> %11058, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11060 = insertelement <4 x i32> undef, i32 %t2995.us, i64 0
  %11061 = shufflevector <4 x i32> %11060, <4 x i32> undef, <4 x i32> zeroinitializer
  %11062 = add nsw <4 x i32> %11061, <i32 0, i32 1, i32 2, i32 3>
  %11063 = add nsw <4 x i32> %t2999.us, %11062
  %11064 = sext <4 x i32> %11063 to <4 x i64>
  %11065 = extractelement <4 x i64> %11064, i64 0
  %11066 = getelementptr inbounds float, ptr %f5.host, i64 %11065
  %11067 = load float, ptr %11066, align 4, !tbaa !46
  %11068 = insertelement <4 x float> undef, float %11067, i64 0
  %11069 = extractelement <4 x i64> %11064, i64 1
  %11070 = getelementptr inbounds float, ptr %f5.host, i64 %11069
  %11071 = load float, ptr %11070, align 4, !tbaa !46
  %11072 = insertelement <4 x float> %11068, float %11071, i64 1
  %11073 = extractelement <4 x i64> %11064, i64 2
  %11074 = getelementptr inbounds float, ptr %f5.host, i64 %11073
  %11075 = load float, ptr %11074, align 4, !tbaa !46
  %11076 = insertelement <4 x float> %11072, float %11075, i64 2
  %11077 = extractelement <4 x i64> %11064, i64 3
  %11078 = getelementptr inbounds float, ptr %f5.host, i64 %11077
  %11079 = load float, ptr %11078, align 4, !tbaa !46
  %11080 = insertelement <4 x float> %11076, float %11079, i64 3
  %11081 = fmul <4 x float> %11080, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11082 = insertelement <4 x i32> undef, i32 %t2992.us, i64 0
  %11083 = shufflevector <4 x i32> %11082, <4 x i32> undef, <4 x i32> zeroinitializer
  %11084 = add <4 x i32> %11083, <i32 -1, i32 0, i32 1, i32 2>
  %11085 = add <4 x i32> %11084, %t2999.us
  %11086 = sext <4 x i32> %11085 to <4 x i64>
  %11087 = extractelement <4 x i64> %11086, i64 0
  %11088 = getelementptr inbounds float, ptr %f5.host, i64 %11087
  %11089 = load float, ptr %11088, align 4, !tbaa !46
  %11090 = insertelement <4 x float> undef, float %11089, i64 0
  %11091 = extractelement <4 x i64> %11086, i64 1
  %11092 = getelementptr inbounds float, ptr %f5.host, i64 %11091
  %11093 = load float, ptr %11092, align 4, !tbaa !46
  %11094 = insertelement <4 x float> %11090, float %11093, i64 1
  %11095 = extractelement <4 x i64> %11086, i64 2
  %11096 = getelementptr inbounds float, ptr %f5.host, i64 %11095
  %11097 = load float, ptr %11096, align 4, !tbaa !46
  %11098 = insertelement <4 x float> %11094, float %11097, i64 2
  %11099 = extractelement <4 x i64> %11086, i64 3
  %11100 = getelementptr inbounds float, ptr %f5.host, i64 %11099
  %11101 = load float, ptr %11100, align 4, !tbaa !46
  %11102 = insertelement <4 x float> %11098, float %11101, i64 3
  %11103 = fmul <4 x float> %11102, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11104 = fadd <4 x float> %11081, %11103
  %11105 = fmul <4 x float> %11104, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11106 = fadd <4 x float> %11059, %11105
  %11107 = mul nsw <4 x i32> %11003, %9217
  %11108 = insertelement <4 x i32> undef, i32 %t2987.us, i64 0
  %11109 = shufflevector <4 x i32> %11108, <4 x i32> undef, <4 x i32> zeroinitializer
  %11110 = add nsw <4 x i32> %11109, <i32 0, i32 2, i32 4, i32 6>
  %11111 = add nsw <4 x i32> %11107, %11110
  %11112 = sext <4 x i32> %11111 to <4 x i64>
  %11113 = extractelement <4 x i64> %11112, i64 0
  %11114 = getelementptr inbounds float, ptr %f4.host, i64 %11113
  %11115 = load float, ptr %11114, align 4, !tbaa !44
  %11116 = insertelement <4 x float> undef, float %11115, i64 0
  %11117 = extractelement <4 x i64> %11112, i64 1
  %11118 = getelementptr inbounds float, ptr %f4.host, i64 %11117
  %11119 = load float, ptr %11118, align 4, !tbaa !44
  %11120 = insertelement <4 x float> %11116, float %11119, i64 1
  %11121 = extractelement <4 x i64> %11112, i64 2
  %11122 = getelementptr inbounds float, ptr %f4.host, i64 %11121
  %11123 = load float, ptr %11122, align 4, !tbaa !44
  %11124 = insertelement <4 x float> %11120, float %11123, i64 2
  %11125 = extractelement <4 x i64> %11112, i64 3
  %11126 = getelementptr inbounds float, ptr %f4.host, i64 %11125
  %11127 = load float, ptr %11126, align 4, !tbaa !44
  %11128 = insertelement <4 x float> %11124, float %11127, i64 3
  %11129 = fsub <4 x float> %11128, %11106
  %11130 = fmul <4 x float> %t2982.us, %11129
  %11131 = add nsw <4 x i32> %t2993.us, %11016
  %11132 = sext <4 x i32> %11131 to <4 x i64>
  %11133 = extractelement <4 x i64> %11132, i64 0
  %11134 = getelementptr inbounds float, ptr %f5.host, i64 %11133
  %11135 = load float, ptr %11134, align 4, !tbaa !46
  %11136 = insertelement <4 x float> undef, float %11135, i64 0
  %11137 = extractelement <4 x i64> %11132, i64 1
  %11138 = getelementptr inbounds float, ptr %f5.host, i64 %11137
  %11139 = load float, ptr %11138, align 4, !tbaa !46
  %11140 = insertelement <4 x float> %11136, float %11139, i64 1
  %11141 = extractelement <4 x i64> %11132, i64 2
  %11142 = getelementptr inbounds float, ptr %f5.host, i64 %11141
  %11143 = load float, ptr %11142, align 4, !tbaa !46
  %11144 = insertelement <4 x float> %11140, float %11143, i64 2
  %11145 = extractelement <4 x i64> %11132, i64 3
  %11146 = getelementptr inbounds float, ptr %f5.host, i64 %11145
  %11147 = load float, ptr %11146, align 4, !tbaa !46
  %11148 = insertelement <4 x float> %11144, float %11147, i64 3
  %11149 = fmul <4 x float> %11148, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11150 = add <4 x i32> %t2993.us, %11037
  %11151 = add <4 x i32> %11150, <i32 -1, i32 0, i32 1, i32 2>
  %11152 = sext <4 x i32> %11151 to <4 x i64>
  %11153 = extractelement <4 x i64> %11152, i64 0
  %11154 = getelementptr inbounds float, ptr %f5.host, i64 %11153
  %11155 = load float, ptr %11154, align 4, !tbaa !46
  %11156 = insertelement <4 x float> undef, float %11155, i64 0
  %11157 = extractelement <4 x i64> %11152, i64 1
  %11158 = getelementptr inbounds float, ptr %f5.host, i64 %11157
  %11159 = load float, ptr %11158, align 4, !tbaa !46
  %11160 = insertelement <4 x float> %11156, float %11159, i64 1
  %11161 = extractelement <4 x i64> %11152, i64 2
  %11162 = getelementptr inbounds float, ptr %f5.host, i64 %11161
  %11163 = load float, ptr %11162, align 4, !tbaa !46
  %11164 = insertelement <4 x float> %11160, float %11163, i64 2
  %11165 = extractelement <4 x i64> %11152, i64 3
  %11166 = getelementptr inbounds float, ptr %f5.host, i64 %11165
  %11167 = load float, ptr %11166, align 4, !tbaa !46
  %11168 = insertelement <4 x float> %11164, float %11167, i64 3
  %11169 = fmul <4 x float> %11168, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11170 = fadd <4 x float> %11149, %11169
  %11171 = fmul <4 x float> %11170, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11172 = add nsw <4 x i32> %t2993.us, %11062
  %11173 = sext <4 x i32> %11172 to <4 x i64>
  %11174 = extractelement <4 x i64> %11173, i64 0
  %11175 = getelementptr inbounds float, ptr %f5.host, i64 %11174
  %11176 = load float, ptr %11175, align 4, !tbaa !46
  %11177 = insertelement <4 x float> undef, float %11176, i64 0
  %11178 = extractelement <4 x i64> %11173, i64 1
  %11179 = getelementptr inbounds float, ptr %f5.host, i64 %11178
  %11180 = load float, ptr %11179, align 4, !tbaa !46
  %11181 = insertelement <4 x float> %11177, float %11180, i64 1
  %11182 = extractelement <4 x i64> %11173, i64 2
  %11183 = getelementptr inbounds float, ptr %f5.host, i64 %11182
  %11184 = load float, ptr %11183, align 4, !tbaa !46
  %11185 = insertelement <4 x float> %11181, float %11184, i64 2
  %11186 = extractelement <4 x i64> %11173, i64 3
  %11187 = getelementptr inbounds float, ptr %f5.host, i64 %11186
  %11188 = load float, ptr %11187, align 4, !tbaa !46
  %11189 = insertelement <4 x float> %11185, float %11188, i64 3
  %11190 = fmul <4 x float> %11189, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11191 = add <4 x i32> %t2993.us, %11083
  %11192 = add <4 x i32> %11191, <i32 -1, i32 0, i32 1, i32 2>
  %11193 = sext <4 x i32> %11192 to <4 x i64>
  %11194 = extractelement <4 x i64> %11193, i64 0
  %11195 = getelementptr inbounds float, ptr %f5.host, i64 %11194
  %11196 = load float, ptr %11195, align 4, !tbaa !46
  %11197 = insertelement <4 x float> undef, float %11196, i64 0
  %11198 = extractelement <4 x i64> %11193, i64 1
  %11199 = getelementptr inbounds float, ptr %f5.host, i64 %11198
  %11200 = load float, ptr %11199, align 4, !tbaa !46
  %11201 = insertelement <4 x float> %11197, float %11200, i64 1
  %11202 = extractelement <4 x i64> %11193, i64 2
  %11203 = getelementptr inbounds float, ptr %f5.host, i64 %11202
  %11204 = load float, ptr %11203, align 4, !tbaa !46
  %11205 = insertelement <4 x float> %11201, float %11204, i64 2
  %11206 = extractelement <4 x i64> %11193, i64 3
  %11207 = getelementptr inbounds float, ptr %f5.host, i64 %11206
  %11208 = load float, ptr %11207, align 4, !tbaa !46
  %11209 = insertelement <4 x float> %11205, float %11208, i64 3
  %11210 = fmul <4 x float> %11209, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11211 = fadd <4 x float> %11190, %11210
  %11212 = fmul <4 x float> %11211, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11213 = fadd <4 x float> %11171, %11212
  %11214 = mul nsw <4 x i32> %t2989.us, %9217
  %11215 = add nsw <4 x i32> %11214, %11110
  %11216 = sext <4 x i32> %11215 to <4 x i64>
  %11217 = extractelement <4 x i64> %11216, i64 0
  %11218 = getelementptr inbounds float, ptr %f4.host, i64 %11217
  %11219 = load float, ptr %11218, align 4, !tbaa !44
  %11220 = insertelement <4 x float> undef, float %11219, i64 0
  %11221 = extractelement <4 x i64> %11216, i64 1
  %11222 = getelementptr inbounds float, ptr %f4.host, i64 %11221
  %11223 = load float, ptr %11222, align 4, !tbaa !44
  %11224 = insertelement <4 x float> %11220, float %11223, i64 1
  %11225 = extractelement <4 x i64> %11216, i64 2
  %11226 = getelementptr inbounds float, ptr %f4.host, i64 %11225
  %11227 = load float, ptr %11226, align 4, !tbaa !44
  %11228 = insertelement <4 x float> %11224, float %11227, i64 2
  %11229 = extractelement <4 x i64> %11216, i64 3
  %11230 = getelementptr inbounds float, ptr %f4.host, i64 %11229
  %11231 = load float, ptr %11230, align 4, !tbaa !44
  %11232 = insertelement <4 x float> %11228, float %11231, i64 3
  %11233 = fsub <4 x float> %11232, %11213
  %11234 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2982.us
  %11235 = fmul <4 x float> %11234, %11233
  %11236 = fadd <4 x float> %11130, %11235
  %11237 = sext i32 %10990 to i64
  %11238 = sub nsw i64 %11237, %9208
  %11239 = add nsw i64 %11238, %10977
  %11240 = getelementptr inbounds float, ptr %9117, i64 %11239
  %11241 = load <4 x float>, ptr %11240, align 4, !tbaa !68
  %11242 = fmul <4 x float> %11241, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11243 = sext i32 %t2978.us to i64
  %11244 = sub nsw i64 %11243, %9208
  %11245 = add nsw i64 %10978, %11244
  %11246 = getelementptr inbounds float, ptr %9117, i64 %11245
  %11247 = load <4 x float>, ptr %11246, align 4, !tbaa !68
  %11248 = fmul <4 x float> %11247, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11249 = fadd <4 x float> %11242, %11248
  %11250 = fmul <4 x float> %11249, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11251 = add nsw i64 %11238, %10979
  %11252 = getelementptr inbounds float, ptr %9117, i64 %11251
  %11253 = load <4 x float>, ptr %11252, align 4, !tbaa !68
  %11254 = fmul <4 x float> %11253, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11255 = add nsw i64 %10980, %11244
  %11256 = getelementptr inbounds float, ptr %9117, i64 %11255
  %11257 = load <4 x float>, ptr %11256, align 4, !tbaa !68
  %11258 = fmul <4 x float> %11257, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11259 = fadd <4 x float> %11254, %11258
  %11260 = fmul <4 x float> %11259, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11261 = fadd <4 x float> %11250, %11260
  %11262 = fadd <4 x float> %11236, %11261
  %11263 = insertelement <4 x i32> undef, i32 %t3013.us, i64 0
  %11264 = shufflevector <4 x i32> %11263, <4 x i32> undef, <4 x i32> zeroinitializer
  %11265 = add nsw <4 x i32> %11264, <i32 0, i32 1, i32 2, i32 3>
  %11266 = add nsw <4 x i32> %t3014.us, %11265
  %11267 = sext <4 x i32> %11266 to <4 x i64>
  %11268 = extractelement <4 x i64> %11267, i64 0
  %11269 = getelementptr inbounds float, ptr %f5.host, i64 %11268
  %11270 = load float, ptr %11269, align 4, !tbaa !46
  %11271 = insertelement <4 x float> undef, float %11270, i64 0
  %11272 = extractelement <4 x i64> %11267, i64 1
  %11273 = getelementptr inbounds float, ptr %f5.host, i64 %11272
  %11274 = load float, ptr %11273, align 4, !tbaa !46
  %11275 = insertelement <4 x float> %11271, float %11274, i64 1
  %11276 = extractelement <4 x i64> %11267, i64 2
  %11277 = getelementptr inbounds float, ptr %f5.host, i64 %11276
  %11278 = load float, ptr %11277, align 4, !tbaa !46
  %11279 = insertelement <4 x float> %11275, float %11278, i64 2
  %11280 = extractelement <4 x i64> %11267, i64 3
  %11281 = getelementptr inbounds float, ptr %f5.host, i64 %11280
  %11282 = load float, ptr %11281, align 4, !tbaa !46
  %11283 = insertelement <4 x float> %11279, float %11282, i64 3
  %11284 = fmul <4 x float> %11283, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11285 = insertelement <4 x i32> undef, i32 %t3012.us, i64 0
  %11286 = shufflevector <4 x i32> %11285, <4 x i32> undef, <4 x i32> zeroinitializer
  %11287 = add nsw <4 x i32> %11286, <i32 0, i32 1, i32 2, i32 3>
  %11288 = add <4 x i32> %t3014.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11289 = add <4 x i32> %11288, %11287
  %11290 = sext <4 x i32> %11289 to <4 x i64>
  %11291 = extractelement <4 x i64> %11290, i64 0
  %11292 = getelementptr inbounds float, ptr %f5.host, i64 %11291
  %11293 = load float, ptr %11292, align 4, !tbaa !46
  %11294 = insertelement <4 x float> undef, float %11293, i64 0
  %11295 = extractelement <4 x i64> %11290, i64 1
  %11296 = getelementptr inbounds float, ptr %f5.host, i64 %11295
  %11297 = load float, ptr %11296, align 4, !tbaa !46
  %11298 = insertelement <4 x float> %11294, float %11297, i64 1
  %11299 = extractelement <4 x i64> %11290, i64 2
  %11300 = getelementptr inbounds float, ptr %f5.host, i64 %11299
  %11301 = load float, ptr %11300, align 4, !tbaa !46
  %11302 = insertelement <4 x float> %11298, float %11301, i64 2
  %11303 = extractelement <4 x i64> %11290, i64 3
  %11304 = getelementptr inbounds float, ptr %f5.host, i64 %11303
  %11305 = load float, ptr %11304, align 4, !tbaa !46
  %11306 = insertelement <4 x float> %11302, float %11305, i64 3
  %11307 = fmul <4 x float> %11306, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11308 = fadd <4 x float> %11284, %11307
  %11309 = fmul <4 x float> %11308, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11310 = insertelement <4 x i32> undef, i32 %t3011.us, i64 0
  %11311 = shufflevector <4 x i32> %11310, <4 x i32> undef, <4 x i32> zeroinitializer
  %11312 = add nsw <4 x i32> %11311, <i32 0, i32 1, i32 2, i32 3>
  %11313 = add nsw <4 x i32> %t3014.us, %11312
  %11314 = sext <4 x i32> %11313 to <4 x i64>
  %11315 = extractelement <4 x i64> %11314, i64 0
  %11316 = getelementptr inbounds float, ptr %f5.host, i64 %11315
  %11317 = load float, ptr %11316, align 4, !tbaa !46
  %11318 = insertelement <4 x float> undef, float %11317, i64 0
  %11319 = extractelement <4 x i64> %11314, i64 1
  %11320 = getelementptr inbounds float, ptr %f5.host, i64 %11319
  %11321 = load float, ptr %11320, align 4, !tbaa !46
  %11322 = insertelement <4 x float> %11318, float %11321, i64 1
  %11323 = extractelement <4 x i64> %11314, i64 2
  %11324 = getelementptr inbounds float, ptr %f5.host, i64 %11323
  %11325 = load float, ptr %11324, align 4, !tbaa !46
  %11326 = insertelement <4 x float> %11322, float %11325, i64 2
  %11327 = extractelement <4 x i64> %11314, i64 3
  %11328 = getelementptr inbounds float, ptr %f5.host, i64 %11327
  %11329 = load float, ptr %11328, align 4, !tbaa !46
  %11330 = insertelement <4 x float> %11326, float %11329, i64 3
  %11331 = fmul <4 x float> %11330, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11332 = insertelement <4 x i32> undef, i32 %t3008.us, i64 0
  %11333 = shufflevector <4 x i32> %11332, <4 x i32> undef, <4 x i32> zeroinitializer
  %11334 = add nsw <4 x i32> %11333, <i32 0, i32 1, i32 2, i32 3>
  %11335 = add <4 x i32> %11288, %11334
  %11336 = sext <4 x i32> %11335 to <4 x i64>
  %11337 = extractelement <4 x i64> %11336, i64 0
  %11338 = getelementptr inbounds float, ptr %f5.host, i64 %11337
  %11339 = load float, ptr %11338, align 4, !tbaa !46
  %11340 = insertelement <4 x float> undef, float %11339, i64 0
  %11341 = extractelement <4 x i64> %11336, i64 1
  %11342 = getelementptr inbounds float, ptr %f5.host, i64 %11341
  %11343 = load float, ptr %11342, align 4, !tbaa !46
  %11344 = insertelement <4 x float> %11340, float %11343, i64 1
  %11345 = extractelement <4 x i64> %11336, i64 2
  %11346 = getelementptr inbounds float, ptr %f5.host, i64 %11345
  %11347 = load float, ptr %11346, align 4, !tbaa !46
  %11348 = insertelement <4 x float> %11344, float %11347, i64 2
  %11349 = extractelement <4 x i64> %11336, i64 3
  %11350 = getelementptr inbounds float, ptr %f5.host, i64 %11349
  %11351 = load float, ptr %11350, align 4, !tbaa !46
  %11352 = insertelement <4 x float> %11348, float %11351, i64 3
  %11353 = fmul <4 x float> %11352, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11354 = fadd <4 x float> %11331, %11353
  %11355 = fmul <4 x float> %11354, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11356 = fadd <4 x float> %11309, %11355
  %11357 = mul nsw <4 x i32> %11013, %9217
  %11358 = add nsw i32 %t2987.us, 1
  %11359 = insertelement <4 x i32> undef, i32 %11358, i64 0
  %11360 = shufflevector <4 x i32> %11359, <4 x i32> undef, <4 x i32> zeroinitializer
  %11361 = add nsw <4 x i32> %11360, <i32 0, i32 2, i32 4, i32 6>
  %11362 = add nsw <4 x i32> %11357, %11361
  %11363 = sext <4 x i32> %11362 to <4 x i64>
  %11364 = extractelement <4 x i64> %11363, i64 0
  %11365 = getelementptr inbounds float, ptr %f4.host, i64 %11364
  %11366 = load float, ptr %11365, align 4, !tbaa !44
  %11367 = insertelement <4 x float> undef, float %11366, i64 0
  %11368 = extractelement <4 x i64> %11363, i64 1
  %11369 = getelementptr inbounds float, ptr %f4.host, i64 %11368
  %11370 = load float, ptr %11369, align 4, !tbaa !44
  %11371 = insertelement <4 x float> %11367, float %11370, i64 1
  %11372 = extractelement <4 x i64> %11363, i64 2
  %11373 = getelementptr inbounds float, ptr %f4.host, i64 %11372
  %11374 = load float, ptr %11373, align 4, !tbaa !44
  %11375 = insertelement <4 x float> %11371, float %11374, i64 2
  %11376 = extractelement <4 x i64> %11363, i64 3
  %11377 = getelementptr inbounds float, ptr %f4.host, i64 %11376
  %11378 = load float, ptr %11377, align 4, !tbaa !44
  %11379 = insertelement <4 x float> %11375, float %11378, i64 3
  %11380 = fsub <4 x float> %11379, %11356
  %11381 = fmul <4 x float> %t3003.us, %11380
  %11382 = add nsw <4 x i32> %t3009.us, %11265
  %11383 = sext <4 x i32> %11382 to <4 x i64>
  %11384 = extractelement <4 x i64> %11383, i64 0
  %11385 = getelementptr inbounds float, ptr %f5.host, i64 %11384
  %11386 = load float, ptr %11385, align 4, !tbaa !46
  %11387 = insertelement <4 x float> undef, float %11386, i64 0
  %11388 = extractelement <4 x i64> %11383, i64 1
  %11389 = getelementptr inbounds float, ptr %f5.host, i64 %11388
  %11390 = load float, ptr %11389, align 4, !tbaa !46
  %11391 = insertelement <4 x float> %11387, float %11390, i64 1
  %11392 = extractelement <4 x i64> %11383, i64 2
  %11393 = getelementptr inbounds float, ptr %f5.host, i64 %11392
  %11394 = load float, ptr %11393, align 4, !tbaa !46
  %11395 = insertelement <4 x float> %11391, float %11394, i64 2
  %11396 = extractelement <4 x i64> %11383, i64 3
  %11397 = getelementptr inbounds float, ptr %f5.host, i64 %11396
  %11398 = load float, ptr %11397, align 4, !tbaa !46
  %11399 = insertelement <4 x float> %11395, float %11398, i64 3
  %11400 = fmul <4 x float> %11399, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11401 = add <4 x i32> %t3009.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11402 = add <4 x i32> %11401, %11287
  %11403 = sext <4 x i32> %11402 to <4 x i64>
  %11404 = extractelement <4 x i64> %11403, i64 0
  %11405 = getelementptr inbounds float, ptr %f5.host, i64 %11404
  %11406 = load float, ptr %11405, align 4, !tbaa !46
  %11407 = insertelement <4 x float> undef, float %11406, i64 0
  %11408 = extractelement <4 x i64> %11403, i64 1
  %11409 = getelementptr inbounds float, ptr %f5.host, i64 %11408
  %11410 = load float, ptr %11409, align 4, !tbaa !46
  %11411 = insertelement <4 x float> %11407, float %11410, i64 1
  %11412 = extractelement <4 x i64> %11403, i64 2
  %11413 = getelementptr inbounds float, ptr %f5.host, i64 %11412
  %11414 = load float, ptr %11413, align 4, !tbaa !46
  %11415 = insertelement <4 x float> %11411, float %11414, i64 2
  %11416 = extractelement <4 x i64> %11403, i64 3
  %11417 = getelementptr inbounds float, ptr %f5.host, i64 %11416
  %11418 = load float, ptr %11417, align 4, !tbaa !46
  %11419 = insertelement <4 x float> %11415, float %11418, i64 3
  %11420 = fmul <4 x float> %11419, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11421 = fadd <4 x float> %11400, %11420
  %11422 = fmul <4 x float> %11421, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11423 = add nsw <4 x i32> %t3009.us, %11312
  %11424 = sext <4 x i32> %11423 to <4 x i64>
  %11425 = extractelement <4 x i64> %11424, i64 0
  %11426 = getelementptr inbounds float, ptr %f5.host, i64 %11425
  %11427 = load float, ptr %11426, align 4, !tbaa !46
  %11428 = insertelement <4 x float> undef, float %11427, i64 0
  %11429 = extractelement <4 x i64> %11424, i64 1
  %11430 = getelementptr inbounds float, ptr %f5.host, i64 %11429
  %11431 = load float, ptr %11430, align 4, !tbaa !46
  %11432 = insertelement <4 x float> %11428, float %11431, i64 1
  %11433 = extractelement <4 x i64> %11424, i64 2
  %11434 = getelementptr inbounds float, ptr %f5.host, i64 %11433
  %11435 = load float, ptr %11434, align 4, !tbaa !46
  %11436 = insertelement <4 x float> %11432, float %11435, i64 2
  %11437 = extractelement <4 x i64> %11424, i64 3
  %11438 = getelementptr inbounds float, ptr %f5.host, i64 %11437
  %11439 = load float, ptr %11438, align 4, !tbaa !46
  %11440 = insertelement <4 x float> %11436, float %11439, i64 3
  %11441 = fmul <4 x float> %11440, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11442 = add <4 x i32> %11401, %11334
  %11443 = sext <4 x i32> %11442 to <4 x i64>
  %11444 = extractelement <4 x i64> %11443, i64 0
  %11445 = getelementptr inbounds float, ptr %f5.host, i64 %11444
  %11446 = load float, ptr %11445, align 4, !tbaa !46
  %11447 = insertelement <4 x float> undef, float %11446, i64 0
  %11448 = extractelement <4 x i64> %11443, i64 1
  %11449 = getelementptr inbounds float, ptr %f5.host, i64 %11448
  %11450 = load float, ptr %11449, align 4, !tbaa !46
  %11451 = insertelement <4 x float> %11447, float %11450, i64 1
  %11452 = extractelement <4 x i64> %11443, i64 2
  %11453 = getelementptr inbounds float, ptr %f5.host, i64 %11452
  %11454 = load float, ptr %11453, align 4, !tbaa !46
  %11455 = insertelement <4 x float> %11451, float %11454, i64 2
  %11456 = extractelement <4 x i64> %11443, i64 3
  %11457 = getelementptr inbounds float, ptr %f5.host, i64 %11456
  %11458 = load float, ptr %11457, align 4, !tbaa !46
  %11459 = insertelement <4 x float> %11455, float %11458, i64 3
  %11460 = fmul <4 x float> %11459, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11461 = fadd <4 x float> %11441, %11460
  %11462 = fmul <4 x float> %11461, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11463 = fadd <4 x float> %11422, %11462
  %11464 = mul nsw <4 x i32> %t3006.us, %9217
  %11465 = add nsw <4 x i32> %11464, %11361
  %11466 = sext <4 x i32> %11465 to <4 x i64>
  %11467 = extractelement <4 x i64> %11466, i64 0
  %11468 = getelementptr inbounds float, ptr %f4.host, i64 %11467
  %11469 = load float, ptr %11468, align 4, !tbaa !44
  %11470 = insertelement <4 x float> undef, float %11469, i64 0
  %11471 = extractelement <4 x i64> %11466, i64 1
  %11472 = getelementptr inbounds float, ptr %f4.host, i64 %11471
  %11473 = load float, ptr %11472, align 4, !tbaa !44
  %11474 = insertelement <4 x float> %11470, float %11473, i64 1
  %11475 = extractelement <4 x i64> %11466, i64 2
  %11476 = getelementptr inbounds float, ptr %f4.host, i64 %11475
  %11477 = load float, ptr %11476, align 4, !tbaa !44
  %11478 = insertelement <4 x float> %11474, float %11477, i64 2
  %11479 = extractelement <4 x i64> %11466, i64 3
  %11480 = getelementptr inbounds float, ptr %f4.host, i64 %11479
  %11481 = load float, ptr %11480, align 4, !tbaa !44
  %11482 = insertelement <4 x float> %11478, float %11481, i64 3
  %11483 = fsub <4 x float> %11482, %11463
  %11484 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t3003.us
  %11485 = fmul <4 x float> %11484, %11483
  %11486 = fadd <4 x float> %11381, %11485
  %11487 = sext i32 %11007 to i64
  %11488 = sub nsw i64 %11487, %9208
  %11489 = add nsw i64 %11488, %10977
  %11490 = getelementptr inbounds float, ptr %9117, i64 %11489
  %11491 = load <4 x float>, ptr %11490, align 4, !tbaa !68
  %11492 = fmul <4 x float> %11491, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11493 = sext i32 %t3000.us to i64
  %11494 = sub nsw i64 %11493, %9208
  %11495 = add nsw i64 %10978, %11494
  %11496 = getelementptr inbounds float, ptr %9117, i64 %11495
  %11497 = load <4 x float>, ptr %11496, align 4, !tbaa !68
  %11498 = fmul <4 x float> %11497, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11499 = fadd <4 x float> %11492, %11498
  %11500 = fmul <4 x float> %11499, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11501 = add nsw i64 %11488, %10979
  %11502 = getelementptr inbounds float, ptr %9117, i64 %11501
  %11503 = load <4 x float>, ptr %11502, align 4, !tbaa !68
  %11504 = fmul <4 x float> %11503, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11505 = add nsw i64 %10980, %11494
  %11506 = getelementptr inbounds float, ptr %9117, i64 %11505
  %11507 = load <4 x float>, ptr %11506, align 4, !tbaa !68
  %11508 = fmul <4 x float> %11507, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11509 = fadd <4 x float> %11504, %11508
  %11510 = fmul <4 x float> %11509, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11511 = fadd <4 x float> %11500, %11510
  %11512 = fadd <4 x float> %11486, %11511
  %11513 = shufflevector <4 x float> %11262, <4 x float> %11512, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %11514 = sext i32 %f126.s0.v3.v303.base181.us to i64
  %11515 = add i64 %10983, %11514
  %11516 = getelementptr inbounds float, ptr %9146, i64 %11515
  store <8 x float> %11513, ptr %11516, align 4, !tbaa !70
  %lsr.iv.next437.us = add i32 %lsr.iv436.us, -1
  %lsr.iv.next439.us = add i32 %lsr.iv438.us, 8
  %.not87.us = icmp eq i32 %lsr.iv.next437.us, 0
  br i1 %.not87.us, label %"end for f126.s0.v3.v3179.loopexit.us", label %"for f126.s0.v3.v3178.us"

"end for f126.s0.v3.v3179.loopexit.us":           ; preds = %"for f126.s0.v3.v3178.us"
  %indvars.iv.next301 = add nsw i64 %indvars.iv300, 1
  %11517 = icmp eq i64 %indvars.iv.next301, %sext302
  br i1 %11517, label %"consume f126182", label %"for f126.s0.v4175.us"

"consume f126182":                                ; preds = %"end for f126.s0.v3.v3179.loopexit.us", %"produce f126173"
  br i1 %9153, label %"assert succeeded185", label %"assert failed184", !prof !5

"assert failed184":                               ; preds = %"consume f126182"
  %11518 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %9152, i64 2147483647) #4
  br label %destructor_block

"assert succeeded185":                            ; preds = %"consume f126182"
  %11519 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9222)
  %.not81 = icmp eq ptr %11519, null
  br i1 %.not81, label %"assert failed186", label %"produce f125189", !prof !4

"assert failed186":                               ; preds = %"assert succeeded185"
  %11520 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block

"produce f125189":                                ; preds = %"assert succeeded185"
  br i1 %9225, label %"for f125.s0.v3.v3190.preheader", label %"consume f125194", !prof !5

"for f125.s0.v3.v3190.preheader":                 ; preds = %"produce f125189"
  %11521 = shl i32 %9258, 1
  %11522 = and i32 %11521, 2
  %t3016 = add nsw i32 %11522, %9261
  %11523 = sub nsw i32 %9258, %f2.v4.min_realized
  %11524 = mul nsw i32 %11523, %9226
  %11525 = sub i32 %11524, %f2.v3.min_realized
  %11526 = add i32 %t3016, %9230
  %t3028 = mul nsw i32 %11526, %9131
  %11527 = sub nsw i32 %9261, %9082
  %t3030 = mul nsw i32 %11527, %9131
  %11528 = add i32 %t3016, %9236
  %11529 = mul nsw i32 %11528, %f4.stride.1
  %11530 = sub nsw i32 %9261, %f4.v4.min_realized
  %11531 = mul nsw i32 %11530, %f4.stride.1
  %11532 = sext i32 %t3030 to i64
  %11533 = add nsw i64 %11532, -1
  %11534 = sext i32 %t3028 to i64
  %11535 = add nsw i64 %11534, -1
  br label %"for f125.s0.v3.v3190"

"for f125.s0.v3.v3190":                           ; preds = %"for f125.s0.v3.v3190.preheader", %"for f125.s0.v3.v3190"
  %lsr.iv442 = phi i32 [ %lsr.iv.next443, %"for f125.s0.v3.v3190" ], [ %a1120, %"for f125.s0.v3.v3190.preheader" ]
  %lsr.iv440 = phi i32 [ %lsr.iv.next441, %"for f125.s0.v3.v3190" ], [ %9224, %"for f125.s0.v3.v3190.preheader" ]
  %f125.s0.v3.v366.base193 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %lsr.iv442)
  %11536 = shl i32 %f125.s0.v3.v366.base193, 1
  %11537 = and i32 %11536, 2
  %11538 = ashr i32 %f125.s0.v3.v366.base193, 1
  %t3017 = add nsw i32 %11537, %11538
  %t3018 = add i32 %11525, %f125.s0.v3.v366.base193
  %11539 = sext i32 %t3018 to i64
  %11540 = getelementptr inbounds float, ptr %f2.host, i64 %11539
  %11541 = load <4 x float>, ptr %11540, align 4, !tbaa !42
  %11542 = add nsw i64 %11539, 4
  %11543 = getelementptr inbounds float, ptr %f2.host, i64 %11542
  %11544 = load <4 x float>, ptr %11543, align 4, !tbaa !42
  %t3019 = shufflevector <4 x float> %11541, <4 x float> %11544, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3020 = shufflevector <4 x float> %11541, <4 x float> %11544, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t3021 = fmul <4 x float> %9160, %t3019
  %t3022 = fmul <4 x float> %9160, %t3020
  %a1125 = fptosi <4 x float> %t3022 to <4 x i32>
  %a1132 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1125)
  %11545 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1132, <4 x i32> zeroinitializer)
  %t3024 = sitofp <4 x i32> %11545 to <4 x float>
  %t3025 = fmul <4 x float> %9229, %t3024
  %11546 = add nuw nsw <4 x i32> %11545, <i32 1, i32 1, i32 1, i32 1>
  %11547 = sitofp <4 x i32> %11546 to <4 x float>
  %t3026 = fmul <4 x float> %9229, %11547
  %11548 = fmul <4 x float> %t3022, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1130 = fptosi <4 x float> %11548 to <4 x i32>
  %a1129 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1130)
  %11549 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1129, <4 x i32> zeroinitializer)
  %11550 = shl <4 x i32> %11545, <i32 8, i32 8, i32 8, i32 8>
  %.neg205 = sub <4 x i32> %.neg203, %11550
  %t3031 = add <4 x i32> %.neg205, %11549
  %11551 = sub nsw i32 %t3017, %f4.v3.min_realized
  %t3034 = add nsw i32 %11551, %11529
  %t3036 = sub nsw <4 x i32> %11545, %9169
  %t3037 = mul nsw <4 x i32> %t3036, %9217
  %11552 = sub nsw i32 %11538, %f4.v3.min_realized
  %t3039 = add nsw i32 %11552, %11529
  %t3041 = add nsw i32 %11551, %11531
  %t3042 = add nsw i32 %11552, %11531
  %11553 = add nsw <4 x i32> %t3036, <i32 1, i32 1, i32 1, i32 1>
  %t3043 = mul nsw <4 x i32> %11553, %9217
  %11554 = add nsw i32 %f125.s0.v3.v366.base193, 1
  %11555 = shl i32 %11554, 1
  %11556 = and i32 %11555, 2
  %11557 = ashr i32 %11554, 1
  %t3044 = add nsw i32 %11556, %11557
  %a1133 = fptosi <4 x float> %t3021 to <4 x i32>
  %a1140 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1133)
  %11558 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1140, <4 x i32> zeroinitializer)
  %t3046 = sitofp <4 x i32> %11558 to <4 x float>
  %t3047 = fmul <4 x float> %9229, %t3046
  %11559 = add nuw nsw <4 x i32> %11558, <i32 1, i32 1, i32 1, i32 1>
  %11560 = sitofp <4 x i32> %11559 to <4 x float>
  %t3048 = fmul <4 x float> %9229, %11560
  %11561 = fmul <4 x float> %t3021, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1138 = fptosi <4 x float> %11561 to <4 x i32>
  %a1137 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1138)
  %11562 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1137, <4 x i32> zeroinitializer)
  %11563 = shl <4 x i32> %11558, <i32 8, i32 8, i32 8, i32 8>
  %.neg207 = sub <4 x i32> %.neg203, %11563
  %t3051 = add <4 x i32> %.neg207, %11562
  %11564 = sub nsw i32 %t3044, %f4.v3.min_realized
  %t3053 = add nsw i32 %11564, %11529
  %t3054 = sub nsw <4 x i32> %11558, %9169
  %t3055 = mul nsw <4 x i32> %t3054, %9217
  %11565 = sub nsw i32 %11557, %f4.v3.min_realized
  %t3057 = add nsw i32 %11565, %11529
  %t3058 = add nsw i32 %11564, %11531
  %t3059 = add nsw i32 %11565, %11531
  %11566 = add nsw <4 x i32> %t3054, <i32 1, i32 1, i32 1, i32 1>
  %t3060 = mul nsw <4 x i32> %11566, %9217
  %11567 = insertelement <4 x i32> undef, i32 %t3042, i64 0
  %11568 = shufflevector <4 x i32> %11567, <4 x i32> undef, <4 x i32> zeroinitializer
  %11569 = add nsw <4 x i32> %11568, <i32 0, i32 1, i32 2, i32 3>
  %11570 = add nsw <4 x i32> %t3043, %11569
  %11571 = sext <4 x i32> %11570 to <4 x i64>
  %11572 = extractelement <4 x i64> %11571, i64 0
  %11573 = getelementptr inbounds float, ptr %f4.host, i64 %11572
  %11574 = load float, ptr %11573, align 4, !tbaa !44
  %11575 = insertelement <4 x float> undef, float %11574, i64 0
  %11576 = extractelement <4 x i64> %11571, i64 1
  %11577 = getelementptr inbounds float, ptr %f4.host, i64 %11576
  %11578 = load float, ptr %11577, align 4, !tbaa !44
  %11579 = insertelement <4 x float> %11575, float %11578, i64 1
  %11580 = extractelement <4 x i64> %11571, i64 2
  %11581 = getelementptr inbounds float, ptr %f4.host, i64 %11580
  %11582 = load float, ptr %11581, align 4, !tbaa !44
  %11583 = insertelement <4 x float> %11579, float %11582, i64 2
  %11584 = extractelement <4 x i64> %11571, i64 3
  %11585 = getelementptr inbounds float, ptr %f4.host, i64 %11584
  %11586 = load float, ptr %11585, align 4, !tbaa !44
  %11587 = insertelement <4 x float> %11583, float %11586, i64 3
  %11588 = fmul <4 x float> %11587, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11589 = insertelement <4 x i32> undef, i32 %t3041, i64 0
  %11590 = shufflevector <4 x i32> %11589, <4 x i32> undef, <4 x i32> zeroinitializer
  %11591 = add <4 x i32> %11590, <i32 -1, i32 0, i32 1, i32 2>
  %11592 = add <4 x i32> %11591, %t3043
  %11593 = sext <4 x i32> %11592 to <4 x i64>
  %11594 = extractelement <4 x i64> %11593, i64 0
  %11595 = getelementptr inbounds float, ptr %f4.host, i64 %11594
  %11596 = load float, ptr %11595, align 4, !tbaa !44
  %11597 = insertelement <4 x float> undef, float %11596, i64 0
  %11598 = extractelement <4 x i64> %11593, i64 1
  %11599 = getelementptr inbounds float, ptr %f4.host, i64 %11598
  %11600 = load float, ptr %11599, align 4, !tbaa !44
  %11601 = insertelement <4 x float> %11597, float %11600, i64 1
  %11602 = extractelement <4 x i64> %11593, i64 2
  %11603 = getelementptr inbounds float, ptr %f4.host, i64 %11602
  %11604 = load float, ptr %11603, align 4, !tbaa !44
  %11605 = insertelement <4 x float> %11601, float %11604, i64 2
  %11606 = extractelement <4 x i64> %11593, i64 3
  %11607 = getelementptr inbounds float, ptr %f4.host, i64 %11606
  %11608 = load float, ptr %11607, align 4, !tbaa !44
  %11609 = insertelement <4 x float> %11605, float %11608, i64 3
  %11610 = fmul <4 x float> %11609, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11611 = fadd <4 x float> %11588, %11610
  %11612 = fmul <4 x float> %11611, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11613 = insertelement <4 x i32> undef, i32 %t3039, i64 0
  %11614 = shufflevector <4 x i32> %11613, <4 x i32> undef, <4 x i32> zeroinitializer
  %11615 = add nsw <4 x i32> %11614, <i32 0, i32 1, i32 2, i32 3>
  %11616 = add nsw <4 x i32> %t3043, %11615
  %11617 = sext <4 x i32> %11616 to <4 x i64>
  %11618 = extractelement <4 x i64> %11617, i64 0
  %11619 = getelementptr inbounds float, ptr %f4.host, i64 %11618
  %11620 = load float, ptr %11619, align 4, !tbaa !44
  %11621 = insertelement <4 x float> undef, float %11620, i64 0
  %11622 = extractelement <4 x i64> %11617, i64 1
  %11623 = getelementptr inbounds float, ptr %f4.host, i64 %11622
  %11624 = load float, ptr %11623, align 4, !tbaa !44
  %11625 = insertelement <4 x float> %11621, float %11624, i64 1
  %11626 = extractelement <4 x i64> %11617, i64 2
  %11627 = getelementptr inbounds float, ptr %f4.host, i64 %11626
  %11628 = load float, ptr %11627, align 4, !tbaa !44
  %11629 = insertelement <4 x float> %11625, float %11628, i64 2
  %11630 = extractelement <4 x i64> %11617, i64 3
  %11631 = getelementptr inbounds float, ptr %f4.host, i64 %11630
  %11632 = load float, ptr %11631, align 4, !tbaa !44
  %11633 = insertelement <4 x float> %11629, float %11632, i64 3
  %11634 = fmul <4 x float> %11633, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11635 = insertelement <4 x i32> undef, i32 %t3034, i64 0
  %11636 = shufflevector <4 x i32> %11635, <4 x i32> undef, <4 x i32> zeroinitializer
  %11637 = add <4 x i32> %11636, <i32 -1, i32 0, i32 1, i32 2>
  %11638 = add <4 x i32> %11637, %t3043
  %11639 = sext <4 x i32> %11638 to <4 x i64>
  %11640 = extractelement <4 x i64> %11639, i64 0
  %11641 = getelementptr inbounds float, ptr %f4.host, i64 %11640
  %11642 = load float, ptr %11641, align 4, !tbaa !44
  %11643 = insertelement <4 x float> undef, float %11642, i64 0
  %11644 = extractelement <4 x i64> %11639, i64 1
  %11645 = getelementptr inbounds float, ptr %f4.host, i64 %11644
  %11646 = load float, ptr %11645, align 4, !tbaa !44
  %11647 = insertelement <4 x float> %11643, float %11646, i64 1
  %11648 = extractelement <4 x i64> %11639, i64 2
  %11649 = getelementptr inbounds float, ptr %f4.host, i64 %11648
  %11650 = load float, ptr %11649, align 4, !tbaa !44
  %11651 = insertelement <4 x float> %11647, float %11650, i64 2
  %11652 = extractelement <4 x i64> %11639, i64 3
  %11653 = getelementptr inbounds float, ptr %f4.host, i64 %11652
  %11654 = load float, ptr %11653, align 4, !tbaa !44
  %11655 = insertelement <4 x float> %11651, float %11654, i64 3
  %11656 = fmul <4 x float> %11655, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11657 = fadd <4 x float> %11634, %11656
  %11658 = fmul <4 x float> %11657, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11659 = fadd <4 x float> %11612, %11658
  %11660 = sext <4 x i32> %t3031 to <4 x i64>
  %11661 = extractelement <4 x i64> %11660, i64 0
  %11662 = getelementptr inbounds float, ptr %f0.host, i64 %11661
  %11663 = load float, ptr %11662, align 4, !tbaa !6
  %11664 = insertelement <4 x float> undef, float %11663, i64 0
  %11665 = extractelement <4 x i64> %11660, i64 1
  %11666 = getelementptr inbounds float, ptr %f0.host, i64 %11665
  %11667 = load float, ptr %11666, align 4, !tbaa !6
  %11668 = insertelement <4 x float> %11664, float %11667, i64 1
  %11669 = extractelement <4 x i64> %11660, i64 2
  %11670 = getelementptr inbounds float, ptr %f0.host, i64 %11669
  %11671 = load float, ptr %11670, align 4, !tbaa !6
  %11672 = insertelement <4 x float> %11668, float %11671, i64 2
  %11673 = extractelement <4 x i64> %11660, i64 3
  %11674 = getelementptr inbounds float, ptr %f0.host, i64 %11673
  %11675 = load float, ptr %11674, align 4, !tbaa !6
  %11676 = insertelement <4 x float> %11672, float %11675, i64 3
  %11677 = fsub <4 x float> %t3020, %t3026
  %11678 = fmul <4 x float> %9238, %11677
  %11679 = fadd <4 x float> %t3026, %11678
  %11680 = fadd <4 x float> %11679, %11676
  %11681 = fsub <4 x float> %11680, %11659
  %11682 = fsub <4 x float> %t3022, %t3024
  %11683 = fmul <4 x float> %11682, %11681
  %11684 = add nsw <4 x i32> %t3037, %11569
  %11685 = sext <4 x i32> %11684 to <4 x i64>
  %11686 = extractelement <4 x i64> %11685, i64 0
  %11687 = getelementptr inbounds float, ptr %f4.host, i64 %11686
  %11688 = load float, ptr %11687, align 4, !tbaa !44
  %11689 = insertelement <4 x float> undef, float %11688, i64 0
  %11690 = extractelement <4 x i64> %11685, i64 1
  %11691 = getelementptr inbounds float, ptr %f4.host, i64 %11690
  %11692 = load float, ptr %11691, align 4, !tbaa !44
  %11693 = insertelement <4 x float> %11689, float %11692, i64 1
  %11694 = extractelement <4 x i64> %11685, i64 2
  %11695 = getelementptr inbounds float, ptr %f4.host, i64 %11694
  %11696 = load float, ptr %11695, align 4, !tbaa !44
  %11697 = insertelement <4 x float> %11693, float %11696, i64 2
  %11698 = extractelement <4 x i64> %11685, i64 3
  %11699 = getelementptr inbounds float, ptr %f4.host, i64 %11698
  %11700 = load float, ptr %11699, align 4, !tbaa !44
  %11701 = insertelement <4 x float> %11697, float %11700, i64 3
  %11702 = fmul <4 x float> %11701, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11703 = add <4 x i32> %11591, %t3037
  %11704 = sext <4 x i32> %11703 to <4 x i64>
  %11705 = extractelement <4 x i64> %11704, i64 0
  %11706 = getelementptr inbounds float, ptr %f4.host, i64 %11705
  %11707 = load float, ptr %11706, align 4, !tbaa !44
  %11708 = insertelement <4 x float> undef, float %11707, i64 0
  %11709 = extractelement <4 x i64> %11704, i64 1
  %11710 = getelementptr inbounds float, ptr %f4.host, i64 %11709
  %11711 = load float, ptr %11710, align 4, !tbaa !44
  %11712 = insertelement <4 x float> %11708, float %11711, i64 1
  %11713 = extractelement <4 x i64> %11704, i64 2
  %11714 = getelementptr inbounds float, ptr %f4.host, i64 %11713
  %11715 = load float, ptr %11714, align 4, !tbaa !44
  %11716 = insertelement <4 x float> %11712, float %11715, i64 2
  %11717 = extractelement <4 x i64> %11704, i64 3
  %11718 = getelementptr inbounds float, ptr %f4.host, i64 %11717
  %11719 = load float, ptr %11718, align 4, !tbaa !44
  %11720 = insertelement <4 x float> %11716, float %11719, i64 3
  %11721 = fmul <4 x float> %11720, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11722 = fadd <4 x float> %11702, %11721
  %11723 = fmul <4 x float> %11722, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11724 = add nsw <4 x i32> %t3037, %11615
  %11725 = sext <4 x i32> %11724 to <4 x i64>
  %11726 = extractelement <4 x i64> %11725, i64 0
  %11727 = getelementptr inbounds float, ptr %f4.host, i64 %11726
  %11728 = load float, ptr %11727, align 4, !tbaa !44
  %11729 = insertelement <4 x float> undef, float %11728, i64 0
  %11730 = extractelement <4 x i64> %11725, i64 1
  %11731 = getelementptr inbounds float, ptr %f4.host, i64 %11730
  %11732 = load float, ptr %11731, align 4, !tbaa !44
  %11733 = insertelement <4 x float> %11729, float %11732, i64 1
  %11734 = extractelement <4 x i64> %11725, i64 2
  %11735 = getelementptr inbounds float, ptr %f4.host, i64 %11734
  %11736 = load float, ptr %11735, align 4, !tbaa !44
  %11737 = insertelement <4 x float> %11733, float %11736, i64 2
  %11738 = extractelement <4 x i64> %11725, i64 3
  %11739 = getelementptr inbounds float, ptr %f4.host, i64 %11738
  %11740 = load float, ptr %11739, align 4, !tbaa !44
  %11741 = insertelement <4 x float> %11737, float %11740, i64 3
  %11742 = fmul <4 x float> %11741, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11743 = add <4 x i32> %11637, %t3037
  %11744 = sext <4 x i32> %11743 to <4 x i64>
  %11745 = extractelement <4 x i64> %11744, i64 0
  %11746 = getelementptr inbounds float, ptr %f4.host, i64 %11745
  %11747 = load float, ptr %11746, align 4, !tbaa !44
  %11748 = insertelement <4 x float> undef, float %11747, i64 0
  %11749 = extractelement <4 x i64> %11744, i64 1
  %11750 = getelementptr inbounds float, ptr %f4.host, i64 %11749
  %11751 = load float, ptr %11750, align 4, !tbaa !44
  %11752 = insertelement <4 x float> %11748, float %11751, i64 1
  %11753 = extractelement <4 x i64> %11744, i64 2
  %11754 = getelementptr inbounds float, ptr %f4.host, i64 %11753
  %11755 = load float, ptr %11754, align 4, !tbaa !44
  %11756 = insertelement <4 x float> %11752, float %11755, i64 2
  %11757 = extractelement <4 x i64> %11744, i64 3
  %11758 = getelementptr inbounds float, ptr %f4.host, i64 %11757
  %11759 = load float, ptr %11758, align 4, !tbaa !44
  %11760 = insertelement <4 x float> %11756, float %11759, i64 3
  %11761 = fmul <4 x float> %11760, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11762 = fadd <4 x float> %11742, %11761
  %11763 = fmul <4 x float> %11762, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11764 = fadd <4 x float> %11723, %11763
  %11765 = add nsw <4 x i32> %t3031, <i32 256, i32 256, i32 256, i32 256>
  %11766 = sext <4 x i32> %11765 to <4 x i64>
  %11767 = extractelement <4 x i64> %11766, i64 0
  %11768 = getelementptr inbounds float, ptr %f0.host, i64 %11767
  %11769 = load float, ptr %11768, align 4, !tbaa !6
  %11770 = insertelement <4 x float> undef, float %11769, i64 0
  %11771 = extractelement <4 x i64> %11766, i64 1
  %11772 = getelementptr inbounds float, ptr %f0.host, i64 %11771
  %11773 = load float, ptr %11772, align 4, !tbaa !6
  %11774 = insertelement <4 x float> %11770, float %11773, i64 1
  %11775 = extractelement <4 x i64> %11766, i64 2
  %11776 = getelementptr inbounds float, ptr %f0.host, i64 %11775
  %11777 = load float, ptr %11776, align 4, !tbaa !6
  %11778 = insertelement <4 x float> %11774, float %11777, i64 2
  %11779 = extractelement <4 x i64> %11766, i64 3
  %11780 = getelementptr inbounds float, ptr %f0.host, i64 %11779
  %11781 = load float, ptr %11780, align 4, !tbaa !6
  %11782 = insertelement <4 x float> %11778, float %11781, i64 3
  %11783 = fsub <4 x float> %t3020, %t3025
  %11784 = fmul <4 x float> %9238, %11783
  %11785 = fadd <4 x float> %t3025, %11784
  %11786 = fadd <4 x float> %11785, %11782
  %11787 = fsub <4 x float> %11786, %11764
  %11788 = fsub <4 x float> %t3024, %t3022
  %11789 = fadd <4 x float> %11788, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %11790 = fmul <4 x float> %11789, %11787
  %11791 = fadd <4 x float> %11683, %11790
  %11792 = sext i32 %11538 to i64
  %11793 = sub nsw i64 %11792, %9221
  %11794 = add nsw i64 %11793, %11532
  %11795 = getelementptr inbounds float, ptr %9146, i64 %11794
  %11796 = load <4 x float>, ptr %11795, align 4, !tbaa !70
  %11797 = fmul <4 x float> %11796, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11798 = sext i32 %t3017 to i64
  %11799 = sub nsw i64 %11798, %9221
  %11800 = add nsw i64 %11533, %11799
  %11801 = getelementptr inbounds float, ptr %9146, i64 %11800
  %11802 = load <4 x float>, ptr %11801, align 4, !tbaa !70
  %11803 = fmul <4 x float> %11802, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11804 = fadd <4 x float> %11797, %11803
  %11805 = fmul <4 x float> %11804, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11806 = add nsw i64 %11793, %11534
  %11807 = getelementptr inbounds float, ptr %9146, i64 %11806
  %11808 = load <4 x float>, ptr %11807, align 4, !tbaa !70
  %11809 = fmul <4 x float> %11808, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11810 = add nsw i64 %11535, %11799
  %11811 = getelementptr inbounds float, ptr %9146, i64 %11810
  %11812 = load <4 x float>, ptr %11811, align 4, !tbaa !70
  %11813 = fmul <4 x float> %11812, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11814 = fadd <4 x float> %11809, %11813
  %11815 = fmul <4 x float> %11814, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11816 = fadd <4 x float> %11805, %11815
  %11817 = fadd <4 x float> %11791, %11816
  %11818 = insertelement <4 x i32> undef, i32 %t3059, i64 0
  %11819 = shufflevector <4 x i32> %11818, <4 x i32> undef, <4 x i32> zeroinitializer
  %11820 = add nsw <4 x i32> %11819, <i32 0, i32 1, i32 2, i32 3>
  %11821 = add nsw <4 x i32> %t3060, %11820
  %11822 = sext <4 x i32> %11821 to <4 x i64>
  %11823 = extractelement <4 x i64> %11822, i64 0
  %11824 = getelementptr inbounds float, ptr %f4.host, i64 %11823
  %11825 = load float, ptr %11824, align 4, !tbaa !44
  %11826 = insertelement <4 x float> undef, float %11825, i64 0
  %11827 = extractelement <4 x i64> %11822, i64 1
  %11828 = getelementptr inbounds float, ptr %f4.host, i64 %11827
  %11829 = load float, ptr %11828, align 4, !tbaa !44
  %11830 = insertelement <4 x float> %11826, float %11829, i64 1
  %11831 = extractelement <4 x i64> %11822, i64 2
  %11832 = getelementptr inbounds float, ptr %f4.host, i64 %11831
  %11833 = load float, ptr %11832, align 4, !tbaa !44
  %11834 = insertelement <4 x float> %11830, float %11833, i64 2
  %11835 = extractelement <4 x i64> %11822, i64 3
  %11836 = getelementptr inbounds float, ptr %f4.host, i64 %11835
  %11837 = load float, ptr %11836, align 4, !tbaa !44
  %11838 = insertelement <4 x float> %11834, float %11837, i64 3
  %11839 = fmul <4 x float> %11838, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11840 = insertelement <4 x i32> undef, i32 %t3058, i64 0
  %11841 = shufflevector <4 x i32> %11840, <4 x i32> undef, <4 x i32> zeroinitializer
  %11842 = add <4 x i32> %11841, <i32 -1, i32 0, i32 1, i32 2>
  %11843 = add <4 x i32> %11842, %t3060
  %11844 = sext <4 x i32> %11843 to <4 x i64>
  %11845 = extractelement <4 x i64> %11844, i64 0
  %11846 = getelementptr inbounds float, ptr %f4.host, i64 %11845
  %11847 = load float, ptr %11846, align 4, !tbaa !44
  %11848 = insertelement <4 x float> undef, float %11847, i64 0
  %11849 = extractelement <4 x i64> %11844, i64 1
  %11850 = getelementptr inbounds float, ptr %f4.host, i64 %11849
  %11851 = load float, ptr %11850, align 4, !tbaa !44
  %11852 = insertelement <4 x float> %11848, float %11851, i64 1
  %11853 = extractelement <4 x i64> %11844, i64 2
  %11854 = getelementptr inbounds float, ptr %f4.host, i64 %11853
  %11855 = load float, ptr %11854, align 4, !tbaa !44
  %11856 = insertelement <4 x float> %11852, float %11855, i64 2
  %11857 = extractelement <4 x i64> %11844, i64 3
  %11858 = getelementptr inbounds float, ptr %f4.host, i64 %11857
  %11859 = load float, ptr %11858, align 4, !tbaa !44
  %11860 = insertelement <4 x float> %11856, float %11859, i64 3
  %11861 = fmul <4 x float> %11860, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11862 = fadd <4 x float> %11839, %11861
  %11863 = fmul <4 x float> %11862, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11864 = insertelement <4 x i32> undef, i32 %t3057, i64 0
  %11865 = shufflevector <4 x i32> %11864, <4 x i32> undef, <4 x i32> zeroinitializer
  %11866 = add nsw <4 x i32> %11865, <i32 0, i32 1, i32 2, i32 3>
  %11867 = add nsw <4 x i32> %t3060, %11866
  %11868 = sext <4 x i32> %11867 to <4 x i64>
  %11869 = extractelement <4 x i64> %11868, i64 0
  %11870 = getelementptr inbounds float, ptr %f4.host, i64 %11869
  %11871 = load float, ptr %11870, align 4, !tbaa !44
  %11872 = insertelement <4 x float> undef, float %11871, i64 0
  %11873 = extractelement <4 x i64> %11868, i64 1
  %11874 = getelementptr inbounds float, ptr %f4.host, i64 %11873
  %11875 = load float, ptr %11874, align 4, !tbaa !44
  %11876 = insertelement <4 x float> %11872, float %11875, i64 1
  %11877 = extractelement <4 x i64> %11868, i64 2
  %11878 = getelementptr inbounds float, ptr %f4.host, i64 %11877
  %11879 = load float, ptr %11878, align 4, !tbaa !44
  %11880 = insertelement <4 x float> %11876, float %11879, i64 2
  %11881 = extractelement <4 x i64> %11868, i64 3
  %11882 = getelementptr inbounds float, ptr %f4.host, i64 %11881
  %11883 = load float, ptr %11882, align 4, !tbaa !44
  %11884 = insertelement <4 x float> %11880, float %11883, i64 3
  %11885 = fmul <4 x float> %11884, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11886 = insertelement <4 x i32> undef, i32 %t3053, i64 0
  %11887 = shufflevector <4 x i32> %11886, <4 x i32> undef, <4 x i32> zeroinitializer
  %11888 = add <4 x i32> %11887, <i32 -1, i32 0, i32 1, i32 2>
  %11889 = add <4 x i32> %11888, %t3060
  %11890 = sext <4 x i32> %11889 to <4 x i64>
  %11891 = extractelement <4 x i64> %11890, i64 0
  %11892 = getelementptr inbounds float, ptr %f4.host, i64 %11891
  %11893 = load float, ptr %11892, align 4, !tbaa !44
  %11894 = insertelement <4 x float> undef, float %11893, i64 0
  %11895 = extractelement <4 x i64> %11890, i64 1
  %11896 = getelementptr inbounds float, ptr %f4.host, i64 %11895
  %11897 = load float, ptr %11896, align 4, !tbaa !44
  %11898 = insertelement <4 x float> %11894, float %11897, i64 1
  %11899 = extractelement <4 x i64> %11890, i64 2
  %11900 = getelementptr inbounds float, ptr %f4.host, i64 %11899
  %11901 = load float, ptr %11900, align 4, !tbaa !44
  %11902 = insertelement <4 x float> %11898, float %11901, i64 2
  %11903 = extractelement <4 x i64> %11890, i64 3
  %11904 = getelementptr inbounds float, ptr %f4.host, i64 %11903
  %11905 = load float, ptr %11904, align 4, !tbaa !44
  %11906 = insertelement <4 x float> %11902, float %11905, i64 3
  %11907 = fmul <4 x float> %11906, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11908 = fadd <4 x float> %11885, %11907
  %11909 = fmul <4 x float> %11908, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11910 = fadd <4 x float> %11863, %11909
  %11911 = sext <4 x i32> %t3051 to <4 x i64>
  %11912 = extractelement <4 x i64> %11911, i64 0
  %11913 = getelementptr inbounds float, ptr %f0.host, i64 %11912
  %11914 = load float, ptr %11913, align 4, !tbaa !6
  %11915 = insertelement <4 x float> undef, float %11914, i64 0
  %11916 = extractelement <4 x i64> %11911, i64 1
  %11917 = getelementptr inbounds float, ptr %f0.host, i64 %11916
  %11918 = load float, ptr %11917, align 4, !tbaa !6
  %11919 = insertelement <4 x float> %11915, float %11918, i64 1
  %11920 = extractelement <4 x i64> %11911, i64 2
  %11921 = getelementptr inbounds float, ptr %f0.host, i64 %11920
  %11922 = load float, ptr %11921, align 4, !tbaa !6
  %11923 = insertelement <4 x float> %11919, float %11922, i64 2
  %11924 = extractelement <4 x i64> %11911, i64 3
  %11925 = getelementptr inbounds float, ptr %f0.host, i64 %11924
  %11926 = load float, ptr %11925, align 4, !tbaa !6
  %11927 = insertelement <4 x float> %11923, float %11926, i64 3
  %11928 = fsub <4 x float> %t3019, %t3048
  %11929 = fmul <4 x float> %9238, %11928
  %11930 = fadd <4 x float> %t3048, %11929
  %11931 = fadd <4 x float> %11930, %11927
  %11932 = fsub <4 x float> %11931, %11910
  %11933 = fsub <4 x float> %t3021, %t3046
  %11934 = fmul <4 x float> %11933, %11932
  %11935 = add nsw <4 x i32> %t3055, %11820
  %11936 = sext <4 x i32> %11935 to <4 x i64>
  %11937 = extractelement <4 x i64> %11936, i64 0
  %11938 = getelementptr inbounds float, ptr %f4.host, i64 %11937
  %11939 = load float, ptr %11938, align 4, !tbaa !44
  %11940 = insertelement <4 x float> undef, float %11939, i64 0
  %11941 = extractelement <4 x i64> %11936, i64 1
  %11942 = getelementptr inbounds float, ptr %f4.host, i64 %11941
  %11943 = load float, ptr %11942, align 4, !tbaa !44
  %11944 = insertelement <4 x float> %11940, float %11943, i64 1
  %11945 = extractelement <4 x i64> %11936, i64 2
  %11946 = getelementptr inbounds float, ptr %f4.host, i64 %11945
  %11947 = load float, ptr %11946, align 4, !tbaa !44
  %11948 = insertelement <4 x float> %11944, float %11947, i64 2
  %11949 = extractelement <4 x i64> %11936, i64 3
  %11950 = getelementptr inbounds float, ptr %f4.host, i64 %11949
  %11951 = load float, ptr %11950, align 4, !tbaa !44
  %11952 = insertelement <4 x float> %11948, float %11951, i64 3
  %11953 = fmul <4 x float> %11952, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11954 = add <4 x i32> %t3055, %11841
  %11955 = add <4 x i32> %11954, <i32 -1, i32 0, i32 1, i32 2>
  %11956 = sext <4 x i32> %11955 to <4 x i64>
  %11957 = extractelement <4 x i64> %11956, i64 0
  %11958 = getelementptr inbounds float, ptr %f4.host, i64 %11957
  %11959 = load float, ptr %11958, align 4, !tbaa !44
  %11960 = insertelement <4 x float> undef, float %11959, i64 0
  %11961 = extractelement <4 x i64> %11956, i64 1
  %11962 = getelementptr inbounds float, ptr %f4.host, i64 %11961
  %11963 = load float, ptr %11962, align 4, !tbaa !44
  %11964 = insertelement <4 x float> %11960, float %11963, i64 1
  %11965 = extractelement <4 x i64> %11956, i64 2
  %11966 = getelementptr inbounds float, ptr %f4.host, i64 %11965
  %11967 = load float, ptr %11966, align 4, !tbaa !44
  %11968 = insertelement <4 x float> %11964, float %11967, i64 2
  %11969 = extractelement <4 x i64> %11956, i64 3
  %11970 = getelementptr inbounds float, ptr %f4.host, i64 %11969
  %11971 = load float, ptr %11970, align 4, !tbaa !44
  %11972 = insertelement <4 x float> %11968, float %11971, i64 3
  %11973 = fmul <4 x float> %11972, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11974 = fadd <4 x float> %11953, %11973
  %11975 = fmul <4 x float> %11974, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11976 = add nsw <4 x i32> %t3055, %11866
  %11977 = sext <4 x i32> %11976 to <4 x i64>
  %11978 = extractelement <4 x i64> %11977, i64 0
  %11979 = getelementptr inbounds float, ptr %f4.host, i64 %11978
  %11980 = load float, ptr %11979, align 4, !tbaa !44
  %11981 = insertelement <4 x float> undef, float %11980, i64 0
  %11982 = extractelement <4 x i64> %11977, i64 1
  %11983 = getelementptr inbounds float, ptr %f4.host, i64 %11982
  %11984 = load float, ptr %11983, align 4, !tbaa !44
  %11985 = insertelement <4 x float> %11981, float %11984, i64 1
  %11986 = extractelement <4 x i64> %11977, i64 2
  %11987 = getelementptr inbounds float, ptr %f4.host, i64 %11986
  %11988 = load float, ptr %11987, align 4, !tbaa !44
  %11989 = insertelement <4 x float> %11985, float %11988, i64 2
  %11990 = extractelement <4 x i64> %11977, i64 3
  %11991 = getelementptr inbounds float, ptr %f4.host, i64 %11990
  %11992 = load float, ptr %11991, align 4, !tbaa !44
  %11993 = insertelement <4 x float> %11989, float %11992, i64 3
  %11994 = fmul <4 x float> %11993, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11995 = add <4 x i32> %t3055, %11887
  %11996 = add <4 x i32> %11995, <i32 -1, i32 0, i32 1, i32 2>
  %11997 = sext <4 x i32> %11996 to <4 x i64>
  %11998 = extractelement <4 x i64> %11997, i64 0
  %11999 = getelementptr inbounds float, ptr %f4.host, i64 %11998
  %12000 = load float, ptr %11999, align 4, !tbaa !44
  %12001 = insertelement <4 x float> undef, float %12000, i64 0
  %12002 = extractelement <4 x i64> %11997, i64 1
  %12003 = getelementptr inbounds float, ptr %f4.host, i64 %12002
  %12004 = load float, ptr %12003, align 4, !tbaa !44
  %12005 = insertelement <4 x float> %12001, float %12004, i64 1
  %12006 = extractelement <4 x i64> %11997, i64 2
  %12007 = getelementptr inbounds float, ptr %f4.host, i64 %12006
  %12008 = load float, ptr %12007, align 4, !tbaa !44
  %12009 = insertelement <4 x float> %12005, float %12008, i64 2
  %12010 = extractelement <4 x i64> %11997, i64 3
  %12011 = getelementptr inbounds float, ptr %f4.host, i64 %12010
  %12012 = load float, ptr %12011, align 4, !tbaa !44
  %12013 = insertelement <4 x float> %12009, float %12012, i64 3
  %12014 = fmul <4 x float> %12013, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12015 = fadd <4 x float> %11994, %12014
  %12016 = fmul <4 x float> %12015, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12017 = fadd <4 x float> %11975, %12016
  %12018 = add nsw <4 x i32> %t3051, <i32 256, i32 256, i32 256, i32 256>
  %12019 = sext <4 x i32> %12018 to <4 x i64>
  %12020 = extractelement <4 x i64> %12019, i64 0
  %12021 = getelementptr inbounds float, ptr %f0.host, i64 %12020
  %12022 = load float, ptr %12021, align 4, !tbaa !6
  %12023 = insertelement <4 x float> undef, float %12022, i64 0
  %12024 = extractelement <4 x i64> %12019, i64 1
  %12025 = getelementptr inbounds float, ptr %f0.host, i64 %12024
  %12026 = load float, ptr %12025, align 4, !tbaa !6
  %12027 = insertelement <4 x float> %12023, float %12026, i64 1
  %12028 = extractelement <4 x i64> %12019, i64 2
  %12029 = getelementptr inbounds float, ptr %f0.host, i64 %12028
  %12030 = load float, ptr %12029, align 4, !tbaa !6
  %12031 = insertelement <4 x float> %12027, float %12030, i64 2
  %12032 = extractelement <4 x i64> %12019, i64 3
  %12033 = getelementptr inbounds float, ptr %f0.host, i64 %12032
  %12034 = load float, ptr %12033, align 4, !tbaa !6
  %12035 = insertelement <4 x float> %12031, float %12034, i64 3
  %12036 = fsub <4 x float> %t3019, %t3047
  %12037 = fmul <4 x float> %9238, %12036
  %12038 = fadd <4 x float> %t3047, %12037
  %12039 = fadd <4 x float> %12038, %12035
  %12040 = fsub <4 x float> %12039, %12017
  %12041 = fsub <4 x float> %t3046, %t3021
  %12042 = fadd <4 x float> %12041, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12043 = fmul <4 x float> %12042, %12040
  %12044 = fadd <4 x float> %11934, %12043
  %12045 = sext i32 %11557 to i64
  %12046 = sub nsw i64 %12045, %9221
  %12047 = add nsw i64 %12046, %11532
  %12048 = getelementptr inbounds float, ptr %9146, i64 %12047
  %12049 = load <4 x float>, ptr %12048, align 4, !tbaa !70
  %12050 = fmul <4 x float> %12049, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12051 = sext i32 %t3044 to i64
  %12052 = sub nsw i64 %12051, %9221
  %12053 = add nsw i64 %11533, %12052
  %12054 = getelementptr inbounds float, ptr %9146, i64 %12053
  %12055 = load <4 x float>, ptr %12054, align 4, !tbaa !70
  %12056 = fmul <4 x float> %12055, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12057 = fadd <4 x float> %12050, %12056
  %12058 = fmul <4 x float> %12057, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12059 = add nsw i64 %12046, %11534
  %12060 = getelementptr inbounds float, ptr %9146, i64 %12059
  %12061 = load <4 x float>, ptr %12060, align 4, !tbaa !70
  %12062 = fmul <4 x float> %12061, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12063 = add nsw i64 %11535, %12052
  %12064 = getelementptr inbounds float, ptr %9146, i64 %12063
  %12065 = load <4 x float>, ptr %12064, align 4, !tbaa !70
  %12066 = fmul <4 x float> %12065, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12067 = fadd <4 x float> %12062, %12066
  %12068 = fmul <4 x float> %12067, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12069 = fadd <4 x float> %12058, %12068
  %12070 = fadd <4 x float> %12044, %12069
  %12071 = shufflevector <4 x float> %11817, <4 x float> %12070, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %12072 = sext i32 %f125.s0.v3.v366.base193 to i64
  %12073 = sub nsw i64 %12072, %9239
  %12074 = getelementptr inbounds float, ptr %11519, i64 %12073
  store <8 x float> %12071, ptr %12074, align 4, !tbaa !72
  %lsr.iv.next441 = add i32 %lsr.iv440, -1
  %lsr.iv.next443 = add i32 %lsr.iv442, 8
  %.not85 = icmp eq i32 %lsr.iv.next441, 0
  br i1 %.not85, label %"consume f125194", label %"for f125.s0.v3.v3190"

"consume f125194":                                ; preds = %"for f125.s0.v3.v3190", %"produce f125189"
  br i1 %9242, label %"for local_laplacian.s0.v3.v3195.preheader", label %if.then.i283, !prof !5

"for local_laplacian.s0.v3.v3195.preheader":      ; preds = %"consume f125194"
  %12075 = add nsw i64 %9245, %indvars.iv304
  %12076 = mul nsw i64 %12075, %9244
  %12077 = sub i64 %12076, %8
  %a1146 = tail call i32 @llvm.smin.i32(i32 %b1149, i32 %9258)
  %12078 = tail call i32 @llvm.smax.i32(i32 %a1146, i32 %b1148)
  %12079 = mul nsw i32 %12078, %input.stride.1
  br label %"for local_laplacian.s0.v3.v3195"

"for local_laplacian.s0.v3.v3195":                ; preds = %"for local_laplacian.s0.v3.v3195.preheader", %"end for local_laplacian.s0.v5200"
  %local_laplacian.s0.v3.v3197 = phi i32 [ %12144, %"end for local_laplacian.s0.v5200" ], [ 0, %"for local_laplacian.s0.v3.v3195.preheader" ]
  br i1 %9243, label %"for local_laplacian.s0.v5199.preheader", label %"end for local_laplacian.s0.v5200", !prof !5

"for local_laplacian.s0.v5199.preheader":         ; preds = %"for local_laplacian.s0.v3.v3195"
  %12080 = shl nsw i32 %local_laplacian.s0.v3.v3197, 3
  %a1141 = add nsw i32 %12080, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base198 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1141)
  %12081 = sext i32 %local_laplacian.s0.v3.v277.base198 to i64
  %12082 = add i64 %lsr.iv446, %12081
  %scevgep448 = getelementptr i16, ptr %local_laplacian.host, i64 %12082
  %12083 = add i64 %12077, %12081
  %12084 = getelementptr inbounds float, ptr %f2.host, i64 %12083
  %12085 = load <8 x float>, ptr %12084, align 4, !tbaa !42
  %12086 = fadd <8 x float> %12085, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %12087 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base198, i64 0
  %12088 = shufflevector <8 x i32> %12087, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1149 = add nsw <8 x i32> %12088, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1148 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1151, <8 x i32> %a1149)
  %12089 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1148, <8 x i32> %b1150)
  %12090 = sub nsw i64 %12081, %9239
  %12091 = getelementptr inbounds float, ptr %11519, i64 %12090
  %12092 = load <8 x float>, ptr %12091, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5199"

if.then.i283:                                     ; preds = %"end for local_laplacian.s0.v5200", %"consume f125194"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %11519) #7
  %indvars.iv.next305 = add nuw nsw i64 %indvars.iv304, 1
  %lsr.iv.next447 = add i64 %lsr.iv446, %74
  %.not82 = icmp eq i64 %indvars.iv.next305, 64
  br i1 %.not82, label %if.then.i280, label %"produce f129143"

"for local_laplacian.s0.v5199":                   ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v5199.preheader"
  %lsr.iv449 = phi ptr [ %scevgep448, %"for local_laplacian.s0.v5199.preheader" ], [ %scevgep451, %"for local_laplacian.s0.v5199" ]
  %lsr.iv444 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5199.preheader" ], [ %lsr.iv.next445, %"for local_laplacian.s0.v5199" ]
  %a1145 = phi i32 [ %b1028, %"for local_laplacian.s0.v5199.preheader" ], [ %12143, %"for local_laplacian.s0.v5199" ]
  %a1144 = tail call i32 @llvm.smin.i32(i32 %b1147, i32 %a1145)
  %12093 = tail call i32 @llvm.smax.i32(i32 %a1144, i32 %b1146)
  %12094 = mul nsw i32 %12093, %input.stride.2
  %.scalar331 = add i32 %12094, %12079
  %.scalar332 = sub i32 %.scalar331, %9249
  %12095 = insertelement <8 x i32> undef, i32 %.scalar332, i64 0
  %12096 = shufflevector <8 x i32> %12095, <8 x i32> poison, <8 x i32> zeroinitializer
  %12097 = add <8 x i32> %12096, %12089
  %12098 = shufflevector <8 x i32> %12097, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12099 = sext <4 x i32> %12098 to <4 x i64>
  %12100 = extractelement <4 x i64> %12099, i64 0
  %12101 = getelementptr inbounds i16, ptr %input.host, i64 %12100
  %12102 = load i16, ptr %12101, align 2, !tbaa !40
  %12103 = insertelement <8 x i16> undef, i16 %12102, i64 0
  %12104 = extractelement <4 x i64> %12099, i64 1
  %12105 = getelementptr inbounds i16, ptr %input.host, i64 %12104
  %12106 = load i16, ptr %12105, align 2, !tbaa !40
  %12107 = insertelement <8 x i16> %12103, i16 %12106, i64 1
  %12108 = extractelement <4 x i64> %12099, i64 2
  %12109 = getelementptr inbounds i16, ptr %input.host, i64 %12108
  %12110 = load i16, ptr %12109, align 2, !tbaa !40
  %12111 = insertelement <8 x i16> %12107, i16 %12110, i64 2
  %12112 = extractelement <4 x i64> %12099, i64 3
  %12113 = getelementptr inbounds i16, ptr %input.host, i64 %12112
  %12114 = load i16, ptr %12113, align 2, !tbaa !40
  %12115 = insertelement <8 x i16> %12111, i16 %12114, i64 3
  %12116 = shufflevector <8 x i32> %12097, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12117 = sext <4 x i32> %12116 to <4 x i64>
  %12118 = extractelement <4 x i64> %12117, i64 0
  %12119 = getelementptr inbounds i16, ptr %input.host, i64 %12118
  %12120 = load i16, ptr %12119, align 2, !tbaa !40
  %12121 = insertelement <8 x i16> %12115, i16 %12120, i64 4
  %12122 = extractelement <4 x i64> %12117, i64 1
  %12123 = getelementptr inbounds i16, ptr %input.host, i64 %12122
  %12124 = load i16, ptr %12123, align 2, !tbaa !40
  %12125 = insertelement <8 x i16> %12121, i16 %12124, i64 5
  %12126 = extractelement <4 x i64> %12117, i64 2
  %12127 = getelementptr inbounds i16, ptr %input.host, i64 %12126
  %12128 = load i16, ptr %12127, align 2, !tbaa !40
  %12129 = insertelement <8 x i16> %12125, i16 %12128, i64 6
  %12130 = extractelement <4 x i64> %12117, i64 3
  %12131 = getelementptr inbounds i16, ptr %input.host, i64 %12130
  %12132 = load i16, ptr %12131, align 2, !tbaa !40
  %12133 = insertelement <8 x i16> %12129, i16 %12132, i64 7
  %12134 = uitofp <8 x i16> %12133 to <8 x float>
  %12135 = fmul <8 x float> %12134, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %12136 = fadd <8 x float> %12135, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %12137 = fmul <8 x float> %12092, %12136
  %a1143 = fdiv <8 x float> %12137, %12086
  %12138 = fcmp olt <8 x float> %a1143, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1142 = select <8 x i1> %12138, <8 x float> %a1143, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12139 = fcmp ogt <8 x float> %a1142, zeroinitializer
  %12140 = fmul <8 x float> %a1142, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %12141 = select <8 x i1> %12139, <8 x float> %12140, <8 x float> zeroinitializer
  %12142 = fptoui <8 x float> %12141 to <8 x i16>
  store <8 x i16> %12142, ptr %lsr.iv449, align 2, !tbaa !74
  %12143 = add nsw i32 %a1145, 1
  %lsr.iv.next445 = add i32 %lsr.iv444, -1
  %scevgep451 = getelementptr i1, ptr %lsr.iv449, i64 %9150
  %.not84 = icmp eq i32 %lsr.iv.next445, 0
  br i1 %.not84, label %"end for local_laplacian.s0.v5200", label %"for local_laplacian.s0.v5199"

"end for local_laplacian.s0.v5200":               ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v3.v3195"
  %12144 = add nuw nsw i32 %local_laplacian.s0.v3.v3197, 1
  %.not83 = icmp eq i32 %12144, %9241
  br i1 %.not83, label %if.then.i283, label %"for local_laplacian.s0.v3.v3195"
}

; Function Attrs: nounwind
define i32 @local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr #4 {
entry:
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %0 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %destructor_block

"assert succeeded":                               ; preds = %entry
  %.not1 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not1, label %"assert failed10", label %"assert succeeded11", !prof !4

destructor_block:                                 ; preds = %"assert succeeded11", %"assert failed10", %"assert failed"
  %1 = phi i32 [ %0, %"assert failed" ], [ %2, %"assert failed10" ], [ %__local_laplacian_result, %"assert succeeded11" ]
  ret i32 %1

"assert failed10":                                ; preds = %"assert succeeded"
  %2 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %destructor_block

"assert succeeded11":                             ; preds = %"assert succeeded"
  %__local_laplacian_result = tail call i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr nonnull %input.buffer, ptr nonnull %local_laplacian.buffer) #4
  br label %destructor_block
}

; Function Attrs: nounwind
define i32 @local_laplacian_argv(ptr nocapture readonly %0) local_unnamed_addr #4 {
entry:
  %1 = load ptr, ptr %0, align 8
  %2 = load i32, ptr %1, align 4
  %3 = getelementptr ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8
  %5 = load float, ptr %4, align 4
  %6 = getelementptr ptr, ptr %0, i64 2
  %7 = load ptr, ptr %6, align 8
  %8 = load float, ptr %7, align 4
  %9 = getelementptr ptr, ptr %0, i64 3
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %0, i64 4
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 @local_laplacian(i32 %2, float %5, float %8, ptr %10, ptr %12) #9
  ret i32 %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define nonnull ptr @local_laplacian_metadata() local_unnamed_addr #5 {
entry:
  ret ptr @local_laplacian_metadata_storage
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smin.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smax.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smin.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smax.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #6

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #3 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #4 = { nounwind }
attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nobuiltin nounwind }
attributes #8 = { nounwind memory(none) }
attributes #9 = { noinline }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 3.9.1 "}
!1 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!2 = !{i32 2, !"halide_mcpu", !"haswell"}
!3 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!4 = !{!"branch_weights", i32 0, i32 1073741824}
!5 = !{!"branch_weights", i32 1073741824, i32 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"f0", !8, i64 0}
!8 = !{!"Halide buffer"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !11, !10}
!13 = !{!14, !14, i64 0}
!14 = !{!"f75", !8, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"f76", !8, i64 0}
!17 = distinct !{!17, !10, !11}
!18 = distinct !{!18, !10}
!19 = !{!20, !20, i64 0}
!20 = !{!"f77", !8, i64 0}
!21 = distinct !{!21, !10, !11}
!22 = distinct !{!22, !10}
!23 = !{!24, !24, i64 0}
!24 = !{!"f78", !8, i64 0}
!25 = distinct !{!25, !10, !11}
!26 = distinct !{!26, !10}
!27 = !{!"branch_weights", i32 0, i32 -2147483648}
!28 = !{!29, !29, i64 0}
!29 = !{!"f10", !8, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"f132", !8, i64 0}
!32 = !{!33, !33, i64 0}
!33 = !{!"f9", !8, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"f131", !8, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"f8", !8, i64 0}
!38 = !{!39, !39, i64 0}
!39 = !{!"f130", !8, i64 0}
!40 = !{!41, !41, i64 0}
!41 = !{!"input", !8, i64 0}
!42 = !{!43, !43, i64 0}
!43 = !{!"f2", !8, i64 0}
!44 = !{!45, !45, i64 0}
!45 = !{!"f4", !8, i64 0}
!46 = !{!47, !47, i64 0}
!47 = !{!"f5", !8, i64 0}
!48 = !{!49, !49, i64 0}
!49 = !{!"f72", !8, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"f6", !8, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"f73", !8, i64 0}
!54 = !{!55, !55, i64 0}
!55 = !{!"f7", !8, i64 0}
!56 = !{!57, !57, i64 0}
!57 = !{!"f74", !8, i64 0}
!58 = distinct !{!58, !10, !11}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !10, !11}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !10, !11}
!63 = distinct !{!63, !10}
!64 = !{!65, !65, i64 0}
!65 = !{!"f129", !8, i64 0}
!66 = !{!67, !67, i64 0}
!67 = !{!"f128", !8, i64 0}
!68 = !{!69, !69, i64 0}
!69 = !{!"f127", !8, i64 0}
!70 = !{!71, !71, i64 0}
!71 = !{!"f126", !8, i64 0}
!72 = !{!73, !73, i64 0}
!73 = !{!"f125", !8, i64 0}
!74 = !{!75, !75, i64 0}
!75 = !{!"local_laplacian", !8, i64 0}
